{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MzMxMzA5", "number": 6111, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMjo1NDoxNVrODseFUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjoyNTozMlrOD8v2BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTU2ODE3OnYy", "diffSide": "RIGHT", "path": "http-server/src/test/java/org/triplea/modules/game/ConnectivityControllerTest.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMjo1NDoxNVrOF9V5RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0MDoxNFrOGEBEHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2NjE4MQ==", "bodyText": "The game entry and connectivity check happen effectively in parallel. There is no guarantee that the game entry will have been created. I think the IP to check needs to become an optional parameter to the connectivity check.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r399866181", "createdAt": "2020-03-29T22:54:15Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/test/java/org/triplea/modules/game/ConnectivityControllerTest.java", "diffHunk": "@@ -32,7 +34,9 @@ void checkConnectivityNegativeCase() {\n   @Test\n   void checkConnectivityPositiveCase() throws IOException {\n     openSocket();\n-    final boolean result = verifyEndpointReturningObject(client -> client.checkConnectivity(PORT));\n+    // TODO Setup GameEntry so that the server correctly checks the connectivity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba6f9d35bb30bef2e5086a6156eea8a889a014a7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2NzIxNA==", "bodyText": "Well the main difference now is that we no longer pass an IP/port to this endpoint.\nWe just pass a GameID, which then checks the LobbyGame entry for this id and checks the endpoint passed there.\nMaybe merging this endpoint with the game entry endpoint?", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r399867214", "createdAt": "2020-03-29T23:03:49Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/test/java/org/triplea/modules/game/ConnectivityControllerTest.java", "diffHunk": "@@ -32,7 +34,9 @@ void checkConnectivityNegativeCase() {\n   @Test\n   void checkConnectivityPositiveCase() throws IOException {\n     openSocket();\n-    final boolean result = verifyEndpointReturningObject(client -> client.checkConnectivity(PORT));\n+    // TODO Setup GameEntry so that the server correctly checks the connectivity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2NjE4MQ=="}, "originalCommit": {"oid": "ba6f9d35bb30bef2e5086a6156eea8a889a014a7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2OTUyMA==", "bodyText": "Hmm, I'd be concerned about a separation of concerns. It would be nice though to get that fast feedback when a game is posted that it cannot be accessed.\nWhat do you think about creating a second connectivity check endpoint and invoke that one with a slightly different payload?\nI didn't look at the full diff, @RoiEXLab , we're passing game id now? That might not be wise as there is no guarantee that create game will be invoked first, they happen on different threads.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r399869520", "createdAt": "2020-03-29T23:24:43Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/test/java/org/triplea/modules/game/ConnectivityControllerTest.java", "diffHunk": "@@ -32,7 +34,9 @@ void checkConnectivityNegativeCase() {\n   @Test\n   void checkConnectivityPositiveCase() throws IOException {\n     openSocket();\n-    final boolean result = verifyEndpointReturningObject(client -> client.checkConnectivity(PORT));\n+    // TODO Setup GameEntry so that the server correctly checks the connectivity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2NjE4MQ=="}, "originalCommit": {"oid": "ba6f9d35bb30bef2e5086a6156eea8a889a014a7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0OTUzNQ==", "bodyText": "@RoiEXLab having create game detect connectivity is pretty interesting. The error handling would be a bit more complex, as we can have multiple scenarios why a game could not be created. It certainly has the benefit though that a user does not wait the 5 or so seconds for the connectivity check to fire. It's worth investigating, and could lead to the removal of the connectivity check endpoint, which would be simpler.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r399949535", "createdAt": "2020-03-30T06:17:59Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/test/java/org/triplea/modules/game/ConnectivityControllerTest.java", "diffHunk": "@@ -32,7 +34,9 @@ void checkConnectivityNegativeCase() {\n   @Test\n   void checkConnectivityPositiveCase() throws IOException {\n     openSocket();\n-    final boolean result = verifyEndpointReturningObject(client -> client.checkConnectivity(PORT));\n+    // TODO Setup GameEntry so that the server correctly checks the connectivity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2NjE4MQ=="}, "originalCommit": {"oid": "ba6f9d35bb30bef2e5086a6156eea8a889a014a7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NzI1MA==", "bodyText": "@RoiEXLab thinking about it a bit more, another consideration - gameId is assigned by the serve when a game is created. You can't / don't pass a game id when creating a game. The server can also re-assign gameIds as well, or it is allowed to lose gameIds in which case a keep-alive will see a new gameId has been assigned.\nFWIW, passing in IP address to a new connectivity check endpoint, or doing the check on game create seem like the two best options you may have.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r400567250", "createdAt": "2020-03-31T00:08:29Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/test/java/org/triplea/modules/game/ConnectivityControllerTest.java", "diffHunk": "@@ -32,7 +34,9 @@ void checkConnectivityNegativeCase() {\n   @Test\n   void checkConnectivityPositiveCase() throws IOException {\n     openSocket();\n-    final boolean result = verifyEndpointReturningObject(client -> client.checkConnectivity(PORT));\n+    // TODO Setup GameEntry so that the server correctly checks the connectivity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2NjE4MQ=="}, "originalCommit": {"oid": "ba6f9d35bb30bef2e5086a6156eea8a889a014a7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyNTA1OQ==", "bodyText": "Ok @DanVanAtta coming back at this PR I think I'll go with the merge post and verify step option. However I have one question:\nHow do I change LobbyWatcherFeignClient#postGame(@HeaderMap Map<String, Object> headers, LobbyGame lobbyGame) to return a more complex object than string to signalize that something went wrong with the verification?\nOr should I just use a different HTTP status code for this?", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r406825059", "createdAt": "2020-04-10T16:05:50Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/test/java/org/triplea/modules/game/ConnectivityControllerTest.java", "diffHunk": "@@ -32,7 +34,9 @@ void checkConnectivityNegativeCase() {\n   @Test\n   void checkConnectivityPositiveCase() throws IOException {\n     openSocket();\n-    final boolean result = verifyEndpointReturningObject(client -> client.checkConnectivity(PORT));\n+    // TODO Setup GameEntry so that the server correctly checks the connectivity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2NjE4MQ=="}, "originalCommit": {"oid": "ba6f9d35bb30bef2e5086a6156eea8a889a014a7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NDkyNQ==", "bodyText": "Simply convert the return type to an object that can be converted to a JSON.\nCould you walk me through briefly your reasons for re-using postGame?\nIt is a trade-off, FWIW this is the pro/con list I can think of:\nPro:\n\nCan remove background thread that does connectivity check\nConnectivity failures could become more responsive\n\nCon:\n\nThere are at least two places where we post games. Both would need to handle the updated payload\nThe error code handling gets a bit tricky. First you need to be sure that the game id is returned null and you return an error code that indicates to the client the situation. This level of error checking / API contract is not the worst but it is intrinsically more complex\nhave to be careful of timing, the new game host server port may not yet be available until well after the 'post' call has completed. We'll need to find out if that was the reason for the connectivity check to have had the background thread and the very long delay before it is executed.\nBreak compatibility\nCould maybe lead us down a pattern of having postGame return an even more complex return payload. Can be a slippery slope to violating  interface segragation principle.\nServer side, every time a game is posted it'll always do a connectivity check, even if we do not want it. Clients reconnecting for example should not need the connectivity check. A callback from a 'postGame' endpoint could be considered an odd side effect.\n\nThinking about the timing issue now, and the last point of 'side-effects', and ease of update, I'd personally augment the connectivity check endpoint. I'm curious if you've different thoughts on this, if you see the pro list as much larger than I listed and perhaps the cons easier to solve than stated.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r406864925", "createdAt": "2020-04-10T17:40:14Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/test/java/org/triplea/modules/game/ConnectivityControllerTest.java", "diffHunk": "@@ -32,7 +34,9 @@ void checkConnectivityNegativeCase() {\n   @Test\n   void checkConnectivityPositiveCase() throws IOException {\n     openSocket();\n-    final boolean result = verifyEndpointReturningObject(client -> client.checkConnectivity(PORT));\n+    // TODO Setup GameEntry so that the server correctly checks the connectivity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2NjE4MQ=="}, "originalCommit": {"oid": "ba6f9d35bb30bef2e5086a6156eea8a889a014a7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI0NzE3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/InGameLobbyWatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozMzoxNVrOGECY4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozMzoxNVrOGECY4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4NjYyNQ==", "bodyText": "I think we might be a bit too heavy on callbacks here. At this point it might be better to have a single response object, notably 'errorReporter' and it handle the connectivity check failing. This is moot though if we do not combine postGame", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r406886625", "createdAt": "2020-04-10T18:33:15Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/InGameLobbyWatcher.java", "diffHunk": "@@ -52,14 +53,16 @@ private InGameLobbyWatcher(\n       final GameToLobbyConnection gameToLobbyConnection,\n       final Consumer<String> errorReporter,\n       final Consumer<String> reconnectionReporter,\n-      @Nullable final InGameLobbyWatcher oldWatcher) {\n+      @Nullable final InGameLobbyWatcher oldWatcher,\n+      final Consumer<Boolean> connectivityHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "716f5a6cba298bfa37795050353bbede6fceae22"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI1NDQyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/InGameLobbyWatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozNjowOVrOGECdeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozNjowOVrOGECdeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4NzgwMQ==", "bodyText": "The connectivity handler perhaps should only be invoked on a failed connectivity check. I think it would create a much tighter abstraction rather than leaking details of everything that is involved with connecting. EG:\nif(postGamREsponse.getErrorCode() == CONNECTIVITY_CHECK_FAILED) {\n  connectivityHandler.accept( ... error message ... );\n}\n\nI'm also a bit concerned that the gameId is in an odd state in this case as well. FWIW this is where the code flow is probably simpler if we have the two be separate.\nEG:\nif(!connectvitiyCheck.verify( ..)) {\n    connectivityHandler.accept( ... error message ... );\n    return;\n}\n\ngameId = gameToLobbyConnection.postGame(gameDescription.toLobbyGame());", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r406887801", "createdAt": "2020-04-10T18:36:09Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/InGameLobbyWatcher.java", "diffHunk": "@@ -113,7 +117,12 @@ private InGameLobbyWatcher(\n             .gameVersion(\"0\")\n             .build();\n \n-    gameId = gameToLobbyConnection.postGame(gameDescription.toLobbyGame());\n+    final PostGameResponse postGameResponse =\n+        gameToLobbyConnection.postGame(gameDescription.toLobbyGame());\n+\n+    gameId = postGameResponse.getGameId();\n+\n+    connectivityHandler.accept(postGameResponse.isSuccessfulConnectivityCheck());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "716f5a6cba298bfa37795050353bbede6fceae22"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI1OTk1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/LobbyWatcherKeepAliveTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozODoyNFrOGEChBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozODoyNFrOGEChBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4ODcxMQ==", "bodyText": "This should not be needed, if we cannot create an initial connection then we should not be getting into the keep alive tasks (and those should be cancelled already by a failed connectivity check). The overload of keep alive is concerning, doubles the endpoint and I think is a bit of a stretch on SRP.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r406888711", "createdAt": "2020-04-10T18:38:24Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/LobbyWatcherKeepAliveTask.java", "diffHunk": "@@ -33,7 +34,9 @@\n   /** Call this to send a keep-alive request to server. */\n   @Nonnull private final Predicate<String> keepAliveSender;\n   /** Call this to re-post the current game, obtains a new game id. */\n-  @Nonnull private final Supplier<String> gamePoster;\n+  @Nonnull private final Supplier<PostGameResponse> gamePoster;\n+  /** Call this to shutdown the client in case the server can't establish a connection. */\n+  @Nonnull private final Consumer<Boolean> connectivityHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "716f5a6cba298bfa37795050353bbede6fceae22"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI3OTUyOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/game/listing/GameListing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0NTo1OVrOGECtAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0NTo1OVrOGECtAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5MTc3OA==", "bodyText": "I think this is getting a bit confused. The API returns a \"here is your game id, but by the way, I cannot connect to your game!\"\nWe are relying on client behavior to shut down and send a disconnect message to delist, otherwise we are waiting for the keep alive to time out.\nThe server should probably not rely on client side implementation that heavily, if the connectivity check fails, we'd ideally not call the post game endpoint and/or not return a game id.\nIf we do not return a game-id, which arguably is more cohesive, then the keep-alive endpoint contract becomes less consistent.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r406891778", "createdAt": "2020-04-10T18:45:59Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/game/listing/GameListing.java", "diffHunk": "@@ -71,18 +77,24 @@ public static GameListing build(final Jdbi jdbi, final WebSocketMessagingBus pla\n                 GameListingClient.KEEP_ALIVE_SECONDS,\n                 TimeUnit.SECONDS,\n                 new GameTtlExpiredListener(playerMessagingBus)))\n+        .connectivityCheck(new ConnectivityCheck())\n         .build();\n   }\n \n   /** Adds a game. */\n-  String postGame(final ApiKey apiKey, final LobbyGame lobbyGame) {\n+  PostGameResponse postGame(final ApiKey apiKey, final LobbyGame lobbyGame) {\n     final String id = UUID.randomUUID().toString();\n     games.put(new GameId(apiKey, id), lobbyGame);\n     playerMessagingBus.broadcastMessage(\n         new LobbyGameUpdatedMessage(\n             LobbyGameListing.builder().gameId(id).lobbyGame(lobbyGame).build()));\n     log.info(\"Posted game: {}\", id);\n-    return id;\n+\n+    final boolean successfulCheck = connectivityCheck.test(getHostForGame(lobbyGame));\n+    return PostGameResponse.builder()\n+        .gameId(id)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "716f5a6cba298bfa37795050353bbede6fceae22"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTM2MzUxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/LobbyWatcherKeepAliveTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyMTozOVrOGEDhFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNjoxMlrOGEDniQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNTEwOQ==", "bodyText": "This can pose a major problem. Let's say a user disconnects from a network that has a direct connection to one that no longer does (which is about the only way you'd be able to create and post a game and then later have connectivity fail on a re-posting).\nIn that scenario the keep alive sender would no-op while disconnected, by design, but when we get a reconnection we would get a new game id and then the connectivity check would fail. The connectivity handler would then crash the game that is then in-progress. That game crash would be quite severe, no option to save, the game just closes down on you with an error message.\nOne could simply not do the connectivity check here, which gets into my point a bit about interface segregation principle. I'm certainly leaning to decoupling the functionality so that we don't have dead code on certain call paths. Otherwise if the two functionalities remain coupled, then we need a different error handler implementation to not crash an already-in-progress game.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r406905109", "createdAt": "2020-04-10T19:21:39Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/LobbyWatcherKeepAliveTask.java", "diffHunk": "@@ -45,7 +48,9 @@ public void run() {\n           reportReconnected();\n         }\n       } else {\n-        gameId = gamePoster.get();\n+        final PostGameResponse postGameResponse = gamePoster.get();\n+        gameId = postGameResponse.getGameId();\n+        connectivityHandler.accept(postGameResponse.isSuccessfulConnectivityCheck());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "716f5a6cba298bfa37795050353bbede6fceae22"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNTY5NA==", "bodyText": "IF post-game can return a nullable gameId, the state here becomes a bit more complex as we now have potential for a null game id. That updates the test scenarios we need to account for the increased state complexity", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r406905694", "createdAt": "2020-04-10T19:23:07Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/LobbyWatcherKeepAliveTask.java", "diffHunk": "@@ -45,7 +48,9 @@ public void run() {\n           reportReconnected();\n         }\n       } else {\n-        gameId = gamePoster.get();\n+        final PostGameResponse postGameResponse = gamePoster.get();\n+        gameId = postGameResponse.getGameId();\n+        connectivityHandler.accept(postGameResponse.isSuccessfulConnectivityCheck());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNTEwOQ=="}, "originalCommit": {"oid": "716f5a6cba298bfa37795050353bbede6fceae22"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNjc2MQ==", "bodyText": "Another item to consider with this code, we should not proceed to do another keep alive check if the connectivity check fails. The code here instead assumes the implementation of connectivityHandler will crash the game so that we do not proceed.\nTo keep the abstraction intact, we would probably want connectivity handler to be a predicate to return true/false if we should continue processing, but then again this code is already aware of the connectivity check result and probably could just no-op if the connectivity check is false. Messaging that well to a user is potentially a headache though.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r406906761", "createdAt": "2020-04-10T19:26:12Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/LobbyWatcherKeepAliveTask.java", "diffHunk": "@@ -45,7 +48,9 @@ public void run() {\n           reportReconnected();\n         }\n       } else {\n-        gameId = gamePoster.get();\n+        final PostGameResponse postGameResponse = gamePoster.get();\n+        gameId = postGameResponse.getGameId();\n+        connectivityHandler.accept(postGameResponse.isSuccessfulConnectivityCheck());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNTEwOQ=="}, "originalCommit": {"oid": "716f5a6cba298bfa37795050353bbede6fceae22"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTY5NTA1OnYy", "diffSide": "RIGHT", "path": "http-server/src/test/java/org/triplea/modules/game/ConnectivityControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMDoxMzoxNlrOGL8NPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMDoxMzoxNlrOGL8NPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE3Mzk0OA==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r415173948", "createdAt": "2020-04-26T00:13:16Z", "author": {"login": "codeclimate"}, "path": "http-server/src/test/java/org/triplea/modules/game/ConnectivityControllerTest.java", "diffHunk": "@@ -32,7 +34,9 @@ void checkConnectivityNegativeCase() {\n   @Test\n   void checkConnectivityPositiveCase() throws IOException {\n     openSocket();\n-    final boolean result = verifyEndpointReturningObject(client -> client.checkConnectivity(PORT));\n+    // TODO Setup GameEntry so that the server correctly checks the connectivity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b55a1d72edc93be8a1a8d1cc2b1ec94b9e2072"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU0MjQ4OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowMzoxNVrOGU2BmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowMzoxNVrOGU2BmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwOTg0OQ==", "bodyText": "This is an excellent naming change \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r424509849", "createdAt": "2020-05-13T15:03:15Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityCheck.java", "diffHunk": "@@ -1,27 +1,43 @@\n package org.triplea.modules.game;\n \n+import com.google.common.annotations.VisibleForTesting;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.net.Socket;\n import java.util.concurrent.TimeUnit;\n-import java.util.function.Predicate;\n import java.util.function.Supplier;\n import lombok.AccessLevel;\n import lombok.AllArgsConstructor;\n+import org.triplea.domain.data.ApiKey;\n+import org.triplea.modules.game.listing.GameListing;\n+\n+@AllArgsConstructor(access = AccessLevel.PACKAGE, onConstructor_ = @VisibleForTesting)\n+class ConnectivityCheck {\n \n-@AllArgsConstructor(access = AccessLevel.PACKAGE)\n-class ConnectivityCheck implements Predicate<InetSocketAddress> {\n   private final Supplier<Socket> socketSupplier;\n+  private final GameListing gameListing;\n+\n+  ConnectivityCheck(final GameListing gameListing) {\n+    this(Socket::new, gameListing);\n+  }\n+\n+  /** Verifies if a game exists with a given API key and gameId. */\n+  boolean gameExists(final ApiKey apiKey, final String gameId) {\n+    return gameListing.getHostForGame(apiKey, gameId).isPresent();\n+  }\n \n-  ConnectivityCheck() {\n-    this(Socket::new);\n+  /** Checks if the lobby can create a connection to a given game. */\n+  boolean canDoReverseConnect(final ApiKey apiKey, final String gameId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b72b03f8d4d7e72d6c93a85eaa857214981d3b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU1ODEwOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowNjozMVrOGU2LkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowNjozMVrOGU2LkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMjQwMQ==", "bodyText": "That's an important details as well \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r424512401", "createdAt": "2020-05-13T15:06:31Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityCheck.java", "diffHunk": "@@ -1,27 +1,43 @@\n package org.triplea.modules.game;\n \n+import com.google.common.annotations.VisibleForTesting;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.net.Socket;\n import java.util.concurrent.TimeUnit;\n-import java.util.function.Predicate;\n import java.util.function.Supplier;\n import lombok.AccessLevel;\n import lombok.AllArgsConstructor;\n+import org.triplea.domain.data.ApiKey;\n+import org.triplea.modules.game.listing.GameListing;\n+\n+@AllArgsConstructor(access = AccessLevel.PACKAGE, onConstructor_ = @VisibleForTesting)\n+class ConnectivityCheck {\n \n-@AllArgsConstructor(access = AccessLevel.PACKAGE)\n-class ConnectivityCheck implements Predicate<InetSocketAddress> {\n   private final Supplier<Socket> socketSupplier;\n+  private final GameListing gameListing;\n+\n+  ConnectivityCheck(final GameListing gameListing) {\n+    this(Socket::new, gameListing);\n+  }\n+\n+  /** Verifies if a game exists with a given API key and gameId. */\n+  boolean gameExists(final ApiKey apiKey, final String gameId) {\n+    return gameListing.getHostForGame(apiKey, gameId).isPresent();\n+  }\n \n-  ConnectivityCheck() {\n-    this(Socket::new);\n+  /** Checks if the lobby can create a connection to a given game. */\n+  boolean canDoReverseConnect(final ApiKey apiKey, final String gameId) {\n+    return gameListing\n+        .getHostForGame(apiKey, gameId)\n+        .map(this::testConnectivityToAddress)\n+        .orElse(false);\n   }\n \n-  @Override\n-  public boolean test(final InetSocketAddress address) {\n+  private boolean testConnectivityToAddress(final InetSocketAddress address) {\n     try (Socket s = socketSupplier.get()) {\n       s.connect(address, (int) TimeUnit.SECONDS.toMillis(10));\n-      return true;\n+      return s.isConnected();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b72b03f8d4d7e72d6c93a85eaa857214981d3b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU4NzQ4OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxMzowN1rOGU2e4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjoxNDo0M1rOGV3zbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNzM0Ng==", "bodyText": "This is something I have absolutely no experience with:\nBasically the result of canDoReverseConnect is false whenever the game does not exist, but that means nothing.\nI think I would've coded this in a way so canDoReverseConnect throws an exception whenever the game doesn't exist and map the exception to a http status code somehow.\nIs this something Dropwizard is designed to do, or do you think it's better the way it currently is?", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r424517346", "createdAt": "2020-05-13T15:13:07Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityController.java", "diffHunk": "@@ -40,9 +37,15 @@ public static ConnectivityController build(final GameListing gameListing) {\n       keys = {KeyPart.IP},\n       rates = {@Rate(limit = 10, duration = 1, timeUnit = TimeUnit.MINUTES)})\n   @RolesAllowed(UserRole.HOST)\n-  public boolean checkConnectivity(\n+  public Response checkConnectivity(\n       @Auth final AuthenticatedUser authenticatedUser, final String gameId) {\n-    return connectivityCheck.test(\n-        gameListing.getHostForGame(authenticatedUser.getApiKey(), gameId));\n+\n+    if (!connectivityCheck.gameExists(authenticatedUser.getApiKey(), gameId)) {\n+      return Response.status(400).build();\n+    }\n+\n+    return Response.ok()\n+        .entity(connectivityCheck.canDoReverseConnect(authenticatedUser.getApiKey(), gameId))\n+        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b72b03f8d4d7e72d6c93a85eaa857214981d3b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU4MzAyNg==", "bodyText": "There are exception mappers:\n\nhttps://github.com/triplea-game/triplea/blob/master/http-server/src/main/java/org/triplea/http/IllegalArgumentMapper.java\n\n  \n    \n      triplea/http-server/src/main/java/org/triplea/http/ServerApplication.java\n    \n    \n         Line 194\n      in\n      85825be\n    \n    \n    \n    \n\n        \n          \n           return ImmutableList.of(new IllegalArgumentMapper()); \n        \n    \n  \n\n\n\nSome caution needs to be taken with them as they can go bad if too heavily used. Essentially control-flow-by-exception-handling anti-pattern. Signalling error cases directly via response objects and letting the controller layer or service/module layer decide how to handle is generally more direct (after-all, an exception is a glorified go-to, for better or worse).\nThe game-id not being there is quite a problem. We would suspect it's a client error, hence 4xx is reasonable. We would not want users to be able to craft a curl command to generate server side 5xx's on demand.\ncanDoReverseConnect  not throwing is kinda useful as we allow its caller to decide if the situation is an error or not. It's the caller that has more context about whether the game-id is valid to begin with. It's a bit odd though as we ask the same module twice \"is this valid\", then \"try this\". It would probably be a bit more appropriate to have a service back the controller, have the server use a 'canDoReverseConnect' function and pass the function the game listing to use. I think that is probably getting to be a bit too over-engineered though.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r425583026", "createdAt": "2020-05-15T06:00:32Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityController.java", "diffHunk": "@@ -40,9 +37,15 @@ public static ConnectivityController build(final GameListing gameListing) {\n       keys = {KeyPart.IP},\n       rates = {@Rate(limit = 10, duration = 1, timeUnit = TimeUnit.MINUTES)})\n   @RolesAllowed(UserRole.HOST)\n-  public boolean checkConnectivity(\n+  public Response checkConnectivity(\n       @Auth final AuthenticatedUser authenticatedUser, final String gameId) {\n-    return connectivityCheck.test(\n-        gameListing.getHostForGame(authenticatedUser.getApiKey(), gameId));\n+\n+    if (!connectivityCheck.gameExists(authenticatedUser.getApiKey(), gameId)) {\n+      return Response.status(400).build();\n+    }\n+\n+    return Response.ok()\n+        .entity(connectivityCheck.canDoReverseConnect(authenticatedUser.getApiKey(), gameId))\n+        .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNzM0Ng=="}, "originalCommit": {"oid": "25b72b03f8d4d7e72d6c93a85eaa857214981d3b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU4NzU2Ng==", "bodyText": "or do you think it's better the way it currently is?\n\nI was typing a direct response to this and considered return a flag more deeply, namely \"Signalling error cases directly via response objects \". It turns out that becomes cleaner and resolve my concern where we are being very procedural with connectivity check, ie:\nconnectivity check, can you do this?\nif yes, connectivity check, please try X\n\nRather than:\nconnectivity check, do X\n\nThe update is I think a bit cleaner in the end: 1f624ba", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r425587566", "createdAt": "2020-05-15T06:14:43Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityController.java", "diffHunk": "@@ -40,9 +37,15 @@ public static ConnectivityController build(final GameListing gameListing) {\n       keys = {KeyPart.IP},\n       rates = {@Rate(limit = 10, duration = 1, timeUnit = TimeUnit.MINUTES)})\n   @RolesAllowed(UserRole.HOST)\n-  public boolean checkConnectivity(\n+  public Response checkConnectivity(\n       @Auth final AuthenticatedUser authenticatedUser, final String gameId) {\n-    return connectivityCheck.test(\n-        gameListing.getHostForGame(authenticatedUser.getApiKey(), gameId));\n+\n+    if (!connectivityCheck.gameExists(authenticatedUser.getApiKey(), gameId)) {\n+      return Response.status(400).build();\n+    }\n+\n+    return Response.ok()\n+        .entity(connectivityCheck.canDoReverseConnect(authenticatedUser.getApiKey(), gameId))\n+        .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNzM0Ng=="}, "originalCommit": {"oid": "25b72b03f8d4d7e72d6c93a85eaa857214981d3b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU5NTA5OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNDo1MFrOGU2kEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNTo1MzowMFrOGV3YqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODY3Mw==", "bodyText": "I'm always a bit suspicious when I see explicit 400 status codes, they always more or less hint on syntax errors.\nI think 404 might be a better choice here actually.\nSee https://httpstatuses.com/400 and https://httpstatuses.com/404", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r424518673", "createdAt": "2020-05-13T15:14:50Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityController.java", "diffHunk": "@@ -40,9 +37,15 @@ public static ConnectivityController build(final GameListing gameListing) {\n       keys = {KeyPart.IP},\n       rates = {@Rate(limit = 10, duration = 1, timeUnit = TimeUnit.MINUTES)})\n   @RolesAllowed(UserRole.HOST)\n-  public boolean checkConnectivity(\n+  public Response checkConnectivity(\n       @Auth final AuthenticatedUser authenticatedUser, final String gameId) {\n-    return connectivityCheck.test(\n-        gameListing.getHostForGame(authenticatedUser.getApiKey(), gameId));\n+\n+    if (!connectivityCheck.gameExists(authenticatedUser.getApiKey(), gameId)) {\n+      return Response.status(400).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b72b03f8d4d7e72d6c93a85eaa857214981d3b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3OTU3OQ==", "bodyText": "404 potentially has issues:\n\n'resource' generally means the URL resource (right?)\nwe won't be able to distinguish between an actual 404 and 404 due to bad data. For example, a common mistake is not register a controller with the ServerApplication. In such cases you get a 404 as the path you created is not actually listening.\n\nYou're right though about generic 400 being more syntax error @RoiEXLab .\n422 - unprocessable entity seems to fit the bill.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r425579579", "createdAt": "2020-05-15T05:49:30Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityController.java", "diffHunk": "@@ -40,9 +37,15 @@ public static ConnectivityController build(final GameListing gameListing) {\n       keys = {KeyPart.IP},\n       rates = {@Rate(limit = 10, duration = 1, timeUnit = TimeUnit.MINUTES)})\n   @RolesAllowed(UserRole.HOST)\n-  public boolean checkConnectivity(\n+  public Response checkConnectivity(\n       @Auth final AuthenticatedUser authenticatedUser, final String gameId) {\n-    return connectivityCheck.test(\n-        gameListing.getHostForGame(authenticatedUser.getApiKey(), gameId));\n+\n+    if (!connectivityCheck.gameExists(authenticatedUser.getApiKey(), gameId)) {\n+      return Response.status(400).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODY3Mw=="}, "originalCommit": {"oid": "25b72b03f8d4d7e72d6c93a85eaa857214981d3b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU4MDcxMg==", "bodyText": "Updated to 422: 27e3415", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r425580712", "createdAt": "2020-05-15T05:53:00Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityController.java", "diffHunk": "@@ -40,9 +37,15 @@ public static ConnectivityController build(final GameListing gameListing) {\n       keys = {KeyPart.IP},\n       rates = {@Rate(limit = 10, duration = 1, timeUnit = TimeUnit.MINUTES)})\n   @RolesAllowed(UserRole.HOST)\n-  public boolean checkConnectivity(\n+  public Response checkConnectivity(\n       @Auth final AuthenticatedUser authenticatedUser, final String gameId) {\n-    return connectivityCheck.test(\n-        gameListing.getHostForGame(authenticatedUser.getApiKey(), gameId));\n+\n+    if (!connectivityCheck.gameExists(authenticatedUser.getApiKey(), gameId)) {\n+      return Response.status(400).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODY3Mw=="}, "originalCommit": {"oid": "25b72b03f8d4d7e72d6c93a85eaa857214981d3b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDI1MDI4OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjoyNTozMlrOGV4Bww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjo0Mzo1N1rOGV4bkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5MTIzNQ==", "bodyText": "Much better IMO \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r425591235", "createdAt": "2020-05-15T06:25:32Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityController.java", "diffHunk": "@@ -38,11 +38,21 @@ public static ConnectivityController build() {\n       keys = {KeyPart.IP},\n       rates = {@Rate(limit = 10, duration = 1, timeUnit = TimeUnit.MINUTES)})\n   @RolesAllowed(UserRole.HOST)\n-  public boolean checkConnectivity(@Context final HttpServletRequest request, final Integer port) {\n-    Preconditions.checkArgument(port > 0, \"Port must be a positive number, was: \" + port);\n-    Preconditions.checkArgument(\n-        port < Math.pow(2, 16), \"Port must be less than max value (2^16), was: \" + port);\n+  public Response checkConnectivity(\n+      @Auth final AuthenticatedUser authenticatedUser, final String gameId) {\n \n-    return connectivityCheck.test(new InetSocketAddress(request.getRemoteAddr(), port));\n+    final ConnectivityCheck.ReverseConnectionResult result =\n+        connectivityCheck.canDoReverseConnect(authenticatedUser.getApiKey(), gameId);\n+\n+    switch (result) {\n+      case SUCCESS:\n+        return Response.ok().entity(true).build();\n+      case FAILED:\n+        return Response.ok().entity(false).build();\n+      case GAME_ID_NOT_FOUND:\n+        return Response.status(HttpStatus.UNPROCESSABLE_ENTITY_422).build();\n+      default:\n+        throw new IllegalStateException(\"Switch case not handled: \" + result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f624bad563b7f87da8a8982fba50e8821628168"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5Nzg0MQ==", "bodyText": "Agree, particularly getting the logic out of the controller.", "url": "https://github.com/triplea-game/triplea/pull/6111#discussion_r425597841", "createdAt": "2020-05-15T06:43:57Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/game/ConnectivityController.java", "diffHunk": "@@ -38,11 +38,21 @@ public static ConnectivityController build() {\n       keys = {KeyPart.IP},\n       rates = {@Rate(limit = 10, duration = 1, timeUnit = TimeUnit.MINUTES)})\n   @RolesAllowed(UserRole.HOST)\n-  public boolean checkConnectivity(@Context final HttpServletRequest request, final Integer port) {\n-    Preconditions.checkArgument(port > 0, \"Port must be a positive number, was: \" + port);\n-    Preconditions.checkArgument(\n-        port < Math.pow(2, 16), \"Port must be less than max value (2^16), was: \" + port);\n+  public Response checkConnectivity(\n+      @Auth final AuthenticatedUser authenticatedUser, final String gameId) {\n \n-    return connectivityCheck.test(new InetSocketAddress(request.getRemoteAddr(), port));\n+    final ConnectivityCheck.ReverseConnectionResult result =\n+        connectivityCheck.canDoReverseConnect(authenticatedUser.getApiKey(), gameId);\n+\n+    switch (result) {\n+      case SUCCESS:\n+        return Response.ok().entity(true).build();\n+      case FAILED:\n+        return Response.ok().entity(false).build();\n+      case GAME_ID_NOT_FOUND:\n+        return Response.status(HttpStatus.UNPROCESSABLE_ENTITY_422).build();\n+      default:\n+        throw new IllegalStateException(\"Switch case not handled: \" + result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5MTIzNQ=="}, "originalCommit": {"oid": "1f624bad563b7f87da8a8982fba50e8821628168"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2398, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}