{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTg3NzY0", "number": 6487, "title": "Store forum token instead of password", "bodyText": "This is what I was able to come up with from #6452\nThis PR is a WIP, but I wanted to hear your thoughts on the UI decisions.\nBasically the user never really gets to see the token and we only store the username for display purposes, so the user can tell their settings have some sort of credentials stored.\nWe also store a uid to be able to properly revoke the token again.\nWhenever a user clicks \"save\" now in engine preferences, we make a request to the proper forum and create a new token. There's no UI mechanism in NodeBB for this outside of the admin panel. Tokens are revoked if\n\nA User creates a new token aka changes their username in the UI and clicks save\nThe Setting is cleared.\n\nThis has 2 benefits:\n\nIt works with 2FA which is the main goal of this PR\nWe no longer have to store any forum password, just a random token which is huge for security (maybe we want to consider explicitly clearing stored passwords to prevent them from floating around in the registry?)\n\nOpen question: How should we implement this on the \"on screen\"/not-engine-preferences login fields? Same UI like the engine preferences or just a pre-filled token field?\nFunctional Changes\n\n[] New map or map update\n[] New Feature\n[x] Feature update or enhancement\n[] Feature Removal\n[] Code Cleanup or refactor\n[] Configuration Change\n[] Problem fix:  \n[] Other:   \nTesting\n\nI verified basic posting works with this new approach.\n\n\n\n\nRelease Note\n\nFeature|Support for 2FA for PbF\nEnhancement|PbF now stores login tokens instead of passwords\nFix|Usernames with spaces work for PbF", "createdAt": "2020-05-17T23:00:57Z", "url": "https://github.com/triplea-game/triplea/pull/6487", "merged": true, "mergeCommit": {"oid": "81ca16089bd442b88d9847e92bcd9d5356171e78"}, "closed": true, "closedAt": "2020-07-11T18:52:53Z", "author": {"login": "RoiEXLab"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciTfx-gFqTQxMzIwNzQzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABczj_0KAFqTQ0NjQxOTI2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjA3NDMw", "url": "https://github.com/triplea-game/triplea/pull/6487#pullrequestreview-413207430", "createdAt": "2020-05-17T23:02:25Z", "commit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzowMjoyNVrOGWkMBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzowMjoyNVrOGWkMBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxNDc1Nw==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426314757", "createdAt": "2020-05-17T23:02:25Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(\n+              \"Fetching Login Token...\",\n+              () -> {\n+                final NodeBbTokenGenerator tokenGenerator = new NodeBbTokenGenerator(forumUrl);\n+                final Optional<Integer> oldUserId = uidSetting.getValue();\n+                final Optional<char[]> oldToken = tokenSetting.getValue();\n+                if (!usernameField.getText().isEmpty()) {\n+                  final TokenInfo tokenInfo =\n+                      tokenGenerator.generateToken(\n+                          usernameField.getText(),\n+                          new String(passwordField.getPassword()),\n+                          Strings.emptyToNull(otpField.getText()));\n+                  context.setValue(uidSetting, tokenInfo.getUserId());\n+\n+                  context.setValue(tokenSetting, tokenInfo.getToken().toCharArray());\n+\n+                  context.setValue(usernameSetting, usernameField.getText().toCharArray());\n+                  // TODO error reporting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjA3ODg2", "url": "https://github.com/triplea-game/triplea/pull/6487#pullrequestreview-413207886", "createdAt": "2020-05-17T23:08:26Z", "commit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzowODoyNlrOGWkN0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzowODoyNlrOGWkN0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxNTIxNg==", "bodyText": "This class is just band-aided so I could use the \"Test PbF\" button and everything compiles properly.\nThis will obviously change in the final verison of this PR, but I haven't had them time for everything today.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426315216", "createdAt": "2020-05-17T23:08:26Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditorViewModel.java", "diffHunk": "@@ -120,7 +120,10 @@ synchronized void setTopicId(final String topicId) {\n   }\n \n   synchronized boolean areFieldsValid() {\n-    return isTopicIdValid() && isForumUsernameValid() && isForumPasswordValid();\n+    return isTopicIdValid()\n+        && ((isForumUsernameValid() && isForumPasswordValid())\n+            || ClientSetting.aaForumToken.isSet()\n+            || ClientSetting.tripleaForumToken.isSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjA4MDQz", "url": "https://github.com/triplea-game/triplea/pull/6487#pullrequestreview-413208043", "createdAt": "2020-05-17T23:10:50Z", "commit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzoxMDo1MFrOGWkOhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzoxMDo1MFrOGWkOhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxNTM5Ng==", "bodyText": "I will properly clear any char arrays in the final form as well, even though I'm not sure if actually encrypting everything is that important now", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426315396", "createdAt": "2020-05-17T23:10:50Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -724,14 +727,28 @@ public void reset() {\n     };\n   }\n \n+  /**\n+   * Creates UI Controls to fetch a login token and safely store it in the ClientSettings.\n+   *\n+   * @param uidSetting The uid setting used to potentially revoke old tokens\n+   * @param usernameSetting The setting that stores the username being displayed to the user\n+   * @param tokenSetting The setting that stores the actual token.\n+   * @return A SelectionComponent that allows users to easily store their token.\n+   */\n   static SelectionComponent<JComponent> forumPosterSettings(\n-      final ClientSetting<char[]> usernameSetting, final ClientSetting<char[]> passwordSetting) {\n+      final String forumUrl,\n+      final ClientSetting<Integer> uidSetting,\n+      final ClientSetting<char[]> usernameSetting,\n+      final ClientSetting<char[]> tokenSetting) {\n     return new SelectionComponent<>() {\n \n       private final JTextField usernameField =\n-          new JTextField(credentialToString(usernameSetting::getValue), 20);\n-      private final JPasswordField passwordField =\n-          new JPasswordField(credentialToString(passwordSetting::getValue), 20);\n+          new JTextFieldBuilder()\n+              .columns(20)\n+              .text(usernameSetting.getValue().map(String::new).orElse(\"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjE3NDc1", "url": "https://github.com/triplea-game/triplea/pull/6487#pullrequestreview-413217475", "createdAt": "2020-05-18T00:38:40Z", "commit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozODo0MVrOGWkxVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo1NTozOFrOGWk5pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDMxMA==", "bodyText": "If I understand correctly, we'll use 'username' + 'password' to create a token via API, then store that token but not the password (correct?).\nIf so, I think we probably want this field to check if the token is set. If the token is set, then we can fill in the password field with a dummy value to make it look like there is something filled in (that should be essentially what we have now - the reason for that is so we don't have to read the password from settings and set the actual value to the text field. Instead we use a dummy string to show that the field is set).", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426324310", "createdAt": "2020-05-18T00:38:41Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditorViewModel.java", "diffHunk": "@@ -88,10 +88,10 @@ synchronized void setForumSelection(final String forumSelection) {\n         this.forumSelection.equals(NodeBbForumPoster.TRIPLEA_FORUM_DISPLAY_NAME)\n             ? ClientSetting.tripleaForumUsername.getValue().map(String::valueOf).orElse(\"\")\n             : ClientSetting.aaForumUsername.getValue().map(String::valueOf).orElse(\"\");\n-    forumPasswordIsSet =\n+    forumPasswordIsSet = false; /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDU3Nw==", "bodyText": "Any thoughts to first, or as part of this PR, to convert the http client to Feign?\nI mention that for a few reasons:\n\nthe different styles/technologies for http communication is inconsistent. It's one of the technology consistencies that a project really should try to keep so you limit how many technologies you need to learn and how many different patterns there are for doing something.\nthe test infrastructure for http communication with feign client is pretty straight forward. At this point with wiremock, we should be testing this client, going to a consistent pattern and using the same technological infrastructure would make that easy.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426324577", "createdAt": "2020-05-18T00:40:43Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDkzNA==", "bodyText": "ignore error is a bit scary \ud83d\ude01\nShould we at least info log them? Have you seen this throw errors?", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426324934", "createdAt": "2020-05-18T00:43:52Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNTE2Nw==", "bodyText": "Bit nitpicky, I think we should try to avoid jsonObject. The debian variant of TripleA ripped these out, the lack of type-safety is not great. Going to Feign makes this mapping to Java object automatic. If migrating to Feign, this would be moot, otherwise have you considered using GSON?", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426325167", "createdAt": "2020-05-18T00:45:49Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close\n+  }\n+\n+  private int getUserId(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final Map<?, ?> jsonObject = queryUserInfo(client, username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNTM1OA==", "bodyText": "nit, we probably want to take care about exception types. Exceptions that we may show to users we would want to be probably first-class exceptions. Maybe even more ideally not exceptions at all. For example this checkUser method could return a status flag, that would eliminate control-flow-by-exception. What do you think?", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426325358", "createdAt": "2020-05-18T00:47:06Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close\n+  }\n+\n+  private int getUserId(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final Map<?, ?> jsonObject = queryUserInfo(client, username);\n+    checkUser(jsonObject, username);\n+    return (Integer) jsonObject.get(\"uid\");\n+  }\n+\n+  private void checkUser(final Map<?, ?> jsonObject, final String username) {\n+    if (!jsonObject.containsKey(\"uid\")) {\n+      throw new IllegalStateException(String.format(\"User %s doesn't exist.\", username));\n+    }\n+    if (1 == (Integer) jsonObject.get(\"banned\")) {\n+      throw new IllegalStateException(\"Your account is banned from the forum.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNTU5OA==", "bodyText": "I know we had the discussion about passwords as String being security theater. IMO if we can keep passwords as char[] without too much trouble, it's not a bad thing. Said another way, if we don't have to go too far out of our way to use char[] for password, we probably should.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426325598", "createdAt": "2020-05-18T00:49:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(\n+              \"Fetching Login Token...\",\n+              () -> {\n+                final NodeBbTokenGenerator tokenGenerator = new NodeBbTokenGenerator(forumUrl);\n+                final Optional<Integer> oldUserId = uidSetting.getValue();\n+                final Optional<char[]> oldToken = tokenSetting.getValue();\n+                if (!usernameField.getText().isEmpty()) {\n+                  final TokenInfo tokenInfo =\n+                      tokenGenerator.generateToken(\n+                          usernameField.getText(),\n+                          new String(passwordField.getPassword()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNTgzMQ==", "bodyText": "Side-note, we really need to update BackTasRunner to be closeable. If anything crashes  while this is running we can run into problems. Notably if any exception is uncaught, then is handled and shows the error dialog, the background task will not complete until the dialog is closed and the dialog cannot be closed because the background task runner is modal and does not give up UI focus.\nWe'll probably want to test this out and/or fix the background task runner. We could see problems if the lobby were not responding or is being restarted, in such a case we'd want a graceful failure.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426325831", "createdAt": "2020-05-18T00:50:53Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNjExNg==", "bodyText": "Perhaps we want to use isBlank() instead of isEmpty().\nDo we currently already enforce a minimum length check on usename before the 'save' button is enabled? It might be the case that we've already guaranteed that there is a non-empty value that is of a minimum length before we hit this code which would make this validation redundant.\nSide-comment, redundant client-side validation can generally be removed. If someone hacks it up so a button is enabled without validation, they can hack this. Server validation needs to be redundant in case a client hacks out the validation (or is just using straight-up curl or something similar).", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426326116", "createdAt": "2020-05-18T00:53:07Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(\n+              \"Fetching Login Token...\",\n+              () -> {\n+                final NodeBbTokenGenerator tokenGenerator = new NodeBbTokenGenerator(forumUrl);\n+                final Optional<Integer> oldUserId = uidSetting.getValue();\n+                final Optional<char[]> oldToken = tokenSetting.getValue();\n+                if (!usernameField.getText().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNjQzNg==", "bodyText": "I don't think username should be a char[], IMO it's just not sensitive enough. Does it make sense changing username to be a String value before, after or in this PR?", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426326436", "createdAt": "2020-05-18T00:55:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(\n+              \"Fetching Login Token...\",\n+              () -> {\n+                final NodeBbTokenGenerator tokenGenerator = new NodeBbTokenGenerator(forumUrl);\n+                final Optional<Integer> oldUserId = uidSetting.getValue();\n+                final Optional<char[]> oldToken = tokenSetting.getValue();\n+                if (!usernameField.getText().isEmpty()) {\n+                  final TokenInfo tokenInfo =\n+                      tokenGenerator.generateToken(\n+                          usernameField.getText(),\n+                          new String(passwordField.getPassword()),\n+                          Strings.emptyToNull(otpField.getText()));\n+                  context.setValue(uidSetting, tokenInfo.getUserId());\n+\n+                  context.setValue(tokenSetting, tokenInfo.getToken().toCharArray());\n+\n+                  context.setValue(usernameSetting, usernameField.getText().toCharArray());\n+                  // TODO error reporting\n+                } else {\n+                  context.setValue(usernameSetting, null);\n+                  context.setValue(uidSetting, null);\n+                  context.setValue(tokenSetting, null);\n+                }\n+\n+                oldUserId.ifPresent(\n+                    userId ->\n+                        oldToken.ifPresent(\n+                            token -> tokenGenerator.revokeToken(new String(token), userId)));\n+              });\n+        } catch (final InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+        }\n+\n+        /*final String username = usernameField.getText();\n+        context.setValue(uidSetting, username.isEmpty() ? null : username.toCharArray());\n         withSensitiveArray(\n             passwordField::getPassword,\n             password ->\n                 context.setValue(\n                     passwordSetting,\n                     (password.length == 0) ? null : password,\n-                    SaveContext.ValueSensitivity.SENSITIVE));\n+                    SaveContext.ValueSensitivity.SENSITIVE));*/\n       }\n \n       @Override\n       public void resetToDefault() {\n-        usernameField.setText(credentialToString(usernameSetting::getDefaultValue));\n-        passwordField.setText(credentialToString(passwordSetting::getDefaultValue));\n+        usernameField.setText(\"\");\n+        passwordField.setText(\"\");\n       }\n \n       @Override\n       public void reset() {\n-        usernameField.setText(credentialToString(usernameSetting::getValue));\n-        passwordField.setText(credentialToString(passwordSetting::getValue));\n+        usernameField.setText(usernameSetting.getValue().map(String::new).orElse(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb093cc5c57d43530e33fb1898648cc9ae4d16fc", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/eb093cc5c57d43530e33fb1898648cc9ae4d16fc", "committedDate": "2020-06-26T12:28:40Z", "message": "Store Token instead of password"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95687b7a231694113d69eb5df5237af2f015e561", "author": {"user": {"login": "tripleabuilderbot", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/95687b7a231694113d69eb5df5237af2f015e561", "committedDate": "2020-06-26T12:30:11Z", "message": "Auto-Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b4d5b174317f461d90053e32142b3dfd480c748", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/5b4d5b174317f461d90053e32142b3dfd480c748", "committedDate": "2020-06-26T12:30:11Z", "message": "Properly reset value"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/ab9c619722afdf840cb943a271451a4e26799170", "committedDate": "2020-05-17T22:49:58Z", "message": "Properly reset value"}, "afterCommit": {"oid": "5b4d5b174317f461d90053e32142b3dfd480c748", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/5b4d5b174317f461d90053e32142b3dfd480c748", "committedDate": "2020-06-26T12:30:11Z", "message": "Properly reset value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "203ff3bdcbe708f72c09311df3a743aa7d02f157", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/203ff3bdcbe708f72c09311df3a743aa7d02f157", "committedDate": "2020-06-26T12:39:17Z", "message": "Correctly encode username\n\nFixes #6737"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "234872820434c4e7e40d7533c9f34ab67b7b1da0", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/234872820434c4e7e40d7533c9f34ab67b7b1da0", "committedDate": "2020-06-26T13:18:43Z", "message": "Fix band-aided code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2091b68f4fda1b947e271b9970ef1156c920304b", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/2091b68f4fda1b947e271b9970ef1156c920304b", "committedDate": "2020-06-26T13:39:24Z", "message": "Request Token when actually requiring it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b109b6a1bd45a3eddb5a9a9a18e974b7e562eec2", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/b109b6a1bd45a3eddb5a9a9a18e974b7e562eec2", "committedDate": "2020-06-26T13:48:53Z", "message": "Add 2FA support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2135f08ec5098de8d253f89eb9e5281efd43b763", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/2135f08ec5098de8d253f89eb9e5281efd43b763", "committedDate": "2020-06-26T13:55:31Z", "message": "Pre-Fill remember password checkbox if already remembered"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzE3OTkx", "url": "https://github.com/triplea-game/triplea/pull/6487#pullrequestreview-438317991", "createdAt": "2020-06-26T13:57:41Z", "commit": {"oid": "2135f08ec5098de8d253f89eb9e5281efd43b763"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo1Nzo0MVrOGph7Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo1Nzo0MVrOGph7Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMDY3MQ==", "bodyText": "We no longer store passwords, so we have to go for something. Thoughts regarding the recent events? @DanVanAtta", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446200671", "createdAt": "2020-06-26T13:57:41Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditorViewModel.java", "diffHunk": "@@ -7,19 +7,27 @@\n import games.strategy.engine.framework.startup.ui.posted.game.HelpTexts;\n import games.strategy.engine.framework.startup.ui.posted.game.pbf.test.post.SwingTestPostProgressDisplayFactory;\n import games.strategy.engine.framework.startup.ui.posted.game.pbf.test.post.TestPostAction;\n+import games.strategy.engine.framework.ui.background.BackgroundTaskRunner;\n import games.strategy.engine.posted.game.pbf.IForumPoster;\n import games.strategy.engine.posted.game.pbf.NodeBbForumPoster;\n+import games.strategy.engine.posted.game.pbf.NodeBbTokenGenerator;\n+import games.strategy.triplea.UrlConstants;\n import games.strategy.triplea.settings.ClientSetting;\n+import java.nio.CharBuffer;\n+import java.util.Arrays;\n import java.util.Optional;\n import java.util.function.BiConsumer;\n import java.util.function.Predicate;\n import lombok.Getter;\n import lombok.Setter;\n+import org.triplea.java.Interruptibles;\n import org.triplea.java.Postconditions;\n import org.triplea.java.StringUtils;\n import org.triplea.java.ViewModelListener;\n \n class ForumPosterEditorViewModel {\n+  private static final int DUMMY_PASSWORD_LENGTH = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2135f08ec5098de8d253f89eb9e5281efd43b763"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzI2MTgx", "url": "https://github.com/triplea-game/triplea/pull/6487#pullrequestreview-438326181", "createdAt": "2020-06-26T14:07:51Z", "commit": {"oid": "2135f08ec5098de8d253f89eb9e5281efd43b763"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDowNzo1MVrOGpiS6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDowNzo1MVrOGpiS6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwNjY5Ng==", "bodyText": "Note this fix for #6737 I added", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446206696", "createdAt": "2020-06-26T14:07:51Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close\n+  }\n+\n+  private int getUserId(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final Map<?, ?> jsonObject = queryUserInfo(client, username);\n+    checkUser(jsonObject, username);\n+    return (Integer) jsonObject.get(\"uid\");\n+  }\n+\n+  private void checkUser(final Map<?, ?> jsonObject, final String username) {\n+    if (!jsonObject.containsKey(\"uid\")) {\n+      throw new IllegalStateException(String.format(\"User %s doesn't exist.\", username));\n+    }\n+    if (1 == (Integer) jsonObject.get(\"banned\")) {\n+      throw new IllegalStateException(\"Your account is banned from the forum.\");\n+    }\n+    if (1 != (Integer) jsonObject.get(\"email:confirmed\")) {\n+      throw new IllegalStateException(\"Your email isn't confirmed yet!\");\n+    }\n+  }\n+\n+  private Map<?, ?> queryUserInfo(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final String encodedUsername = URLEncoder.encode(username, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2135f08ec5098de8d253f89eb9e5281efd43b763"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0648341b727a9f6e7a3e002d4563498d070ea108", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/0648341b727a9f6e7a3e002d4563498d070ea108", "committedDate": "2020-06-26T14:12:03Z", "message": "Fix test compilation errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a904cc66bffb94b4174d07caa72206d41c42e17c", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/a904cc66bffb94b4174d07caa72206d41c42e17c", "committedDate": "2020-06-26T14:36:48Z", "message": "Fix test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61057e7eb37e0fe4d2b6767aaa651429de9b6df7", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/61057e7eb37e0fe4d2b6767aaa651429de9b6df7", "committedDate": "2020-06-26T14:49:37Z", "message": "Make tests headless friendly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/73faf150fe74965ee5176e114f31438b97d53e4f", "committedDate": "2020-06-26T15:13:50Z", "message": "Make var final"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODMwMjU0", "url": "https://github.com/triplea-game/triplea/pull/6487#pullrequestreview-438830254", "createdAt": "2020-06-29T00:37:38Z", "commit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMDozNzozOFrOGqBn3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMDo0MDowOVrOGqBpXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxOTk2Ng==", "bodyText": "otp is not that well known of an acronym. What is it spelled out?\nCan we add a help text or box next to this as well to explain what this is for a user? We do want people to use this after all. If we look at the 1.9 PBF menu, we can see that the game explained pretty much all the options quite well. This meant any user could learn how to use PBF, even if it was kinda clunky.\n2FA OTP-code is a bit cryptic to even me. I think we'll need to help users a bit more, and/or explain when/why they'd want to use this. I'm a bit curious myself when we would want to use OTP code and not just use passwords.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446719966", "createdAt": "2020-06-29T00:37:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -41,13 +41,15 @@\n   private final JTextField usernameField = new JTextField();\n   private final JLabel passwordLabel = new JLabel(\"Forum Password\");\n   private final JPasswordField passwordField = new JPasswordField();\n+  private final JLabel otpLabel = new JLabel(\"2FA OTP-Code (optional)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyMDE3OQ==", "bodyText": "nit, view should not be doing logic if it has a view model. The view model should be the one that owns the full logic of when 'rememberPassword' is selected.\nWould recommend to fix by moving the logic to view model, EG:\nrememberPassword.setSelected(viewModel.isRememberPasswordSelected());", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446720179", "createdAt": "2020-06-29T00:39:00Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -63,6 +65,10 @@\n     super(new GridBagLayout());\n     this.viewModel = viewModel;\n     viewModel.setView(this);\n+    // If password is already stored we already remember\n+    if (viewModel.isForumPasswordValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyMDM1MA==", "bodyText": "Could use a javadoc on this class IMO to explain it's general usage and how it works.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446720350", "createdAt": "2020-06-29T00:40:09Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5890bdeaab62d61cc37b6204ac580f62ea8dc43d", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/5890bdeaab62d61cc37b6204ac580f62ea8dc43d", "committedDate": "2020-06-29T23:49:28Z", "message": "Use isBlank() instead of isEmpty()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2619e0b8611b1c851c39388bc7214d91d4dec48f", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/2619e0b8611b1c851c39388bc7214d91d4dec48f", "committedDate": "2020-06-29T23:49:41Z", "message": "Add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e21fdaccdfc3712e3262af06f8f47244ac68322", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/3e21fdaccdfc3712e3262af06f8f47244ac68322", "committedDate": "2020-07-10T13:45:51Z", "message": "Merge branch 'master' into store-forum-token"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDE5MjM5", "url": "https://github.com/triplea-game/triplea/pull/6487#pullrequestreview-446419239", "createdAt": "2020-07-10T13:52:34Z", "commit": {"oid": "3e21fdaccdfc3712e3262af06f8f47244ac68322"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNFrOGv4OeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNFrOGv4OeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NzQ2NQ==", "bodyText": "Codacy found an issue: Avoid throwing raw exception types.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r452857465", "createdAt": "2020-07-10T13:52:34Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+/**\n+ * Helper class containing the necessary logic to fetch and revoke login tokens for NodeBB forum\n+ * software.\n+ */\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  /**\n+   * Data class used to wrap a newly generated token and the {@link #userId} the token was created\n+   * for in a single object.\n+   */\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  /**\n+   * Generates a NodeBB login token.\n+   *\n+   * @param username The username to create the token for.\n+   * @param password The password used by the user to login.\n+   * @param otp (optional, can be null) The One-Time-Password in case the User has 2FA enabled for\n+   *     their account.\n+   * @return The {@link TokenInfo} object containing the newly generated token and the associated\n+   *     userId of the provided username.\n+   */\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e21fdaccdfc3712e3262af06f8f47244ac68322"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDE5MjUz", "url": "https://github.com/triplea-game/triplea/pull/6487#pullrequestreview-446419253", "createdAt": "2020-07-10T13:52:35Z", "commit": {"oid": "3e21fdaccdfc3712e3262af06f8f47244ac68322"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNVrOGv4Ofw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNVrOGv4Ofw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NzQ3MQ==", "bodyText": "Codacy found an issue: Avoid throwing raw exception types.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r452857471", "createdAt": "2020-07-10T13:52:35Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+/**\n+ * Helper class containing the necessary logic to fetch and revoke login tokens for NodeBB forum\n+ * software.\n+ */\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  /**\n+   * Data class used to wrap a newly generated token and the {@link #userId} the token was created\n+   * for in a single object.\n+   */\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  /**\n+   * Generates a NodeBB login token.\n+   *\n+   * @param username The username to create the token for.\n+   * @param password The password used by the user to login.\n+   * @param otp (optional, can be null) The One-Time-Password in case the User has 2FA enabled for\n+   *     their account.\n+   * @return The {@link TokenInfo} object containing the newly generated token and the associated\n+   *     userId of the provided username.\n+   */\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  /**\n+   * Revokes a NodeBB login token.\n+   *\n+   * @param token The login token to revoke.\n+   * @param userId The userId that the token was issued for.\n+   */\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e21fdaccdfc3712e3262af06f8f47244ac68322"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDE5MjY4", "url": "https://github.com/triplea-game/triplea/pull/6487#pullrequestreview-446419268", "createdAt": "2020-07-10T13:52:36Z", "commit": {"oid": "3e21fdaccdfc3712e3262af06f8f47244ac68322"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNlrOGv4Ojg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNlrOGv4Ojg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NzQ4Ng==", "bodyText": "Codacy found an issue: Avoid instantiating String objects; this is usually unnecessary.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r452857486", "createdAt": "2020-07-10T13:52:36Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbForumPoster.java", "diffHunk": "@@ -67,10 +59,7 @@\n   private NodeBbForumPoster(final ForumPostingParameters forumPostingParameters) {\n     this.topicId = forumPostingParameters.topicId;\n     this.forumUrl = forumPostingParameters.forumUrl;\n-    this.username =\n-        Arrays.withSensitiveArrayAndReturn(() -> forumPostingParameters.username, String::new);\n-    this.password =\n-        Arrays.withSensitiveArrayAndReturn(() -> forumPostingParameters.password, String::new);\n+    this.token = new String(forumPostingParameters.token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e21fdaccdfc3712e3262af06f8f47244ac68322"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3431, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}