{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NTc3ODI0", "number": 6449, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoxNTozMFrOD-G2Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDoxNTo0N1rOD-bvmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDUwNDQyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoxNTozMFrOGYAQeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo0MzoyNVrOGYMW8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyMzIyNA==", "bodyText": "If you want to go for streams\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int hits = 0;\n          \n          \n            \n                for (final Die die : dice) {\n          \n          \n            \n                  if (die.getType() == Die.DieType.HIT) {\n          \n          \n            \n                    hits++;\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n                final long hits = dice.stream().map(Die::getType).filter(Die.DieType.HIT::equals).count();", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r427823224", "createdAt": "2020-05-20T08:15:30Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "diffHunk": "@@ -27,59 +26,82 @@\n   public DicePanel(final UiContext uiContext, final GameData data) {\n     this.uiContext = uiContext;\n     this.data = data;\n-    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+    setLayout(new GridBagLayout());\n+    setBorder(BorderFactory.createEmptyBorder(8, 16, 0, 0));\n   }\n \n   void setDiceRollForBombing(final List<Die> dice, final int cost) {\n     removeAll();\n+    add(new JLabel(\"Cost: \" + cost, SwingConstants.LEFT));\n     add(create(dice));\n-    add(Box.createVerticalGlue());\n-    add(new JLabel(\"Cost:\" + cost));\n-    invalidate();\n+    addBottomLabel(new JLabel());\n   }\n \n   /** Sets the dice roll to display. */\n   public void setDiceRoll(final DiceRoll diceRoll) {\n-    SwingAction.invokeNowOrLater(\n-        () -> {\n-          removeAll();\n-          for (int i = 1; i <= data.getDiceSides(); i++) {\n-            final List<Die> dice = diceRoll.getRolls(i);\n-            if (dice.isEmpty()) {\n-              continue;\n-            }\n-            add(new JLabel(\"Rolled at \" + i + \":\"));\n-            add(create(diceRoll.getRolls(i)));\n-          }\n-          add(Box.createVerticalGlue());\n-          add(new JLabel(\"Total hits:\" + diceRoll.getHits()));\n-          validate();\n-          invalidate();\n-          repaint();\n-        });\n+    removeAll();\n+    add(\n+        new JLabel(\n+            \"<html><b><font style='font-size:120%'>Total hits: <font color='#8B0000'>\"\n+                + diceRoll.getHits(),\n+            SwingConstants.LEFT));\n+    add(new JSeparator());\n+\n+    for (int i = 1; i <= data.getDiceSides(); i++) {\n+      final List<Die> dice = diceRoll.getRolls(i);\n+      if (dice.isEmpty()) {\n+        continue;\n+      }\n+      add(makeDiceRolledLabel(dice, i));\n+      add(create(dice));\n+    }\n+    addBottomLabel(new JLabel());\n+    invalidate();\n+    validate();\n+    repaint();\n+  }\n+\n+  private JLabel makeDiceRolledLabel(final List<Die> dice, final int value) {\n+    int hits = 0;\n+    for (final Die die : dice) {\n+      if (die.getType() == Die.DieType.HIT) {\n+        hits++;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04ae31a9d65c2eb24c7080ee1717ac091f27f0db"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTQ4OQ==", "bodyText": "Done. Thanks!", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r428021489", "createdAt": "2020-05-20T13:43:25Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "diffHunk": "@@ -27,59 +26,82 @@\n   public DicePanel(final UiContext uiContext, final GameData data) {\n     this.uiContext = uiContext;\n     this.data = data;\n-    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+    setLayout(new GridBagLayout());\n+    setBorder(BorderFactory.createEmptyBorder(8, 16, 0, 0));\n   }\n \n   void setDiceRollForBombing(final List<Die> dice, final int cost) {\n     removeAll();\n+    add(new JLabel(\"Cost: \" + cost, SwingConstants.LEFT));\n     add(create(dice));\n-    add(Box.createVerticalGlue());\n-    add(new JLabel(\"Cost:\" + cost));\n-    invalidate();\n+    addBottomLabel(new JLabel());\n   }\n \n   /** Sets the dice roll to display. */\n   public void setDiceRoll(final DiceRoll diceRoll) {\n-    SwingAction.invokeNowOrLater(\n-        () -> {\n-          removeAll();\n-          for (int i = 1; i <= data.getDiceSides(); i++) {\n-            final List<Die> dice = diceRoll.getRolls(i);\n-            if (dice.isEmpty()) {\n-              continue;\n-            }\n-            add(new JLabel(\"Rolled at \" + i + \":\"));\n-            add(create(diceRoll.getRolls(i)));\n-          }\n-          add(Box.createVerticalGlue());\n-          add(new JLabel(\"Total hits:\" + diceRoll.getHits()));\n-          validate();\n-          invalidate();\n-          repaint();\n-        });\n+    removeAll();\n+    add(\n+        new JLabel(\n+            \"<html><b><font style='font-size:120%'>Total hits: <font color='#8B0000'>\"\n+                + diceRoll.getHits(),\n+            SwingConstants.LEFT));\n+    add(new JSeparator());\n+\n+    for (int i = 1; i <= data.getDiceSides(); i++) {\n+      final List<Die> dice = diceRoll.getRolls(i);\n+      if (dice.isEmpty()) {\n+        continue;\n+      }\n+      add(makeDiceRolledLabel(dice, i));\n+      add(create(dice));\n+    }\n+    addBottomLabel(new JLabel());\n+    invalidate();\n+    validate();\n+    repaint();\n+  }\n+\n+  private JLabel makeDiceRolledLabel(final List<Die> dice, final int value) {\n+    int hits = 0;\n+    for (final Die die : dice) {\n+      if (die.getType() == Die.DieType.HIT) {\n+        hits++;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyMzIyNA=="}, "originalCommit": {"oid": "04ae31a9d65c2eb24c7080ee1717ac091f27f0db"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzkxMTUzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/lookandfeel/LookAndFeel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDowNjoyNVrOGYh9DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyNToxNlrOGZVP9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTMwOA==", "bodyText": "Would you mind adding some unit testing for this function?", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r428375308", "createdAt": "2020-05-21T00:06:25Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/lookandfeel/LookAndFeel.java", "diffHunk": "@@ -78,6 +79,18 @@ public static String getDefaultLookAndFeelClassName() {\n             .orElseGet(UIManager::getSystemLookAndFeelClassName);\n   }\n \n+  public static boolean isCurrentLookAndFeelDark() {\n+    final Color background = UIManager.getColor(\"Panel.background\");\n+    return background != null && isColorDark(background);\n+  }\n+\n+  public static boolean isColorDark(final Color color) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNTczMg==", "bodyText": "Done.", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r429215732", "createdAt": "2020-05-22T12:25:16Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/games/strategy/engine/framework/lookandfeel/LookAndFeel.java", "diffHunk": "@@ -78,6 +79,18 @@ public static String getDefaultLookAndFeelClassName() {\n             .orElseGet(UIManager::getSystemLookAndFeelClassName);\n   }\n \n+  public static boolean isCurrentLookAndFeelDark() {\n+    final Color background = UIManager.getColor(\"Panel.background\");\n+    return background != null && isColorDark(background);\n+  }\n+\n+  public static boolean isColorDark(final Color color) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTMwOA=="}, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzkxNTMxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDowODozNVrOGYh_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozMTozNVrOGYy3dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTkwMA==", "bodyText": "minor, any objections to extracting \"#8B0000\" to a named constant? EG: \"DARKER_RED\"", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r428375900", "createdAt": "2020-05-21T00:08:35Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "diffHunk": "@@ -69,7 +70,9 @@ private JLabel makeDiceRolledLabel(final List<Die> dice, final int value) {\n   }\n \n   private static String colorizeHitString(final Object hitsString) {\n-    return \"<font color='#8B0000'>\" + hitsString + \"</font>\";\n+    // On a dark theme, use red. Use a darker red with a light theme.\n+    final String color = LookAndFeel.isCurrentLookAndFeelDark() ? \"red\" : \"#8B0000\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MjQwNg==", "bodyText": "Done.", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r428652406", "createdAt": "2020-05-21T13:31:35Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "diffHunk": "@@ -69,7 +70,9 @@ private JLabel makeDiceRolledLabel(final List<Die> dice, final int value) {\n   }\n \n   private static String colorizeHitString(final Object hitsString) {\n-    return \"<font color='#8B0000'>\" + hitsString + \"</font>\";\n+    // On a dark theme, use red. Use a darker red with a light theme.\n+    final String color = LookAndFeel.isCurrentLookAndFeelDark() ? \"red\" : \"#8B0000\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTkwMA=="}, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzkyMDY1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDoxMTozNlrOGYiCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOTo0NzoyNVrOGZrETw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3Njc1NA==", "bodyText": "FWIW, there is a type-safe builder for GridBagConstraints that can be used.\nIs gridy default to 0, if so, do we need to set gridx to 0 as well on line 91?", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r428376754", "createdAt": "2020-05-21T00:11:36Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "diffHunk": "@@ -27,59 +27,80 @@\n   public DicePanel(final UiContext uiContext, final GameData data) {\n     this.uiContext = uiContext;\n     this.data = data;\n-    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+    setLayout(new GridBagLayout());\n+    setBorder(BorderFactory.createEmptyBorder(8, 16, 0, 0));\n   }\n \n   void setDiceRollForBombing(final List<Die> dice, final int cost) {\n     removeAll();\n+    add(new JLabel(\"Cost: \" + cost, SwingConstants.LEFT));\n     add(create(dice));\n-    add(Box.createVerticalGlue());\n-    add(new JLabel(\"Cost:\" + cost));\n-    invalidate();\n+    addBottomLabel(new JLabel());\n   }\n \n   /** Sets the dice roll to display. */\n   public void setDiceRoll(final DiceRoll diceRoll) {\n-    SwingAction.invokeNowOrLater(\n-        () -> {\n-          removeAll();\n-          for (int i = 1; i <= data.getDiceSides(); i++) {\n-            final List<Die> dice = diceRoll.getRolls(i);\n-            if (dice.isEmpty()) {\n-              continue;\n-            }\n-            add(new JLabel(\"Rolled at \" + i + \":\"));\n-            add(create(diceRoll.getRolls(i)));\n-          }\n-          add(Box.createVerticalGlue());\n-          add(new JLabel(\"Total hits:\" + diceRoll.getHits()));\n-          validate();\n-          invalidate();\n-          repaint();\n-        });\n+    removeAll();\n+    final String hitsString = colorizeHitString(diceRoll.getHits());\n+    add(\n+        new JLabel(\n+            \"<html><b><font style='font-size:120%'>Total hits: \" + hitsString,\n+            SwingConstants.LEFT));\n+    add(new JSeparator());\n+\n+    for (int i = 1; i <= data.getDiceSides(); i++) {\n+      final List<Die> dice = diceRoll.getRolls(i);\n+      if (dice.isEmpty()) {\n+        continue;\n+      }\n+      add(makeDiceRolledLabel(dice, i));\n+      add(create(dice));\n+    }\n+    addBottomLabel(new JLabel());\n+    invalidate();\n+    validate();\n+    repaint();\n+  }\n+\n+  private JLabel makeDiceRolledLabel(final List<Die> dice, final int value) {\n+    final long hits = dice.stream().map(Die::getType).filter(Die.DieType.HIT::equals).count();\n+    final String countString = dice.size() == 1 ? \"1 die\" : dice.size() + \" dice\";\n+    final String hitsString = colorizeHitString(hits == 1 ? \"1 hit\" : hits + \" hits\");\n+    return new JLabel(\"<html><b>Rolled \" + countString + \" at \" + value + \" (\" + hitsString + \"):\");\n+  }\n+\n+  private static String colorizeHitString(final Object hitsString) {\n+    // On a dark theme, use red. Use a darker red with a light theme.\n+    final String color = LookAndFeel.isCurrentLookAndFeelDark() ? \"red\" : \"#8B0000\";\n+    return \"<font color='\" + color + \"'>\" + hitsString + \"</font>\";\n+  }\n+\n+  private void add(final JComponent component) {\n+    final GridBagConstraints constraints = new GridBagConstraints();\n+    constraints.fill = GridBagConstraints.HORIZONTAL;\n+    constraints.weightx = 1;\n+    constraints.gridx = 0;\n+    add(component, constraints);\n+  }\n+\n+  private void addBottomLabel(final JLabel label) {\n+    final GridBagConstraints constraints = new GridBagConstraints();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MDE1OA==", "bodyText": "No, the default value is \"RELATIVE\", not 0.", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r428650158", "createdAt": "2020-05-21T13:27:42Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "diffHunk": "@@ -27,59 +27,80 @@\n   public DicePanel(final UiContext uiContext, final GameData data) {\n     this.uiContext = uiContext;\n     this.data = data;\n-    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+    setLayout(new GridBagLayout());\n+    setBorder(BorderFactory.createEmptyBorder(8, 16, 0, 0));\n   }\n \n   void setDiceRollForBombing(final List<Die> dice, final int cost) {\n     removeAll();\n+    add(new JLabel(\"Cost: \" + cost, SwingConstants.LEFT));\n     add(create(dice));\n-    add(Box.createVerticalGlue());\n-    add(new JLabel(\"Cost:\" + cost));\n-    invalidate();\n+    addBottomLabel(new JLabel());\n   }\n \n   /** Sets the dice roll to display. */\n   public void setDiceRoll(final DiceRoll diceRoll) {\n-    SwingAction.invokeNowOrLater(\n-        () -> {\n-          removeAll();\n-          for (int i = 1; i <= data.getDiceSides(); i++) {\n-            final List<Die> dice = diceRoll.getRolls(i);\n-            if (dice.isEmpty()) {\n-              continue;\n-            }\n-            add(new JLabel(\"Rolled at \" + i + \":\"));\n-            add(create(diceRoll.getRolls(i)));\n-          }\n-          add(Box.createVerticalGlue());\n-          add(new JLabel(\"Total hits:\" + diceRoll.getHits()));\n-          validate();\n-          invalidate();\n-          repaint();\n-        });\n+    removeAll();\n+    final String hitsString = colorizeHitString(diceRoll.getHits());\n+    add(\n+        new JLabel(\n+            \"<html><b><font style='font-size:120%'>Total hits: \" + hitsString,\n+            SwingConstants.LEFT));\n+    add(new JSeparator());\n+\n+    for (int i = 1; i <= data.getDiceSides(); i++) {\n+      final List<Die> dice = diceRoll.getRolls(i);\n+      if (dice.isEmpty()) {\n+        continue;\n+      }\n+      add(makeDiceRolledLabel(dice, i));\n+      add(create(dice));\n+    }\n+    addBottomLabel(new JLabel());\n+    invalidate();\n+    validate();\n+    repaint();\n+  }\n+\n+  private JLabel makeDiceRolledLabel(final List<Die> dice, final int value) {\n+    final long hits = dice.stream().map(Die::getType).filter(Die.DieType.HIT::equals).count();\n+    final String countString = dice.size() == 1 ? \"1 die\" : dice.size() + \" dice\";\n+    final String hitsString = colorizeHitString(hits == 1 ? \"1 hit\" : hits + \" hits\");\n+    return new JLabel(\"<html><b>Rolled \" + countString + \" at \" + value + \" (\" + hitsString + \"):\");\n+  }\n+\n+  private static String colorizeHitString(final Object hitsString) {\n+    // On a dark theme, use red. Use a darker red with a light theme.\n+    final String color = LookAndFeel.isCurrentLookAndFeelDark() ? \"red\" : \"#8B0000\";\n+    return \"<font color='\" + color + \"'>\" + hitsString + \"</font>\";\n+  }\n+\n+  private void add(final JComponent component) {\n+    final GridBagConstraints constraints = new GridBagConstraints();\n+    constraints.fill = GridBagConstraints.HORIZONTAL;\n+    constraints.weightx = 1;\n+    constraints.gridx = 0;\n+    add(component, constraints);\n+  }\n+\n+  private void addBottomLabel(final JLabel label) {\n+    final GridBagConstraints constraints = new GridBagConstraints();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3Njc1NA=="}, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNzAwOA==", "bodyText": "Looks like GridBagConstraintsBuilder doesn't support setting gridy to GridBagConstraints.RELATIVE. So let's stick with this. A future PR can always expand the functionality of GridBagConstraintsBuilder to support this use case and refactor this code, if someone wants to contribute (from my perspective, I'm not sure it would add much since the current code isn't very convoluted - and might be more confusing with the extra abstraction).", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r429217008", "createdAt": "2020-05-22T12:28:26Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "diffHunk": "@@ -27,59 +27,80 @@\n   public DicePanel(final UiContext uiContext, final GameData data) {\n     this.uiContext = uiContext;\n     this.data = data;\n-    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+    setLayout(new GridBagLayout());\n+    setBorder(BorderFactory.createEmptyBorder(8, 16, 0, 0));\n   }\n \n   void setDiceRollForBombing(final List<Die> dice, final int cost) {\n     removeAll();\n+    add(new JLabel(\"Cost: \" + cost, SwingConstants.LEFT));\n     add(create(dice));\n-    add(Box.createVerticalGlue());\n-    add(new JLabel(\"Cost:\" + cost));\n-    invalidate();\n+    addBottomLabel(new JLabel());\n   }\n \n   /** Sets the dice roll to display. */\n   public void setDiceRoll(final DiceRoll diceRoll) {\n-    SwingAction.invokeNowOrLater(\n-        () -> {\n-          removeAll();\n-          for (int i = 1; i <= data.getDiceSides(); i++) {\n-            final List<Die> dice = diceRoll.getRolls(i);\n-            if (dice.isEmpty()) {\n-              continue;\n-            }\n-            add(new JLabel(\"Rolled at \" + i + \":\"));\n-            add(create(diceRoll.getRolls(i)));\n-          }\n-          add(Box.createVerticalGlue());\n-          add(new JLabel(\"Total hits:\" + diceRoll.getHits()));\n-          validate();\n-          invalidate();\n-          repaint();\n-        });\n+    removeAll();\n+    final String hitsString = colorizeHitString(diceRoll.getHits());\n+    add(\n+        new JLabel(\n+            \"<html><b><font style='font-size:120%'>Total hits: \" + hitsString,\n+            SwingConstants.LEFT));\n+    add(new JSeparator());\n+\n+    for (int i = 1; i <= data.getDiceSides(); i++) {\n+      final List<Die> dice = diceRoll.getRolls(i);\n+      if (dice.isEmpty()) {\n+        continue;\n+      }\n+      add(makeDiceRolledLabel(dice, i));\n+      add(create(dice));\n+    }\n+    addBottomLabel(new JLabel());\n+    invalidate();\n+    validate();\n+    repaint();\n+  }\n+\n+  private JLabel makeDiceRolledLabel(final List<Die> dice, final int value) {\n+    final long hits = dice.stream().map(Die::getType).filter(Die.DieType.HIT::equals).count();\n+    final String countString = dice.size() == 1 ? \"1 die\" : dice.size() + \" dice\";\n+    final String hitsString = colorizeHitString(hits == 1 ? \"1 hit\" : hits + \" hits\");\n+    return new JLabel(\"<html><b>Rolled \" + countString + \" at \" + value + \" (\" + hitsString + \"):\");\n+  }\n+\n+  private static String colorizeHitString(final Object hitsString) {\n+    // On a dark theme, use red. Use a darker red with a light theme.\n+    final String color = LookAndFeel.isCurrentLookAndFeelDark() ? \"red\" : \"#8B0000\";\n+    return \"<font color='\" + color + \"'>\" + hitsString + \"</font>\";\n+  }\n+\n+  private void add(final JComponent component) {\n+    final GridBagConstraints constraints = new GridBagConstraints();\n+    constraints.fill = GridBagConstraints.HORIZONTAL;\n+    constraints.weightx = 1;\n+    constraints.gridx = 0;\n+    add(component, constraints);\n+  }\n+\n+  private void addBottomLabel(final JLabel label) {\n+    final GridBagConstraints constraints = new GridBagConstraints();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3Njc1NA=="}, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MzE5OQ==", "bodyText": "Ah, wasn't aware of the limitation. I'm not sure I'd call the type-safe builders necessarily abstraction; regardless, I do agree the current code is pretty straight forward.", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r429573199", "createdAt": "2020-05-23T19:47:25Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "diffHunk": "@@ -27,59 +27,80 @@\n   public DicePanel(final UiContext uiContext, final GameData data) {\n     this.uiContext = uiContext;\n     this.data = data;\n-    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+    setLayout(new GridBagLayout());\n+    setBorder(BorderFactory.createEmptyBorder(8, 16, 0, 0));\n   }\n \n   void setDiceRollForBombing(final List<Die> dice, final int cost) {\n     removeAll();\n+    add(new JLabel(\"Cost: \" + cost, SwingConstants.LEFT));\n     add(create(dice));\n-    add(Box.createVerticalGlue());\n-    add(new JLabel(\"Cost:\" + cost));\n-    invalidate();\n+    addBottomLabel(new JLabel());\n   }\n \n   /** Sets the dice roll to display. */\n   public void setDiceRoll(final DiceRoll diceRoll) {\n-    SwingAction.invokeNowOrLater(\n-        () -> {\n-          removeAll();\n-          for (int i = 1; i <= data.getDiceSides(); i++) {\n-            final List<Die> dice = diceRoll.getRolls(i);\n-            if (dice.isEmpty()) {\n-              continue;\n-            }\n-            add(new JLabel(\"Rolled at \" + i + \":\"));\n-            add(create(diceRoll.getRolls(i)));\n-          }\n-          add(Box.createVerticalGlue());\n-          add(new JLabel(\"Total hits:\" + diceRoll.getHits()));\n-          validate();\n-          invalidate();\n-          repaint();\n-        });\n+    removeAll();\n+    final String hitsString = colorizeHitString(diceRoll.getHits());\n+    add(\n+        new JLabel(\n+            \"<html><b><font style='font-size:120%'>Total hits: \" + hitsString,\n+            SwingConstants.LEFT));\n+    add(new JSeparator());\n+\n+    for (int i = 1; i <= data.getDiceSides(); i++) {\n+      final List<Die> dice = diceRoll.getRolls(i);\n+      if (dice.isEmpty()) {\n+        continue;\n+      }\n+      add(makeDiceRolledLabel(dice, i));\n+      add(create(dice));\n+    }\n+    addBottomLabel(new JLabel());\n+    invalidate();\n+    validate();\n+    repaint();\n+  }\n+\n+  private JLabel makeDiceRolledLabel(final List<Die> dice, final int value) {\n+    final long hits = dice.stream().map(Die::getType).filter(Die.DieType.HIT::equals).count();\n+    final String countString = dice.size() == 1 ? \"1 die\" : dice.size() + \" dice\";\n+    final String hitsString = colorizeHitString(hits == 1 ? \"1 hit\" : hits + \" hits\");\n+    return new JLabel(\"<html><b>Rolled \" + countString + \" at \" + value + \" (\" + hitsString + \"):\");\n+  }\n+\n+  private static String colorizeHitString(final Object hitsString) {\n+    // On a dark theme, use red. Use a darker red with a light theme.\n+    final String color = LookAndFeel.isCurrentLookAndFeelDark() ? \"red\" : \"#8B0000\";\n+    return \"<font color='\" + color + \"'>\" + hitsString + \"</font>\";\n+  }\n+\n+  private void add(final JComponent component) {\n+    final GridBagConstraints constraints = new GridBagConstraints();\n+    constraints.fill = GridBagConstraints.HORIZONTAL;\n+    constraints.weightx = 1;\n+    constraints.gridx = 0;\n+    add(component, constraints);\n+  }\n+\n+  private void addBottomLabel(final JLabel label) {\n+    final GridBagConstraints constraints = new GridBagConstraints();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3Njc1NA=="}, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzkyMzc1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDoxMzoxOFrOGYiEjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozNjowNFrOGYzBuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzIyOQ==", "bodyText": "Any objection to having the bottom label be returned from the function? As is, the method addBottomLabel relies on side effects. To understand what is happening, you have to dive into the method, which lacks abstraction. We also have some inconsistency from the other methods that add returned values compared to this last one that adds a component as a side-effect.", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r428377229", "createdAt": "2020-05-21T00:13:18Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "diffHunk": "@@ -27,59 +27,80 @@\n   public DicePanel(final UiContext uiContext, final GameData data) {\n     this.uiContext = uiContext;\n     this.data = data;\n-    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+    setLayout(new GridBagLayout());\n+    setBorder(BorderFactory.createEmptyBorder(8, 16, 0, 0));\n   }\n \n   void setDiceRollForBombing(final List<Die> dice, final int cost) {\n     removeAll();\n+    add(new JLabel(\"Cost: \" + cost, SwingConstants.LEFT));\n     add(create(dice));\n-    add(Box.createVerticalGlue());\n-    add(new JLabel(\"Cost:\" + cost));\n-    invalidate();\n+    addBottomLabel(new JLabel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MDY4NA==", "bodyText": "Uhm, it's not a side effect, it's the main purpose of the function?", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r428650684", "createdAt": "2020-05-21T13:28:42Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "diffHunk": "@@ -27,59 +27,80 @@\n   public DicePanel(final UiContext uiContext, final GameData data) {\n     this.uiContext = uiContext;\n     this.data = data;\n-    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+    setLayout(new GridBagLayout());\n+    setBorder(BorderFactory.createEmptyBorder(8, 16, 0, 0));\n   }\n \n   void setDiceRollForBombing(final List<Die> dice, final int cost) {\n     removeAll();\n+    add(new JLabel(\"Cost: \" + cost, SwingConstants.LEFT));\n     add(create(dice));\n-    add(Box.createVerticalGlue());\n-    add(new JLabel(\"Cost:\" + cost));\n-    invalidate();\n+    addBottomLabel(new JLabel());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzIyOQ=="}, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NTAzNQ==", "bodyText": "Oh, do you mean the setVerticalAlignment() call?\nGiven that we no longer use a label with content (before, we used to for total hits) and this is just for taking up the remaining vertical space, we can simplify it. Done.", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r428655035", "createdAt": "2020-05-21T13:36:04Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/DicePanel.java", "diffHunk": "@@ -27,59 +27,80 @@\n   public DicePanel(final UiContext uiContext, final GameData data) {\n     this.uiContext = uiContext;\n     this.data = data;\n-    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+    setLayout(new GridBagLayout());\n+    setBorder(BorderFactory.createEmptyBorder(8, 16, 0, 0));\n   }\n \n   void setDiceRollForBombing(final List<Die> dice, final int cost) {\n     removeAll();\n+    add(new JLabel(\"Cost: \" + cost, SwingConstants.LEFT));\n     add(create(dice));\n-    add(Box.createVerticalGlue());\n-    add(new JLabel(\"Cost:\" + cost));\n-    invalidate();\n+    addBottomLabel(new JLabel());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzIyOQ=="}, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzkyODU5OnYy", "diffSide": "LEFT", "path": "game-core/src/main/java/games/strategy/triplea/ui/history/HistoryDetailsPanel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDoxNTo0N1rOGYiHYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozMToyMFrOGYy28g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3Nzk1NA==", "bodyText": "nit: changing serialVersionUID strings of swing components should not be necessary. I'm not sure there is consensus whether we should default serialVersoinId to a simple 1L. In essence, I'd recommend to not go out of your way to change them unless it's intentional/necessary.", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r428377954", "createdAt": "2020-05-21T00:15:47Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/history/HistoryDetailsPanel.java", "diffHunk": "@@ -35,32 +38,39 @@\n  * </ul>\n  */\n public class HistoryDetailsPanel extends JPanel {\n-  private static final long serialVersionUID = 5092004144144006960L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MjI3NA==", "bodyText": "Reverted. I wonder if there's some project setting we could set to disable warnings about these missing members for swing classes? The only reason we have these useless things is to silence the warnings AFAIK.", "url": "https://github.com/triplea-game/triplea/pull/6449#discussion_r428652274", "createdAt": "2020-05-21T13:31:20Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/history/HistoryDetailsPanel.java", "diffHunk": "@@ -35,32 +38,39 @@\n  * </ul>\n  */\n public class HistoryDetailsPanel extends JPanel {\n-  private static final long serialVersionUID = 5092004144144006960L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3Nzk1NA=="}, "originalCommit": {"oid": "be1278a75e9d82406a7b41e123e7cdb75244d970"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2186, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}