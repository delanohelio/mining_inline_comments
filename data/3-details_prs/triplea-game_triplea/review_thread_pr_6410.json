{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODM0NTQw", "number": 6410, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoyNjo1M1rOD6cWJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoyNjo1M1rOD6cWJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjA4NDIyOnYy", "diffSide": "RIGHT", "path": "java-extras/src/test/java/org/triplea/java/concurrency/AsyncRunnerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoyNjo1M1rOGSSeog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjo0MTo1NFrOGSbBJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMDMwNg==", "bodyText": "The case of \"Async\" is inconsistent with all the other test names", "url": "https://github.com/triplea-game/triplea/pull/6410#discussion_r421830306", "createdAt": "2020-05-07T22:26:53Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/test/java/org/triplea/java/concurrency/AsyncRunnerTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.triplea.java.concurrency;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.mockito.Mockito.timeout;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Executors;\n+import java.util.function.Consumer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class AsyncRunnerTest {\n+\n+  @Mock private Runnable runnable;\n+  @Mock private Consumer<Throwable> exceptionHandler;\n+  private final ArgumentCaptor<Throwable> exceptionArgumentCaptor =\n+      ArgumentCaptor.forClass(Throwable.class);\n+\n+  @Test\n+  void runASync() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5468f7f44f8ecabb1679b94936163f4c4b3f233f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk3MDIxMw==", "bodyText": "Eagle eye \ud83e\udd85  \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/6410#discussion_r421970213", "createdAt": "2020-05-08T06:41:54Z", "author": {"login": "DanVanAtta"}, "path": "java-extras/src/test/java/org/triplea/java/concurrency/AsyncRunnerTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.triplea.java.concurrency;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.mockito.Mockito.timeout;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Executors;\n+import java.util.function.Consumer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class AsyncRunnerTest {\n+\n+  @Mock private Runnable runnable;\n+  @Mock private Consumer<Throwable> exceptionHandler;\n+  private final ArgumentCaptor<Throwable> exceptionArgumentCaptor =\n+      ArgumentCaptor.forClass(Throwable.class);\n+\n+  @Test\n+  void runASync() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMDMwNg=="}, "originalCommit": {"oid": "5468f7f44f8ecabb1679b94936163f4c4b3f233f"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2164, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}