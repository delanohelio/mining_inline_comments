{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzOTc4OTI3", "number": 6096, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0N1rODrgTww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxMToxNFrODwCZog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTQ0NzA3OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/error/reporting/ErrorReportController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0N1rOF74tdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0N1rOF74tdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzOTQ0NQ==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r398339445", "createdAt": "2020-03-26T06:19:47Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/modules/error/reporting/ErrorReportController.java", "diffHunk": "@@ -11,17 +12,38 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.core.Context;\n import lombok.Builder;\n+import org.jdbi.v3.core.Jdbi;\n+import org.triplea.http.AppConfig;\n import org.triplea.http.HttpController;\n import org.triplea.http.client.error.report.ErrorReportClient;\n import org.triplea.http.client.error.report.ErrorReportRequest;\n import org.triplea.http.client.error.report.ErrorReportResponse;\n+import org.triplea.http.client.github.issues.GithubIssueClient;\n \n /** Http controller that binds the error upload endpoint with the error report upload handler. */\n @Builder\n public class ErrorReportController extends HttpController {\n   @Nonnull\n   private final BiFunction<String, ErrorReportRequest, ErrorReportResponse> errorReportIngestion;\n \n+  public static ErrorReportController build(final AppConfig configuration, final Jdbi jdbi) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8e254bbc0ce354189a0e52e07be6b5668acb5a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTQ0NzA4OnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/game/listing/LobbyGameRemovedMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0N1rOF74tdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0N1rOF74tdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzOTQ0Ng==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r398339446", "createdAt": "2020-03-26T06:19:47Z", "author": {"login": "codeclimate"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/game/listing/LobbyGameRemovedMessage.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.triplea.http.client.web.socket.messages.envelopes.game.listing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8e254bbc0ce354189a0e52e07be6b5668acb5a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTQ0NzA5OnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/chat/PlayerStatusUpdateReceivedMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OFrOF74teA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OFrOF74teA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzOTQ0OA==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r398339448", "createdAt": "2020-03-26T06:19:48Z", "author": {"login": "codeclimate"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/chat/PlayerStatusUpdateReceivedMessage.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.triplea.http.client.web.socket.messages.envelopes.chat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8e254bbc0ce354189a0e52e07be6b5668acb5a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTQ0NzEwOnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/game/listing/LobbyGameUpdatedMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OFrOF74tfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OFrOF74tfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzOTQ1Mw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r398339453", "createdAt": "2020-03-26T06:19:48Z", "author": {"login": "codeclimate"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/game/listing/LobbyGameUpdatedMessage.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.triplea.http.client.web.socket.messages.envelopes.game.listing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8e254bbc0ce354189a0e52e07be6b5668acb5a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTQ0NzE0OnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/chat/ChatReceivedMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OFrOF74tgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OFrOF74tgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzOTQ1Ng==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r398339456", "createdAt": "2020-03-26T06:19:48Z", "author": {"login": "codeclimate"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/chat/ChatReceivedMessage.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.triplea.http.client.web.socket.messages.envelopes.chat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8e254bbc0ce354189a0e52e07be6b5668acb5a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTQ0NzE2OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OVrOF74tgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OVrOF74tgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzOTQ1OQ==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r398339459", "createdAt": "2020-03-26T06:19:49Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -21,6 +21,10 @@\n @Slf4j\n @AllArgsConstructor\n public class Chatters {\n+  public Optional<ChatParticipant> lookupPlayerBySession(final Session senderSession) {\n+    throw new UnsupportedOperationException(\"TODO\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8e254bbc0ce354189a0e52e07be6b5668acb5a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTQ0NzE3OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/web/socket/WebSocketMessageContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OVrOF74thA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OVrOF74thA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzOTQ2MA==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r398339460", "createdAt": "2020-03-26T06:19:49Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/web/socket/WebSocketMessageContext.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.triplea.web.socket;\n+\n+import javax.annotation.Nonnull;\n+import javax.websocket.Session;\n+import lombok.Builder;\n+import lombok.Getter;\n+import org.triplea.http.client.web.socket.messages.WebSocketMessage;\n+\n+@Builder\n+public class WebSocketMessageContext<T extends WebSocketMessage> {\n+  @Nonnull private final WebSocketMessagingBus messagingBus;\n+  @Getter @Nonnull private final Session senderSession;\n+  @Getter @Nonnull private final T message;\n+\n+  public <X extends WebSocketMessage> void sendResponse(X responseMessage) {\n+    throw new UnsupportedOperationException(\"TODO\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8e254bbc0ce354189a0e52e07be6b5668acb5a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTQ0NzE4OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/web/socket/WebSocketMessageContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OVrOF74thg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OVrOF74thg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzOTQ2Mg==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r398339462", "createdAt": "2020-03-26T06:19:49Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/web/socket/WebSocketMessageContext.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.triplea.web.socket;\n+\n+import javax.annotation.Nonnull;\n+import javax.websocket.Session;\n+import lombok.Builder;\n+import lombok.Getter;\n+import org.triplea.http.client.web.socket.messages.WebSocketMessage;\n+\n+@Builder\n+public class WebSocketMessageContext<T extends WebSocketMessage> {\n+  @Nonnull private final WebSocketMessagingBus messagingBus;\n+  @Getter @Nonnull private final Session senderSession;\n+  @Getter @Nonnull private final T message;\n+\n+  public <X extends WebSocketMessage> void sendResponse(X responseMessage) {\n+    throw new UnsupportedOperationException(\"TODO\");\n+  }\n+\n+  public <X extends WebSocketMessage> void broadcastMessage(X broadcastMessage) {\n+    throw new UnsupportedOperationException(\"TODO\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8e254bbc0ce354189a0e52e07be6b5668acb5a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTQ0NzIxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/lobby/connection/PlayerToLobbyConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OVrOF74tiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoxOTo0OVrOF74tiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzOTQ2NA==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r398339464", "createdAt": "2020-03-26T06:19:49Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/lobby/connection/PlayerToLobbyConnection.java", "diffHunk": "@@ -1,90 +1,93 @@\n package games.strategy.engine.lobby.connection;\n \n-import com.google.common.base.Preconditions;\n-import java.net.InetAddress;\n import java.net.URI;\n-import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Consumer;\n import lombok.extern.java.Log;\n import org.triplea.domain.data.ApiKey;\n-import org.triplea.domain.data.ChatParticipant;\n import org.triplea.domain.data.PlayerChatId;\n import org.triplea.domain.data.UserName;\n import org.triplea.http.client.lobby.HttpLobbyClient;\n-import org.triplea.http.client.lobby.chat.ChatMessageListeners;\n import org.triplea.http.client.lobby.game.listing.GameListingClient;\n-import org.triplea.http.client.lobby.game.listing.messages.GameListingListeners;\n+import org.triplea.http.client.lobby.game.listing.LobbyGameListing;\n import org.triplea.http.client.lobby.moderator.BanPlayerRequest;\n import org.triplea.http.client.lobby.moderator.toolbox.HttpModeratorToolboxClient;\n+import org.triplea.http.client.web.socket.GenericWebSocketClient;\n+import org.triplea.http.client.web.socket.WebSocket;\n+import org.triplea.http.client.web.socket.WebsocketPaths;\n+import org.triplea.http.client.web.socket.messages.MessageType;\n+import org.triplea.http.client.web.socket.messages.WebSocketMessage;\n+import org.triplea.http.client.web.socket.messages.envelopes.chat.ChatSentMessage;\n+import org.triplea.http.client.web.socket.messages.envelopes.chat.ConnectToChatMessage;\n+import org.triplea.http.client.web.socket.messages.envelopes.chat.PlayerSlapSentMessage;\n+import org.triplea.http.client.web.socket.messages.envelopes.chat.PlayerStatusUpdateSentMessage;\n \n /**\n  * Represents a connection from a player to lobby. A player can do actions like get game listings,\n  * send chat messages, slap players, etc.. The lobby will send messages to the player for example\n  * like chat messages, slap notifications, ban notifications.\n  */\n+// TODO: test-me", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8e254bbc0ce354189a0e52e07be6b5668acb5a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE3NzMyOnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/chat/ConnectToChatMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODo1NlrOF8mOvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODo1NlrOF8mOvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NTI0Nw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399085247", "createdAt": "2020-03-27T07:48:56Z", "author": {"login": "codeclimate"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/chat/ConnectToChatMessage.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.triplea.http.client.web.socket.messages.envelopes.chat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2508e91354274c47a9312176ac445ffed731f15c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE3NzM1OnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/chat/PlayerLeftMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODo1NlrOF8mOwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODo1NlrOF8mOwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NTI1MA==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399085250", "createdAt": "2020-03-27T07:48:56Z", "author": {"login": "codeclimate"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/chat/PlayerLeftMessage.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.triplea.http.client.web.socket.messages.envelopes.chat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2508e91354274c47a9312176ac445ffed731f15c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE3NzM3OnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/chat/ChatterListingMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODo1NlrOF8mOyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODo1NlrOF8mOyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NTI1Ng==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399085256", "createdAt": "2020-03-27T07:48:56Z", "author": {"login": "codeclimate"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/messages/envelopes/chat/ChatterListingMessage.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.triplea.http.client.web.socket.messages.envelopes.chat;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Builder;\n+import org.triplea.domain.data.ChatParticipant;\n+import org.triplea.http.client.web.socket.MessageEnvelope;\n+import org.triplea.http.client.web.socket.messages.MessageType;\n+import org.triplea.http.client.web.socket.messages.WebSocketMessage;\n+\n+public class ChatterListingMessage implements WebSocketMessage {\n+  public static final MessageType<ChatterListingMessage> TYPE =\n+      MessageType.of(ChatterListingMessage.class);\n+\n+  @Builder\n+  private static class Chatter {\n+    private final String userName;\n+    private final String playerChatId;\n+    private final boolean isModerator;\n+    private final String status;\n+  }\n+\n+  private final List<Chatter> chatters;\n+\n+  public ChatterListingMessage(List<ChatParticipant> chatters) {\n+    throw new UnsupportedOperationException(\"TODO\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2508e91354274c47a9312176ac445ffed731f15c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE3NzQyOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODo1N1rOF8mOzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODo1N1rOF8mOzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NTI2MA==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399085260", "createdAt": "2020-03-27T07:48:57Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -15,12 +16,40 @@\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n+import org.triplea.db.dao.api.key.ApiKeyDaoWrapper;\n+import org.triplea.domain.data.ApiKey;\n import org.triplea.domain.data.ChatParticipant;\n import org.triplea.domain.data.UserName;\n \n @Slf4j\n @AllArgsConstructor\n public class Chatters {\n+  public Optional<ChatParticipant> lookupPlayerBySession(final Session senderSession) {\n+    throw new UnsupportedOperationException(\"TODO\");\n+  }\n+\n+  private final ApiKeyDaoWrapper apiKeyDaoWrapper;\n+  private final ChatParticipantAdapter chatParticipantAdapter;\n+\n+  public Optional<ChatParticipant> connectPlayer(final ApiKey apiKey) {\n+\n+    final Optional<ChatParticipant> chatParticipant =\n+        apiKeyDaoWrapper.lookupByApiKey(apiKey).map(chatParticipantAdapter);\n+\n+    if (chatParticipant.isPresent()) {\n+      // add chatter\n+    }\n+    return chatParticipant;\n+  }\n+\n+  public List<ChatParticipant> getChatters() {\n+    throw new UnsupportedOperationException(\"TODO\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2508e91354274c47a9312176ac445ffed731f15c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE3NzQ1OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODo1N1rOF8mO0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODo1N1rOF8mO0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NTI2NA==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399085264", "createdAt": "2020-03-27T07:48:57Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -15,12 +16,40 @@\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n+import org.triplea.db.dao.api.key.ApiKeyDaoWrapper;\n+import org.triplea.domain.data.ApiKey;\n import org.triplea.domain.data.ChatParticipant;\n import org.triplea.domain.data.UserName;\n \n @Slf4j\n @AllArgsConstructor\n public class Chatters {\n+  public Optional<ChatParticipant> lookupPlayerBySession(final Session senderSession) {\n+    throw new UnsupportedOperationException(\"TODO\");\n+  }\n+\n+  private final ApiKeyDaoWrapper apiKeyDaoWrapper;\n+  private final ChatParticipantAdapter chatParticipantAdapter;\n+\n+  public Optional<ChatParticipant> connectPlayer(final ApiKey apiKey) {\n+\n+    final Optional<ChatParticipant> chatParticipant =\n+        apiKeyDaoWrapper.lookupByApiKey(apiKey).map(chatParticipantAdapter);\n+\n+    if (chatParticipant.isPresent()) {\n+      // add chatter\n+    }\n+    return chatParticipant;\n+  }\n+\n+  public List<ChatParticipant> getChatters() {\n+    throw new UnsupportedOperationException(\"TODO\");\n+  }\n+\n+  public Optional<UserName> playerLeft(final Session session) {\n+    throw new UnsupportedOperationException(\"TODO\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2508e91354274c47a9312176ac445ffed731f15c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk3ODg4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/chat/LobbyChatTransmitter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0ODo1NlrOF9BZkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxOToxNTo0NVrOF9Lqug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMDM4NQ==", "bodyText": "Would you mind explaining this change?", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399530385", "createdAt": "2020-03-27T20:48:56Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/chat/LobbyChatTransmitter.java", "diffHunk": "@@ -21,30 +28,47 @@\n \n   @Override\n   public void setChatClient(final ChatClient chatClient) {\n-    playerToLobbyConnection.addChatMessageListeners(\n-        ChatMessageListeners.builder()\n-            .playerStatusListener(chatClient::statusUpdated)\n-            .playerLeftListener(chatClient::participantRemoved)\n-            .playerJoinedListener(chatClient::participantAdded)\n-            .chatMessageListener(chatClient::messageReceived)\n-            .connectedListener(chatClient::connected)\n-            .chatEventListener(chatClient::eventReceived)\n-            .playerSlappedListener(\n-                slapEvent -> {\n-                  if (slapEvent.getSlapped().equals(localUserName)) {\n-                    chatClient.slappedBy(slapEvent.getSlapper());\n-                  } else {\n-                    chatClient.playerSlapped(\n-                        slapEvent.getSlapper() + \" slapped \" + slapEvent.getSlapped());\n-                  }\n-                })\n-            .serverErrorListener(log::severe)\n-            .build());\n+    playerToLobbyConnection.addMessageListener(\n+        ChatterListingMessage.TYPE, message -> chatClient.connected(message.getChatters()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        PlayerStatusUpdateReceivedMessage.TYPE,\n+        message -> chatClient.statusUpdated(message.getUserName(), message.getStatus()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        PlayerLeftMessage.TYPE, message -> chatClient.participantRemoved(message.getUserName()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        PlayerJoinedMessage.TYPE,\n+        message -> chatClient.participantAdded(message.getChatParticipant()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        ChatReceivedMessage.TYPE,\n+        message -> chatClient.messageReceived(message.getSender(), message.getMessage()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        PlayerJoinedMessage.TYPE,\n+        message -> chatClient.participantAdded(message.getChatParticipant()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        ChatEventReceivedMessage.TYPE, message -> chatClient.eventReceived(message.getMessage()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        PlayerSlapReceivedMessage.TYPE,\n+        message -> {\n+          if (message.getSlappedPlayer().equals(localUserName)) {\n+            chatClient.slappedBy(message.getSlappingPlayer());\n+          } else {\n+            chatClient.eventReceived(\n+                message.getSlappingPlayer() + \" slapped \" + message.getSlappedPlayer());\n+          }\n+        });\n+    playerToLobbyConnection.sendConnectToChatMessage();\n   }\n \n   @Override\n   public Collection<ChatParticipant> connect() {\n-    return playerToLobbyConnection.connect();\n+    return List.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b28cbb1954852950e96cbeabf9ab436ed254e2f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5ODYxOA==", "bodyText": "Certainly. Before we had more of a hybrid http and websocket model, sync and async. On the very first iteration we had a problem where if you initially connect to websocket, we would not know the chatter name. So what we did was the initial connection established a chatter, and we got the list of chatters back in a synchronized manner.\nThis is being updated so that we establish a websocket session first, but even with the websocket session you are not going to get any messages until you send a 'join' message. With that, the server will respond to 'join' messages with a websocket response containing the chatter list.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399698618", "createdAt": "2020-03-28T19:15:45Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/chat/LobbyChatTransmitter.java", "diffHunk": "@@ -21,30 +28,47 @@\n \n   @Override\n   public void setChatClient(final ChatClient chatClient) {\n-    playerToLobbyConnection.addChatMessageListeners(\n-        ChatMessageListeners.builder()\n-            .playerStatusListener(chatClient::statusUpdated)\n-            .playerLeftListener(chatClient::participantRemoved)\n-            .playerJoinedListener(chatClient::participantAdded)\n-            .chatMessageListener(chatClient::messageReceived)\n-            .connectedListener(chatClient::connected)\n-            .chatEventListener(chatClient::eventReceived)\n-            .playerSlappedListener(\n-                slapEvent -> {\n-                  if (slapEvent.getSlapped().equals(localUserName)) {\n-                    chatClient.slappedBy(slapEvent.getSlapper());\n-                  } else {\n-                    chatClient.playerSlapped(\n-                        slapEvent.getSlapper() + \" slapped \" + slapEvent.getSlapped());\n-                  }\n-                })\n-            .serverErrorListener(log::severe)\n-            .build());\n+    playerToLobbyConnection.addMessageListener(\n+        ChatterListingMessage.TYPE, message -> chatClient.connected(message.getChatters()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        PlayerStatusUpdateReceivedMessage.TYPE,\n+        message -> chatClient.statusUpdated(message.getUserName(), message.getStatus()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        PlayerLeftMessage.TYPE, message -> chatClient.participantRemoved(message.getUserName()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        PlayerJoinedMessage.TYPE,\n+        message -> chatClient.participantAdded(message.getChatParticipant()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        ChatReceivedMessage.TYPE,\n+        message -> chatClient.messageReceived(message.getSender(), message.getMessage()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        PlayerJoinedMessage.TYPE,\n+        message -> chatClient.participantAdded(message.getChatParticipant()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        ChatEventReceivedMessage.TYPE, message -> chatClient.eventReceived(message.getMessage()));\n+\n+    playerToLobbyConnection.addMessageListener(\n+        PlayerSlapReceivedMessage.TYPE,\n+        message -> {\n+          if (message.getSlappedPlayer().equals(localUserName)) {\n+            chatClient.slappedBy(message.getSlappingPlayer());\n+          } else {\n+            chatClient.eventReceived(\n+                message.getSlappingPlayer() + \" slapped \" + message.getSlappedPlayer());\n+          }\n+        });\n+    playerToLobbyConnection.sendConnectToChatMessage();\n   }\n \n   @Override\n   public Collection<ChatParticipant> connect() {\n-    return playerToLobbyConnection.connect();\n+    return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMDM4NQ=="}, "originalCommit": {"oid": "1b28cbb1954852950e96cbeabf9ab436ed254e2f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzcwMzcwOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/event/processing/StatusUpdateListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzozMjoyNlrOF9Hl4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzozMjoyNlrOF9Hl4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMTg0MQ==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399631841", "createdAt": "2020-03-28T07:32:26Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/modules/chat/event/processing/StatusUpdateListener.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.triplea.modules.chat.event.processing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507510286ef2dda99c543636458f9812dda9c828"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzcwMzcyOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/event/processing/ChatMessageListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzozMjoyNlrOF9Hl4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzozMjoyNlrOF9Hl4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMTg0Mw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399631843", "createdAt": "2020-03-28T07:32:26Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/modules/chat/event/processing/ChatMessageListener.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.triplea.modules.chat.event.processing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507510286ef2dda99c543636458f9812dda9c828"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzcwMzc0OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzozMjoyNlrOF9Hl5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzozMjoyNlrOF9Hl5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMTg0NQ==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399631845", "createdAt": "2020-03-28T07:32:26Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -15,12 +16,47 @@\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n+import org.jdbi.v3.core.Jdbi;\n+import org.triplea.db.dao.api.key.ApiKeyDaoWrapper;\n+import org.triplea.domain.data.ApiKey;\n import org.triplea.domain.data.ChatParticipant;\n import org.triplea.domain.data.UserName;\n \n+/** Keeps the current list of ChatParticipants and maps them to their websocket session. */\n @Slf4j\n @AllArgsConstructor\n public class Chatters {\n+\n+  private final ApiKeyDaoWrapper apiKeyDaoWrapper;\n+  private final ChatParticipantAdapter chatParticipantAdapter;\n+\n+  public static Chatters build(final Jdbi jdbi) {\n+    return new Chatters(ApiKeyDaoWrapper.build(jdbi), new ChatParticipantAdapter());\n+  }\n+\n+  public Optional<ChatParticipant> lookupPlayerBySession(final Session senderSession) {\n+    throw new UnsupportedOperationException(\"TODO\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507510286ef2dda99c543636458f9812dda9c828"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzcwMzc2OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/web/socket/connections/WebSocketMessagingBus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzozMjoyNlrOF9Hl5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzozMjoyNlrOF9Hl5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMTg0Nw==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399631847", "createdAt": "2020-03-28T07:32:26Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/web/socket/connections/WebSocketMessagingBus.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.triplea.web.socket.connections;\n+\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import javax.websocket.Session;\n+import org.triplea.http.client.web.socket.messages.MessageType;\n+import org.triplea.http.client.web.socket.messages.WebSocketMessage;\n+import org.triplea.web.socket.WebSocketMessageContext;\n+\n+public class WebSocketMessagingBus {\n+  public static String MESSAGING_BUS_KEY = \"messaging.bus\";\n+\n+  public <X extends WebSocketMessage> void sendResponse(X responseMessage) {\n+    throw new UnsupportedOperationException(\"TODO\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507510286ef2dda99c543636458f9812dda9c828"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzcwMzc4OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/web/socket/connections/WebSocketMessagingBus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzozMjoyN1rOF9Hl6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzozMjoyN1rOF9Hl6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMTg0OQ==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399631849", "createdAt": "2020-03-28T07:32:27Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/web/socket/connections/WebSocketMessagingBus.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.triplea.web.socket.connections;\n+\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import javax.websocket.Session;\n+import org.triplea.http.client.web.socket.messages.MessageType;\n+import org.triplea.http.client.web.socket.messages.WebSocketMessage;\n+import org.triplea.web.socket.WebSocketMessageContext;\n+\n+public class WebSocketMessagingBus {\n+  public static String MESSAGING_BUS_KEY = \"messaging.bus\";\n+\n+  public <X extends WebSocketMessage> void sendResponse(X responseMessage) {\n+    throw new UnsupportedOperationException(\"TODO\");\n+  }\n+\n+  public <X extends WebSocketMessage> void broadcastMessage(X broadcastMessage) {\n+    throw new UnsupportedOperationException(\"TODO\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507510286ef2dda99c543636458f9812dda9c828"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODEzMjU1OnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/GenericWebSocketClient.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNzowMzowOVrOF9K1UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMjo1NDowNVrOF9N_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4NDk0NA==", "bodyText": "Thoughts about using a MultiMap to get the O(1) runtime of this frequently used method?", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399684944", "createdAt": "2020-03-28T17:03:09Z", "author": {"login": "RoiEXLab"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/GenericWebSocketClient.java", "diffHunk": "@@ -19,74 +24,102 @@\n  * API, and it automatically converts incoming and outgoing messages to JSON string. In particular\n  * this class makes sure that all operations are non-blocking, but keep their initial dispatch\n  * order.\n+ *\n+ * <p>Note: The error handler passed in is invoked if we get an error connecting to server, or if\n+ * server sends us an error message.\n  */\n @Log\n-public class GenericWebSocketClient implements WebSocketConnectionListener {\n+public class GenericWebSocketClient implements WebSocket, WebSocketConnectionListener {\n   private static final Gson gson = new Gson();\n \n-  private final WebSocketConnection client;\n   /** These are called whenever connection is closed, whether by us or server. */\n   private final Collection<Runnable> connectionClosedListeners = new ArrayList<>();\n \n-  private final Consumer<String> errorHandler;\n-  private Consumer<ServerMessageEnvelope> messageListener;\n+  @Nonnull private final URI websocketUri;\n+  @Nonnull private final Consumer<String> errorHandler;\n \n-  public GenericWebSocketClient(final URI lobbyUri, final Consumer<String> errorHandler) {\n-    this(new WebSocketConnection(swapHttpsToWssProtocol(lobbyUri)), errorHandler);\n-  }\n+  private WebSocketConnection webSocketConnection;\n+  private final Set<MessageListener<? extends WebSocketMessage>> listeners = new HashSet<>();\n \n-  @VisibleForTesting\n-  GenericWebSocketClient(\n-      final WebSocketConnection webSocketClient, final Consumer<String> errorHandler) {\n-    client = webSocketClient;\n-    this.errorHandler = errorHandler;\n+  @Builder\n+  private static class MessageListener<T extends WebSocketMessage> {\n+    @Nonnull MessageType<T> messageType;\n+    @Nonnull Consumer<Object> listener;\n   }\n \n-  @VisibleForTesting\n-  static URI swapHttpsToWssProtocol(final URI uri) {\n-    return uri.getScheme().equals(\"https\")\n-        ? URI.create(uri.toString().replace(\"https\", \"wss\"))\n-        : uri;\n-  }\n-\n-  public void registerListenerAndConnect(final Consumer<ServerMessageEnvelope> messageListener) {\n-    this.messageListener = messageListener;\n-    client\n-        .connect(this, errorHandler)\n-        .exceptionally(\n-            throwable -> {\n-              log.log(\n-                  Level.SEVERE, \"Unexpected exception completing websocket connection\", throwable);\n-              return false;\n-            });\n+  @Builder\n+  public GenericWebSocketClient(\n+      @Nonnull final URI websocketUri, @Nonnull final Consumer<String> errorHandler) {\n+    this.websocketUri = websocketUri;\n+    this.errorHandler = errorHandler;\n   }\n \n   /**\n    * Non-blocking send of a message to the server. Implementation note: data is sent as a JSON\n    * string, this method handles conversion of the parameter object to JSON.\n    *\n    * @param message The data object to send to the server.\n+   * @deprecated Call {@code sendMessage(WebsocketMessage)} instead.\n    */\n+  @Deprecated\n   public void send(final ClientMessageEnvelope message) {\n     // we get by doing the send on a new thread.\n-    client.sendMessage(gson.toJson(message));\n+    webSocketConnection.sendMessage(gson.toJson(message));\n   }\n \n-  /**\n-   * Removes connection lost listeners and starts a non-blocking close of the websocket connection.\n-   */\n+  @Override\n+  public void connect() {\n+    addListener(ServerErrorMessage.TYPE, message -> errorHandler.accept(message.getError()));\n+    webSocketConnection = new WebSocketConnection(swapHttpsToWssProtocol(websocketUri));\n+    webSocketConnection.connect(this, errorHandler);\n+  }\n+\n+  @VisibleForTesting\n+  static URI swapHttpsToWssProtocol(final URI uri) {\n+    return uri.getScheme().equals(\"https\")\n+        ? URI.create(uri.toString().replace(\"https\", \"wss\"))\n+        : uri;\n+  }\n+\n+  /** Starts a non-blocking close of the websocket connection. */\n+  @Override\n   public void close() {\n-    client.close();\n+    webSocketConnection.close();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public <T extends WebSocketMessage> void addListener(\n+      final MessageType<T> messageType, final Consumer<T> messageHandler) {\n+\n+    final Consumer<Object> messageConsumer = object -> messageHandler.accept((T) object);\n+    listeners.add(\n+        MessageListener.<T>builder() //\n+            .messageType(messageType)\n+            .listener(messageConsumer)\n+            .build());\n+  }\n+\n+  @Override\n+  public void sendMessage(final WebSocketMessage message) {\n+    webSocketConnection.sendMessage(gson.toJson(message.toEnvelope()));\n   }\n \n+  @Override\n   public void addConnectionClosedListener(final Runnable connectionClosedListener) {\n     connectionClosedListeners.add(connectionClosedListener);\n   }\n \n   @Override\n   public void messageReceived(final String message) {\n-    final ServerMessageEnvelope converted = gson.fromJson(message, ServerMessageEnvelope.class);\n-    messageListener.accept(converted);\n+    final MessageEnvelope converted = gson.fromJson(message, MessageEnvelope.class);\n+\n+    listeners.stream()\n+        .filter(listener -> converted.messageTypeIs(listener.messageType))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b28cbb1954852950e96cbeabf9ab436ed254e2f"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5ODk2NA==", "bodyText": "I did want a map, the listeners are of mixed type. If you can see how to solve that, it would make for cleaner logic probably. Otherwise, the mixed typing caused issues defining such a map.\nFWIW, I don't think the iteration and lookup is necessarily a  problem. A recent saying I've come across that I found interesting, https://blog.cloudflare.com/when-bloom-filters-dont-bloom/,\n\n\"One colleague often says: \"You can assume modern CPUs are infinitely fast. They run at infinite speed until they hit the memory wall\".\"\n\nIn this case, we are not going to have all listeners loaded from main memory, but still the point remains that a map is not necessarily going to be that much faster than sequential scanning on a pretty limited collection size.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399698964", "createdAt": "2020-03-28T19:19:30Z", "author": {"login": "DanVanAtta"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/GenericWebSocketClient.java", "diffHunk": "@@ -19,74 +24,102 @@\n  * API, and it automatically converts incoming and outgoing messages to JSON string. In particular\n  * this class makes sure that all operations are non-blocking, but keep their initial dispatch\n  * order.\n+ *\n+ * <p>Note: The error handler passed in is invoked if we get an error connecting to server, or if\n+ * server sends us an error message.\n  */\n @Log\n-public class GenericWebSocketClient implements WebSocketConnectionListener {\n+public class GenericWebSocketClient implements WebSocket, WebSocketConnectionListener {\n   private static final Gson gson = new Gson();\n \n-  private final WebSocketConnection client;\n   /** These are called whenever connection is closed, whether by us or server. */\n   private final Collection<Runnable> connectionClosedListeners = new ArrayList<>();\n \n-  private final Consumer<String> errorHandler;\n-  private Consumer<ServerMessageEnvelope> messageListener;\n+  @Nonnull private final URI websocketUri;\n+  @Nonnull private final Consumer<String> errorHandler;\n \n-  public GenericWebSocketClient(final URI lobbyUri, final Consumer<String> errorHandler) {\n-    this(new WebSocketConnection(swapHttpsToWssProtocol(lobbyUri)), errorHandler);\n-  }\n+  private WebSocketConnection webSocketConnection;\n+  private final Set<MessageListener<? extends WebSocketMessage>> listeners = new HashSet<>();\n \n-  @VisibleForTesting\n-  GenericWebSocketClient(\n-      final WebSocketConnection webSocketClient, final Consumer<String> errorHandler) {\n-    client = webSocketClient;\n-    this.errorHandler = errorHandler;\n+  @Builder\n+  private static class MessageListener<T extends WebSocketMessage> {\n+    @Nonnull MessageType<T> messageType;\n+    @Nonnull Consumer<Object> listener;\n   }\n \n-  @VisibleForTesting\n-  static URI swapHttpsToWssProtocol(final URI uri) {\n-    return uri.getScheme().equals(\"https\")\n-        ? URI.create(uri.toString().replace(\"https\", \"wss\"))\n-        : uri;\n-  }\n-\n-  public void registerListenerAndConnect(final Consumer<ServerMessageEnvelope> messageListener) {\n-    this.messageListener = messageListener;\n-    client\n-        .connect(this, errorHandler)\n-        .exceptionally(\n-            throwable -> {\n-              log.log(\n-                  Level.SEVERE, \"Unexpected exception completing websocket connection\", throwable);\n-              return false;\n-            });\n+  @Builder\n+  public GenericWebSocketClient(\n+      @Nonnull final URI websocketUri, @Nonnull final Consumer<String> errorHandler) {\n+    this.websocketUri = websocketUri;\n+    this.errorHandler = errorHandler;\n   }\n \n   /**\n    * Non-blocking send of a message to the server. Implementation note: data is sent as a JSON\n    * string, this method handles conversion of the parameter object to JSON.\n    *\n    * @param message The data object to send to the server.\n+   * @deprecated Call {@code sendMessage(WebsocketMessage)} instead.\n    */\n+  @Deprecated\n   public void send(final ClientMessageEnvelope message) {\n     // we get by doing the send on a new thread.\n-    client.sendMessage(gson.toJson(message));\n+    webSocketConnection.sendMessage(gson.toJson(message));\n   }\n \n-  /**\n-   * Removes connection lost listeners and starts a non-blocking close of the websocket connection.\n-   */\n+  @Override\n+  public void connect() {\n+    addListener(ServerErrorMessage.TYPE, message -> errorHandler.accept(message.getError()));\n+    webSocketConnection = new WebSocketConnection(swapHttpsToWssProtocol(websocketUri));\n+    webSocketConnection.connect(this, errorHandler);\n+  }\n+\n+  @VisibleForTesting\n+  static URI swapHttpsToWssProtocol(final URI uri) {\n+    return uri.getScheme().equals(\"https\")\n+        ? URI.create(uri.toString().replace(\"https\", \"wss\"))\n+        : uri;\n+  }\n+\n+  /** Starts a non-blocking close of the websocket connection. */\n+  @Override\n   public void close() {\n-    client.close();\n+    webSocketConnection.close();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public <T extends WebSocketMessage> void addListener(\n+      final MessageType<T> messageType, final Consumer<T> messageHandler) {\n+\n+    final Consumer<Object> messageConsumer = object -> messageHandler.accept((T) object);\n+    listeners.add(\n+        MessageListener.<T>builder() //\n+            .messageType(messageType)\n+            .listener(messageConsumer)\n+            .build());\n+  }\n+\n+  @Override\n+  public void sendMessage(final WebSocketMessage message) {\n+    webSocketConnection.sendMessage(gson.toJson(message.toEnvelope()));\n   }\n \n+  @Override\n   public void addConnectionClosedListener(final Runnable connectionClosedListener) {\n     connectionClosedListeners.add(connectionClosedListener);\n   }\n \n   @Override\n   public void messageReceived(final String message) {\n-    final ServerMessageEnvelope converted = gson.fromJson(message, ServerMessageEnvelope.class);\n-    messageListener.accept(converted);\n+    final MessageEnvelope converted = gson.fromJson(message, MessageEnvelope.class);\n+\n+    listeners.stream()\n+        .filter(listener -> converted.messageTypeIs(listener.messageType))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4NDk0NA=="}, "originalCommit": {"oid": "1b28cbb1954852950e96cbeabf9ab436ed254e2f"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyNzMzNQ==", "bodyText": "I agree that a map might not yield the desired performance benefits with this few listeners, but your answer about the types surprised me:\nWhat would speak against code that looks something along the lines of this:\nprivate final Multimap<MessageType<?>, MessageListener> listeners = HashMultimap.create();\n\n@Override\npublic void messageReceived(final String message) {\n  final MessageEnvelope converted = gson.fromJson(message, MessageEnvelope.class);\n\n  listeners.get(converted.getMessageType()).forEach(listener ->\n                listener.listener.accept(\n                    converted.getPayload(listener.messageType.getPayloadType())));\n}", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399727335", "createdAt": "2020-03-29T00:38:00Z", "author": {"login": "RoiEXLab"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/GenericWebSocketClient.java", "diffHunk": "@@ -19,74 +24,102 @@\n  * API, and it automatically converts incoming and outgoing messages to JSON string. In particular\n  * this class makes sure that all operations are non-blocking, but keep their initial dispatch\n  * order.\n+ *\n+ * <p>Note: The error handler passed in is invoked if we get an error connecting to server, or if\n+ * server sends us an error message.\n  */\n @Log\n-public class GenericWebSocketClient implements WebSocketConnectionListener {\n+public class GenericWebSocketClient implements WebSocket, WebSocketConnectionListener {\n   private static final Gson gson = new Gson();\n \n-  private final WebSocketConnection client;\n   /** These are called whenever connection is closed, whether by us or server. */\n   private final Collection<Runnable> connectionClosedListeners = new ArrayList<>();\n \n-  private final Consumer<String> errorHandler;\n-  private Consumer<ServerMessageEnvelope> messageListener;\n+  @Nonnull private final URI websocketUri;\n+  @Nonnull private final Consumer<String> errorHandler;\n \n-  public GenericWebSocketClient(final URI lobbyUri, final Consumer<String> errorHandler) {\n-    this(new WebSocketConnection(swapHttpsToWssProtocol(lobbyUri)), errorHandler);\n-  }\n+  private WebSocketConnection webSocketConnection;\n+  private final Set<MessageListener<? extends WebSocketMessage>> listeners = new HashSet<>();\n \n-  @VisibleForTesting\n-  GenericWebSocketClient(\n-      final WebSocketConnection webSocketClient, final Consumer<String> errorHandler) {\n-    client = webSocketClient;\n-    this.errorHandler = errorHandler;\n+  @Builder\n+  private static class MessageListener<T extends WebSocketMessage> {\n+    @Nonnull MessageType<T> messageType;\n+    @Nonnull Consumer<Object> listener;\n   }\n \n-  @VisibleForTesting\n-  static URI swapHttpsToWssProtocol(final URI uri) {\n-    return uri.getScheme().equals(\"https\")\n-        ? URI.create(uri.toString().replace(\"https\", \"wss\"))\n-        : uri;\n-  }\n-\n-  public void registerListenerAndConnect(final Consumer<ServerMessageEnvelope> messageListener) {\n-    this.messageListener = messageListener;\n-    client\n-        .connect(this, errorHandler)\n-        .exceptionally(\n-            throwable -> {\n-              log.log(\n-                  Level.SEVERE, \"Unexpected exception completing websocket connection\", throwable);\n-              return false;\n-            });\n+  @Builder\n+  public GenericWebSocketClient(\n+      @Nonnull final URI websocketUri, @Nonnull final Consumer<String> errorHandler) {\n+    this.websocketUri = websocketUri;\n+    this.errorHandler = errorHandler;\n   }\n \n   /**\n    * Non-blocking send of a message to the server. Implementation note: data is sent as a JSON\n    * string, this method handles conversion of the parameter object to JSON.\n    *\n    * @param message The data object to send to the server.\n+   * @deprecated Call {@code sendMessage(WebsocketMessage)} instead.\n    */\n+  @Deprecated\n   public void send(final ClientMessageEnvelope message) {\n     // we get by doing the send on a new thread.\n-    client.sendMessage(gson.toJson(message));\n+    webSocketConnection.sendMessage(gson.toJson(message));\n   }\n \n-  /**\n-   * Removes connection lost listeners and starts a non-blocking close of the websocket connection.\n-   */\n+  @Override\n+  public void connect() {\n+    addListener(ServerErrorMessage.TYPE, message -> errorHandler.accept(message.getError()));\n+    webSocketConnection = new WebSocketConnection(swapHttpsToWssProtocol(websocketUri));\n+    webSocketConnection.connect(this, errorHandler);\n+  }\n+\n+  @VisibleForTesting\n+  static URI swapHttpsToWssProtocol(final URI uri) {\n+    return uri.getScheme().equals(\"https\")\n+        ? URI.create(uri.toString().replace(\"https\", \"wss\"))\n+        : uri;\n+  }\n+\n+  /** Starts a non-blocking close of the websocket connection. */\n+  @Override\n   public void close() {\n-    client.close();\n+    webSocketConnection.close();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public <T extends WebSocketMessage> void addListener(\n+      final MessageType<T> messageType, final Consumer<T> messageHandler) {\n+\n+    final Consumer<Object> messageConsumer = object -> messageHandler.accept((T) object);\n+    listeners.add(\n+        MessageListener.<T>builder() //\n+            .messageType(messageType)\n+            .listener(messageConsumer)\n+            .build());\n+  }\n+\n+  @Override\n+  public void sendMessage(final WebSocketMessage message) {\n+    webSocketConnection.sendMessage(gson.toJson(message.toEnvelope()));\n   }\n \n+  @Override\n   public void addConnectionClosedListener(final Runnable connectionClosedListener) {\n     connectionClosedListeners.add(connectionClosedListener);\n   }\n \n   @Override\n   public void messageReceived(final String message) {\n-    final ServerMessageEnvelope converted = gson.fromJson(message, ServerMessageEnvelope.class);\n-    messageListener.accept(converted);\n+    final MessageEnvelope converted = gson.fromJson(message, MessageEnvelope.class);\n+\n+    listeners.stream()\n+        .filter(listener -> converted.messageTypeIs(listener.messageType))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4NDk0NA=="}, "originalCommit": {"oid": "1b28cbb1954852950e96cbeabf9ab436ed254e2f"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNjgwOQ==", "bodyText": "Seems you'll lose type coherence, getMessageType() returns a string. MessageListener is also a generic type as well, it should match the generic type for MessageType\nOne also needs to account for the adding a listener as well under those constraints. The type safety we worked pretty hard for previously, clarity and correctness are important heuristics. We also need to think about system level issues, whether the incoming/outgoing message pattern is going to be clear and sustainable.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399736809", "createdAt": "2020-03-29T02:54:05Z", "author": {"login": "DanVanAtta"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/GenericWebSocketClient.java", "diffHunk": "@@ -19,74 +24,102 @@\n  * API, and it automatically converts incoming and outgoing messages to JSON string. In particular\n  * this class makes sure that all operations are non-blocking, but keep their initial dispatch\n  * order.\n+ *\n+ * <p>Note: The error handler passed in is invoked if we get an error connecting to server, or if\n+ * server sends us an error message.\n  */\n @Log\n-public class GenericWebSocketClient implements WebSocketConnectionListener {\n+public class GenericWebSocketClient implements WebSocket, WebSocketConnectionListener {\n   private static final Gson gson = new Gson();\n \n-  private final WebSocketConnection client;\n   /** These are called whenever connection is closed, whether by us or server. */\n   private final Collection<Runnable> connectionClosedListeners = new ArrayList<>();\n \n-  private final Consumer<String> errorHandler;\n-  private Consumer<ServerMessageEnvelope> messageListener;\n+  @Nonnull private final URI websocketUri;\n+  @Nonnull private final Consumer<String> errorHandler;\n \n-  public GenericWebSocketClient(final URI lobbyUri, final Consumer<String> errorHandler) {\n-    this(new WebSocketConnection(swapHttpsToWssProtocol(lobbyUri)), errorHandler);\n-  }\n+  private WebSocketConnection webSocketConnection;\n+  private final Set<MessageListener<? extends WebSocketMessage>> listeners = new HashSet<>();\n \n-  @VisibleForTesting\n-  GenericWebSocketClient(\n-      final WebSocketConnection webSocketClient, final Consumer<String> errorHandler) {\n-    client = webSocketClient;\n-    this.errorHandler = errorHandler;\n+  @Builder\n+  private static class MessageListener<T extends WebSocketMessage> {\n+    @Nonnull MessageType<T> messageType;\n+    @Nonnull Consumer<Object> listener;\n   }\n \n-  @VisibleForTesting\n-  static URI swapHttpsToWssProtocol(final URI uri) {\n-    return uri.getScheme().equals(\"https\")\n-        ? URI.create(uri.toString().replace(\"https\", \"wss\"))\n-        : uri;\n-  }\n-\n-  public void registerListenerAndConnect(final Consumer<ServerMessageEnvelope> messageListener) {\n-    this.messageListener = messageListener;\n-    client\n-        .connect(this, errorHandler)\n-        .exceptionally(\n-            throwable -> {\n-              log.log(\n-                  Level.SEVERE, \"Unexpected exception completing websocket connection\", throwable);\n-              return false;\n-            });\n+  @Builder\n+  public GenericWebSocketClient(\n+      @Nonnull final URI websocketUri, @Nonnull final Consumer<String> errorHandler) {\n+    this.websocketUri = websocketUri;\n+    this.errorHandler = errorHandler;\n   }\n \n   /**\n    * Non-blocking send of a message to the server. Implementation note: data is sent as a JSON\n    * string, this method handles conversion of the parameter object to JSON.\n    *\n    * @param message The data object to send to the server.\n+   * @deprecated Call {@code sendMessage(WebsocketMessage)} instead.\n    */\n+  @Deprecated\n   public void send(final ClientMessageEnvelope message) {\n     // we get by doing the send on a new thread.\n-    client.sendMessage(gson.toJson(message));\n+    webSocketConnection.sendMessage(gson.toJson(message));\n   }\n \n-  /**\n-   * Removes connection lost listeners and starts a non-blocking close of the websocket connection.\n-   */\n+  @Override\n+  public void connect() {\n+    addListener(ServerErrorMessage.TYPE, message -> errorHandler.accept(message.getError()));\n+    webSocketConnection = new WebSocketConnection(swapHttpsToWssProtocol(websocketUri));\n+    webSocketConnection.connect(this, errorHandler);\n+  }\n+\n+  @VisibleForTesting\n+  static URI swapHttpsToWssProtocol(final URI uri) {\n+    return uri.getScheme().equals(\"https\")\n+        ? URI.create(uri.toString().replace(\"https\", \"wss\"))\n+        : uri;\n+  }\n+\n+  /** Starts a non-blocking close of the websocket connection. */\n+  @Override\n   public void close() {\n-    client.close();\n+    webSocketConnection.close();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public <T extends WebSocketMessage> void addListener(\n+      final MessageType<T> messageType, final Consumer<T> messageHandler) {\n+\n+    final Consumer<Object> messageConsumer = object -> messageHandler.accept((T) object);\n+    listeners.add(\n+        MessageListener.<T>builder() //\n+            .messageType(messageType)\n+            .listener(messageConsumer)\n+            .build());\n+  }\n+\n+  @Override\n+  public void sendMessage(final WebSocketMessage message) {\n+    webSocketConnection.sendMessage(gson.toJson(message.toEnvelope()));\n   }\n \n+  @Override\n   public void addConnectionClosedListener(final Runnable connectionClosedListener) {\n     connectionClosedListeners.add(connectionClosedListener);\n   }\n \n   @Override\n   public void messageReceived(final String message) {\n-    final ServerMessageEnvelope converted = gson.fromJson(message, ServerMessageEnvelope.class);\n-    messageListener.accept(converted);\n+    final MessageEnvelope converted = gson.fromJson(message, MessageEnvelope.class);\n+\n+    listeners.stream()\n+        .filter(listener -> converted.messageTypeIs(listener.messageType))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4NDk0NA=="}, "originalCommit": {"oid": "1b28cbb1954852950e96cbeabf9ab436ed254e2f"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODQ1ODMyOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/moderation/ban/user/UserBanService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMDoxNTo0OVrOF9NUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMDoxNTo0OVrOF9NUXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyNTY2Mw==", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399725663", "createdAt": "2020-03-29T00:15:49Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/modules/moderation/ban/user/UserBanService.java", "diffHunk": "@@ -149,16 +124,50 @@ private static UserBanParams toUserBanParams(\n         .build();\n   }\n \n-  private static String playerBannedMessage(final long banMinutes) {\n-    return String.format(\n-        \"You have been banned for %s for violating lobby rules\",\n-        BanDurationFormatter.formatBanMinutes(banMinutes));\n+  private void persistUserBanToDatabase(final UserBanParams userBanParams) {\n+    if (userBanDao.addBan(\n+            publicIdSupplier.get(),\n+            userBanParams.getUsername(),\n+            userBanParams.getSystemId(),\n+            userBanParams.getIp(),\n+            userBanParams.getMinutesToBan())\n+        != 1) {\n+      throw new IllegalStateException(\"Failed to insert ban record:\" + userBanParams);\n+    }\n   }\n \n-  private static String playerBannedNotification(\n-      final UserName bannedUserName, final long banMinutes) {\n-    return String.format(\n-        \"%s violated lobby rules and was banned for %s\",\n-        bannedUserName, BanDurationFormatter.formatBanMinutes(banMinutes));\n+  private void removePlayerFromChat(final UserBanParams userBanParams) {\n+    // kick the player out of chat and send a broadcast message\n+    if (chatters.hasPlayer(UserName.of(userBanParams.getUsername()))\n+        && disconnectUserFromChat(userBanParams)) {\n+      broadcastToChattersPlayerBannedMessage(userBanParams);\n+    }\n+  }\n+\n+  private boolean disconnectUserFromChat(final UserBanParams userBanParams) {\n+    return chatters.disconnectPlayerSessions(\n+        UserName.of(userBanParams.getUsername()),\n+        String.format(\n+            \"You have been banned for %s for violating lobby rules\",\n+            BanDurationFormatter.formatBanMinutes(userBanParams.getMinutesToBan())));\n+  }\n+\n+  private void broadcastToChattersPlayerBannedMessage(final UserBanParams banUserParams) {\n+    chatMessagingBus.broadcastMessage(\n+        new ChatEventReceivedMessage(\n+            String.format(\n+                \"%s violated lobby rules and was banned for %s\",\n+                banUserParams.getUsername(),\n+                BanDurationFormatter.formatBanMinutes(banUserParams.getMinutesToBan()))));\n+  }\n+\n+  private void recordBanInModeratorAuditLog(int moderatorId, UserBanParams userBanParams) {\n+    moderatorAuditHistoryDao.addAuditRecord(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3e112e077264b59909aad8198872dee75c3f111"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTUwNjgzOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/web/socket/GameConnectionWebSocket.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMTo0NToyN1rOF9VaMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMTo0NToyN1rOF9VaMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1ODIyNw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399858227", "createdAt": "2020-03-29T21:45:27Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/web/socket/GameConnectionWebSocket.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.triplea.web.socket;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f086a64eb27882184cdff25629f42b964ba3c39a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTUwNjg0OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/web/socket/PlayerConnectionWebSocket.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMTo0NToyN1rOF9VaNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMTo0NToyN1rOF9VaNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1ODIyOA==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399858228", "createdAt": "2020-03-29T21:45:27Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/web/socket/PlayerConnectionWebSocket.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.triplea.web.socket;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f086a64eb27882184cdff25629f42b964ba3c39a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTg1MjU0OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoxNTo1OFrOF9YWRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoxNTo1OFrOF9YWRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNjM3Mw==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399906373", "createdAt": "2020-03-30T03:15:58Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -15,39 +16,79 @@\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n+import org.jdbi.v3.core.Jdbi;\n+import org.triplea.db.dao.api.key.ApiKeyDaoWrapper;\n+import org.triplea.domain.data.ApiKey;\n import org.triplea.domain.data.ChatParticipant;\n import org.triplea.domain.data.UserName;\n \n+/** Keeps the current list of ChatParticipants and maps them to their websocket session. */\n @Slf4j\n @AllArgsConstructor\n public class Chatters {\n+  private final ApiKeyDaoWrapper apiKeyDaoWrapper;\n+  private final ChatParticipantAdapter chatParticipantAdapter;\n+\n+  @Getter(value = AccessLevel.PACKAGE, onMethod_ = @VisibleForTesting)\n+  private final Map<String, ChatterSession> participants = new ConcurrentHashMap<>();\n+\n   @AllArgsConstructor\n   @Getter\n   @VisibleForTesting\n-  static class ChatterSession {\n+  private static class ChatterSession {\n     private final ChatParticipant chatParticipant;\n     private final Session session;\n   }\n \n-  @Getter(value = AccessLevel.PACKAGE, onMethod_ = @VisibleForTesting)\n-  private final Map<String, ChatterSession> participants = new ConcurrentHashMap<>();\n+  public static Chatters build(final Jdbi jdbi) {\n+    return new Chatters(ApiKeyDaoWrapper.build(jdbi), new ChatParticipantAdapter());\n+  }\n \n-  Optional<UserName> removeSession(final Session session) {\n-    return Optional.ofNullable(participants.remove(session.getId()))\n-        .map(ChatterSession::getChatParticipant)\n-        .map(ChatParticipant::getUserName);\n+  public Optional<ChatParticipant> lookupPlayerBySession(final Session senderSession) {\n+    return Optional.ofNullable(participants.get(senderSession.getId()))\n+        .map(chatterSession -> chatterSession.chatParticipant);\n   }\n \n-  void put(final Session session, final ChatParticipant chatter) {\n-    participants.put(session.getId(), new ChatterSession(chatter, session));\n+  public Optional<ChatParticipant> connectPlayer(final ApiKey apiKey, final Session session) {\n+    final Optional<ChatParticipant> chatParticipant =\n+        apiKeyDaoWrapper.lookupByApiKey(apiKey).map(chatParticipantAdapter);\n+    // add chatter\n+    chatParticipant.ifPresent(\n+        participant -> participants.put(session.getId(), new ChatterSession(participant, session)));\n+    return chatParticipant;\n   }\n \n-  Collection<ChatParticipant> getAllParticipants() {\n+  // TODO: test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cbba59c00e6790a241b174eb7851fa773530552"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTg1MjU1OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoxNTo1OVrOF9YWRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoxNTo1OVrOF9YWRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNjM3NA==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r399906374", "createdAt": "2020-03-30T03:15:59Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -15,39 +16,79 @@\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n+import org.jdbi.v3.core.Jdbi;\n+import org.triplea.db.dao.api.key.ApiKeyDaoWrapper;\n+import org.triplea.domain.data.ApiKey;\n import org.triplea.domain.data.ChatParticipant;\n import org.triplea.domain.data.UserName;\n \n+/** Keeps the current list of ChatParticipants and maps them to their websocket session. */\n @Slf4j\n @AllArgsConstructor\n public class Chatters {\n+  private final ApiKeyDaoWrapper apiKeyDaoWrapper;\n+  private final ChatParticipantAdapter chatParticipantAdapter;\n+\n+  @Getter(value = AccessLevel.PACKAGE, onMethod_ = @VisibleForTesting)\n+  private final Map<String, ChatterSession> participants = new ConcurrentHashMap<>();\n+\n   @AllArgsConstructor\n   @Getter\n   @VisibleForTesting\n-  static class ChatterSession {\n+  private static class ChatterSession {\n     private final ChatParticipant chatParticipant;\n     private final Session session;\n   }\n \n-  @Getter(value = AccessLevel.PACKAGE, onMethod_ = @VisibleForTesting)\n-  private final Map<String, ChatterSession> participants = new ConcurrentHashMap<>();\n+  public static Chatters build(final Jdbi jdbi) {\n+    return new Chatters(ApiKeyDaoWrapper.build(jdbi), new ChatParticipantAdapter());\n+  }\n \n-  Optional<UserName> removeSession(final Session session) {\n-    return Optional.ofNullable(participants.remove(session.getId()))\n-        .map(ChatterSession::getChatParticipant)\n-        .map(ChatParticipant::getUserName);\n+  public Optional<ChatParticipant> lookupPlayerBySession(final Session senderSession) {\n+    return Optional.ofNullable(participants.get(senderSession.getId()))\n+        .map(chatterSession -> chatterSession.chatParticipant);\n   }\n \n-  void put(final Session session, final ChatParticipant chatter) {\n-    participants.put(session.getId(), new ChatterSession(chatter, session));\n+  public Optional<ChatParticipant> connectPlayer(final ApiKey apiKey, final Session session) {\n+    final Optional<ChatParticipant> chatParticipant =\n+        apiKeyDaoWrapper.lookupByApiKey(apiKey).map(chatParticipantAdapter);\n+    // add chatter\n+    chatParticipant.ifPresent(\n+        participant -> participants.put(session.getId(), new ChatterSession(participant, session)));\n+    return chatParticipant;\n   }\n \n-  Collection<ChatParticipant> getAllParticipants() {\n+  // TODO: test\n+  public Collection<ChatParticipant> getChatters() {\n     return participants.values().stream()\n-        .map(ChatterSession::getChatParticipant)\n-        .collect(Collectors.toSet());\n+        .map(session -> session.chatParticipant)\n+        .collect(Collectors.toList());\n+  }\n+\n+  // TODO: test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cbba59c00e6790a241b174eb7851fa773530552"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDU1MDYzOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/web/socket/WebSocketMessagingBus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyNjo0MlrOF9ewHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyNjo0MlrOF9ewHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMTI5Mg==", "bodyText": "Method onMessage has 27 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r400011292", "createdAt": "2020-03-30T08:26:42Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/web/socket/WebSocketMessagingBus.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package org.triplea.web.socket;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.gson.Gson;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.websocket.Session;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.triplea.http.client.web.socket.MessageEnvelope;\n+import org.triplea.http.client.web.socket.messages.MessageType;\n+import org.triplea.http.client.web.socket.messages.WebSocketMessage;\n+import org.triplea.http.client.web.socket.messages.envelopes.ServerErrorMessage;\n+\n+@AllArgsConstructor(access = AccessLevel.PACKAGE, onConstructor_ = @VisibleForTesting)\n+@Slf4j\n+public class WebSocketMessagingBus {\n+  public static final String MESSAGING_BUS_KEY = \"messaging.bus\";\n+  private static final Gson GSON = new Gson();\n+\n+  @Nonnull private final MessageBroadcaster messageBroadcaster;\n+  @Nonnull private final MessageSender messageSender;\n+  @Nonnull private final SessionSet sessionSet;\n+\n+  private final List<BiConsumer<WebSocketMessagingBus, Session>> sessionClosedListeners =\n+      new ArrayList<>();\n+\n+  @Value\n+  private static class MessageListener<T extends WebSocketMessage> {\n+    MessageType<T> messageType;\n+    Consumer<WebSocketMessageContext> listener;\n+  }\n+\n+  private final List<MessageListener<?>> messageListeners = new ArrayList<>();\n+\n+  public WebSocketMessagingBus() {\n+    messageSender = new MessageSender();\n+    messageBroadcaster = new MessageBroadcaster(messageSender);\n+    sessionSet = new SessionSet();\n+  }\n+\n+  public <X extends WebSocketMessage> void sendResponse(\n+      final Session session, final X responseMessage) {\n+    messageSender.accept(session, responseMessage.toEnvelope());\n+  }\n+\n+  public <X extends WebSocketMessage> void broadcastMessage(final X broadcastMessage) {\n+    broadcastMessage(sessionSet.getSessions(), broadcastMessage);\n+  }\n+\n+  public <X extends WebSocketMessage> void broadcastMessage(\n+      final Collection<Session> sessions, final X broadcastMessage) {\n+    messageBroadcaster.accept(sessions, broadcastMessage.toEnvelope());\n+  }\n+\n+  public <T extends WebSocketMessage> void addListener(\n+      final MessageType<T> type, final Consumer<WebSocketMessageContext<T>> listener) {\n+    messageListeners.add(new MessageListener(type, listener));\n+  }\n+\n+  void onMessage(final Session session, final String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a14479809f9e3c68fe234c815cc95b29d75a7d70"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDU4MjY1OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/web/socket/WebSocketMessagingBus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODozNTowMVrOF9fDpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODozNTowMVrOF9fDpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxNjI5Mg==", "bodyText": "Method onMessage has 27 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r400016292", "createdAt": "2020-03-30T08:35:01Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/web/socket/WebSocketMessagingBus.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package org.triplea.web.socket;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.gson.Gson;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.websocket.Session;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.triplea.http.client.web.socket.MessageEnvelope;\n+import org.triplea.http.client.web.socket.messages.MessageType;\n+import org.triplea.http.client.web.socket.messages.WebSocketMessage;\n+import org.triplea.http.client.web.socket.messages.envelopes.ServerErrorMessage;\n+\n+@AllArgsConstructor(access = AccessLevel.PACKAGE, onConstructor_ = @VisibleForTesting)\n+@Slf4j\n+public class WebSocketMessagingBus {\n+  public static final String MESSAGING_BUS_KEY = \"messaging.bus\";\n+  private static final Gson GSON = new Gson();\n+\n+  @Nonnull private final MessageBroadcaster messageBroadcaster;\n+  @Nonnull private final MessageSender messageSender;\n+  @Nonnull private final SessionSet sessionSet;\n+\n+  private final List<BiConsumer<WebSocketMessagingBus, Session>> sessionClosedListeners =\n+      new ArrayList<>();\n+\n+  @Value\n+  private static class MessageListener<T extends WebSocketMessage> {\n+    MessageType<T> messageType;\n+    Consumer<WebSocketMessageContext> listener;\n+  }\n+\n+  private final List<MessageListener<?>> messageListeners = new ArrayList<>();\n+\n+  public WebSocketMessagingBus() {\n+    messageSender = new MessageSender();\n+    messageBroadcaster = new MessageBroadcaster(messageSender);\n+    sessionSet = new SessionSet();\n+  }\n+\n+  public <X extends WebSocketMessage> void sendResponse(\n+      final Session session, final X responseMessage) {\n+    messageSender.accept(session, responseMessage.toEnvelope());\n+  }\n+\n+  public <X extends WebSocketMessage> void broadcastMessage(final X broadcastMessage) {\n+    broadcastMessage(sessionSet.getSessions(), broadcastMessage);\n+  }\n+\n+  public <X extends WebSocketMessage> void broadcastMessage(\n+      final Collection<Session> sessions, final X broadcastMessage) {\n+    messageBroadcaster.accept(sessions, broadcastMessage.toEnvelope());\n+  }\n+\n+  public <T extends WebSocketMessage> void addListener(\n+      final MessageType<T> type, final Consumer<WebSocketMessageContext<T>> listener) {\n+    messageListeners.add(new MessageListener(type, listener));\n+  }\n+\n+  void onMessage(final Session session, final String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20b17bce377036662fffeb3d2d6ddf4cb363ee63"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjk0MTMwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/mc/SetupPanelModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTowMzoxOFrOGCzfHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTowMzoxOFrOGCzfHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5Mzg4NA==", "bodyText": "The curly braces are unecessary here", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r405593884", "createdAt": "2020-04-08T15:03:18Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/mc/SetupPanelModel.java", "diffHunk": "@@ -64,7 +64,9 @@ public ServerModel showServer() {\n         this,\n         ui,\n         new HeadedLaunchAction(ui),\n-        error -> SwingComponents.showError(null, \"Connection problem\", error));\n+        error -> {\n+          SwingComponents.showError(null, \"Connection problem\", error);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0092443bcef243afbe82ea00cbc60648a719d00b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjk3NTcwOnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketProtocolSwapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxMToxNFrOGCz1aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxMToxNFrOGCz1aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5OTU5Mg==", "bodyText": "This class could even implement UnaryOperator<URI>\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/UnaryOperator.html", "url": "https://github.com/triplea-game/triplea/pull/6096#discussion_r405599592", "createdAt": "2020-04-08T15:11:14Z", "author": {"login": "RoiEXLab"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/WebSocketProtocolSwapper.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.triplea.http.client.web.socket;\n+\n+import java.net.URI;\n+import java.util.function.Function;\n+\n+class WebSocketProtocolSwapper implements Function<URI, URI> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0092443bcef243afbe82ea00cbc60648a719d00b"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2390, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}