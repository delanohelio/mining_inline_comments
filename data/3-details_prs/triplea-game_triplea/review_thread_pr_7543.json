{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNDY2MTAw", "number": 7543, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOEgk5eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoyMVrOEglGGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk0NDI0OnYy", "diffSide": "RIGHT", "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/AnnotatedFields.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODY2Nw==", "bodyText": "Consider simplifying this complex logical expression.", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483918667", "createdAt": "2020-09-05T06:39:11Z", "author": {"login": "codeclimate"}, "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/AnnotatedFields.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package org.triplea.generic.xml.reader;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Getter;\n+import org.triplea.generic.xml.reader.annotations.Attribute;\n+import org.triplea.generic.xml.reader.annotations.BodyText;\n+import org.triplea.generic.xml.reader.annotations.Tag;\n+import org.triplea.generic.xml.reader.annotations.TagList;\n+import org.triplea.generic.xml.reader.exceptions.JavaDataModelException;\n+\n+/**\n+ * Sorts fields, validates fields, and sets fields to accessible. Field validation will check that\n+ * we see the right annotations on the right class types, for example that '@TagList' is on only\n+ * 'java.util.List'.\n+ *\n+ * @param <T> Java model object class type (essentially the tag we are currently creating as a java\n+ *     object).\n+ */\n+@Getter\n+class AnnotatedFields<T> {\n+  private final List<Field> attributeFields = new ArrayList<>();\n+  private final List<Field> tagFields = new ArrayList<>();\n+  private final List<Field> tagListFields = new ArrayList<>();\n+  private final List<Field> bodyTextFields = new ArrayList<>();\n+\n+  AnnotatedFields(final Class<T> pojo) throws JavaDataModelException {\n+    for (final Field field : pojo.getDeclaredFields()) {\n+      validateAnnotations(field);\n+      if (field.getAnnotation(Attribute.class) != null) {\n+        field.setAccessible(true);\n+        attributeFields.add(field);\n+      } else if (field.getAnnotation(Tag.class) != null) {\n+        field.setAccessible(true);\n+        tagFields.add(field);\n+      } else if (field.getAnnotation(TagList.class) != null) {\n+        field.setAccessible(true);\n+        tagListFields.add(field);\n+      } else if (field.getAnnotation(BodyText.class) != null) {\n+        field.setAccessible(true);\n+        bodyTextFields.add(field);\n+      }\n+    }\n+    if (bodyTextFields.size() > 1) {\n+      throw new JavaDataModelException(\n+          \"Too many body text fields, can only have one on any given class\");\n+    }\n+    if (!bodyTextFields.isEmpty() && (!tagFields.isEmpty() && !tagListFields.isEmpty())) {\n+      throw new JavaDataModelException(\n+          \"Illegal combination of annoations, may only have attributes and a body text,\"\n+              + \"or attributes and tags (or taglist), but may not have both body text and tags.\");\n+    }\n+  }\n+\n+  private static <T> void validateAnnotations(final Field field) throws JavaDataModelException {\n+\n+    int annotationCount = 0;\n+\n+    if (field.getAnnotation(Attribute.class) != null) {\n+      if (field.getType() != String.class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fbaabf1a195ae4a87987af3f1f35b5e9efdd79"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk0NDI1OnYy", "diffSide": "RIGHT", "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/AnnotatedFields.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODY2OA==", "bodyText": "Method validateAnnotations has 64 lines of code (exceeds 30 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483918668", "createdAt": "2020-09-05T06:39:11Z", "author": {"login": "codeclimate"}, "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/AnnotatedFields.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package org.triplea.generic.xml.reader;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Getter;\n+import org.triplea.generic.xml.reader.annotations.Attribute;\n+import org.triplea.generic.xml.reader.annotations.BodyText;\n+import org.triplea.generic.xml.reader.annotations.Tag;\n+import org.triplea.generic.xml.reader.annotations.TagList;\n+import org.triplea.generic.xml.reader.exceptions.JavaDataModelException;\n+\n+/**\n+ * Sorts fields, validates fields, and sets fields to accessible. Field validation will check that\n+ * we see the right annotations on the right class types, for example that '@TagList' is on only\n+ * 'java.util.List'.\n+ *\n+ * @param <T> Java model object class type (essentially the tag we are currently creating as a java\n+ *     object).\n+ */\n+@Getter\n+class AnnotatedFields<T> {\n+  private final List<Field> attributeFields = new ArrayList<>();\n+  private final List<Field> tagFields = new ArrayList<>();\n+  private final List<Field> tagListFields = new ArrayList<>();\n+  private final List<Field> bodyTextFields = new ArrayList<>();\n+\n+  AnnotatedFields(final Class<T> pojo) throws JavaDataModelException {\n+    for (final Field field : pojo.getDeclaredFields()) {\n+      validateAnnotations(field);\n+      if (field.getAnnotation(Attribute.class) != null) {\n+        field.setAccessible(true);\n+        attributeFields.add(field);\n+      } else if (field.getAnnotation(Tag.class) != null) {\n+        field.setAccessible(true);\n+        tagFields.add(field);\n+      } else if (field.getAnnotation(TagList.class) != null) {\n+        field.setAccessible(true);\n+        tagListFields.add(field);\n+      } else if (field.getAnnotation(BodyText.class) != null) {\n+        field.setAccessible(true);\n+        bodyTextFields.add(field);\n+      }\n+    }\n+    if (bodyTextFields.size() > 1) {\n+      throw new JavaDataModelException(\n+          \"Too many body text fields, can only have one on any given class\");\n+    }\n+    if (!bodyTextFields.isEmpty() && (!tagFields.isEmpty() && !tagListFields.isEmpty())) {\n+      throw new JavaDataModelException(\n+          \"Illegal combination of annoations, may only have attributes and a body text,\"\n+              + \"or attributes and tags (or taglist), but may not have both body text and tags.\");\n+    }\n+  }\n+\n+  private static <T> void validateAnnotations(final Field field) throws JavaDataModelException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fbaabf1a195ae4a87987af3f1f35b5e9efdd79"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk0NDI2OnYy", "diffSide": "RIGHT", "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/XmlParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODY2OQ==", "bodyText": "Method parse has a Cognitive Complexity of 16 (exceeds 7 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483918669", "createdAt": "2020-09-05T06:39:11Z", "author": {"login": "codeclimate"}, "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/XmlParser.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.triplea.generic.xml.reader;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import javax.xml.stream.XMLStreamReader;\n+import org.triplea.java.function.ThrowingRunnable;\n+\n+class XmlParser {\n+  private final String tagName;\n+  private final Map<String, ThrowingRunnable<?>> childTagHandlers = new HashMap<>();\n+  private Consumer<String> bodyHandler;\n+\n+  XmlParser(final String tagName) {\n+    this.tagName = tagName.toUpperCase();\n+  }\n+\n+  void childTagHandler(final String childTagName, final ThrowingRunnable<?> tagHandler) {\n+    childTagHandlers.put(childTagName.toUpperCase(), tagHandler);\n+  }\n+\n+  void bodyHandler(final Consumer<String> bodyHandler) {\n+    this.bodyHandler = bodyHandler;\n+  }\n+\n+  void parse(final XMLStreamReader streamReader) throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fbaabf1a195ae4a87987af3f1f35b5e9efdd79"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk0NDI3OnYy", "diffSide": "RIGHT", "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/AnnotatedFields.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODY3MA==", "bodyText": "Method validateAnnotations has a Cognitive Complexity of 25 (exceeds 7 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483918670", "createdAt": "2020-09-05T06:39:11Z", "author": {"login": "codeclimate"}, "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/AnnotatedFields.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package org.triplea.generic.xml.reader;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Getter;\n+import org.triplea.generic.xml.reader.annotations.Attribute;\n+import org.triplea.generic.xml.reader.annotations.BodyText;\n+import org.triplea.generic.xml.reader.annotations.Tag;\n+import org.triplea.generic.xml.reader.annotations.TagList;\n+import org.triplea.generic.xml.reader.exceptions.JavaDataModelException;\n+\n+/**\n+ * Sorts fields, validates fields, and sets fields to accessible. Field validation will check that\n+ * we see the right annotations on the right class types, for example that '@TagList' is on only\n+ * 'java.util.List'.\n+ *\n+ * @param <T> Java model object class type (essentially the tag we are currently creating as a java\n+ *     object).\n+ */\n+@Getter\n+class AnnotatedFields<T> {\n+  private final List<Field> attributeFields = new ArrayList<>();\n+  private final List<Field> tagFields = new ArrayList<>();\n+  private final List<Field> tagListFields = new ArrayList<>();\n+  private final List<Field> bodyTextFields = new ArrayList<>();\n+\n+  AnnotatedFields(final Class<T> pojo) throws JavaDataModelException {\n+    for (final Field field : pojo.getDeclaredFields()) {\n+      validateAnnotations(field);\n+      if (field.getAnnotation(Attribute.class) != null) {\n+        field.setAccessible(true);\n+        attributeFields.add(field);\n+      } else if (field.getAnnotation(Tag.class) != null) {\n+        field.setAccessible(true);\n+        tagFields.add(field);\n+      } else if (field.getAnnotation(TagList.class) != null) {\n+        field.setAccessible(true);\n+        tagListFields.add(field);\n+      } else if (field.getAnnotation(BodyText.class) != null) {\n+        field.setAccessible(true);\n+        bodyTextFields.add(field);\n+      }\n+    }\n+    if (bodyTextFields.size() > 1) {\n+      throw new JavaDataModelException(\n+          \"Too many body text fields, can only have one on any given class\");\n+    }\n+    if (!bodyTextFields.isEmpty() && (!tagFields.isEmpty() && !tagListFields.isEmpty())) {\n+      throw new JavaDataModelException(\n+          \"Illegal combination of annoations, may only have attributes and a body text,\"\n+              + \"or attributes and tags (or taglist), but may not have both body text and tags.\");\n+    }\n+  }\n+\n+  private static <T> void validateAnnotations(final Field field) throws JavaDataModelException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fbaabf1a195ae4a87987af3f1f35b5e9efdd79"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk0NDI4OnYy", "diffSide": "RIGHT", "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/XmlParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODY3MQ==", "bodyText": "Method parse has 31 lines of code (exceeds 30 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483918671", "createdAt": "2020-09-05T06:39:11Z", "author": {"login": "codeclimate"}, "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/XmlParser.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.triplea.generic.xml.reader;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import javax.xml.stream.XMLStreamReader;\n+import org.triplea.java.function.ThrowingRunnable;\n+\n+class XmlParser {\n+  private final String tagName;\n+  private final Map<String, ThrowingRunnable<?>> childTagHandlers = new HashMap<>();\n+  private Consumer<String> bodyHandler;\n+\n+  XmlParser(final String tagName) {\n+    this.tagName = tagName.toUpperCase();\n+  }\n+\n+  void childTagHandler(final String childTagName, final ThrowingRunnable<?> tagHandler) {\n+    childTagHandlers.put(childTagName.toUpperCase(), tagHandler);\n+  }\n+\n+  void bodyHandler(final Consumer<String> bodyHandler) {\n+    this.bodyHandler = bodyHandler;\n+  }\n+\n+  void parse(final XMLStreamReader streamReader) throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fbaabf1a195ae4a87987af3f1f35b5e9efdd79"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk0NDI5OnYy", "diffSide": "RIGHT", "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/XmlMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMVrOHNgDUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODY3Mg==", "bodyText": "Method mapXmlToObject has a Cognitive Complexity of 10 (exceeds 7 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483918672", "createdAt": "2020-09-05T06:39:11Z", "author": {"login": "codeclimate"}, "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/XmlMapper.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.triplea.generic.xml.reader;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import lombok.extern.java.Log;\n+import org.triplea.generic.xml.reader.exceptions.JavaDataModelException;\n+import org.triplea.generic.xml.reader.exceptions.XmlParsingException;\n+\n+@Log\n+public class XmlMapper implements Closeable {\n+  private XMLStreamReader xmlStreamReader;\n+\n+  public XmlMapper(final InputStream inputStream) throws XMLStreamException {\n+    final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+    xmlStreamReader = inputFactory.createXMLStreamReader(inputStream);\n+  }\n+\n+  public <T> T mapXmlToObject(final Class<T> pojo) throws XmlParsingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fbaabf1a195ae4a87987af3f1f35b5e9efdd79"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk0NDMwOnYy", "diffSide": "RIGHT", "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/XmlMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMlrOHNgDUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNjozOToxMlrOHNgDUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxODY3Mw==", "bodyText": "Method mapXmlToObject has 46 lines of code (exceeds 30 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483918673", "createdAt": "2020-09-05T06:39:12Z", "author": {"login": "codeclimate"}, "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/XmlMapper.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.triplea.generic.xml.reader;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import lombok.extern.java.Log;\n+import org.triplea.generic.xml.reader.exceptions.JavaDataModelException;\n+import org.triplea.generic.xml.reader.exceptions.XmlParsingException;\n+\n+@Log\n+public class XmlMapper implements Closeable {\n+  private XMLStreamReader xmlStreamReader;\n+\n+  public XmlMapper(final InputStream inputStream) throws XMLStreamException {\n+    final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+    xmlStreamReader = inputFactory.createXMLStreamReader(inputStream);\n+  }\n+\n+  public <T> T mapXmlToObject(final Class<T> pojo) throws XmlParsingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fbaabf1a195ae4a87987af3f1f35b5e9efdd79"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk3NjQ3OnYy", "diffSide": "RIGHT", "path": "xml-reader/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxMlrOHNgSGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxMlrOHNgSGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyMjQ1Ng==", "bodyText": "Codacy found an issue: [list-item-indent] Incorrect list-item indent: add 2 spaces", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483922456", "createdAt": "2020-09-05T07:27:12Z", "author": {"login": "DanVanAtta"}, "path": "xml-reader/README.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Xml-Reader\n+\n+This subproject contains generic code to simplify and wrap a generic\n+XML parser.\n+\n+The parser in this sub-rpoject is based on the Streaming API for XML (StAX):\n+ <https://en.wikipedia.org/wiki/StAX>\n+\n+## Using the Xml-Reader, an Example\n+\n+Mapping XML to POJO objects is done by creating annotated model objects.\n+The parser library will then use reflection to map XML elements encountered\n+(tags, attributes, and body content) onto the annotated model objects.\n+\n+\n+### Example\n+\n+XML:\n+```xml\n+<library>\n+    <mostRead updated=\"Yesterday\">Strategy Guide</mostRead>\n+\n+    <inventory type=\"available\">\n+       <book name=\"Crossing the Atlantic\"/>\n+       <book name=\"The Battle of the Bulge\"/>\n+       <dvd name=\"How to Win Revised\"/>\n+       <dvd name=\"Game of TripleA\"/>\n+    </inventory>\n+</library>\n+```\n+\n+POJO Model:\n+```java\n+@Getter\n+public class Library {\n+\n+  @Tag private MostRead mostReadExample;\n+  @Tag private Inventory libraryInventory;\n+\n+  @Getter\n+  public static class MostRead {\n+    @Attribute private String updated;\n+    @BodyText private String bodyText;\n+  }\n+\n+  public static class Inventory {\n+    @Attribute private String type;\n+    @TagList(Dvd.class) private List<Book> books;\n+    @TagList(Dvd.class) private List<Dvd> dvds;\n+\n+    @Getter\n+    public static class Book {\n+      @Attribute private String name;\n+     }\n+\n+    @Getter\n+    public static class Dvd {\n+      @Attribute private String name;\n+    }\n+  }\n+}\n+```\n+\n+Usage:\n+```java\n+InputStream xmlInputStream = ... < open file input stream >\n+XmlMapper mapper = new XmlMapper(xmlInputStream);\n+Library library = mapper.mapXmlToObject(mapper);\n+```\n+\n+## General Notes\n+\n+- XML tags are matched to model object class names (case insensitive)\n+- XML attributes are matched to model object attributes by variable name (case insensitive)\n+- Model POJO objects must have a no-arg constructor.\n+- Variables annotated with `@BodyText` can have any name\n+- List parsing maintains XML ordering..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad43ba85810903b7cb84af3d07cc9270528d22f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk3NjQ4OnYy", "diffSide": "RIGHT", "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/AnnotatedFields.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxNFrOHNgSGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxNFrOHNgSGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyMjQ1Nw==", "bodyText": "Codacy found an issue: The method 'validateAnnotations(Field)' has an NPath complexity of 10206, current threshold is 200", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483922457", "createdAt": "2020-09-05T07:27:14Z", "author": {"login": "DanVanAtta"}, "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/AnnotatedFields.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package org.triplea.generic.xml.reader;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Getter;\n+import org.triplea.generic.xml.reader.annotations.Attribute;\n+import org.triplea.generic.xml.reader.annotations.BodyText;\n+import org.triplea.generic.xml.reader.annotations.Tag;\n+import org.triplea.generic.xml.reader.annotations.TagList;\n+import org.triplea.generic.xml.reader.exceptions.JavaDataModelException;\n+\n+/**\n+ * Sorts fields, validates fields, and sets fields to accessible. Field validation will check that\n+ * we see the right annotations on the right class types, for example that '@TagList' is on only\n+ * 'java.util.List'.\n+ *\n+ * @param <T> Java model object class type (essentially the tag we are currently creating as a java\n+ *     object).\n+ */\n+@Getter\n+class AnnotatedFields<T> {\n+  private final List<Field> attributeFields = new ArrayList<>();\n+  private final List<Field> tagFields = new ArrayList<>();\n+  private final List<Field> tagListFields = new ArrayList<>();\n+  private final List<Field> bodyTextFields = new ArrayList<>();\n+\n+  AnnotatedFields(final Class<T> pojo) throws JavaDataModelException {\n+    for (final Field field : pojo.getDeclaredFields()) {\n+      validateAnnotations(field);\n+      if (field.getAnnotation(Attribute.class) != null) {\n+        field.setAccessible(true);\n+        attributeFields.add(field);\n+      } else if (field.getAnnotation(Tag.class) != null) {\n+        field.setAccessible(true);\n+        tagFields.add(field);\n+      } else if (field.getAnnotation(TagList.class) != null) {\n+        field.setAccessible(true);\n+        tagListFields.add(field);\n+      } else if (field.getAnnotation(BodyText.class) != null) {\n+        field.setAccessible(true);\n+        bodyTextFields.add(field);\n+      }\n+    }\n+    if (bodyTextFields.size() > 1) {\n+      throw new JavaDataModelException(\n+          \"Too many body text fields, can only have one on any given class\");\n+    }\n+    if (!bodyTextFields.isEmpty() && (!tagFields.isEmpty() && !tagListFields.isEmpty())) {\n+      throw new JavaDataModelException(\n+          \"Illegal combination of annoations, may only have attributes and a body text,\"\n+              + \"or attributes and tags (or taglist), but may not have both body text and tags.\");\n+    }\n+  }\n+\n+  private static <T> void validateAnnotations(final Field field) throws JavaDataModelException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad43ba85810903b7cb84af3d07cc9270528d22f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk3NjQ5OnYy", "diffSide": "RIGHT", "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/XmlMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxNVrOHNgSGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxNVrOHNgSGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyMjQ1OA==", "bodyText": "Codacy found an issue: An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483922458", "createdAt": "2020-09-05T07:27:15Z", "author": {"login": "DanVanAtta"}, "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/XmlMapper.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.triplea.generic.xml.reader;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import lombok.extern.java.Log;\n+import org.triplea.generic.xml.reader.exceptions.JavaDataModelException;\n+import org.triplea.generic.xml.reader.exceptions.XmlParsingException;\n+\n+@Log\n+public class XmlMapper implements Closeable {\n+  private XMLStreamReader xmlStreamReader;\n+\n+  public XmlMapper(final InputStream inputStream) throws XMLStreamException {\n+    final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+    xmlStreamReader = inputFactory.createXMLStreamReader(inputStream);\n+  }\n+\n+  public <T> T mapXmlToObject(final Class<T> pojo) throws XmlParsingException {\n+    // At this point in parsing the XML cursor is just beyond the start tag.\n+    // We can read attributes directly off of the stream at this point.\n+    // If we do nothing more then the cursor will keep moving down and will not\n+    // descend into any child tags or the body text of the current tag.\n+    //\n+    // Beyond mapping attributes, we should scan for any handlers defined\n+    // on the POJO, whether those are handlers for more child tags, tag lists or\n+    // body content. If we see any of those we will set up callbacks on the\n+    // XML parsing such that when the cursor hits tags with matching names\n+    // or finishes reading the body content it will execute the callback.\n+    //\n+    // Each callback will get data from the XML parsing cursor and the callback\n+    // only then needs to set that data on the current object that we are building and will\n+    // be returning.\n+    //\n+    // The callbacks are of two types: tags or body content.\n+    //\n+    // Body content callback is pretty simple, we'll read all of the body content into a buffer\n+    // and when done will execute the body content setter callback.\n+    //\n+    // The tag callbacks are a map of tag name to setter callback method. When the XML\n+    // cursor sees a tag with a matching name it'll call the setter callback.\n+    // The setter callback will invoke this method again to create a fully formed object\n+    // out of that tag (and then set it).\n+\n+    try {\n+      // Create the object to return, it is a java representation of the \"current tag\".\n+      final T instance = ReflectionUtils.newInstance(pojo);\n+      final AnnotatedFields<T> annotatedFields = new AnnotatedFields<>(pojo);\n+\n+      // set attributes on the current object\n+      for (final Field field : annotatedFields.getAttributeFields()) {\n+        final String xmlAttributeValue = xmlStreamReader.getAttributeValue(null, field.getName());\n+        final Object value = new AttributeValueCasting(field).castAttributeValue(xmlAttributeValue);\n+        field.set(instance, value);\n+      }\n+\n+      // Check if we have any more work to do, if only attributes can go ahead and return now.\n+      if (annotatedFields.getTagFields().isEmpty()\n+          && annotatedFields.getTagListFields().isEmpty()\n+          && annotatedFields.getBodyTextFields().isEmpty()) {\n+        return instance;\n+      }\n+\n+      // This parser will do the work of parsing the current tag, it'll look at all\n+      // child tags and the body text and invoke the right callback that we will define below.\n+      final XmlParser tagParser = new XmlParser(pojo.getSimpleName());\n+\n+      // Set up tag parsing, as we scan through more elements when we see a matching\n+      // tag name we'll call the child tag handler. The child tag handler will\n+      // create a java model representing the child tag and set the field instance\n+      // on our current running instance object.\n+      for (final Field field : annotatedFields.getTagFields()) {\n+        final String expectedTagName = field.getType().getSimpleName();\n+        tagParser.childTagHandler(\n+            expectedTagName, () -> field.set(instance, mapXmlToObject(field.getType())));\n+      }\n+\n+      // Set up tag list parsing, similar to tag parsing except we set the field\n+      // value to a list and each time we see a new child tag we'll add it back to that list.\n+      for (final Field field : annotatedFields.getTagListFields()) {\n+        final List<Object> tagList = new ArrayList<>();\n+        field.set(instance, tagList);\n+        final Class<?> listType = ReflectionUtils.getGenericType(field);\n+        tagParser.childTagHandler(\n+            listType.getSimpleName(), () -> tagList.add(mapXmlToObject(listType)));\n+      }\n+\n+      // Set up body text handler. The XML cursor will iterate over each line of body\n+      // content and we will buffer that content, when the full content is read it is trimmed\n+      // and the setter callback below is executed.\n+      for (final Field field : annotatedFields.getBodyTextFields()) {\n+        Preconditions.checkState(annotatedFields.getBodyTextFields().size() == 1);\n+        tagParser.bodyHandler(\n+            textContent -> {\n+              try {\n+                field.set(instance, textContent);\n+              } catch (final IllegalAccessException e) {\n+                throw new JavaDataModelException(field, \"Unexpected illegal access\", e);\n+              }\n+            });\n+      }\n+\n+      tagParser.parse(xmlStreamReader);\n+\n+      return instance;\n+    } catch (final Throwable e) {\n+      if (e instanceof XmlParsingException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad43ba85810903b7cb84af3d07cc9270528d22f"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk3NjUwOnYy", "diffSide": "RIGHT", "path": "xml-reader/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxNlrOHNgSGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxNlrOHNgSGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyMjQ1OQ==", "bodyText": "Codacy found an issue: [list-item-indent] Incorrect list-item indent: add 2 spaces", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483922459", "createdAt": "2020-09-05T07:27:16Z", "author": {"login": "DanVanAtta"}, "path": "xml-reader/README.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Xml-Reader\n+\n+This subproject contains generic code to simplify and wrap a generic\n+XML parser.\n+\n+The parser in this sub-rpoject is based on the Streaming API for XML (StAX):\n+ <https://en.wikipedia.org/wiki/StAX>\n+\n+## Using the Xml-Reader, an Example\n+\n+Mapping XML to POJO objects is done by creating annotated model objects.\n+The parser library will then use reflection to map XML elements encountered\n+(tags, attributes, and body content) onto the annotated model objects.\n+\n+\n+### Example\n+\n+XML:\n+```xml\n+<library>\n+    <mostRead updated=\"Yesterday\">Strategy Guide</mostRead>\n+\n+    <inventory type=\"available\">\n+       <book name=\"Crossing the Atlantic\"/>\n+       <book name=\"The Battle of the Bulge\"/>\n+       <dvd name=\"How to Win Revised\"/>\n+       <dvd name=\"Game of TripleA\"/>\n+    </inventory>\n+</library>\n+```\n+\n+POJO Model:\n+```java\n+@Getter\n+public class Library {\n+\n+  @Tag private MostRead mostReadExample;\n+  @Tag private Inventory libraryInventory;\n+\n+  @Getter\n+  public static class MostRead {\n+    @Attribute private String updated;\n+    @BodyText private String bodyText;\n+  }\n+\n+  public static class Inventory {\n+    @Attribute private String type;\n+    @TagList(Dvd.class) private List<Book> books;\n+    @TagList(Dvd.class) private List<Dvd> dvds;\n+\n+    @Getter\n+    public static class Book {\n+      @Attribute private String name;\n+     }\n+\n+    @Getter\n+    public static class Dvd {\n+      @Attribute private String name;\n+    }\n+  }\n+}\n+```\n+\n+Usage:\n+```java\n+InputStream xmlInputStream = ... < open file input stream >\n+XmlMapper mapper = new XmlMapper(xmlInputStream);\n+Library library = mapper.mapXmlToObject(mapper);\n+```\n+\n+## General Notes\n+\n+- XML tags are matched to model object class names (case insensitive)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad43ba85810903b7cb84af3d07cc9270528d22f"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk3NjUyOnYy", "diffSide": "RIGHT", "path": "xml-reader/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxN1rOHNgSHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxN1rOHNgSHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyMjQ2MQ==", "bodyText": "Codacy found an issue: [no-consecutive-blank-lines] Remove 1 line before node", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483922461", "createdAt": "2020-09-05T07:27:17Z", "author": {"login": "DanVanAtta"}, "path": "xml-reader/README.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Xml-Reader\n+\n+This subproject contains generic code to simplify and wrap a generic\n+XML parser.\n+\n+The parser in this sub-rpoject is based on the Streaming API for XML (StAX):\n+ <https://en.wikipedia.org/wiki/StAX>\n+\n+## Using the Xml-Reader, an Example\n+\n+Mapping XML to POJO objects is done by creating annotated model objects.\n+The parser library will then use reflection to map XML elements encountered\n+(tags, attributes, and body content) onto the annotated model objects.\n+\n+\n+### Example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad43ba85810903b7cb84af3d07cc9270528d22f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk3NjUzOnYy", "diffSide": "RIGHT", "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/AttributeValueCasting.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxOFrOHNgSIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxOFrOHNgSIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyMjQ2NA==", "bodyText": "Codacy found an issue: New exception is thrown in catch block, original stack trace may be lost", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483922464", "createdAt": "2020-09-05T07:27:18Z", "author": {"login": "DanVanAtta"}, "path": "xml-reader/src/main/java/org/triplea/generic/xml/reader/AttributeValueCasting.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.triplea.generic.xml.reader;\n+\n+import com.google.common.base.Preconditions;\n+import java.lang.reflect.Field;\n+import java.util.Optional;\n+import org.triplea.generic.xml.reader.annotations.Attribute;\n+import org.triplea.generic.xml.reader.exceptions.XmlDataException;\n+\n+class AttributeValueCasting {\n+\n+  private final Field field;\n+  private final Attribute attributeAnnotation;\n+\n+  AttributeValueCasting(final Field field) {\n+    this.field = field;\n+    attributeAnnotation = Preconditions.checkNotNull(field.getAnnotation(Attribute.class));\n+  }\n+\n+  Object castAttributeValue(final String attributeValue) throws XmlDataException {\n+    if (field.getType() == Integer.class || field.getType() == Integer.TYPE) {\n+      return castToInt(attributeValue);\n+    } else if (field.getType() == Double.class || field.getType() == Double.TYPE) {\n+      return castToDouble(attributeValue);\n+    } else if (field.getType() == Boolean.class || field.getType() == Boolean.TYPE) {\n+      return castToBoolean(attributeValue);\n+    } else {\n+      // type is a String\n+      return Optional.ofNullable(attributeValue).orElseGet(attributeAnnotation::defaultValue);\n+    }\n+  }\n+\n+  /**\n+   * Cast attribute value to an int. If the value is null we return a default. If the field is a\n+   * \"Integer\" and if the attribute value is null and the default is not set then we return null. If\n+   * the field is an \"int\" and if the attribute value is null then we return 0.\n+   *\n+   * @throws XmlDataException Thrown if attributeValue is present but cannot be cast to an int.\n+   */\n+  private Integer castToInt(final String attributeValue) throws XmlDataException {\n+    if (attributeValue == null\n+        && field.getType() == Integer.class\n+        && field.getAnnotation(Attribute.class).defaultInt() == 0) {\n+      return null;\n+    } else if (attributeValue == null) {\n+      return field.getAnnotation(Attribute.class).defaultInt();\n+    } else {\n+      try {\n+        return Integer.valueOf(attributeValue);\n+      } catch (final NumberFormatException e) {\n+        throw new XmlDataException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad43ba85810903b7cb84af3d07cc9270528d22f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk3NjU0OnYy", "diffSide": "RIGHT", "path": "xml-reader/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxOVrOHNgSIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoxOVrOHNgSIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyMjQ2NQ==", "bodyText": "Codacy found an issue: [list-item-indent] Incorrect list-item indent: add 2 spaces", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483922465", "createdAt": "2020-09-05T07:27:19Z", "author": {"login": "DanVanAtta"}, "path": "xml-reader/README.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Xml-Reader\n+\n+This subproject contains generic code to simplify and wrap a generic\n+XML parser.\n+\n+The parser in this sub-rpoject is based on the Streaming API for XML (StAX):\n+ <https://en.wikipedia.org/wiki/StAX>\n+\n+## Using the Xml-Reader, an Example\n+\n+Mapping XML to POJO objects is done by creating annotated model objects.\n+The parser library will then use reflection to map XML elements encountered\n+(tags, attributes, and body content) onto the annotated model objects.\n+\n+\n+### Example\n+\n+XML:\n+```xml\n+<library>\n+    <mostRead updated=\"Yesterday\">Strategy Guide</mostRead>\n+\n+    <inventory type=\"available\">\n+       <book name=\"Crossing the Atlantic\"/>\n+       <book name=\"The Battle of the Bulge\"/>\n+       <dvd name=\"How to Win Revised\"/>\n+       <dvd name=\"Game of TripleA\"/>\n+    </inventory>\n+</library>\n+```\n+\n+POJO Model:\n+```java\n+@Getter\n+public class Library {\n+\n+  @Tag private MostRead mostReadExample;\n+  @Tag private Inventory libraryInventory;\n+\n+  @Getter\n+  public static class MostRead {\n+    @Attribute private String updated;\n+    @BodyText private String bodyText;\n+  }\n+\n+  public static class Inventory {\n+    @Attribute private String type;\n+    @TagList(Dvd.class) private List<Book> books;\n+    @TagList(Dvd.class) private List<Dvd> dvds;\n+\n+    @Getter\n+    public static class Book {\n+      @Attribute private String name;\n+     }\n+\n+    @Getter\n+    public static class Dvd {\n+      @Attribute private String name;\n+    }\n+  }\n+}\n+```\n+\n+Usage:\n+```java\n+InputStream xmlInputStream = ... < open file input stream >\n+XmlMapper mapper = new XmlMapper(xmlInputStream);\n+Library library = mapper.mapXmlToObject(mapper);\n+```\n+\n+## General Notes\n+\n+- XML tags are matched to model object class names (case insensitive)\n+- XML attributes are matched to model object attributes by variable name (case insensitive)\n+- Model POJO objects must have a no-arg constructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad43ba85810903b7cb84af3d07cc9270528d22f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk3NjU1OnYy", "diffSide": "RIGHT", "path": "xml-reader/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoyMFrOHNgSIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoyMFrOHNgSIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyMjQ2Nw==", "bodyText": "Codacy found an issue: [list-item-indent] Incorrect list-item indent: add 2 spaces", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483922467", "createdAt": "2020-09-05T07:27:20Z", "author": {"login": "DanVanAtta"}, "path": "xml-reader/README.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Xml-Reader\n+\n+This subproject contains generic code to simplify and wrap a generic\n+XML parser.\n+\n+The parser in this sub-rpoject is based on the Streaming API for XML (StAX):\n+ <https://en.wikipedia.org/wiki/StAX>\n+\n+## Using the Xml-Reader, an Example\n+\n+Mapping XML to POJO objects is done by creating annotated model objects.\n+The parser library will then use reflection to map XML elements encountered\n+(tags, attributes, and body content) onto the annotated model objects.\n+\n+\n+### Example\n+\n+XML:\n+```xml\n+<library>\n+    <mostRead updated=\"Yesterday\">Strategy Guide</mostRead>\n+\n+    <inventory type=\"available\">\n+       <book name=\"Crossing the Atlantic\"/>\n+       <book name=\"The Battle of the Bulge\"/>\n+       <dvd name=\"How to Win Revised\"/>\n+       <dvd name=\"Game of TripleA\"/>\n+    </inventory>\n+</library>\n+```\n+\n+POJO Model:\n+```java\n+@Getter\n+public class Library {\n+\n+  @Tag private MostRead mostReadExample;\n+  @Tag private Inventory libraryInventory;\n+\n+  @Getter\n+  public static class MostRead {\n+    @Attribute private String updated;\n+    @BodyText private String bodyText;\n+  }\n+\n+  public static class Inventory {\n+    @Attribute private String type;\n+    @TagList(Dvd.class) private List<Book> books;\n+    @TagList(Dvd.class) private List<Dvd> dvds;\n+\n+    @Getter\n+    public static class Book {\n+      @Attribute private String name;\n+     }\n+\n+    @Getter\n+    public static class Dvd {\n+      @Attribute private String name;\n+    }\n+  }\n+}\n+```\n+\n+Usage:\n+```java\n+InputStream xmlInputStream = ... < open file input stream >\n+XmlMapper mapper = new XmlMapper(xmlInputStream);\n+Library library = mapper.mapXmlToObject(mapper);\n+```\n+\n+## General Notes\n+\n+- XML tags are matched to model object class names (case insensitive)\n+- XML attributes are matched to model object attributes by variable name (case insensitive)\n+- Model POJO objects must have a no-arg constructor.\n+- Variables annotated with `@BodyText` can have any name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad43ba85810903b7cb84af3d07cc9270528d22f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk3NjU2OnYy", "diffSide": "RIGHT", "path": "xml-reader/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoyMVrOHNgSJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzoyNzoyMVrOHNgSJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyMjQ2OA==", "bodyText": "Codacy found an issue: [list-item-indent] Incorrect list-item indent: add 2 spaces", "url": "https://github.com/triplea-game/triplea/pull/7543#discussion_r483922468", "createdAt": "2020-09-05T07:27:21Z", "author": {"login": "DanVanAtta"}, "path": "xml-reader/README.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Xml-Reader\n+\n+This subproject contains generic code to simplify and wrap a generic\n+XML parser.\n+\n+The parser in this sub-rpoject is based on the Streaming API for XML (StAX):\n+ <https://en.wikipedia.org/wiki/StAX>\n+\n+## Using the Xml-Reader, an Example\n+\n+Mapping XML to POJO objects is done by creating annotated model objects.\n+The parser library will then use reflection to map XML elements encountered\n+(tags, attributes, and body content) onto the annotated model objects.\n+\n+\n+### Example\n+\n+XML:\n+```xml\n+<library>\n+    <mostRead updated=\"Yesterday\">Strategy Guide</mostRead>\n+\n+    <inventory type=\"available\">\n+       <book name=\"Crossing the Atlantic\"/>\n+       <book name=\"The Battle of the Bulge\"/>\n+       <dvd name=\"How to Win Revised\"/>\n+       <dvd name=\"Game of TripleA\"/>\n+    </inventory>\n+</library>\n+```\n+\n+POJO Model:\n+```java\n+@Getter\n+public class Library {\n+\n+  @Tag private MostRead mostReadExample;\n+  @Tag private Inventory libraryInventory;\n+\n+  @Getter\n+  public static class MostRead {\n+    @Attribute private String updated;\n+    @BodyText private String bodyText;\n+  }\n+\n+  public static class Inventory {\n+    @Attribute private String type;\n+    @TagList(Dvd.class) private List<Book> books;\n+    @TagList(Dvd.class) private List<Dvd> dvds;\n+\n+    @Getter\n+    public static class Book {\n+      @Attribute private String name;\n+     }\n+\n+    @Getter\n+    public static class Dvd {\n+      @Attribute private String name;\n+    }\n+  }\n+}\n+```\n+\n+Usage:\n+```java\n+InputStream xmlInputStream = ... < open file input stream >\n+XmlMapper mapper = new XmlMapper(xmlInputStream);\n+Library library = mapper.mapXmlToObject(mapper);\n+```\n+\n+## General Notes\n+\n+- XML tags are matched to model object class names (case insensitive)\n+- XML attributes are matched to model object attributes by variable name (case insensitive)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad43ba85810903b7cb84af3d07cc9270528d22f"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2906, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}