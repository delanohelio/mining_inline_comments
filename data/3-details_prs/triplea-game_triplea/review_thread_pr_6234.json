{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNzg5NTQy", "number": 6234, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTozNjoxMFrODxZbfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoyMTowMlrODxiMBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTIzNDU0OnYy", "diffSide": "RIGHT", "path": "swing-lib/src/main/java/org/triplea/swing/key/binding/SwingKeyBinding.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTozNjoxMFrOGE2OEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyMDozMVrOGE6v2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNTgyNg==", "bodyText": "What do you think about making KeyCombination and KeyCode implement the same interface?\nThis way you woldn't need to convert one to the other and were able to nest things in theory", "url": "https://github.com/triplea-game/triplea/pull/6234#discussion_r407735826", "createdAt": "2020-04-13T21:36:10Z", "author": {"login": "RoiEXLab"}, "path": "swing-lib/src/main/java/org/triplea/swing/key/binding/SwingKeyBinding.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.triplea.swing.key.binding;\n+\n+import java.awt.KeyboardFocusManager;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JComponent;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.text.JTextComponent;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.swing.SwingAction;\n+\n+/**\n+ * Supports adding key bindings. Reference:\n+ * https://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html\n+ *\n+ * <p>Key bindings added through this class will \"always\" be active regardless if the component is\n+ * currently focused or not. Single key key bindings will not be active when focus is inside of a\n+ * text component. This is to avoid, for example, a user typing a chat message and unintentionally\n+ * firing key bindings.\n+ */\n+@UtilityClass\n+public class SwingKeyBinding {\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, keyCode, action);\n+  }\n+\n+  /**\n+   * Adds two keybindings to a given key, both active when \"ctrl\" and \"meta\" are held down.\n+   *\n+   * @param key The key to be bind in combination with \"ctrl\" being held down, or \"meta\" being held\n+   *     down.\n+   * @param action The action to execute when the keybinding is activated.\n+   */\n+  public static void addKeyListenerWithMetaAndCtrlMasks(\n+      final JFrame component, final KeyCode key, final Runnable action) {\n+\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.CTRL),\n+        action);\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.META),\n+        action);\n+  }\n+\n+  private static void addKeyMapping(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, KeyCombination.of(keyCode, ButtonDownMask.NONE), action);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee55d94797a86ce193a026c98b1ecb99adf358c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjcwMA==", "bodyText": "Not a  bad thought given the common method. It does not help that much though as we need to convert KeyCode into KeyCombination.", "url": "https://github.com/triplea-game/triplea/pull/6234#discussion_r407806700", "createdAt": "2020-04-14T01:08:22Z", "author": {"login": "DanVanAtta"}, "path": "swing-lib/src/main/java/org/triplea/swing/key/binding/SwingKeyBinding.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.triplea.swing.key.binding;\n+\n+import java.awt.KeyboardFocusManager;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JComponent;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.text.JTextComponent;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.swing.SwingAction;\n+\n+/**\n+ * Supports adding key bindings. Reference:\n+ * https://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html\n+ *\n+ * <p>Key bindings added through this class will \"always\" be active regardless if the component is\n+ * currently focused or not. Single key key bindings will not be active when focus is inside of a\n+ * text component. This is to avoid, for example, a user typing a chat message and unintentionally\n+ * firing key bindings.\n+ */\n+@UtilityClass\n+public class SwingKeyBinding {\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, keyCode, action);\n+  }\n+\n+  /**\n+   * Adds two keybindings to a given key, both active when \"ctrl\" and \"meta\" are held down.\n+   *\n+   * @param key The key to be bind in combination with \"ctrl\" being held down, or \"meta\" being held\n+   *     down.\n+   * @param action The action to execute when the keybinding is activated.\n+   */\n+  public static void addKeyListenerWithMetaAndCtrlMasks(\n+      final JFrame component, final KeyCode key, final Runnable action) {\n+\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.CTRL),\n+        action);\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.META),\n+        action);\n+  }\n+\n+  private static void addKeyMapping(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, KeyCombination.of(keyCode, ButtonDownMask.NONE), action);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNTgyNg=="}, "originalCommit": {"oid": "aee55d94797a86ce193a026c98b1ecb99adf358c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMDAwOA==", "bodyText": "Going along those lines, KeyCode actually does not need the toKeyStroke at all and can be removed.", "url": "https://github.com/triplea-game/triplea/pull/6234#discussion_r407810008", "createdAt": "2020-04-14T01:20:31Z", "author": {"login": "DanVanAtta"}, "path": "swing-lib/src/main/java/org/triplea/swing/key/binding/SwingKeyBinding.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.triplea.swing.key.binding;\n+\n+import java.awt.KeyboardFocusManager;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JComponent;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.text.JTextComponent;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.swing.SwingAction;\n+\n+/**\n+ * Supports adding key bindings. Reference:\n+ * https://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html\n+ *\n+ * <p>Key bindings added through this class will \"always\" be active regardless if the component is\n+ * currently focused or not. Single key key bindings will not be active when focus is inside of a\n+ * text component. This is to avoid, for example, a user typing a chat message and unintentionally\n+ * firing key bindings.\n+ */\n+@UtilityClass\n+public class SwingKeyBinding {\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, keyCode, action);\n+  }\n+\n+  /**\n+   * Adds two keybindings to a given key, both active when \"ctrl\" and \"meta\" are held down.\n+   *\n+   * @param key The key to be bind in combination with \"ctrl\" being held down, or \"meta\" being held\n+   *     down.\n+   * @param action The action to execute when the keybinding is activated.\n+   */\n+  public static void addKeyListenerWithMetaAndCtrlMasks(\n+      final JFrame component, final KeyCode key, final Runnable action) {\n+\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.CTRL),\n+        action);\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.META),\n+        action);\n+  }\n+\n+  private static void addKeyMapping(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, KeyCombination.of(keyCode, ButtonDownMask.NONE), action);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNTgyNg=="}, "originalCommit": {"oid": "aee55d94797a86ce193a026c98b1ecb99adf358c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjY2OTQ5OnYy", "diffSide": "RIGHT", "path": "swing-lib/src/main/java/org/triplea/swing/key/binding/SwingKeyBinding.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoyMTowMlrOGFDdag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoyMTowMlrOGFDdag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1Mjc0Ng==", "bodyText": "I was just about to complain that this might not always work, but then I reliazed that using this abstraction that only allows a single key to be down this is completely fine", "url": "https://github.com/triplea-game/triplea/pull/6234#discussion_r407952746", "createdAt": "2020-04-14T08:21:02Z", "author": {"login": "RoiEXLab"}, "path": "swing-lib/src/main/java/org/triplea/swing/key/binding/SwingKeyBinding.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.triplea.swing.key.binding;\n+\n+import java.awt.KeyboardFocusManager;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JComponent;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.text.JTextComponent;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.swing.SwingAction;\n+\n+/**\n+ * Supports adding key bindings. Reference:\n+ * https://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html\n+ *\n+ * <p>Key bindings added through this class will \"always\" be active regardless if the component is\n+ * currently focused or not. Single key key bindings will not be active when focus is inside of a\n+ * text component. This is to avoid, for example, a user typing a chat message and unintentionally\n+ * firing key bindings.\n+ */\n+@UtilityClass\n+public class SwingKeyBinding {\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, keyCode, action);\n+  }\n+\n+  /**\n+   * Adds two keybindings to a given key, both active when \"ctrl\" and \"meta\" are held down.\n+   *\n+   * @param key The key to be bind in combination with \"ctrl\" being held down, or \"meta\" being held\n+   *     down.\n+   * @param action The action to execute when the keybinding is activated.\n+   */\n+  public static void addKeyListenerWithMetaAndCtrlMasks(\n+      final JFrame component, final KeyCode key, final Runnable action) {\n+\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.CTRL),\n+        action);\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.META),\n+        action);\n+  }\n+\n+  private static void addKeyMapping(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, KeyCombination.of(keyCode, ButtonDownMask.NONE), action);\n+  }\n+\n+  private static void addKeyMapping(\n+      final JComponent component, final KeyCombination keyCombination, final Runnable action) {\n+    final String keyBindingIdentifier = UUID.randomUUID().toString();\n+\n+    final AtomicBoolean enabled = new AtomicBoolean(true);\n+\n+    if (keyCombination.getButtonDownMask() == ButtonDownMask.NONE\n+        || keyCombination.getButtonDownMask() == ButtonDownMask.SHIFT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1556ea99cf490e282773b2169e84d818f6b087c8"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2250, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}