{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwNzkyNTU2", "number": 6648, "title": "Retry send websocket ping", "bodyText": "Overview\nI suspect the lobby disconnect I observed in: #6631 (Lobby Connection Timeout) was due to a one-time failure to send a ping message. So far connections to lobby have seemed stable and the timeout is not triggered by staying in lobby for too long, hence the suspicion of a one-time failure to send ping.\nThis update seeks to alleviate that by adding 'ping' retries. To add the retries cleanly first a simple retry module is added, then we configure ping to be retried up to 4 additional times with a fixed 3 second back-off.\nCommits\ncommit 3eeb5d0\nAdd 'Retryable', a custom class to do retries\n\nInvestigating other retry libraries, none quite give us the API we would\nlike to retry a boolean supplier until it returns true. This update\nadds a 'Retryable' that provides (for now) a fixed backoff between\nretries.\n\ncommit d6d0563e5dc99c2ce8e6593dc64eda9c365bce74\nExecute websocket pings with 3 retries & 3 second backoff\n\nIf the ping send fails, we'll get disconnected (disconnect is\nat 60s, we send a ping every 45s). We could increase the ping\nfrequency at the cost of greater load. Instead we use a simple\nretry to give any failures a few more attempts up until\npretty close to the 60s mark. If we are unable to send a ping\nby then, then we would expect the websocket connection to\nserver to be closed. When that connection is closed, we will\nshow a pop-up to the user that the connection was lost\n(so there is no need to inform a user when a ping fails,\njust when the connection is lost will we notify the user).\n\n\nFunctional Changes\n\n[] New map or map update\n[] New Feature\n[] Feature update or enhancement\n[] Feature Removal\n[] Code Cleanup or refactor\n[] Configuration Change\n[x] Problem fix:  \n[] Other:   \nTesting", "createdAt": "2020-06-08T06:15:46Z", "url": "https://github.com/triplea-game/triplea/pull/6648", "merged": true, "mergeCommit": {"oid": "a0a7889ebf22d74e2bcc6bc95c3fa133ccb23e08"}, "closed": true, "closedAt": "2020-06-11T08:22:57Z", "author": {"login": "DanVanAtta"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpKJirgH2gAyNDMwNzkyNTU2OjNlZWI1ZDAxNmQ5ZmJjMmYwNWE3NGI4OTFlNGJjODYzODA3ZGUyNDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqJ5c8AFqTQyODY5NDg0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3eeb5d016d9fbc2f05a74b891e4bc863807de245", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/3eeb5d016d9fbc2f05a74b891e4bc863807de245", "committedDate": "2020-06-08T06:06:27Z", "message": "Add 'Retryable', a custom class to do retries\n\nInvestigating other retry libraries, none quite give us the API we would\nlike to retry a boolean supplier until it returns true. This update\nadds a 'Retryable' that provides (for now) a fixed backoff between\nretries."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c46e62cfa773a8e29e4cd6bbe612d23f27f1613", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/7c46e62cfa773a8e29e4cd6bbe612d23f27f1613", "committedDate": "2020-06-08T06:12:52Z", "message": "Execute websocket pings with 3 retries & 3 second backoff\n\nIf the ping send fails, we'll get disconnected (disconnect is\nat 60s, we send a ping every 45s). We could increase the ping\nfrequency at the cost of greater load. Instead we use a simple\nretry to give any failures a few more attempts up until\npretty close to the 60s mark. If we are unable to send a ping\nby then, then we would expect the websocket connection to\nserver to be closed. When that connection is closed, we will\nshow a pop-up to the user that the connection was lost\n(so there is no need to inform a user when a ping fails,\njust when the connection is lost will we notify the user).\n\n."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d94adafa2253f1f8e879765d12c92b31f432516b", "author": {"user": {"login": "tripleabuilderbot", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/d94adafa2253f1f8e879765d12c92b31f432516b", "committedDate": "2020-06-08T06:15:42Z", "message": "Auto-Formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjY5NjQ4", "url": "https://github.com/triplea-game/triplea/pull/6648#pullrequestreview-428269648", "createdAt": "2020-06-10T17:17:49Z", "commit": {"oid": "d94adafa2253f1f8e879765d12c92b31f432516b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoxNzo0OVrOGh-2Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoyOTozNFrOGh_Rqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4NTg2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return new MaxAttemptsBuilder(DEFAULT_THREAD_SLEEP);\n          \n          \n            \n                return builder(DEFAULT_THREAD_SLEEP);", "url": "https://github.com/triplea-game/triplea/pull/6648#discussion_r438285866", "createdAt": "2020-06-10T17:17:49Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/java/Retryable.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.triplea.java;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Module to execute a task with retries. Provides a builder interface to specify number of max\n+ * attempts (max number of times the task will be executed) and backoff.\n+ */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class Retryable {\n+  private static final Consumer<Duration> DEFAULT_THREAD_SLEEP =\n+      duration -> Interruptibles.sleep(duration.toMillis());\n+\n+  private final Consumer<Duration> threadSleeper;\n+  private final int maxAttempts;\n+  private final Duration fixedBackOff;\n+  private final Supplier<Boolean> taskRunner;\n+\n+  public static MaxAttemptsBuilder builder() {\n+    return new MaxAttemptsBuilder(DEFAULT_THREAD_SLEEP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94adafa2253f1f8e879765d12c92b31f432516b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4NzM4MQ==", "bodyText": "Interesting kind of builder pattern. I'm not quite sure if I like it more that the \"typical\" approach, but there are some solid pros to compensate for the cons here", "url": "https://github.com/triplea-game/triplea/pull/6648#discussion_r438287381", "createdAt": "2020-06-10T17:20:22Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/java/Retryable.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.triplea.java;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Module to execute a task with retries. Provides a builder interface to specify number of max\n+ * attempts (max number of times the task will be executed) and backoff.\n+ */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class Retryable {\n+  private static final Consumer<Duration> DEFAULT_THREAD_SLEEP =\n+      duration -> Interruptibles.sleep(duration.toMillis());\n+\n+  private final Consumer<Duration> threadSleeper;\n+  private final int maxAttempts;\n+  private final Duration fixedBackOff;\n+  private final Supplier<Boolean> taskRunner;\n+\n+  public static MaxAttemptsBuilder builder() {\n+    return new MaxAttemptsBuilder(DEFAULT_THREAD_SLEEP);\n+  }\n+\n+  @VisibleForTesting\n+  static MaxAttemptsBuilder builder(final Consumer<Duration> threadSleeper) {\n+    return new MaxAttemptsBuilder(threadSleeper);\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class MaxAttemptsBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+\n+    public BackOffBuilder withMaxAttempts(final int maxAttempts) {\n+      Preconditions.checkArgument(\n+          maxAttempts > 1,\n+          \"Max attempt count must be greater than 1, if max attempt is 1, \"\n+              + \"just invoke your task directly without the retry mechanism\");\n+      return new BackOffBuilder(threadSleeper, maxAttempts);\n+    }\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class BackOffBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+    private final int maxAttempts;\n+\n+    public TaskBuilder withFixedBackOff(final Duration duration) {\n+      Preconditions.checkArgument(duration.toMillis() > 0, \"Minimum backoff is 1ms\");\n+      return new TaskBuilder(threadSleeper, maxAttempts, duration);\n+    }\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class TaskBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+    private final int maxAttempts;\n+    private final Duration backOff;\n+\n+    public RetryableBuilder withTask(final Supplier<Boolean> taskRunner) {\n+      Preconditions.checkNotNull(taskRunner);\n+      return new RetryableBuilder(threadSleeper, maxAttempts, backOff, taskRunner);\n+    }\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class RetryableBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+    private final int maxAttempts;\n+    private final Duration fixedBackOff;\n+    private final Supplier<Boolean> taskRunner;\n+\n+    public Retryable build() {\n+      return new Retryable(threadSleeper, maxAttempts, fixedBackOff, taskRunner);\n+    }\n+\n+    public boolean buildAndExecute() {\n+      return build().execute();\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94adafa2253f1f8e879765d12c92b31f432516b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5MDM1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (int i = 0; i < maxAttempts; i++) {\n          \n          \n            \n                  final Boolean result = taskRunner.get();\n          \n          \n            \n                  if (result != null && result) {\n          \n          \n            \n                    return true;\n          \n          \n            \n                  }\n          \n          \n            \n            \n          \n          \n            \n                  final boolean wasLastAttempt = i + 1 == maxAttempts;\n          \n          \n            \n                  // only sleep if there are more attempts left\n          \n          \n            \n                  if (!wasLastAttempt) {\n          \n          \n            \n                    threadSleeper.accept(fixedBackOff);\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n                return false;\n          \n          \n            \n                for (int i = 1; i < maxAttempts; i++) {\n          \n          \n            \n                  if (taskRunner.get()) {\n          \n          \n            \n                    return true;\n          \n          \n            \n                  }\n          \n          \n            \n                  threadSleeper.accept(fixedBackOff);\n          \n          \n            \n                }\n          \n          \n            \n                return taskRunner.get();\n          \n      \n    \n    \n  \n\nIs nicer IMO", "url": "https://github.com/triplea-game/triplea/pull/6648#discussion_r438290354", "createdAt": "2020-06-10T17:25:27Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/java/Retryable.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.triplea.java;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Module to execute a task with retries. Provides a builder interface to specify number of max\n+ * attempts (max number of times the task will be executed) and backoff.\n+ */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class Retryable {\n+  private static final Consumer<Duration> DEFAULT_THREAD_SLEEP =\n+      duration -> Interruptibles.sleep(duration.toMillis());\n+\n+  private final Consumer<Duration> threadSleeper;\n+  private final int maxAttempts;\n+  private final Duration fixedBackOff;\n+  private final Supplier<Boolean> taskRunner;\n+\n+  public static MaxAttemptsBuilder builder() {\n+    return new MaxAttemptsBuilder(DEFAULT_THREAD_SLEEP);\n+  }\n+\n+  @VisibleForTesting\n+  static MaxAttemptsBuilder builder(final Consumer<Duration> threadSleeper) {\n+    return new MaxAttemptsBuilder(threadSleeper);\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class MaxAttemptsBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+\n+    public BackOffBuilder withMaxAttempts(final int maxAttempts) {\n+      Preconditions.checkArgument(\n+          maxAttempts > 1,\n+          \"Max attempt count must be greater than 1, if max attempt is 1, \"\n+              + \"just invoke your task directly without the retry mechanism\");\n+      return new BackOffBuilder(threadSleeper, maxAttempts);\n+    }\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class BackOffBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+    private final int maxAttempts;\n+\n+    public TaskBuilder withFixedBackOff(final Duration duration) {\n+      Preconditions.checkArgument(duration.toMillis() > 0, \"Minimum backoff is 1ms\");\n+      return new TaskBuilder(threadSleeper, maxAttempts, duration);\n+    }\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class TaskBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+    private final int maxAttempts;\n+    private final Duration backOff;\n+\n+    public RetryableBuilder withTask(final Supplier<Boolean> taskRunner) {\n+      Preconditions.checkNotNull(taskRunner);\n+      return new RetryableBuilder(threadSleeper, maxAttempts, backOff, taskRunner);\n+    }\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class RetryableBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+    private final int maxAttempts;\n+    private final Duration fixedBackOff;\n+    private final Supplier<Boolean> taskRunner;\n+\n+    public Retryable build() {\n+      return new Retryable(threadSleeper, maxAttempts, fixedBackOff, taskRunner);\n+    }\n+\n+    public boolean buildAndExecute() {\n+      return build().execute();\n+    }\n+  }\n+\n+  /**\n+   * Executes the retryable task with retries. The result of the task is retried until either:\n+   *\n+   * <ul>\n+   *   <li>The task throws an uncaught exception\n+   *   <li>The task returns false and is max executions reaches max attempts\n+   *   <li>The task returns true\n+   * </ul>\n+   *\n+   * After any failures (the task returns false), the retry mechanism will sleep for the back-off\n+   * period and try again.\n+   */\n+  public boolean execute() {\n+    for (int i = 0; i < maxAttempts; i++) {\n+      final Boolean result = taskRunner.get();\n+      if (result != null && result) {\n+        return true;\n+      }\n+\n+      final boolean wasLastAttempt = i + 1 == maxAttempts;\n+      // only sleep if there are more attempts left\n+      if (!wasLastAttempt) {\n+        threadSleeper.accept(fixedBackOff);\n+      }\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94adafa2253f1f8e879765d12c92b31f432516b"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5MDY4MQ==", "bodyText": "I think https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/BooleanSupplier.html might be a better choice here because it avoids the null Problem", "url": "https://github.com/triplea-game/triplea/pull/6648#discussion_r438290681", "createdAt": "2020-06-10T17:25:59Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/java/Retryable.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.triplea.java;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Module to execute a task with retries. Provides a builder interface to specify number of max\n+ * attempts (max number of times the task will be executed) and backoff.\n+ */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class Retryable {\n+  private static final Consumer<Duration> DEFAULT_THREAD_SLEEP =\n+      duration -> Interruptibles.sleep(duration.toMillis());\n+\n+  private final Consumer<Duration> threadSleeper;\n+  private final int maxAttempts;\n+  private final Duration fixedBackOff;\n+  private final Supplier<Boolean> taskRunner;\n+\n+  public static MaxAttemptsBuilder builder() {\n+    return new MaxAttemptsBuilder(DEFAULT_THREAD_SLEEP);\n+  }\n+\n+  @VisibleForTesting\n+  static MaxAttemptsBuilder builder(final Consumer<Duration> threadSleeper) {\n+    return new MaxAttemptsBuilder(threadSleeper);\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class MaxAttemptsBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+\n+    public BackOffBuilder withMaxAttempts(final int maxAttempts) {\n+      Preconditions.checkArgument(\n+          maxAttempts > 1,\n+          \"Max attempt count must be greater than 1, if max attempt is 1, \"\n+              + \"just invoke your task directly without the retry mechanism\");\n+      return new BackOffBuilder(threadSleeper, maxAttempts);\n+    }\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class BackOffBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+    private final int maxAttempts;\n+\n+    public TaskBuilder withFixedBackOff(final Duration duration) {\n+      Preconditions.checkArgument(duration.toMillis() > 0, \"Minimum backoff is 1ms\");\n+      return new TaskBuilder(threadSleeper, maxAttempts, duration);\n+    }\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class TaskBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+    private final int maxAttempts;\n+    private final Duration backOff;\n+\n+    public RetryableBuilder withTask(final Supplier<Boolean> taskRunner) {\n+      Preconditions.checkNotNull(taskRunner);\n+      return new RetryableBuilder(threadSleeper, maxAttempts, backOff, taskRunner);\n+    }\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class RetryableBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+    private final int maxAttempts;\n+    private final Duration fixedBackOff;\n+    private final Supplier<Boolean> taskRunner;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94adafa2253f1f8e879765d12c92b31f432516b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5MTI2NQ==", "bodyText": "Bonus Points for using java.time instead of raw numbers \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/6648#discussion_r438291265", "createdAt": "2020-06-10T17:26:58Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/java/Retryable.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.triplea.java;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Module to execute a task with retries. Provides a builder interface to specify number of max\n+ * attempts (max number of times the task will be executed) and backoff.\n+ */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class Retryable {\n+  private static final Consumer<Duration> DEFAULT_THREAD_SLEEP =\n+      duration -> Interruptibles.sleep(duration.toMillis());\n+\n+  private final Consumer<Duration> threadSleeper;\n+  private final int maxAttempts;\n+  private final Duration fixedBackOff;\n+  private final Supplier<Boolean> taskRunner;\n+\n+  public static MaxAttemptsBuilder builder() {\n+    return new MaxAttemptsBuilder(DEFAULT_THREAD_SLEEP);\n+  }\n+\n+  @VisibleForTesting\n+  static MaxAttemptsBuilder builder(final Consumer<Duration> threadSleeper) {\n+    return new MaxAttemptsBuilder(threadSleeper);\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class MaxAttemptsBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+\n+    public BackOffBuilder withMaxAttempts(final int maxAttempts) {\n+      Preconditions.checkArgument(\n+          maxAttempts > 1,\n+          \"Max attempt count must be greater than 1, if max attempt is 1, \"\n+              + \"just invoke your task directly without the retry mechanism\");\n+      return new BackOffBuilder(threadSleeper, maxAttempts);\n+    }\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class BackOffBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+    private final int maxAttempts;\n+\n+    public TaskBuilder withFixedBackOff(final Duration duration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94adafa2253f1f8e879765d12c92b31f432516b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5MjkwNg==", "bodyText": "0 attempts is clearly a stupid value.\nI see your point, but technically speaking there would be nothing standing against allowing 1.\nWhile not relevant for our case it could make a difference if we ever want to make it some sort of setting to configure.", "url": "https://github.com/triplea-game/triplea/pull/6648#discussion_r438292906", "createdAt": "2020-06-10T17:29:34Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/java/Retryable.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.triplea.java;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Module to execute a task with retries. Provides a builder interface to specify number of max\n+ * attempts (max number of times the task will be executed) and backoff.\n+ */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class Retryable {\n+  private static final Consumer<Duration> DEFAULT_THREAD_SLEEP =\n+      duration -> Interruptibles.sleep(duration.toMillis());\n+\n+  private final Consumer<Duration> threadSleeper;\n+  private final int maxAttempts;\n+  private final Duration fixedBackOff;\n+  private final Supplier<Boolean> taskRunner;\n+\n+  public static MaxAttemptsBuilder builder() {\n+    return new MaxAttemptsBuilder(DEFAULT_THREAD_SLEEP);\n+  }\n+\n+  @VisibleForTesting\n+  static MaxAttemptsBuilder builder(final Consumer<Duration> threadSleeper) {\n+    return new MaxAttemptsBuilder(threadSleeper);\n+  }\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  public static class MaxAttemptsBuilder {\n+    private final Consumer<Duration> threadSleeper;\n+\n+    public BackOffBuilder withMaxAttempts(final int maxAttempts) {\n+      Preconditions.checkArgument(\n+          maxAttempts > 1,\n+          \"Max attempt count must be greater than 1, if max attempt is 1, \"\n+              + \"just invoke your task directly without the retry mechanism\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94adafa2253f1f8e879765d12c92b31f432516b"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d237022b5a8a944b2ba8cc2224411f014ff251be", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/d237022b5a8a944b2ba8cc2224411f014ff251be", "committedDate": "2020-06-11T00:19:16Z", "message": "Incorporate review feedback:\n\n- use BooleanSupplier over Supplier<Boolean>\n- simplify retry loop\n- invoke a single constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4Njk0ODQ0", "url": "https://github.com/triplea-game/triplea/pull/6648#pullrequestreview-428694844", "createdAt": "2020-06-11T08:22:49Z", "commit": {"oid": "d237022b5a8a944b2ba8cc2224411f014ff251be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3372, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}