{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzI5NzM2", "number": 6001, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDoxNjo1MVrODk6D3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoxMjozNFrODlG4Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDI2NTg4OnYy", "diffSide": "LEFT", "path": "game-headed-javafx/src/main/java/org/triplea/game/client/ui/javafx/TripleA.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDoxNjo1MVrOFxfhjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOTo0NzowOFrOFxmWpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTAzNw==", "bodyText": "@RoiEXLab this was removed as it does not seem to belong in the JavaFx componentry. This invocation seemed like an intermediary step to get java fx working. I'm hoping we can circle back and get this fixed correctly and not have swing dependencies in JavaFx, all in part of fixing up the game startup models.\nI tried to test if this had an impact, and was getting an error launching this class:\n\nError: JavaFX runtime components are missing, and are required to run this application", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387441037", "createdAt": "2020-03-04T04:16:51Z", "author": {"login": "DanVanAtta"}, "path": "game-headed-javafx/src/main/java/org/triplea/game/client/ui/javafx/TripleA.java", "diffHunk": "@@ -40,10 +37,6 @@ public void start(final Stage stage) {\n     navigationPane.switchScreen(FxmlManager.MAIN_MENU_PANE);\n \n     setupStage(stage, scene, loadedNode.getController());\n-    // Don't invoke Swing if headless (for example in tests)\n-    if (!GraphicsEnvironment.isHeadless()) {\n-      SwingUtilities.invokeLater(GameRunner::newMainFrame);\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNTIxMg==", "bodyText": "Did you launch this class via the new RunConfiguration?\nThere seems to be an issue with JavaFX where it can't find the components when the main class extends application and is not a module", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387505212", "createdAt": "2020-03-04T08:13:49Z", "author": {"login": "RoiEXLab"}, "path": "game-headed-javafx/src/main/java/org/triplea/game/client/ui/javafx/TripleA.java", "diffHunk": "@@ -40,10 +37,6 @@ public void start(final Stage stage) {\n     navigationPane.switchScreen(FxmlManager.MAIN_MENU_PANE);\n \n     setupStage(stage, scene, loadedNode.getController());\n-    // Don't invoke Swing if headless (for example in tests)\n-    if (!GraphicsEnvironment.isHeadless()) {\n-      SwingUtilities.invokeLater(GameRunner::newMainFrame);\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTAzNw=="}, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzMTM5OQ==", "bodyText": "Ah, thanks for pointing out the run configuration. \ud83d\udc4d\nThe JavaFx variant launches both before and after this update. Admittedly that was not a very thorough regression check.", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387531399", "createdAt": "2020-03-04T09:08:29Z", "author": {"login": "DanVanAtta"}, "path": "game-headed-javafx/src/main/java/org/triplea/game/client/ui/javafx/TripleA.java", "diffHunk": "@@ -40,10 +37,6 @@ public void start(final Stage stage) {\n     navigationPane.switchScreen(FxmlManager.MAIN_MENU_PANE);\n \n     setupStage(stage, scene, loadedNode.getController());\n-    // Don't invoke Swing if headless (for example in tests)\n-    if (!GraphicsEnvironment.isHeadless()) {\n-      SwingUtilities.invokeLater(GameRunner::newMainFrame);\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTAzNw=="}, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MjkzNQ==", "bodyText": "Try launching a game once.\nThe reason I introduced those 3 lines of code is because originally some swing code I invoke at some point actually expects this mainframe to exist, otherwise an NPE will be thrown.\nThe reason for the headless check was because we initially had some javafx integration tests that basically clicked through the screens, but this framework is only able to create dummy javafx components, so swing just crashed the test.", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387552935", "createdAt": "2020-03-04T09:47:08Z", "author": {"login": "RoiEXLab"}, "path": "game-headed-javafx/src/main/java/org/triplea/game/client/ui/javafx/TripleA.java", "diffHunk": "@@ -40,10 +37,6 @@ public void start(final Stage stage) {\n     navigationPane.switchScreen(FxmlManager.MAIN_MENU_PANE);\n \n     setupStage(stage, scene, loadedNode.getController());\n-    // Don't invoke Swing if headless (for example in tests)\n-    if (!GraphicsEnvironment.isHeadless()) {\n-      SwingUtilities.invokeLater(GameRunner::newMainFrame);\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTAzNw=="}, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjMwNjY0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/mc/SetupPanelModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo1ODo0MVrOFxzKSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo0NToxNlrOFx8_KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2Mjc2MA==", "bodyText": "This cyclic dependency is weird. I wonder if it's better to pass some sort of CompletableFuture<JFrame> to the constructor and \"complete\" it once the frame is ready.\nIn any case some sort of check that the ui isn't set more than once would be nice", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387762760", "createdAt": "2020-03-04T15:58:41Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/mc/SetupPanelModel.java", "diffHunk": "@@ -35,7 +35,7 @@\n   protected SetupPanel panel = null;\n \n   @Setter private Consumer<SetupPanel> panelChangeListener;\n-  @Nonnull private final JFrame ui;\n+  @Setter private JFrame ui;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzc1Mw==", "bodyText": "Generally agree, though I think we can skip that step. SetupPanelModel should not even have a reference to the UI other than an interface for the 'setupPanel', and certainly should not have a reference to the main frame. The dialogs that are displayed from this model class that need a 'parent' reference all do not belong.", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387923753", "createdAt": "2020-03-04T20:45:16Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/mc/SetupPanelModel.java", "diffHunk": "@@ -35,7 +35,7 @@\n   protected SetupPanel panel = null;\n \n   @Setter private Consumer<SetupPanel> panelChangeListener;\n-  @Nonnull private final JFrame ui;\n+  @Setter private JFrame ui;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2Mjc2MA=="}, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjMzMjgxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowNDoyOVrOFxzaYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo0NTo1NFrOFx9Ajg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2Njg4Mg==", "bodyText": "One difference this is probably going to cause is that the dialogs now no longer share the icon with the main frame, this problem can be found in different places too though.\nAlso it might be no longer on top of the mainframe", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387766882", "createdAt": "2020-03-04T16:04:29Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditor.java", "diffHunk": "@@ -181,8 +180,8 @@ private void testEmail() {\n                 final int finalMessageType = messageType;\n                 SwingUtilities.invokeLater(\n                     () ->\n-                        GameRunner.showMessageDialog(\n-                            finalMessage, GameRunner.Title.of(\"Email Test\"), finalMessageType));\n+                        JOptionPane.showMessageDialog(\n+                            null, finalMessage, \"Email Test\", finalMessageType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNDExMA==", "bodyText": "The icon is significant, though the number of dialogs impacts is limited and they are not used that often. For now decided to favor dis-entangling things.", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387924110", "createdAt": "2020-03-04T20:45:54Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditor.java", "diffHunk": "@@ -181,8 +180,8 @@ private void testEmail() {\n                 final int finalMessageType = messageType;\n                 SwingUtilities.invokeLater(\n                     () ->\n-                        GameRunner.showMessageDialog(\n-                            finalMessage, GameRunner.Title.of(\"Email Test\"), finalMessageType));\n+                        JOptionPane.showMessageDialog(\n+                            null, finalMessage, \"Email Test\", finalMessageType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2Njg4Mg=="}, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjM0NjI1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/ui/MainFrame.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowNzozNlrOFxziiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo1ODo0MlrOFx9Zjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2ODk2OQ==", "bodyText": "I think those static actions should be moved up one call layer:\nI'f this constructor is ever called tice this could result in weird problems", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387768969", "createdAt": "2020-03-04T16:07:36Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/ui/MainFrame.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package games.strategy.engine.framework.ui;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.GameRunner;\n+import games.strategy.engine.framework.lookandfeel.LookAndFeelSwingFrameListener;\n+import games.strategy.engine.framework.startup.mc.SetupPanelModel;\n+import games.strategy.engine.framework.startup.ui.panels.main.MainPanelBuilder;\n+import games.strategy.engine.framework.startup.ui.panels.main.game.selector.GameSelectorModel;\n+import games.strategy.engine.framework.ui.background.BackgroundTaskRunner;\n+import java.awt.event.WindowEvent;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+import org.triplea.swing.JFrameBuilder;\n+\n+/** Represents the outermost JFrame, maintains the reference to it and controls access. */\n+public class MainFrame {\n+\n+  private static MainFrame instance;\n+\n+  private JFrame mainFrame;\n+\n+  private MainFrame(\n+      final SetupPanelModel setupPanelModel, final GameSelectorModel gameSelectorModel) {\n+    mainFrame =\n+        JFrameBuilder.builder()\n+            .title(\"TripleA\")\n+            .windowClosedAction(GameRunner::exitGameIfFinished)\n+            .build();\n+    BackgroundTaskRunner.setMainFrame(mainFrame);\n+\n+    LookAndFeelSwingFrameListener.register(mainFrame);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNDg2Mw==", "bodyText": "The constructor is private, the factory method checks that the static instance is not yet set. One level higher is 'GameRunner', part of the goal is to remove anything UI or swing related out of GameRunner.", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387924863", "createdAt": "2020-03-04T20:47:27Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/ui/MainFrame.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package games.strategy.engine.framework.ui;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.GameRunner;\n+import games.strategy.engine.framework.lookandfeel.LookAndFeelSwingFrameListener;\n+import games.strategy.engine.framework.startup.mc.SetupPanelModel;\n+import games.strategy.engine.framework.startup.ui.panels.main.MainPanelBuilder;\n+import games.strategy.engine.framework.startup.ui.panels.main.game.selector.GameSelectorModel;\n+import games.strategy.engine.framework.ui.background.BackgroundTaskRunner;\n+import java.awt.event.WindowEvent;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+import org.triplea.swing.JFrameBuilder;\n+\n+/** Represents the outermost JFrame, maintains the reference to it and controls access. */\n+public class MainFrame {\n+\n+  private static MainFrame instance;\n+\n+  private JFrame mainFrame;\n+\n+  private MainFrame(\n+      final SetupPanelModel setupPanelModel, final GameSelectorModel gameSelectorModel) {\n+    mainFrame =\n+        JFrameBuilder.builder()\n+            .title(\"TripleA\")\n+            .windowClosedAction(GameRunner::exitGameIfFinished)\n+            .build();\n+    BackgroundTaskRunner.setMainFrame(mainFrame);\n+\n+    LookAndFeelSwingFrameListener.register(mainFrame);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2ODk2OQ=="}, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzMDUxMA==", "bodyText": "By \"one level higher\" I was actually reffering to the static method inside this class rather than the constructor", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387930510", "createdAt": "2020-03-04T20:58:42Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/ui/MainFrame.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package games.strategy.engine.framework.ui;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.GameRunner;\n+import games.strategy.engine.framework.lookandfeel.LookAndFeelSwingFrameListener;\n+import games.strategy.engine.framework.startup.mc.SetupPanelModel;\n+import games.strategy.engine.framework.startup.ui.panels.main.MainPanelBuilder;\n+import games.strategy.engine.framework.startup.ui.panels.main.game.selector.GameSelectorModel;\n+import games.strategy.engine.framework.ui.background.BackgroundTaskRunner;\n+import java.awt.event.WindowEvent;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+import org.triplea.swing.JFrameBuilder;\n+\n+/** Represents the outermost JFrame, maintains the reference to it and controls access. */\n+public class MainFrame {\n+\n+  private static MainFrame instance;\n+\n+  private JFrame mainFrame;\n+\n+  private MainFrame(\n+      final SetupPanelModel setupPanelModel, final GameSelectorModel gameSelectorModel) {\n+    mainFrame =\n+        JFrameBuilder.builder()\n+            .title(\"TripleA\")\n+            .windowClosedAction(GameRunner::exitGameIfFinished)\n+            .build();\n+    BackgroundTaskRunner.setMainFrame(mainFrame);\n+\n+    LookAndFeelSwingFrameListener.register(mainFrame);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2ODk2OQ=="}, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjM2NjEwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/BackgroundTaskRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoxMjozNFrOFxzvZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo0OToyNlrOFx9HSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3MjI2MA==", "bodyText": "Hmm I wonder if this really needs to be changed, would anything speak against the callers explicitly passing some sort of frame (not necessarily the main frame) and adding a deprecated getter for the singleton frame if needed?", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387772260", "createdAt": "2020-03-04T16:12:34Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/BackgroundTaskRunner.java", "diffHunk": "@@ -11,17 +12,17 @@\n import javax.swing.JFrame;\n import javax.swing.SwingUtilities;\n import javax.swing.SwingWorker;\n-import org.triplea.java.Interruptibles;\n+import lombok.experimental.UtilityClass;\n import org.triplea.java.function.ThrowingSupplier;\n \n /** Provides methods for running tasks in the background to avoid blocking the UI. */\n+@UtilityClass\n public final class BackgroundTaskRunner {\n-  private final JFrame frame;\n+  private static JFrame mainFrame;\n \n-  public BackgroundTaskRunner(final JFrame frame) {\n-    checkNotNull(frame);\n-\n-    this.frame = frame;\n+  public static void setMainFrame(final JFrame mainFrame) {\n+    Preconditions.checkState(BackgroundTaskRunner.mainFrame == null);\n+    BackgroundTaskRunner.mainFrame = mainFrame;\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNTgzNA==", "bodyText": "Previously we always passed the main frame, so in part I'm not seeking to change too much at any one time. Passing other frames would be a really different type of change. The getter I'd like to avoid so that we have the 'mainFrame' pushing its reference and using 'setters' rather than other elements using 'getter' to get the reference (essentially an application of IOC, or the \"we'll call you, don't call us\" principle)", "url": "https://github.com/triplea-game/triplea/pull/6001#discussion_r387925834", "createdAt": "2020-03-04T20:49:26Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/BackgroundTaskRunner.java", "diffHunk": "@@ -11,17 +12,17 @@\n import javax.swing.JFrame;\n import javax.swing.SwingUtilities;\n import javax.swing.SwingWorker;\n-import org.triplea.java.Interruptibles;\n+import lombok.experimental.UtilityClass;\n import org.triplea.java.function.ThrowingSupplier;\n \n /** Provides methods for running tasks in the background to avoid blocking the UI. */\n+@UtilityClass\n public final class BackgroundTaskRunner {\n-  private final JFrame frame;\n+  private static JFrame mainFrame;\n \n-  public BackgroundTaskRunner(final JFrame frame) {\n-    checkNotNull(frame);\n-\n-    this.frame = frame;\n+  public static void setMainFrame(final JFrame mainFrame) {\n+    Preconditions.checkState(BackgroundTaskRunner.mainFrame == null);\n+    BackgroundTaskRunner.mainFrame = mainFrame;\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3MjI2MA=="}, "originalCommit": {"oid": "dcbb5da7f7909f2240ccc2bf55abd5f01fd184a9"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2496, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}