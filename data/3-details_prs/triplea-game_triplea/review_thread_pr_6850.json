{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTY5MjU2", "number": 6850, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDozOTozMlrOEJABRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDoyNjozM1rOEJevow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODcyOTY0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDozOTozMlrOGpTciA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDoxMDozM1rOGp_9Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2MzQwMA==", "bodyText": "A javadoc here to describe that reporting frequency means we report every n'th could be useful to people down the road wanting to use this API.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r445963400", "createdAt": "2020-06-26T04:39:32Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -39,36 +41,54 @@ private long stopTimer() {\n \n   @Override\n   public void close() {\n-    processResult(stopTimer(), this);\n+    if (this.reportingFrequency > 0) {\n+      processResult(stopTimer(), this);\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")\n   public static PerfTimer startTimer(final String title) {\n-    return new PerfTimer(title);\n+    return startTimer(title, 1);\n   }\n \n-  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {\n-    final long stopMicros = stopNanos / 1000;\n-\n-    final long milliFraction = (stopMicros % 1000) / 100;\n-    final long millis = (stopMicros / 1000);\n+  public static PerfTimer startTimer(final String title, final int reportingFrequency) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa017f67c7174909c4aeac80aaa70c65d706612b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyOTA0Mw==", "bodyText": "Done.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r446129043", "createdAt": "2020-06-26T11:32:35Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -39,36 +41,54 @@ private long stopTimer() {\n \n   @Override\n   public void close() {\n-    processResult(stopTimer(), this);\n+    if (this.reportingFrequency > 0) {\n+      processResult(stopTimer(), this);\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")\n   public static PerfTimer startTimer(final String title) {\n-    return new PerfTimer(title);\n+    return startTimer(title, 1);\n   }\n \n-  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {\n-    final long stopMicros = stopNanos / 1000;\n-\n-    final long milliFraction = (stopMicros % 1000) / 100;\n-    final long millis = (stopMicros / 1000);\n+  public static PerfTimer startTimer(final String title, final int reportingFrequency) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2MzQwMA=="}, "originalCommit": {"oid": "fa017f67c7174909c4aeac80aaa70c65d706612b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzMjA0Mg==", "bodyText": "Done.\n\nCouple comments/questions, I like the direction and am happy to see the improvements.\nSide-note for out of band discussion, I think when we introduced PerfTimer it was a more or less explicit decision the timing code would not be left in. I am not sure we do want ever want to disable and not remove timing code. Timing code usually tends to be pretty one-off, what's more if you enabled it and hten suddenly there were a few dozen timers, it would create a lot of noise in the logs. I would also wonder if at some point we might see accounting/memory issues if we are simply suppressing output.\n\nMy thinking is it is useful to instrument some places in the code and check it in, but with a 0 reporting frequency by default for these reasons:\n\nIf a developer wants to reproduce a past result, the code is already there. They don't have to insert the code themselves, potentially in a slightly different way than before (and thus not measuring the same thing).\nIf we make some prefs around enabling some of these timers, it can allow users to report their results with a release version without code changes. For example, if AI is slow on a specific map, they can enable the timing category for that (which will make the code pass a non-0 reporting frequency to the perftimers) and report their output.\nIt allows re-use of effort when finding the right place to instrument code. For example, instrumenting the AI code in the right way is non-trivial - e.g. you want to measure the time the AI takes thinking, but not the time used when there's a battle popup and a human player needs to make a decision during an AI's combat phase. If we check in these timers, finding the right place to instrument these things can be done once, instead of many times.\n\nBy minimizing the overhead when frequency is set to 0 (i.e. not querying the current time or doing any computation), we can have perf timers added to interesting places in the code providing the above benefits.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r446132042", "createdAt": "2020-06-26T11:40:08Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -39,36 +41,54 @@ private long stopTimer() {\n \n   @Override\n   public void close() {\n-    processResult(stopTimer(), this);\n+    if (this.reportingFrequency > 0) {\n+      processResult(stopTimer(), this);\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")\n   public static PerfTimer startTimer(final String title) {\n-    return new PerfTimer(title);\n+    return startTimer(title, 1);\n   }\n \n-  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {\n-    final long stopMicros = stopNanos / 1000;\n-\n-    final long milliFraction = (stopMicros % 1000) / 100;\n-    final long millis = (stopMicros / 1000);\n+  public static PerfTimer startTimer(final String title, final int reportingFrequency) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2MzQwMA=="}, "originalCommit": {"oid": "fa017f67c7174909c4aeac80aaa70c65d706612b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5MjY3OQ==", "bodyText": "Interesting points. I think the counter is how frequent we would actually re-enable timers compared to the \"clutter\" it creates. I think if we want sustained measurements it would be better to bring in perhaps AOP and some annotations to do the timing. The timers affect variable scope, which makes for non-zero clutter.\nI'm still concerned as well if you turn on timers then you have many timers start firing and it can be hard to see the output you want.\nI think any timing for confirmation testing probably should live in actual test code and be a bona fide performance test. I've always chafed that we sometimes reject PRs or make PRs suddenly have to do timing measurements when any such requirements are ideally baked into the test suite.\nPerhaps we can make some things easier to encapsulating specific sections of the AI code in a way that makes it easy to time. Then if we document those locations nicely we could get a few benefits beyond easy timing.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r446692679", "createdAt": "2020-06-28T20:10:33Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -39,36 +41,54 @@ private long stopTimer() {\n \n   @Override\n   public void close() {\n-    processResult(stopTimer(), this);\n+    if (this.reportingFrequency > 0) {\n+      processResult(stopTimer(), this);\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")\n   public static PerfTimer startTimer(final String title) {\n-    return new PerfTimer(title);\n+    return startTimer(title, 1);\n   }\n \n-  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {\n-    final long stopMicros = stopNanos / 1000;\n-\n-    final long milliFraction = (stopMicros % 1000) / 100;\n-    final long millis = (stopMicros / 1000);\n+  public static PerfTimer startTimer(final String title, final int reportingFrequency) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2MzQwMA=="}, "originalCommit": {"oid": "fa017f67c7174909c4aeac80aaa70c65d706612b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODczMzczOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDo0MjoxMFrOGpTe7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMTozNDoxMVrOGpdmBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2NDAxNQ==", "bodyText": "Start millis being either the reporting frequency or the actual start nano time is potentially confusing at two levels.\n\nThe variable says milli though we assign nanos to it.\nThe variable probably should be one value or another. Having a variable's meaning depend on the context and previous call history is a SRP violation. Perhaps we really want two different variables and make them internally nullable. Another option is to have a simple internal object to track this for us, that object could then provide a nice API to abstract away time keeping details.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r445964015", "createdAt": "2020-06-26T04:42:10Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,14 +23,16 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n   private final long startMillis;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    this.startMillis = this.reportingFrequency > 0 ? System.nanoTime() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa017f67c7174909c4aeac80aaa70c65d706612b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyOTY2OQ==", "bodyText": "Start millis being either the reporting frequency or the actual start nano time is potentially confusing at two levels.\n\nThe variable says milli though we assign nanos to it.\n\n\nYep, that was wrong in the existing code! Fixed.\n\n\nThe variable probably should be one value or another. Having a variable's meaning depend on the context and previous call history is a SRP violation. Perhaps we really want two different variables and make them internally nullable. Another option is to have a simple internal object to track this for us, that object could then provide a nice API to abstract away time keeping details.\n\n\nJust to clarify, this wasn't storing the reporting frequency. It was just conditionally storing the nanoTime if the reporting frequency was > 0. I've switched to using Optional<> to make that clearer and changed from a ternary operator to an if with a comment.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r446129669", "createdAt": "2020-06-26T11:34:11Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,14 +23,16 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n   private final long startMillis;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    this.startMillis = this.reportingFrequency > 0 ? System.nanoTime() : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2NDAxNQ=="}, "originalCommit": {"oid": "fa017f67c7174909c4aeac80aaa70c65d706612b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzc1Nzk1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDoxOTo1OFrOGqAA9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMToxNToxMVrOGu-Uhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5MzYyMw==", "bodyText": "Have you checked the synchronized block on highly concurrent code? I had some problems with this for tile rendering and noticed that the overhead of closing the timer with processResult slowed things down to the point where the map was taking seconds to render. Just curious what scenario's you've run this through.\nI think the concurrency problem here might be just tricky (argument for us to get a library to do this).", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r446693623", "createdAt": "2020-06-28T20:19:58Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,52 +24,88 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n-  private final long startMillis;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n+  private final Optional<Long> startNanos;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    // If reporting frequency is 0, avoid the overhead of querying the time.\n+    if (this.reportingFrequency > 0) {\n+      this.startNanos = Optional.of(System.nanoTime());\n+    } else {\n+      this.startNanos = Optional.empty();\n+    }\n   }\n \n   private long stopTimer() {\n-    return System.nanoTime() - startMillis;\n+    return System.nanoTime() - startNanos.get();\n   }\n \n   @Override\n   public void close() {\n-    processResult(stopTimer(), this);\n+    if (this.reportingFrequency > 0) {\n+      processResult(stopTimer(), this);\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")\n   public static PerfTimer startTimer(final String title) {\n-    return new PerfTimer(title);\n+    return startTimer(title, 1);\n   }\n \n-  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {\n-    final long stopMicros = stopNanos / 1000;\n-\n-    final long milliFraction = (stopMicros % 1000) / 100;\n-    final long millis = (stopMicros / 1000);\n+  /**\n+   * Creates a perf timer with a reporting frequency. The reporting frequency specifies N specifies\n+   * that performance information should be printed every N executions of the timer. If 0, no\n+   * information is printed (and no timings are taken), which can be useful to have some places in\n+   * the code to be always instrumented, but not always enabled.\n+   *\n+   * @param title The name of the timer\n+   * @param reportingFrequency The reporting frequency.\n+   * @return the perf timer object\n+   */\n+  @SuppressWarnings(\"unused\")\n+  public static PerfTimer startTimer(final String title, final int reportingFrequency) {\n+    return new PerfTimer(title, reportingFrequency);\n+  }\n \n+  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fff857ef8761e8e6a59bc728c5fc26d90ec62d0"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwODc0Mw==", "bodyText": "Agreed that it might be a problem. Note: My PR is not changing this, however - it was that way before.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r451908743", "createdAt": "2020-07-09T01:15:11Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,52 +24,88 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n-  private final long startMillis;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n+  private final Optional<Long> startNanos;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    // If reporting frequency is 0, avoid the overhead of querying the time.\n+    if (this.reportingFrequency > 0) {\n+      this.startNanos = Optional.of(System.nanoTime());\n+    } else {\n+      this.startNanos = Optional.empty();\n+    }\n   }\n \n   private long stopTimer() {\n-    return System.nanoTime() - startMillis;\n+    return System.nanoTime() - startNanos.get();\n   }\n \n   @Override\n   public void close() {\n-    processResult(stopTimer(), this);\n+    if (this.reportingFrequency > 0) {\n+      processResult(stopTimer(), this);\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")\n   public static PerfTimer startTimer(final String title) {\n-    return new PerfTimer(title);\n+    return startTimer(title, 1);\n   }\n \n-  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {\n-    final long stopMicros = stopNanos / 1000;\n-\n-    final long milliFraction = (stopMicros % 1000) / 100;\n-    final long millis = (stopMicros / 1000);\n+  /**\n+   * Creates a perf timer with a reporting frequency. The reporting frequency specifies N specifies\n+   * that performance information should be printed every N executions of the timer. If 0, no\n+   * information is printed (and no timings are taken), which can be useful to have some places in\n+   * the code to be always instrumented, but not always enabled.\n+   *\n+   * @param title The name of the timer\n+   * @param reportingFrequency The reporting frequency.\n+   * @return the perf timer object\n+   */\n+  @SuppressWarnings(\"unused\")\n+  public static PerfTimer startTimer(final String title, final int reportingFrequency) {\n+    return new PerfTimer(title, reportingFrequency);\n+  }\n \n+  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5MzYyMw=="}, "originalCommit": {"oid": "7fff857ef8761e8e6a59bc728c5fc26d90ec62d0"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzc2MTY3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDoyNDoxN1rOGqACqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMToxODozMVrOGu-YKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDA1Nw==", "bodyText": "I'm concerned about the stopTimer method. My thoughts:\n\nthe get() method of optional generally should be avoided. This is a pretty good article on optional usage: https://dzone.com/articles/using-optional-correctly-is-not-optional, it sums up a number of similar points.\n\nI think one to help this is to mark startNanos as @nullable and just use a null value and do a classic if( null )  type of check.\nThough, we still have a lot of internal state going that route. Even if we allow for disabled timers, assigning startNanos always to System.nanoTime would not hurt that much (we are still talking a ns operation, that is not a place to make performance improvements).", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r446694057", "createdAt": "2020-06-28T20:24:17Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,52 +24,88 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n-  private final long startMillis;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n+  private final Optional<Long> startNanos;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    // If reporting frequency is 0, avoid the overhead of querying the time.\n+    if (this.reportingFrequency > 0) {\n+      this.startNanos = Optional.of(System.nanoTime());\n+    } else {\n+      this.startNanos = Optional.empty();\n+    }\n   }\n \n   private long stopTimer() {\n-    return System.nanoTime() - startMillis;\n+    return System.nanoTime() - startNanos.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fff857ef8761e8e6a59bc728c5fc26d90ec62d0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwOTY3NQ==", "bodyText": "Removed the optional stuff for now.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r451909675", "createdAt": "2020-07-09T01:18:31Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,52 +24,88 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n-  private final long startMillis;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n+  private final Optional<Long> startNanos;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    // If reporting frequency is 0, avoid the overhead of querying the time.\n+    if (this.reportingFrequency > 0) {\n+      this.startNanos = Optional.of(System.nanoTime());\n+    } else {\n+      this.startNanos = Optional.empty();\n+    }\n   }\n \n   private long stopTimer() {\n-    return System.nanoTime() - startMillis;\n+    return System.nanoTime() - startNanos.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDA1Nw=="}, "originalCommit": {"oid": "7fff857ef8761e8e6a59bc728c5fc26d90ec62d0"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzc2MzU1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDoyNjozM1rOGqADnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMToxNjoyNFrOGu-WBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDMwMw==", "bodyText": "This comment does not agree with the comment on line 23:\n\n@SuppressWarnings(\"unused\") // used on-demand by dev where needed and removed aferwards\n\nThe class javadoc perhaps should be updated to have an additional example usage with the reportingFrequency value.\nFundamentally I just don't think I'm really quite convinced we want to leave timers in the code.  If we keep that constraint then you can assert that reporting frequency is positive.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r446694303", "createdAt": "2020-06-28T20:26:33Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,52 +24,88 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n-  private final long startMillis;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n+  private final Optional<Long> startNanos;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    // If reporting frequency is 0, avoid the overhead of querying the time.\n+    if (this.reportingFrequency > 0) {\n+      this.startNanos = Optional.of(System.nanoTime());\n+    } else {\n+      this.startNanos = Optional.empty();\n+    }\n   }\n \n   private long stopTimer() {\n-    return System.nanoTime() - startMillis;\n+    return System.nanoTime() - startNanos.get();\n   }\n \n   @Override\n   public void close() {\n-    processResult(stopTimer(), this);\n+    if (this.reportingFrequency > 0) {\n+      processResult(stopTimer(), this);\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")\n   public static PerfTimer startTimer(final String title) {\n-    return new PerfTimer(title);\n+    return startTimer(title, 1);\n   }\n \n-  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {\n-    final long stopMicros = stopNanos / 1000;\n-\n-    final long milliFraction = (stopMicros % 1000) / 100;\n-    final long millis = (stopMicros / 1000);\n+  /**\n+   * Creates a perf timer with a reporting frequency. The reporting frequency specifies N specifies\n+   * that performance information should be printed every N executions of the timer. If 0, no\n+   * information is printed (and no timings are taken), which can be useful to have some places in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fff857ef8761e8e6a59bc728c5fc26d90ec62d0"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwOTEyNw==", "bodyText": "I removed this part of the comment for now.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r451909127", "createdAt": "2020-07-09T01:16:24Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,52 +24,88 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n-  private final long startMillis;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n+  private final Optional<Long> startNanos;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    // If reporting frequency is 0, avoid the overhead of querying the time.\n+    if (this.reportingFrequency > 0) {\n+      this.startNanos = Optional.of(System.nanoTime());\n+    } else {\n+      this.startNanos = Optional.empty();\n+    }\n   }\n \n   private long stopTimer() {\n-    return System.nanoTime() - startMillis;\n+    return System.nanoTime() - startNanos.get();\n   }\n \n   @Override\n   public void close() {\n-    processResult(stopTimer(), this);\n+    if (this.reportingFrequency > 0) {\n+      processResult(stopTimer(), this);\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")\n   public static PerfTimer startTimer(final String title) {\n-    return new PerfTimer(title);\n+    return startTimer(title, 1);\n   }\n \n-  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {\n-    final long stopMicros = stopNanos / 1000;\n-\n-    final long milliFraction = (stopMicros % 1000) / 100;\n-    final long millis = (stopMicros / 1000);\n+  /**\n+   * Creates a perf timer with a reporting frequency. The reporting frequency specifies N specifies\n+   * that performance information should be printed every N executions of the timer. If 0, no\n+   * information is printed (and no timings are taken), which can be useful to have some places in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDMwMw=="}, "originalCommit": {"oid": "7fff857ef8761e8e6a59bc728c5fc26d90ec62d0"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2058, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}