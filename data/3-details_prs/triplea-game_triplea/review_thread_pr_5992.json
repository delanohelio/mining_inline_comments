{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNDEzMTg1", "number": 5992, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyOTo1OFrODkVZzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjo0NjoyNlrODkf2nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDI1OTk5OnYy", "diffSide": "LEFT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/remote/IEditDelegate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyOTo1OFrOFwmQRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyOTo1OFrOFwmQRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMjcyNw==", "bodyText": "Now with those changes this unused method can safely be removed", "url": "https://github.com/triplea-game/triplea/pull/5992#discussion_r386502727", "createdAt": "2020-03-02T16:29:58Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/remote/IEditDelegate.java", "diffHunk": "@@ -6,37 +6,48 @@\n import games.strategy.engine.data.Unit;\n import games.strategy.engine.delegate.IPersistentDelegate;\n import games.strategy.engine.message.IRemote;\n+import games.strategy.engine.message.RemoteActionCode;\n import games.strategy.triplea.delegate.TechAdvance;\n import java.util.Collection;\n import org.triplea.java.collections.IntegerMap;\n import org.triplea.util.Triple;\n \n /** Remote interface for EditDelegate. */\n public interface IEditDelegate extends IRemote, IPersistentDelegate {\n+  @RemoteActionCode(9)\n   boolean getEditMode();\n \n+  @RemoteActionCode(12)\n   void setEditMode(boolean editMode);\n \n+  @RemoteActionCode(11)\n   String removeUnits(Territory t, Collection<Unit> units);\n \n+  @RemoteActionCode(2)\n   String addUnits(Territory t, Collection<Unit> units);\n \n+  @RemoteActionCode(6)\n   String changeTerritoryOwner(Territory t, GamePlayer player);\n \n+  @RemoteActionCode(3)\n   String changePUs(GamePlayer player, int pus);\n \n-  String changeTechTokens(GamePlayer player, int tokens);\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dda8afea786316479fdbef3c19c38a8f9aa2762"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTk2MTkxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/chat/IChatChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjo0MDoxOVrOFw2isw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDo1MTowN1rOFxA7rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2OTU4Nw==", "bodyText": "Should we re-order the methods so that the numbers would be ascending? I think that might help make it clear there are no gaps and just be nicer when reading the methods.", "url": "https://github.com/triplea-game/triplea/pull/5992#discussion_r386769587", "createdAt": "2020-03-03T02:40:19Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/chat/IChatChannel.java", "diffHunk": "@@ -1,29 +1,31 @@\n package games.strategy.engine.chat;\n \n import games.strategy.engine.message.IChannelSubscriber;\n+import games.strategy.engine.message.RemoteActionCode;\n import org.triplea.domain.data.UserName;\n import org.triplea.http.client.lobby.chat.ChatParticipant;\n \n-/**\n- * Chat messages occur on this channel.\n- *\n- * <p>RMI warning: the ordering of methods cannot be changed, these methods will be invoked by\n- * method order number\n- */\n+/** Chat messages occur on this channel. */\n public interface IChatChannel extends IChannelSubscriber {\n   // we get the sender from MessageContext\n+  @RemoteActionCode(0)\n   void chatOccurred(String message);\n \n+  @RemoteActionCode(2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dda8afea786316479fdbef3c19c38a8f9aa2762"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkzOTgyMw==", "bodyText": "We could, but it would be a tedious process + some classes skip a couple of numbers and if we ever plan to overload a method checkstyle would force us to keep the overloadoverloaded versions together.\nWe could add this as a \"nice to have\" task, but this is not something I'd like to address as part of this PR.", "url": "https://github.com/triplea-game/triplea/pull/5992#discussion_r386939823", "createdAt": "2020-03-03T10:51:07Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/chat/IChatChannel.java", "diffHunk": "@@ -1,29 +1,31 @@\n package games.strategy.engine.chat;\n \n import games.strategy.engine.message.IChannelSubscriber;\n+import games.strategy.engine.message.RemoteActionCode;\n import org.triplea.domain.data.UserName;\n import org.triplea.http.client.lobby.chat.ChatParticipant;\n \n-/**\n- * Chat messages occur on this channel.\n- *\n- * <p>RMI warning: the ordering of methods cannot be changed, these methods will be invoked by\n- * method order number\n- */\n+/** Chat messages occur on this channel. */\n public interface IChatChannel extends IChannelSubscriber {\n   // we get the sender from MessageContext\n+  @RemoteActionCode(0)\n   void chatOccurred(String message);\n \n+  @RemoteActionCode(2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2OTU4Nw=="}, "originalCommit": {"oid": "2dda8afea786316479fdbef3c19c38a8f9aa2762"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTk2NzIzOnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/engine/message/unifiedmessenger/EndPointTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjo0MzozMlrOFw2l3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDo1NjowNVrOFxBHEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3MDM5OA==", "bodyText": "Looks like we are still bound by method name (and ordering must be preserved, but at least that is in annotation now). Is there a way we could put the method name in the annotation as well?", "url": "https://github.com/triplea-game/triplea/pull/5992#discussion_r386770398", "createdAt": "2020-03-03T02:43:32Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/message/unifiedmessenger/EndPointTest.java", "diffHunk": "@@ -2,25 +2,26 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n+import games.strategy.engine.message.RemoteActionCode;\n import games.strategy.engine.message.RemoteMethodCall;\n import games.strategy.engine.message.RemoteMethodCallResults;\n-import java.util.Comparator;\n import java.util.List;\n import org.junit.jupiter.api.Test;\n \n class EndPointTest {\n \n+  interface TestInterface {\n+    @RemoteActionCode(0)\n+    @SuppressWarnings(\"unused\")\n+    int dummy();\n+  }\n+\n   @Test\n-  void testEndPoint() {\n-    final EndPoint endPoint = new EndPoint(\"\", Comparator.class, false);\n-    endPoint.addImplementor((Comparator<Object>) (o1, o2) -> 2);\n+  void testEndPoint() throws Exception {\n+    final EndPoint endPoint = new EndPoint(\"\", TestInterface.class, false);\n+    endPoint.addImplementor((TestInterface) () -> 2);\n     final RemoteMethodCall call =\n-        new RemoteMethodCall(\n-            \"\",\n-            \"compare\",\n-            new Object[] {\"\", \"\"},\n-            new Class<?>[] {Object.class, Object.class},\n-            Comparator.class);\n+        new RemoteMethodCall(\"\", TestInterface.class.getMethod(\"dummy\"), new Object[] {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dda8afea786316479fdbef3c19c38a8f9aa2762"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0MjczOA==", "bodyText": "We are only bound in this particular test-case.\nThe RemoteMethodCall class works via reflection after all, so we need to pass the method object to the constructor somehow.\nIn non-test code this conversion is done by the JVM:\nWe create a \"proxy\" object that implements a particular interface. Whenever we call a method on this proxy object, the invocationhandler we registered is called with the corresponding method object, so the non-test code doesn't have any references to the method names whatsoever", "url": "https://github.com/triplea-game/triplea/pull/5992#discussion_r386942738", "createdAt": "2020-03-03T10:56:05Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/test/java/games/strategy/engine/message/unifiedmessenger/EndPointTest.java", "diffHunk": "@@ -2,25 +2,26 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n+import games.strategy.engine.message.RemoteActionCode;\n import games.strategy.engine.message.RemoteMethodCall;\n import games.strategy.engine.message.RemoteMethodCallResults;\n-import java.util.Comparator;\n import java.util.List;\n import org.junit.jupiter.api.Test;\n \n class EndPointTest {\n \n+  interface TestInterface {\n+    @RemoteActionCode(0)\n+    @SuppressWarnings(\"unused\")\n+    int dummy();\n+  }\n+\n   @Test\n-  void testEndPoint() {\n-    final EndPoint endPoint = new EndPoint(\"\", Comparator.class, false);\n-    endPoint.addImplementor((Comparator<Object>) (o1, o2) -> 2);\n+  void testEndPoint() throws Exception {\n+    final EndPoint endPoint = new EndPoint(\"\", TestInterface.class, false);\n+    endPoint.addImplementor((TestInterface) () -> 2);\n     final RemoteMethodCall call =\n-        new RemoteMethodCall(\n-            \"\",\n-            \"compare\",\n-            new Object[] {\"\", \"\"},\n-            new Class<?>[] {Object.class, Object.class},\n-            Comparator.class);\n+        new RemoteMethodCall(\"\", TestInterface.class.getMethod(\"dummy\"), new Object[] {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3MDM5OA=="}, "originalCommit": {"oid": "2dda8afea786316479fdbef3c19c38a8f9aa2762"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTk3MjEzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/message/RemoteActionCode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjo0NjoyNlrOFw2o5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjo0NjoyNlrOFw2o5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3MTE3NQ==", "bodyText": "I'd perhaps rephrase this slightly.\n\nopcode does not have a well defined meaning, perhaps better to say something along the lines of: \"Annotation that defines a method number, methods are called by method number using the {@link RemoteMethodCall} mechanism}\". In order to stay compatible over the network, annotated methods should be altered (including: renaming, changes in signature, or changes in the method ordering number).\"", "url": "https://github.com/triplea-game/triplea/pull/5992#discussion_r386771175", "createdAt": "2020-03-03T02:46:26Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/message/RemoteActionCode.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package games.strategy.engine.message;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation that sets the \"opcode\" for any particular method that may be used over the network", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dda8afea786316479fdbef3c19c38a8f9aa2762"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2491, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}