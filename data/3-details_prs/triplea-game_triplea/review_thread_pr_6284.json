{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NDU5ODgz", "number": 6284, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwODowNjo1M1rODzMiVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0OFrOD0FQ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDA5MzY1OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnBigWorldV3.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwODowNjo1M1rOGHpCkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwODowNjo1M1rOGHpCkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NTYxNw==", "bodyText": "Worth noting, was surprising to see OOL taken in this order. Am I doing the math wrong perhaps to expect tank to be last in this case?", "url": "https://github.com/triplea-game/triplea/pull/6284#discussion_r410665617", "createdAt": "2020-04-18T08:06:53Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnBigWorldV3.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package games.strategy.triplea.delegate.battle.casualty;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static games.strategy.triplea.delegate.GameDataTestUtil.territory;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.hamcrest.core.Is.is;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.engine.data.changefactory.ChangeFactory;\n+import games.strategy.triplea.TripleAUnit;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.delegate.ImprovedArtillerySupportAdvance;\n+import games.strategy.triplea.delegate.TechAdvance;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import lombok.experimental.UtilityClass;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.triplea.java.collections.IntegerMap;\n+\n+@SuppressWarnings(\"SameParameterValue\")\n+class CasualtyOrderOfLossesTestOnBigWorldV3 {\n+  private static final GameData data = TestMapGameData.BIG_WORLD_1942_V3.getGameData();\n+  private static final GamePlayer BRITISH =\n+      checkNotNull(data.getPlayerList().getPlayerId(\"British\"));\n+  private static final Territory FRANCE = checkNotNull(territory(\"France\", data));\n+  private static final UnitType TANK = checkNotNull(data.getUnitTypeList().getUnitType(\"armour\"));\n+  private static final UnitType MARINE = checkNotNull(data.getUnitTypeList().getUnitType(\"marine\"));\n+  private static final UnitType ARTILLERY =\n+      checkNotNull(data.getUnitTypeList().getUnitType(\"artillery\"));\n+\n+  private static final IntegerMap<UnitType> COST_MAP =\n+      IntegerMap.of(\n+          Map.of(\n+              MARINE, 4,\n+              ARTILLERY, 4));\n+\n+  @UtilityClass\n+  static class DataFactory {\n+    Collection<Unit> britishTank(final int count) {\n+      return createUnit(TANK, count);\n+    }\n+\n+    Collection<Unit> britishMarine(final int count) {\n+      return createUnit(MARINE, count);\n+    }\n+\n+    Collection<Unit> britishArtillery(final int count) {\n+      return createUnit(ARTILLERY, count);\n+    }\n+\n+    private Collection<Unit> createUnit(final UnitType unitType, final int count) {\n+      return IntStream.range(0, count)\n+          .mapToObj(i -> new TripleAUnit(unitType, BRITISH, data))\n+          .collect(Collectors.toSet());\n+    }\n+  }\n+\n+  @BeforeEach\n+  void clearCache() {\n+    CasualtyOrderOfLosses.clearOolCache();\n+  }\n+\n+  @Test\n+  void improvedArtillery() {\n+    addTech(new ImprovedArtillerySupportAdvance(data));\n+    final Collection<Unit> attackingUnits = new ArrayList<>();\n+    attackingUnits.addAll(DataFactory.britishTank(1));\n+    attackingUnits.addAll(DataFactory.britishArtillery(1));\n+    attackingUnits.addAll(DataFactory.britishMarine(1));\n+    attackingUnits.addAll(DataFactory.britishMarine(1));\n+\n+    final List<Unit> result =\n+        CasualtyOrderOfLosses.sortUnitsForCasualtiesWithSupport(amphibAssault(attackingUnits));\n+\n+    assertThat(result, hasSize(4));\n+    assertThat(result.get(0).getType(), is(TANK));\n+    assertThat(result.get(1).getType(), is(MARINE));\n+    assertThat(result.get(2).getType(), is(MARINE));\n+    assertThat(\n+        result.get(3).getType(),\n+        is(ARTILLERY)); // << bug we should pick the artillery second or third\n+  }\n+\n+  private void addTech(final TechAdvance techAdvance) {\n+    final var change =\n+        ChangeFactory.attachmentPropertyChange(\n+            TechAttachment.get(BRITISH), true, techAdvance.getProperty());\n+    data.performChange(change);\n+  }\n+\n+  private CasualtyOrderOfLosses.Parameters amphibAssault(final Collection<Unit> amphibUnits) {\n+    return CasualtyOrderOfLosses.Parameters.builder()\n+        .targetsToPickFrom(amphibUnits)\n+        .defending(false)\n+        .player(BRITISH)\n+        .enemyUnits(List.of()) // << TODO: remove this parameter should not matter\n+        .amphibious(true)\n+        .amphibiousLandAttackers(amphibUnits)\n+        .battlesite(FRANCE)\n+        .costs(COST_MAP)\n+        .territoryEffects(List.of())\n+        .data(data)\n+        .build();\n+  }\n+\n+  @Test\n+  void amphibAssaultWithoutImprovedArtillery() {\n+    final Collection<Unit> attackingUnits = new ArrayList<>();\n+    attackingUnits.addAll(DataFactory.britishTank(1));\n+    attackingUnits.addAll(DataFactory.britishArtillery(1));\n+    attackingUnits.addAll(DataFactory.britishMarine(1));\n+    attackingUnits.addAll(DataFactory.britishMarine(1));\n+\n+    final List<Unit> result =\n+        CasualtyOrderOfLosses.sortUnitsForCasualtiesWithSupport(amphibAssault(attackingUnits));\n+\n+    assertThat(result, hasSize(4));\n+    assertThat(result.get(0).getType(), is(TANK)); // << bug, should be marine or artillery first\n+    assertThat(result.get(1).getType(), is(MARINE)); // << bug should be artillery\n+    assertThat(result.get(2).getType(), is(MARINE));\n+    assertThat(result.get(3).getType(), is(ARTILLERY)); // << bug, should be tank", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bee92373c1355f6d6146138d9dd5d01a0b7c931"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTM4Nzc4OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnBigWorldV3.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0N1rOGI2AzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0N1rOGI2AzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjczMw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6284#discussion_r411926733", "createdAt": "2020-04-21T07:07:47Z", "author": {"login": "codeclimate"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnBigWorldV3.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package games.strategy.triplea.delegate.battle.casualty;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static games.strategy.triplea.delegate.GameDataTestUtil.territory;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.hamcrest.core.Is.is;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.engine.data.changefactory.ChangeFactory;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.delegate.ImprovedArtillerySupportAdvance;\n+import games.strategy.triplea.delegate.TechAdvance;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import lombok.experimental.UtilityClass;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.triplea.java.collections.IntegerMap;\n+\n+@SuppressWarnings(\"SameParameterValue\")\n+class CasualtyOrderOfLossesTestOnBigWorldV3 {\n+  private static final GameData data = TestMapGameData.BIG_WORLD_1942_V3.getGameData();\n+  private static final GamePlayer BRITISH =\n+      checkNotNull(data.getPlayerList().getPlayerId(\"British\"));\n+  private static final Territory FRANCE = checkNotNull(territory(\"France\", data));\n+  private static final UnitType TANK = checkNotNull(data.getUnitTypeList().getUnitType(\"armour\"));\n+  private static final UnitType MARINE = checkNotNull(data.getUnitTypeList().getUnitType(\"marine\"));\n+  private static final UnitType ARTILLERY =\n+      checkNotNull(data.getUnitTypeList().getUnitType(\"artillery\"));\n+\n+  private static final IntegerMap<UnitType> COST_MAP =\n+      IntegerMap.of(\n+          Map.of(\n+              MARINE, 4,\n+              ARTILLERY, 4));\n+\n+  @UtilityClass\n+  static class DataFactory {\n+    Collection<Unit> britishTank(final int count) {\n+      return createUnit(TANK, count);\n+    }\n+\n+    Collection<Unit> britishMarine(final int count) {\n+      return createUnit(MARINE, count);\n+    }\n+\n+    Collection<Unit> britishArtillery(final int count) {\n+      return createUnit(ARTILLERY, count);\n+    }\n+\n+    private Collection<Unit> createUnit(final UnitType unitType, final int count) {\n+      return IntStream.range(0, count)\n+          .mapToObj(i -> new Unit(unitType, BRITISH, data))\n+          .collect(Collectors.toSet());\n+    }\n+  }\n+\n+  @BeforeEach\n+  void clearCache() {\n+    CasualtyOrderOfLosses.clearOolCache();\n+  }\n+\n+  @Test\n+  void improvedArtillery() {\n+    addTech(new ImprovedArtillerySupportAdvance(data));\n+    final Collection<Unit> attackingUnits = new ArrayList<>();\n+    attackingUnits.addAll(DataFactory.britishTank(1));\n+    attackingUnits.addAll(DataFactory.britishArtillery(1));\n+    attackingUnits.addAll(DataFactory.britishMarine(1));\n+    attackingUnits.addAll(DataFactory.britishMarine(1));\n+\n+    final List<Unit> result =\n+        CasualtyOrderOfLosses.sortUnitsForCasualtiesWithSupport(amphibAssault(attackingUnits));\n+\n+    assertThat(result, hasSize(4));\n+    assertThat(result.get(0).getType(), is(TANK));\n+    assertThat(result.get(1).getType(), is(MARINE));\n+    assertThat(result.get(2).getType(), is(MARINE));\n+    assertThat(\n+        result.get(3).getType(),\n+        is(ARTILLERY)); // << bug we should pick the artillery second or third\n+  }\n+\n+  private void addTech(final TechAdvance techAdvance) {\n+    final var change =\n+        ChangeFactory.attachmentPropertyChange(\n+            TechAttachment.get(BRITISH), true, techAdvance.getProperty());\n+    data.performChange(change);\n+  }\n+\n+  private CasualtyOrderOfLosses.Parameters amphibAssault(final Collection<Unit> amphibUnits) {\n+    return CasualtyOrderOfLosses.Parameters.builder()\n+        .targetsToPickFrom(amphibUnits)\n+        .defending(false)\n+        .player(BRITISH)\n+        .enemyUnits(List.of()) // << TODO: remove this parameter should not matter\n+        .amphibious(true)\n+        .amphibiousLandAttackers(amphibUnits)\n+        .battlesite(FRANCE)\n+        .costs(COST_MAP)\n+        .territoryEffects(List.of())\n+        .data(data)\n+        .build();\n+  }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a77f21fb491e54639ae285b197e18d39cea3f5"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTM4NzgyOnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnGlobal.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0N1rOGI2A0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0N1rOGI2A0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjczNw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6284#discussion_r411926737", "createdAt": "2020-04-21T07:07:47Z", "author": {"login": "codeclimate"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnGlobal.java", "diffHunk": "@@ -181,4 +231,95 @@ void interleaveArtilleryAndMarines() {\n     assertThat(result.get(4).getType(), is(ARTILLERY));\n     assertThat(result.get(5).getType(), is(ARTILLERY));\n   }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a77f21fb491e54639ae285b197e18d39cea3f5"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTM4Nzg1OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnGlobal.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0OFrOGI2A1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0OFrOGI2A1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjc0MA==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6284#discussion_r411926740", "createdAt": "2020-04-21T07:07:48Z", "author": {"login": "codeclimate"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnGlobal.java", "diffHunk": "@@ -181,4 +231,95 @@ void interleaveArtilleryAndMarines() {\n     assertThat(result.get(4).getType(), is(ARTILLERY));\n     assertThat(result.get(5).getType(), is(ARTILLERY));\n   }\n+\n+  @Test\n+  void navalOrderingOnAttack() {\n+    final Collection<Unit> attackingUnits = new ArrayList<>();\n+    attackingUnits.addAll(DataFactory.britishSubmarine(1));\n+    attackingUnits.addAll(DataFactory.britishDestroyer(1));\n+    attackingUnits.addAll(DataFactory.britishCarrier(1));\n+\n+    final List<Unit> result =\n+        CasualtyOrderOfLosses.sortUnitsForCasualtiesWithSupport(attackingWith(attackingUnits));\n+\n+    assertThat(result, hasSize(3));\n+    assertThat(result.get(0).getType(), is(CARRIER));\n+    assertThat(result.get(1).getType(), is(SUBMARINE));\n+    assertThat(result.get(2).getType(), is(DESTROYER));\n+  }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a77f21fb491e54639ae285b197e18d39cea3f5"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTM4Nzg3OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnGlobal.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0OFrOGI2A2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0OFrOGI2A2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjc0NA==", "bodyText": "Similar blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6284#discussion_r411926744", "createdAt": "2020-04-21T07:07:48Z", "author": {"login": "codeclimate"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnGlobal.java", "diffHunk": "@@ -181,4 +231,95 @@ void interleaveArtilleryAndMarines() {\n     assertThat(result.get(4).getType(), is(ARTILLERY));\n     assertThat(result.get(5).getType(), is(ARTILLERY));\n   }\n+\n+  @Test\n+  void navalOrderingOnAttack() {\n+    final Collection<Unit> attackingUnits = new ArrayList<>();\n+    attackingUnits.addAll(DataFactory.britishSubmarine(1));\n+    attackingUnits.addAll(DataFactory.britishDestroyer(1));\n+    attackingUnits.addAll(DataFactory.britishCarrier(1));\n+\n+    final List<Unit> result =\n+        CasualtyOrderOfLosses.sortUnitsForCasualtiesWithSupport(attackingWith(attackingUnits));\n+\n+    assertThat(result, hasSize(3));\n+    assertThat(result.get(0).getType(), is(CARRIER));\n+    assertThat(result.get(1).getType(), is(SUBMARINE));\n+    assertThat(result.get(2).getType(), is(DESTROYER));\n+  }\n+\n+  @Test\n+  void navalOrderingOnDefense() {\n+    final Collection<Unit> attackingUnits = new ArrayList<>();\n+    attackingUnits.addAll(DataFactory.britishSubmarine(1));\n+    attackingUnits.addAll(DataFactory.britishDestroyer(1));\n+    attackingUnits.addAll(DataFactory.britishCarrier(1));\n+\n+    final List<Unit> result =\n+        CasualtyOrderOfLosses.sortUnitsForCasualtiesWithSupport(defendingWith(attackingUnits));\n+\n+    assertThat(result, hasSize(3));\n+    assertThat(result.get(0).getType(), is(SUBMARINE));\n+    assertThat(result.get(1).getType(), is(DESTROYER));\n+    assertThat(result.get(2).getType(), is(CARRIER));\n+  }\n+\n+  private CasualtyOrderOfLosses.Parameters defendingWith(final Collection<Unit> units) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a77f21fb491e54639ae285b197e18d39cea3f5"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTM4Nzg4OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnBigWorldV3.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0OFrOGI2A2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0OFrOGI2A2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjc0NQ==", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6284#discussion_r411926745", "createdAt": "2020-04-21T07:07:48Z", "author": {"login": "codeclimate"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnBigWorldV3.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package games.strategy.triplea.delegate.battle.casualty;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static games.strategy.triplea.delegate.GameDataTestUtil.territory;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.hamcrest.core.Is.is;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.engine.data.changefactory.ChangeFactory;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.delegate.ImprovedArtillerySupportAdvance;\n+import games.strategy.triplea.delegate.TechAdvance;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import lombok.experimental.UtilityClass;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.triplea.java.collections.IntegerMap;\n+\n+@SuppressWarnings(\"SameParameterValue\")\n+class CasualtyOrderOfLossesTestOnBigWorldV3 {\n+  private static final GameData data = TestMapGameData.BIG_WORLD_1942_V3.getGameData();\n+  private static final GamePlayer BRITISH =\n+      checkNotNull(data.getPlayerList().getPlayerId(\"British\"));\n+  private static final Territory FRANCE = checkNotNull(territory(\"France\", data));\n+  private static final UnitType TANK = checkNotNull(data.getUnitTypeList().getUnitType(\"armour\"));\n+  private static final UnitType MARINE = checkNotNull(data.getUnitTypeList().getUnitType(\"marine\"));\n+  private static final UnitType ARTILLERY =\n+      checkNotNull(data.getUnitTypeList().getUnitType(\"artillery\"));\n+\n+  private static final IntegerMap<UnitType> COST_MAP =\n+      IntegerMap.of(\n+          Map.of(\n+              MARINE, 4,\n+              ARTILLERY, 4));\n+\n+  @UtilityClass\n+  static class DataFactory {\n+    Collection<Unit> britishTank(final int count) {\n+      return createUnit(TANK, count);\n+    }\n+\n+    Collection<Unit> britishMarine(final int count) {\n+      return createUnit(MARINE, count);\n+    }\n+\n+    Collection<Unit> britishArtillery(final int count) {\n+      return createUnit(ARTILLERY, count);\n+    }\n+\n+    private Collection<Unit> createUnit(final UnitType unitType, final int count) {\n+      return IntStream.range(0, count)\n+          .mapToObj(i -> new Unit(unitType, BRITISH, data))\n+          .collect(Collectors.toSet());\n+    }\n+  }\n+\n+  @BeforeEach\n+  void clearCache() {\n+    CasualtyOrderOfLosses.clearOolCache();\n+  }\n+\n+  @Test\n+  void improvedArtillery() {\n+    addTech(new ImprovedArtillerySupportAdvance(data));\n+    final Collection<Unit> attackingUnits = new ArrayList<>();\n+    attackingUnits.addAll(DataFactory.britishTank(1));\n+    attackingUnits.addAll(DataFactory.britishArtillery(1));\n+    attackingUnits.addAll(DataFactory.britishMarine(1));\n+    attackingUnits.addAll(DataFactory.britishMarine(1));\n+\n+    final List<Unit> result =\n+        CasualtyOrderOfLosses.sortUnitsForCasualtiesWithSupport(amphibAssault(attackingUnits));\n+\n+    assertThat(result, hasSize(4));\n+    assertThat(result.get(0).getType(), is(TANK));\n+    assertThat(result.get(1).getType(), is(MARINE));\n+    assertThat(result.get(2).getType(), is(MARINE));\n+    assertThat(\n+        result.get(3).getType(),\n+        is(ARTILLERY)); // << bug we should pick the artillery second or third\n+  }\n+\n+  private void addTech(final TechAdvance techAdvance) {\n+    final var change =\n+        ChangeFactory.attachmentPropertyChange(\n+            TechAttachment.get(BRITISH), true, techAdvance.getProperty());\n+    data.performChange(change);\n+  }\n+\n+  private CasualtyOrderOfLosses.Parameters amphibAssault(final Collection<Unit> amphibUnits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a77f21fb491e54639ae285b197e18d39cea3f5"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTM4Nzg5OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnBigWorldV3.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0OFrOGI2A2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNzo0OFrOGI2A2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjc0Ng==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6284#discussion_r411926746", "createdAt": "2020-04-21T07:07:48Z", "author": {"login": "codeclimate"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtyOrderOfLossesTestOnBigWorldV3.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package games.strategy.triplea.delegate.battle.casualty;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static games.strategy.triplea.delegate.GameDataTestUtil.territory;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.hamcrest.core.Is.is;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.engine.data.changefactory.ChangeFactory;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.delegate.ImprovedArtillerySupportAdvance;\n+import games.strategy.triplea.delegate.TechAdvance;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import lombok.experimental.UtilityClass;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.triplea.java.collections.IntegerMap;\n+\n+@SuppressWarnings(\"SameParameterValue\")\n+class CasualtyOrderOfLossesTestOnBigWorldV3 {\n+  private static final GameData data = TestMapGameData.BIG_WORLD_1942_V3.getGameData();\n+  private static final GamePlayer BRITISH =\n+      checkNotNull(data.getPlayerList().getPlayerId(\"British\"));\n+  private static final Territory FRANCE = checkNotNull(territory(\"France\", data));\n+  private static final UnitType TANK = checkNotNull(data.getUnitTypeList().getUnitType(\"armour\"));\n+  private static final UnitType MARINE = checkNotNull(data.getUnitTypeList().getUnitType(\"marine\"));\n+  private static final UnitType ARTILLERY =\n+      checkNotNull(data.getUnitTypeList().getUnitType(\"artillery\"));\n+\n+  private static final IntegerMap<UnitType> COST_MAP =\n+      IntegerMap.of(\n+          Map.of(\n+              MARINE, 4,\n+              ARTILLERY, 4));\n+\n+  @UtilityClass\n+  static class DataFactory {\n+    Collection<Unit> britishTank(final int count) {\n+      return createUnit(TANK, count);\n+    }\n+\n+    Collection<Unit> britishMarine(final int count) {\n+      return createUnit(MARINE, count);\n+    }\n+\n+    Collection<Unit> britishArtillery(final int count) {\n+      return createUnit(ARTILLERY, count);\n+    }\n+\n+    private Collection<Unit> createUnit(final UnitType unitType, final int count) {\n+      return IntStream.range(0, count)\n+          .mapToObj(i -> new Unit(unitType, BRITISH, data))\n+          .collect(Collectors.toSet());\n+    }\n+  }\n+\n+  @BeforeEach\n+  void clearCache() {\n+    CasualtyOrderOfLosses.clearOolCache();\n+  }\n+\n+  @Test\n+  void improvedArtillery() {\n+    addTech(new ImprovedArtillerySupportAdvance(data));\n+    final Collection<Unit> attackingUnits = new ArrayList<>();\n+    attackingUnits.addAll(DataFactory.britishTank(1));\n+    attackingUnits.addAll(DataFactory.britishArtillery(1));\n+    attackingUnits.addAll(DataFactory.britishMarine(1));\n+    attackingUnits.addAll(DataFactory.britishMarine(1));\n+\n+    final List<Unit> result =\n+        CasualtyOrderOfLosses.sortUnitsForCasualtiesWithSupport(amphibAssault(attackingUnits));\n+\n+    assertThat(result, hasSize(4));\n+    assertThat(result.get(0).getType(), is(TANK));\n+    assertThat(result.get(1).getType(), is(MARINE));\n+    assertThat(result.get(2).getType(), is(MARINE));\n+    assertThat(\n+        result.get(3).getType(),\n+        is(ARTILLERY)); // << bug we should pick the artillery second or third\n+  }\n+\n+  private void addTech(final TechAdvance techAdvance) {\n+    final var change =\n+        ChangeFactory.attachmentPropertyChange(\n+            TechAttachment.get(BRITISH), true, techAdvance.getProperty());\n+    data.performChange(change);\n+  }\n+\n+  private CasualtyOrderOfLosses.Parameters amphibAssault(final Collection<Unit> amphibUnits) {\n+    return CasualtyOrderOfLosses.Parameters.builder()\n+        .targetsToPickFrom(amphibUnits)\n+        .defending(false)\n+        .player(BRITISH)\n+        .enemyUnits(List.of()) // << TODO: remove this parameter should not matter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a77f21fb491e54639ae285b197e18d39cea3f5"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2271, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}