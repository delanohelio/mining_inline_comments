{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTQ4MTQ3", "number": 5954, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzowOVrODg7lag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjozNzo1NlrODhmLtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODU3MjU4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzowOVrOFraQag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzowOVrOFraQag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2MzI3NA==", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r381063274", "createdAt": "2020-02-19T03:47:09Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {\n+  private static final long serialVersionUID = 9006941131918034674L;\n+  private final GameSelectorModel gameSelectorModel;\n+  private final DiceServerEditor diceServerEditor;\n+  private final EmailSenderEditor emailSenderEditor;\n+  private final List<PlayerSelectorRow> playerTypes = new ArrayList<>();\n+  private final JPanel localPlayerPanel = new JPanel();\n+  private final JButton localPlayerSelection = new JButton(\"Select Local Players and AI's\");\n+\n+  /**\n+   * Creates a new instance.\n+   *\n+   * @param model the GameSelectionModel, through which changes are obtained when new games are\n+   *     chosen, or save games loaded\n+   */\n+  public PbemSetupPanel(final GameSelectorModel model) {\n+    gameSelectorModel = model;\n+    diceServerEditor = new DiceServerEditor(this::fireListener);\n+    emailSenderEditor = new EmailSenderEditor(this::fireListener);\n+    createComponents();\n+    layoutComponents();\n+    setupListeners();\n+    loadAll();\n+  }\n+\n+  private void createComponents() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODU3MjU5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzowOVrOFraQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzowOVrOFraQaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2MzI3NQ==", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r381063275", "createdAt": "2020-02-19T03:47:09Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {\n+  private static final long serialVersionUID = 9006941131918034674L;\n+  private final GameSelectorModel gameSelectorModel;\n+  private final DiceServerEditor diceServerEditor;\n+  private final EmailSenderEditor emailSenderEditor;\n+  private final List<PlayerSelectorRow> playerTypes = new ArrayList<>();\n+  private final JPanel localPlayerPanel = new JPanel();\n+  private final JButton localPlayerSelection = new JButton(\"Select Local Players and AI's\");\n+\n+  /**\n+   * Creates a new instance.\n+   *\n+   * @param model the GameSelectionModel, through which changes are obtained when new games are\n+   *     chosen, or save games loaded\n+   */\n+  public PbemSetupPanel(final GameSelectorModel model) {\n+    gameSelectorModel = model;\n+    diceServerEditor = new DiceServerEditor(this::fireListener);\n+    emailSenderEditor = new EmailSenderEditor(this::fireListener);\n+    createComponents();\n+    layoutComponents();\n+    setupListeners();\n+    loadAll();\n+  }\n+\n+  private void createComponents() {\n+    final JScrollPane scrollPane = new JScrollPane(localPlayerPanel);\n+    localPlayerPanel.addHierarchyListener(\n+        e -> {\n+          final Window window = SwingUtilities.getWindowAncestor(localPlayerPanel);\n+          if (window instanceof Dialog) {\n+            final Dialog dialog = (Dialog) window;\n+            if (!dialog.isResizable()) {\n+              dialog.setResizable(true);\n+              dialog.setMinimumSize(new Dimension(700, 700));\n+            }\n+          }\n+        });\n+    localPlayerSelection.addActionListener(\n+        e ->\n+            JOptionPane.showMessageDialog(\n+                PbemSetupPanel.this,\n+                scrollPane,\n+                \"Select Local Players and AI's\",\n+                JOptionPane.PLAIN_MESSAGE));\n+  }\n+\n+  private void layoutComponents() {\n+    removeAll();\n+    setLayout(new GridBagLayout());\n+    // Empty border works as margin\n+    setBorder(new EmptyBorder(10, 10, 10, 10));\n+    int row = 0;\n+    add(\n+        diceServerEditor,\n+        new GridBagConstraintsBuilder(0, row++)\n+            .gridWidth(1)\n+            .gridHeight(1)\n+            .weightX(1.0)\n+            .weightY(0.0)\n+            .anchor(GridBagConstraintsAnchor.NORTHWEST)\n+            .fill(GridBagConstraintsFill.HORIZONTAL)\n+            .insets(10, 0, 20, 0)\n+            .build());\n+\n+    final JTabbedPane tabbedPane = new JTabbedPane();\n+    add(\n+        tabbedPane,\n+        new GridBagConstraintsBuilder(0, row++)\n+            .gridWidth(1)\n+            .gridHeight(1)\n+            .weightX(1.0)\n+            .weightY(0.0)\n+            .anchor(GridBagConstraintsAnchor.NORTHWEST)\n+            .fill(GridBagConstraintsFill.HORIZONTAL)\n+            .insets(10, 0, 20, 0)\n+            .build());\n+    tabbedPane.addTab(\"Play By Email\", emailSenderEditor);\n+\n+    // add selection of local players\n+    add(\n+        localPlayerSelection,\n+        new GridBagConstraintsBuilder(0, row)\n+            .gridWidth(1)\n+            .gridHeight(1)\n+            .weightX(1.0)\n+            .weightY(0.0)\n+            .anchor(GridBagConstraintsAnchor.NORTHEAST)\n+            .fill(GridBagConstraintsFill.NONE)\n+            .insets(10, 0, 10, 0)\n+            .build());\n+    layoutPlayerComponents(localPlayerPanel, playerTypes, gameSelectorModel.getGameData());\n+  }\n+\n+  @Override\n+  public List<Action> getUserActions() {\n+    return List.of();\n+  }\n+\n+  @Override\n+  public boolean isCancelButtonVisible() {\n+    return true;\n+  }\n+\n+  private void setupListeners() {\n+    // register, so we get notified when the game model (GameData) changes\n+    // (e.g if the user load a save game or selects another game)\n+    gameSelectorModel.addObserver(this);\n+  }\n+\n+  private void loadAll() {\n+    Optional.ofNullable(gameSelectorModel.getGameData())\n+        .map(GameData::getProperties)\n+        .ifPresent(\n+            properties -> {\n+              diceServerEditor.populateFromGameProperties(properties);\n+              emailSenderEditor.populateFromGameProperties(properties);\n+            });\n+  }\n+\n+  /** Called when the current game changes. */\n+  @Override\n+  public void cancel() {\n+    gameSelectorModel.deleteObserver(this);\n+  }\n+\n+  /** Called when the observers detect change, to see if the game is in a startable state. */\n+  @Override\n+  public boolean canGameStart() {\n+    final boolean diceServerValid = diceServerEditor.areFieldsValid();\n+    final boolean emailValid = emailSenderEditor.areFieldsValid();\n+    final boolean ready = diceServerValid && emailValid && gameSelectorModel.getGameData() != null;\n+    // make sure at least 1 player is enabled\n+    return ready && playerTypes.stream().anyMatch(PlayerSelectorRow::isPlayerEnabled);\n+  }\n+\n+  @Override\n+  public void postStartGame() {\n+    final GameData data = gameSelectorModel.getGameData();\n+\n+    Preconditions.checkNotNull(\n+        data,\n+        \"Game Data must not be null when starting a game, \"\n+            + \"this error indicates a programming bug that allowed for the start game button to be \"\n+            + \"enabled without first valid game data being loaded. \");\n+    if (diceServerEditor.areFieldsValid()) {\n+      diceServerEditor.applyToGameProperties(data.getProperties());\n+    }\n+    if (emailSenderEditor.areFieldsValid()) {\n+      emailSenderEditor.applyToGameProperties(data.getProperties());\n+    }\n+  }\n+\n+  /**\n+   * Is called in response to the GameSelectionModel being updated. It means the we have to reload\n+   * the form\n+   *\n+   * @param o always null\n+   * @param arg always null\n+   */\n+  @Override\n+  public void update(final Observable o, final Object arg) {\n+    SwingAction.invokeNowOrLater(\n+        () -> {\n+          loadAll();\n+          layoutComponents();\n+        });\n+  }\n+\n+  /** Called when the user hits play. */\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODU3MjYwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzowOVrOFraQbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzowOVrOFraQbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2MzI3Nw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r381063277", "createdAt": "2020-02-19T03:47:09Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {\n+  private static final long serialVersionUID = 9006941131918034674L;\n+  private final GameSelectorModel gameSelectorModel;\n+  private final DiceServerEditor diceServerEditor;\n+  private final EmailSenderEditor emailSenderEditor;\n+  private final List<PlayerSelectorRow> playerTypes = new ArrayList<>();\n+  private final JPanel localPlayerPanel = new JPanel();\n+  private final JButton localPlayerSelection = new JButton(\"Select Local Players and AI's\");\n+\n+  /**\n+   * Creates a new instance.\n+   *\n+   * @param model the GameSelectionModel, through which changes are obtained when new games are\n+   *     chosen, or save games loaded\n+   */\n+  public PbemSetupPanel(final GameSelectorModel model) {\n+    gameSelectorModel = model;\n+    diceServerEditor = new DiceServerEditor(this::fireListener);\n+    emailSenderEditor = new EmailSenderEditor(this::fireListener);\n+    createComponents();\n+    layoutComponents();\n+    setupListeners();\n+    loadAll();\n+  }\n+\n+  private void createComponents() {\n+    final JScrollPane scrollPane = new JScrollPane(localPlayerPanel);\n+    localPlayerPanel.addHierarchyListener(\n+        e -> {\n+          final Window window = SwingUtilities.getWindowAncestor(localPlayerPanel);\n+          if (window instanceof Dialog) {\n+            final Dialog dialog = (Dialog) window;\n+            if (!dialog.isResizable()) {\n+              dialog.setResizable(true);\n+              dialog.setMinimumSize(new Dimension(700, 700));\n+            }\n+          }\n+        });\n+    localPlayerSelection.addActionListener(\n+        e ->\n+            JOptionPane.showMessageDialog(\n+                PbemSetupPanel.this,\n+                scrollPane,\n+                \"Select Local Players and AI's\",\n+                JOptionPane.PLAIN_MESSAGE));\n+  }\n+\n+  private void layoutComponents() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODU3MjYxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzowOVrOFraQbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzowOVrOFraQbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2MzI3OA==", "bodyText": "Method layoutComponents has 40 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r381063278", "createdAt": "2020-02-19T03:47:09Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {\n+  private static final long serialVersionUID = 9006941131918034674L;\n+  private final GameSelectorModel gameSelectorModel;\n+  private final DiceServerEditor diceServerEditor;\n+  private final EmailSenderEditor emailSenderEditor;\n+  private final List<PlayerSelectorRow> playerTypes = new ArrayList<>();\n+  private final JPanel localPlayerPanel = new JPanel();\n+  private final JButton localPlayerSelection = new JButton(\"Select Local Players and AI's\");\n+\n+  /**\n+   * Creates a new instance.\n+   *\n+   * @param model the GameSelectionModel, through which changes are obtained when new games are\n+   *     chosen, or save games loaded\n+   */\n+  public PbemSetupPanel(final GameSelectorModel model) {\n+    gameSelectorModel = model;\n+    diceServerEditor = new DiceServerEditor(this::fireListener);\n+    emailSenderEditor = new EmailSenderEditor(this::fireListener);\n+    createComponents();\n+    layoutComponents();\n+    setupListeners();\n+    loadAll();\n+  }\n+\n+  private void createComponents() {\n+    final JScrollPane scrollPane = new JScrollPane(localPlayerPanel);\n+    localPlayerPanel.addHierarchyListener(\n+        e -> {\n+          final Window window = SwingUtilities.getWindowAncestor(localPlayerPanel);\n+          if (window instanceof Dialog) {\n+            final Dialog dialog = (Dialog) window;\n+            if (!dialog.isResizable()) {\n+              dialog.setResizable(true);\n+              dialog.setMinimumSize(new Dimension(700, 700));\n+            }\n+          }\n+        });\n+    localPlayerSelection.addActionListener(\n+        e ->\n+            JOptionPane.showMessageDialog(\n+                PbemSetupPanel.this,\n+                scrollPane,\n+                \"Select Local Players and AI's\",\n+                JOptionPane.PLAIN_MESSAGE));\n+  }\n+\n+  private void layoutComponents() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODU3MjYyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzoxMFrOFraQbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzoxMFrOFraQbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2MzI3OQ==", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r381063279", "createdAt": "2020-02-19T03:47:10Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {\n+  private static final long serialVersionUID = 9006941131918034674L;\n+  private final GameSelectorModel gameSelectorModel;\n+  private final DiceServerEditor diceServerEditor;\n+  private final EmailSenderEditor emailSenderEditor;\n+  private final List<PlayerSelectorRow> playerTypes = new ArrayList<>();\n+  private final JPanel localPlayerPanel = new JPanel();\n+  private final JButton localPlayerSelection = new JButton(\"Select Local Players and AI's\");\n+\n+  /**\n+   * Creates a new instance.\n+   *\n+   * @param model the GameSelectionModel, through which changes are obtained when new games are\n+   *     chosen, or save games loaded\n+   */\n+  public PbemSetupPanel(final GameSelectorModel model) {\n+    gameSelectorModel = model;\n+    diceServerEditor = new DiceServerEditor(this::fireListener);\n+    emailSenderEditor = new EmailSenderEditor(this::fireListener);\n+    createComponents();\n+    layoutComponents();\n+    setupListeners();\n+    loadAll();\n+  }\n+\n+  private void createComponents() {\n+    final JScrollPane scrollPane = new JScrollPane(localPlayerPanel);\n+    localPlayerPanel.addHierarchyListener(\n+        e -> {\n+          final Window window = SwingUtilities.getWindowAncestor(localPlayerPanel);\n+          if (window instanceof Dialog) {\n+            final Dialog dialog = (Dialog) window;\n+            if (!dialog.isResizable()) {\n+              dialog.setResizable(true);\n+              dialog.setMinimumSize(new Dimension(700, 700));\n+            }\n+          }\n+        });\n+    localPlayerSelection.addActionListener(\n+        e ->\n+            JOptionPane.showMessageDialog(\n+                PbemSetupPanel.this,\n+                scrollPane,\n+                \"Select Local Players and AI's\",\n+                JOptionPane.PLAIN_MESSAGE));\n+  }\n+\n+  private void layoutComponents() {\n+    removeAll();\n+    setLayout(new GridBagLayout());\n+    // Empty border works as margin\n+    setBorder(new EmptyBorder(10, 10, 10, 10));\n+    int row = 0;\n+    add(\n+        diceServerEditor,\n+        new GridBagConstraintsBuilder(0, row++)\n+            .gridWidth(1)\n+            .gridHeight(1)\n+            .weightX(1.0)\n+            .weightY(0.0)\n+            .anchor(GridBagConstraintsAnchor.NORTHWEST)\n+            .fill(GridBagConstraintsFill.HORIZONTAL)\n+            .insets(10, 0, 20, 0)\n+            .build());\n+\n+    final JTabbedPane tabbedPane = new JTabbedPane();\n+    add(\n+        tabbedPane,\n+        new GridBagConstraintsBuilder(0, row++)\n+            .gridWidth(1)\n+            .gridHeight(1)\n+            .weightX(1.0)\n+            .weightY(0.0)\n+            .anchor(GridBagConstraintsAnchor.NORTHWEST)\n+            .fill(GridBagConstraintsFill.HORIZONTAL)\n+            .insets(10, 0, 20, 0)\n+            .build());\n+    tabbedPane.addTab(\"Play By Email\", emailSenderEditor);\n+\n+    // add selection of local players\n+    add(\n+        localPlayerSelection,\n+        new GridBagConstraintsBuilder(0, row)\n+            .gridWidth(1)\n+            .gridHeight(1)\n+            .weightX(1.0)\n+            .weightY(0.0)\n+            .anchor(GridBagConstraintsAnchor.NORTHEAST)\n+            .fill(GridBagConstraintsFill.NONE)\n+            .insets(10, 0, 10, 0)\n+            .build());\n+    layoutPlayerComponents(localPlayerPanel, playerTypes, gameSelectorModel.getGameData());\n+  }\n+\n+  @Override\n+  public List<Action> getUserActions() {\n+    return List.of();\n+  }\n+\n+  @Override\n+  public boolean isCancelButtonVisible() {\n+    return true;\n+  }\n+\n+  private void setupListeners() {\n+    // register, so we get notified when the game model (GameData) changes\n+    // (e.g if the user load a save game or selects another game)\n+    gameSelectorModel.addObserver(this);\n+  }\n+\n+  private void loadAll() {\n+    Optional.ofNullable(gameSelectorModel.getGameData())\n+        .map(GameData::getProperties)\n+        .ifPresent(\n+            properties -> {\n+              diceServerEditor.populateFromGameProperties(properties);\n+              emailSenderEditor.populateFromGameProperties(properties);\n+            });\n+  }\n+\n+  /** Called when the current game changes. */\n+  @Override\n+  public void cancel() {\n+    gameSelectorModel.deleteObserver(this);\n+  }\n+\n+  /** Called when the observers detect change, to see if the game is in a startable state. */\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODU3MjYzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzoxMFrOFraQcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0NzoxMFrOFraQcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2MzI4MQ==", "bodyText": "Identical blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r381063281", "createdAt": "2020-02-19T03:47:10Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {\n+  private static final long serialVersionUID = 9006941131918034674L;\n+  private final GameSelectorModel gameSelectorModel;\n+  private final DiceServerEditor diceServerEditor;\n+  private final EmailSenderEditor emailSenderEditor;\n+  private final List<PlayerSelectorRow> playerTypes = new ArrayList<>();\n+  private final JPanel localPlayerPanel = new JPanel();\n+  private final JButton localPlayerSelection = new JButton(\"Select Local Players and AI's\");\n+\n+  /**\n+   * Creates a new instance.\n+   *\n+   * @param model the GameSelectionModel, through which changes are obtained when new games are\n+   *     chosen, or save games loaded\n+   */\n+  public PbemSetupPanel(final GameSelectorModel model) {\n+    gameSelectorModel = model;\n+    diceServerEditor = new DiceServerEditor(this::fireListener);\n+    emailSenderEditor = new EmailSenderEditor(this::fireListener);\n+    createComponents();\n+    layoutComponents();\n+    setupListeners();\n+    loadAll();\n+  }\n+\n+  private void createComponents() {\n+    final JScrollPane scrollPane = new JScrollPane(localPlayerPanel);\n+    localPlayerPanel.addHierarchyListener(\n+        e -> {\n+          final Window window = SwingUtilities.getWindowAncestor(localPlayerPanel);\n+          if (window instanceof Dialog) {\n+            final Dialog dialog = (Dialog) window;\n+            if (!dialog.isResizable()) {\n+              dialog.setResizable(true);\n+              dialog.setMinimumSize(new Dimension(700, 700));\n+            }\n+          }\n+        });\n+    localPlayerSelection.addActionListener(\n+        e ->\n+            JOptionPane.showMessageDialog(\n+                PbemSetupPanel.this,\n+                scrollPane,\n+                \"Select Local Players and AI's\",\n+                JOptionPane.PLAIN_MESSAGE));\n+  }\n+\n+  private void layoutComponents() {\n+    removeAll();\n+    setLayout(new GridBagLayout());\n+    // Empty border works as margin\n+    setBorder(new EmptyBorder(10, 10, 10, 10));\n+    int row = 0;\n+    add(\n+        diceServerEditor,\n+        new GridBagConstraintsBuilder(0, row++)\n+            .gridWidth(1)\n+            .gridHeight(1)\n+            .weightX(1.0)\n+            .weightY(0.0)\n+            .anchor(GridBagConstraintsAnchor.NORTHWEST)\n+            .fill(GridBagConstraintsFill.HORIZONTAL)\n+            .insets(10, 0, 20, 0)\n+            .build());\n+\n+    final JTabbedPane tabbedPane = new JTabbedPane();\n+    add(\n+        tabbedPane,\n+        new GridBagConstraintsBuilder(0, row++)\n+            .gridWidth(1)\n+            .gridHeight(1)\n+            .weightX(1.0)\n+            .weightY(0.0)\n+            .anchor(GridBagConstraintsAnchor.NORTHWEST)\n+            .fill(GridBagConstraintsFill.HORIZONTAL)\n+            .insets(10, 0, 20, 0)\n+            .build());\n+    tabbedPane.addTab(\"Play By Email\", emailSenderEditor);\n+\n+    // add selection of local players\n+    add(\n+        localPlayerSelection,\n+        new GridBagConstraintsBuilder(0, row)\n+            .gridWidth(1)\n+            .gridHeight(1)\n+            .weightX(1.0)\n+            .weightY(0.0)\n+            .anchor(GridBagConstraintsAnchor.NORTHEAST)\n+            .fill(GridBagConstraintsFill.NONE)\n+            .insets(10, 0, 10, 0)\n+            .build());\n+    layoutPlayerComponents(localPlayerPanel, playerTypes, gameSelectorModel.getGameData());\n+  }\n+\n+  @Override\n+  public List<Action> getUserActions() {\n+    return List.of();\n+  }\n+\n+  @Override\n+  public boolean isCancelButtonVisible() {\n+    return true;\n+  }\n+\n+  private void setupListeners() {\n+    // register, so we get notified when the game model (GameData) changes\n+    // (e.g if the user load a save game or selects another game)\n+    gameSelectorModel.addObserver(this);\n+  }\n+\n+  private void loadAll() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTU0OTI2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjozNzoxM1rOFsap0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNzoyNTozMFrOFstvig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExODM1NA==", "bodyText": "While I appreciate the split between those 2 classes, (I believe at some point it was even possible to play both PbEM and PbF at the same time \ud83e\udd37\u200d\u2642) I think simply copying over 80% of the code isn't really something I'd consider clean code.\nDid you consider creating an abstract PlayByX class that implements the common functionality and leaves the details for each subclass to decide, simply so we don't end up with that much duplicate code.", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r382118354", "createdAt": "2020-02-20T16:37:13Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzMTExNA==", "bodyText": "To respond directly to this now that I have a few more moments, the additional comments section addressed this concern directly:\n\nPbemSetupPanel is gratuitously duplicated. This duplication should not cause too many issues as we will be looking to replace such classes, and/or we'll have better opportunity to simplify a purpose specific panel rather than one that needs to be abstract. The goal of this update is more to accomplish the screen and button split before further updates take place (placing more value here on accomplishing the UX change before we do more under-the-hood work and enabling a better path for simplifications).\n\n\nDid you consider creating an abstract PlayByX class that implements the common functionality and leaves the details for each subclass to decide, simply so we don't end up with that much duplicate code.\n\nYes, an abstract class based around what we have now could easily lead to more complexity, or alternatively we might invest in cleaning up UI code that has many issues when we are looking to replace/delete it entirely.\nI'd note, that DRY does not mean to do human pattern matching on code and eliminate all common patterns, but to condense ideas to be expressed in one place. For the perspective of a single screen, having similar if not duplicated UI code, given we have only two instances, and the only thing they share thus far is dice roller, the duplication is actually not that bad.\nSecond, the code smell is just a smell right now, I don't think this will actually cause any problems or missed updates where an update that shoudl be applied to both instances would actually only be used in one.\nThird point regarding the duplication, it could easily be better to inline the PBF and PBEM editor and then clean-up/refactor from there and leave only the dice editor as the common and extracted code.", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r382431114", "createdAt": "2020-02-21T07:25:30Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExODM1NA=="}, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTU1MTg5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjozNzo1NlrOFsardw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMzo1NDoyMlrOFtJWrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExODc3NQ==", "bodyText": "This serialVersionUID is a duplicate of the other class, it should be changed so that it is unique, even though we don't really make use of this property.", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r382118775", "createdAt": "2020-02-20T16:37:56Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {\n+  private static final long serialVersionUID = 9006941131918034674L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQyOTcwMw==", "bodyText": "Could be nice to make it unique, but not required: #5347 (comment)", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r382429703", "createdAt": "2020-02-21T07:20:41Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {\n+  private static final long serialVersionUID = 9006941131918034674L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExODc3NQ=="}, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxNTAxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final long serialVersionUID = 9006941131918034674L;\n          \n          \n            \n              private static final long serialVersionUID = -4027051961383144244L;", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r382615016", "createdAt": "2020-02-21T14:37:39Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {\n+  private static final long serialVersionUID = 9006941131918034674L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExODc3NQ=="}, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MzUwMA==", "bodyText": "I don't think anyone would know this value is duplicated anywhere, except us for now.. If feeling important for the serialversionuid to be different, then the 0L and 1L values should arguably be updated too. I don't think there is a favorable ROI for even really worrying about this too much.", "url": "https://github.com/triplea-game/triplea/pull/5954#discussion_r382883500", "createdAt": "2020-02-22T03:54:22Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/PbemSetupPanel.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.message.PlayerListing;\n+import games.strategy.engine.framework.startup.launcher.ILauncher;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.mc.GameSelectorModel;\n+import games.strategy.engine.framework.startup.mc.HeadedLaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerSelectorRow;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.framework.startup.ui.SetupPanel;\n+import games.strategy.engine.framework.startup.ui.posted.game.DiceServerEditor;\n+import games.strategy.engine.random.PbemDiceRoller;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Observable;\n+import java.util.Observer;\n+import java.util.Optional;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.border.EmptyBorder;\n+import org.triplea.swing.SwingAction;\n+import org.triplea.swing.jpanel.GridBagConstraintsAnchor;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.GridBagConstraintsFill;\n+\n+/**\n+ * A panel for setting up Play by Email/Forum. This panel listens to the GameSelectionModel so it\n+ * can refresh when a new game is selected or save game loaded The MainPanel also listens to this\n+ * panel, and we notify it through the notifyObservers()\n+ */\n+public class PbemSetupPanel extends SetupPanel implements Observer {\n+  private static final long serialVersionUID = 9006941131918034674L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExODc3NQ=="}, "originalCommit": {"oid": "b7a3af383455dc2ae859aca9dbe8853fa41d5f2d"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2475, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}