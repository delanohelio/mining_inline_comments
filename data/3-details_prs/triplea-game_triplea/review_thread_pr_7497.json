{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1OTU4OTU5", "number": 7497, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDozNDowMVrOEeGjDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMjowMTozOVrOEgowJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDAwMDEzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/firststrike/DefensiveFirstStrike.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDozNDowMVrOHJlcOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDozNDowMVrOHJlcOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjY2Nw==", "bodyText": "Have you considered using Lombok @AllArgsConstructor to replace this constructor? The annotation should do the same thing.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479812667", "createdAt": "2020-08-30T20:34:01Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/firststrike/DefensiveFirstStrike.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.firststrike;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.FIRST_STRIKE_UNITS_FIRE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_FIRST_STRIKE_CASUALTIES;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class DefensiveFirstStrike implements BattleStep {\n+\n+  private static final long serialVersionUID = 3646211932844911163L;\n+\n+  protected final BattleState battleState;\n+\n+  protected final BattleActions battleActions;\n+\n+  protected final FirstStrikeStepOrder order;\n+\n+  protected final ReturnFire returnFire;\n+\n+  public DefensiveFirstStrike(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDAwMDg2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDozNTowNFrOHJlclA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMjoyMDo0NlrOHJmE5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjc1Ng==", "bodyText": "How is FIRST_STRIKE_DEFENSIVE different from FIRST_STRIKE_DEFENSIVE_NO_SNEAK_ATTACK? Perhaps a comment on the enum value would be useful here to describe the intent behind the distinction.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479812756", "createdAt": "2020-08-30T20:35:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -28,7 +28,11 @@\n     SUB_OFFENSIVE_RETREAT_BEFORE_BATTLE,\n     SUB_DEFENSIVE_RETREAT_BEFORE_BATTLE,\n     SUBMERGE_SUBS_VS_ONLY_AIR,\n+    FIRST_STRIKE_DEFENSIVE_SNEAK_ATTACK,\n+    FIRST_STRIKE_OFFENSIVE,\n+    FIRST_STRIKE_DEFENSIVE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyMTA2NQ==", "bodyText": "I should probably rename the enums.  A defensive sub can fire before the offensive subs fire (FIRST_STRIKE_DEFENSIVE_SNEAK_ATTACK), with the offensive subs (FIRST_STRIKE_DEFENSIVE), or with the other regular units (FIRST_STRIKE_DEFENSIVE_NO_SNEAK_ATTACK).  Any ideas on a name that is easier to understand?  I had thought \"FIRST_STRIKE_DEFENSIVE_NO_FIRST_STRIKE\" but that felt confusing as well.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479821065", "createdAt": "2020-08-30T21:59:39Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -28,7 +28,11 @@\n     SUB_OFFENSIVE_RETREAT_BEFORE_BATTLE,\n     SUB_DEFENSIVE_RETREAT_BEFORE_BATTLE,\n     SUBMERGE_SUBS_VS_ONLY_AIR,\n+    FIRST_STRIKE_DEFENSIVE_SNEAK_ATTACK,\n+    FIRST_STRIKE_OFFENSIVE,\n+    FIRST_STRIKE_DEFENSIVE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjc1Ng=="}, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyMTQ0Nw==", "bodyText": "First, are these enum values persisted as part of gameData, are we free to rename the existing ones?\nIf not, creating a shim to allow for flexibility perhaps would be good to do sooner before we lock ourselves in.\nPerhaps differentiating sneak attack and first strike and make them more mutually exclusive. In this case the order is:\n\nsneak attack\nfirst strike\nattack", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479821447", "createdAt": "2020-08-30T22:03:48Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -28,7 +28,11 @@\n     SUB_OFFENSIVE_RETREAT_BEFORE_BATTLE,\n     SUB_DEFENSIVE_RETREAT_BEFORE_BATTLE,\n     SUBMERGE_SUBS_VS_ONLY_AIR,\n+    FIRST_STRIKE_DEFENSIVE_SNEAK_ATTACK,\n+    FIRST_STRIKE_OFFENSIVE,\n+    FIRST_STRIKE_DEFENSIVE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjc1Ng=="}, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyMzA3OQ==", "bodyText": "BattleStep enums shouldn't be persisted.  They are never used as an object field.\nI'm not exactly sure what you mean?  Do you mean to rename the enums as \"FIRST_STRIKE_DEFENSIVE_SNEAK_ATTACK\", \"FIRST_STRIKE_DEFENSIVE_FIRST_STRIKE\", and \"FIRST_STRIKE_DEFENSIVE_ATTACK\"?", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479823079", "createdAt": "2020-08-30T22:20:46Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -28,7 +28,11 @@\n     SUB_OFFENSIVE_RETREAT_BEFORE_BATTLE,\n     SUB_DEFENSIVE_RETREAT_BEFORE_BATTLE,\n     SUBMERGE_SUBS_VS_ONLY_AIR,\n+    FIRST_STRIKE_DEFENSIVE_SNEAK_ATTACK,\n+    FIRST_STRIKE_OFFENSIVE,\n+    FIRST_STRIKE_DEFENSIVE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjc1Ng=="}, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDAwMTgzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDozNTo1OFrOHJldDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMjowMjozMlrOHJl-MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjg3Nw==", "bodyText": "Seeing the same parameter twice is a bit difficult to grok. Have you considered using a builder for this constructor? In that case the parameters would be named and then more self-documenting.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479812877", "createdAt": "2020-08-30T20:35:58Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1534,15 +1544,20 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n           }\n         });\n     if (firstStrikeOrder.getDefender() == FirstStrikeStepOrder.DEFENDER_NO_SNEAK_ATTACK) {\n-      steps.add(\n-          new FirstStrikeDefendersFire() {\n-            private static final long serialVersionUID = 999921L;\n+      steps.add(defensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 999921L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(firstStrikeOrder.getDefender().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new DefensiveFirstStrike(\n+                  MustFightBattle.this,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjk1OQ==", "bodyText": "Alternatively, have you considered perhaps having a second constructor that is simplified, or using static builder methods (factory pattern)?", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479812959", "createdAt": "2020-08-30T20:37:15Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1534,15 +1544,20 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n           }\n         });\n     if (firstStrikeOrder.getDefender() == FirstStrikeStepOrder.DEFENDER_NO_SNEAK_ATTACK) {\n-      steps.add(\n-          new FirstStrikeDefendersFire() {\n-            private static final long serialVersionUID = 999921L;\n+      steps.add(defensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 999921L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(firstStrikeOrder.getDefender().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new DefensiveFirstStrike(\n+                  MustFightBattle.this,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjg3Nw=="}, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyMTM2MA==", "bodyText": "The parameters are only used twice because currently the BattleAction and BattleState is tied to the same class.\nI plan to have a factory class that creates all of the steps, sorts them by order, and then returns the items.  I can't use that yet because the steps aren't all converted so they would be out of order.  The backwards compatible classes, though, will always be a little weird.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479821360", "createdAt": "2020-08-30T22:02:32Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1534,15 +1544,20 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n           }\n         });\n     if (firstStrikeOrder.getDefender() == FirstStrikeStepOrder.DEFENDER_NO_SNEAK_ATTACK) {\n-      steps.add(\n-          new FirstStrikeDefendersFire() {\n-            private static final long serialVersionUID = 999921L;\n+      steps.add(defensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 999921L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(firstStrikeOrder.getDefender().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new DefensiveFirstStrike(\n+                  MustFightBattle.this,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjg3Nw=="}, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDAwMjA4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDozNjozOVrOHJldMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMjoxMDozM1rOHJmBIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjkxMw==", "bodyText": "I'm not sure this comment makes sense, what is \"this point\" relative to? Secondly, the ordering of what exactly, the step order?", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479812913", "createdAt": "2020-08-30T20:36:39Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1479,40 +1472,57 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n     };\n \n     if (firstStrikeOrder.getDefender() == FirstStrikeStepOrder.DEFENDER_SNEAK_ATTACK) {\n-      steps.add(\n-          new FirstStrikeDefendersFire() {\n-            private static final long serialVersionUID = 99992L;\n+      steps.add(defensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 99992L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(firstStrikeOrder.getDefender().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new DefensiveFirstStrike(\n+                  MustFightBattle.this,\n+                  MustFightBattle.this,\n+                  FirstStrikeStepOrder.DEFENDER_SNEAK_ATTACK,\n+                  returnFireAgainstDefendingSubs)\n+              .execute(stack, bridge);\n+        }\n+      };\n     }\n     if (firstStrikeOrder.getAttacker() != FirstStrikeStepOrder.NOT_APPLICABLE) {\n-      steps.add(\n-          new FirstStrikeAttackersFire() {\n-            private static final long serialVersionUID = 99991L;\n+      steps.add(offensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 99991L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeAttackersFire(firstStrikeOrder.getAttacker().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new OffensiveFirstStrike(\n+                  MustFightBattle.this,\n+                  MustFightBattle.this,\n+                  // the order doesn't matter at this point\n+                  FirstStrikeStepOrder.OFFENDER_SNEAK_ATTACK,\n+                  returnFireAgainstAttackingSubs)\n+              .execute(stack, bridge);\n+        }\n+      };\n     }\n     if (firstStrikeOrder.getDefender()\n             == FirstStrikeStepOrder.DEFENDER_SNEAK_ATTACK_WITH_OPPOSING_FIRST_STRIKE\n         || firstStrikeOrder.getDefender()\n             == FirstStrikeStepOrder.DEFENDER_NO_SNEAK_ATTACK_BUT_BEFORE_STANDARD_ATTACK) {\n-      steps.add(\n-          new FirstStrikeDefendersFire() {\n-            private static final long serialVersionUID = 99992L;\n+      steps.add(defensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 99992L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(firstStrikeOrder.getDefender().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new DefensiveFirstStrike(\n+                  MustFightBattle.this,\n+                  MustFightBattle.this,\n+                  // The order doesn't matter at this point", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyMjExMw==", "bodyText": "This is talking about the next parameter.  I was trying to explain why I could pick a \"random\" order.  To construct the class, I need an order but at this point in the code, I can pick one of several.  I would prefer to use firstStrikeOrder.getDefender() but firstStrikeOrder doesn't exist in an old save and a null point exception would be thrown.\nSo, maybe I could change the comment to something like\nfirstStrikeOrder.getDefender() is the correct value but that isn't available in an old save so one of the possible FirstStrikeStepOrder.FirstStrikeResult has to be choosen", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479822113", "createdAt": "2020-08-30T22:10:33Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1479,40 +1472,57 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n     };\n \n     if (firstStrikeOrder.getDefender() == FirstStrikeStepOrder.DEFENDER_SNEAK_ATTACK) {\n-      steps.add(\n-          new FirstStrikeDefendersFire() {\n-            private static final long serialVersionUID = 99992L;\n+      steps.add(defensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 99992L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(firstStrikeOrder.getDefender().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new DefensiveFirstStrike(\n+                  MustFightBattle.this,\n+                  MustFightBattle.this,\n+                  FirstStrikeStepOrder.DEFENDER_SNEAK_ATTACK,\n+                  returnFireAgainstDefendingSubs)\n+              .execute(stack, bridge);\n+        }\n+      };\n     }\n     if (firstStrikeOrder.getAttacker() != FirstStrikeStepOrder.NOT_APPLICABLE) {\n-      steps.add(\n-          new FirstStrikeAttackersFire() {\n-            private static final long serialVersionUID = 99991L;\n+      steps.add(offensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 99991L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeAttackersFire(firstStrikeOrder.getAttacker().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new OffensiveFirstStrike(\n+                  MustFightBattle.this,\n+                  MustFightBattle.this,\n+                  // the order doesn't matter at this point\n+                  FirstStrikeStepOrder.OFFENDER_SNEAK_ATTACK,\n+                  returnFireAgainstAttackingSubs)\n+              .execute(stack, bridge);\n+        }\n+      };\n     }\n     if (firstStrikeOrder.getDefender()\n             == FirstStrikeStepOrder.DEFENDER_SNEAK_ATTACK_WITH_OPPOSING_FIRST_STRIKE\n         || firstStrikeOrder.getDefender()\n             == FirstStrikeStepOrder.DEFENDER_NO_SNEAK_ATTACK_BUT_BEFORE_STANDARD_ATTACK) {\n-      steps.add(\n-          new FirstStrikeDefendersFire() {\n-            private static final long serialVersionUID = 99992L;\n+      steps.add(defensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 99992L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(firstStrikeOrder.getDefender().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new DefensiveFirstStrike(\n+                  MustFightBattle.this,\n+                  MustFightBattle.this,\n+                  // The order doesn't matter at this point", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjkxMw=="}, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDAwNDYzOnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MustFightBattleExecutablesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDo0MDoxM1rOHJlecg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDo0MDoxM1rOHJlecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMzIzNA==", "bodyText": "Is this  'lenient' 'doNothing' expectation required?", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479813234", "createdAt": "2020-08-30T20:40:13Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MustFightBattleExecutablesTest.java", "diffHunk": "@@ -446,8 +451,19 @@ private MustFightBattle givenFirstStrikeBattleSetup(\n       final boolean ww2v2,\n       final boolean defendingSubsSneakAttack) {\n     final MustFightBattle battle = spy(newBattle(WATER));\n-    lenient().doNothing().when(battle).firstStrikeAttackersFire(any());\n-    lenient().doNothing().when(battle).firstStrikeDefendersFire(any());\n+    lenient()\n+        .doNothing()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDY2MDI5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzo0OTowM1rOHLMCDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzo0OTowM1rOHLMCDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5MzUxNw==", "bodyText": "This was added to reduce code complexity.  I'm not exactly sure if this is the best name for it or if it should stay.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r481493517", "createdAt": "2020-09-01T23:49:03Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleState.java", "diffHunk": "@@ -5,10 +5,16 @@\n import games.strategy.engine.data.Territory;\n import games.strategy.engine.data.Unit;\n import java.util.Collection;\n+import java.util.EnumSet;\n \n /** Exposes the battle state and allows updates to it */\n public interface BattleState {\n \n+  enum Side {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833f178aada0fd23ab6031ac879dca8aba55503c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDY2NjU4OnYy", "diffSide": "LEFT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MustFightBattleExecutablesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzo1MjoyOFrOHLMFxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzo1MjoyOFrOHLMFxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5NDQ2OQ==", "bodyText": "All of these tests are replaced with the tests in the three FirstStrike step classes.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r481494469", "createdAt": "2020-09-01T23:52:28Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MustFightBattleExecutablesTest.java", "diffHunk": "@@ -499,47 +495,6 @@ private void assertThatFirstStrikeStepOrder(\n     assertThat(indices.get(stepOrder.get(1)), lessThan(indices.get(stepOrder.get(2))));\n   }\n \n-  private void assertThatFirstStrikeReturnFireIs(\n-      final MustFightBattle battle,\n-      final MustFightBattle.ReturnFire returnFire,\n-      final boolean attacker) {\n-    final List<IExecutable> execs = battle.getBattleExecutables();\n-    final int index =\n-        getIndex(\n-            execs,\n-            attacker\n-                ? MustFightBattle.FirstStrikeAttackersFire.class\n-                : MustFightBattle.FirstStrikeDefendersFire.class);\n-    final IExecutable step = execs.get(index);\n-\n-    final IDelegateBridge delegateBridge = mock(IDelegateBridge.class);\n-    step.execute(null, delegateBridge);\n-\n-    if (attacker) {\n-      verify(battle).firstStrikeAttackersFire(returnFire);\n-    } else {\n-      verify(battle).firstStrikeDefendersFire(returnFire);\n-    }\n-  }\n-\n-  @Test\n-  @DisplayName(\n-      \"When attacker has a destroyer, defender has a destroyer, WW2v2 is true, \"\n-          + \"and DEFENDING_SUBS_SNEAK_ATTACK is either, then attacker has return fire all\")\n-  void firstStrikeAttackerReturnFireAttHasDestroyerDefHasDestroyerWW2v2TrueSneakAttackTrueFalse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833f178aada0fd23ab6031ac879dca8aba55503c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDY3MDE3OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/BattleStepsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzo1NDozNlrOHLMIDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzo1NDozNlrOHLMIDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5NTA1Mg==", "bodyText": "Because of the change in how the sub steps are figured out, these mocks are being called sometimes when they aren't needed.  But to work around that would require making the test methods more complicated.  I felt adding lenient() to it was ok.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r481495052", "createdAt": "2020-09-01T23:54:36Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/BattleStepsTest.java", "diffHunk": "@@ -122,8 +123,8 @@ public static UnitAndAttachment newUnitAndAttachment() {\n     final Unit unit = mock(Unit.class);\n     final UnitType unitType = mock(UnitType.class);\n     final UnitAttachment unitAttachment = mock(UnitAttachment.class);\n-    when(unit.getType()).thenReturn(unitType);\n-    when(unitType.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment);\n+    lenient().when(unit.getType()).thenReturn(unitType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833f178aada0fd23ab6031ac879dca8aba55503c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjU3MDg0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMTo1NDowM1rOHNkmwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMTo1NDowM1rOHNkmwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk5MzI4MA==", "bodyText": "What would you think of having the caller apply the predicate rather than having that be part of the API? There might be some redundancy but there would be a lot more clarity at the point of the caller of exactly what is being computed (ie: which units are involved).", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r483993280", "createdAt": "2020-09-05T21:54:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -35,4 +38,27 @@ void landParatroopers(\n   void endBattle(IDelegateBridge bridge);\n \n   void attackerWins(IDelegateBridge bridge);\n+\n+  void findTargetGroupsAndFire(\n+      ReturnFire returnFire,\n+      String stepName,\n+      boolean defending,\n+      GamePlayer firingPlayer,\n+      Predicate<Unit> firingUnitPredicate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b223491a065aa3301abaca0d9467e7b5b6d7a451"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjU3MTc1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMTo1NTowNFrOHNknJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMTo1NTowNFrOHNknJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk5MzM4Mg==", "bodyText": "Any thoughts if removeUnits might be a more clear name for this method?", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r483993382", "createdAt": "2020-09-05T21:55:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -35,4 +38,27 @@ void landParatroopers(\n   void endBattle(IDelegateBridge bridge);\n \n   void attackerWins(IDelegateBridge bridge);\n+\n+  void findTargetGroupsAndFire(\n+      ReturnFire returnFire,\n+      String stepName,\n+      boolean defending,\n+      GamePlayer firingPlayer,\n+      Predicate<Unit> firingUnitPredicate,\n+      Collection<Unit> firingUnits,\n+      Collection<Unit> firingUnitsWaitingToDie,\n+      Collection<Unit> enemyUnits,\n+      Collection<Unit> enemyUnitsWaitingToDie);\n+\n+  void remove(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b223491a065aa3301abaca0d9467e7b5b6d7a451"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjU3NDE5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMTo1OTozMFrOHNkoRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMTo1OTozMFrOHNkoRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk5MzY3MA==", "bodyText": "Can this be converted by the caller to a boolean easily enough? I wonder if we are making this API do too much work.\nSecond, the API seems a bit coupled to a much broader interface than it really needs. What would you think if the IDelegateBridge were converted to functional interfaces? This way the caller would control which parts of the bridge is used.\nFor example, the history writer part could be converted to a Biconsumer in the API.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r483993670", "createdAt": "2020-09-05T21:59:30Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -35,4 +38,27 @@ void landParatroopers(\n   void endBattle(IDelegateBridge bridge);\n \n   void attackerWins(IDelegateBridge bridge);\n+\n+  void findTargetGroupsAndFire(\n+      ReturnFire returnFire,\n+      String stepName,\n+      boolean defending,\n+      GamePlayer firingPlayer,\n+      Predicate<Unit> firingUnitPredicate,\n+      Collection<Unit> firingUnits,\n+      Collection<Unit> firingUnitsWaitingToDie,\n+      Collection<Unit> enemyUnits,\n+      Collection<Unit> enemyUnitsWaitingToDie);\n+\n+  void remove(\n+      Collection<Unit> killedUnits,\n+      IDelegateBridge bridge,\n+      Territory battleSite,\n+      Boolean defenderDying);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b223491a065aa3301abaca0d9467e7b5b6d7a451"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjU3NTc0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMjowMTozOVrOHNko8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMjowMTozOVrOHNko8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk5Mzg0Mw==", "bodyText": "We're baking in an in/out parameter here and this value is modified.\nWhat would you think if we returned instead the collection of transformed units? That would imply that the caller would be the one doing the IDelagetBridge work.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r483993843", "createdAt": "2020-09-05T22:01:39Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -35,4 +38,27 @@ void landParatroopers(\n   void endBattle(IDelegateBridge bridge);\n \n   void attackerWins(IDelegateBridge bridge);\n+\n+  void findTargetGroupsAndFire(\n+      ReturnFire returnFire,\n+      String stepName,\n+      boolean defending,\n+      GamePlayer firingPlayer,\n+      Predicate<Unit> firingUnitPredicate,\n+      Collection<Unit> firingUnits,\n+      Collection<Unit> firingUnitsWaitingToDie,\n+      Collection<Unit> enemyUnits,\n+      Collection<Unit> enemyUnitsWaitingToDie);\n+\n+  void remove(\n+      Collection<Unit> killedUnits,\n+      IDelegateBridge bridge,\n+      Territory battleSite,\n+      Boolean defenderDying);\n+\n+  void damagedChangeInto(\n+      GamePlayer player,\n+      Collection<Unit> units,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b223491a065aa3301abaca0d9467e7b5b6d7a451"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2898, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}