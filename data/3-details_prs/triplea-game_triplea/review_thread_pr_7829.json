{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3Mjg5Mzgx", "number": 7829, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxOToxMzoxNFrOEqCV1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODo0MDoyOVrOEsaPuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTE0MDA2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxOToxMzoxNFrOHcDLDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMTo1MDowN1rOHcDz7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDE1OA==", "bodyText": "This seems to imply a different object semantic, perhaps even a different object. WDYT of something like SuicideOnHitFiringGroup? Would it simplify the eventual usages?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499174158", "createdAt": "2020-10-03T19:13:14Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NDYyMw==", "bodyText": "No, it wouldn't simplify any eventual usage.  This flag is only used to determine whether to kill the units after they fire.  We have to have a separate group so that we can easily detect which units hit and so which ones can be removed.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499184623", "createdAt": "2020-10-03T21:50:07Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDE1OA=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTE0MDk2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxOToxNDo1MFrOHcDLhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMjoxNTowNFrOHcD6Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDI3Ng==", "bodyText": "Where is the prefix added? It's an interesting comment, though scanning down it's not immediately obvious where/what this is refererring to exactly.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499174276", "createdAt": "2020-10-03T19:14:50Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NDI0Mw==", "bodyText": "The prefixes are added inside of the callees generateFiringGroupsWithOneSuicideAndOneNonSuicide and generateFiringGroups.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499184243", "createdAt": "2020-10-03T21:44:01Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDI3Ng=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NTQ2Ng==", "bodyText": "Cool, though that seems to be a detail of those methods. At this level, it's not obvious that is happening, therefore this comment seems out of place. One rule of thumb, any method should be understandable by simply reading it and not having to also read the methods that it invokes. One can see if that rule is violated then there is a scaling problem to understand a given method if you have to read all of the called methods, and all of the methods that are in turn called to the n'th degree.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499185466", "createdAt": "2020-10-03T22:03:30Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDI3Ng=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NjIzNQ==", "bodyText": "It was there to explain why the if/else if/else.  The only reason for them is to generate suffices.  If I didn't care about having unique suffices, I would just do a simple\nreturn separatedBySuicide.stream()\n        .map(newFiringUnits -> new FiringGroup(name, newFiringUnits, targetUnits))\n        .collect(Collectors.toList());\n\nBut I've been thinking about your comments here and I think if I instead change the above to:\nreturn separatedBySuicide.stream()\n        .map(newFiringUnits -> new FiringGroup(generateName(name, newFiringUnits, separatedBySuicide), newFiringUnits, targetUnits))\n        .collect(Collectors.toList());\n\nThen the logic for the unique names is more obviously contained to just dealing with the string instead of generating firing groups.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499186235", "createdAt": "2020-10-03T22:15:04Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDI3Ng=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTE0NTQxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxOToyMjozNVrOHcDNqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMTo1NzoyNFrOHcD1uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDgyNg==", "bodyText": "WDYT of having a constructor do the work for the isSuidideOnHit check?\nIn such a case this method would be reduced to:\n    return separatedBySuicide.stream()\n        .map(newFiringUnits -> new FiringGroup(name, newFiringUnits, targetUnits))\n        .collect(Collectors.toList());\n\nThat makes it short enough it perhaps is worth inlining.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499174826", "createdAt": "2020-10-03T19:22:35Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {\n+    final List<FiringGroup> groups = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NTA4MA==", "bodyText": "You'll notice that the isSuicideOnHit is used to determine the suffix.  And just because it is a suicideOnHit doesn't mean it will have the same suffix.  If you look at the next method generateFiringGroups, it also checks the suicideOnHit but it uses a different suffix.\nHere's some examples of firing unit groups and what their suffices would be:\nOne (doesn't matter if it is suicide or not) firing group -> No suffix\nOne suicide firing group and one non suicide firing group -> The suicide group has \" suicide\" suffix and the non suicide firing group has no suffix\nTwo suicide firing groups -> They will both have \" suicide <unitType.name>\" suffix.\nTwo suicide firing groups and one non suicide firing group -> The two suicide groups will have the suffix \" suicide <unitType.name>\" and the non suicide firing group will not have a suffix.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499185080", "createdAt": "2020-10-03T21:57:24Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {\n+    final List<FiringGroup> groups = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDgyNg=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTE0NjQ0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxOToyNDozOFrOHcDOLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzozOTo1NlrOHeM3Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDk1Nw==", "bodyText": "This param is interesting List<Collection<Unit>>. I wonder a bit what the ordering of the list is. If not ordered, then should it be just a Collection? That makes me wonder further if this would be better as a Map<?, Collection<Unit>>\nFor map key, if an enum would perhaps do well, something like FiringGroupType { SUICIDE_ON_HIT, STANDARD }\nWDYT?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499174957", "createdAt": "2020-10-03T19:24:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NjA4MA==", "bodyText": "If there were a map of firing group by type, then FiringGroup would not need the suicideOnHit boolean.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499176080", "createdAt": "2020-10-03T19:39:28Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDk1Nw=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NDQ5MA==", "bodyText": "Collection is fine.  The order doesn't matter.\nA map won't work because there can be more than one suicideOnHit collection.  This specific method adds a simplified prefix for the special case where there is only one suicideOnHit collection and one non suicideOnHit collection (I tried to express that in the method name).  The logic to figure out which one is the suicideOnHit and which one is not the suicideOnHit is inside of this method.  If I move that logic out of this method, then this method becomes basically nothing and would be inlined.  But doing that will increase the complexity of the caller and codeclimate will complain.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499184490", "createdAt": "2020-10-03T21:48:08Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDk1Nw=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNzc2OA==", "bodyText": "But doing that will increase the complexity of the caller and codeclimate will complain.\n\ncodeclimate is not perfect. There are times when the actual victory is from a fundamental change rather than a surface level. In other words, sometimes right right fix to codeclimate issues are not simple, surface level fixes. If a codeclimate warning is in the way of what is actually simpler, then codeclimate should be ignored in that instance.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r501427768", "createdAt": "2020-10-08T03:30:27Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDk1Nw=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyODQ3OQ==", "bodyText": "The encoding of the 'prefix' does strike me as complicated.\nWhat are the different types of suicideOnHit collection? Perhaps we are talking instead a more complicated data structure, something like: Map<UnitType, Map<SuicideOnHitFlag, Collection<Unit>>. Generally, such a data structure is a candidate to be converted to a first class object. One would init it by passing a collection of units, perhaps calling a factory method, and the methods on the object would be queries to return units of a given type.\nI think there could be some advantages to that:\n\nreadily tested\nextracts a good bit of detail\nreadily mocked, could be useful for testing other logic that relies on units with certain characteristics", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r501428479", "createdAt": "2020-10-08T03:33:31Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDk1Nw=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzMDAzOA==", "bodyText": "I've made changes to how this works.  Take a look at the new code.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r501430038", "createdAt": "2020-10-08T03:39:56Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDk1Nw=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTE0ODIwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxOToyNjo1MFrOHcDO-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxOToyNjo1MFrOHcDO-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NTE2Mg==", "bodyText": "Will we always be guaranteed to have a first unit in: newFiringUnits.iterator().next()?\nI do not know, maybe there is some code earlier that guarantees this, however it seems like a pretty strong precondition that is not necessarily documented (hopefully enforced). If we convert the incoming list to a map, that would resolve this problem as you would not need to check any of the unit elements to determine if they are 'suicide on hit', you could retrieve them directly from the input map.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499175162", "createdAt": "2020-10-03T19:26:50Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    for (final Collection<Unit> newFiringUnits : separatedBySuicide) {\n+      final boolean isSuicideOnHit =\n+          Matches.unitIsSuicideOnHit().test(newFiringUnits.iterator().next());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTE1MDM3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxOTozMDozN1rOHcDQMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxOTozNjo1MlrOHcDR3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NTQ3Mw==", "bodyText": "Couple questions:\n\nCould you explain why an interface \"alias\" is helpful?\nIs the output list ordered?\n\nA filter will typically exclude or include items. My presumption is that this is more of a sieve, that we are not losing any elements but instead are grouping them. Is that correct? If so, perhaps this would be better named as a Splitter, or as a Sorter.  OTOH - If we do not need an interface alias, then the naming problem would drop away.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499175473", "createdAt": "2020-10-03T19:30:37Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupFilter.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/** Converts the BattleState into a list of FiringGroups */\n+public interface FiringGroupFilter extends Function<BattleState, List<FiringGroup>> {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NTkwMw==", "bodyText": "For consideration, Effective Java 3, page 200:", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499175903", "createdAt": "2020-10-03T19:36:52Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupFilter.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/** Converts the BattleState into a list of FiringGroups */\n+public interface FiringGroupFilter extends Function<BattleState, List<FiringGroup>> {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NTQ3Mw=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTMwODc3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupSplitterBombard.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowMTowOFrOHcEb4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowMTowOFrOHcEb4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NDg1MQ==", "bodyText": "The original logic that this is based off can be found at MustFightBattle#fireNavalBombardment (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1462\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           public void fireNavalBombardment(final IDelegateBridge bridge) { \n        \n    \n  \n\n) and MustFightBattle#fire (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1497\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           protected void fire( \n        \n    \n  \n\n).", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499194851", "createdAt": "2020-10-04T01:01:08Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupSplitterBombard.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.NAVAL_BOMBARD;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create naval bombardment firing groups\n+ *\n+ * <p>The firing groups are separated by isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterBombard implements Function<BattleState, List<FiringGroup>> {\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTMwOTYyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowMzoxN1rOHcEcUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowMzoxN1rOHcEcUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NDk2Mg==", "bodyText": "The original logic that this is based off of is in MustFightBattle#updateOffensiveAaUnits (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 928\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           private void updateOffensiveAaUnits() { \n        \n    \n  \n\n), MustFightBattle#updateDefensiveAaUnits (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 949\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           private void updateDefendingAaUnits() { \n        \n    \n  \n\n), FireAa#FireAa (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/FireAa.java\n    \n    \n         Line 66\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           FireAa( \n        \n    \n  \n\n), and FireAa#execute (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/FireAa.java\n    \n    \n         Line 100\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           public void execute(final ExecutionStack stack, final IDelegateBridge bridge) { \n        \n    \n  \n\n).", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499194962", "createdAt": "2020-10-04T01:03:17Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.aa;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.TechAbilityAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Creates AA and Targeted Hit firing groups\n+ *\n+ * <p>The firing groups are separated by typeAa and isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterAa implements Function<BattleState, List<FiringGroup>> {\n+\n+  BattleState.Side side;\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTMwOTkzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowNDozOFrOHcEcgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowNDozOFrOHcEcgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NTAxMQ==", "bodyText": "The original logic that this is based off of is in MustFightBattle#findTargetGroupsAndFire (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1638\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           public void findTargetGroupsAndFire( \n        \n    \n  \n\n) and MustFightBattle#fire (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1497\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           protected void fire( \n        \n    \n  \n\n)", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499195011", "createdAt": "2020-10-04T01:04:38Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.PredicateBuilder;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create firing groups with units that match {@link #firingUnitPredicate}\n+ *\n+ * <p>The firing groups are separated by canNotTarget, canNotBeTargetedBy, and isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterGeneral implements Function<BattleState, List<FiringGroup>> {\n+\n+  BattleState.Side side;\n+\n+  Predicate<Unit> firingUnitPredicate;\n+\n+  /** Name displayed in the Battle UI */\n+  String groupName;\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTMxMTkyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowOTowOVrOHcEdbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowOTowOVrOHcEdbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NTI0NQ==", "bodyText": "This special named group will replace the \"Air defend non subs\" or \"Air attack non subs\" battle steps.  I mentioned this and posted images of what it will look like in the original PR #7823", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499195245", "createdAt": "2020-10-04T01:09:09Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.PredicateBuilder;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create firing groups with units that match {@link #firingUnitPredicate}\n+ *\n+ * <p>The firing groups are separated by canNotTarget, canNotBeTargetedBy, and isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterGeneral implements Function<BattleState, List<FiringGroup>> {\n+\n+  BattleState.Side side;\n+\n+  Predicate<Unit> firingUnitPredicate;\n+\n+  /** Name displayed in the Battle UI */\n+  String groupName;\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {\n+    final Collection<Unit> canFire =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ACTIVE, side),\n+            PredicateBuilder.of(firingUnitPredicate)\n+                // Remove offense allied units if allied air can not participate\n+                .andIf(\n+                    side == OFFENSE\n+                        && !Properties.getAlliedAirIndependent(battleState.getGameData()),\n+                    Matches.unitIsOwnedBy(battleState.getPlayer(side)))\n+                .build());\n+\n+    final Collection<Unit> enemyUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ALIVE, side.getOpposite()),\n+            PredicateBuilder.of(Matches.unitIsNotInfrastructure())\n+                .andIf(side == DEFENSE, Matches.unitIsSuicideOnAttack().negate())\n+                .andIf(side == OFFENSE, Matches.unitIsSuicideOnDefense().negate())\n+                .build());\n+\n+    final List<FiringGroup> firingGroups = new ArrayList<>();\n+\n+    final List<TargetGroup> targetGroups = TargetGroup.newTargetGroups(canFire, enemyUnits);\n+\n+    if (targetGroups.size() == 1) {\n+      firingGroups.addAll(buildFiringGroups(groupName, canFire, enemyUnits, targetGroups.get(0)));\n+    } else {\n+      // General firing groups don't have individual names so find commonly used groups and\n+      // give them unique names\n+      final List<TargetGroup> airVsSubGroups =\n+          targetGroups.stream()\n+              .filter(this.filterAirVsSubTargetGroups(enemyUnits))\n+              .collect(Collectors.toList());\n+      generateNamedGroups(AIR_FIRE_NON_SUBS, firingGroups, airVsSubGroups, canFire, enemyUnits);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDU5NDQ3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleStepStrings.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzo1MzozM1rOHe6TOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDo0MjowN1rOHe6_rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NDUyMQ==", "bodyText": "This appears only used in test, can it be moved to a test utility or otherwise removed from the prod code?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502174521", "createdAt": "2020-10-09T03:53:33Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleStepStrings.java", "diffHunk": "@@ -9,11 +9,15 @@\n   String CASUALTIES_SUFFIX = \" casualties\";\n   String LAND_PARATROOPS = \"Land Paratroopers\";\n   String NAVAL_BOMBARDMENT = \"Naval bombardment\";\n+  String NAVAL_BOMBARD = \"naval bombardment\";\n   String SELECT_NAVAL_BOMBARDMENT_CASUALTIES = \"Select naval bombardment casualties\";\n   String REMOVE_UNESCORTED_TRANSPORTS = \"Remove unescorted transports\";\n   String SUBMERGE_SUBS_VS_AIR_ONLY = \"Submerge subs against only air units\";\n   String AIR_ATTACK_NON_SUBS = \"Air attack non subs\";\n   String AIR_DEFEND_NON_SUBS = \"Air defend non subs\";\n+  String AIR_FIRE_NON_SUBS = \"air vs non subs\";\n+  String UNITS = \"units\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NTkwMA==", "bodyText": "UNITS and AIR_FIRE_NON_SUBS will be used in prod code.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502185900", "createdAt": "2020-10-09T04:42:07Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleStepStrings.java", "diffHunk": "@@ -9,11 +9,15 @@\n   String CASUALTIES_SUFFIX = \" casualties\";\n   String LAND_PARATROOPS = \"Land Paratroopers\";\n   String NAVAL_BOMBARDMENT = \"Naval bombardment\";\n+  String NAVAL_BOMBARD = \"naval bombardment\";\n   String SELECT_NAVAL_BOMBARDMENT_CASUALTIES = \"Select naval bombardment casualties\";\n   String REMOVE_UNESCORTED_TRANSPORTS = \"Remove unescorted transports\";\n   String SUBMERGE_SUBS_VS_AIR_ONLY = \"Submerge subs against only air units\";\n   String AIR_ATTACK_NON_SUBS = \"Air attack non subs\";\n   String AIR_DEFEND_NON_SUBS = \"Air defend non subs\";\n+  String AIR_FIRE_NON_SUBS = \"air vs non subs\";\n+  String UNITS = \"units\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NDUyMQ=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDYwMDc5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleStepStrings.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzo1NToxNVrOHe6XMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMjoyMTozMFrOHfi0yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NTUzNw==", "bodyText": "Is the casing supposed to be inconsistent or just never displayed to users and so it does not matter? I notice that most of the step strings are capitalized.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502175537", "createdAt": "2020-10-09T03:55:15Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleStepStrings.java", "diffHunk": "@@ -9,11 +9,15 @@\n   String CASUALTIES_SUFFIX = \" casualties\";\n   String LAND_PARATROOPS = \"Land Paratroopers\";\n   String NAVAL_BOMBARDMENT = \"Naval bombardment\";\n+  String NAVAL_BOMBARD = \"naval bombardment\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NTgyMQ==", "bodyText": "This new string is going to show up in the Battle Display UI as \"Germans naval bombard fire\", \"British select naval bombard casualties\", and \"British remove naval bombard casualties\".  The old string is used in a different place and needs to be capitalized since it is the beginning of the sentence.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502185821", "createdAt": "2020-10-09T04:41:49Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleStepStrings.java", "diffHunk": "@@ -9,11 +9,15 @@\n   String CASUALTIES_SUFFIX = \" casualties\";\n   String LAND_PARATROOPS = \"Land Paratroopers\";\n   String NAVAL_BOMBARDMENT = \"Naval bombardment\";\n+  String NAVAL_BOMBARD = \"naval bombardment\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NTUzNw=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNjcwMg==", "bodyText": "Hmm, okay. Though that seems to be overly context dependent. I wonder if it would be better to do these with built-in patterns and use them with string format. Alternatively maybe as method invocations even rather than contexts. The problem I see is that the usage is very specific, while this class is independent, it turns out to have a level of coupling to where it is used.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502816702", "createdAt": "2020-10-10T18:12:08Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleStepStrings.java", "diffHunk": "@@ -9,11 +9,15 @@\n   String CASUALTIES_SUFFIX = \" casualties\";\n   String LAND_PARATROOPS = \"Land Paratroopers\";\n   String NAVAL_BOMBARDMENT = \"Naval bombardment\";\n+  String NAVAL_BOMBARD = \"naval bombardment\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NTUzNw=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzODQ3NQ==", "bodyText": "All of these strings are only used for the Battle UI in the step list on the left hand side.  I think a probably better thing would be to use some sort of localization library and have these strings put in the language files.  I don't know if that is in any future plans.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502838475", "createdAt": "2020-10-10T22:21:30Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleStepStrings.java", "diffHunk": "@@ -9,11 +9,15 @@\n   String CASUALTIES_SUFFIX = \" casualties\";\n   String LAND_PARATROOPS = \"Land Paratroopers\";\n   String NAVAL_BOMBARDMENT = \"Naval bombardment\";\n+  String NAVAL_BOMBARD = \"naval bombardment\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NTUzNw=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDYwNjU4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzo1ODoyNVrOHe6aug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDo0MjozNVrOHe7ADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NjQ0Mg==", "bodyText": "suicideOnHit appears to only used in test, is there a plan for it to be used in upcoming PRs?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502176442", "createdAt": "2020-10-09T03:58:25Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NTk5OQ==", "bodyText": "suicideOnHit will be used later.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502185999", "createdAt": "2020-10-09T04:42:35Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NjQ0Mg=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDYwOTc5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDowMDoxMFrOHe6cYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMjoxOTowN1rOHfiz_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3Njg2NA==", "bodyText": "It's not obvious  offhand why every unit should be 'unitIsSuicideOnHit' for the whole group to be marked as such. I'm just wondering why it's not any unit, or why it's not tracked at a per-unit level even. Perhaps a comment on the variable could explain it's role in the class.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502176864", "createdAt": "2020-10-09T04:00:10Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzODI3MQ==", "bodyText": "I've added comments about the suicideOnHit.  See if that works.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502838271", "createdAt": "2020-10-10T22:19:07Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3Njg2NA=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDYxMzA5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDowMjoyNlrOHe6eNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxODozNDo1MFrOHfhoSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NzMzMg==", "bodyText": "I wonder if callers could just avoid mutating the return value and/or copy as needed. If we can skip the defensive copy, we can have a performance improvement and simpler code in this class as a simpler getter would do.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502177332", "createdAt": "2020-10-09T04:02:26Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTkxMw==", "bodyText": "Something to hope for :)", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502191913", "createdAt": "2020-10-09T05:08:38Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NzMzMg=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNjg0NQ==", "bodyText": "The copies can add up to be significant. Can we do better than hoping? The java8 streaming API is particularly helpful for operating on returned collections as the collection is not mutated.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502816845", "createdAt": "2020-10-10T18:14:10Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NzMzMg=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxODg4OA==", "bodyText": "The return value of this method is passed off to other methods and those pass off to other methods.  So the code path isn't easy to follow.\nBut I can't remember why exactly I added unmodifiableCollection.  I thought it was because that is how the original code was but I can't find any evidence of that now.  So, I've removed the unmodifiableCollection part.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502818888", "createdAt": "2020-10-10T18:34:50Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NzMzMg=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDYxNDI0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDowMzoxMlrOHe6exA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDowMzoxMlrOHe6exA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NzQ3Ng==", "bodyText": "The concept of being kept around is not very well defined. Would you mind making this comment more specific, more defined?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502177476", "createdAt": "2020-10-09T04:03:12Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDYxOTQzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDowNjoyOFrOHe6hhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDo0NTo1MFrOHe7C0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3ODE4Mw==", "bodyText": "I think this comment is more of an implementation note. Ideally this class is designed so that it is generic and has a role, a function, and is not aware of limitations around it. IF this class is responsible for tracking units that are still alive, perhaps that can just be cleanly documented in the class javadoc? AS-is, it's a bit odd to see this note, I'm not sure if it really answers questions, seems like if you have context then it makes more sense but otherwise is a bit confusing.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502178183", "createdAt": "2020-10-09T04:06:28Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NjcwNQ==", "bodyText": "It is an implementation note.  I'd rather not have this method here.  But because of how status is tracked, the method is required.  Maybe at some point we'll track status in the units and then this method will not be needed.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502186705", "createdAt": "2020-10-09T04:45:50Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3ODE4Mw=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDYyNzAwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDoxMDo1OFrOHe6lgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDo0NzozMVrOHe7EJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3OTIwMQ==", "bodyText": "nit, not sure this @return javadoc adds much, restates the code. We are not publishing library code, anyone reading the javadoc will likely be reading the javadoc in the class file at the same time. I think this @return can perhaps be removed or otherwise should describe any invariants that would be true of the return value. For example, it is a list, what is the ordering of the list? Are there constraints on the size of the list. Also, will the firigin group be a collection of the firing units, or the target units, or both?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502179201", "createdAt": "2020-10-09T04:10:58Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3OTM4Nw==", "bodyText": "I am a bit confused though, suicideOnHit already implies a specific unit type, right? If we are grouping by unit type, then don't we automatically also group by suicideOnHit too?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502179387", "createdAt": "2020-10-09T04:11:53Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3OTIwMQ=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NzA0NA==", "bodyText": "The doc \"groups them by unit type\" is talking about grouping the suicideOnHit by unit type.  The other units are not grouped by unit type.  I'll try and reword the doc.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502187044", "createdAt": "2020-10-09T04:47:31Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3OTIwMQ=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDY0MDYyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDoxOTo1OVrOHe6s-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDoxOTo1OVrOHe6s-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MTExNA==", "bodyText": "Creating a fake unit type seems to contradict the unit type datatype (SRP violation). The method that uses this I think probably would do better to return a first class data structure, something like:\n\nclass SuicideOnHitSortedFiringGroups {\n     Map<UnitType, FiringGroup> suicideOnHitFiringGroups;\n     Collection<Unit> nonSuicideOnHitFiringGroups;;\n}\n\nWDYT?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502181114", "createdAt": "2020-10-09T04:19:59Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDY0Mzk4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupSplitterBombard.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDoyMjowNFrOHe6u4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDoyMjowNFrOHe6u4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MTYwMw==", "bodyText": "nit, would 'bombarindUnits' be a more descriptive name here? Perhaps even consider inlining it to avoid the intermediate variable?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502181603", "createdAt": "2020-10-09T04:22:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupSplitterBombard.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.NAVAL_BOMBARD;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create naval bombardment firing groups\n+ *\n+ * <p>The firing groups are separated by isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterBombard implements Function<BattleState, List<FiringGroup>> {\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {\n+    final Collection<Unit> canFire = battleState.getBombardingUnits();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDY0NjUzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDoyMzo1N1rOHe6wTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxODoyMDowNVrOHfhi0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MTk2NQ==", "bodyText": "For the splitter class, it would be nice to see some more detail in the javadoc to explain what characteristics would be true of the output List<FiringGroup>. I'm not really sure what \"Targeted Hit firing groups\" are.\nPerhaps we can/should add 'targeted hit' to the glossary?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502181965", "createdAt": "2020-10-09T04:23:57Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.aa;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.TechAbilityAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Creates AA and Targeted Hit firing groups", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NzI4MA==", "bodyText": "I thought the term for the AA hits is also called \"targeted hits\", especially when the unit firing isn't anything like an aa gun.  Is there a different term that I should be using?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502187280", "createdAt": "2020-10-09T04:48:30Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.aa;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.TechAbilityAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Creates AA and Targeted Hit firing groups", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MTk2NQ=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNzQ4OQ==", "bodyText": "The terms are broadly not well defined. TripleA was created before the concept of Domain-Driven-Design was more mainstream, as such instead of defining and using domain terminology, brand new terminology was invented (EG: \"Node\").", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502817489", "createdAt": "2020-10-10T18:20:05Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.aa;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.TechAbilityAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Creates AA and Targeted Hit firing groups", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MTk2NQ=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDY0ODc2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDoyNToyN1rOHe6xnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMjoxODoyMVrOHfizrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MjMwMQ==", "bodyText": "The logic in here is really heavy. Do you have enough context where you could readily add some comments to guide a reader in understanding what this code is doing?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502182301", "createdAt": "2020-10-09T04:25:27Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.aa;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.TechAbilityAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Creates AA and Targeted Hit firing groups\n+ *\n+ * <p>The firing groups are separated by typeAa and isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterAa implements Function<BattleState, List<FiringGroup>> {\n+\n+  BattleState.Side side;\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {\n+    final Map<String, Set<UnitType>> airborneTechTargetsAllowed =\n+        side == DEFENSE\n+            ? TechAbilityAttachment.getAirborneTargettedByAa(\n+                battleState.getPlayer(side.getOpposite()), battleState.getGameData())\n+            : Map.of();\n+\n+    final Collection<Unit> aaUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ACTIVE, side),\n+            Matches.unitIsAaThatCanFire(\n+                battleState.filterUnits(ALIVE, side.getOpposite()),\n+                airborneTechTargetsAllowed,\n+                battleState.getPlayer(side.getOpposite()),\n+                Matches.unitIsAaForCombatOnly(),\n+                battleState.getStatus().getRound(),\n+                side == DEFENSE,\n+                battleState.getGameData()));\n+\n+    final List<String> aaTypes = UnitAttachment.getAllOfTypeAas(aaUnits);\n+\n+    final Collection<Unit> validTargetUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ALIVE, side.getOpposite()),\n+            Matches.unitIsNotInfrastructure().and(Matches.unitIsBeingTransported().negate()));\n+\n+    final List<FiringGroup> firingGroups = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NzcyNA==", "bodyText": "I can try and add comments but I'm not sure if they'll be any better than the code.  You need to know all the aa attributes and how they interact with each other.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502187724", "createdAt": "2020-10-09T04:50:20Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.aa;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.TechAbilityAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Creates AA and Targeted Hit firing groups\n+ *\n+ * <p>The firing groups are separated by typeAa and isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterAa implements Function<BattleState, List<FiringGroup>> {\n+\n+  BattleState.Side side;\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {\n+    final Map<String, Set<UnitType>> airborneTechTargetsAllowed =\n+        side == DEFENSE\n+            ? TechAbilityAttachment.getAirborneTargettedByAa(\n+                battleState.getPlayer(side.getOpposite()), battleState.getGameData())\n+            : Map.of();\n+\n+    final Collection<Unit> aaUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ACTIVE, side),\n+            Matches.unitIsAaThatCanFire(\n+                battleState.filterUnits(ALIVE, side.getOpposite()),\n+                airborneTechTargetsAllowed,\n+                battleState.getPlayer(side.getOpposite()),\n+                Matches.unitIsAaForCombatOnly(),\n+                battleState.getStatus().getRound(),\n+                side == DEFENSE,\n+                battleState.getGameData()));\n+\n+    final List<String> aaTypes = UnitAttachment.getAllOfTypeAas(aaUnits);\n+\n+    final Collection<Unit> validTargetUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ALIVE, side.getOpposite()),\n+            Matches.unitIsNotInfrastructure().and(Matches.unitIsBeingTransported().negate()));\n+\n+    final List<FiringGroup> firingGroups = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MjMwMQ=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNzU0NQ==", "bodyText": "Perhaps add a comment about the high level operations that are happening, what the code is roughly going to do.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502817545", "createdAt": "2020-10-10T18:20:45Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.aa;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.TechAbilityAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Creates AA and Targeted Hit firing groups\n+ *\n+ * <p>The firing groups are separated by typeAa and isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterAa implements Function<BattleState, List<FiringGroup>> {\n+\n+  BattleState.Side side;\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {\n+    final Map<String, Set<UnitType>> airborneTechTargetsAllowed =\n+        side == DEFENSE\n+            ? TechAbilityAttachment.getAirborneTargettedByAa(\n+                battleState.getPlayer(side.getOpposite()), battleState.getGameData())\n+            : Map.of();\n+\n+    final Collection<Unit> aaUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ACTIVE, side),\n+            Matches.unitIsAaThatCanFire(\n+                battleState.filterUnits(ALIVE, side.getOpposite()),\n+                airborneTechTargetsAllowed,\n+                battleState.getPlayer(side.getOpposite()),\n+                Matches.unitIsAaForCombatOnly(),\n+                battleState.getStatus().getRound(),\n+                side == DEFENSE,\n+                battleState.getGameData()));\n+\n+    final List<String> aaTypes = UnitAttachment.getAllOfTypeAas(aaUnits);\n+\n+    final Collection<Unit> validTargetUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ALIVE, side.getOpposite()),\n+            Matches.unitIsNotInfrastructure().and(Matches.unitIsBeingTransported().negate()));\n+\n+    final List<FiringGroup> firingGroups = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MjMwMQ=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzODE5MA==", "bodyText": "Check out the comments that I added to the code.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502838190", "createdAt": "2020-10-10T22:18:21Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.aa;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.TechAbilityAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Creates AA and Targeted Hit firing groups\n+ *\n+ * <p>The firing groups are separated by typeAa and isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterAa implements Function<BattleState, List<FiringGroup>> {\n+\n+  BattleState.Side side;\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {\n+    final Map<String, Set<UnitType>> airborneTechTargetsAllowed =\n+        side == DEFENSE\n+            ? TechAbilityAttachment.getAirborneTargettedByAa(\n+                battleState.getPlayer(side.getOpposite()), battleState.getGameData())\n+            : Map.of();\n+\n+    final Collection<Unit> aaUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ACTIVE, side),\n+            Matches.unitIsAaThatCanFire(\n+                battleState.filterUnits(ALIVE, side.getOpposite()),\n+                airborneTechTargetsAllowed,\n+                battleState.getPlayer(side.getOpposite()),\n+                Matches.unitIsAaForCombatOnly(),\n+                battleState.getStatus().getRound(),\n+                side == DEFENSE,\n+                battleState.getGameData()));\n+\n+    final List<String> aaTypes = UnitAttachment.getAllOfTypeAas(aaUnits);\n+\n+    final Collection<Unit> validTargetUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ALIVE, side.getOpposite()),\n+            Matches.unitIsNotInfrastructure().and(Matches.unitIsBeingTransported().negate()));\n+\n+    final List<FiringGroup> firingGroups = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MjMwMQ=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDY1NDU0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDoyOTo0MFrOHe60-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMjozNzozMlrOHfi52Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzE2Mw==", "bodyText": "It's a bit odd to have a generic predicate and for this class to know how the firing groups are going to be split.\nIs the predicate acting as a filter to remove units from the firing groups, or is the predicate more acting at the firing group level?\nThe firing predicate is a bit concerning as I wonder if we are too abstract here, too complex. Could the caller apply the predicate rather than passing it in? I'm wondering if a caller would have to know a great deal about this implementation to be able to reasonably pass a good predicate to this class.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502183163", "createdAt": "2020-10-09T04:29:40Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.PredicateBuilder;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create firing groups with units that match {@link #firingUnitPredicate}\n+ *\n+ * <p>The firing groups are separated by canNotTarget, canNotBeTargetedBy, and isSuicideOnHit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4OTYzOQ==", "bodyText": "The predicate isn't the splitter.  It filters what units are available to be split.  By storing the predicate with the splitter, I can make the caller more generic.\nThe currently only use for the predicate is to separate FirstStrike from non-FirstStrike.  I could make three separate splitters: Normal, OffensiveFirstStrike, and DefensiveFirstStrike.  But the only difference between the three is the predicate or pre-filter.\nThe thing that does the splitting are the canNotTarget, canNotBeTargetedBy, and isSuicideOnHit attributes of the UnitType.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502189639", "createdAt": "2020-10-09T04:58:34Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.PredicateBuilder;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create firing groups with units that match {@link #firingUnitPredicate}\n+ *\n+ * <p>The firing groups are separated by canNotTarget, canNotBeTargetedBy, and isSuicideOnHit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzE2Mw=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzMDI4Ng==", "bodyText": "Here is one thought, the list of split predicates is pretty well defined. What if we passed an enum value to specify the split type? This would I think be pretty beneficial as it would push complexity into this module, simplifying the callers. The cohesion of this class would be stronger, to understand what it's doing you would not have to look at the predicates being passed in, which is fundamentally a better and more useful module. Furthermore, by passing the right enum value, you get the right behavior, this really abstracts away implementation details from the callers. Otherwise, with a predicate a caller (or a maintainer, or someone looking to use or understand this code) has to have pretty deep knowledge of how the predicate is used.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502830286", "createdAt": "2020-10-10T20:42:20Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.PredicateBuilder;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create firing groups with units that match {@link #firingUnitPredicate}\n+ *\n+ * <p>The firing groups are separated by canNotTarget, canNotBeTargetedBy, and isSuicideOnHit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzE2Mw=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzODU4NQ==", "bodyText": "Do you mean the \"filter type\"?  Because the predicate is for filtering the units, it isn't for splitting the units.  But having an enum for the three different filters sounds like an ok idea.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502838585", "createdAt": "2020-10-10T22:23:02Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.PredicateBuilder;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create firing groups with units that match {@link #firingUnitPredicate}\n+ *\n+ * <p>The firing groups are separated by canNotTarget, canNotBeTargetedBy, and isSuicideOnHit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzE2Mw=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzOTc2OQ==", "bodyText": "I've changed the predicate to enums that determine the predicate.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502839769", "createdAt": "2020-10-10T22:37:32Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.PredicateBuilder;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create firing groups with units that match {@link #firingUnitPredicate}\n+ *\n+ * <p>The firing groups are separated by canNotTarget, canNotBeTargetedBy, and isSuicideOnHit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzE2Mw=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDY1OTAzOnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDozMjo0OVrOHe63ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMjoxNzo0N1rOHfizhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzgzOA==", "bodyText": "It seems we are testing multiple behaviors at the same time here. Is the expected display name of units simply because that is the splitter parameter? Have you considered adding a set of tests to only test display name behavior?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502183838", "createdAt": "2020-10-09T04:32:49Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.UNITS;\n+import static games.strategy.triplea.delegate.battle.FakeBattleState.givenBattleStateBuilder;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenAnyUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsSea;\n+import static games.strategy.triplea.delegate.battle.steps.MockGameData.givenGameData;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.List;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FiringGroupSplitterGeneralTest {\n+\n+  @Mock GamePlayer attacker;\n+  @Mock GamePlayer defender;\n+\n+  @Test\n+  void oneFiringUnitVsOneTargetableUnitMakesOneFiringGroup() {\n+    final Unit targetUnit = givenAnyUnit();\n+    final Unit fireUnit = givenAnyUnit();\n+\n+    final List<FiringGroup> firingGroups =\n+        FiringGroupSplitterGeneral.of(OFFENSE, unit -> true, UNITS)\n+            .apply(\n+                givenBattleStateBuilder()\n+                    .gameData(givenGameData().withAlliedAirIndependent(true).build())\n+                    .attacker(attacker)\n+                    .defender(defender)\n+                    .attackingUnits(List.of(fireUnit))\n+                    .defendingUnits(List.of(targetUnit))\n+                    .build());\n+\n+    assertThat(firingGroups, hasSize(1));\n+    assertThat(firingGroups.get(0).getDisplayName(), is(UNITS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MDQ1Mw==", "bodyText": "No, the expected display name will change.  The last two tests in this file test for changed display names: twoFiringGroupsWithCanNotTarget and twoGroupsWhenAirAndSeaVsSub.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502190453", "createdAt": "2020-10-09T05:02:07Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.UNITS;\n+import static games.strategy.triplea.delegate.battle.FakeBattleState.givenBattleStateBuilder;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenAnyUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsSea;\n+import static games.strategy.triplea.delegate.battle.steps.MockGameData.givenGameData;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.List;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FiringGroupSplitterGeneralTest {\n+\n+  @Mock GamePlayer attacker;\n+  @Mock GamePlayer defender;\n+\n+  @Test\n+  void oneFiringUnitVsOneTargetableUnitMakesOneFiringGroup() {\n+    final Unit targetUnit = givenAnyUnit();\n+    final Unit fireUnit = givenAnyUnit();\n+\n+    final List<FiringGroup> firingGroups =\n+        FiringGroupSplitterGeneral.of(OFFENSE, unit -> true, UNITS)\n+            .apply(\n+                givenBattleStateBuilder()\n+                    .gameData(givenGameData().withAlliedAirIndependent(true).build())\n+                    .attacker(attacker)\n+                    .defender(defender)\n+                    .attackingUnits(List.of(fireUnit))\n+                    .defendingUnits(List.of(targetUnit))\n+                    .build());\n+\n+    assertThat(firingGroups, hasSize(1));\n+    assertThat(firingGroups.get(0).getDisplayName(), is(UNITS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzgzOA=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxODc1Ng==", "bodyText": "I see, what I'm more pointing to is that we are testing multiple/all aspects of firingGroups per test rather than testing on behavior at a time. For example, it's considered a best practice for tests to have only one reason for why they would fail. If for example the firing group size were to change or if the displayName were to change, then this test would fail. At a more concrete level, isolating the behaviors makes it easier to see which parameters control which outputs.\nHence I'm suggesting to pivot the tests to group and isolate the tests that verify display name, size, etc.. and do so independently.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502818756", "createdAt": "2020-10-10T18:33:26Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.UNITS;\n+import static games.strategy.triplea.delegate.battle.FakeBattleState.givenBattleStateBuilder;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenAnyUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsSea;\n+import static games.strategy.triplea.delegate.battle.steps.MockGameData.givenGameData;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.List;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FiringGroupSplitterGeneralTest {\n+\n+  @Mock GamePlayer attacker;\n+  @Mock GamePlayer defender;\n+\n+  @Test\n+  void oneFiringUnitVsOneTargetableUnitMakesOneFiringGroup() {\n+    final Unit targetUnit = givenAnyUnit();\n+    final Unit fireUnit = givenAnyUnit();\n+\n+    final List<FiringGroup> firingGroups =\n+        FiringGroupSplitterGeneral.of(OFFENSE, unit -> true, UNITS)\n+            .apply(\n+                givenBattleStateBuilder()\n+                    .gameData(givenGameData().withAlliedAirIndependent(true).build())\n+                    .attacker(attacker)\n+                    .defender(defender)\n+                    .attackingUnits(List.of(fireUnit))\n+                    .defendingUnits(List.of(targetUnit))\n+                    .build());\n+\n+    assertThat(firingGroups, hasSize(1));\n+    assertThat(firingGroups.get(0).getDisplayName(), is(UNITS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzgzOA=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxOTMwMw==", "bodyText": "You'll notice that the majority of the tests don't check for the display name.  Only this one and the other two I mentioned.  I understand that the test should generally only have one reason why they should fail.  And I believe this test is structured that way.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502819303", "createdAt": "2020-10-10T18:39:03Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.UNITS;\n+import static games.strategy.triplea.delegate.battle.FakeBattleState.givenBattleStateBuilder;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenAnyUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsSea;\n+import static games.strategy.triplea.delegate.battle.steps.MockGameData.givenGameData;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.List;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FiringGroupSplitterGeneralTest {\n+\n+  @Mock GamePlayer attacker;\n+  @Mock GamePlayer defender;\n+\n+  @Test\n+  void oneFiringUnitVsOneTargetableUnitMakesOneFiringGroup() {\n+    final Unit targetUnit = givenAnyUnit();\n+    final Unit fireUnit = givenAnyUnit();\n+\n+    final List<FiringGroup> firingGroups =\n+        FiringGroupSplitterGeneral.of(OFFENSE, unit -> true, UNITS)\n+            .apply(\n+                givenBattleStateBuilder()\n+                    .gameData(givenGameData().withAlliedAirIndependent(true).build())\n+                    .attacker(attacker)\n+                    .defender(defender)\n+                    .attackingUnits(List.of(fireUnit))\n+                    .defendingUnits(List.of(targetUnit))\n+                    .build());\n+\n+    assertThat(firingGroups, hasSize(1));\n+    assertThat(firingGroups.get(0).getDisplayName(), is(UNITS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzgzOA=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgyMjU4NQ==", "bodyText": "Can you clarify \"test should generally only have one reason why they should fail. And I believe this test is structured that way.\"\nFrom an initial look, it seems like if the firing group size changes this test would fail, or if the display name changes it would fail. The size of the firing group and display name are independent of one another, which makes me think that if one of two independent things were to either change, then this test method would fail for either reason. Are the two values, the firing group size and the display name actually linked?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502822585", "createdAt": "2020-10-10T19:13:30Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.UNITS;\n+import static games.strategy.triplea.delegate.battle.FakeBattleState.givenBattleStateBuilder;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenAnyUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsSea;\n+import static games.strategy.triplea.delegate.battle.steps.MockGameData.givenGameData;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.List;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FiringGroupSplitterGeneralTest {\n+\n+  @Mock GamePlayer attacker;\n+  @Mock GamePlayer defender;\n+\n+  @Test\n+  void oneFiringUnitVsOneTargetableUnitMakesOneFiringGroup() {\n+    final Unit targetUnit = givenAnyUnit();\n+    final Unit fireUnit = givenAnyUnit();\n+\n+    final List<FiringGroup> firingGroups =\n+        FiringGroupSplitterGeneral.of(OFFENSE, unit -> true, UNITS)\n+            .apply(\n+                givenBattleStateBuilder()\n+                    .gameData(givenGameData().withAlliedAirIndependent(true).build())\n+                    .attacker(attacker)\n+                    .defender(defender)\n+                    .attackingUnits(List.of(fireUnit))\n+                    .defendingUnits(List.of(targetUnit))\n+                    .build());\n+\n+    assertThat(firingGroups, hasSize(1));\n+    assertThat(firingGroups.get(0).getDisplayName(), is(UNITS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzgzOA=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzODE0OA==", "bodyText": "This test is validating what a one firing group result should look like.  And a single firing group result will always have the same name.  This is a display name and the only reason to change the display name that is passed in is if there are multiple groups that need to be differentiated.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502838148", "createdAt": "2020-10-10T22:17:47Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.UNITS;\n+import static games.strategy.triplea.delegate.battle.FakeBattleState.givenBattleStateBuilder;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenAnyUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsSea;\n+import static games.strategy.triplea.delegate.battle.steps.MockGameData.givenGameData;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.List;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FiringGroupSplitterGeneralTest {\n+\n+  @Mock GamePlayer attacker;\n+  @Mock GamePlayer defender;\n+\n+  @Test\n+  void oneFiringUnitVsOneTargetableUnitMakesOneFiringGroup() {\n+    final Unit targetUnit = givenAnyUnit();\n+    final Unit fireUnit = givenAnyUnit();\n+\n+    final List<FiringGroup> firingGroups =\n+        FiringGroupSplitterGeneral.of(OFFENSE, unit -> true, UNITS)\n+            .apply(\n+                givenBattleStateBuilder()\n+                    .gameData(givenGameData().withAlliedAirIndependent(true).build())\n+                    .attacker(attacker)\n+                    .defender(defender)\n+                    .attackingUnits(List.of(fireUnit))\n+                    .defendingUnits(List.of(targetUnit))\n+                    .build());\n+\n+    assertThat(firingGroups, hasSize(1));\n+    assertThat(firingGroups.get(0).getDisplayName(), is(UNITS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzgzOA=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDAyNzI4OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODozOTo1MVrOHfproQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODozOTo1MVrOHfproQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1MDgxNw==", "bodyText": "The empty string arg seems very similar to a 'null' arg or a boolean parameter. IN general those kinds of a args are not self-explanatory and make it difficult for someone to read and use an API. Notably, you can't just use the API, you have to look up which values are allowed to then realize empty string is the way to go. One would wonder, \"can I use null here\"? In any case, it makes you look up the implementation which is a heuristic for a difficult to use API. Similar for those reading, they'll be unsure why an empty string is needed.\nGenerally the fix is to have method overloads and have an API that omits the unnecessary parameter.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502950817", "createdAt": "2020-10-11T18:39:51Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "diffHunk": "@@ -86,13 +88,60 @@ void oneWaitingToDieFiringUnitVsOneTargetableUnitMakesOneFiringGroup() {\n   }\n \n   @Test\n-  void firingUnitsAreExcludedAccordingToThePredicate() {\n+  void offensiveNormalTypeExcludesFirstStrike() {\n     final Unit targetUnit = givenAnyUnit();\n     final Unit fireUnit = givenAnyUnit();\n+    final Unit fireUnit2 = givenUnitFirstStrike();\n+\n+    final List<FiringGroup> firingGroups =\n+        FiringGroupSplitterGeneral.of(OFFENSE, FiringGroupSplitterGeneral.Type.OFFENSIVE_NORMAL, \"\")\n+            .apply(\n+                givenBattleStateBuilder()\n+                    .gameData(givenGameData().withAlliedAirIndependent(true).build())\n+                    .attacker(attacker)\n+                    .defender(defender)\n+                    .attackingUnits(List.of(fireUnit, fireUnit2))\n+                    .defendingUnits(List.of(targetUnit))\n+                    .build());\n+\n+    assertThat(firingGroups, hasSize(1));\n+    assertThat(firingGroups.get(0).getFiringUnits(), contains(fireUnit));\n+  }\n+\n+  @Test\n+  void defensiveNormalTypeExcludesFirstStrike() {\n+    final Unit targetUnit = givenAnyUnit();\n+    final Unit fireUnit = givenAnyUnit();\n+    final Unit fireUnit2 = givenUnitFirstStrike();\n+\n+    final List<FiringGroup> firingGroups =\n+        FiringGroupSplitterGeneral.of(OFFENSE, FiringGroupSplitterGeneral.Type.DEFENSIVE_NORMAL, \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f388871ab07f443bb05168d8c4b9557c3b603f5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDAyODExOnYy", "diffSide": "LEFT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODo0MDoyOVrOHfpr_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODo0MDoyOVrOHfpr_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1MDkwOA==", "bodyText": "Looking at these usage examples, and in the prod code, it looks like the update to a flag instead of passing a predicate was a strong update, it is a much nicer looking API now \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502950908", "createdAt": "2020-10-11T18:40:29Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "diffHunk": "@@ -210,7 +283,7 @@ void excludeSuicideOnAttackTargetsIfDefense() {\n     final Unit fireUnit = givenAnyUnit();\n \n     final List<FiringGroup> firingGroups =\n-        FiringGroupSplitterGeneral.of(DEFENSE, unit -> true, \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f388871ab07f443bb05168d8c4b9557c3b603f5"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2723, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}