{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMTk0NDMx", "number": 6187, "title": "Optimize findMaxLandMassSize() which can take 10% of AI time.", "bodyText": "Optimize findMaxLandMassSize() which can take 10% of AI time.\nThis change optimizes findMaxLandMassSize() by reducing the amount of work needed to do. The main difference is we now keep track of land territories already processed so that we don't need to start new searches from them.\nThis creates a new BreadthFirstSearch class that takes out the BFS implementation I implemented earlier for finding capitals, so that it can be re-used here.\nIt also fixes a correctness issue with finding the max land size - the previous search would only search up to a distance of 6. The new implementation does not have this limitation.\nOn Domination 1914 map, which has a lot of territories, this saves about 50 seconds of CPU time over a round of an all-AI game.\nFunctional Changes\n\n[] New map or map update\n[] New Feature\n[] Feature update or enhancement\n[] Feature Removal\n[] Code Cleanup or refactor\n[] Configuration Change\n[] Problem fix:  \n[X] Other: Optimization\nTesting\nTested manually on a game of Domination 1914 and profiled the game.", "createdAt": "2020-04-11T14:02:33Z", "url": "https://github.com/triplea-game/triplea/pull/6187", "merged": true, "mergeCommit": {"oid": "29d1378299d867f59c087b64a26577d941cbc9bc"}, "closed": true, "closedAt": "2020-04-16T21:54:05Z", "author": {"login": "asvitkine"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWmAISgH2gAyNDAyMTk0NDMxOmJiMWIzYWJmNzhjN2M5OGFjY2ZjZjUyMGQ1YmM4ZmU3ZWU2Nzg2M2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYMNkogFqTM5NDYwMTYyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bb1b3abf78c7c98accfcf520d5bc8fe7ee67863c", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/bb1b3abf78c7c98accfcf520d5bc8fe7ee67863c", "committedDate": "2020-04-11T13:48:57Z", "message": "Optimize findMaxLandMassSize() which can take 10% of AI time.\n\nThis change optimized findMaxLandMassSize() by reducing the amount\nof work needed to do. The main difference is we now keep track of\nland territories already processed so that we don't need to start\nnew search from them.\n\nThis creates a new BreadthFirstSearch class that takes out the\nBFS implementation I implemented earlier for finding capitals, so\nthat it can be re-used here.\n\nIt also fixes a correctness issue with finding the max land size -\nthe previous search would only search up to a distance of 6. The\nnew implementation does not have this limitation.\n\nOn Domination 1914 map, which has a lot of territories, this saves\nabout 50 seconds of CPU time over a turn of an all-AI game."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f771929c77c96d9c3fce9930dfdff12a5e47063", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/9f771929c77c96d9c3fce9930dfdff12a5e47063", "committedDate": "2020-04-11T13:58:47Z", "message": "Optimize findMaxLandMassSize() which can take 10% of AI time.\n\nThis change optimized findMaxLandMassSize() by reducing the amount\nof work needed to do. The main difference is we now keep track of\nland territories already processed so that we don't need to start\nnew search from them.\n\nThis creates a new BreadthFirstSearch class that takes out the\nBFS implementation I implemented earlier for finding capitals, so\nthat it can be re-used here.\n\nIt also fixes a correctness issue with finding the max land size -\nthe previous search would only search up to a distance of 6. The\nnew implementation does not have this limitation.\n\nOn Domination 1914 map, which has a lot of territories, this saves\nabout 50 seconds of CPU time over a turn of an all-AI game."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0868bb8ea82ddc52417abccc5264b3ac71beaec4", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/0868bb8ea82ddc52417abccc5264b3ac71beaec4", "committedDate": "2020-04-11T14:00:14Z", "message": "."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzY5MDg3", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-391769087", "createdAt": "2020-04-11T14:04:05Z", "commit": {"oid": "0868bb8ea82ddc52417abccc5264b3ac71beaec4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDowNDowNVrOGENc1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDowNDowNVrOGENc1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2Nzg2MA==", "bodyText": "Method search has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407067860", "createdAt": "2020-04-11T14:04:05Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import lombok.Getter;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  private final GameMap map;\n+  @Getter private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> cond;\n+\n+  public BreadthFirstSearch(final Territory startTerritory, final Predicate<Territory> cond) {\n+    this.map = startTerritory.getData().getMap();\n+    this.visited = new HashSet<Territory>(List.of(startTerritory));\n+    this.territoriesToCheck = new ArrayDeque<Territory>(List.of(startTerritory));\n+    this.cond = cond;\n+  }\n+\n+  public BreadthFirstSearch(final Territory startTerritory) {\n+    this(startTerritory, Matches.always());\n+  }\n+\n+  /**\n+   * Called when a new territory is encountered. Can be overridden to provide custom search\n+   * behavior.\n+   *\n+   * @param territory The new territory.\n+   */\n+  public void visit(final Territory territory) {}\n+\n+  /**\n+   * Called after all territories within the specified distance have been searched. Can be\n+   * overridden to terminate the search.\n+   *\n+   * @param distanceSearched The current distance searched\n+   * @return Whether the search should continue.\n+   */\n+  public boolean shouldContinueSearch(final int distanceSearched) {\n+    return true;\n+  }\n+\n+  /**\n+   * Performs the search. It will end when either all territories have been visited or\n+   * shouldContinueSearch() returns false.\n+   */\n+  public void search() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0868bb8ea82ddc52417abccc5264b3ac71beaec4"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13808f1e9d2070362f30af3cc25caa04fd294b04", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/13808f1e9d2070362f30af3cc25caa04fd294b04", "committedDate": "2020-04-11T14:48:30Z", "message": "Add a unit test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "733070c1a7715c9e0e78103128a4e46bc1efac49", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/733070c1a7715c9e0e78103128a4e46bc1efac49", "committedDate": "2020-04-11T15:06:25Z", "message": "Make a helper function to reduce complexity."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzczOTQ4", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-391773948", "createdAt": "2020-04-11T15:08:08Z", "commit": {"oid": "733070c1a7715c9e0e78103128a4e46bc1efac49"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNTowODowOVrOGEN2qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNTowODowOVrOGEN2qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NDQ3Mw==", "bodyText": "Method search has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407074473", "createdAt": "2020-04-11T15:08:09Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import lombok.Getter;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  private final GameMap map;\n+  @Getter private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> cond;\n+\n+  public BreadthFirstSearch(final Territory startTerritory, final Predicate<Territory> cond) {\n+    this.map = startTerritory.getData().getMap();\n+    this.visited = new HashSet<Territory>(List.of(startTerritory));\n+    this.territoriesToCheck = new ArrayDeque<Territory>(List.of(startTerritory));\n+    this.cond = cond;\n+  }\n+\n+  public BreadthFirstSearch(final Territory startTerritory) {\n+    this(startTerritory, Matches.always());\n+  }\n+\n+  /**\n+   * Called when a new territory is encountered. Can be overridden to provide custom search\n+   * behavior.\n+   *\n+   * @param territory The new territory.\n+   */\n+  public void visit(final Territory territory) {}\n+\n+  /**\n+   * Called after all territories within the specified distance have been searched. Can be\n+   * overridden to terminate the search.\n+   *\n+   * @param distanceSearched The current distance searched\n+   * @return Whether the search should continue.\n+   */\n+  public boolean shouldContinueSearch(final int distanceSearched) {\n+    return true;\n+  }\n+\n+  /**\n+   * Performs the search. It will end when either all territories have been visited or\n+   * shouldContinueSearch() returns false.\n+   */\n+  public void search() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "733070c1a7715c9e0e78103128a4e46bc1efac49"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/f73524b0410aa2108ea233c12c6565e711ea69f4", "committedDate": "2020-04-11T15:21:59Z", "message": "Try to reduce complexity to appease codeclimate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzg3NDE0", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-391787414", "createdAt": "2020-04-11T17:58:16Z", "commit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzo1ODoxNlrOGEO8DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoxNjo0M1rOGEPDrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjIzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                this.visited = new HashSet<Territory>(List.of(startTerritory));\n          \n          \n            \n                this.visited = new HashSet<>(List.of(startTerritory));", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407092236", "createdAt": "2020-04-11T17:58:16Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import lombok.Getter;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  private final GameMap map;\n+  @Getter private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> cond;\n+\n+  public BreadthFirstSearch(final Territory startTerritory, final Predicate<Territory> cond) {\n+    this.map = startTerritory.getData().getMap();\n+    this.visited = new HashSet<Territory>(List.of(startTerritory));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjI2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                this.territoriesToCheck = new ArrayDeque<Territory>(List.of(startTerritory));\n          \n          \n            \n                this.territoriesToCheck = new ArrayDeque<>(List.of(startTerritory));", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407092261", "createdAt": "2020-04-11T17:58:23Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import lombok.Getter;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  private final GameMap map;\n+  @Getter private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> cond;\n+\n+  public BreadthFirstSearch(final Territory startTerritory, final Predicate<Territory> cond) {\n+    this.map = startTerritory.getData().getMap();\n+    this.visited = new HashSet<Territory>(List.of(startTerritory));\n+    this.territoriesToCheck = new ArrayDeque<Territory>(List.of(startTerritory));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NDE0Ng==", "bodyText": "Perhaps worth clarifying:\nThe reason the implementation is slower is because it tries to parallelize checking neighbours, which adds too much overhead for the ususally small amount of neighbours + it actually copies the collection instead of just returning it.\nI'd suggest to clarify that a bit why it is much slower in this comment.\nMaybe you can even drop the parallelism entirely, I'm not really convinced it actually provides a speed boost elsewhere.\nI introduced this change in #4077 (apparently) because it yielded some performance gains for route-drawing, but I haven't really tested anything else as far as I can remember.\nThe GameMap class is a mess (I'm currently looking at it) and uses way too much recursion in combination with code constructs that aren't really supposed to be run recursively like this (Streams that are collected and then re-streamed in another layer add way too much overhead)", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407094146", "createdAt": "2020-04-11T18:16:13Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import lombok.Getter;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  private final GameMap map;\n+  @Getter private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> cond;\n+\n+  public BreadthFirstSearch(final Territory startTerritory, final Predicate<Territory> cond) {\n+    this.map = startTerritory.getData().getMap();\n+    this.visited = new HashSet<Territory>(List.of(startTerritory));\n+    this.territoriesToCheck = new ArrayDeque<Territory>(List.of(startTerritory));\n+    this.cond = cond;\n+  }\n+\n+  public BreadthFirstSearch(final Territory startTerritory) {\n+    this(startTerritory, Matches.always());\n+  }\n+\n+  /**\n+   * Called when a new territory is encountered. Can be overridden to provide custom search\n+   * behavior.\n+   *\n+   * @param territory The new territory.\n+   */\n+  public void visit(final Territory territory) {}\n+\n+  /**\n+   * Called after all territories within the specified distance have been searched. Can be\n+   * overridden to terminate the search.\n+   *\n+   * @param distanceSearched The current distance searched\n+   * @return Whether the search should continue.\n+   */\n+  public boolean shouldContinueSearch(final int distanceSearched) {\n+    return true;\n+  }\n+\n+  /**\n+   * Performs the search. It will end when either all territories have been visited or\n+   * shouldContinueSearch() returns false.\n+   */\n+  public void search() {\n+    // Since we process territories in order of distance, we can keep track of the last territory\n+    // at the current distance that's in the territoriesToCheck queue. When we encounter it, we\n+    // increment the distance and update lastTerritoryAtCurrentDistance.\n+    int currentDistance = 0;\n+    Territory lastTerritoryAtCurrentDistance = territoriesToCheck.peekLast();\n+    while (!territoriesToCheck.isEmpty()) {\n+      final Territory territory = checkNextTerritory();\n+\n+      // If we just processed the last territory at the current distance, increment the distance\n+      // and set the territory at which we need to update it again to be the last one added.\n+      if (ObjectUtils.referenceEquals(territory, lastTerritoryAtCurrentDistance)) {\n+        currentDistance++;\n+        if (!shouldContinueSearch(currentDistance)) {\n+          return;\n+        }\n+        lastTerritoryAtCurrentDistance = territoriesToCheck.peekLast();\n+      }\n+    }\n+  }\n+\n+  private Territory checkNextTerritory() {\n+    final Territory territory = territoriesToCheck.removeFirst();\n+    // Note: We don't pass cond to getNeighbors() because that implementation is much slower.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NDE5MQ==", "bodyText": "Ok, I didn't know you could nest classes inside methods \ud83d\ude2e", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407094191", "createdAt": "2020-04-11T18:16:43Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/util/ProTerritoryValueUtils.java", "diffHunk": "@@ -177,19 +176,31 @@ public static double findTerritoryAttackValue(\n     return territoryValueMap;\n   }\n \n-  private static int findMaxLandMassSize(final GamePlayer player) {\n-    int maxLandMassSize = 1;\n+  protected static int findMaxLandMassSize(final GamePlayer player) {\n     final GameData data = player.getData();\n+    final Predicate<Territory> cond = ProMatches.territoryCanPotentiallyMoveLandUnits(player, data);\n+    class LandMassFinder extends BreadthFirstSearch {\n+      int landMassSize = 0;\n+\n+      LandMassFinder(final Territory startTerritory) {\n+        super(startTerritory, cond);\n+      }\n+\n+      @Override\n+      public void visit(final Territory territory) {\n+        landMassSize++;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzg5MTM5", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-391789139", "createdAt": "2020-04-11T18:21:09Z", "commit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoyMTowOVrOGEPFjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoyMTowOVrOGEPFjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NDY3MA==", "bodyText": "In java getters and setters are the preffered way of modifying fields, even on this small scale.\nYou can use lomboks @Getter and @Setter annotations if you want", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407094670", "createdAt": "2020-04-11T18:21:09Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/util/ProTerritoryValueUtils.java", "diffHunk": "@@ -177,19 +176,31 @@ public static double findTerritoryAttackValue(\n     return territoryValueMap;\n   }\n \n-  private static int findMaxLandMassSize(final GamePlayer player) {\n-    int maxLandMassSize = 1;\n+  protected static int findMaxLandMassSize(final GamePlayer player) {\n     final GameData data = player.getData();\n+    final Predicate<Territory> cond = ProMatches.territoryCanPotentiallyMoveLandUnits(player, data);\n+    class LandMassFinder extends BreadthFirstSearch {\n+      int landMassSize = 0;\n+\n+      LandMassFinder(final Territory startTerritory) {\n+        super(startTerritory, cond);\n+      }\n+\n+      @Override\n+      public void visit(final Territory territory) {\n+        landMassSize++;\n+      }\n+    }\n+\n+    int maxLandMassSize = 1;\n+    final var fullVisited = new HashSet<Territory>();\n     for (final Territory t : data.getMap().getTerritories()) {\n-      if (!t.isWater()) {\n-        final int landMassSize =\n-            1\n-                + data.getMap()\n-                    .getNeighbors(\n-                        t, 6, ProMatches.territoryCanPotentiallyMoveLandUnits(player, data))\n-                    .size();\n-        if (landMassSize > maxLandMassSize) {\n-          maxLandMassSize = landMassSize;\n+      if (!t.isWater() && !fullVisited.contains(t)) {\n+        final LandMassFinder finder = new LandMassFinder(t);\n+        finder.search();\n+        fullVisited.addAll(finder.getVisited());\n+        if (finder.landMassSize > maxLandMassSize) {\n+          maxLandMassSize = finder.landMassSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c21581e7f4208405d982895109537d874f6dece4", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/c21581e7f4208405d982895109537d874f6dece4", "committedDate": "2020-04-11T20:02:13Z", "message": "Update game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java\n\nCo-Authored-By: RoiEX <8350879+RoiEXLab@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc97a2898bdb60c05b3f31e4d6d797f187c29375", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/cc97a2898bdb60c05b3f31e4d6d797f187c29375", "committedDate": "2020-04-11T20:02:24Z", "message": "Update game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java\n\nCo-Authored-By: RoiEX <8350879+RoiEXLab@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzk3Nzcz", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-391797773", "createdAt": "2020-04-11T20:22:06Z", "commit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDoyMjowNlrOGEP1GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDozNDoyM1rOGEP55w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNjg0MQ==", "bodyText": "What do you think of using a var here in order to spell out the variable name instead? eg:\nvar breadthFirstSearch =  new BreadthFirstSearch(startTerritory) {", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407106841", "createdAt": "2020-04-11T20:22:06Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/util/ProTerritoryValueUtils.java", "diffHunk": "@@ -448,39 +459,26 @@ private static double findWaterValue(\n    */\n   protected static Collection<Territory> findNearbyEnemyCapitalsAndFactories(\n       final Territory startTerritory, final Set<Territory> enemyCapitalsAndFactories) {\n-    final GameMap map = startTerritory.getData().getMap();\n-    // Use breadth first search to traverse territories, keeping track of which have already been\n-    // visited and which territories from the target list have  been found.\n     final var found = new HashSet<Territory>();\n-    final var visited = new HashSet<Territory>(List.of(startTerritory));\n-    final var territoriesToCheck = new ArrayDeque<Territory>(List.of(startTerritory));\n-\n-    // Since we process territories in order of distance, we can keep track of the last territory\n-    // at the current distance that's in the territoriesToCheck queue. When we encounter it, we\n-    // increment the distance and update lastTerritoryAtCurrentDistance.\n-    int distance = 0;\n-    Territory lastTerritoryAtCurrentDistance = startTerritory;\n-    while (!territoriesToCheck.isEmpty()) {\n-      final Territory node = territoriesToCheck.removeFirst();\n-      for (final Territory neighbor : map.getNeighbors(node)) {\n-        if (visited.add(neighbor)) {\n-          territoriesToCheck.add(neighbor);\n-          if (enemyCapitalsAndFactories.contains(neighbor)) {\n-            found.add(neighbor);\n+    final BreadthFirstSearch bfs =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNjg4NA==", "bodyText": "Good to see the test case, can we increase the number of tests and thoroughness? Are the edge cases tested?", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407106884", "createdAt": "2020-04-11T20:22:36Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/ai/pro/util/ProTerritoryValueUtilsTest.java", "diffHunk": "@@ -62,4 +64,14 @@ void testFindNearbyEnemyCapitalsAndFactoriesNoneWithinDistance9() {\n         result,\n         containsInAnyOrder(northJapan));\n   }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQ1NA==", "bodyText": "Can we make this method abstract? Overriding concrete methods can get pretty complex in a hurry. Another strategy that would avoid inheritance completely would be to pass in a constructor object that defines this behavior. EG:\nprivate final Consumer<Territory> visitor;\n\n  public void visit(final Territory territory) {\n      visitor.accept(terrritory);\n}\n\nLooking at the other methods, it looks like we might be providing a lot of default behavior but any/all of it can be overriden. If this behavior were injected it could be more deterministic and easier to follow.  Essentially you would know have to know about instance types and the states of objects to know how they would function, WDYT?", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407107454", "createdAt": "2020-04-11T20:28:56Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import lombok.Getter;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  private final GameMap map;\n+  @Getter private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> cond;\n+\n+  public BreadthFirstSearch(final Territory startTerritory, final Predicate<Territory> cond) {\n+    this.map = startTerritory.getData().getMap();\n+    this.visited = new HashSet<Territory>(List.of(startTerritory));\n+    this.territoriesToCheck = new ArrayDeque<Territory>(List.of(startTerritory));\n+    this.cond = cond;\n+  }\n+\n+  public BreadthFirstSearch(final Territory startTerritory) {\n+    this(startTerritory, Matches.always());\n+  }\n+\n+  /**\n+   * Called when a new territory is encountered. Can be overridden to provide custom search\n+   * behavior.\n+   *\n+   * @param territory The new territory.\n+   */\n+  public void visit(final Territory territory) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODA3MQ==", "bodyText": "What do you think of having finder.seach() returning the visited list? This would avoid the void method call, and avoid the user of finder from knowing about the implementation detail that finder.search sets a value that can be returned by getVisited (arguably better/encapsulation)", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407108071", "createdAt": "2020-04-11T20:34:23Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/util/ProTerritoryValueUtils.java", "diffHunk": "@@ -177,19 +176,31 @@ public static double findTerritoryAttackValue(\n     return territoryValueMap;\n   }\n \n-  private static int findMaxLandMassSize(final GamePlayer player) {\n-    int maxLandMassSize = 1;\n+  protected static int findMaxLandMassSize(final GamePlayer player) {\n     final GameData data = player.getData();\n+    final Predicate<Territory> cond = ProMatches.territoryCanPotentiallyMoveLandUnits(player, data);\n+    class LandMassFinder extends BreadthFirstSearch {\n+      int landMassSize = 0;\n+\n+      LandMassFinder(final Territory startTerritory) {\n+        super(startTerritory, cond);\n+      }\n+\n+      @Override\n+      public void visit(final Territory territory) {\n+        landMassSize++;\n+      }\n+    }\n+\n+    int maxLandMassSize = 1;\n+    final var fullVisited = new HashSet<Territory>();\n     for (final Territory t : data.getMap().getTerritories()) {\n-      if (!t.isWater()) {\n-        final int landMassSize =\n-            1\n-                + data.getMap()\n-                    .getNeighbors(\n-                        t, 6, ProMatches.territoryCanPotentiallyMoveLandUnits(player, data))\n-                    .size();\n-        if (landMassSize > maxLandMassSize) {\n-          maxLandMassSize = landMassSize;\n+      if (!t.isWater() && !fullVisited.contains(t)) {\n+        final LandMassFinder finder = new LandMassFinder(t);\n+        finder.search();\n+        fullVisited.addAll(finder.getVisited());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODU0NDMx", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-391854431", "createdAt": "2020-04-12T12:53:31Z", "commit": {"oid": "cc97a2898bdb60c05b3f31e4d6d797f187c29375"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMjo1MzozMlrOGEVKiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMjo1MzozMlrOGEVKiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5NDI1MQ==", "bodyText": "Just a random thought I had.\nThis class would be super usefule to optimize GameMap#getNeighbors(Set, Set, int, Predicate), which basically does the same thing here, just with less than optimal recursion.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407194251", "createdAt": "2020-04-12T12:53:32Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import lombok.Getter;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc97a2898bdb60c05b3f31e4d6d797f187c29375"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "365570c50b99dec6e4e446f76392c04d605ec026", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/365570c50b99dec6e4e446f76392c04d605ec026", "committedDate": "2020-04-14T03:30:18Z", "message": "Refactors:\n  - Use a visitor object instead of subclassing.\n  - Use an int array to access the int from anon class.\n  - Don't expose visited map."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f027f2a8efd438944dee84fb36a838b9606498be", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/f027f2a8efd438944dee84fb36a838b9606498be", "committedDate": "2020-04-14T03:31:32Z", "message": "Merge branch 'opt_it' of https://github.com/asvitkine/triplea into opt_it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTgxMDM2", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-392581036", "createdAt": "2020-04-14T03:33:15Z", "commit": {"oid": "f027f2a8efd438944dee84fb36a838b9606498be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzozMzoxNVrOGE88ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzozMzoxNVrOGE88ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NTk4OA==", "bodyText": "Method traverse has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407845988", "createdAt": "2020-04-14T03:33:15Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  public abstract static class Visitor {\n+    /**\n+     * Called when a new territory is encountered. Can be overridden to provide custom search\n+     * behavior.\n+     *\n+     * @param territory The new territory.\n+     */\n+    public abstract void visit(final Territory territory);\n+\n+    /**\n+     * Called after all territories within the specified distance have been searched. Can be\n+     * overridden to terminate the search.\n+     *\n+     * @param distanceSearched The current distance searched\n+     * @return Whether the search should continue.\n+     */\n+    public boolean shouldContinueSearch(final int distanceSearched) {\n+      return true;\n+    }\n+  }\n+\n+  private final GameMap map;\n+  private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> cond;\n+\n+  public BreadthFirstSearch(final Territory startTerritory, final Predicate<Territory> cond) {\n+    this.map = startTerritory.getData().getMap();\n+    this.visited = new HashSet<>(List.of(startTerritory));\n+    this.territoriesToCheck = new ArrayDeque<>(List.of(startTerritory));\n+    this.cond = cond;\n+  }\n+\n+  public BreadthFirstSearch(final Territory startTerritory) {\n+    this(startTerritory, Matches.always());\n+  }\n+\n+  /**\n+   * Performs the search. It will end when either all territories have been visited or\n+   * shouldContinueSearch() returns false.\n+   *\n+   * @param visitor The visitor object to customize the search.\n+   */\n+  public void traverse(final Visitor visitor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f027f2a8efd438944dee84fb36a838b9606498be"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6d76d0338bf70ba8e58459be16f2bb58350b83b", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/b6d76d0338bf70ba8e58459be16f2bb58350b83b", "committedDate": "2020-04-14T03:50:27Z", "message": "Fix style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTg1OTcx", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-392585971", "createdAt": "2020-04-14T03:52:05Z", "commit": {"oid": "b6d76d0338bf70ba8e58459be16f2bb58350b83b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzo1MjowNlrOGE9OgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzo1MjowNlrOGE9OgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1MDYyNQ==", "bodyText": "Method traverse has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407850625", "createdAt": "2020-04-14T03:52:06Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  public abstract static class Visitor {\n+    /**\n+     * Called when a new territory is encountered. Can be overridden to provide custom search\n+     * behavior.\n+     *\n+     * @param territory The new territory.\n+     */\n+    public abstract void visit(Territory territory);\n+\n+    /**\n+     * Called after all territories within the specified distance have been searched. Can be\n+     * overridden to terminate the search.\n+     *\n+     * @param distanceSearched The current distance searched\n+     * @return Whether the search should continue.\n+     */\n+    public boolean shouldContinueSearch(final int distanceSearched) {\n+      return true;\n+    }\n+  }\n+\n+  private final GameMap map;\n+  private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> cond;\n+\n+  public BreadthFirstSearch(final Territory startTerritory, final Predicate<Territory> cond) {\n+    this.map = startTerritory.getData().getMap();\n+    this.visited = new HashSet<>(List.of(startTerritory));\n+    this.territoriesToCheck = new ArrayDeque<>(List.of(startTerritory));\n+    this.cond = cond;\n+  }\n+\n+  public BreadthFirstSearch(final Territory startTerritory) {\n+    this(startTerritory, Matches.always());\n+  }\n+\n+  /**\n+   * Performs the search. It will end when either all territories have been visited or\n+   * shouldContinueSearch() returns false.\n+   *\n+   * @param visitor The visitor object to customize the search.\n+   */\n+  public void traverse(final Visitor visitor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d76d0338bf70ba8e58459be16f2bb58350b83b"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTg2MjE4", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-392586218", "createdAt": "2020-04-14T03:52:59Z", "commit": {"oid": "b6d76d0338bf70ba8e58459be16f2bb58350b83b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzo1Mjo1OVrOGE9PZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNDowMDowMFrOGE9Wug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1MDg1Mg==", "bodyText": "nit 'can be overridden' -> 'must be overriden'\nThe javadoc might be slightly out of date since moving.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407850852", "createdAt": "2020-04-14T03:52:59Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  public abstract static class Visitor {\n+    /**\n+     * Called when a new territory is encountered. Can be overridden to provide custom search", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d76d0338bf70ba8e58459be16f2bb58350b83b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1MTU2OA==", "bodyText": "cond is the same as continueSearchCondition?  The variable strikes me as a bit cryptic, any thoughts if it could be more descriptive?", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407851568", "createdAt": "2020-04-14T03:55:41Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  public abstract static class Visitor {\n+    /**\n+     * Called when a new territory is encountered. Can be overridden to provide custom search\n+     * behavior.\n+     *\n+     * @param territory The new territory.\n+     */\n+    public abstract void visit(Territory territory);\n+\n+    /**\n+     * Called after all territories within the specified distance have been searched. Can be\n+     * overridden to terminate the search.\n+     *\n+     * @param distanceSearched The current distance searched\n+     * @return Whether the search should continue.\n+     */\n+    public boolean shouldContinueSearch(final int distanceSearched) {\n+      return true;\n+    }\n+  }\n+\n+  private final GameMap map;\n+  private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> cond;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d76d0338bf70ba8e58459be16f2bb58350b83b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1MjM5NA==", "bodyText": "What do you think of directly returning here?\nie:\nreturn distanceSearched < MIN_FACTORY_CHECK_DISTANCE || found.isEmpty()", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407852394", "createdAt": "2020-04-14T03:58:45Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/util/ProTerritoryValueUtils.java", "diffHunk": "@@ -448,39 +456,25 @@ private static double findWaterValue(\n    */\n   protected static Collection<Territory> findNearbyEnemyCapitalsAndFactories(\n       final Territory startTerritory, final Set<Territory> enemyCapitalsAndFactories) {\n-    final GameMap map = startTerritory.getData().getMap();\n-    // Use breadth first search to traverse territories, keeping track of which have already been\n-    // visited and which territories from the target list have  been found.\n     final var found = new HashSet<Territory>();\n-    final var visited = new HashSet<Territory>(List.of(startTerritory));\n-    final var territoriesToCheck = new ArrayDeque<Territory>(List.of(startTerritory));\n-\n-    // Since we process territories in order of distance, we can keep track of the last territory\n-    // at the current distance that's in the territoriesToCheck queue. When we encounter it, we\n-    // increment the distance and update lastTerritoryAtCurrentDistance.\n-    int distance = 0;\n-    Territory lastTerritoryAtCurrentDistance = startTerritory;\n-    while (!territoriesToCheck.isEmpty()) {\n-      final Territory node = territoriesToCheck.removeFirst();\n-      for (final Territory neighbor : map.getNeighbors(node)) {\n-        if (visited.add(neighbor)) {\n-          territoriesToCheck.add(neighbor);\n-          if (enemyCapitalsAndFactories.contains(neighbor)) {\n-            found.add(neighbor);\n-          }\n-        }\n-      }\n-\n-      // If we just processed the last territory at the current distance, increment the distance\n-      // and set the territory at which we need to update it again to be the last one added.\n-      if (ObjectUtils.referenceEquals(node, lastTerritoryAtCurrentDistance)) {\n-        distance++;\n-        if (distance >= MIN_FACTORY_CHECK_DISTANCE && !found.isEmpty()) {\n-          break;\n-        }\n-        lastTerritoryAtCurrentDistance = territoriesToCheck.peekLast();\n-      }\n-    }\n+    new BreadthFirstSearch(startTerritory)\n+        .traverse(\n+            new BreadthFirstSearch.Visitor() {\n+              @Override\n+              public void visit(final Territory territory) {\n+                if (enemyCapitalsAndFactories.contains(territory)) {\n+                  found.add(territory);\n+                }\n+              }\n+\n+              @Override\n+              public boolean shouldContinueSearch(final int distanceSearched) {\n+                if (distanceSearched >= MIN_FACTORY_CHECK_DISTANCE && !found.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d76d0338bf70ba8e58459be16f2bb58350b83b"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1MjczMA==", "bodyText": "@asvitkine thoughts on if there are additional test cases to make sure the testing is thorough?\nPerhaps the not found case, or the find at the zero distance, or cases where we should find but it's past max distance?", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r407852730", "createdAt": "2020-04-14T04:00:00Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/ai/pro/util/ProTerritoryValueUtilsTest.java", "diffHunk": "@@ -62,4 +64,14 @@ void testFindNearbyEnemyCapitalsAndFactoriesNoneWithinDistance9() {\n         result,\n         containsInAnyOrder(northJapan));\n   }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNjg4NA=="}, "originalCommit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57b2218e4d5d835bc31474d4fbe3331c16391dc1", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/57b2218e4d5d835bc31474d4fbe3331c16391dc1", "committedDate": "2020-04-16T00:32:40Z", "message": "Add a couple more tests and address comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MjE3Njgy", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-394217682", "createdAt": "2020-04-16T00:14:19Z", "commit": {"oid": "b6d76d0338bf70ba8e58459be16f2bb58350b83b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDoxNDoxOVrOGGP_GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDozMzoyOFrOGGQUeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjU1Mg==", "bodyText": "Done.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r409206552", "createdAt": "2020-04-16T00:14:19Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/util/ProTerritoryValueUtils.java", "diffHunk": "@@ -448,39 +456,25 @@ private static double findWaterValue(\n    */\n   protected static Collection<Territory> findNearbyEnemyCapitalsAndFactories(\n       final Territory startTerritory, final Set<Territory> enemyCapitalsAndFactories) {\n-    final GameMap map = startTerritory.getData().getMap();\n-    // Use breadth first search to traverse territories, keeping track of which have already been\n-    // visited and which territories from the target list have  been found.\n     final var found = new HashSet<Territory>();\n-    final var visited = new HashSet<Territory>(List.of(startTerritory));\n-    final var territoriesToCheck = new ArrayDeque<Territory>(List.of(startTerritory));\n-\n-    // Since we process territories in order of distance, we can keep track of the last territory\n-    // at the current distance that's in the territoriesToCheck queue. When we encounter it, we\n-    // increment the distance and update lastTerritoryAtCurrentDistance.\n-    int distance = 0;\n-    Territory lastTerritoryAtCurrentDistance = startTerritory;\n-    while (!territoriesToCheck.isEmpty()) {\n-      final Territory node = territoriesToCheck.removeFirst();\n-      for (final Territory neighbor : map.getNeighbors(node)) {\n-        if (visited.add(neighbor)) {\n-          territoriesToCheck.add(neighbor);\n-          if (enemyCapitalsAndFactories.contains(neighbor)) {\n-            found.add(neighbor);\n-          }\n-        }\n-      }\n-\n-      // If we just processed the last territory at the current distance, increment the distance\n-      // and set the territory at which we need to update it again to be the last one added.\n-      if (ObjectUtils.referenceEquals(node, lastTerritoryAtCurrentDistance)) {\n-        distance++;\n-        if (distance >= MIN_FACTORY_CHECK_DISTANCE && !found.isEmpty()) {\n-          break;\n-        }\n-        lastTerritoryAtCurrentDistance = territoriesToCheck.peekLast();\n-      }\n-    }\n+    new BreadthFirstSearch(startTerritory)\n+        .traverse(\n+            new BreadthFirstSearch.Visitor() {\n+              @Override\n+              public void visit(final Territory territory) {\n+                if (enemyCapitalsAndFactories.contains(territory)) {\n+                  found.add(territory);\n+                }\n+              }\n+\n+              @Override\n+              public boolean shouldContinueSearch(final int distanceSearched) {\n+                if (distanceSearched >= MIN_FACTORY_CHECK_DISTANCE && !found.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1MjM5NA=="}, "originalCommit": {"oid": "b6d76d0338bf70ba8e58459be16f2bb58350b83b"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjY1Mw==", "bodyText": "Done.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r409206653", "createdAt": "2020-04-16T00:14:38Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  public abstract static class Visitor {\n+    /**\n+     * Called when a new territory is encountered. Can be overridden to provide custom search", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1MDg1Mg=="}, "originalCommit": {"oid": "b6d76d0338bf70ba8e58459be16f2bb58350b83b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwODM0OA==", "bodyText": "Changed to neighborCondition and added Javadoc for the constructor param.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r409208348", "createdAt": "2020-04-16T00:20:18Z", "author": {"login": "asvitkine"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to be sub-classed, with methods visit()\n+ * and shouldContinueSearch() that can be overridden to customize the behavior.\n+ */\n+public class BreadthFirstSearch {\n+  public abstract static class Visitor {\n+    /**\n+     * Called when a new territory is encountered. Can be overridden to provide custom search\n+     * behavior.\n+     *\n+     * @param territory The new territory.\n+     */\n+    public abstract void visit(Territory territory);\n+\n+    /**\n+     * Called after all territories within the specified distance have been searched. Can be\n+     * overridden to terminate the search.\n+     *\n+     * @param distanceSearched The current distance searched\n+     * @return Whether the search should continue.\n+     */\n+    public boolean shouldContinueSearch(final int distanceSearched) {\n+      return true;\n+    }\n+  }\n+\n+  private final GameMap map;\n+  private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> cond;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1MTU2OA=="}, "originalCommit": {"oid": "b6d76d0338bf70ba8e58459be16f2bb58350b83b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxMjAyNQ==", "bodyText": "findMaxLandMassSize() doesn't really have parameters, so the only way to try different cases is with different maps.\nI added cases for Revised and Minimap (which is a single small continent). For the latter, I added its XML file to test data. Let me know if you think this is OK.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r409212025", "createdAt": "2020-04-16T00:33:28Z", "author": {"login": "asvitkine"}, "path": "game-core/src/test/java/games/strategy/triplea/ai/pro/util/ProTerritoryValueUtilsTest.java", "diffHunk": "@@ -62,4 +64,14 @@ void testFindNearbyEnemyCapitalsAndFactoriesNoneWithinDistance9() {\n         result,\n         containsInAnyOrder(northJapan));\n   }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNjg4NA=="}, "originalCommit": {"oid": "f73524b0410aa2108ea233c12c6565e711ea69f4"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0Mjg3MjYz", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-394287263", "createdAt": "2020-04-16T04:17:18Z", "commit": {"oid": "57b2218e4d5d835bc31474d4fbe3331c16391dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxNzoxOFrOGGT9DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxNzoxOFrOGGT9DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MTU2NA==", "bodyText": "Method traverse has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r409271564", "createdAt": "2020-04-16T04:17:18Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to take a Visitor object with methods\n+ * visit() and shouldContinueSearch() for customizing the behavior.\n+ */\n+public final class BreadthFirstSearch {\n+  public abstract static class Visitor {\n+    /**\n+     * Called when a new territory is encountered.\n+     *\n+     * @param territory The new territory.\n+     */\n+    public abstract void visit(Territory territory);\n+\n+    /**\n+     * Called after all territories within the specified distance have been searched. Can be\n+     * overridden to terminate the search.\n+     *\n+     * @param distanceSearched The current distance searched\n+     * @return Whether the search should continue.\n+     */\n+    public boolean shouldContinueSearch(final int distanceSearched) {\n+      return true;\n+    }\n+  }\n+\n+  private final GameMap map;\n+  private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> neighborCondition;\n+\n+  /**\n+   * @param startTerritory The territory from where to start the search.\n+   * @param neighborCondition Condition that neighboring territories must match to be considered\n+   *     neighbors.\n+   */\n+  public BreadthFirstSearch(\n+      final Territory startTerritory, final Predicate<Territory> neighborCondition) {\n+    this.map = startTerritory.getData().getMap();\n+    this.visited = new HashSet<>(List.of(startTerritory));\n+    this.territoriesToCheck = new ArrayDeque<>(List.of(startTerritory));\n+    this.neighborCondition = neighborCondition;\n+  }\n+\n+  public BreadthFirstSearch(final Territory startTerritory) {\n+    this(startTerritory, Matches.always());\n+  }\n+\n+  /**\n+   * Performs the search. It will end when either all territories have been visited or\n+   * shouldContinueSearch() returns false.\n+   *\n+   * @param visitor The visitor object to customize the search.\n+   */\n+  public void traverse(final Visitor visitor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57b2218e4d5d835bc31474d4fbe3331c16391dc1"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0Mjg4NzA1", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-394288705", "createdAt": "2020-04-16T04:22:38Z", "commit": {"oid": "57b2218e4d5d835bc31474d4fbe3331c16391dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyMjozOFrOGGUCXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyMjozOFrOGGUCXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjkyNg==", "bodyText": "side-note, I'm thinking to propose a convention that we end enums with a trailing comma and semi on the next line. This way adding elements adds just a new line.\nIn this case this would be:\nMINIMAP(\"minimap.xml\"),\n;\n\nAnother side-comment, the tests that require full map data are not necessarily ideal. They involve lots of moving pieces, it's not a proper unit test if we use them. There are some additional drawbacks. Long story short, we want to in the short term see if we consolidate how many test XMLs are in use, use as few as possible, eventually get to a place where game rules can be tested ad-infinitum without an actual XML", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r409272926", "createdAt": "2020-04-16T04:22:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/xml/TestMapGameData.java", "diffHunk": "@@ -38,7 +38,9 @@\n \n   GAME_EXAMPLE(\"GameExample.xml\"),\n \n-  TWW(\"Total_World_War_Dec1941.xml\");\n+  TWW(\"Total_World_War_Dec1941.xml\"),\n+\n+  MINIMAP(\"minimap.xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57b2218e4d5d835bc31474d4fbe3331c16391dc1"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0Mjg4OTE2", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-394288916", "createdAt": "2020-04-16T04:23:23Z", "commit": {"oid": "57b2218e4d5d835bc31474d4fbe3331c16391dc1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cadd29278795a501284c3a7157dde2d8049db583", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/cadd29278795a501284c3a7157dde2d8049db583", "committedDate": "2020-04-16T12:51:32Z", "message": "Remove tab chars."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NjAxNjI0", "url": "https://github.com/triplea-game/triplea/pull/6187#pullrequestreview-394601624", "createdAt": "2020-04-16T12:53:57Z", "commit": {"oid": "cadd29278795a501284c3a7157dde2d8049db583"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjo1Mzo1N1rOGGj1Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjo1Mzo1N1rOGGj1Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzMTczOA==", "bodyText": "Method traverse has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6187#discussion_r409531738", "createdAt": "2020-04-16T12:53:57Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/data/util/BreadthFirstSearch.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package games.strategy.engine.data.util;\n+\n+import games.strategy.engine.data.GameMap;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import org.triplea.java.ObjectUtils;\n+\n+/**\n+ * Implements Breadth First Search (BFS) to traverse / find territories. Since the search criteria\n+ * varies depending on the use case, the class is designed to take a Visitor object with methods\n+ * visit() and shouldContinueSearch() for customizing the behavior.\n+ */\n+public final class BreadthFirstSearch {\n+  public abstract static class Visitor {\n+    /**\n+     * Called when a new territory is encountered.\n+     *\n+     * @param territory The new territory.\n+     */\n+    public abstract void visit(Territory territory);\n+\n+    /**\n+     * Called after all territories within the specified distance have been searched. Can be\n+     * overridden to terminate the search.\n+     *\n+     * @param distanceSearched The current distance searched\n+     * @return Whether the search should continue.\n+     */\n+    public boolean shouldContinueSearch(final int distanceSearched) {\n+      return true;\n+    }\n+  }\n+\n+  private final GameMap map;\n+  private final Set<Territory> visited;\n+  private final ArrayDeque<Territory> territoriesToCheck;\n+  private final Predicate<Territory> neighborCondition;\n+\n+  /**\n+   * @param startTerritory The territory from where to start the search.\n+   * @param neighborCondition Condition that neighboring territories must match to be considered\n+   *     neighbors.\n+   */\n+  public BreadthFirstSearch(\n+      final Territory startTerritory, final Predicate<Territory> neighborCondition) {\n+    this.map = startTerritory.getData().getMap();\n+    this.visited = new HashSet<>(List.of(startTerritory));\n+    this.territoriesToCheck = new ArrayDeque<>(List.of(startTerritory));\n+    this.neighborCondition = neighborCondition;\n+  }\n+\n+  public BreadthFirstSearch(final Territory startTerritory) {\n+    this(startTerritory, Matches.always());\n+  }\n+\n+  /**\n+   * Performs the search. It will end when either all territories have been visited or\n+   * shouldContinueSearch() returns false.\n+   *\n+   * @param visitor The visitor object to customize the search.\n+   */\n+  public void traverse(final Visitor visitor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cadd29278795a501284c3a7157dde2d8049db583"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3654, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}