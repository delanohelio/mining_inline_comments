{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNzE5NDQ2", "number": 7584, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTo1MjozN1rOEiyekA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTo1MjozN1rOEiyekA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTE0MDY0OnYy", "diffSide": "RIGHT", "path": "java-extras/src/main/java/org/triplea/performance/PerfTimer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTo1MjozN1rOHQ156Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTo1MjozN1rOHQ156Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMjQ0MQ==", "bodyText": "In order to re-use code I would've done something like this:\ntime(() -> {\n  functionToTime.run();\n  return null;\n})", "url": "https://github.com/triplea-game/triplea/pull/7584#discussion_r487422441", "createdAt": "2020-09-12T15:52:37Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -61,10 +57,37 @@ public static PerfTimer startTimer(final String title) {\n    * @return the perf timer object\n    */\n   @SuppressWarnings(\"unused\")\n-  public static PerfTimer startTimer(final String title, final int reportingFrequency) {\n+  public static PerfTimer time(final String title, final int reportingFrequency) {\n     return new PerfTimer(title, reportingFrequency);\n   }\n \n+  @SuppressWarnings(\"unused\")\n+  public static PerfTimer time(final String title) {\n+    return time(title, 1);\n+  }\n+\n+  public static <T> T time(final String title, final ThrowingSupplier<T, ?> functionToTime) {\n+    final T value;\n+    try (PerfTimer timer = time(title)) {\n+      value = functionToTime.get();\n+    } catch (final Throwable throwable) {\n+      throw new IllegalStateException(\n+          \"Unexpected throwable in timed method: \" + throwable.getMessage(), throwable);\n+    }\n+    return value;\n+  }\n+\n+  public static void time(final String title, final ThrowingRunnable<?> functionToTime) {\n+    try (PerfTimer timer = time(title)) {\n+      try {\n+        functionToTime.run();\n+      } catch (final Throwable throwable) {\n+        throw new IllegalStateException(\n+            \"Unexpected throwable in timed method: \" + throwable.getMessage(), throwable);\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff50b9a90f9486d25e66a35a7d4d1d5226669857"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2940, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}