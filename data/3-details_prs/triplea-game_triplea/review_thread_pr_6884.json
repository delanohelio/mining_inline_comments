{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwODYxNTQ3", "number": 6884, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjowOTozOFrOEKVkwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjoxMDowNVrOEKVlDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjc0Njg5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/DefensiveSubsRetreat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjowOTozOFrOGrUZ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjowOTozOFrOGrUZ-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NjI4Mw==", "bodyText": "nit, any thoughts to use a ternary here to isolate the different parts of the 'if/else' block as much as possible?\nEG:\nString stepName =  battleState.getDefender().getName() + (Properties.getSubmersibleSubs(battleState.getGameData() ? SUBS_SUBMERGE : SUBS_WITHDRAW);\nreturn List.of(stepName);", "url": "https://github.com/triplea-game/triplea/pull/6884#discussion_r448076283", "createdAt": "2020-07-01T02:09:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/DefensiveSubsRetreat.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package games.strategy.triplea.delegate.battle.steps.retreat;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBS_SUBMERGE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBS_WITHDRAW;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStep.Order.SUB_DEFENSIVE_RETREAT_AFTER_BATTLE;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStep.Order.SUB_DEFENSIVE_RETREAT_BEFORE_BATTLE;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.RetreatType;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@AllArgsConstructor\n+public class DefensiveSubsRetreat implements BattleStep {\n+\n+  private static final long serialVersionUID = 1249467218938096244L;\n+\n+  protected final BattleState battleState;\n+\n+  protected final BattleActions battleActions;\n+\n+  @Override\n+  public List<String> getNames() {\n+    if (!isEvaderPresent() || !isRetreatPossible()) {\n+      return List.of();\n+    }\n+\n+    if (getOrder() == SUB_DEFENSIVE_RETREAT_BEFORE_BATTLE && isDestroyerPresent()) {\n+      // only check for destroyers if subs can retreat before battle\n+      // because the destroyer could be killed during the battle which would\n+      // allow the sub to withdraw at the end of the battle\n+      return List.of();\n+    }\n+\n+    if (Properties.getSubmersibleSubs(battleState.getGameData())) {\n+      return List.of(battleState.getDefender().getName() + SUBS_SUBMERGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "372f730e87d04351b3fd25b074e63904bf4c5a0a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjc0NzY1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/DefensiveSubsRetreat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjoxMDowNVrOGrUaZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjoxMDowNVrOGrUaZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NjM5MQ==", "bodyText": "Ditto on ternary usage here, any objections or thoughts to use it?", "url": "https://github.com/triplea-game/triplea/pull/6884#discussion_r448076391", "createdAt": "2020-07-01T02:10:05Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/DefensiveSubsRetreat.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package games.strategy.triplea.delegate.battle.steps.retreat;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBS_SUBMERGE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBS_WITHDRAW;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStep.Order.SUB_DEFENSIVE_RETREAT_AFTER_BATTLE;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStep.Order.SUB_DEFENSIVE_RETREAT_BEFORE_BATTLE;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.RetreatType;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@AllArgsConstructor\n+public class DefensiveSubsRetreat implements BattleStep {\n+\n+  private static final long serialVersionUID = 1249467218938096244L;\n+\n+  protected final BattleState battleState;\n+\n+  protected final BattleActions battleActions;\n+\n+  @Override\n+  public List<String> getNames() {\n+    if (!isEvaderPresent() || !isRetreatPossible()) {\n+      return List.of();\n+    }\n+\n+    if (getOrder() == SUB_DEFENSIVE_RETREAT_BEFORE_BATTLE && isDestroyerPresent()) {\n+      // only check for destroyers if subs can retreat before battle\n+      // because the destroyer could be killed during the battle which would\n+      // allow the sub to withdraw at the end of the battle\n+      return List.of();\n+    }\n+\n+    if (Properties.getSubmersibleSubs(battleState.getGameData())) {\n+      return List.of(battleState.getDefender().getName() + SUBS_SUBMERGE);\n+    } else {\n+      return List.of(battleState.getDefender().getName() + SUBS_WITHDRAW);\n+    }\n+  }\n+\n+  @Override\n+  public Order getOrder() {\n+    if (Properties.getSubRetreatBeforeBattle(battleState.getGameData())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "372f730e87d04351b3fd25b074e63904bf4c5a0a"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2075, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}