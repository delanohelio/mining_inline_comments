{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNTIxMTgw", "number": 6369, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMzoxNzoyMlrOD4tJ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo1ODo1NVrOD5GcEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzg2Njg0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/ConcurrentBattleCalculator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMzoxNzoyMlrOGPm9Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMzoxNzoyMlrOGPm9Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyMDEzNA==", "bodyText": "tbh I'm not quite sure if we actually need this.\nIf something is wrong with the data we should get an exception at some point, but IMO this doesn't add anything to potential error handling", "url": "https://github.com/triplea-game/triplea/pull/6369#discussion_r419020134", "createdAt": "2020-05-02T23:17:22Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/ConcurrentBattleCalculator.java", "diffHunk": "@@ -223,44 +224,43 @@ public AggregateResults calculate(\n       final Collection<Unit> bombarding,\n       final Collection<TerritoryEffect> territoryEffects,\n       final boolean retreatWhenOnlyAirLeft,\n-      final int initialRunCount)\n+      final int runCount)\n       throws IllegalStateException {\n     synchronized (mutexCalcIsRunning) {\n       awaitLatch();\n       final long start = System.currentTimeMillis();\n+      final AtomicBoolean overflowRunsAvailable = new AtomicBoolean(true);\n       // Create worker thread pool and start all workers\n-      int totalRunCount = 0;\n-      int runCount = initialRunCount;\n-      final int workerNum = workers.size();\n-      final int workerRunCount = Math.max(1, (runCount / Math.max(1, workerNum)));\n-      final List<Future<AggregateResults>> list = new ArrayList<>();\n-      for (final BattleCalculator worker : workers) {\n-        if (!getIsReady()) {\n-          // we could have attempted to set a new game data, while the old one was still being set,\n-          // causing it to abort with null data\n-          return new AggregateResults(0);\n-        }\n-        final int currentWorkedRunCount = (runCount <= 0 ? 0 : workerRunCount);\n-        if (currentWorkedRunCount > 0) {\n-          totalRunCount += currentWorkedRunCount;\n-          list.add(\n-              executor.submit(\n-                  () ->\n-                      worker.calculate(\n-                          attacker,\n-                          defender,\n-                          location,\n-                          attacking,\n-                          defending,\n-                          bombarding,\n-                          territoryEffects,\n-                          retreatWhenOnlyAirLeft,\n-                          currentWorkedRunCount)));\n-        }\n-        runCount -= workerRunCount;\n+      final int runsPerWorker = runCount / workers.size();\n+      final List<Future<AggregateResults>> list =\n+          workers.stream()\n+              .map(\n+                  worker ->\n+                      executor.submit(\n+                          () ->\n+                              worker.calculate(\n+                                  attacker,\n+                                  defender,\n+                                  location,\n+                                  attacking,\n+                                  defending,\n+                                  bombarding,\n+                                  territoryEffects,\n+                                  retreatWhenOnlyAirLeft,\n+                                  // Ensure that we always achieve the target run count even if\n+                                  // the number is not dividable by workers.size()\n+                                  (overflowRunsAvailable.getAndSet(false)\n+                                          ? runCount % workers.size()\n+                                          : 0)\n+                                      + runsPerWorker)))\n+              .collect(Collectors.toList());\n+      if (!getIsReady()) {\n+        // we could have attempted to set a new game data, while the old one was still being set,\n+        // causing it to abort with null data\n+        return new AggregateResults(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83254c8ae280622d88837dd465a79d5a1354fa9e"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODA0Njk0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/ConcurrentBattleCalculator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzoyMjoxMVrOGPoLyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMTowMTo0MFrOGPrAUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MDIwMQ==", "bodyText": "Question: I wonder if there is a way to make this a bit faster/easier to understand?\nSuggestion: Have you considered extracting this bit of logic to a method perhaps? In that case the bit of logic could be labelled and perhaps be commented.", "url": "https://github.com/triplea-game/triplea/pull/6369#discussion_r419040201", "createdAt": "2020-05-03T03:22:11Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/ConcurrentBattleCalculator.java", "diffHunk": "@@ -223,44 +223,41 @@ public AggregateResults calculate(\n       final Collection<Unit> bombarding,\n       final Collection<TerritoryEffect> territoryEffects,\n       final boolean retreatWhenOnlyAirLeft,\n-      final int initialRunCount)\n+      final int runCount)\n       throws IllegalStateException {\n     synchronized (mutexCalcIsRunning) {\n       awaitLatch();\n       final long start = System.currentTimeMillis();\n+      final AtomicInteger overflowRunsAvailable = new AtomicInteger(runCount % workers.size());\n       // Create worker thread pool and start all workers\n-      int totalRunCount = 0;\n-      int runCount = initialRunCount;\n-      final int workerNum = workers.size();\n-      final int workerRunCount = Math.max(1, (runCount / Math.max(1, workerNum)));\n-      final List<Future<AggregateResults>> list = new ArrayList<>();\n-      for (final BattleCalculator worker : workers) {\n-        if (!getIsReady()) {\n-          // we could have attempted to set a new game data, while the old one was still being set,\n-          // causing it to abort with null data\n-          return new AggregateResults(0);\n-        }\n-        final int currentWorkedRunCount = (runCount <= 0 ? 0 : workerRunCount);\n-        if (currentWorkedRunCount > 0) {\n-          totalRunCount += currentWorkedRunCount;\n-          list.add(\n-              executor.submit(\n-                  () ->\n-                      worker.calculate(\n-                          attacker,\n-                          defender,\n-                          location,\n-                          attacking,\n-                          defending,\n-                          bombarding,\n-                          territoryEffects,\n-                          retreatWhenOnlyAirLeft,\n-                          currentWorkedRunCount)));\n-        }\n-        runCount -= workerRunCount;\n+      final int runsPerWorker = runCount / workers.size();\n+      final List<Future<AggregateResults>> list =\n+          workers.stream()\n+              .map(\n+                  worker ->\n+                      executor.submit(\n+                          () ->\n+                              worker.calculate(\n+                                  attacker,\n+                                  defender,\n+                                  location,\n+                                  attacking,\n+                                  defending,\n+                                  bombarding,\n+                                  territoryEffects,\n+                                  retreatWhenOnlyAirLeft,\n+                                  // Ensure that we always achieve the target run count even if\n+                                  // the number is not dividable by workers.size()\n+                                  (overflowRunsAvailable.getAndDecrement() > 0 ? 1 : 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3b64ca0410c1f089727559c2d4e9672b7c8591"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NjQxNw==", "bodyText": "I have thought about extracting the logic into a method, but you'd still have to pass an AtomicInteger instance to the method because it has to be shared for the same call.\nHowever I think extracting this \"distribution\" to an object and adding unit tests for that could be an elegant abstraction.\nI won't have the time to do this today, this will have to wait a couple of days.", "url": "https://github.com/triplea-game/triplea/pull/6369#discussion_r419086417", "createdAt": "2020-05-03T11:01:40Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/ConcurrentBattleCalculator.java", "diffHunk": "@@ -223,44 +223,41 @@ public AggregateResults calculate(\n       final Collection<Unit> bombarding,\n       final Collection<TerritoryEffect> territoryEffects,\n       final boolean retreatWhenOnlyAirLeft,\n-      final int initialRunCount)\n+      final int runCount)\n       throws IllegalStateException {\n     synchronized (mutexCalcIsRunning) {\n       awaitLatch();\n       final long start = System.currentTimeMillis();\n+      final AtomicInteger overflowRunsAvailable = new AtomicInteger(runCount % workers.size());\n       // Create worker thread pool and start all workers\n-      int totalRunCount = 0;\n-      int runCount = initialRunCount;\n-      final int workerNum = workers.size();\n-      final int workerRunCount = Math.max(1, (runCount / Math.max(1, workerNum)));\n-      final List<Future<AggregateResults>> list = new ArrayList<>();\n-      for (final BattleCalculator worker : workers) {\n-        if (!getIsReady()) {\n-          // we could have attempted to set a new game data, while the old one was still being set,\n-          // causing it to abort with null data\n-          return new AggregateResults(0);\n-        }\n-        final int currentWorkedRunCount = (runCount <= 0 ? 0 : workerRunCount);\n-        if (currentWorkedRunCount > 0) {\n-          totalRunCount += currentWorkedRunCount;\n-          list.add(\n-              executor.submit(\n-                  () ->\n-                      worker.calculate(\n-                          attacker,\n-                          defender,\n-                          location,\n-                          attacking,\n-                          defending,\n-                          bombarding,\n-                          territoryEffects,\n-                          retreatWhenOnlyAirLeft,\n-                          currentWorkedRunCount)));\n-        }\n-        runCount -= workerRunCount;\n+      final int runsPerWorker = runCount / workers.size();\n+      final List<Future<AggregateResults>> list =\n+          workers.stream()\n+              .map(\n+                  worker ->\n+                      executor.submit(\n+                          () ->\n+                              worker.calculate(\n+                                  attacker,\n+                                  defender,\n+                                  location,\n+                                  attacking,\n+                                  defending,\n+                                  bombarding,\n+                                  territoryEffects,\n+                                  retreatWhenOnlyAirLeft,\n+                                  // Ensure that we always achieve the target run count even if\n+                                  // the number is not dividable by workers.size()\n+                                  (overflowRunsAvailable.getAndDecrement() > 0 ? 1 : 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MDIwMQ=="}, "originalCommit": {"oid": "3f3b64ca0410c1f089727559c2d4e9672b7c8591"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODA0NzMzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/ConcurrentBattleCalculator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzoyMzowNFrOGPoL-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMTowNzozMFrOGPrDOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MDI0OQ==", "bodyText": "suggestion: What are your thoughts to add a postcondition here to check that sum of aggregated results is equal to the run count?", "url": "https://github.com/triplea-game/triplea/pull/6369#discussion_r419040249", "createdAt": "2020-05-03T03:23:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/ConcurrentBattleCalculator.java", "diffHunk": "@@ -223,44 +223,41 @@ public AggregateResults calculate(\n       final Collection<Unit> bombarding,\n       final Collection<TerritoryEffect> territoryEffects,\n       final boolean retreatWhenOnlyAirLeft,\n-      final int initialRunCount)\n+      final int runCount)\n       throws IllegalStateException {\n     synchronized (mutexCalcIsRunning) {\n       awaitLatch();\n       final long start = System.currentTimeMillis();\n+      final AtomicInteger overflowRunsAvailable = new AtomicInteger(runCount % workers.size());\n       // Create worker thread pool and start all workers\n-      int totalRunCount = 0;\n-      int runCount = initialRunCount;\n-      final int workerNum = workers.size();\n-      final int workerRunCount = Math.max(1, (runCount / Math.max(1, workerNum)));\n-      final List<Future<AggregateResults>> list = new ArrayList<>();\n-      for (final BattleCalculator worker : workers) {\n-        if (!getIsReady()) {\n-          // we could have attempted to set a new game data, while the old one was still being set,\n-          // causing it to abort with null data\n-          return new AggregateResults(0);\n-        }\n-        final int currentWorkedRunCount = (runCount <= 0 ? 0 : workerRunCount);\n-        if (currentWorkedRunCount > 0) {\n-          totalRunCount += currentWorkedRunCount;\n-          list.add(\n-              executor.submit(\n-                  () ->\n-                      worker.calculate(\n-                          attacker,\n-                          defender,\n-                          location,\n-                          attacking,\n-                          defending,\n-                          bombarding,\n-                          territoryEffects,\n-                          retreatWhenOnlyAirLeft,\n-                          currentWorkedRunCount)));\n-        }\n-        runCount -= workerRunCount;\n+      final int runsPerWorker = runCount / workers.size();\n+      final List<Future<AggregateResults>> list =\n+          workers.stream()\n+              .map(\n+                  worker ->\n+                      executor.submit(\n+                          () ->\n+                              worker.calculate(\n+                                  attacker,\n+                                  defender,\n+                                  location,\n+                                  attacking,\n+                                  defending,\n+                                  bombarding,\n+                                  territoryEffects,\n+                                  retreatWhenOnlyAirLeft,\n+                                  // Ensure that we always achieve the target run count even if\n+                                  // the number is not dividable by workers.size()\n+                                  (overflowRunsAvailable.getAndDecrement() > 0 ? 1 : 0)\n+                                      + runsPerWorker)))\n+              .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3b64ca0410c1f089727559c2d4e9672b7c8591"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NzE2Mw==", "bodyText": "Not quite sure if that would make sense.\nI mean in the end it doesn't really matter if we get exactly the number of runs we required or just something that's very similar. The only \"real\" reason that would cause a significant difference in runs would be if a worker got an exception, which should be caught by our error handling later anyways.\nSo in the end if I make the \"distribution logic\" its own stateful object that distributes run counts evenly we could just add unit tests for that and that should make any potential post-condition redundant", "url": "https://github.com/triplea-game/triplea/pull/6369#discussion_r419087163", "createdAt": "2020-05-03T11:07:30Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/ConcurrentBattleCalculator.java", "diffHunk": "@@ -223,44 +223,41 @@ public AggregateResults calculate(\n       final Collection<Unit> bombarding,\n       final Collection<TerritoryEffect> territoryEffects,\n       final boolean retreatWhenOnlyAirLeft,\n-      final int initialRunCount)\n+      final int runCount)\n       throws IllegalStateException {\n     synchronized (mutexCalcIsRunning) {\n       awaitLatch();\n       final long start = System.currentTimeMillis();\n+      final AtomicInteger overflowRunsAvailable = new AtomicInteger(runCount % workers.size());\n       // Create worker thread pool and start all workers\n-      int totalRunCount = 0;\n-      int runCount = initialRunCount;\n-      final int workerNum = workers.size();\n-      final int workerRunCount = Math.max(1, (runCount / Math.max(1, workerNum)));\n-      final List<Future<AggregateResults>> list = new ArrayList<>();\n-      for (final BattleCalculator worker : workers) {\n-        if (!getIsReady()) {\n-          // we could have attempted to set a new game data, while the old one was still being set,\n-          // causing it to abort with null data\n-          return new AggregateResults(0);\n-        }\n-        final int currentWorkedRunCount = (runCount <= 0 ? 0 : workerRunCount);\n-        if (currentWorkedRunCount > 0) {\n-          totalRunCount += currentWorkedRunCount;\n-          list.add(\n-              executor.submit(\n-                  () ->\n-                      worker.calculate(\n-                          attacker,\n-                          defender,\n-                          location,\n-                          attacking,\n-                          defending,\n-                          bombarding,\n-                          territoryEffects,\n-                          retreatWhenOnlyAirLeft,\n-                          currentWorkedRunCount)));\n-        }\n-        runCount -= workerRunCount;\n+      final int runsPerWorker = runCount / workers.size();\n+      final List<Future<AggregateResults>> list =\n+          workers.stream()\n+              .map(\n+                  worker ->\n+                      executor.submit(\n+                          () ->\n+                              worker.calculate(\n+                                  attacker,\n+                                  defender,\n+                                  location,\n+                                  attacking,\n+                                  defending,\n+                                  bombarding,\n+                                  territoryEffects,\n+                                  retreatWhenOnlyAirLeft,\n+                                  // Ensure that we always achieve the target run count even if\n+                                  // the number is not dividable by workers.size()\n+                                  (overflowRunsAvailable.getAndDecrement() > 0 ? 1 : 0)\n+                                      + runsPerWorker)))\n+              .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MDI0OQ=="}, "originalCommit": {"oid": "3f3b64ca0410c1f089727559c2d4e9672b7c8591"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTU4NTk5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/RunCountDistributor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxNDowNFrOGQHk9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxNDowNFrOGQHk9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1NDU1MQ==", "bodyText": "I'm actually not sure if we need this strict behaviour.\nIf we drop this exception we could also drop the field targetLeftover", "url": "https://github.com/triplea-game/triplea/pull/6369#discussion_r419554551", "createdAt": "2020-05-04T16:14:04Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/RunCountDistributor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package games.strategy.triplea.odds.calculator;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Helper class to divide any integer into smaller integers that are the original integer when\n+ * summed up.\n+ */\n+@ThreadSafe\n+class RunCountDistributor {\n+  private final int runsPerWorker;\n+  private final int targetLeftover;\n+  private final AtomicInteger leftoverRuns;\n+\n+  /**\n+   * Creates a new RunCountDistributorInstance.\n+   *\n+   * @param runCount What all of the individual run-counts should sum up to\n+   * @param parallelism How many times {@link #nextRunCount()} will get called.\n+   */\n+  RunCountDistributor(final int runCount, final int parallelism) {\n+    Preconditions.checkState(parallelism > 0, \"The parallelism level has to be positive!\");\n+\n+    runsPerWorker = runCount / parallelism;\n+    leftoverRuns = new AtomicInteger(runCount % parallelism);\n+    targetLeftover = leftoverRuns.get() - parallelism;\n+  }\n+\n+  /**\n+   * Returns the next run-count.\n+   *\n+   * @throws IllegalStateException If this method was called more often than provided level of\n+   *     parallelism.\n+   */\n+  int nextRunCount() {\n+    final int leftoverRuns = this.leftoverRuns.getAndDecrement();\n+    if (leftoverRuns <= targetLeftover) {\n+      throw new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a683d5cd8964bc0c80414ab0267131c1ba9beb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTU4Nzc0OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/odds/calculator/RunCountDistributorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxNDozMFrOGQHmDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxNDozMFrOGQHmDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1NDgzMA==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6369#discussion_r419554830", "createdAt": "2020-05-04T16:14:30Z", "author": {"login": "codeclimate"}, "path": "game-core/src/test/java/games/strategy/triplea/odds/calculator/RunCountDistributorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.odds.calculator;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.Test;\n+\n+public class RunCountDistributorTest {\n+\n+  @Test\n+  void verifyEvenDistributionWhenCleanlyDividable() {\n+    final var runCountDistributor = new RunCountDistributor(20, 4);\n+\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(5)));\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(5)));\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(5)));\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(5)));\n+  }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a683d5cd8964bc0c80414ab0267131c1ba9beb"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTU4Nzc3OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/odds/calculator/RunCountDistributorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxNDozMFrOGQHmEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxNDozMFrOGQHmEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1NDgzNA==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6369#discussion_r419554834", "createdAt": "2020-05-04T16:14:30Z", "author": {"login": "codeclimate"}, "path": "game-core/src/test/java/games/strategy/triplea/odds/calculator/RunCountDistributorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.odds.calculator;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.Test;\n+\n+public class RunCountDistributorTest {\n+\n+  @Test\n+  void verifyEvenDistributionWhenCleanlyDividable() {\n+    final var runCountDistributor = new RunCountDistributor(20, 4);\n+\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(5)));\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(5)));\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(5)));\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(5)));\n+  }\n+\n+  @Test\n+  void verifyDistributionWhenNotCleanlyDividable() {\n+    final var runCountDistributor = new RunCountDistributor(13, 3);\n+\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(5)));\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(4)));\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(4)));\n+  }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a683d5cd8964bc0c80414ab0267131c1ba9beb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjAwOTE0OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/odds/calculator/RunCountDistributorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo1ODo1NVrOGQLqxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo1ODo1NVrOGQLqxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyMTU3Mg==", "bodyText": "Minor suggestion: Might be good to have a display name to say we are spawning 4 threads and each should have 5. It's not immediately clear why there is repetition.", "url": "https://github.com/triplea-game/triplea/pull/6369#discussion_r419621572", "createdAt": "2020-05-04T17:58:55Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/odds/calculator/RunCountDistributorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.odds.calculator;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.Test;\n+\n+public class RunCountDistributorTest {\n+\n+  @Test\n+  void verifyEvenDistributionWhenCleanlyDividable() {\n+    final var runCountDistributor = new RunCountDistributor(20, 4);\n+\n+    assertThat(runCountDistributor.nextRunCount(), is(equalTo(5)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a683d5cd8964bc0c80414ab0267131c1ba9beb"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2322, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}