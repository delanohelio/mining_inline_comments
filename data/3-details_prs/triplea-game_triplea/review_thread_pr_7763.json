{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyOTY1MDY1", "number": 7763, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowODowNFrOEntYvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowODowNlrOEntYwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDczNTMzOnYy", "diffSide": "RIGHT", "path": "java-extras/src/test/java/org/triplea/java/UrlStreamsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowODowNFrOHYdiGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowODowNFrOHYdiGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTczNw==", "bodyText": "Codacy found an issue: Document empty method body", "url": "https://github.com/triplea-game/triplea/pull/7763#discussion_r495411737", "createdAt": "2020-09-26T04:08:04Z", "author": {"login": "DanVanAtta"}, "path": "java-extras/src/test/java/org/triplea/java/UrlStreamsTest.java", "diffHunk": "@@ -3,66 +3,83 @@\n import static com.github.npathai.hamcrestopt.OptionalMatchers.isEmpty;\n import static com.github.npathai.hamcrestopt.OptionalMatchers.isPresent;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.sameInstance;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n+import static org.hamcrest.core.Is.is;\n \n+import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.URL;\n import java.net.URLConnection;\n import java.util.Optional;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n \n-@ExtendWith(MockitoExtension.class)\n class UrlStreamsTest {\n \n   private UrlStreams testObj;\n \n   private URL fakeUrl;\n \n-  @Mock private URLConnection mockUrlConnection;\n-  @Mock private InputStream mockInputStream;\n+  //  @Mock private URLConnection mockUrlConnection;\n+  //  @Mock private InputStream mockInputStream;\n \n   @BeforeEach\n   void setUp() throws Exception {\n     // set up the test object with a function that will return a mocked url connection\n-    testObj = new UrlStreams(url -> mockUrlConnection);\n+    testObj =\n+        new UrlStreams(\n+            url ->\n+                new URLConnection(url) {\n+                  @Override\n+                  public void connect() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc077da94d56e4b523f6a96e40c2cc853c33bc15"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDczNTM0OnYy", "diffSide": "RIGHT", "path": "java-extras/src/test/java/org/triplea/java/RetryableTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowODowNVrOHYdiGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowODowNVrOHYdiGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTczOA==", "bodyText": "Codacy found an issue: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "url": "https://github.com/triplea-game/triplea/pull/7763#discussion_r495411738", "createdAt": "2020-09-26T04:08:05Z", "author": {"login": "DanVanAtta"}, "path": "java-extras/src/test/java/org/triplea/java/RetryableTest.java", "diffHunk": "@@ -1,30 +1,43 @@\n package org.triplea.java;\n \n+import static com.github.npathai.hamcrestopt.OptionalMatchers.isEmpty;\n+import static com.github.npathai.hamcrestopt.OptionalMatchers.isPresent;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.core.Is.is;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n \n import java.time.Duration;\n import java.util.List;\n-import java.util.function.BooleanSupplier;\n+import java.util.Optional;\n import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import lombok.RequiredArgsConstructor;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n import org.junit.jupiter.params.provider.ValueSource;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n \n-@ExtendWith(MockitoExtension.class)\n class RetryableTest {\n \n-  @Mock private BooleanSupplier task;\n-  @Mock private Consumer<Duration> threadSleeper;\n+  /**\n+   * Increment the invocation count and return true if the invocation count matches the input\n+   * parameter. In other words, we can say \"return true on the 3rd invocation.\"\n+   */\n+  @RequiredArgsConstructor\n+  private static final class Task implements Supplier<Optional<Boolean>> {\n+    private final int successIteration;\n+    private int invocationCount;\n+\n+    @Override\n+    public Optional<Boolean> get() {\n+      invocationCount++;\n+      return invocationCount == successIteration ? Optional.of(true) : Optional.empty();\n+    }\n+  }\n+\n+  private int sleepCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc077da94d56e4b523f6a96e40c2cc853c33bc15"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDczNTM2OnYy", "diffSide": "RIGHT", "path": "java-extras/src/test/java/org/triplea/java/RetryableTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowODowNlrOHYdiHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowODowNlrOHYdiHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTc0MQ==", "bodyText": "Codacy found an issue: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "url": "https://github.com/triplea-game/triplea/pull/7763#discussion_r495411741", "createdAt": "2020-09-26T04:08:06Z", "author": {"login": "DanVanAtta"}, "path": "java-extras/src/test/java/org/triplea/java/RetryableTest.java", "diffHunk": "@@ -1,30 +1,43 @@\n package org.triplea.java;\n \n+import static com.github.npathai.hamcrestopt.OptionalMatchers.isEmpty;\n+import static com.github.npathai.hamcrestopt.OptionalMatchers.isPresent;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.core.Is.is;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n \n import java.time.Duration;\n import java.util.List;\n-import java.util.function.BooleanSupplier;\n+import java.util.Optional;\n import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import lombok.RequiredArgsConstructor;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n import org.junit.jupiter.params.provider.ValueSource;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n \n-@ExtendWith(MockitoExtension.class)\n class RetryableTest {\n \n-  @Mock private BooleanSupplier task;\n-  @Mock private Consumer<Duration> threadSleeper;\n+  /**\n+   * Increment the invocation count and return true if the invocation count matches the input\n+   * parameter. In other words, we can say \"return true on the 3rd invocation.\"\n+   */\n+  @RequiredArgsConstructor\n+  private static final class Task implements Supplier<Optional<Boolean>> {\n+    private final int successIteration;\n+    private int invocationCount;\n+\n+    @Override\n+    public Optional<Boolean> get() {\n+      invocationCount++;\n+      return invocationCount == successIteration ? Optional.of(true) : Optional.empty();\n+    }\n+  }\n+\n+  private int sleepCount;\n+  private final Consumer<Duration> threadSleeper = duration -> sleepCount++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc077da94d56e4b523f6a96e40c2cc853c33bc15"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2868, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}