{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjI2OTQ5", "number": 6189, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0MjoyNFrODw_Jyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0NDozNVrODw_KWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjkyOTM4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/AbstractPlaceDelegate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0MjoyNFrOGEQRGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0MjoyNFrOGEQRGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDAwOA==", "bodyText": "The existing code seems to have been kinda not optimal, returning a copy of a list to then create a copy of a list..\nMore fundamentally, if this is a heavily invoked code path, wouldn't the better datastructure here be a Set instead of List for faster item removal?", "url": "https://github.com/triplea-game/triplea/pull/6189#discussion_r407114008", "createdAt": "2020-04-11T21:42:24Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/AbstractPlaceDelegate.java", "diffHunk": "@@ -1652,14 +1652,13 @@ private boolean getCanAllUnitsWithRequiresUnitsBePlacedCorrectly(\n     if (to == null) {\n       return new ArrayList<>();\n     }\n-    final Collection<Unit> unitsInTo = to.getUnits();\n     final Collection<Unit> unitsPlacedAlready = getAlreadyProduced(to);\n     if (Matches.territoryIsWater().test(to)) {\n       for (final Territory current : getAllProducers(to, player, null, true)) {\n         unitsPlacedAlready.addAll(getAlreadyProduced(current));\n       }\n     }\n-    final Collection<Unit> unitsAtStartOfTurnInTo = new ArrayList<>(unitsInTo);\n+    final Collection<Unit> unitsAtStartOfTurnInTo = new ArrayList<>(to.getUnits());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dacff1cf0985f878db7c75c6144dd1e9b5ac4ea3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjkzMDgxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0NDozNVrOGEQRxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0NDozNVrOGEQRxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDE4MA==", "bodyText": "side-note, not to update for this PR: I think one problem we are running into is a lack of encapsulation. We would not have to worry as much about set mutability if battleSite perhaps just handled this, eg: battleSite.getRemainingUnits, instead it seems we have relatively procedural code and battleSite is more a struct, so we run into conflicts with not trying to mutate the state of an object that is fundamentally mutable state.", "url": "https://github.com/triplea-game/triplea/pull/6189#discussion_r407114180", "createdAt": "2020-04-11T21:44:35Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -268,7 +268,7 @@ void addDependentUnits(final Map<Unit, Collection<Unit>> dependencies) {\n   @Override\n   public List<Unit> getRemainingAttackingUnits() {\n     final List<Unit> remaining = new ArrayList<>(attackingUnitsRetreated);\n-    final Collection<Unit> unitsLeftInTerritory = battleSite.getUnits();\n+    final Collection<Unit> unitsLeftInTerritory = new ArrayList<>(battleSite.getUnits());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dacff1cf0985f878db7c75c6144dd1e9b5ac4ea3"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2438, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}