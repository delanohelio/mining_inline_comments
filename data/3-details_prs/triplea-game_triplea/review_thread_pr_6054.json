{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4OTExNjg5", "number": 6054, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMToyMzoxMVrODoKT8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjo1MzoxM1rODo8_5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDM4NTc4OnYy", "diffSide": "LEFT", "path": "game-core/src/main/java/games/strategy/triplea/ui/screen/Tile.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMToyMzoxMVrOF2i8iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMToyMzoxMVrOF2i8iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjczOTk3Nw==", "bodyText": "I just noticed \"hardcoding\" the bounds to TILE_SIZE is no longer neccessary in the final form of this PR \ud83e\udd14", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r392739977", "createdAt": "2020-03-16T01:23:11Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/screen/Tile.java", "diffHunk": "@@ -15,80 +15,66 @@\n import java.util.List;\n import java.util.PriorityQueue;\n import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /** Responsible for rendering a single map tile. */\n public class Tile {\n+  public static final int TILE_SIZE = 256;\n+\n   private volatile boolean isDirty = true;\n-  private volatile boolean isDrawing = false;\n+  private AtomicBoolean isDrawing = new AtomicBoolean(false);\n \n-  private final Image image;\n+  private Image image = Util.newImage(TILE_SIZE, TILE_SIZE, true);\n   private final Rectangle bounds;\n   private final Object mutex = new Object();\n   private final Queue<IDrawable> contents = new PriorityQueue<>();\n \n   Tile(final Rectangle bounds) {\n     this.bounds = bounds;\n-    image = Util.newImage((int) bounds.getWidth(), (int) bounds.getHeight(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1b31c884d9877eba6c0a0095b06f376419abce"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDM5NzU4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/screen/Tile.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMToyODozNVrOF2jDgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMToyODozNVrOF2jDgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc0MTc2MA==", "bodyText": "As you can see the only thing that \"mutex\" does now is synchronize the access to contents and isDirty as a single operation.\nNot sure if it would work without any unintended problems if we made contents a concurrent collection of some sort and removed the mutex. Currently calling new PriorityQueue<>(contents) is a constant time operation, changing the type of contents would make it O(n * log n).\nWe could however use a concurrent set where the draw level is compared, and if even we compare the hashCodes or something in order not to \"remove\" \"duplicate\" tiles with the same draw level as others.", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r392741760", "createdAt": "2020-03-16T01:28:35Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/screen/Tile.java", "diffHunk": "@@ -15,80 +15,66 @@\n import java.util.List;\n import java.util.PriorityQueue;\n import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /** Responsible for rendering a single map tile. */\n public class Tile {\n+  public static final int TILE_SIZE = 256;\n+\n   private volatile boolean isDirty = true;\n-  private volatile boolean isDrawing = false;\n+  private AtomicBoolean isDrawing = new AtomicBoolean(false);\n \n-  private final Image image;\n+  private Image image = Util.newImage(TILE_SIZE, TILE_SIZE, true);\n   private final Rectangle bounds;\n   private final Object mutex = new Object();\n   private final Queue<IDrawable> contents = new PriorityQueue<>();\n \n   Tile(final Rectangle bounds) {\n     this.bounds = bounds;\n-    image = Util.newImage((int) bounds.getWidth(), (int) bounds.getHeight(), true);\n   }\n \n   public boolean needsRedraw() {\n-    return isDirty && !isDrawing;\n-  }\n-\n-  /**\n-   * Because our Tile-rendering system doesn't use something like \"double buffers\" on a higher level\n-   * (the swing components support it internally, but we don't draw in batch) we expose this\n-   * internal mutex to prevent tiles being drawn mid-refresh.\n-   */\n-  public Object getMutex() {\n-    return mutex;\n+    return isDirty && !isDrawing.get();\n   }\n \n   /** Returns the image representing this tile, re-rendering it first if the tile is dirty. */\n-  public Image getImage(final GameData data, final MapData mapData) {\n-    if (isDirty) {\n-      synchronized (mutex) {\n-        isDrawing = true;\n-        final Graphics2D g = (Graphics2D) image.getGraphics();\n-        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_ALPHA_INTERPOLATION,\n-            RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n-        draw(g, data, mapData);\n-        g.dispose();\n-        isDrawing = false;\n-      }\n+  public void drawImage(final GameData data, final MapData mapData) {\n+    if (isDirty && !isDrawing.getAndSet(true)) {\n+      final Image backImage = Util.newImage(TILE_SIZE, TILE_SIZE, true);\n+      final Graphics2D g = (Graphics2D) backImage.getGraphics();\n+      g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+      draw(g, data, mapData);\n+      g.dispose();\n+      image = backImage;\n+      isDrawing.set(false);\n     }\n-    return image;\n   }\n \n-  /**\n-   * This image may not reflect our current drawables. Use getImage() to get a correct image\n-   *\n-   * @return the image we currently have.\n-   */\n-  public Image getRawImage() {\n-    synchronized (mutex) {\n-      return image;\n-    }\n+  /** This image may not reflect our current drawables. */\n+  public Image getImage() {\n+    return image;\n   }\n \n   private void draw(final Graphics2D g, final GameData data, final MapData mapData) {\n     final AffineTransform original = g.getTransform();\n     // clear\n     g.setColor(Color.BLACK);\n-    g.fill(new Rectangle(0, 0, TileManager.TILE_SIZE, TileManager.TILE_SIZE));\n-    final Queue<IDrawable> queue = new PriorityQueue<>(contents);\n-    while (!queue.isEmpty()) {\n-      queue.remove().draw(bounds, data, g, mapData);\n-      // Make sure we don't mess up other draws\n-      g.setTransform(original);\n+    g.fill(new Rectangle(0, 0, TILE_SIZE, TILE_SIZE));\n+    synchronized (mutex) {\n+      final Queue<IDrawable> queue = new PriorityQueue<>(contents);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1b31c884d9877eba6c0a0095b06f376419abce"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjY4NDY0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/panels/map/MapPanel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjo0OTo0OFrOF30o4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNjozM1rOF4tgaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3ODQzNQ==", "bodyText": "Does it make sense to have drawImage to also return the rendered image?\nEG:\nfinal var image = tile.drawImage(gameData, uiContext.getMapData())", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r394078435", "createdAt": "2020-03-18T02:49:48Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/panels/map/MapPanel.java", "diffHunk": "@@ -631,16 +631,12 @@ public void drawMapImage(final Graphics g) {\n           new Rectangle2D.Double(0, 0, getImageWidth(), getImageHeight());\n       final Collection<Tile> tileList = tileManager.getTiles(bounds);\n       for (final Tile tile : tileList) {\n-        synchronized (tile.getMutex()) {\n-          final Image img = tile.getImage(gameData, uiContext.getMapData());\n-          if (img != null) {\n-            g2d.drawImage(\n-                img,\n-                AffineTransform.getTranslateInstance(\n-                    tile.getBounds().x - bounds.getX(), tile.getBounds().y - bounds.getY()),\n-                this);\n-          }\n-        }\n+        tile.drawImage(gameData, uiContext.getMapData());\n+        final Image img = tile.getImage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a10e2988dea87b55c948e2300ba834aaecf1b17"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMDE1Mg==", "bodyText": "I thought about that, but by returning void it becomes obvious that this method is not just creating a new Image object, but rather altering the state of the Tile", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r395010152", "createdAt": "2020-03-19T13:06:33Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/panels/map/MapPanel.java", "diffHunk": "@@ -631,16 +631,12 @@ public void drawMapImage(final Graphics g) {\n           new Rectangle2D.Double(0, 0, getImageWidth(), getImageHeight());\n       final Collection<Tile> tileList = tileManager.getTiles(bounds);\n       for (final Tile tile : tileList) {\n-        synchronized (tile.getMutex()) {\n-          final Image img = tile.getImage(gameData, uiContext.getMapData());\n-          if (img != null) {\n-            g2d.drawImage(\n-                img,\n-                AffineTransform.getTranslateInstance(\n-                    tile.getBounds().x - bounds.getX(), tile.getBounds().y - bounds.getY()),\n-                this);\n-          }\n-        }\n+        tile.drawImage(gameData, uiContext.getMapData());\n+        final Image img = tile.getImage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3ODQzNQ=="}, "originalCommit": {"oid": "1a10e2988dea87b55c948e2300ba834aaecf1b17"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjY4NzA2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/panels/map/MapPanel.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjo1MToxOFrOF30qVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjozMjowMFrOF5GNaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3ODgwNg==", "bodyText": "Kinda odd as GameData is quite mutable. I wonder if this would be more easily communicated if we extracted the logic that needs GameData to a method. Thoughts?", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r394078806", "createdAt": "2020-03-18T02:51:18Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/panels/map/MapPanel.java", "diffHunk": "@@ -746,13 +740,15 @@ public void paint(final Graphics g) {\n     updateUndrawnTiles(undrawnTiles, 513);\n     updateUndrawnTiles(undrawnTiles, 767);\n     clearPendingDrawOperations();\n+    // make sure we use the same data for the entire paint\n+    final GameData data = gameData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a10e2988dea87b55c948e2300ba834aaecf1b17"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3OTg3Mw==", "bodyText": "IIRC the reason this variable was introduced is because we got NPEs on shutdown, when the gameData field was set to null mid-render.\nThis prevents this issue.", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r394979873", "createdAt": "2020-03-19T12:10:59Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/panels/map/MapPanel.java", "diffHunk": "@@ -746,13 +740,15 @@ public void paint(final Graphics g) {\n     updateUndrawnTiles(undrawnTiles, 513);\n     updateUndrawnTiles(undrawnTiles, 767);\n     clearPendingDrawOperations();\n+    // make sure we use the same data for the entire paint\n+    final GameData data = gameData;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3ODgwNg=="}, "originalCommit": {"oid": "1a10e2988dea87b55c948e2300ba834aaecf1b17"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNDg5MQ==", "bodyText": "If we sent the gameData reference as a method parameter, there would be no way for anything outside of the method to mutate that reference (value). We would surely guard against that scenario. Given this is also a long method, breaking up the dependencies on gameData could be good as well.\nIMO that is a good option. If not, then we probably need more commentary/documentation to state we are defending against the gameData reference from not only being changed, but also potentially nulled out as part of a shutdown event.", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r395414891", "createdAt": "2020-03-20T02:32:00Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/panels/map/MapPanel.java", "diffHunk": "@@ -746,13 +740,15 @@ public void paint(final Graphics g) {\n     updateUndrawnTiles(undrawnTiles, 513);\n     updateUndrawnTiles(undrawnTiles, 767);\n     clearPendingDrawOperations();\n+    // make sure we use the same data for the entire paint\n+    final GameData data = gameData;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3ODgwNg=="}, "originalCommit": {"oid": "1a10e2988dea87b55c948e2300ba834aaecf1b17"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjY4ODQxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/screen/Tile.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjo1MjoxNFrOF30rOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjozNDowMFrOF5GO9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTAzNQ==", "bodyText": "Thoughts to replace this with @Getter and move and consolidate the comment to the image variable?", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r394079035", "createdAt": "2020-03-18T02:52:14Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/screen/Tile.java", "diffHunk": "@@ -15,80 +15,66 @@\n import java.util.List;\n import java.util.PriorityQueue;\n import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /** Responsible for rendering a single map tile. */\n public class Tile {\n+  public static final int TILE_SIZE = 256;\n+\n   private volatile boolean isDirty = true;\n-  private volatile boolean isDrawing = false;\n+  private AtomicBoolean isDrawing = new AtomicBoolean(false);\n \n-  private final Image image;\n+  private Image image = Util.newImage(TILE_SIZE, TILE_SIZE, true);\n   private final Rectangle bounds;\n   private final Object mutex = new Object();\n   private final Queue<IDrawable> contents = new PriorityQueue<>();\n \n   Tile(final Rectangle bounds) {\n     this.bounds = bounds;\n-    image = Util.newImage((int) bounds.getWidth(), (int) bounds.getHeight(), true);\n   }\n \n   public boolean needsRedraw() {\n-    return isDirty && !isDrawing;\n-  }\n-\n-  /**\n-   * Because our Tile-rendering system doesn't use something like \"double buffers\" on a higher level\n-   * (the swing components support it internally, but we don't draw in batch) we expose this\n-   * internal mutex to prevent tiles being drawn mid-refresh.\n-   */\n-  public Object getMutex() {\n-    return mutex;\n+    return isDirty && !isDrawing.get();\n   }\n \n   /** Returns the image representing this tile, re-rendering it first if the tile is dirty. */\n-  public Image getImage(final GameData data, final MapData mapData) {\n-    if (isDirty) {\n-      synchronized (mutex) {\n-        isDrawing = true;\n-        final Graphics2D g = (Graphics2D) image.getGraphics();\n-        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_ALPHA_INTERPOLATION,\n-            RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n-        draw(g, data, mapData);\n-        g.dispose();\n-        isDrawing = false;\n-      }\n+  public void drawImage(final GameData data, final MapData mapData) {\n+    if (isDirty && !isDrawing.getAndSet(true)) {\n+      final Image backImage = Util.newImage(TILE_SIZE, TILE_SIZE, true);\n+      final Graphics2D g = (Graphics2D) backImage.getGraphics();\n+      g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+      draw(g, data, mapData);\n+      g.dispose();\n+      image = backImage;\n+      isDrawing.set(false);\n     }\n-    return image;\n   }\n \n-  /**\n-   * This image may not reflect our current drawables. Use getImage() to get a correct image\n-   *\n-   * @return the image we currently have.\n-   */\n-  public Image getRawImage() {\n-    synchronized (mutex) {\n-      return image;\n-    }\n+  /** This image may not reflect our current drawables. */\n+  public Image getImage() {\n+    return image;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a10e2988dea87b55c948e2300ba834aaecf1b17"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk4MDAwOA==", "bodyText": "I'm not even sure if this method needs a comment tbh", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r394980008", "createdAt": "2020-03-19T12:11:14Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/screen/Tile.java", "diffHunk": "@@ -15,80 +15,66 @@\n import java.util.List;\n import java.util.PriorityQueue;\n import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /** Responsible for rendering a single map tile. */\n public class Tile {\n+  public static final int TILE_SIZE = 256;\n+\n   private volatile boolean isDirty = true;\n-  private volatile boolean isDrawing = false;\n+  private AtomicBoolean isDrawing = new AtomicBoolean(false);\n \n-  private final Image image;\n+  private Image image = Util.newImage(TILE_SIZE, TILE_SIZE, true);\n   private final Rectangle bounds;\n   private final Object mutex = new Object();\n   private final Queue<IDrawable> contents = new PriorityQueue<>();\n \n   Tile(final Rectangle bounds) {\n     this.bounds = bounds;\n-    image = Util.newImage((int) bounds.getWidth(), (int) bounds.getHeight(), true);\n   }\n \n   public boolean needsRedraw() {\n-    return isDirty && !isDrawing;\n-  }\n-\n-  /**\n-   * Because our Tile-rendering system doesn't use something like \"double buffers\" on a higher level\n-   * (the swing components support it internally, but we don't draw in batch) we expose this\n-   * internal mutex to prevent tiles being drawn mid-refresh.\n-   */\n-  public Object getMutex() {\n-    return mutex;\n+    return isDirty && !isDrawing.get();\n   }\n \n   /** Returns the image representing this tile, re-rendering it first if the tile is dirty. */\n-  public Image getImage(final GameData data, final MapData mapData) {\n-    if (isDirty) {\n-      synchronized (mutex) {\n-        isDrawing = true;\n-        final Graphics2D g = (Graphics2D) image.getGraphics();\n-        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_ALPHA_INTERPOLATION,\n-            RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n-        draw(g, data, mapData);\n-        g.dispose();\n-        isDrawing = false;\n-      }\n+  public void drawImage(final GameData data, final MapData mapData) {\n+    if (isDirty && !isDrawing.getAndSet(true)) {\n+      final Image backImage = Util.newImage(TILE_SIZE, TILE_SIZE, true);\n+      final Graphics2D g = (Graphics2D) backImage.getGraphics();\n+      g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+      draw(g, data, mapData);\n+      g.dispose();\n+      image = backImage;\n+      isDrawing.set(false);\n     }\n-    return image;\n   }\n \n-  /**\n-   * This image may not reflect our current drawables. Use getImage() to get a correct image\n-   *\n-   * @return the image we currently have.\n-   */\n-  public Image getRawImage() {\n-    synchronized (mutex) {\n-      return image;\n-    }\n+  /** This image may not reflect our current drawables. */\n+  public Image getImage() {\n+    return image;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTAzNQ=="}, "originalCommit": {"oid": "1a10e2988dea87b55c948e2300ba834aaecf1b17"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNTA4Ng==", "bodyText": "If the comment is dropped or not, still holds that we could avoid the boiler plate getter as well. Any thoughts?", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r395415086", "createdAt": "2020-03-20T02:32:48Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/screen/Tile.java", "diffHunk": "@@ -15,80 +15,66 @@\n import java.util.List;\n import java.util.PriorityQueue;\n import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /** Responsible for rendering a single map tile. */\n public class Tile {\n+  public static final int TILE_SIZE = 256;\n+\n   private volatile boolean isDirty = true;\n-  private volatile boolean isDrawing = false;\n+  private AtomicBoolean isDrawing = new AtomicBoolean(false);\n \n-  private final Image image;\n+  private Image image = Util.newImage(TILE_SIZE, TILE_SIZE, true);\n   private final Rectangle bounds;\n   private final Object mutex = new Object();\n   private final Queue<IDrawable> contents = new PriorityQueue<>();\n \n   Tile(final Rectangle bounds) {\n     this.bounds = bounds;\n-    image = Util.newImage((int) bounds.getWidth(), (int) bounds.getHeight(), true);\n   }\n \n   public boolean needsRedraw() {\n-    return isDirty && !isDrawing;\n-  }\n-\n-  /**\n-   * Because our Tile-rendering system doesn't use something like \"double buffers\" on a higher level\n-   * (the swing components support it internally, but we don't draw in batch) we expose this\n-   * internal mutex to prevent tiles being drawn mid-refresh.\n-   */\n-  public Object getMutex() {\n-    return mutex;\n+    return isDirty && !isDrawing.get();\n   }\n \n   /** Returns the image representing this tile, re-rendering it first if the tile is dirty. */\n-  public Image getImage(final GameData data, final MapData mapData) {\n-    if (isDirty) {\n-      synchronized (mutex) {\n-        isDrawing = true;\n-        final Graphics2D g = (Graphics2D) image.getGraphics();\n-        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_ALPHA_INTERPOLATION,\n-            RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n-        draw(g, data, mapData);\n-        g.dispose();\n-        isDrawing = false;\n-      }\n+  public void drawImage(final GameData data, final MapData mapData) {\n+    if (isDirty && !isDrawing.getAndSet(true)) {\n+      final Image backImage = Util.newImage(TILE_SIZE, TILE_SIZE, true);\n+      final Graphics2D g = (Graphics2D) backImage.getGraphics();\n+      g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+      draw(g, data, mapData);\n+      g.dispose();\n+      image = backImage;\n+      isDrawing.set(false);\n     }\n-    return image;\n   }\n \n-  /**\n-   * This image may not reflect our current drawables. Use getImage() to get a correct image\n-   *\n-   * @return the image we currently have.\n-   */\n-  public Image getRawImage() {\n-    synchronized (mutex) {\n-      return image;\n-    }\n+  /** This image may not reflect our current drawables. */\n+  public Image getImage() {\n+    return image;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTAzNQ=="}, "originalCommit": {"oid": "1a10e2988dea87b55c948e2300ba834aaecf1b17"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNTI4Nw==", "bodyText": "I see now that was done: 147182a", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r395415287", "createdAt": "2020-03-20T02:34:00Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/screen/Tile.java", "diffHunk": "@@ -15,80 +15,66 @@\n import java.util.List;\n import java.util.PriorityQueue;\n import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /** Responsible for rendering a single map tile. */\n public class Tile {\n+  public static final int TILE_SIZE = 256;\n+\n   private volatile boolean isDirty = true;\n-  private volatile boolean isDrawing = false;\n+  private AtomicBoolean isDrawing = new AtomicBoolean(false);\n \n-  private final Image image;\n+  private Image image = Util.newImage(TILE_SIZE, TILE_SIZE, true);\n   private final Rectangle bounds;\n   private final Object mutex = new Object();\n   private final Queue<IDrawable> contents = new PriorityQueue<>();\n \n   Tile(final Rectangle bounds) {\n     this.bounds = bounds;\n-    image = Util.newImage((int) bounds.getWidth(), (int) bounds.getHeight(), true);\n   }\n \n   public boolean needsRedraw() {\n-    return isDirty && !isDrawing;\n-  }\n-\n-  /**\n-   * Because our Tile-rendering system doesn't use something like \"double buffers\" on a higher level\n-   * (the swing components support it internally, but we don't draw in batch) we expose this\n-   * internal mutex to prevent tiles being drawn mid-refresh.\n-   */\n-  public Object getMutex() {\n-    return mutex;\n+    return isDirty && !isDrawing.get();\n   }\n \n   /** Returns the image representing this tile, re-rendering it first if the tile is dirty. */\n-  public Image getImage(final GameData data, final MapData mapData) {\n-    if (isDirty) {\n-      synchronized (mutex) {\n-        isDrawing = true;\n-        final Graphics2D g = (Graphics2D) image.getGraphics();\n-        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_ALPHA_INTERPOLATION,\n-            RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n-        g.setRenderingHint(\n-            RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n-        draw(g, data, mapData);\n-        g.dispose();\n-        isDrawing = false;\n-      }\n+  public void drawImage(final GameData data, final MapData mapData) {\n+    if (isDirty && !isDrawing.getAndSet(true)) {\n+      final Image backImage = Util.newImage(TILE_SIZE, TILE_SIZE, true);\n+      final Graphics2D g = (Graphics2D) backImage.getGraphics();\n+      g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n+      g.setRenderingHint(\n+          RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+      draw(g, data, mapData);\n+      g.dispose();\n+      image = backImage;\n+      isDrawing.set(false);\n     }\n-    return image;\n   }\n \n-  /**\n-   * This image may not reflect our current drawables. Use getImage() to get a correct image\n-   *\n-   * @return the image we currently have.\n-   */\n-  public Image getRawImage() {\n-    synchronized (mutex) {\n-      return image;\n-    }\n+  /** This image may not reflect our current drawables. */\n+  public Image getImage() {\n+    return image;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTAzNQ=="}, "originalCommit": {"oid": "1a10e2988dea87b55c948e2300ba834aaecf1b17"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjY5MDI5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/tools/image/TileImageBreaker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjo1MzoxM1rOF30sYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjo1MzoxM1rOF30sYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTMyOA==", "bodyText": "Minor, Tile.TILE_SIZE is a candidate for a static import, used quite a bit.", "url": "https://github.com/triplea-game/triplea/pull/6054#discussion_r394079328", "createdAt": "2020-03-18T02:53:13Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/tools/image/TileImageBreaker.java", "diffHunk": "@@ -107,33 +107,29 @@ private void createMaps() throws IOException {\n     }\n \n     textOptionPane.show();\n-    for (int x = 0; x * TileManager.TILE_SIZE < map.getWidth(null); x++) {\n-      for (int y = 0; y * TileManager.TILE_SIZE < map.getHeight(null); y++) {\n+    for (int x = 0; x * Tile.TILE_SIZE < map.getWidth(null); x++) {\n+      for (int y = 0; y * Tile.TILE_SIZE < map.getHeight(null); y++) {\n         final Rectangle bounds =\n-            new Rectangle(\n-                x * TileManager.TILE_SIZE,\n-                y * TileManager.TILE_SIZE,\n-                TileManager.TILE_SIZE,\n-                TileManager.TILE_SIZE);\n+            new Rectangle(x * Tile.TILE_SIZE, y * Tile.TILE_SIZE, Tile.TILE_SIZE, Tile.TILE_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a10e2988dea87b55c948e2300ba834aaecf1b17"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2535, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}