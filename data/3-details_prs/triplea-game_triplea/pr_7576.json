{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMzIwMTk1", "number": 7576, "title": "Convert standard battle steps", "bodyText": "This converts the standard battle steps.\nTesting\n\nLoaded old save games and played a few battles to make sure the right units were rolling and dying.\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-09-08T22:00:35Z", "url": "https://github.com/triplea-game/triplea/pull/7576", "merged": true, "mergeCommit": {"oid": "5437e74fcd2c403841772cd9f7261e699a3af975"}, "closed": true, "closedAt": "2020-09-10T00:09:40Z", "author": {"login": "trevan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG-6nRgH2gAyNDgyMzIwMTk1OjFjZDcyYjg1MjAwZWM3ZTlkZTI4OTBhYWQ4M2EwMzQzMzJiMWZmYjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHVYcwgFqTQ4NTQ4MTg4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/1cd72b85200ec7e9de2890aad83a034332b1ffb4", "committedDate": "2020-09-08T21:58:55Z", "message": "Convert standard battle steps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTY5Njgx", "url": "https://github.com/triplea-game/triplea/pull/7576#pullrequestreview-484569681", "createdAt": "2020-09-08T23:58:36Z", "commit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzo1ODozNlrOHOx2Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDoxNDo0MVrOHOyIMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1ODgwMw==", "bodyText": "If something should only be called from 'test', the @VisibleForTesting annotation can be used to test for that.\nHave you considered trying a different approach where instead of checking class type there is a property flag that can be retrieved from the executable object? That would look like some sort of flag stating \"I'm the standard attackers fire step\" (perhaps an enum).", "url": "https://github.com/triplea-game/triplea/pull/7576#discussion_r485258803", "createdAt": "2020-09-08T23:58:36Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -108,16 +110,6 @@\n     private static final long serialVersionUID = 1369227461759133105L;\n   }\n \n-  /**\n-   * An action representing standard attacking fire.\n-   *\n-   * <p>NOTE: This type exists solely for tests to interrogate the execution stack looking for an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1OTk4NQ==", "bodyText": "nit, while the serialVersionUID do not need to be unique across classes, this might throw a few programmers and typically they are UUID's.\nI wonder if we're at the point for creating a helper to create an IExecutable for us? It really is just a BiConsumer` interface, eg:\nIExecutable {\n\n\n   static IExecutable newExecutable(BiConsumer<ExecutionStack, DelegateBridge> action) {\n\n      return new IExecutable() {\n\n          @Override\n          public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n            action.accept(stack, bridge);\n          }\n      }\n   }\n}\n\n\nThat would make the current code nicer. Though, I'm starting to think our biggest gains is by removing the IDelegateBridge from the interface if possible. IMO it's important that we are making such a future decoupling easier rather than more difficult.", "url": "https://github.com/triplea-game/triplea/pull/7576#discussion_r485259985", "createdAt": "2020-09-09T00:02:21Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1553,15 +1547,15 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n       steps.add(offensiveFirstStrike);\n     }\n     // Attacker fire remaining units\n-    steps.add(\n-        new StandardAttackersFire() {\n-          private static final long serialVersionUID = 99994L;\n+    steps.add(offensiveStandard);\n+    new IExecutable() {\n+      private static final long serialVersionUID = 99994L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2MDIzMg==", "bodyText": "nit, can we use a different word than standard? I don't know it's well enough defined to have a lot of meaning. DefensiveRoll would perhaps be just as meaningful. standard raises the question, what is non-standard?", "url": "https://github.com/triplea-game/triplea/pull/7576#discussion_r485260232", "createdAt": "2020-09-09T00:03:21Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1576,15 +1570,15 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n       }\n     };\n \n-    steps.add(\n-        new IExecutable() {\n-          private static final long serialVersionUID = 1560702114917865290L;\n+    steps.add(defensiveStandard);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2MTA5Nw==", "bodyText": "Have you considered inlining these methods 'standardAttackersFire' and 'standardDefendersFire'? WDYT about that idea? Otherwise, can you clarify the motivation or benefit for having them?\nAs-is, from a casual perspective, we have a one-line method (the IExecutable) that uses none of the passed in args, which invokes a single use method that is itself a one-liner. Usually such patterns are candidates for inlining to reduce indirection. Perhaps I'm missing something (?)  (an answer to the above questions might point out what that is)", "url": "https://github.com/triplea-game/triplea/pull/7576#discussion_r485261097", "createdAt": "2020-09-09T00:06:05Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1687,32 +1681,6 @@ private void checkForUnitsThatCanRollLeft(final IDelegateBridge bridge, final bo\n     }\n   }\n \n-  private void standardAttackersFire() {\n-    findTargetGroupsAndFire(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2MjYwOQ==", "bodyText": "Side-note, it seems like this class knows quite a lot:\n\nhow to form step names (EG:  attacker.getName() + FIRE\nhow to extract step names (EG: steps.addAll(offensiveFirstStrike.getNames());)\nthe ordering of steps\nif to offer certain steps (evaluates retreat rules, eg: line 215 (if (RetreatChecks.canAttackerRetreat(...)\n\nAny thoughts about this long term and if we're heading in a direction to fix this?", "url": "https://github.com/triplea-game/triplea/pull/7576#discussion_r485262609", "createdAt": "2020-09-09T00:11:41Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -185,20 +189,14 @@ public boolean isAmphibious() {\n       steps.addAll(offensiveFirstStrike.getNames());\n     }\n     steps.addAll(airAttackVsNonSubs.getNames());\n+    steps.addAll(offensiveStandard.getNames());\n \n-    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n-      steps.add(attacker.getName() + FIRE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2Mjg2Nw==", "bodyText": "Some elements have multiple steps, eg:  steps.addAll(submergeSubsVsOnlyAir.getNames());, can we use the same pattern here for attacker? EG: attacker.getNames()? This way we can avoid forming the 'fire & select casualties' here.", "url": "https://github.com/triplea-game/triplea/pull/7576#discussion_r485262867", "createdAt": "2020-09-09T00:12:42Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -185,20 +189,14 @@ public boolean isAmphibious() {\n       steps.addAll(offensiveFirstStrike.getNames());\n     }\n     steps.addAll(airAttackVsNonSubs.getNames());\n+    steps.addAll(offensiveStandard.getNames());\n \n-    if (attackingUnits.stream().anyMatch(Matches.unitIsFirstStrike().negate())) {\n-      steps.add(attacker.getName() + FIRE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2MzQwOQ==", "bodyText": "Any thoughts if we can have something return this value to us?\nPerhaps we can create a module that calculates the next step and returns that as a value. IN such a case if we inject that we can then mock and control it, in which case the findTarggsGroupsAndFire parameters is not terribly interesting since it mostly comes from mocks, but ultimately testable. In turn, that module can be tested directly with a very functional style and few mocks and particularly no checking that a void method call was called with the right arguments. Thoughts?", "url": "https://github.com/triplea-game/triplea/pull/7576#discussion_r485263409", "createdAt": "2020-09-09T00:14:41Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/standard/DefensiveStandardTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.standard;\n+\n+import static games.strategy.triplea.delegate.battle.FakeBattleState.givenBattleStateBuilder;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenAnyUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitFirstStrike;\n+import static games.strategy.triplea.delegate.battle.steps.MockGameData.givenGameData;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyCollection;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.MustFightBattle;\n+import java.util.List;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class DefensiveStandardTest {\n+\n+  @Mock ExecutionStack executionStack;\n+  @Mock IDelegateBridge delegateBridge;\n+  @Mock BattleActions battleActions;\n+\n+  @Nested\n+  class GetNames {\n+    @Test\n+    void hasNamesIfStandardUnitAvailable() {\n+      final GameData gameData =\n+          givenGameData().withDefendingSuicideAndMunitionUnitsDoNotFire(false).build();\n+      final BattleState battleState =\n+          givenBattleStateBuilder()\n+              .defendingUnits(List.of(givenAnyUnit()))\n+              .gameData(gameData)\n+              .build();\n+      final DefensiveStandard defensiveStandard = new DefensiveStandard(battleState, battleActions);\n+      assertThat(defensiveStandard.getNames(), hasSize(2));\n+    }\n+\n+    @Test\n+    void hasNoNamesIfStandardUnitIsNotAvailable() {\n+      final GameData gameData =\n+          givenGameData().withDefendingSuicideAndMunitionUnitsDoNotFire(false).build();\n+      final BattleState battleState =\n+          givenBattleStateBuilder()\n+              .defendingUnits(List.of(givenUnitFirstStrike()))\n+              .gameData(gameData)\n+              .build();\n+      final DefensiveStandard defensiveStandard = new DefensiveStandard(battleState, battleActions);\n+      assertThat(defensiveStandard.getNames(), hasSize(0));\n+    }\n+  }\n+\n+  @Nested\n+  class FireAa {\n+    @Test\n+    void onlyFireStandardUnits() {\n+      final GameData gameData =\n+          givenGameData().withDefendingSuicideAndMunitionUnitsDoNotFire(false).build();\n+      final DefensiveStandard defensiveStandard =\n+          new DefensiveStandard(\n+              givenBattleStateBuilder().defendingAa(List.of()).gameData(gameData).build(),\n+              battleActions);\n+\n+      defensiveStandard.execute(executionStack, delegateBridge);\n+\n+      verify(battleActions)\n+          .findTargetGroupsAndFire(\n+              eq(MustFightBattle.ReturnFire.ALL),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NjcwMjQ2", "url": "https://github.com/triplea-game/triplea/pull/7576#pullrequestreview-484670246", "createdAt": "2020-09-09T05:26:41Z", "commit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNToyNjo0MVrOHO3L7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNToyNjo0MVrOHO3L7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0NjI4Nw==", "bodyText": "nit, there is a IsEmptyCollection.empty() matcher, often used with the is matcher:\nassertThat(offensiveStandard.getNames(), is(empty());\n\nHave you considered using the matcher? If the test fails that matcher will print the contents of the collection rather than reporting simply that the size was not zero.", "url": "https://github.com/triplea-game/triplea/pull/7576#discussion_r485346287", "createdAt": "2020-09-09T05:26:41Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/standard/OffensiveStandardTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.standard;\n+\n+import static games.strategy.triplea.delegate.battle.FakeBattleState.givenBattleStateBuilder;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenAnyUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitFirstStrike;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyCollection;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.MustFightBattle;\n+import java.util.List;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class OffensiveStandardTest {\n+\n+  @Mock ExecutionStack executionStack;\n+  @Mock IDelegateBridge delegateBridge;\n+  @Mock BattleActions battleActions;\n+\n+  @Nested\n+  class GetNames {\n+    @Test\n+    void hasNamesIfStandardUnitAvailable() {\n+      final BattleState battleState =\n+          givenBattleStateBuilder().attackingUnits(List.of(givenAnyUnit())).build();\n+      final OffensiveStandard offensiveStandard = new OffensiveStandard(battleState, battleActions);\n+      assertThat(offensiveStandard.getNames(), hasSize(2));\n+    }\n+\n+    @Test\n+    void hasNoNamesIfStandardUnitIsNotAvailable() {\n+      final BattleState battleState =\n+          givenBattleStateBuilder().attackingUnits(List.of(givenUnitFirstStrike())).build();\n+      final OffensiveStandard offensiveStandard = new OffensiveStandard(battleState, battleActions);\n+      assertThat(offensiveStandard.getNames(), hasSize(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NjcwNTE4", "url": "https://github.com/triplea-game/triplea/pull/7576#pullrequestreview-484670518", "createdAt": "2020-09-09T05:27:29Z", "commit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNToyNzoyOVrOHO3MzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNToyNzoyOVrOHO3MzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0NjUwOQ==", "bodyText": "Good to see a lot of custom mocking removed \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/7576#discussion_r485346509", "createdAt": "2020-09-09T05:27:29Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/retreat/OffensiveSubsRetreatTest.java", "diffHunk": "@@ -325,53 +316,4 @@ void retreatDoesNotHappenWhenCanNotSubmergeAndNoRetreatTerritories() {\n \n     verify(battleActions, never()).queryRetreat(anyBoolean(), any(), any(), any());\n   }\n-\n-  public static class MockGameData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd72b85200ec7e9de2890aad83a034332b1ffb4"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e5463ea338427bce74522c0bc45579454b8a7ef", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/3e5463ea338427bce74522c0bc45579454b8a7ef", "committedDate": "2020-09-09T21:37:15Z", "message": "Clean up tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cc534ac2cc7c0ab6be8d9b1aaa456654dac7dd0", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/0cc534ac2cc7c0ab6be8d9b1aaa456654dac7dd0", "committedDate": "2020-09-09T21:45:20Z", "message": "Rename standard -> general"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae9ea875accb2fb6da5c6f23c8b053005527d3e4", "author": {"user": {"login": "tripleabuilderbot", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/ae9ea875accb2fb6da5c6f23c8b053005527d3e4", "committedDate": "2020-09-09T21:44:11Z", "message": "Auto-Formatting"}, "afterCommit": {"oid": "0cc534ac2cc7c0ab6be8d9b1aaa456654dac7dd0", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/0cc534ac2cc7c0ab6be8d9b1aaa456654dac7dd0", "committedDate": "2020-09-09T21:45:20Z", "message": "Rename standard -> general"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDgxODg4", "url": "https://github.com/triplea-game/triplea/pull/7576#pullrequestreview-485481888", "createdAt": "2020-09-10T00:09:25Z", "commit": {"oid": "0cc534ac2cc7c0ab6be8d9b1aaa456654dac7dd0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3989, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}