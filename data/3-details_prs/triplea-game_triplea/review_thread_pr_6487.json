{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTg3NzY0", "number": 6487, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzowMjoyNVrOD9NJ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNlrOENSM6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTA1MjM2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzowMjoyNVrOGWkMBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzowMjoyNVrOGWkMBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxNDc1Nw==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426314757", "createdAt": "2020-05-17T23:02:25Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(\n+              \"Fetching Login Token...\",\n+              () -> {\n+                final NodeBbTokenGenerator tokenGenerator = new NodeBbTokenGenerator(forumUrl);\n+                final Optional<Integer> oldUserId = uidSetting.getValue();\n+                final Optional<char[]> oldToken = tokenSetting.getValue();\n+                if (!usernameField.getText().isEmpty()) {\n+                  final TokenInfo tokenInfo =\n+                      tokenGenerator.generateToken(\n+                          usernameField.getText(),\n+                          new String(passwordField.getPassword()),\n+                          Strings.emptyToNull(otpField.getText()));\n+                  context.setValue(uidSetting, tokenInfo.getUserId());\n+\n+                  context.setValue(tokenSetting, tokenInfo.getToken().toCharArray());\n+\n+                  context.setValue(usernameSetting, usernameField.getText().toCharArray());\n+                  // TODO error reporting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTA1NTYyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditorViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzowODoyNlrOGWkN0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzowODoyNlrOGWkN0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxNTIxNg==", "bodyText": "This class is just band-aided so I could use the \"Test PbF\" button and everything compiles properly.\nThis will obviously change in the final verison of this PR, but I haven't had them time for everything today.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426315216", "createdAt": "2020-05-17T23:08:26Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditorViewModel.java", "diffHunk": "@@ -120,7 +120,10 @@ synchronized void setTopicId(final String topicId) {\n   }\n \n   synchronized boolean areFieldsValid() {\n-    return isTopicIdValid() && isForumUsernameValid() && isForumPasswordValid();\n+    return isTopicIdValid()\n+        && ((isForumUsernameValid() && isForumPasswordValid())\n+            || ClientSetting.aaForumToken.isSet()\n+            || ClientSetting.tripleaForumToken.isSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTA1Njg2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzoxMDo1MFrOGWkOhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzoxMDo1MFrOGWkOhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxNTM5Ng==", "bodyText": "I will properly clear any char arrays in the final form as well, even though I'm not sure if actually encrypting everything is that important now", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426315396", "createdAt": "2020-05-17T23:10:50Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -724,14 +727,28 @@ public void reset() {\n     };\n   }\n \n+  /**\n+   * Creates UI Controls to fetch a login token and safely store it in the ClientSettings.\n+   *\n+   * @param uidSetting The uid setting used to potentially revoke old tokens\n+   * @param usernameSetting The setting that stores the username being displayed to the user\n+   * @param tokenSetting The setting that stores the actual token.\n+   * @return A SelectionComponent that allows users to easily store their token.\n+   */\n   static SelectionComponent<JComponent> forumPosterSettings(\n-      final ClientSetting<char[]> usernameSetting, final ClientSetting<char[]> passwordSetting) {\n+      final String forumUrl,\n+      final ClientSetting<Integer> uidSetting,\n+      final ClientSetting<char[]> usernameSetting,\n+      final ClientSetting<char[]> tokenSetting) {\n     return new SelectionComponent<>() {\n \n       private final JTextField usernameField =\n-          new JTextField(credentialToString(usernameSetting::getValue), 20);\n-      private final JPasswordField passwordField =\n-          new JPasswordField(credentialToString(passwordSetting::getValue), 20);\n+          new JTextFieldBuilder()\n+              .columns(20)\n+              .text(usernameSetting.getValue().map(String::new).orElse(\"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTExOTczOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditorViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozODo0MVrOGWkxVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozODo0MVrOGWkxVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDMxMA==", "bodyText": "If I understand correctly, we'll use 'username' + 'password' to create a token via API, then store that token but not the password (correct?).\nIf so, I think we probably want this field to check if the token is set. If the token is set, then we can fill in the password field with a dummy value to make it look like there is something filled in (that should be essentially what we have now - the reason for that is so we don't have to read the password from settings and set the actual value to the text field. Instead we use a dummy string to show that the field is set).", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426324310", "createdAt": "2020-05-18T00:38:41Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditorViewModel.java", "diffHunk": "@@ -88,10 +88,10 @@ synchronized void setForumSelection(final String forumSelection) {\n         this.forumSelection.equals(NodeBbForumPoster.TRIPLEA_FORUM_DISPLAY_NAME)\n             ? ClientSetting.tripleaForumUsername.getValue().map(String::valueOf).orElse(\"\")\n             : ClientSetting.aaForumUsername.getValue().map(String::valueOf).orElse(\"\");\n-    forumPasswordIsSet =\n+    forumPasswordIsSet = false; /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTEyMTcyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo0MDo0M1rOGWkyYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDowMzowOFrOGWwQTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDU3Nw==", "bodyText": "Any thoughts to first, or as part of this PR, to convert the http client to Feign?\nI mention that for a few reasons:\n\nthe different styles/technologies for http communication is inconsistent. It's one of the technology consistencies that a project really should try to keep so you limit how many technologies you need to learn and how many different patterns there are for doing something.\nthe test infrastructure for http communication with feign client is pretty straight forward. At this point with wiremock, we should be testing this client, going to a consistent pattern and using the same technological infrastructure would make that easy.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426324577", "createdAt": "2020-05-18T00:40:43Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMjQ2Mg==", "bodyText": "I was thinking about migrating away from http component to either use the built-in java API that's pretty neat or feign, but not as part of this PR", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426512462", "createdAt": "2020-05-18T10:03:08Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDU3Nw=="}, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTEyNDA2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo0Mzo1MlrOGWkzxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDowMjoxN1rOGWwOUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDkzNA==", "bodyText": "ignore error is a bit scary \ud83d\ude01\nShould we at least info log them? Have you seen this throw errors?", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426324934", "createdAt": "2020-05-18T00:43:52Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMTk1NA==", "bodyText": "This is super funny, because you introduced this change in the first place ^^\nTook me a while to find the commit though: https://github.com/triplea-game/triplea/pull/3715/files#diff-317b30fefdd065ba13162cb51844ab22L93-R96", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426511954", "createdAt": "2020-05-18T10:02:17Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDkzNA=="}, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTEyNTY3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo0NTo0OVrOGWk0rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MjowM1rOGWv1mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNTE2Nw==", "bodyText": "Bit nitpicky, I think we should try to avoid jsonObject. The debian variant of TripleA ripped these out, the lack of type-safety is not great. Going to Feign makes this mapping to Java object automatic. If migrating to Feign, this would be moot, otherwise have you considered using GSON?", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426325167", "createdAt": "2020-05-18T00:45:49Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close\n+  }\n+\n+  private int getUserId(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final Map<?, ?> jsonObject = queryUserInfo(client, username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNTYyNA==", "bodyText": "This used to be a json dependency, but it is currently just using the snakeyaml-engine dependency wich supports the yaml 1.2 standard -> json support.\nFeign would be an option for a follow-up PR, but out of scope for this one", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426505624", "createdAt": "2020-05-18T09:52:03Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close\n+  }\n+\n+  private int getUserId(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final Map<?, ?> jsonObject = queryUserInfo(client, username);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNTE2Nw=="}, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTEyNzE2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo0NzowNlrOGWk1bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0OTozN1rOGWvvcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNTM1OA==", "bodyText": "nit, we probably want to take care about exception types. Exceptions that we may show to users we would want to be probably first-class exceptions. Maybe even more ideally not exceptions at all. For example this checkUser method could return a status flag, that would eliminate control-flow-by-exception. What do you think?", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426325358", "createdAt": "2020-05-18T00:47:06Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close\n+  }\n+\n+  private int getUserId(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final Map<?, ?> jsonObject = queryUserInfo(client, username);\n+    checkUser(jsonObject, username);\n+    return (Integer) jsonObject.get(\"uid\");\n+  }\n+\n+  private void checkUser(final Map<?, ?> jsonObject, final String username) {\n+    if (!jsonObject.containsKey(\"uid\")) {\n+      throw new IllegalStateException(String.format(\"User %s doesn't exist.\", username));\n+    }\n+    if (1 == (Integer) jsonObject.get(\"banned\")) {\n+      throw new IllegalStateException(\"Your account is banned from the forum.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDA1MQ==", "bodyText": "I agree the Exceptions are not ideal, but to get this done I just copied the implementation from the forum poster class, so I didn't really change anything here", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426504051", "createdAt": "2020-05-18T09:49:37Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close\n+  }\n+\n+  private int getUserId(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final Map<?, ?> jsonObject = queryUserInfo(client, username);\n+    checkUser(jsonObject, username);\n+    return (Integer) jsonObject.get(\"uid\");\n+  }\n+\n+  private void checkUser(final Map<?, ?> jsonObject, final String username) {\n+    if (!jsonObject.containsKey(\"uid\")) {\n+      throw new IllegalStateException(String.format(\"User %s doesn't exist.\", username));\n+    }\n+    if (1 == (Integer) jsonObject.get(\"banned\")) {\n+      throw new IllegalStateException(\"Your account is banned from the forum.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNTM1OA=="}, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTEyODczOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo0OTowNFrOGWk2Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo0OTowNFrOGWk2Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNTU5OA==", "bodyText": "I know we had the discussion about passwords as String being security theater. IMO if we can keep passwords as char[] without too much trouble, it's not a bad thing. Said another way, if we don't have to go too far out of our way to use char[] for password, we probably should.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426325598", "createdAt": "2020-05-18T00:49:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(\n+              \"Fetching Login Token...\",\n+              () -> {\n+                final NodeBbTokenGenerator tokenGenerator = new NodeBbTokenGenerator(forumUrl);\n+                final Optional<Integer> oldUserId = uidSetting.getValue();\n+                final Optional<char[]> oldToken = tokenSetting.getValue();\n+                if (!usernameField.getText().isEmpty()) {\n+                  final TokenInfo tokenInfo =\n+                      tokenGenerator.generateToken(\n+                          usernameField.getText(),\n+                          new String(passwordField.getPassword()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTEzMDQ5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo1MDo1M1rOGWk3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo1MDo1M1rOGWk3Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNTgzMQ==", "bodyText": "Side-note, we really need to update BackTasRunner to be closeable. If anything crashes  while this is running we can run into problems. Notably if any exception is uncaught, then is handled and shows the error dialog, the background task will not complete until the dialog is closed and the dialog cannot be closed because the background task runner is modal and does not give up UI focus.\nWe'll probably want to test this out and/or fix the background task runner. We could see problems if the lobby were not responding or is being restarted, in such a case we'd want a graceful failure.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426325831", "createdAt": "2020-05-18T00:50:53Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTEzMjUyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo1MzowN1rOGWk4ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo1MzowN1rOGWk4ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNjExNg==", "bodyText": "Perhaps we want to use isBlank() instead of isEmpty().\nDo we currently already enforce a minimum length check on usename before the 'save' button is enabled? It might be the case that we've already guaranteed that there is a non-empty value that is of a minimum length before we hit this code which would make this validation redundant.\nSide-comment, redundant client-side validation can generally be removed. If someone hacks it up so a button is enabled without validation, they can hack this. Server validation needs to be redundant in case a client hacks out the validation (or is just using straight-up curl or something similar).", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426326116", "createdAt": "2020-05-18T00:53:07Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(\n+              \"Fetching Login Token...\",\n+              () -> {\n+                final NodeBbTokenGenerator tokenGenerator = new NodeBbTokenGenerator(forumUrl);\n+                final Optional<Integer> oldUserId = uidSetting.getValue();\n+                final Optional<char[]> oldToken = tokenSetting.getValue();\n+                if (!usernameField.getText().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTEzNDYyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo1NTozOFrOGWk5pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0MDozMVrOGkKKAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNjQzNg==", "bodyText": "I don't think username should be a char[], IMO it's just not sensitive enough. Does it make sense changing username to be a String value before, after or in this PR?", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426326436", "createdAt": "2020-05-18T00:55:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(\n+              \"Fetching Login Token...\",\n+              () -> {\n+                final NodeBbTokenGenerator tokenGenerator = new NodeBbTokenGenerator(forumUrl);\n+                final Optional<Integer> oldUserId = uidSetting.getValue();\n+                final Optional<char[]> oldToken = tokenSetting.getValue();\n+                if (!usernameField.getText().isEmpty()) {\n+                  final TokenInfo tokenInfo =\n+                      tokenGenerator.generateToken(\n+                          usernameField.getText(),\n+                          new String(passwordField.getPassword()),\n+                          Strings.emptyToNull(otpField.getText()));\n+                  context.setValue(uidSetting, tokenInfo.getUserId());\n+\n+                  context.setValue(tokenSetting, tokenInfo.getToken().toCharArray());\n+\n+                  context.setValue(usernameSetting, usernameField.getText().toCharArray());\n+                  // TODO error reporting\n+                } else {\n+                  context.setValue(usernameSetting, null);\n+                  context.setValue(uidSetting, null);\n+                  context.setValue(tokenSetting, null);\n+                }\n+\n+                oldUserId.ifPresent(\n+                    userId ->\n+                        oldToken.ifPresent(\n+                            token -> tokenGenerator.revokeToken(new String(token), userId)));\n+              });\n+        } catch (final InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+        }\n+\n+        /*final String username = usernameField.getText();\n+        context.setValue(uidSetting, username.isEmpty() ? null : username.toCharArray());\n         withSensitiveArray(\n             passwordField::getPassword,\n             password ->\n                 context.setValue(\n                     passwordSetting,\n                     (password.length == 0) ? null : password,\n-                    SaveContext.ValueSensitivity.SENSITIVE));\n+                    SaveContext.ValueSensitivity.SENSITIVE));*/\n       }\n \n       @Override\n       public void resetToDefault() {\n-        usernameField.setText(credentialToString(usernameSetting::getDefaultValue));\n-        passwordField.setText(credentialToString(passwordSetting::getDefaultValue));\n+        usernameField.setText(\"\");\n+        passwordField.setText(\"\");\n       }\n \n       @Override\n       public void reset() {\n-        usernameField.setText(credentialToString(usernameSetting::getValue));\n-        passwordField.setText(credentialToString(passwordSetting::getValue));\n+        usernameField.setText(usernameSetting.getValue().map(String::new).orElse(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5OTQyNw==", "bodyText": "Yes and no.\nIt would make sense changing it to a normal string, but for usernames that are actually stored already it would fill the username field with a cryptic string for the first time, so we'd have to change the name of the setting to something different.\nRegardless I think we should offer a button that performs a \"factory reset\" on the preferences store so users have a way to clear out settings that might no longer be there at all.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r426499427", "createdAt": "2020-05-18T09:42:10Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(\n+              \"Fetching Login Token...\",\n+              () -> {\n+                final NodeBbTokenGenerator tokenGenerator = new NodeBbTokenGenerator(forumUrl);\n+                final Optional<Integer> oldUserId = uidSetting.getValue();\n+                final Optional<char[]> oldToken = tokenSetting.getValue();\n+                if (!usernameField.getText().isEmpty()) {\n+                  final TokenInfo tokenInfo =\n+                      tokenGenerator.generateToken(\n+                          usernameField.getText(),\n+                          new String(passwordField.getPassword()),\n+                          Strings.emptyToNull(otpField.getText()));\n+                  context.setValue(uidSetting, tokenInfo.getUserId());\n+\n+                  context.setValue(tokenSetting, tokenInfo.getToken().toCharArray());\n+\n+                  context.setValue(usernameSetting, usernameField.getText().toCharArray());\n+                  // TODO error reporting\n+                } else {\n+                  context.setValue(usernameSetting, null);\n+                  context.setValue(uidSetting, null);\n+                  context.setValue(tokenSetting, null);\n+                }\n+\n+                oldUserId.ifPresent(\n+                    userId ->\n+                        oldToken.ifPresent(\n+                            token -> tokenGenerator.revokeToken(new String(token), userId)));\n+              });\n+        } catch (final InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+        }\n+\n+        /*final String username = usernameField.getText();\n+        context.setValue(uidSetting, username.isEmpty() ? null : username.toCharArray());\n         withSensitiveArray(\n             passwordField::getPassword,\n             password ->\n                 context.setValue(\n                     passwordSetting,\n                     (password.length == 0) ? null : password,\n-                    SaveContext.ValueSensitivity.SENSITIVE));\n+                    SaveContext.ValueSensitivity.SENSITIVE));*/\n       }\n \n       @Override\n       public void resetToDefault() {\n-        usernameField.setText(credentialToString(usernameSetting::getDefaultValue));\n-        passwordField.setText(credentialToString(passwordSetting::getDefaultValue));\n+        usernameField.setText(\"\");\n+        passwordField.setText(\"\");\n       }\n \n       @Override\n       public void reset() {\n-        usernameField.setText(credentialToString(usernameSetting::getValue));\n-        passwordField.setText(credentialToString(passwordSetting::getValue));\n+        usernameField.setText(usernameSetting.getValue().map(String::new).orElse(\"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNjQzNg=="}, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2ODMyMw==", "bodyText": "IF we change datatype of a client setting, we only need to change the name of the setting. Having something clear out old settings would be nice, but I think certainly nice and not required.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r440568323", "createdAt": "2020-06-16T03:40:31Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -749,27 +768,67 @@ public JComponent getUiComponent() {\n \n       @Override\n       public void save(final SaveContext context) {\n-        final String username = usernameField.getText();\n-        context.setValue(usernameSetting, username.isEmpty() ? null : username.toCharArray());\n+        // Only save when value changed\n+        if (usernameField\n+            .getText()\n+            .equals(usernameSetting.getValue().map(String::new).orElse(\"\"))) {\n+          return;\n+        }\n+        try {\n+          BackgroundTaskRunner.runInBackground(\n+              \"Fetching Login Token...\",\n+              () -> {\n+                final NodeBbTokenGenerator tokenGenerator = new NodeBbTokenGenerator(forumUrl);\n+                final Optional<Integer> oldUserId = uidSetting.getValue();\n+                final Optional<char[]> oldToken = tokenSetting.getValue();\n+                if (!usernameField.getText().isEmpty()) {\n+                  final TokenInfo tokenInfo =\n+                      tokenGenerator.generateToken(\n+                          usernameField.getText(),\n+                          new String(passwordField.getPassword()),\n+                          Strings.emptyToNull(otpField.getText()));\n+                  context.setValue(uidSetting, tokenInfo.getUserId());\n+\n+                  context.setValue(tokenSetting, tokenInfo.getToken().toCharArray());\n+\n+                  context.setValue(usernameSetting, usernameField.getText().toCharArray());\n+                  // TODO error reporting\n+                } else {\n+                  context.setValue(usernameSetting, null);\n+                  context.setValue(uidSetting, null);\n+                  context.setValue(tokenSetting, null);\n+                }\n+\n+                oldUserId.ifPresent(\n+                    userId ->\n+                        oldToken.ifPresent(\n+                            token -> tokenGenerator.revokeToken(new String(token), userId)));\n+              });\n+        } catch (final InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+        }\n+\n+        /*final String username = usernameField.getText();\n+        context.setValue(uidSetting, username.isEmpty() ? null : username.toCharArray());\n         withSensitiveArray(\n             passwordField::getPassword,\n             password ->\n                 context.setValue(\n                     passwordSetting,\n                     (password.length == 0) ? null : password,\n-                    SaveContext.ValueSensitivity.SENSITIVE));\n+                    SaveContext.ValueSensitivity.SENSITIVE));*/\n       }\n \n       @Override\n       public void resetToDefault() {\n-        usernameField.setText(credentialToString(usernameSetting::getDefaultValue));\n-        passwordField.setText(credentialToString(passwordSetting::getDefaultValue));\n+        usernameField.setText(\"\");\n+        passwordField.setText(\"\");\n       }\n \n       @Override\n       public void reset() {\n-        usernameField.setText(credentialToString(usernameSetting::getValue));\n-        passwordField.setText(credentialToString(passwordSetting::getValue));\n+        usernameField.setText(usernameSetting.getValue().map(String::new).orElse(\"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNjQzNg=="}, "originalCommit": {"oid": "ab9c619722afdf840cb943a271451a4e26799170"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDIyNTAyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditorViewModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo1Nzo0MVrOGph7Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDozNToxMVrOGqnW4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMDY3MQ==", "bodyText": "We no longer store passwords, so we have to go for something. Thoughts regarding the recent events? @DanVanAtta", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446200671", "createdAt": "2020-06-26T13:57:41Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditorViewModel.java", "diffHunk": "@@ -7,19 +7,27 @@\n import games.strategy.engine.framework.startup.ui.posted.game.HelpTexts;\n import games.strategy.engine.framework.startup.ui.posted.game.pbf.test.post.SwingTestPostProgressDisplayFactory;\n import games.strategy.engine.framework.startup.ui.posted.game.pbf.test.post.TestPostAction;\n+import games.strategy.engine.framework.ui.background.BackgroundTaskRunner;\n import games.strategy.engine.posted.game.pbf.IForumPoster;\n import games.strategy.engine.posted.game.pbf.NodeBbForumPoster;\n+import games.strategy.engine.posted.game.pbf.NodeBbTokenGenerator;\n+import games.strategy.triplea.UrlConstants;\n import games.strategy.triplea.settings.ClientSetting;\n+import java.nio.CharBuffer;\n+import java.util.Arrays;\n import java.util.Optional;\n import java.util.function.BiConsumer;\n import java.util.function.Predicate;\n import lombok.Getter;\n import lombok.Setter;\n+import org.triplea.java.Interruptibles;\n import org.triplea.java.Postconditions;\n import org.triplea.java.StringUtils;\n import org.triplea.java.ViewModelListener;\n \n class ForumPosterEditorViewModel {\n+  private static final int DUMMY_PASSWORD_LENGTH = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2135f08ec5098de8d253f89eb9e5281efd43b763"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzODIwOA==", "bodyText": "Oh.. the UX should be changed then probably. Perhaps a button to log in to the forum, clicking that asks for username and password, and once done then the user sees a \"credentials saved\" label somewhere and are given a button to clear their credentials. When entering in their credentials, that would be a good place to have a checkbox for \"clear credentials when the application closes\".\nThis way we never need to enter in a dummy password at all, we don't have to worry about a remember password checkbox, and if the credentials are already entered we don't show needless text fields on the UI.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r447338208", "createdAt": "2020-06-30T00:35:11Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditorViewModel.java", "diffHunk": "@@ -7,19 +7,27 @@\n import games.strategy.engine.framework.startup.ui.posted.game.HelpTexts;\n import games.strategy.engine.framework.startup.ui.posted.game.pbf.test.post.SwingTestPostProgressDisplayFactory;\n import games.strategy.engine.framework.startup.ui.posted.game.pbf.test.post.TestPostAction;\n+import games.strategy.engine.framework.ui.background.BackgroundTaskRunner;\n import games.strategy.engine.posted.game.pbf.IForumPoster;\n import games.strategy.engine.posted.game.pbf.NodeBbForumPoster;\n+import games.strategy.engine.posted.game.pbf.NodeBbTokenGenerator;\n+import games.strategy.triplea.UrlConstants;\n import games.strategy.triplea.settings.ClientSetting;\n+import java.nio.CharBuffer;\n+import java.util.Arrays;\n import java.util.Optional;\n import java.util.function.BiConsumer;\n import java.util.function.Predicate;\n import lombok.Getter;\n import lombok.Setter;\n+import org.triplea.java.Interruptibles;\n import org.triplea.java.Postconditions;\n import org.triplea.java.StringUtils;\n import org.triplea.java.ViewModelListener;\n \n class ForumPosterEditorViewModel {\n+  private static final int DUMMY_PASSWORD_LENGTH = 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMDY3MQ=="}, "originalCommit": {"oid": "2135f08ec5098de8d253f89eb9e5281efd43b763"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDI2MjcxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDowNzo1MVrOGpiS6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMDozNTowN1rOGqBmvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwNjY5Ng==", "bodyText": "Note this fix for #6737 I added", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446206696", "createdAt": "2020-06-26T14:07:51Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close\n+  }\n+\n+  private int getUserId(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final Map<?, ?> jsonObject = queryUserInfo(client, username);\n+    checkUser(jsonObject, username);\n+    return (Integer) jsonObject.get(\"uid\");\n+  }\n+\n+  private void checkUser(final Map<?, ?> jsonObject, final String username) {\n+    if (!jsonObject.containsKey(\"uid\")) {\n+      throw new IllegalStateException(String.format(\"User %s doesn't exist.\", username));\n+    }\n+    if (1 == (Integer) jsonObject.get(\"banned\")) {\n+      throw new IllegalStateException(\"Your account is banned from the forum.\");\n+    }\n+    if (1 != (Integer) jsonObject.get(\"email:confirmed\")) {\n+      throw new IllegalStateException(\"Your email isn't confirmed yet!\");\n+    }\n+  }\n+\n+  private Map<?, ?> queryUserInfo(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final String encodedUsername = URLEncoder.encode(username, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2135f08ec5098de8d253f89eb9e5281efd43b763"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxOTM5Mg==", "bodyText": "@RoiEXLab we should probably put the bug fix to its own PR:\n\nwhen this gets squashed, a bug fix being mixed in with a feature update will be somewhat confusing\nthe bugfix needs to go out with the next release, which could be as soon as tonight or tomorrow.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446719392", "createdAt": "2020-06-29T00:32:52Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close\n+  }\n+\n+  private int getUserId(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final Map<?, ?> jsonObject = queryUserInfo(client, username);\n+    checkUser(jsonObject, username);\n+    return (Integer) jsonObject.get(\"uid\");\n+  }\n+\n+  private void checkUser(final Map<?, ?> jsonObject, final String username) {\n+    if (!jsonObject.containsKey(\"uid\")) {\n+      throw new IllegalStateException(String.format(\"User %s doesn't exist.\", username));\n+    }\n+    if (1 == (Integer) jsonObject.get(\"banned\")) {\n+      throw new IllegalStateException(\"Your account is banned from the forum.\");\n+    }\n+    if (1 != (Integer) jsonObject.get(\"email:confirmed\")) {\n+      throw new IllegalStateException(\"Your email isn't confirmed yet!\");\n+    }\n+  }\n+\n+  private Map<?, ?> queryUserInfo(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final String encodedUsername = URLEncoder.encode(username, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwNjY5Ng=="}, "originalCommit": {"oid": "2135f08ec5098de8d253f89eb9e5281efd43b763"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxOTY3OQ==", "bodyText": "Would be nice to see a test case for this as well considering it was a bug. Tests are good for preventing future regressions, ensuring bugs are fixed well, and for giving feedback if the code is designed well, which should drive generally better code design (or at least prevent completely ad-hoc and  chaotic design).", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446719679", "createdAt": "2020-06-29T00:35:07Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);\n+    }\n+  }\n+\n+  private void deleteToken(final CloseableHttpClient client, final int userId, final String token)\n+      throws IOException {\n+    final HttpDelete httpDelete =\n+        new HttpDelete(forumUrl + \"/api/v2/users/\" + userId + \"/tokens/\" + token);\n+    HttpProxy.addProxy(httpDelete);\n+    httpDelete.addHeader(\"Authorization\", \"Bearer \" + token);\n+    client.execute(httpDelete).close(); // ignore errors, execute and then close\n+  }\n+\n+  private int getUserId(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final Map<?, ?> jsonObject = queryUserInfo(client, username);\n+    checkUser(jsonObject, username);\n+    return (Integer) jsonObject.get(\"uid\");\n+  }\n+\n+  private void checkUser(final Map<?, ?> jsonObject, final String username) {\n+    if (!jsonObject.containsKey(\"uid\")) {\n+      throw new IllegalStateException(String.format(\"User %s doesn't exist.\", username));\n+    }\n+    if (1 == (Integer) jsonObject.get(\"banned\")) {\n+      throw new IllegalStateException(\"Your account is banned from the forum.\");\n+    }\n+    if (1 != (Integer) jsonObject.get(\"email:confirmed\")) {\n+      throw new IllegalStateException(\"Your email isn't confirmed yet!\");\n+    }\n+  }\n+\n+  private Map<?, ?> queryUserInfo(final CloseableHttpClient client, final String username)\n+      throws IOException {\n+    final String encodedUsername = URLEncoder.encode(username, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwNjY5Ng=="}, "originalCommit": {"oid": "2135f08ec5098de8d253f89eb9e5281efd43b763"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzk2ODM1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMDozNzozOFrOGqBn3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDoyOTozMVrOGqnP_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxOTk2Ng==", "bodyText": "otp is not that well known of an acronym. What is it spelled out?\nCan we add a help text or box next to this as well to explain what this is for a user? We do want people to use this after all. If we look at the 1.9 PBF menu, we can see that the game explained pretty much all the options quite well. This meant any user could learn how to use PBF, even if it was kinda clunky.\n2FA OTP-code is a bit cryptic to even me. I think we'll need to help users a bit more, and/or explain when/why they'd want to use this. I'm a bit curious myself when we would want to use OTP code and not just use passwords.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446719966", "createdAt": "2020-06-29T00:37:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -41,13 +41,15 @@\n   private final JTextField usernameField = new JTextField();\n   private final JLabel passwordLabel = new JLabel(\"Forum Password\");\n   private final JPasswordField passwordField = new JPasswordField();\n+  private final JLabel otpLabel = new JLabel(\"2FA OTP-Code (optional)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1ODk5Nw==", "bodyText": "OTP is short for \"One-Time-Password\".\nThis Field is only required for people that have 2FA enabled in the Forum. Up until recently the \"write-api\" for NodeBB didn't check if 2FA was enabled and just ignored it. Because @panther2 pointed this out I created an issue which lead to a fix. Currently people with 2FA enabled can't use PbF at all and this extra field should fix this", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446958997", "createdAt": "2020-06-29T13:11:20Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -41,13 +41,15 @@\n   private final JTextField usernameField = new JTextField();\n   private final JLabel passwordLabel = new JLabel(\"Forum Password\");\n   private final JPasswordField passwordField = new JPasswordField();\n+  private final JLabel otpLabel = new JLabel(\"2FA OTP-Code (optional)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxOTk2Ng=="}, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTM1OA==", "bodyText": "Also perhaps worth mentioning: The OTP isn't a replacement for the password, it is a necessary addition", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446959358", "createdAt": "2020-06-29T13:11:50Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -41,13 +41,15 @@\n   private final JTextField usernameField = new JTextField();\n   private final JLabel passwordLabel = new JLabel(\"Forum Password\");\n   private final JPasswordField passwordField = new JPasswordField();\n+  private final JLabel otpLabel = new JLabel(\"2FA OTP-Code (optional)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxOTk2Ng=="}, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NTI3Ng==", "bodyText": "Cool, that is good context. Do you have a plan for how to convey that information to users? Specifically, what the field is, when it is needed, and if then not already clear - perhaps where to get their OTP when it is needed.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r447045276", "createdAt": "2020-06-29T15:10:01Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -41,13 +41,15 @@\n   private final JTextField usernameField = new JTextField();\n   private final JLabel passwordLabel = new JLabel(\"Forum Password\");\n   private final JPasswordField passwordField = new JPasswordField();\n+  private final JLabel otpLabel = new JLabel(\"2FA OTP-Code (optional)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxOTk2Ng=="}, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNzk0Mw==", "bodyText": "Not really, but I think this is a problem that isn't limited to TripleA. How can we explain or even advertise 2FA for users?\nFor most people this just adds another inconvenient step to the login process, and I'd assume most people already using 2FA know what to look out for, they don't need any extra explanation, they just want a field to enter their newly generated code.\nIf you have any good explanation, please let me know. I'd also like to know how to explain such an \"abstract\" concept in such a limited screen space \ud83e\udd14", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r447317943", "createdAt": "2020-06-29T23:34:19Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -41,13 +41,15 @@\n   private final JTextField usernameField = new JTextField();\n   private final JLabel passwordLabel = new JLabel(\"Forum Password\");\n   private final JPasswordField passwordField = new JPasswordField();\n+  private final JLabel otpLabel = new JLabel(\"2FA OTP-Code (optional)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxOTk2Ng=="}, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxODMwNA==", "bodyText": "To clarify: Obviously we could implement a wall of text, but I bet most people aren't going to read it if it's more than a couple of lines", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r447318304", "createdAt": "2020-06-29T23:35:12Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -41,13 +41,15 @@\n   private final JTextField usernameField = new JTextField();\n   private final JLabel passwordLabel = new JLabel(\"Forum Password\");\n   private final JPasswordField passwordField = new JPasswordField();\n+  private final JLabel otpLabel = new JLabel(\"2FA OTP-Code (optional)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxOTk2Ng=="}, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzNjQ0NQ==", "bodyText": "A help button that says this field is used if \"2FA is enabled. That this value can be found in forum settings. Doesn't have to be anything to complicated. Leaving it as 'OTP' though is going to be cryptic.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r447336445", "createdAt": "2020-06-30T00:29:31Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -41,13 +41,15 @@\n   private final JTextField usernameField = new JTextField();\n   private final JLabel passwordLabel = new JLabel(\"Forum Password\");\n   private final JPasswordField passwordField = new JPasswordField();\n+  private final JLabel otpLabel = new JLabel(\"2FA OTP-Code (optional)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxOTk2Ng=="}, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzk3MDA0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMDozOTowMFrOGqBosw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDozMjoyMlrOGqnTtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyMDE3OQ==", "bodyText": "nit, view should not be doing logic if it has a view model. The view model should be the one that owns the full logic of when 'rememberPassword' is selected.\nWould recommend to fix by moving the logic to view model, EG:\nrememberPassword.setSelected(viewModel.isRememberPasswordSelected());", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446720179", "createdAt": "2020-06-29T00:39:00Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -63,6 +65,10 @@\n     super(new GridBagLayout());\n     this.viewModel = viewModel;\n     viewModel.setView(this);\n+    // If password is already stored we already remember\n+    if (viewModel.isForumPasswordValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMDQ1Mw==", "bodyText": "To be honest this is more like a hack.\nIf the user already has a token stored, it makes no sense to have \"Remember Password\" unchecked, which would cause the credentials to be removed on close by default.\nOn the other hand if no token is stored it \"defaults\" to the ClientSetting that stores the last state. That's why the code is the way it is.\nI think \"Remember Password\" shouldn't be a client setting at all. The checkbox should be selected by default if and only if the token is already stored and leave it up to the user to alter this behaviour.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r447320453", "createdAt": "2020-06-29T23:41:56Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -63,6 +65,10 @@\n     super(new GridBagLayout());\n     this.viewModel = viewModel;\n     viewModel.setView(this);\n+    // If password is already stored we already remember\n+    if (viewModel.isForumPasswordValid()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyMDE3OQ=="}, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzNzM5OQ==", "bodyText": "The 'remember password' is a setting as we are currently supporting passwords, and if you select the box then you want it checked, and if you unselect it then it'll be annoying to have to unselect it every time. Those users are probably very worried about their password and if they forget to unselect the value then they'll be unhappy with the software for allowing the error.\nIt sounds like if 'remember password' does not apply with tokens then it should be hidden.\nEither way, any if statements should be removed from the view and moved to the model. The view should not know how to compute the UI state, it should ask the model what its appropriate state should be and render that.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r447337399", "createdAt": "2020-06-30T00:32:22Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbf/ForumPosterEditor.java", "diffHunk": "@@ -63,6 +65,10 @@\n     super(new GridBagLayout());\n     this.viewModel = viewModel;\n     viewModel.setView(this);\n+    // If password is already stored we already remember\n+    if (viewModel.isForumPasswordValid()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyMDE3OQ=="}, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzk3MTQzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMDo0MDowOVrOGqBpXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMDo0MDowOVrOGqBpXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyMDM1MA==", "bodyText": "Could use a javadoc on this class IMO to explain it's general usage and how it works.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r446720350", "createdAt": "2020-06-29T00:40:09Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73faf150fe74965ee5176e114f31438b97d53e4f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzY1MTUxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNFrOGv4OeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNFrOGv4OeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NzQ2NQ==", "bodyText": "Codacy found an issue: Avoid throwing raw exception types.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r452857465", "createdAt": "2020-07-10T13:52:34Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+/**\n+ * Helper class containing the necessary logic to fetch and revoke login tokens for NodeBB forum\n+ * software.\n+ */\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  /**\n+   * Data class used to wrap a newly generated token and the {@link #userId} the token was created\n+   * for in a single object.\n+   */\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  /**\n+   * Generates a NodeBB login token.\n+   *\n+   * @param username The username to create the token for.\n+   * @param password The password used by the user to login.\n+   * @param otp (optional, can be null) The One-Time-Password in case the User has 2FA enabled for\n+   *     their account.\n+   * @return The {@link TokenInfo} object containing the newly generated token and the associated\n+   *     userId of the provided username.\n+   */\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e21fdaccdfc3712e3262af06f8f47244ac68322"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzY1MTU0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNVrOGv4Ofw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNVrOGv4Ofw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NzQ3MQ==", "bodyText": "Codacy found an issue: Avoid throwing raw exception types.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r452857471", "createdAt": "2020-07-10T13:52:35Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbTokenGenerator.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package games.strategy.engine.posted.game.pbf;\n+\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.framework.system.HttpProxy;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.snakeyaml.engine.v2.api.Load;\n+import org.snakeyaml.engine.v2.api.LoadSettings;\n+\n+/**\n+ * Helper class containing the necessary logic to fetch and revoke login tokens for NodeBB forum\n+ * software.\n+ */\n+@AllArgsConstructor\n+public class NodeBbTokenGenerator {\n+  private final String forumUrl;\n+  private final Load load = new Load(LoadSettings.builder().build());\n+\n+  /**\n+   * Data class used to wrap a newly generated token and the {@link #userId} the token was created\n+   * for in a single object.\n+   */\n+  @AllArgsConstructor(access = AccessLevel.PRIVATE)\n+  @Getter\n+  public static class TokenInfo {\n+    @Nonnull private final String token;\n+    private final int userId;\n+  }\n+\n+  /**\n+   * Generates a NodeBB login token.\n+   *\n+   * @param username The username to create the token for.\n+   * @param password The password used by the user to login.\n+   * @param otp (optional, can be null) The One-Time-Password in case the User has 2FA enabled for\n+   *     their account.\n+   * @return The {@link TokenInfo} object containing the newly generated token and the associated\n+   *     userId of the provided username.\n+   */\n+  public TokenInfo generateToken(\n+      final String username, final String password, @Nullable final String otp) {\n+    Preconditions.checkNotNull(username);\n+    Preconditions.checkNotNull(password);\n+\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      final int userId = getUserId(client, username);\n+      return new TokenInfo(getToken(client, userId, password, otp), userId);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to retrieve login token\", e);\n+    }\n+  }\n+\n+  /**\n+   * Revokes a NodeBB login token.\n+   *\n+   * @param token The login token to revoke.\n+   * @param userId The userId that the token was issued for.\n+   */\n+  public void revokeToken(final String token, final int userId) {\n+    try (CloseableHttpClient client = HttpClients.custom().disableCookieManagement().build()) {\n+      deleteToken(client, userId, token);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Failed to revoke login token\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e21fdaccdfc3712e3262af06f8f47244ac68322"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzY1MTYzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbForumPoster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNlrOGv4Ojg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MjozNlrOGv4Ojg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NzQ4Ng==", "bodyText": "Codacy found an issue: Avoid instantiating String objects; this is usually unnecessary.", "url": "https://github.com/triplea-game/triplea/pull/6487#discussion_r452857486", "createdAt": "2020-07-10T13:52:36Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/posted/game/pbf/NodeBbForumPoster.java", "diffHunk": "@@ -67,10 +59,7 @@\n   private NodeBbForumPoster(final ForumPostingParameters forumPostingParameters) {\n     this.topicId = forumPostingParameters.topicId;\n     this.forumUrl = forumPostingParameters.forumUrl;\n-    this.username =\n-        Arrays.withSensitiveArrayAndReturn(() -> forumPostingParameters.username, String::new);\n-    this.password =\n-        Arrays.withSensitiveArrayAndReturn(() -> forumPostingParameters.password, String::new);\n+    this.token = new String(forumPostingParameters.token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e21fdaccdfc3712e3262af06f8f47244ac68322"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2203, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}