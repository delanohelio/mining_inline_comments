{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1OTE2NzMy", "number": 6026, "title": "Pbem settings", "bodyText": "Overview:\n\nAdd a view model to PBEM editor\nAdd fields smtp provider to PBEM server. The fields are dynamic and hide when provider is disabled, or all fields are displayed if chosen 'generic smtp server'.\n\ncommit c6ec9a6\nUpdate DocumentListenerBuilder to have a buffering callback API\n\nForward looking change to add functionality to DocumentListenerBuilder\nthat will buffer text listener callbackss.\n\nThe text update callback will be scheduled to be executed only after\nan initial delay after the first text update event. But, if another\ntext update comes along, the previously scheduled callback is canceled\nand a new one with delay is scheduled.\n\nThis allows for essentially (more or less) one callback to be done\nafter a user is done typing text rather than rapid firing many callback\nevents.\n\nUsages of the previous non-buffered API will be replaced with the new API\nin upcoming PRs\n\ncommit 581a3b1\nRewrite PbemEditor to prompt for email provider and settings\n\nPbem has as required settings an email server that are specified in\npreferences, a different screen. This causes a problem where the\n'play' button cannot be enabled on PBEM by simply filling in all fields\non the PBEM screen.\n\nThis update adds a few of these settings from the preferences screen\nto PBEM, notably the 'email provider' setting. The email provider\nsetting starts out disabled, in which case the play button is now enabled.\nThis replicates previous behavior of the 1.9.0.0.7xxx release where\nPBEM server was optional when playing a PBEM game.\n\nStill to do after this update is to add 'username' and 'password' as\nfields on the PBEM screen, after that point all required fields\ncan be specified on the screen that needs them.\n\nFunctional Changes\n\n[] New map or map update\n[] New Feature\n[x] Feature update or enhancement\n[] Feature Removal\n[] Code Cleanup or refactor\n[] Configuration Change\n[x] Problem fix:  partial fix for: #5856\n[] Other:   \nTesting\n\nverified send test email by preset email, both gmail and hotmail\nverified screen interactions, selecting a preset, filling in fields, confirming play button is enabled/disabled as expected and blank/invalid fields are highlighted in red", "createdAt": "2020-03-10T03:22:15Z", "url": "https://github.com/triplea-game/triplea/pull/6026", "merged": true, "mergeCommit": {"oid": "9241cd856e02b7fbd8f14144ad56047e709bde1c"}, "closed": true, "closedAt": "2020-03-11T20:56:16Z", "author": {"login": "DanVanAtta"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcL71XKAH2gAyMzg1OTE2NzMyOmM2ZWM5YTYzZWI1OGFiNTExNzI5NzUyMWYxMzJlNzYyOGU4ZTRkNzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMrrfuAH2gAyMzg1OTE2NzMyOjJkZDMxMjAyNzE5NWYyOTUxMDE3YTdmMDRmOTBkZTRlMGQxMjFiZTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c6ec9a63eb58ab5117297521f132e7628e8e4d79", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/c6ec9a63eb58ab5117297521f132e7628e8e4d79", "committedDate": "2020-03-09T11:01:56Z", "message": "Update DocumentListenerBuilder to have a buffering callback API\n\nForward looking change to add functionality to DocumentListenerBuilder\nthat will buffer text listener callbackss.\n\nThe text update callback will be scheduled to be executed only after\nan initial delay after the first text update event. But, if another\ntext update comes along, the previously scheduled callback is canceled\nand a new one with delay is scheduled.\n\nThis allows for essentially (more or less) one callback to be done\nafter a user is done typing text rather than rapid firing many callback\nevents.\n\nUsages of the previous non-buffered API will be replaced with the new API\nin upcoming PRs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjU5ODI1", "url": "https://github.com/triplea-game/triplea/pull/6026#pullrequestreview-371659825", "createdAt": "2020-03-10T03:23:41Z", "commit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoyMzo0MlrOF0AVNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoyMzo0M1rOF0AVRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTcwMw==", "bodyText": "Similar blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390075703", "createdAt": "2020-03-10T03:23:42Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditor.java", "diffHunk": "@@ -1,208 +1,234 @@\n package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n \n-import com.google.common.base.Ascii;\n-import games.strategy.engine.ClientFileSystemHelper;\n import games.strategy.engine.data.properties.GameProperties;\n-import games.strategy.engine.posted.game.pbem.IEmailSender;\n-import java.awt.GridBagConstraints;\n-import java.awt.GridBagLayout;\n-import java.awt.Insets;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.logging.Level;\n import javax.swing.JButton;\n import javax.swing.JCheckBox;\n+import javax.swing.JComboBox;\n import javax.swing.JLabel;\n-import javax.swing.JOptionPane;\n import javax.swing.JPanel;\n import javax.swing.JTextField;\n import javax.swing.SwingUtilities;\n-import lombok.extern.java.Log;\n-import org.triplea.domain.data.PlayerEmailValidation;\n-import org.triplea.swing.DocumentListenerBuilder;\n-import org.triplea.swing.ProgressWindow;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.java.ViewModelListener;\n+import org.triplea.swing.JButtonBuilder;\n+import org.triplea.swing.JCheckBoxBuilder;\n+import org.triplea.swing.JComboBoxBuilder;\n+import org.triplea.swing.JTextFieldBuilder;\n import org.triplea.swing.SwingComponents;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.JPanelBuilder;\n \n /** An editor for modifying email senders. */\n-@Log\n-public class EmailSenderEditor extends JPanel {\n-  private static final long serialVersionUID = -4647781117491269926L;\n-  private final JTextField subject = new JTextField();\n-  private final JTextField toAddress = new JTextField();\n-  private final JLabel toLabel = new JLabel(\"To:\");\n-  private final JButton testEmail = new JButton(\"Test Email\");\n-  private final JCheckBox alsoPostAfterCombatMove = new JCheckBox(\"Also Post After Combat Move\");\n-  private final Runnable readyCallback;\n+public class EmailSenderEditor implements ViewModelListener<EmailSenderEditorViewModel> {\n+\n+  private static final int FIELD_LENGTH = 20;\n+  private final EmailSenderEditorViewModel viewModel = new EmailSenderEditorViewModel(this);\n+\n+  private boolean syncToModel;\n+\n+  private final JComboBox<String> emailProviderSelectionBox =\n+      JComboBoxBuilder.builder()\n+          .items(EmailSenderEditorViewModel.getProviderOptions())\n+          .selectedItem(viewModel.getSelectedProvider())\n+          .itemSelectedAction(\n+              provider -> {\n+                if (syncToModel) {\n+                  viewModel.setSelectedProvider(provider);\n+                }\n+              })\n+          .build();\n+\n+  private final JLabel smtpServerLabel = new JLabel(\"Smtp Server\");\n+  private final JTextField smtpServerField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSmtpServer())\n+          .textListener(\n+              server -> {\n+                if (syncToModel) {\n+                  viewModel.setSmtpServer(server);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JLabel smtpPortLabel = new JLabel(\"Port\");\n+  private final JTextField smtpPortField =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTcwNw==", "bodyText": "Similar blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390075707", "createdAt": "2020-03-10T03:23:42Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditor.java", "diffHunk": "@@ -1,208 +1,234 @@\n package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n \n-import com.google.common.base.Ascii;\n-import games.strategy.engine.ClientFileSystemHelper;\n import games.strategy.engine.data.properties.GameProperties;\n-import games.strategy.engine.posted.game.pbem.IEmailSender;\n-import java.awt.GridBagConstraints;\n-import java.awt.GridBagLayout;\n-import java.awt.Insets;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.logging.Level;\n import javax.swing.JButton;\n import javax.swing.JCheckBox;\n+import javax.swing.JComboBox;\n import javax.swing.JLabel;\n-import javax.swing.JOptionPane;\n import javax.swing.JPanel;\n import javax.swing.JTextField;\n import javax.swing.SwingUtilities;\n-import lombok.extern.java.Log;\n-import org.triplea.domain.data.PlayerEmailValidation;\n-import org.triplea.swing.DocumentListenerBuilder;\n-import org.triplea.swing.ProgressWindow;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.java.ViewModelListener;\n+import org.triplea.swing.JButtonBuilder;\n+import org.triplea.swing.JCheckBoxBuilder;\n+import org.triplea.swing.JComboBoxBuilder;\n+import org.triplea.swing.JTextFieldBuilder;\n import org.triplea.swing.SwingComponents;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.JPanelBuilder;\n \n /** An editor for modifying email senders. */\n-@Log\n-public class EmailSenderEditor extends JPanel {\n-  private static final long serialVersionUID = -4647781117491269926L;\n-  private final JTextField subject = new JTextField();\n-  private final JTextField toAddress = new JTextField();\n-  private final JLabel toLabel = new JLabel(\"To:\");\n-  private final JButton testEmail = new JButton(\"Test Email\");\n-  private final JCheckBox alsoPostAfterCombatMove = new JCheckBox(\"Also Post After Combat Move\");\n-  private final Runnable readyCallback;\n+public class EmailSenderEditor implements ViewModelListener<EmailSenderEditorViewModel> {\n+\n+  private static final int FIELD_LENGTH = 20;\n+  private final EmailSenderEditorViewModel viewModel = new EmailSenderEditorViewModel(this);\n+\n+  private boolean syncToModel;\n+\n+  private final JComboBox<String> emailProviderSelectionBox =\n+      JComboBoxBuilder.builder()\n+          .items(EmailSenderEditorViewModel.getProviderOptions())\n+          .selectedItem(viewModel.getSelectedProvider())\n+          .itemSelectedAction(\n+              provider -> {\n+                if (syncToModel) {\n+                  viewModel.setSelectedProvider(provider);\n+                }\n+              })\n+          .build();\n+\n+  private final JLabel smtpServerLabel = new JLabel(\"Smtp Server\");\n+  private final JTextField smtpServerField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSmtpServer())\n+          .textListener(\n+              server -> {\n+                if (syncToModel) {\n+                  viewModel.setSmtpServer(server);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JLabel smtpPortLabel = new JLabel(\"Port\");\n+  private final JTextField smtpPortField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSmtpPort())\n+          .textListener(\n+              smtpPort -> {\n+                if (syncToModel) {\n+                  viewModel.setSmtpPort(smtpPort);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JCheckBox useTlsCheckBox =\n+      new JCheckBoxBuilder(\"Use TLS encryption\")\n+          .selected(viewModel.isUseTls())\n+          .actionListener(\n+              useTls -> {\n+                if (syncToModel) {\n+                  viewModel.setUseTls(useTls);\n+                }\n+              })\n+          .build();\n+\n+  private final JLabel subjectLabel = new JLabel(\"Subject\");\n+  private final JTextField subjectField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSubject())\n+          .textListener(\n+              subject -> {\n+                if (syncToModel) {\n+                  viewModel.setSubject(subject);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JLabel toAddressLabel = new JLabel(\"To:\");\n+  private final JTextField toAddressField =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTcwOQ==", "bodyText": "Similar blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390075709", "createdAt": "2020-03-10T03:23:42Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditor.java", "diffHunk": "@@ -1,208 +1,234 @@\n package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n \n-import com.google.common.base.Ascii;\n-import games.strategy.engine.ClientFileSystemHelper;\n import games.strategy.engine.data.properties.GameProperties;\n-import games.strategy.engine.posted.game.pbem.IEmailSender;\n-import java.awt.GridBagConstraints;\n-import java.awt.GridBagLayout;\n-import java.awt.Insets;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.logging.Level;\n import javax.swing.JButton;\n import javax.swing.JCheckBox;\n+import javax.swing.JComboBox;\n import javax.swing.JLabel;\n-import javax.swing.JOptionPane;\n import javax.swing.JPanel;\n import javax.swing.JTextField;\n import javax.swing.SwingUtilities;\n-import lombok.extern.java.Log;\n-import org.triplea.domain.data.PlayerEmailValidation;\n-import org.triplea.swing.DocumentListenerBuilder;\n-import org.triplea.swing.ProgressWindow;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.java.ViewModelListener;\n+import org.triplea.swing.JButtonBuilder;\n+import org.triplea.swing.JCheckBoxBuilder;\n+import org.triplea.swing.JComboBoxBuilder;\n+import org.triplea.swing.JTextFieldBuilder;\n import org.triplea.swing.SwingComponents;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.JPanelBuilder;\n \n /** An editor for modifying email senders. */\n-@Log\n-public class EmailSenderEditor extends JPanel {\n-  private static final long serialVersionUID = -4647781117491269926L;\n-  private final JTextField subject = new JTextField();\n-  private final JTextField toAddress = new JTextField();\n-  private final JLabel toLabel = new JLabel(\"To:\");\n-  private final JButton testEmail = new JButton(\"Test Email\");\n-  private final JCheckBox alsoPostAfterCombatMove = new JCheckBox(\"Also Post After Combat Move\");\n-  private final Runnable readyCallback;\n+public class EmailSenderEditor implements ViewModelListener<EmailSenderEditorViewModel> {\n+\n+  private static final int FIELD_LENGTH = 20;\n+  private final EmailSenderEditorViewModel viewModel = new EmailSenderEditorViewModel(this);\n+\n+  private boolean syncToModel;\n+\n+  private final JComboBox<String> emailProviderSelectionBox =\n+      JComboBoxBuilder.builder()\n+          .items(EmailSenderEditorViewModel.getProviderOptions())\n+          .selectedItem(viewModel.getSelectedProvider())\n+          .itemSelectedAction(\n+              provider -> {\n+                if (syncToModel) {\n+                  viewModel.setSelectedProvider(provider);\n+                }\n+              })\n+          .build();\n+\n+  private final JLabel smtpServerLabel = new JLabel(\"Smtp Server\");\n+  private final JTextField smtpServerField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSmtpServer())\n+          .textListener(\n+              server -> {\n+                if (syncToModel) {\n+                  viewModel.setSmtpServer(server);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JLabel smtpPortLabel = new JLabel(\"Port\");\n+  private final JTextField smtpPortField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSmtpPort())\n+          .textListener(\n+              smtpPort -> {\n+                if (syncToModel) {\n+                  viewModel.setSmtpPort(smtpPort);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JCheckBox useTlsCheckBox =\n+      new JCheckBoxBuilder(\"Use TLS encryption\")\n+          .selected(viewModel.isUseTls())\n+          .actionListener(\n+              useTls -> {\n+                if (syncToModel) {\n+                  viewModel.setUseTls(useTls);\n+                }\n+              })\n+          .build();\n+\n+  private final JLabel subjectLabel = new JLabel(\"Subject\");\n+  private final JTextField subjectField =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTcxMQ==", "bodyText": "Similar blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390075711", "createdAt": "2020-03-10T03:23:42Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditor.java", "diffHunk": "@@ -1,208 +1,234 @@\n package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n \n-import com.google.common.base.Ascii;\n-import games.strategy.engine.ClientFileSystemHelper;\n import games.strategy.engine.data.properties.GameProperties;\n-import games.strategy.engine.posted.game.pbem.IEmailSender;\n-import java.awt.GridBagConstraints;\n-import java.awt.GridBagLayout;\n-import java.awt.Insets;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.logging.Level;\n import javax.swing.JButton;\n import javax.swing.JCheckBox;\n+import javax.swing.JComboBox;\n import javax.swing.JLabel;\n-import javax.swing.JOptionPane;\n import javax.swing.JPanel;\n import javax.swing.JTextField;\n import javax.swing.SwingUtilities;\n-import lombok.extern.java.Log;\n-import org.triplea.domain.data.PlayerEmailValidation;\n-import org.triplea.swing.DocumentListenerBuilder;\n-import org.triplea.swing.ProgressWindow;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.java.ViewModelListener;\n+import org.triplea.swing.JButtonBuilder;\n+import org.triplea.swing.JCheckBoxBuilder;\n+import org.triplea.swing.JComboBoxBuilder;\n+import org.triplea.swing.JTextFieldBuilder;\n import org.triplea.swing.SwingComponents;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.JPanelBuilder;\n \n /** An editor for modifying email senders. */\n-@Log\n-public class EmailSenderEditor extends JPanel {\n-  private static final long serialVersionUID = -4647781117491269926L;\n-  private final JTextField subject = new JTextField();\n-  private final JTextField toAddress = new JTextField();\n-  private final JLabel toLabel = new JLabel(\"To:\");\n-  private final JButton testEmail = new JButton(\"Test Email\");\n-  private final JCheckBox alsoPostAfterCombatMove = new JCheckBox(\"Also Post After Combat Move\");\n-  private final Runnable readyCallback;\n+public class EmailSenderEditor implements ViewModelListener<EmailSenderEditorViewModel> {\n+\n+  private static final int FIELD_LENGTH = 20;\n+  private final EmailSenderEditorViewModel viewModel = new EmailSenderEditorViewModel(this);\n+\n+  private boolean syncToModel;\n+\n+  private final JComboBox<String> emailProviderSelectionBox =\n+      JComboBoxBuilder.builder()\n+          .items(EmailSenderEditorViewModel.getProviderOptions())\n+          .selectedItem(viewModel.getSelectedProvider())\n+          .itemSelectedAction(\n+              provider -> {\n+                if (syncToModel) {\n+                  viewModel.setSelectedProvider(provider);\n+                }\n+              })\n+          .build();\n+\n+  private final JLabel smtpServerLabel = new JLabel(\"Smtp Server\");\n+  private final JTextField smtpServerField =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTcxMg==", "bodyText": "Method sendWithProgressWindow has 38 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390075712", "createdAt": "2020-03-10T03:23:42Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/SendTestEmailAction.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Ascii;\n+import games.strategy.engine.ClientFileSystemHelper;\n+import games.strategy.engine.posted.game.pbem.IEmailSender;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.logging.Level;\n+import javax.swing.JOptionPane;\n+import javax.swing.SwingUtilities;\n+import lombok.extern.java.Log;\n+import org.triplea.swing.ProgressWindow;\n+\n+@Log\n+public class SendTestEmailAction {\n+\n+  /** Tests the email sender. This must be called from the swing event thread */\n+  void send(final String to) {\n+    SwingUtilities.invokeLater(() -> sendWithProgressWindow(to));\n+  }\n+\n+  private void sendWithProgressWindow(final String to) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTcxMw==", "bodyText": "Method viewModelChanged has 26 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390075713", "createdAt": "2020-03-10T03:23:43Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditor.java", "diffHunk": "@@ -1,208 +1,234 @@\n package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n \n-import com.google.common.base.Ascii;\n-import games.strategy.engine.ClientFileSystemHelper;\n import games.strategy.engine.data.properties.GameProperties;\n-import games.strategy.engine.posted.game.pbem.IEmailSender;\n-import java.awt.GridBagConstraints;\n-import java.awt.GridBagLayout;\n-import java.awt.Insets;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.logging.Level;\n import javax.swing.JButton;\n import javax.swing.JCheckBox;\n+import javax.swing.JComboBox;\n import javax.swing.JLabel;\n-import javax.swing.JOptionPane;\n import javax.swing.JPanel;\n import javax.swing.JTextField;\n import javax.swing.SwingUtilities;\n-import lombok.extern.java.Log;\n-import org.triplea.domain.data.PlayerEmailValidation;\n-import org.triplea.swing.DocumentListenerBuilder;\n-import org.triplea.swing.ProgressWindow;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.java.ViewModelListener;\n+import org.triplea.swing.JButtonBuilder;\n+import org.triplea.swing.JCheckBoxBuilder;\n+import org.triplea.swing.JComboBoxBuilder;\n+import org.triplea.swing.JTextFieldBuilder;\n import org.triplea.swing.SwingComponents;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.JPanelBuilder;\n \n /** An editor for modifying email senders. */\n-@Log\n-public class EmailSenderEditor extends JPanel {\n-  private static final long serialVersionUID = -4647781117491269926L;\n-  private final JTextField subject = new JTextField();\n-  private final JTextField toAddress = new JTextField();\n-  private final JLabel toLabel = new JLabel(\"To:\");\n-  private final JButton testEmail = new JButton(\"Test Email\");\n-  private final JCheckBox alsoPostAfterCombatMove = new JCheckBox(\"Also Post After Combat Move\");\n-  private final Runnable readyCallback;\n+public class EmailSenderEditor implements ViewModelListener<EmailSenderEditorViewModel> {\n+\n+  private static final int FIELD_LENGTH = 20;\n+  private final EmailSenderEditorViewModel viewModel = new EmailSenderEditorViewModel(this);\n+\n+  private boolean syncToModel;\n+\n+  private final JComboBox<String> emailProviderSelectionBox =\n+      JComboBoxBuilder.builder()\n+          .items(EmailSenderEditorViewModel.getProviderOptions())\n+          .selectedItem(viewModel.getSelectedProvider())\n+          .itemSelectedAction(\n+              provider -> {\n+                if (syncToModel) {\n+                  viewModel.setSelectedProvider(provider);\n+                }\n+              })\n+          .build();\n+\n+  private final JLabel smtpServerLabel = new JLabel(\"Smtp Server\");\n+  private final JTextField smtpServerField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSmtpServer())\n+          .textListener(\n+              server -> {\n+                if (syncToModel) {\n+                  viewModel.setSmtpServer(server);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JLabel smtpPortLabel = new JLabel(\"Port\");\n+  private final JTextField smtpPortField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSmtpPort())\n+          .textListener(\n+              smtpPort -> {\n+                if (syncToModel) {\n+                  viewModel.setSmtpPort(smtpPort);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JCheckBox useTlsCheckBox =\n+      new JCheckBoxBuilder(\"Use TLS encryption\")\n+          .selected(viewModel.isUseTls())\n+          .actionListener(\n+              useTls -> {\n+                if (syncToModel) {\n+                  viewModel.setUseTls(useTls);\n+                }\n+              })\n+          .build();\n+\n+  private final JLabel subjectLabel = new JLabel(\"Subject\");\n+  private final JTextField subjectField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSubject())\n+          .textListener(\n+              subject -> {\n+                if (syncToModel) {\n+                  viewModel.setSubject(subject);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JLabel toAddressLabel = new JLabel(\"To:\");\n+  private final JTextField toAddressField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getToAddress())\n+          .textListener(\n+              toAddress -> {\n+                if (syncToModel) {\n+                  viewModel.setToAddress(toAddress);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JCheckBox sendEmailAfterCombatMoveCheckBox =\n+      new JCheckBoxBuilder(\"Also Send Email After Combat Move\")\n+          .selected(viewModel.isSendEmailAfterCombatMove())\n+          .actionListener(\n+              sendEmailAfterCombatMove -> {\n+                if (syncToModel) {\n+                  viewModel.setSendEmailAfterCombatMove(sendEmailAfterCombatMove);\n+                }\n+              })\n+          .build();\n+\n+  private final JButton testEmailButton =\n+      new JButtonBuilder(\"Send Test Email\")\n+          .enabled(viewModel.isTestEmailButtonEnabled())\n+          .actionListener(viewModel::sendTestEmail)\n+          .build();\n \n   public EmailSenderEditor(final Runnable readyCallback) {\n-    super(new GridBagLayout());\n-    this.readyCallback = readyCallback;\n-    final int bottomSpace = 1;\n-    final int labelSpace = 2;\n+    viewModel.setValidatedFieldsChangedListener(readyCallback);\n+    this.viewModelChanged(viewModel);\n+    syncToModel = true;\n+  }\n+\n+  JPanel build() {\n+    toggleFieldVisibility();\n+\n+    final JPanel contents =\n+        new JPanelBuilder()\n+            .border(new TitledBorder(\"Automatically Send Emails\"))\n+            .gridBagLayout()\n+            .build();\n     int row = 0;\n-    add(\n-        new JLabel(\"Subject:\"),\n-        new GridBagConstraints(\n-            0,\n-            row,\n-            1,\n-            1,\n-            0,\n-            0,\n-            GridBagConstraints.NORTHWEST,\n-            GridBagConstraints.NONE,\n-            new Insets(0, 0, bottomSpace, labelSpace),\n-            0,\n-            0));\n-    add(\n-        subject,\n-        new GridBagConstraints(\n-            1,\n-            row,\n-            2,\n-            1,\n-            1.0,\n-            0,\n-            GridBagConstraints.EAST,\n-            GridBagConstraints.HORIZONTAL,\n-            new Insets(0, 0, bottomSpace, 0),\n-            0,\n-            0));\n+\n     row++;\n-    add(\n-        toLabel,\n-        new GridBagConstraints(\n-            0,\n-            row,\n-            1,\n-            1,\n-            0,\n-            0,\n-            GridBagConstraints.NORTHWEST,\n-            GridBagConstraints.NONE,\n-            new Insets(0, 0, bottomSpace, labelSpace),\n-            0,\n-            0));\n-    add(\n-        toAddress,\n-        new GridBagConstraints(\n-            1,\n-            row,\n-            2,\n-            1,\n-            1.0,\n-            0,\n-            GridBagConstraints.EAST,\n-            GridBagConstraints.HORIZONTAL,\n-            new Insets(0, 0, bottomSpace, 0),\n-            0,\n-            0));\n+    contents.add(new JLabel(\"Email Provider\"), new GridBagConstraintsBuilder(0, row).build());\n+    contents.add(emailProviderSelectionBox, new GridBagConstraintsBuilder(1, row).build());\n+\n+    row++;\n+    contents.add(smtpServerLabel, new GridBagConstraintsBuilder(0, row).build());\n+    contents.add(smtpServerField, new GridBagConstraintsBuilder(1, row).build());\n+\n     row++;\n-    // add Test button on the same line as encryption\n-    add(\n-        testEmail,\n-        new GridBagConstraints(\n-            2,\n-            row,\n-            1,\n-            1,\n-            0,\n-            0,\n-            GridBagConstraints.EAST,\n-            GridBagConstraints.NONE,\n-            new Insets(0, 0, bottomSpace, 0),\n-            0,\n-            0));\n-    testEmail.addActionListener(e -> testEmail());\n+    contents.add(smtpPortLabel, new GridBagConstraintsBuilder(0, row).build());\n+    contents.add(smtpPortField, new GridBagConstraintsBuilder(1, row).build());\n+\n+    row++;\n+    contents.add(useTlsCheckBox, new GridBagConstraintsBuilder(0, row).build());\n+\n     row++;\n-    add(\n-        alsoPostAfterCombatMove,\n-        new GridBagConstraints(\n-            0,\n-            row,\n-            2,\n-            1,\n-            0,\n-            0,\n-            GridBagConstraints.NORTHWEST,\n-            GridBagConstraints.NONE,\n-            new Insets(0, 0, bottomSpace, 0),\n-            0,\n-            0));\n-    DocumentListenerBuilder.attachDocumentListener(subject, this::checkFieldsAndNotify);\n-    DocumentListenerBuilder.attachDocumentListener(toAddress, this::checkFieldsAndNotify);\n+    contents.add(toAddressLabel, new GridBagConstraintsBuilder(0, row).build());\n+    contents.add(toAddressField, new GridBagConstraintsBuilder(1, row).build());\n+    contents.add(testEmailButton, new GridBagConstraintsBuilder(2, row).build());\n+\n+    row++;\n+    contents.add(new JPanel(), new GridBagConstraintsBuilder(0, row).gridWidth(2).build());\n+\n+    row++;\n+    contents.add(subjectLabel, new GridBagConstraintsBuilder(0, row).build());\n+    contents.add(subjectField, new GridBagConstraintsBuilder(1, row).build());\n+\n+    row++;\n+    contents.add(\n+        sendEmailAfterCombatMoveCheckBox,\n+        new GridBagConstraintsBuilder(0, row).gridWidth(2).build());\n+\n+    return contents;\n   }\n \n-  private void checkFieldsAndNotify() {\n-    final String toAddressText = toAddress.getText();\n-    final boolean addressValid =\n-        !toAddressText.isEmpty() && PlayerEmailValidation.isValid(toAddressText);\n-    SwingComponents.highlightLabelIfNotValid(addressValid, toLabel);\n-    testEmail.setEnabled(addressValid);\n-    readyCallback.run();\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "originalPosition": 296}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTcxNQ==", "bodyText": "Method build has 32 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390075715", "createdAt": "2020-03-10T03:23:43Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditor.java", "diffHunk": "@@ -1,208 +1,234 @@\n package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n \n-import com.google.common.base.Ascii;\n-import games.strategy.engine.ClientFileSystemHelper;\n import games.strategy.engine.data.properties.GameProperties;\n-import games.strategy.engine.posted.game.pbem.IEmailSender;\n-import java.awt.GridBagConstraints;\n-import java.awt.GridBagLayout;\n-import java.awt.Insets;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.logging.Level;\n import javax.swing.JButton;\n import javax.swing.JCheckBox;\n+import javax.swing.JComboBox;\n import javax.swing.JLabel;\n-import javax.swing.JOptionPane;\n import javax.swing.JPanel;\n import javax.swing.JTextField;\n import javax.swing.SwingUtilities;\n-import lombok.extern.java.Log;\n-import org.triplea.domain.data.PlayerEmailValidation;\n-import org.triplea.swing.DocumentListenerBuilder;\n-import org.triplea.swing.ProgressWindow;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.java.ViewModelListener;\n+import org.triplea.swing.JButtonBuilder;\n+import org.triplea.swing.JCheckBoxBuilder;\n+import org.triplea.swing.JComboBoxBuilder;\n+import org.triplea.swing.JTextFieldBuilder;\n import org.triplea.swing.SwingComponents;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.JPanelBuilder;\n \n /** An editor for modifying email senders. */\n-@Log\n-public class EmailSenderEditor extends JPanel {\n-  private static final long serialVersionUID = -4647781117491269926L;\n-  private final JTextField subject = new JTextField();\n-  private final JTextField toAddress = new JTextField();\n-  private final JLabel toLabel = new JLabel(\"To:\");\n-  private final JButton testEmail = new JButton(\"Test Email\");\n-  private final JCheckBox alsoPostAfterCombatMove = new JCheckBox(\"Also Post After Combat Move\");\n-  private final Runnable readyCallback;\n+public class EmailSenderEditor implements ViewModelListener<EmailSenderEditorViewModel> {\n+\n+  private static final int FIELD_LENGTH = 20;\n+  private final EmailSenderEditorViewModel viewModel = new EmailSenderEditorViewModel(this);\n+\n+  private boolean syncToModel;\n+\n+  private final JComboBox<String> emailProviderSelectionBox =\n+      JComboBoxBuilder.builder()\n+          .items(EmailSenderEditorViewModel.getProviderOptions())\n+          .selectedItem(viewModel.getSelectedProvider())\n+          .itemSelectedAction(\n+              provider -> {\n+                if (syncToModel) {\n+                  viewModel.setSelectedProvider(provider);\n+                }\n+              })\n+          .build();\n+\n+  private final JLabel smtpServerLabel = new JLabel(\"Smtp Server\");\n+  private final JTextField smtpServerField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSmtpServer())\n+          .textListener(\n+              server -> {\n+                if (syncToModel) {\n+                  viewModel.setSmtpServer(server);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JLabel smtpPortLabel = new JLabel(\"Port\");\n+  private final JTextField smtpPortField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSmtpPort())\n+          .textListener(\n+              smtpPort -> {\n+                if (syncToModel) {\n+                  viewModel.setSmtpPort(smtpPort);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JCheckBox useTlsCheckBox =\n+      new JCheckBoxBuilder(\"Use TLS encryption\")\n+          .selected(viewModel.isUseTls())\n+          .actionListener(\n+              useTls -> {\n+                if (syncToModel) {\n+                  viewModel.setUseTls(useTls);\n+                }\n+              })\n+          .build();\n+\n+  private final JLabel subjectLabel = new JLabel(\"Subject\");\n+  private final JTextField subjectField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getSubject())\n+          .textListener(\n+              subject -> {\n+                if (syncToModel) {\n+                  viewModel.setSubject(subject);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JLabel toAddressLabel = new JLabel(\"To:\");\n+  private final JTextField toAddressField =\n+      JTextFieldBuilder.builder()\n+          .text(viewModel.getToAddress())\n+          .textListener(\n+              toAddress -> {\n+                if (syncToModel) {\n+                  viewModel.setToAddress(toAddress);\n+                }\n+              })\n+          .columns(FIELD_LENGTH)\n+          .build();\n+\n+  private final JCheckBox sendEmailAfterCombatMoveCheckBox =\n+      new JCheckBoxBuilder(\"Also Send Email After Combat Move\")\n+          .selected(viewModel.isSendEmailAfterCombatMove())\n+          .actionListener(\n+              sendEmailAfterCombatMove -> {\n+                if (syncToModel) {\n+                  viewModel.setSendEmailAfterCombatMove(sendEmailAfterCombatMove);\n+                }\n+              })\n+          .build();\n+\n+  private final JButton testEmailButton =\n+      new JButtonBuilder(\"Send Test Email\")\n+          .enabled(viewModel.isTestEmailButtonEnabled())\n+          .actionListener(viewModel::sendTestEmail)\n+          .build();\n \n   public EmailSenderEditor(final Runnable readyCallback) {\n-    super(new GridBagLayout());\n-    this.readyCallback = readyCallback;\n-    final int bottomSpace = 1;\n-    final int labelSpace = 2;\n+    viewModel.setValidatedFieldsChangedListener(readyCallback);\n+    this.viewModelChanged(viewModel);\n+    syncToModel = true;\n+  }\n+\n+  JPanel build() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTcxNw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390075717", "createdAt": "2020-03-10T03:23:43Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditorViewModel.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.properties.GameProperties;\n+import games.strategy.engine.posted.game.pbem.IEmailSender;\n+import games.strategy.triplea.settings.ClientSetting;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.domain.data.PlayerEmailValidation;\n+import org.triplea.java.StringUtils;\n+import org.triplea.java.ViewModelListener;\n+\n+class EmailSenderEditorViewModel {\n+  static final String PROVIDER_DISABLED = \"Disabled\";\n+  static final String GENERIC_SMTP = \"Generic SMTP\";\n+\n+  private final ViewModelListener<EmailSenderEditorViewModel> view;\n+\n+  @Setter(onMethod_ = @VisibleForTesting)\n+  private SendTestEmailAction sendTestEmailAction = new SendTestEmailAction();\n+\n+  @Getter private String selectedProvider;\n+  @Getter private boolean useTls;\n+  @Getter private String smtpServer;\n+  @Getter private String smtpPort;\n+  @Getter private String subject = \"\";\n+  @Getter private String toAddress = \"\";\n+  @Getter @Setter private boolean sendEmailAfterCombatMove;\n+  @Setter private Runnable validatedFieldsChangedListener;\n+\n+  EmailSenderEditorViewModel(final ViewModelListener<EmailSenderEditorViewModel> view) {\n+    this.view = view;\n+    selectedProvider = ClientSetting.emailProvider.getValue().orElse(PROVIDER_DISABLED);\n+    smtpServer = ClientSetting.emailServerHost.getValue().orElse(\"\");\n+    smtpPort = ClientSetting.emailServerPort.getValue().map(String::valueOf).orElse(\"\");\n+    useTls = ClientSetting.emailServerSecurity.getValue().orElse(true);\n+  }\n+\n+  static Collection<String> getProviderOptions() {\n+    return List.of(PROVIDER_DISABLED, \"Gmail\", \"Hotmail\", GENERIC_SMTP);\n+  }\n+\n+  boolean isTestEmailButtonEnabled() {\n+    return smtpServer != null\n+        && !smtpServer.isBlank()\n+        && !toAddress.isBlank()\n+        && PlayerEmailValidation.isValid(toAddress)\n+        && StringUtils.isPositiveInt(smtpPort)\n+        && ClientSetting.emailUsername.isSet()\n+        && ClientSetting.emailUsername.getValueOrThrow().length > 0\n+        && ClientSetting.emailPassword.isSet()\n+        && ClientSetting.emailPassword.getValueOrThrow().length > 0;\n+  }\n+\n+  void setSelectedProvider(final String provider) {\n+    Preconditions.checkNotNull(provider);\n+    if (!selectedProvider.equals(provider)) {\n+      selectedProvider = provider;\n+      ClientSetting.emailProvider.setValueAndFlush(selectedProvider);\n+\n+      EmailProviderPreset.lookupByName(provider)\n+          .ifPresentOrElse(\n+              preset -> {\n+                smtpServer = preset.getServer();\n+                smtpPort = String.valueOf(preset.getPort());\n+                useTls = preset.isUseTlsByDefault();\n+\n+                ClientSetting.emailServerHost.setValue(smtpServer);\n+                ClientSetting.emailServerPort.setValue(preset.getPort());\n+                ClientSetting.emailServerSecurity.setValueAndFlush(useTls);\n+              },\n+              () -> {\n+                smtpServer = \"\";\n+                smtpPort = \"\";\n+                useTls = true;\n+\n+                ClientSetting.emailServerHost.resetValue();\n+                ClientSetting.emailServerPort.resetValue();\n+                ClientSetting.emailServerSecurity.setValueAndFlush(useTls);\n+              });\n+\n+      invokeCallbacks();\n+    }\n+  }\n+\n+  private void invokeCallbacks() {\n+    view.viewModelChanged(this);\n+    Optional.ofNullable(validatedFieldsChangedListener).ifPresent(Runnable::run);\n+  }\n+\n+  boolean showServerOptions() {\n+    return selectedProvider.equals(GENERIC_SMTP);\n+  }\n+\n+  boolean showEmailOptions() {\n+    return !isEmailProviderDisabled();\n+  }\n+\n+  private boolean isEmailProviderDisabled() {\n+    return selectedProvider.equals(PROVIDER_DISABLED);\n+  }\n+\n+  void setSmtpServer(final String smtpServer) {\n+    Preconditions.checkNotNull(smtpServer);\n+    if (!this.smtpServer.equals(smtpServer)) {\n+      this.smtpServer = smtpServer.trim();\n+      ClientSetting.emailServerHost.setValueAndFlush(smtpServer);\n+      invokeCallbacks();\n+    }\n+  }\n+\n+  boolean isSmtpServerValid() {\n+    return isEmailProviderDisabled() || !smtpServer.isBlank();\n+  }\n+\n+  void setSmtpPort(final String smtpPort) {\n+    Preconditions.checkNotNull(smtpPort);\n+    if (!this.smtpPort.equals(smtpPort)) {\n+      this.smtpPort = smtpPort;\n+      if (StringUtils.isPositiveInt(smtpPort)) {\n+        ClientSetting.emailServerPort.setValueAndFlush(Integer.valueOf(smtpPort.trim()));\n+      } else {\n+        ClientSetting.emailServerPort.resetValue();\n+        ClientSetting.flush();\n+      }\n+      invokeCallbacks();\n+    }\n+  }\n+\n+  boolean isSmtpPortValid() {\n+    return isEmailProviderDisabled() || StringUtils.isPositiveInt(smtpPort);\n+  }\n+\n+  void setSubject(final String subject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTcxOA==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390075718", "createdAt": "2020-03-10T03:23:43Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditorViewModel.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.properties.GameProperties;\n+import games.strategy.engine.posted.game.pbem.IEmailSender;\n+import games.strategy.triplea.settings.ClientSetting;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.domain.data.PlayerEmailValidation;\n+import org.triplea.java.StringUtils;\n+import org.triplea.java.ViewModelListener;\n+\n+class EmailSenderEditorViewModel {\n+  static final String PROVIDER_DISABLED = \"Disabled\";\n+  static final String GENERIC_SMTP = \"Generic SMTP\";\n+\n+  private final ViewModelListener<EmailSenderEditorViewModel> view;\n+\n+  @Setter(onMethod_ = @VisibleForTesting)\n+  private SendTestEmailAction sendTestEmailAction = new SendTestEmailAction();\n+\n+  @Getter private String selectedProvider;\n+  @Getter private boolean useTls;\n+  @Getter private String smtpServer;\n+  @Getter private String smtpPort;\n+  @Getter private String subject = \"\";\n+  @Getter private String toAddress = \"\";\n+  @Getter @Setter private boolean sendEmailAfterCombatMove;\n+  @Setter private Runnable validatedFieldsChangedListener;\n+\n+  EmailSenderEditorViewModel(final ViewModelListener<EmailSenderEditorViewModel> view) {\n+    this.view = view;\n+    selectedProvider = ClientSetting.emailProvider.getValue().orElse(PROVIDER_DISABLED);\n+    smtpServer = ClientSetting.emailServerHost.getValue().orElse(\"\");\n+    smtpPort = ClientSetting.emailServerPort.getValue().map(String::valueOf).orElse(\"\");\n+    useTls = ClientSetting.emailServerSecurity.getValue().orElse(true);\n+  }\n+\n+  static Collection<String> getProviderOptions() {\n+    return List.of(PROVIDER_DISABLED, \"Gmail\", \"Hotmail\", GENERIC_SMTP);\n+  }\n+\n+  boolean isTestEmailButtonEnabled() {\n+    return smtpServer != null\n+        && !smtpServer.isBlank()\n+        && !toAddress.isBlank()\n+        && PlayerEmailValidation.isValid(toAddress)\n+        && StringUtils.isPositiveInt(smtpPort)\n+        && ClientSetting.emailUsername.isSet()\n+        && ClientSetting.emailUsername.getValueOrThrow().length > 0\n+        && ClientSetting.emailPassword.isSet()\n+        && ClientSetting.emailPassword.getValueOrThrow().length > 0;\n+  }\n+\n+  void setSelectedProvider(final String provider) {\n+    Preconditions.checkNotNull(provider);\n+    if (!selectedProvider.equals(provider)) {\n+      selectedProvider = provider;\n+      ClientSetting.emailProvider.setValueAndFlush(selectedProvider);\n+\n+      EmailProviderPreset.lookupByName(provider)\n+          .ifPresentOrElse(\n+              preset -> {\n+                smtpServer = preset.getServer();\n+                smtpPort = String.valueOf(preset.getPort());\n+                useTls = preset.isUseTlsByDefault();\n+\n+                ClientSetting.emailServerHost.setValue(smtpServer);\n+                ClientSetting.emailServerPort.setValue(preset.getPort());\n+                ClientSetting.emailServerSecurity.setValueAndFlush(useTls);\n+              },\n+              () -> {\n+                smtpServer = \"\";\n+                smtpPort = \"\";\n+                useTls = true;\n+\n+                ClientSetting.emailServerHost.resetValue();\n+                ClientSetting.emailServerPort.resetValue();\n+                ClientSetting.emailServerSecurity.setValueAndFlush(useTls);\n+              });\n+\n+      invokeCallbacks();\n+    }\n+  }\n+\n+  private void invokeCallbacks() {\n+    view.viewModelChanged(this);\n+    Optional.ofNullable(validatedFieldsChangedListener).ifPresent(Runnable::run);\n+  }\n+\n+  boolean showServerOptions() {\n+    return selectedProvider.equals(GENERIC_SMTP);\n+  }\n+\n+  boolean showEmailOptions() {\n+    return !isEmailProviderDisabled();\n+  }\n+\n+  private boolean isEmailProviderDisabled() {\n+    return selectedProvider.equals(PROVIDER_DISABLED);\n+  }\n+\n+  void setSmtpServer(final String smtpServer) {\n+    Preconditions.checkNotNull(smtpServer);\n+    if (!this.smtpServer.equals(smtpServer)) {\n+      this.smtpServer = smtpServer.trim();\n+      ClientSetting.emailServerHost.setValueAndFlush(smtpServer);\n+      invokeCallbacks();\n+    }\n+  }\n+\n+  boolean isSmtpServerValid() {\n+    return isEmailProviderDisabled() || !smtpServer.isBlank();\n+  }\n+\n+  void setSmtpPort(final String smtpPort) {\n+    Preconditions.checkNotNull(smtpPort);\n+    if (!this.smtpPort.equals(smtpPort)) {\n+      this.smtpPort = smtpPort;\n+      if (StringUtils.isPositiveInt(smtpPort)) {\n+        ClientSetting.emailServerPort.setValueAndFlush(Integer.valueOf(smtpPort.trim()));\n+      } else {\n+        ClientSetting.emailServerPort.resetValue();\n+        ClientSetting.flush();\n+      }\n+      invokeCallbacks();\n+    }\n+  }\n+\n+  boolean isSmtpPortValid() {\n+    return isEmailProviderDisabled() || StringUtils.isPositiveInt(smtpPort);\n+  }\n+\n+  void setSubject(final String subject) {\n+    Preconditions.checkNotNull(subject);\n+    if (!this.subject.equals(subject)) {\n+      this.subject = subject.trim();\n+      invokeCallbacks();\n+    }\n+  }\n+\n+  boolean isSubjectValid() {\n+    return isEmailProviderDisabled() || !subject.isBlank();\n+  }\n+\n+  void setToAddress(final String toAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "originalPosition": 150}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "581a3b155f6ea6f6cd49fffe1877a7aba8187ab7", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/581a3b155f6ea6f6cd49fffe1877a7aba8187ab7", "committedDate": "2020-03-10T03:27:02Z", "message": "Rewrite PbemEditor to prompt for email provider and settings\n\nPbem has as required settings an email server that are specified in\npreferences, a different screen. This causes a problem where the\n'play' button cannot be enabled on PBEM by simply filling in all fields\non the PBEM screen.\n\nThis update adds a few of these settings from the preferences screen\nto PBEM, notably the 'email provider' setting. The email provider\nsetting starts out disabled, in which case the play button is now enabled.\nThis replicates previous behavior of the 1.9.0.0.7xxx release where\nPBEM server was optional when playing a PBEM game.\n\nStill to do after this update is to add 'username' and 'password' as\nfields on the PBEM screen, after that point all required fields\ncan be specified on the screen that needs them."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjU5NzQ3", "url": "https://github.com/triplea-game/triplea/pull/6026#pullrequestreview-371659747", "createdAt": "2020-03-10T03:23:21Z", "commit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoyMzoyMVrOF0AU2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoyNDo1OFrOF0AWVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTYxMA==", "bodyText": "All remaining code, at this point and below is simply extracted with exception of the 'to' field being parameterized.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390075610", "createdAt": "2020-03-10T03:23:21Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/SendTestEmailAction.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.base.Ascii;\n+import games.strategy.engine.ClientFileSystemHelper;\n+import games.strategy.engine.posted.game.pbem.IEmailSender;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.logging.Level;\n+import javax.swing.JOptionPane;\n+import javax.swing.SwingUtilities;\n+import lombok.extern.java.Log;\n+import org.triplea.swing.ProgressWindow;\n+\n+@Log\n+public class SendTestEmailAction {\n+\n+  /** Tests the email sender. This must be called from the swing event thread */\n+  void send(final String to) {\n+    SwingUtilities.invokeLater(() -> sendWithProgressWindow(to));\n+  }\n+\n+  private void sendWithProgressWindow(final String to) {\n+    final ProgressWindow progressWindow =\n+        new ProgressWindow(JOptionPane.getFrameForComponent(null), \"Sending test email...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTk4OA==", "bodyText": "Most of the updates here are white space changes and line re-ordering. The update here is only using the new DocumentListenerBuilder API.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390075988", "createdAt": "2020-03-10T03:24:58Z", "author": {"login": "DanVanAtta"}, "path": "swing-lib/src/main/java/org/triplea/swing/KeyTypeValidator.java", "diffHunk": "@@ -21,31 +21,31 @@ public void attachKeyTypeValidator(\n       final JTextComponent textComponent,\n       final Predicate<String> dataValidation,\n       final Consumer<Boolean> action) {\n-    DocumentListenerBuilder.attachDocumentListener(\n-        textComponent,\n-        () ->\n-            new Thread(\n-                    () -> {\n-                      if (validationIsInFlight.compareAndSet(false, true)) {\n-                        // sleep to delay our current check and allow\n-                        // the check to be done once at the end of any\n-                        // further input that might still be in-flight.\n-                        if (!Interruptibles.sleep(200)) {\n-                          validationIsInFlight.set(false);\n-                          return;\n-                        }\n-                        // release the boolean lock, if we get another validation\n-                        // request, allow it to enter queue. This way even if 'getText()'\n-                        // returns us stale data, that new request will have a chance to\n-                        // operate on the most recent.\n-                        validationIsInFlight.set(false);\n+    new DocumentListenerBuilder(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ad541d319761df628b9ceeaf302573335cbeac1", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/0ad541d319761df628b9ceeaf302573335cbeac1", "committedDate": "2020-03-10T03:11:08Z", "message": "Rewrite PbemEditor to prompt for email provider and settings\n\nPbem has as required settings an email server that are specified in\npreferences, a different screen. This causes a problem where the\n'play' button cannot be enabled on PBEM by simply filling in all fields\non the PBEM screen.\n\nThis update adds a few of these settings from the preferences screen\nto PBEM, notably the 'email provider' setting. The email provider\nsetting starts out disabled, in which case the play button is now enabled.\nThis replicates previous behavior of the 1.9.0.0.7xxx release where\nPBEM server was optional when playing a PBEM game.\n\nStill to do after this update is to add 'username' and 'password' as\nfields on the PBEM screen, after that point all required fields\ncan be specified on the screen that needs them."}, "afterCommit": {"oid": "581a3b155f6ea6f6cd49fffe1877a7aba8187ab7", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/581a3b155f6ea6f6cd49fffe1877a7aba8187ab7", "committedDate": "2020-03-10T03:27:02Z", "message": "Rewrite PbemEditor to prompt for email provider and settings\n\nPbem has as required settings an email server that are specified in\npreferences, a different screen. This causes a problem where the\n'play' button cannot be enabled on PBEM by simply filling in all fields\non the PBEM screen.\n\nThis update adds a few of these settings from the preferences screen\nto PBEM, notably the 'email provider' setting. The email provider\nsetting starts out disabled, in which case the play button is now enabled.\nThis replicates previous behavior of the 1.9.0.0.7xxx release where\nPBEM server was optional when playing a PBEM game.\n\nStill to do after this update is to add 'username' and 'password' as\nfields on the PBEM screen, after that point all required fields\ncan be specified on the screen that needs them."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fd45722fd49a9701caa9879ee45b093243c4af4", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/8fd45722fd49a9701caa9879ee45b093243c4af4", "committedDate": "2020-03-10T06:23:13Z", "message": "Shorten method, consolidate setter checks for text fields"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDU0OTMw", "url": "https://github.com/triplea-game/triplea/pull/6026#pullrequestreview-372454930", "createdAt": "2020-03-11T03:26:59Z", "commit": {"oid": "8fd45722fd49a9701caa9879ee45b093243c4af4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNjo1OVrOF0oG2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNjo1OVrOF0oG2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNzM4Nw==", "bodyText": "Remove commented code?", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r390727387", "createdAt": "2020-03-11T03:26:59Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/DiceServerEditor.java", "diffHunk": "@@ -44,7 +45,7 @@\n   private final Runnable readyCallback;\n \n   public DiceServerEditor(final Runnable readyCallback) {\n-    super(new GridBagLayout());\n+    //    super(new GridBagLayout());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd45722fd49a9701caa9879ee45b093243c4af4"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f331537be08cc558a2d15b7732da3cca6467c14", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/1f331537be08cc558a2d15b7732da3cca6467c14", "committedDate": "2020-03-11T05:26:11Z", "message": "Remove grid bag layout from dice server editor, not used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9120242193a229df8e07a3bb1e5d0a6cfb337fc", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/b9120242193a229df8e07a3bb1e5d0a6cfb337fc", "committedDate": "2020-03-11T05:26:32Z", "message": "Add clarifying comment on why text fields should not be updated to the same value (moves the carat to end of field)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyODMxNDIy", "url": "https://github.com/triplea-game/triplea/pull/6026#pullrequestreview-372831422", "createdAt": "2020-03-11T14:50:14Z", "commit": {"oid": "b9120242193a229df8e07a3bb1e5d0a6cfb337fc"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1MDoxNFrOF06a9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTowMTo0NlrOF069Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNzQ0NQ==", "bodyText": "In theory the enabled button stuff should be performed on the event queue as well, but swing doesn't really care.", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r391027445", "createdAt": "2020-03-11T14:50:14Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/DiceServerEditor.java", "diffHunk": "@@ -226,17 +225,21 @@ private void checkFieldsAndNotify() {\n   public boolean areFieldsValid() {\n     final boolean toValid =\n         !toAddress.getText().isEmpty() && PlayerEmailValidation.isValid(toAddress.getText());\n-    SwingComponents.highlightLabelIfNotValid(toValid, toLabel);\n     final boolean ccValid =\n         !ccAddress.getText().isEmpty() && PlayerEmailValidation.isValid(ccAddress.getText());\n-    SwingComponents.highlightLabelIfNotValid(ccValid, ccLabel);\n \n     final boolean allValid = toValid && ccValid;\n     testDiceButton.setEnabled(allValid);\n     testDiceButton.setToolTipText(\n         allValid\n             ? \"Send a verified dice roll test email\"\n             : \"First enter a valid 'to' and 'cc' email address\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9120242193a229df8e07a3bb1e5d0a6cfb337fc"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMDIzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final JLabel smtpServerLabel = new JLabel(\"Smtp Server\");\n          \n          \n            \n              private final JLabel smtpServerLabel = new JLabel(\"SMTP Server\");\n          \n      \n    \n    \n  \n\nI believe this notation is used more commonly", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r391030239", "createdAt": "2020-03-11T14:53:54Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditor.java", "diffHunk": "@@ -1,208 +1,235 @@\n package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n \n-import com.google.common.base.Ascii;\n-import games.strategy.engine.ClientFileSystemHelper;\n import games.strategy.engine.data.properties.GameProperties;\n-import games.strategy.engine.posted.game.pbem.IEmailSender;\n-import java.awt.GridBagConstraints;\n-import java.awt.GridBagLayout;\n-import java.awt.Insets;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.logging.Level;\n import javax.swing.JButton;\n import javax.swing.JCheckBox;\n+import javax.swing.JComboBox;\n import javax.swing.JLabel;\n-import javax.swing.JOptionPane;\n import javax.swing.JPanel;\n import javax.swing.JTextField;\n import javax.swing.SwingUtilities;\n-import lombok.extern.java.Log;\n-import org.triplea.domain.data.PlayerEmailValidation;\n-import org.triplea.swing.DocumentListenerBuilder;\n-import org.triplea.swing.ProgressWindow;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.java.ViewModelListener;\n+import org.triplea.swing.JButtonBuilder;\n+import org.triplea.swing.JCheckBoxBuilder;\n+import org.triplea.swing.JComboBoxBuilder;\n+import org.triplea.swing.JTextFieldBuilder;\n import org.triplea.swing.SwingComponents;\n+import org.triplea.swing.jpanel.GridBagConstraintsBuilder;\n+import org.triplea.swing.jpanel.JPanelBuilder;\n \n /** An editor for modifying email senders. */\n-@Log\n-public class EmailSenderEditor extends JPanel {\n-  private static final long serialVersionUID = -4647781117491269926L;\n-  private final JTextField subject = new JTextField();\n-  private final JTextField toAddress = new JTextField();\n-  private final JLabel toLabel = new JLabel(\"To:\");\n-  private final JButton testEmail = new JButton(\"Test Email\");\n-  private final JCheckBox alsoPostAfterCombatMove = new JCheckBox(\"Also Post After Combat Move\");\n-  private final Runnable readyCallback;\n+public class EmailSenderEditor implements ViewModelListener<EmailSenderEditorViewModel> {\n+\n+  private static final int FIELD_LENGTH = 20;\n+  private final EmailSenderEditorViewModel viewModel = new EmailSenderEditorViewModel(this);\n+\n+  private boolean syncToModel;\n+\n+  private final JComboBox<String> emailProviderSelectionBox =\n+      JComboBoxBuilder.builder()\n+          .items(EmailSenderEditorViewModel.getProviderOptions())\n+          .selectedItem(viewModel.getSelectedProvider())\n+          .itemSelectedAction(\n+              provider -> {\n+                if (syncToModel) {\n+                  viewModel.setSelectedProvider(provider);\n+                }\n+              })\n+          .build();\n+\n+  private final JLabel smtpServerLabel = new JLabel(\"Smtp Server\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9120242193a229df8e07a3bb1e5d0a6cfb337fc"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzNjI1NA==", "bodyText": "If you want to be precise, you'd have to check if the port is inside [1, 65535]", "url": "https://github.com/triplea-game/triplea/pull/6026#discussion_r391036254", "createdAt": "2020-03-11T15:01:46Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditorViewModel.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package games.strategy.engine.framework.startup.ui.posted.game.pbem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import games.strategy.engine.data.properties.GameProperties;\n+import games.strategy.engine.posted.game.pbem.IEmailSender;\n+import games.strategy.triplea.settings.ClientSetting;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.domain.data.PlayerEmailValidation;\n+import org.triplea.java.StringUtils;\n+import org.triplea.java.ViewModelListener;\n+\n+class EmailSenderEditorViewModel {\n+  static final String PROVIDER_DISABLED = \"Disabled\";\n+  static final String GENERIC_SMTP = \"Generic SMTP\";\n+\n+  private final ViewModelListener<EmailSenderEditorViewModel> view;\n+\n+  @Setter(onMethod_ = @VisibleForTesting)\n+  private SendTestEmailAction sendTestEmailAction = new SendTestEmailAction();\n+\n+  @Getter private String selectedProvider;\n+  @Getter private boolean useTls;\n+  @Getter private String smtpServer;\n+  @Getter private String smtpPort;\n+  @Getter private String subject = \"\";\n+  @Getter private String toAddress = \"\";\n+  @Getter @Setter private boolean sendEmailAfterCombatMove;\n+  @Setter private Runnable validatedFieldsChangedListener;\n+\n+  EmailSenderEditorViewModel(final ViewModelListener<EmailSenderEditorViewModel> view) {\n+    this.view = view;\n+    selectedProvider = ClientSetting.emailProvider.getValue().orElse(PROVIDER_DISABLED);\n+    smtpServer = ClientSetting.emailServerHost.getValue().orElse(\"\");\n+    smtpPort = ClientSetting.emailServerPort.getValue().map(String::valueOf).orElse(\"\");\n+    useTls = ClientSetting.emailServerSecurity.getValue().orElse(true);\n+  }\n+\n+  static Collection<String> getProviderOptions() {\n+    return List.of(PROVIDER_DISABLED, \"Gmail\", \"Hotmail\", GENERIC_SMTP);\n+  }\n+\n+  boolean isTestEmailButtonEnabled() {\n+    return smtpServer != null\n+        && !smtpServer.isBlank()\n+        && !toAddress.isBlank()\n+        && PlayerEmailValidation.isValid(toAddress)\n+        && StringUtils.isPositiveInt(smtpPort)\n+        && ClientSetting.emailUsername.isSet()\n+        && ClientSetting.emailUsername.getValueOrThrow().length > 0\n+        && ClientSetting.emailPassword.isSet()\n+        && ClientSetting.emailPassword.getValueOrThrow().length > 0;\n+  }\n+\n+  void setSelectedProvider(final String provider) {\n+    Preconditions.checkNotNull(provider);\n+    if (!selectedProvider.equals(provider)) {\n+      selectedProvider = provider;\n+      ClientSetting.emailProvider.setValueAndFlush(selectedProvider);\n+\n+      EmailProviderPreset.lookupByName(provider)\n+          .ifPresentOrElse(\n+              preset -> {\n+                smtpServer = preset.getServer();\n+                smtpPort = String.valueOf(preset.getPort());\n+                useTls = preset.isUseTlsByDefault();\n+\n+                ClientSetting.emailServerHost.setValue(smtpServer);\n+                ClientSetting.emailServerPort.setValue(preset.getPort());\n+                ClientSetting.emailServerSecurity.setValueAndFlush(useTls);\n+              },\n+              () -> {\n+                smtpServer = \"\";\n+                smtpPort = \"\";\n+                useTls = true;\n+\n+                ClientSetting.emailServerHost.resetValue();\n+                ClientSetting.emailServerPort.resetValue();\n+                ClientSetting.emailServerSecurity.setValueAndFlush(useTls);\n+              });\n+\n+      invokeCallbacks();\n+    }\n+  }\n+\n+  private void invokeCallbacks() {\n+    view.viewModelChanged(this);\n+    Optional.ofNullable(validatedFieldsChangedListener).ifPresent(Runnable::run);\n+  }\n+\n+  boolean showServerOptions() {\n+    return selectedProvider.equals(GENERIC_SMTP);\n+  }\n+\n+  boolean showEmailOptions() {\n+    return !isEmailProviderDisabled();\n+  }\n+\n+  private boolean isEmailProviderDisabled() {\n+    return selectedProvider.equals(PROVIDER_DISABLED);\n+  }\n+\n+  void setSmtpServer(final String smtpServer) {\n+    Preconditions.checkNotNull(smtpServer);\n+    if (!this.smtpServer.equals(smtpServer)) {\n+      this.smtpServer = smtpServer.trim();\n+      ClientSetting.emailServerHost.setValueAndFlush(smtpServer);\n+      invokeCallbacks();\n+    }\n+  }\n+\n+  boolean isSmtpServerValid() {\n+    return isEmailProviderDisabled() || !smtpServer.isBlank();\n+  }\n+\n+  void setSmtpPort(final String smtpPort) {\n+    Preconditions.checkNotNull(smtpPort);\n+    if (!this.smtpPort.equals(smtpPort)) {\n+      this.smtpPort = smtpPort;\n+      if (StringUtils.isPositiveInt(smtpPort)) {\n+        ClientSetting.emailServerPort.setValueAndFlush(Integer.valueOf(smtpPort.trim()));\n+      } else {\n+        ClientSetting.emailServerPort.resetValue();\n+        ClientSetting.flush();\n+      }\n+      invokeCallbacks();\n+    }\n+  }\n+\n+  boolean isSmtpPortValid() {\n+    return isEmailProviderDisabled() || StringUtils.isPositiveInt(smtpPort);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9120242193a229df8e07a3bb1e5d0a6cfb337fc"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dd312027195f2951017a7f04f90de4e0d121be5", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/2dd312027195f2951017a7f04f90de4e0d121be5", "committedDate": "2020-03-11T18:46:36Z", "message": "Update game-core/src/main/java/games/strategy/engine/framework/startup/ui/posted/game/pbem/EmailSenderEditor.java\n\nCo-Authored-By: RoiEX <8350879+RoiEXLab@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3729, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}