{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2OTY1MjQx", "number": 7660, "title": "Convert attacker retreat steps", "bodyText": "This converts the attacker retreat steps into a single battle step.\nTesting\n\nTested partial amphibious retreats and regular retreats.  Loaded an old save that was in the middle of a partial amphibious retreat.\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-09-15T00:51:31Z", "url": "https://github.com/triplea-game/triplea/pull/7660", "merged": true, "mergeCommit": {"oid": "4cccea4056d0b996a5b4e337792558a52f447609"}, "closed": true, "closedAt": "2020-09-17T03:25:37Z", "author": {"login": "trevan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI87CUgH2gAyNDg2OTY1MjQxOjIyZjJhMGJhMTljODExMjlkMzAzZTU1NTFjYzNiOWY4NmNkNDM0N2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJkhZigH2gAyNDg2OTY1MjQxOjQyODE1MmI0MDYyNDVmM2VlZTAwMTUwZjQyZmExMjQ5MDRhY2JiYWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "22f2a0ba19c81129d303e5551cc3b9f86cd4347e", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/22f2a0ba19c81129d303e5551cc3b9f86cd4347e", "committedDate": "2020-09-15T00:47:25Z", "message": "Convert retreat steps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d2316af7b8efbf3036fcc79cf0355ab30466a43", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/0d2316af7b8efbf3036fcc79cf0355ab30466a43", "committedDate": "2020-09-15T02:09:16Z", "message": "Add a comment about the blank bodies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "522898b8c244b228650027eb86095f8ed708aac4", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/522898b8c244b228650027eb86095f8ed708aac4", "committedDate": "2020-09-16T00:36:39Z", "message": "Reduce cognitive complexity of retreatUnits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjA5ODMz", "url": "https://github.com/triplea-game/triplea/pull/7660#pullrequestreview-489209833", "createdAt": "2020-09-16T01:21:28Z", "commit": {"oid": "522898b8c244b228650027eb86095f8ed708aac4"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMToyMToyOVrOHSco8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTo0Mjo1OVrOHSc_zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwNTY0OA==", "bodyText": "Some background on why this is intentional could be useful. Why is this intentionally left blank?", "url": "https://github.com/triplea-game/triplea/pull/7660#discussion_r489105648", "createdAt": "2020-09-16T01:21:29Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1661,45 +1667,33 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n         }\n       }\n     };\n-    steps.add(\n-        new IExecutable() {\n-          private static final long serialVersionUID = -1150863964807721395L;\n \n-          @Override\n-          public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-            if (!isOver\n-                && RetreatChecks.canAttackerRetreatPlanes(attackingUnits, gameData, isAmphibious)\n-                && !RetreatChecks.canAttackerRetreatPartialAmphib(\n-                    attackingUnits, gameData, isAmphibious)) {\n-              attackerRetreatPlanes(bridge);\n-            }\n-          }\n-        });\n-    steps.add(\n-        new IExecutable() {\n-          private static final long serialVersionUID = -1150863964807721395L;\n+    steps.add(offensiveGeneralRetreat);\n+    new IExecutable() {\n+      private static final long serialVersionUID = -1150863964807721395L;\n \n-          @Override\n-          public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-            if (!isOver\n-                && RetreatChecks.canAttackerRetreatPartialAmphib(\n-                    attackingUnits, gameData, isAmphibious)) {\n-              attackerRetreatNonAmphibUnits(bridge);\n-            }\n-          }\n-        });\n-    steps.add(\n-        new IExecutable() {\n-          private static final long serialVersionUID = 669349383898975048L;\n+      @Override\n+      public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+        // Intentionally left blank", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "522898b8c244b228650027eb86095f8ed708aac4"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwOTE3OA==", "bodyText": "It's really odd for retreatUnits to be the implementation of this interface method, and also called externally directly. Can you speak to why that is @trevan ?", "url": "https://github.com/triplea-game/triplea/pull/7660#discussion_r489109178", "createdAt": "2020-09-16T01:34:12Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/OffensiveGeneralRetreat.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.triplea.delegate.battle.steps.retreat;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.ATTACKER_WITHDRAW;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.RetreatType;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import games.strategy.triplea.delegate.battle.steps.RetreatChecks;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@AllArgsConstructor\n+public class OffensiveGeneralRetreat implements BattleStep {\n+\n+  final BattleState battleState;\n+\n+  final BattleActions battleActions;\n+\n+  @Override\n+  public List<String> getNames() {\n+    if (canAttackerRetreat()\n+        || canAttackerRetreatSeaPlanes()\n+        || (battleState.isAmphibious()\n+            && (canAttackerRetreatPartialAmphib() || canAttackerRetreatAmphibPlanes()))) {\n+      return List.of(battleState.getAttacker().getName() + ATTACKER_WITHDRAW);\n+    }\n+    return List.of();\n+  }\n+\n+  @Override\n+  public Order getOrder() {\n+    return Order.OFFENSIVE_GENERAL_RETREAT;\n+  }\n+\n+  @Override\n+  public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+    retreatUnits(bridge);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "522898b8c244b228650027eb86095f8ed708aac4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwOTMxMg==", "bodyText": "Can these variables be made private?", "url": "https://github.com/triplea-game/triplea/pull/7660#discussion_r489109312", "createdAt": "2020-09-16T01:34:45Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/OffensiveGeneralRetreat.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.triplea.delegate.battle.steps.retreat;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.ATTACKER_WITHDRAW;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.RetreatType;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import games.strategy.triplea.delegate.battle.steps.RetreatChecks;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@AllArgsConstructor\n+public class OffensiveGeneralRetreat implements BattleStep {\n+\n+  final BattleState battleState;\n+\n+  final BattleActions battleActions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "522898b8c244b228650027eb86095f8ed708aac4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwOTc1NQ==", "bodyText": "Nitpicky - Even if a multi-line, I still think this would be cleaner as a ternary. I think with context, it seems easier, but I would suggest that maintaining/reading the code, it's easier to grok as a ternary. Perhaps the boolean can be extracted to a helper method to make it a simple tenary. WDYT?", "url": "https://github.com/triplea-game/triplea/pull/7660#discussion_r489109755", "createdAt": "2020-09-16T01:36:14Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/OffensiveGeneralRetreat.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.triplea.delegate.battle.steps.retreat;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.ATTACKER_WITHDRAW;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.RetreatType;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import games.strategy.triplea.delegate.battle.steps.RetreatChecks;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@AllArgsConstructor\n+public class OffensiveGeneralRetreat implements BattleStep {\n+\n+  final BattleState battleState;\n+\n+  final BattleActions battleActions;\n+\n+  @Override\n+  public List<String> getNames() {\n+    if (canAttackerRetreat()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "522898b8c244b228650027eb86095f8ed708aac4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExMDE2NQ==", "bodyText": "Does this condition happen often? TBH, it seems a bit like a bug. If the battle is over, the caller perhaps did not realize that and should not have made this call to begin with.", "url": "https://github.com/triplea-game/triplea/pull/7660#discussion_r489110165", "createdAt": "2020-09-16T01:37:39Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/OffensiveGeneralRetreat.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.triplea.delegate.battle.steps.retreat;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.ATTACKER_WITHDRAW;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.RetreatType;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import games.strategy.triplea.delegate.battle.steps.RetreatChecks;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@AllArgsConstructor\n+public class OffensiveGeneralRetreat implements BattleStep {\n+\n+  final BattleState battleState;\n+\n+  final BattleActions battleActions;\n+\n+  @Override\n+  public List<String> getNames() {\n+    if (canAttackerRetreat()\n+        || canAttackerRetreatSeaPlanes()\n+        || (battleState.isAmphibious()\n+            && (canAttackerRetreatPartialAmphib() || canAttackerRetreatAmphibPlanes()))) {\n+      return List.of(battleState.getAttacker().getName() + ATTACKER_WITHDRAW);\n+    }\n+    return List.of();\n+  }\n+\n+  @Override\n+  public Order getOrder() {\n+    return Order.OFFENSIVE_GENERAL_RETREAT;\n+  }\n+\n+  @Override\n+  public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+    retreatUnits(bridge);\n+  }\n+\n+  public void retreatUnits(final IDelegateBridge bridge) {\n+    if (battleState.isOver()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "522898b8c244b228650027eb86095f8ed708aac4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExMTUwMA==", "bodyText": "Have you consider pushing this conditional to the callers? I think in both cases it would be the calling code easier to understand, it avoids having to jump around the class file to understand those locations. Furthermore, without this if statement the method body would be a simple stream & any match statement. Not that it matters too much, there would be a small performance boost as you wouldn't need to compute the full set of land units but could halt on the first match.", "url": "https://github.com/triplea-game/triplea/pull/7660#discussion_r489111500", "createdAt": "2020-09-16T01:42:59Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/OffensiveGeneralRetreat.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package games.strategy.triplea.delegate.battle.steps.retreat;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.ATTACKER_WITHDRAW;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.RetreatType;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import games.strategy.triplea.delegate.battle.steps.RetreatChecks;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@AllArgsConstructor\n+public class OffensiveGeneralRetreat implements BattleStep {\n+\n+  final BattleState battleState;\n+\n+  final BattleActions battleActions;\n+\n+  @Override\n+  public List<String> getNames() {\n+    if (canAttackerRetreat()\n+        || canAttackerRetreatSeaPlanes()\n+        || (battleState.isAmphibious()\n+            && (canAttackerRetreatPartialAmphib() || canAttackerRetreatAmphibPlanes()))) {\n+      return List.of(battleState.getAttacker().getName() + ATTACKER_WITHDRAW);\n+    }\n+    return List.of();\n+  }\n+\n+  @Override\n+  public Order getOrder() {\n+    return Order.OFFENSIVE_GENERAL_RETREAT;\n+  }\n+\n+  @Override\n+  public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+    retreatUnits(bridge);\n+  }\n+\n+  public void retreatUnits(final IDelegateBridge bridge) {\n+    if (battleState.isOver()) {\n+      return;\n+    }\n+    final RetreatData retreatData;\n+\n+    if (battleState.isAmphibious()) {\n+      retreatData = getAmphibiousRetreatData();\n+      if (retreatData == null) {\n+        return;\n+      }\n+\n+    } else if (canAttackerRetreat()) {\n+      retreatData =\n+          RetreatData.of(RetreatType.DEFAULT, battleState.getAttackerRetreatTerritories());\n+    } else {\n+      return;\n+    }\n+\n+    battleActions.queryRetreat(false, retreatData.retreatType, bridge, retreatData.retreatSites);\n+  }\n+\n+  private @Nullable RetreatData getAmphibiousRetreatData() {\n+    if (canAttackerRetreatPartialAmphib()) {\n+      return RetreatData.of(\n+          RetreatType.PARTIAL_AMPHIB, battleState.getAttackerRetreatTerritories());\n+\n+    } else if (canAttackerRetreatAmphibPlanes()) {\n+      return RetreatData.of(RetreatType.PLANES, Set.of(battleState.getBattleSite()));\n+\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  @Value(staticConstructor = \"of\")\n+  private static class RetreatData {\n+    RetreatType retreatType;\n+    Collection<Territory> retreatSites;\n+  }\n+\n+  private boolean canAttackerRetreat() {\n+    return RetreatChecks.canAttackerRetreat(\n+        battleState.getUnits(BattleState.Side.DEFENSE),\n+        battleState.getGameData(),\n+        battleState::getAttackerRetreatTerritories,\n+        battleState.isAmphibious());\n+  }\n+\n+  private boolean canAttackerRetreatSeaPlanes() {\n+    return battleState.getBattleSite().isWater()\n+        && battleState.getUnits(BattleState.Side.OFFENSE).stream().anyMatch(Matches.unitIsAir());\n+  }\n+\n+  private boolean canAttackerRetreatPartialAmphib() {\n+    if (Properties.getPartialAmphibiousRetreat(battleState.getGameData())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "522898b8c244b228650027eb86095f8ed708aac4"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86a1401431261ba9a1421c66a0fa4b7e9cb2c9da", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/86a1401431261ba9a1421c66a0fa4b7e9cb2c9da", "committedDate": "2020-09-16T02:13:25Z", "message": "Review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzA4MTc3", "url": "https://github.com/triplea-game/triplea/pull/7660#pullrequestreview-489308177", "createdAt": "2020-09-16T06:24:24Z", "commit": {"oid": "86a1401431261ba9a1421c66a0fa4b7e9cb2c9da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoyNDoyNVrOHSh3Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoyNDoyNVrOHSh3Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5MTI2Nw==", "bodyText": "\ud83d\udc4d\nThis looks good, thanks!", "url": "https://github.com/triplea-game/triplea/pull/7660#discussion_r489191267", "createdAt": "2020-09-16T06:24:25Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/OffensiveGeneralRetreat.java", "diffHunk": "@@ -20,24 +19,26 @@\n import javax.annotation.Nullable;\n import lombok.AllArgsConstructor;\n import lombok.Value;\n-import org.triplea.java.collections.CollectionUtils;\n \n @AllArgsConstructor\n public class OffensiveGeneralRetreat implements BattleStep {\n \n-  final BattleState battleState;\n+  private final BattleState battleState;\n \n-  final BattleActions battleActions;\n+  private final BattleActions battleActions;\n \n   @Override\n   public List<String> getNames() {\n-    if (canAttackerRetreat()\n+    return isRetreatPossible()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86a1401431261ba9a1421c66a0fa4b7e9cb2c9da"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzA4OTMx", "url": "https://github.com/triplea-game/triplea/pull/7660#pullrequestreview-489308931", "createdAt": "2020-09-16T06:25:51Z", "commit": {"oid": "86a1401431261ba9a1421c66a0fa4b7e9cb2c9da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoyNTo1MlrOHSh5yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoyNTo1MlrOHSh5yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5MTg4Mw==", "bodyText": "nitpicky, note - you can use Predicates here to write this as a method references:\n.anyMatch(Predicates.not(Unit::getWasAmphibious));", "url": "https://github.com/triplea-game/triplea/pull/7660#discussion_r489191883", "createdAt": "2020-09-16T06:25:52Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/OffensiveGeneralRetreat.java", "diffHunk": "@@ -105,18 +106,13 @@ private boolean canAttackerRetreatSeaPlanes() {\n   }\n \n   private boolean canAttackerRetreatPartialAmphib() {\n-    if (Properties.getPartialAmphibiousRetreat(battleState.getGameData())) {\n-      // Only include land units when checking for allow amphibious retreat\n-      final List<Unit> landUnits =\n-          CollectionUtils.getMatches(\n-              battleState.getUnits(BattleState.Side.OFFENSE), Matches.unitIsLand());\n-      for (final Unit unit : landUnits) {\n-        if (!unit.getWasAmphibious()) {\n-          return true;\n-        }\n-      }\n+    if (!Properties.getPartialAmphibiousRetreat(battleState.getGameData())) {\n+      return false;\n     }\n-    return false;\n+    // Only include land units when checking for allow amphibious retreat\n+    return battleState.getUnits(BattleState.Side.OFFENSE).stream()\n+        .filter(Matches.unitIsLand())\n+        .anyMatch(unit -> !unit.getWasAmphibious());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86a1401431261ba9a1421c66a0fa4b7e9cb2c9da"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a866bc5bedcba6cf681bc75837c23ea1cc7ce4ca", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/a866bc5bedcba6cf681bc75837c23ea1cc7ce4ca", "committedDate": "2020-09-16T22:55:28Z", "message": "Mark old classes with RemoveOnNextMajorRelease annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "428152b406245f3eee00150f42fa124904acbbab", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/428152b406245f3eee00150f42fa124904acbbab", "committedDate": "2020-09-16T22:55:37Z", "message": "Use Predicate.not"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3923, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}