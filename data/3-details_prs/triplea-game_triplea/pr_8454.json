{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyODUzNTc5", "number": 8454, "title": "Create a \"ai\" project for ai code", "bodyText": "Updated the PlayerType so that it is no longer an enum but stores a list\nof types.  Added a Service Provider so that the game-ai can register ai\nplayers and game-core will see them and add them to the list of\nPlayerType.\nAdded a stub for a new AI called flowfield that is in the game-ai\nproject.\n\nTesting\n\nTested that the new AI showed up when Beta was enabled and that it didn't show up when Beta was disabled.\nLoaded save games to make sure the switch from Enum to Class didn't break any saves.\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note\n\nCHANGE|Add new project \"game-ai\" to store AI related code.", "createdAt": "2020-12-19T01:19:48Z", "url": "https://github.com/triplea-game/triplea/pull/8454", "merged": true, "mergeCommit": {"oid": "9f3e5bcbcec245d1384e5532002b104f61a50271"}, "closed": true, "closedAt": "2020-12-20T18:45:41Z", "author": {"login": "trevan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdniuK2gH2gAyNTQyODUzNTc5OmIyNTMwZTJlZWY3NjYxY2JlYTBkYjhlZmMxN2U2ZmQyZTY2MGYzNmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoFL9wAH2gAyNTQyODUzNTc5OjU3OWExZmMwYWRhMDIxZDExODEwZGJjNTRlODc1YzdmMDM2YTNlYzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b2530e2eef7661cbea0db8efc17e6fd2e660f36d", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/b2530e2eef7661cbea0db8efc17e6fd2e660f36d", "committedDate": "2020-12-19T01:47:29Z", "message": "Create a \"game-ai\" project for ai code\n\nUpdated the PlayerType so that it is no longer an enum but stores a list\nof types.  Added a Service Provider so that the game-ai can register ai\nplayers and game-core will see them and add them to the list of\nPlayerType.\n\nAdded a stub for a new AI called flowfield that is in the game-ai\nproject."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "695aa823878ec0e2883a7896e1efab50a1d2fd5e", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/695aa823878ec0e2883a7896e1efab50a1d2fd5e", "committedDate": "2020-12-19T00:09:17Z", "message": "Create a \"game-ai\" project for ai code\n\nUpdated the PlayerType so that it is no longer an enum but stores a list\nof types.  Added a Service Provider so that the game-ai can register ai\nplayers and game-core will see them and add them to the list of\nPlayerType.\n\nAdded a stub for a new AI called flowfield that is in the game-ai\nproject."}, "afterCommit": {"oid": "b2530e2eef7661cbea0db8efc17e6fd2e660f36d", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/b2530e2eef7661cbea0db8efc17e6fd2e660f36d", "committedDate": "2020-12-19T01:47:29Z", "message": "Create a \"game-ai\" project for ai code\n\nUpdated the PlayerType so that it is no longer an enum but stores a list\nof types.  Added a Service Provider so that the game-ai can register ai\nplayers and game-core will see them and add them to the list of\nPlayerType.\n\nAdded a stub for a new AI called flowfield that is in the game-ai\nproject."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTY1NDEy", "url": "https://github.com/triplea-game/triplea/pull/8454#pullrequestreview-555965412", "createdAt": "2020-12-19T20:06:04Z", "commit": {"oid": "b2530e2eef7661cbea0db8efc17e6fd2e660f36d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMDowNjowNFrOII-IQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMDowODozMlrOII-JWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzQ0Mw==", "bodyText": "Injections is mean to be very much a roll-your-own dependency injection framework. A framework like Dagger or Spring or Guice were voted down in favor of not having one some long time ago, yet DI is useful specifically for being able to have top level projects inject configuration into lower level layers. That is the background for how it is intended to be used.\nWith that context, I think Injections should own the full playerTypes list. As-is, we have an existing list of player types and then we append to that list from injections, which spreads the ownership around. I would envision that injections would have exactly the above PlayerTypes.add(..) code and would then be able to include the flow-field AI. Then any usages of injections simply needs to call 'injections.getPlayerTypes()'.\nIdeally we would avoid the static dependency and try to keep the imperative shell, any outer-layer code in control of injections and then follow DI to pass the player types object to the method or class that needs it when we instantiate it.\nDoes that make sense? Any thoughts to changing this towards that goal, any hidden problems with that?", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546277443", "createdAt": "2020-12-19T20:06:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/PlayerTypes.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package games.strategy.engine.framework.startup.ui;\n+\n+import games.strategy.engine.player.Player;\n+import games.strategy.triplea.TripleAPlayer;\n+import games.strategy.triplea.ai.AiProvider;\n+import games.strategy.triplea.ai.fast.FastAi;\n+import games.strategy.triplea.ai.pro.ProAi;\n+import games.strategy.triplea.ai.weak.DoesNothingAi;\n+import games.strategy.triplea.ai.weak.WeakAi;\n+import games.strategy.triplea.settings.ClientSetting;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Value;\n+import org.triplea.injection.Injections;\n+\n+@Value\n+public class PlayerTypes {\n+\n+  public static final Type HUMAN_PLAYER =\n+      new Type(\"Human\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new TripleAPlayer(name) {\n+            @Override\n+            public Type getPlayerType() {\n+              return HUMAN_PLAYER;\n+            }\n+          };\n+        }\n+      };\n+  public static final Type WEAK_AI =\n+      new Type(\"Easy (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new WeakAi(name);\n+        }\n+      };\n+  public static final Type FAST_AI =\n+      new Type(\"Fast (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new FastAi(name);\n+        }\n+      };\n+  public static final Type PRO_AI =\n+      new Type(\"Hard (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new ProAi(name);\n+        }\n+      };\n+  public static final Type DOES_NOTHING_AI =\n+      new Type(\"Does Nothing (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new DoesNothingAi(name);\n+        }\n+      };\n+  /** A hidden player type to represent network connected players. */\n+  public static final Type CLIENT_PLAYER =\n+      new Type(\"Client\", false) {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new TripleAPlayer(name) {\n+            @Override\n+            public Type getPlayerType() {\n+              return CLIENT_PLAYER;\n+            }\n+          };\n+        }\n+      };\n+  /** A 'dummy' player type used for battle calc. */\n+  public static final Type BATTLE_CALC_DUMMY =\n+      new Type(\"None (AI)\", false) {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          throw new UnsupportedOperationException(\n+              \"Fail fast - bad configuration, should instantiate dummy player \"\n+                  + \"type only for battle calc\");\n+        }\n+      };\n+\n+  Collection<Type> playerTypes = new ArrayList<>();\n+\n+  public PlayerTypes() {\n+    playerTypes.add(HUMAN_PLAYER);\n+    playerTypes.add(WEAK_AI);\n+    playerTypes.add(FAST_AI);\n+    playerTypes.add(PRO_AI);\n+    playerTypes.add(DOES_NOTHING_AI);\n+    playerTypes.add(CLIENT_PLAYER);\n+    playerTypes.add(BATTLE_CALC_DUMMY);\n+\n+    final Injections injection = Injections.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2530e2eef7661cbea0db8efc17e6fd2e660f36d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzU3OA==", "bodyText": "injections should always be non-null. While it can be null, we should be instantiating as early as possible in any main method.", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546277578", "createdAt": "2020-12-19T20:07:08Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/PlayerTypes.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package games.strategy.engine.framework.startup.ui;\n+\n+import games.strategy.engine.player.Player;\n+import games.strategy.triplea.TripleAPlayer;\n+import games.strategy.triplea.ai.AiProvider;\n+import games.strategy.triplea.ai.fast.FastAi;\n+import games.strategy.triplea.ai.pro.ProAi;\n+import games.strategy.triplea.ai.weak.DoesNothingAi;\n+import games.strategy.triplea.ai.weak.WeakAi;\n+import games.strategy.triplea.settings.ClientSetting;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Value;\n+import org.triplea.injection.Injections;\n+\n+@Value\n+public class PlayerTypes {\n+\n+  public static final Type HUMAN_PLAYER =\n+      new Type(\"Human\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new TripleAPlayer(name) {\n+            @Override\n+            public Type getPlayerType() {\n+              return HUMAN_PLAYER;\n+            }\n+          };\n+        }\n+      };\n+  public static final Type WEAK_AI =\n+      new Type(\"Easy (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new WeakAi(name);\n+        }\n+      };\n+  public static final Type FAST_AI =\n+      new Type(\"Fast (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new FastAi(name);\n+        }\n+      };\n+  public static final Type PRO_AI =\n+      new Type(\"Hard (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new ProAi(name);\n+        }\n+      };\n+  public static final Type DOES_NOTHING_AI =\n+      new Type(\"Does Nothing (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new DoesNothingAi(name);\n+        }\n+      };\n+  /** A hidden player type to represent network connected players. */\n+  public static final Type CLIENT_PLAYER =\n+      new Type(\"Client\", false) {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new TripleAPlayer(name) {\n+            @Override\n+            public Type getPlayerType() {\n+              return CLIENT_PLAYER;\n+            }\n+          };\n+        }\n+      };\n+  /** A 'dummy' player type used for battle calc. */\n+  public static final Type BATTLE_CALC_DUMMY =\n+      new Type(\"None (AI)\", false) {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          throw new UnsupportedOperationException(\n+              \"Fail fast - bad configuration, should instantiate dummy player \"\n+                  + \"type only for battle calc\");\n+        }\n+      };\n+\n+  Collection<Type> playerTypes = new ArrayList<>();\n+\n+  public PlayerTypes() {\n+    playerTypes.add(HUMAN_PLAYER);\n+    playerTypes.add(WEAK_AI);\n+    playerTypes.add(FAST_AI);\n+    playerTypes.add(PRO_AI);\n+    playerTypes.add(DOES_NOTHING_AI);\n+    playerTypes.add(CLIENT_PLAYER);\n+    playerTypes.add(BATTLE_CALC_DUMMY);\n+\n+    final Injections injection = Injections.getInstance();\n+    if (injection != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2530e2eef7661cbea0db8efc17e6fd2e660f36d"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzcyMQ==", "bodyText": "Most AI is not going to be beta, and beta should be a relatively short thing in the long run. After we finish this AI we'll have years and years of no beta players. There is a 'isVisible' field on player type, can we use that to hide beta players?", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546277721", "createdAt": "2020-12-19T20:08:32Z", "author": {"login": "DanVanAtta"}, "path": "game-ai/src/main/java/org/triplea/ai/flowfield/FlowFieldAiProvider.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.triplea.ai.flowfield;\n+\n+import games.strategy.engine.framework.startup.ui.PlayerTypes;\n+import games.strategy.triplea.ai.AbstractAi;\n+import games.strategy.triplea.ai.AiProvider;\n+\n+public class FlowFieldAiProvider implements AiProvider {\n+  @Override\n+  public AbstractAi create(final String name, final PlayerTypes.AiType playerType) {\n+    return new FlowFieldAi(name, playerType);\n+  }\n+\n+  @Override\n+  public String getLabel() {\n+    return \"FlowField (AI)\";\n+  }\n+\n+  @Override\n+  public boolean isBetaPlayer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2530e2eef7661cbea0db8efc17e6fd2e660f36d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "050ce1cfb1bebb0742b632f17d3d1f5ba1bf6f2b", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/050ce1cfb1bebb0742b632f17d3d1f5ba1bf6f2b", "committedDate": "2020-12-19T23:26:49Z", "message": "Rename game-ai to ai and add all player types to the injector"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTgwMzMy", "url": "https://github.com/triplea-game/triplea/pull/8454#pullrequestreview-555980332", "createdAt": "2020-12-20T01:59:20Z", "commit": {"oid": "050ce1cfb1bebb0742b632f17d3d1f5ba1bf6f2b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwMTo1OToyMFrOIJAAPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwMTo1OToyMFrOIJAAPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODE1OQ==", "bodyText": "I think we need to try and avoid static coupling. That would mean to inject the 'playerTypes' as a constructor arg. This way only code that is instantiating the LocalLauncher is aware of Injections, but the code using the injected values is not aware of how it is injected.\nI have not researched what this would involve, this is a bit of a quick comment. Let me know what you think and if there are any serious issues with constructor injection.", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546308159", "createdAt": "2020-12-20T01:59:20Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/launcher/LocalLauncher.java", "diffHunk": "@@ -63,7 +64,9 @@ public void launch() {\n       final Set<Player> gamePlayers =\n           gameData\n               .getGameLoader()\n-              .newPlayers(playerListing.getLocalPlayerTypeMap(new PlayerTypes()));\n+              .newPlayers(\n+                  playerListing.getLocalPlayerTypeMap(\n+                      new PlayerTypes(Injections.getInstance().getPlayerTypes())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050ce1cfb1bebb0742b632f17d3d1f5ba1bf6f2b"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTgwNTE5", "url": "https://github.com/triplea-game/triplea/pull/8454#pullrequestreview-555980519", "createdAt": "2020-12-20T02:05:39Z", "commit": {"oid": "050ce1cfb1bebb0742b632f17d3d1f5ba1bf6f2b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwMjowNTozOVrOIJAB6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwMjowNTozOVrOIJAB6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODU4NA==", "bodyText": "I was hoping we could have that explicit list of player types here.\nI'm surprised to see 'flow field' is not part of the built-in, which makes me wonder what built-in really means.", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546308584", "createdAt": "2020-12-20T02:05:39Z", "author": {"login": "DanVanAtta"}, "path": "game-headed/src/main/java/org/triplea/game/client/HeadedGameRunner.java", "diffHunk": "@@ -103,10 +106,17 @@ public static void main(final String[] args) {\n   }\n \n   private static Injections constructInjections() {\n-    final ServiceLoader<AiProvider> loader = ServiceLoader.load(AiProvider.class);\n     return Injections.builder()\n         .engineVersion(new ProductVersionReader().getVersion())\n-        .aiProviders(StreamSupport.stream(loader.spliterator(), false).collect(Collectors.toList()))\n+        .playerTypes(gatherPlayerTypes())\n         .build();\n   }\n+\n+  private static Collection<PlayerTypes.Type> gatherPlayerTypes() {\n+    return Stream.concat(\n+            StreamSupport.stream(ServiceLoader.load(AiProvider.class).spliterator(), false)\n+                .map(PlayerTypes.AiType::new),\n+            PlayerTypes.getBuiltInPlayerTypes().stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050ce1cfb1bebb0742b632f17d3d1f5ba1bf6f2b"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0241218c45bdde5795f8767e4729f317fc1ca608", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/0241218c45bdde5795f8767e4729f317fc1ca608", "committedDate": "2020-12-20T17:50:16Z", "message": "Merge remote-tracking branch 'upstream/master' into flow-field-ai"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "579a1fc0ada021d11810dbc54e875c7f036a3ec0", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/579a1fc0ada021d11810dbc54e875c7f036a3ec0", "committedDate": "2020-12-20T17:56:48Z", "message": "Remove beta players when client starts if beta flag is false"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3822, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}