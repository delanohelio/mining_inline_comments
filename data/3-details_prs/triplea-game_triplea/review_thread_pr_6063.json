{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzc1OTU4", "number": 6063, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjo0NDoxNFrODpw2hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjo0NDoxNFrODpw2hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTE4NTk5OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/server/web/socket/GameConnectionWebSocket.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjo0NDoxNFrOF5I6Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjo0NDoxNFrOF5I6Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1OTEzMQ==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6063#discussion_r395459131", "createdAt": "2020-03-20T06:44:14Z", "author": {"login": "codeclimate"}, "path": "http-server/src/main/java/org/triplea/server/web/socket/GameConnectionWebSocket.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.triplea.server.web.socket;\n+\n+import javax.websocket.CloseReason;\n+import javax.websocket.OnClose;\n+import javax.websocket.OnError;\n+import javax.websocket.OnOpen;\n+import javax.websocket.Session;\n+import javax.websocket.server.ServerEndpoint;\n+import org.triplea.http.client.web.socket.WebsocketPaths;\n+import org.triplea.server.remote.actions.RemoteActionsEventQueue;\n+\n+@ServerEndpoint(WebsocketPaths.GAME_CONNECTIONS)\n+public class GameConnectionWebSocket {\n+\n+  public static final String REMOTE_ACTIONS_QUEUE_KEY = \"remote.actions.event.queue\";\n+\n+  @OnOpen\n+  public void open(final Session session) {\n+    ((RemoteActionsEventQueue) session.getUserProperties().get(REMOTE_ACTIONS_QUEUE_KEY))\n+        .addSession(session);\n+  }\n+\n+  @OnClose\n+  public void onClose(final Session session, final CloseReason closeReason) {\n+    ((RemoteActionsEventQueue) session.getUserProperties().get(REMOTE_ACTIONS_QUEUE_KEY))\n+        .removeSession(session);\n+  }\n+\n+  /**\n+   * This error handler is called automatically when server processing encounters an uncaught\n+   * exception. We use it to notify the user that an error occurred.\n+   */\n+  @OnError\n+  public void handleError(final Session session, final Throwable throwable) {\n+    // TODO: Project#12 implement error notification", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f75833acc0e946339c72cc2132f031a093ba255a"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2356, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}