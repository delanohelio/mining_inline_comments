{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1OTU4OTU5", "number": 7497, "title": "Convert sub steps", "bodyText": "This converts the sub battle steps into the step classes.\nOne thing I don't like about this is that the new step classes require additional parameters (order and returnFire).  Both of them are required because of how the sub steps are determined.  They are determined at the beginning of the round with the initial BattleState.  By the time the steps will actually run, the BattleState may be different enough to cause the step to act differently.  An example of this is a battle where the sub is joined with a unit that can target a destroyer during the aa round and is attacking a group of units that include a destroyer.  At the start of the round, the presence of the destroyer affects when the sub will fire (if it is a defensive sub) and affects its returnFire.  If the destroyer is destroyed by the aa gun, then when the sub step executes, the destroyer is no longer present and so the order and the returnFire will be different.\nThe dead units are kept around in the killedDuringCurrentRound class member of MustFightBattle but it doesn't split the units between offensive and defensive units.  So I would need to figure out if the destroyer is on the opposing side or not and I couldn`t find any obvious code that would do that for me.\nAt some point, I'd like to make a change to how the battle steps are shown in the UI and how sub casualties are removed.  If the battle steps in the UI could be updated during the round, and if the sub casualties are moved to a dedicated step instead of tracked by the returnFire variable, I think I can make it work without these two variables.\nTesting\n\nI loaded saves that include beginning of sub battles and in the middle of sub battles.  I discovered a save compatibility issue that is affecting master as well (see the returnFireAgainstAttackingSubs and returnFireAgainstDefendingSubs variables).\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-08-30T20:23:06Z", "url": "https://github.com/triplea-game/triplea/pull/7497", "merged": true, "mergeCommit": {"oid": "d9c14c5f17178b1c853fb8c3014eee4781424467"}, "closed": true, "closedAt": "2020-09-06T19:13:16Z", "author": {"login": "trevan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEEaMnAFqTQ3ODIzMjIwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGBK3KgFqTQ4MzA5NzEyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjMyMjA0", "url": "https://github.com/triplea-game/triplea/pull/7497#pullrequestreview-478232204", "createdAt": "2020-08-30T20:34:01Z", "commit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDozNDowMVrOHJlcOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDo0MDoxM1rOHJlecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjY2Nw==", "bodyText": "Have you considered using Lombok @AllArgsConstructor to replace this constructor? The annotation should do the same thing.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479812667", "createdAt": "2020-08-30T20:34:01Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/firststrike/DefensiveFirstStrike.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.firststrike;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.FIRST_STRIKE_UNITS_FIRE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SELECT_FIRST_STRIKE_CASUALTIES;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.MustFightBattle.ReturnFire;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class DefensiveFirstStrike implements BattleStep {\n+\n+  private static final long serialVersionUID = 3646211932844911163L;\n+\n+  protected final BattleState battleState;\n+\n+  protected final BattleActions battleActions;\n+\n+  protected final FirstStrikeStepOrder order;\n+\n+  protected final ReturnFire returnFire;\n+\n+  public DefensiveFirstStrike(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjc1Ng==", "bodyText": "How is FIRST_STRIKE_DEFENSIVE different from FIRST_STRIKE_DEFENSIVE_NO_SNEAK_ATTACK? Perhaps a comment on the enum value would be useful here to describe the intent behind the distinction.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479812756", "createdAt": "2020-08-30T20:35:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -28,7 +28,11 @@\n     SUB_OFFENSIVE_RETREAT_BEFORE_BATTLE,\n     SUB_DEFENSIVE_RETREAT_BEFORE_BATTLE,\n     SUBMERGE_SUBS_VS_ONLY_AIR,\n+    FIRST_STRIKE_DEFENSIVE_SNEAK_ATTACK,\n+    FIRST_STRIKE_OFFENSIVE,\n+    FIRST_STRIKE_DEFENSIVE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjg3Nw==", "bodyText": "Seeing the same parameter twice is a bit difficult to grok. Have you considered using a builder for this constructor? In that case the parameters would be named and then more self-documenting.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479812877", "createdAt": "2020-08-30T20:35:58Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1534,15 +1544,20 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n           }\n         });\n     if (firstStrikeOrder.getDefender() == FirstStrikeStepOrder.DEFENDER_NO_SNEAK_ATTACK) {\n-      steps.add(\n-          new FirstStrikeDefendersFire() {\n-            private static final long serialVersionUID = 999921L;\n+      steps.add(defensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 999921L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(firstStrikeOrder.getDefender().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new DefensiveFirstStrike(\n+                  MustFightBattle.this,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjkxMw==", "bodyText": "I'm not sure this comment makes sense, what is \"this point\" relative to? Secondly, the ordering of what exactly, the step order?", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479812913", "createdAt": "2020-08-30T20:36:39Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1479,40 +1472,57 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n     };\n \n     if (firstStrikeOrder.getDefender() == FirstStrikeStepOrder.DEFENDER_SNEAK_ATTACK) {\n-      steps.add(\n-          new FirstStrikeDefendersFire() {\n-            private static final long serialVersionUID = 99992L;\n+      steps.add(defensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 99992L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(firstStrikeOrder.getDefender().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new DefensiveFirstStrike(\n+                  MustFightBattle.this,\n+                  MustFightBattle.this,\n+                  FirstStrikeStepOrder.DEFENDER_SNEAK_ATTACK,\n+                  returnFireAgainstDefendingSubs)\n+              .execute(stack, bridge);\n+        }\n+      };\n     }\n     if (firstStrikeOrder.getAttacker() != FirstStrikeStepOrder.NOT_APPLICABLE) {\n-      steps.add(\n-          new FirstStrikeAttackersFire() {\n-            private static final long serialVersionUID = 99991L;\n+      steps.add(offensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 99991L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeAttackersFire(firstStrikeOrder.getAttacker().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new OffensiveFirstStrike(\n+                  MustFightBattle.this,\n+                  MustFightBattle.this,\n+                  // the order doesn't matter at this point\n+                  FirstStrikeStepOrder.OFFENDER_SNEAK_ATTACK,\n+                  returnFireAgainstAttackingSubs)\n+              .execute(stack, bridge);\n+        }\n+      };\n     }\n     if (firstStrikeOrder.getDefender()\n             == FirstStrikeStepOrder.DEFENDER_SNEAK_ATTACK_WITH_OPPOSING_FIRST_STRIKE\n         || firstStrikeOrder.getDefender()\n             == FirstStrikeStepOrder.DEFENDER_NO_SNEAK_ATTACK_BUT_BEFORE_STANDARD_ATTACK) {\n-      steps.add(\n-          new FirstStrikeDefendersFire() {\n-            private static final long serialVersionUID = 99992L;\n+      steps.add(defensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 99992L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(firstStrikeOrder.getDefender().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new DefensiveFirstStrike(\n+                  MustFightBattle.this,\n+                  MustFightBattle.this,\n+                  // The order doesn't matter at this point", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjk1OQ==", "bodyText": "Alternatively, have you considered perhaps having a second constructor that is simplified, or using static builder methods (factory pattern)?", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479812959", "createdAt": "2020-08-30T20:37:15Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1534,15 +1544,20 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n           }\n         });\n     if (firstStrikeOrder.getDefender() == FirstStrikeStepOrder.DEFENDER_NO_SNEAK_ATTACK) {\n-      steps.add(\n-          new FirstStrikeDefendersFire() {\n-            private static final long serialVersionUID = 999921L;\n+      steps.add(defensiveFirstStrike);\n+      new IExecutable() {\n+        private static final long serialVersionUID = 999921L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(firstStrikeOrder.getDefender().getReturnFire());\n-            }\n-          });\n+        @Override\n+        public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+          new DefensiveFirstStrike(\n+                  MustFightBattle.this,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjg3Nw=="}, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMzIzNA==", "bodyText": "Is this  'lenient' 'doNothing' expectation required?", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r479813234", "createdAt": "2020-08-30T20:40:13Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MustFightBattleExecutablesTest.java", "diffHunk": "@@ -446,8 +451,19 @@ private MustFightBattle givenFirstStrikeBattleSetup(\n       final boolean ww2v2,\n       final boolean defendingSubsSneakAttack) {\n     final MustFightBattle battle = spy(newBattle(WATER));\n-    lenient().doNothing().when(battle).firstStrikeAttackersFire(any());\n-    lenient().doNothing().when(battle).firstStrikeDefendersFire(any());\n+    lenient()\n+        .doNothing()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5084a75a465ece1917a37770efbcc5b1f36f23"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4e6ac5cf1cb8fd84a7ef8c595a66da2530c178e", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/b4e6ac5cf1cb8fd84a7ef8c595a66da2530c178e", "committedDate": "2020-09-01T22:14:30Z", "message": "Convert sub steps and add a sub casualty step to replace ReturnFire"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f23bd0c2b3c9a1970cdd0dd67138dc3393b055aa", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/f23bd0c2b3c9a1970cdd0dd67138dc3393b055aa", "committedDate": "2020-08-30T21:59:59Z", "message": "Use FirstStrike getOrder and clean up some code"}, "afterCommit": {"oid": "b4e6ac5cf1cb8fd84a7ef8c595a66da2530c178e", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/b4e6ac5cf1cb8fd84a7ef8c595a66da2530c178e", "committedDate": "2020-09-01T22:14:30Z", "message": "Convert sub steps and add a sub casualty step to replace ReturnFire"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2624bb7d15c30044d91bc21864d6fa35b2726cc0", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/2624bb7d15c30044d91bc21864d6fa35b2726cc0", "committedDate": "2020-09-01T23:26:59Z", "message": "Reduce complexity of methods by introducing an enumset for the sides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "833f178aada0fd23ab6031ac879dca8aba55503c", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/833f178aada0fd23ab6031ac879dca8aba55503c", "committedDate": "2020-09-01T23:38:11Z", "message": "size() > 0 -> isEmpty()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTkwNTMz", "url": "https://github.com/triplea-game/triplea/pull/7497#pullrequestreview-480190533", "createdAt": "2020-09-01T23:49:03Z", "commit": {"oid": "833f178aada0fd23ab6031ac879dca8aba55503c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzo0OTowM1rOHLMCDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzo1NDozNlrOHLMIDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5MzUxNw==", "bodyText": "This was added to reduce code complexity.  I'm not exactly sure if this is the best name for it or if it should stay.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r481493517", "createdAt": "2020-09-01T23:49:03Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleState.java", "diffHunk": "@@ -5,10 +5,16 @@\n import games.strategy.engine.data.Territory;\n import games.strategy.engine.data.Unit;\n import java.util.Collection;\n+import java.util.EnumSet;\n \n /** Exposes the battle state and allows updates to it */\n public interface BattleState {\n \n+  enum Side {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833f178aada0fd23ab6031ac879dca8aba55503c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5NDQ2OQ==", "bodyText": "All of these tests are replaced with the tests in the three FirstStrike step classes.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r481494469", "createdAt": "2020-09-01T23:52:28Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MustFightBattleExecutablesTest.java", "diffHunk": "@@ -499,47 +495,6 @@ private void assertThatFirstStrikeStepOrder(\n     assertThat(indices.get(stepOrder.get(1)), lessThan(indices.get(stepOrder.get(2))));\n   }\n \n-  private void assertThatFirstStrikeReturnFireIs(\n-      final MustFightBattle battle,\n-      final MustFightBattle.ReturnFire returnFire,\n-      final boolean attacker) {\n-    final List<IExecutable> execs = battle.getBattleExecutables();\n-    final int index =\n-        getIndex(\n-            execs,\n-            attacker\n-                ? MustFightBattle.FirstStrikeAttackersFire.class\n-                : MustFightBattle.FirstStrikeDefendersFire.class);\n-    final IExecutable step = execs.get(index);\n-\n-    final IDelegateBridge delegateBridge = mock(IDelegateBridge.class);\n-    step.execute(null, delegateBridge);\n-\n-    if (attacker) {\n-      verify(battle).firstStrikeAttackersFire(returnFire);\n-    } else {\n-      verify(battle).firstStrikeDefendersFire(returnFire);\n-    }\n-  }\n-\n-  @Test\n-  @DisplayName(\n-      \"When attacker has a destroyer, defender has a destroyer, WW2v2 is true, \"\n-          + \"and DEFENDING_SUBS_SNEAK_ATTACK is either, then attacker has return fire all\")\n-  void firstStrikeAttackerReturnFireAttHasDestroyerDefHasDestroyerWW2v2TrueSneakAttackTrueFalse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833f178aada0fd23ab6031ac879dca8aba55503c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5NTA1Mg==", "bodyText": "Because of the change in how the sub steps are figured out, these mocks are being called sometimes when they aren't needed.  But to work around that would require making the test methods more complicated.  I felt adding lenient() to it was ok.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r481495052", "createdAt": "2020-09-01T23:54:36Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/BattleStepsTest.java", "diffHunk": "@@ -122,8 +123,8 @@ public static UnitAndAttachment newUnitAndAttachment() {\n     final Unit unit = mock(Unit.class);\n     final UnitType unitType = mock(UnitType.class);\n     final UnitAttachment unitAttachment = mock(UnitAttachment.class);\n-    when(unit.getType()).thenReturn(unitType);\n-    when(unitType.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment);\n+    lenient().when(unit.getType()).thenReturn(unitType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833f178aada0fd23ab6031ac879dca8aba55503c"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b223491a065aa3301abaca0d9467e7b5b6d7a451", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/b223491a065aa3301abaca0d9467e7b5b6d7a451", "committedDate": "2020-09-02T14:24:56Z", "message": "Fix transient initializing after loading saved game"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10a0e28f286eb84e3315bbcfef6be37fc5ddd1d2", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/10a0e28f286eb84e3315bbcfef6be37fc5ddd1d2", "committedDate": "2020-09-02T14:04:23Z", "message": "Fix transient initializing after loading saved game"}, "afterCommit": {"oid": "b223491a065aa3301abaca0d9467e7b5b6d7a451", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/b223491a065aa3301abaca0d9467e7b5b6d7a451", "committedDate": "2020-09-02T14:24:56Z", "message": "Fix transient initializing after loading saved game"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDk3MTI5", "url": "https://github.com/triplea-game/triplea/pull/7497#pullrequestreview-483097129", "createdAt": "2020-09-05T21:54:02Z", "commit": {"oid": "b223491a065aa3301abaca0d9467e7b5b6d7a451"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMTo1NDowM1rOHNkmwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMjowMTozOVrOHNko8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk5MzI4MA==", "bodyText": "What would you think of having the caller apply the predicate rather than having that be part of the API? There might be some redundancy but there would be a lot more clarity at the point of the caller of exactly what is being computed (ie: which units are involved).", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r483993280", "createdAt": "2020-09-05T21:54:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -35,4 +38,27 @@ void landParatroopers(\n   void endBattle(IDelegateBridge bridge);\n \n   void attackerWins(IDelegateBridge bridge);\n+\n+  void findTargetGroupsAndFire(\n+      ReturnFire returnFire,\n+      String stepName,\n+      boolean defending,\n+      GamePlayer firingPlayer,\n+      Predicate<Unit> firingUnitPredicate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b223491a065aa3301abaca0d9467e7b5b6d7a451"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk5MzM4Mg==", "bodyText": "Any thoughts if removeUnits might be a more clear name for this method?", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r483993382", "createdAt": "2020-09-05T21:55:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -35,4 +38,27 @@ void landParatroopers(\n   void endBattle(IDelegateBridge bridge);\n \n   void attackerWins(IDelegateBridge bridge);\n+\n+  void findTargetGroupsAndFire(\n+      ReturnFire returnFire,\n+      String stepName,\n+      boolean defending,\n+      GamePlayer firingPlayer,\n+      Predicate<Unit> firingUnitPredicate,\n+      Collection<Unit> firingUnits,\n+      Collection<Unit> firingUnitsWaitingToDie,\n+      Collection<Unit> enemyUnits,\n+      Collection<Unit> enemyUnitsWaitingToDie);\n+\n+  void remove(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b223491a065aa3301abaca0d9467e7b5b6d7a451"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk5MzY3MA==", "bodyText": "Can this be converted by the caller to a boolean easily enough? I wonder if we are making this API do too much work.\nSecond, the API seems a bit coupled to a much broader interface than it really needs. What would you think if the IDelegateBridge were converted to functional interfaces? This way the caller would control which parts of the bridge is used.\nFor example, the history writer part could be converted to a Biconsumer in the API.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r483993670", "createdAt": "2020-09-05T21:59:30Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -35,4 +38,27 @@ void landParatroopers(\n   void endBattle(IDelegateBridge bridge);\n \n   void attackerWins(IDelegateBridge bridge);\n+\n+  void findTargetGroupsAndFire(\n+      ReturnFire returnFire,\n+      String stepName,\n+      boolean defending,\n+      GamePlayer firingPlayer,\n+      Predicate<Unit> firingUnitPredicate,\n+      Collection<Unit> firingUnits,\n+      Collection<Unit> firingUnitsWaitingToDie,\n+      Collection<Unit> enemyUnits,\n+      Collection<Unit> enemyUnitsWaitingToDie);\n+\n+  void remove(\n+      Collection<Unit> killedUnits,\n+      IDelegateBridge bridge,\n+      Territory battleSite,\n+      Boolean defenderDying);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b223491a065aa3301abaca0d9467e7b5b6d7a451"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk5Mzg0Mw==", "bodyText": "We're baking in an in/out parameter here and this value is modified.\nWhat would you think if we returned instead the collection of transformed units? That would imply that the caller would be the one doing the IDelagetBridge work.", "url": "https://github.com/triplea-game/triplea/pull/7497#discussion_r483993843", "createdAt": "2020-09-05T22:01:39Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -35,4 +38,27 @@ void landParatroopers(\n   void endBattle(IDelegateBridge bridge);\n \n   void attackerWins(IDelegateBridge bridge);\n+\n+  void findTargetGroupsAndFire(\n+      ReturnFire returnFire,\n+      String stepName,\n+      boolean defending,\n+      GamePlayer firingPlayer,\n+      Predicate<Unit> firingUnitPredicate,\n+      Collection<Unit> firingUnits,\n+      Collection<Unit> firingUnitsWaitingToDie,\n+      Collection<Unit> enemyUnits,\n+      Collection<Unit> enemyUnitsWaitingToDie);\n+\n+  void remove(\n+      Collection<Unit> killedUnits,\n+      IDelegateBridge bridge,\n+      Territory battleSite,\n+      Boolean defenderDying);\n+\n+  void damagedChangeInto(\n+      GamePlayer player,\n+      Collection<Unit> units,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b223491a065aa3301abaca0d9467e7b5b6d7a451"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3969, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}