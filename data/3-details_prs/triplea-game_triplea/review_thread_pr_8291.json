{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MzcyMzM5", "number": 8291, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNToyMDowOFrOE-CAqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTozMToyMVrOE-CN2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDgwMTA2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNToyMDowOFrOH7B1vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjozMjozM1rOH7DyTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1ODE3Mg==", "bodyText": "Would you mind updating the documentation that 'aaUnits' must have at least one element in it?", "url": "https://github.com/triplea-game/triplea/pull/8291#discussion_r531658172", "createdAt": "2020-11-27T15:20:08Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -110,74 +110,26 @@ public static DiceRoll rollAa(\n       final Territory location,\n       final CombatValue combatValueCalculator) {\n \n-    final GameData data = bridge.getData();\n+    final String typeAa = UnitAttachment.get(aaUnits.iterator().next().getType()).getTypeAa();\n+    final GamePlayer player = aaUnits.iterator().next().getOwner();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66aafff96a5583d986ff197b0065c92a036f4d7a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2NjEzNQ==", "bodyText": "Side-note, perhaps worth doing here as we've re-written the entire method almost, most of the javadocs on the method are not very valuable.\nEG:\n\n\" aaUnits - AA units that could potentially be rolling\" < does not really add much information.\n\"@param location - battle territory\" < seems like the parameter should just be renamed\n\"* @param bridge - delegate bridge\" < ditto, parameter could just be renamed.", "url": "https://github.com/triplea-game/triplea/pull/8291#discussion_r531666135", "createdAt": "2020-11-27T15:37:11Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -110,74 +110,26 @@ public static DiceRoll rollAa(\n       final Territory location,\n       final CombatValue combatValueCalculator) {\n \n-    final GameData data = bridge.getData();\n+    final String typeAa = UnitAttachment.get(aaUnits.iterator().next().getType()).getTypeAa();\n+    final GamePlayer player = aaUnits.iterator().next().getOwner();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1ODE3Mg=="}, "originalCommit": {"oid": "66aafff96a5583d986ff197b0065c92a036f4d7a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY5MDA2MA==", "bodyText": "I've updated the documentation.  The requirement that 'aaUnits' have at least on element isn't new after this refactor.  It has always been a requirement.  In a future PR, I plan to rework the parameters to this method so that requirement is no longer needed.", "url": "https://github.com/triplea-game/triplea/pull/8291#discussion_r531690060", "createdAt": "2020-11-27T16:32:33Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -110,74 +110,26 @@ public static DiceRoll rollAa(\n       final Territory location,\n       final CombatValue combatValueCalculator) {\n \n-    final GameData data = bridge.getData();\n+    final String typeAa = UnitAttachment.get(aaUnits.iterator().next().getType()).getTypeAa();\n+    final GamePlayer player = aaUnits.iterator().next().getOwner();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1ODE3Mg=="}, "originalCommit": {"oid": "66aafff96a5583d986ff197b0065c92a036f4d7a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDgyNDU5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/TotalPowerAndTotalRolls.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNToyNzo1NFrOH7CDyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzo0NDoxNFrOH7FSMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MTc3MQ==", "bodyText": "Side-note, this interface I think has lost its cohesion, it is more than total power and total rolls. It's also odds as TotalPowerAndTotalRolls would seem to be the name for a value object rather than an interface. This is something that if we can would be good t come back and rename. I almost think this would be an even better interface for a 'unitGroup', or have that just be a class and get rid of the sub-classing altogether and have the unitGroup use this for an API that would 'just do the right thing'.", "url": "https://github.com/triplea-game/triplea/pull/8291#discussion_r531661771", "createdAt": "2020-11-27T15:27:54Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/TotalPowerAndTotalRolls.java", "diffHunk": "@@ -13,6 +13,8 @@\n \n   List<Die> getDiceHits(int[] dice);\n \n+  int getDiceSides();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66aafff96a5583d986ff197b0065c92a036f4d7a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY5MjQwNQ==", "bodyText": "This interface and UnitPowerStrengthAndRolls are two things I'm thinking of renaming/reworking for the casualty selection and support calculation.  I'm thinking of turning UnitPowerStrengthAndRolls (with a better name) into a delegate of Unit.  Then instead of passing around Units and calling TotalPowerAndTotalRolls to generate the UnitPowerStrengthAndRolls objects, the battle logic will first wrap all of the units in a UnitPowerStrengthAndRolls delegate and then those will be passed around.\nI'm also planning on moving the dice calculation methods to DiceRoll.  The only reason they are on TotalPowerAndTotalRolls is legacy now.", "url": "https://github.com/triplea-game/triplea/pull/8291#discussion_r531692405", "createdAt": "2020-11-27T16:38:59Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/TotalPowerAndTotalRolls.java", "diffHunk": "@@ -13,6 +13,8 @@\n \n   List<Die> getDiceHits(int[] dice);\n \n+  int getDiceSides();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MTc3MQ=="}, "originalCommit": {"oid": "66aafff96a5583d986ff197b0065c92a036f4d7a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxNDYwOA==", "bodyText": "Cool. One note here, DiceRoll seems like it ought to be a value object, the number and types of methods on it do not seem appropriate. Something for you to consider, seemingly there should be of a strategy object that is more part of battles for determining roll results.", "url": "https://github.com/triplea-game/triplea/pull/8291#discussion_r531714608", "createdAt": "2020-11-27T17:44:14Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/TotalPowerAndTotalRolls.java", "diffHunk": "@@ -13,6 +13,8 @@\n \n   List<Die> getDiceHits(int[] dice);\n \n+  int getDiceSides();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MTc3MQ=="}, "originalCommit": {"oid": "66aafff96a5583d986ff197b0065c92a036f4d7a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDgzMDI3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNToyOTo0OVrOH7CHNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNToyOTo0OVrOH7CHNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MjY0NQ==", "bodyText": "unitPowerAndRollsMap is an unexpected name for this parameter as the type is not a map. Any objections to renaming it?", "url": "https://github.com/triplea-game/triplea/pull/8291#discussion_r531662645", "createdAt": "2020-11-27T15:29:49Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -219,37 +171,40 @@ public static DiceRoll rollDice(\n       final String annotation,\n       final CombatValue combatValueCalculator) {\n \n+    final DiceRoll diceRoll;\n+    final PowerStrengthAndRolls unitPowerAndRollsMap =\n+        PowerStrengthAndRolls.build(units, combatValueCalculator);\n     if (Properties.getLowLuck(bridge.getData().getProperties())) {\n-      return rollDiceLowLuck(units, player, bridge, annotation, combatValueCalculator);\n+      diceRoll = rollDiceLowLuck(unitPowerAndRollsMap, player, bridge, annotation);\n+    } else {\n+      diceRoll = rollDiceNormal(unitPowerAndRollsMap, player, bridge, annotation);\n     }\n-    return rollDiceNormal(units, player, bridge, annotation, combatValueCalculator);\n+\n+    bridge\n+        .getHistoryWriter()\n+        .addChildToEvent(annotation + \" : \" + MyFormatter.asDice(diceRoll), diceRoll);\n+    return diceRoll;\n   }\n \n   /** Roll dice for units using low luck rules. */\n   private static DiceRoll rollDiceLowLuck(\n-      final Collection<Unit> unitsList,\n+      final TotalPowerAndTotalRolls unitPowerAndRollsMap,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66aafff96a5583d986ff197b0065c92a036f4d7a"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDgzNDgxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTozMToyMVrOH7CKBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjozNDoxMlrOH7D0dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MzM2NA==", "bodyText": "It seems like 'hitCount' should be part of the 'totalPowerAndRolls' interface. Getting data from an object and then using that data to compute a value, as is the case here, appears to be a 'feature-envy' code-smell.\nIt might be possible that if the API is getHitCount, then we won't need the getDiceSides method and the dice sides would instead turn into a constructor arg for implementations of totalPowerAndRolls", "url": "https://github.com/triplea-game/triplea/pull/8291#discussion_r531663364", "createdAt": "2020-11-27T15:31:21Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -219,37 +171,40 @@ public static DiceRoll rollDice(\n       final String annotation,\n       final CombatValue combatValueCalculator) {\n \n+    final DiceRoll diceRoll;\n+    final PowerStrengthAndRolls unitPowerAndRollsMap =\n+        PowerStrengthAndRolls.build(units, combatValueCalculator);\n     if (Properties.getLowLuck(bridge.getData().getProperties())) {\n-      return rollDiceLowLuck(units, player, bridge, annotation, combatValueCalculator);\n+      diceRoll = rollDiceLowLuck(unitPowerAndRollsMap, player, bridge, annotation);\n+    } else {\n+      diceRoll = rollDiceNormal(unitPowerAndRollsMap, player, bridge, annotation);\n     }\n-    return rollDiceNormal(units, player, bridge, annotation, combatValueCalculator);\n+\n+    bridge\n+        .getHistoryWriter()\n+        .addChildToEvent(annotation + \" : \" + MyFormatter.asDice(diceRoll), diceRoll);\n+    return diceRoll;\n   }\n \n   /** Roll dice for units using low luck rules. */\n   private static DiceRoll rollDiceLowLuck(\n-      final Collection<Unit> unitsList,\n+      final TotalPowerAndTotalRolls unitPowerAndRollsMap,\n       final GamePlayer player,\n       final IDelegateBridge bridge,\n-      final String annotation,\n-      final CombatValue combatValueCalculator) {\n-\n-    final GameData data = bridge.getData();\n+      final String annotation) {\n \n-    final int power =\n-        PowerStrengthAndRolls.build(unitsList, combatValueCalculator).calculateTotalPower();\n+    final int power = unitPowerAndRollsMap.calculateTotalPower();\n     if (power == 0) {\n       return new DiceRoll(List.of(), 0, 0);\n     }\n \n     // Roll dice for the fractional part of the dice\n-    int hitCount = power / data.getDiceSides();\n+    final int diceSides = unitPowerAndRollsMap.getDiceSides();\n+    int hitCount = power / diceSides;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66aafff96a5583d986ff197b0065c92a036f4d7a"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY5MDYxNQ==", "bodyText": "In a future PR, I'm going to be reworking this so that it correctly handles units with different dice sides.  At that point, getDiceSides should no longer be needed.  I don't think a getHitCount method will fit in that rework but I'll look into it when I work on the PR.", "url": "https://github.com/triplea-game/triplea/pull/8291#discussion_r531690615", "createdAt": "2020-11-27T16:34:12Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -219,37 +171,40 @@ public static DiceRoll rollDice(\n       final String annotation,\n       final CombatValue combatValueCalculator) {\n \n+    final DiceRoll diceRoll;\n+    final PowerStrengthAndRolls unitPowerAndRollsMap =\n+        PowerStrengthAndRolls.build(units, combatValueCalculator);\n     if (Properties.getLowLuck(bridge.getData().getProperties())) {\n-      return rollDiceLowLuck(units, player, bridge, annotation, combatValueCalculator);\n+      diceRoll = rollDiceLowLuck(unitPowerAndRollsMap, player, bridge, annotation);\n+    } else {\n+      diceRoll = rollDiceNormal(unitPowerAndRollsMap, player, bridge, annotation);\n     }\n-    return rollDiceNormal(units, player, bridge, annotation, combatValueCalculator);\n+\n+    bridge\n+        .getHistoryWriter()\n+        .addChildToEvent(annotation + \" : \" + MyFormatter.asDice(diceRoll), diceRoll);\n+    return diceRoll;\n   }\n \n   /** Roll dice for units using low luck rules. */\n   private static DiceRoll rollDiceLowLuck(\n-      final Collection<Unit> unitsList,\n+      final TotalPowerAndTotalRolls unitPowerAndRollsMap,\n       final GamePlayer player,\n       final IDelegateBridge bridge,\n-      final String annotation,\n-      final CombatValue combatValueCalculator) {\n-\n-    final GameData data = bridge.getData();\n+      final String annotation) {\n \n-    final int power =\n-        PowerStrengthAndRolls.build(unitsList, combatValueCalculator).calculateTotalPower();\n+    final int power = unitPowerAndRollsMap.calculateTotalPower();\n     if (power == 0) {\n       return new DiceRoll(List.of(), 0, 0);\n     }\n \n     // Roll dice for the fractional part of the dice\n-    int hitCount = power / data.getDiceSides();\n+    final int diceSides = unitPowerAndRollsMap.getDiceSides();\n+    int hitCount = power / diceSides;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MzM2NA=="}, "originalCommit": {"oid": "66aafff96a5583d986ff197b0065c92a036f4d7a"}, "originalPosition": 147}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2608, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}