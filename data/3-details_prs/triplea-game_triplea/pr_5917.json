{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNzY2MjE2", "number": 5917, "title": "JavaFX local game launcher", "bodyText": "Starting a local Game works now from the JavaFX client.\nThe main reason this PR is \"draft\" is that I'd like to get some developer (and also community about the visuals) feedback before I try polishing everything.\nFunctional Changes\n\n[] New map or map update\n[x] New Feature\n[] Feature update or enhancement\n[] Feature Removal\n[] Code Cleanup or refactor\n[] Configuration Change\n[] Problem fix:  \n[] Other:   \nTesting\n\n[x] Manual testing done\n\n\nScreens Shots", "createdAt": "2020-02-08T22:40:44Z", "url": "https://github.com/triplea-game/triplea/pull/5917", "merged": true, "mergeCommit": {"oid": "fb48fffc225ff2dbb99a1eb2b44560e49d8d48f1"}, "closed": true, "closedAt": "2020-03-03T02:38:57Z", "author": {"login": "RoiEXLab"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCb5R-AFqTM1NTU3MjkyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIi6u4AH2gAyMzcyNzY2MjE2OjViM2FjOGY4MjQ2ZTA0ZDY2YmJhZjExMTY0NTZjOGRjOWM0NDFhYmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTcyOTIx", "url": "https://github.com/triplea-game/triplea/pull/5917#pullrequestreview-355572921", "createdAt": "2020-02-08T22:43:55Z", "commit": {"oid": "4af8afd52c5590b2092e98d39cc1fc3e7a17c206"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQyMjo0Mzo1NVrOFnSVlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQyMjo0Mzo1NlrOFnSVlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjczOTIyMg==", "bodyText": "Method onShow has 45 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r376739222", "createdAt": "2020-02-08T22:43:55Z", "author": {"login": "codeclimate"}, "path": "game-headed/src/main/java/org/triplea/game/client/ui/javafx/screens/RoleSelection.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package org.triplea.game.client.ui.javafx.screens;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.properties.NumberProperty;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.triplea.Constants;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import lombok.extern.java.Log;\n+import org.triplea.game.client.ui.javafx.screen.ControlledScreen;\n+import org.triplea.game.client.ui.javafx.screen.ScreenController;\n+import org.triplea.game.client.ui.javafx.util.FxmlManager;\n+\n+@Log\n+public class RoleSelection implements ControlledScreen<ScreenController<FxmlManager>> {\n+\n+  static final String SELECTED_MAP_KEY = \"selectedMap\";\n+  private static final String DISABLE_TEXT = \"Disable\";\n+\n+  private final Map<GamePlayer, ComboBox<String>> roleForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> incomeForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> pusForPlayers = new HashMap<>();\n+\n+  @FXML private ComboBox<String> allSelectorCheckbox;\n+\n+  @FXML private GridPane factionGrid;\n+\n+  @FXML private VBox root;\n+\n+  @FXML private CheckBox resourceModifierCheckbox;\n+\n+  private ScreenController<FxmlManager> screenController;\n+  private GameData gameData;\n+\n+  @Override\n+  public void connect(final ScreenController<FxmlManager> screenController) {\n+    this.screenController = screenController;\n+  }\n+\n+  @Override\n+  public Node getNode() {\n+    return root;\n+  }\n+\n+  @FXML\n+  void initialize() {\n+    allSelectorCheckbox.getItems().setAll(PlayerType.playerTypes());\n+  }\n+\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af8afd52c5590b2092e98d39cc1fc3e7a17c206"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjczOTIyMw==", "bodyText": "Method startGame has 26 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r376739223", "createdAt": "2020-02-08T22:43:56Z", "author": {"login": "codeclimate"}, "path": "game-headed/src/main/java/org/triplea/game/client/ui/javafx/screens/RoleSelection.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package org.triplea.game.client.ui.javafx.screens;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.properties.NumberProperty;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.triplea.Constants;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import lombok.extern.java.Log;\n+import org.triplea.game.client.ui.javafx.screen.ControlledScreen;\n+import org.triplea.game.client.ui.javafx.screen.ScreenController;\n+import org.triplea.game.client.ui.javafx.util.FxmlManager;\n+\n+@Log\n+public class RoleSelection implements ControlledScreen<ScreenController<FxmlManager>> {\n+\n+  static final String SELECTED_MAP_KEY = \"selectedMap\";\n+  private static final String DISABLE_TEXT = \"Disable\";\n+\n+  private final Map<GamePlayer, ComboBox<String>> roleForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> incomeForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> pusForPlayers = new HashMap<>();\n+\n+  @FXML private ComboBox<String> allSelectorCheckbox;\n+\n+  @FXML private GridPane factionGrid;\n+\n+  @FXML private VBox root;\n+\n+  @FXML private CheckBox resourceModifierCheckbox;\n+\n+  private ScreenController<FxmlManager> screenController;\n+  private GameData gameData;\n+\n+  @Override\n+  public void connect(final ScreenController<FxmlManager> screenController) {\n+    this.screenController = screenController;\n+  }\n+\n+  @Override\n+  public Node getNode() {\n+    return root;\n+  }\n+\n+  @FXML\n+  void initialize() {\n+    allSelectorCheckbox.getItems().setAll(PlayerType.playerTypes());\n+  }\n+\n+  @Override\n+  public void onShow(final Map<String, Object> data) {\n+    roleForPlayers.clear();\n+    factionGrid\n+        .getChildren()\n+        .removeIf(\n+            node -> {\n+              final Integer row = GridPane.getRowIndex(node);\n+              return row != null && row > 0;\n+            });\n+    gameData =\n+        (GameData)\n+            Optional.ofNullable(data.get(SELECTED_MAP_KEY))\n+                .orElseThrow(\n+                    () -> new IllegalStateException(\"Missing GameData when calling screen\"));\n+    final List<String> availablePlayers = List.of(PlayerType.playerTypes());\n+    for (final GamePlayer playerId : gameData.getPlayerList()) {\n+      final var name = new Label(playerId.getName());\n+      final ComboBox<String> controllingPlayer =\n+          new ComboBox<>(FXCollections.observableArrayList(availablePlayers));\n+      controllingPlayer.getSelectionModel().select(0);\n+      if (playerId.getCanBeDisabled()) {\n+        controllingPlayer.getItems().add(DISABLE_TEXT);\n+      }\n+      roleForPlayers.put(playerId, controllingPlayer);\n+      final Collection<String> playerAlliances =\n+          gameData.getAllianceTracker().getAlliancesPlayerIsIn(playerId);\n+      final var faction = new Button(playerAlliances.toString());\n+      faction.setOnAction(\n+          e -> {\n+            final int targetIndex = controllingPlayer.getSelectionModel().getSelectedIndex();\n+            playerAlliances.stream()\n+                .map(gameData.getAllianceTracker()::getPlayersInAlliance)\n+                .flatMap(Collection::stream)\n+                .map(roleForPlayers::get)\n+                .filter(stringComboBox -> stringComboBox.getItems().size() > targetIndex)\n+                .map(ComboBox::getSelectionModel)\n+                .forEach(selectionModel -> selectionModel.select(targetIndex));\n+          });\n+      final var income = new Spinner<Integer>(0, 100, 100);\n+      income.setDisable(true);\n+      incomeForPlayers.put(playerId, income);\n+      final var pus = new Spinner<Integer>(0, 100, 0);\n+      pus.setDisable(true);\n+      pusForPlayers.put(playerId, pus);\n+      factionGrid.addRow(factionGrid.getRowCount(), name, controllingPlayer, faction, income, pus);\n+    }\n+  }\n+\n+  @Override\n+  public Map<String, Class<?>> getValidTypes() {\n+    return Map.of(SELECTED_MAP_KEY, GameData.class);\n+  }\n+\n+  @FXML\n+  void setAllTo() {\n+    factionGrid.getChildren().stream()\n+        .filter(ComboBox.class::isInstance)\n+        .map(node -> (ComboBox<?>) node)\n+        .forEach(\n+            comboBox ->\n+                comboBox\n+                    .getSelectionModel()\n+                    .select(allSelectorCheckbox.getSelectionModel().getSelectedIndex()));\n+  }\n+\n+  @FXML\n+  void cancelMapSelection() {\n+    screenController.switchScreen(FxmlManager.MAP_SELECTION);\n+  }\n+\n+  @FXML", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af8afd52c5590b2092e98d39cc1fc3e7a17c206"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NzE4MjE4", "url": "https://github.com/triplea-game/triplea/pull/5917#pullrequestreview-358718218", "createdAt": "2020-02-14T05:23:50Z", "commit": {"oid": "27d180461997e4405320155024a17ce38b99f36b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNToyMzo1MFrOFpr6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxOTozNzowMVrOFqQS6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI1NTQwMg==", "bodyText": "How do we know that GameParseException implies a missing file here? Would it be more clear if the exception perhaps be GameFileMissing or something else?\nSecond, do we need the checked exception (GameParseException is checked right?), what's the purpose behind it?\nSide-note, I'm thinking we may want to remove the exception name from the user display message and only show the exception message. I'm getting to be very skeptical about the \"best-practice\" of throwing custom exceptions and avoiding built-in's , particularly Runtime (eg: https://stackify.com/java-custom-exceptions/).", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379255402", "createdAt": "2020-02-14T05:23:50Z", "author": {"login": "DanVanAtta"}, "path": "game-headed/src/main/java/org/triplea/game/client/parser/DefaultGameLoader.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.triplea.game.client.parser;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GameParseException;\n+import games.strategy.engine.framework.ui.GameChooserEntry;\n+import java.util.function.Consumer;\n+import javafx.concurrent.Service;\n+import javafx.concurrent.Task;\n+\n+public class DefaultGameLoader extends Service<GameData> implements GameLoader {\n+  private GameChooserEntry gameChooserEntry;\n+\n+  @Override\n+  public void loadGame(\n+      final GameChooserEntry gameChooserEntry,\n+      final Consumer<GameData> onLoad,\n+      final Consumer<Throwable> errorHandler) {\n+    this.gameChooserEntry = gameChooserEntry;\n+    reset();\n+    start();\n+    setOnSucceeded(value -> onLoad.accept(getValue()));\n+    setOnFailed(value -> errorHandler.accept(getException()));\n+  }\n+\n+  @Override\n+  protected Task<GameData> createTask() {\n+    return new Task<>() {\n+      @Override\n+      protected GameData call() throws GameParseException {\n+        return gameChooserEntry\n+            .getCompleteGameData()\n+            .orElseThrow(() -> new GameParseException(\"Missing file!\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d180461997e4405320155024a17ce38b99f36b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDY4Nw==", "bodyText": "Is it worthwhile to create constructor over-loads to avoid the null args? We might be able to put more of the construction work in PlayerListing constructor as well to further simplify here.", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379850687", "createdAt": "2020-02-15T19:22:35Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/launcher/LocalLauncher.java", "diffHunk": "@@ -118,4 +123,33 @@ public static LocalLauncher create(\n             null);\n     return new LocalLauncher(gameSelectorModel, new PlainRandomSource(), pl, parent, launchAction);\n   }\n+\n+  public static LocalLauncher create(\n+      final List<Entry<String, String>> roleMapping,\n+      final Predicate<String> isDisabled,\n+      final GameData gameData) {\n+    final Predicate<Entry<String, String>> enabledPredicate =\n+        entry -> !isDisabled.test(entry.getValue());\n+    final PlayerListing playerListing =\n+        new PlayerListing(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d180461997e4405320155024a17ce38b99f36b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc0NQ==", "bodyText": "The parameter coming in seems to be a logical negation - can we sanely change that to isEnabled?\nSecond, Is this lamba a place where we can use the Predicates.not(..)?", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379850745", "createdAt": "2020-02-15T19:23:36Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/launcher/LocalLauncher.java", "diffHunk": "@@ -118,4 +123,33 @@ public static LocalLauncher create(\n             null);\n     return new LocalLauncher(gameSelectorModel, new PlainRandomSource(), pl, parent, launchAction);\n   }\n+\n+  public static LocalLauncher create(\n+      final List<Entry<String, String>> roleMapping,\n+      final Predicate<String> isDisabled,\n+      final GameData gameData) {\n+    final Predicate<Entry<String, String>> enabledPredicate =\n+        entry -> !isDisabled.test(entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d180461997e4405320155024a17ce38b99f36b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDk2OA==", "bodyText": "It looks like we have a decent amount of logic in the FXML class here. I was looking at the function reference \"DISABLE_TEXT::equals\", thinking that was logic in the XML class, but going up further, the startGame method itself has logic. This looks like a place where we are mixing display with back-end logic.\nI think we could have a really good fit for view-model, model-controller pattern here. If we had one class to represent the FXML components, I think we could decouple quite nicely and also make the logic test-able.\nEG:\nroleSelectionViewModel.setResourceModifierSelected(resourceModifierCheckbox.isSelected());\nroleSelectionViewModel.setPlayerRoles(roleForPlayers);\nroleSelectionViewModel.startGame();\n\nHave you considered using a view-model, any thoughts?", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379850968", "createdAt": "2020-02-15T19:27:55Z", "author": {"login": "DanVanAtta"}, "path": "game-headed/src/main/java/org/triplea/game/client/ui/javafx/screens/RoleSelection.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.triplea.game.client.ui.javafx.screens;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.properties.NumberProperty;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.triplea.Constants;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import org.triplea.game.client.ui.javafx.screen.ControlledScreen;\n+import org.triplea.game.client.ui.javafx.screen.ScreenController;\n+import org.triplea.game.client.ui.javafx.util.FxmlManager;\n+\n+public class RoleSelection implements ControlledScreen<ScreenController<FxmlManager>> {\n+\n+  static final String SELECTED_MAP_KEY = \"selectedMap\";\n+  private static final String DISABLE_TEXT = \"Disable\";\n+\n+  private final Map<GamePlayer, ComboBox<String>> roleForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> incomeForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> pusForPlayers = new HashMap<>();\n+\n+  @FXML private ComboBox<String> allSelectorCheckbox;\n+\n+  @FXML private GridPane factionGrid;\n+\n+  @FXML private VBox root;\n+\n+  @FXML private CheckBox resourceModifierCheckbox;\n+\n+  private ScreenController<FxmlManager> screenController;\n+  private GameData gameData;\n+\n+  @Override\n+  public void connect(final ScreenController<FxmlManager> screenController) {\n+    this.screenController = screenController;\n+  }\n+\n+  @Override\n+  public Node getNode() {\n+    return root;\n+  }\n+\n+  @FXML\n+  void initialize() {\n+    allSelectorCheckbox.getItems().setAll(PlayerType.playerTypes());\n+  }\n+\n+  @Override\n+  public void onShow(final Map<String, Object> data) {\n+    roleForPlayers.clear();\n+    factionGrid\n+        .getChildren()\n+        .removeIf(\n+            node -> {\n+              final Integer row = GridPane.getRowIndex(node);\n+              return row != null && row > 0;\n+            });\n+    gameData =\n+        (GameData)\n+            Optional.ofNullable(data.get(SELECTED_MAP_KEY))\n+                .orElseThrow(\n+                    () -> new IllegalStateException(\"Missing GameData when calling screen\"));\n+    final List<String> availablePlayers = List.of(PlayerType.playerTypes());\n+    for (final GamePlayer gamePlayer : gameData.getPlayerList()) {\n+      setupPlayerControl(availablePlayers, gamePlayer);\n+    }\n+  }\n+\n+  private void setupPlayerControl(\n+      final List<String> availablePlayers, final GamePlayer gamePlayer) {\n+    final var name = new Label(gamePlayer.getName());\n+    final ComboBox<String> controllingPlayer =\n+        new ComboBox<>(FXCollections.observableArrayList(availablePlayers));\n+    controllingPlayer.getSelectionModel().select(0);\n+    if (gamePlayer.getCanBeDisabled()) {\n+      controllingPlayer.getItems().add(DISABLE_TEXT);\n+    }\n+    final Button faction = newFactionButton(gamePlayer, controllingPlayer);\n+    roleForPlayers.put(gamePlayer, controllingPlayer);\n+    final var income = new Spinner<Integer>(0, 100, 100);\n+    income.setDisable(true);\n+    incomeForPlayers.put(gamePlayer, income);\n+    final var pus = new Spinner<Integer>(0, 100, 0);\n+    pus.setDisable(true);\n+    pusForPlayers.put(gamePlayer, pus);\n+    factionGrid.addRow(factionGrid.getRowCount(), name, controllingPlayer, faction, income, pus);\n+  }\n+\n+  private Button newFactionButton(\n+      final GamePlayer gamePlayer, final ComboBox<String> controllingPlayer) {\n+    final Collection<String> playerAlliances =\n+        gameData.getAllianceTracker().getAlliancesPlayerIsIn(gamePlayer);\n+    final var faction = new Button(playerAlliances.toString());\n+    faction.setOnAction(\n+        e -> {\n+          final int targetIndex = controllingPlayer.getSelectionModel().getSelectedIndex();\n+          playerAlliances.stream()\n+              .map(gameData.getAllianceTracker()::getPlayersInAlliance)\n+              .flatMap(Collection::stream)\n+              .map(roleForPlayers::get)\n+              .filter(stringComboBox -> stringComboBox.getItems().size() > targetIndex)\n+              .map(ComboBox::getSelectionModel)\n+              .forEach(selectionModel -> selectionModel.select(targetIndex));\n+        });\n+    return faction;\n+  }\n+\n+  @Override\n+  public Map<String, Class<?>> getValidTypes() {\n+    return Map.of(SELECTED_MAP_KEY, GameData.class);\n+  }\n+\n+  @FXML\n+  void setAllTo() {\n+    factionGrid.getChildren().stream()\n+        .filter(ComboBox.class::isInstance)\n+        .map(node -> (ComboBox<?>) node)\n+        .forEach(\n+            comboBox ->\n+                comboBox\n+                    .getSelectionModel()\n+                    .select(allSelectorCheckbox.getSelectionModel().getSelectedIndex()));\n+  }\n+\n+  @FXML\n+  void cancelMapSelection() {\n+    screenController.switchScreen(FxmlManager.MAP_SELECTION);\n+  }\n+\n+  @FXML\n+  void startGame() {\n+    if (resourceModifierCheckbox.isSelected()) {\n+      setupPuIncome();\n+    }\n+    final List<Entry<String, String>> flatMapping =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d180461997e4405320155024a17ce38b99f36b"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTQ5Nw==", "bodyText": "Any idea if xmllint or spotless works on fxml files?\nIf so, any objections to using either?", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379851497", "createdAt": "2020-02-15T19:37:01Z", "author": {"login": "DanVanAtta"}, "path": "game-headed/src/main/resources/org/triplea/game/client/ui/javafx/fxml/RoleSelectionScreen.fxml", "diffHunk": "@@ -0,0 +1,52 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import javafx.geometry.*?>\n+<?import javafx.scene.control.*?>\n+<?import javafx.scene.layout.*?>\n+\n+<VBox fx:id=\"root\" alignment=\"TOP_CENTER\" fillWidth=\"false\" spacing=\"5.0\" xmlns=\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"org.triplea.game.client.ui.javafx.screens.RoleSelection\">\n+   <children>\n+      <HBox alignment=\"CENTER\">\n+         <children>\n+            <Label text=\"Battle Orders\" />\n+         </children>\n+      </HBox>\n+      <ScrollPane>\n+         <content>\n+            <GridPane fx:id=\"factionGrid\" hgap=\"5.0\" vgap=\"5.0\">\n+              <columnConstraints>\n+                <ColumnConstraints hgrow=\"SOMETIMES\" />\n+                <ColumnConstraints hgrow=\"SOMETIMES\" />\n+                  <ColumnConstraints hgrow=\"SOMETIMES\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d180461997e4405320155024a17ce38b99f36b"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27d180461997e4405320155024a17ce38b99f36b", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/27d180461997e4405320155024a17ce38b99f36b", "committedDate": "2020-02-08T23:25:26Z", "message": "Fix remaining issues"}, "afterCommit": {"oid": "76245c738165a5a8742f287d653a5d4bff1ad8c7", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/76245c738165a5a8742f287d653a5d4bff1ad8c7", "committedDate": "2020-02-20T00:33:18Z", "message": "Fix remaining issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTg4NjM2", "url": "https://github.com/triplea-game/triplea/pull/5917#pullrequestreview-361588636", "createdAt": "2020-02-20T02:00:22Z", "commit": {"oid": "ebbc9c1c4b7e6146690485552aef9507cc25a4b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjowMDoyMlrOFr--Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjowMDoyMlrOFr--Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY2NDc3OA==", "bodyText": "TODO: Create a unit test for this check", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r381664778", "createdAt": "2020-02-20T02:00:22Z", "author": {"login": "RoiEXLab"}, "path": "game-headed/src/main/java/org/triplea/game/client/ui/javafx/screen/NavigationPane.java", "diffHunk": "@@ -54,13 +55,31 @@ public void switchScreen(final FxmlManager identifier) {\n       throw new IllegalArgumentException(\"Screen of Type \" + identifier + \" not present\");\n     }\n \n-    final Node screen = screens.get(identifier);\n+    final Node screen = screens.get(identifier).getNode();\n \n     if (root.getChildren().isEmpty()) {\n       root.getChildren().add(screen);\n     } else {\n       root.getChildren().set(0, screen);\n     }\n+    final ControlledScreen<NavigationPane> controlledScreen = screens.get(identifier);\n+    checkTypes(data, controlledScreen.getValidTypes());\n+    controlledScreen.onShow(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbc9c1c4b7e6146690485552aef9507cc25a4b9"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTg4OTA5", "url": "https://github.com/triplea-game/triplea/pull/5917#pullrequestreview-361588909", "createdAt": "2020-02-20T02:01:17Z", "commit": {"oid": "ebbc9c1c4b7e6146690485552aef9507cc25a4b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjowMToxN1rOFr_AIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjowMToxN1rOFr_AIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY2NTMxNA==", "bodyText": "TODO: Add a Test case for the onShow method", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r381665314", "createdAt": "2020-02-20T02:01:17Z", "author": {"login": "RoiEXLab"}, "path": "game-headed/src/test/java/org/triplea/game/client/ui/javafx/screens/RoleSelectionTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.triplea.game.client.ui.javafx.screens;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.triplea.game.client.ui.javafx.screens.RoleSelection.SELECTED_MAP_KEY;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import java.util.List;\n+import java.util.Map;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.Node;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.SingleSelectionModel;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.triplea.game.client.ui.javafx.UserAgentStylesheetTestCase;\n+import org.triplea.game.client.ui.javafx.screen.ScreenController;\n+import org.triplea.game.client.ui.javafx.util.FxmlManager;\n+\n+public class RoleSelectionTest extends UserAgentStylesheetTestCase {\n+\n+  private final RoleSelection roleSelection = new RoleSelection();\n+\n+  @Test\n+  void correctRootNodeIsReturned() {\n+    final VBox root = mock(VBox.class);\n+    roleSelection.setRoot(root);\n+\n+    assertThat(roleSelection.getNode(), is(root));\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  void allSelectorCheckboxIsInitializedWithCorrectValues() {\n+    final ObservableList<String> observableList = FXCollections.observableArrayList();\n+    final ComboBox<String> comboBox = mock(ComboBox.class);\n+    when(comboBox.getItems()).thenReturn(observableList);\n+    roleSelection.setAllSelectorCheckbox(comboBox);\n+\n+    roleSelection.initialize();\n+\n+    assertThat(observableList, is(List.of(PlayerType.playerTypes())));\n+  }\n+\n+  // TODO Add Test for onShow method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbc9c1c4b7e6146690485552aef9507cc25a4b9"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "894bacf848e5f9c2f926ce61af2bb61e8b5f84d1", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/894bacf848e5f9c2f926ce61af2bb61e8b5f84d1", "committedDate": "2020-02-27T19:07:10Z", "message": "Add basic GameSelection screen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2d2b05f43ccdf3351282cde7b2de23df62fa985", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/e2d2b05f43ccdf3351282cde7b2de23df62fa985", "committedDate": "2020-02-27T19:07:10Z", "message": "Make PU modifiers work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfc467b4c7d6b9726389c8d41ea3ca382200888e", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/cfc467b4c7d6b9726389c8d41ea3ca382200888e", "committedDate": "2020-02-27T19:07:10Z", "message": "Restore fullscreen state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a40d51d01a345fbe4b0cfeaea99d606173e6fcd", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/5a40d51d01a345fbe4b0cfeaea99d606173e6fcd", "committedDate": "2020-02-27T19:07:10Z", "message": "Remove wrong getNode assertion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c9f597d6f3af575a210df8bb103d1b639820137", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/3c9f597d6f3af575a210df8bb103d1b639820137", "committedDate": "2020-02-27T19:07:10Z", "message": "Add final keywords"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9d51bd1995adeb20f94fe633fd477d36e8fa1e0", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/c9d51bd1995adeb20f94fe633fd477d36e8fa1e0", "committedDate": "2020-02-27T19:07:10Z", "message": "Fix remaining issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59ea1d9cbcbf1966c0696a28ed8d0dd079e3aabc", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/59ea1d9cbcbf1966c0696a28ed8d0dd079e3aabc", "committedDate": "2020-02-27T19:07:10Z", "message": "Use different exception type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e636ac5593b46cabfd61df35966bcf63c3f6e26", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/2e636ac5593b46cabfd61df35966bcf63c3f6e26", "committedDate": "2020-02-27T19:07:10Z", "message": "Overload constructor and use that"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24fae55475e9f567e464ffb38a28b45d95f93c84", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/24fae55475e9f567e464ffb38a28b45d95f93c84", "committedDate": "2020-02-27T19:07:10Z", "message": "Rename predicate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27c17028c0c5478f391a870ad1a8bd4783883646", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/27c17028c0c5478f391a870ad1a8bd4783883646", "committedDate": "2020-02-27T19:07:10Z", "message": "Add test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f7ad0b43cc43afecf324cf9620fb9fdf19b5c15", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/6f7ad0b43cc43afecf324cf9620fb9fdf19b5c15", "committedDate": "2020-02-27T19:07:10Z", "message": "Fix helper class name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd459ff4e45b8273ca942e52d72774fb6db49551", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/cd459ff4e45b8273ca942e52d72774fb6db49551", "committedDate": "2020-02-27T20:45:52Z", "message": "Polish css a little bit more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769cb5702ef5dfa9e17b08ecb74662abadb6cefe", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/769cb5702ef5dfa9e17b08ecb74662abadb6cefe", "committedDate": "2020-02-27T21:09:02Z", "message": "Add test cases for NavigationPane"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fcd13da56534cb43c0a1ceca9ae40719ea31b16", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/6fcd13da56534cb43c0a1ceca9ae40719ea31b16", "committedDate": "2020-02-27T21:25:01Z", "message": "Add some basic test functionality"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebbc9c1c4b7e6146690485552aef9507cc25a4b9", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/ebbc9c1c4b7e6146690485552aef9507cc25a4b9", "committedDate": "2020-02-20T01:57:18Z", "message": "Fix helper class name"}, "afterCommit": {"oid": "6fcd13da56534cb43c0a1ceca9ae40719ea31b16", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/6fcd13da56534cb43c0a1ceca9ae40719ea31b16", "committedDate": "2020-02-27T21:25:01Z", "message": "Add some basic test functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "591e85eb9d12ed689851e261034fc6a1a00d8616", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/591e85eb9d12ed689851e261034fc6a1a00d8616", "committedDate": "2020-02-27T21:42:33Z", "message": "Move strings to lang file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ef3167018d2e0e09ee29b4b584e8d8a925f5020", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/8ef3167018d2e0e09ee29b4b584e8d8a925f5020", "committedDate": "2020-02-27T22:03:22Z", "message": "Enhance width of Spinners"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b3ac8f8246e04d66bbaf1116456c8dc9c441abd", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/5b3ac8f8246e04d66bbaf1116456c8dc9c441abd", "committedDate": "2020-02-27T22:18:24Z", "message": "Add newline at the end of the file"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3676, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}