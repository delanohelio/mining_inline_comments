{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwOTc3NDky", "number": 8337, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwNjoyNToxMlrOFBFjbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQwMjoxMjoyMlrOFKbmBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjgzODg0OnYy", "diffSide": "RIGHT", "path": "gradle/scripts/yaml.gradle", "isResolved": true, "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwNjoyNToxMlrOH_q-vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNToyNzozNFrOIAWjFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw==", "bodyText": "As an HTTP 'get', this will download the full file, no? The purpose of this check is only to make sure that the file exists at the given URL. The full set of maps is relatively significant. I would presume running this locally or even on a CI server and we'll see a significant overhead of downloading lots of data. Is my understanding correct, or does this update avoid the full content download somehow?\nI notice the download URL is different from what is the general pattern, ie: https://github.com/triplea-maps/over-the-top/archive/master.zip\nI realize if we go with the latter URL then there is no control over downloading specific versions and the latest is always downloaded. That is a limitation. Assuming a 'head' avoids content download, and the issue is that the download is coming from github releases, could we specify the download by commit SHA?\nThat would give a URL like: https://github.com/triplea-maps/over-the-top/archive/662e9966c1d7e6f1a61b6f40cfdae69cc0d4af22.zip", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r536526527", "createdAt": "2020-12-05T06:25:12Z", "author": {"login": "DanVanAtta"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUzMzExMw==", "bodyText": "It occurred to me, using such a link that is commit specific would need testing. There is an unfortunate reliance on zip file naming for the map to be loaded correctly. If the game engine renames the zip file,we would be okay. Though, I'm not sure if the download actually does that rename. I'm therefore not sure that link would work at all in which case we need to consider options assuming a GET is not desirable.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r536533113", "createdAt": "2020-12-05T07:12:11Z", "author": {"login": "DanVanAtta"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjcxNjkyMw==", "bodyText": "@DanVanAtta I confirmed that the whole file is not downloaded and the check happens very fast (less than a minute). I think we would have to consume the stream of bytes (which we don't) for the check to be long/slow. You can see from the passing checks on this PR.\nThe reason why I can't use master for my map is that it includes pom.xml and assembly.xml which confuses TripleA and it errors thinking those are game files. So the commit SHA fixes the problem of always having the latest but doesn't fix the problem of being able to specify your own assembly/zip.\nI confirmed that this PR works for my map- as long as the zip is named \"over-the-top.zip\" it can be a specific release tag and is still loaded just fine by the game.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r536716923", "createdAt": "2020-12-05T12:11:04Z", "author": {"login": "jdimeo"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc3NTU0OQ==", "bodyText": "As much as I'm not a fan of it (I prefer to refer to them as \"game files\"), amongst map-makers, when you simply say \"XML\", you mean the relevant files within the \"games\" folder. So, in order to avoid confusion, I believe it would be better no other files in any repository use the \"XML\" format.\nMeaning that, whatever they are, I would rather have those \"pom\" and \"assembly\" files not in the \"XML\" format.\n\nSide note. Your game file uses at least one deprecated element (here it is an incomplete list of them: https://github.com/triplea-game/triplea/blob/master/docs/map-making/map-features-change-log.md). That is something I was arguing with @DanVanAtta and I believe demostrates my point that simply adding back support for such elements just assures that new maps will be outated too (in this case, you just accepted a game with the deprecated isTwoHit option).\n\nTalking about reliance on file naming, I let everyone know that, in the past, it was forbidden to have any dashes in such names, since the dash was reserved for mapskins only. Meaning that, in the past, a map name like over-the-top was not acceptable (it could have been changed to over_the_top, though back them having spaces in map names was acceptable and common, instead).\n@DanVanAtta I can tell you that the rule used to be that, if the map file name doesn't have a dash, then it is a map, if it has one, then it is a mapskin, and nothing should have more than one dash. I assume you can ask veq if you want.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r536775549", "createdAt": "2020-12-05T13:58:29Z", "author": {"login": "Cernelius"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4OTIzMQ==", "bodyText": "@Cernelius Those files are Maven files that I use to manage the map assembly and testing process. I use Maven to zip up the map and automatically copy it to my TripleA folder for testing. I don't have any choice about what file extension they are- they are not part of my \"map\". TripleA shouldn't be so rigid as to forbid any non-map/game related files in the repository.\nYes, after much testing and tweaking, I realized that it had to be over_the_top and I've changed it. I wish it also wasn't so rigid in that regard as well but that was fine once I figured it out.\nWhen I get a chance I'll remove isTwoHit but I'm not sure that's important enough from stopping this from going into the Experimental section right? it works fine on the latest release of the engine...", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r536789231", "createdAt": "2020-12-05T14:28:15Z", "author": {"login": "jdimeo"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgxMjY0Ng==", "bodyText": "@Cernelius I updated this PR to use v0.1.1 which removed the deprecated property. YAML checks passed again in <= 1min", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r536812646", "createdAt": "2020-12-05T15:53:01Z", "author": {"login": "jdimeo"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk2OTMxNg==", "bodyText": "I would prefer to keep the HEAD request if we can, but I'm not opposed to changing it to a GET if it is needed. The reason for the preference is so that it's more obvious and clear there would not be a full download of files, someone else may wonder and start to investigate a \"performance problem\" that is not there.\n@jdimeo, does it change anything that you actually should not need to zip your map files? The game engine can read maps in an expanded format, unzipped. The folder format when cloning a repository should work fine. In other words, you can clone a map repository to the triplea/downloadedMaps folder and it should read fine. Similarly, you can work on a map in an expanded, unzipped, format and then commit any changes and push that to github without needing to do any zip work. Does that change the utility for having build files present, could they be removed in that case?\nI do think it was perhaps not well done to have the engine now read any XML file as if it were a game XML. Changing that though won't help us for the current engine version, so we need to do the best we can.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r536969316", "createdAt": "2020-12-06T06:31:47Z", "author": {"login": "DanVanAtta"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyNDk5Ng==", "bodyText": "@DanVanAtta I'm struggling here because I thought I've outlined why it's needed and there is no downside- the GET and the HEAD are exactly the same performance wise (you can look at this PR and all the other PRs- the YAML checks take one minute either way). It's only slow if we were to stream the bytes, but just opening a GET and then closing right away is the same as HEAD. This enables us to support release assets which has a lot of benefits as I've already outlined. As a professional software developer, I am very nervous about having the map a) constantly deploy with every change to master- I would rather have it be a deliberate tag and b) have every file be part of the deployment. Another file I have in my map is an XLSX I use to edit the unit attachments- I only want that to be present in the repo, not in the final map. So- many reasons to switch to GET and no downsides.... can we just accept this? I've been waiting for literally years to open this PR! :-)", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r537024996", "createdAt": "2020-12-06T12:07:23Z", "author": {"login": "jdimeo"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAzMDE2Nw==", "bodyText": "@DanVanAtta P.S. I would actually say that GET is preferable to HEAD, not just \"as good as\". The point of these checks is to ensure the game can download the map, and so you want the check to be as realistic to what the game is doing as possible. If for some reason, a server allowed HEAD but blocked GET the check would pass here but the game would fail to download the map.\nP.P.S. To add more color as to the extra files, I've developed several map making tools that I'm eager to share with the community. For example:\n\nWriting the game notes in HTML with a CSS/<style> block at the top and then a tool to copy and inject those notes into the game XML, inlining the CSS onto the elements (similar to many marketing email tools) vs. having to maintain the notes inside the CDATA directly\nEditing the unit attributes/attachments in an XLSX, where it's easy to compare and change relative power of the units, as well as the starting placements. Automatically update the game file by \"syncing\" the XLSX with the game XML using JAXB and Apache POI\n\nBoth of these require HTML and XLSX \"source\" files which are then \"compiled\" into the final game file that should not be included in the \"binary\" (final .zip) that is downloaded by players of the map. So it's more than just wanting a couple Maven files, though I do want that too.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r537030167", "createdAt": "2020-12-06T12:37:41Z", "author": {"login": "jdimeo"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyMDMxOA==", "bodyText": "I ran some numbers and below are the results. To explain, I used a tool called 'iftop' to check the total amount downloaded over network and used the 'gradle' build time for the timing. For the 'clean' validateYaml case I interleaved running builds from 'master' and 'jdimeo/patch1'. For the non-clean case I ran the same build 4 times in a row throwing out the first build and did so on both 'master' and 'jdimeo/patch1'.\n--- ./gradlew clean validateYaml \nMaster1   33s & 497KB downloaded\nMaster2   13s & 477KB downloaded\nMaster3   26s & 484KB downloaded\n\n\npatch1   35s & 9.83MB  \npatch2   25s & 9.50MB\npatch3   27s & 9.00MB\n\n--- (non-clean) ./gradlew validateYaml\n\nmaster1: 8s\nmaster2: 14s\nmaster3: 9s\n\npatch1: 25s\npatch2: 25s\npatch3: 24s\n\nExample output for iftop showing download amount:", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r537120318", "createdAt": "2020-12-06T20:47:58Z", "author": {"login": "DanVanAtta"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyMjgyOA==", "bodyText": "@djimeo I want to get this map listing merged and I want this to be as painless as possible. Patience is a virtue, after a year, a few more days is not a significant amount of time. I don't like being 'the bad guy' on this, though we need to consider how changes will impact everyone. We run 'validateYaml' as part of branch verification, it is not only run on PR builds but by all devs locally as well, and (hopefully) quite frequently. Adding time and download weight to that process is considerable particularly considering the efforts put in to try and get it as fast as we can get it. The numbers above are an odd in-between where I don't know if they are deal-breakers, it is not quite parity.\nI like the process and tooling you have developed and I believe it is superior compared to what we have, and I would prefer for map downloads to be done via releases instead  of a full zip of the map repository. The reason we use the latter is for simplicity. The amount of resistance to interacting with github was very considerable as it has been baked in culturally for a long time that map-makers do not need to interact with the map hosting. For a very long time the map upload management was the job of the maintainers. Now that it is 'self-service', the cultural shift has been difficult. Maps repo's did use to use releases for download, the reason we no longer use releases is largely simplicity, to make the process as easy as possible on everyone with as few moving pieces as possible. We have to strike the lowest common denominator to make this process easy.The automatic 'zip' download of a repository can almost be thought of as a mini CI/CD for maps, a very simple one.\nI think there are some really good ideas for simplifying the map making process and a lot of it is very much more difficult than it needs to be. A focus of the 2.4 release was to change how map XML is parsed to remove the need for a DTD and allow us to more easily change the XML structure. I think we are now positioned to help make some of these tasks easier.\nI think we have a longer conversation here that should be followed up on, but to address the tooling built:\n\nXLSX transform: I wonder how much of this is compensating for the current XML structure that could be redone in a way to reduce duplication and generally simplify. Is the solution to have a better XML?\ngame notes: I'd like to have the engine read the game notes from an HTML file that is separate from the game-XML file: https://forums.triplea-game.org/topic/2238/move-game-notes-to-its-own-file\n\nThe deployment and download to releases is a bit non-standard. Long term I am not sure if that would 'jive' well with the potential plans to automate the 'triplea_maps.yaml' file. Automating the 'triplea_maps.yaml' file would involve a backend server to scan for repositories and then make available the download links via an HTTP request from the game client to that backend server. I have not considered how to handle the case where some map repositories use releases and others do not. I am not sure how to account for that and build that into the automation of the map server. I'm interested in your thoughts and ideas regarding these topics, though it seems like that is a longer conversation that does not belong in this PR.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r537122828", "createdAt": "2020-12-06T21:02:37Z", "author": {"login": "DanVanAtta"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyNDE4Mg==", "bodyText": "@jdimeo, here is my recommendation, which I do not entirely like:\n\nextract the map tools you have built and put them in a new repository\ndelete the tools from the map repository and add those entries to a .gitignore file\nhold your nose and use 'master' for latest releases\n\nI don't like the last suggestion but it keeps the repo in line with others and resolves the need for a HEAD vs GET request. I share your worry about using master always being released, but if you use feature branches for potential new versions, then effectively whenever you merge to master you have an instantaneous release. Perhaps that perspective helps.\nWith the above, we have some interesting map process and design questions to answer and I'd really like to talk through that more and get your thoughts and you have help shape the next iteration of map hosting.\nAlternatively, failing the suggestion above, we'll need to consider a bit more the implications of using 'releases' for download and whether we want a potential short term solution. The download results are not great, but not a deal breaker, the extra time for non-clean builds is certainly a con and arguably is a deal breaker. We'd want to consider that in more detail as well, perhaps even evaluate options such as removing the URI check altogether (which doesn't seem like the best option, but I'm not sure offhand what good options there are).\nPlease let me know your thoughts here @jdimeo, again, I'm interesting/eager to make the map available as soon as possible, and I think you have used a better and more advanced map making process which solves problems which I would like to see solved as smoothly as possible for everyone and incorporated into the standard map making procedure.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r537124182", "createdAt": "2020-12-06T21:10:51Z", "author": {"login": "DanVanAtta"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MTU3Mg==", "bodyText": "@DanVanAtta Wow, I really opened a can of worms didn't I! A few thoughts:\n\nThank you for taking the time to explain all of this to me- I know there are a bunch of forum posts, tickets, PRs, etc. that you are maintaining and I really appreciate the effort you put in here. I definitely lack a lot of the history/context (e.g. resistance to GitHub)\nIn general, I'm hugely impressed with TripleA and what it has accomplished with volunteer labor\nBut yes, I have a lot of ideas on how to help :-) I actually was thinking more structure (e.g. an XSD schema with nice auto-complete in an IDE with JAXB generated code) would be helpful, not less as you alluded to in 2.4, but we can definitely talk about that more later- out of scope here!\nThe map tools are already in another repo here: https://github.com/jdimeo/triplea-map-tools  The files that are checked into the map are like \"source\" files (e.g. the notes HTML) but the code that injects them into the game file is in triplea-map-tools. P.S. the CSS inlining is a big win there, since \"normal\" CSS wouldn't be rendered correctly by the Swing HTML widget right? it would have to be a \"real\" web browser window like SWT?\nI think I've found a solution that works for me as a \"power user\" but also works for the current conventions: Create a separate repo with my build files and ancillary files, but submodule in the map into the /map directory into the support repo. Then, my build tools can edit the map files \"directly\" by writing to e.g. /map/games/over_the_top.xml, but the commits go to the real map repo which stays \"clean\". Does that sound good to you?", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r537171572", "createdAt": "2020-12-07T01:19:31Z", "author": {"login": "jdimeo"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIyMTEzNw==", "bodyText": "Ugh, I set up https://github.com/jdimeo/over-the-top-support to look exactly like my repository used to look, using a submodule to bring the map into /map. The main map repo is now \"flat\" with all the map files in the root directory.\nThis seems to break TripleA. Apparently, you can either have it \"flat\" in the zip OR you can have /map_name-master as the root folder of the zip but then the map files MUST be under a /map folder. Is that correct? Is there an easy way to fix this expectation?", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r537221137", "createdAt": "2020-12-07T04:22:07Z", "author": {"login": "jdimeo"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI0MDM0MA==", "bodyText": "The problem is that the name of the map found in each XML no longer matches the name of the 'root' folder (over-the-top-support), is that the case? Do I understand correctly the issue?\nRemoving that dependency has been on my list for some time. It's a current problem though.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r537240340", "createdAt": "2020-12-07T05:27:34Z", "author": {"login": "DanVanAtta"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw=="}, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTcxMjUyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDoxNjo1MVrOIE_NEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDoyMjozM1rOIE_TNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMDc1NA==", "bodyText": "Have you checked the performance of this method?\nHave you tested for the case where the map is a directory and not a zip?", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542100754", "createdAt": "2020-12-14T04:16:51Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,28 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  private static final String REQUIRED_ASSET_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n-    }\n+  \tstatic String getMapPrefix(final URL[] resourcePaths) {\n+  \t\tfor (val url : resourcePaths) {\n+  \t\t\ttry (val zip = new ZipFile(new File(url.toURI()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12c9588f3c0dc86618d16d08aebc65a550c4b33"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMjMyNg==", "bodyText": "Only by running locally and not observing any slowdown, but that was just anecdotal\nI don't think so since I believe I only have .zips locally right now. If it's just a folder and it attempts to open as a .zip, it will throw an IOException and silently return an empty string (which was the previous behavior for non-zips)", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542102326", "createdAt": "2020-12-14T04:22:33Z", "author": {"login": "jdimeo"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,28 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  private static final String REQUIRED_ASSET_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n-    }\n+  \tstatic String getMapPrefix(final URL[] resourcePaths) {\n+  \t\tfor (val url : resourcePaths) {\n+  \t\t\ttry (val zip = new ZipFile(new File(url.toURI()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMDc1NA=="}, "originalCommit": {"oid": "d12c9588f3c0dc86618d16d08aebc65a550c4b33"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTcxNTMyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDoxODowMlrOIE_Ocw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDozNToyNVrOIE_hEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTEwNw==", "bodyText": "The variable name is a bit odd as there are other required asset folders, yet the name of the folder is 'baseTiles'. Is this just an example required folder to indicate when we have found the map resources? Does the actual folder matter less so than it is just one of several that we would expect to find?", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542101107", "createdAt": "2020-12-14T04:18:02Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,28 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  private static final String REQUIRED_ASSET_FOLDER = \"baseTiles/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12c9588f3c0dc86618d16d08aebc65a550c4b33"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTY2Ng==", "bodyText": "Yes, precisely. baseTiles is necessary, but not sufficient, to specify assets but sufficient to identify the asset path", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542101666", "createdAt": "2020-12-14T04:20:10Z", "author": {"login": "jdimeo"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,28 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  private static final String REQUIRED_ASSET_FOLDER = \"baseTiles/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTEwNw=="}, "originalCommit": {"oid": "d12c9588f3c0dc86618d16d08aebc65a550c4b33"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMjUzNA==", "bodyText": "@DanVanAtta would you prefer EXAMPLE_REQUIRED_ASSET_FOLDER?", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542102534", "createdAt": "2020-12-14T04:23:27Z", "author": {"login": "jdimeo"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,28 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  private static final String REQUIRED_ASSET_FOLDER = \"baseTiles/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTEwNw=="}, "originalCommit": {"oid": "d12c9588f3c0dc86618d16d08aebc65a550c4b33"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwNTg3NQ==", "bodyText": "Renamed to REQUIRED_ASSET_EXAMPLE_FOLDER and added comment", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542105875", "createdAt": "2020-12-14T04:35:25Z", "author": {"login": "jdimeo"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,28 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  private static final String REQUIRED_ASSET_FOLDER = \"baseTiles/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTEwNw=="}, "originalCommit": {"oid": "d12c9588f3c0dc86618d16d08aebc65a550c4b33"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTY5MTc0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjowMDowOVrOIJvZNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQwMjoxNToxM1rOINNRBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NDU5OA==", "bodyText": "nit, the single letter variable names can be hard to decipher. Would you mind replacing it with something more descriptive, like zipFile, or fileInZip, or zipFileEntry?\nSimilarly for the $ in the lambda.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r547084598", "createdAt": "2020-12-22T06:00:09Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0MTM4Mg==", "bodyText": "I like using single character variable names to communicate to the reader it's not an \"important\" variable- very often in lambdas or for loops. I'm telling you as the reader to \"keep going\" and focus on other parts of the code. But I'm happy to conform to the current conventions in the code.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r548741382", "createdAt": "2020-12-24T20:00:49Z", "author": {"login": "jdimeo"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NDU5OA=="}, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDcxOTc0OQ==", "bodyText": "@DanVanAtta I just pushed another commit that removes the single char variable names", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r550719749", "createdAt": "2021-01-01T02:15:13Z", "author": {"login": "jdimeo"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NDU5OA=="}, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTY5NDg0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjowMTo0MVrOIJva6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOTo1OTo1MVrOILUgnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NTAzNA==", "bodyText": "I notice we are substringing off only the example folder name. Seemingly we want the path to be something like <map-name>/map. If the 'baseTilesis not in that directory, then we might substring too little. For example, let's saybaseTiles` is in a sub-folder of 'map', then the path would no longer be to '/map' but would be to that subfolder. Wouldn't this cause a problem with files being one-folder level higher than expected?", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r547085034", "createdAt": "2020-12-22T06:01:41Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0MTI3Ng==", "bodyText": "If I understand correctly, this is exactly the problem that this PR is trying to solve. If the map maker for some reason puts the assets in /map/stuff/baseTiles this code will use /map/stuff as the root path of the resources, not /map as was previously hardcoded and assumed. This stops making assumptions about absolute paths for resources and instead makes the assumption that, wherever baseTiles is, all the other folders are siblings to that folder.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r548741276", "createdAt": "2020-12-24T19:59:51Z", "author": {"login": "jdimeo"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NTAzNA=="}, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDc3NjcwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwMzowODowM1rOILXUow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxOToyODozMVrOINSFMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NzM2Mw==", "bodyText": "IOException is highly suspicious. We may want to tell a user about this if we hit it. Perhaps we expect this to be an impossible condition, though if the permissions are wrong then it might be worth notifying the user.\nIf we first check that a file exists: new File(url.toURI()).exists(), and then we get an IOException, it seems like that would be a good place to warn a user. WDYT? @jdimeo\nBeyond this last point, this update looks good.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r548787363", "createdAt": "2020-12-25T03:08:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());\n+        }\n+      } catch (final IOException | URISyntaxException e) {\n+        // File is not a zip or can't be opened", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5NjQ0OA==", "bodyText": "@DanVanAtta My mindset here is that this is just auto resource location, not actual loading and parsing. We expect an IOException if the file is a folder (not a zip file) or if there are any other reasons it can't be read, but in that case we should just return a default/assumed path to the resources (like /map) not actually throw errors. We can catch and throw errors when we go to actually load and parse the map.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r548896448", "createdAt": "2020-12-25T17:42:21Z", "author": {"login": "jdimeo"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());\n+        }\n+      } catch (final IOException | URISyntaxException e) {\n+        // File is not a zip or can't be opened", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NzM2Mw=="}, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5NzIwOQ==", "bodyText": "Cool, I'm wondering & considering if we are doing control-flow-by-exception-handling. We could check in the new File(..) that it is a file, ends with '.zip' and if not then avoid processing the file. This would leave IOException for cases that we do not expect and potentially represent error cases. I'm concerned that by no-op'ing the IOException case that we could be silently suppressing an error that we have not expected.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r548897209", "createdAt": "2020-12-25T17:51:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());\n+        }\n+      } catch (final IOException | URISyntaxException e) {\n+        // File is not a zip or can't be opened", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NzM2Mw=="}, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDcxOTI4Mw==", "bodyText": "@DanVanAtta What you are describing is exactly what we should do for the actual map loading code. I see this code as very \"lazy\" - blindly and quickly try to automatically find the resources, purposefully ignoring errors and not being robust. All that you are describing would be appropriate for the actual map parsing code. I wouldn't want a stack trace with a map error to lead a troubleshooter here, since this isn't the \"authority\" on parsing the map", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r550719283", "createdAt": "2021-01-01T02:08:30Z", "author": {"login": "jdimeo"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());\n+        }\n+      } catch (final IOException | URISyntaxException e) {\n+        // File is not a zip or can't be opened", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NzM2Mw=="}, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5ODY0Mg==", "bodyText": "I see, I agree that error handling should be handled upstream. It looks like it is not quite though..\nFrom ResourceLoader.java:\n  private ResourceLoader(final String mapName, final String[] paths) {\n    final URL[] urls = new URL[paths.length];\n    for (int i = 0; i < paths.length; i++) {\n      final File f = new File(paths[i]);\n      if (!f.exists()) {\n        log.error(f + \" does not exist\");\n      }\n      if (!f.isDirectory() && !f.getName().endsWith(\".zip\")) {\n        log.error(f + \" is not a directory or a zip file\");\n      }\n      try {\n        urls[i] = f.toURI().toURL();\n      } catch (final MalformedURLException e) {\n        throw new IllegalStateException(e);\n      }\n    }\n    mapPrefix = ResourceLocationTracker.getMapPrefix(mapName, urls);\n    // Note: URLClassLoader does not always respect the ordering of the search URLs\n    // To solve this we will get all matching paths and then filter by what matched\n    // the assets folder.\n    loader = new URLClassLoader(urls);\n    this.mapName = mapName;\n  }", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r550798642", "createdAt": "2021-01-01T19:28:31Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());\n+        }\n+      } catch (final IOException | URISyntaxException e) {\n+        // File is not a zip or can't be opened", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NzM2Mw=="}, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NDgyMTgxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQwMjoxMjoyMlrOINNQLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxOToyNzozMVrOINSE5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDcxOTUzMw==", "bodyText": "@DanVanAtta should the default be different here? e.g. /map? I'm assuming not, since if it's not a zip, it won't be under a /map folder typically.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r550719533", "createdAt": "2021-01-01T02:12:22Z", "author": {"login": "jdimeo"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());\n+        }\n+      } catch (final IOException | URISyntaxException e) {\n+        // File is not a zip or can't be opened\n+      }\n     }\n+    return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5ODU2Ng==", "bodyText": "Keeping existing behavior is prudent unless we are sure it should be changed. I would agree it is suspect and possibly dead-code.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r550798566", "createdAt": "2021-01-01T19:27:31Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());\n+        }\n+      } catch (final IOException | URISyntaxException e) {\n+        // File is not a zip or can't be opened\n+      }\n     }\n+    return \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDcxOTUzMw=="}, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2632, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}