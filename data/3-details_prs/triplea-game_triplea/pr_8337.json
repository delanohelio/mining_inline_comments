{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwOTc3NDky", "number": 8337, "title": "Make resource discovery more flexible and robust", "bodyText": "For more details, see: #8325\nAdditionally, change the YAML checker to use HttpGet instead of HttpHead, since GitHub blocks the download of release assets via HEAD requests.\nRelease assets are a better way of releasing TripleA maps (for those that care ;-)) since it allows people to have other files relating to development (I have a pom.xml in mine and an assembly.xml) without including those files in the final build. It's also a way to accept pull requests on master on a map without having that necessarily deploy to everyone else until it's ready.\nTesting\nEnsured that the GitHub Actions checks still passed and in a reasonable amount of time\nScreens Shots\nN/A\nAdditional Notes to Reviewer\n\nRelease Note\nN/A - too technical", "createdAt": "2020-12-02T12:18:34Z", "url": "https://github.com/triplea-game/triplea/pull/8337", "merged": true, "mergeCommit": {"oid": "539921417e5cb106b1c3079969241398018a9db8"}, "closed": true, "closedAt": "2021-01-01T19:29:15Z", "author": {"login": "jdimeo"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiNjYGAH2gAyNTMwOTc3NDkyOjc5MGMwYTNlMmMwNGM3YWI2ZjgyMTc1MTY5YTQ4MmQ3ZDYzZDEwYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdrvBCZgH2gAyNTMwOTc3NDkyOjhlMTY1MzZhYjFlMDQzMmVkYWI2NzRlMWQ2OWM4YTllY2JhNzc2ODY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "790c0a3e2c04c7ab6f82175169a482d7d63d10c3", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/790c0a3e2c04c7ab6f82175169a482d7d63d10c3", "committedDate": "2020-12-02T12:18:04Z", "message": "Requesting Over The Top to be added to the maps list\n\nFor more details, see: https://github.com/triplea-game/triplea/issues/8325"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac4c2c033bf0c09eecba556dc77ad8570146ebb2", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/ac4c2c033bf0c09eecba556dc77ad8570146ebb2", "committedDate": "2020-12-02T13:46:06Z", "message": "Testing HttpGet instead of HttpHead (which works for GitHub releases) to see if it's too slow because it downloads the full zips"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cba4c43bbc078766c5256f8da09237268ff16a02", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/cba4c43bbc078766c5256f8da09237268ff16a02", "committedDate": "2020-12-02T13:51:27Z", "message": "Fix import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9e36c457414a0ed4b3d7baf9feb90c31e901e9a", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/b9e36c457414a0ed4b3d7baf9feb90c31e901e9a", "committedDate": "2020-12-02T16:10:49Z", "message": "Remove extra closing </p> tag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/a1e7a5adce401abe703f9b2f79f2007aace8bd9e", "committedDate": "2020-12-03T00:16:17Z", "message": "Minor formatting change to trigger checks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NDE2MjAz", "url": "https://github.com/triplea-game/triplea/pull/8337#pullrequestreview-545416203", "createdAt": "2020-12-05T06:25:11Z", "commit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwNjoyNToxMlrOH_q-vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwNjoyNToxMlrOH_q-vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNjUyNw==", "bodyText": "As an HTTP 'get', this will download the full file, no? The purpose of this check is only to make sure that the file exists at the given URL. The full set of maps is relatively significant. I would presume running this locally or even on a CI server and we'll see a significant overhead of downloading lots of data. Is my understanding correct, or does this update avoid the full content download somehow?\nI notice the download URL is different from what is the general pattern, ie: https://github.com/triplea-maps/over-the-top/archive/master.zip\nI realize if we go with the latter URL then there is no control over downloading specific versions and the latest is always downloaded. That is a limitation. Assuming a 'head' avoids content download, and the issue is that the download is coming from github releases, could we specify the download by commit SHA?\nThat would give a URL like: https://github.com/triplea-maps/over-the-top/archive/662e9966c1d7e6f1a61b6f40cfdae69cc0d4af22.zip", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r536526527", "createdAt": "2020-12-05T06:25:12Z", "author": {"login": "DanVanAtta"}, "path": "gradle/scripts/yaml.gradle", "diffHunk": "@@ -75,7 +75,7 @@ def probeUris(uris) {\n         def executor = Executors.newFixedThreadPool(maxInFlightProbes)\n         uris.each { uri ->\n             probes << new UriProbe(uri, executor.submit({\n-                def request = new HttpHead(uri)\n+                def request = new HttpGet(uri)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5051c6f258797dfa4f5eafc329ef07bfdd4f226c", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/5051c6f258797dfa4f5eafc329ef07bfdd4f226c", "committedDate": "2020-12-05T15:12:26Z", "message": "Use new release with isTwoHit deprecation fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65caa8ba11649651f51648f24e183b7d287f0dd6", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/65caa8ba11649651f51648f24e183b7d287f0dd6", "committedDate": "2020-12-10T05:39:29Z", "message": "Update Over the Top to use standard URL of downloading master zip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ad167d506a99561c99b21ceb01c2193d457504b", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/4ad167d506a99561c99b21ceb01c2193d457504b", "committedDate": "2020-12-10T05:41:11Z", "message": "Update resource location prefix detector to be much more robust.\n\nIt automatically finds the path (regardless of map name, branch, etc.) in a .zip file by finding the \"baseTiles\" entry and using the parent path as the resource prefix. This means the actual map files are introspected so a simple unit test wouldn't work any more."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efac102932d8afcdae5366c2e2ddbae2226446b9", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/efac102932d8afcdae5366c2e2ddbae2226446b9", "committedDate": "2020-12-10T05:42:02Z", "message": "Go back to HttpHead instead of HttpGet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2854c9ad3891357853ff6103ac5247266f5868c", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/c2854c9ad3891357853ff6103ac5247266f5868c", "committedDate": "2020-12-10T05:50:31Z", "message": "Apparently StringUtils is not actually on the classpath"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d12c9588f3c0dc86618d16d08aebc65a550c4b33", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/d12c9588f3c0dc86618d16d08aebc65a550c4b33", "committedDate": "2020-12-10T05:56:22Z", "message": "One more compile error Eclipse didn't catch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDMzMDI0", "url": "https://github.com/triplea-game/triplea/pull/8337#pullrequestreview-551033024", "createdAt": "2020-12-14T04:16:51Z", "commit": {"oid": "d12c9588f3c0dc86618d16d08aebc65a550c4b33"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDoxNjo1MVrOIE_NEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDoxODowMlrOIE_Ocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMDc1NA==", "bodyText": "Have you checked the performance of this method?\nHave you tested for the case where the map is a directory and not a zip?", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542100754", "createdAt": "2020-12-14T04:16:51Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,28 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  private static final String REQUIRED_ASSET_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n-    }\n+  \tstatic String getMapPrefix(final URL[] resourcePaths) {\n+  \t\tfor (val url : resourcePaths) {\n+  \t\t\ttry (val zip = new ZipFile(new File(url.toURI()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12c9588f3c0dc86618d16d08aebc65a550c4b33"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTEwNw==", "bodyText": "The variable name is a bit odd as there are other required asset folders, yet the name of the folder is 'baseTiles'. Is this just an example required folder to indicate when we have found the map resources? Does the actual folder matter less so than it is just one of several that we would expect to find?", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542101107", "createdAt": "2020-12-14T04:18:02Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,28 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  private static final String REQUIRED_ASSET_FOLDER = \"baseTiles/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12c9588f3c0dc86618d16d08aebc65a550c4b33"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ae2ce8f348bcc671eec8987922d9c0430558174", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/0ae2ce8f348bcc671eec8987922d9c0430558174", "committedDate": "2020-12-14T04:33:28Z", "message": "Replace usage of Lombok val to pass style checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87f6fdc79e10c31484dd763e99072806e26088c1", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/87f6fdc79e10c31484dd763e99072806e26088c1", "committedDate": "2020-12-14T04:34:23Z", "message": "Rename constant to be more clear"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56fa112eb70b35fa5dc9267e7fc4c130e620d0e0", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/56fa112eb70b35fa5dc9267e7fc4c130e620d0e0", "committedDate": "2020-12-14T04:36:59Z", "message": "Merge branch 'master' into patch-1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/eef6e1cd810df8452f78fef42c4f44b084ce6a2f", "committedDate": "2020-12-14T04:44:22Z", "message": "Make checkstyle happy with finals"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODM3NDQ4", "url": "https://github.com/triplea-game/triplea/pull/8337#pullrequestreview-556837448", "createdAt": "2020-12-22T06:00:09Z", "commit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjowMDowOVrOIJvZNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjowMTo0MVrOIJva6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NDU5OA==", "bodyText": "nit, the single letter variable names can be hard to decipher. Would you mind replacing it with something more descriptive, like zipFile, or fileInZip, or zipFileEntry?\nSimilarly for the $ in the lambda.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r547084598", "createdAt": "2020-12-22T06:00:09Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NTAzNA==", "bodyText": "I notice we are substringing off only the example folder name. Seemingly we want the path to be something like <map-name>/map. If the 'baseTilesis not in that directory, then we might substring too little. For example, let's saybaseTiles` is in a sub-folder of 'map', then the path would no longer be to '/map' but would be to that subfolder. Wouldn't this cause a problem with files being one-folder level higher than expected?", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r547085034", "createdAt": "2020-12-22T06:01:41Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NzQzMjUy", "url": "https://github.com/triplea-game/triplea/pull/8337#pullrequestreview-558743252", "createdAt": "2020-12-25T03:08:03Z", "commit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwMzowODowM1rOILXUow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwMzowODowM1rOILXUow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NzM2Mw==", "bodyText": "IOException is highly suspicious. We may want to tell a user about this if we hit it. Perhaps we expect this to be an impossible condition, though if the permissions are wrong then it might be worth notifying the user.\nIf we first check that a file exists: new File(url.toURI()).exists(), and then we get an IOException, it seems like that would be a good place to warn a user. WDYT? @jdimeo\nBeyond this last point, this update looks good.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r548787363", "createdAt": "2020-12-25T03:08:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());\n+        }\n+      } catch (final IOException | URISyntaxException e) {\n+        // File is not a zip or can't be opened", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2daa0accbd2b8aad49c1851c6d683c529c0e1d4", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/a2daa0accbd2b8aad49c1851c6d683c529c0e1d4", "committedDate": "2021-01-01T02:11:20Z", "message": "Fix single-character variable names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNTY1OTE0", "url": "https://github.com/triplea-game/triplea/pull/8337#pullrequestreview-560565914", "createdAt": "2021-01-01T02:12:22Z", "commit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQwMjoxMjoyMlrOINNQLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQwMjoxMjoyMlrOINNQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDcxOTUzMw==", "bodyText": "@DanVanAtta should the default be different here? e.g. /map? I'm assuming not, since if it's not a zip, it won't be under a /map folder typically.", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r550719533", "createdAt": "2021-01-01T02:12:22Z", "author": {"login": "jdimeo"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());\n+        }\n+      } catch (final IOException | URISyntaxException e) {\n+        // File is not a zip or can't be opened\n+      }\n     }\n+    return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e16536ab1e0432edab674e1d69c8a9ecba77686", "author": {"user": {"login": "jdimeo", "name": "John Dimeo"}}, "url": "https://github.com/triplea-game/triplea/commit/8e16536ab1e0432edab674e1d69c8a9ecba77686", "committedDate": "2021-01-01T02:22:39Z", "message": "Fix line length for checkstyle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3801, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}