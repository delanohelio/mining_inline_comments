{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MzA0MTI1", "number": 6696, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoxOTozOVrOEGJq3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoxOTozOVrOEGJq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODg1MzQwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoxOTozOVrOGkxatA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNToxMzozM1rOGlf2Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTU3Mg==", "bodyText": "I think there might be something of a feature envy code smell here. Notably we query an object for its state, then depending on that state we query the same object again for more state. The feature envy is on BattleSteps with respect to the state of offensiveAaStep. In practical sense this indicates a lack of data encapsulation.\nThis could potentially be fixed by moving the getOrder() concern to offensiveAaStep. In such a case there would be no conditional in BattleSteps. In other words, offensiveAaStep would evaluate its own order, if not applicable it would return an empty getNames() list, otherwise it would return some values.\nWDYT?", "url": "https://github.com/triplea-game/triplea/pull/6696#discussion_r441211572", "createdAt": "2020-06-17T00:19:39Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -71,9 +71,12 @@\n     final BattleStep airDefendVsNonSubs = new AirDefendVsNonSubsStep(this);\n \n     final List<String> steps = new ArrayList<>();\n-    steps.addAll(offensiveAaStep.getNames());\n-\n-    steps.addAll(defensiveAaStep.getNames());\n+    if (offensiveAaStep.getOrder() != BattleStep.Order.NOT_APPLICABLE) {\n+      steps.addAll(offensiveAaStep.getNames());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f524e9819a292c6c3bfde535c7f4d90bb94088ca"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxODc2NA==", "bodyText": "I agree with the code smell but that is because this is an intermediate state.  There are steps that will return different values for getOrder depending on their situation.  Once all of the steps are converted, I can grab the list of steps with code like:\nList<BattleStep> steps = new ArrayList<>();\nsteps.add(new OffensiveAaFire(this, battleActions));\nsteps.add(new DefensiveAaFire(this, battleActions));\nsteps.add(new ...);\nsteps.add(new ...);\n\nList<String> stepNames = steps.stream()\n        .filter(step -> step.getOrder() != BattleStep.Order.NOT_APPLICABLE)\n        .sorted(Comparator.comparing(BattleStep::getOrder))\n        .flatMap(step -> step.getNames().stream())\n        .collect(Collectors.toList());\n\nAnother idea, is that instead of allowing a step to have different positions in the battle order, I could just create duplicate steps.  They could inherit from the same parent class where all the main logic is and then override a method that determines whether getName or executable should be run.\nThen the code to get the steps would look more like:\nList<BattleStep> steps = new ArrayList<>();\nsteps.add(New OffensiveAaFire(this, battleActions));\nsteps.add(new SubRetreatBeforeBattle(this, battleActions));\nsteps.add(...<some other step>);\nsteps.add(new SubRetreatAfterBattle(this, battleActions));\nsteps.add(...<other steps>);\n\nList<String> stepNames = steps.stream()\n        .flatMap(step -> step.getNames().stream())\n        .collect(Collectors.toList());\n\nIn that case, both SubRetreatBeforeBattle and SubRetreatAfterBattle would extend SubRetreat but the first class would check for getSubRetreatBeforeBattle() == true while the second class would check if getSubRetreatBeforeBattle() == false.\nWhat would you prefer?  More classes or less classes?  Or maybe you have another idea on how to handle steps that don't have a static position in the order but can change depending on the state at the beginning of the round.", "url": "https://github.com/triplea-game/triplea/pull/6696#discussion_r441218764", "createdAt": "2020-06-17T00:46:53Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -71,9 +71,12 @@\n     final BattleStep airDefendVsNonSubs = new AirDefendVsNonSubsStep(this);\n \n     final List<String> steps = new ArrayList<>();\n-    steps.addAll(offensiveAaStep.getNames());\n-\n-    steps.addAll(defensiveAaStep.getNames());\n+    if (offensiveAaStep.getOrder() != BattleStep.Order.NOT_APPLICABLE) {\n+      steps.addAll(offensiveAaStep.getNames());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTU3Mg=="}, "originalCommit": {"oid": "f524e9819a292c6c3bfde535c7f4d90bb94088ca"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5ODY1Nw==", "bodyText": "@trevan\nI was thinking this:\n\nList<String> stepNames = steps.stream()\n        .sorted(Comparator.comparing(BattleStep::getOrder))\n        .flatMap(step -> step.getNames().stream())\n        .collect(Collectors.toList());\n\nIf you make BattleStep implement Comparable, perhaps could get even go simpler:\npublic interface BattleStep extends IExecutable, Comparable<BattleStep> {\n :\n :\n  @Override\n  default int compareTo(BattleStep rhs) {\n    return Integer.compare(getOrder().ordinal(), rhs.getOrder().ordinal());\n  }\n\nList<String> stepNames = steps.stream()\n        .sorted()\n        .flatMap(step -> step.getNames().stream())\n        .collect(Collectors.toList());", "url": "https://github.com/triplea-game/triplea/pull/6696#discussion_r441898657", "createdAt": "2020-06-18T00:08:23Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -71,9 +71,12 @@\n     final BattleStep airDefendVsNonSubs = new AirDefendVsNonSubsStep(this);\n \n     final List<String> steps = new ArrayList<>();\n-    steps.addAll(offensiveAaStep.getNames());\n-\n-    steps.addAll(defensiveAaStep.getNames());\n+    if (offensiveAaStep.getOrder() != BattleStep.Order.NOT_APPLICABLE) {\n+      steps.addAll(offensiveAaStep.getNames());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTU3Mg=="}, "originalCommit": {"oid": "f524e9819a292c6c3bfde535c7f4d90bb94088ca"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNzIxMA==", "bodyText": "@DanVanAtta so no pre filtering?  I'll try that out.  The existing code does do pre-filtering on the IExecutables that are added and I was trying to allow that with the NOT_APPLICABLE order but that might just be a relic.", "url": "https://github.com/triplea-game/triplea/pull/6696#discussion_r441907210", "createdAt": "2020-06-18T00:43:04Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -71,9 +71,12 @@\n     final BattleStep airDefendVsNonSubs = new AirDefendVsNonSubsStep(this);\n \n     final List<String> steps = new ArrayList<>();\n-    steps.addAll(offensiveAaStep.getNames());\n-\n-    steps.addAll(defensiveAaStep.getNames());\n+    if (offensiveAaStep.getOrder() != BattleStep.Order.NOT_APPLICABLE) {\n+      steps.addAll(offensiveAaStep.getNames());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTU3Mg=="}, "originalCommit": {"oid": "f524e9819a292c6c3bfde535c7f4d90bb94088ca"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwODM3NQ==", "bodyText": "Basically the filtering would be internalized to each BattleStep. Each one would be responsible to know if it applies and if so generating any necessary step names.", "url": "https://github.com/triplea-game/triplea/pull/6696#discussion_r441908375", "createdAt": "2020-06-18T00:48:05Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -71,9 +71,12 @@\n     final BattleStep airDefendVsNonSubs = new AirDefendVsNonSubsStep(this);\n \n     final List<String> steps = new ArrayList<>();\n-    steps.addAll(offensiveAaStep.getNames());\n-\n-    steps.addAll(defensiveAaStep.getNames());\n+    if (offensiveAaStep.getOrder() != BattleStep.Order.NOT_APPLICABLE) {\n+      steps.addAll(offensiveAaStep.getNames());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTU3Mg=="}, "originalCommit": {"oid": "f524e9819a292c6c3bfde535c7f4d90bb94088ca"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkyMTY1Nw==", "bodyText": "@DanVanAtta , I'm not just talking about step names but the executable part as well.  I'm worried about the lines such as:\n\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1105\n      in\n      f524e98\n    \n    \n    \n    \n\n        \n          \n           if (offensiveAaStep.getOrder() != BattleStep.Order.NOT_APPLICABLE) { \n        \n    \n  \n\n\n\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1118\n      in\n      f524e98\n    \n    \n    \n    \n\n        \n          \n           if (defensiveAaStep.getOrder() != BattleStep.Order.NOT_APPLICABLE) { \n        \n    \n  \n\n\n\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1131\n      in\n      f524e98\n    \n    \n    \n    \n\n        \n          \n           if (offensiveAa || defendingAa) { \n        \n    \n  \n\n\n\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1475\n      in\n      f524e98\n    \n    \n    \n    \n\n        \n          \n           if (Properties.getTransportCasualtiesRestricted(gameData)) { \n        \n    \n  \n\n\nI'm not entirely sure why the check for those steps is outside of the executable.  A check outside of the executable happens at the start of the round while the checks inside of the executable happen when the step actually happens.  So the checks are being done on different data.  Most of the executables have all their checks inside of them or the checks outside of them are just determining the order of the step.\nIt might be that I can move all of those checks inside of the executable so that they run when the step occurrs but I'm not positive at this moment in time and so the getOrder() != NOT_APPLICABLE was mainly for those steps.  I guess I can remove the NOT_APPLICABLE order and when I get to converting those steps, figure out if I need NOT_APPLICABLE or not.", "url": "https://github.com/triplea-game/triplea/pull/6696#discussion_r441921657", "createdAt": "2020-06-18T01:42:45Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -71,9 +71,12 @@\n     final BattleStep airDefendVsNonSubs = new AirDefendVsNonSubsStep(this);\n \n     final List<String> steps = new ArrayList<>();\n-    steps.addAll(offensiveAaStep.getNames());\n-\n-    steps.addAll(defensiveAaStep.getNames());\n+    if (offensiveAaStep.getOrder() != BattleStep.Order.NOT_APPLICABLE) {\n+      steps.addAll(offensiveAaStep.getNames());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTU3Mg=="}, "originalCommit": {"oid": "f524e9819a292c6c3bfde535c7f4d90bb94088ca"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkyMjAzNg==", "bodyText": "Oh, in addition, by not adding the step to the stack, they don't get saved in saved games.  That is another thing that I have to look into when I convert them.  By not having the getOrder() != NOT_APPLICABLE check, all of the steps will be added to the saved game, including ones that were previously not added.", "url": "https://github.com/triplea-game/triplea/pull/6696#discussion_r441922036", "createdAt": "2020-06-18T01:44:22Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -71,9 +71,12 @@\n     final BattleStep airDefendVsNonSubs = new AirDefendVsNonSubsStep(this);\n \n     final List<String> steps = new ArrayList<>();\n-    steps.addAll(offensiveAaStep.getNames());\n-\n-    steps.addAll(defensiveAaStep.getNames());\n+    if (offensiveAaStep.getOrder() != BattleStep.Order.NOT_APPLICABLE) {\n+      steps.addAll(offensiveAaStep.getNames());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTU3Mg=="}, "originalCommit": {"oid": "f524e9819a292c6c3bfde535c7f4d90bb94088ca"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkyOTk1NA==", "bodyText": "@DanVanAtta I've made the change.  I've also tested a scenario that would originally have had just offensive AA steps in the save and no defensive AA steps in the save.  I created a save with master and with this branch and then loaded both saves in this branch.  It loaded fine and it looks like it played out the rest of the round without issues.", "url": "https://github.com/triplea-game/triplea/pull/6696#discussion_r441929954", "createdAt": "2020-06-18T02:15:38Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -71,9 +71,12 @@\n     final BattleStep airDefendVsNonSubs = new AirDefendVsNonSubsStep(this);\n \n     final List<String> steps = new ArrayList<>();\n-    steps.addAll(offensiveAaStep.getNames());\n-\n-    steps.addAll(defensiveAaStep.getNames());\n+    if (offensiveAaStep.getOrder() != BattleStep.Order.NOT_APPLICABLE) {\n+      steps.addAll(offensiveAaStep.getNames());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTU3Mg=="}, "originalCommit": {"oid": "f524e9819a292c6c3bfde535c7f4d90bb94088ca"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjI5MQ==", "bodyText": "Interesting context, thank you. Sounds as though we should err on the side of caution.", "url": "https://github.com/triplea-game/triplea/pull/6696#discussion_r441972291", "createdAt": "2020-06-18T05:13:33Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -71,9 +71,12 @@\n     final BattleStep airDefendVsNonSubs = new AirDefendVsNonSubsStep(this);\n \n     final List<String> steps = new ArrayList<>();\n-    steps.addAll(offensiveAaStep.getNames());\n-\n-    steps.addAll(defensiveAaStep.getNames());\n+    if (offensiveAaStep.getOrder() != BattleStep.Order.NOT_APPLICABLE) {\n+      steps.addAll(offensiveAaStep.getNames());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMTU3Mg=="}, "originalCommit": {"oid": "f524e9819a292c6c3bfde535c7f4d90bb94088ca"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2155, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}