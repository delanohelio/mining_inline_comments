{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2Mjc4NTQ0", "number": 7645, "title": "Battle step cleanups", "bodyText": "This does various cleanups in the battle step classes and related methods.  Each commit is a different cleanup so you could look at them separately.\nThe cleanups are:\n45435df - Remove tests that are now redundant because of the battle step conversion and their individual tests\n175efd9 - Moves the save compatibility IExecutables to a separate location and uses stream/order/collect to get all of the steps instead of individually listing them.\n5357e71, 89f84a0, 8ac77a6 - Simplify the BattleState api by combining the Attacking/Defending methods to a single method that takes BattleState.Side.\nd8b4ad0 - Reworked BattleSteps to not implement BattleState but instead accept a BattleState parameter.  This reduces the number of BattleState implementations to 2 (MustFightBattle and FakeBattleState).\n44f1dce - Creates all of the BattleSteps in one location.  MustFightBattle currently uses it and BattleSteps will once the retreat steps have been converted.\nTesting\n\nI've loaded various saves and played a few variations.\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-09-14T01:40:46Z", "url": "https://github.com/triplea-game/triplea/pull/7645", "merged": true, "mergeCommit": {"oid": "43aba7e6a5c97038abd37852a9d658af8882b7d2"}, "closed": true, "closedAt": "2020-09-14T03:54:29Z", "author": {"login": "trevan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdImdH9AH2gAyNDg2Mjc4NTQ0OjQ1NDM1ZGYwMjcxZWI3ODA4ZDZkMjA2ZTRlY2QyOGIwODZjYmY2NzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdIq_tnAFqTQ4NzM5Nzc2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45435df0271eb7808d6d206e4ecd28b086cbf670", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/45435df0271eb7808d6d206e4ecd28b086cbf670", "committedDate": "2020-09-13T22:36:50Z", "message": "Remove tests duplicated by step tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "175efd9d8a68258e7c95e8ec240ba84c991390e4", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/175efd9d8a68258e7c95e8ec240ba84c991390e4", "committedDate": "2020-09-14T00:19:56Z", "message": "Simplify battle step generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5357e71af342b010b0cea626c8a805e63d432ff1", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/5357e71af342b010b0cea626c8a805e63d432ff1", "committedDate": "2020-09-14T00:19:56Z", "message": "Replace getAttacking/DefendingUnits with getUnits(...Side)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89f84a013feae7d574ef17cbc15a863c473b93c0", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/89f84a013feae7d574ef17cbc15a863c473b93c0", "committedDate": "2020-09-14T00:19:56Z", "message": "Replace getAttacking/DefendingWaitingToDie with getWaitingToDie(...Side)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ac77a65ddd38ba2d2f54d33cbbe616992959e4c", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/8ac77a65ddd38ba2d2f54d33cbbe616992959e4c", "committedDate": "2020-09-14T00:19:56Z", "message": "Replace getOffensive/DefendingAa with getAa(...Side)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8b4ad0f9aa5ba293ad2d7d3ada8e5aaccf20384", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/d8b4ad0f9aa5ba293ad2d7d3ada8e5aaccf20384", "committedDate": "2020-09-14T01:16:04Z", "message": "BattleSteps no longer implements BattleState"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44f1dce8f7ef266d47fd1e783c9086347edb426b", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/44f1dce8f7ef266d47fd1e783c9086347edb426b", "committedDate": "2020-09-14T01:27:33Z", "message": "Add static method to get list of all battle steps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6c7b8000bb273875adcdc91bfdac2acdbc80c93", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/d6c7b8000bb273875adcdc91bfdac2acdbc80c93", "committedDate": "2020-09-14T01:50:27Z", "message": "Codacy Collection.toArray issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3Mzk3NzYw", "url": "https://github.com/triplea-game/triplea/pull/7645#pullrequestreview-487397760", "createdAt": "2020-09-14T03:46:51Z", "commit": {"oid": "175efd9d8a68258e7c95e8ec240ba84c991390e4"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMzo0Njo1MVrOHRC89A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMzo1NDowMlrOHRDCig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzNjIxMg==", "bodyText": "The significance of this comment is not obvious to me. Should this comment be clarified to explain why it's important, or perhaps removed?", "url": "https://github.com/triplea-game/triplea/pull/7645#discussion_r487636212", "createdAt": "2020-09-14T03:46:51Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1039,49 +1035,60 @@ private void pushFightLoopOnStack() {\n    * It is allowed for an IExecutable to add other IExecutables to the stack. If you read the code\n    * in linear order, ignore wrapping stuff in anonymous IExecutables, then the code can be read as\n    * it will execute. The steps are added to the stack and then reversed at the end.\n-   *\n-   * <p>Save Game Compatibility Note:\n-   *\n-   * <p>Because of saved game compatibility issues, the original steps are left behind as inner\n-   * anonymous classes. The reason for this is that their class name is defined by the order in\n-   * which they are defined. As an example, the first inner anonymous class is MustFightBattle$0 and\n-   * the next one is MustFightBattle$1 and so on. When a saved game is deserialized, it will match\n-   * the step by the class name and so if the order of inner anonymous classes change, it will not\n-   * deserialize. So even though these old steps aren't being added to the steps array, they are\n-   * still needed. They can be safely removed once save compatibility can be broken.\n    */\n   @VisibleForTesting\n   public List<IExecutable> getBattleExecutables() {\n-    final List<IExecutable> steps = new ArrayList<>();\n-    addFightStartSteps(steps);\n-    addFightSteps(steps);\n-    addCheckEndBattleAndRetreatingSteps(steps);\n-    return steps;\n-  }\n-\n-  private void addFightStartSteps(final List<IExecutable> steps) {\n     if (offensiveAa == null) {\n       updateOffensiveAaUnits();\n     }\n     if (defendingAa == null) {\n       updateDefendingAaUnits();\n     }\n-    final List<BattleStep> startSteps =\n+    final List<BattleStep> battleSteps =\n         List.of(\n             new OffensiveAaFire(this, this),\n             new DefensiveAaFire(this, this),\n             new ClearAaCasualties(this, this),\n             new NavalBombardment(this, this),\n             new RemoveNonCombatants(this),\n             new LandParatroopers(this, this),\n-            new MarkNoMovementLeft(this, this));\n-    steps.addAll(\n-        startSteps.stream()\n+            new MarkNoMovementLeft(this, this),\n+            new OffensiveSubsRetreat(this, this),\n+            new DefensiveSubsRetreat(this, this),\n+            new OffensiveFirstStrike(this, this),\n+            new DefensiveFirstStrike(this, this),\n+            new ClearFirstStrikeCasualties(this, this),\n+            new OffensiveGeneral(this, this),\n+            new DefensiveGeneral(this, this),\n+            new RemoveUnprotectedUnits(this, this),\n+            new RemoveFirstStrikeSuicide(this, this),\n+            new SubmergeSubsVsOnlyAirStep(this, this));\n+    final List<IExecutable> steps =\n+        battleSteps.stream()\n             .sorted(Comparator.comparing(BattleStep::getOrder))\n-            .collect(Collectors.toList()));\n+            // *_AFTER_BATTLE order occurs in addCheckEndBattleAndRetreatingSteps()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175efd9d8a68258e7c95e8ec240ba84c991390e4"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzNjYyMw==", "bodyText": "There is now an annotation: @RemoveOnNextMajorRelease, perhaps that annotation can take the place of this comment?\nIMO it might make sense to add a \"default\" string to that annotation that we can use as a comment. Hence you could do something like:\n@RemoveOnNextMajorRelease(\"Anonymous inner class can be inlined\")", "url": "https://github.com/triplea-game/triplea/pull/7645#discussion_r487636623", "createdAt": "2020-09-14T03:48:58Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1039,49 +1035,60 @@ private void pushFightLoopOnStack() {\n    * It is allowed for an IExecutable to add other IExecutables to the stack. If you read the code\n    * in linear order, ignore wrapping stuff in anonymous IExecutables, then the code can be read as\n    * it will execute. The steps are added to the stack and then reversed at the end.\n-   *\n-   * <p>Save Game Compatibility Note:\n-   *\n-   * <p>Because of saved game compatibility issues, the original steps are left behind as inner\n-   * anonymous classes. The reason for this is that their class name is defined by the order in\n-   * which they are defined. As an example, the first inner anonymous class is MustFightBattle$0 and\n-   * the next one is MustFightBattle$1 and so on. When a saved game is deserialized, it will match\n-   * the step by the class name and so if the order of inner anonymous classes change, it will not\n-   * deserialize. So even though these old steps aren't being added to the steps array, they are\n-   * still needed. They can be safely removed once save compatibility can be broken.\n    */\n   @VisibleForTesting\n   public List<IExecutable> getBattleExecutables() {\n-    final List<IExecutable> steps = new ArrayList<>();\n-    addFightStartSteps(steps);\n-    addFightSteps(steps);\n-    addCheckEndBattleAndRetreatingSteps(steps);\n-    return steps;\n-  }\n-\n-  private void addFightStartSteps(final List<IExecutable> steps) {\n     if (offensiveAa == null) {\n       updateOffensiveAaUnits();\n     }\n     if (defendingAa == null) {\n       updateDefendingAaUnits();\n     }\n-    final List<BattleStep> startSteps =\n+    final List<BattleStep> battleSteps =\n         List.of(\n             new OffensiveAaFire(this, this),\n             new DefensiveAaFire(this, this),\n             new ClearAaCasualties(this, this),\n             new NavalBombardment(this, this),\n             new RemoveNonCombatants(this),\n             new LandParatroopers(this, this),\n-            new MarkNoMovementLeft(this, this));\n-    steps.addAll(\n-        startSteps.stream()\n+            new MarkNoMovementLeft(this, this),\n+            new OffensiveSubsRetreat(this, this),\n+            new DefensiveSubsRetreat(this, this),\n+            new OffensiveFirstStrike(this, this),\n+            new DefensiveFirstStrike(this, this),\n+            new ClearFirstStrikeCasualties(this, this),\n+            new OffensiveGeneral(this, this),\n+            new DefensiveGeneral(this, this),\n+            new RemoveUnprotectedUnits(this, this),\n+            new RemoveFirstStrikeSuicide(this, this),\n+            new SubmergeSubsVsOnlyAirStep(this, this));\n+    final List<IExecutable> steps =\n+        battleSteps.stream()\n             .sorted(Comparator.comparing(BattleStep::getOrder))\n-            .collect(Collectors.toList()));\n+            // *_AFTER_BATTLE order occurs in addCheckEndBattleAndRetreatingSteps()\n+            .filter(\n+                step ->\n+                    step.getOrder() != SUB_OFFENSIVE_RETREAT_AFTER_BATTLE\n+                        && step.getOrder() != SUB_DEFENSIVE_RETREAT_AFTER_BATTLE)\n+            .collect(Collectors.toList());\n+\n+    addCheckEndBattleAndRetreatingSteps(steps);\n+    return steps;\n   }\n \n-  // the IExecutables in this block can be deleted when save compatibility can be broken\n+  /*\n+   *\n+   * <p> Save Game Compatibility Note:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175efd9d8a68258e7c95e8ec240ba84c991390e4"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzNjg1Ng==", "bodyText": "Ditto on perhaps use @RemoveOnNextMajorRelease with a comment that the value is not used.", "url": "https://github.com/triplea-game/triplea/pull/7645#discussion_r487636856", "createdAt": "2020-09-14T03:50:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1169,6 +1176,125 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n         markNoMovementLeft.execute(stack, bridge);\n       }\n     };\n+    new IExecutable() {\n+      private static final long serialVersionUID = 6775880082912594489L;\n+\n+      @Override\n+      public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+        final BattleStep offensiveSubsRetreat =\n+            new OffensiveSubsRetreat(MustFightBattle.this, MustFightBattle.this);\n+        if (offensiveSubsRetreat.getOrder() == SUB_OFFENSIVE_RETREAT_BEFORE_BATTLE) {\n+          offensiveSubsRetreat.execute(stack, bridge);\n+        }\n+      }\n+    };\n+    new IExecutable() {\n+      private static final long serialVersionUID = 7056448091800764539L;\n+\n+      @Override\n+      public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+        final BattleStep defensiveSubsRetreat =\n+            new DefensiveSubsRetreat(MustFightBattle.this, MustFightBattle.this);\n+        if (defensiveSubsRetreat.getOrder() == SUB_DEFENSIVE_RETREAT_BEFORE_BATTLE) {\n+          defensiveSubsRetreat.execute(stack, bridge);\n+        }\n+      }\n+    };\n+    new IExecutable() {\n+      private static final long serialVersionUID = 99989L;\n+\n+      @Override\n+      public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+        new RemoveUnprotectedUnits(MustFightBattle.this, MustFightBattle.this)\n+            .execute(stack, bridge);\n+      }\n+    };\n+    new IExecutable() {\n+      private static final long serialVersionUID = 99990L;\n+\n+      @Override\n+      public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+        final BattleStep submergeSubsVsOnlyAir =\n+            new SubmergeSubsVsOnlyAirStep(MustFightBattle.this, MustFightBattle.this);\n+        submergeSubsVsOnlyAir.execute(stack, bridge);\n+      }\n+    };\n+    new IExecutable() {\n+      private static final long serialVersionUID = 99992L;\n+\n+      @Override\n+      public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+        new DefensiveFirstStrike(MustFightBattle.this, MustFightBattle.this, ReturnFire.NONE)\n+            .execute(stack, bridge);\n+      }\n+    };\n+    // these two variables are needed for save compatibility\n+    // the value of the variables aren't important now, but they must\n+    // be defined in the same scope as the IExecutables so that when\n+    // the save is loaded, it will correctly populate the saved value\n+    // of these variables.\n+    final ReturnFire returnFireAgainstAttackingSubs = ReturnFire.ALL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175efd9d8a68258e7c95e8ec240ba84c991390e4"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzNzAwNA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/7645#discussion_r487637004", "createdAt": "2020-09-14T03:50:46Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleState.java", "diffHunk": "@@ -28,13 +27,9 @@ public Side getOpposite() {\n \n   Collection<Unit> getUnits(Side... sides);\n \n-  Collection<Unit> getAttackingWaitingToDie();\n+  Collection<Unit> getWaitingToDie(Side... sides);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f84a013feae7d574ef17cbc15a863c473b93c0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzNzM0Nw==", "bodyText": "One would hope that battle state would take care of its own state, notably it would know when units should be cleared. This kind of API hints that this is more of a value object (or even a parameter) object, in which case having an interface at all is a bit overkill. No recommendation here, just noting the code smell here, that perhaps more logic needs to be moved into the class or it needs to have a pivot such that it's broken up and functionality injected into an imperative shell type of class.", "url": "https://github.com/triplea-game/triplea/pull/7645#discussion_r487637347", "createdAt": "2020-09-14T03:52:33Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleState.java", "diffHunk": "@@ -28,13 +27,9 @@ public Side getOpposite() {\n \n   Collection<Unit> getUnits(Side... sides);\n \n-  Collection<Unit> getAttackingWaitingToDie();\n+  Collection<Unit> getWaitingToDie(Side... sides);\n \n-  Collection<Unit> getDefendingWaitingToDie();\n-\n-  Collection<Unit> getWaitingToDie(EnumSet<Side> sides);\n-\n-  void clearWaitingToDie(EnumSet<Side> sides);\n+  void clearWaitingToDie(Side... sides);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f84a013feae7d574ef17cbc15a863c473b93c0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzNzY0Mg==", "bodyText": "nice \ud83d\ude01", "url": "https://github.com/triplea-game/triplea/pull/7645#discussion_r487637642", "createdAt": "2020-09-14T03:54:02Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -50,4 +71,27 @@\n \n   /** @return The order in which this step should be called */\n   Order getOrder();\n+\n+  static List<BattleStep> getAll(final BattleState battleState, final BattleActions battleActions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f1dce8f7ef266d47fd1e783c9086347edb426b"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3919, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}