{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMTEzNDc3", "number": 7900, "title": "Add tests for FiringGroup", "bodyText": "This is part of #7823\nI noticed that I had missed this test when I created the FiringGroup PR.  It also helped find a bug that snuck in during some of the reworking of the code during its PR, so that is fixed as part of this.\nTesting\n\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-10-14T05:19:31Z", "url": "https://github.com/triplea-game/triplea/pull/7900", "merged": true, "mergeCommit": {"oid": "d58fda54cc4baaa07963e69873dac6f533267eca"}, "closed": true, "closedAt": "2020-10-20T00:33:59Z", "author": {"login": "trevan"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSWK6PAH2gAyNTAzMTEzNDc3OmNlYjgwMGM0MDY1Mzg0NGQzNGU3MTY3YzI5Yjg4ZmIwYjdkM2U4MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUNtOWgFqTUxMjI1MDczMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ceb800c40653844d34e7167c29b88fb0b7d3e810", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/ceb800c40653844d34e7167c29b88fb0b7d3e810", "committedDate": "2020-10-14T05:17:42Z", "message": "Add tests for FiringGroup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMDE4Njc4", "url": "https://github.com/triplea-game/triplea/pull/7900#pullrequestreview-511018678", "createdAt": "2020-10-17T22:18:14Z", "commit": {"oid": "ceb800c40653844d34e7167c29b88fb0b7d3e810"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMjoxODoxNVrOHjgMuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMjoxODoxNVrOHjgMuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4OTc1Mg==", "bodyText": "nit, the assertion hasSize(1) already says there should be one group, what is not said though is why?", "url": "https://github.com/triplea-game/triplea/pull/7900#discussion_r506989752", "createdAt": "2020-10-17T22:18:15Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import java.util.Comparator;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FiringGroupTest {\n+\n+  @Mock GameData gameData;\n+  @Mock GamePlayer player;\n+\n+  @Test\n+  public void onlyOneGroupIfNoSuicideOnHit() {\n+    final List<Unit> units =\n+        List.of(\n+            givenUnitWithSuicideOnHit(\"type1\", false), givenUnitWithSuicideOnHit(\"type2\", false));\n+    final List<FiringGroup> groups =\n+        FiringGroup.groupBySuicideOnHit(\"test\", units, List.of(mock(Unit.class)));\n+    assertThat(\"There should only be one group\", groups, hasSize(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb800c40653844d34e7167c29b88fb0b7d3e810"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMDE5NTQ2", "url": "https://github.com/triplea-game/triplea/pull/7900#pullrequestreview-511019546", "createdAt": "2020-10-17T22:37:16Z", "commit": {"oid": "ceb800c40653844d34e7167c29b88fb0b7d3e810"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMjozNzoxNlrOHjgScw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMjo0MTo0MlrOHjgTvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5MTIxOQ==", "bodyText": "Nit, the method name \" givenUnitWithSuicideOnHit(\"type1\", false)\" is a bit akward with those parameters. I would have expected it to always return a unit with suicide on hit. Boolean parameters are generally evil, so one thing we can do is to create two methods for both cases and that would help with the naming problem. Then it would be:\ngivenUnitWithTypeNameAndSuicideOnHit(\"type1\")\ngivenUnitWithTypeNameWithoutSuicideOnHit(\"type2\")\n\nThough, TBH we would do well if we could create a value object out of this and avoid mocks. That makes me think that the API we are testing should accept the property values rather than the actual unit type object.\nIf we keep the boolean parameter, then perhaps a more descriptive method name would be:\ngivenUnitWithTypeAndHasSuicideOnHit(...)", "url": "https://github.com/triplea-game/triplea/pull/7900#discussion_r506991219", "createdAt": "2020-10-17T22:37:16Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import java.util.Comparator;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FiringGroupTest {\n+\n+  @Mock GameData gameData;\n+  @Mock GamePlayer player;\n+\n+  @Test\n+  public void onlyOneGroupIfNoSuicideOnHit() {\n+    final List<Unit> units =\n+        List.of(\n+            givenUnitWithSuicideOnHit(\"type1\", false), givenUnitWithSuicideOnHit(\"type2\", false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb800c40653844d34e7167c29b88fb0b7d3e810"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5MTM2MQ==", "bodyText": "These two lines are pretty overwhelming to read, lots of \"givenUnitWithSuicideOnHit\", IMO the method names blur together and it becomes hard to tell exactly which API overload is being invoked where.\nAn intermediate variable could help, eg:\nfinal var unitType = givenUnitTypeWithSuicideOnHit(typeName, suicideOnHit);\nreturn givenUnitWithSuicideOnHit(unitType);", "url": "https://github.com/triplea-game/triplea/pull/7900#discussion_r506991361", "createdAt": "2020-10-17T22:39:17Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import java.util.Comparator;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FiringGroupTest {\n+\n+  @Mock GameData gameData;\n+  @Mock GamePlayer player;\n+\n+  @Test\n+  public void onlyOneGroupIfNoSuicideOnHit() {\n+    final List<Unit> units =\n+        List.of(\n+            givenUnitWithSuicideOnHit(\"type1\", false), givenUnitWithSuicideOnHit(\"type2\", false));\n+    final List<FiringGroup> groups =\n+        FiringGroup.groupBySuicideOnHit(\"test\", units, List.of(mock(Unit.class)));\n+    assertThat(\"There should only be one group\", groups, hasSize(1));\n+    assertThat(\"The group name should have no prefix\", groups.get(0).getDisplayName(), is(\"test\"));\n+    assertThat(\n+        \"The group should have all of the units\",\n+        groups.get(0).getFiringUnits().toArray(),\n+        is(units.toArray()));\n+    assertThat(\"The group should not be suicide on hit\", groups.get(0).isSuicideOnHit(), is(false));\n+  }\n+\n+  private Unit givenUnitWithSuicideOnHit(final String typeName, final boolean suicideOnHit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb800c40653844d34e7167c29b88fb0b7d3e810"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5MTU1MQ==", "bodyText": "Where does the \"test\" value come from? Can we add that as a parameter to the data setup within this method so that it can be easily correlated when someone is looking at this test? If not, a reference to the value rather than hardcoding would be another way to lead a reader to where the value is coming from.", "url": "https://github.com/triplea-game/triplea/pull/7900#discussion_r506991551", "createdAt": "2020-10-17T22:41:42Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import java.util.Comparator;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FiringGroupTest {\n+\n+  @Mock GameData gameData;\n+  @Mock GamePlayer player;\n+\n+  @Test\n+  public void onlyOneGroupIfNoSuicideOnHit() {\n+    final List<Unit> units =\n+        List.of(\n+            givenUnitWithSuicideOnHit(\"type1\", false), givenUnitWithSuicideOnHit(\"type2\", false));\n+    final List<FiringGroup> groups =\n+        FiringGroup.groupBySuicideOnHit(\"test\", units, List.of(mock(Unit.class)));\n+    assertThat(\"There should only be one group\", groups, hasSize(1));\n+    assertThat(\"The group name should have no prefix\", groups.get(0).getDisplayName(), is(\"test\"));\n+    assertThat(\n+        \"The group should have all of the units\",\n+        groups.get(0).getFiringUnits().toArray(),\n+        is(units.toArray()));\n+    assertThat(\"The group should not be suicide on hit\", groups.get(0).isSuicideOnHit(), is(false));\n+  }\n+\n+  private Unit givenUnitWithSuicideOnHit(final String typeName, final boolean suicideOnHit) {\n+    return givenUnitWithSuicideOnHit(givenUnitTypeWithSuicideOnHit(typeName, suicideOnHit));\n+  }\n+\n+  private Unit givenUnitWithSuicideOnHit(final UnitType unitType) {\n+    return unitType.create(1, player, true).get(0);\n+  }\n+\n+  private UnitType givenUnitTypeWithSuicideOnHit(\n+      final String typeName, final boolean suicideOnHit) {\n+    final UnitType unitType = new UnitType(typeName, gameData);\n+    final UnitAttachment unitAttachment = new UnitAttachment(\"attachment\", unitType, gameData);\n+    unitType.addAttachment(UNIT_ATTACHMENT_NAME, unitAttachment);\n+    unitAttachment.setIsSuicideOnHit(suicideOnHit);\n+    return unitType;\n+  }\n+\n+  @Test\n+  public void onlyOneGroupIfSameTypeAndSuicide() {\n+    final UnitType unitType = givenUnitTypeWithSuicideOnHit(\"type\", true);\n+    final List<Unit> units =\n+        List.of(givenUnitWithSuicideOnHit(unitType), givenUnitWithSuicideOnHit(unitType));\n+    final List<FiringGroup> groups =\n+        FiringGroup.groupBySuicideOnHit(\"test\", units, List.of(mock(Unit.class)));\n+    assertThat(\"There should only be one group\", groups, hasSize(1));\n+    assertThat(\"The group name should have no prefix\", groups.get(0).getDisplayName(), is(\"test\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb800c40653844d34e7167c29b88fb0b7d3e810"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be3c56f8584c5c79278a301b8799e305020a42b3", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/be3c56f8584c5c79278a301b8799e305020a42b3", "committedDate": "2020-10-19T03:28:46Z", "message": "Create a default unit type in the test helper and set suicide individually"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjUwNzMz", "url": "https://github.com/triplea-game/triplea/pull/7900#pullrequestreview-512250733", "createdAt": "2020-10-20T00:33:53Z", "commit": {"oid": "be3c56f8584c5c79278a301b8799e305020a42b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3892, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}