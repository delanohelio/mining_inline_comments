{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNDczODQ1", "number": 8023, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMTowODoxMlrOE0GJfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMTowODo1OFrOE0GJnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDYyMTQzOnYy", "diffSide": "LEFT", "path": "game-core/src/main/java/games/strategy/engine/data/gameparser/GameParser.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMTowODoxMlrOHrrUEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMTo1NDoyMlrOHrrgOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MDQ2NA==", "bodyText": "Would you mind explaining why this if block is moved down @trevan ?\nIf we are going to ignore an option, why should we execute option.getValue() or option.getCount(), wouldn't those just be dead stores?", "url": "https://github.com/triplea-game/triplea/pull/8023#discussion_r515560464", "createdAt": "2020-11-01T01:08:12Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/data/gameparser/GameParser.java", "diffHunk": "@@ -895,16 +895,16 @@ private Attachable findAttachment(\n       }\n       // decapitalize the property name for backwards compatibility\n       final String name = LegacyPropertyMapper.mapLegacyOptionName(decapitalize(option.getName()));\n-      if (LegacyPropertyMapper.ignoreOptionName(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ce8915f03453980a3ff58dbf8413a2c95154ae"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MTYwMQ==", "bodyText": "I moved it because I needed access to option.getValue() and I thought it would make more sense to use the local variable value that was going to be created vs passing in option.getValue().  But I can move it back up and pass in option.getValue().", "url": "https://github.com/triplea-game/triplea/pull/8023#discussion_r515561601", "createdAt": "2020-11-01T01:23:55Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/engine/data/gameparser/GameParser.java", "diffHunk": "@@ -895,16 +895,16 @@ private Attachable findAttachment(\n       }\n       // decapitalize the property name for backwards compatibility\n       final String name = LegacyPropertyMapper.mapLegacyOptionName(decapitalize(option.getName()));\n-      if (LegacyPropertyMapper.ignoreOptionName(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MDQ2NA=="}, "originalCommit": {"oid": "02ce8915f03453980a3ff58dbf8413a2c95154ae"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MzU3OQ==", "bodyText": "The local variable IMO is legacy, it's an unnecessary intermediate variable. This class in general followed a C++ pattern (if not older actually, maybe a C pattern or even Pascal) to declar all local variables at the beginning of a method. IMO all usages of 'value' probably should just get inlined.\nI did not spot you were using the value variable. That answers my question.", "url": "https://github.com/triplea-game/triplea/pull/8023#discussion_r515563579", "createdAt": "2020-11-01T01:54:22Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/data/gameparser/GameParser.java", "diffHunk": "@@ -895,16 +895,16 @@ private Attachable findAttachment(\n       }\n       // decapitalize the property name for backwards compatibility\n       final String name = LegacyPropertyMapper.mapLegacyOptionName(decapitalize(option.getName()));\n-      if (LegacyPropertyMapper.ignoreOptionName(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MDQ2NA=="}, "originalCommit": {"oid": "02ce8915f03453980a3ff58dbf8413a2c95154ae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDYyMTczOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/data/gameparser/LegacyPropertyMapper.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMTowODo1OFrOHrrUNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMjoxNTo0NVrOHrrl-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MDUwMQ==", "bodyText": "Are you positive that value could never be null here? I don't remember if we translate empty values to empty strings or null values.", "url": "https://github.com/triplea-game/triplea/pull/8023#discussion_r515560501", "createdAt": "2020-11-01T01:08:58Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/data/gameparser/LegacyPropertyMapper.java", "diffHunk": "@@ -55,7 +55,9 @@ public String mapPropertyName(final String propertyName) {\n     return propertyName;\n   }\n \n-  static boolean ignoreOptionName(final String name) {\n-    return name.equalsIgnoreCase(\"takeUnitControl\") || name.equalsIgnoreCase(\"giveUnitControl\");\n+  static boolean ignoreOptionName(final String name, final String value) {\n+    return name.equalsIgnoreCase(\"takeUnitControl\")\n+        || (name.equalsIgnoreCase(\"giveUnitControl\")\n+            && (value.equals(\"false\") || value.equals(\"true\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ce8915f03453980a3ff58dbf8413a2c95154ae"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MTg2Nw==", "bodyText": "value is never checked for null in the caller before using (see line 908 in GameParser) so I don't think it would ever be null.", "url": "https://github.com/triplea-game/triplea/pull/8023#discussion_r515561867", "createdAt": "2020-11-01T01:26:56Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/engine/data/gameparser/LegacyPropertyMapper.java", "diffHunk": "@@ -55,7 +55,9 @@ public String mapPropertyName(final String propertyName) {\n     return propertyName;\n   }\n \n-  static boolean ignoreOptionName(final String name) {\n-    return name.equalsIgnoreCase(\"takeUnitControl\") || name.equalsIgnoreCase(\"giveUnitControl\");\n+  static boolean ignoreOptionName(final String name, final String value) {\n+    return name.equalsIgnoreCase(\"takeUnitControl\")\n+        || (name.equalsIgnoreCase(\"giveUnitControl\")\n+            && (value.equals(\"false\") || value.equals(\"true\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MDUwMQ=="}, "originalCommit": {"oid": "02ce8915f03453980a3ff58dbf8413a2c95154ae"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2Mzc0Mg==", "bodyText": "Considering we just had a NPE in GameParser, I would not presume it to be already correct. Another consideration, the 'value' is very context dependent, a DTD previously would have enforced values being provided, that is not necessarily guaranteed now.\nI wonder if there is any type of test coverage around this at all that could/should be updated.", "url": "https://github.com/triplea-game/triplea/pull/8023#discussion_r515563742", "createdAt": "2020-11-01T01:56:35Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/data/gameparser/LegacyPropertyMapper.java", "diffHunk": "@@ -55,7 +55,9 @@ public String mapPropertyName(final String propertyName) {\n     return propertyName;\n   }\n \n-  static boolean ignoreOptionName(final String name) {\n-    return name.equalsIgnoreCase(\"takeUnitControl\") || name.equalsIgnoreCase(\"giveUnitControl\");\n+  static boolean ignoreOptionName(final String name, final String value) {\n+    return name.equalsIgnoreCase(\"takeUnitControl\")\n+        || (name.equalsIgnoreCase(\"giveUnitControl\")\n+            && (value.equals(\"false\") || value.equals(\"true\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MDUwMQ=="}, "originalCommit": {"oid": "02ce8915f03453980a3ff58dbf8413a2c95154ae"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2NDAyNg==", "bodyText": "Hmm, I may be wrong about the DTD previously requiring a specific value, I'm not sure if it can constrain attribute values vs just requiring them being there. Regardless, it is context dependent if we can expect a value.", "url": "https://github.com/triplea-game/triplea/pull/8023#discussion_r515564026", "createdAt": "2020-11-01T02:00:37Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/data/gameparser/LegacyPropertyMapper.java", "diffHunk": "@@ -55,7 +55,9 @@ public String mapPropertyName(final String propertyName) {\n     return propertyName;\n   }\n \n-  static boolean ignoreOptionName(final String name) {\n-    return name.equalsIgnoreCase(\"takeUnitControl\") || name.equalsIgnoreCase(\"giveUnitControl\");\n+  static boolean ignoreOptionName(final String name, final String value) {\n+    return name.equalsIgnoreCase(\"takeUnitControl\")\n+        || (name.equalsIgnoreCase(\"giveUnitControl\")\n+            && (value.equals(\"false\") || value.equals(\"true\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MDUwMQ=="}, "originalCommit": {"oid": "02ce8915f03453980a3ff58dbf8413a2c95154ae"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2NDE5NA==", "bodyText": "Good point on the NPE.  It will now skip giveUnitControl if the value is null as well as true or false.\nThere is some test coverage but it requires creating a brand new xml with these attributes in it.  I'm looking at if there is a way to be able to create the xml in memory instead of committing the xml as a resource.", "url": "https://github.com/triplea-game/triplea/pull/8023#discussion_r515564194", "createdAt": "2020-11-01T02:03:24Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/engine/data/gameparser/LegacyPropertyMapper.java", "diffHunk": "@@ -55,7 +55,9 @@ public String mapPropertyName(final String propertyName) {\n     return propertyName;\n   }\n \n-  static boolean ignoreOptionName(final String name) {\n-    return name.equalsIgnoreCase(\"takeUnitControl\") || name.equalsIgnoreCase(\"giveUnitControl\");\n+  static boolean ignoreOptionName(final String name, final String value) {\n+    return name.equalsIgnoreCase(\"takeUnitControl\")\n+        || (name.equalsIgnoreCase(\"giveUnitControl\")\n+            && (value.equals(\"false\") || value.equals(\"true\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MDUwMQ=="}, "originalCommit": {"oid": "02ce8915f03453980a3ff58dbf8413a2c95154ae"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2NTA0OA==", "bodyText": "If we can get away from XMLs for testing, that would be excellent.\nThe decoupling of XML parsing from the semantic data parsing into GameData was meant to help with this.\nOne should be able to set up a org.triplea.map.data.elements.Game object and then pass that to GameParser and avoid having to set up an XML. The former is well tested for a variety of XML snippets, so we can be pretty sure how that works. It should have some existing tests that might be interesting to know if we null out empty values. Beyond that, sending GameParser a defined Game object hopefully can do the trick. GameParser is still very rough, so it might take some plumbing work to accept a Game object here. Let me know if that turns out to be the case, for now a manual verification is enough or you can go the extra mile if you feel it's worthwhile given the context acquisition cost you will have payed.", "url": "https://github.com/triplea-game/triplea/pull/8023#discussion_r515565048", "createdAt": "2020-11-01T02:15:45Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/data/gameparser/LegacyPropertyMapper.java", "diffHunk": "@@ -55,7 +55,9 @@ public String mapPropertyName(final String propertyName) {\n     return propertyName;\n   }\n \n-  static boolean ignoreOptionName(final String name) {\n-    return name.equalsIgnoreCase(\"takeUnitControl\") || name.equalsIgnoreCase(\"giveUnitControl\");\n+  static boolean ignoreOptionName(final String name, final String value) {\n+    return name.equalsIgnoreCase(\"takeUnitControl\")\n+        || (name.equalsIgnoreCase(\"giveUnitControl\")\n+            && (value.equals(\"false\") || value.equals(\"true\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2MDUwMQ=="}, "originalCommit": {"oid": "02ce8915f03453980a3ff58dbf8413a2c95154ae"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2783, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}