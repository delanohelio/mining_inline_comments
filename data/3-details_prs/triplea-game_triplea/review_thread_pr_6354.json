{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMTUxNTg4", "number": 6354, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMFrOD35VLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo0NTozM1rOD4Btfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTM3NTgwOnYy", "diffSide": "RIGHT", "path": "http-server/src/test/java/org/triplea/db/dao/moderator/player/info/PlayerInfoForModeratorDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMFrOGOaQpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMFrOGOaQpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2MzQ5Mg==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r417763492", "createdAt": "2020-04-30T05:36:00Z", "author": {"login": "codeclimate"}, "path": "http-server/src/test/java/org/triplea/db/dao/moderator/player/info/PlayerInfoForModeratorDaoTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.triplea.db.dao.moderator.player.info;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.hamcrest.collection.IsEmptyCollection.empty;\n+import static org.hamcrest.core.Is.is;\n+import static org.triplea.test.common.IsInstant.isInstant;\n+\n+import com.github.database.rider.core.api.dataset.DataSet;\n+import java.util.List;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.triplea.db.dao.DaoTest;\n+\n+class PlayerInfoForModeratorDaoTest extends DaoTest {\n+\n+  private final PlayerInfoForModeratorDao playerInfoForModeratorDao =\n+      DaoTest.newDao(PlayerInfoForModeratorDao.class);\n+\n+  @Nested\n+  @DataSet(\n+      cleanBefore = true,\n+      value = \"moderator_player_lookup/lookup_player_aliases_select_data.yml\")\n+  class LookupPlayerAliases {\n+    @Test\n+    void lookupEmptyCase() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id-dne\", \"9.9.9.9\");\n+\n+      assertThat(results, is(empty()));\n+    }\n+\n+    @Test\n+    void lookupByBothSystemIdAndIp() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id\", \"1.1.1.1\");\n+\n+      assertThat(\n+          \"There are 6 records in the dataset, \"\n+              + \"we expect 4 to match, and 2 of them to be de-duped by name\"\n+              + \"with only the most recent de-duped record returned\",\n+          results,\n+          hasSize(3));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name3\"));\n+      assertThat(results.get(0).getIp(), is(\"2.2.2.2\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(0).getDate(), isInstant(2154, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(1).getUsername(), is(\"name2\"));\n+      assertThat(results.get(1).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(1).getSystemId(), is(\"system-id2\"));\n+      assertThat(results.get(1).getDate(), isInstant(2152, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(2).getUsername(), is(\"name1\"));\n+      assertThat(results.get(2).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(2).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(2).getDate(), isInstant(2151, 1, 1, 23, 59, 20));\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTM3NTgyOnYy", "diffSide": "RIGHT", "path": "http-server/src/test/java/org/triplea/db/dao/moderator/player/info/PlayerInfoForModeratorDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMFrOGOaQpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMFrOGOaQpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2MzQ5NQ==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r417763495", "createdAt": "2020-04-30T05:36:00Z", "author": {"login": "codeclimate"}, "path": "http-server/src/test/java/org/triplea/db/dao/moderator/player/info/PlayerInfoForModeratorDaoTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.triplea.db.dao.moderator.player.info;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.hamcrest.collection.IsEmptyCollection.empty;\n+import static org.hamcrest.core.Is.is;\n+import static org.triplea.test.common.IsInstant.isInstant;\n+\n+import com.github.database.rider.core.api.dataset.DataSet;\n+import java.util.List;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.triplea.db.dao.DaoTest;\n+\n+class PlayerInfoForModeratorDaoTest extends DaoTest {\n+\n+  private final PlayerInfoForModeratorDao playerInfoForModeratorDao =\n+      DaoTest.newDao(PlayerInfoForModeratorDao.class);\n+\n+  @Nested\n+  @DataSet(\n+      cleanBefore = true,\n+      value = \"moderator_player_lookup/lookup_player_aliases_select_data.yml\")\n+  class LookupPlayerAliases {\n+    @Test\n+    void lookupEmptyCase() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id-dne\", \"9.9.9.9\");\n+\n+      assertThat(results, is(empty()));\n+    }\n+\n+    @Test\n+    void lookupByBothSystemIdAndIp() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id\", \"1.1.1.1\");\n+\n+      assertThat(\n+          \"There are 6 records in the dataset, \"\n+              + \"we expect 4 to match, and 2 of them to be de-duped by name\"\n+              + \"with only the most recent de-duped record returned\",\n+          results,\n+          hasSize(3));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name3\"));\n+      assertThat(results.get(0).getIp(), is(\"2.2.2.2\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(0).getDate(), isInstant(2154, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(1).getUsername(), is(\"name2\"));\n+      assertThat(results.get(1).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(1).getSystemId(), is(\"system-id2\"));\n+      assertThat(results.get(1).getDate(), isInstant(2152, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(2).getUsername(), is(\"name1\"));\n+      assertThat(results.get(2).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(2).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(2).getDate(), isInstant(2151, 1, 1, 23, 59, 20));\n+    }\n+\n+    @Test\n+    void lookupWithOnlyIpMatching() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id-dne\", \"2.2.2.2\");\n+\n+      assertThat(\"We expect to only match the one record with IP 2.2.2.2\", results, hasSize(1));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name3\"));\n+      assertThat(results.get(0).getIp(), is(\"2.2.2.2\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(0).getDate(), isInstant(2154, 1, 1, 23, 59, 20));\n+    }\n+\n+    @Test\n+    void lookupWithOnlySystemIdMatching() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id2\", \"9.9.9.9\");\n+\n+      assertThat(\n+          \"We expect to only match the 1 record with system 'system-id2'\", results, hasSize(1));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name2\"));\n+      assertThat(results.get(0).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id2\"));\n+      assertThat(results.get(0).getDate(), isInstant(2152, 1, 1, 23, 59, 20));\n+    }\n+  }\n+\n+  @Nested\n+  @DataSet(cleanBefore = true, value = \"moderator_player_lookup/lookup_player_bans_select_data.yml\")\n+  class LookupPlayerBans {\n+    @Test\n+    void emptyLookupCase() {\n+      final List<PlayerBanRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerBanRecords(\"system-id-dne\", \"9.9.9.9\");\n+\n+      assertThat(results, is(empty()));\n+    }\n+\n+    @Test\n+    void lookupByBothSystemIdAndIp() {\n+      final List<PlayerBanRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerBanRecords(\"system-id\", \"1.1.1.1\");\n+\n+      assertThat(results, hasSize(3));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name1\"));\n+      assertThat(results.get(0).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(0).getBanStart(), isInstant(2010, 1, 1, 23, 59, 20));\n+      assertThat(results.get(0).getBanEnd(), isInstant(2100, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(1).getUsername(), is(\"name2\"));\n+      assertThat(results.get(1).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(1).getSystemId(), is(\"system-id2\"));\n+      assertThat(results.get(1).getBanStart(), isInstant(2000, 1, 1, 23, 59, 20));\n+      assertThat(results.get(1).getBanEnd(), isInstant(2050, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(2).getUsername(), is(\"name2\"));\n+      assertThat(results.get(2).getIp(), is(\"2.2.2.2\"));\n+      assertThat(results.get(2).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(2).getBanStart(), isInstant(2000, 1, 1, 23, 59, 20));\n+      assertThat(results.get(2).getBanEnd(), isInstant(2010, 1, 1, 23, 59, 20));\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTM3NTgzOnYy", "diffSide": "RIGHT", "path": "http-server/src/test/java/org/triplea/db/dao/moderator/player/info/PlayerInfoForModeratorDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMFrOGOaQqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMFrOGOaQqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2MzQ5Ng==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r417763496", "createdAt": "2020-04-30T05:36:00Z", "author": {"login": "codeclimate"}, "path": "http-server/src/test/java/org/triplea/db/dao/moderator/player/info/PlayerInfoForModeratorDaoTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.triplea.db.dao.moderator.player.info;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.hamcrest.collection.IsEmptyCollection.empty;\n+import static org.hamcrest.core.Is.is;\n+import static org.triplea.test.common.IsInstant.isInstant;\n+\n+import com.github.database.rider.core.api.dataset.DataSet;\n+import java.util.List;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.triplea.db.dao.DaoTest;\n+\n+class PlayerInfoForModeratorDaoTest extends DaoTest {\n+\n+  private final PlayerInfoForModeratorDao playerInfoForModeratorDao =\n+      DaoTest.newDao(PlayerInfoForModeratorDao.class);\n+\n+  @Nested\n+  @DataSet(\n+      cleanBefore = true,\n+      value = \"moderator_player_lookup/lookup_player_aliases_select_data.yml\")\n+  class LookupPlayerAliases {\n+    @Test\n+    void lookupEmptyCase() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id-dne\", \"9.9.9.9\");\n+\n+      assertThat(results, is(empty()));\n+    }\n+\n+    @Test\n+    void lookupByBothSystemIdAndIp() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id\", \"1.1.1.1\");\n+\n+      assertThat(\n+          \"There are 6 records in the dataset, \"\n+              + \"we expect 4 to match, and 2 of them to be de-duped by name\"\n+              + \"with only the most recent de-duped record returned\",\n+          results,\n+          hasSize(3));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name3\"));\n+      assertThat(results.get(0).getIp(), is(\"2.2.2.2\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(0).getDate(), isInstant(2154, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(1).getUsername(), is(\"name2\"));\n+      assertThat(results.get(1).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(1).getSystemId(), is(\"system-id2\"));\n+      assertThat(results.get(1).getDate(), isInstant(2152, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(2).getUsername(), is(\"name1\"));\n+      assertThat(results.get(2).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(2).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(2).getDate(), isInstant(2151, 1, 1, 23, 59, 20));\n+    }\n+\n+    @Test\n+    void lookupWithOnlyIpMatching() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id-dne\", \"2.2.2.2\");\n+\n+      assertThat(\"We expect to only match the one record with IP 2.2.2.2\", results, hasSize(1));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name3\"));\n+      assertThat(results.get(0).getIp(), is(\"2.2.2.2\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(0).getDate(), isInstant(2154, 1, 1, 23, 59, 20));\n+    }\n+\n+    @Test\n+    void lookupWithOnlySystemIdMatching() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id2\", \"9.9.9.9\");\n+\n+      assertThat(\n+          \"We expect to only match the 1 record with system 'system-id2'\", results, hasSize(1));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name2\"));\n+      assertThat(results.get(0).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id2\"));\n+      assertThat(results.get(0).getDate(), isInstant(2152, 1, 1, 23, 59, 20));\n+    }\n+  }\n+\n+  @Nested\n+  @DataSet(cleanBefore = true, value = \"moderator_player_lookup/lookup_player_bans_select_data.yml\")\n+  class LookupPlayerBans {\n+    @Test\n+    void emptyLookupCase() {\n+      final List<PlayerBanRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerBanRecords(\"system-id-dne\", \"9.9.9.9\");\n+\n+      assertThat(results, is(empty()));\n+    }\n+\n+    @Test\n+    void lookupByBothSystemIdAndIp() {\n+      final List<PlayerBanRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerBanRecords(\"system-id\", \"1.1.1.1\");\n+\n+      assertThat(results, hasSize(3));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name1\"));\n+      assertThat(results.get(0).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(0).getBanStart(), isInstant(2010, 1, 1, 23, 59, 20));\n+      assertThat(results.get(0).getBanEnd(), isInstant(2100, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(1).getUsername(), is(\"name2\"));\n+      assertThat(results.get(1).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(1).getSystemId(), is(\"system-id2\"));\n+      assertThat(results.get(1).getBanStart(), isInstant(2000, 1, 1, 23, 59, 20));\n+      assertThat(results.get(1).getBanEnd(), isInstant(2050, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(2).getUsername(), is(\"name2\"));\n+      assertThat(results.get(2).getIp(), is(\"2.2.2.2\"));\n+      assertThat(results.get(2).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(2).getBanStart(), isInstant(2000, 1, 1, 23, 59, 20));\n+      assertThat(results.get(2).getBanEnd(), isInstant(2010, 1, 1, 23, 59, 20));\n+    }\n+\n+    @Test\n+    void lookupWithMatchByIpOnly() {\n+      final List<PlayerBanRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerBanRecords(\"system-id-dne\", \"2.2.2.2\");\n+\n+      assertThat(results, hasSize(1));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name2\"));\n+      assertThat(results.get(0).getIp(), is(\"2.2.2.2\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(0).getBanStart(), isInstant(2000, 1, 1, 23, 59, 20));\n+      assertThat(results.get(0).getBanEnd(), isInstant(2010, 1, 1, 23, 59, 20));\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTM3NTg2OnYy", "diffSide": "RIGHT", "path": "http-server/src/test/java/org/triplea/db/dao/moderator/player/info/PlayerInfoForModeratorDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMFrOGOaQqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMFrOGOaQqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2MzQ5OQ==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r417763499", "createdAt": "2020-04-30T05:36:00Z", "author": {"login": "codeclimate"}, "path": "http-server/src/test/java/org/triplea/db/dao/moderator/player/info/PlayerInfoForModeratorDaoTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.triplea.db.dao.moderator.player.info;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.hamcrest.collection.IsEmptyCollection.empty;\n+import static org.hamcrest.core.Is.is;\n+import static org.triplea.test.common.IsInstant.isInstant;\n+\n+import com.github.database.rider.core.api.dataset.DataSet;\n+import java.util.List;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.triplea.db.dao.DaoTest;\n+\n+class PlayerInfoForModeratorDaoTest extends DaoTest {\n+\n+  private final PlayerInfoForModeratorDao playerInfoForModeratorDao =\n+      DaoTest.newDao(PlayerInfoForModeratorDao.class);\n+\n+  @Nested\n+  @DataSet(\n+      cleanBefore = true,\n+      value = \"moderator_player_lookup/lookup_player_aliases_select_data.yml\")\n+  class LookupPlayerAliases {\n+    @Test\n+    void lookupEmptyCase() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id-dne\", \"9.9.9.9\");\n+\n+      assertThat(results, is(empty()));\n+    }\n+\n+    @Test\n+    void lookupByBothSystemIdAndIp() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id\", \"1.1.1.1\");\n+\n+      assertThat(\n+          \"There are 6 records in the dataset, \"\n+              + \"we expect 4 to match, and 2 of them to be de-duped by name\"\n+              + \"with only the most recent de-duped record returned\",\n+          results,\n+          hasSize(3));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name3\"));\n+      assertThat(results.get(0).getIp(), is(\"2.2.2.2\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(0).getDate(), isInstant(2154, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(1).getUsername(), is(\"name2\"));\n+      assertThat(results.get(1).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(1).getSystemId(), is(\"system-id2\"));\n+      assertThat(results.get(1).getDate(), isInstant(2152, 1, 1, 23, 59, 20));\n+\n+      assertThat(results.get(2).getUsername(), is(\"name1\"));\n+      assertThat(results.get(2).getIp(), is(\"1.1.1.1\"));\n+      assertThat(results.get(2).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(2).getDate(), isInstant(2151, 1, 1, 23, 59, 20));\n+    }\n+\n+    @Test\n+    void lookupWithOnlyIpMatching() {\n+      final List<PlayerAliasRecord> results =\n+          playerInfoForModeratorDao.lookupPlayerAliasRecords(\"system-id-dne\", \"2.2.2.2\");\n+\n+      assertThat(\"We expect to only match the one record with IP 2.2.2.2\", results, hasSize(1));\n+\n+      assertThat(results.get(0).getUsername(), is(\"name3\"));\n+      assertThat(results.get(0).getIp(), is(\"2.2.2.2\"));\n+      assertThat(results.get(0).getSystemId(), is(\"system-id\"));\n+      assertThat(results.get(0).getDate(), isInstant(2154, 1, 1, 23, 59, 20));\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTM3NTg3OnYy", "diffSide": "RIGHT", "path": "http-server/src/test/java/org/triplea/modules/moderation/player/info/FetchPlayerInfoModuleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMVrOGOaQrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMVrOGOaQrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2MzUwMA==", "bodyText": "Method playerLookup has 35 lines of code (exceeds 30 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r417763500", "createdAt": "2020-04-30T05:36:01Z", "author": {"login": "codeclimate"}, "path": "http-server/src/test/java/org/triplea/modules/moderation/player/info/FetchPlayerInfoModuleTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package org.triplea.modules.moderation.player.info;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.when;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.triplea.db.dao.api.key.ApiKeyDaoWrapper;\n+import org.triplea.db.dao.api.key.GamePlayerLookup;\n+import org.triplea.db.dao.moderator.player.info.PlayerAliasRecord;\n+import org.triplea.db.dao.moderator.player.info.PlayerBanRecord;\n+import org.triplea.db.dao.moderator.player.info.PlayerInfoForModeratorDao;\n+import org.triplea.domain.data.PlayerChatId;\n+import org.triplea.domain.data.SystemId;\n+import org.triplea.domain.data.UserName;\n+import org.triplea.http.client.lobby.moderator.PlayerSummaryForModerator.Alias;\n+import org.triplea.http.client.lobby.moderator.PlayerSummaryForModerator.BanInformation;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FetchPlayerInfoModuleTest {\n+\n+  private static final GamePlayerLookup GAME_PLAYER_LOOKUP =\n+      GamePlayerLookup.builder()\n+          .ip(\"1.1.1.1\")\n+          .systemId(SystemId.of(\"system-id\"))\n+          .userName(UserName.of(\"user-name\"))\n+          .build();\n+\n+  private static final PlayerAliasRecord PLAYER_ALIAS_RECORD =\n+      PlayerAliasRecord.builder()\n+          .username(\"alias-user-name\")\n+          .systemId(\"system-id2\")\n+          .ip(\"2.3.2.3\")\n+          .date(LocalDateTime.of(2000, 1, 1, 1, 1, 1).toInstant(ZoneOffset.UTC))\n+          .build();\n+\n+  private static final PlayerBanRecord PLAYER_BAN_RECORD =\n+      PlayerBanRecord.builder()\n+          .username(\"banned-name\")\n+          .systemId(\"id-at-time-of-ban\")\n+          .ip(\"5.5.5.6\")\n+          .banStart(LocalDateTime.of(2001, 1, 1, 1, 1, 1).toInstant(ZoneOffset.UTC))\n+          .banEnd(LocalDateTime.of(2100, 1, 1, 1, 1, 1).toInstant(ZoneOffset.UTC))\n+          .build();\n+\n+  @Mock private ApiKeyDaoWrapper apiKeyDaoWrapper;\n+  @Mock private PlayerInfoForModeratorDao playerInfoForModeratorDao;\n+\n+  @InjectMocks private FetchPlayerInfoModule fetchPlayerInfoModule;\n+\n+  @Test\n+  void unableToFindPlayerChatIdThrows() {\n+    when(apiKeyDaoWrapper.lookupPlayerByChatId(PlayerChatId.of(\"id\"))).thenReturn(Optional.empty());\n+    assertThrows(\n+        IllegalArgumentException.class, () -> fetchPlayerInfoModule.apply(PlayerChatId.of(\"id\")));\n+  }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTM3NTkwOnYy", "diffSide": "RIGHT", "path": "http-server/src/test/java/org/triplea/modules/moderation/player/info/FetchPlayerInfoModuleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMVrOGOaQrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMVrOGOaQrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2MzUwMw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r417763503", "createdAt": "2020-04-30T05:36:01Z", "author": {"login": "codeclimate"}, "path": "http-server/src/test/java/org/triplea/modules/moderation/player/info/FetchPlayerInfoModuleTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package org.triplea.modules.moderation.player.info;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.when;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.triplea.db.dao.api.key.ApiKeyDaoWrapper;\n+import org.triplea.db.dao.api.key.GamePlayerLookup;\n+import org.triplea.db.dao.moderator.player.info.PlayerAliasRecord;\n+import org.triplea.db.dao.moderator.player.info.PlayerBanRecord;\n+import org.triplea.db.dao.moderator.player.info.PlayerInfoForModeratorDao;\n+import org.triplea.domain.data.PlayerChatId;\n+import org.triplea.domain.data.SystemId;\n+import org.triplea.domain.data.UserName;\n+import org.triplea.http.client.lobby.moderator.PlayerSummaryForModerator.Alias;\n+import org.triplea.http.client.lobby.moderator.PlayerSummaryForModerator.BanInformation;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FetchPlayerInfoModuleTest {\n+\n+  private static final GamePlayerLookup GAME_PLAYER_LOOKUP =\n+      GamePlayerLookup.builder()\n+          .ip(\"1.1.1.1\")\n+          .systemId(SystemId.of(\"system-id\"))\n+          .userName(UserName.of(\"user-name\"))\n+          .build();\n+\n+  private static final PlayerAliasRecord PLAYER_ALIAS_RECORD =\n+      PlayerAliasRecord.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTM3NTkxOnYy", "diffSide": "RIGHT", "path": "http-server/src/test/java/org/triplea/modules/moderation/player/info/FetchPlayerInfoModuleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMVrOGOaQsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozNjowMVrOGOaQsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2MzUwNA==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r417763504", "createdAt": "2020-04-30T05:36:01Z", "author": {"login": "codeclimate"}, "path": "http-server/src/test/java/org/triplea/modules/moderation/player/info/FetchPlayerInfoModuleTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package org.triplea.modules.moderation.player.info;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.when;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.triplea.db.dao.api.key.ApiKeyDaoWrapper;\n+import org.triplea.db.dao.api.key.GamePlayerLookup;\n+import org.triplea.db.dao.moderator.player.info.PlayerAliasRecord;\n+import org.triplea.db.dao.moderator.player.info.PlayerBanRecord;\n+import org.triplea.db.dao.moderator.player.info.PlayerInfoForModeratorDao;\n+import org.triplea.domain.data.PlayerChatId;\n+import org.triplea.domain.data.SystemId;\n+import org.triplea.domain.data.UserName;\n+import org.triplea.http.client.lobby.moderator.PlayerSummaryForModerator.Alias;\n+import org.triplea.http.client.lobby.moderator.PlayerSummaryForModerator.BanInformation;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FetchPlayerInfoModuleTest {\n+\n+  private static final GamePlayerLookup GAME_PLAYER_LOOKUP =\n+      GamePlayerLookup.builder()\n+          .ip(\"1.1.1.1\")\n+          .systemId(SystemId.of(\"system-id\"))\n+          .userName(UserName.of(\"user-name\"))\n+          .build();\n+\n+  private static final PlayerAliasRecord PLAYER_ALIAS_RECORD =\n+      PlayerAliasRecord.builder()\n+          .username(\"alias-user-name\")\n+          .systemId(\"system-id2\")\n+          .ip(\"2.3.2.3\")\n+          .date(LocalDateTime.of(2000, 1, 1, 1, 1, 1).toInstant(ZoneOffset.UTC))\n+          .build();\n+\n+  private static final PlayerBanRecord PLAYER_BAN_RECORD =\n+      PlayerBanRecord.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDcyMzE4OnYy", "diffSide": "RIGHT", "path": "test-common/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjozODoxN1rOGOnVcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOToyMjoxM1rOGPlkAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3NzcxMg==", "bodyText": "I don't think this dependency is used in this PR", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r417977712", "createdAt": "2020-04-30T12:38:17Z", "author": {"login": "RoiEXLab"}, "path": "test-common/build.gradle", "diffHunk": "@@ -3,4 +3,5 @@ description = 'Test utility library, generic test utilities useful for TripleA p\n dependencies {\n     implementation \"org.hamcrest:java-hamcrest:$hamcrestVersion\"\n     implementation \"org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion\"\n+    implementation \"org.apache.commons:commons-lang3:$apacheCommonsLangVersion\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NzI1MA==", "bodyText": "Thanks - removed in: 7bb93e7", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r418997250", "createdAt": "2020-05-02T19:22:13Z", "author": {"login": "DanVanAtta"}, "path": "test-common/build.gradle", "diffHunk": "@@ -3,4 +3,5 @@ description = 'Test utility library, generic test utilities useful for TripleA p\n dependencies {\n     implementation \"org.hamcrest:java-hamcrest:$hamcrestVersion\"\n     implementation \"org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion\"\n+    implementation \"org.apache.commons:commons-lang3:$apacheCommonsLangVersion\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3NzcxMg=="}, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDczMzczOnYy", "diffSide": "RIGHT", "path": "java-extras/src/main/java/org/triplea/java/DateTimeFormatterUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo0MToxOVrOGOncCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOToyOTowMVrOGPlmrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3OTQwMg==", "bodyText": "We already have TimeManager.java which has similar functionality.\nDoes it make sense to merge those 2 classes?", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r417979402", "createdAt": "2020-04-30T12:41:19Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/java/DateTimeFormatterUtil.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.triplea.java;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n+import lombok.experimental.UtilityClass;\n+\n+/** Utility class for date-time formatting operations. */\n+@UtilityClass\n+public class DateTimeFormatterUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NzM5MQ==", "bodyText": "Makes sense to combine them, yes.\nTimeManager has a naming issue IMO. Manager is a bit of a smell in general, kingdom of nouns type deal and is generally not very meaningful. In this context it's not really managing state of any type. A final strike to TimeManager is I would not have thought to look for formatting tools in that class.\nDateTimeUtils perhaps could be a better unified class name. Thoughts?", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r418997391", "createdAt": "2020-05-02T19:23:47Z", "author": {"login": "DanVanAtta"}, "path": "java-extras/src/main/java/org/triplea/java/DateTimeFormatterUtil.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.triplea.java;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n+import lombok.experimental.UtilityClass;\n+\n+/** Utility class for date-time formatting operations. */\n+@UtilityClass\n+public class DateTimeFormatterUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3OTQwMg=="}, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NzkzNQ==", "bodyText": "Go with DateTimeUtils \ud83e\udd37", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r418997935", "createdAt": "2020-05-02T19:29:01Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/java/DateTimeFormatterUtil.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.triplea.java;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n+import lombok.experimental.UtilityClass;\n+\n+/** Utility class for date-time formatting operations. */\n+@UtilityClass\n+public class DateTimeFormatterUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3OTQwMg=="}, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDczOTQxOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/db/dao/moderator/player/info/PlayerInfoForModeratorDao.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo0Mjo1MVrOGOnfgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOToyNDo0MVrOGPlk7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4MDI4OQ==", "bodyText": "Side-Note: One day we'll have Text Blocks and the world will be a better place ^^", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r417980289", "createdAt": "2020-04-30T12:42:51Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/db/dao/moderator/player/info/PlayerInfoForModeratorDao.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.triplea.db.dao.moderator.player.info;\n+\n+import java.util.List;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+\n+/**\n+ * DAO used to lookup player correlation information for moderators. Answers questions such as\n+ *\n+ * <ul>\n+ *   <li>\"how many times and was this player banned?\"\n+ *   <li>\"which other names were used by this same IP and system-id? (presumably the same player)\"\n+ * </ul>\n+ */\n+public interface PlayerInfoForModeratorDao {\n+  @SqlQuery(\n+      \"select distinct\"\n+          + \"    username as name,\"\n+          + \"    ip as ip,\"\n+          + \"    system_id as systemId,\"\n+          + \"    max(access_time) as accessTime\"\n+          + \"  from access_log\"\n+          + \"  where \"\n+          + \"    access_time > (now() - '14 day'::interval)\"\n+          + \"    and (\"\n+          + \"      ip = :ip::inet\"\n+          + \"      or system_id = :systemId\"\n+          + \"    )\"\n+          + \"  group by name, ip, systemId\"\n+          + \"  order by accessTime desc\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NzQ4NA==", "bodyText": "\ud83d\udc4d\nThough TBH, I'm not sure when. We need the next LTS to come out and for us to be willing to migrate to it. I do think avoiding the constants between queries and the JDBI types was an improvement; that is something I think we should do going forward and see about retrofitting.", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r418997484", "createdAt": "2020-05-02T19:24:41Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/db/dao/moderator/player/info/PlayerInfoForModeratorDao.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.triplea.db.dao.moderator.player.info;\n+\n+import java.util.List;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+\n+/**\n+ * DAO used to lookup player correlation information for moderators. Answers questions such as\n+ *\n+ * <ul>\n+ *   <li>\"how many times and was this player banned?\"\n+ *   <li>\"which other names were used by this same IP and system-id? (presumably the same player)\"\n+ * </ul>\n+ */\n+public interface PlayerInfoForModeratorDao {\n+  @SqlQuery(\n+      \"select distinct\"\n+          + \"    username as name,\"\n+          + \"    ip as ip,\"\n+          + \"    system_id as systemId,\"\n+          + \"    max(access_time) as accessTime\"\n+          + \"  from access_log\"\n+          + \"  where \"\n+          + \"    access_time > (now() - '14 day'::interval)\"\n+          + \"    and (\"\n+          + \"      ip = :ip::inet\"\n+          + \"      or system_id = :systemId\"\n+          + \"    )\"\n+          + \"  group by name, ip, systemId\"\n+          + \"  order by accessTime desc\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4MDI4OQ=="}, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDc0ODc5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/lobby/client/ui/action/player/info/ShowPlayerInformationAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo0NTozM1rOGOnlbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOToyNToyNFrOGPllQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4MTgwNw==", "bodyText": "Side-Note: This is potentially something we could establish instead of creating \"real threads\" left and right, we could try to use CompletableFutures instead.\nIt'll probably decrease the footprint of TripleA a little bit", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r417981807", "createdAt": "2020-04-30T12:45:33Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/lobby/client/ui/action/player/info/ShowPlayerInformationAction.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package games.strategy.engine.lobby.client.ui.action.player.info;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+import java.util.logging.Level;\n+import javax.annotation.Nonnull;\n+import javax.swing.Action;\n+import javax.swing.JFrame;\n+import lombok.Builder;\n+import lombok.extern.java.Log;\n+import org.triplea.domain.data.PlayerChatId;\n+import org.triplea.http.client.lobby.moderator.PlayerSummaryForModerator;\n+import org.triplea.http.client.web.socket.client.connections.PlayerToLobbyConnection;\n+import org.triplea.swing.SwingAction;\n+\n+/**\n+ * When this action is taken (by a moderator), we will fetch from server information about the\n+ * clicked on player and display it in a tabbed dialog.\n+ */\n+@Builder\n+@Log\n+public class ShowPlayerInformationAction {\n+  @Nonnull private final JFrame parent;\n+  @Nonnull private final PlayerToLobbyConnection playerToLobbyConnection;\n+  @Nonnull private final PlayerChatId playerChatId;\n+  private Function<PlayerSummaryForModerator, String> dataFormatter;\n+\n+  public Action toSwingAction() {\n+    return SwingAction.of(\n+        \"Show Player Information\",\n+        () ->\n+            CompletableFuture.runAsync(this::fetchPlayerInfoAndShowDisplay)\n+                .exceptionally(this::logFetchError));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NzU2OQ==", "bodyText": "Agree, it is a nice API as well.", "url": "https://github.com/triplea-game/triplea/pull/6354#discussion_r418997569", "createdAt": "2020-05-02T19:25:24Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/lobby/client/ui/action/player/info/ShowPlayerInformationAction.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package games.strategy.engine.lobby.client.ui.action.player.info;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+import java.util.logging.Level;\n+import javax.annotation.Nonnull;\n+import javax.swing.Action;\n+import javax.swing.JFrame;\n+import lombok.Builder;\n+import lombok.extern.java.Log;\n+import org.triplea.domain.data.PlayerChatId;\n+import org.triplea.http.client.lobby.moderator.PlayerSummaryForModerator;\n+import org.triplea.http.client.web.socket.client.connections.PlayerToLobbyConnection;\n+import org.triplea.swing.SwingAction;\n+\n+/**\n+ * When this action is taken (by a moderator), we will fetch from server information about the\n+ * clicked on player and display it in a tabbed dialog.\n+ */\n+@Builder\n+@Log\n+public class ShowPlayerInformationAction {\n+  @Nonnull private final JFrame parent;\n+  @Nonnull private final PlayerToLobbyConnection playerToLobbyConnection;\n+  @Nonnull private final PlayerChatId playerChatId;\n+  private Function<PlayerSummaryForModerator, String> dataFormatter;\n+\n+  public Action toSwingAction() {\n+    return SwingAction.of(\n+        \"Show Player Information\",\n+        () ->\n+            CompletableFuture.runAsync(this::fetchPlayerInfoAndShowDisplay)\n+                .exceptionally(this::logFetchError));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4MTgwNw=="}, "originalCommit": {"oid": "8511cb9772885e507778dcb5e0bc748b386ee896"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2312, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}