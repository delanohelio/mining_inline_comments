{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTEyNTE5", "number": 5880, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxMzo1OToxMFrODaq-aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNDo1MTozMVrODarFVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjkzNjc1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxMzo1OToxMFrOFhwE2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMToxMjozM1rOFhxYjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNTAwMA==", "bodyText": "I think it's worth explicitly clarifying that the land must be contained within a single sea territory and not just within 2 joined sea territories.\nIt does make sense from a code perspective, but from a real-world perspective this might be confusing.", "url": "https://github.com/triplea-game/triplea/pull/5880#discussion_r370935000", "createdAt": "2020-01-25T13:59:10Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.ui.mapdata;\n+\n+import games.strategy.ui.Util;\n+import java.awt.Polygon;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+class IslandTerritoryFinder {\n+\n+  /**\n+   * Finds all island territories given a set of territory names and their corresponding polygons.\n+   * An island is defined as a land territory that is contained within a sea territory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdc4d2a908e617d501daa6c7cd1166c8d27b2550"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NjQzMQ==", "bodyText": "Updated javadoc to be a bit more clear on this: 99fc238", "url": "https://github.com/triplea-game/triplea/pull/5880#discussion_r370956431", "createdAt": "2020-01-25T21:12:33Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.ui.mapdata;\n+\n+import games.strategy.ui.Util;\n+import java.awt.Polygon;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+class IslandTerritoryFinder {\n+\n+  /**\n+   * Finds all island territories given a set of territory names and their corresponding polygons.\n+   * An island is defined as a land territory that is contained within a sea territory.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNTAwMA=="}, "originalCommit": {"oid": "cdc4d2a908e617d501daa6c7cd1166c8d27b2550"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjkzODE1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNDowMjozOVrOFhwFkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMToxNDoyMVrOFhxY5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNTE4NQ==", "bodyText": "Would Function.identity() work here?", "url": "https://github.com/triplea-game/triplea/pull/5880#discussion_r370935185", "createdAt": "2020-01-25T14:02:39Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.ui.mapdata;\n+\n+import games.strategy.ui.Util;\n+import java.awt.Polygon;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+class IslandTerritoryFinder {\n+\n+  /**\n+   * Finds all island territories given a set of territory names and their corresponding polygons.\n+   * An island is defined as a land territory that is contained within a sea territory.\n+   *\n+   * <p>Warning: territories may consist of multiple polygons, only the first polygon is checked.\n+   *\n+   * @param polygons Mapping of territory names to the polygons representing that territories.\n+   * @return A mapping of sea territory names to the name of land territories that are islands\n+   *     contained by each corresponding sea territory.\n+   */\n+  static Map<String, Set<String>> findIslands(final Map<String, List<Polygon>> polygons) {\n+    final Set<String> seaTerritories = filterSeaTerritories(polygons.keySet());\n+    final Set<String> landTerritories = filterNotSeaTerritories(polygons.keySet());\n+\n+    // map sea territories to: sea territory name -> islands contained by that sea territory\n+    return seaTerritories.stream()\n+        .collect(\n+            Collectors.toMap(sea -> sea, findIslandsForSeaTerritory(landTerritories, polygons)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdc4d2a908e617d501daa6c7cd1166c8d27b2550"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NjUxOA==", "bodyText": "It seems to, yes: 30db1cf", "url": "https://github.com/triplea-game/triplea/pull/5880#discussion_r370956518", "createdAt": "2020-01-25T21:14:21Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.ui.mapdata;\n+\n+import games.strategy.ui.Util;\n+import java.awt.Polygon;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+class IslandTerritoryFinder {\n+\n+  /**\n+   * Finds all island territories given a set of territory names and their corresponding polygons.\n+   * An island is defined as a land territory that is contained within a sea territory.\n+   *\n+   * <p>Warning: territories may consist of multiple polygons, only the first polygon is checked.\n+   *\n+   * @param polygons Mapping of territory names to the polygons representing that territories.\n+   * @return A mapping of sea territory names to the name of land territories that are islands\n+   *     contained by each corresponding sea territory.\n+   */\n+  static Map<String, Set<String>> findIslands(final Map<String, List<Polygon>> polygons) {\n+    final Set<String> seaTerritories = filterSeaTerritories(polygons.keySet());\n+    final Set<String> landTerritories = filterNotSeaTerritories(polygons.keySet());\n+\n+    // map sea territories to: sea territory name -> islands contained by that sea territory\n+    return seaTerritories.stream()\n+        .collect(\n+            Collectors.toMap(sea -> sea, findIslandsForSeaTerritory(landTerritories, polygons)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNTE4NQ=="}, "originalCommit": {"oid": "cdc4d2a908e617d501daa6c7cd1166c8d27b2550"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mjk0ODUzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNDozNToxOVrOFhwK-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMToxNTowMFrOFhxZBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNjU3MA==", "bodyText": "2 things:\n\nThis is a map of lists, so instead of using list.iterator().next(), you could as well use list.get(0) directly\nDoes it make sense to check the size of the list before? If the lists was empty for some reason, this would result in an exception. If there are more than 1 polygon (which is mentioned somewhere in the javadocs) this would be silently ignore all the other polygons", "url": "https://github.com/triplea-game/triplea/pull/5880#discussion_r370936570", "createdAt": "2020-01-25T14:35:19Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.ui.mapdata;\n+\n+import games.strategy.ui.Util;\n+import java.awt.Polygon;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+class IslandTerritoryFinder {\n+\n+  /**\n+   * Finds all island territories given a set of territory names and their corresponding polygons.\n+   * An island is defined as a land territory that is contained within a sea territory.\n+   *\n+   * <p>Warning: territories may consist of multiple polygons, only the first polygon is checked.\n+   *\n+   * @param polygons Mapping of territory names to the polygons representing that territories.\n+   * @return A mapping of sea territory names to the name of land territories that are islands\n+   *     contained by each corresponding sea territory.\n+   */\n+  static Map<String, Set<String>> findIslands(final Map<String, List<Polygon>> polygons) {\n+    final Set<String> seaTerritories = filterSeaTerritories(polygons.keySet());\n+    final Set<String> landTerritories = filterNotSeaTerritories(polygons.keySet());\n+\n+    // map sea territories to: sea territory name -> islands contained by that sea territory\n+    return seaTerritories.stream()\n+        .collect(\n+            Collectors.toMap(sea -> sea, findIslandsForSeaTerritory(landTerritories, polygons)));\n+  }\n+\n+  private static Set<String> filterSeaTerritories(final Set<String> territoryNames) {\n+    return filterTerritories(territoryNames, Util::isTerritoryNameIndicatingWater);\n+  }\n+\n+  private static Set<String> filterNotSeaTerritories(final Set<String> territoryNames) {\n+    return filterTerritories(territoryNames, Predicate.not(Util::isTerritoryNameIndicatingWater));\n+  }\n+\n+  /** Returns a subset of territories matching a given filter. */\n+  private static Set<String> filterTerritories(\n+      final Set<String> territoryNames, final Predicate<String> territoryFilter) {\n+    return territoryNames.stream().filter(territoryFilter).collect(Collectors.toSet());\n+  }\n+\n+  /** Find all land territories contained by a given sea territory. */\n+  private static Function<String, Set<String>> findIslandsForSeaTerritory(\n+      final Set<String> landTerritories, final Map<String, List<Polygon>> polygons) {\n+\n+    return seaTerritory ->\n+        landTerritories.stream()\n+            .filter(landIsContainedBySeaTerritory(seaTerritory, polygons))\n+            .collect(Collectors.toSet());\n+  }\n+\n+  /** Checks that a given land territory would be contained by a given sea territory. */\n+  private Predicate<String> landIsContainedBySeaTerritory(\n+      final String seaTerritory, final Map<String, List<Polygon>> polygons) {\n+\n+    // Function where given a territory name, give us a polygon for that territory\n+    final Function<String, Polygon> polygonLookup =\n+        territoryName -> polygons.get(territoryName).iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdc4d2a908e617d501daa6c7cd1166c8d27b2550"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NjU0OA==", "bodyText": "Original implementation here; I think the polygon reader ensures that we get at least one polygon. I suspect there is further improvement to be had here.", "url": "https://github.com/triplea-game/triplea/pull/5880#discussion_r370956548", "createdAt": "2020-01-25T21:15:00Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.ui.mapdata;\n+\n+import games.strategy.ui.Util;\n+import java.awt.Polygon;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+class IslandTerritoryFinder {\n+\n+  /**\n+   * Finds all island territories given a set of territory names and their corresponding polygons.\n+   * An island is defined as a land territory that is contained within a sea territory.\n+   *\n+   * <p>Warning: territories may consist of multiple polygons, only the first polygon is checked.\n+   *\n+   * @param polygons Mapping of territory names to the polygons representing that territories.\n+   * @return A mapping of sea territory names to the name of land territories that are islands\n+   *     contained by each corresponding sea territory.\n+   */\n+  static Map<String, Set<String>> findIslands(final Map<String, List<Polygon>> polygons) {\n+    final Set<String> seaTerritories = filterSeaTerritories(polygons.keySet());\n+    final Set<String> landTerritories = filterNotSeaTerritories(polygons.keySet());\n+\n+    // map sea territories to: sea territory name -> islands contained by that sea territory\n+    return seaTerritories.stream()\n+        .collect(\n+            Collectors.toMap(sea -> sea, findIslandsForSeaTerritory(landTerritories, polygons)));\n+  }\n+\n+  private static Set<String> filterSeaTerritories(final Set<String> territoryNames) {\n+    return filterTerritories(territoryNames, Util::isTerritoryNameIndicatingWater);\n+  }\n+\n+  private static Set<String> filterNotSeaTerritories(final Set<String> territoryNames) {\n+    return filterTerritories(territoryNames, Predicate.not(Util::isTerritoryNameIndicatingWater));\n+  }\n+\n+  /** Returns a subset of territories matching a given filter. */\n+  private static Set<String> filterTerritories(\n+      final Set<String> territoryNames, final Predicate<String> territoryFilter) {\n+    return territoryNames.stream().filter(territoryFilter).collect(Collectors.toSet());\n+  }\n+\n+  /** Find all land territories contained by a given sea territory. */\n+  private static Function<String, Set<String>> findIslandsForSeaTerritory(\n+      final Set<String> landTerritories, final Map<String, List<Polygon>> polygons) {\n+\n+    return seaTerritory ->\n+        landTerritories.stream()\n+            .filter(landIsContainedBySeaTerritory(seaTerritory, polygons))\n+            .collect(Collectors.toSet());\n+  }\n+\n+  /** Checks that a given land territory would be contained by a given sea territory. */\n+  private Predicate<String> landIsContainedBySeaTerritory(\n+      final String seaTerritory, final Map<String, List<Polygon>> polygons) {\n+\n+    // Function where given a territory name, give us a polygon for that territory\n+    final Function<String, Polygon> polygonLookup =\n+        territoryName -> polygons.get(territoryName).iterator().next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNjU3MA=="}, "originalCommit": {"oid": "cdc4d2a908e617d501daa6c7cd1166c8d27b2550"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mjk1NDQ1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNDo1MTozMVrOFhwN_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMToxNjoxMVrOFhxZQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNzM0MQ==", "bodyText": "Another quick thought:\nWhat about making this class non-static and make the polygon map an actual field?\nThis way a lot of lambdas could be turned into private methods and there would be no need to pass this map to almost every method.", "url": "https://github.com/triplea-game/triplea/pull/5880#discussion_r370937341", "createdAt": "2020-01-25T14:51:31Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.ui.mapdata;\n+\n+import games.strategy.ui.Util;\n+import java.awt.Polygon;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+class IslandTerritoryFinder {\n+\n+  /**\n+   * Finds all island territories given a set of territory names and their corresponding polygons.\n+   * An island is defined as a land territory that is contained within a sea territory.\n+   *\n+   * <p>Warning: territories may consist of multiple polygons, only the first polygon is checked.\n+   *\n+   * @param polygons Mapping of territory names to the polygons representing that territories.\n+   * @return A mapping of sea territory names to the name of land territories that are islands\n+   *     contained by each corresponding sea territory.\n+   */\n+  static Map<String, Set<String>> findIslands(final Map<String, List<Polygon>> polygons) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdc4d2a908e617d501daa6c7cd1166c8d27b2550"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NjYwOA==", "bodyText": "Not a bad thought, though I think that might be going the wrong direction. It's probably better to try and collapse methods where it makes sense rather than storing state.", "url": "https://github.com/triplea-game/triplea/pull/5880#discussion_r370956608", "createdAt": "2020-01-25T21:16:11Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/IslandTerritoryFinder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package games.strategy.triplea.ui.mapdata;\n+\n+import games.strategy.ui.Util;\n+import java.awt.Polygon;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+class IslandTerritoryFinder {\n+\n+  /**\n+   * Finds all island territories given a set of territory names and their corresponding polygons.\n+   * An island is defined as a land territory that is contained within a sea territory.\n+   *\n+   * <p>Warning: territories may consist of multiple polygons, only the first polygon is checked.\n+   *\n+   * @param polygons Mapping of territory names to the polygons representing that territories.\n+   * @return A mapping of sea territory names to the name of land territories that are islands\n+   *     contained by each corresponding sea territory.\n+   */\n+  static Map<String, Set<String>> findIslands(final Map<String, List<Polygon>> polygons) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNzM0MQ=="}, "originalCommit": {"oid": "cdc4d2a908e617d501daa6c7cd1166c8d27b2550"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2583, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}