{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyOTEyMzQx", "number": 7761, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzo0Mjo0MlrOEntSdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzo0Mjo0MlrOEntSdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDcxOTI1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/org/triplea/debug/ErrorMessageFormatter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzo0Mjo0MlrOHYdakw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzo0Mjo0MlrOHYdakw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQwOTgxMQ==", "bodyText": "Avoid too many return statements within this method.", "url": "https://github.com/triplea-game/triplea/pull/7761#discussion_r495409811", "createdAt": "2020-09-26T03:42:42Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/org/triplea/debug/ErrorMessageFormatter.java", "diffHunk": "@@ -30,132 +22,51 @@ public String apply(final LogRecord logRecord) {\n   }\n \n   /**\n-   * Five ways we will hit our logging handler.:<br>\n-   * (1) uncaught exception with no message {@code throw new NullPointerException() =>\n-   * LogRecord.getMessage() == null && LogRecord.getThrown().getMessage() == null } Return: *\n-   * {exception simple name} <br>\n-   * (2) uncaught exception with a message {@code throw new NullPointerException(\"message\") => //\n-   * log record message will be populated with the exception message\n-   * LogRecord.getMessage().equals(LogRecord.getThrown().getMessage())} } <br>\n-   * Return: * {exception simple name} - {exception message} <br>\n-   * (3) logging an error message {@code log.severe(\"message\") => LogRecord.getMessage() != null &&\n-   * LogRecord.getThrown() == null } <br>\n-   * Return: * {log message} <br>\n-   * (4) logging an error message with exception that has no message {@code log.log(Level.SEVERE,\n-   * \"message\", new NullPointerException()) => LogRecord.getMessage() != null &&\n-   * LogRecord.getThrown().getMessage() == null } Return: * * {log message} * * * * {exception\n-   * simple name} <br>\n-   * (5) logging an error message with exception that has a message {@code log.log(Level.SEVERE,\n-   * \"log-message\", new NullPointerException(\"exception message\")) => LogRecord.getMessage() != null\n-   * && LogRecord.getThrown() != null &&\n-   * !LogRecord.getMessage().equals(LogRecord.getThrown().getMessage()) } <br>\n-   * Return: * {log message} * * {exception simple name} - {exception message}\n-   */\n-  private static String format(final LogRecord logRecord) {\n-    if (logRecord.getThrown() == null) {\n-      return logMessageOnly(logRecord);\n-    }\n-\n-    if (logRecord.getMessage() != null\n-        && logRecord.getThrown() != null\n-        && logRecord.getThrown().getMessage() != null\n-        && !logRecord.getMessage().equals(logRecord.getThrown().getMessage())) {\n-      return logMessageAndExceptionMessage(logRecord);\n-    }\n-\n-    if (logRecord.getMessage() != null\n-        && logRecord.getThrown() != null\n-        && logRecord.getThrown().getMessage() == null) {\n-      return logMessageAndExceptionWithoutMessage(logRecord);\n-    }\n-\n-    if (logRecord.getMessage() == null\n-        && logRecord.getThrown() != null\n-        && logRecord.getThrown().getMessage() == null) {\n-      return exceptionOnlyWithOutMessage(logRecord);\n-    }\n-\n-    if (logRecord.getMessage() != null\n-        && logRecord.getThrown() != null\n-        && logRecord.getThrown().getMessage() != null\n-        && logRecord.getMessage().equals(logRecord.getThrown().getMessage())) {\n-      return exceptionOnlyWithMessage(logRecord);\n-    }\n-\n-    throw new IllegalStateException(\n-        \"Unhandled: \" + logRecord.getMessage() + \", exception: \" + logRecord.getThrown());\n-  }\n-\n-  /*\n-   * <pre>\n-   * Error: {log message}\n-   * </pre>\n-   */\n-  private static String logMessageOnly(final LogRecord logRecord) {\n-    checkArgument(logRecord.getMessage() != null);\n-    checkArgument(logRecord.getThrown() == null);\n-\n-    return logRecord.getMessage();\n-  }\n-\n-  /*\n-   * <pre>\n-   * Error: {exception simple name} - {exception message}\n-   * </pre>\n-   */\n-  private static String exceptionOnlyWithMessage(final LogRecord logRecord) {\n-    checkArgument(logRecord.getThrown().getMessage() != null);\n-    checkArgument(logRecord.getMessage() != null);\n-    checkArgument(logRecord.getThrown().getMessage().equals(logRecord.getMessage()));\n-    return simpleName(logRecord) + \" - \" + logRecord.getThrown().getMessage();\n-  }\n-\n-  private static String simpleName(final LogRecord logRecord) {\n-    return logRecord.getThrown().getClass().getSimpleName();\n-  }\n-\n-  /*\n-   * <pre>\n-   * Error: {exception simple name}\n-   * </pre>\n-   */\n-  private static String exceptionOnlyWithOutMessage(final LogRecord logRecord) {\n-    checkArgument(logRecord.getThrown().getMessage() == null);\n-    checkArgument(logRecord.getMessage() == null);\n-\n-    return simpleName(logRecord);\n-  }\n-\n-  /*\n-   * <pre>\n-   * Error: {log message}\n+   * Five ways we will hit our logging handler:\n    *\n-   * Details: {exception simple name} - {exception message}\n-   * </pre>\n-   */\n-  private static String logMessageAndExceptionMessage(final LogRecord logRecord) {\n-    checkArgument(logRecord.getThrown().getMessage() != null);\n-    checkArgument(logRecord.getMessage() != null);\n-    checkArgument(!logRecord.getThrown().getMessage().equals(logRecord.getMessage()));\n-\n-    return logRecord.getMessage()\n-        + BREAK\n-        + simpleName(logRecord)\n-        + \": \"\n-        + logRecord.getThrown().getMessage();\n-  }\n-\n-  /*\n    * <pre>\n-   * Error: {log message}\n-   *\n-   * Details: {exception simple name}\n+   * (1) uncaught exception with no message, eg: {@code throw new NullPointerException()}\n+   * (2) uncaught exception with a message, eg:  {@code throw new NullPointerException(\"message\")}\n+   * (3) logging an error message, eg: {@code log.severe(\"message\")}\n+   * (4) logging an error message with exception that has no message, eg:\n+   * {@code log.log(Level.SEVERE, \"message\", new NullPointerException())}\n+   * (5) logging an error message with exception that has a message, eg:\n+   * {@code log.log(Level.SEVERE, \"log-message\", new NullPointerException(\"exception message\"))}\n    * </pre>\n    */\n-  private static String logMessageAndExceptionWithoutMessage(final LogRecord logRecord) {\n-    checkArgument(logRecord.getThrown().getMessage() == null);\n-    checkArgument(logRecord.getMessage() != null);\n-\n-    return logRecord.getMessage() + BREAK + simpleName(logRecord);\n+  private static String format(final LoggerRecord logRecord) {\n+    if (logRecord.getLogMessage() == null) {\n+      final LoggerRecord.ExceptionDetails exceptionDetails =\n+          logRecord.getExceptions().size() > 1\n+              ? logRecord.getExceptions().get(1)\n+              : logRecord.getExceptions().get(0);\n+\n+      if (exceptionDetails.getExceptionMessage() != null) {\n+        return exceptionDetails.getExceptionClassName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1f03faa69ef44503aacc500c08681c4fcabf08"}, "originalPosition": 178}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2865, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}