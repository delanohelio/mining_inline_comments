{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTY5MjU2", "number": 6850, "title": "Improve PerfTimer utility.", "bodyText": "Improve PerfTimer utility.\n\nShowing running average.\nPassing a frequency param to print stats every N calls\nIf frequency is 0, no work is done. This allows adding\nthe perf timer permanently to some code locations and\nhaving a pref setting to set the frequency / enable.\n\nFunctional Changes\n\n[] New map or map update\n[] New Feature\n[X] Feature update or enhancement\n[] Feature Removal\n[] Code Cleanup or refactor\n[] Configuration Change\n[] Problem fix\n[] Other:   \nTesting\n\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-06-25T17:48:47Z", "url": "https://github.com/triplea-game/triplea/pull/6850", "merged": true, "mergeCommit": {"oid": "6b2c0d686ccf924b34bf11cecd2859d7e3fec594"}, "closed": true, "closedAt": "2020-07-10T01:16:23Z", "author": {"login": "asvitkine"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuyWz3AH2gAyNDQwMTY5MjU2OmZhMDE3ZjY3YzcxNzQ5MDljNGFlYWM4MGFhYTcwYzY1ZDcwNjYxMmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczEq6rgH2gAyNDQwMTY5MjU2OjMyZjA0ZTQzODQxYWY3MzMzNjk3MTk5ODFmN2EwZDgzMDdiMTRhM2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fa017f67c7174909c4aeac80aaa70c65d706612b", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/fa017f67c7174909c4aeac80aaa70c65d706612b", "committedDate": "2020-06-25T17:46:46Z", "message": "Improve PerfTimer utility.\n\n- Showing running average.\n- Passing a frequency param to print stats every N calls\n- If frequency is 0, no work is done. This allows adding\n  the perf timer permanently to some code locations and\n  having a pref setting to set the frequency / enable."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDA4NDIx", "url": "https://github.com/triplea-game/triplea/pull/6850#pullrequestreview-438008421", "createdAt": "2020-06-26T04:39:32Z", "commit": {"oid": "fa017f67c7174909c4aeac80aaa70c65d706612b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDozOTozMlrOGpTciA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDo0MjoxMFrOGpTe7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2MzQwMA==", "bodyText": "A javadoc here to describe that reporting frequency means we report every n'th could be useful to people down the road wanting to use this API.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r445963400", "createdAt": "2020-06-26T04:39:32Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -39,36 +41,54 @@ private long stopTimer() {\n \n   @Override\n   public void close() {\n-    processResult(stopTimer(), this);\n+    if (this.reportingFrequency > 0) {\n+      processResult(stopTimer(), this);\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")\n   public static PerfTimer startTimer(final String title) {\n-    return new PerfTimer(title);\n+    return startTimer(title, 1);\n   }\n \n-  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {\n-    final long stopMicros = stopNanos / 1000;\n-\n-    final long milliFraction = (stopMicros % 1000) / 100;\n-    final long millis = (stopMicros / 1000);\n+  public static PerfTimer startTimer(final String title, final int reportingFrequency) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa017f67c7174909c4aeac80aaa70c65d706612b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2NDAxNQ==", "bodyText": "Start millis being either the reporting frequency or the actual start nano time is potentially confusing at two levels.\n\nThe variable says milli though we assign nanos to it.\nThe variable probably should be one value or another. Having a variable's meaning depend on the context and previous call history is a SRP violation. Perhaps we really want two different variables and make them internally nullable. Another option is to have a simple internal object to track this for us, that object could then provide a nice API to abstract away time keeping details.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r445964015", "createdAt": "2020-06-26T04:42:10Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,14 +23,16 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n   private final long startMillis;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    this.startMillis = this.reportingFrequency > 0 ? System.nanoTime() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa017f67c7174909c4aeac80aaa70c65d706612b"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d87fb1ba29167490b38d11d47cbb0930670eb951", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/d87fb1ba29167490b38d11d47cbb0930670eb951", "committedDate": "2020-06-26T11:42:09Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dceb97fae24fd608655f6c7a63e93ed50b6d984d", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/dceb97fae24fd608655f6c7a63e93ed50b6d984d", "committedDate": "2020-06-26T14:37:46Z", "message": "fix comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fff857ef8761e8e6a59bc728c5fc26d90ec62d0", "author": {"user": {"login": "tripleabuilderbot", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/7fff857ef8761e8e6a59bc728c5fc26d90ec62d0", "committedDate": "2020-06-26T14:40:00Z", "message": "Auto-Formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODEwMTUy", "url": "https://github.com/triplea-game/triplea/pull/6850#pullrequestreview-438810152", "createdAt": "2020-06-28T20:19:58Z", "commit": {"oid": "7fff857ef8761e8e6a59bc728c5fc26d90ec62d0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDoxOTo1OFrOGqAA9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDoyNjozM1rOGqADnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5MzYyMw==", "bodyText": "Have you checked the synchronized block on highly concurrent code? I had some problems with this for tile rendering and noticed that the overhead of closing the timer with processResult slowed things down to the point where the map was taking seconds to render. Just curious what scenario's you've run this through.\nI think the concurrency problem here might be just tricky (argument for us to get a library to do this).", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r446693623", "createdAt": "2020-06-28T20:19:58Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,52 +24,88 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n-  private final long startMillis;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n+  private final Optional<Long> startNanos;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    // If reporting frequency is 0, avoid the overhead of querying the time.\n+    if (this.reportingFrequency > 0) {\n+      this.startNanos = Optional.of(System.nanoTime());\n+    } else {\n+      this.startNanos = Optional.empty();\n+    }\n   }\n \n   private long stopTimer() {\n-    return System.nanoTime() - startMillis;\n+    return System.nanoTime() - startNanos.get();\n   }\n \n   @Override\n   public void close() {\n-    processResult(stopTimer(), this);\n+    if (this.reportingFrequency > 0) {\n+      processResult(stopTimer(), this);\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")\n   public static PerfTimer startTimer(final String title) {\n-    return new PerfTimer(title);\n+    return startTimer(title, 1);\n   }\n \n-  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {\n-    final long stopMicros = stopNanos / 1000;\n-\n-    final long milliFraction = (stopMicros % 1000) / 100;\n-    final long millis = (stopMicros / 1000);\n+  /**\n+   * Creates a perf timer with a reporting frequency. The reporting frequency specifies N specifies\n+   * that performance information should be printed every N executions of the timer. If 0, no\n+   * information is printed (and no timings are taken), which can be useful to have some places in\n+   * the code to be always instrumented, but not always enabled.\n+   *\n+   * @param title The name of the timer\n+   * @param reportingFrequency The reporting frequency.\n+   * @return the perf timer object\n+   */\n+  @SuppressWarnings(\"unused\")\n+  public static PerfTimer startTimer(final String title, final int reportingFrequency) {\n+    return new PerfTimer(title, reportingFrequency);\n+  }\n \n+  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fff857ef8761e8e6a59bc728c5fc26d90ec62d0"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDA1Nw==", "bodyText": "I'm concerned about the stopTimer method. My thoughts:\n\nthe get() method of optional generally should be avoided. This is a pretty good article on optional usage: https://dzone.com/articles/using-optional-correctly-is-not-optional, it sums up a number of similar points.\n\nI think one to help this is to mark startNanos as @nullable and just use a null value and do a classic if( null )  type of check.\nThough, we still have a lot of internal state going that route. Even if we allow for disabled timers, assigning startNanos always to System.nanoTime would not hurt that much (we are still talking a ns operation, that is not a place to make performance improvements).", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r446694057", "createdAt": "2020-06-28T20:24:17Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,52 +24,88 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n-  private final long startMillis;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n+  private final Optional<Long> startNanos;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    // If reporting frequency is 0, avoid the overhead of querying the time.\n+    if (this.reportingFrequency > 0) {\n+      this.startNanos = Optional.of(System.nanoTime());\n+    } else {\n+      this.startNanos = Optional.empty();\n+    }\n   }\n \n   private long stopTimer() {\n-    return System.nanoTime() - startMillis;\n+    return System.nanoTime() - startNanos.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fff857ef8761e8e6a59bc728c5fc26d90ec62d0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDMwMw==", "bodyText": "This comment does not agree with the comment on line 23:\n\n@SuppressWarnings(\"unused\") // used on-demand by dev where needed and removed aferwards\n\nThe class javadoc perhaps should be updated to have an additional example usage with the reportingFrequency value.\nFundamentally I just don't think I'm really quite convinced we want to leave timers in the code.  If we keep that constraint then you can assert that reporting frequency is positive.", "url": "https://github.com/triplea-game/triplea/pull/6850#discussion_r446694303", "createdAt": "2020-06-28T20:26:33Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/org/triplea/performance/PerfTimer.java", "diffHunk": "@@ -23,52 +24,88 @@\n @Log\n public class PerfTimer implements Closeable {\n \n-  private static final PerfTimer DISABLED_TIMER = new PerfTimer(\"disabled\");\n   private static final Map<String, AtomicLong> runningTotal = new HashMap<>();\n-  final String title;\n-  private final long startMillis;\n+  private static final Map<String, AtomicLong> runningCount = new HashMap<>();\n+  private final String title;\n+  private final Optional<Long> startNanos;\n+  private final int reportingFrequency;\n \n-  private PerfTimer(final String title) {\n+  private PerfTimer(final String title, final int reportingFrequency) {\n     this.title = title;\n-    this.startMillis = System.nanoTime();\n+    this.reportingFrequency = reportingFrequency;\n+    // If reporting frequency is 0, avoid the overhead of querying the time.\n+    if (this.reportingFrequency > 0) {\n+      this.startNanos = Optional.of(System.nanoTime());\n+    } else {\n+      this.startNanos = Optional.empty();\n+    }\n   }\n \n   private long stopTimer() {\n-    return System.nanoTime() - startMillis;\n+    return System.nanoTime() - startNanos.get();\n   }\n \n   @Override\n   public void close() {\n-    processResult(stopTimer(), this);\n+    if (this.reportingFrequency > 0) {\n+      processResult(stopTimer(), this);\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")\n   public static PerfTimer startTimer(final String title) {\n-    return new PerfTimer(title);\n+    return startTimer(title, 1);\n   }\n \n-  private static synchronized void processResult(final long stopNanos, final PerfTimer perfTimer) {\n-    final long stopMicros = stopNanos / 1000;\n-\n-    final long milliFraction = (stopMicros % 1000) / 100;\n-    final long millis = (stopMicros / 1000);\n+  /**\n+   * Creates a perf timer with a reporting frequency. The reporting frequency specifies N specifies\n+   * that performance information should be printed every N executions of the timer. If 0, no\n+   * information is printed (and no timings are taken), which can be useful to have some places in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fff857ef8761e8e6a59bc728c5fc26d90ec62d0"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f9d0faf244b129ad0fec04c5b3cb42ce9630f1d", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/7f9d0faf244b129ad0fec04c5b3cb42ce9630f1d", "committedDate": "2020-07-09T01:20:24Z", "message": "Address review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32f04e43841af733369719981f7a0d8307b14a3f", "author": {"user": {"login": "tripleabuilderbot", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/32f04e43841af733369719981f7a0d8307b14a3f", "committedDate": "2020-07-09T01:22:43Z", "message": "Auto-Formatting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3283, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}