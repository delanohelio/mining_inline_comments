{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MDQ1MDA1", "number": 7692, "title": "Convert end game checks battle step", "bodyText": "This is the last real battle step to convert.  The remaining one after this one starts a new round.  Once this is merged, I'll have a separate PR to clean up the step creation and ordering.\nTesting\n\nI've played a few battles to make sure it determines winners correctly still.\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-09-18T03:29:04Z", "url": "https://github.com/triplea-game/triplea/pull/7692", "merged": true, "mergeCommit": {"oid": "c3e7a0f58cefa16c3ddd1525ae659d9df90c2e73"}, "closed": true, "closedAt": "2020-09-19T19:56:06Z", "author": {"login": "trevan"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJ89yogH2gAyNDg5MDQ1MDA1OjkzZTY3MzU4YmU1NGE0MjgzMzBjYmQyZDdhNDAzMGQ0NGJlZjIzN2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKRjINAH2gAyNDg5MDQ1MDA1OmU3MmY1MmM5NWUxOGY2N2U4ZGYzMzExNTMwOGE1Zjc5MDIyZjAzNTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "93e67358be54a428330cbd2d7a4030d44bef237e", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/93e67358be54a428330cbd2d7a4030d44bef237e", "committedDate": "2020-09-18T03:24:21Z", "message": "Convert end game checks battle step"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMTI3Mjky", "url": "https://github.com/triplea-game/triplea/pull/7692#pullrequestreview-491127292", "createdAt": "2020-09-18T03:37:36Z", "commit": {"oid": "93e67358be54a428330cbd2d7a4030d44bef237e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzozNzozN1rOHT80Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzozNzozN1rOHT80Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4MTM5NQ==", "bodyText": "This step is, currently, the only step that needs access to logic from another battle step.  I'm undecided in how best to access that logic.  I've three thoughts:\n\nInstantiate the steps and call the public method right when it is needed (aka new RemoveUnprotectedUnits(battleState, battleActions).removeUnprotectedUnits(bridge, BattleState.Side.DEFENSE))\nPass in the the step to the constructor of CheckGeneralBattleEnd and then call the public method when it is needed.\nPass in a lambda of the public method and call the lambda.\n\nI've currently coded up 3.\nI don't like 2 because it will cause the other battle steps to be saved with this battle step and would make future changes harder to do.\nI've tried 1 and it makes testing a little harder.\n@DanVanAtta , what are your thoughts?", "url": "https://github.com/triplea-game/triplea/pull/7692#discussion_r490681395", "createdAt": "2020-09-18T03:37:37Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/change/CheckGeneralBattleEnd.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package games.strategy.triplea.delegate.battle.steps.change;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.DiceRoll;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import games.strategy.triplea.delegate.battle.steps.RetreatChecks;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import lombok.AllArgsConstructor;\n+\n+@AllArgsConstructor\n+public class CheckGeneralBattleEnd implements BattleStep {\n+  private static final long serialVersionUID = 5172121497955756220L;\n+\n+  private final BattleState battleState;\n+\n+  private final BattleActions battleActions;\n+\n+  private final BiConsumer<IDelegateBridge, BattleState.Side> removeUnprotectedUnits;\n+\n+  private final Consumer<IDelegateBridge> retreatUnits;\n+\n+  @Override\n+  public List<String> getNames() {\n+    return List.of();\n+  }\n+\n+  @Override\n+  public Order getOrder() {\n+    return Order.GENERAL_BATTLE_END_CHECK;\n+  }\n+\n+  @Override\n+  public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+    if (hasSideLost(BattleState.Side.OFFENSE)) {\n+      battleActions.endBattle(bridge);\n+      battleActions.defenderWins(bridge);\n+\n+    } else if (hasSideLost(BattleState.Side.DEFENSE)) {\n+      removeUnprotectedUnits.accept(bridge, BattleState.Side.DEFENSE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93e67358be54a428330cbd2d7a4030d44bef237e"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "702e11051b38c80dbaf0d4ab6e60221236bea324", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/702e11051b38c80dbaf0d4ab6e60221236bea324", "committedDate": "2020-09-18T03:40:00Z", "message": "Remove code that was moved to CheckGeneralBattleEnd"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3a0409b6cf1e0545cbd0169c95c33436cbdcc20", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/a3a0409b6cf1e0545cbd0169c95c33436cbdcc20", "committedDate": "2020-09-18T22:54:07Z", "message": "Break up CheckGeneralBattleEnd to separate steps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce9b481b26d7b50a8b7fd2d31d4e0ed49afa4f75", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/ce9b481b26d7b50a8b7fd2d31d4e0ed49afa4f75", "committedDate": "2020-09-18T23:08:55Z", "message": "Merge nested conditional statements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxODI5MzI5", "url": "https://github.com/triplea-game/triplea/pull/7692#pullrequestreview-491829329", "createdAt": "2020-09-18T23:22:01Z", "commit": {"oid": "ce9b481b26d7b50a8b7fd2d31d4e0ed49afa4f75"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoyMjowMVrOHUeesA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzozODozMFrOHUeq0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMjk0NA==", "bodyText": "The \"xxWins\" seems to be an enumeration of the ' WhoWon' enum. WDYT if we parameterized the API instead?\nEG:\nbattleComplete(IDelegateBridge bridge,  WhoWon battleResult);", "url": "https://github.com/triplea-game/triplea/pull/7692#discussion_r491232944", "createdAt": "2020-09-18T23:22:01Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -39,6 +39,10 @@ void landParatroopers(\n \n   void attackerWins(IDelegateBridge bridge);\n \n+  void defenderWins(IDelegateBridge bridge);\n+\n+  void nobodyWins(IDelegateBridge bridge);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9b481b26d7b50a8b7fd2d31d4e0ed49afa4f75"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMzEzMw==", "bodyText": "While thinking about parameterizing APIs, should we parameterize this as well? Should this even be an API method come to think of it?\nWhat if the caller were to do the filtering it needed on its own leaving the API to be simply \"getAttackers()\".", "url": "https://github.com/triplea-game/triplea/pull/7692#discussion_r491233133", "createdAt": "2020-09-18T23:23:12Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleState.java", "diffHunk": "@@ -35,6 +40,8 @@ public Side getOpposite() {\n \n   Collection<Unit> getBombardingUnits();\n \n+  Collection<Unit> getAmphibiousLandAttackers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9b481b26d7b50a8b7fd2d31d4e0ed49afa4f75"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMzUyOA==", "bodyText": "I think we might be seeing a data clump code-smell here with getMaxBattleRounds & getBattleRounds().\nExtract object is the refactoring pattern to fix that, in this case that would be a BattleRound object.\nThen for example this code would be:\nreturn battleState.getBattleRound().hasMoreRounds() || (getPower ...)\n\nWDYT?", "url": "https://github.com/triplea-game/triplea/pull/7692#discussion_r491233528", "createdAt": "2020-09-18T23:25:05Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/change/CheckGeneralBattleEnd.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package games.strategy.triplea.delegate.battle.steps.change;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.DiceRoll;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import games.strategy.triplea.delegate.battle.steps.RetreatChecks;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AllArgsConstructor;\n+\n+@AllArgsConstructor\n+public class CheckGeneralBattleEnd implements BattleStep {\n+  private static final long serialVersionUID = 5172121497955756220L;\n+\n+  private final BattleState battleState;\n+\n+  private final BattleActions battleActions;\n+\n+  protected BattleActions getBattleActions() {\n+    return battleActions;\n+  }\n+\n+  protected BattleState getBattleState() {\n+    return battleState;\n+  }\n+\n+  @Override\n+  public List<String> getNames() {\n+    return List.of();\n+  }\n+\n+  @Override\n+  public Order getOrder() {\n+    return Order.GENERAL_BATTLE_END_CHECK;\n+  }\n+\n+  @Override\n+  public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+    if (hasSideLost(BattleState.Side.OFFENSE)) {\n+      battleActions.endBattle(bridge);\n+      battleActions.defenderWins(bridge);\n+\n+    } else if (hasSideLost(BattleState.Side.DEFENSE)) {\n+      battleActions.endBattle(bridge);\n+      battleActions.attackerWins(bridge);\n+\n+    } else if (isStalemate() && !canAttackerRetreatInStalemate()) {\n+      battleActions.endBattle(bridge);\n+      battleActions.nobodyWins(bridge);\n+    }\n+  }\n+\n+  protected boolean hasSideLost(final BattleState.Side side) {\n+    return battleState.getUnits(side).stream().noneMatch(Matches.unitIsNotInfrastructure());\n+  }\n+\n+  protected boolean isStalemate() {\n+    return (battleState.getMaxBattleRounds() > 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9b481b26d7b50a8b7fd2d31d4e0ed49afa4f75"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNDA1Nw==", "bodyText": "\ud83d\udc4d\nThis looks good. We've had issues of marking changes that needed to happen on the next major release and have missed some or come across them and were then unsure of what to change exactly. It looks like this annotation is working out, I'm much more confident on next major we'll catch & fix these types of things.", "url": "https://github.com/triplea-game/triplea/pull/7692#discussion_r491234057", "createdAt": "2020-09-18T23:27:35Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/change/RemoveUnprotectedUnits.java", "diffHunk": "@@ -52,6 +53,7 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n     removeUnprotectedUnits(bridge, BattleState.Side.OFFENSE);\n   }\n \n+  @RemoveOnNextMajorRelease(\"This doesn't need to be public in the next major release\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9b481b26d7b50a8b7fd2d31d4e0ed49afa4f75"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNDY1MA==", "bodyText": "It does not look like there is much implementation here and this is mostly a configuration class.\nWhat do you think of creating a more generic variant of this class? It looks like all we would need to do it to parameterize the 'getOrder()' value as a constructor arg, and then we could simply return it. Can we potentially reduce the inheritance tree even and have the super class do some of this work, particularly if it had a constructor that accepted the getNames() and getOrder() values? Since those are constants, it seems like we probably could new-up the parent directly.", "url": "https://github.com/triplea-game/triplea/pull/7692#discussion_r491234650", "createdAt": "2020-09-18T23:30:33Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/change/RemoveUnprotectedUnitsGeneral.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package games.strategy.triplea.delegate.battle.steps.change;\n+\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+\n+public class RemoveUnprotectedUnitsGeneral extends RemoveUnprotectedUnits {\n+  public RemoveUnprotectedUnitsGeneral(\n+      final BattleState battleState, final BattleActions battleActions) {\n+    super(battleState, battleActions);\n+  }\n+\n+  @Override\n+  public List<String> getNames() {\n+    return List.of();\n+  }\n+\n+  @Override\n+  public Order getOrder() {\n+    return Order.REMOVE_UNPROTECTED_UNITS_GENERAL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9b481b26d7b50a8b7fd2d31d4e0ed49afa4f75"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNjA0OQ==", "bodyText": "Looking at this a bit more, I do think we should avoid the inheritance tree and see if we can flatten this. A rule of thumb is to never override methods that have implementations. It generally makes code hard to understand, test, and inheritance is the strongest form of coupling. Instead just make the parent method abstract, convert the parent class into two, one that is abstract and a second that has the original implementation from the parent. Then this class would become a second child.\nWhat that would look like is:\n\nBut, the differences between the child classes are just constants, configuration, not behavior. In this case I'd flatten it more so you would just new up the BattleStep via a factory type of pattern and inject the right configurations and some behavior for the execution, EG:\nBattleStep RemoveUnprotectedUnits = BattleStepFactory.builder()\n    .names( ... )\n    .order( ...)\n    .executable( removeUnprotectedUnitsExecutable(bridge))\n    .build()\n    .toBattleStep();\n\nWDYT?", "url": "https://github.com/triplea-game/triplea/pull/7692#discussion_r491236049", "createdAt": "2020-09-18T23:38:30Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/change/RemoveUnprotectedUnitsGeneral.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package games.strategy.triplea.delegate.battle.steps.change;\n+\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+\n+public class RemoveUnprotectedUnitsGeneral extends RemoveUnprotectedUnits {\n+  public RemoveUnprotectedUnitsGeneral(\n+      final BattleState battleState, final BattleActions battleActions) {\n+    super(battleState, battleActions);\n+  }\n+\n+  @Override\n+  public List<String> getNames() {\n+    return List.of();\n+  }\n+\n+  @Override\n+  public Order getOrder() {\n+    return Order.REMOVE_UNPROTECTED_UNITS_GENERAL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNDY1MA=="}, "originalCommit": {"oid": "ce9b481b26d7b50a8b7fd2d31d4e0ed49afa4f75"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e72f52c95e18f67e8df33115308a5f79022f0354", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/e72f52c95e18f67e8df33115308a5f79022f0354", "committedDate": "2020-09-19T03:23:14Z", "message": "Create a BattleRound value object to track first and last rounds"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3933, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}