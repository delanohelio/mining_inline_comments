{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODY3Njc2", "number": 7891, "title": "Refactor getUnitPowerAndRollsForNormalBattles/getAaUnitPowerAndRollsForNormalBattles", "bodyText": "These two methods in TotalPowerAndTotalRolls are the two methods that generate TotalPowerAndTotalRolls objects.  I refactored both of them so that they now have the same logic inside of TotalPowerAndTotalRolls.  The differences between AA and \"normal\" has been moved into 4 helper classes: AaDefenseCalculator, AaOffenseCalculator, NormalDefenseCalculator, and NormalOffenseCalculator.  Each of them contain the logic to calculate the roll and strength for those 4 conditions.  I envision that I can pull the creation of those calculators up the caller chain so that they are passed around instead of the data needed for them (such as allEnemyUnitsAliveOrWaitingToDie and allFriendlyUnitsAliveOrWaitingToDie).\nI also combined AvailableSupportCalculator, SupportBonusCalculator, and SupportCalculationResult into the class AvailableSupportTracker.  I named it \"Tracker\" because it tracks the available support.  As the TotalPowerAndTotalRolls objects are built, it uses up support and the AvailableSupportTracker handles that logic.\nAfter this is merged, I plan to work on two PRs: one to remove all of the redundant tests in TotalPowerAndTotalRolls and the other to push the calculators further up the call chain.  I didn't do the first here because I wanted to make as few changes to the tests as possible to ensure that nothing was broken during the refactoring.  And I didn't do the second because it would add too many changes to this PR.\nTesting\n\nRan a Hard AI game for a few rounds.\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-10-12T23:07:41Z", "url": "https://github.com/triplea-game/triplea/pull/7891", "merged": true, "mergeCommit": {"oid": "f28175b117377fe1618800a525a0437442dd5f19"}, "closed": true, "closedAt": "2020-10-31T02:07:53Z", "author": {"login": "trevan"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRmFRfAH2gAyNTAxODY3Njc2OmI2NjMwOGEwZDJjMzZiYzFmNmUyN2RiYzViOTdlZDQ4OGI2MGNjMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXL3MSAH2gAyNTAxODY3Njc2OmEyMzE5MWI5NmMyZWNkNDI5NGVlZmUzOTBlZDFiYzlkNTQ3OGJkOTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b66308a0d2c36bc1f6e27dbc5b97ed488b60cc28", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/b66308a0d2c36bc1f6e27dbc5b97ed488b60cc28", "committedDate": "2020-10-11T21:16:06Z", "message": "Unify AA and Normal paths for TotalPowerAndTotalRolls creation.\n\nCreate Dice Strength/Roll classes that can get the correct value\ndepending on the unit and the status of the game.\n\nCondense the Support Calculator code into one class and make the methods\ninstance methods instead of static methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87b3594dbd4f7b0c7d3ad2882c2531122cd223d8", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/87b3594dbd4f7b0c7d3ad2882c2531122cd223d8", "committedDate": "2020-10-11T22:40:56Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fadc4b77cd6a96d25ee1ab1333a3b6c2c006aa7b", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/fadc4b77cd6a96d25ee1ab1333a3b6c2c006aa7b", "committedDate": "2020-10-12T03:31:58Z", "message": "Refactor Available Support Calculator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "243517a996110b3678e3b7ff0ee35f84c9cba228", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/243517a996110b3678e3b7ff0ee35f84c9cba228", "committedDate": "2020-10-12T05:50:38Z", "message": "Update tests to not use AvailableSupportCalculator builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7148015b58af6ccf9399d2bfa125c1609832c757", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/7148015b58af6ccf9399d2bfa125c1609832c757", "committedDate": "2020-10-12T15:44:09Z", "message": "Create a filter method on instead of a copy constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ed88a9040e64454ca80cb64bbbed60fd6f9bdb5", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/6ed88a9040e64454ca80cb64bbbed60fd6f9bdb5", "committedDate": "2020-10-12T16:10:48Z", "message": "Create holder classes for strength/roll classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fe18c3406b87f088d5f04809bce6eff3532b998", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/6fe18c3406b87f088d5f04809bce6eff3532b998", "committedDate": "2020-10-12T16:14:20Z", "message": "Fix long line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1bfa584a5929cfd7c0dbe215275d76874db7097", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/a1bfa584a5929cfd7c0dbe215275d76874db7097", "committedDate": "2020-10-12T20:51:13Z", "message": "Pass around StrengthOrRollCalculator instead of individual values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc86f5242242b275febfbfa4fed63bb121532891", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/dc86f5242242b275febfbfa4fed63bb121532891", "committedDate": "2020-10-12T21:34:30Z", "message": "Reduce visibility of the calculators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38535ace2d42dc220db41fc7ff5ccc0c6a8f97d2", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/38535ace2d42dc220db41fc7ff5ccc0c6a8f97d2", "committedDate": "2020-10-12T21:42:00Z", "message": "Use the static builders for now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/35c8e4e3a89a9dadf332775006d00b53fbe1ef63", "committedDate": "2020-10-12T23:22:15Z", "message": "Rename Normal to Main"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMDA4MDM2", "url": "https://github.com/triplea-game/triplea/pull/7891#pullrequestreview-511008036", "createdAt": "2020-10-17T18:58:47Z", "commit": {"oid": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxODo1ODo0N1rOHjfMUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxOTowNDozN1rOHjfOIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzI2NA==", "bodyText": "What do you think of renaming AvailableSupportTracker to AvailableSupports?\n'Tracker' is a bit similar to 'manager' in terms of naming value, I'm not sure it is adding a lot.\nWith that, the local variable here has an old name to it. Suggesting:\nfinal AvailabelSupports availableSupports =         AvailableSupports.getSupport(\n            units, data.getUnitTypeList().getSupportRules(), defense, true);\n\nWith that, I'm not sure getSupport is the best factory method name, it's not a typical factory method name. What would you think of moving the static functionality back to the calculator class? This I think would have benefit as the stateful available support information would be in AvailableSupports and hte static computation would be in the calculator.", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r506973264", "createdAt": "2020-10-17T18:58:47Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java", "diffHunk": "@@ -282,17 +281,14 @@ private double calculateSupportFactor(\n     final List<Unit> units = new ArrayList<>(ownedLocalUnits);\n     units.addAll(unitsToPlace);\n     units.addAll(unitType.create(1, player, true));\n-    final SupportCalculationResult supportCalculationResult =\n-        AvailableSupportCalculator.getSupport(\n+    final AvailableSupportTracker supportCalculationResult =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzM5NQ==", "bodyText": "It does not look like this is yet called from tests, did you mean to commit changes to this file as part of this PR?", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r506973395", "createdAt": "2020-10-17T19:00:02Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/TerritoryEffectAttachment.java", "diffHunk": "@@ -48,8 +49,10 @@ private void setCombatDefenseEffect(final String combatDefenseEffect) throws Gam\n     setCombatEffect(combatDefenseEffect, true);\n   }\n \n-  private void setCombatDefenseEffect(final IntegerMap<UnitType> value) {\n+  @VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzQ1MA==", "bodyText": "What's the rationale for excluding 'count' from equals and hash code?", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r506973450", "createdAt": "2020-10-17T19:00:45Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitSupportAttachment.java", "diffHunk": "@@ -60,7 +63,8 @@\n     private static final long serialVersionUID = -7445551357956238314L;\n \n     @Nonnull String name;\n-    @Nonnull Integer count;\n+\n+    @EqualsAndHashCode.Exclude @Nonnull Integer count;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzU5NQ==", "bodyText": "We may want to think about the interface naming. 'OffenseOrDefenseCalculator' seems to be a bit too vague, not necessarily single purpose.\nIF you saw for example an instance of the interface passed, OffenseOrDefenseCalculator, would its API usage and methods be relatively obvious?", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r506973595", "createdAt": "2020-10-17T19:02:24Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCalculator.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCalculator implements OffenseOrDefenseCalculator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzcyOQ==", "bodyText": "One suggestion, we may want to avoid the 'calculator' suffix. That tends to implies relatively stateless objects that are functional. Calculators tend to receive in put values and compute output values, they're essentially functions. It looks like the instances each have a pretty decent amount of state behind them.\nPerhaps this class could be called AaDefenseCombatValue and the interface CombatValue", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r506973729", "createdAt": "2020-10-17T19:04:37Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCalculator.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCalculator implements OffenseOrDefenseCalculator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzU5NQ=="}, "originalCommit": {"oid": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8983132bbba378f1e780a404df2aef153758a15a", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/8983132bbba378f1e780a404df2aef153758a15a", "committedDate": "2020-10-20T23:48:49Z", "message": "Rename class per review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b737f2cbbe09d73efd2578d7998435a4ea9f0104", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/b737f2cbbe09d73efd2578d7998435a4ea9f0104", "committedDate": "2020-10-21T14:37:17Z", "message": "Split support data into value object and manager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDQ3MTQx", "url": "https://github.com/triplea-game/triplea/pull/7891#pullrequestreview-518047141", "createdAt": "2020-10-27T19:04:44Z", "commit": {"oid": "b737f2cbbe09d73efd2578d7998435a4ea9f0104"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTowNDo0NFrOHpMQMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToxODoxOFrOHpMuAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NDQxOA==", "bodyText": "availableSupports.getSupportRules().values() looks like a violation of the law of delimiter.\nWhat would you think of replacing the above with a method like:\n availableSupports.getUnitSupportAttachments()", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512954418", "createdAt": "2020-10-27T19:04:44Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java", "diffHunk": "@@ -282,17 +281,13 @@ private double calculateSupportFactor(\n     final List<Unit> units = new ArrayList<>(ownedLocalUnits);\n     units.addAll(unitsToPlace);\n     units.addAll(unitType.create(1, player, true));\n-    final SupportCalculationResult supportCalculationResult =\n-        AvailableSupportCalculator.getSupport(\n-            units, data.getUnitTypeList().getSupportRules(), defense, true);\n-\n-    final Set<List<UnitSupportAttachment>> supportsAvailable =\n-        supportCalculationResult.getSupportRules();\n-    final IntegerMap<UnitSupportAttachment> supportLeft = supportCalculationResult.getSupportLeft();\n+    final SupportCalculator availableSupports =\n+        new SupportCalculator(units, data.getUnitTypeList().getSupportRules(), defense, true);\n \n     double totalSupportFactor = 0;\n     for (final UnitSupportAttachment usa : unitSupportAttachments) {\n-      for (final List<UnitSupportAttachment> bonusType : supportsAvailable) {\n+      for (final List<UnitSupportAttachment> bonusType :\n+          availableSupports.getSupportRules().values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b737f2cbbe09d73efd2578d7998435a4ea9f0104"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NTg3NA==", "bodyText": "Is 'friendlySupportTracker' a legacy name when the 'supports' was a tracker? WDYT to rename these to 'friendlySupports' and 'enemySupports'\nAlso worth considering renaming 'enemySupports' to 'enemyNegativeBuffs'. 'enemySupports' sounds like we are tracking both defense and offense and the respective supports for each side. My understanding is the enemySupport here is an \"anti-support\" being imposed by enemy units (hence, a negative buff).", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512955874", "createdAt": "2020-10-27T19:07:19Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b737f2cbbe09d73efd2578d7998435a4ea9f0104"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njk4NA==", "bodyText": "It's a bit odd this class is not generic for either offense or defnese. Could you double check if it's possible to make the defense flag, a flag within the implementation.", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512956984", "createdAt": "2020-10-27T19:09:20Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;\n+  @NonNull AvailableSupports enemySupportTracker;\n+\n+  @Override\n+  public StrengthOrRollCalculator getRoll() {\n+    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public StrengthOrRollCalculator getStrength() {\n+    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b737f2cbbe09d73efd2578d7998435a4ea9f0104"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njk5OQ==", "bodyText": "nit, any thoughts to rename data to gameData, then you can use a lombok @Getter to perhaps clean up the code a little bit.", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512956999", "createdAt": "2020-10-27T19:09:23Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;\n+  @NonNull AvailableSupports enemySupportTracker;\n+\n+  @Override\n+  public StrengthOrRollCalculator getRoll() {\n+    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public StrengthOrRollCalculator getStrength() {\n+    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  @Override\n+  public GameData getGameData() {\n+    return data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b737f2cbbe09d73efd2578d7998435a4ea9f0104"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1ODExMg==", "bodyText": "StrengthOrRollCalculator IMO is arguably a confusing concept. When is it is a strength calculator, when it is it a roll calculator. If we see an instance of it, do we know what it is or do we have to look at its state and trace back any interactions with the object to understand it. I think this hints to a SRP violation.\nIf we can break out \"StrengthOrRollCalculator\" into two interfaces, I believe that would resolve the above questions. Any thoughts/comments on options here @trevan ?", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512958112", "createdAt": "2020-10-27T19:11:15Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;\n+  @NonNull AvailableSupports enemySupportTracker;\n+\n+  @Override\n+  public StrengthOrRollCalculator getRoll() {\n+    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public StrengthOrRollCalculator getStrength() {\n+    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  @Override\n+  public GameData getGameData() {\n+    return data;\n+  }\n+\n+  static class AaDefenseRoll extends StrengthOrRollCalculator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b737f2cbbe09d73efd2578d7998435a4ea9f0104"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MDgwNw==", "bodyText": "nit, unnecessary intermediate variable, can just return with a single line.\nIt is a bit interesting we don't return a RollValue directly in this method, that would make for stronger typing. Any thoughts about doing that?", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512960807", "createdAt": "2020-10-27T19:15:56Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;\n+  @NonNull AvailableSupports enemySupportTracker;\n+\n+  @Override\n+  public StrengthOrRollCalculator getRoll() {\n+    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public StrengthOrRollCalculator getStrength() {\n+    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  @Override\n+  public GameData getGameData() {\n+    return data;\n+  }\n+\n+  static class AaDefenseRoll extends StrengthOrRollCalculator {\n+\n+    AaDefenseRoll(final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n+      super(friendlySupport, enemySupport);\n+    }\n+\n+    @Override\n+    public int getValue(final Unit unit) {\n+      final RollValue rollValue =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b737f2cbbe09d73efd2578d7998435a4ea9f0104"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MjA1MQ==", "bodyText": "I don't know if a 'rule filter' is cohesive to an API for defense combat value. This seems like it probably should belong to another interface, or a different class. Alternatively, the filter perhaps should accept a collection and then return a filtered result so that the caller is not aware that a predicate is being used. But again, offhand, filtering units seems to be a slightly different operation type compared to combat value calculation. Thoughts on any options around this?", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512962051", "createdAt": "2020-10-27T19:18:18Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;\n+  @NonNull AvailableSupports enemySupportTracker;\n+\n+  @Override\n+  public StrengthOrRollCalculator getRoll() {\n+    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public StrengthOrRollCalculator getStrength() {\n+    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  @Override\n+  public GameData getGameData() {\n+    return data;\n+  }\n+\n+  static class AaDefenseRoll extends StrengthOrRollCalculator {\n+\n+    AaDefenseRoll(final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n+      super(friendlySupport, enemySupport);\n+    }\n+\n+    @Override\n+    public int getValue(final Unit unit) {\n+      final RollValue rollValue =\n+          RollValue.of(unit.getUnitAttachment().getMaxAaAttacks())\n+              .add(addSupport(unit, friendlySupportTracker))\n+              .add(addSupport(unit, enemySupportTracker));\n+      return rollValue.getValue();\n+    }\n+\n+    @Override\n+    protected Predicate<UnitSupportAttachment> getRuleFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b737f2cbbe09d73efd2578d7998435a4ea9f0104"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51defbef70390e87a57bab2eac04d9b8c6501cbf", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/51defbef70390e87a57bab2eac04d9b8c6501cbf", "committedDate": "2020-10-27T22:35:43Z", "message": "Rename variables and remove unneeded intermediate variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d215219053a2e3f571c2c0d9ea4c478a8866f66", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/6d215219053a2e3f571c2c0d9ea4c478a8866f66", "committedDate": "2020-10-27T22:37:18Z", "message": "Rename StrengthOrRollCalculator to StrengthAndRollCalculator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjE5OTc2", "url": "https://github.com/triplea-game/triplea/pull/7891#pullrequestreview-518219976", "createdAt": "2020-10-27T23:18:45Z", "commit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzoxODo0NVrOHpUa_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo1NjoyNlrOHpVJxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4ODI1NA==", "bodyText": "Is this still just defense strength? The javadoc and class name do not seem to agree", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513088254", "createdAt": "2020-10-27T23:18:45Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaCombatValue.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4OTM0OQ==", "bodyText": "For future consideration, a more specific name than 'getValue' could be of benefit. Specifically to consider, what kind of value are we returning? Is this the roll value, the total strength, or just the die-strength?", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513089349", "createdAt": "2020-10-27T23:21:29Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Value\n+@EqualsAndHashCode(callSuper = true)\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue extends AaCombatValue {\n+\n+  @Builder\n+  AaDefenseCombatValue(\n+      final GameData gameData,\n+      final AvailableSupports supportFromFriends,\n+      final AvailableSupports supportFromEnemies) {\n+    super(gameData, supportFromFriends, supportFromEnemies);\n+  }\n+\n+  @Override\n+  public StrengthAndRollCalculator getStrength() {\n+    return new AaDefenseStrength(gameData, supportFromFriends, supportFromEnemies);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  static class AaDefenseStrength extends StrengthAndRollCalculator {\n+\n+    private final GameData gameData;\n+\n+    AaDefenseStrength(\n+        final GameData gameData,\n+        final AvailableSupports friendlySupport,\n+        final AvailableSupports enemySupport) {\n+      super(friendlySupport, enemySupport);\n+      this.gameData = gameData;\n+    }\n+\n+    @Override\n+    public int getValue(final Unit unit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MDA5MQ==", "bodyText": "There does not seem to be a lot going on in this class implementation. It looks like we could make AaCombatValue a concrete class by adding a boolean parameter for offense, defense, and adding a Supplier<StrengthAndRollCalculator> and then you could instantiate the base class and not need any inheritance.", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513090091", "createdAt": "2020-10-27T23:23:53Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaOffenseCombatValue.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Calculates offense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Value\n+@EqualsAndHashCode(callSuper = true)\n+@Getter(AccessLevel.NONE)\n+class AaOffenseCombatValue extends AaCombatValue {\n+\n+  @Builder\n+  AaOffenseCombatValue(\n+      final GameData gameData,\n+      final AvailableSupports supportFromFriends,\n+      final AvailableSupports supportFromEnemies) {\n+    super(gameData, supportFromFriends, supportFromEnemies);\n+  }\n+\n+  @Override\n+  public StrengthAndRollCalculator getStrength() {\n+    return new AaOffenseStrength(gameData, supportFromFriends, supportFromEnemies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MTM0Mg==", "bodyText": "Any thoughts to use a guava multimap here? That datastructure is equivalent to a Map<X, Collection<Y>>\nAfter instantiating the map, you should be able to simplify and write:\nfinal var supportRules =     HashMultimap.create();\nentry.getValue().stream().filter(ruleFilter).forEach(supportRules::put)", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513091342", "createdAt": "2020-10-27T23:27:49Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AvailableSupports.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/**\n+ * Tracks the available support that a collection of units can give to other units.\n+ *\n+ * <p>Once a support is used, it will no longer be available for other units to use.\n+ */\n+@Data\n+@Builder(access = AccessLevel.PRIVATE)\n+@AllArgsConstructor\n+class AvailableSupports {\n+\n+  static final AvailableSupports EMPTY_RESULT =\n+      AvailableSupports.builder()\n+          .supportRules(new HashMap<>())\n+          .supportUnits(new HashMap<>())\n+          .build();\n+\n+  final Map<UnitSupportAttachment.BonusType, List<UnitSupportAttachment>> supportRules;\n+  final Map<UnitSupportAttachment, IntegerMap<Unit>> supportUnits;\n+\n+  /** Sorts 'supportsAvailable' lists based on unit support attachment rules. */\n+  static AvailableSupports getSortedSupport(final SupportCalculator supportCalculator) {\n+    final AvailableSupports supportCalculationResult = getSupport(supportCalculator);\n+\n+    final SupportRuleSort supportRuleSort =\n+        SupportRuleSort.builder()\n+            .defense(supportCalculator.isDefence())\n+            .friendly(supportCalculator.isAllies())\n+            .roll(UnitSupportAttachment::getRoll)\n+            .strength(UnitSupportAttachment::getStrength)\n+            .build();\n+    supportCalculationResult\n+        .getSupportRules()\n+        .forEach((bonusType, unitSupportAttachment) -> unitSupportAttachment.sort(supportRuleSort));\n+    return supportCalculationResult;\n+  }\n+\n+  static AvailableSupports getSupport(final SupportCalculator supportCalculator) {\n+    return builder()\n+        .supportRules(supportCalculator.getSupportRules())\n+        .supportUnits(supportCalculator.getSupportUnits())\n+        .build();\n+  }\n+\n+  /** Constructs a filtered version of this */\n+  AvailableSupports filter(final Predicate<UnitSupportAttachment> ruleFilter) {\n+\n+    final Map<UnitSupportAttachment.BonusType, List<UnitSupportAttachment>> supportRules =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MjU3MA==", "bodyText": "buildMain is a bit unclear here. It seems implied this is buildMainCombat, in which case I think that should be explicitly named to keep it easier on the reader.", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513092570", "createdAt": "2020-10-27T23:31:51Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+\n+public interface CombatValue {\n+\n+  StrengthAndRollCalculator getRoll();\n+\n+  StrengthAndRollCalculator getStrength();\n+\n+  boolean isDefending();\n+\n+  GameData getGameData();\n+\n+  static CombatValue buildMain(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MzEyMw==", "bodyText": "side-note, 'waiting to die' is not very meaningful. We should consider renaming that to 'selectedAsCasualties' or simply 'casualties'. In the game, a 'casualty' is relatively well defined to be the units selected as casualties and able to fire back. The removal of casualties is a distinct phase, offense of course removes casualties immediately. 'waiting to die' I think is adding new terminology that is just more stuff to know/remember and is just inventing new domain terminology.", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513093123", "createdAt": "2020-10-27T23:33:40Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+\n+public interface CombatValue {\n+\n+  StrengthAndRollCalculator getRoll();\n+\n+  StrengthAndRollCalculator getStrength();\n+\n+  boolean isDefending();\n+\n+  GameData getGameData();\n+\n+  static CombatValue buildMain(\n+      final Collection<Unit> allEnemyUnitsAliveOrWaitingToDie,\n+      final Collection<Unit> allFriendlyUnitsAliveOrWaitingToDie,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5Mzg1MA==", "bodyText": "boolean parameters are often best avoided. I suggest moving these factor methods to a factory class. In that case you can have an internal factory method (private) that has a boolean paramter, but the public methods would be buildMainOffensiveCombatValue and buildMainDefensiveCombatValue and buildAaDefensiveCombatValue\nIf those methods are in a CombatValueFactory, the suffix probably could be dropped, ie:\nbuildMainOffensive, etc..\nWDYT?", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513093850", "createdAt": "2020-10-27T23:35:40Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+\n+public interface CombatValue {\n+\n+  StrengthAndRollCalculator getRoll();\n+\n+  StrengthAndRollCalculator getStrength();\n+\n+  boolean isDefending();\n+\n+  GameData getGameData();\n+\n+  static CombatValue buildMain(\n+      final Collection<Unit> allEnemyUnitsAliveOrWaitingToDie,\n+      final Collection<Unit> allFriendlyUnitsAliveOrWaitingToDie,\n+      final boolean defending,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDEyMw==", "bodyText": "If we are just using the support rules from the GameData, what do you think about passing those support rules directly to the method API? That should help create a more testable interface and drops a dependency on GameData.", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513094123", "createdAt": "2020-10-27T23:36:39Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+\n+public interface CombatValue {\n+\n+  StrengthAndRollCalculator getRoll();\n+\n+  StrengthAndRollCalculator getStrength();\n+\n+  boolean isDefending();\n+\n+  GameData getGameData();\n+\n+  static CombatValue buildMain(\n+      final Collection<Unit> allEnemyUnitsAliveOrWaitingToDie,\n+      final Collection<Unit> allFriendlyUnitsAliveOrWaitingToDie,\n+      final boolean defending,\n+      final GameData data,\n+      final Territory location,\n+      final Collection<TerritoryEffect> territoryEffects) {\n+\n+    // Get all friendly supports\n+    final AvailableSupports supportFromFriends =\n+        AvailableSupports.getSortedSupport(\n+            new SupportCalculator(\n+                allFriendlyUnitsAliveOrWaitingToDie,\n+                data.getUnitTypeList().getSupportRules(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDU5OQ==", "bodyText": "Is there a low luck variant of this class? \"normal dice\" makes me think there is a second defense combat value used for LL.", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513094599", "createdAt": "2020-10-27T23:38:13Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Constants;\n+import games.strategy.triplea.attachments.RulesAttachment;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import games.strategy.triplea.delegate.TerritoryEffectHelper;\n+import java.util.Collection;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for normal dice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NTMyMA==", "bodyText": "nit, please prefer to spell out variable names.\nra => rulesAttachment", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513095320", "createdAt": "2020-10-27T23:40:16Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Constants;\n+import games.strategy.triplea.attachments.RulesAttachment;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import games.strategy.triplea.delegate.TerritoryEffectHelper;\n+import java.util.Collection;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for normal dice\n+ *\n+ * <p>This takes into account territory effects, friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class MainDefenseCombatValue implements CombatValue {\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @NonNull AvailableSupports supportFromFriends;\n+  @NonNull AvailableSupports supportFromEnemies;\n+  @NonNull Collection<TerritoryEffect> territoryEffects;\n+\n+  @Override\n+  public StrengthAndRollCalculator getRoll() {\n+    return new MainDefenseRoll(supportFromFriends, supportFromEnemies);\n+  }\n+\n+  @Override\n+  public StrengthAndRollCalculator getStrength() {\n+    return new MainDefenseStrength(\n+        gameData, supportFromFriends, supportFromEnemies, territoryEffects);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  static class MainDefenseRoll extends StrengthAndRollCalculator {\n+\n+    MainDefenseRoll(final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n+      super(friendlySupport, enemySupport);\n+    }\n+\n+    @Override\n+    public int getValue(final Unit unit) {\n+      return RollValue.of(unit.getUnitAttachment().getDefenseRolls(unit.getOwner()))\n+          .add(addSupport(unit, friendlySupportTracker))\n+          .add(addSupport(unit, enemySupportTracker))\n+          .getValue();\n+    }\n+\n+    @Override\n+    protected Predicate<UnitSupportAttachment> getRuleFilter() {\n+      return UnitSupportAttachment::getRoll;\n+    }\n+  }\n+\n+  static class MainDefenseStrength extends StrengthAndRollCalculator {\n+\n+    private final GameData gameData;\n+    private final Collection<TerritoryEffect> territoryEffects;\n+\n+    MainDefenseStrength(\n+        final GameData gameData,\n+        final AvailableSupports friendlySupport,\n+        final AvailableSupports enemySupport,\n+        final Collection<TerritoryEffect> territoryEffects) {\n+      super(friendlySupport, enemySupport);\n+      this.gameData = gameData;\n+      this.territoryEffects = territoryEffects;\n+    }\n+\n+    @Override\n+    public int getValue(final Unit unit) {\n+      int strength = unit.getUnitAttachment().getDefense(unit.getOwner());\n+      boolean allowFriendly = true;\n+      if (isFirstTurnLimitedRoll(unit.getOwner())) {\n+        // if first turn is limited, the strength is a max of 1 and no friendly support\n+        strength = Math.min(1, strength);\n+        allowFriendly = false;\n+      }\n+      StrengthValue strengthValue =\n+          StrengthValue.of(gameData.getDiceSides(), strength)\n+              .add(\n+                  TerritoryEffectHelper.getTerritoryCombatBonus(\n+                      unit.getType(), territoryEffects, true));\n+\n+      if (allowFriendly) {\n+        strengthValue = strengthValue.add(addSupport(unit, friendlySupportTracker));\n+      }\n+      strengthValue = strengthValue.add(addSupport(unit, enemySupportTracker));\n+      return strengthValue.getValue();\n+    }\n+\n+    private boolean isFirstTurnLimitedRoll(final GamePlayer player) {\n+      // If player is null, Round > 1, or player has negate rule set: return false\n+      return !player.isNull()\n+          && gameData.getSequence().getRound() == 1\n+          && !isNegateDominatingFirstRoundAttack(player)\n+          && isDominatingFirstRoundAttack(gameData.getSequence().getStep().getPlayerId());\n+    }\n+\n+    private boolean isNegateDominatingFirstRoundAttack(final GamePlayer player) {\n+      final RulesAttachment ra =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NjczMA==", "bodyText": "More explanation about the expected behavior here would help. It's not clear what is meant by an infinite roll value, and what 'correctly limiting a value' would mean. EG: what is correct? What would be incorrect? What does it mean to 'limit' a roll value?", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513096730", "createdAt": "2020-10-27T23:44:57Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Holds the value of a dice roll.\n+ *\n+ * <p>Handles infinite values and correctly limits the value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5ODM3NA==", "bodyText": "It looks like we get a no-op when the roll value is infinite. Could that be a silent bug? Why would a caller want to invoke a method for a no-op, it seems that the caller did not realize it was dealing with an infinite roll value.\nI think this leads to some bigger questions. Perhaps RollValue is not just a simple integer and should not be exposed as that. We have a getValue() method as well that returns a magic number to indicate if the roll value is infinite (which is a SRP violation, the number is then context dependent and either it means the roll value, or if it is a magic number then it tell us the roll value is infinite).\nI think this is probably solved by handling the infinite case at the point of the caller. For example, looking at:\n      return RollValue.of(unit.getUnitAttachment().getDefenseRolls(unit.getOwner()))\n          .add(addSupport(unit, friendlySupportTracker))\n          .add(addSupport(unit, enemySupportTracker))\n          .getValue();\n\nIf the roll value is infinite:\n\nare we wasting support?\nis the roll value being returned a -1, or some other number?\n\nIt's not really clear for the above two questions.", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513098374", "createdAt": "2020-10-27T23:50:36Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Holds the value of a dice roll.\n+ *\n+ * <p>Handles infinite values and correctly limits the value\n+ */\n+@Value(staticConstructor = \"of\")\n+@Getter(AccessLevel.NONE)\n+class RollValue {\n+\n+  int value;\n+  boolean isInfinite;\n+\n+  static RollValue of(final int value) {\n+    return RollValue.of(value, value == -1);\n+  }\n+\n+  RollValue add(final int extraValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5ODgzMg==", "bodyText": "It does not seem to be clear whether this is roll value, or strength value. Would it make sense to have two abstract methods, one for each? This way any caller can explicitly ask for bonus rolls, or bonus strength without having to infer the value returning based on the instance of the object.", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513098832", "createdAt": "2020-10-27T23:52:08Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import lombok.Getter;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates the value of the dice roll and strength. */\n+abstract class StrengthAndRollCalculator {\n+\n+  protected final AvailableSupports friendlySupportTracker;\n+  protected final AvailableSupports enemySupportTracker;\n+  // Keep track of the units that are providing support and whom they are providing it to\n+  @Getter private final Map<Unit, IntegerMap<Unit>> supportGiven = new HashMap<>();\n+\n+  StrengthAndRollCalculator(\n+      final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n+    this.friendlySupportTracker = friendlySupport.filter(getRuleFilter());\n+    this.enemySupportTracker = enemySupport.filter(getRuleFilter());\n+  }\n+\n+  abstract int getValue(Unit unit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTI4MQ==", "bodyText": "It's a bit difficult to understand the API of this method and what is being returned exactly. Is this a functional method, or are we modifying state. If modifying state, what does the return value represent?\nI think it would be easier for future maintainers to have this explicitly stated rather than being left to only reverse engineer the code.", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513099281", "createdAt": "2020-10-27T23:53:34Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import lombok.Getter;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates the value of the dice roll and strength. */\n+abstract class StrengthAndRollCalculator {\n+\n+  protected final AvailableSupports friendlySupportTracker;\n+  protected final AvailableSupports enemySupportTracker;\n+  // Keep track of the units that are providing support and whom they are providing it to\n+  @Getter private final Map<Unit, IntegerMap<Unit>> supportGiven = new HashMap<>();\n+\n+  StrengthAndRollCalculator(\n+      final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n+    this.friendlySupportTracker = friendlySupport.filter(getRuleFilter());\n+    this.enemySupportTracker = enemySupport.filter(getRuleFilter());\n+  }\n+\n+  abstract int getValue(Unit unit);\n+\n+  protected abstract Predicate<UnitSupportAttachment> getRuleFilter();\n+\n+  protected int addSupport(final Unit unit, final AvailableSupports supportTracker) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTg1Mw==", "bodyText": "nit, a die does not have strength.\nRephrasing suggestion:  Holds the value of units dice roll strength", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513099853", "createdAt": "2020-10-27T23:55:15Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Holds the value of a dice strength", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDA0Nw==", "bodyText": "Could you clarify what is meant by:  \"Correctly limits the value\"", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513100047", "createdAt": "2020-10-27T23:55:52Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Holds the value of a dice strength\n+ *\n+ * <p>Correctly limits the value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDIyOA==", "bodyText": "Is the code in this class all just moved code? Anything new or modified here?", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513100228", "createdAt": "2020-10-27T23:56:26Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/SupportCalculator.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates how much support units can give */\n+@Value\n+@Getter(value = AccessLevel.PACKAGE)\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class SupportCalculator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a72821578156b8ef6089804ec1627489b86fc91a", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/a72821578156b8ef6089804ec1627489b86fc91a", "committedDate": "2020-10-28T01:18:26Z", "message": "Move common Offense/DefenseAaRoll classes to its own class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b29b7acc641b3ba8d19b5da79161409c5902946", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/4b29b7acc641b3ba8d19b5da79161409c5902946", "committedDate": "2020-10-28T01:51:04Z", "message": "Improve names and comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e57f3a55be8814db75501cc563014fd8868b34f", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/0e57f3a55be8814db75501cc563014fd8868b34f", "committedDate": "2020-10-28T02:47:35Z", "message": "Split StrengthAndRollCalculators into StrengthCalculator/RollCalculator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fe777089822ac719fbe5c5830f769f3dd4e54de", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/5fe777089822ac719fbe5c5830f769f3dd4e54de", "committedDate": "2020-10-28T02:53:14Z", "message": "Add documentation for giveSupport"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "358ef3cd56818992717ad7261a71ca129acd2c82", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/358ef3cd56818992717ad7261a71ca129acd2c82", "committedDate": "2020-10-27T22:56:29Z", "message": "Move shared Aa code to AaCombatValue abstract class"}, "afterCommit": {"oid": "5fe777089822ac719fbe5c5830f769f3dd4e54de", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/5fe777089822ac719fbe5c5830f769f3dd4e54de", "committedDate": "2020-10-28T02:53:14Z", "message": "Add documentation for giveSupport"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0669bf4be734b7b55a6ded14ddb4ca20e0360615", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/0669bf4be734b7b55a6ded14ddb4ca20e0360615", "committedDate": "2020-10-28T15:00:47Z", "message": "Minor comment change to be clearer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3832f8956d4c721c77f1e8ffa13de27980f565f", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/d3832f8956d4c721c77f1e8ffa13de27980f565f", "committedDate": "2020-10-28T15:05:18Z", "message": "Rename StrengthAndRollCalculator as UsedSupportTracker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MzEyOTUx", "url": "https://github.com/triplea-game/triplea/pull/7891#pullrequestreview-519312951", "createdAt": "2020-10-29T03:44:44Z", "commit": {"oid": "5fe777089822ac719fbe5c5830f769f3dd4e54de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzo0NDo0NFrOHqHtQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzo0NDo0NFrOHqHtQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkyODUxMw==", "bodyText": "might be worthwhile clarifying if the support is a strength bonus or a roll bonus. Is there a way to know which one will be returned?", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513928513", "createdAt": "2020-10-29T03:44:44Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java", "diffHunk": "@@ -13,8 +13,18 @@\n   // Keep track of the units that are providing support and whom they are providing it to\n   @Getter Map<Unit, IntegerMap<Unit>> supportGiven = new HashMap<>();\n \n-  int addSupport(final Unit unit, final AvailableSupports supportTracker) {\n-    final IntegerMap<Unit> supportGivenToUnit = supportTracker.giveSupportToUnit(unit);\n+  /**\n+   * Gives support to the unit and removes it from the availableSupport\n+   *\n+   * <p>Each time this is called, the amount of available support will decrease equal to the amount\n+   * returned.\n+   *\n+   * @param unit Unit to have support given to it\n+   * @param availableSupport Keeps state of what support is still available\n+   * @return the amount of support given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe777089822ac719fbe5c5830f769f3dd4e54de"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d67c26d874f6083fb221bb4fa590670145b2f541", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/d67c26d874f6083fb221bb4fa590670145b2f541", "committedDate": "2020-10-29T06:02:06Z", "message": "Track the support given in AvailableSupports instead of the CombatValue classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a23191b96c2ecd4294eefe390ed1bc9d5478bd99", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/a23191b96c2ecd4294eefe390ed1bc9d5478bd99", "committedDate": "2020-10-29T06:06:44Z", "message": "Reword 'normal dice' as 'non-AA dice'"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3887, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}