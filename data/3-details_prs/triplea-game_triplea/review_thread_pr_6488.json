{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MjAwODA0", "number": 6488, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozNDozN1rOD9Ni5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjoxMzozNVrOD9kcgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTExNjU0OnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/lobby/player/PlayerLobbyActionsFeignClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozNDozN1rOGWkvjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozNDozN1rOGWkvjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyMzg1NQ==", "bodyText": "Similar blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426323855", "createdAt": "2020-05-18T00:34:37Z", "author": {"login": "codeclimate"}, "path": "http-clients/src/main/java/org/triplea/http/client/lobby/player/PlayerLobbyActionsFeignClient.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.triplea.http.client.lobby.player;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTExNjU1OnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/client/connections/GameToLobbyConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozNDozOFrOGWkvkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozNDozOFrOGWkvkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyMzg1Ng==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426323856", "createdAt": "2020-05-18T00:34:38Z", "author": {"login": "codeclimate"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/client/connections/GameToLobbyConnection.java", "diffHunk": "@@ -89,4 +91,14 @@ public void close() {\n   public void sendChatMessageToLobby(final ChatUploadParams chatUploadParams) {\n     lobbyWatcherClient.uploadChatMessage(lobbyClient.getApiKey(), chatUploadParams);\n   }\n+\n+  public void playerJoined(final String gameId, final UserName playerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTExNjU2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/lobby/client/ui/LobbyFrame.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozNDozOFrOGWkvkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozNDozOFrOGWkvkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyMzg1Nw==", "bodyText": "Method lobbyPlayerRightClickMenuActions has 38 lines of code (exceeds 30 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426323857", "createdAt": "2020-05-18T00:34:38Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/lobby/client/ui/LobbyFrame.java", "diffHunk": "@@ -95,41 +95,44 @@ public void windowClosing(final WindowEvent e) {\n         });\n   }\n \n-  private List<Action> newModeratorActions(final ChatParticipant clickedOn) {\n-    if (!lobbyClient.isModerator()) {\n-      return List.of();\n-    }\n-\n+  private List<Action> lobbyPlayerRightClickMenuActions(final ChatParticipant clickedOn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTExNjU3OnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/client/connections/GameToLobbyConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozNDozOFrOGWkvkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozNDozOFrOGWkvkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyMzg1OA==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426323858", "createdAt": "2020-05-18T00:34:38Z", "author": {"login": "codeclimate"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/client/connections/GameToLobbyConnection.java", "diffHunk": "@@ -89,4 +91,14 @@ public void close() {\n   public void sendChatMessageToLobby(final ChatUploadParams chatUploadParams) {\n     lobbyWatcherClient.uploadChatMessage(lobbyClient.getApiKey(), chatUploadParams);\n   }\n+\n+  public void playerJoined(final String gameId, final UserName playerName) {\n+    AsyncRunner.runAsync(() -> lobbyWatcherClient.playerJoined(gameId, playerName))\n+        .exceptionally(e -> log.log(Level.INFO, \"Failed to notify lobby a player connected\", e));\n+  }\n+\n+  public void playerLeft(final String gameId, final UserName playerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Njk1MjU5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/mc/ServerModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowOTo0MFrOGW2ZiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyNjoxOFrOGXMqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMzEyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .flatMap(lobbyConnection -> Optional.ofNullable(lobbyWatcherThread))\n          \n          \n            \n                    .map(lobbyConnection -> lobbyWatcherThread)", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426613129", "createdAt": "2020-05-18T13:09:40Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/mc/ServerModel.java", "diffHunk": "@@ -595,7 +596,23 @@ public IServerMessenger getMessenger() {\n   }\n \n   @Override\n-  public void connectionAdded(final INode to) {}\n+  public void connectionAdded(final INode to) {\n+    notifyLobby(\n+        (lobbyConnection, gameId) -> lobbyConnection.playerJoined(gameId, to.getPlayerName()));\n+  }\n+\n+  /**\n+   * If there is a connection to lobby, and we have established a lobby watcher, and that lobby\n+   * watcher has a game-id, then the provided parameter is executed passing to it as arguments the\n+   * lobby connection and game-id.\n+   */\n+  private void notifyLobby(\n+      final BiConsumer<GameToLobbyConnection, String> connectionAndGameIdAction) {\n+    Optional.ofNullable(gameToLobbyConnection)\n+        .flatMap(lobbyConnection -> Optional.ofNullable(lobbyWatcherThread))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3Nzk5MA==", "bodyText": "Valid suggestion. I opted to rewrite this with some if not null checks. What is bothersome to me is that we rely on gameToLobbyConnection not being null for the flatmaps to do anything and then we use the original gameToLobbyConnection value later, relying not on the return value of the optional chains but the fact that the flatMaps would not have done anything. This strikes me as non-idiomatic, generally the result of an optional 'chain' is used directly in the next statements, in this case it's not. I think it's probably just easier to check for not null values here: 8907173", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426977990", "createdAt": "2020-05-19T01:26:18Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/mc/ServerModel.java", "diffHunk": "@@ -595,7 +596,23 @@ public IServerMessenger getMessenger() {\n   }\n \n   @Override\n-  public void connectionAdded(final INode to) {}\n+  public void connectionAdded(final INode to) {\n+    notifyLobby(\n+        (lobbyConnection, gameId) -> lobbyConnection.playerJoined(gameId, to.getPlayerName()));\n+  }\n+\n+  /**\n+   * If there is a connection to lobby, and we have established a lobby watcher, and that lobby\n+   * watcher has a game-id, then the provided parameter is executed passing to it as arguments the\n+   * lobby connection and game-id.\n+   */\n+  private void notifyLobby(\n+      final BiConsumer<GameToLobbyConnection, String> connectionAndGameIdAction) {\n+    Optional.ofNullable(gameToLobbyConnection)\n+        .flatMap(lobbyConnection -> Optional.ofNullable(lobbyWatcherThread))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMzEyOQ=="}, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODg1OTQ2OnYy", "diffSide": "RIGHT", "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/client/connections/GameToLobbyConnection.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjowOTo1OVrOGXJGrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODozMDowMVrOGXVgZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxOTU5Ng==", "bodyText": "This is something that concerns me a bit. It becomes the client's responsibility to change the online status.\nIn case the bot loses its internet connection, does the server clear out the entries correctly?\nI think it does, but I'd like to be sure I didn't misinterpret something", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426919596", "createdAt": "2020-05-18T22:09:59Z", "author": {"login": "RoiEXLab"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/client/connections/GameToLobbyConnection.java", "diffHunk": "@@ -89,4 +91,14 @@ public void close() {\n   public void sendChatMessageToLobby(final ChatUploadParams chatUploadParams) {\n     lobbyWatcherClient.uploadChatMessage(lobbyClient.getApiKey(), chatUploadParams);\n   }\n+\n+  public void playerJoined(final String gameId, final UserName playerName) {\n+    AsyncRunner.runAsync(() -> lobbyWatcherClient.playerJoined(gameId, playerName))\n+        .exceptionally(e -> log.log(Level.INFO, \"Failed to notify lobby a player connected\", e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNDgwNw==", "bodyText": "Also I'm curious why you decided to make it the lobbies resposibility to keep track of the users.\nIs there anything that speaks against making the lobby \"ask\" the current users for some bot every time this menu is clicked via websocket or something?", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426924807", "createdAt": "2020-05-18T22:23:51Z", "author": {"login": "RoiEXLab"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/client/connections/GameToLobbyConnection.java", "diffHunk": "@@ -89,4 +91,14 @@ public void close() {\n   public void sendChatMessageToLobby(final ChatUploadParams chatUploadParams) {\n     lobbyWatcherClient.uploadChatMessage(lobbyClient.getApiKey(), chatUploadParams);\n   }\n+\n+  public void playerJoined(final String gameId, final UserName playerName) {\n+    AsyncRunner.runAsync(() -> lobbyWatcherClient.playerJoined(gameId, playerName))\n+        .exceptionally(e -> log.log(Level.INFO, \"Failed to notify lobby a player connected\", e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxOTU5Ng=="}, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk4MDk3NA==", "bodyText": "RemoveGame will remove players from a game: https://github.com/triplea-game/triplea/pull/6488/files#diff-33a1ee87da31c0aeb9cecfd5deeff19cR133\nRecall that RemoveGame is called on exit of any lobby-connected game. This functionality is not just for bots, but for any lobby-connected game.\nSecond, if a game dies without invoking RemoveGame, we the game listing in GameListing will expire from cache. We check for expired cache entries when computing player game participation and will update the server side model when that happens:\nhttps://github.com/triplea-game/triplea/pull/6488/files#diff-33a1ee87da31c0aeb9cecfd5deeff19cR216\nWith that said, there is possibility for the server to \"miss\" \"player-join\" and \"player-left\" messages. It'd be nice to have 100% accuracy, but this feature can tolerate some degree of inaccuracy, it does not have to be 100%.", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426980974", "createdAt": "2020-05-19T01:37:59Z", "author": {"login": "DanVanAtta"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/client/connections/GameToLobbyConnection.java", "diffHunk": "@@ -89,4 +91,14 @@ public void close() {\n   public void sendChatMessageToLobby(final ChatUploadParams chatUploadParams) {\n     lobbyWatcherClient.uploadChatMessage(lobbyClient.getApiKey(), chatUploadParams);\n   }\n+\n+  public void playerJoined(final String gameId, final UserName playerName) {\n+    AsyncRunner.runAsync(() -> lobbyWatcherClient.playerJoined(gameId, playerName))\n+        .exceptionally(e -> log.log(Level.INFO, \"Failed to notify lobby a player connected\", e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxOTU5Ng=="}, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk4MjcxNg==", "bodyText": "Is there anything that speaks against making the lobby \"ask\" the current users for some bot every time this menu is clicked via websocket or something?\n\nI suppose ideally we'd have direct communication from the client to the server. Going a websocket route is a bit indirect. The lobby would have to keep track of in-flight requests, ask bot servers to tell them their participants, receive that back, then flush any requests back to a client when the request could be computed. If any server does not respond in a timely way (EG: CPU busy), we could see unexpected issues. We also take an efficiency hit, if every player requested the current games of other players then for each request the lobby would be making a request to every game. With 50 players, making 3 requests to know which games a player is in, that would be 150 requests to each game that is open. The 'which players are in this game' makes sense for it to be direct to a server, but the 'which games is a player is in' is more difficult to answer that way.", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426982716", "createdAt": "2020-05-19T01:44:39Z", "author": {"login": "DanVanAtta"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/client/connections/GameToLobbyConnection.java", "diffHunk": "@@ -89,4 +91,14 @@ public void close() {\n   public void sendChatMessageToLobby(final ChatUploadParams chatUploadParams) {\n     lobbyWatcherClient.uploadChatMessage(lobbyClient.getApiKey(), chatUploadParams);\n   }\n+\n+  public void playerJoined(final String gameId, final UserName playerName) {\n+    AsyncRunner.runAsync(() -> lobbyWatcherClient.playerJoined(gameId, playerName))\n+        .exceptionally(e -> log.log(Level.INFO, \"Failed to notify lobby a player connected\", e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxOTU5Ng=="}, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMjc4OA==", "bodyText": "Thanks for your explanation, makes sense", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r427122788", "createdAt": "2020-05-19T08:30:01Z", "author": {"login": "RoiEXLab"}, "path": "http-clients/src/main/java/org/triplea/http/client/web/socket/client/connections/GameToLobbyConnection.java", "diffHunk": "@@ -89,4 +91,14 @@ public void close() {\n   public void sendChatMessageToLobby(final ChatUploadParams chatUploadParams) {\n     lobbyWatcherClient.uploadChatMessage(lobbyClient.getApiKey(), chatUploadParams);\n   }\n+\n+  public void playerJoined(final String gameId, final UserName playerName) {\n+    AsyncRunner.runAsync(() -> lobbyWatcherClient.playerJoined(gameId, playerName))\n+        .exceptionally(e -> log.log(Level.INFO, \"Failed to notify lobby a player connected\", e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxOTU5Ng=="}, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODg2ODUxOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/game/listing/GameListing.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjoxMzozNVrOGXJMGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyOToyOVrOGXMttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyMDk4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return entry -> entry.getValue().stream().anyMatch(id -> id.getId().equals(gameId));\n          \n          \n            \n                return entry -> entry.getValue().stream().map(GameId::getId).anyMatch(gameId::equals);", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426920986", "createdAt": "2020-05-18T22:13:35Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/game/listing/GameListing.java", "diffHunk": "@@ -167,4 +194,41 @@ void bootGame(final int moderatorId, final String id) {\n             lobbyGame ->\n                 new InetSocketAddress(lobbyGame.getHostAddress(), lobbyGame.getHostPort()));\n   }\n+\n+  public void addPlayerToGame(final UserName userName, final ApiKey apiKey, final String gameId) {\n+    playerIsInGames.put(userName, new GameId(apiKey, gameId));\n+  }\n+\n+  public void removePlayerFromGame(\n+      final UserName userName, final ApiKey apiKey, final String gameId) {\n+    playerIsInGames.remove(userName, new GameId(apiKey, gameId));\n+  }\n+\n+  /**\n+   * Gets the collection of active games (identified by hostname) that a player is playing in or has\n+   * joined as an observer.\n+   */\n+  public Collection<String> getGameNamesPlayerHasJoined(final UserName userName) {\n+    final Collection<GameId> expiredGames =\n+        playerIsInGames.get(userName).stream()\n+            .filter(gameId -> games.get(gameId).isEmpty())\n+            .collect(Collectors.toList());\n+    expiredGames.forEach(gameId -> playerIsInGames.remove(userName, gameId));\n+\n+    return playerIsInGames.get(userName).stream()\n+        .map(gameId -> games.get(gameId).map(LobbyGame::getHostName).orElse(null))\n+        .collect(Collectors.toList());\n+  }\n+\n+  public Collection<String> getPlayersInGame(final String gameId) {\n+    return playerIsInGames.asMap().entrySet().stream()\n+        .filter(playerIsInGame(gameId))\n+        .map(Map.Entry::getKey)\n+        .map(UserName::getValue)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private Predicate<Map.Entry<UserName, Collection<GameId>>> playerIsInGame(final String gameId) {\n+    return entry -> entry.getValue().stream().anyMatch(id -> id.getId().equals(gameId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3ODc0MQ==", "bodyText": "\ud83d\udc4d   090166f", "url": "https://github.com/triplea-game/triplea/pull/6488#discussion_r426978741", "createdAt": "2020-05-19T01:29:29Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/game/listing/GameListing.java", "diffHunk": "@@ -167,4 +194,41 @@ void bootGame(final int moderatorId, final String id) {\n             lobbyGame ->\n                 new InetSocketAddress(lobbyGame.getHostAddress(), lobbyGame.getHostPort()));\n   }\n+\n+  public void addPlayerToGame(final UserName userName, final ApiKey apiKey, final String gameId) {\n+    playerIsInGames.put(userName, new GameId(apiKey, gameId));\n+  }\n+\n+  public void removePlayerFromGame(\n+      final UserName userName, final ApiKey apiKey, final String gameId) {\n+    playerIsInGames.remove(userName, new GameId(apiKey, gameId));\n+  }\n+\n+  /**\n+   * Gets the collection of active games (identified by hostname) that a player is playing in or has\n+   * joined as an observer.\n+   */\n+  public Collection<String> getGameNamesPlayerHasJoined(final UserName userName) {\n+    final Collection<GameId> expiredGames =\n+        playerIsInGames.get(userName).stream()\n+            .filter(gameId -> games.get(gameId).isEmpty())\n+            .collect(Collectors.toList());\n+    expiredGames.forEach(gameId -> playerIsInGames.remove(userName, gameId));\n+\n+    return playerIsInGames.get(userName).stream()\n+        .map(gameId -> games.get(gameId).map(LobbyGame::getHostName).orElse(null))\n+        .collect(Collectors.toList());\n+  }\n+\n+  public Collection<String> getPlayersInGame(final String gameId) {\n+    return playerIsInGames.asMap().entrySet().stream()\n+        .filter(playerIsInGame(gameId))\n+        .map(Map.Entry::getKey)\n+        .map(UserName::getValue)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private Predicate<Map.Entry<UserName, Collection<GameId>>> playerIsInGame(final String gameId) {\n+    return entry -> entry.getValue().stream().anyMatch(id -> id.getId().equals(gameId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyMDk4Ng=="}, "originalCommit": {"oid": "083bc7a8b39830723b2ab35e0e9bfe080e96d47a"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2207, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}