{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMzQzMzk3", "number": 7405, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0Nzo1M1rOEbBKpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0OTo0MVrOEbBNCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzY2MTE4OnYy", "diffSide": "RIGHT", "path": "dropwizard-common/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0Nzo1M1rOHEyW3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzo0Nzo1MFrOHFAg3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MTQwNw==", "bodyText": "One thing to consider:\nRatelimitj has a release candidate out that supports dropwizard 2.0\nMight be worth migrating before actually doing any further work here? Maybe Release Candidate ist not stable enough though.", "url": "https://github.com/triplea-game/triplea/pull/7405#discussion_r474781407", "createdAt": "2020-08-21T15:47:53Z", "author": {"login": "RoiEXLab"}, "path": "dropwizard-common/build.gradle", "diffHunk": "@@ -0,0 +1,7 @@\n+dependencies {\n+    implementation \"com.liveperson:dropwizard-websockets:$dropwizardWebsocketsVersion\"\n+    implementation \"es.moki.ratelimitj:ratelimitj-dropwizard:$rateLimitjVersion\"\n+    implementation \"es.moki.ratelimitj:ratelimitj-inmemory:$rateLimitjVersion\"\n+    implementation \"io.dropwizard:dropwizard-core:$dropwizardVersion\"\n+    implementation \"io.dropwizard:dropwizard-jdbi3:$dropwizardVersion\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf0776853892291252da5989441fe5fa3fcba278"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMzM0Mw==", "bodyText": "I'm not sure of the value of going to dropwizard 2.0. Sure it would be nice to ignore the version upgrade requests, beyond that is it actually worth it? A RC build would certainly need some try-out first.. Overall the ROI is hard to evaluate and justify to wait for the dependencies to get to where we want them.", "url": "https://github.com/triplea-game/triplea/pull/7405#discussion_r475013343", "createdAt": "2020-08-21T23:47:50Z", "author": {"login": "DanVanAtta"}, "path": "dropwizard-common/build.gradle", "diffHunk": "@@ -0,0 +1,7 @@\n+dependencies {\n+    implementation \"com.liveperson:dropwizard-websockets:$dropwizardWebsocketsVersion\"\n+    implementation \"es.moki.ratelimitj:ratelimitj-dropwizard:$rateLimitjVersion\"\n+    implementation \"es.moki.ratelimitj:ratelimitj-inmemory:$rateLimitjVersion\"\n+    implementation \"io.dropwizard:dropwizard-core:$dropwizardVersion\"\n+    implementation \"io.dropwizard:dropwizard-jdbi3:$dropwizardVersion\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MTQwNw=="}, "originalCommit": {"oid": "cf0776853892291252da5989441fe5fa3fcba278"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzY2NzI5OnYy", "diffSide": "RIGHT", "path": "dropwizard-common/src/main/java/org/triplea/dropwizard/common/ServerConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0OTo0MVrOHEyanQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzo0NTo0N1rOHFAfhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MjM2NQ==", "bodyText": "That's a weird side-effect I didn't see coming. Maybe renaming the method to document this bahaviour in some way?", "url": "https://github.com/triplea-game/triplea/pull/7405#discussion_r474782365", "createdAt": "2020-08-21T15:49:41Z", "author": {"login": "RoiEXLab"}, "path": "dropwizard-common/src/main/java/org/triplea/dropwizard/common/ServerConfiguration.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.triplea.dropwizard.common;\n+\n+import es.moki.ratelimij.dropwizard.RateLimitBundle;\n+import es.moki.ratelimitj.inmemory.InMemoryRateLimiterFactory;\n+import io.dropwizard.Configuration;\n+import io.dropwizard.configuration.EnvironmentVariableSubstitutor;\n+import io.dropwizard.configuration.SubstitutingSourceProvider;\n+import io.dropwizard.jdbi3.bundles.JdbiExceptionsBundle;\n+import io.dropwizard.setup.Bootstrap;\n+import io.dropwizard.setup.Environment;\n+import io.dropwizard.websockets.WebsocketBundle;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.websocket.server.ServerEndpointConfig;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import lombok.AllArgsConstructor;\n+import org.glassfish.jersey.logging.LoggingFeature;\n+import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;\n+\n+/**\n+ * Facilitates configuration for a dropwizard server Application class.\n+ *\n+ * @param <T> Configuration class type of the server.\n+ */\n+public class ServerConfiguration<T extends Configuration> {\n+\n+  private final Bootstrap<T> bootstrap;\n+  private final Map<Class<?>, ServerEndpointConfig> websockets = new HashMap<>();\n+\n+  @AllArgsConstructor\n+  public static class WebsocketConfig {\n+    private final Class<?> websocketClass;\n+    private final String path;\n+  }\n+\n+  public ServerConfiguration(\n+      final Bootstrap<T> bootstrap, final WebsocketConfig... websocketConfigs) {\n+    this.bootstrap = bootstrap;\n+\n+    final ServerEndpointConfig[] websockets = buildWebsockets(websocketConfigs);\n+    bootstrap.addBundle(new WebsocketBundle(websockets));\n+  }\n+\n+  private ServerEndpointConfig[] buildWebsockets(final WebsocketConfig... websocketConfigs) {\n+    return Arrays.stream(websocketConfigs)\n+        .map(\n+            websocketConfig -> {\n+              final var serverEndpointConfig =\n+                  ServerEndpointConfig.Builder.create(\n+                          websocketConfig.websocketClass, websocketConfig.path)\n+                      .build();\n+              websockets.put(websocketConfig.websocketClass, serverEndpointConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf0776853892291252da5989441fe5fa3fcba278"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMjk5Nw==", "bodyText": "\"addWebsockets\" might be better. I'll note that the method is not static precisely because it has such a side-effect (IMO it's a bit sad that the keyword is considered optional, even bad practice, as the omission of the static keyword could otherwise be used to derive pretty useful information).", "url": "https://github.com/triplea-game/triplea/pull/7405#discussion_r475012997", "createdAt": "2020-08-21T23:45:47Z", "author": {"login": "DanVanAtta"}, "path": "dropwizard-common/src/main/java/org/triplea/dropwizard/common/ServerConfiguration.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.triplea.dropwizard.common;\n+\n+import es.moki.ratelimij.dropwizard.RateLimitBundle;\n+import es.moki.ratelimitj.inmemory.InMemoryRateLimiterFactory;\n+import io.dropwizard.Configuration;\n+import io.dropwizard.configuration.EnvironmentVariableSubstitutor;\n+import io.dropwizard.configuration.SubstitutingSourceProvider;\n+import io.dropwizard.jdbi3.bundles.JdbiExceptionsBundle;\n+import io.dropwizard.setup.Bootstrap;\n+import io.dropwizard.setup.Environment;\n+import io.dropwizard.websockets.WebsocketBundle;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.websocket.server.ServerEndpointConfig;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import lombok.AllArgsConstructor;\n+import org.glassfish.jersey.logging.LoggingFeature;\n+import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;\n+\n+/**\n+ * Facilitates configuration for a dropwizard server Application class.\n+ *\n+ * @param <T> Configuration class type of the server.\n+ */\n+public class ServerConfiguration<T extends Configuration> {\n+\n+  private final Bootstrap<T> bootstrap;\n+  private final Map<Class<?>, ServerEndpointConfig> websockets = new HashMap<>();\n+\n+  @AllArgsConstructor\n+  public static class WebsocketConfig {\n+    private final Class<?> websocketClass;\n+    private final String path;\n+  }\n+\n+  public ServerConfiguration(\n+      final Bootstrap<T> bootstrap, final WebsocketConfig... websocketConfigs) {\n+    this.bootstrap = bootstrap;\n+\n+    final ServerEndpointConfig[] websockets = buildWebsockets(websocketConfigs);\n+    bootstrap.addBundle(new WebsocketBundle(websockets));\n+  }\n+\n+  private ServerEndpointConfig[] buildWebsockets(final WebsocketConfig... websocketConfigs) {\n+    return Arrays.stream(websocketConfigs)\n+        .map(\n+            websocketConfig -> {\n+              final var serverEndpointConfig =\n+                  ServerEndpointConfig.Builder.create(\n+                          websocketConfig.websocketClass, websocketConfig.path)\n+                      .build();\n+              websockets.put(websocketConfig.websocketClass, serverEndpointConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MjM2NQ=="}, "originalCommit": {"oid": "cf0776853892291252da5989441fe5fa3fcba278"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2960, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}