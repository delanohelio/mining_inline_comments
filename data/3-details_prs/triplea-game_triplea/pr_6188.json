{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMTk5MDE4", "number": 6188, "title": "Add op code test", "bodyText": "Requested in #6170 (comment)\nHere's the python script used to generate the test set, feel free to review that as well.\n#!/usr/bin/env python3\n\nimport sys\n\ndef main(argv):\n  methods = {}\n  current_type = None\n  with open(argv[1]) as f:\n    for line in f:\n      if line and line[0] != '\\t':\n        current_type = line.strip()\n        continue\n      split_line = line.split(':')\n      method = split_line[0].strip()\n      op_code = int(split_line[1].strip())\n      split_method = method.split('(')\n      method_name = split_method[0]\n      raw_method_params = split_method[1][:-1]\n      method_params = raw_method_params.split(', ') if raw_method_params else []\n      print(op_code, current_type, method_name, *method_params, sep=',')\n\nif __name__ == '__main__':\n  main(sys.argv)\nThe file used by this script can be found here: https://gist.github.com/RoiEXLab/b63ad68a29438fc6152e509d6deb4add#file-op-codes-txt\nI had to make 4 kinds of manual adjustments to the test set:\n\nThe class ChatParticipant was moved to a new package, so I had to adjust the test set accordingly\nThe method IEditDelegate#changeTechTokens(GamePlayer, int) was removed in #5992 so I had to remove this one as well. (see ade5cd5 )\nI removed all methods that are inherited from IDelegate, with the help of regular expressions. Please double check c5ed015 to be sure I didn't accidentally remove a method that wasn't supposed to be removed.\nI removed one annotation in #6170 so the tests have been adjusted accordingly\n\nFunctional Changes\n\n[] New map or map update\n[] New Feature\n[] Feature update or enhancement\n[] Feature Removal\n[] Code Cleanup or refactor\n[] Configuration Change\n[] Problem fix:  \n[x] Other:   Unit Tests\nTesting\n\nWell... No manual testing ^^", "createdAt": "2020-04-11T14:37:56Z", "url": "https://github.com/triplea-game/triplea/pull/6188", "merged": true, "mergeCommit": {"oid": "de2c035b90628eed73d417ef599582fa8b6fb1b7"}, "closed": true, "closedAt": "2020-04-11T22:43:07Z", "author": {"login": "RoiEXLab"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWmGbnAH2gAyNDAyMTk5MDE4OjUzYTVkMjMzNDQzMWM2ODI4NWE4ZWFhODE2M2U5YWI2OTBhNmE2YmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWtFOVgH2gAyNDAyMTk5MDE4OmY2ZDJkYmE4MDc3YWQxYTc4YjNkZGE1MGE3ZmM5MDJkN2NjMDdkYTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "53a5d2334431c68285a8eaa8163e9ab690a6a6bb", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/53a5d2334431c68285a8eaa8163e9ab690a6a6bb", "committedDate": "2020-04-11T13:55:50Z", "message": "Add test case for op-codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade5cd522ae9d18b07a466737de10d7d8d6ab6e9", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/ade5cd522ae9d18b07a466737de10d7d8d6ab6e9", "committedDate": "2020-04-11T13:57:36Z", "message": "Remove non-existing method from dataset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0eacdde0c7cc3dd8d18649076094592c7995ec8", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/a0eacdde0c7cc3dd8d18649076094592c7995ec8", "committedDate": "2020-04-11T14:10:58Z", "message": "Move logic to aggregator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ed015cc6140776571f8f8bc2dc7f915991cf25", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/c5ed015cc6140776571f8f8bc2dc7f915991cf25", "committedDate": "2020-04-11T14:28:21Z", "message": "Remove unwanted methods by hand"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzcxNjI1", "url": "https://github.com/triplea-game/triplea/pull/6188#pullrequestreview-391771625", "createdAt": "2020-04-11T14:38:37Z", "commit": {"oid": "c5ed015cc6140776571f8f8bc2dc7f915991cf25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDozODozN1rOGENqbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDozODozN1rOGENqbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTM0Mg==", "bodyText": "The package name of org.triplea.domain.data.ChatParticipant was changed by hand", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407071342", "createdAt": "2020-04-11T14:38:37Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/test/resources/required-op-codes.txt", "diffHunk": "@@ -0,0 +1,134 @@\n+3,games.strategy.engine.chat.IChatChannel,speakerAdded,org.triplea.domain.data.ChatParticipant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ed015cc6140776571f8f8bc2dc7f915991cf25"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzcxNzg5", "url": "https://github.com/triplea-game/triplea/pull/6188#pullrequestreview-391771789", "createdAt": "2020-04-11T14:40:42Z", "commit": {"oid": "c5ed015cc6140776571f8f8bc2dc7f915991cf25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo0MDo0MlrOGENrWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo0MDo0MlrOGENrWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTU3OA==", "bodyText": "This is kind of overkill, but I just learned about this awesome JUnit feature today so I had to try it, and it keeps the actual test code really clean IMO", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407071578", "createdAt": "2020-04-11T14:40:42Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n+\n+    assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));\n+  }\n+\n+  static class MethodAggregator implements ArgumentsAggregator {\n+    @Override\n+    public Method aggregateArguments(\n+        final ArgumentsAccessor arguments, final ParameterContext context)\n+        throws ArgumentsAggregationException {\n+      final int offset = context.getIndex();\n+      final Class<?> clazz = arguments.get(offset, Class.class);\n+      final String methodName = arguments.getString(offset + 1);\n+      final Class<?>[] args =\n+          IntStream.range(offset + 2, arguments.size())\n+              .mapToObj(i -> arguments.get(i, Class.class))\n+              .toArray(Class<?>[]::new);\n+      try {\n+        return clazz.getMethod(methodName, args);\n+      } catch (final NoSuchMethodException e) {\n+        throw new ArgumentsAggregationException(\"Invalid method specified\", e);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ed015cc6140776571f8f8bc2dc7f915991cf25"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzcxOTM1", "url": "https://github.com/triplea-game/triplea/pull/6188#pullrequestreview-391771935", "createdAt": "2020-04-11T14:42:46Z", "commit": {"oid": "c5ed015cc6140776571f8f8bc2dc7f915991cf25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo0Mjo0NlrOGENr_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo0Mjo0NlrOGENr_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTc0MA==", "bodyText": "The reason strings are not really required here, but for some reason my IntelliJ doesn't display the \"correct\" method name that includes the parameters toString info.", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407071740", "createdAt": "2020-04-11T14:42:46Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n+\n+    assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ed015cc6140776571f8f8bc2dc7f915991cf25"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2834ed24cf9e5a67779c189beb56dc1a00d38e75", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/2834ed24cf9e5a67779c189beb56dc1a00d38e75", "committedDate": "2020-04-11T20:37:28Z", "message": "Make variable final"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzk5NDQ2", "url": "https://github.com/triplea-game/triplea/pull/6188#pullrequestreview-391799446", "createdAt": "2020-04-11T20:46:38Z", "commit": {"oid": "2834ed24cf9e5a67779c189beb56dc1a00d38e75"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0NjozOFrOGEP-XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo1Mzo1M1rOGEQA_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTIxMg==", "bodyText": "var is perhaps confusing here, I'm not offhand 100% sure what the return type is of getAnnotation. I think it is probably Class, but not fully evident. Perhaps if the variable name were remoteActionCodeClass, it would be clear and would not benefit from type information.", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407109212", "createdAt": "2020-04-11T20:46:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2834ed24cf9e5a67779c189beb56dc1a00d38e75"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTM1Nw==", "bodyText": "Why is this expected to be true? Can that be clarified in the assertion comment somehow perhaps?\nPerhaps we can rephrase to say something like \"Expected an annotation to present on method:  \"  + method, it's generally clearer to explain what and why you were expected rather than to rephrase the error condition. EG: result was not 4 vs Expected 2+2 to be 4", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407109357", "createdAt": "2020-04-11T20:48:10Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2834ed24cf9e5a67779c189beb56dc1a00d38e75"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTYyMA==", "bodyText": "What kind of class is this expected to be? Is it an annotated one with the remote method number? Perhaps would be more clear as something like RemoteMethodAnnotatedClass", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407109620", "createdAt": "2020-04-11T20:50:57Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n+\n+    assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));\n+  }\n+\n+  static class MethodAggregator implements ArgumentsAggregator {\n+    @Override\n+    public Method aggregateArguments(\n+        final ArgumentsAccessor arguments, final ParameterContext context)\n+        throws ArgumentsAggregationException {\n+      final int offset = context.getIndex();\n+      final Class<?> clazz = arguments.get(offset, Class.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2834ed24cf9e5a67779c189beb56dc1a00d38e75"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTY5Nw==", "bodyText": "Can this offset variable be clarified a bit more, what are we offsetting from? It might be possible to rename the variable, or some inline commentary could help explain it.", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407109697", "createdAt": "2020-04-11T20:51:56Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n+\n+    assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));\n+  }\n+\n+  static class MethodAggregator implements ArgumentsAggregator {\n+    @Override\n+    public Method aggregateArguments(\n+        final ArgumentsAccessor arguments, final ParameterContext context)\n+        throws ArgumentsAggregationException {\n+      final int offset = context.getIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2834ed24cf9e5a67779c189beb56dc1a00d38e75"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTc3OA==", "bodyText": "It seems like a javadoc could really help here. Ideally it would set up expectations for reading the method to help guide understanding and/or make reading the method just not needed to know what we expect to get back when calling this method.", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407109778", "createdAt": "2020-04-11T20:52:56Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n+\n+    assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));\n+  }\n+\n+  static class MethodAggregator implements ArgumentsAggregator {\n+    @Override\n+    public Method aggregateArguments(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2834ed24cf9e5a67779c189beb56dc1a00d38e75"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTg4Nw==", "bodyText": "Is there any way to document the structure and contents of this file and how it was generated? If we somehow added a new remote method, will it be easy for someone to update this (and to know to update it?)", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407109887", "createdAt": "2020-04-11T20:53:53Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/resources/required-op-codes.txt", "diffHunk": "@@ -0,0 +1,134 @@\n+3,games.strategy.engine.chat.IChatChannel,speakerAdded,org.triplea.domain.data.ChatParticipant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2834ed24cf9e5a67779c189beb56dc1a00d38e75"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60c37fe5ed161256191c4dd6da9eba9836b44ac2", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/60c37fe5ed161256191c4dd6da9eba9836b44ac2", "committedDate": "2020-04-11T21:40:16Z", "message": "Add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6317fb01e3bc7f4b65b39efaadbd1da3a809b979", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/6317fb01e3bc7f4b65b39efaadbd1da3a809b979", "committedDate": "2020-04-11T21:41:14Z", "message": "Rename file to clarify csv format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e746fc1a245416c69377f2f205c2ed75126c55fd", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/e746fc1a245416c69377f2f205c2ed75126c55fd", "committedDate": "2020-04-11T21:45:38Z", "message": "Update test failure message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODAyOTcw", "url": "https://github.com/triplea-game/triplea/pull/6188#pullrequestreview-391802970", "createdAt": "2020-04-11T21:48:23Z", "commit": {"oid": "60c37fe5ed161256191c4dd6da9eba9836b44ac2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0ODoyM1rOGEQS7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0ODoyM1rOGEQS7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDQ3OQ==", "bodyText": "nit, can probably omit \"due to some random change\", it's not 100% informative. You could perhaps give examples of what such changes would be, otherwise shorter and more information dense is perhaps better.", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407114479", "createdAt": "2020-04-11T21:48:23Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -14,33 +14,53 @@\n import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n import org.junit.jupiter.params.provider.CsvFileSource;\n \n+/**\n+ * Test class that verifies that remote operation codes didn't change unexpectedly due to some\n+ * random change.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c37fe5ed161256191c4dd6da9eba9836b44ac2"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODAzMDA1", "url": "https://github.com/triplea-game/triplea/pull/6188#pullrequestreview-391803005", "createdAt": "2020-04-11T21:49:00Z", "commit": {"oid": "60c37fe5ed161256191c4dd6da9eba9836b44ac2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0OTowMFrOGEQTJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0OTowMFrOGEQTJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDUzNQ==", "bodyText": "A similar kind of comment is probably good to have on the annotation itself, to tell a person who is exploring adding that annotation to look here to add it to a test.", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407114535", "createdAt": "2020-04-11T21:49:00Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -14,33 +14,53 @@\n import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n import org.junit.jupiter.params.provider.CsvFileSource;\n \n+/**\n+ * Test class that verifies that remote operation codes didn't change unexpectedly due to some\n+ * random change.\n+ *\n+ * <p>Please update {@code /required-op-codes.txt} accordingly in case the remote interfaces are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c37fe5ed161256191c4dd6da9eba9836b44ac2"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODAzMDMw", "url": "https://github.com/triplea-game/triplea/pull/6188#pullrequestreview-391803030", "createdAt": "2020-04-11T21:49:20Z", "commit": {"oid": "60c37fe5ed161256191c4dd6da9eba9836b44ac2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0OToyMFrOGEQTTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo0OToyMFrOGEQTTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDU3NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407114574", "createdAt": "2020-04-11T21:49:20Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -14,33 +14,53 @@\n import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n import org.junit.jupiter.params.provider.CsvFileSource;\n \n+/**\n+ * Test class that verifies that remote operation codes didn't change unexpectedly due to some\n+ * random change.\n+ *\n+ * <p>Please update {@code /required-op-codes.txt} accordingly in case the remote interfaces are\n+ * ever altered. All lines in {@code /required-op-codes.txt} must follow the scheme:\n+ *\n+ * <p>{@code op-code,interface-name,method-name,method-param-type-0,...,method-param-type-n}\n+ */\n public class RemoteActionCodeTest {\n \n   @ParameterizedTest\n   @CsvFileSource(resources = \"/required-op-codes.txt\")\n   void verifyCorrectOpCode(\n       final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n-    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+    final RemoteActionCode remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n \n     assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n \n     assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));\n   }\n \n+  /**\n+   * Helper class that aggregates the fields found in the csv of test data to a {@link Method}. In\n+   * order for this to work as expected, the CSVs last n + 2 columns must follow the format:\n+   *\n+   * <p>{@code interface-name,method-name,method-param-type-0,...,method-param-type-n}\n+   *\n+   * <p>Note that due to the variable length of the type arguments\n+   * {@code @AggregateWith(MethodAggregator.class)} can only ever be used on the last parameter of a\n+   * test method to work properly, otherwise it might pickup the wrong arguments.\n+   */\n   static class MethodAggregator implements ArgumentsAggregator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c37fe5ed161256191c4dd6da9eba9836b44ac2"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7e819391e21e3102999e667f8fa5b82a0adc130", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/e7e819391e21e3102999e667f8fa5b82a0adc130", "committedDate": "2020-04-11T22:02:32Z", "message": "Reference unit test in non-test javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d2dba8077ad1a78b3dda50a7fc902d7cc07da5", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/f6d2dba8077ad1a78b3dda50a7fc902d7cc07da5", "committedDate": "2020-04-11T22:03:51Z", "message": "Describe change better"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3656, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}