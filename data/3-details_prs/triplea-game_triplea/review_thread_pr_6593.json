{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MTA0NDI2", "number": 6593, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozODowOFrOECvmJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToyNDowOVrOEDR0Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzEyNDIxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/AirAttackVsNonSubsStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozODowOFrOGfY7pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozODowOFrOGfY7pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NzUyNg==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r435567526", "createdAt": "2020-06-04T21:38:08Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/AirAttackVsNonSubsStep.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package games.strategy.triplea.delegate.battle.steps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a20bde28db85f24059b73e6c3a262630d916d6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzEyNDI0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/AirDefendVsNonSubsStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozODowOVrOGfY7qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozODowOVrOGfY7qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NzUyOQ==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r435567529", "createdAt": "2020-06-04T21:38:09Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/AirDefendVsNonSubsStep.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package games.strategy.triplea.delegate.battle.steps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a20bde28db85f24059b73e6c3a262630d916d6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzEyNDI2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozODowOVrOGfY7qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozODowOVrOGfY7qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NzUzMQ==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r435567531", "createdAt": "2020-06-04T21:38:09Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1127,6 +1383,8 @@ private void fireNavalBombardment(final IDelegateBridge bridge) {\n                 attacker, battleSite, gameData));\n     // bombarding units can't move after bombarding\n     if (!headless) {\n+      // TODO: StepRefactor: Why is a change always added even if there are no units?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a20bde28db85f24059b73e6c3a262630d916d6"}, "originalPosition": 382}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM1MDQyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirAttackVsNonSubsStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNTozOToyNVrOGgCBvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNTozOToyNVrOGgCBvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MDgyOA==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436240828", "createdAt": "2020-06-06T05:39:25Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirAttackVsNonSubsStep.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.air;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c4a2f638fddbac3a4335eb1a955bc3c843385"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM1MDQ0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirDefendVsNonSubsStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNTozOToyNVrOGgCBvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNTozOToyNVrOGgCBvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MDgzMA==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436240830", "createdAt": "2020-06-06T05:39:25Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirDefendVsNonSubsStep.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.air;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c4a2f638fddbac3a4335eb1a955bc3c843385"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzk3NjIxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMzo0MToxM1rOGgG8gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToyMDo1OFrOGgL7Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyMTQxMQ==", "bodyText": "I copied this comment from MustFightBattle#getBattleExecutables but I think the comment might be outdated.  I think it should reference IDelegateBridge instead of IDisplay, IPlayer, or IRandomSource.  The only way I see steps can talk to IDisplay, IPlayer, or IRandomSource is by going through IDelegateBridge.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436321411", "createdAt": "2020-06-07T03:41:13Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import static games.strategy.triplea.delegate.battle.steps.BattleStep.Request.EXEC;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.IExecutable;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * A step in a battle.\n+ *\n+ * <ol>\n+ *   <ul>\n+ *     Each step can have 0 or more names. These names are shown in the {@link\n+ *     games.strategy.triplea.ui.BattlePanel}\n+ *   </ul>\n+ *   <ul>\n+ *     Each step can also have an executable. See {@link BattleAtomic} on what an executable is\n+ *     comprised of.\n+ *   </ul>\n+ * </ol>\n+ */\n+@AllArgsConstructor\n+public abstract class BattleStep {\n+\n+  /**\n+   * The current state of the battle\n+   *\n+   * <p>Note: This is current mutable so the underlying data can change.\n+   */\n+  protected final BattleState battleState;\n+\n+  /** Actions that can occur in a battle that require interaction with {@link IDelegateBridge} */\n+  protected final BattleActions battleActions;\n+\n+  /** Indicates when {@link #valid} is being called */\n+  public enum Request {\n+    // Occurs at the start of the battle round\n+    NAME,\n+    // Occurs right before the step executes\n+    EXEC,\n+  }\n+\n+  public abstract BattleAtomic getExecutable();\n+\n+  public abstract List<String> getNames();\n+\n+  /**\n+   * Determine if this step should run based on the request\n+   *\n+   * @param request Indicates when valid is being called\n+   * @return true if valid\n+   */\n+  public abstract boolean valid(Request request);\n+\n+  /**\n+   * Executes the step\n+   *\n+   * <p>This is called by the BattleAtomic and {@link #valid} has already been checked\n+   *\n+   * @param stack The current stack of steps\n+   * @param bridge DelegateBridge for interacting with the rest of the program\n+   */\n+  protected abstract void execute(ExecutionStack stack, IDelegateBridge bridge);\n+\n+  /**\n+   * This is used to break up the battle into separate atomic pieces. If there is a network error,\n+   * or some other unfortunate event, then we need to keep track of what pieces we have executed,\n+   * and what is left to do. Each atomic step is in its own BattleAtomic with the definition of\n+   * atomic is that either:\n+   *\n+   * <ol>\n+   *   <li>The code does not call to an IDisplay, IPlayer, or IRandomSource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1aa9ca7512274acb907d7ffacd1a3045452f641"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjk5MA==", "bodyText": "Probably might as well update it so it makes sense. Won't make any more sense to anyone else at this point, and you've about as much context into this as anyone would have after the work you've done here. So if it does not make sense to you now, it probably won't make sense to anyone else (in which case the documentation is not very useful).", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436402990", "createdAt": "2020-06-07T21:20:58Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import static games.strategy.triplea.delegate.battle.steps.BattleStep.Request.EXEC;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.IExecutable;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * A step in a battle.\n+ *\n+ * <ol>\n+ *   <ul>\n+ *     Each step can have 0 or more names. These names are shown in the {@link\n+ *     games.strategy.triplea.ui.BattlePanel}\n+ *   </ul>\n+ *   <ul>\n+ *     Each step can also have an executable. See {@link BattleAtomic} on what an executable is\n+ *     comprised of.\n+ *   </ul>\n+ * </ol>\n+ */\n+@AllArgsConstructor\n+public abstract class BattleStep {\n+\n+  /**\n+   * The current state of the battle\n+   *\n+   * <p>Note: This is current mutable so the underlying data can change.\n+   */\n+  protected final BattleState battleState;\n+\n+  /** Actions that can occur in a battle that require interaction with {@link IDelegateBridge} */\n+  protected final BattleActions battleActions;\n+\n+  /** Indicates when {@link #valid} is being called */\n+  public enum Request {\n+    // Occurs at the start of the battle round\n+    NAME,\n+    // Occurs right before the step executes\n+    EXEC,\n+  }\n+\n+  public abstract BattleAtomic getExecutable();\n+\n+  public abstract List<String> getNames();\n+\n+  /**\n+   * Determine if this step should run based on the request\n+   *\n+   * @param request Indicates when valid is being called\n+   * @return true if valid\n+   */\n+  public abstract boolean valid(Request request);\n+\n+  /**\n+   * Executes the step\n+   *\n+   * <p>This is called by the BattleAtomic and {@link #valid} has already been checked\n+   *\n+   * @param stack The current stack of steps\n+   * @param bridge DelegateBridge for interacting with the rest of the program\n+   */\n+  protected abstract void execute(ExecutionStack stack, IDelegateBridge bridge);\n+\n+  /**\n+   * This is used to break up the battle into separate atomic pieces. If there is a network error,\n+   * or some other unfortunate event, then we need to keep track of what pieces we have executed,\n+   * and what is left to do. Each atomic step is in its own BattleAtomic with the definition of\n+   * atomic is that either:\n+   *\n+   * <ol>\n+   *   <li>The code does not call to an IDisplay, IPlayer, or IRandomSource", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyMTQxMQ=="}, "originalCommit": {"oid": "d1aa9ca7512274acb907d7ffacd1a3045452f641"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzk3NjczOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMzo0Mjo0NVrOGgG8wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMzo0Mjo0NVrOGgG8wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyMTQ3Mw==", "bodyText": "As I mentioned in the first comment, these manual instantiations of the steps will be moved into a step factory that builds the required steps and puts them in the correct order.  But I can't build that factory until I have a few more steps converted.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436321473", "createdAt": "2020-06-07T03:42:45Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -44,9 +55,14 @@\n   final @NonNull Supplier<Collection<Territory>> getAttackerRetreatTerritories;\n   final @NonNull BiFunction<GamePlayer, Collection<Unit>, Collection<Territory>>\n       getEmptyOrFriendlySeaNeighbors;\n+  final @NonNull BattleActions battleActions;\n \n   public List<String> get() {\n \n+    final BattleStep submergeSubsVsOnlyAir = new SubmergeSubsVsOnlyAirStep(this, battleActions);\n+    final BattleStep airAttackVsNonSubs = new AirAttackVsNonSubsStep(this, battleActions);\n+    final BattleStep airDefendVsNonSubs = new AirDefendVsNonSubsStep(this, battleActions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1aa9ca7512274acb907d7ffacd1a3045452f641"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODAzMjQ0OnYy", "diffSide": "LEFT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MustFightBattleExecutablesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNjowMjowNlrOGgHYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNjowMjowNlrOGgHYOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyODUwNQ==", "bodyText": "These two tests (attackingCanNotBeTargetedByAllCanSubmergeWithAllAir and defendingCanNotBeTargetedByAllCanSubmergeWithAllAir) are now being tested in SubmergeSubsVsOnlyAirStepTest#testSubmerging.  I considered leaving these tests in till after this is merged just to show that the logic is still correct.  Should I put them back in or is it ok to delete them now?", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436328505", "createdAt": "2020-06-07T06:02:06Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MustFightBattleExecutablesTest.java", "diffHunk": "@@ -1603,68 +1602,4 @@ void firstStrikeDefenderReturnFireAttNoDestroyerDefNoDestroyerWW2v2FalseSneakAtt\n         MustFightBattle.ReturnFire.ALL,\n         false);\n   }\n-\n-  @Test\n-  @DisplayName(\"Verify attacking canNotBeTargetedByAll can submerge if all is air\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89563828abc9b93bac68138091b487168b727412"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU3MTQzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMDo1NDo0OVrOGgLzDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjowOTozOFrOGgMIxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMDkxMA==", "bodyText": "My presumption is that changes to the battle state are implementation dependent, IE: we assume that the underlying collection is returned and any modifications to it will modify the underlying collection.\nWhat are your thoughts to provide mutator methods?\nIE:\nvoid removeAttackerUnits(Unit... units);\nvoid removeDefendingUnits(Unit... units);", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436400910", "createdAt": "2020-06-07T20:54:49Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleState.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+\n+/** Exposes the battle state and allows updates to it */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNjQ2OA==", "bodyText": "I plan to add those.  My plan is to add the existing methods from MustFightBattle that are needed in the steps.  As I convert each step, I'll be adding more and more methods to the two interfaces.  Some of these methods will be mutator methods.  I don't plan on renaming them at that point, though.\nThen, I plan on splitting up methods that have functionality that should be in BattleActions (IDelegateBridge interaction) and BattleState.  An example of this is MustFightBattle#queryRetreat.\nOnce I have the methods split between the two interfaces, I'll look into refactoring them so that they have a targeted focus.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436406468", "createdAt": "2020-06-07T22:09:38Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleState.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+\n+/** Exposes the battle state and allows updates to it */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMDkxMA=="}, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU3NDA1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMDo1OTowNlrOGgL0XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMDo1OTowNlrOGgL0XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTI0NA==", "bodyText": "Nit, I don't think we typically document when something is mutable or immutable. There are annotations to do that. Presume for example that BattleState were used in 10 places, that's 10 places to have the mutable comment. If we were then to make BattleState immutable, it is either a lot of commentary that is out of date, or best case a lot of comments to update. Either way we add maintenance work. I think it's just easier then to omit mutable/immutable documentation (and if immutable, then perhaps that is okay to document via @Immutable as we probably should not make making an immutable object mutable)", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436401244", "createdAt": "2020-06-07T20:59:06Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.IExecutable;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * A step in a battle.\n+ *\n+ * <ol>\n+ *   <ul>\n+ *     Each step can have 0 or more names. These names are shown in the {@link\n+ *     games.strategy.triplea.ui.BattlePanel}\n+ *   </ul>\n+ *   <ul>\n+ *     Each step can also have an executable. See {@link BattleAtomic} on what an executable is\n+ *     comprised of.\n+ *   </ul>\n+ * </ol>\n+ */\n+@AllArgsConstructor\n+public abstract class BattleStep {\n+\n+  /**\n+   * The current state of the battle\n+   *\n+   * <p>Note: This is current mutable so the underlying data can change.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU3NjgzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTowMzoxNVrOGgL10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjozOTo0NVrOGgMRWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTYxOQ==", "bodyText": "Inheritance is a very strong form of coupling, using protected variables is also potentially very painful as well when considering inheritance hierarchies. In some cases as well some implementations may not need all of the protected variables.\nWhat are your thoughts to convert this class to an interface? In such a case, it seems like we only need to move these two variables to the child classes. The level of code duplication is pretty negligable since they already have the all arg constructors and in turn each of the child classes would be much more strongly encapsulated. WDYT, any concerns with that suggestion?", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436401619", "createdAt": "2020-06-07T21:03:15Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.IExecutable;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * A step in a battle.\n+ *\n+ * <ol>\n+ *   <ul>\n+ *     Each step can have 0 or more names. These names are shown in the {@link\n+ *     games.strategy.triplea.ui.BattlePanel}\n+ *   </ul>\n+ *   <ul>\n+ *     Each step can also have an executable. See {@link BattleAtomic} on what an executable is\n+ *     comprised of.\n+ *   </ul>\n+ * </ol>\n+ */\n+@AllArgsConstructor\n+public abstract class BattleStep {\n+\n+  /**\n+   * The current state of the battle\n+   *\n+   * <p>Note: This is current mutable so the underlying data can change.\n+   */\n+  protected final BattleState battleState;\n+\n+  /** Actions that can occur in a battle that require interaction with {@link IDelegateBridge} */\n+  protected final BattleActions battleActions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwODY2Ng==", "bodyText": "Before the conversion to use MustFightBattle as the BattleState there was more of a reason.  I can't think of a good reason to keep it inherited so I'll change it to an interface..", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436408666", "createdAt": "2020-06-07T22:39:45Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.IExecutable;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * A step in a battle.\n+ *\n+ * <ol>\n+ *   <ul>\n+ *     Each step can have 0 or more names. These names are shown in the {@link\n+ *     games.strategy.triplea.ui.BattlePanel}\n+ *   </ul>\n+ *   <ul>\n+ *     Each step can also have an executable. See {@link BattleAtomic} on what an executable is\n+ *     comprised of.\n+ *   </ul>\n+ * </ol>\n+ */\n+@AllArgsConstructor\n+public abstract class BattleStep {\n+\n+  /**\n+   * The current state of the battle\n+   *\n+   * <p>Note: This is current mutable so the underlying data can change.\n+   */\n+  protected final BattleState battleState;\n+\n+  /** Actions that can occur in a battle that require interaction with {@link IDelegateBridge} */\n+  protected final BattleActions battleActions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTYxOQ=="}, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU3NzAyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTowMzo1MFrOGgL18w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoyNzo0NFrOGgMNwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTY1MQ==", "bodyText": "A javadoc on this method could be of some use. It's a bit odd to think that a step would have multiple names. It'd be nice to know what it means to have multiple names for a step and secondarily if this is for display purposes only.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436401651", "createdAt": "2020-06-07T21:03:50Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.IExecutable;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * A step in a battle.\n+ *\n+ * <ol>\n+ *   <ul>\n+ *     Each step can have 0 or more names. These names are shown in the {@link\n+ *     games.strategy.triplea.ui.BattlePanel}\n+ *   </ul>\n+ *   <ul>\n+ *     Each step can also have an executable. See {@link BattleAtomic} on what an executable is\n+ *     comprised of.\n+ *   </ul>\n+ * </ol>\n+ */\n+@AllArgsConstructor\n+public abstract class BattleStep {\n+\n+  /**\n+   * The current state of the battle\n+   *\n+   * <p>Note: This is current mutable so the underlying data can change.\n+   */\n+  protected final BattleState battleState;\n+\n+  /** Actions that can occur in a battle that require interaction with {@link IDelegateBridge} */\n+  protected final BattleActions battleActions;\n+\n+  public abstract BattleAtomic getExecutable();\n+\n+  public abstract List<String> getNames();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzc0NQ==", "bodyText": "The explanation about name is on the class.  I'll move it down to here.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436407745", "createdAt": "2020-06-07T22:27:44Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.IExecutable;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * A step in a battle.\n+ *\n+ * <ol>\n+ *   <ul>\n+ *     Each step can have 0 or more names. These names are shown in the {@link\n+ *     games.strategy.triplea.ui.BattlePanel}\n+ *   </ul>\n+ *   <ul>\n+ *     Each step can also have an executable. See {@link BattleAtomic} on what an executable is\n+ *     comprised of.\n+ *   </ul>\n+ * </ol>\n+ */\n+@AllArgsConstructor\n+public abstract class BattleStep {\n+\n+  /**\n+   * The current state of the battle\n+   *\n+   * <p>Note: This is current mutable so the underlying data can change.\n+   */\n+  protected final BattleState battleState;\n+\n+  /** Actions that can occur in a battle that require interaction with {@link IDelegateBridge} */\n+  protected final BattleActions battleActions;\n+\n+  public abstract BattleAtomic getExecutable();\n+\n+  public abstract List<String> getNames();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTY1MQ=="}, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU4NTU0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToxODoyOFrOGgL6dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMzoyOTowNFrOGgMedg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjgwNA==", "bodyText": "Typically methods should not be aware of who is calling them. It's also a design smell when we require one method to have been called before another (and furthermore when that method is determining state that dictates whether you can and should call another method).\nThat could potentially be fixed by returning an object to then be executed. EG:\nprotected Optional<BiConsumer<ExecutionStack, IDelegateBridge>> getBattleStepExecutable();\n\nThen usage below of:\n public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n      final BattleStep executingStep = BattleStep.this;\n      if (executingStep.valid()) {\n        executingStep.execute(stack, bridge);\n      }\n\nwould be transformed into:\n public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n       getBattleStepExecutable().ifPresent(stepExecutable -> stepExecutable.accept(stack, bridge));\n  }\n\nIt also appears that getName() has a dependency on isValid() as well. In those cases if isValid() is false then presumably getNames() could return an empty collection.\nWDYT?", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436402804", "createdAt": "2020-06-07T21:18:28Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.IExecutable;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * A step in a battle.\n+ *\n+ * <ol>\n+ *   <ul>\n+ *     Each step can have 0 or more names. These names are shown in the {@link\n+ *     games.strategy.triplea.ui.BattlePanel}\n+ *   </ul>\n+ *   <ul>\n+ *     Each step can also have an executable. See {@link BattleAtomic} on what an executable is\n+ *     comprised of.\n+ *   </ul>\n+ * </ol>\n+ */\n+@AllArgsConstructor\n+public abstract class BattleStep {\n+\n+  /**\n+   * The current state of the battle\n+   *\n+   * <p>Note: This is current mutable so the underlying data can change.\n+   */\n+  protected final BattleState battleState;\n+\n+  /** Actions that can occur in a battle that require interaction with {@link IDelegateBridge} */\n+  protected final BattleActions battleActions;\n+\n+  public abstract BattleAtomic getExecutable();\n+\n+  public abstract List<String> getNames();\n+\n+  /**\n+   * Determine if this step should run based on the request\n+   *\n+   * @return true if valid\n+   */\n+  public abstract boolean valid();\n+\n+  /**\n+   * Executes the step\n+   *\n+   * <p>This is called by the BattleAtomic and {@link #valid} has already been checked", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQxMjAyMg==", "bodyText": "getBattleStepExecutable actually returns the BattleAtomic.  So calling getBattleStepExecutable inside of the BattleAtomic will not work since it will just go into an infinite loop.\nI see what you are trying to do but I don't see how that helps.  You are just moving the valid() call to another method which is still making execute() be dependent on valid().  I had made execute() a protected method so that the dependency on valid() was controlled by the class and callers wouldn't have to worry about it.  It was an internal implementation.  Though, with your idea of turning this class into an interface, that internal implementation becomes public, so it complicates it.  I guess implementations of BattleStep will just have to ensure that execute() checks isValid() beforehand.\nAs for getNames(), I can see why you say it has a dependency.  The only caller of it is always checking isValid().  I can envision other callers not caring if it is valid or not but I currently don't envision creating those callers so I can move isValid() inside of each of the getNames().", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436412022", "createdAt": "2020-06-07T23:29:04Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.IExecutable;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * A step in a battle.\n+ *\n+ * <ol>\n+ *   <ul>\n+ *     Each step can have 0 or more names. These names are shown in the {@link\n+ *     games.strategy.triplea.ui.BattlePanel}\n+ *   </ul>\n+ *   <ul>\n+ *     Each step can also have an executable. See {@link BattleAtomic} on what an executable is\n+ *     comprised of.\n+ *   </ul>\n+ * </ol>\n+ */\n+@AllArgsConstructor\n+public abstract class BattleStep {\n+\n+  /**\n+   * The current state of the battle\n+   *\n+   * <p>Note: This is current mutable so the underlying data can change.\n+   */\n+  protected final BattleState battleState;\n+\n+  /** Actions that can occur in a battle that require interaction with {@link IDelegateBridge} */\n+  protected final BattleActions battleActions;\n+\n+  public abstract BattleAtomic getExecutable();\n+\n+  public abstract List<String> getNames();\n+\n+  /**\n+   * Determine if this step should run based on the request\n+   *\n+   * @return true if valid\n+   */\n+  public abstract boolean valid();\n+\n+  /**\n+   * Executes the step\n+   *\n+   * <p>This is called by the BattleAtomic and {@link #valid} has already been checked", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjgwNA=="}, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU4NjE3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToxOTo1N1rOGgL62Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoyNjo1OVrOGgMNiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjkwNQ==", "bodyText": "Is this an inner class only because of IExecutable?", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436402905", "createdAt": "2020-06-07T21:19:57Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.IExecutable;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * A step in a battle.\n+ *\n+ * <ol>\n+ *   <ul>\n+ *     Each step can have 0 or more names. These names are shown in the {@link\n+ *     games.strategy.triplea.ui.BattlePanel}\n+ *   </ul>\n+ *   <ul>\n+ *     Each step can also have an executable. See {@link BattleAtomic} on what an executable is\n+ *     comprised of.\n+ *   </ul>\n+ * </ol>\n+ */\n+@AllArgsConstructor\n+public abstract class BattleStep {\n+\n+  /**\n+   * The current state of the battle\n+   *\n+   * <p>Note: This is current mutable so the underlying data can change.\n+   */\n+  protected final BattleState battleState;\n+\n+  /** Actions that can occur in a battle that require interaction with {@link IDelegateBridge} */\n+  protected final BattleActions battleActions;\n+\n+  public abstract BattleAtomic getExecutable();\n+\n+  public abstract List<String> getNames();\n+\n+  /**\n+   * Determine if this step should run based on the request\n+   *\n+   * @return true if valid\n+   */\n+  public abstract boolean valid();\n+\n+  /**\n+   * Executes the step\n+   *\n+   * <p>This is called by the BattleAtomic and {@link #valid} has already been checked\n+   *\n+   * @param stack The current stack of steps\n+   * @param bridge DelegateBridge for interacting with the rest of the program\n+   */\n+  protected abstract void execute(ExecutionStack stack, IDelegateBridge bridge);\n+\n+  /**\n+   * This is used to break up the battle into separate atomic pieces. If there is a network error,\n+   * or some other unfortunate event, then we need to keep track of what pieces we have executed,\n+   * and what is left to do. Each atomic step is in its own BattleAtomic with the definition of\n+   * atomic is that either:\n+   *\n+   * <ol>\n+   *   <li>The code does not call to an IDisplay, IPlayer, or IRandomSource\n+   *   <li>If the code calls to an IDisplay, IPlayer, IRandomSource, and an exception is called from\n+   *       one of those methods, the exception will be propagated out of execute() and the execute\n+   *       method can be called again.\n+   * </ol>\n+   */\n+  public abstract class BattleAtomic implements IExecutable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzY4OQ==", "bodyText": "No, it needs a reference to the BattleStep that is enclosing it so that it can then call valid on it and execute.\nI could change it to have a instance variable that is the BattleStep and each step has to construct it and pass in itself.  The execute method on BattleStep will need to made public as well.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436407689", "createdAt": "2020-06-07T22:26:59Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.IExecutable;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * A step in a battle.\n+ *\n+ * <ol>\n+ *   <ul>\n+ *     Each step can have 0 or more names. These names are shown in the {@link\n+ *     games.strategy.triplea.ui.BattlePanel}\n+ *   </ul>\n+ *   <ul>\n+ *     Each step can also have an executable. See {@link BattleAtomic} on what an executable is\n+ *     comprised of.\n+ *   </ul>\n+ * </ol>\n+ */\n+@AllArgsConstructor\n+public abstract class BattleStep {\n+\n+  /**\n+   * The current state of the battle\n+   *\n+   * <p>Note: This is current mutable so the underlying data can change.\n+   */\n+  protected final BattleState battleState;\n+\n+  /** Actions that can occur in a battle that require interaction with {@link IDelegateBridge} */\n+  protected final BattleActions battleActions;\n+\n+  public abstract BattleAtomic getExecutable();\n+\n+  public abstract List<String> getNames();\n+\n+  /**\n+   * Determine if this step should run based on the request\n+   *\n+   * @return true if valid\n+   */\n+  public abstract boolean valid();\n+\n+  /**\n+   * Executes the step\n+   *\n+   * <p>This is called by the BattleAtomic and {@link #valid} has already been checked\n+   *\n+   * @param stack The current stack of steps\n+   * @param bridge DelegateBridge for interacting with the rest of the program\n+   */\n+  protected abstract void execute(ExecutionStack stack, IDelegateBridge bridge);\n+\n+  /**\n+   * This is used to break up the battle into separate atomic pieces. If there is a network error,\n+   * or some other unfortunate event, then we need to keep track of what pieces we have executed,\n+   * and what is left to do. Each atomic step is in its own BattleAtomic with the definition of\n+   * atomic is that either:\n+   *\n+   * <ol>\n+   *   <li>The code does not call to an IDisplay, IPlayer, or IRandomSource\n+   *   <li>If the code calls to an IDisplay, IPlayer, IRandomSource, and an exception is called from\n+   *       one of those methods, the exception will be propagated out of execute() and the execute\n+   *       method can be called again.\n+   * </ol>\n+   */\n+  public abstract class BattleAtomic implements IExecutable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjkwNQ=="}, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU4ODQwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirVsNonSubsStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToyMzozM1rOGgL7_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToyMzozM1rOGgL7_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzE5OA==", "bodyText": "nit, if the return value is nullable, at the very least the method should be marked as @Nullable. Perhaps better though if this returns Optional<BattleAtomic> so that any caller won't mistakenly think the return value is non-nullable and run into a NPE.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436403198", "createdAt": "2020-06-07T21:23:33Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirVsNonSubsStep.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.air;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import java.util.Collection;\n+\n+/** Air can not attack subs unless a destroyer is present */\n+public abstract class AirVsNonSubsStep extends BattleStep {\n+\n+  public AirVsNonSubsStep(final BattleState battleState, final BattleActions battleActions) {\n+    super(battleState, battleActions);\n+  }\n+\n+  @Override\n+  public BattleAtomic getExecutable() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU4ODY0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/sub/SubmergeSubsVsOnlyAirStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToyNDoyMFrOGgL8Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxNjozOFrOGgMKlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzIzNA==", "bodyText": "If we always return 0 or 1 element, would Optional<String> be a better return API? In that case there would not be any confusion that we can have more than one element and it'd be clear we'd have either zero or one.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436403234", "createdAt": "2020-06-07T21:24:20Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/sub/SubmergeSubsVsOnlyAirStep.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package games.strategy.triplea.delegate.battle.steps.retreat.sub;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBMERGE_SUBS_VS_AIR_ONLY;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Units that canNotBeTargetedByAll can submerge if there are only Air units in the battle */\n+public class SubmergeSubsVsOnlyAirStep extends BattleStep {\n+\n+  private static final Predicate<Unit> canNotBeTargetedByAllMatch =\n+      Matches.unitCanEvade().and(Matches.unitCanNotBeTargetedByAll());\n+\n+  public SubmergeSubsVsOnlyAirStep(\n+      final BattleState battleState, final BattleActions battleActions) {\n+    super(battleState, battleActions);\n+  }\n+\n+  @Override\n+  public BattleAtomic getExecutable() {\n+    return new BattleAtomic() {\n+      private static final long serialVersionUID = 99990L;\n+    };\n+  }\n+\n+  @Override\n+  public List<String> getNames() {\n+    return List.of(SUBMERGE_SUBS_VS_AIR_ONLY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNjkzMw==", "bodyText": "No, there are steps that will have more than 1.  An example is the step that fires aa guns.  The step will return \"attacker fires guns\", \"defender selects casualties\", and \"defender removes casualties\".\nNow, it is possible after further refactoring, that step could be split up into three separate steps.  But I'm not sure at this point.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436406933", "createdAt": "2020-06-07T22:16:38Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/retreat/sub/SubmergeSubsVsOnlyAirStep.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package games.strategy.triplea.delegate.battle.steps.retreat.sub;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.SUBMERGE_SUBS_VS_AIR_ONLY;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Units that canNotBeTargetedByAll can submerge if there are only Air units in the battle */\n+public class SubmergeSubsVsOnlyAirStep extends BattleStep {\n+\n+  private static final Predicate<Unit> canNotBeTargetedByAllMatch =\n+      Matches.unitCanEvade().and(Matches.unitCanNotBeTargetedByAll());\n+\n+  public SubmergeSubsVsOnlyAirStep(\n+      final BattleState battleState, final BattleActions battleActions) {\n+    super(battleState, battleActions);\n+  }\n+\n+  @Override\n+  public BattleAtomic getExecutable() {\n+    return new BattleAtomic() {\n+      private static final long serialVersionUID = 99990L;\n+    };\n+  }\n+\n+  @Override\n+  public List<String> getNames() {\n+    return List.of(SUBMERGE_SUBS_VS_AIR_ONLY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzIzNA=="}, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU4ODk4OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToyNDo1NFrOGgL8TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMzoyMzo1OVrOGgMdPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzI3Nw==", "bodyText": "Minor: I noticed you used lombok getters on another class, why not here too?", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436403277", "createdAt": "2020-06-07T21:24:54Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.NonNull;\n+\n+/**\n+ * Simple implementation of BattleState for tests to use\n+ *\n+ * <p>{@link #givenBattleState()} will return a builder with everything defaulted and the test can\n+ * override the specific items needed.\n+ */\n+@Builder\n+public class MockBattleState implements BattleState {\n+\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+\n+  public static MockBattleState.MockBattleStateBuilder givenBattleState() {\n+    return MockBattleState.builder().attackingUnits(List.of()).defendingUnits(List.of());\n+  }\n+\n+  @Override\n+  public Collection<Unit> getAttackingUnits() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQxMTcwOA==", "bodyText": "It's because I'm not accustomed to using lombok.  So, I'll remember to use it sometimes but then revert to my usual ways of not using it.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436411708", "createdAt": "2020-06-07T23:23:59Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.NonNull;\n+\n+/**\n+ * Simple implementation of BattleState for tests to use\n+ *\n+ * <p>{@link #givenBattleState()} will return a builder with everything defaulted and the test can\n+ * override the specific items needed.\n+ */\n+@Builder\n+public class MockBattleState implements BattleState {\n+\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+\n+  public static MockBattleState.MockBattleStateBuilder givenBattleState() {\n+    return MockBattleState.builder().attackingUnits(List.of()).defendingUnits(List.of());\n+  }\n+\n+  @Override\n+  public Collection<Unit> getAttackingUnits() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzI3Nw=="}, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU5MTQ3OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToyODo1M1rOGgL9jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToxNjo1NFrOGgNDQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzU5Ng==", "bodyText": "It looks like all usages of this method always define attacking unit and defending units, why not just use the builder directly?\nIE: instead of: MockBattleState.givenBattleState(), use instead: MockBattleState.builder()", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436403596", "createdAt": "2020-06-07T21:28:53Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.NonNull;\n+\n+/**\n+ * Simple implementation of BattleState for tests to use\n+ *\n+ * <p>{@link #givenBattleState()} will return a builder with everything defaulted and the test can\n+ * override the specific items needed.\n+ */\n+@Builder\n+public class MockBattleState implements BattleState {\n+\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+\n+  public static MockBattleState.MockBattleStateBuilder givenBattleState() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzEzMA==", "bodyText": "Because some of the steps will require more items added.  An example is the aa guns.  They don't care about offensive/defensiveUnits but use the offensive/defensive aa.\nI'm actually thinking that all the parameters for BattleState is going to end up looking like the parameters to BattleSteps.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436407130", "createdAt": "2020-06-07T22:19:27Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.NonNull;\n+\n+/**\n+ * Simple implementation of BattleState for tests to use\n+ *\n+ * <p>{@link #givenBattleState()} will return a builder with everything defaulted and the test can\n+ * override the specific items needed.\n+ */\n+@Builder\n+public class MockBattleState implements BattleState {\n+\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+\n+  public static MockBattleState.MockBattleStateBuilder givenBattleState() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzU5Ng=="}, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMTQ0MQ==", "bodyText": "My point is that you don't need to use a builder to init the values to empty lists and then return that builder to overwrite the values. You can use builder directly I would think. Look into using @Singular on those: https://projectlombok.org/features/Builder#singular", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436421441", "createdAt": "2020-06-08T01:16:54Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.NonNull;\n+\n+/**\n+ * Simple implementation of BattleState for tests to use\n+ *\n+ * <p>{@link #givenBattleState()} will return a builder with everything defaulted and the test can\n+ * override the specific items needed.\n+ */\n+@Builder\n+public class MockBattleState implements BattleState {\n+\n+  final @NonNull Collection<Unit> attackingUnits;\n+  final @NonNull Collection<Unit> defendingUnits;\n+\n+  public static MockBattleState.MockBattleStateBuilder givenBattleState() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzU5Ng=="}, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU5NDkxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTozNTozMlrOGgL_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoyNDoyNlrOGgMMyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDA2MA==", "bodyText": "Attacking and defending units being together pretty much always looks like the data clump code smell. It appears that BattleState could instead become a first class object and be a relatively simple value object.\nIt might make sense to rename BattleState to UnitsInBattle or BattleUnits, or BattleParticipants as we are not capturing the full battle state but just the units in battle.\nIf serialization were not a concern, then we could replace both attacking and defending units with a BattleState. To fix the data clump code smell we could:\n\nadd a transient BattleState object. Whenever we assign a battle state object then we write the corresponding values to attacking and defending units. This way we would get serialization and any usages of the data would be through battle state. It might be possible as well to override the serialization write-object method and to serialize attacking units and defending units through a battle state. Serialization proxy might be a way to do that, though the proxy itself could break compatibility alone.\n\nFundamentally BattleState is not really an interface, it's more data that can be present in an object and I suspect it makes sense to simply have a reference to it.\nWDYT?", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436404060", "createdAt": "2020-06-07T21:35:32Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -31,8 +37,13 @@\n   final @NonNull GamePlayer defender;\n   final @NonNull Collection<Unit> offensiveAa;\n   final @NonNull Collection<Unit> defendingAa;\n+\n+  @Getter(onMethod = @__({@Override}))\n   final @NonNull Collection<Unit> attackingUnits;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzQ5Nw==", "bodyText": "I agree.  It's what I'd like to get to.  Once the BattleState interface has been fully built, I'll then know what is all the parts of MustFightBattle that is part of the state and I'd like to make a value object that holds that data.  I'd also like to convert the attacking/defending units into FiringGroups (from my older PR that I closed).  Then it doesn't need separate attacking/defending units, attacking/defending aa, and bombarding units.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436407497", "createdAt": "2020-06-07T22:24:26Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleSteps.java", "diffHunk": "@@ -31,8 +37,13 @@\n   final @NonNull GamePlayer defender;\n   final @NonNull Collection<Unit> offensiveAa;\n   final @NonNull Collection<Unit> defendingAa;\n+\n+  @Getter(onMethod = @__({@Override}))\n   final @NonNull Collection<Unit> attackingUnits;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDA2MA=="}, "originalCommit": {"oid": "fe64e1ca01ceb7122f91f632e1cf88acdc148108"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODcxNDIwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirAttackVsNonSubsStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMTowMzoxMVrOGgM9Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMTowMzoxMVrOGgM9Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQxOTg4Mw==", "bodyText": "nit, can use a ternary here to be a bit more concise. It's generally a bit easier (lower cognitive load) for if statements to lead with the 'true' value.\nIE:\nreturn valid()\n   ? List.of(AIR_ATTACK_NON_SUBS)\n   : List.of();", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436419883", "createdAt": "2020-06-08T01:03:11Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirAttackVsNonSubsStep.java", "diffHunk": "@@ -2,18 +2,20 @@\n \n import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_ATTACK_NON_SUBS;\n \n-import games.strategy.triplea.delegate.battle.BattleActions;\n import games.strategy.triplea.delegate.battle.BattleState;\n import java.util.List;\n \n /** Air can not attack subs unless a destroyer is present */\n public class AirAttackVsNonSubsStep extends AirVsNonSubsStep {\n-  public AirAttackVsNonSubsStep(final BattleState battleState, final BattleActions battleActions) {\n-    super(battleState, battleActions);\n+  public AirAttackVsNonSubsStep(final BattleState battleState) {\n+    super(battleState);\n   }\n \n   @Override\n   public List<String> getNames() {\n+    if (!valid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af45f1509a1d27a22d2348ec0150023af2500d1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODcyMTkyOnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirDefendVsNonSubsStepTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToxMjo0MlrOGgNBdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo0OToyOFrOGgPHpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMDk4MQ==", "bodyText": "The givenBattleState is still odd, it probably should at least return a builder().\nYou can make list values non-file and use @Builder.Default to initialize them to empty lists.\nAlso consider using @Singular which I think will default the value to an empty list if not specified. Using @Singular on the attacking and defending units properties, you could instead write:\nMockBattleState.builder()\n   .attackingUnit(givenUnitCanNotBeTargetedBy(mock(UnitType.class)))\n   .defendingUnit(givenUnit())\n   .defendingUnit(givenUnitIsAir())\n   .build();", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436420981", "createdAt": "2020-06-08T01:12:42Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirDefendVsNonSubsStepTest.java", "diffHunk": "@@ -6,67 +6,59 @@\n import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitDestroyer;\n import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.is;\n import static org.mockito.Mockito.mock;\n \n import games.strategy.engine.data.Unit;\n import games.strategy.engine.data.UnitType;\n import games.strategy.triplea.delegate.battle.BattleState;\n import java.util.List;\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n @ExtendWith(MockitoExtension.class)\n class AirDefendVsNonSubsStepTest {\n \n-  @Test\n-  @DisplayName(\"valid() is true if defender has air and no destroyer and attacker has sub\")\n-  void airVsSub() {\n-    final Unit defender1 = givenUnit();\n-    final Unit defender2 = givenUnitIsAir();\n-    final Unit attacker = givenUnitCanNotBeTargetedBy(mock(UnitType.class));\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(true));\n+  @ParameterizedTest(name = \"[{index}] {0} is {2}\")\n+  @MethodSource\n+  void testWhatIsValid(\n+      final String displayName, final BattleState battleState, final boolean expected) {\n+    final AirDefendVsNonSubsStep underTest = new AirDefendVsNonSubsStep(battleState);\n+    assertThat(underTest.valid(), is(expected));\n+    if (expected) {\n+      assertThat(underTest.getNames(), hasSize(1));\n+    } else {\n+      assertThat(underTest.getNames(), hasSize(0));\n+    }\n   }\n \n-  @Test\n-  @DisplayName(\"valid() is false if defender has air and destroyer\")\n-  void airDestroyerVsAnything() {\n-    final Unit defender1 = givenUnitDestroyer();\n-    final Unit defender2 = givenUnitIsAir();\n-    // once a destroyer is around, it doesn't care about the attacker units\n-    final Unit attacker = mock(Unit.class);\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(false));\n-  }\n-\n-  @Test\n-  @DisplayName(\"valid() is false if defender has air and no destroyer and attacker has no sub\")\n-  void airVsOther() {\n-    final Unit defender1 = givenUnit();\n-    final Unit defender2 = givenUnitIsAir();\n-    final Unit attacker = givenUnit();\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(false));\n+  static List<Arguments> testWhatIsValid() {\n+    return List.of(\n+        Arguments.of(\n+            \"Defender has air units and no destroyers vs Attacker subs\",\n+            givenBattleState()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzMzE1Nw==", "bodyText": "Thanks for the pointer to @Singular", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436433157", "createdAt": "2020-06-08T02:38:15Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirDefendVsNonSubsStepTest.java", "diffHunk": "@@ -6,67 +6,59 @@\n import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitDestroyer;\n import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.is;\n import static org.mockito.Mockito.mock;\n \n import games.strategy.engine.data.Unit;\n import games.strategy.engine.data.UnitType;\n import games.strategy.triplea.delegate.battle.BattleState;\n import java.util.List;\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n @ExtendWith(MockitoExtension.class)\n class AirDefendVsNonSubsStepTest {\n \n-  @Test\n-  @DisplayName(\"valid() is true if defender has air and no destroyer and attacker has sub\")\n-  void airVsSub() {\n-    final Unit defender1 = givenUnit();\n-    final Unit defender2 = givenUnitIsAir();\n-    final Unit attacker = givenUnitCanNotBeTargetedBy(mock(UnitType.class));\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(true));\n+  @ParameterizedTest(name = \"[{index}] {0} is {2}\")\n+  @MethodSource\n+  void testWhatIsValid(\n+      final String displayName, final BattleState battleState, final boolean expected) {\n+    final AirDefendVsNonSubsStep underTest = new AirDefendVsNonSubsStep(battleState);\n+    assertThat(underTest.valid(), is(expected));\n+    if (expected) {\n+      assertThat(underTest.getNames(), hasSize(1));\n+    } else {\n+      assertThat(underTest.getNames(), hasSize(0));\n+    }\n   }\n \n-  @Test\n-  @DisplayName(\"valid() is false if defender has air and destroyer\")\n-  void airDestroyerVsAnything() {\n-    final Unit defender1 = givenUnitDestroyer();\n-    final Unit defender2 = givenUnitIsAir();\n-    // once a destroyer is around, it doesn't care about the attacker units\n-    final Unit attacker = mock(Unit.class);\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(false));\n-  }\n-\n-  @Test\n-  @DisplayName(\"valid() is false if defender has air and no destroyer and attacker has no sub\")\n-  void airVsOther() {\n-    final Unit defender1 = givenUnit();\n-    final Unit defender2 = givenUnitIsAir();\n-    final Unit attacker = givenUnit();\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(false));\n+  static List<Arguments> testWhatIsValid() {\n+    return List.of(\n+        Arguments.of(\n+            \"Defender has air units and no destroyers vs Attacker subs\",\n+            givenBattleState()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMDk4MQ=="}, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzNjE1Ng==", "bodyText": "@Singular is causing the Error Prone static analysis plugin to throw an exception.  All you need to do is put @Singular on one of the fields in MockBattleState and then run it.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436436156", "createdAt": "2020-06-08T02:56:53Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirDefendVsNonSubsStepTest.java", "diffHunk": "@@ -6,67 +6,59 @@\n import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitDestroyer;\n import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.is;\n import static org.mockito.Mockito.mock;\n \n import games.strategy.engine.data.Unit;\n import games.strategy.engine.data.UnitType;\n import games.strategy.triplea.delegate.battle.BattleState;\n import java.util.List;\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n @ExtendWith(MockitoExtension.class)\n class AirDefendVsNonSubsStepTest {\n \n-  @Test\n-  @DisplayName(\"valid() is true if defender has air and no destroyer and attacker has sub\")\n-  void airVsSub() {\n-    final Unit defender1 = givenUnit();\n-    final Unit defender2 = givenUnitIsAir();\n-    final Unit attacker = givenUnitCanNotBeTargetedBy(mock(UnitType.class));\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(true));\n+  @ParameterizedTest(name = \"[{index}] {0} is {2}\")\n+  @MethodSource\n+  void testWhatIsValid(\n+      final String displayName, final BattleState battleState, final boolean expected) {\n+    final AirDefendVsNonSubsStep underTest = new AirDefendVsNonSubsStep(battleState);\n+    assertThat(underTest.valid(), is(expected));\n+    if (expected) {\n+      assertThat(underTest.getNames(), hasSize(1));\n+    } else {\n+      assertThat(underTest.getNames(), hasSize(0));\n+    }\n   }\n \n-  @Test\n-  @DisplayName(\"valid() is false if defender has air and destroyer\")\n-  void airDestroyerVsAnything() {\n-    final Unit defender1 = givenUnitDestroyer();\n-    final Unit defender2 = givenUnitIsAir();\n-    // once a destroyer is around, it doesn't care about the attacker units\n-    final Unit attacker = mock(Unit.class);\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(false));\n-  }\n-\n-  @Test\n-  @DisplayName(\"valid() is false if defender has air and no destroyer and attacker has no sub\")\n-  void airVsOther() {\n-    final Unit defender1 = givenUnit();\n-    final Unit defender2 = givenUnitIsAir();\n-    final Unit attacker = givenUnit();\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(false));\n+  static List<Arguments> testWhatIsValid() {\n+    return List.of(\n+        Arguments.of(\n+            \"Defender has air units and no destroyers vs Attacker subs\",\n+            givenBattleState()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMDk4MQ=="}, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NTMzMw==", "bodyText": "Ah yeah, error prone and singular do not play well.  I think the error prone analysis that fails needs to be suppressed for classes that use singular. Perhaps turning the rule off is a better move. IMO @Singular can be really useful, error prone is arguably getting in our way with it.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436455333", "createdAt": "2020-06-08T04:49:28Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirDefendVsNonSubsStepTest.java", "diffHunk": "@@ -6,67 +6,59 @@\n import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitDestroyer;\n import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.is;\n import static org.mockito.Mockito.mock;\n \n import games.strategy.engine.data.Unit;\n import games.strategy.engine.data.UnitType;\n import games.strategy.triplea.delegate.battle.BattleState;\n import java.util.List;\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n @ExtendWith(MockitoExtension.class)\n class AirDefendVsNonSubsStepTest {\n \n-  @Test\n-  @DisplayName(\"valid() is true if defender has air and no destroyer and attacker has sub\")\n-  void airVsSub() {\n-    final Unit defender1 = givenUnit();\n-    final Unit defender2 = givenUnitIsAir();\n-    final Unit attacker = givenUnitCanNotBeTargetedBy(mock(UnitType.class));\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(true));\n+  @ParameterizedTest(name = \"[{index}] {0} is {2}\")\n+  @MethodSource\n+  void testWhatIsValid(\n+      final String displayName, final BattleState battleState, final boolean expected) {\n+    final AirDefendVsNonSubsStep underTest = new AirDefendVsNonSubsStep(battleState);\n+    assertThat(underTest.valid(), is(expected));\n+    if (expected) {\n+      assertThat(underTest.getNames(), hasSize(1));\n+    } else {\n+      assertThat(underTest.getNames(), hasSize(0));\n+    }\n   }\n \n-  @Test\n-  @DisplayName(\"valid() is false if defender has air and destroyer\")\n-  void airDestroyerVsAnything() {\n-    final Unit defender1 = givenUnitDestroyer();\n-    final Unit defender2 = givenUnitIsAir();\n-    // once a destroyer is around, it doesn't care about the attacker units\n-    final Unit attacker = mock(Unit.class);\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(false));\n-  }\n-\n-  @Test\n-  @DisplayName(\"valid() is false if defender has air and no destroyer and attacker has no sub\")\n-  void airVsOther() {\n-    final Unit defender1 = givenUnit();\n-    final Unit defender2 = givenUnitIsAir();\n-    final Unit attacker = givenUnit();\n-\n-    final BattleState battleState =\n-        givenBattleState()\n-            .attackingUnits(List.of(defender1, defender2))\n-            .defendingUnits(List.of(attacker))\n-            .build();\n-    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n-    assertThat(underTest.valid(), is(false));\n+  static List<Arguments> testWhatIsValid() {\n+    return List.of(\n+        Arguments.of(\n+            \"Defender has air units and no destroyers vs Attacker subs\",\n+            givenBattleState()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMDk4MQ=="}, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODcyNzU2OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToyMDoxMFrOGgNE1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo1MzoyMFrOGgPKsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMTg0NQ==", "bodyText": "Nit, this is not really a Mock. A stub is something that returns the same value (the stub controls the return value), a mock is something that returns the value you tell it to (test controls the return value), and a 'fake' is a simplified implementation (aka, a test double).\nIn this case it looks like we basically have a real implementation. It's tempting to call this a test-fake, but given the API is so simple it looks to be full-blown.\nThis makes me wonder if we should have a DefaultBattleState on the BattleState interface itself.  Essentially in BattleState declaring a public static class DefaultBattleState that would be this class. You've mentioned though you expect this class to grow and perhaps then we'll want to use a true-mock.\nIn the meantime the naming is a bit misleading and I think would be useful to fix. Perhaps we could call this a DefaultBattleState, or a SimpleBattleState.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436421845", "createdAt": "2020-06-08T01:20:10Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+/**\n+ * Simple implementation of BattleState for tests to use\n+ *\n+ * <p>{@link #givenBattleState()} will return a builder with everything defaulted and the test can\n+ * override the specific items needed.\n+ */\n+@Builder\n+public class MockBattleState implements BattleState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzMjA3Nw==", "bodyText": "I'm trying to build a faked BattleState in a fluent manner where the test methods can easily modify the object to get it to the state they need.\nWith this mechanism, I could have one test that does\ngivenBattleState().attackingUnits(units).defendingUnits(units2).build();\n\nwhile another test could do\ngivenBattleState().bombardingUnits(units).build();\n\nand another could do\ngivenBattleState().bombardingUnits(units).battleSite(territory).build();\n\nThat's why I'm returning the MockBattleStateBuilder class instead of the BattleStateBuilder class.  I could add @Builder(toBuilder = true) and then do\ngivenBattleState().toBuilder().bombardingUnits(units).battleSite(territory).build();\n\nbut that felt like extra work that I could skip.\nI'd like to use mock() but I don't see how I can do that in a fluent manner.  Instead, I'd have to do\nBattleState battleState = givenBattleState();\nwhen(battleState.attackingUnits()).thenReturn(units);\nwhen(battleState.defendingUnits()).thenReturn(units2);\n\nI could call it a fake because it will not be a full blown implementation.  Once I start adding in the updater methods, I'll not be implementing them.  The tests will just spy on the BattleState and check that the methods were called correctly.  And if I ever come across a step that updates the state and then reads from the updated state, I'll have rethink this :)  I haven't yet seen one but I haven't fully investigated every single step yet.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436432077", "createdAt": "2020-06-08T02:31:11Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+/**\n+ * Simple implementation of BattleState for tests to use\n+ *\n+ * <p>{@link #givenBattleState()} will return a builder with everything defaulted and the test can\n+ * override the specific items needed.\n+ */\n+@Builder\n+public class MockBattleState implements BattleState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMTg0NQ=="}, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0MDEwNA==", "bodyText": "I've renamed the class to FakeBattleState and the given method to givenBattleStateBuilder().", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436440104", "createdAt": "2020-06-08T03:21:47Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+/**\n+ * Simple implementation of BattleState for tests to use\n+ *\n+ * <p>{@link #givenBattleState()} will return a builder with everything defaulted and the test can\n+ * override the specific items needed.\n+ */\n+@Builder\n+public class MockBattleState implements BattleState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMTg0NQ=="}, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NDc3Mg==", "bodyText": "Understood on the fluent API, that is cool \ud83d\udc4d\nOne word of caution/note, spying on state changes is generally a test code smell. It's generally better if one module computes the state change and returns the new state value. Then have another module that uses the first one to do the state mutation.\nIE:\n\nBiFunction<GameData, BattleState, Integer> computationStrategy;\nBattleState battleState;\n\nvoid foo(GameData gameData) {\n  int newValue = computationStrategy.apply(gameData, battleState);\n  battleState.setSomeValue(newValue);\n}\n\nIn this case the test for the above is quite trivial as the computation function can be injected. In TripleA so far the cleanest way I know to do that is to use a static build function, ie:\n@Builder\nclass ImperativeShell {\n  @Nonnull private final BattleState battleState;\n  @Nonnull private final GameData gameData;\n  @Nonnull private final BiFunction<BattleState, GAmeDAta, Integer> computationFunction;\n\n   public static ImperativeShell build(GameData gameData, BattleState battleState) {\n         return builder()\n                      .battleState(battleState)\n                      .gameData(gameData)\n                      .computationFunction(new RealComputationFunction())\n                      .build();\n   }\n}\n\nThen in test you can use the builder() directly to inject mocks. IE:\nclass ImperativeShellTest {\n  @Mock private BattleState battleState;\n  @Mock private GameData gameData;\n  @Mock private BiFunction<BattleState, GAmeDAta, Integer> computationFunction;\n   \n   private ImperativeShell imperativeShell;\n  \n   @BeforeEach\n   void setUp() {\n         imperativeShell = ImperativeShell builder()\n                      .battleState(battleState)\n                      .gameData(gameData)\n                      .computationFunction(computationFunction)\n                      .build();\n   }\n}\n\nAt the end of this you can then test the 'RealComputationFunction' directly and assert it returns the expected values without having to spy for side-effects. It turns assertions that look like this:\ncomputation.apply(battleState);\n\nverify(battleState).unitRemoved(unit);\n\nInto:\nUnit result = computation.apply(battleState);\n\nassertThat(result, is(someExpectedUnit));", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436454772", "createdAt": "2020-06-08T04:46:44Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+/**\n+ * Simple implementation of BattleState for tests to use\n+ *\n+ * <p>{@link #givenBattleState()} will return a builder with everything defaulted and the test can\n+ * override the specific items needed.\n+ */\n+@Builder\n+public class MockBattleState implements BattleState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMTg0NQ=="}, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NjExNA==", "bodyText": "Nota bene, if the objects to inject are all unique minus the generic types (recall that in java generic types are dropped during compilation time), then @InjectMocks can make a test even easier and automatically link mocks to an @RequiredsArgsConstructor (which is created automatically when using @Builder), ie:\nclass ImperativeShellTest {\n  @Mock private BattleState battleState;\n  @Mock private GameData gameData;\n  @Mock private BiFunction<BattleState, GAmeDAta, Integer> computationFunction;\n   \n   @InjectMocks\n   private ImperativeShell imperativeShell;", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436456114", "createdAt": "2020-06-08T04:53:20Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/MockBattleState.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+/**\n+ * Simple implementation of BattleState for tests to use\n+ *\n+ * <p>{@link #givenBattleState()} will return a builder with everything defaulted and the test can\n+ * override the specific items needed.\n+ */\n+@Builder\n+public class MockBattleState implements BattleState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMTg0NQ=="}, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODcyOTI1OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirAttackVsNonSubsStepTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToyMTo1M1rOGgNFyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToyMTo1M1rOGgNFyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMjA5MA==", "bodyText": "Nit, most given methods should take a parameter. Something like:\ngivenUnitWithAttackPower(2)\n\nIf there is no parameter, and the return value is very generic, then something like the following would be typical (note the 'any' word):\ngivenAnyUnit()\n\nOtherwise the given should probably spell out what is special about the thing that is being returned, you've done that in the example of: givenUnitIsAir()", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436422090", "createdAt": "2020-06-08T01:21:53Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirAttackVsNonSubsStepTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.air;\n+\n+import static games.strategy.triplea.delegate.battle.MockBattleState.givenBattleState;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitCanNotBeTargetedBy;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitDestroyer;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class AirAttackVsNonSubsStepTest {\n+\n+  @ParameterizedTest(name = \"[{index}] {0} is {2}\")\n+  @MethodSource\n+  void testWhatIsValid(\n+      final String displayName, final BattleState battleState, final boolean expected) {\n+    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n+    assertThat(underTest.valid(), is(expected));\n+    if (expected) {\n+      assertThat(underTest.getNames(), hasSize(1));\n+    } else {\n+      assertThat(underTest.getNames(), hasSize(0));\n+    }\n+  }\n+\n+  static List<Arguments> testWhatIsValid() {\n+    return List.of(\n+        Arguments.of(\n+            \"Attacker has air units and no destroyers vs Defender subs\",\n+            givenBattleState()\n+                .attackingUnits(List.of(givenUnit(), givenUnitIsAir()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODczMDYyOnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/BattleStepsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToyMzo0M1rOGgNGkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToyMzo0M1rOGgNGkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMjI4OQ==", "bodyText": "Side note, if you could follow-up and remove the Tuple return value from newUnitAndAttachment, it would be appreciated. We really do want to delete that class outright in favor of value objects.", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436422289", "createdAt": "2020-06-08T01:23:43Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/BattleStepsTest.java", "diffHunk": "@@ -139,6 +145,19 @@ public static Unit givenUnitAttackerFirstStrikeCanNotBeTargetedBy(final UnitType\n     return unitAndAttachment.getFirst();\n   }\n \n+  public static Unit givenUnitCanEvadeAndCanNotBeTargetedBy(final UnitType otherType) {\n+    final Tuple<Unit, UnitAttachment> unitAndAttachment = newUnitAndAttachment();\n+    when(unitAndAttachment.getSecond().getCanEvade()).thenReturn(true);\n+    when(unitAndAttachment.getSecond().getCanNotBeTargetedBy()).thenReturn(Set.of(otherType));\n+    return unitAndAttachment.getFirst();\n+  }\n+\n+  public static Unit givenUnitCanNotBeTargetedBy(final UnitType otherType) {\n+    final Tuple<Unit, UnitAttachment> unitAndAttachment = newUnitAndAttachment();\n+    when(unitAndAttachment.getSecond().getCanNotBeTargetedBy()).thenReturn(Set.of(otherType));\n+    return unitAndAttachment.getFirst();\n+  }\n+\n   public static Unit givenUnitDefenderFirstStrike() {\n     final UnitType canNotTargetType = mock(UnitType.class);\n     final Tuple<Unit, UnitAttachment> unitAndAttachment = newUnitAndAttachment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODczMDkwOnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirAttackVsNonSubsStepTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToyNDowOVrOGgNGwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjo0MDozM1rOGgNybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMjMzNg==", "bodyText": "Any thoughts to simplify this helper method from:\ngivenUnitCanNotBeTargetedBy(mock(UnitType.class))\n\nTo:\ngivenUnitCanNotBeTargetedByAnyUnit();\n\nOr am I misunder", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436422336", "createdAt": "2020-06-08T01:24:09Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirAttackVsNonSubsStepTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.air;\n+\n+import static games.strategy.triplea.delegate.battle.MockBattleState.givenBattleState;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitCanNotBeTargetedBy;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitDestroyer;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class AirAttackVsNonSubsStepTest {\n+\n+  @ParameterizedTest(name = \"[{index}] {0} is {2}\")\n+  @MethodSource\n+  void testWhatIsValid(\n+      final String displayName, final BattleState battleState, final boolean expected) {\n+    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n+    assertThat(underTest.valid(), is(expected));\n+    if (expected) {\n+      assertThat(underTest.getNames(), hasSize(1));\n+    } else {\n+      assertThat(underTest.getNames(), hasSize(0));\n+    }\n+  }\n+\n+  static List<Arguments> testWhatIsValid() {\n+    return List.of(\n+        Arguments.of(\n+            \"Attacker has air units and no destroyers vs Defender subs\",\n+            givenBattleState()\n+                .attackingUnits(List.of(givenUnit(), givenUnitIsAir()))\n+                .defendingUnits(List.of(givenUnitCanNotBeTargetedBy(mock(UnitType.class))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzMzUxOQ==", "bodyText": "I'm renaming it to givenUnitCanNotBeTargetedByRandomUnit().", "url": "https://github.com/triplea-game/triplea/pull/6593#discussion_r436433519", "createdAt": "2020-06-08T02:40:33Z", "author": {"login": "trevan"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/air/AirAttackVsNonSubsStepTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.air;\n+\n+import static games.strategy.triplea.delegate.battle.MockBattleState.givenBattleState;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitCanNotBeTargetedBy;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitDestroyer;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class AirAttackVsNonSubsStepTest {\n+\n+  @ParameterizedTest(name = \"[{index}] {0} is {2}\")\n+  @MethodSource\n+  void testWhatIsValid(\n+      final String displayName, final BattleState battleState, final boolean expected) {\n+    final AirAttackVsNonSubsStep underTest = new AirAttackVsNonSubsStep(battleState);\n+    assertThat(underTest.valid(), is(expected));\n+    if (expected) {\n+      assertThat(underTest.getNames(), hasSize(1));\n+    } else {\n+      assertThat(underTest.getNames(), hasSize(0));\n+    }\n+  }\n+\n+  static List<Arguments> testWhatIsValid() {\n+    return List.of(\n+        Arguments.of(\n+            \"Attacker has air units and no destroyers vs Defender subs\",\n+            givenBattleState()\n+                .attackingUnits(List.of(givenUnit(), givenUnitIsAir()))\n+                .defendingUnits(List.of(givenUnitCanNotBeTargetedBy(mock(UnitType.class))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMjMzNg=="}, "originalCommit": {"oid": "5b9d5dc50a130745ca9a064a75686efafb903de9"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2108, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}