{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNzg5NTQy", "number": 6234, "title": "Clean up keybindings code and remap done shortcut to \"ctrl+enter\"", "bodyText": "Refactoring:\n\nMoves keybindings utilities methods from SwingComponents to SwingKeyBindings\nHelps combine keybinding helpers, they had become scattered and duplicative\nCreates a single enum for 'ButtonDownModifier' (eg: shift, control)\nExpands enumerated items in 'KeyCode'\nConsistently uses addKeyBindings method across all usages, should help\nin tracking down and finding keybindings.\n\nFeature updadting:\n\nChanges 'shift+d' hotkey that was bound to the 'done' button to be 'ctrl+enter'\n\n\nFunctional Changes\n\n[] New map or map update\n[] New Feature\n[x] Feature update or enhancement: #6181\n[] Feature Removal\n[x] Code Cleanup or refactor\n[] Configuration Change\n[] Problem fix:  \n[] Other:   \nTesting\nDid some quick smoke testing on a single player game and verified new \"ctrl+enter\" key binding works.\n\n\n\n\nAdditional Review Notes\nThe keybinding helper methods in SwingComponents becamse a bit of a mess. Extracting them to a single class helped to unify and clean them up", "createdAt": "2020-04-13T19:04:47Z", "url": "https://github.com/triplea-game/triplea/pull/6234", "merged": true, "mergeCommit": {"oid": "a9f88fcceb100bad0166bcfdbf50b8a2afcb4813"}, "closed": true, "closedAt": "2020-04-14T08:21:17Z", "author": {"login": "DanVanAtta"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXTrURgH2gAyNDAyNzg5NTQyOmFlZTU1ZDk0Nzk3YTg2Y2UxOTNhMDI2Yzk4YjFlY2I5OWFkZjM1OGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXfG_bAFqTM5MjcwNDgzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aee55d94797a86ce193a026c98b1ecb99adf358c", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/aee55d94797a86ce193a026c98b1ecb99adf358c", "committedDate": "2020-04-13T19:01:51Z", "message": "Clean up keybindings code and remap done shortcut to \"ctrl+enter\"\n\nRefactoring:\n- Moves keybindings utilities methods from SwingComponents to SwingKeyBindings\n- Helps combine keybinding helpers, they had become scattered and duplicative\n- Creates a single enum for 'ButtonDownModifier' (eg: shift, control)\n- Expands enumerated items in 'KeyCode'\n- Consistently uses addKeyBindings method across all usages, should help\n  in tracking down and finding keybindings.\n\nFeature updadting:\n- Changes 'shift+d' hotkey that was bound to the 'done' button to be 'ctrl+enter'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDU3MjQ2", "url": "https://github.com/triplea-game/triplea/pull/6234#pullrequestreview-392457246", "createdAt": "2020-04-13T21:36:10Z", "commit": {"oid": "aee55d94797a86ce193a026c98b1ecb99adf358c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTozNjoxMFrOGE2OEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTozNjoxMFrOGE2OEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNTgyNg==", "bodyText": "What do you think about making KeyCombination and KeyCode implement the same interface?\nThis way you woldn't need to convert one to the other and were able to nest things in theory", "url": "https://github.com/triplea-game/triplea/pull/6234#discussion_r407735826", "createdAt": "2020-04-13T21:36:10Z", "author": {"login": "RoiEXLab"}, "path": "swing-lib/src/main/java/org/triplea/swing/key/binding/SwingKeyBinding.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.triplea.swing.key.binding;\n+\n+import java.awt.KeyboardFocusManager;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JComponent;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.text.JTextComponent;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.swing.SwingAction;\n+\n+/**\n+ * Supports adding key bindings. Reference:\n+ * https://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html\n+ *\n+ * <p>Key bindings added through this class will \"always\" be active regardless if the component is\n+ * currently focused or not. Single key key bindings will not be active when focus is inside of a\n+ * text component. This is to avoid, for example, a user typing a chat message and unintentionally\n+ * firing key bindings.\n+ */\n+@UtilityClass\n+public class SwingKeyBinding {\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, keyCode, action);\n+  }\n+\n+  /**\n+   * Adds two keybindings to a given key, both active when \"ctrl\" and \"meta\" are held down.\n+   *\n+   * @param key The key to be bind in combination with \"ctrl\" being held down, or \"meta\" being held\n+   *     down.\n+   * @param action The action to execute when the keybinding is activated.\n+   */\n+  public static void addKeyListenerWithMetaAndCtrlMasks(\n+      final JFrame component, final KeyCode key, final Runnable action) {\n+\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.CTRL),\n+        action);\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.META),\n+        action);\n+  }\n+\n+  private static void addKeyMapping(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, KeyCombination.of(keyCode, ButtonDownMask.NONE), action);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee55d94797a86ce193a026c98b1ecb99adf358c"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7ac0a8c0aef7634b799eb9352d4d11fd46cb76a", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/e7ac0a8c0aef7634b799eb9352d4d11fd46cb76a", "committedDate": "2020-04-14T01:06:41Z", "message": "Correct boolean condition to disable keybindings on 'shift' modifier keybindings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5192c396337662f9e613e6090a53f450ee1737d1", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/5192c396337662f9e613e6090a53f450ee1737d1", "committedDate": "2020-04-14T01:12:29Z", "message": "Remove \"toKeyStroke\" from KeyCode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a6793874653be1f25af10586a5dfe91c981b331", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/4a6793874653be1f25af10586a5dfe91c981b331", "committedDate": "2020-04-14T01:12:30Z", "message": "Move testing of KeyCode to KeyCombination"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1556ea99cf490e282773b2169e84d818f6b087c8", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/1556ea99cf490e282773b2169e84d818f6b087c8", "committedDate": "2020-04-14T01:19:15Z", "message": "Update test to verify all permutations of key code and button down mask."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzAwMDYz", "url": "https://github.com/triplea-game/triplea/pull/6234#pullrequestreview-392700063", "createdAt": "2020-04-14T08:14:47Z", "commit": {"oid": "1556ea99cf490e282773b2169e84d818f6b087c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzA0ODM1", "url": "https://github.com/triplea-game/triplea/pull/6234#pullrequestreview-392704835", "createdAt": "2020-04-14T08:21:01Z", "commit": {"oid": "1556ea99cf490e282773b2169e84d818f6b087c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoyMTowMlrOGFDdag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoyMTowMlrOGFDdag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1Mjc0Ng==", "bodyText": "I was just about to complain that this might not always work, but then I reliazed that using this abstraction that only allows a single key to be down this is completely fine", "url": "https://github.com/triplea-game/triplea/pull/6234#discussion_r407952746", "createdAt": "2020-04-14T08:21:02Z", "author": {"login": "RoiEXLab"}, "path": "swing-lib/src/main/java/org/triplea/swing/key/binding/SwingKeyBinding.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.triplea.swing.key.binding;\n+\n+import java.awt.KeyboardFocusManager;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JComponent;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.text.JTextComponent;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.swing.SwingAction;\n+\n+/**\n+ * Supports adding key bindings. Reference:\n+ * https://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html\n+ *\n+ * <p>Key bindings added through this class will \"always\" be active regardless if the component is\n+ * currently focused or not. Single key key bindings will not be active when focus is inside of a\n+ * text component. This is to avoid, for example, a user typing a chat message and unintentionally\n+ * firing key bindings.\n+ */\n+@UtilityClass\n+public class SwingKeyBinding {\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCombination keyCombination, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCombination, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JDialog frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JFrame frame, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(frame.getRootPane(), keyCode, action);\n+  }\n+\n+  public static void addKeyBinding(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, keyCode, action);\n+  }\n+\n+  /**\n+   * Adds two keybindings to a given key, both active when \"ctrl\" and \"meta\" are held down.\n+   *\n+   * @param key The key to be bind in combination with \"ctrl\" being held down, or \"meta\" being held\n+   *     down.\n+   * @param action The action to execute when the keybinding is activated.\n+   */\n+  public static void addKeyListenerWithMetaAndCtrlMasks(\n+      final JFrame component, final KeyCode key, final Runnable action) {\n+\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.CTRL),\n+        action);\n+    addKeyMapping(\n+        (JComponent) component.getContentPane(),\n+        KeyCombination.of(key, ButtonDownMask.META),\n+        action);\n+  }\n+\n+  private static void addKeyMapping(\n+      final JComponent component, final KeyCode keyCode, final Runnable action) {\n+    addKeyMapping(component, KeyCombination.of(keyCode, ButtonDownMask.NONE), action);\n+  }\n+\n+  private static void addKeyMapping(\n+      final JComponent component, final KeyCombination keyCombination, final Runnable action) {\n+    final String keyBindingIdentifier = UUID.randomUUID().toString();\n+\n+    final AtomicBoolean enabled = new AtomicBoolean(true);\n+\n+    if (keyCombination.getButtonDownMask() == ButtonDownMask.NONE\n+        || keyCombination.getButtonDownMask() == ButtonDownMask.SHIFT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1556ea99cf490e282773b2169e84d818f6b087c8"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3482, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}