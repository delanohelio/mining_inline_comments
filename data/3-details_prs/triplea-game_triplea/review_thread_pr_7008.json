{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMjg5MzY2", "number": 7008, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjo1NjoyOFrOEMT6xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDoyNjo0MFrOEMU0nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQ0NzA4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjo1NjoyOFrOGuWUfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDoxMjoxMFrOGuXcRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1MzM3Mw==", "bodyText": "This interface is certainly becoming quite the list  \ud83d\ude01\nWould you agree that a javadoc could help clarify these methods? For example, when is markNoMovementLeft called, what does it mean to invoke that? I'm not sure if this method is invoked to indicate there is no movement left, or invoked to flag that there is no movement left. (Are we responding to the event, or are we triggering the event?)", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451253373", "createdAt": "2020-07-08T02:56:28Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -23,6 +23,15 @@ void queryRetreat(\n \n   void fireNavalBombardment(IDelegateBridge bridge);\n \n+  void landParatroopers(\n+      IDelegateBridge bridge, Collection<Unit> airTransports, Collection<Unit> dependents);\n+\n+  void removeNonCombatants(IDelegateBridge bridge);\n+\n+  void markNoMovementLeft(IDelegateBridge bridge);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI2NzQxNw==", "bodyText": "At this point, I'm not trying to understand what each of these methods do.  My goal is that once all of the steps have been converted, I'd like to go through these methods and try to \"shrink\" their focus by splitting them, breaking them up, etc and adding tests to them.  Some of them do a lot of things (queryRetreat has >120 lines).\nAt that point, I think I'll understand the methods well enough to be able to write javadocs for each of them.", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451267417", "createdAt": "2020-07-08T03:53:19Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -23,6 +23,15 @@ void queryRetreat(\n \n   void fireNavalBombardment(IDelegateBridge bridge);\n \n+  void landParatroopers(\n+      IDelegateBridge bridge, Collection<Unit> airTransports, Collection<Unit> dependents);\n+\n+  void removeNonCombatants(IDelegateBridge bridge);\n+\n+  void markNoMovementLeft(IDelegateBridge bridge);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1MzM3Mw=="}, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI3MTc1MA==", "bodyText": "Another part of my goal is to have all of the code that interacts with the battle state to be limited to the methods in BattleState.  Some of the methods in BattleActions interact with the battle state and so I'll need to separate them.  Once that is done, it is possible that BattleActions won't even be needed anymore since the IDelegateBridge can be interacted with in the steps just as well as it can be interacted in BattleActions.  But at this moment, I'm just trying to move things around to make it easier to see how the logic should be split up.", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451271750", "createdAt": "2020-07-08T04:12:10Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -23,6 +23,15 @@ void queryRetreat(\n \n   void fireNavalBombardment(IDelegateBridge bridge);\n \n+  void landParatroopers(\n+      IDelegateBridge bridge, Collection<Unit> airTransports, Collection<Unit> dependents);\n+\n+  void removeNonCombatants(IDelegateBridge bridge);\n+\n+  void markNoMovementLeft(IDelegateBridge bridge);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1MzM3Mw=="}, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQ1MDA4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjo1ODoxMlrOGuWWSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDowMDoxOFrOGuXRrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1MzgzNA==", "bodyText": "While this is an existing method, perhaps it's a good time to clarify it?\nIt's not clear here if we are clearing the \"damagedChangesInto\" units or are applying that.\nPerhaps this would be better called clearWaitingToDieAndApplyDamagedUnitConversions.\nEven better, could we break this up into two steps? That would be a much better SRP.", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451253834", "createdAt": "2020-07-08T02:58:12Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -23,6 +23,15 @@ void queryRetreat(\n \n   void fireNavalBombardment(IDelegateBridge bridge);\n \n+  void landParatroopers(\n+      IDelegateBridge bridge, Collection<Unit> airTransports, Collection<Unit> dependents);\n+\n+  void removeNonCombatants(IDelegateBridge bridge);\n+\n+  void markNoMovementLeft(IDelegateBridge bridge);\n+\n+  void clearWaitingToDieAndDamagedChangesInto(IDelegateBridge bridge);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI2OTAzOA==", "bodyText": "See my comment above about my goals.\nBut yeah, the method name is hard to understand.  It also isn't the only place where \"damagedChangesInto\" units are affected or where units are removed from the \"waitingToDie\" list.\nIt also makes me wonder about the \"atomic step\" comment that I moved to be over BattleStep.  I'm not sure how this method can be considered atomic.  But I'm not sure what would happen if I split it up into two separate steps vs just splitting the method into two methods but still calling it from the same step.", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451269038", "createdAt": "2020-07-08T04:00:18Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleActions.java", "diffHunk": "@@ -23,6 +23,15 @@ void queryRetreat(\n \n   void fireNavalBombardment(IDelegateBridge bridge);\n \n+  void landParatroopers(\n+      IDelegateBridge bridge, Collection<Unit> airTransports, Collection<Unit> dependents);\n+\n+  void removeNonCombatants(IDelegateBridge bridge);\n+\n+  void markNoMovementLeft(IDelegateBridge bridge);\n+\n+  void clearWaitingToDieAndDamagedChangesInto(IDelegateBridge bridge);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1MzgzNA=="}, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQ1MTcwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjo1OToxOVrOGuWXTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzowMTowMFrOGuWY8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NDA5NQ==", "bodyText": "This list is looking good, it is making the control flow certainly more explicit and adding a layer of useful abstraction that informs you at a high level what the game sequence will be. I think this kind of change does make it easier to understand and maintain the code \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451254095", "createdAt": "2020-07-08T02:59:19Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1067,27 +1038,39 @@ private void pushFightLoopOnStack(final boolean firstRun) {\n    * still needed. They can be safely removed once save compatibility can be broken.\n    */\n   @VisibleForTesting\n-  public List<IExecutable> getBattleExecutables(final boolean firstRun) {\n+  public List<IExecutable> getBattleExecutables() {\n     final List<IExecutable> steps = new ArrayList<>();\n-    addFightStartSteps(firstRun, steps);\n+    addFightStartSteps(steps);\n     addFightSteps(steps);\n     addCheckEndBattleAndRetreatingSteps(steps);\n     return steps;\n   }\n \n-  private void addFightStartSteps(final boolean firstRun, final List<IExecutable> steps) {\n+  private void addFightStartSteps(final List<IExecutable> steps) {\n     if (offensiveAa == null) {\n       updateOffensiveAaUnits();\n     }\n     if (defendingAa == null) {\n       updateDefendingAaUnits();\n     }\n-    final BattleStep navalBombardment = new NavalBombardment(this, this);\n-    final boolean offensiveAa = canFireOffensiveAa();\n-    final boolean defendingAa = canFireDefendingAa();\n-    final BattleStep offensiveAaStep = new OffensiveAaFire(this, this);\n-    final BattleStep defensiveAaStep = new DefensiveAaFire(this, this);\n-    steps.add(offensiveAaStep);\n+    final List<BattleStep> startSteps =\n+        List.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NDUxMg==", "bodyText": "(no-action-needed)   Nit, I suppose a more functional style would inline this list. From that perspective, I think it's a bit more clear the \"update*AAUnits\" calls are side-effects that probably should not be part of this method.", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451254512", "createdAt": "2020-07-08T03:01:00Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1067,27 +1038,39 @@ private void pushFightLoopOnStack(final boolean firstRun) {\n    * still needed. They can be safely removed once save compatibility can be broken.\n    */\n   @VisibleForTesting\n-  public List<IExecutable> getBattleExecutables(final boolean firstRun) {\n+  public List<IExecutable> getBattleExecutables() {\n     final List<IExecutable> steps = new ArrayList<>();\n-    addFightStartSteps(firstRun, steps);\n+    addFightStartSteps(steps);\n     addFightSteps(steps);\n     addCheckEndBattleAndRetreatingSteps(steps);\n     return steps;\n   }\n \n-  private void addFightStartSteps(final boolean firstRun, final List<IExecutable> steps) {\n+  private void addFightStartSteps(final List<IExecutable> steps) {\n     if (offensiveAa == null) {\n       updateOffensiveAaUnits();\n     }\n     if (defendingAa == null) {\n       updateDefendingAaUnits();\n     }\n-    final BattleStep navalBombardment = new NavalBombardment(this, this);\n-    final boolean offensiveAa = canFireOffensiveAa();\n-    final boolean defendingAa = canFireDefendingAa();\n-    final BattleStep offensiveAaStep = new OffensiveAaFire(this, this);\n-    final BattleStep defensiveAaStep = new DefensiveAaFire(this, this);\n-    steps.add(offensiveAaStep);\n+    final List<BattleStep> startSteps =\n+        List.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NDA5NQ=="}, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQ1Nzc4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzowMzowM1rOGuWa8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDowMTo0MFrOGuXS0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NTAyNg==", "bodyText": "style-nit, the intermediate variable is not really needed here.\nEG:\n new LandParatroopers(MustFightBattle.this, MustFightBattle.this)\n        .execute(stack, bridge);\n\nDo you have a strong preference for the intermediate variable?", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451255026", "createdAt": "2020-07-08T03:03:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1142,35 +1124,38 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n         navalBombardment.execute(stack, bridge);\n       }\n     };\n-    if (firstRun) {\n-      steps.add(\n-          new IExecutable() {\n-            private static final long serialVersionUID = 3389635558184415797L;\n+    // Removed in 2.1\n+    new IExecutable() {\n+      private static final long serialVersionUID = 3389635558184415797L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              removeNonCombatants(bridge);\n-            }\n-          });\n-      steps.add(\n-          new LandParatroopers() {\n-            private static final long serialVersionUID = 7193353768857658286L;\n+      @Override\n+      public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+        final BattleStep removeNonCombatants = new RemoveNonCombatants(MustFightBattle.this);\n+        removeNonCombatants.execute(stack, bridge);\n+      }\n+    };\n+    // Removed in 2.1\n+    new IExecutable() {\n+      private static final long serialVersionUID = 7193353768857658286L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              landParatroops(bridge);\n-            }\n-          });\n-      steps.add(\n-          new IExecutable() {\n-            private static final long serialVersionUID = -6676316363537467594L;\n+      @Override\n+      public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+        final BattleStep landParatroopers =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI2OTMyOA==", "bodyText": "No.  I just did it that way the first time and have kept all the other ones similar.  I can switch the style easily.", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451269328", "createdAt": "2020-07-08T04:01:40Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1142,35 +1124,38 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n         navalBombardment.execute(stack, bridge);\n       }\n     };\n-    if (firstRun) {\n-      steps.add(\n-          new IExecutable() {\n-            private static final long serialVersionUID = 3389635558184415797L;\n+    // Removed in 2.1\n+    new IExecutable() {\n+      private static final long serialVersionUID = 3389635558184415797L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              removeNonCombatants(bridge);\n-            }\n-          });\n-      steps.add(\n-          new LandParatroopers() {\n-            private static final long serialVersionUID = 7193353768857658286L;\n+      @Override\n+      public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+        final BattleStep removeNonCombatants = new RemoveNonCombatants(MustFightBattle.this);\n+        removeNonCombatants.execute(stack, bridge);\n+      }\n+    };\n+    // Removed in 2.1\n+    new IExecutable() {\n+      private static final long serialVersionUID = 7193353768857658286L;\n \n-            @Override\n-            public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              landParatroops(bridge);\n-            }\n-          });\n-      steps.add(\n-          new IExecutable() {\n-            private static final long serialVersionUID = -6676316363537467594L;\n+      @Override\n+      public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+        final BattleStep landParatroopers =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NTAyNg=="}, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQ2MjY4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/change/LandParatroopers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzowNjoxM1rOGuWd0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzowNjoxM1rOGuWd0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NTc2MA==", "bodyText": "I wonder if this would be more conventional as a constructor.\nIs there any reason to not make this a constructor?", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451255760", "createdAt": "2020-07-08T03:06:13Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/change/LandParatroopers.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package games.strategy.triplea.delegate.battle.steps.change;\n+\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.LAND_PARATROOPS;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.attachments.TechAttachment;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleActions;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+@AllArgsConstructor\n+public class LandParatroopers implements BattleStep {\n+\n+  private static final long serialVersionUID = 3500647439487948115L;\n+\n+  protected final BattleState battleState;\n+\n+  protected final BattleActions battleActions;\n+\n+  @Override\n+  public List<String> getNames() {\n+    final TransportsAndParatroopers transportsAndParatroopers = getTransportsAndParatroopers();\n+\n+    return transportsAndParatroopers.hasParatroopers() ? List.of(LAND_PARATROOPS) : List.of();\n+  }\n+\n+  @Override\n+  public Order getOrder() {\n+    return Order.LAND_PARATROOPERS;\n+  }\n+\n+  @Override\n+  public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+    final TransportsAndParatroopers transportsAndParatroopers = getTransportsAndParatroopers();\n+\n+    if (transportsAndParatroopers.hasParatroopers()) {\n+      battleActions.landParatroopers(\n+          bridge, transportsAndParatroopers.airTransports, transportsAndParatroopers.paratroopers);\n+    }\n+  }\n+\n+  private static class TransportsAndParatroopers {\n+    private Collection<Unit> airTransports = new ArrayList<>();\n+    private Collection<Unit> paratroopers = new ArrayList<>();\n+\n+    private boolean hasParatroopers() {\n+      return !airTransports.isEmpty() && !paratroopers.isEmpty();\n+    }\n+  }\n+\n+  private TransportsAndParatroopers getTransportsAndParatroopers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQ3MjMwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxMjowNlrOGuWjVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDowNDo0N1rOGuXVeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NzE3Mg==", "bodyText": "Is there a plan to move this method to the step logic, or will it be here long-term?\nIt seems like if we are adding a step from MustFightBattle that then does all its work by invoking a method on MustFightBattle that we are not really benefiting a lot and have a lot of indirection. Hence I wonder if this is a temporary situation or perhaps there is a reason this can't be moved?", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451257172", "createdAt": "2020-07-08T03:12:06Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1394,29 +1380,25 @@ private void removeNonCombatants(final IDelegateBridge bridge) {\n     return unitList;\n   }\n \n-  private void landParatroops(final IDelegateBridge bridge) {\n-    if (TechAttachment.isAirTransportable(attacker)) {\n-      final Collection<Unit> airTransports =\n-          CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n-      if (!airTransports.isEmpty()) {\n-        final Collection<Unit> dependents = getDependentUnits(airTransports);\n-        if (!dependents.isEmpty()) {\n-          final CompositeChange change = new CompositeChange();\n-          // remove dependency from paratroopers by unloading the air transports\n-          for (final Unit unit : dependents) {\n-            change.add(TransportTracker.unloadAirTransportChange(unit, battleSite, false));\n-          }\n-          bridge.addChange(change);\n-          // remove bombers from dependentUnits\n-          for (final Unit unit : airTransports) {\n-            dependentUnits.remove(unit);\n-          }\n-        }\n-      }\n+  @Override\n+  public void landParatroopers(\n+      final IDelegateBridge bridge,\n+      final Collection<Unit> airTransports,\n+      final Collection<Unit> dependents) {\n+    final CompositeChange change = new CompositeChange();\n+    // remove dependency from paratroopers by unloading the air transports\n+    for (final Unit unit : dependents) {\n+      change.add(TransportTracker.unloadAirTransportChange(unit, battleSite, false));\n+    }\n+    bridge.addChange(change);\n+    // remove bombers from dependentUnits\n+    for (final Unit unit : airTransports) {\n+      dependentUnits.remove(unit);\n     }\n   }\n \n-  private void markNoMovementLeft(final IDelegateBridge bridge) {\n+  @Override\n+  public void markNoMovementLeft(final IDelegateBridge bridge) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI3MDAxMA==", "bodyText": "Temporary situation.  See my comment above about my goals.", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451270010", "createdAt": "2020-07-08T04:04:47Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1394,29 +1380,25 @@ private void removeNonCombatants(final IDelegateBridge bridge) {\n     return unitList;\n   }\n \n-  private void landParatroops(final IDelegateBridge bridge) {\n-    if (TechAttachment.isAirTransportable(attacker)) {\n-      final Collection<Unit> airTransports =\n-          CollectionUtils.getMatches(battleSite.getUnits(), Matches.unitIsAirTransport());\n-      if (!airTransports.isEmpty()) {\n-        final Collection<Unit> dependents = getDependentUnits(airTransports);\n-        if (!dependents.isEmpty()) {\n-          final CompositeChange change = new CompositeChange();\n-          // remove dependency from paratroopers by unloading the air transports\n-          for (final Unit unit : dependents) {\n-            change.add(TransportTracker.unloadAirTransportChange(unit, battleSite, false));\n-          }\n-          bridge.addChange(change);\n-          // remove bombers from dependentUnits\n-          for (final Unit unit : airTransports) {\n-            dependentUnits.remove(unit);\n-          }\n-        }\n-      }\n+  @Override\n+  public void landParatroopers(\n+      final IDelegateBridge bridge,\n+      final Collection<Unit> airTransports,\n+      final Collection<Unit> dependents) {\n+    final CompositeChange change = new CompositeChange();\n+    // remove dependency from paratroopers by unloading the air transports\n+    for (final Unit unit : dependents) {\n+      change.add(TransportTracker.unloadAirTransportChange(unit, battleSite, false));\n+    }\n+    bridge.addChange(change);\n+    // remove bombers from dependentUnits\n+    for (final Unit unit : airTransports) {\n+      dependentUnits.remove(unit);\n     }\n   }\n \n-  private void markNoMovementLeft(final IDelegateBridge bridge) {\n+  @Override\n+  public void markNoMovementLeft(final IDelegateBridge bridge) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NzE3Mg=="}, "originalCommit": {"oid": "be0258b40ed2caaeedc881ff7a08913614b8bbdf"}, "originalPosition": 333}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzU5NTE5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDoyNjo0MFrOGuXp8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDoyNjo0MFrOGuXp8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI3NTI1MQ==", "bodyText": "Codacy found an issue: Non-static initializers are confusing", "url": "https://github.com/triplea-game/triplea/pull/7008#discussion_r451275251", "createdAt": "2020-07-08T04:26:40Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1067,27 +1038,39 @@ private void pushFightLoopOnStack(final boolean firstRun) {\n    * still needed. They can be safely removed once save compatibility can be broken.\n    */\n   @VisibleForTesting\n-  public List<IExecutable> getBattleExecutables(final boolean firstRun) {\n+  public List<IExecutable> getBattleExecutables() {\n     final List<IExecutable> steps = new ArrayList<>();\n-    addFightStartSteps(firstRun, steps);\n+    addFightStartSteps(steps);\n     addFightSteps(steps);\n     addCheckEndBattleAndRetreatingSteps(steps);\n     return steps;\n   }\n \n-  private void addFightStartSteps(final boolean firstRun, final List<IExecutable> steps) {\n+  private void addFightStartSteps(final List<IExecutable> steps) {\n     if (offensiveAa == null) {\n       updateOffensiveAaUnits();\n     }\n     if (defendingAa == null) {\n       updateDefendingAaUnits();\n     }\n-    final BattleStep navalBombardment = new NavalBombardment(this, this);\n-    final boolean offensiveAa = canFireOffensiveAa();\n-    final boolean defendingAa = canFireDefendingAa();\n-    final BattleStep offensiveAaStep = new OffensiveAaFire(this, this);\n-    final BattleStep defensiveAaStep = new DefensiveAaFire(this, this);\n-    steps.add(offensiveAaStep);\n+    final List<BattleStep> startSteps =\n+        List.of(\n+            new OffensiveAaFire(this, this),\n+            new DefensiveAaFire(this, this),\n+            new ClearAaCasualties(this, this),\n+            new NavalBombardment(this, this),\n+            new RemoveNonCombatants(this),\n+            new LandParatroopers(this, this),\n+            new MarkNoMovementLeft(this, this));\n+    steps.addAll(\n+        startSteps.stream()\n+            .sorted(Comparator.comparing(BattleStep::getOrder))\n+            .collect(Collectors.toList()));\n+  }\n+\n+  // the IExecutables in this block can be deleted when save compatibility can be broken\n+  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2bdf248354d041f10834313ed4a24402ea2e5c4"}, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2092, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}