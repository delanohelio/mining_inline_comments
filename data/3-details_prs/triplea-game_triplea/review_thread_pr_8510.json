{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NjIxNDkz", "number": 8510, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxMzoyODozNVrOFKkqNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxMzoyODozNVrOFKkqNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjMwNzA5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/PlayerColors.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxMzoyODozNVrOINXK_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxOToyNjo1OVrOINZDBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MjA0NA==", "bodyText": "Feel free to correct me if I'm wrong but isn't a ConcurrentModificationException a more correct behaviour?\nIf for example 2 Threads try to query the player name at the same time, with this code no exception would be thrown, but it could happen that the code computes 2 different colors, which are both returned, but only one of them is stored in the map.\nUnlikely scenario, but we might want to consider using a synchronized/concurrent Map instead", "url": "https://github.com/triplea-game/triplea/pull/8510#discussion_r550882044", "createdAt": "2021-01-02T13:28:35Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/PlayerColors.java", "diffHunk": "@@ -48,7 +48,14 @@ Color getPlayerColor(final String playerName) {\n         \"Illegal player name: %s, use the method 'getImpassableColor()' instead\",\n         playerName);\n \n-    return playerColors.computeIfAbsent(playerName, this::computePlayerColor);\n+    // NOTE: we do *not* use computeIfAbsent here to avoid\n+    // 'java.util.ConcurrentModificationException'\n+    Color playerColor = playerColors.get(playerName);\n+    if (playerColor == null) {\n+      playerColor = computePlayerColor(playerName);\n+      playerColors.put(playerName, playerColor);\n+    }\n+    return playerColor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1b90e23296be721cba7d8371e08e47a3cc79cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMjQ5Mw==", "bodyText": "This is an example of resolving the race condition by 'let it happen'.\nIn this case, the update is to the same value, we guaranteed that player color computation is deterministic.", "url": "https://github.com/triplea-game/triplea/pull/8510#discussion_r550912493", "createdAt": "2021-01-02T19:24:34Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/PlayerColors.java", "diffHunk": "@@ -48,7 +48,14 @@ Color getPlayerColor(final String playerName) {\n         \"Illegal player name: %s, use the method 'getImpassableColor()' instead\",\n         playerName);\n \n-    return playerColors.computeIfAbsent(playerName, this::computePlayerColor);\n+    // NOTE: we do *not* use computeIfAbsent here to avoid\n+    // 'java.util.ConcurrentModificationException'\n+    Color playerColor = playerColors.get(playerName);\n+    if (playerColor == null) {\n+      playerColor = computePlayerColor(playerName);\n+      playerColors.put(playerName, playerColor);\n+    }\n+    return playerColor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MjA0NA=="}, "originalCommit": {"oid": "7f1b90e23296be721cba7d8371e08e47a3cc79cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMjc3NA==", "bodyText": "Let's also consider if we were to resolve the race condition via exception and that the colors were different. In this case one writer could write a value, the value then read by another reader. The other writer would come in and set the value to something else, meanwhile the other reader has the old value, and that would be incorrect. Having a concurrent exception does not solve the race condition as we need to be sure that any readers are going to get consistent results. So this is properly solved with deterministic player color computation (nonetheless it getting written multiple times is not clean).", "url": "https://github.com/triplea-game/triplea/pull/8510#discussion_r550912774", "createdAt": "2021-01-02T19:26:59Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/mapdata/PlayerColors.java", "diffHunk": "@@ -48,7 +48,14 @@ Color getPlayerColor(final String playerName) {\n         \"Illegal player name: %s, use the method 'getImpassableColor()' instead\",\n         playerName);\n \n-    return playerColors.computeIfAbsent(playerName, this::computePlayerColor);\n+    // NOTE: we do *not* use computeIfAbsent here to avoid\n+    // 'java.util.ConcurrentModificationException'\n+    Color playerColor = playerColors.get(playerName);\n+    if (playerColor == null) {\n+      playerColor = computePlayerColor(playerName);\n+      playerColors.put(playerName, playerColor);\n+    }\n+    return playerColor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MjA0NA=="}, "originalCommit": {"oid": "7f1b90e23296be721cba7d8371e08e47a3cc79cf"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2603, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}