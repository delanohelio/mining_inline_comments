{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwODY3Nzk3", "number": 8441, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwMzozMTowNFrOFHhDYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxOToxOTo1NFrOFJYzmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDI1ODg4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwMzozMTowNFrOIJAb9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwNTo1Nzo0M1rOILokNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw==", "bodyText": "I think we should prefer to avoid using class types to infer properties of an object. It can get odd in terms of nesting interfaces. Second, the menus suffer from a lot of side effect calls with methods like \"addMenu(menu)\", this makes code a lot harder to follow.\nWhat would you think about adding a method to the Player type, something like List<JMenuItem> getDebugMenutItems(). Then in this method, when iterating over each player, all you'd need to filter on is that the debug menus items is no non-null, and then you could add the menu times. This would avoid the 'void' return method and instanceOf check.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r546315253", "createdAt": "2020-12-20T03:31:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNjMwNA==", "bodyText": "I felt like add getDebugMenuItems() to the Player type is making the type include extra behavior that isn't needed for the Player.  That was the purpose of creating a specialized interface PlayerDebug.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r546316304", "createdAt": "2020-12-20T03:43:50Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw=="}, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNjgzOQ==", "bodyText": "I've modified getDebugMenuItems() to return a Collection<JMenuItem>", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r546316839", "createdAt": "2020-12-20T03:50:17Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw=="}, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNzc1MQ==", "bodyText": "If we can get away from the instanceof check, would be awesome.\nI don't think I like how we have such a narrow interface as well. Is there opportunity to consolidate the debug tools with ProAI and the new one? ProAI has an extensive debugging framework built into it, I'm concerned we could be going down a path where each AI builds its very own set of debugging tools.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r546317751", "createdAt": "2020-12-20T04:02:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw=="}, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNzkxMg==", "bodyText": "Otherwise, it kinda seems like the interface should be related to AI, 'AiPlayer' and have methods specific for AIs. I think each probably would want a debug menu, or could have some use for it. There are probably other opportunities there as well. That might get us further down the path of having even more instanceof checks to see if a player is an AI.\nFor an idea, perhaps there could be a method like Optional<PlayerAi> getAI(), and that would return us the interface that has things like debug menu and other AI specific properties. If the player is human then the method would return empty.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r546317912", "createdAt": "2020-12-20T04:04:11Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw=="}, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxODM5NQ==", "bodyText": "The ProAI debug framework is very tied into the ProAI code.  I think it would be better for each AI to have its own debugging tools.  The AI logic will be different enough that you'll need to see different aspects of it.\nHow about after #8454 is merged, then I add this to the AbstractAI class.  And then I can grab the list of AbstractAIs from the Injector and check if the current players are one of those AbstractAIs.  And if they are, I can then cast it to AbstractAI and call getDebugMenuItems().", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r546318395", "createdAt": "2020-12-20T04:09:46Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw=="}, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMzMjIzMg==", "bodyText": "Understood about each AI having its own debug.\nIt could generally be useful to have a method like 'isAi' on the player object, that would be my preference instead of an instanceof check. Though at the same time, TripleA is designed so that it is transparent whether a player is AI, human, remote or local.\nYour idea does not sound bad. For consideration for another option -  What if we did a kind of registration of a debug framework (or menu)? Essentially we make available a static method to add a debug menu, and then if a given AI is initialized, it adds debugging. This would follow the 'open-closed' principle well and would not involve interface API changes nor instance-of checks.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r546332232", "createdAt": "2020-12-20T06:58:40Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw=="}, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyNTc4Ng==", "bodyText": "@DanVanAtta , I've pushed an update where the DebugMenu has a callback registry for adding new debug menus.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r548025786", "createdAt": "2020-12-23T15:55:36Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw=="}, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc5Njg4Mg==", "bodyText": "Thanks! When will this infrastructure code be used @trevan ?", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r548796882", "createdAt": "2020-12-25T04:20:46Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw=="}, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyMjc0OA==", "bodyText": "@DanVanAtta , I'm currently using it in my AI.  I also plan to move the ProAi debug menu code to use this factory instead of its current mechanism.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549022748", "createdAt": "2020-12-26T19:26:02Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw=="}, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1NjA5Ng==", "bodyText": "I would like to see this used at some point. If we have nebulous 3rd party code that is never committed, it's going to be impossible to tell if we have a lot of dead code, if we over-engineered, or if there are dependencies on any of this. It will also be difficult for others to try and use as well as there will not be an existing pattern, or if the pattern needs to change, it won't be easy to know what existing dependencies currently exist.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549056096", "createdAt": "2020-12-27T02:43:15Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw=="}, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA2OTg3OA==", "bodyText": "I've modified the ProAI debug menu to utilize this.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549069878", "createdAt": "2020-12-27T05:57:43Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -25,6 +26,16 @@\n           .setMnemonic(KeyEvent.VK_X);\n     }\n \n+    players.stream()\n+        .filter(PlayerDebug.class::isInstance)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTI1Mw=="}, "originalCommit": {"oid": "9a1ff510f91791c86d60fbb798b096338ff193b4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTY2NDAyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxODoxODoyOVrOILeJyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxOTo1ODo1N1rOILt76Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5OTI3Mw==", "bodyText": "The type for this callback seems to be a bit overly generic. It's not clear what the semantic would be behind this type. Perhaps this can be resolved by creating an interface for this, eg: DebugMenuFactory\nWhy is the TripleAFrame reference required? Shouldn't any newly created debug menu be able to be added to a generic JMenu? Would it make sense for the debug menu factory to simply produce a menu and let this class deal with the detail of which menu it ought to be added to.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r548899273", "createdAt": "2020-12-25T18:18:29Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -4,13 +4,21 @@\n import games.strategy.triplea.ai.pro.AbstractProAi;\n import games.strategy.triplea.ui.TripleAFrame;\n import java.awt.event.KeyEvent;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n import org.triplea.swing.SwingAction;\n \n-final class DebugMenu extends JMenu {\n+public final class DebugMenu extends JMenu {\n   private static final long serialVersionUID = -4876915214715298132L;\n \n+  private static final Map<String, Function<TripleAFrame, Collection<JMenuItem>>> menuCallbacks =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c255d587ceb0480444c3291de063208200f1939b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyMjU3Mg==", "bodyText": "I don't understand your issue for the first paragraph.  You want me to create an interface that is an alias?  You mentioned in #7829 (comment) about not using interfaces as aliases so I'm confused on why it is ok to use an alias here and not in that previous discussion?\nI believe the TripleAFrame is required because to create new dialogs and other swing items, a parent frame is required.  So, if the menu item is going to open a new dialog or do something to the UI, it needs access to the TripleAFrame.  In one of my debug menu items, it adds an heatmap overlap and it needs to be able to get a reference to the MapPanel which is a member of TripleAFrame.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549022572", "createdAt": "2020-12-26T19:24:13Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -4,13 +4,21 @@\n import games.strategy.triplea.ai.pro.AbstractProAi;\n import games.strategy.triplea.ui.TripleAFrame;\n import java.awt.event.KeyEvent;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n import org.triplea.swing.SwingAction;\n \n-final class DebugMenu extends JMenu {\n+public final class DebugMenu extends JMenu {\n   private static final long serialVersionUID = -4876915214715298132L;\n \n+  private static final Map<String, Function<TripleAFrame, Collection<JMenuItem>>> menuCallbacks =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5OTI3Mw=="}, "originalCommit": {"oid": "c255d587ceb0480444c3291de063208200f1939b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA0Njc1OA==", "bodyText": "Presumably it would  be more than just an alias considering Map<String, Function<TripleAFrame, Collection<JMenuItem>>> is not a SAM. The interface would give more semantic meaning behind the operation, for example give additional meaning to what the first string parameter represents.\nAccessing TripleAFrame, or the 'parent frame' in a static way is probably okay and better than passing it around through-out every layer of code (which creates a dependency on Swing and UI throughout the code). As perhaps a better option, there could also be an injection of a UI component into any code that needs to access UI. In this latter suggestion any data to be rendered would be passed into the injected code which would then contain the UI logic for rendering that data.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549046758", "createdAt": "2020-12-27T00:32:19Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -4,13 +4,21 @@\n import games.strategy.triplea.ai.pro.AbstractProAi;\n import games.strategy.triplea.ui.TripleAFrame;\n import java.awt.event.KeyEvent;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n import org.triplea.swing.SwingAction;\n \n-final class DebugMenu extends JMenu {\n+public final class DebugMenu extends JMenu {\n   private static final long serialVersionUID = -4876915214715298132L;\n \n+  private static final Map<String, Function<TripleAFrame, Collection<JMenuItem>>> menuCallbacks =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5OTI3Mw=="}, "originalCommit": {"oid": "c255d587ceb0480444c3291de063208200f1939b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA0OTQ5NA==", "bodyText": "I wasn't able to get an interface to work.  The = TreeMap<>(); wouldn't compile anymore since TreeMap doesn't implement DebugMenuFactory.  So, I've added a comment instead to explain what the map is for.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549049494", "createdAt": "2020-12-27T01:10:33Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -4,13 +4,21 @@\n import games.strategy.triplea.ai.pro.AbstractProAi;\n import games.strategy.triplea.ui.TripleAFrame;\n import java.awt.event.KeyEvent;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n import org.triplea.swing.SwingAction;\n \n-final class DebugMenu extends JMenu {\n+public final class DebugMenu extends JMenu {\n   private static final long serialVersionUID = -4876915214715298132L;\n \n+  private static final Map<String, Function<TripleAFrame, Collection<JMenuItem>>> menuCallbacks =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5OTI3Mw=="}, "originalCommit": {"oid": "c255d587ceb0480444c3291de063208200f1939b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1NTk4Ng==", "bodyText": "Instead of an interface, how about a 1st class object?  The methods on it could then lend it to be more easily understood and otherwise provide a more intuitive API.\nDo we really need a TreeMap as well? If the number of elements is just a few, the efficiency gain is seemingly unlikely to be significant.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549055986", "createdAt": "2020-12-27T02:41:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -4,13 +4,21 @@\n import games.strategy.triplea.ai.pro.AbstractProAi;\n import games.strategy.triplea.ui.TripleAFrame;\n import java.awt.event.KeyEvent;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n import org.triplea.swing.SwingAction;\n \n-final class DebugMenu extends JMenu {\n+public final class DebugMenu extends JMenu {\n   private static final long serialVersionUID = -4876915214715298132L;\n \n+  private static final Map<String, Function<TripleAFrame, Collection<JMenuItem>>> menuCallbacks =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5OTI3Mw=="}, "originalCommit": {"oid": "c255d587ceb0480444c3291de063208200f1939b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA2OTg3MA==", "bodyText": "It needs a sorted map so the debug menu items are sorted.  There's only two built in implementations of sortedmap and I don't think ConcurrentSkipListMap is right for this situation.\nI don't see the need for a 1st class object.  The map is literally a map of a string to a SAM.  It is extremely basic and simple.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549069870", "createdAt": "2020-12-27T05:57:30Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -4,13 +4,21 @@\n import games.strategy.triplea.ai.pro.AbstractProAi;\n import games.strategy.triplea.ui.TripleAFrame;\n import java.awt.event.KeyEvent;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n import org.triplea.swing.SwingAction;\n \n-final class DebugMenu extends JMenu {\n+public final class DebugMenu extends JMenu {\n   private static final long serialVersionUID = -4876915214715298132L;\n \n+  private static final Map<String, Function<TripleAFrame, Collection<JMenuItem>>> menuCallbacks =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5OTI3Mw=="}, "originalCommit": {"oid": "c255d587ceb0480444c3291de063208200f1939b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1NDU1Nw==", "bodyText": "I don't agree it is simple. Looking at this function:\nFunction<TripleAFrame, Collection<JMenuItem>>\nIt's not clear how a TripleAFrame should transform, or 'map' (functions map one element to another), to a JMenuItem. Why the frame would be an input to creating a JMenuItem is not readily clear. Beyond that, the type and semantic of the 'string' for the map is not readily understood (stringly typing code-smell). If there is an ordering dependency, using an interface that typically does not guarantee ordering is maybe not ideal either. To understand how that works, a person has to know the full call flow to know the exact types in order to know the ordering is deterministic (having to trace down a call path to determine object state is a code-smell and a scaling problem, if instead you can understand how an API works based only its contract, regardless of state, it's easier. This is the 'liskov-substitution' principle.)\nFor example, the data structure could perhaps instead be:\nList<DebugMenu>\n\nWhere DebugMenu in an interface with the following API:\nString getMenuTitle();\nJMenu getMenuContents();", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549154557", "createdAt": "2020-12-27T19:23:54Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -4,13 +4,21 @@\n import games.strategy.triplea.ai.pro.AbstractProAi;\n import games.strategy.triplea.ui.TripleAFrame;\n import java.awt.event.KeyEvent;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n import org.triplea.swing.SwingAction;\n \n-final class DebugMenu extends JMenu {\n+public final class DebugMenu extends JMenu {\n   private static final long serialVersionUID = -4876915214715298132L;\n \n+  private static final Map<String, Function<TripleAFrame, Collection<JMenuItem>>> menuCallbacks =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5OTI3Mw=="}, "originalCommit": {"oid": "c255d587ceb0480444c3291de063208200f1939b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1Nzg2NQ==", "bodyText": "DebugMenu would still have a Function<TripleAFrame, Collection<JMenuItems>>.  So I think it would be better to just improve the comments.  I understand you are trying to remove the need to use TripleAFrame but I don't think that is a possible goal.\nI'm fine with changing the Map<String, Function<TripleAFrame, Collection<JMenuItems>> to SortedMap<String, Function<TripleAFrame, Collection<JMenuItems>> if you are worried that knowing if it is sorted or not is important.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549157865", "createdAt": "2020-12-27T19:58:57Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/menubar/DebugMenu.java", "diffHunk": "@@ -4,13 +4,21 @@\n import games.strategy.triplea.ai.pro.AbstractProAi;\n import games.strategy.triplea.ui.TripleAFrame;\n import java.awt.event.KeyEvent;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n import org.triplea.swing.SwingAction;\n \n-final class DebugMenu extends JMenu {\n+public final class DebugMenu extends JMenu {\n   private static final long serialVersionUID = -4876915214715298132L;\n \n+  private static final Map<String, Function<TripleAFrame, Collection<JMenuItem>>> menuCallbacks =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5OTI3Mw=="}, "originalCommit": {"oid": "c255d587ceb0480444c3291de063208200f1939b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mzg3MjU1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxOToxMjowM1rOILtqfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxOTo1MzoxOFrOILt5iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MzQwNA==", "bodyText": "Could registerMenuCallback handle this detail for us?", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549153404", "createdAt": "2020-12-27T19:12:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "diffHunk": "@@ -86,24 +90,35 @@ public AbstractProAi(\n     storedPurchaseTerritories = null;\n     storedPoliticalActions = null;\n     storedStrafingTerritories = new ArrayList<>();\n+\n+    // in case there are multiple Pro AIs running at the same time, unregister the one\n+    // created before creating one so that there is only one menu item for all of the ProAI\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f55330180834198205d4076ef0b3a529c86e3f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1Mzk2NQ==", "bodyText": "Second, it's problematic that AI now has a dependency on swing. AI should ideally not depend on the UI layer at all.\nFor example, we saw this as a major problem when trying to replace Swing with JavaFX.\nPresumably this could be fixed by passing a DebugMenu interface to AbstractProAi which it could use to send data but not be aware of the UI implementation detail. WDYT @trevan ?", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549153965", "createdAt": "2020-12-27T19:17:39Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "diffHunk": "@@ -86,24 +90,35 @@ public AbstractProAi(\n     storedPurchaseTerritories = null;\n     storedPoliticalActions = null;\n     storedStrafingTerritories = new ArrayList<>();\n+\n+    // in case there are multiple Pro AIs running at the same time, unregister the one\n+    // created before creating one so that there is only one menu item for all of the ProAI\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MzQwNA=="}, "originalCommit": {"oid": "56f55330180834198205d4076ef0b3a529c86e3f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1NzA3MQ==", "bodyText": "So which code would own the ProLogAi?  That looks like it should be AI code since it is only used by AI players.  And the ProLogAi can't be made unaware of the UI since it has buttons, checkboxes, etc.  It is a dialog that it needs to render.\nTrying to split the debug menu items and their actions from swing or javafx feels like it will just require us to create a new ui library.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549157071", "createdAt": "2020-12-27T19:51:02Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "diffHunk": "@@ -86,24 +90,35 @@ public AbstractProAi(\n     storedPurchaseTerritories = null;\n     storedPoliticalActions = null;\n     storedStrafingTerritories = new ArrayList<>();\n+\n+    // in case there are multiple Pro AIs running at the same time, unregister the one\n+    // created before creating one so that there is only one menu item for all of the ProAI\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MzQwNA=="}, "originalCommit": {"oid": "56f55330180834198205d4076ef0b3a529c86e3f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1NzI1OQ==", "bodyText": "I would actually expect registerMenuCallback to throw an exception if a duplicate string is registered.  The duplicate \"Hard AI\" is a relic of how Hard AI groups everything together in one logging ui.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549157259", "createdAt": "2020-12-27T19:53:18Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "diffHunk": "@@ -86,24 +90,35 @@ public AbstractProAi(\n     storedPurchaseTerritories = null;\n     storedPoliticalActions = null;\n     storedStrafingTerritories = new ArrayList<>();\n+\n+    // in case there are multiple Pro AIs running at the same time, unregister the one\n+    // created before creating one so that there is only one menu item for all of the ProAI\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MzQwNA=="}, "originalCommit": {"oid": "56f55330180834198205d4076ef0b3a529c86e3f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mzg3MzAzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxOToxMjo1NlrOILtqvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxOToxMjo1NlrOILtqvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MzQ2OQ==", "bodyText": "If the game frame is going away, presumably the menu will be destroyed and GC'd. Do we need to unregister? Wouldn't this happen implicitly by the TripleAFrame closing?", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549153469", "createdAt": "2020-12-27T19:12:56Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "diffHunk": "@@ -86,24 +90,35 @@ public AbstractProAi(\n     storedPurchaseTerritories = null;\n     storedPoliticalActions = null;\n     storedStrafingTerritories = new ArrayList<>();\n+\n+    // in case there are multiple Pro AIs running at the same time, unregister the one\n+    // created before creating one so that there is only one menu item for all of the ProAI\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");\n+    DebugMenu.registerMenuCallback(\"Hard AI\", this::initialize);\n   }\n \n   @Override\n   public void stopGame() {\n     super.stopGame(); // absolutely MUST call super.stopGame() first\n     calc.stop();\n+\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f55330180834198205d4076ef0b3a529c86e3f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mzg3NDEzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxOToxNDoxN1rOILtrOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxOToxNDoxN1rOILtrOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MzU5NQ==", "bodyText": "The \"Hard AI\" label is in multiple places, it looks like it is a single thing and we would want to keep it consistent. I think this is a place where extracting it to a constant would be a good move so that the linkage between this label and what players select is explicit and would be the same value.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549153595", "createdAt": "2020-12-27T19:14:17Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "diffHunk": "@@ -86,24 +90,35 @@ public AbstractProAi(\n     storedPurchaseTerritories = null;\n     storedPoliticalActions = null;\n     storedStrafingTerritories = new ArrayList<>();\n+\n+    // in case there are multiple Pro AIs running at the same time, unregister the one\n+    // created before creating one so that there is only one menu item for all of the ProAI\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");\n+    DebugMenu.registerMenuCallback(\"Hard AI\", this::initialize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f55330180834198205d4076ef0b3a529c86e3f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mzg3OTI5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxOToxOTo1NFrOILttqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDowMjowMFrOILt8zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1NDIxNg==", "bodyText": "The frame dependency appears to only be here due to the initialize call. It does not look that is related to the menu item. Could we simply move the initialize call up a level and avoid the frame parameter?", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549154216", "createdAt": "2020-12-27T19:19:54Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "diffHunk": "@@ -86,24 +90,35 @@ public AbstractProAi(\n     storedPurchaseTerritories = null;\n     storedPoliticalActions = null;\n     storedStrafingTerritories = new ArrayList<>();\n+\n+    // in case there are multiple Pro AIs running at the same time, unregister the one\n+    // created before creating one so that there is only one menu item for all of the ProAI\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");\n+    DebugMenu.registerMenuCallback(\"Hard AI\", this::initialize);\n   }\n \n   @Override\n   public void stopGame() {\n     super.stopGame(); // absolutely MUST call super.stopGame() first\n     calc.stop();\n+\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");\n   }\n \n   public ProOddsCalculator getCalc() {\n     return calc;\n   }\n \n-  public static void initialize(final TripleAFrame frame) {\n+  private Collection<JMenuItem> initialize(final TripleAFrame frame) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f55330180834198205d4076ef0b3a529c86e3f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1Njc0MA==", "bodyText": "It is related to the action of the menu item.  It can't be moved up since each menu item might be doing different things and they need access to the TripleAFrame so they can act on it.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549156740", "createdAt": "2020-12-27T19:47:08Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "diffHunk": "@@ -86,24 +90,35 @@ public AbstractProAi(\n     storedPurchaseTerritories = null;\n     storedPoliticalActions = null;\n     storedStrafingTerritories = new ArrayList<>();\n+\n+    // in case there are multiple Pro AIs running at the same time, unregister the one\n+    // created before creating one so that there is only one menu item for all of the ProAI\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");\n+    DebugMenu.registerMenuCallback(\"Hard AI\", this::initialize);\n   }\n \n   @Override\n   public void stopGame() {\n     super.stopGame(); // absolutely MUST call super.stopGame() first\n     calc.stop();\n+\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");\n   }\n \n   public ProOddsCalculator getCalc() {\n     return calc;\n   }\n \n-  public static void initialize(final TripleAFrame frame) {\n+  private Collection<JMenuItem> initialize(final TripleAFrame frame) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1NDIxNg=="}, "originalCommit": {"oid": "56f55330180834198205d4076ef0b3a529c86e3f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1ODA5NQ==", "bodyText": "To walk you through why it is needed as part of the action, when you click on the link, it will call AbstractProAi::showSettingsWindow.  And that method calls ProLogUi.showSettingsWindow which calls settingsWindow.setVisible(true).  And settingsWindow' was created in the initializemethod.  So, without theTripleAFrame, the action wouldn't be able to function.  Unless you passed in ProLogWindowinstead ofTripleAFrameand now the debug factory is dependent onProLogWindowinstead ofTripleFrameand you are limited to whatProLogWindow` can do.", "url": "https://github.com/triplea-game/triplea/pull/8441#discussion_r549158095", "createdAt": "2020-12-27T20:02:00Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/AbstractProAi.java", "diffHunk": "@@ -86,24 +90,35 @@ public AbstractProAi(\n     storedPurchaseTerritories = null;\n     storedPoliticalActions = null;\n     storedStrafingTerritories = new ArrayList<>();\n+\n+    // in case there are multiple Pro AIs running at the same time, unregister the one\n+    // created before creating one so that there is only one menu item for all of the ProAI\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");\n+    DebugMenu.registerMenuCallback(\"Hard AI\", this::initialize);\n   }\n \n   @Override\n   public void stopGame() {\n     super.stopGame(); // absolutely MUST call super.stopGame() first\n     calc.stop();\n+\n+    DebugMenu.unregisterMenuCallback(\"Hard AI\");\n   }\n \n   public ProOddsCalculator getCalc() {\n     return calc;\n   }\n \n-  public static void initialize(final TripleAFrame frame) {\n+  private Collection<JMenuItem> initialize(final TripleAFrame frame) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1NDIxNg=="}, "originalCommit": {"oid": "56f55330180834198205d4076ef0b3a529c86e3f"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2656, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}