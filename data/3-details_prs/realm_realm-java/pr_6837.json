{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzY0MzU3", "number": 6837, "title": "Add ability to use CodecRegistry for passing objects as BSON to JNI", "bodyText": "Add support for MongoDB's CodecRegistry for BSON serialization protocol for passing BSON between Java and JNI.\nSending BSON from Java to JNI can be done by:\nCodecRegistry registry = app.getConfiguration().getDefaultCodecRegistry();\nString encodedBson = JniBsonProtocol.encode(value, registry);\n\nand received in JNI with\nbson::Bson bson = JniBsonProtocol::jstring_to_bson(env, j_args);\n\nAnd similarly be passed from JNI by\nJniBsonProtocol::bson_to_jstring(env, bson);\n\nto Java by\nT t = JniBsonProtocol.decode(encodedBson, T.class, registry);\n\nThe default codec registry can convert primitives, BsonValues and list, and can be overridden by RealmAppConfiguration.Builder.codecRegistry(...).\n\n Settle API\n Settle on default CodecRegistry as substitution for BsonConverter\n Test (Not full coverage, but default codec is test for primitive types just as the old BsonConverter and is now relying on standard implementation\n Review naming: Does codec registry interfere with conventional Realm concepts/naming.\n Remove BsonConverter if we are happy with serialization only conversion?\n Update OS to v10\n Migrate updated OS calls to use BSON", "createdAt": "2020-05-05T21:33:13Z", "url": "https://github.com/realm/realm-java/pull/6837", "merged": true, "mergeCommit": {"oid": "5c55ba23ca9f308fb4e9d842c2d14b6d56e08009"}, "closed": true, "closedAt": "2020-05-07T20:38:04Z", "author": {"login": "rorbech"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceauhCgH2gAyNDEzNzY0MzU3Ojc5NWE5ZmM2NGUyMDc5MTNmMTVkOTViNDA0NzljZTBlNzkzYjA1YjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfB2YHAH2gAyNDEzNzY0MzU3OjY1MmEwN2U4ODI5ZmUzZTc3ZGU3ZDhjNGY5MDcwY2E4YTkxZDM2NGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "795a9fc64e207913f15d95b40479ce0e793b05b3", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/795a9fc64e207913f15d95b40479ce0e793b05b3", "committedDate": "2020-05-05T21:12:09Z", "message": "Add ability to use CodecRegistry for passing values as BSON to JNI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ea5fad0881c31175cffe8b3f6bce804a1d759bf", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/4ea5fad0881c31175cffe8b3f6bce804a1d759bf", "committedDate": "2020-05-06T06:38:31Z", "message": "Remove unnecessary import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11a7d7d77b3102996483f5db7576209677ee91c0", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/11a7d7d77b3102996483f5db7576209677ee91c0", "committedDate": "2020-05-06T11:29:14Z", "message": "Add default codec registry to RealmAppConfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36814522fcf6a6a314dfcb05ab285c1bd6d09ce1", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/36814522fcf6a6a314dfcb05ab285c1bd6d09ce1", "committedDate": "2020-05-06T11:32:55Z", "message": "Expose encoder/decoder variant for JniBsonProtocol methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5", "committedDate": "2020-05-06T13:26:27Z", "message": "Rename RealmFunctionsTest->RealmFunctionsTests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjIwNjQ1", "url": "https://github.com/realm/realm-java/pull/6837#pullrequestreview-406620645", "createdAt": "2020-05-06T13:38:23Z", "commit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozODoyM1rOGRTZ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozODoyM1rOGRTZ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5Njg5MQ==", "bodyText": "Rather than deleting these when the functions are ready, I would actually put them in their own JniBsonProtocolTest file. I think these two functions are super useful in and of themselves to make sure we never brake the conversion. Maybe write a jniRoundTrip test for them.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420796891", "createdAt": "2020-05-06T13:38:23Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -15,16 +15,30 @@\n  */\n package io.realm;\n \n-import org.bson.BsonValue;\n+import org.bson.codecs.configuration.CodecRegistry;\n \n import io.realm.internal.jni.JniBsonProtocol;\n \n-public class RealmFunctions {\n+// FIXME This class is only a placeholder for JNI round trip as  until actual RealmFunctions\n+//  implementation supersedes it.\n+class RealmFunctions {\n+\n+    private CodecRegistry codecRegistry;\n+\n+    RealmFunctions(CodecRegistry codecRegistry) {\n+        this.codecRegistry = codecRegistry;\n+    }\n+\n+    // FIXME Prelimiry implementation to be able to test passing BsonValues through JNI\n+    <T> T invoke(Object arg, Class<T> resultClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjI0MjMw", "url": "https://github.com/realm/realm-java/pull/6837#pullrequestreview-406624230", "createdAt": "2020-05-06T13:42:09Z", "commit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "state": "APPROVED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo0MjowOVrOGRTlMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1NDo1NVrOGRUM-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5OTc5NQ==", "bodyText": "The functions should be created independently but come from them the user user.getFunctions() which I guess becomes user.functions in Kotlin. We should make the RealmFunctions constructor package-private if possible.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420799795", "createdAt": "2020-05-06T13:42:09Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwMTExNg==", "bodyText": "The functions need to be tied to a user. This isn't happening in ObjectStore right now, so we need to fix it there as well and pass in the user as a constructor argument from Java", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420801116", "createdAt": "2020-05-06T13:43:54Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5OTc5NQ=="}, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwMjYxNA==", "bodyText": "Seems to have been fixed in OS", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420802614", "createdAt": "2020-05-06T13:45:45Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    // Test of BSON JNI round trip until superseded with actual public api tests are added.\n+    @Test\n+    fun jniRoundTripForDefaultCodecRegistry() {\n+        val i32 = 42\n+        val i64 = 42L\n+\n+        for (type in BsonType.values()) {\n+            when (type) {\n+                BsonType.DOUBLE -> {\n+                    assertTypedEcho(java.lang.Float(1.4), java.lang.Float::class.java)\n+                    assertTypedEcho(java.lang.Double(1.4), java.lang.Double::class.java)\n+                    assertTypedEcho(BsonDouble(1.4), BsonDouble::class.java)\n+                }\n+                BsonType.STRING -> {\n+                    assertTypedEcho(\"Realm\", String::class.java)\n+                    assertTypedEcho(BsonString(\"Realm\"), BsonString::class.java)\n+                }\n+                BsonType.ARRAY -> {\n+                    // FIXME Fails in C++ parsing when boolean values are added...needs investigation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwMzYzNg==", "bodyText": "minor: Not sure I understand the Echo suffix. Am I missing some commonly known convention here?", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420803636", "createdAt": "2020-05-06T13:47:01Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    // Test of BSON JNI round trip until superseded with actual public api tests are added.\n+    @Test\n+    fun jniRoundTripForDefaultCodecRegistry() {\n+        val i32 = 42\n+        val i64 = 42L\n+\n+        for (type in BsonType.values()) {\n+            when (type) {\n+                BsonType.DOUBLE -> {\n+                    assertTypedEcho(java.lang.Float(1.4), java.lang.Float::class.java)\n+                    assertTypedEcho(java.lang.Double(1.4), java.lang.Double::class.java)\n+                    assertTypedEcho(BsonDouble(1.4), BsonDouble::class.java)\n+                }\n+                BsonType.STRING -> {\n+                    assertTypedEcho(\"Realm\", String::class.java)\n+                    assertTypedEcho(BsonString(\"Realm\"), BsonString::class.java)\n+                }\n+                BsonType.ARRAY -> {\n+                    // FIXME Fails in C++ parsing when boolean values are added...needs investigation\n+                    //  io.realm.exceptions.RealmError: Unrecoverable error. current state '$1' is not of expected state '$2' in /Users/claus.rorbech/proj/realm-java/realm/realm-library/src/main/cpp/io_realm_RealmFunctions.cpp line 32\n+                    //val listValues = listOf<Any>(true, i32, i64)\n+                    val listValues = listOf<Any>(i32, i64)\n+                    assertTypedEcho(listValues, List::class.java)\n+                }\n+                BsonType.BINARY -> {\n+                    val value = byteArrayOf(1, 2, 3)\n+                    val actual = functions.invoke(value, ByteArray::class.java)\n+                    assertEquals(value.toList(), actual.toList())\n+                    // FIXME Does not seem to preserve type\n+                    // assertTypedEcho(BsonBinary(UUID.randomUUID()), BsonBinary::class.java)\n+                    assertTypedEcho(BsonBinary(byteArrayOf(1,2,3)), BsonBinary::class.java)\n+                }\n+                BsonType.OBJECT_ID -> {\n+                    assertTypedEcho(ObjectId(), ObjectId::class.java)\n+                    assertTypedEcho(BsonObjectId(ObjectId()), BsonObjectId::class.java)\n+                }\n+                BsonType.BOOLEAN -> {\n+                    val value: Boolean = true\n+                    val actual: java.lang.Boolean = functions.invoke(value, java.lang.Boolean::class.java)\n+                    assertEquals(value, actual.booleanValue())\n+                    assertTypedEcho(BsonBoolean(true), BsonBoolean::class.java)\n+                }\n+                BsonType.INT32 -> {\n+                    assertTypedEcho(java.lang.Integer(32), Integer::class.java)\n+                    assertTypedEcho(BsonInt32(32), BsonInt32::class.java)\n+                }\n+                BsonType.INT64 -> {\n+                    assertTypedEcho(java.lang.Long(32L), java.lang.Long::class.java)\n+                    assertTypedEcho(BsonInt64(32), BsonInt64::class.java)\n+                }\n+                BsonType.DECIMAL128 -> {\n+                    assertTypedEcho(Decimal128(32L), Decimal128::class.java)\n+                    assertTypedEcho(BsonDecimal128(Decimal128(32L)), BsonDecimal128::class.java)\n+                }\n+                // TODO\n+                BsonType.DOCUMENT,\n+                BsonType.UNDEFINED,\n+                BsonType.DATE_TIME,\n+                BsonType.NULL,\n+                BsonType.REGULAR_EXPRESSION,\n+                BsonType.SYMBOL,\n+                BsonType.DB_POINTER,\n+                BsonType.JAVASCRIPT,\n+                BsonType.JAVASCRIPT_WITH_SCOPE,\n+                BsonType.TIMESTAMP,\n+                BsonType.END_OF_DOCUMENT,\n+                BsonType.MIN_KEY,\n+                BsonType.MAX_KEY -> {\n+                    // No conversion is implemented for these types yet\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun <T: Any> assertTypedEcho(value: T, returnClass: Class<T>) : T {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNDgxMQ==", "bodyText": "What about the primitive types? This is the boxed types if I remember correctly? Same for the other tests", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420804811", "createdAt": "2020-05-06T13:48:31Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    // Test of BSON JNI round trip until superseded with actual public api tests are added.\n+    @Test\n+    fun jniRoundTripForDefaultCodecRegistry() {\n+        val i32 = 42\n+        val i64 = 42L\n+\n+        for (type in BsonType.values()) {\n+            when (type) {\n+                BsonType.DOUBLE -> {\n+                    assertTypedEcho(java.lang.Float(1.4), java.lang.Float::class.java)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNTczOA==", "bodyText": "UUID is a custom type. Maybe because a CodeRegistry is missing?", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420805738", "createdAt": "2020-05-06T13:49:37Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    // Test of BSON JNI round trip until superseded with actual public api tests are added.\n+    @Test\n+    fun jniRoundTripForDefaultCodecRegistry() {\n+        val i32 = 42\n+        val i64 = 42L\n+\n+        for (type in BsonType.values()) {\n+            when (type) {\n+                BsonType.DOUBLE -> {\n+                    assertTypedEcho(java.lang.Float(1.4), java.lang.Float::class.java)\n+                    assertTypedEcho(java.lang.Double(1.4), java.lang.Double::class.java)\n+                    assertTypedEcho(BsonDouble(1.4), BsonDouble::class.java)\n+                }\n+                BsonType.STRING -> {\n+                    assertTypedEcho(\"Realm\", String::class.java)\n+                    assertTypedEcho(BsonString(\"Realm\"), BsonString::class.java)\n+                }\n+                BsonType.ARRAY -> {\n+                    // FIXME Fails in C++ parsing when boolean values are added...needs investigation\n+                    //  io.realm.exceptions.RealmError: Unrecoverable error. current state '$1' is not of expected state '$2' in /Users/claus.rorbech/proj/realm-java/realm/realm-library/src/main/cpp/io_realm_RealmFunctions.cpp line 32\n+                    //val listValues = listOf<Any>(true, i32, i64)\n+                    val listValues = listOf<Any>(i32, i64)\n+                    assertTypedEcho(listValues, List::class.java)\n+                }\n+                BsonType.BINARY -> {\n+                    val value = byteArrayOf(1, 2, 3)\n+                    val actual = functions.invoke(value, ByteArray::class.java)\n+                    assertEquals(value.toList(), actual.toList())\n+                    // FIXME Does not seem to preserve type\n+                    // assertTypedEcho(BsonBinary(UUID.randomUUID()), BsonBinary::class.java)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNjcxNw==", "bodyText": "Should probably be getDefaultCodecRegistry", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420806717", "createdAt": "2020-05-06T13:50:53Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getCodecRegistry() { return codecRegistry; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNzk3NQ==", "bodyText": "It is fine to keep this public as long as there is a Javadoc stating it is still work-in-progress. The v10 branch is considered under development anyway, so merging \"half-finshed\" work should be okay as long as it is marked as such and doesn't break existing functionality.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420807975", "createdAt": "2020-05-06T13:52:29Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -15,16 +15,30 @@\n  */\n package io.realm;\n \n-import org.bson.BsonValue;\n+import org.bson.codecs.configuration.CodecRegistry;\n \n import io.realm.internal.jni.JniBsonProtocol;\n \n-public class RealmFunctions {\n+// FIXME This class is only a placeholder for JNI round trip as  until actual RealmFunctions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwODk4OQ==", "bodyText": "Nitpick: Newlines are missing between these methods", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420808989", "createdAt": "2020-05-06T13:53:45Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/jni/JniBsonProtocol.java", "diffHunk": "@@ -35,14 +44,30 @@\n                 .outputMode(JsonMode.EXTENDED)\n                 .build();\n \n-    public static String encode(BsonValue bsonValue) {\n-        BsonDocument document = new BsonDocument(VALUE, bsonValue);\n-        return document.toJson(writerSettings);\n+    public static <T> String encode(T value, CodecRegistry registry) {\n+        return encode(value, (Encoder<T>)registry.get(value.getClass()));\n+    }\n+    public static <T> String encode(T value, Encoder<T> encoder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwOTk3Ng==", "bodyText": "Looking at the RealmFunctions class it was marked as \"in-progress\" I guess this is fine for now.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420809976", "createdAt": "2020-05-06T13:54:55Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5OTc5NQ=="}, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beaece4152fbe640931d747c76d883afa9600d47", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/beaece4152fbe640931d747c76d883afa9600d47", "committedDate": "2020-05-06T19:49:11Z", "message": "Code review updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae8321494eb2da51ef64be6063ca8a1397347c8b", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/ae8321494eb2da51ef64be6063ca8a1397347c8b", "committedDate": "2020-05-06T20:00:20Z", "message": "Code review updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MzYwMjkx", "url": "https://github.com/realm/realm-java/pull/6837#pullrequestreview-407360291", "createdAt": "2020-05-07T10:53:24Z", "commit": {"oid": "ae8321494eb2da51ef64be6063ca8a1397347c8b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo1MzoyNFrOGR5J4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo1MzoyNFrOGR5J4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg==", "bodyText": "Just stumbled upon the BsonUtils.java class in the Stitch SDK. The use this:\n  public static final CodecRegistry DEFAULT_CODEC_REGISTRY =\n      fromProviders(\n          asList(\n              new ValueCodecProvider(),\n              new BsonValueCodecProvider(),\n              new DocumentCodecProvider(),\n              new IterableCodecProvider(),\n              new MapCodecProvider()));", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421415392", "createdAt": "2020-05-07T10:53:24Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getDefaultCodecRegistry() { return codecRegistry; }\n+\n     /**\n      * FIXME\n      */\n     public static class Builder {\n+        // Default BSON codec for passing BSON to/from JNI\n+        static CodecRegistry DEFAULT_BSON_CODEC_REGISTRY = CodecRegistries.fromRegistries(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8321494eb2da51ef64be6063ca8a1397347c8b"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30c04947379a223a7c7e6cfcdd791ad267e7a627", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/30c04947379a223a7c7e6cfcdd791ad267e7a627", "committedDate": "2020-05-07T15:36:32Z", "message": "Bump to latest OS v10"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09a649115597ed0ecc188e66e9d33acd7e0f8cea", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/09a649115597ed0ecc188e66e9d33acd7e0f8cea", "committedDate": "2020-05-07T15:36:32Z", "message": "Encapsulated jni bson protocol JNI implementation in its own class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b7c93033f75954a33247fe6921a3bd50b1c6ae", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/d7b7c93033f75954a33247fe6921a3bd50b1c6ae", "committedDate": "2020-05-07T15:36:32Z", "message": "Minor test case updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3730330aac8e13c84ef21d16d5c3dcfdb5f8dd79", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/3730330aac8e13c84ef21d16d5c3dcfdb5f8dd79", "committedDate": "2020-05-07T15:36:32Z", "message": "Removed BsonConverter and companioning tests already covered by RealmFunctionsTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4f0a381e0edefe3233b6bb027fb1f88fc775c52", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/d4f0a381e0edefe3233b6bb027fb1f88fc775c52", "committedDate": "2020-05-07T15:36:32Z", "message": "Using BSON serialization for passing BSON arguments to JNI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2720f070030dd786a150412209f8c7566a12ece2", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/2720f070030dd786a150412209f8c7566a12ece2", "committedDate": "2020-05-07T15:53:09Z", "message": "Adding OS fix for bson argument handling in call_reset_password_function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjUyMDUz", "url": "https://github.com/realm/realm-java/pull/6837#pullrequestreview-407652053", "createdAt": "2020-05-07T16:44:16Z", "commit": {"oid": "2720f070030dd786a150412209f8c7566a12ece2"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo0NDoxNlrOGSHMtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo0NTo0NVrOGSHQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0NTQ5NA==", "bodyText": "@rorbech Any thoughts on the above \u261d\ufe0f ? I would assume we would go with the broadest possible set of defaults, so whatever type people bring there is a fair good chance it will work?", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421645494", "createdAt": "2020-05-07T16:44:16Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getDefaultCodecRegistry() { return codecRegistry; }\n+\n     /**\n      * FIXME\n      */\n     public static class Builder {\n+        // Default BSON codec for passing BSON to/from JNI\n+        static CodecRegistry DEFAULT_BSON_CODEC_REGISTRY = CodecRegistries.fromRegistries(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg=="}, "originalCommit": {"oid": "ae8321494eb2da51ef64be6063ca8a1397347c8b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0NjM3OA==", "bodyText": "We don't have a similar name. I find this name really exotic and not very readable (as a non-native english speaker), but given that I don't really have a good alternative we might as well adopt this I guess. It does has the benefit that it will be familiar to anyone coming to it from the Mongo side.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421646378", "createdAt": "2020-05-07T16:45:45Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -388,6 +413,14 @@ public Builder syncRootDirectory(File rootDir) {\n             return this;\n         }\n \n+        // FIXME Naming: Does it clash with Realm sync concepts and set up wrong expectations?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2720f070030dd786a150412209f8c7566a12ece2"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "652a07e8829fe3e77de7d8c4f9070ca8a91d364d", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/652a07e8829fe3e77de7d8c4f9070ca8a91d364d", "committedDate": "2020-05-07T18:47:02Z", "message": "Settle codec registry naming"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2520, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}