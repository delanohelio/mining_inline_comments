{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNzI0Njg4", "number": 7016, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyMDo1OVrOEWrksw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzo0MDowMFrOEWr5JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjE4MDM1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyMDo1OVrOG-DuTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyMDo1OVrOG-DuTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyNTkwMA==", "bodyText": "Funny mix of local variables (above managedChild, etc.) and also. Maybe stick to one pattern.\nI find it a bit annoying that you have to scan for the assert out of the top level hierarchy. If you want to skip the local variable a proposal could maybe be to embed the query directly in the assert instead of embedding the assert in the also-clause?", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467725900", "createdAt": "2020-08-10T07:20:59Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjE4Njg1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyMzoyOFrOG-DyJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyMzoyOFrOG-DyJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyNjg4Nw==", "bodyText": "Why the plus and not just pass them as parameters to listOf?", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467726887", "createdAt": "2020-08-10T07:23:28Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjIwMTMzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyODoyN1rOG-D6Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyODoyN1rOG-D6Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyODk5MQ==", "bodyText": "Again, a bit funny organization. Would be nice with a cleaner separation of the query under test and the assertions, but can't immediately find a good suggestion.", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467728991", "createdAt": "2020-08-10T07:28:27Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            realm.where<EmbeddedSimpleParent>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjIxMjIxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzozMjozOFrOG-EAtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzozMjozOFrOG-EAtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMDYxMw==", "bodyText": "Not really gaining anything using also instead of just having realm.insert(list) on a separate line, which IMO would make it way easier to reason about the overall idea.", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467730613", "createdAt": "2020-08-10T07:32:38Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            realm.where<EmbeddedSimpleParent>()\n+                    .findAll()\n+                    .sort(\"_id\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0]._id, it[0]!!._id)\n+                        assertEquals(list[1]._id, it[1]!!._id)\n+                        assertEquals(list[2]._id, it[2]!!._id)\n+                        assertEquals(list[0].child!!.childId, it[0]!!.child!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.child!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.child!!.childId)\n+                    }\n+\n+            realm.where<EmbeddedSimpleChild>()\n+                    .findAll()\n+                    .sort(\"childId\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0].child!!.childId, it[0]!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.childId)\n+                        assertEquals(list[0]._id, it[0]!!.parent._id)\n+                        assertEquals(list[1]._id, it[1]!!.parent._id)\n+                        assertEquals(list[2]._id, it[2]!!.parent._id)\n+                    }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_duplicatePrimaryKeyThrows() {\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjIxOTAwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzozNTowN1rOG-EEsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOToyNzoyMVrOHADjng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMTYzMg==", "bodyText": "See combination of other comments. Why not just write\nassertFailsWith<IllegalArgumentException> {\n    realm.insert(listOf(....))\n}", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467731632", "createdAt": "2020-08-10T07:35:07Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            realm.where<EmbeddedSimpleParent>()\n+                    .findAll()\n+                    .sort(\"_id\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0]._id, it[0]!!._id)\n+                        assertEquals(list[1]._id, it[1]!!._id)\n+                        assertEquals(list[2]._id, it[2]!!._id)\n+                        assertEquals(list[0].child!!.childId, it[0]!!.child!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.child!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.child!!.childId)\n+                    }\n+\n+            realm.where<EmbeddedSimpleChild>()\n+                    .findAll()\n+                    .sort(\"childId\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0].child!!.childId, it[0]!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.childId)\n+                        assertEquals(list[0]._id, it[0]!!.parent._id)\n+                        assertEquals(list[1]._id, it[1]!!.parent._id)\n+                        assertEquals(list[2]._id, it[2]!!.parent._id)\n+                    }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_duplicatePrimaryKeyThrows() {\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            assertFailsWith<RealmPrimaryKeyConstraintException> {\n+                realm.insert(list)\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_insertingChildrenDirectlyThrows() {\n+        realm.executeTransaction { realm ->\n+            listOf<EmbeddedSimpleChild>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyMDMxOA==", "bodyText": "Hm. I guess here it actually makes sense, as we only want to expect failures from the insert.", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r469820318", "createdAt": "2020-08-13T09:27:21Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            realm.where<EmbeddedSimpleParent>()\n+                    .findAll()\n+                    .sort(\"_id\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0]._id, it[0]!!._id)\n+                        assertEquals(list[1]._id, it[1]!!._id)\n+                        assertEquals(list[2]._id, it[2]!!._id)\n+                        assertEquals(list[0].child!!.childId, it[0]!!.child!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.child!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.child!!.childId)\n+                    }\n+\n+            realm.where<EmbeddedSimpleChild>()\n+                    .findAll()\n+                    .sort(\"childId\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0].child!!.childId, it[0]!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.childId)\n+                        assertEquals(list[0]._id, it[0]!!.parent._id)\n+                        assertEquals(list[1]._id, it[1]!!.parent._id)\n+                        assertEquals(list[2]._id, it[2]!!.parent._id)\n+                    }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_duplicatePrimaryKeyThrows() {\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            assertFailsWith<RealmPrimaryKeyConstraintException> {\n+                realm.insert(list)\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_insertingChildrenDirectlyThrows() {\n+        realm.executeTransaction { realm ->\n+            listOf<EmbeddedSimpleChild>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMTYzMg=="}, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjIzMjY5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzo0MDowMFrOG-EMrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOTo0MDo1NlrOHAECJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMzY3OQ==", "bodyText": "Sometimes it is a bit dangerous to reference the expected value from a complex expression. Typing it explicitly or referencing a local string variable makes it more clear.", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467733679", "createdAt": "2020-08-10T07:40:00Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            realm.where<EmbeddedSimpleParent>()\n+                    .findAll()\n+                    .sort(\"_id\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0]._id, it[0]!!._id)\n+                        assertEquals(list[1]._id, it[1]!!._id)\n+                        assertEquals(list[2]._id, it[2]!!._id)\n+                        assertEquals(list[0].child!!.childId, it[0]!!.child!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.child!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.child!!.childId)\n+                    }\n+\n+            realm.where<EmbeddedSimpleChild>()\n+                    .findAll()\n+                    .sort(\"childId\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0].child!!.childId, it[0]!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.childId)\n+                        assertEquals(list[0]._id, it[0]!!.parent._id)\n+                        assertEquals(list[1]._id, it[1]!!.parent._id)\n+                        assertEquals(list[2]._id, it[2]!!.parent._id)\n+                    }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_duplicatePrimaryKeyThrows() {\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            assertFailsWith<RealmPrimaryKeyConstraintException> {\n+                realm.insert(list)\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_insertingChildrenDirectlyThrows() {\n+        realm.executeTransaction { realm ->\n+            listOf<EmbeddedSimpleChild>()\n+                    .plus(EmbeddedSimpleChild(\"child1\"))\n+                    .plus(EmbeddedSimpleChild(\"child2\"))\n+                    .plus(EmbeddedSimpleChild(\"child3\"))\n+                    .also {\n+                        assertFailsWith<IllegalArgumentException> {\n+                            realm.insert(it)\n+                        }\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+            val managedChildren = realm.where<EmbeddedSimpleChild>().findAll()\n+\n+            val newList = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"newChild1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"newChild2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"newChild3\") })\n+                    .also { realm.insertOrUpdate(it) }\n+\n+            assertNull(realm.where<EmbeddedSimpleChild>().equalTo(\"childId\", list[0].child!!.childId).findFirst())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyODEzMw==", "bodyText": "I give that here it is probably easier to make an error by putting the values manually instead of referencing it.", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r469828133", "createdAt": "2020-08-13T09:40:56Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            realm.where<EmbeddedSimpleParent>()\n+                    .findAll()\n+                    .sort(\"_id\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0]._id, it[0]!!._id)\n+                        assertEquals(list[1]._id, it[1]!!._id)\n+                        assertEquals(list[2]._id, it[2]!!._id)\n+                        assertEquals(list[0].child!!.childId, it[0]!!.child!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.child!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.child!!.childId)\n+                    }\n+\n+            realm.where<EmbeddedSimpleChild>()\n+                    .findAll()\n+                    .sort(\"childId\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0].child!!.childId, it[0]!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.childId)\n+                        assertEquals(list[0]._id, it[0]!!.parent._id)\n+                        assertEquals(list[1]._id, it[1]!!.parent._id)\n+                        assertEquals(list[2]._id, it[2]!!.parent._id)\n+                    }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_duplicatePrimaryKeyThrows() {\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            assertFailsWith<RealmPrimaryKeyConstraintException> {\n+                realm.insert(list)\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_insertingChildrenDirectlyThrows() {\n+        realm.executeTransaction { realm ->\n+            listOf<EmbeddedSimpleChild>()\n+                    .plus(EmbeddedSimpleChild(\"child1\"))\n+                    .plus(EmbeddedSimpleChild(\"child2\"))\n+                    .plus(EmbeddedSimpleChild(\"child3\"))\n+                    .also {\n+                        assertFailsWith<IllegalArgumentException> {\n+                            realm.insert(it)\n+                        }\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+            val managedChildren = realm.where<EmbeddedSimpleChild>().findAll()\n+\n+            val newList = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"newChild1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"newChild2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"newChild3\") })\n+                    .also { realm.insertOrUpdate(it) }\n+\n+            assertNull(realm.where<EmbeddedSimpleChild>().equalTo(\"childId\", list[0].child!!.childId).findFirst())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMzY3OQ=="}, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 461, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}