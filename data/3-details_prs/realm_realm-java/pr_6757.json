{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzU0MzY3", "number": 6757, "title": "Add support for RealmApp (and MongoDB Realm)", "bodyText": "This PR lays the groundwork for the new RealmApp API interacting with MongoDB Realm.\nThe idea is that local Realms should not be impacted by this change. The way synced Realms are opened should be minimally impacted:\nval app = RealmApp(\"app-id\");\nval credentials = RealmCredentials.emailPassword(\"email\", \"password\");\nval user: RealmUser = app.login(credentials);\n\nval realm = Realm.getInstance(user.getDefaultConfiguration());\nval realm = Realm.getInstance(user.createConfiguration().....build());\n\nBiggest changes\n\nMost of the API's found on SyncUser moves to RealmApp.\nSyncManager is gone. Any relevant functionality has moved to RealmApp.\nRealmCredentials replaces SyncCredentials.\nRealmUser replaces SyncUser and becomes a more shallow class mostly exposing profile info.\nRealmApp is now configured upfront using RealmAppConfiguration instead of using setters that could only be called until the first Realm was opened.\nMost of the network logic for defining requests, parsing results, retrying, are now in Object Store. The Java layer is only responsible for executing the request. This is referred to as the Network Transport.\nThe UserStore interface has been removed. Users are now stored using the RealmApp. An encryption key can be configured in the config object if desired (this has not been implemented yet).\n\nNote for Reviewers\n\nThere are a lot of FIXME's and code that has been disabled in this commit. All of these will be fixed in other PR's. Sorry for the mess :(\nThe only thing considered \"done done\" in this PR is the network transport on both the Java and C++ side + their associated tests.\nOther important bits are the JenkinsFile and integration test setup.\nNaming of public classes are NOT finalized with this PR. This is just the first guess.\nThis PR contains a TODO List with all remaining tasks: #6756\n\nTODO\n\n Finalize naming of public API classes.\n Implement and test Network Transport.\n Implement skeleton login\n Remove the UserStore abstraction. Depend on OS for storing users (punt encryption support to another\n RealmUser (initial support)\n RealmCredentials (limited)\n RealmApp (initial support)\n Disable all current integration tests / unit tests of replaced classes\n Make it posssible and easy to run integration tests on both CI and locally.", "createdAt": "2020-02-26T15:38:23Z", "url": "https://github.com/realm/realm-java/pull/6757", "merged": true, "mergeCommit": {"oid": "a0b6c25b2c56f7a3697d24878062c306610f0d4f"}, "closed": true, "closedAt": "2020-03-19T16:15:20Z", "author": {"login": "cmelchior"}, "timelineItems": {"totalCount": 65, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIIc6lAH2gAyMzgwMzU0MzY3OjEyOTgzNTVmMjEzZDRkYzNlZmY5ZjAwZDljOWNkZmRhNWI5NGQwZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPL7YrAH2gAyMzgwMzU0MzY3OjM4YTVkYjhiNDQ4MzA2OGI3NWQ2NTEzNDA2MjkxZmQwYjI1NjBlNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1298355f213d4dc3eff9f00d9c9cdfda5b94d0ff", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/1298355f213d4dc3eff9f00d9c9cdfda5b94d0ff", "committedDate": "2020-02-26T15:28:18Z", "message": "Rough POC of RealmApp refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52b5f6e2ba11ea61c50096f77ed754c3efbf7ac8", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/52b5f6e2ba11ea61c50096f77ed754c3efbf7ac8", "committedDate": "2020-03-02T12:02:09Z", "message": "Merge branch 'v10' into cm/realmapp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d7d6e185780414172134ad7eb0070c90cec335b", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/6d7d6e185780414172134ad7eb0070c90cec335b", "committedDate": "2020-03-02T13:01:29Z", "message": "Android android.jar to javah classpath. Disable JavaDoc generation temporarily (a lot of links are broken)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7a075182fb82afb703642d930b2e7d8aa296798", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/f7a075182fb82afb703642d930b2e7d8aa296798", "committedDate": "2020-03-02T14:54:22Z", "message": "Minimal work to get object server unit tests to compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d65cc85a8c23e34c83f48fbdc620ae28ad11e33", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/5d65cc85a8c23e34c83f48fbdc620ae28ad11e33", "committedDate": "2020-03-03T23:47:57Z", "message": "Add basic support for RealmCredentials. Remove App from most class names. Preliminary work on getting a a network request to work."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bba39bc70ec3b340a723b15bfa911cdff844e24", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/9bba39bc70ec3b340a723b15bfa911cdff844e24", "committedDate": "2020-03-04T00:06:09Z", "message": "Remove UserStore interface. It will flow through RealmApp in the future."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2766cc524b284bfbf1af807c8f0ab1f033a1e0d", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/f2766cc524b284bfbf1af807c8f0ab1f033a1e0d", "committedDate": "2020-03-05T10:40:18Z", "message": "Implementing first draft for network transport callbacks between Java and C++. Added first draft for RealmUser functionality."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93aae2d1bd0c1676d6d4d6c0e96eb338e48a64d1", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/93aae2d1bd0c1676d6d4d6c0e96eb338e48a64d1", "committedDate": "2020-03-06T11:07:38Z", "message": "Use AndroidX for test artifacts. Upgrade OKHttp. Add test app used for native debugging. Fix most of the bugs for doing network roundtrips."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "086fbae14e8f24bd61de5dd44191cc4063ff439e", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/086fbae14e8f24bd61de5dd44191cc4063ff439e", "committedDate": "2020-03-08T21:49:07Z", "message": "Merge branch 'v10' into cm/realmapp\n\n# Conflicts:\n#\tCHANGELOG.md\n#\tdependencies.list\n#\trealm/build.gradle\n#\trealm/gradle/wrapper/gradle-wrapper.properties\n#\trealm/kotlin-extensions/build.gradle\n#\trealm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmTests.kt\n#\trealm/kotlin-extensions/src/androidTestObjectServer/kotlin/io/realm/kotlin/KotlinSyncedRealmTests.kt\n#\trealm/realm-library/build.gradle\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/AuthenticateRequestTests.java\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/objectserver/utils/StringOnlyModule.java\n#\trealm/realm-library/src/main/cpp/CMakeLists.txt\n#\trealm/realm-library/src/main/cpp/io_realm_RealmFileUserStore.cpp\n#\trealm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/StringOnlyModule.java\n#\trealm/realm-library/src/syncTestUtils/java/io/realm/objectserver/utils/StringOnlyModule.java\n#\trealm/realm-library/src/testUtils/java/io/realm/rule/RunWithRemoteService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afa4621f78f7ec609ad070e24ec4fbfb34537881", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/afa4621f78f7ec609ad070e24ec4fbfb34537881", "committedDate": "2020-03-09T08:03:50Z", "message": "Make project compile after merge from v10"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a70e679a890f6ce527cef009f73c4445b0fa701f", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/a70e679a890f6ce527cef009f73c4445b0fa701f", "committedDate": "2020-03-09T10:01:39Z", "message": "Enable test scripts to start docker. Make objectServer tests compile and run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "271fc1ddd5f83d2e90a30c9893385cea56db590b", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/271fc1ddd5f83d2e90a30c9893385cea56db590b", "committedDate": "2020-03-09T23:40:54Z", "message": "Add startup scripts for Stitch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "486abf477c6b0d9eaf4886d9086f4588151adc13", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/486abf477c6b0d9eaf4886d9086f4588151adc13", "committedDate": "2020-03-11T06:52:12Z", "message": "Merge branch 'v10' into cm/realmapp\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/io_realm_RealmFileUserStore.cpp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f017f416bf3601ddba308d32c91701eeceef003", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/4f017f416bf3601ddba308d32c91701eeceef003", "committedDate": "2020-03-11T07:50:28Z", "message": "Send response headers. Use correct url. Fix location value for Stitch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57bc1979fdedd33324327d758133941bfd200df1", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/57bc1979fdedd33324327d758133941bfd200df1", "committedDate": "2020-03-11T09:47:36Z", "message": "Add Service error codes. Fix http method support in Java. Enable auth providers on Stitch. Better error message when UNKNOWN."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7cddb82cd68be6225ba81c1c36e7e57aeaa7a54", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/b7cddb82cd68be6225ba81c1c36e7e57aeaa7a54", "committedDate": "2020-03-11T23:52:36Z", "message": "Fix replacing the transport. Fix propagating all errors correctly through the transport"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "064550c6462bb0bfe0abc290bfd483bef73b5ed9", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/064550c6462bb0bfe0abc290bfd483bef73b5ed9", "committedDate": "2020-03-12T13:16:14Z", "message": "Add a new command web server for okhttp tests. Add tests for the OkHttp implementation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a59b71cfd52e41be3af27110161d9dd5cffd3cf", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/3a59b71cfd52e41be3af27110161d9dd5cffd3cf", "committedDate": "2020-03-12T16:38:11Z", "message": "Expose applicationId to integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8418e83a8249fe7c4f75a15fc2c2802840dec950", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/8418e83a8249fe7c4f75a15fc2c2802840dec950", "committedDate": "2020-03-12T17:08:49Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "596388f8070bf1bdd3cabf706a0628f11fceef59", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/596388f8070bf1bdd3cabf706a0628f11fceef59", "committedDate": "2020-03-12T17:26:20Z", "message": "Fix Findbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "982ad7f279a73e59a448bec120499dd52df5696d", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/982ad7f279a73e59a448bec120499dd52df5696d", "committedDate": "2020-03-12T18:15:22Z", "message": "Attempt to enable CI testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac903ab07486a88f8e7bbfc2efac2d3cada19a8c", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/ac903ab07486a88f8e7bbfc2efac2d3cada19a8c", "committedDate": "2020-03-12T19:10:56Z", "message": "Magic Jenkins incantations that probably blows up CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fa34514d0d3b9d9f5177946a1b728f6fdff4051", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/0fa34514d0d3b9d9f5177946a1b728f6fdff4051", "committedDate": "2020-03-13T11:48:09Z", "message": "Attempt to fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c217fd98af00f1c7c7af98249faed99395be05", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/80c217fd98af00f1c7c7af98249faed99395be05", "committedDate": "2020-03-13T11:51:29Z", "message": "Debug output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20b3bee85a899d9be1170e2f3b849c13d0e21795", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/20b3bee85a899d9be1170e2f3b849c13d0e21795", "committedDate": "2020-03-13T12:22:40Z", "message": "More CI fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90bbb698bd26d1c352c5b6b15b494b5c40a88d35", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/90bbb698bd26d1c352c5b6b15b494b5c40a88d35", "committedDate": "2020-03-13T13:00:40Z", "message": "Use tmp folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f99dbbeb737f684182bd985ddaa48f363494a1a9", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/f99dbbeb737f684182bd985ddaa48f363494a1a9", "committedDate": "2020-03-13T13:10:22Z", "message": "Fix path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a1debde94ed4ed4e7266c03dda47c5dc9eb622c", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/4a1debde94ed4ed4e7266c03dda47c5dc9eb622c", "committedDate": "2020-03-13T13:19:19Z", "message": "Use latest Stitch image."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c9a611437c0af7b31633146e85b5913d6f0ab42", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/4c9a611437c0af7b31633146e85b5913d6f0ab42", "committedDate": "2020-03-13T13:19:55Z", "message": "Use tmp on CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "090f011cb9ed1248b662787959cd151502abb8c4", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/090f011cb9ed1248b662787959cd151502abb8c4", "committedDate": "2020-03-13T13:29:14Z", "message": "Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d95fc361517e612e824107c4a8279cc93013c266", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d95fc361517e612e824107c4a8279cc93013c266", "committedDate": "2020-03-13T13:36:38Z", "message": "Add JQ to Docker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2ecf20f9440f567fc742e76aa4364a7eb8c4f1", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/1e2ecf20f9440f567fc742e76aa4364a7eb8c4f1", "committedDate": "2020-03-13T13:40:31Z", "message": "Attempt to fix not finding executables on CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feaa6dfc8253e3edf5d718fb648be3ced5e0f876", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/feaa6dfc8253e3edf5d718fb648be3ced5e0f876", "committedDate": "2020-03-13T13:56:34Z", "message": "lower case export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d44e6f0b6356a2af243b906b7f125ef0addcc01a", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d44e6f0b6356a2af243b906b7f125ef0addcc01a", "committedDate": "2020-03-13T14:09:06Z", "message": "Debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c4f1db462f285008d7443ef8bb1a7d9faffb86", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/16c4f1db462f285008d7443ef8bb1a7d9faffb86", "committedDate": "2020-03-13T14:16:12Z", "message": "Started the wrong image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "360b2f44f75878a6eb4f99e5e4e7eb4c20558be1", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/360b2f44f75878a6eb4f99e5e4e7eb4c20558be1", "committedDate": "2020-03-13T14:23:21Z", "message": "Reenable real build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac2e4b8edee243fe272cf51d30f96c51766b8573", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/ac2e4b8edee243fe272cf51d30f96c51766b8573", "committedDate": "2020-03-13T14:33:46Z", "message": "Disable PMD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbfcd7c227285f6af7127b024b5bcbd744bae8b3", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/cbfcd7c227285f6af7127b024b5bcbd744bae8b3", "committedDate": "2020-03-13T14:58:12Z", "message": "Expose ports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c7cb8feb83ac4f2d4850fe7bf6e083d99d91893", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/4c7cb8feb83ac4f2d4850fe7bf6e083d99d91893", "committedDate": "2020-03-13T16:15:20Z", "message": "Add better debug info to Response. Pair down JenkinsFile while testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d74a45e26725730e061f0b19db29bd7b2a39b9f4", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d74a45e26725730e061f0b19db29bd7b2a39b9f4", "committedDate": "2020-03-13T16:39:16Z", "message": "Restrict test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f83012adcc5b520977a629c71621b9cb452e33dd", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/f83012adcc5b520977a629c71621b9cb452e33dd", "committedDate": "2020-03-13T18:13:29Z", "message": "Attempt network fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae9ff70d20e54d1fedab87592dacae9148a4d7d4", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/ae9ff70d20e54d1fedab87592dacae9148a4d7d4", "committedDate": "2020-03-13T19:27:47Z", "message": "Attempt to use host network"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7a941920cfd1bb9a727b50f449c0c16d9dc9f07", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/c7a941920cfd1bb9a727b50f449c0c16d9dc9f07", "committedDate": "2020-03-13T21:06:03Z", "message": "Back to fixing CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f8d857f7ac0ee256fd3e6853aa9ba0bf01f9b39", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/2f8d857f7ac0ee256fd3e6853aa9ba0bf01f9b39", "committedDate": "2020-03-13T22:11:25Z", "message": "Yet more network magic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fae1b36b94dfc01d203a8e7701ef768c892a26c", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/0fae1b36b94dfc01d203a8e7701ef768c892a26c", "committedDate": "2020-03-13T22:21:42Z", "message": "Attempt to combine networks both locally and on CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63c82fe03e09abacd5d219187de75b1a8a736345", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/63c82fe03e09abacd5d219187de75b1a8a736345", "committedDate": "2020-03-13T23:10:18Z", "message": "Fix Jenkins (finally I hope)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a22d85706407bbdfac715f8db2bb13a6f1377349", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/a22d85706407bbdfac715f8db2bb13a6f1377349", "committedDate": "2020-03-13T23:21:23Z", "message": "Fix tests. Publish correct ports."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d068549e5add4b47ccabafe907733545e61a3e5f", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d068549e5add4b47ccabafe907733545e61a3e5f", "committedDate": "2020-03-13T23:27:10Z", "message": "Avoid using container names on CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "962e1e3fa84899430ca4966f9390918ba95c03a9", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/962e1e3fa84899430ca4966f9390918ba95c03a9", "committedDate": "2020-03-13T23:33:09Z", "message": "Random network name on CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd806a99ca4f3b8a65461eb26586d2f5190511b3", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/bd806a99ca4f3b8a65461eb26586d2f5190511b3", "committedDate": "2020-03-13T23:36:41Z", "message": "Spelling mistake"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dfeb7ea6257b1a830e814494ad1e0898c4cac7e", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/3dfeb7ea6257b1a830e814494ad1e0898c4cac7e", "committedDate": "2020-03-14T00:08:19Z", "message": "Disable trying to save checkstyle and pmd output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d98304d6f7774cfdac5cd3bd396785473728554f", "committedDate": "2020-03-14T01:15:29Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDA3NjQw", "url": "https://github.com/realm/realm-java/pull/6757#pullrequestreview-375007640", "createdAt": "2020-03-16T08:45:29Z", "commit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDI2NDg2", "url": "https://github.com/realm/realm-java/pull/6757#pullrequestreview-375026486", "createdAt": "2020-03-16T09:14:58Z", "commit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOToxNDo1OVrOF2rLWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOToxNDo1OVrOF2rLWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NDg0MA==", "bodyText": "Don't you wan't to add FIXME whenever you comment something out to be able to remember where to uncomment again?", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r392874840", "createdAt": "2020-03-16T09:14:59Z", "author": {"login": "bmunkholm"}, "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java", "diffHunk": "@@ -69,10 +69,10 @@ public void setUp() {\n \n     @After\n     public void tearDown() {\n-        UserStore userStore = SyncManager.getUserStore();\n-        for (SyncUser syncUser : userStore.allUsers()) {\n-            userStore.remove(syncUser.getIdentity(), syncUser.getAuthenticationUrl().toString());\n-        }\n+//        UserStore userStore = SyncManager.getUserStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDI3MDg0", "url": "https://github.com/realm/realm-java/pull/6757#pullrequestreview-375027084", "createdAt": "2020-03-16T09:15:53Z", "commit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOToxNTo1M1rOF2rNPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOToxNTo1M1rOF2rNPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NTMyNg==", "bodyText": "FIXME?", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r392875326", "createdAt": "2020-03-16T09:15:53Z", "author": {"login": "bmunkholm"}, "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmTests.java", "diffHunk": "@@ -61,9 +61,9 @@ public void tearDown() {\n         if (realm != null && !realm.isClosed()) {\n             realm.close();\n         }\n-        for (SyncUser user : SyncUser.all().values()) {\n-            user.logOut();\n-        }\n+//        for (RealmUser user : RealmApp.allUsers().values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1Mjg4ODk5", "url": "https://github.com/realm/realm-java/pull/6757#pullrequestreview-375288899", "createdAt": "2020-03-16T14:48:22Z", "commit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "state": "COMMENTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo0ODoyM1rOF23w0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozMzoxOFrOF4C4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4MTA0Mw==", "bodyText": "You're already importing rules from androidx", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r393081043", "createdAt": "2020-03-16T14:48:23Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/build.gradle", "diffHunk": "@@ -211,12 +211,14 @@ dependencies {\n     }\n \n     kapt project(':realm-annotations-processor') // See https://github.com/realm/realm-java/issues/5799\n-    objectServerImplementation 'com.squareup.okhttp3:okhttp:3.10.0'\n+    objectServerImplementation 'com.squareup.okhttp3:okhttp:3.12.0' // Going above this requires minSDK 21\n \n     kaptAndroidTest project(':realm-annotations-processor')\n     androidTestImplementation 'io.reactivex.rxjava2:rxjava:2.1.5'\n     androidTestImplementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\n     androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n+    androidTestImplementation 'com.android.support.test:rules:1.0.2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4MTIyMg==", "bodyText": "you're already importing 1.2.0 below", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r393081222", "createdAt": "2020-03-16T14:48:39Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/build.gradle", "diffHunk": "@@ -211,12 +211,14 @@ dependencies {\n     }\n \n     kapt project(':realm-annotations-processor') // See https://github.com/realm/realm-java/issues/5799\n-    objectServerImplementation 'com.squareup.okhttp3:okhttp:3.10.0'\n+    objectServerImplementation 'com.squareup.okhttp3:okhttp:3.12.0' // Going above this requires minSDK 21\n \n     kaptAndroidTest project(':realm-annotations-processor')\n     androidTestImplementation 'io.reactivex.rxjava2:rxjava:2.1.5'\n     androidTestImplementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\n     androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n+    androidTestImplementation 'com.android.support.test:rules:1.0.2'\n+    androidTestImplementation 'androidx.test:rules:1.1.1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE3Mzg4Nw==", "bodyText": "chmod a+x ./tools/sync_test_server/setup_mongodb_realm.sh\n\nto make it executable", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r393173887", "createdAt": "2020-03-16T16:59:29Z", "author": {"login": "nhachicha"}, "path": "tools/sync_test_server/setup_mongodb_realm.sh", "diffHunk": "@@ -0,0 +1,80 @@\n+#!/bin/sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0MTMyOQ==", "bodyText": "why not use an enum? you already have an HTTPMethod enum class\nI guess you're receiving from JNI the Http Method as a string ...", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r393241329", "createdAt": "2020-03-16T18:48:57Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/TestRealmApp.kt", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.internal.network.OkHttpNetworkTransport\n+import io.realm.internal.objectstore.OsJavaNetworkTransport\n+import io.realm.log.LogLevel\n+import java.lang.IllegalStateException\n+\n+/**\n+ * This class wraps various methods making it easier to create an RealmApp that can be used\n+ * for testing.\n+ *\n+ * NOTE: This class must remain in the [io.realm] package in order to work.\n+ */\n+class TestRealmApp private constructor() {\n+    companion object {\n+        private val applicationId = fetchApplicationId()\n+        val config = RealmAppConfiguration.Builder(applicationId)\n+                .logLevel(LogLevel.DEBUG)\n+                .baseUrl(\"http://127.0.0.1:9090\")\n+                .appName(\"MongoDB Realm Integration Tests\")\n+                .appVersion(\"1.0.\")\n+                .build()\n+\n+        private fun init() {\n+            Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        }\n+\n+        private fun fetchApplicationId(): String {\n+            init()\n+            val transport = OkHttpNetworkTransport()\n+            val response = transport.sendRequest(\n+                    \"get\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0MzczMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This class uses a a simple custom webserver written in Node that must be running when\n          \n          \n            \n             * This class uses a simple custom webserver written in Node that must be running when", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r393243730", "createdAt": "2020-03-16T18:53:10Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/transport/OkHttpNetworkTransportTests.kt", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.transport\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.internal.network.OkHttpNetworkTransport\n+import io.realm.internal.objectstore.OsJavaNetworkTransport\n+import junit.framework.Assert.assertEquals\n+import org.junit.Assert.assertTrue\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+/**\n+ * This class is responsible for testing the OkHttp implementation of the network layer.\n+ * Any behavior happening after the network request has executed are not covered by this class,\n+ * but instead in [OsJavaNetworkTransportTests].\n+ *\n+ * This class uses a a simple custom webserver written in Node that must be running when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5Njg3Nw==", "bodyText": "Why defining this endpoints, this test is only using the OsJavaNetworkTransport for login?", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r393296877", "createdAt": "2020-03-16T20:40:13Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/transport/OsJavaNetworkTransportTests.kt", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.transport\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import io.realm.*\n+import io.realm.internal.objectstore.OsJavaNetworkTransport\n+import org.junit.Assert.*\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+/**\n+ * This class is responsible for testing the general network transport layer, i.e. that\n+ * requests can round trip correctly through all layers and that exceptions/errors are reported\n+ * correctly.\n+ *\n+ * This class should _NOT_ test any real network logic. See [OkHttpNetworkTransportTests] for\n+ * tests using the actual network implementation.\n+ */\n+@RunWith(AndroidJUnit4::class)\n+class OsJavaNetworkTransportTests {\n+\n+    private lateinit var app: RealmApp\n+    private val successHeaders: Map<String, String> = mapOf(Pair(\"Content-Type\", \"application/json\"))\n+\n+    // Test that the round trip works in case of a successful HTTP request.\n+    @Test\n+    fun requestSuccess() {\n+        app = TestRealmApp.getInstance(object: OsJavaNetworkTransport() {\n+            override fun sendRequest(method: String, url: String, timeoutMs: Long, headers: MutableMap<String, String>, body: String): Response {\n+                var result = \"\"\n+                if (url.endsWith(\"/providers/${RealmCredentials.IdentityProvider.ANONYMOUS.id}/login\")) {\n+                    result = \"\"\"\n+                        {\n+                            \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlNjk2M2RmYWZlYTYzMjU0NTgxYzAyNiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM5NjcyMDgsImlhdCI6MTU4Mzk2NTQwOCwiaXNzIjoiNWU2OTY0ZTBhZmVhNjMyNTQ1ODFjMWEzIiwic3RpdGNoX2RldklkIjoiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIiwic3RpdGNoX2RvbWFpbklkIjoiNWU2OTYzZGVhZmVhNjMyNTQ1ODFjMDI1Iiwic3ViIjoiNWU2OTY0ZTBhZmVhNjMyNTQ1ODFjMWExIiwidHlwIjoiYWNjZXNzIn0.J4mp8LnlsxTQRV_7W2Er4qY0tptR76PJGG1k6HSMmUYqgfpJC2Fnbcf1VCoebzoNolH2-sr8AHDVBBCyjxRjqoY9OudFHmWZKmhDV1ysxPP4XmID0nUuN45qJSO8QEAqoOmP1crXjrUZWedFw8aaCZE-bxYfvcDHyjBcbNKZqzawwUw2PyTOlrNjgs01k2J4o5a5XzYkEsJuzr4_8UqKW6zXvYj24UtqnqoYatW5EzpX63m2qig8AcBwPK4ZHb5wEEUdf4QZxkRY5QmTgRHP8SSqVUB_mkHgKaizC_tSB3E0BekaDfLyWVC1taAstXJNfzgFtLI86AzuXS2dCiCfqQ\",\n+                            \"refresh_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlNjk2M2RmYWZlYTYzMjU0NTgxYzAyNiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODkxNDk0MDgsImlhdCI6MTU4Mzk2NTQwOCwic3RpdGNoX2RhdGEiOm51bGwsInN0aXRjaF9kZXZJZCI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsInN0aXRjaF9kb21haW5JZCI6IjVlNjk2M2RlYWZlYTYzMjU0NTgxYzAyNSIsInN0aXRjaF9pZCI6IjVlNjk2NGUwYWZlYTYzMjU0NTgxYzFhMyIsInN0aXRjaF9pZGVudCI6eyJpZCI6IjVlNjk2NGUwYWZlYTYzMjU0NTgxYzFhMC1oaWF2b3ZkbmJxbGNsYXBwYnl1cmJpaW8iLCJwcm92aWRlcl90eXBlIjoiYW5vbi11c2VyIiwicHJvdmlkZXJfaWQiOiI1ZTY5NjNlMGFmZWE2MzI1NDU4MWMwNGEifSwic3ViIjoiNWU2OTY0ZTBhZmVhNjMyNTQ1ODFjMWExIiwidHlwIjoicmVmcmVzaCJ9.FhLdpmL48Mw0SyUKWuaplz3wfeS8TCO8S7I9pIJenQww9nPqQ7lIvykQxjCCtinGvsZIJKt_7R31xYCq4Jp53Nw81By79IwkXtO7VXHPsXXZG5_2xV-s0u44e85sYD5su_H-xnx03sU2piJbWJLSB8dKu3rMD4mO-S0HNXCCAty-JkYKSaM2-d_nS8MNb6k7Vfm7y69iz_uwHc-bb_1rPg7r827K6DEeEMF41Hy3Nx1kCdAUOM9-6nYv3pZSU1PFrGYi2uyTXPJ7R7HigY5IGHWd0hwONb_NUr4An2omqfvlkLEd77ut4V9m6mExFkoKzRz7shzn-IGkh3e4h7ECGA\",\n+                            \"user_id\": \"5e6964e0afea63254581c1a1\",\n+                            \"device_id\": \"000000000000000000000000\"\n+                        }                    \n+                    \"\"\".trimIndent()\n+                } else if (url.endsWith(\"/auth/profile\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNTEwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int j = 0;\n          \n          \n            \n                if (arr == NULL) {\n          \n          \n            \n                        ThrowException(env, OutOfMemory, \"Could not allocate memory to return identites\");\n          \n          \n            \n                        return NULL;\n          \n          \n            \n                    }\n          \n          \n            \n                    int j = 0;", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r393315107", "createdAt": "2020-03-16T21:16:24Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsSyncUser.cpp", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"io_realm_internal_objectstore_OsSyncUser.h\"\n+\n+#include \"util.hpp\"\n+#include \"jni_util/java_class.hpp\"\n+\n+#include <sync/sync_user.hpp>\n+\n+using namespace realm;\n+using namespace realm::jni_util;\n+\n+static void finalize_user(jlong ptr)\n+{\n+    delete reinterpret_cast<std::shared_ptr<SyncUser>*>(ptr);\n+}\n+\n+JNIEXPORT jlong JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetFinalizerMethodPtr(JNIEnv*, jclass)\n+{\n+    return reinterpret_cast<jlong>(&finalize_user);\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetName(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().name);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetEmail(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().email);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetPictureUrl(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().picture_url);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetFirstName(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().first_name);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetLastName(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().last_name);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetGender(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().gender);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetBirthDay(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().birthday);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetMinAge(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().min_age);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetMaxAge(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().max_age);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetAccessToken(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        std::string token = user->access_token();\n+        return to_jstring(env, token);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetRefreshToken(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        std::string token = user->refresh_token();\n+        return to_jstring(env, token);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jobjectArray JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetIdentities(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        std::vector<SyncUserIdentity> ids = user->identities();\n+        static JavaClass stringClass(env, \"java/lang/String\");\n+        jobjectArray arr = env->NewObjectArray(ids.size()*2, stringClass, NULL);\n+        int j = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNjQ0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    jobjectArray arr = env->NewObjectArray(ids.size()*2, stringClass, NULL);\n          \n          \n            \n                    jobjectArray arr = env->NewObjectArray(ids.size()*2, JavaClassGlobalDef::java_lang_string(), 0);", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r393316449", "createdAt": "2020-03-16T21:19:34Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsSyncUser.cpp", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"io_realm_internal_objectstore_OsSyncUser.h\"\n+\n+#include \"util.hpp\"\n+#include \"jni_util/java_class.hpp\"\n+\n+#include <sync/sync_user.hpp>\n+\n+using namespace realm;\n+using namespace realm::jni_util;\n+\n+static void finalize_user(jlong ptr)\n+{\n+    delete reinterpret_cast<std::shared_ptr<SyncUser>*>(ptr);\n+}\n+\n+JNIEXPORT jlong JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetFinalizerMethodPtr(JNIEnv*, jclass)\n+{\n+    return reinterpret_cast<jlong>(&finalize_user);\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetName(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().name);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetEmail(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().email);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetPictureUrl(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().picture_url);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetFirstName(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().first_name);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetLastName(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().last_name);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetGender(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().gender);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetBirthDay(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().birthday);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetMinAge(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().min_age);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetMaxAge(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().max_age);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetAccessToken(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        std::string token = user->access_token();\n+        return to_jstring(env, token);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetRefreshToken(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        std::string token = user->refresh_token();\n+        return to_jstring(env, token);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jobjectArray JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetIdentities(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        std::vector<SyncUserIdentity> ids = user->identities();\n+        static JavaClass stringClass(env, \"java/lang/String\");\n+        jobjectArray arr = env->NewObjectArray(ids.size()*2, stringClass, NULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNjY1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    static JavaClass stringClass(env, \"java/lang/String\");", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r393316659", "createdAt": "2020-03-16T21:20:04Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsSyncUser.cpp", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"io_realm_internal_objectstore_OsSyncUser.h\"\n+\n+#include \"util.hpp\"\n+#include \"jni_util/java_class.hpp\"\n+\n+#include <sync/sync_user.hpp>\n+\n+using namespace realm;\n+using namespace realm::jni_util;\n+\n+static void finalize_user(jlong ptr)\n+{\n+    delete reinterpret_cast<std::shared_ptr<SyncUser>*>(ptr);\n+}\n+\n+JNIEXPORT jlong JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetFinalizerMethodPtr(JNIEnv*, jclass)\n+{\n+    return reinterpret_cast<jlong>(&finalize_user);\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetName(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().name);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetEmail(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().email);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetPictureUrl(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().picture_url);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetFirstName(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().first_name);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetLastName(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().last_name);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetGender(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().gender);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetBirthDay(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().birthday);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetMinAge(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().min_age);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetMaxAge(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        return to_jstring(env, user->user_profile().max_age);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetAccessToken(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        std::string token = user->access_token();\n+        return to_jstring(env, token);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetRefreshToken(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        std::string token = user->refresh_token();\n+        return to_jstring(env, token);\n+    }\n+    CATCH_STD();\n+    return nullptr;\n+}\n+\n+JNIEXPORT jobjectArray JNICALL Java_io_realm_internal_objectstore_OsSyncUser_nativeGetIdentities(JNIEnv* env, jclass, jlong j_native_ptr)\n+{\n+    try {\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_native_ptr);\n+        std::vector<SyncUserIdentity> ids = user->identities();\n+        static JavaClass stringClass(env, \"java/lang/String\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3MTIwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Default session error handler handler that just output errors to LogCat\n          \n          \n            \n                // Default session error handler that just output errors to LogCat", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394271209", "createdAt": "2020-03-18T11:15:56Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3MjM4Mw==", "bodyText": "Is the automatic client reset still using this error code?", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394272383", "createdAt": "2020-03-18T11:18:10Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3Mzk3Mg==", "bodyText": "Why not using RealmThreadPoolExecutor.newDefaultExecutor() which builds a pool based on the available Core", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394273972", "createdAt": "2020-03-18T11:21:19Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3NzQ0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public RealmApp(String appId) {\n          \n          \n            \n                public RealmApp(@Nonnull String appId) {", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394277447", "createdAt": "2020-03-18T11:28:01Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(\n+            10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(100));\n+\n+    private final RealmAppConfiguration config;\n+    private OsJavaNetworkTransport networkTransport;\n+    private final long nativePtr;\n+    private CopyOnWriteArrayList<AuthenticationListener> authListeners = new CopyOnWriteArrayList<>();\n+\n+    public RealmApp(String appId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3ODUwNA==", "bodyText": "same for the public-facing API to interop more friendly with Kotlin...", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394278504", "createdAt": "2020-03-18T11:30:03Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(\n+            10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(100));\n+\n+    private final RealmAppConfiguration config;\n+    private OsJavaNetworkTransport networkTransport;\n+    private final long nativePtr;\n+    private CopyOnWriteArrayList<AuthenticationListener> authListeners = new CopyOnWriteArrayList<>();\n+\n+    public RealmApp(String appId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3NzQ0Nw=="}, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3OTk4OA==", "bodyText": "access token or refresh token? access token expires more frequently, that it doesn't mean the user has logged out?", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394279988", "createdAt": "2020-03-18T11:33:00Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(\n+            10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(100));\n+\n+    private final RealmAppConfiguration config;\n+    private OsJavaNetworkTransport networkTransport;\n+    private final long nativePtr;\n+    private CopyOnWriteArrayList<AuthenticationListener> authListeners = new CopyOnWriteArrayList<>();\n+\n+    public RealmApp(String appId) {\n+        this(new RealmAppConfiguration.Builder(appId).build());\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param config\n+     */\n+    public RealmApp(RealmAppConfiguration config) {\n+        this.config = config;\n+        this.networkTransport = new OkHttpNetworkTransport();\n+        this.nativePtr = nativeCreate(\n+                config.getAppId(),\n+                config.getBaseUrl(),\n+                config.getAppName(),\n+                config.getAppVersion(),\n+                config.getRequestTimeoutMs());\n+    }\n+\n+    /**\n+     * Returns the current user that is logged in and still valid.\n+     * A user is invalidated when he/she logs out or the user's access token expires.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4MjQ1OA==", "bodyText": "This makes it less predictable from which user/sync you're working with since a user  A could be revoked/refresh_token expired, then this will default to another user B which defies the principle of least astonishment... I still think currentUser should be limited to one.", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394282458", "createdAt": "2020-03-18T11:37:46Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(\n+            10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(100));\n+\n+    private final RealmAppConfiguration config;\n+    private OsJavaNetworkTransport networkTransport;\n+    private final long nativePtr;\n+    private CopyOnWriteArrayList<AuthenticationListener> authListeners = new CopyOnWriteArrayList<>();\n+\n+    public RealmApp(String appId) {\n+        this(new RealmAppConfiguration.Builder(appId).build());\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param config\n+     */\n+    public RealmApp(RealmAppConfiguration config) {\n+        this.config = config;\n+        this.networkTransport = new OkHttpNetworkTransport();\n+        this.nativePtr = nativeCreate(\n+                config.getAppId(),\n+                config.getBaseUrl(),\n+                config.getAppName(),\n+                config.getAppVersion(),\n+                config.getRequestTimeoutMs());\n+    }\n+\n+    /**\n+     * Returns the current user that is logged in and still valid.\n+     * A user is invalidated when he/she logs out or the user's access token expires.\n+     * <p>\n+     * If two or more users are logged in, it is the last valid user that is returned by this method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwMTgxNQ==", "bodyText": "Naming: I thought we agreed to use Push Notification directly without prefix", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394301815", "createdAt": "2020-03-18T12:14:53Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(\n+            10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(100));\n+\n+    private final RealmAppConfiguration config;\n+    private OsJavaNetworkTransport networkTransport;\n+    private final long nativePtr;\n+    private CopyOnWriteArrayList<AuthenticationListener> authListeners = new CopyOnWriteArrayList<>();\n+\n+    public RealmApp(String appId) {\n+        this(new RealmAppConfiguration.Builder(appId).build());\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param config\n+     */\n+    public RealmApp(RealmAppConfiguration config) {\n+        this.config = config;\n+        this.networkTransport = new OkHttpNetworkTransport();\n+        this.nativePtr = nativeCreate(\n+                config.getAppId(),\n+                config.getBaseUrl(),\n+                config.getAppName(),\n+                config.getAppVersion(),\n+                config.getRequestTimeoutMs());\n+    }\n+\n+    /**\n+     * Returns the current user that is logged in and still valid.\n+     * A user is invalidated when he/she logs out or the user's access token expires.\n+     * <p>\n+     * If two or more users are logged in, it is the last valid user that is returned by this method.\n+     *\n+     * @return current {@link RealmUser} that has logged in and is still valid. {@code null} if no user is logged in or the user has\n+     * expired.\n+     */\n+    @Nullable\n+    public RealmUser currentUser() {\n+        Long userPtr = nativeCurrentUser(nativePtr);\n+        return (userPtr != null) ? new RealmUser(userPtr) : null;\n+    }\n+\n+    /**\n+     * FIXME\n+     * Returns all currently logged in users\n+     * @return\n+     */\n+    public Map<String, RealmUser> allUsers() {\n+        long[] nativeUsers = nativeAllUsers(nativePtr);\n+        HashMap<String, RealmUser> users = new HashMap<>(nativeUsers.length);\n+        for (int i = 0; i < nativeUsers.length; i++) {\n+            RealmUser user = new RealmUser(nativeUsers[i]);\n+            users.put(user.getId(), user);\n+        }\n+        return users;\n+    }\n+\n+    /**\n+     * TODO: Manually set the user returned by {@link #currentUser()}\n+     *\n+     * @param user\n+     */\n+    public static void setCurrentUser(SyncUser user) {\n+        // FIXME\n+    }\n+\n+    /**\n+     * FIXME\n+     *\n+     * @param credentials\n+     * @return\n+     * @throws ObjectServerError\n+     */\n+    public RealmUser login(RealmCredentials credentials) throws ObjectServerError {\n+        checkNull(credentials, \"credentials\");\n+        AtomicReference<RealmUser> user = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLogin(nativePtr, credentials.osCredentials.getNativePtr(), new OsJavaNetworkTransport.NetworkTransportJNIResultCallback() {\n+            @Override\n+            public void onSuccess(Object result) {\n+                Long nativePtr = (Long) result;\n+                user.set(new RealmUser(nativePtr));\n+            }\n+            @Override\n+            public void onError(String nativeErrorCategory, int nativeErrorCode, String errorMessage) {\n+                ErrorCode code = ErrorCode.fromNativeError(nativeErrorCategory, nativeErrorCode);\n+                if (code == ErrorCode.UNKNOWN) {\n+                    // In case of UNKNOWN errors parse as much error information on as possible.\n+                    String detailedErrorMessage = String.format(\"{%s::%s} %s\", nativeErrorCategory, nativeErrorCode, errorMessage);\n+                    error.set(new ObjectServerError(code, detailedErrorMessage));\n+                } else {\n+                    error.set(new ObjectServerError(code, errorMessage));\n+                }\n+            }\n+        });\n+\n+        // ObjectStore runs all code in the same thread even though it is using a callback.\n+        // So results should be available here.\n+        if (user.get() == null && error.get() == null) {\n+            throw new IllegalStateException(\"Network result callback did not trigger correctly\");\n+        }\n+        if (user.get() != null) {\n+            return user.get();\n+        } else {\n+            throw error.get();\n+        }\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param credentials\n+     * @param callback\n+     * @return\n+     */\n+    public RealmAsyncTask loginAsync(RealmCredentials credentials, Callback<RealmUser> callback) {\n+        checkLooperThread(\"Asynchronous login is only possible from looper threads.\");\n+        return new Request<RealmUser>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return login(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    public static void logout(RealmUser user) {\n+\n+    }\n+    public RealmAsyncTask logoutAsync(RealmUser user, Callback<Void> callback) {\n+        return null;\n+    }\n+\n+    public RealmUser registerWithEmail(String email, String password) {\n+        return null;\n+    }\n+    public RealmAsyncTask registerWithEmailAsync(String email, String password, Callback<RealmUser> callback) {\n+        return null;\n+    }\n+    public RealmUser confirmUser(String token, String tokenId) {\n+        return null;\n+    }\n+    public RealmAsyncTask confirmUserAsync(String token, String tokenId, Callback<Void> callback) {\n+        return null;\n+    }\n+    public void resendConfirmationEmail(String email) {\n+    }\n+    public RealmAsyncTask resendConfirmationEmailAsync(String email, Callback<Void> callback) {\n+        return null;\n+    }\n+    public RealmUser resetPassword(String token, String tokenId, String password) {\n+        return null;\n+    }\n+    public RealmAsyncTask resetPasswordAsync(String token, String tokenId, String password, Callback<Void> callback) {\n+        return null;\n+    }\n+    public RealmUser sendResetPasswordEmail(String email) {\n+        return null;\n+    }\n+    public RealmAsyncTask sendResetPasswordEmailAsync(String email, Callback<Void> callback) {\n+        return null;\n+    }\n+\n+    public SyncSession getSyncSession(SyncConfiguration config) {\n+        return null;\n+    }\n+\n+    public void refreshConnections() {\n+\n+    }\n+\n+    /**\n+     * Sets a global authentication listener that will be notified about User events like\n+     * login and logout.\n+     *\n+     * @param listener listener to register.\n+     * @throws IllegalArgumentException if {@code listener} is {@code null}.\n+     */\n+    public void addAuthenticationListener(AuthenticationListener listener) {\n+        //noinspection ConstantConditions\n+        if (listener == null) {\n+            throw new IllegalArgumentException(\"Non-null 'listener' required.\");\n+        }\n+        authListeners.add(listener);\n+    }\n+\n+\n+    /**\n+     * Removes the provided global authentication listener.\n+     *\n+     * @param listener listener to remove.\n+     */\n+    public void removeAuthenticationListener(AuthenticationListener listener) {\n+        //noinspection ConstantConditions\n+        if (listener == null) {\n+            return;\n+        }\n+        authListeners.remove(listener);\n+    }\n+\n+    // Services entry point\n+    public RealmFunctions getFunctions() {\n+        // FIXME\n+        return null;\n+    }\n+\n+    public RealmFCMPushNotifications getFSMPushNotifications() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwNDI4NA==", "bodyText": "Could not be posted, instead ... and you can fallback to print the error on the stderr", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394304284", "createdAt": "2020-03-18T12:19:46Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(\n+            10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(100));\n+\n+    private final RealmAppConfiguration config;\n+    private OsJavaNetworkTransport networkTransport;\n+    private final long nativePtr;\n+    private CopyOnWriteArrayList<AuthenticationListener> authListeners = new CopyOnWriteArrayList<>();\n+\n+    public RealmApp(String appId) {\n+        this(new RealmAppConfiguration.Builder(appId).build());\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param config\n+     */\n+    public RealmApp(RealmAppConfiguration config) {\n+        this.config = config;\n+        this.networkTransport = new OkHttpNetworkTransport();\n+        this.nativePtr = nativeCreate(\n+                config.getAppId(),\n+                config.getBaseUrl(),\n+                config.getAppName(),\n+                config.getAppVersion(),\n+                config.getRequestTimeoutMs());\n+    }\n+\n+    /**\n+     * Returns the current user that is logged in and still valid.\n+     * A user is invalidated when he/she logs out or the user's access token expires.\n+     * <p>\n+     * If two or more users are logged in, it is the last valid user that is returned by this method.\n+     *\n+     * @return current {@link RealmUser} that has logged in and is still valid. {@code null} if no user is logged in or the user has\n+     * expired.\n+     */\n+    @Nullable\n+    public RealmUser currentUser() {\n+        Long userPtr = nativeCurrentUser(nativePtr);\n+        return (userPtr != null) ? new RealmUser(userPtr) : null;\n+    }\n+\n+    /**\n+     * FIXME\n+     * Returns all currently logged in users\n+     * @return\n+     */\n+    public Map<String, RealmUser> allUsers() {\n+        long[] nativeUsers = nativeAllUsers(nativePtr);\n+        HashMap<String, RealmUser> users = new HashMap<>(nativeUsers.length);\n+        for (int i = 0; i < nativeUsers.length; i++) {\n+            RealmUser user = new RealmUser(nativeUsers[i]);\n+            users.put(user.getId(), user);\n+        }\n+        return users;\n+    }\n+\n+    /**\n+     * TODO: Manually set the user returned by {@link #currentUser()}\n+     *\n+     * @param user\n+     */\n+    public static void setCurrentUser(SyncUser user) {\n+        // FIXME\n+    }\n+\n+    /**\n+     * FIXME\n+     *\n+     * @param credentials\n+     * @return\n+     * @throws ObjectServerError\n+     */\n+    public RealmUser login(RealmCredentials credentials) throws ObjectServerError {\n+        checkNull(credentials, \"credentials\");\n+        AtomicReference<RealmUser> user = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLogin(nativePtr, credentials.osCredentials.getNativePtr(), new OsJavaNetworkTransport.NetworkTransportJNIResultCallback() {\n+            @Override\n+            public void onSuccess(Object result) {\n+                Long nativePtr = (Long) result;\n+                user.set(new RealmUser(nativePtr));\n+            }\n+            @Override\n+            public void onError(String nativeErrorCategory, int nativeErrorCode, String errorMessage) {\n+                ErrorCode code = ErrorCode.fromNativeError(nativeErrorCategory, nativeErrorCode);\n+                if (code == ErrorCode.UNKNOWN) {\n+                    // In case of UNKNOWN errors parse as much error information on as possible.\n+                    String detailedErrorMessage = String.format(\"{%s::%s} %s\", nativeErrorCategory, nativeErrorCode, errorMessage);\n+                    error.set(new ObjectServerError(code, detailedErrorMessage));\n+                } else {\n+                    error.set(new ObjectServerError(code, errorMessage));\n+                }\n+            }\n+        });\n+\n+        // ObjectStore runs all code in the same thread even though it is using a callback.\n+        // So results should be available here.\n+        if (user.get() == null && error.get() == null) {\n+            throw new IllegalStateException(\"Network result callback did not trigger correctly\");\n+        }\n+        if (user.get() != null) {\n+            return user.get();\n+        } else {\n+            throw error.get();\n+        }\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param credentials\n+     * @param callback\n+     * @return\n+     */\n+    public RealmAsyncTask loginAsync(RealmCredentials credentials, Callback<RealmUser> callback) {\n+        checkLooperThread(\"Asynchronous login is only possible from looper threads.\");\n+        return new Request<RealmUser>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return login(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    public static void logout(RealmUser user) {\n+\n+    }\n+    public RealmAsyncTask logoutAsync(RealmUser user, Callback<Void> callback) {\n+        return null;\n+    }\n+\n+    public RealmUser registerWithEmail(String email, String password) {\n+        return null;\n+    }\n+    public RealmAsyncTask registerWithEmailAsync(String email, String password, Callback<RealmUser> callback) {\n+        return null;\n+    }\n+    public RealmUser confirmUser(String token, String tokenId) {\n+        return null;\n+    }\n+    public RealmAsyncTask confirmUserAsync(String token, String tokenId, Callback<Void> callback) {\n+        return null;\n+    }\n+    public void resendConfirmationEmail(String email) {\n+    }\n+    public RealmAsyncTask resendConfirmationEmailAsync(String email, Callback<Void> callback) {\n+        return null;\n+    }\n+    public RealmUser resetPassword(String token, String tokenId, String password) {\n+        return null;\n+    }\n+    public RealmAsyncTask resetPasswordAsync(String token, String tokenId, String password, Callback<Void> callback) {\n+        return null;\n+    }\n+    public RealmUser sendResetPasswordEmail(String email) {\n+        return null;\n+    }\n+    public RealmAsyncTask sendResetPasswordEmailAsync(String email, Callback<Void> callback) {\n+        return null;\n+    }\n+\n+    public SyncSession getSyncSession(SyncConfiguration config) {\n+        return null;\n+    }\n+\n+    public void refreshConnections() {\n+\n+    }\n+\n+    /**\n+     * Sets a global authentication listener that will be notified about User events like\n+     * login and logout.\n+     *\n+     * @param listener listener to register.\n+     * @throws IllegalArgumentException if {@code listener} is {@code null}.\n+     */\n+    public void addAuthenticationListener(AuthenticationListener listener) {\n+        //noinspection ConstantConditions\n+        if (listener == null) {\n+            throw new IllegalArgumentException(\"Non-null 'listener' required.\");\n+        }\n+        authListeners.add(listener);\n+    }\n+\n+\n+    /**\n+     * Removes the provided global authentication listener.\n+     *\n+     * @param listener listener to remove.\n+     */\n+    public void removeAuthenticationListener(AuthenticationListener listener) {\n+        //noinspection ConstantConditions\n+        if (listener == null) {\n+            return;\n+        }\n+        authListeners.remove(listener);\n+    }\n+\n+    // Services entry point\n+    public RealmFunctions getFunctions() {\n+        // FIXME\n+        return null;\n+    }\n+\n+    public RealmFCMPushNotifications getFSMPushNotifications() {\n+        // FIXME\n+        return null;\n+\n+    }\n+\n+    public RealmMongoDBService getMongoDBService() {\n+        // FIXME\n+        return null;\n+    }\n+\n+    // Private API's for now.\n+\n+    /**\n+     * Exposed for testing.\n+     *\n+     * Swap the currently configured network transport with the provided one.\n+     * This should only be done if no network requests are currently running.\n+     */\n+    void setNetworkTransport(OsJavaNetworkTransport transport) {\n+        networkTransport = transport;\n+    }\n+\n+    OsJavaNetworkTransport getNetworkTransport() {\n+        return networkTransport;\n+    }\n+\n+    private static void checkLooperThread(String errorMessage) {\n+        AndroidCapabilities capabilities = new AndroidCapabilities();\n+        capabilities.checkCanDeliverNotification(errorMessage);\n+    }\n+\n+    private void checkNull(@Nullable Object argValue, String argName) {\n+        if (argValue == null) {\n+            throw new IllegalArgumentException(\"Nonnull '\" + argName + \"' required.\");\n+        }\n+    }\n+\n+    // Class wrapping requests made against MongoDB Realm. Is also responsible for calling with success/error on the\n+    // correct thread.\n+    private static abstract class Request<T> {\n+        @Nullable\n+        private final RealmApp.Callback<T> callback;\n+        private final RealmNotifier handler;\n+        private final ThreadPoolExecutor networkPoolExecutor;\n+\n+        Request(ThreadPoolExecutor networkPoolExecutor, @Nullable RealmApp.Callback<T> callback) {\n+            this.callback = callback;\n+            this.handler = new AndroidRealmNotifier(null, new AndroidCapabilities());\n+            this.networkPoolExecutor = networkPoolExecutor;\n+        }\n+\n+        // Implements the request. Return the current sync user if the request succeeded. Otherwise throw an error.\n+        public abstract T run() throws ObjectServerError;\n+\n+        // Start the request\n+        public RealmAsyncTask start() {\n+            Future<?> authenticateRequest = networkPoolExecutor.submit(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        postSuccess(Request.this.run());\n+                    } catch (ObjectServerError e) {\n+                        postError(e);\n+                    } catch (Throwable e) {\n+                        postError(new ObjectServerError(ErrorCode.UNKNOWN, \"Unexpected error\", e));\n+                    }\n+                }\n+            });\n+            return new RealmAsyncTaskImpl(authenticateRequest, networkPoolExecutor);\n+        }\n+\n+        private void postError(final ObjectServerError error) {\n+            boolean errorHandled = false;\n+            if (callback != null) {\n+                Runnable action = new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        callback.onError(error);\n+                    }\n+                };\n+                errorHandled = handler.post(action);\n+            }\n+\n+            if (!errorHandled) {\n+                RealmLog.error(error, \"An error was thrown, but could not be handled.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 371}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwNjk0NA==", "bodyText": "TODO: maybe change to INFO for the release", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394306944", "createdAt": "2020-03-18T12:24:41Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import android.content.Context;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import io.realm.log.LogLevel;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmAppConfiguration {\n+\n+    private final String appId;\n+    private final String appName;\n+    private final String appVersion;\n+    private final String baseUrl;\n+    private final Context context;\n+    private final SyncSession.ErrorHandler defaultErrorHandler;\n+    @Nullable private final byte[] encryptionKey;\n+    private final long logLevel;\n+    private final long requestTimeoutMs;\n+\n+    public RealmAppConfiguration(String appId,\n+                                 String appName,\n+                                 String appVersion,\n+                                 String baseUrl,\n+                                 Context context,\n+                                 SyncSession.ErrorHandler defaultErrorHandler,\n+                                 @Nullable byte[] encryptionKey,\n+                                 long logLevel,\n+                                 long requestTimeoutMs) {\n+\n+        this.appId = appId;\n+        this.appName = appName;\n+        this.appVersion = appVersion;\n+        this.baseUrl = baseUrl;\n+        this.context = context;\n+        this.defaultErrorHandler = defaultErrorHandler;\n+        this.encryptionKey = (encryptionKey == null) ? null : Arrays.copyOf(encryptionKey, encryptionKey.length);\n+        this.logLevel = logLevel;\n+        this.requestTimeoutMs = requestTimeoutMs;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public String getAppId() {\n+        return appId;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public String getAppName() {\n+        return appName;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public String getAppVersion() {\n+        return appVersion;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public String getBaseUrl() {\n+        return baseUrl;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public Context getContext() {\n+        return context;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public SyncSession.ErrorHandler getDefaultErrorHandler() {\n+        return defaultErrorHandler;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public byte[] getEncryptionKey() {\n+        return encryptionKey == null ? null : Arrays.copyOf(encryptionKey, encryptionKey.length);\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public long getLogLevel() {\n+        return logLevel;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public long getRequestTimeoutMs() {\n+        return requestTimeoutMs;\n+    }\n+\n+    /**\n+     * FIXME\n+     */\n+    public static class Builder {\n+        private String appId;\n+        private String appName;\n+        private String appVersion;\n+        private String baseUrl;\n+        private Context context;\n+        private SyncSession.ErrorHandler defaultErrorHandler;\n+        private byte[] encryptionKey;\n+        private long logLevel = LogLevel.WARN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwNzc3Nw==", "bodyText": "ctor can be private", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394307777", "createdAt": "2020-03-18T12:26:07Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import android.content.Context;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import io.realm.log.LogLevel;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmAppConfiguration {\n+\n+    private final String appId;\n+    private final String appName;\n+    private final String appVersion;\n+    private final String baseUrl;\n+    private final Context context;\n+    private final SyncSession.ErrorHandler defaultErrorHandler;\n+    @Nullable private final byte[] encryptionKey;\n+    private final long logLevel;\n+    private final long requestTimeoutMs;\n+\n+    public RealmAppConfiguration(String appId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMTc4OA==", "bodyText": "TODO: doc might not be up-to-date", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394311788", "createdAt": "2020-03-18T12:33:18Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmCredentials.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import io.realm.internal.Util;\n+import io.realm.internal.objectstore.OsAppCredentials;\n+\n+\n+/**\n+ * Credentials represent a login with a 3rd party login provider in an OAuth2 login flow, and are used by the Realm", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "committedDate": "2020-03-19T08:00:43Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18ed057b2ee74985148cfbc25c3fe37f1d611167", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/18ed057b2ee74985148cfbc25c3fe37f1d611167", "committedDate": "2020-03-19T08:06:18Z", "message": "More PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30a92829a32160cc46a954d1286bec790109be46", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/30a92829a32160cc46a954d1286bec790109be46", "committedDate": "2020-03-19T08:12:14Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Nabil Hachicha <nh@realm.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c42f2a3260edb90748202861871d30141d462d7", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/5c42f2a3260edb90748202861871d30141d462d7", "committedDate": "2020-03-19T08:23:50Z", "message": "Added missing FIXMEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "885ea91b56a2c68d70f8a094e0df06e7128704b2", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/885ea91b56a2c68d70f8a094e0df06e7128704b2", "committedDate": "2020-03-19T08:24:26Z", "message": "Merge branch 'cm/realmapp' of https://github.com/realm/realm-java into cm/realmapp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fa271655777d6d7c031ba12282979d32fda4e6e", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/4fa271655777d6d7c031ba12282979d32fda4e6e", "committedDate": "2020-03-19T08:37:45Z", "message": "Add missing include"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5fc3afc395cf3236b46ca1b6003d46347f886ce", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d5fc3afc395cf3236b46ca1b6003d46347f886ce", "committedDate": "2020-03-19T08:58:37Z", "message": "Fix namespace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3Njc1ODQ1", "url": "https://github.com/realm/realm-java/pull/6757#pullrequestreview-377675845", "createdAt": "2020-03-19T12:34:21Z", "commit": {"oid": "d5fc3afc395cf3236b46ca1b6003d46347f886ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a5db8b4483068b75d6513406291fd0b2560e65", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/38a5db8b4483068b75d6513406291fd0b2560e65", "committedDate": "2020-03-19T13:28:46Z", "message": "Merge branch 'v10' into cm/realmapp\n\n# Conflicts:\n#\ttools/sync_test_server/ros/tsconfig.json"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2430, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}