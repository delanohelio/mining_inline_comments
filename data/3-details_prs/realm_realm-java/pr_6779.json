{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNzE3NjIz", "number": 6779, "title": "Add support for RealmApp.logOut + associated helper methods", "bodyText": "The primary purpose of this PR was to add support for RealmApp.logOut(), but it pulled in a few other things in order to enable testing.\nSo this PR adds:\n\"done done\"\n\nSupport for RealmApp.logOut() and RealmApp.logOutAsync(callback)\nSupport for RealmUser.logOut() and RealmUser.logOutAsync(callback)\nSupport for RealmUser.getState()\nSupport for RealmUser.equals()\n\nIn addition\n\n\nThe network transport has been refactored to be more generalized and ease adoption of more functions. In particular, it now supports two types of Callbacks. Those that return a result and those that do not.\n\n\nA new helper class BlockingLooperThread. This is a replacement for the @RunInLooperThread annotation which had a number of problems with lifecycle and combination with other rules. This new class behaves in a similar way as runBlockingTest from Googles Coroutine testing library. All of the logic is a copy/paste from the @RunInLooperThread rule, but has been massively simplified (so only a light review should be needed). I would like to fully deprecate the annotation based rule in favor of this, but we can do that gradually. I expect all new Kotlin-based unit tests will be using this class. It should still be considered somewhat WIP.\n\n\nRefactored how test enabled RealmApp is configured and set up. TestRealmApp is now a subclass of RealmApp with a close() method injected. I'm still not sure which approach is best for setting this up. So further iteration for finding the best pattern is probably needed.", "createdAt": "2020-03-18T23:36:08Z", "url": "https://github.com/realm/realm-java/pull/6779", "merged": true, "mergeCommit": {"oid": "63cf202e753812f8d4bdec658795522b9238fd79"}, "closed": true, "closedAt": "2020-03-20T15:40:03Z", "author": {"login": "cmelchior"}, "timelineItems": {"totalCount": 67, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIIc6lAH2gAyMzkwNzE3NjIzOjEyOTgzNTVmMjEzZDRkYzNlZmY5ZjAwZDljOWNkZmRhNWI5NGQwZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPh3WMAH2gAyMzkwNzE3NjIzOmY5M2Q3NWE4NTkwMzE0NTdiNGM3ZjQ3OTgxMjNjMmNhMmY4YTdlMzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1298355f213d4dc3eff9f00d9c9cdfda5b94d0ff", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/1298355f213d4dc3eff9f00d9c9cdfda5b94d0ff", "committedDate": "2020-02-26T15:28:18Z", "message": "Rough POC of RealmApp refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52b5f6e2ba11ea61c50096f77ed754c3efbf7ac8", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/52b5f6e2ba11ea61c50096f77ed754c3efbf7ac8", "committedDate": "2020-03-02T12:02:09Z", "message": "Merge branch 'v10' into cm/realmapp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d7d6e185780414172134ad7eb0070c90cec335b", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/6d7d6e185780414172134ad7eb0070c90cec335b", "committedDate": "2020-03-02T13:01:29Z", "message": "Android android.jar to javah classpath. Disable JavaDoc generation temporarily (a lot of links are broken)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7a075182fb82afb703642d930b2e7d8aa296798", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/f7a075182fb82afb703642d930b2e7d8aa296798", "committedDate": "2020-03-02T14:54:22Z", "message": "Minimal work to get object server unit tests to compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d65cc85a8c23e34c83f48fbdc620ae28ad11e33", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/5d65cc85a8c23e34c83f48fbdc620ae28ad11e33", "committedDate": "2020-03-03T23:47:57Z", "message": "Add basic support for RealmCredentials. Remove App from most class names. Preliminary work on getting a a network request to work."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bba39bc70ec3b340a723b15bfa911cdff844e24", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/9bba39bc70ec3b340a723b15bfa911cdff844e24", "committedDate": "2020-03-04T00:06:09Z", "message": "Remove UserStore interface. It will flow through RealmApp in the future."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2766cc524b284bfbf1af807c8f0ab1f033a1e0d", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/f2766cc524b284bfbf1af807c8f0ab1f033a1e0d", "committedDate": "2020-03-05T10:40:18Z", "message": "Implementing first draft for network transport callbacks between Java and C++. Added first draft for RealmUser functionality."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93aae2d1bd0c1676d6d4d6c0e96eb338e48a64d1", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/93aae2d1bd0c1676d6d4d6c0e96eb338e48a64d1", "committedDate": "2020-03-06T11:07:38Z", "message": "Use AndroidX for test artifacts. Upgrade OKHttp. Add test app used for native debugging. Fix most of the bugs for doing network roundtrips."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "086fbae14e8f24bd61de5dd44191cc4063ff439e", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/086fbae14e8f24bd61de5dd44191cc4063ff439e", "committedDate": "2020-03-08T21:49:07Z", "message": "Merge branch 'v10' into cm/realmapp\n\n# Conflicts:\n#\tCHANGELOG.md\n#\tdependencies.list\n#\trealm/build.gradle\n#\trealm/gradle/wrapper/gradle-wrapper.properties\n#\trealm/kotlin-extensions/build.gradle\n#\trealm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmTests.kt\n#\trealm/kotlin-extensions/src/androidTestObjectServer/kotlin/io/realm/kotlin/KotlinSyncedRealmTests.kt\n#\trealm/realm-library/build.gradle\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/AuthenticateRequestTests.java\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/objectserver/utils/StringOnlyModule.java\n#\trealm/realm-library/src/main/cpp/CMakeLists.txt\n#\trealm/realm-library/src/main/cpp/io_realm_RealmFileUserStore.cpp\n#\trealm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/StringOnlyModule.java\n#\trealm/realm-library/src/syncTestUtils/java/io/realm/objectserver/utils/StringOnlyModule.java\n#\trealm/realm-library/src/testUtils/java/io/realm/rule/RunWithRemoteService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afa4621f78f7ec609ad070e24ec4fbfb34537881", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/afa4621f78f7ec609ad070e24ec4fbfb34537881", "committedDate": "2020-03-09T08:03:50Z", "message": "Make project compile after merge from v10"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a70e679a890f6ce527cef009f73c4445b0fa701f", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/a70e679a890f6ce527cef009f73c4445b0fa701f", "committedDate": "2020-03-09T10:01:39Z", "message": "Enable test scripts to start docker. Make objectServer tests compile and run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "271fc1ddd5f83d2e90a30c9893385cea56db590b", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/271fc1ddd5f83d2e90a30c9893385cea56db590b", "committedDate": "2020-03-09T23:40:54Z", "message": "Add startup scripts for Stitch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "486abf477c6b0d9eaf4886d9086f4588151adc13", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/486abf477c6b0d9eaf4886d9086f4588151adc13", "committedDate": "2020-03-11T06:52:12Z", "message": "Merge branch 'v10' into cm/realmapp\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/io_realm_RealmFileUserStore.cpp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f017f416bf3601ddba308d32c91701eeceef003", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/4f017f416bf3601ddba308d32c91701eeceef003", "committedDate": "2020-03-11T07:50:28Z", "message": "Send response headers. Use correct url. Fix location value for Stitch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57bc1979fdedd33324327d758133941bfd200df1", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/57bc1979fdedd33324327d758133941bfd200df1", "committedDate": "2020-03-11T09:47:36Z", "message": "Add Service error codes. Fix http method support in Java. Enable auth providers on Stitch. Better error message when UNKNOWN."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7cddb82cd68be6225ba81c1c36e7e57aeaa7a54", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/b7cddb82cd68be6225ba81c1c36e7e57aeaa7a54", "committedDate": "2020-03-11T23:52:36Z", "message": "Fix replacing the transport. Fix propagating all errors correctly through the transport"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "064550c6462bb0bfe0abc290bfd483bef73b5ed9", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/064550c6462bb0bfe0abc290bfd483bef73b5ed9", "committedDate": "2020-03-12T13:16:14Z", "message": "Add a new command web server for okhttp tests. Add tests for the OkHttp implementation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a59b71cfd52e41be3af27110161d9dd5cffd3cf", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/3a59b71cfd52e41be3af27110161d9dd5cffd3cf", "committedDate": "2020-03-12T16:38:11Z", "message": "Expose applicationId to integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8418e83a8249fe7c4f75a15fc2c2802840dec950", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/8418e83a8249fe7c4f75a15fc2c2802840dec950", "committedDate": "2020-03-12T17:08:49Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "596388f8070bf1bdd3cabf706a0628f11fceef59", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/596388f8070bf1bdd3cabf706a0628f11fceef59", "committedDate": "2020-03-12T17:26:20Z", "message": "Fix Findbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "982ad7f279a73e59a448bec120499dd52df5696d", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/982ad7f279a73e59a448bec120499dd52df5696d", "committedDate": "2020-03-12T18:15:22Z", "message": "Attempt to enable CI testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac903ab07486a88f8e7bbfc2efac2d3cada19a8c", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/ac903ab07486a88f8e7bbfc2efac2d3cada19a8c", "committedDate": "2020-03-12T19:10:56Z", "message": "Magic Jenkins incantations that probably blows up CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fa34514d0d3b9d9f5177946a1b728f6fdff4051", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/0fa34514d0d3b9d9f5177946a1b728f6fdff4051", "committedDate": "2020-03-13T11:48:09Z", "message": "Attempt to fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c217fd98af00f1c7c7af98249faed99395be05", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/80c217fd98af00f1c7c7af98249faed99395be05", "committedDate": "2020-03-13T11:51:29Z", "message": "Debug output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20b3bee85a899d9be1170e2f3b849c13d0e21795", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/20b3bee85a899d9be1170e2f3b849c13d0e21795", "committedDate": "2020-03-13T12:22:40Z", "message": "More CI fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90bbb698bd26d1c352c5b6b15b494b5c40a88d35", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/90bbb698bd26d1c352c5b6b15b494b5c40a88d35", "committedDate": "2020-03-13T13:00:40Z", "message": "Use tmp folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f99dbbeb737f684182bd985ddaa48f363494a1a9", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/f99dbbeb737f684182bd985ddaa48f363494a1a9", "committedDate": "2020-03-13T13:10:22Z", "message": "Fix path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a1debde94ed4ed4e7266c03dda47c5dc9eb622c", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/4a1debde94ed4ed4e7266c03dda47c5dc9eb622c", "committedDate": "2020-03-13T13:19:19Z", "message": "Use latest Stitch image."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c9a611437c0af7b31633146e85b5913d6f0ab42", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/4c9a611437c0af7b31633146e85b5913d6f0ab42", "committedDate": "2020-03-13T13:19:55Z", "message": "Use tmp on CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "090f011cb9ed1248b662787959cd151502abb8c4", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/090f011cb9ed1248b662787959cd151502abb8c4", "committedDate": "2020-03-13T13:29:14Z", "message": "Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d95fc361517e612e824107c4a8279cc93013c266", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d95fc361517e612e824107c4a8279cc93013c266", "committedDate": "2020-03-13T13:36:38Z", "message": "Add JQ to Docker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2ecf20f9440f567fc742e76aa4364a7eb8c4f1", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/1e2ecf20f9440f567fc742e76aa4364a7eb8c4f1", "committedDate": "2020-03-13T13:40:31Z", "message": "Attempt to fix not finding executables on CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feaa6dfc8253e3edf5d718fb648be3ced5e0f876", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/feaa6dfc8253e3edf5d718fb648be3ced5e0f876", "committedDate": "2020-03-13T13:56:34Z", "message": "lower case export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d44e6f0b6356a2af243b906b7f125ef0addcc01a", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d44e6f0b6356a2af243b906b7f125ef0addcc01a", "committedDate": "2020-03-13T14:09:06Z", "message": "Debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c4f1db462f285008d7443ef8bb1a7d9faffb86", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/16c4f1db462f285008d7443ef8bb1a7d9faffb86", "committedDate": "2020-03-13T14:16:12Z", "message": "Started the wrong image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "360b2f44f75878a6eb4f99e5e4e7eb4c20558be1", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/360b2f44f75878a6eb4f99e5e4e7eb4c20558be1", "committedDate": "2020-03-13T14:23:21Z", "message": "Reenable real build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac2e4b8edee243fe272cf51d30f96c51766b8573", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/ac2e4b8edee243fe272cf51d30f96c51766b8573", "committedDate": "2020-03-13T14:33:46Z", "message": "Disable PMD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbfcd7c227285f6af7127b024b5bcbd744bae8b3", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/cbfcd7c227285f6af7127b024b5bcbd744bae8b3", "committedDate": "2020-03-13T14:58:12Z", "message": "Expose ports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c7cb8feb83ac4f2d4850fe7bf6e083d99d91893", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/4c7cb8feb83ac4f2d4850fe7bf6e083d99d91893", "committedDate": "2020-03-13T16:15:20Z", "message": "Add better debug info to Response. Pair down JenkinsFile while testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d74a45e26725730e061f0b19db29bd7b2a39b9f4", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d74a45e26725730e061f0b19db29bd7b2a39b9f4", "committedDate": "2020-03-13T16:39:16Z", "message": "Restrict test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f83012adcc5b520977a629c71621b9cb452e33dd", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/f83012adcc5b520977a629c71621b9cb452e33dd", "committedDate": "2020-03-13T18:13:29Z", "message": "Attempt network fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae9ff70d20e54d1fedab87592dacae9148a4d7d4", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/ae9ff70d20e54d1fedab87592dacae9148a4d7d4", "committedDate": "2020-03-13T19:27:47Z", "message": "Attempt to use host network"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7a941920cfd1bb9a727b50f449c0c16d9dc9f07", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/c7a941920cfd1bb9a727b50f449c0c16d9dc9f07", "committedDate": "2020-03-13T21:06:03Z", "message": "Back to fixing CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f8d857f7ac0ee256fd3e6853aa9ba0bf01f9b39", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/2f8d857f7ac0ee256fd3e6853aa9ba0bf01f9b39", "committedDate": "2020-03-13T22:11:25Z", "message": "Yet more network magic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fae1b36b94dfc01d203a8e7701ef768c892a26c", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/0fae1b36b94dfc01d203a8e7701ef768c892a26c", "committedDate": "2020-03-13T22:21:42Z", "message": "Attempt to combine networks both locally and on CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63c82fe03e09abacd5d219187de75b1a8a736345", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/63c82fe03e09abacd5d219187de75b1a8a736345", "committedDate": "2020-03-13T23:10:18Z", "message": "Fix Jenkins (finally I hope)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a22d85706407bbdfac715f8db2bb13a6f1377349", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/a22d85706407bbdfac715f8db2bb13a6f1377349", "committedDate": "2020-03-13T23:21:23Z", "message": "Fix tests. Publish correct ports."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d068549e5add4b47ccabafe907733545e61a3e5f", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d068549e5add4b47ccabafe907733545e61a3e5f", "committedDate": "2020-03-13T23:27:10Z", "message": "Avoid using container names on CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "962e1e3fa84899430ca4966f9390918ba95c03a9", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/962e1e3fa84899430ca4966f9390918ba95c03a9", "committedDate": "2020-03-13T23:33:09Z", "message": "Random network name on CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd806a99ca4f3b8a65461eb26586d2f5190511b3", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/bd806a99ca4f3b8a65461eb26586d2f5190511b3", "committedDate": "2020-03-13T23:36:41Z", "message": "Spelling mistake"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dfeb7ea6257b1a830e814494ad1e0898c4cac7e", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/3dfeb7ea6257b1a830e814494ad1e0898c4cac7e", "committedDate": "2020-03-14T00:08:19Z", "message": "Disable trying to save checkstyle and pmd output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d98304d6f7774cfdac5cd3bd396785473728554f", "committedDate": "2020-03-14T01:15:29Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "282a0b52c17f3463313346170d3cf0aa87d14cca", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/282a0b52c17f3463313346170d3cf0aa87d14cca", "committedDate": "2020-03-18T23:23:48Z", "message": "Generalize Network transport.\nNew BlockingLooperThread helper class.\nAdd support:\n- RealmApp.logOut()\n- RealmUser.logOut()\n- RealmUser.getState()\n- RealmApp.currentUser()\n- RealmUser.equals()`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30519959e43a537deaeca3db177b1baed54e66de", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/30519959e43a537deaeca3db177b1baed54e66de", "committedDate": "2020-03-18T23:37:23Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "committedDate": "2020-03-19T08:00:43Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18ed057b2ee74985148cfbc25c3fe37f1d611167", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/18ed057b2ee74985148cfbc25c3fe37f1d611167", "committedDate": "2020-03-19T08:06:18Z", "message": "More PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30a92829a32160cc46a954d1286bec790109be46", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/30a92829a32160cc46a954d1286bec790109be46", "committedDate": "2020-03-19T08:12:14Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Nabil Hachicha <nh@realm.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c42f2a3260edb90748202861871d30141d462d7", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/5c42f2a3260edb90748202861871d30141d462d7", "committedDate": "2020-03-19T08:23:50Z", "message": "Added missing FIXMEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "885ea91b56a2c68d70f8a094e0df06e7128704b2", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/885ea91b56a2c68d70f8a094e0df06e7128704b2", "committedDate": "2020-03-19T08:24:26Z", "message": "Merge branch 'cm/realmapp' of https://github.com/realm/realm-java into cm/realmapp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fa271655777d6d7c031ba12282979d32fda4e6e", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/4fa271655777d6d7c031ba12282979d32fda4e6e", "committedDate": "2020-03-19T08:37:45Z", "message": "Add missing include"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5fc3afc395cf3236b46ca1b6003d46347f886ce", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d5fc3afc395cf3236b46ca1b6003d46347f886ce", "committedDate": "2020-03-19T08:58:37Z", "message": "Fix namespace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a5db8b4483068b75d6513406291fd0b2560e65", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/38a5db8b4483068b75d6513406291fd0b2560e65", "committedDate": "2020-03-19T13:28:46Z", "message": "Merge branch 'v10' into cm/realmapp\n\n# Conflicts:\n#\ttools/sync_test_server/ros/tsconfig.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a208c63f73631e374bc46d506cd4f0d24a9e467a", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/a208c63f73631e374bc46d506cd4f0d24a9e467a", "committedDate": "2020-03-19T13:30:22Z", "message": "Merge branch 'cm/realmapp' into cm/app/logout\n\n# Conflicts:\n#\trealm/realm-library/build.gradle\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsSyncUser.cpp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/d864fc17b473dcf10fe17f25ce121c7d11ee41c6", "committedDate": "2020-03-19T17:19:15Z", "message": "Merge branch 'v10' into cm/app/logout\n\n# Conflicts:\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/TestRealmApp.kt\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/transport/OkHttpNetworkTransportTests.kt\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/transport/OsJavaNetworkTransportTests.kt\n#\trealm/realm-library/src/main/cpp/io_realm_RealmApp.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsSyncUser.cpp\n#\trealm/realm-library/src/main/cpp/java_network_transport.hpp\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmUser.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsSyncUser.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzAyNTQ2", "url": "https://github.com/realm/realm-java/pull/6779#pullrequestreview-377702546", "createdAt": "2020-03-19T13:10:55Z", "commit": {"oid": "30519959e43a537deaeca3db177b1baed54e66de"}, "state": "APPROVED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMDo1NlrOF4tqjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyODo0MlrOF5RuwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMjc1MA==", "bodyText": "Close should be responsible for freeing resources, the init should happens in the init part (or at setup).\nI think you're even doing this in initializeMongoDbRealm", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395012750", "createdAt": "2020-03-19T13:10:56Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppExt.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+\n+/**\n+ * Resets the Realm Application and delete all local state.\n+ *\n+ * Trying to access any Sync or Realm App API's after this has been called has undefined\n+ * behavior.\n+ */\n+fun RealmApp.close() {\n+    // TODO Do we need to log out users?\n+    SyncManager.reset()\n+    BaseRealm.applicationContext = null // Required for Realm.init() to work\n+    Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30519959e43a537deaeca3db177b1baed54e66de"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1OTAyMw==", "bodyText": "keepStrongReference is not nullable no need for the double bang. Same below", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395159023", "createdAt": "2020-03-19T16:30:43Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.rule\n+\n+import android.os.Handler\n+import android.os.Looper\n+import io.realm.TestHelper\n+import io.realm.TestHelper.LooperTest\n+import io.realm.internal.android.AndroidCapabilities\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.runners.model.MultipleFailureException\n+import java.io.Closeable\n+import java.io.PrintStream\n+import java.util.*\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.locks.ReentrantLock\n+import kotlin.collections.ArrayList\n+\n+/**\n+ * Helper class that makes it easier to run a piece of code inside a Looper Thread. This is done by\n+ * calling the `run` method. This method will block until the Looper either completes or throws\n+ * an exception.\n+ *\n+ * Usage:\n+ * ```\n+ * @get:Rule\n+ * val lopperThread = LooperThreadTest()\n+ *\n+ * @Before\n+ * fun setUp() {\n+ *     // Runs before test\n+ * }\n+ *\n+ * @After\n+ * fun tearDown() {\n+ *     // Runs after test completed or failed\n+ * }\n+ *\n+ * @Test\n+ * fun myTest() = looperThread.run {\n+ *     // test code\n+ * }\n+ * ```\n+ */\n+class BlockingLooperThread {\n+    // lock protecting objects shared with the test thread\n+    private val lock = ReentrantLock()\n+    private var condition: CountDownLatch = CountDownLatch(1)\n+\n+    // Thread safe\n+    private val signalTestCompleted = CountDownLatch(1)\n+\n+    // Access guarded by 'lock'\n+    private var backgroundHandler: Handler? = null\n+\n+    // the variables created inside the test are local and eligible for GC.\n+    // but sometimes we need the variables to survive across different Looper\n+    // events (Callbacks happening in the future), so we add a strong reference\n+    // to them for the duration of the test.\n+    // Access guarded by 'lock'\n+    private var keepStrongReference = ArrayList<Any>()\n+\n+    // List of closable resources that will be automatically closed when the test finishes.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private var closableResources = ArrayList<Closeable>()\n+\n+    // Runnable guaranteed to trigger after the test either succeeded or failed.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private val runAfterTestIsComplete = ArrayList<Runnable>()\n+\n+    /**\n+     * Runs the test on a Looper thread\n+     */\n+    fun runBlocking(threadName: String = \"TestLooperThread\", emulateMainThread: Boolean = false, test: () -> Unit) {\n+        RunInLooperThreadStatement(threadName, emulateMainThread, test).evaluate()\n+    }\n+\n+    /**\n+     * Hold a reference to an object, to prevent it from being GCed,\n+     * until after the test completes.\n+     *\n+     * Accessed only from the main thread, here, but synchronized in case it is called from within a test.\n+     */\n+    fun keepStrongReference(obj: Any) {\n+        synchronized(lock) { keepStrongReference!!.add(obj) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a208c63f73631e374bc46d506cd4f0d24a9e467a"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1OTE5Nw==", "bodyText": "ditto", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395159197", "createdAt": "2020-03-19T16:30:58Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.rule\n+\n+import android.os.Handler\n+import android.os.Looper\n+import io.realm.TestHelper\n+import io.realm.TestHelper.LooperTest\n+import io.realm.internal.android.AndroidCapabilities\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.runners.model.MultipleFailureException\n+import java.io.Closeable\n+import java.io.PrintStream\n+import java.util.*\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.locks.ReentrantLock\n+import kotlin.collections.ArrayList\n+\n+/**\n+ * Helper class that makes it easier to run a piece of code inside a Looper Thread. This is done by\n+ * calling the `run` method. This method will block until the Looper either completes or throws\n+ * an exception.\n+ *\n+ * Usage:\n+ * ```\n+ * @get:Rule\n+ * val lopperThread = LooperThreadTest()\n+ *\n+ * @Before\n+ * fun setUp() {\n+ *     // Runs before test\n+ * }\n+ *\n+ * @After\n+ * fun tearDown() {\n+ *     // Runs after test completed or failed\n+ * }\n+ *\n+ * @Test\n+ * fun myTest() = looperThread.run {\n+ *     // test code\n+ * }\n+ * ```\n+ */\n+class BlockingLooperThread {\n+    // lock protecting objects shared with the test thread\n+    private val lock = ReentrantLock()\n+    private var condition: CountDownLatch = CountDownLatch(1)\n+\n+    // Thread safe\n+    private val signalTestCompleted = CountDownLatch(1)\n+\n+    // Access guarded by 'lock'\n+    private var backgroundHandler: Handler? = null\n+\n+    // the variables created inside the test are local and eligible for GC.\n+    // but sometimes we need the variables to survive across different Looper\n+    // events (Callbacks happening in the future), so we add a strong reference\n+    // to them for the duration of the test.\n+    // Access guarded by 'lock'\n+    private var keepStrongReference = ArrayList<Any>()\n+\n+    // List of closable resources that will be automatically closed when the test finishes.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private var closableResources = ArrayList<Closeable>()\n+\n+    // Runnable guaranteed to trigger after the test either succeeded or failed.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private val runAfterTestIsComplete = ArrayList<Runnable>()\n+\n+    /**\n+     * Runs the test on a Looper thread\n+     */\n+    fun runBlocking(threadName: String = \"TestLooperThread\", emulateMainThread: Boolean = false, test: () -> Unit) {\n+        RunInLooperThreadStatement(threadName, emulateMainThread, test).evaluate()\n+    }\n+\n+    /**\n+     * Hold a reference to an object, to prevent it from being GCed,\n+     * until after the test completes.\n+     *\n+     * Accessed only from the main thread, here, but synchronized in case it is called from within a test.\n+     */\n+    fun keepStrongReference(obj: Any) {\n+        synchronized(lock) { keepStrongReference!!.add(obj) }\n+    }\n+\n+    /**\n+     * Add a closable resource which this test will guarantee to call [Closeable.close] on\n+     * when the tests is done.\n+     *\n+     * @param closeable [Closeable] to close.\n+     */\n+    fun closeAfterTest(closeable: Closeable) {\n+        synchronized(lock) { closableResources!!.add(closeable) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a208c63f73631e374bc46d506cd4f0d24a9e467a"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTc2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import io.realm.log.RealmLog", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395251769", "createdAt": "2020-03-19T18:57:19Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt", "diffHunk": "@@ -16,19 +16,31 @@\n package io.realm\n \n import androidx.test.ext.junit.runners.AndroidJUnit4\n-import org.junit.Assert.assertNotNull\n+import io.realm.log.RealmLog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTg5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.junit.Rule", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395251892", "createdAt": "2020-03-19T18:57:33Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt", "diffHunk": "@@ -16,19 +16,31 @@\n package io.realm\n \n import androidx.test.ext.junit.runners.AndroidJUnit4\n-import org.junit.Assert.assertNotNull\n+import io.realm.log.RealmLog\n+import io.realm.rule.BlockingLooperThread\n+import io.realm.rule.RunInLooperThread\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.After\n+import org.junit.Assert.*\n import org.junit.Before\n+import org.junit.Rule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4NDMzMg==", "bodyText": "The annotation is not needed for usage", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395584332", "createdAt": "2020-03-20T11:45:39Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.rule\n+\n+import android.os.Handler\n+import android.os.Looper\n+import io.realm.TestHelper\n+import io.realm.TestHelper.LooperTest\n+import io.realm.internal.android.AndroidCapabilities\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.runners.model.MultipleFailureException\n+import java.io.Closeable\n+import java.io.PrintStream\n+import java.util.*\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.locks.ReentrantLock\n+import kotlin.collections.ArrayList\n+\n+/**\n+ * Helper class that makes it easier to run a piece of code inside a Looper Thread. This is done by\n+ * calling the `run` method. This method will block until the Looper either completes or throws\n+ * an exception.\n+ *\n+ * Usage:\n+ * ```\n+ * @get:Rule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4NTEwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                condition.await(5*1000, TimeUnit.MILLISECONDS)\n          \n          \n            \n                                condition.await(5, TimeUnit.SECONDS)", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395585107", "createdAt": "2020-03-20T11:47:35Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.rule\n+\n+import android.os.Handler\n+import android.os.Looper\n+import io.realm.TestHelper\n+import io.realm.TestHelper.LooperTest\n+import io.realm.internal.android.AndroidCapabilities\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.runners.model.MultipleFailureException\n+import java.io.Closeable\n+import java.io.PrintStream\n+import java.util.*\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.locks.ReentrantLock\n+import kotlin.collections.ArrayList\n+\n+/**\n+ * Helper class that makes it easier to run a piece of code inside a Looper Thread. This is done by\n+ * calling the `run` method. This method will block until the Looper either completes or throws\n+ * an exception.\n+ *\n+ * Usage:\n+ * ```\n+ * @get:Rule\n+ * val lopperThread = LooperThreadTest()\n+ *\n+ * @Before\n+ * fun setUp() {\n+ *     // Runs before test\n+ * }\n+ *\n+ * @After\n+ * fun tearDown() {\n+ *     // Runs after test completed or failed\n+ * }\n+ *\n+ * @Test\n+ * fun myTest() = looperThread.run {\n+ *     // test code\n+ * }\n+ * ```\n+ */\n+class BlockingLooperThread {\n+    // lock protecting objects shared with the test thread\n+    private val lock = ReentrantLock()\n+    private var condition: CountDownLatch = CountDownLatch(1)\n+\n+    // Thread safe\n+    private val signalTestCompleted = CountDownLatch(1)\n+\n+    // Access guarded by 'lock'\n+    private var backgroundHandler: Handler? = null\n+\n+    // the variables created inside the test are local and eligible for GC.\n+    // but sometimes we need the variables to survive across different Looper\n+    // events (Callbacks happening in the future), so we add a strong reference\n+    // to them for the duration of the test.\n+    // Access guarded by 'lock'\n+    private var keepStrongReference = ArrayList<Any>()\n+\n+    // List of closable resources that will be automatically closed when the test finishes.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private var closableResources = ArrayList<Closeable>()\n+\n+    // Runnable guaranteed to trigger after the test either succeeded or failed.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private val runAfterTestIsComplete = ArrayList<Runnable>()\n+\n+    /**\n+     * Runs the test on a Looper thread\n+     */\n+    fun runBlocking(threadName: String = \"TestLooperThread\", emulateMainThread: Boolean = false, test: () -> Unit) {\n+        RunInLooperThreadStatement(threadName, emulateMainThread, test).evaluate()\n+    }\n+\n+    /**\n+     * Hold a reference to an object, to prevent it from being GCed,\n+     * until after the test completes.\n+     *\n+     * Accessed only from the main thread, here, but synchronized in case it is called from within a test.\n+     */\n+    fun keepStrongReference(obj: Any) {\n+        synchronized(lock) { keepStrongReference!!.add(obj) }\n+    }\n+\n+    /**\n+     * Add a closable resource which this test will guarantee to call [Closeable.close] on\n+     * when the tests is done.\n+     *\n+     * @param closeable [Closeable] to close.\n+     */\n+    fun closeAfterTest(closeable: Closeable) {\n+        synchronized(lock) { closableResources!!.add(closeable) }\n+    }\n+\n+    /**\n+     * Posts a runnable to the currently running looper.\n+     */\n+    fun postRunnable(runnable: Runnable) {\n+        getBackgroundHandler().post(runnable)\n+    }\n+\n+    /**\n+     * Posts a runnable to this worker threads looper with a delay in milli second.\n+     */\n+    fun postRunnableDelayed(runnable: Runnable, delayMillis: Long) {\n+        getBackgroundHandler().postDelayed(runnable, delayMillis)\n+    }\n+\n+    /**\n+     * Signal that the test has completed.\n+     */\n+    fun testComplete() {\n+        // Close all resources and run any after test tasks\n+        // Post as runnable to ensure that this code runs on the correct thread.\n+        postRunnable(Runnable { closeTestResources() })\n+    }\n+\n+    /**\n+     * Internal logic for shutting down a test.\n+     */\n+    private fun closeTestResources() {\n+        try {\n+            closeResources()\n+            for (task in runAfterTestIsComplete) {\n+                task.run()\n+            }\n+        } catch (t: Throwable) {\n+            throw AssertionError(\"Failed to close test resources correctly\", t)\n+        } finally {\n+            signalTestCompleted.countDown()\n+        }\n+    }\n+\n+    /**\n+     * Signal that the test has completed, after waiting for any additional latches.\n+     *\n+     * @param latches additional latches to wait on, before setting the test completed flag.\n+     */\n+    fun testComplete(vararg latches: CountDownLatch) {\n+        for (latch in latches) {\n+            TestHelper.awaitOrFail(latch)\n+        }\n+        testComplete()\n+    }\n+\n+    private fun getBackgroundHandler(): Handler {\n+        synchronized(lock) {\n+            while (backgroundHandler == null) {\n+                try {\n+                    condition.await(5*1000, TimeUnit.MILLISECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4NjkzMA==", "bodyText": "Some this logic is also covered in RealmAppTests can't we merge both test cases?", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395586930", "createdAt": "2020-03-20T11:51:42Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmUserTests.kt", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import io.realm.rule.BlockingLooperThread\n+import io.realm.rule.RunInLooperThread\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.After\n+import org.junit.Assert.assertEquals\n+import org.junit.Assert.fail\n+import org.junit.Before\n+import org.junit.Ignore\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+class RealmUserTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NDQyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return [callback, success_mapper](T result, Optional<app::AppError> error) {\n          \n          \n            \n                return [&](T result, Optional<app::AppError> error) {\n          \n      \n    \n    \n  \n\nwhy not capture by reference?", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395594429", "createdAt": "2020-03-20T12:08:26Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_RealmApp.cpp", "diffHunk": "@@ -27,6 +28,58 @@ using namespace realm::app;\n using namespace realm::jni_util;\n using namespace realm::_impl;\n \n+// Helper method for constructing callbacks for REST calls that must return an actual result to Java\n+template<typename T>\n+std::function<void(T, Optional<app::AppError>)> create_result_callback(JNIEnv* env, jobject j_callback, const std::function<jobject (JNIEnv*, T)>& success_mapper) {\n+    jobject callback = env->NewGlobalRef(j_callback);\n+    return [callback, success_mapper](T result, Optional<app::AppError> error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5OTQwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    std::function<std::unique_ptr<GenericNetworkTransport>()> transport_generator = [java_app_obj] {\n          \n          \n            \n                    std::function<std::unique_ptr<GenericNetworkTransport>()> transport_generator = [&] {", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395599400", "createdAt": "2020-03-20T12:19:36Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_RealmApp.cpp", "diffHunk": "@@ -35,66 +88,71 @@ JNIEXPORT jlong JNICALL Java_io_realm_RealmApp_nativeCreate(JNIEnv* env, jobject\n                                                             jlong j_request_timeout_ms)\n {\n     try {\n-        JavaVM* jvm;\n-        jint ret = env->GetJavaVM(&jvm);\n-        if (ret != 0) {\n-            throw std::runtime_error(util::format(\"Failed to get Java VM. Error: %d\", ret));\n-        }\n         jobject java_app_obj = env->NewGlobalRef(obj); // FIXME: Leaking the app object\n-        std::function<std::unique_ptr<GenericNetworkTransport>()> transport_generator = [jvm, java_app_obj] {\n-            JNIEnv* env;\n-            if (jvm->GetEnv((void**)&env, JNI_VERSION_1_6) != JNI_OK) {\n-                jvm->AttachCurrentThread(&env, nullptr); // Should never fail\n-            }\n+        std::function<std::unique_ptr<GenericNetworkTransport>()> transport_generator = [java_app_obj] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMDk1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #include <realm/util/to_string.hpp>", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395600952", "createdAt": "2020-03-20T12:22:58Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsSyncUser.cpp", "diffHunk": "@@ -20,11 +20,13 @@\n #include \"util.hpp\"\n #include \"jni_util/java_class.hpp\"\n \n+#include <realm/util/to_string.hpp>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMjQ3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Log the current user out of the Realm App, destroying their server state, unregistering them from the\n          \n          \n            \n                 * Log the current user out of the Realm App asynchronously, destroying their server state, unregistering them from the", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395602478", "createdAt": "2020-03-20T12:26:16Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -201,11 +181,67 @@ public RealmUser run() throws ObjectServerError {\n         }.start();\n     }\n \n-    public static void logout(RealmUser user) {\n+    /**\n+     * Log the current user out of the Realm App, destroying their server state, unregistering them from the\n+     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n+     * launch.\n+     * <p>\n+     * This method should be called whenever the application is committed to not using a user again.\n+     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * <p>\n+     * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n+     * will be notified and user credentials will be deleted from this device.\n+     *\n+     * @throws IllegalStateException if no current user could be found.\n+     * @throws ObjectServerError if an error occurred while trying to log the user out of the Realm\n+     * App.\n+     */\n+     public void logOut() {\n+        RealmUser user = currentUser();\n+        if (user == null) {\n+            throw new IllegalStateException(\"No current user was found.\");\n+        }\n+        logOut(user);\n+     }\n \n+    /**\n+     * Log the current user out of the Realm App, destroying their server state, unregistering them from the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzY0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            RealmLog.error(\"Log out user\");\n          \n          \n            \n                            RealmLog.info(\"Log out user \" + user.getEmail());", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395603648", "createdAt": "2020-03-20T12:28:42Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -201,11 +181,67 @@ public RealmUser run() throws ObjectServerError {\n         }.start();\n     }\n \n-    public static void logout(RealmUser user) {\n+    /**\n+     * Log the current user out of the Realm App, destroying their server state, unregistering them from the\n+     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n+     * launch.\n+     * <p>\n+     * This method should be called whenever the application is committed to not using a user again.\n+     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * <p>\n+     * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n+     * will be notified and user credentials will be deleted from this device.\n+     *\n+     * @throws IllegalStateException if no current user could be found.\n+     * @throws ObjectServerError if an error occurred while trying to log the user out of the Realm\n+     * App.\n+     */\n+     public void logOut() {\n+        RealmUser user = currentUser();\n+        if (user == null) {\n+            throw new IllegalStateException(\"No current user was found.\");\n+        }\n+        logOut(user);\n+     }\n \n+    /**\n+     * Log the current user out of the Realm App, destroying their server state, unregistering them from the\n+     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n+     * launch.\n+     * <p>\n+     * This method should be called whenever the application is committed to not using a user again.\n+     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * <p>\n+     * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n+     * will be notified and user credentials will be deleted from this device.\n+     *\n+     * @throws IllegalStateException if not called on a looper thread or no current user could be found.\n+     */\n+     public RealmAsyncTask logOutAsync(Callback<RealmUser> callback) {\n+         RealmUser user = currentUser();\n+         if (user == null) {\n+             throw new IllegalStateException(\"No current user was found.\");\n+         }\n+         return logOutAsync(user, callback);\n+     }\n+\n+    void logOut(RealmUser user) {\n+        checkNull(user, \"user\");\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLogOut(nativePtr, user.osUser.getNativePtr(), new OsJNIVoidResultCallback(error));\n+        handleResult(null, error);\n     }\n-    public RealmAsyncTask logoutAsync(RealmUser user, Callback<Void> callback) {\n-        return null;\n+\n+    RealmAsyncTask logOutAsync(RealmUser user, Callback<RealmUser> callback) {\n+        checkLooperThread(\"Asynchronous log out is only possible from looper threads.\");\n+        return new Request<RealmUser>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                RealmLog.error(\"Log out user\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f75c17c2aefad9a7c375d4601b8b9552cb881b1", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/8f75c17c2aefad9a7c375d4601b8b9552cb881b1", "committedDate": "2020-03-20T13:01:38Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f93d75a859031457b4c7f4798123c2ca2f8a7e34", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/f93d75a859031457b4c7f4798123c2ca2f8a7e34", "committedDate": "2020-03-20T15:02:16Z", "message": "Capture lambda arguments by value"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2454, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}