{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MDkxNDcz", "number": 6959, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToyNDoyN1rOEIU2Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTowNTozMFrOEJm0vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTY1NTc1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToyNDoyN1rOGoN-ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoyMzowNlrOGqJyrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNTI4Mw==", "bodyText": "Looks like a mistake in the old test. This isn't used for anything.", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444825283", "createdAt": "2020-06-24T11:24:27Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -59,44 +60,39 @@ class ProgressListenerTests {\n \n     @After\n     fun tearDown() {\n-        if (this::realm.isInitialized) {\n-            realm.close()\n-        }\n         if (this::app.isInitialized) {\n             app.close()\n         }\n         RealmLog.setLevel(LogLevel.WARN)\n     }\n \n-    @Ignore(\"See https://mongodb.slack.com/archives/CQLDYRJ3V/p1587563930459100\")\n     @Test\n     fun downloadProgressListener_changesOnly() {\n         val allChangesDownloaded = CountDownLatch(1)\n-        val user1: User = app.login(Credentials.anonymous())\n+        val user1: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n         val user1Config = createSyncConfig(user1)\n-        createRemoteData(user1Config)\n-        val user2: User = app.login(Credentials.anonymous())\n+        val user2: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n         val user2Config = createSyncConfig(user2)\n-        val realm = Realm.getInstance(user2Config)\n-        val session: SyncSession = realm.syncSession\n-        session.addDownloadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            RealmLog.error(progress.toString())\n-            if (progress.isTransferComplete) {\n-                assertTransferComplete(progress, true)\n-                assertEquals(TEST_SIZE, getStoreTestDataSize(user2Config))\n-                allChangesDownloaded.countDown()\n+        Realm.getInstance(user2Config).use { realm ->\n+            createRemoteData(user1Config)\n+            realm.syncSession.addDownloadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                RealmLog.error(progress.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MTEwNg==", "bodyText": "I can remove it. Is it a general pattern to avoid log statements in tests. There are other more complicated ones that seems more essential for analyzing test failures. Maybe they should just be using Android's log instead with a different tag to not cause confusion? Or should it all go", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444851106", "createdAt": "2020-06-24T12:17:01Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -59,44 +60,39 @@ class ProgressListenerTests {\n \n     @After\n     fun tearDown() {\n-        if (this::realm.isInitialized) {\n-            realm.close()\n-        }\n         if (this::app.isInitialized) {\n             app.close()\n         }\n         RealmLog.setLevel(LogLevel.WARN)\n     }\n \n-    @Ignore(\"See https://mongodb.slack.com/archives/CQLDYRJ3V/p1587563930459100\")\n     @Test\n     fun downloadProgressListener_changesOnly() {\n         val allChangesDownloaded = CountDownLatch(1)\n-        val user1: User = app.login(Credentials.anonymous())\n+        val user1: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n         val user1Config = createSyncConfig(user1)\n-        createRemoteData(user1Config)\n-        val user2: User = app.login(Credentials.anonymous())\n+        val user2: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n         val user2Config = createSyncConfig(user2)\n-        val realm = Realm.getInstance(user2Config)\n-        val session: SyncSession = realm.syncSession\n-        session.addDownloadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            RealmLog.error(progress.toString())\n-            if (progress.isTransferComplete) {\n-                assertTransferComplete(progress, true)\n-                assertEquals(TEST_SIZE, getStoreTestDataSize(user2Config))\n-                allChangesDownloaded.countDown()\n+        Realm.getInstance(user2Config).use { realm ->\n+            createRemoteData(user1Config)\n+            realm.syncSession.addDownloadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                RealmLog.error(progress.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNTI4Mw=="}, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NzQ4Mw==", "bodyText": "We probably left them here because of issues with them and instead of trying to reproduce them with logs enabled it was easier to try to infer the behavior from the logs the first time around.\nGenerally, we shouldn't do it, but I wouldn't be strongly opposed to keeping them here.", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444857483", "createdAt": "2020-06-24T12:28:45Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -59,44 +60,39 @@ class ProgressListenerTests {\n \n     @After\n     fun tearDown() {\n-        if (this::realm.isInitialized) {\n-            realm.close()\n-        }\n         if (this::app.isInitialized) {\n             app.close()\n         }\n         RealmLog.setLevel(LogLevel.WARN)\n     }\n \n-    @Ignore(\"See https://mongodb.slack.com/archives/CQLDYRJ3V/p1587563930459100\")\n     @Test\n     fun downloadProgressListener_changesOnly() {\n         val allChangesDownloaded = CountDownLatch(1)\n-        val user1: User = app.login(Credentials.anonymous())\n+        val user1: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n         val user1Config = createSyncConfig(user1)\n-        createRemoteData(user1Config)\n-        val user2: User = app.login(Credentials.anonymous())\n+        val user2: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n         val user2Config = createSyncConfig(user2)\n-        val realm = Realm.getInstance(user2Config)\n-        val session: SyncSession = realm.syncSession\n-        session.addDownloadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            RealmLog.error(progress.toString())\n-            if (progress.isTransferComplete) {\n-                assertTransferComplete(progress, true)\n-                assertEquals(TEST_SIZE, getStoreTestDataSize(user2Config))\n-                allChangesDownloaded.countDown()\n+        Realm.getInstance(user2Config).use { realm ->\n+            createRemoteData(user1Config)\n+            realm.syncSession.addDownloadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                RealmLog.error(progress.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNTI4Mw=="}, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MzgwNw==", "bodyText": "I removed the trivial ones, but left a single one here and there.", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r446853807", "createdAt": "2020-06-29T08:23:06Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -59,44 +60,39 @@ class ProgressListenerTests {\n \n     @After\n     fun tearDown() {\n-        if (this::realm.isInitialized) {\n-            realm.close()\n-        }\n         if (this::app.isInitialized) {\n             app.close()\n         }\n         RealmLog.setLevel(LogLevel.WARN)\n     }\n \n-    @Ignore(\"See https://mongodb.slack.com/archives/CQLDYRJ3V/p1587563930459100\")\n     @Test\n     fun downloadProgressListener_changesOnly() {\n         val allChangesDownloaded = CountDownLatch(1)\n-        val user1: User = app.login(Credentials.anonymous())\n+        val user1: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n         val user1Config = createSyncConfig(user1)\n-        createRemoteData(user1Config)\n-        val user2: User = app.login(Credentials.anonymous())\n+        val user2: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n         val user2Config = createSyncConfig(user2)\n-        val realm = Realm.getInstance(user2Config)\n-        val session: SyncSession = realm.syncSession\n-        session.addDownloadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            RealmLog.error(progress.toString())\n-            if (progress.isTransferComplete) {\n-                assertTransferComplete(progress, true)\n-                assertEquals(TEST_SIZE, getStoreTestDataSize(user2Config))\n-                allChangesDownloaded.countDown()\n+        Realm.getInstance(user2Config).use { realm ->\n+            createRemoteData(user1Config)\n+            realm.syncSession.addDownloadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                RealmLog.error(progress.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNTI4Mw=="}, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTY2Mjc5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToyNzowNlrOGoODQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToyNzowNlrOGoODQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNjQzNQ==", "bodyText": "Also looks like a mistake", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444826435", "createdAt": "2020-06-24T11:27:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -147,155 +144,155 @@ class ProgressListenerTests {\n         val transferCompleted = AtomicInteger(0)\n         val testDone = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm) // Write first batch of sample data\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                when (transferCompleted.incrementAndGet()) {\n-                    1 -> {\n-                        val realm = Realm.getInstance(config)\n-                        writeSampleData(realm)\n-                        realm.close()\n-                        throw RuntimeException(\"Crashing the changelistener\")\n-                    }\n-                    2 -> {\n-                        assertTransferComplete(progress, true)\n-                        testDone.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    when (transferCompleted.incrementAndGet()) {\n+                        1 -> {\n+                            Realm.getInstance(config).use { realm ->\n+                            writeSampleData(realm)\n+                            }\n+                            throw RuntimeException(\"Crashing the changelistener\")\n+                        }\n+                        2 -> {\n+                            assertTransferComplete(progress, true)\n+                            testDone.countDown()\n+                        }\n+                        else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                     }\n-                    else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                 }\n             }\n+            writeSampleData(realm) // Write first batch of sample data\n+            TestHelper.awaitOrFail(testDone)\n         }\n-        TestHelper.awaitOrFail(testDone)\n-        realm.close()\n     }\n \n     @Test\n     fun uploadProgressListener_changesOnly() {\n         val allChangeUploaded = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        assertEquals(SyncSession.State.ACTIVE, session.state)\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            RealmLog.error(progress.toString());\n-            if (progress.isTransferComplete) {\n-                assertTransferComplete(progress, true)\n-                allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            assertEquals(SyncSession.State.ACTIVE, session.state)\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                RealmLog.error(progress.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTY2NDM0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToyNzozNVrOGoOEPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToyNzozNVrOGoOEPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNjY4Nw==", "bodyText": "Same", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444826687", "createdAt": "2020-06-24T11:27:35Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -147,155 +144,155 @@ class ProgressListenerTests {\n         val transferCompleted = AtomicInteger(0)\n         val testDone = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm) // Write first batch of sample data\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                when (transferCompleted.incrementAndGet()) {\n-                    1 -> {\n-                        val realm = Realm.getInstance(config)\n-                        writeSampleData(realm)\n-                        realm.close()\n-                        throw RuntimeException(\"Crashing the changelistener\")\n-                    }\n-                    2 -> {\n-                        assertTransferComplete(progress, true)\n-                        testDone.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    when (transferCompleted.incrementAndGet()) {\n+                        1 -> {\n+                            Realm.getInstance(config).use { realm ->\n+                            writeSampleData(realm)\n+                            }\n+                            throw RuntimeException(\"Crashing the changelistener\")\n+                        }\n+                        2 -> {\n+                            assertTransferComplete(progress, true)\n+                            testDone.countDown()\n+                        }\n+                        else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                     }\n-                    else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                 }\n             }\n+            writeSampleData(realm) // Write first batch of sample data\n+            TestHelper.awaitOrFail(testDone)\n         }\n-        TestHelper.awaitOrFail(testDone)\n-        realm.close()\n     }\n \n     @Test\n     fun uploadProgressListener_changesOnly() {\n         val allChangeUploaded = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        assertEquals(SyncSession.State.ACTIVE, session.state)\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            RealmLog.error(progress.toString());\n-            if (progress.isTransferComplete) {\n-                assertTransferComplete(progress, true)\n-                allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            assertEquals(SyncSession.State.ACTIVE, session.state)\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                RealmLog.error(progress.toString());\n+                if (progress.isTransferComplete) {\n+                    assertTransferComplete(progress, true)\n+                    allChangeUploaded.countDown()\n+                }\n             }\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun uploadProgressListener_indefinitely() {\n         val transferCompleted = AtomicInteger(0)\n         val testDone = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm) // Write first batch of sample data\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                when (transferCompleted.incrementAndGet()) {\n-                    1 -> {\n-                        val realm = Realm.getInstance(config)\n-                        writeSampleData(realm)\n-                        realm.close()\n-                    }\n-                    2 -> {\n-                        assertTransferComplete(progress, true)\n-                        testDone.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    when (transferCompleted.incrementAndGet()) {\n+                        1 -> {\n+                            Realm.getInstance(config).use { realm ->\n+                                writeSampleData(realm)\n+                            }\n+                        }\n+                        2 -> {\n+                            assertTransferComplete(progress, true)\n+                            testDone.countDown()\n+                        }\n+                        else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                     }\n-                    else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                 }\n             }\n+            writeSampleData(realm) // Write first batch of sample data\n+            TestHelper.awaitOrFail(testDone)\n         }\n-        TestHelper.awaitOrFail(testDone)\n-        realm.close()\n     }\n \n     @Test\n     fun addListenerInsideCallback() {\n         val allChangeUploaded = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            if (progress.isTransferComplete) {\n-                val realm = Realm.getInstance(config)\n-                writeSampleData(realm)\n-                realm.close()\n-                session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-                    if (progress.isTransferComplete) {\n-                        allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                if (progress.isTransferComplete) {\n+                    Realm.getInstance(config).use { realm ->\n+                        writeSampleData(realm)\n+                    }\n+                    session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                        if (progress.isTransferComplete) {\n+                            allChangeUploaded.countDown()\n+                        }\n                     }\n                 }\n             }\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun addListenerInsideCallback_mixProgressModes() {\n         val allChangeUploaded = CountDownLatch(3)\n         val progressCompletedReported = AtomicBoolean(false)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                allChangeUploaded.countDown()\n-                if (progressCompletedReported.compareAndSet(false, true)) {\n-                    val realm = Realm.getInstance(config)\n-                    writeSampleData(realm)\n-                    realm.close()\n-                    session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-                        if (progress.isTransferComplete) {\n-                            allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    allChangeUploaded.countDown()\n+                    if (progressCompletedReported.compareAndSet(false, true)) {\n+                        Realm.getInstance(config).use { realm ->\n+                            writeSampleData(realm)\n+                        }\n+                        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                            if (progress.isTransferComplete) {\n+                                allChangeUploaded.countDown()\n+                            }\n                         }\n                     }\n                 }\n             }\n+            writeSampleData(realm)\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun addProgressListener_triggerImmediatelyWhenRegistered() {\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        val session: SyncSession = realm.syncSession\n-        checkListener(session, ProgressMode.INDEFINITELY)\n-        checkListener(session, ProgressMode.CURRENT_CHANGES)\n-        realm.close()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            checkListener(session, ProgressMode.INDEFINITELY)\n+            checkListener(session, ProgressMode.CURRENT_CHANGES)\n+        }\n     }\n \n     @Test\n     fun uploadListener_keepIncreasingInSize() {\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        val session: SyncSession = realm.syncSession\n-        for (i in 0..9) {\n-            val changesUploaded = CountDownLatch(1)\n-            writeSampleData(realm)\n-            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-                RealmLog.info(\"Test %s -> %s\", Integer.toString(i), progress.toString())\n-                if (progress.isTransferComplete) {\n-                    assertTransferComplete(progress, true)\n-                    changesUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            for (i in 0..9) {\n+                val changesUploaded = CountDownLatch(1)\n+                writeSampleData(realm)\n+                session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                    RealmLog.info(\"Test %s -> %s\", Integer.toString(i), progress.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 395}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTY2NjQ2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToyODoxOVrOGoOFpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMToxMDoxOFrOGqL7mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNzA0NA==", "bodyText": "Hmm, is refreshing here really neeeded?", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444827044", "createdAt": "2020-06-24T11:28:19Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -325,30 +322,30 @@ class ProgressListenerTests {\n \n     // Create remote data for a given user.\n     private fun createRemoteData(config: SyncConfiguration) {\n-        val realm = Realm.getInstance(config)\n-        val changesUploaded = CountDownLatch(1)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES, object : ProgressListener {\n-            override fun onChange(progress: Progress) {\n-                if (progress.isTransferComplete) {\n-                    session.removeProgressListener(this)\n-                    changesUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val changesUploaded = CountDownLatch(1)\n+            val session: SyncSession = realm.syncSession\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES, object : ProgressListener {\n+                override fun onChange(progress: Progress) {\n+                    if (progress.isTransferComplete) {\n+                        session.removeProgressListener(this)\n+                        changesUploaded.countDown()\n+                    }\n                 }\n-            }\n-        })\n-        TestHelper.awaitOrFail(changesUploaded)\n-        realm.close()\n+            })\n+            TestHelper.awaitOrFail(changesUploaded)\n+        }\n     }\n \n     private fun getStoreTestDataSize(config: RealmConfiguration): Long {\n-        val realm: Realm = Realm.getInstance(config)\n-        val objectCounts: Long = realm.where<SyncDog>().count()\n-        realm.close()\n-        return objectCounts\n+        Realm.getInstance(config).use { realm ->\n+            realm.refresh()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 468}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4ODg1Nw==", "bodyText": "Not really. I had some troubles getting my head around the semantics of the progress listeners from the start. I reverted the change.\nConceptually it could make sense to have here as the check would most likely always make sense to do after refreshing, but due to the heavy reliance on order of operations the test are already written with the order in mind.", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r446888857", "createdAt": "2020-06-29T11:10:18Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -325,30 +322,30 @@ class ProgressListenerTests {\n \n     // Create remote data for a given user.\n     private fun createRemoteData(config: SyncConfiguration) {\n-        val realm = Realm.getInstance(config)\n-        val changesUploaded = CountDownLatch(1)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES, object : ProgressListener {\n-            override fun onChange(progress: Progress) {\n-                if (progress.isTransferComplete) {\n-                    session.removeProgressListener(this)\n-                    changesUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val changesUploaded = CountDownLatch(1)\n+            val session: SyncSession = realm.syncSession\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES, object : ProgressListener {\n+                override fun onChange(progress: Progress) {\n+                    if (progress.isTransferComplete) {\n+                        session.removeProgressListener(this)\n+                        changesUploaded.countDown()\n+                    }\n                 }\n-            }\n-        })\n-        TestHelper.awaitOrFail(changesUploaded)\n-        realm.close()\n+            })\n+            TestHelper.awaitOrFail(changesUploaded)\n+        }\n     }\n \n     private fun getStoreTestDataSize(config: RealmConfiguration): Long {\n-        val realm: Realm = Realm.getInstance(config)\n-        val objectCounts: Long = realm.where<SyncDog>().count()\n-        realm.close()\n-        return objectCounts\n+        Realm.getInstance(config).use { realm ->\n+            realm.refresh()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNzA0NA=="}, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 468}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTc0NjEyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncSession.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTo1Mzo0MFrOGoO2MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoyNjo1OVrOGoP4rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzOTQ3Mw==", "bodyText": "This seems like a behavioral change, where we now swallow the exception?\nNote, it is probably not a bad idea since callbacks generally shouldn't be allowed to crash here, but as a minimum, we would need a test for it + an update to the breaking section of the changelog", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444839473", "createdAt": "2020-06-24T11:53:40Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncSession.java", "diffHunk": "@@ -259,13 +259,21 @@ public boolean isConnected() {\n         return (sessionState == State.ACTIVE || sessionState == State.DYING) && connectionState == ConnectionState.CONNECTED;\n     }\n \n+    /**\n+     * All progress listener events from native Sync are reported to this method.\n+     */\n+    @SuppressWarnings(\"unused\")\n     synchronized void notifyProgressListener(long listenerId, long transferredBytes, long transferableBytes) {\n         Pair<ProgressListener, Progress> listener = listenerIdToProgressListenerMap.get(listenerId);\n         if (listener != null) {\n             Progress newProgressNotification = new Progress(transferredBytes, transferableBytes);\n             if (!newProgressNotification.equals(listener.second)) {\n                 listener.second = newProgressNotification;\n-                listener.first.onChange(newProgressNotification);\n+                try {\n+                    listener.first.onChange(newProgressNotification);\n+                } catch (Exception exception) {\n+                    RealmLog.error(exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0NjMwMA==", "bodyText": "We also swallowed it before, just in Sync.notifyProgressListeners. Since the callback is directly on the SyncSession I just replicated it.\nMaybe this was not that obvious as the Sync.notifyProgressListener is still there even though unused, but I left it as I thought we would/reuse it when fixing the leakage of session objects.", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444846300", "createdAt": "2020-06-24T12:07:26Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncSession.java", "diffHunk": "@@ -259,13 +259,21 @@ public boolean isConnected() {\n         return (sessionState == State.ACTIVE || sessionState == State.DYING) && connectionState == ConnectionState.CONNECTED;\n     }\n \n+    /**\n+     * All progress listener events from native Sync are reported to this method.\n+     */\n+    @SuppressWarnings(\"unused\")\n     synchronized void notifyProgressListener(long listenerId, long transferredBytes, long transferableBytes) {\n         Pair<ProgressListener, Progress> listener = listenerIdToProgressListenerMap.get(listenerId);\n         if (listener != null) {\n             Progress newProgressNotification = new Progress(transferredBytes, transferableBytes);\n             if (!newProgressNotification.equals(listener.second)) {\n                 listener.second = newProgressNotification;\n-                listener.first.onChange(newProgressNotification);\n+                try {\n+                    listener.first.onChange(newProgressNotification);\n+                } catch (Exception exception) {\n+                    RealmLog.error(exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzOTQ3Mw=="}, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0NjY2Ng==", "bodyText": "The reason why I introduced it was that we in fact have a test for it :)", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444846666", "createdAt": "2020-06-24T12:08:08Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncSession.java", "diffHunk": "@@ -259,13 +259,21 @@ public boolean isConnected() {\n         return (sessionState == State.ACTIVE || sessionState == State.DYING) && connectionState == ConnectionState.CONNECTED;\n     }\n \n+    /**\n+     * All progress listener events from native Sync are reported to this method.\n+     */\n+    @SuppressWarnings(\"unused\")\n     synchronized void notifyProgressListener(long listenerId, long transferredBytes, long transferableBytes) {\n         Pair<ProgressListener, Progress> listener = listenerIdToProgressListenerMap.get(listenerId);\n         if (listener != null) {\n             Progress newProgressNotification = new Progress(transferredBytes, transferableBytes);\n             if (!newProgressNotification.equals(listener.second)) {\n                 listener.second = newProgressNotification;\n-                listener.first.onChange(newProgressNotification);\n+                try {\n+                    listener.first.onChange(newProgressNotification);\n+                } catch (Exception exception) {\n+                    RealmLog.error(exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzOTQ3Mw=="}, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NjQ5NQ==", "bodyText": "Cool \ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444856495", "createdAt": "2020-06-24T12:26:59Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncSession.java", "diffHunk": "@@ -259,13 +259,21 @@ public boolean isConnected() {\n         return (sessionState == State.ACTIVE || sessionState == State.DYING) && connectionState == ConnectionState.CONNECTED;\n     }\n \n+    /**\n+     * All progress listener events from native Sync are reported to this method.\n+     */\n+    @SuppressWarnings(\"unused\")\n     synchronized void notifyProgressListener(long listenerId, long transferredBytes, long transferableBytes) {\n         Pair<ProgressListener, Progress> listener = listenerIdToProgressListenerMap.get(listenerId);\n         if (listener != null) {\n             Progress newProgressNotification = new Progress(transferredBytes, transferableBytes);\n             if (!newProgressNotification.equals(listener.second)) {\n                 listener.second = newProgressNotification;\n-                listener.first.onChange(newProgressNotification);\n+                try {\n+                    listener.first.onChange(newProgressNotification);\n+                } catch (Exception exception) {\n+                    RealmLog.error(exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzOTQ3Mw=="}, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTA4NzMyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTowNTozMFrOGqLzhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTowNTozMFrOGqLzhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4Njc4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Ignore(\"Tracked by https://github.com/realm/realm-java/issues/6976\")\n          \n          \n            \n                @Ignore(\"FIXME: Tracked by https://github.com/realm/realm-java/issues/6976\")\n          \n      \n    \n    \n  \n\nMakes it easier to find again when searching the codebase", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r446886789", "createdAt": "2020-06-29T11:05:30Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -147,171 +141,198 @@ class ProgressListenerTests {\n         val transferCompleted = AtomicInteger(0)\n         val testDone = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm) // Write first batch of sample data\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                when (transferCompleted.incrementAndGet()) {\n-                    1 -> {\n-                        val realm = Realm.getInstance(config)\n-                        writeSampleData(realm)\n-                        realm.close()\n-                        throw RuntimeException(\"Crashing the changelistener\")\n-                    }\n-                    2 -> {\n-                        assertTransferComplete(progress, true)\n-                        testDone.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    when (transferCompleted.incrementAndGet()) {\n+                        1 -> {\n+                            Realm.getInstance(config).use { realm ->\n+                            writeSampleData(realm)\n+                            }\n+                            throw RuntimeException(\"Crashing the changelistener\")\n+                        }\n+                        2 -> {\n+                            assertTransferComplete(progress, true)\n+                            testDone.countDown()\n+                        }\n+                        else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                     }\n-                    else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                 }\n             }\n+            writeSampleData(realm) // Write first batch of sample data\n+            TestHelper.awaitOrFail(testDone)\n         }\n-        TestHelper.awaitOrFail(testDone)\n-        realm.close()\n     }\n \n     @Test\n     fun uploadProgressListener_changesOnly() {\n         val allChangeUploaded = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        assertEquals(SyncSession.State.ACTIVE, session.state)\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            RealmLog.error(progress.toString());\n-            if (progress.isTransferComplete) {\n-                assertTransferComplete(progress, true)\n-                allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            assertEquals(SyncSession.State.ACTIVE, session.state)\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                if (progress.isTransferComplete) {\n+                    assertTransferComplete(progress, true)\n+                    allChangeUploaded.countDown()\n+                }\n             }\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun uploadProgressListener_indefinitely() {\n         val transferCompleted = AtomicInteger(0)\n         val testDone = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm) // Write first batch of sample data\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                when (transferCompleted.incrementAndGet()) {\n-                    1 -> {\n-                        val realm = Realm.getInstance(config)\n-                        writeSampleData(realm)\n-                        realm.close()\n-                    }\n-                    2 -> {\n-                        assertTransferComplete(progress, true)\n-                        testDone.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    when (transferCompleted.incrementAndGet()) {\n+                        1 -> {\n+                            Realm.getInstance(config).use { realm ->\n+                                writeSampleData(realm)\n+                            }\n+                        }\n+                        2 -> {\n+                            assertTransferComplete(progress, true)\n+                            testDone.countDown()\n+                        }\n+                        else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                     }\n-                    else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                 }\n             }\n+            writeSampleData(realm) // Write first batch of sample data\n+            TestHelper.awaitOrFail(testDone)\n         }\n-        TestHelper.awaitOrFail(testDone)\n-        realm.close()\n     }\n \n     @Test\n     fun addListenerInsideCallback() {\n         val allChangeUploaded = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            if (progress.isTransferComplete) {\n-                val realm = Realm.getInstance(config)\n-                writeSampleData(realm)\n-                realm.close()\n-                session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-                    if (progress.isTransferComplete) {\n-                        allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                if (progress.isTransferComplete) {\n+                    Realm.getInstance(config).use { realm ->\n+                        writeSampleData(realm)\n+                    }\n+                    session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                        if (progress.isTransferComplete) {\n+                            allChangeUploaded.countDown()\n+                        }\n                     }\n                 }\n             }\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun addListenerInsideCallback_mixProgressModes() {\n         val allChangeUploaded = CountDownLatch(3)\n         val progressCompletedReported = AtomicBoolean(false)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                allChangeUploaded.countDown()\n-                if (progressCompletedReported.compareAndSet(false, true)) {\n-                    val realm = Realm.getInstance(config)\n-                    writeSampleData(realm)\n-                    realm.close()\n-                    session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-                        if (progress.isTransferComplete) {\n-                            allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    allChangeUploaded.countDown()\n+                    if (progressCompletedReported.compareAndSet(false, true)) {\n+                        Realm.getInstance(config).use { realm ->\n+                            writeSampleData(realm)\n+                        }\n+                        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                            if (progress.isTransferComplete) {\n+                                allChangeUploaded.countDown()\n+                            }\n                         }\n                     }\n                 }\n             }\n+            writeSampleData(realm)\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun addProgressListener_triggerImmediatelyWhenRegistered() {\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        val session: SyncSession = realm.syncSession\n-        checkListener(session, ProgressMode.INDEFINITELY)\n-        checkListener(session, ProgressMode.CURRENT_CHANGES)\n-        realm.close()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            checkDownloadListener(session, ProgressMode.INDEFINITELY)\n+            checkUploadListener(session, ProgressMode.INDEFINITELY)\n+            checkDownloadListener(session, ProgressMode.CURRENT_CHANGES)\n+            checkUploadListener(session, ProgressMode.CURRENT_CHANGES)\n+        }\n+    }\n+\n+    @Test\n+    @Ignore(\"Tracked by https://github.com/realm/realm-java/issues/6976\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4f2cc642f2835058cad5a34e09e714f7601fc50"}, "originalPosition": 374}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 407, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}