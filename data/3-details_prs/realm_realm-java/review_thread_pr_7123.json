{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNjc4MjQ2", "number": 7123, "reviewThreads": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0MDoyNVrOEmgnbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo1MTo0MFrOEpYNFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODE1NzI3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0MDoyNVrOHWk2NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0MDoyNVrOHWk2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzNDQyMA==", "bodyText": "There is some misunderstanding here. Async transactions don't run on the UI thread, they are only started there, but actually run in a background thread, so this test and implementation is wrong. The only thing that should be disallowed is executeTransaction() (which runs on the same thread).", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r493434420", "createdAt": "2020-09-23T10:40:25Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,76 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransactionAsync_mainThreadQueriesAllowed() {\n+        CountDownLatch countDownLatch = new CountDownLatch(1);\n+\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransactionAsync(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+                countDownLatch.countDown();\n+            }\n+        });\n+\n+        TestHelper.awaitOrFail(countDownLatch);\n+\n+        // Avoid stale data\n+        realm.refresh();\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransactionAsync_throwsWhenRunningOnMainThread() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc164249976aaaf2ebb07fe6b7c58f733f58869"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODE2MTMzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0MToxMFrOHWk41A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0MToxMFrOHWk41A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzNTA5Mg==", "bodyText": "Shouldn't this be named executeTransaction_mainThreadWritesAllowed()?", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r493435092", "createdAt": "2020-09-23T10:41:10Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,76 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransactionAsync_mainThreadQueriesAllowed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc164249976aaaf2ebb07fe6b7c58f733f58869"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjczMTk5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjozOTo1OFrOHX24JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjozOTo1OFrOHX24JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3ODQwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in using 'RealmConfiguration.allowQueriesOnUiThread'.\");\n          \n          \n            \n                            throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in by using 'RealmConfiguration.allowQueriesOnUiThread'.\");", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494778405", "createdAt": "2020-09-25T06:39:58Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "diffHunk": "@@ -82,6 +84,15 @@\n      * to run it.\n      */\n     static <E extends RealmModel> RealmQuery<E> createQuery(Realm realm, Class<E> clazz) {\n+        // Warn on query being executed on UI thread if isAllowQueriesOnUiThread is set to true, throw otherwise\n+        if (realm.getSharedRealm().capabilities.isMainThread()) {\n+            if (realm.getConfiguration().isAllowQueriesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run queries on the UI thread as it may lead to a drop of frames or ANRs. Please consider doing so from another thread instead.\");\n+            } else {\n+                throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in using 'RealmConfiguration.allowQueriesOnUiThread'.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08659f122e758bbb0c086ec570ecd369cd66459a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjczMjczOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjo0MDoxM1rOHX24lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjo0MDoxM1rOHX24lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3ODUxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in using 'RealmConfiguration.allowWritesOnUiThread'.\");\n          \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread'.\");", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494778518", "createdAt": "2020-09-25T06:40:13Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1525,6 +1525,15 @@ public void executeTransaction(Transaction transaction) {\n             throw new IllegalArgumentException(\"Transaction should not be null\");\n         }\n \n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (sharedRealm.capabilities.isMainThread()) {\n+            if (getConfiguration().isAllowWritesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run transactions on the UI thread as it may lead to a drop of frames or ANRs. Please consider using 'executeTransactionAsync' instead.\");\n+            } else {\n+                throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in using 'RealmConfiguration.allowWritesOnUiThread'.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08659f122e758bbb0c086ec570ecd369cd66459a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjgwNTg0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzowNjo0NFrOHX3jsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzowNjo0NFrOHX3jsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc4OTU1NQ==", "bodyText": "This is not documented in @throws. The documentation could also point to executeTransactionAsync to guide users around this.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494789555", "createdAt": "2020-09-25T07:06:44Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1525,6 +1525,15 @@ public void executeTransaction(Transaction transaction) {\n             throw new IllegalArgumentException(\"Transaction should not be null\");\n         }\n \n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (sharedRealm.capabilities.isMainThread()) {\n+            if (getConfiguration().isAllowWritesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run transactions on the UI thread as it may lead to a drop of frames or ANRs. Please consider using 'executeTransactionAsync' instead.\");\n+            } else {\n+                throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread'.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjgxOTA1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzoxMTozN1rOHX3sAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzoxMTozN1rOHX3sAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5MTY4MA==", "bodyText": "I guess we don't explicitly document throwing RealmExceptions from all the queries, but maybe some class level documentation about this pointing to the async variants?", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494791680", "createdAt": "2020-09-25T07:11:37Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "diffHunk": "@@ -82,6 +84,15 @@\n      * to run it.\n      */\n     static <E extends RealmModel> RealmQuery<E> createQuery(Realm realm, Class<E> clazz) {\n+        // Warn on query being executed on UI thread if isAllowQueriesOnUiThread is set to true, throw otherwise\n+        if (realm.getSharedRealm().capabilities.isMainThread()) {\n+            if (realm.getConfiguration().isAllowQueriesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run queries on the UI thread as it may lead to a drop of frames or ANRs. Please consider doing so from another thread instead.\");\n+            } else {\n+                throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in by using 'RealmConfiguration.allowQueriesOnUiThread'.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjgzMDU2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzoxNTo0MFrOHX3y-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzoxNTo0MFrOHX3y-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5MzQ2Ng==", "bodyText": "Regardless of setting? Maybe set it explicitly to false and verify that it does not break and test default values in configuration tests.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494793466", "createdAt": "2020-09-25T07:15:40Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,101 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_throwsWhenRunningOnMainThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThreadRegardlessOfSetting() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjgzMzgzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzoxNjo0OFrOHX308Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzoxNjo0OFrOHX308Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5Mzk2OQ==", "bodyText": "Again, maybe add explicit .allowQueriesOnUiThread(true) and add configuration tests verifying default values.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494793969", "createdAt": "2020-09-25T07:16:48Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,101 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_throwsWhenRunningOnMainThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThreadRegardlessOfSetting() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                // no-op\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzMxNjg1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTozNzowMFrOHX8cPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTozNzowMFrOHX8cPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2OTU2NA==", "bodyText": "You are only testing one setting in this test. Shouldn't you manually create two different configurations? One with allowWritesOnUiThread(true) and one with allowWritesOnUiThread(false)?", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494869564", "createdAt": "2020-09-25T09:37:00Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,101 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_throwsWhenRunningOnMainThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThreadRegardlessOfSetting() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzMyMzgyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTozODo1MVrOHX8gcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTozODo1MVrOHX8gcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MDY0Mg==", "bodyText": "Shouldn't this be query_runOnNonUiThreadAllowed()?", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494870642", "createdAt": "2020-09-25T09:38:51Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,101 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_throwsWhenRunningOnMainThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThreadRegardlessOfSetting() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                // no-op\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.where(Dog.class).findAll();\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadThrows() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowQueriesOnUiThread(false)\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.where(Dog.class).findAll();\n+            fail(\"This test specifies queries are not allowed to run on the UI thread, so something went awry.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowQueriesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void query_runOnAnyThreadAllowed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzMzMzE4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo0MTowN1rOHX8lvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMToxNjozN1rOHX_eIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MTk5OA==", "bodyText": "With this setting, you also need to check and throw if Realm.refresh() is being called, because that will convert async queries to sync queries which would violate this restriction.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494871998", "createdAt": "2020-09-25T09:41:07Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,101 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_throwsWhenRunningOnMainThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThreadRegardlessOfSetting() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                // no-op\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.where(Dog.class).findAll();\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadThrows() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxOTIwMg==", "bodyText": "Yes, we discussed that yesterday. I'm still working on it \ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494919202", "createdAt": "2020-09-25T11:16:37Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,101 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_throwsWhenRunningOnMainThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThreadRegardlessOfSetting() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                // no-op\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.where(Dog.class).findAll();\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadThrows() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MTk5OA=="}, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzM0MDcwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo0Mjo1NVrOHX8qEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzoxNDoyNlrOHYDFoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MzEwNA==", "bodyText": "Not sure we should log this as a warning if enabled. It is only enabled if you manually opt into it, so hopefully, people are already aware of the tradeoff and the warn level will most likely become visible to users since that is the default setting.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494873104", "createdAt": "2020-09-25T09:42:55Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1525,6 +1525,15 @@ public void executeTransaction(Transaction transaction) {\n             throw new IllegalArgumentException(\"Transaction should not be null\");\n         }\n \n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (sharedRealm.capabilities.isMainThread()) {\n+            if (getConfiguration().isAllowWritesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run transactions on the UI thread as it may lead to a drop of frames or ANRs. Please consider using 'executeTransactionAsync' instead.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxOTE4OA==", "bodyText": "What should we do then? User RealmLog.info instead?", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494919188", "createdAt": "2020-09-25T11:16:35Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1525,6 +1525,15 @@ public void executeTransaction(Transaction transaction) {\n             throw new IllegalArgumentException(\"Transaction should not be null\");\n         }\n \n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (sharedRealm.capabilities.isMainThread()) {\n+            if (getConfiguration().isAllowWritesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run transactions on the UI thread as it may lead to a drop of frames or ANRs. Please consider using 'executeTransactionAsync' instead.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MzEwNA=="}, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3ODQ2NA==", "bodyText": "I would probably just remove it completely", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494978464", "createdAt": "2020-09-25T13:14:26Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1525,6 +1525,15 @@ public void executeTransaction(Transaction transaction) {\n             throw new IllegalArgumentException(\"Transaction should not be null\");\n         }\n \n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (sharedRealm.capabilities.isMainThread()) {\n+            if (getConfiguration().isAllowWritesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run transactions on the UI thread as it may lead to a drop of frames or ANRs. Please consider using 'executeTransactionAsync' instead.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MzEwNA=="}, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzM1MDE2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo0NToxMlrOHX8vfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo0NToxMlrOHX8vfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NDQ5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread'.\");\n          \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread are disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread', or avoid it by using 'Realm.executeTransactionAsync()'.\");", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494874494", "createdAt": "2020-09-25T09:45:12Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1525,6 +1525,15 @@ public void executeTransaction(Transaction transaction) {\n             throw new IllegalArgumentException(\"Transaction should not be null\");\n         }\n \n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (sharedRealm.capabilities.isMainThread()) {\n+            if (getConfiguration().isAllowWritesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run transactions on the UI thread as it may lead to a drop of frames or ANRs. Please consider using 'executeTransactionAsync' instead.\");\n+            } else {\n+                throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread'.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzM2MTM4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo0ODoxMVrOHX82SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo0ODoxMVrOHX82SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NjIzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.\n          \n          \n            \n                     * Sets whether or not you are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494876233", "createdAt": "2020-09-25T09:48:11Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "diffHunk": "@@ -797,6 +829,28 @@ final Builder schema(Class<? extends RealmModel> firstClass, Class<? extends Rea\n             return this;\n         }\n \n+        /**\n+         * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzM2NDk4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo0OTowOVrOHX84Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo0OTowOVrOHX84Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3Njc2Mg==", "bodyText": "The comment you had here is actually pretty great at describing the issue and work-around. I would add that description to this doc as well: https://github.com/realm/realm-java/pull/7123/files#diff-b77f99deee1ca52ca3dc3e47554e4e50R1531", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494876762", "createdAt": "2020-09-25T09:49:09Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "diffHunk": "@@ -797,6 +829,28 @@ final Builder schema(Class<? extends RealmModel> firstClass, Class<? extends Rea\n             return this;\n         }\n \n+        /**\n+         * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.\n+         * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzM2NzMzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo0OTo0NlrOHX85tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo0OTo0NlrOHX85tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NzEwOQ==", "bodyText": "I would also add a line about being cautious about doing this and using REalmQuery.findAllAsync() is the preferred approach.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494877109", "createdAt": "2020-09-25T09:49:46Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "diffHunk": "@@ -797,6 +829,28 @@ final Builder schema(Class<? extends RealmModel> firstClass, Class<? extends Rea\n             return this;\n         }\n \n+        /**\n+         * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.\n+         * <p>\n+         * <b>Note: Realm does not allow synchronous transactions to be run on the main thread unless users explicitly opt in\n+         * with this method.</b>\n+         */\n+        public Builder allowWritesOnUiThread(boolean allowWritesOnUiThread) {\n+            this.allowWritesOnUiThread = allowWritesOnUiThread;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets whether or not RealmQueries are allowed from the UI thread.\n+         * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzM3MDUxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo1MDoyNlrOHX87ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo1MDoyNlrOHX87ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NzU2Mw==", "bodyText": "Any changes to the Javadoc in RealmConfiguration.Builder() should be reflected here.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494877563", "createdAt": "2020-09-25T09:50:26Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncConfiguration.java", "diffHunk": "@@ -1012,6 +1019,28 @@ public Builder maxNumberOfActiveVersions(long number) {\n             return this;\n         }\n \n+        /**\n+         * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.\n+         * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzM3MDcyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo1MDozMFrOHX87nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo1MDozMFrOHX87nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NzU5Nw==", "bodyText": "Same", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494877597", "createdAt": "2020-09-25T09:50:30Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncConfiguration.java", "diffHunk": "@@ -1012,6 +1019,28 @@ public Builder maxNumberOfActiveVersions(long number) {\n             return this;\n         }\n \n+        /**\n+         * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.\n+         * <p>\n+         * <b>Note: Realm does not allow synchronous transactions to be run on the main thread unless users explicitly opt in\n+         * with this method.</b>\n+         */\n+        public Builder allowWritesOnUiThread(boolean allowWritesOnUiThread) {\n+            this.allowWritesOnUiThread = allowWritesOnUiThread;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets whether or not RealmQueries are allowed from the UI thread.\n+         * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzM3NjI4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo1MTo1MlrOHX8-zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo1MTo1MlrOHX8-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3ODQxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns whether {@code RealmQueries} are allowed from the UI thread.\n          \n          \n            \n                 * Returns whether {@link RealmQuery} are allowed from the UI thread.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494878413", "createdAt": "2020-09-25T09:51:52Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "diffHunk": "@@ -288,6 +292,30 @@ public long getMaxNumberOfActiveVersions() {\n         return maxNumberOfActiveVersions;\n     }\n \n+    /**\n+     * Returns whether calls to {@link Realm#executeTransaction} can be done on the UI thread.\n+     * <p>\n+     * <b>Note: Realm does not allow blocking transactions to be run on the main thread unless users explicitly opt in with\n+     * {@link Builder#allowWritesOnUiThread(boolean)} or its Realm Sync builder counterpart.</b>\n+     *\n+     * @return whether or not write operations are allowed to be run from the UI thread.\n+     */\n+    public boolean isAllowWritesOnUiThread() {\n+        return allowWritesOnUiThread;\n+    }\n+\n+    /**\n+     * Returns whether {@code RealmQueries} are allowed from the UI thread.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzI2NDM5OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoxMTo1OFrOHYxDHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoxMjoyM1rOHYxD1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMTQ4Nw==", "bodyText": "I've no idea why this appears as a modification. I didn't change anything here \ud83e\udd37", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495731487", "createdAt": "2020-09-28T07:11:58Z", "author": {"login": "edualonso"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,11 +1,20 @@\n+## 10.0.0-BETA.9 (2020-XX-XX)\n+\n+### Enhancements\n+* Users can now opt out from allowing queries to be launched from the UI thread by using `RealmConfiguration.Builder.allowQueriesOnUiThread(false)`. Doing so will result in a `RealmException` when calling `RealmQuery.findAll()` or `RealmQuery.findFirst()`. Queries will still be allowed from any thread by default, although we recommend using a non-UI thread to launch queries, or, alternatively, using `RealmQuery.findAllAsync()` or `RealmQuery.findFirstAsync()`\n+\n+### Breaking Changes\n+* From now on it is not allowed by default to run transactions with `Realm.executeTransaction` from the UI thread, resulting in a `RealmException`. Users can override this setting by using `RealmConfiguration.Builder.allowWritesOnUiThread(true)` when building a `RealmConfiguration` to obtain a Realm instance, though we do not recommend doing so. Instead, we recommend using non-UI threads when calling `Realm.executeTransaction`, or, alternatively, using `Realm.executeTransactionAsync`.\n+\n+\n ## 10.0.0-BETA.8 (2020-09-23)\n \n We no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n \n The old Realm Cloud legacy APIs have undergone significant refactoring. The new APIs are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n \n ### Fixed\n-* [RealmApp] Logging in caused an `token contains an invalid number of segments` error. (Issue [#7117](https://github.com/realm/realm-java/issues/7117), since 10.0.0-BETA.7) \n+* [RealmApp] Logging in caused an `token contains an invalid number of segments` error. (Issue [#7117](https://github.com/realm/realm-java/issues/7117), since 10.0.0-BETA.7)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMTY3MQ==", "bodyText": "I see. The whitespace at the end got removed automatically.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495731671", "createdAt": "2020-09-28T07:12:23Z", "author": {"login": "edualonso"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,11 +1,20 @@\n+## 10.0.0-BETA.9 (2020-XX-XX)\n+\n+### Enhancements\n+* Users can now opt out from allowing queries to be launched from the UI thread by using `RealmConfiguration.Builder.allowQueriesOnUiThread(false)`. Doing so will result in a `RealmException` when calling `RealmQuery.findAll()` or `RealmQuery.findFirst()`. Queries will still be allowed from any thread by default, although we recommend using a non-UI thread to launch queries, or, alternatively, using `RealmQuery.findAllAsync()` or `RealmQuery.findFirstAsync()`\n+\n+### Breaking Changes\n+* From now on it is not allowed by default to run transactions with `Realm.executeTransaction` from the UI thread, resulting in a `RealmException`. Users can override this setting by using `RealmConfiguration.Builder.allowWritesOnUiThread(true)` when building a `RealmConfiguration` to obtain a Realm instance, though we do not recommend doing so. Instead, we recommend using non-UI threads when calling `Realm.executeTransaction`, or, alternatively, using `Realm.executeTransactionAsync`.\n+\n+\n ## 10.0.0-BETA.8 (2020-09-23)\n \n We no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n \n The old Realm Cloud legacy APIs have undergone significant refactoring. The new APIs are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n \n ### Fixed\n-* [RealmApp] Logging in caused an `token contains an invalid number of segments` error. (Issue [#7117](https://github.com/realm/realm-java/issues/7117), since 10.0.0-BETA.7) \n+* [RealmApp] Logging in caused an `token contains an invalid number of segments` error. (Issue [#7117](https://github.com/realm/realm-java/issues/7117), since 10.0.0-BETA.7)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMTQ4Nw=="}, "originalCommit": {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzI4OTk0OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoyMDoxNFrOHYxSXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoyMDoxNFrOHYxSXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNTM4OA==", "bodyText": "We should also mention RealmQuery.<count/min/max/average> and missing . at the end.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495735388", "createdAt": "2020-09-28T07:20:14Z", "author": {"login": "cmelchior"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,11 +1,20 @@\n+## 10.0.0-BETA.9 (2020-XX-XX)\n+\n+### Enhancements\n+* Users can now opt out from allowing queries to be launched from the UI thread by using `RealmConfiguration.Builder.allowQueriesOnUiThread(false)`. Doing so will result in a `RealmException` when calling `RealmQuery.findAll()` or `RealmQuery.findFirst()`. Queries will still be allowed from any thread by default, although we recommend using a non-UI thread to launch queries, or, alternatively, using `RealmQuery.findAllAsync()` or `RealmQuery.findFirstAsync()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzMwNDczOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoyNDo1OVrOHYxbYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoyNDo1OVrOHYxbYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNzY5Ng==", "bodyText": "We should also test count/min/max/average", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495737696", "createdAt": "2020-09-28T07:24:59Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,121 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesNotAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(false)\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(false)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                // no-op\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowQueriesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.where(Dog.class).findAll();\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadThrows() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowQueriesOnUiThread(false)\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.where(Dog.class).findAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzMwOTA5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/BaseRealm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoyNjozMFrOHYxeNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoyNjozMFrOHYxeNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczODQyMg==", "bodyText": "We should add the RealmException here as well.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495738422", "createdAt": "2020-09-28T07:26:30Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/BaseRealm.java", "diffHunk": "@@ -177,13 +177,17 @@ public boolean isAutoRefresh() {\n      * It also calls any listeners associated with the Realm if needed.\n      * <p>\n      * WARNING: Calling this on a thread with async queries will turn those queries into synchronous queries.\n-     * In most cases it is better to use {@link RealmChangeListener}s to be notified about changes to the\n-     * Realm on a given thread than it is to use this method.\n+     * This means this method will throw a {@link RealmException} if\n+     * {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)} was used with {@code true} to\n+     * obtain a Realm instance. In most cases it is better to use {@link RealmChangeListener}s to be notified\n+     * about changes to the Realm on a given thread than it is to use this method.\n      *\n      * @throws IllegalStateException if attempting to refresh from within a transaction.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzMyMzAxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/BaseRealm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzozMDo0M1rOHYxmig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzozMDo0M1rOHYxmig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MDU1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in by using 'RealmConfiguration.allowQueriesOnUiThread'.\");\n          \n          \n            \n                            throw new RealmException(\"Queries on the UI thread have been disabled. They can be enabled by setting 'RealmConfiguration.Builder.allowQueriesOnUiThread(true)'.\");", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495740554", "createdAt": "2020-09-28T07:30:43Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/BaseRealm.java", "diffHunk": "@@ -493,6 +497,30 @@ protected void checkIfValid() {\n         }\n     }\n \n+    /**\n+     * Checks whether queries are allowed from the UI thread in the current RealmConfiguration.\n+     */\n+    protected void checkAllowQueriesOnUiThread() {\n+        // Warn on query being executed on UI thread if isAllowQueriesOnUiThread is set to true, throw otherwise\n+        if (getSharedRealm().capabilities.isMainThread()) {\n+            if (!getConfiguration().isAllowQueriesOnUiThread()) {\n+                throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in by using 'RealmConfiguration.allowQueriesOnUiThread'.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzMyNTYyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/BaseRealm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzozMTozNFrOHYxoGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzozMTozNFrOHYxoGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MDk1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread' or avoid it by using 'Realm.executeTransactionAsync'.\");\n          \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread have been disabled. They can be enabled by setting 'RealmConfiguration.Builder.allowQueriesOnUiThread(true)'.\");", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495740953", "createdAt": "2020-09-28T07:31:34Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/BaseRealm.java", "diffHunk": "@@ -493,6 +497,30 @@ protected void checkIfValid() {\n         }\n     }\n \n+    /**\n+     * Checks whether queries are allowed from the UI thread in the current RealmConfiguration.\n+     */\n+    protected void checkAllowQueriesOnUiThread() {\n+        // Warn on query being executed on UI thread if isAllowQueriesOnUiThread is set to true, throw otherwise\n+        if (getSharedRealm().capabilities.isMainThread()) {\n+            if (!getConfiguration().isAllowQueriesOnUiThread()) {\n+                throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in by using 'RealmConfiguration.allowQueriesOnUiThread'.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether writes are allowed from the UI thread in the current RealmConfiguration.\n+     */\n+    protected void checkAllowWritesOnUiThread() {\n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (getSharedRealm().capabilities.isMainThread()) {\n+            if (!getConfiguration().isAllowWritesOnUiThread()) {\n+                throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread' or avoid it by using 'Realm.executeTransactionAsync'.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzMyNjc1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzozMTo1M1rOHYxowg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzozMTo1M1rOHYxowg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MTEyMg==", "bodyText": "Maybe link to the option?", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495741122", "createdAt": "2020-09-28T07:31:53Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1514,17 +1514,25 @@ public void removeAllChangeListeners() {\n      * Executes a given transaction on the Realm. {@link #beginTransaction()} and {@link #commitTransaction()} will be\n      * called automatically. If any exception is thrown during the transaction {@link #cancelTransaction()} will be\n      * called instead of {@link #commitTransaction()}.\n+     * <p>\n+     *\n+     * Calling this method from the UI thread will throw a {@link RealmException}. Doing so may result in a drop of frames\n+     * or even ANRs. We recommend calling this method from a non-UI thread or using\n+     * {@link #executeTransactionAsync(Transaction)} instead.\n      *\n      * @param transaction the {@link io.realm.Realm.Transaction} to execute.\n      * @throws IllegalArgumentException if the {@code transaction} is {@code null}.\n      * @throws RealmMigrationNeededException if the latest version contains incompatible schema changes.\n+     * @throws RealmException if called from the UI thread, unless an explicit opt-in has been declared in the configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzMyNzI4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzozMjowNVrOHYxpFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzozMjowNVrOHYxpFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MTIwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495741207", "createdAt": "2020-09-28T07:32:05Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1514,17 +1514,25 @@ public void removeAllChangeListeners() {\n      * Executes a given transaction on the Realm. {@link #beginTransaction()} and {@link #commitTransaction()} will be\n      * called automatically. If any exception is thrown during the transaction {@link #cancelTransaction()} will be\n      * called instead of {@link #commitTransaction()}.\n+     * <p>\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzMzMTY1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzozMzoyOVrOHYxrmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODowMDozM1rOHYyimA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MTg0OA==", "bodyText": "This is not true, you can only launch the query from the Thread holding the Realm instance. Same for the other descriptions", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495741848", "createdAt": "2020-09-28T07:33:29Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "diffHunk": "@@ -51,6 +52,13 @@\n  * is required.\n  * <p>\n  * A RealmQuery cannot be passed between different threads.\n+ * <p>\n+ * Queries can be launched from any thread and results are obtained fairly quickly most of the times. However, launching", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NTkyOA==", "bodyText": "Yeah, it was a broad generalisation. I will change it.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495755928", "createdAt": "2020-09-28T08:00:33Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "diffHunk": "@@ -51,6 +52,13 @@\n  * is required.\n  * <p>\n  * A RealmQuery cannot be passed between different threads.\n+ * <p>\n+ * Queries can be launched from any thread and results are obtained fairly quickly most of the times. However, launching", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MTg0OA=="}, "originalCommit": {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODgwNDAyOnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDowODoyMlrOHZl_pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDowODoyMlrOHZl_pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU5ODk0OQ==", "bodyText": "Minor: I would probably change the mention of the last sentences so we recommend executeTransactionAsync (because it is easier) and then secondly running on a different thread (which will probably require more work from the developer).", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496598949", "createdAt": "2020-09-29T10:08:22Z", "author": {"login": "cmelchior"}, "path": "CHANGELOG.md", "diffHunk": "@@ -11,9 +11,12 @@ The old Realm Cloud legacy APIs have undergone significant refactoring. The new\n * None.\n \n ### Breaking Changes\n-* None.\n+* From now on it is not allowed by default to run transactions with either `Realm.executeTransaction` or `DynamicRealm.executeTransaction` from the UI thread. Doing so will yield a `RealmException`. Users can override this behavior by using `RealmConfiguration.Builder.allowWritesOnUiThread(true)` when building a `RealmConfiguration` to obtain a Realm or DynamicRealm instance, though we do not recommend doing so. Instead, we recommend using non-UI threads when calling `executeTransaction`, or, alternatively, using `executeTransactionAsync` for both `Realm`s and `DynamicRealm`s.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODgwNDYxOnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDowODozMlrOHZmABQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDowODozMlrOHZmABQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU5OTA0NQ==", "bodyText": "Same as above", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496599045", "createdAt": "2020-09-29T10:08:32Z", "author": {"login": "cmelchior"}, "path": "CHANGELOG.md", "diffHunk": "@@ -11,9 +11,12 @@ The old Realm Cloud legacy APIs have undergone significant refactoring. The new\n * None.\n \n ### Breaking Changes\n-* None.\n+* From now on it is not allowed by default to run transactions with either `Realm.executeTransaction` or `DynamicRealm.executeTransaction` from the UI thread. Doing so will yield a `RealmException`. Users can override this behavior by using `RealmConfiguration.Builder.allowWritesOnUiThread(true)` when building a `RealmConfiguration` to obtain a Realm or DynamicRealm instance, though we do not recommend doing so. Instead, we recommend using non-UI threads when calling `executeTransaction`, or, alternatively, using `executeTransactionAsync` for both `Realm`s and `DynamicRealm`s.\n \n ### Enhancements\n+* Users can now opt out from allowing queries to be launched from the UI thread by using `RealmConfiguration.Builder.allowQueriesOnUiThread(false)`. A `RealmException` will be thrown when calling `RealmQuery.findAll`, `RealmQuery.findFirst`, `RealmQuery.minimumDate`, `RealmQuery.maximumDate`, `RealmQuery.count`, `RealmQuery.sum`, `RealmQuery.max`, `RealmQuery.min`, `RealmQuery.average` and `RealmQuery.averageDecimal128` from the UI thread after having used `allowQueriesOnUiThread(false)`. Queries will be allowed from the thread from which the Realm instance was obtained as it always has been by default, although we recommend using a non-UI thread to launch them, or, alternatively, using `RealmQuery.findAllAsync` or `RealmQuery.findFirstAsync`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODgwODk3OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDowOTo0OFrOHZmCsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDowOTo0OFrOHZmCsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU5OTcyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Added `DynamicRealm.executeTransactionAsync` as a by-product of the new `allowWritesOnUiThread` configuration setting.\n          \n          \n            \n            * Added `DynamicRealm.executeTransactionAsync()`.\n          \n      \n    \n    \n  \n\nThe last comment is just our internal design process, so isn't super relevant in a changelog, since the feature can be used without it.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496599729", "createdAt": "2020-09-29T10:09:48Z", "author": {"login": "cmelchior"}, "path": "CHANGELOG.md", "diffHunk": "@@ -11,9 +11,12 @@ The old Realm Cloud legacy APIs have undergone significant refactoring. The new\n * None.\n \n ### Breaking Changes\n-* None.\n+* From now on it is not allowed by default to run transactions with either `Realm.executeTransaction` or `DynamicRealm.executeTransaction` from the UI thread. Doing so will yield a `RealmException`. Users can override this behavior by using `RealmConfiguration.Builder.allowWritesOnUiThread(true)` when building a `RealmConfiguration` to obtain a Realm or DynamicRealm instance, though we do not recommend doing so. Instead, we recommend using non-UI threads when calling `executeTransaction`, or, alternatively, using `executeTransactionAsync` for both `Realm`s and `DynamicRealm`s.\n \n ### Enhancements\n+* Users can now opt out from allowing queries to be launched from the UI thread by using `RealmConfiguration.Builder.allowQueriesOnUiThread(false)`. A `RealmException` will be thrown when calling `RealmQuery.findAll`, `RealmQuery.findFirst`, `RealmQuery.minimumDate`, `RealmQuery.maximumDate`, `RealmQuery.count`, `RealmQuery.sum`, `RealmQuery.max`, `RealmQuery.min`, `RealmQuery.average` and `RealmQuery.averageDecimal128` from the UI thread after having used `allowQueriesOnUiThread(false)`. Queries will be allowed from the thread from which the Realm instance was obtained as it always has been by default, although we recommend using a non-UI thread to launch them, or, alternatively, using `RealmQuery.findAllAsync` or `RealmQuery.findFirstAsync`.\n+* `BaseRealm.refresh` will throw a `RealmException` if it is being called from the UI thread if `allowQueriesOnUiThread` is set to `false`, though it will be allowed by default.\n+* Added `DynamicRealm.executeTransactionAsync` as a by-product of the new `allowWritesOnUiThread` configuration setting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODgyMzczOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxNDowMFrOHZmL2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxNDowMFrOHZmL2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMjA3Mg==", "bodyText": "We should not create configs like this but always go either the ConfigurationFactory or for a default Realm use looperThread.getConfiguration() ... The primary reason is that these Realms will get a specialized location that shouldn't interact with other tests.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496602072", "createdAt": "2020-09-29T10:14:00Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODgyODYwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxNToyOVrOHZmO-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxNToyOVrOHZmO-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMjg3Mw==", "bodyText": "If you use looperThread.addClosable(realm). You don't need this as the LooperThread rule will guarantee it being closed even in case of test failures.\nSame for the other tests.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496602873", "createdAt": "2020-09-29T10:15:29Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close();\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODgyOTQ0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxNTo0NVrOHZmPiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxNTo0NVrOHZmPiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMzAxNw==", "bodyText": "No need to do this if you use the specialized configuration.\nSame for the other tests.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496603017", "createdAt": "2020-09-29T10:15:45Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close();\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODgzNzM3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxODoxMVrOHZmUtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxODoxMVrOHZmUtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNDM0Mg==", "bodyText": "How is this test different from the above?", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496604342", "createdAt": "2020-09-29T10:18:11Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close();\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        }, new DynamicRealm.Transaction.OnError() {\n+            @Override\n+            public void onError(Throwable error) {\n+                fail(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onSuccess() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg0MjA0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxOToyN1rOHZmXpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxOToyN1rOHZmXpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNTA5Mw==", "bodyText": "Not 100% sure what this is testing?\nIdeally, closing the Realm should also prevent the async write from triggering, but that is a race condition.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496605093", "createdAt": "2020-09-29T10:19:27Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close();\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        }, new DynamicRealm.Transaction.OnError() {\n+            @Override\n+            public void onError(Throwable error) {\n+                fail(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onSuccess() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onSuccessCallerRealmClosed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg0MzI1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxOTo0OFrOHZmYcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxOTo0OFrOHZmYcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNTI5OA==", "bodyText": "Same, not sure what this is testing?", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496605298", "createdAt": "2020-09-29T10:19:48Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close();\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        }, new DynamicRealm.Transaction.OnError() {\n+            @Override\n+            public void onError(Throwable error) {\n+                fail(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onSuccess() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onSuccessCallerRealmClosed() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertTrue(realm.isClosed());\n+                DynamicRealm newRealm = DynamicRealm.getInstance(config);\n+                assertEquals(1, newRealm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", newRealm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                newRealm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        });\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onError() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        final RuntimeException runtimeException = new RuntimeException(\"Oh! What a Terrible Failure\");\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                throw runtimeException;\n+            }\n+        }, new DynamicRealm.Transaction.OnError() {\n+            @Override\n+            public void onError(Throwable error) {\n+                assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+                assertNull(realm.where(Owner.CLASS_NAME).findFirst());\n+                assertEquals(runtimeException, error);\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onErrorCallerRealmClosed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg5OTI1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/QueryTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNTo1NFrOHZm7jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjoxMjozMlrOHZqE0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNDI4Ng==", "bodyText": "Doesn't seem to be used?", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496614286", "createdAt": "2020-09-29T10:35:54Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/QueryTests.java", "diffHunk": "@@ -45,6 +47,8 @@\n     public final ExpectedException thrown = ExpectedException.none();\n     @Rule\n     public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2MjY4MA==", "bodyText": "Not in this class, but in a child class for the @UiThreadTest annotation. Perhaps it's better to add it in that one instead?", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496662680", "createdAt": "2020-09-29T12:07:00Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTest/java/io/realm/QueryTests.java", "diffHunk": "@@ -45,6 +47,8 @@\n     public final ExpectedException thrown = ExpectedException.none();\n     @Rule\n     public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNDI4Ng=="}, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2NTgwOA==", "bodyText": "I remember now. This class has also some rules, so I thought it might as well be used like the \"rule entry point\".", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496665808", "createdAt": "2020-09-29T12:12:32Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTest/java/io/realm/QueryTests.java", "diffHunk": "@@ -45,6 +47,8 @@\n     public final ExpectedException thrown = ExpectedException.none();\n     @Rule\n     public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNDI4Ng=="}, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg5OTY1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNjowNFrOHZm71Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNjowNFrOHZm71Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNDM1Nw==", "bodyText": "Doesn't seem to be used?", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496614357", "createdAt": "2020-09-29T10:36:04Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -17,8 +17,9 @@\n package io.realm;\n \n import android.os.SystemClock;\n-import androidx.test.rule.UiThreadTestRule;\n+\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODkwNTQ2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNzo0OVrOHZm_cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNzo0OVrOHZm_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNTI4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void finalAll_runOnMainThreadAllowed() {\n          \n          \n            \n                public void findAll_runOnMainThreadAllowed() {", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496615282", "createdAt": "2020-09-29T10:37:49Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -3739,6 +3742,210 @@ public void limit_invalidValuesThrows() {\n         }\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void finalAll_runOnMainThreadAllowed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODkwNTk2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNzo1OVrOHZm_zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNzo1OVrOHZm_zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNTM3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void finalFirst_runOnMainThreadAllowed() {\n          \n          \n            \n                public void findFirst_runOnMainThreadAllowed() {", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496615373", "createdAt": "2020-09-29T10:37:59Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -3739,6 +3742,210 @@ public void limit_invalidValuesThrows() {\n         }\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void finalAll_runOnMainThreadAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowQueriesOnUiThread(true)\n+                .name(\"ui_realm\")\n+                .build();\n+\n+        Realm uiRealm = Realm.getInstance(configuration);\n+        uiRealm.where(Dog.class).findAll();\n+        uiRealm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void finalFirst_runOnMainThreadAllowed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTAxNTYyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMToxMDowOFrOHZoCzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMToxMDowOFrOHZoCzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzMjUyNw==", "bodyText": "Maybe it is just me but the term \"fairly quickly\" feels like a cop out. Either just say \"Quickly\" or remove the line completely IMO", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496632527", "createdAt": "2020-09-29T11:10:08Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "diffHunk": "@@ -51,6 +52,12 @@\n  * is required.\n  * <p>\n  * A RealmQuery cannot be passed between different threads.\n+ * <p>\n+ * Results are obtained fairly quickly most of the times. However, launching heavy queries from the UI thread may result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODIzNDMwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo1MTowNFrOHbAtIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo1MTowNFrOHbAtIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4NTE1Mw==", "bodyText": "I would do DynamicRealm.getInstance(config).use { newRealm -> ... } . Otherwise, if the assserts fail, this code is not called.", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r498085153", "createdAt": "2020-10-01T08:51:04Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.kt", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import io.realm.DynamicRealm\n+import io.realm.TestHelper.TestLogger\n+import io.realm.entities.AllTypes\n+import io.realm.entities.Owner\n+import io.realm.internal.async.RealmThreadPoolExecutor\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.rule.BlockingLooperThread\n+import io.realm.rule.TestRealmConfigurationFactory\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.ExpectedException\n+import org.junit.runner.RunWith\n+import java.util.concurrent.atomic.AtomicInteger\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+import kotlin.test.assertTrue\n+import kotlin.test.fail\n+\n+@RunWith(AndroidJUnit4::class)\n+class DynamicRealmAsyncQueryTests {\n+\n+    @get:Rule\n+    val configFactory = TestRealmConfigurationFactory()\n+    @get:Rule\n+    val thrown: ExpectedException = ExpectedException.none()\n+\n+    private val looperThread = BlockingLooperThread()\n+\n+    private lateinit var config: RealmConfiguration\n+\n+    @Before\n+    fun setUp() {\n+        config = configFactory.createConfiguration()\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close()\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    fun executeTransactionAsync() = looperThread.runBlocking {\n+        val realm = DynamicRealm.getInstance(config)\n+                .also { looperThread.closeAfterTest(it) }\n+\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count())\n+\n+        realm.executeTransactionAsync({ transactionRealm ->\n+            val owner = transactionRealm.createObject(Owner.CLASS_NAME)\n+            owner.setString(Owner.FIELD_NAME, \"Owner\")\n+        }, {\n+            assertEquals(1, realm.where(Owner.CLASS_NAME).count())\n+            assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst()!!.getString(Owner.FIELD_NAME))\n+            looperThread.testComplete()\n+        }) { error ->\n+            fail(error.message)\n+        }\n+    }\n+\n+    @Test\n+    fun executeTransactionAsync_onSuccess() = looperThread.runBlocking {\n+        val realm = DynamicRealm.getInstance(config)\n+                .also { looperThread.closeAfterTest(it) }\n+\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count())\n+\n+        realm.executeTransactionAsync(DynamicRealm.Transaction { transactionRealm ->\n+            val owner = transactionRealm.createObject(Owner.CLASS_NAME)\n+            owner.setString(Owner.FIELD_NAME, \"Owner\")\n+        }, DynamicRealm.Transaction.OnSuccess {\n+            assertEquals(1, realm.where(Owner.CLASS_NAME).count())\n+            assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst()!!.getString(Owner.FIELD_NAME))\n+            looperThread.testComplete()\n+        })\n+    }\n+\n+    @Test\n+    fun executeTransactionAsync_onSuccessCallerRealmClosed() = looperThread.runBlocking {\n+        val realm = DynamicRealm.getInstance(config)\n+\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count())\n+        realm.executeTransactionAsync(DynamicRealm.Transaction { transactionRealm ->\n+            val owner = transactionRealm.createObject(Owner.CLASS_NAME)\n+            owner.setString(Owner.FIELD_NAME, \"Owner\")\n+        }, DynamicRealm.Transaction.OnSuccess {\n+            assertTrue(realm.isClosed)\n+            val newRealm = DynamicRealm.getInstance(config)\n+            assertEquals(1, newRealm.where(Owner.CLASS_NAME).count())\n+            assertEquals(\"Owner\", newRealm.where(Owner.CLASS_NAME).findFirst()!!.getString(Owner.FIELD_NAME))\n+\n+            newRealm.close()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce9b19c69ffd6e4cdec12d35ad276f88c17cb51"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODIzNjM4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo1MTo0MFrOHbAuWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo1MTo0MFrOHbAuWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4NTQ2NQ==", "bodyText": "Same", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r498085465", "createdAt": "2020-10-01T08:51:40Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.kt", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import io.realm.DynamicRealm\n+import io.realm.TestHelper.TestLogger\n+import io.realm.entities.AllTypes\n+import io.realm.entities.Owner\n+import io.realm.internal.async.RealmThreadPoolExecutor\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.rule.BlockingLooperThread\n+import io.realm.rule.TestRealmConfigurationFactory\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.ExpectedException\n+import org.junit.runner.RunWith\n+import java.util.concurrent.atomic.AtomicInteger\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+import kotlin.test.assertTrue\n+import kotlin.test.fail\n+\n+@RunWith(AndroidJUnit4::class)\n+class DynamicRealmAsyncQueryTests {\n+\n+    @get:Rule\n+    val configFactory = TestRealmConfigurationFactory()\n+    @get:Rule\n+    val thrown: ExpectedException = ExpectedException.none()\n+\n+    private val looperThread = BlockingLooperThread()\n+\n+    private lateinit var config: RealmConfiguration\n+\n+    @Before\n+    fun setUp() {\n+        config = configFactory.createConfiguration()\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close()\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    fun executeTransactionAsync() = looperThread.runBlocking {\n+        val realm = DynamicRealm.getInstance(config)\n+                .also { looperThread.closeAfterTest(it) }\n+\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count())\n+\n+        realm.executeTransactionAsync({ transactionRealm ->\n+            val owner = transactionRealm.createObject(Owner.CLASS_NAME)\n+            owner.setString(Owner.FIELD_NAME, \"Owner\")\n+        }, {\n+            assertEquals(1, realm.where(Owner.CLASS_NAME).count())\n+            assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst()!!.getString(Owner.FIELD_NAME))\n+            looperThread.testComplete()\n+        }) { error ->\n+            fail(error.message)\n+        }\n+    }\n+\n+    @Test\n+    fun executeTransactionAsync_onSuccess() = looperThread.runBlocking {\n+        val realm = DynamicRealm.getInstance(config)\n+                .also { looperThread.closeAfterTest(it) }\n+\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count())\n+\n+        realm.executeTransactionAsync(DynamicRealm.Transaction { transactionRealm ->\n+            val owner = transactionRealm.createObject(Owner.CLASS_NAME)\n+            owner.setString(Owner.FIELD_NAME, \"Owner\")\n+        }, DynamicRealm.Transaction.OnSuccess {\n+            assertEquals(1, realm.where(Owner.CLASS_NAME).count())\n+            assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst()!!.getString(Owner.FIELD_NAME))\n+            looperThread.testComplete()\n+        })\n+    }\n+\n+    @Test\n+    fun executeTransactionAsync_onSuccessCallerRealmClosed() = looperThread.runBlocking {\n+        val realm = DynamicRealm.getInstance(config)\n+\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count())\n+        realm.executeTransactionAsync(DynamicRealm.Transaction { transactionRealm ->\n+            val owner = transactionRealm.createObject(Owner.CLASS_NAME)\n+            owner.setString(Owner.FIELD_NAME, \"Owner\")\n+        }, DynamicRealm.Transaction.OnSuccess {\n+            assertTrue(realm.isClosed)\n+            val newRealm = DynamicRealm.getInstance(config)\n+            assertEquals(1, newRealm.where(Owner.CLASS_NAME).count())\n+            assertEquals(\"Owner\", newRealm.where(Owner.CLASS_NAME).findFirst()!!.getString(Owner.FIELD_NAME))\n+\n+            newRealm.close()\n+\n+            looperThread.testComplete()\n+        })\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun executeTransactionAsync_onError() = looperThread.runBlocking {\n+        val realm = DynamicRealm.getInstance(config)\n+                .also { looperThread.closeAfterTest(it) }\n+\n+        val runtimeException = RuntimeException(\"Oh! What a Terrible Failure\")\n+\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count())\n+\n+        realm.executeTransactionAsync({\n+            throw runtimeException\n+        }) { error ->\n+            assertEquals(0, realm.where(Owner.CLASS_NAME).count())\n+            assertNull(realm.where(Owner.CLASS_NAME).findFirst())\n+            assertEquals(runtimeException, error)\n+\n+            looperThread.testComplete()\n+        }\n+    }\n+\n+    @Test\n+    fun executeTransactionAsync_onErrorCallerRealmClosed() = looperThread.runBlocking {\n+        val realm = DynamicRealm.getInstance(config)\n+        val runtimeException = RuntimeException(\"Oh! What a Terrible Failure\")\n+\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count())\n+\n+        realm.executeTransactionAsync({\n+            throw runtimeException\n+        }) { error ->\n+            assertTrue(realm.isClosed)\n+            val newRealm = DynamicRealm.getInstance(config)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce9b19c69ffd6e4cdec12d35ad276f88c17cb51"}, "originalPosition": 151}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 543, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}