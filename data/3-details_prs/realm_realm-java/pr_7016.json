{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNzI0Njg4", "number": 7016, "title": "Add tests for insert lists of Realm models containing embedded objects", "bodyText": "", "createdAt": "2020-08-04T12:08:20Z", "url": "https://github.com/realm/realm-java/pull/7016", "merged": true, "mergeCommit": {"oid": "94fa3c8762bd55fc547ec888663475216e952ddc"}, "closed": true, "closedAt": "2020-08-14T06:29:37Z", "author": {"login": "edualonso"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3wmx1gH2gAyNDYyNzI0Njg4OjAwMjZiMTg0NDU4MDA0N2ExNGMxNzZjYWYzNzhmOTg3MDU5OTA0YmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-mCtGAH2gAyNDYyNzI0Njg4OjZjYTRkMzc5NGZhNzI1NzM3YzAyZmU1ZDU4MzI5MzQ3M2JlN2JlZWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0026b1844580047a14c176caf378f987059904ba", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/0026b1844580047a14c176caf378f987059904ba", "committedDate": "2020-07-23T14:49:43Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88dbf726f4b83c3737d3774c5c170c035515972d", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/88dbf726f4b83c3737d3774c5c170c035515972d", "committedDate": "2020-07-26T22:17:29Z", "message": "Seems we can't set children to managed parents when using sync. In addition, sync doesn't allow calls to *OrUpdate to update a constant parent with a different child"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20b35d87bbd1b448d272041b7999d83e5a0774c7", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/20b35d87bbd1b448d272041b7999d83e5a0774c7", "committedDate": "2020-07-29T09:16:10Z", "message": "Fixed broken test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6318bafc94b7143bfae04d593df612f1e407aba3", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/6318bafc94b7143bfae04d593df612f1e407aba3", "committedDate": "2020-08-03T09:59:08Z", "message": "Merge branch 'v10' into el/embedded-objects-sync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e7f7c447121c21d00e5f23850f129f213e40ae7", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/9e7f7c447121c21d00e5f23850f129f213e40ae7", "committedDate": "2020-08-03T09:59:18Z", "message": "Added missing tests for inserting lists of embedded objects plus added test for insertOrUpdate_deletesOldEmbeddedObject"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7af323f5dddb0f28b7e4f37ce3a6e60b7eccd6e5", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/7af323f5dddb0f28b7e4f37ce3a6e60b7eccd6e5", "committedDate": "2020-08-04T09:02:03Z", "message": "Added ignore to failing test due to server error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4733a0add32ea353faf05f67d270432d27c349d", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/b4733a0add32ea353faf05f67d270432d27c349d", "committedDate": "2020-08-04T09:02:28Z", "message": "Merge branch 'el/embedded-objects-sync' into el/embed_obj_insert_list_tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "babf0ef5793aaed0a493e5a227835dcf83640307", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/babf0ef5793aaed0a493e5a227835dcf83640307", "committedDate": "2020-08-07T09:28:22Z", "message": "Merge branch 'v10' into el/embedded-objects-sync\n\n# Conflicts:\n#\trealm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79cef318e87830aae00666dc0dee0065b74ee42a", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/79cef318e87830aae00666dc0dee0065b74ee42a", "committedDate": "2020-08-07T11:18:12Z", "message": "Added test for embedded tree structures but ignored due to existing bug server-side"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a95ba2d2d3d8fb009b16c8b3e8bcc06cddc614fb", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/a95ba2d2d3d8fb009b16c8b3e8bcc06cddc614fb", "committedDate": "2020-08-07T14:30:49Z", "message": "Removed tree-structure classes from remote config schema until https://jira.mongodb.org/projects/HELP/queues/issue/HELP-17759 is fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23ae958cd2ae228d799f7859d691a9db8a83673c", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/23ae958cd2ae228d799f7859d691a9db8a83673c", "committedDate": "2020-08-07T14:39:11Z", "message": "Merge branch 'el/embedded-objects-sync' into el/embed_obj_insert_list_tests\n\n# Conflicts:\n#\trealm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60d169518762d5c079040c11cba183574a389e1e", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/60d169518762d5c079040c11cba183574a389e1e", "committedDate": "2020-08-07T15:01:34Z", "message": "Merge branch 'v10' into el/embed_obj_insert_list_tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTk5MDkw", "url": "https://github.com/realm/realm-java/pull/7016#pullrequestreview-463999090", "createdAt": "2020-08-10T07:13:36Z", "commit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyMDo1OVrOG-DuTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzo0MDowMFrOG-EMrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyNTkwMA==", "bodyText": "Funny mix of local variables (above managedChild, etc.) and also. Maybe stick to one pattern.\nI find it a bit annoying that you have to scan for the assert out of the top level hierarchy. If you want to skip the local variable a proposal could maybe be to embed the query directly in the assert instead of embedding the assert in the also-clause?", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467725900", "createdAt": "2020-08-10T07:20:59Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyNjg4Nw==", "bodyText": "Why the plus and not just pass them as parameters to listOf?", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467726887", "createdAt": "2020-08-10T07:23:28Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyODk5MQ==", "bodyText": "Again, a bit funny organization. Would be nice with a cleaner separation of the query under test and the assertions, but can't immediately find a good suggestion.", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467728991", "createdAt": "2020-08-10T07:28:27Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            realm.where<EmbeddedSimpleParent>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMDYxMw==", "bodyText": "Not really gaining anything using also instead of just having realm.insert(list) on a separate line, which IMO would make it way easier to reason about the overall idea.", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467730613", "createdAt": "2020-08-10T07:32:38Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            realm.where<EmbeddedSimpleParent>()\n+                    .findAll()\n+                    .sort(\"_id\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0]._id, it[0]!!._id)\n+                        assertEquals(list[1]._id, it[1]!!._id)\n+                        assertEquals(list[2]._id, it[2]!!._id)\n+                        assertEquals(list[0].child!!.childId, it[0]!!.child!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.child!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.child!!.childId)\n+                    }\n+\n+            realm.where<EmbeddedSimpleChild>()\n+                    .findAll()\n+                    .sort(\"childId\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0].child!!.childId, it[0]!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.childId)\n+                        assertEquals(list[0]._id, it[0]!!.parent._id)\n+                        assertEquals(list[1]._id, it[1]!!.parent._id)\n+                        assertEquals(list[2]._id, it[2]!!.parent._id)\n+                    }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_duplicatePrimaryKeyThrows() {\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMTYzMg==", "bodyText": "See combination of other comments. Why not just write\nassertFailsWith<IllegalArgumentException> {\n    realm.insert(listOf(....))\n}", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467731632", "createdAt": "2020-08-10T07:35:07Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            realm.where<EmbeddedSimpleParent>()\n+                    .findAll()\n+                    .sort(\"_id\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0]._id, it[0]!!._id)\n+                        assertEquals(list[1]._id, it[1]!!._id)\n+                        assertEquals(list[2]._id, it[2]!!._id)\n+                        assertEquals(list[0].child!!.childId, it[0]!!.child!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.child!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.child!!.childId)\n+                    }\n+\n+            realm.where<EmbeddedSimpleChild>()\n+                    .findAll()\n+                    .sort(\"childId\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0].child!!.childId, it[0]!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.childId)\n+                        assertEquals(list[0]._id, it[0]!!.parent._id)\n+                        assertEquals(list[1]._id, it[1]!!.parent._id)\n+                        assertEquals(list[2]._id, it[2]!!.parent._id)\n+                    }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_duplicatePrimaryKeyThrows() {\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            assertFailsWith<RealmPrimaryKeyConstraintException> {\n+                realm.insert(list)\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_insertingChildrenDirectlyThrows() {\n+        realm.executeTransaction { realm ->\n+            listOf<EmbeddedSimpleChild>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMzY3OQ==", "bodyText": "Sometimes it is a bit dangerous to reference the expected value from a complex expression. Typing it explicitly or referencing a local string variable makes it more clear.", "url": "https://github.com/realm/realm-java/pull/7016#discussion_r467733679", "createdAt": "2020-08-10T07:40:00Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -527,21 +528,155 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_deletesOldEmbeddedObject() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val parent = EmbeddedSimpleParent(\"parent\")\n+            val originalChild = EmbeddedSimpleChild(\"originalChild\")\n+            parent.child = originalChild\n+            realm.insert(parent)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findFirst()\n+            assertTrue(managedChild!!.isValid)\n+\n+            val newChild = EmbeddedSimpleChild(\"newChild\")\n+            parent.child = newChild\n+            realm.insertOrUpdate(parent)\n+            assertTrue(!managedChild.isValid)\n+\n+            assertEquals(1, realm.where<EmbeddedSimpleChild>().count())\n+            val managedNewChild = realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"newChild\")\n+                    .findFirst()\n+            assertEquals(managedNewChild!!.childId, \"newChild\")\n+            realm.where<EmbeddedSimpleChild>()\n+                    .equalTo(\"childId\", \"originalChild\")\n+                    .findAll()\n+                    .size\n+                    .also { oldChildCount ->\n+                        assertEquals(0, oldChildCount)\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            realm.where<EmbeddedSimpleParent>()\n+                    .findAll()\n+                    .sort(\"_id\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0]._id, it[0]!!._id)\n+                        assertEquals(list[1]._id, it[1]!!._id)\n+                        assertEquals(list[2]._id, it[2]!!._id)\n+                        assertEquals(list[0].child!!.childId, it[0]!!.child!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.child!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.child!!.childId)\n+                    }\n+\n+            realm.where<EmbeddedSimpleChild>()\n+                    .findAll()\n+                    .sort(\"childId\")\n+                    .also {\n+                        assertEquals(3, it.count())\n+                        assertEquals(list[0].child!!.childId, it[0]!!.childId)\n+                        assertEquals(list[1].child!!.childId, it[1]!!.childId)\n+                        assertEquals(list[2].child!!.childId, it[2]!!.childId)\n+                        assertEquals(list[0]._id, it[0]!!.parent._id)\n+                        assertEquals(list[1]._id, it[1]!!.parent._id)\n+                        assertEquals(list[2]._id, it[2]!!.parent._id)\n+                    }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_duplicatePrimaryKeyThrows() {\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+\n+            assertFailsWith<RealmPrimaryKeyConstraintException> {\n+                realm.insert(list)\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun insert_listWithEmbeddedObjects_insertingChildrenDirectlyThrows() {\n+        realm.executeTransaction { realm ->\n+            listOf<EmbeddedSimpleChild>()\n+                    .plus(EmbeddedSimpleChild(\"child1\"))\n+                    .plus(EmbeddedSimpleChild(\"child2\"))\n+                    .plus(EmbeddedSimpleChild(\"child3\"))\n+                    .also {\n+                        assertFailsWith<IllegalArgumentException> {\n+                            realm.insert(it)\n+                        }\n+                    }\n+        }\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insertOrUpdate_listWithEmbeddedObjects() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val list = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"child1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"child2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"child3\") })\n+                    .also { realm.insert(it) }\n+            val managedChildren = realm.where<EmbeddedSimpleChild>().findAll()\n+\n+            val newList = listOf<EmbeddedSimpleParent>()\n+                    .plus(EmbeddedSimpleParent(\"parent1\").apply { child = EmbeddedSimpleChild(\"newChild1\") })\n+                    .plus(EmbeddedSimpleParent(\"parent2\").apply { child = EmbeddedSimpleChild(\"newChild2\") })\n+                    .plus(EmbeddedSimpleParent(\"parent3\").apply { child = EmbeddedSimpleChild(\"newChild3\") })\n+                    .also { realm.insertOrUpdate(it) }\n+\n+            assertNull(realm.where<EmbeddedSimpleChild>().equalTo(\"childId\", list[0].child!!.childId).findFirst())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60d169518762d5c079040c11cba183574a389e1e"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2f13dc4bd3734b18c66514b334fe12e54b5aad4", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/a2f13dc4bd3734b18c66514b334fe12e54b5aad4", "committedDate": "2020-08-13T09:42:28Z", "message": "Syntactical reorganization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ca4d3794fa725737c02fe5d583293473be7beea", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/6ca4d3794fa725737c02fe5d583293473be7beea", "committedDate": "2020-08-13T20:28:44Z", "message": "Merge branch 'v10' into el/embed_obj_insert_list_tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2297, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}