{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzIxOTA4", "number": 6795, "title": "Finalize support for Login and Credentials", "bodyText": "This PR finalizes login functionality and RealmCredentials + JavaDoc\nDeleted old CredentialsTest and created RealmCredentialsTests instead.\nTODO\n\n Implemenet missing support for Custom Functions login\n Implement missing support for Api Keys.", "createdAt": "2020-04-02T17:37:41Z", "url": "https://github.com/realm/realm-java/pull/6795", "merged": true, "mergeCommit": {"oid": "0b18dfeec209c3587ca5c508a668168f38a74c14"}, "closed": true, "closedAt": "2020-04-03T14:13:18Z", "author": {"login": "cmelchior"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTv17SgH2gAyMzk3NzIxOTA4OjcyNmUxOGJkNmYyYjkxNzhmZmMyNzc1NTMwOWNjYmRlZDhiMDc0ZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUBitVgFqTM4NzI5MzM5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "726e18bd6f2b9178ffc27755309ccbded8b074f3", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/726e18bd6f2b9178ffc27755309ccbded8b074f3", "committedDate": "2020-04-02T17:35:05Z", "message": "Add preliminary support for login and remaining credentials"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36166ed0b7fc8a7c652798adc70dd118a221551e", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/36166ed0b7fc8a7c652798adc70dd118a221551e", "committedDate": "2020-04-02T18:18:32Z", "message": "Add JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3078e15f0d4da08361443d80562c4f81b706527", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/a3078e15f0d4da08361443d80562c4f81b706527", "committedDate": "2020-04-02T19:28:05Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f25a8aee0e37fcfda8988ba32b277e53de7ae756", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/f25a8aee0e37fcfda8988ba32b277e53de7ae756", "committedDate": "2020-04-03T11:18:54Z", "message": "Add linkUser support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MjE1NjQ1", "url": "https://github.com/realm/realm-java/pull/6795#pullrequestreview-387215645", "createdAt": "2020-04-03T12:36:58Z", "commit": {"oid": "f25a8aee0e37fcfda8988ba32b277e53de7ae756"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjozNjo1OFrOGATlfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzowNTozMVrOGAUlog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3NDA3OA==", "bodyText": "ApiKeyAuthProvider was added in another PR", "url": "https://github.com/realm/realm-java/pull/6795#discussion_r402974078", "createdAt": "2020-04-03T12:36:58Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmCredentialsTests.kt", "diffHunk": "@@ -80,60 +95,117 @@ class RealmCredentialsTests {\n     @Test\n     fun emailPassword() {\n         val creds = RealmCredentials.emailPassword(\"foo@bar.com\", \"secret\")\n-        assertEquals(\"local-userpass\", creds.identityProvider)\n+        assertEquals(\"local-userpass\", creds.identityProvider.id)\n         // Treat the JSON as a largely opaque value.\n         assertTrue(creds.asJson().contains(\"foo@bar.com\"))\n         assertTrue(creds.asJson().contains(\"secret\"))\n     }\n \n     @Test\n     fun emailPassword_invalidInput() {\n-        TODO()\n+        expectException<java.lang.IllegalArgumentException> { RealmCredentials.emailPassword(\"\", \"password\") }\n+        expectException<java.lang.IllegalArgumentException> { RealmCredentials.emailPassword(\"email\", \"\") }\n+        expectException<java.lang.IllegalArgumentException> { RealmCredentials.emailPassword(TestHelper.getNull(), \"password\") }\n+        expectException<java.lang.IllegalArgumentException> { RealmCredentials.emailPassword(\"email\", TestHelper.getNull()) }\n     }\n \n     @Test\n     fun facebook() {\n         val creds = RealmCredentials.facebook(\"fb-token\")\n-        assertEquals(\"oauth2-facebook\", creds.identityProvider)\n+        assertEquals(\"oauth2-facebook\", creds.identityProvider.id)\n         assertTrue(creds.asJson().contains(\"fb-token\"))\n     }\n \n     @Test\n     fun facebook_invalidInput() {\n-        try {\n-            RealmCredentials.facebook(\"\")\n-        } catch (ignored: IllegalArgumentException) {\n-        }\n+        expectException<java.lang.IllegalArgumentException> { RealmCredentials.facebook(\"\") }\n+        expectException<java.lang.IllegalArgumentException> { RealmCredentials.facebook(TestHelper.getNull()) }\n     }\n \n     @Test\n     fun google() {\n         val creds = RealmCredentials.google(\"google-token\")\n-        assertEquals(\"google\", creds.identityProvider)\n+        assertEquals(\"oauth2-google\", creds.identityProvider.id)\n         assertTrue(creds.asJson().contains(\"google-token\"))\n     }\n \n     @Test\n     fun google_invalidInput() {\n-        try {\n-            RealmCredentials.google(\"\")\n-        } catch (ignored: IllegalArgumentException) {\n-        }\n+        expectException<java.lang.IllegalArgumentException> { RealmCredentials.google(\"\") }\n+        expectException<java.lang.IllegalArgumentException> { RealmCredentials.google(TestHelper.getNull()) }\n     }\n \n+    @Ignore(\"FIXME: Awaiting ObjectStore support\")\n     @Test\n     fun jwt() {\n         val creds = RealmCredentials.google(\"jwt-token\")\n-        assertEquals(\"jwt\", creds.identityProvider)\n+        assertEquals(\"jwt\", creds.identityProvider.id)\n         assertTrue(creds.asJson().contains(\"jwt-token\"))\n     }\n \n     @Test\n     fun jwt_invalidInput() {\n+        expectException<java.lang.IllegalArgumentException> { RealmCredentials.jwt(\"\") }\n+        expectException<java.lang.IllegalArgumentException> { RealmCredentials.jwt(TestHelper.getNull()) }\n+    }\n+\n+    fun expectErrorCode(app: RealmApp, expectedCode: ErrorCode, credentials: RealmCredentials) {\n         try {\n-            RealmCredentials.google(\"\")\n-        } catch (ignored: IllegalArgumentException) {\n+            app.login(credentials)\n+            fail()\n+        } catch (error: ObjectServerError) {\n+            assertEquals(expectedCode, error.errorCode)\n         }\n     }\n \n+    @Test\n+    fun loginUsingCredentials() {\n+        val app = TestRealmApp()\n+        try {\n+            RealmCredentials.IdentityProvider.values().forEach { provider ->\n+                when(provider) {\n+                    RealmCredentials.IdentityProvider.ANONYMOUS -> {\n+                        val user = app.login(RealmCredentials.anonymous())\n+                        assertNotNull(user)\n+                    }\n+                    RealmCredentials.IdentityProvider.API_KEY -> {\n+                        // FiXME: Wait for ApiKeyAuthProvider support", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25a8aee0e37fcfda8988ba32b277e53de7ae756"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTQyOQ==", "bodyText": "so this is only useful for anonymous users?", "url": "https://github.com/realm/realm-java/pull/6795#discussion_r402981429", "createdAt": "2020-04-03T12:49:55Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -153,6 +154,80 @@ public RealmUser switchUser(RealmUser user) {\n         return user;\n     }\n \n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        final RealmUser user = currentUser();\n+        if (user == null) {\n+            throw new IllegalStateException(\"No user is logged in\");\n+        }\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(nativePtr, user.osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected void mapSuccess(Object result, AtomicReference<RealmUser> success) {\n+                user.osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                success.set(user);\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25a8aee0e37fcfda8988ba32b277e53de7ae756"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTczMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If there was already an current user, that user is still logged in and can be found in the\n          \n          \n            \n                 * If there was already a current user, that user is still logged in and can be found in the", "url": "https://github.com/realm/realm-java/pull/6795#discussion_r402981730", "createdAt": "2020-04-03T12:50:29Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -197,11 +272,20 @@ public RealmUser run() throws ObjectServerError {\n     }\n \n     /**\n-     * FIXME\n+     * Logs in as a user with the given credentials associated with an authentication provider.\n+     * <p>\n+     * The user who logs in becomes the current user. Other RealmApp functionality acts on behalf of\n+     * the current user.\n+     * <p>\n+     * If there was already an current user, that user is still logged in and can be found in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25a8aee0e37fcfda8988ba32b277e53de7ae756"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MjEyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If there was already an current user, that user is still logged in and can be found in the\n          \n          \n            \n                 * If there was already a current user, that user is still logged in and can be found in the", "url": "https://github.com/realm/realm-java/pull/6795#discussion_r402982128", "createdAt": "2020-04-03T12:51:14Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -218,13 +302,24 @@ protected void mapSuccess(Object result, AtomicReference<RealmUser> success) {\n     }\n \n     /**\n-     * FIXME\n-     * @param credentials\n-     * @param callback\n-     * @return\n+     * Logs in as a user with the given credentials associated with an authentication provider.\n+     * <p>\n+     * The user who logs in becomes the current user. Other RealmApp functionality acts on behalf of\n+     * the current user.\n+     * <p>\n+     * If there was already an current user, that user is still logged in and can be found in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25a8aee0e37fcfda8988ba32b277e53de7ae756"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4NTkxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Logging the user out again means that data is lost with no means of recovery\n          \n          \n            \n                 * Log in the user out again means that data is lost with no means of recovery", "url": "https://github.com/realm/realm-java/pull/6795#discussion_r402985912", "createdAt": "2020-04-03T12:57:33Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmCredentials.java", "diffHunk": "@@ -19,139 +19,148 @@\n import io.realm.internal.Util;\n import io.realm.internal.objectstore.OsAppCredentials;\n \n-\n /**\n- * FIXME: Revisit this description when all providers are implemented.\n- *\n- * Credentials represent a login with a 3rd party login provider in an OAuth2 login flow, and are used by the Realm\n- * Object Server to verify the user and grant access.\n+ * Credentials represent a login with a given login provider, and are used by the MongoDB Realm to\n+ * verify the user and grant access. The {@link IdentityProvider#EMAIL_PASSWORD} provider is enabled\n+ * by default. All other providers must be enabled on MongoDB Realm to work.\n  * <p>\n- * Logging into the Realm Object Server consists of the following steps:\n- * <ol>\n- * <li>\n- *     Log in to 3rd party provider (Facebook or Google). The result is usually an Authorization Grant that must be\n- *     saved in a {@link RealmCredentials} object of the proper type e.g., {@link RealmCredentials#facebook(String)} for a\n- *     Facebook login.\n- * </li>\n- * <li>\n- *     Authenticate a {@link RealmUser} through the Object Server using these credentials. Once authenticated,\n- *     an Object Server user is returned. Then this user can be attached to a {@link io.realm.SyncConfiguration}, which\n- *     will make it possible to synchronize data between the local and remote Realm.\n- *     <p>\n- *     It is possible to persist the user object e.g., using the {@link UserStore}. That means, logging\n- *     into an OAuth2 provider is only required the first time the app is used.\n- * </li>\n- * </ol>\n- *\n+ * Note that users wanting to login using Email/Password must register first using\n+ * {@link io.realm.EmailPasswordAuthProvider#registerUser(String, String)}.\n+ * </p>\n+ * Credentials are used the following way:\n  * <pre>\n  * {@code\n  * // Example\n- *\n- * Credentials credentials = Credentials.facebook(getFacebookToken());\n- * User.login(credentials, \"http://objectserver.realm.io/auth\", new User.Callback() {\n- *     \\@Override\n- *     public void onSuccess(User user) {\n- *          // User is now authenticated and be be used to open Realms.\n- *     }\n- *\n- *     \\@Override\n- *     public void onError(ObjectServerError error) {\n- *\n+ * RealmApp app = new RealmApp(\"app-id\");\n+ * RealmCredentials credentials = RealmCredentials.emailPassword(\"email\", \"password\");\n+ * RealmUser user = app.loginAsync(credentials, new RealmApp.Callback<RealmUser>() {\n+ *   \\@Override\n+ *   public void onResult(Result<RealmUser> result) {\n+ *     if (result.isSuccess() {\n+ *       handleLogin(result.get());\n+ *     } else {\n+ *       handleError(result.getError());\n  *     }\n- * });\n+ *   }\n+ * ));\n  * }\n  * </pre>\n+ * @see <a href=\"https://docs.mongodb.com/stitch/authentication/providers/\">Authentication Providers</a>\n  */\n public class RealmCredentials {\n \n     OsAppCredentials osCredentials;\n \n     /**\n-     * FIXME\n-     * Creates credentials anonymously.\n-     *\n-     *  Note: logging the user out again means that data is lost with no means of recovery\n-     *  and it isn't possible to share the user details across devices.\n+     * Creates credentials representing an anonymous user.\n+     * <p>\n+     * Logging the user out again means that data is lost with no means of recovery", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25a8aee0e37fcfda8988ba32b277e53de7ae756"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4ODY4OQ==", "bodyText": "FIXME for any upcoming params checks", "url": "https://github.com/realm/realm-java/pull/6795#discussion_r402988689", "createdAt": "2020-04-03T13:02:21Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmCredentials.java", "diffHunk": "@@ -19,139 +19,148 @@\n import io.realm.internal.Util;\n import io.realm.internal.objectstore.OsAppCredentials;\n \n-\n /**\n- * FIXME: Revisit this description when all providers are implemented.\n- *\n- * Credentials represent a login with a 3rd party login provider in an OAuth2 login flow, and are used by the Realm\n- * Object Server to verify the user and grant access.\n+ * Credentials represent a login with a given login provider, and are used by the MongoDB Realm to\n+ * verify the user and grant access. The {@link IdentityProvider#EMAIL_PASSWORD} provider is enabled\n+ * by default. All other providers must be enabled on MongoDB Realm to work.\n  * <p>\n- * Logging into the Realm Object Server consists of the following steps:\n- * <ol>\n- * <li>\n- *     Log in to 3rd party provider (Facebook or Google). The result is usually an Authorization Grant that must be\n- *     saved in a {@link RealmCredentials} object of the proper type e.g., {@link RealmCredentials#facebook(String)} for a\n- *     Facebook login.\n- * </li>\n- * <li>\n- *     Authenticate a {@link RealmUser} through the Object Server using these credentials. Once authenticated,\n- *     an Object Server user is returned. Then this user can be attached to a {@link io.realm.SyncConfiguration}, which\n- *     will make it possible to synchronize data between the local and remote Realm.\n- *     <p>\n- *     It is possible to persist the user object e.g., using the {@link UserStore}. That means, logging\n- *     into an OAuth2 provider is only required the first time the app is used.\n- * </li>\n- * </ol>\n- *\n+ * Note that users wanting to login using Email/Password must register first using\n+ * {@link io.realm.EmailPasswordAuthProvider#registerUser(String, String)}.\n+ * </p>\n+ * Credentials are used the following way:\n  * <pre>\n  * {@code\n  * // Example\n- *\n- * Credentials credentials = Credentials.facebook(getFacebookToken());\n- * User.login(credentials, \"http://objectserver.realm.io/auth\", new User.Callback() {\n- *     \\@Override\n- *     public void onSuccess(User user) {\n- *          // User is now authenticated and be be used to open Realms.\n- *     }\n- *\n- *     \\@Override\n- *     public void onError(ObjectServerError error) {\n- *\n+ * RealmApp app = new RealmApp(\"app-id\");\n+ * RealmCredentials credentials = RealmCredentials.emailPassword(\"email\", \"password\");\n+ * RealmUser user = app.loginAsync(credentials, new RealmApp.Callback<RealmUser>() {\n+ *   \\@Override\n+ *   public void onResult(Result<RealmUser> result) {\n+ *     if (result.isSuccess() {\n+ *       handleLogin(result.get());\n+ *     } else {\n+ *       handleError(result.getError());\n  *     }\n- * });\n+ *   }\n+ * ));\n  * }\n  * </pre>\n+ * @see <a href=\"https://docs.mongodb.com/stitch/authentication/providers/\">Authentication Providers</a>\n  */\n public class RealmCredentials {\n \n     OsAppCredentials osCredentials;\n \n     /**\n-     * FIXME\n-     * Creates credentials anonymously.\n-     *\n-     *  Note: logging the user out again means that data is lost with no means of recovery\n-     *  and it isn't possible to share the user details across devices.\n+     * Creates credentials representing an anonymous user.\n+     * <p>\n+     * Logging the user out again means that data is lost with no means of recovery\n+     * and it isn't possible to share the user details across devices.\n+     * <p>\n+     * The anonymous user must be linked to another real user to preserve data after a log out.\n      *\n-     * @return a set of credentials that can be used to log into the Object Server using\n+     * @return a set of credentials that can be used to log into MongoDB Realm using\n      * {@link RealmApp#loginAsync(RealmCredentials, RealmApp.Callback)}.\n      */\n     public static RealmCredentials anonymous() {\n         return new RealmCredentials(OsAppCredentials.anonymous());\n     }\n \n     /**\n-     * FIXME\n+     * Creates credentials representing a login using an API key.\n+     * <p>\n+     * This provider must be enabled on MongoDB Realm to work.\n+     *\n+     * @param key the API key to use for login.\n+     * @return a set of credentials that can be used to log into MongoDB Realm using\n+     * {@link RealmApp#loginAsync(RealmCredentials, RealmApp.Callback)}.\n      */\n     public static RealmCredentials apiKey(String key) {\n-        assertStringNotEmpty(key, \"id\");\n+        Util.checkEmpty(key, \"id\");\n         return new RealmCredentials(OsAppCredentials.apiKey(key));\n     }\n \n     /**\n-     * FIXME\n+     * Creates credentials representing a login using an Apple ID token.\n+     * <p>\n+     * This provider must be enabled on MongoDB Realm to work.\n+     *\n+     * @param idToken the ID token generated when using your Apple login.\n+     * @return a set of credentials that can be used to log into MongoDB Realm using\n+     * {@link RealmApp#loginAsync(RealmCredentials, RealmApp.Callback)}.\n      */\n     public static RealmCredentials apple(String idToken) {\n-        assertStringNotEmpty(idToken, \"idToken\");\n+        Util.checkEmpty(idToken, \"idToken\");\n         return new RealmCredentials(OsAppCredentials.apple(idToken));\n     }\n \n     /**\n      * FIXME\n+     * <p>\n+     * This provider must be enabled on MongoDB Realm to work.\n+     *\n+     * @return a set of credentials that can be used to log into MongoDB Realm using\n+     * {@link RealmApp#loginAsync(RealmCredentials, RealmApp.Callback)}.\n      */\n     public static RealmCredentials customFunction(String functionName, Object... arguments) {\n-//        assertStringNotEmpty(idToken, \"idToken\");\n+        // Util.checkEmpty(idToken, \"idToken\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25a8aee0e37fcfda8988ba32b277e53de7ae756"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MDA2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param googleToken the access token returned when logging in to Facebook.\n          \n          \n            \n                 * @param googleToken the access token returned when logging in to Google.", "url": "https://github.com/realm/realm-java/pull/6795#discussion_r402990068", "createdAt": "2020-04-03T13:04:48Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmCredentials.java", "diffHunk": "@@ -19,139 +19,148 @@\n import io.realm.internal.Util;\n import io.realm.internal.objectstore.OsAppCredentials;\n \n-\n /**\n- * FIXME: Revisit this description when all providers are implemented.\n- *\n- * Credentials represent a login with a 3rd party login provider in an OAuth2 login flow, and are used by the Realm\n- * Object Server to verify the user and grant access.\n+ * Credentials represent a login with a given login provider, and are used by the MongoDB Realm to\n+ * verify the user and grant access. The {@link IdentityProvider#EMAIL_PASSWORD} provider is enabled\n+ * by default. All other providers must be enabled on MongoDB Realm to work.\n  * <p>\n- * Logging into the Realm Object Server consists of the following steps:\n- * <ol>\n- * <li>\n- *     Log in to 3rd party provider (Facebook or Google). The result is usually an Authorization Grant that must be\n- *     saved in a {@link RealmCredentials} object of the proper type e.g., {@link RealmCredentials#facebook(String)} for a\n- *     Facebook login.\n- * </li>\n- * <li>\n- *     Authenticate a {@link RealmUser} through the Object Server using these credentials. Once authenticated,\n- *     an Object Server user is returned. Then this user can be attached to a {@link io.realm.SyncConfiguration}, which\n- *     will make it possible to synchronize data between the local and remote Realm.\n- *     <p>\n- *     It is possible to persist the user object e.g., using the {@link UserStore}. That means, logging\n- *     into an OAuth2 provider is only required the first time the app is used.\n- * </li>\n- * </ol>\n- *\n+ * Note that users wanting to login using Email/Password must register first using\n+ * {@link io.realm.EmailPasswordAuthProvider#registerUser(String, String)}.\n+ * </p>\n+ * Credentials are used the following way:\n  * <pre>\n  * {@code\n  * // Example\n- *\n- * Credentials credentials = Credentials.facebook(getFacebookToken());\n- * User.login(credentials, \"http://objectserver.realm.io/auth\", new User.Callback() {\n- *     \\@Override\n- *     public void onSuccess(User user) {\n- *          // User is now authenticated and be be used to open Realms.\n- *     }\n- *\n- *     \\@Override\n- *     public void onError(ObjectServerError error) {\n- *\n+ * RealmApp app = new RealmApp(\"app-id\");\n+ * RealmCredentials credentials = RealmCredentials.emailPassword(\"email\", \"password\");\n+ * RealmUser user = app.loginAsync(credentials, new RealmApp.Callback<RealmUser>() {\n+ *   \\@Override\n+ *   public void onResult(Result<RealmUser> result) {\n+ *     if (result.isSuccess() {\n+ *       handleLogin(result.get());\n+ *     } else {\n+ *       handleError(result.getError());\n  *     }\n- * });\n+ *   }\n+ * ));\n  * }\n  * </pre>\n+ * @see <a href=\"https://docs.mongodb.com/stitch/authentication/providers/\">Authentication Providers</a>\n  */\n public class RealmCredentials {\n \n     OsAppCredentials osCredentials;\n \n     /**\n-     * FIXME\n-     * Creates credentials anonymously.\n-     *\n-     *  Note: logging the user out again means that data is lost with no means of recovery\n-     *  and it isn't possible to share the user details across devices.\n+     * Creates credentials representing an anonymous user.\n+     * <p>\n+     * Logging the user out again means that data is lost with no means of recovery\n+     * and it isn't possible to share the user details across devices.\n+     * <p>\n+     * The anonymous user must be linked to another real user to preserve data after a log out.\n      *\n-     * @return a set of credentials that can be used to log into the Object Server using\n+     * @return a set of credentials that can be used to log into MongoDB Realm using\n      * {@link RealmApp#loginAsync(RealmCredentials, RealmApp.Callback)}.\n      */\n     public static RealmCredentials anonymous() {\n         return new RealmCredentials(OsAppCredentials.anonymous());\n     }\n \n     /**\n-     * FIXME\n+     * Creates credentials representing a login using an API key.\n+     * <p>\n+     * This provider must be enabled on MongoDB Realm to work.\n+     *\n+     * @param key the API key to use for login.\n+     * @return a set of credentials that can be used to log into MongoDB Realm using\n+     * {@link RealmApp#loginAsync(RealmCredentials, RealmApp.Callback)}.\n      */\n     public static RealmCredentials apiKey(String key) {\n-        assertStringNotEmpty(key, \"id\");\n+        Util.checkEmpty(key, \"id\");\n         return new RealmCredentials(OsAppCredentials.apiKey(key));\n     }\n \n     /**\n-     * FIXME\n+     * Creates credentials representing a login using an Apple ID token.\n+     * <p>\n+     * This provider must be enabled on MongoDB Realm to work.\n+     *\n+     * @param idToken the ID token generated when using your Apple login.\n+     * @return a set of credentials that can be used to log into MongoDB Realm using\n+     * {@link RealmApp#loginAsync(RealmCredentials, RealmApp.Callback)}.\n      */\n     public static RealmCredentials apple(String idToken) {\n-        assertStringNotEmpty(idToken, \"idToken\");\n+        Util.checkEmpty(idToken, \"idToken\");\n         return new RealmCredentials(OsAppCredentials.apple(idToken));\n     }\n \n     /**\n      * FIXME\n+     * <p>\n+     * This provider must be enabled on MongoDB Realm to work.\n+     *\n+     * @return a set of credentials that can be used to log into MongoDB Realm using\n+     * {@link RealmApp#loginAsync(RealmCredentials, RealmApp.Callback)}.\n      */\n     public static RealmCredentials customFunction(String functionName, Object... arguments) {\n-//        assertStringNotEmpty(idToken, \"idToken\");\n+        // Util.checkEmpty(idToken, \"idToken\");\n         return new RealmCredentials(OsAppCredentials.customFunction(functionName, arguments));\n     }\n \n     /**\n-     * FIXME\n+     * Creates credentials representing a login using email and password.\n+     *\n+     * @param email email of the user logging in.\n+     * @param password password of the user logging in.\n+     * @return a set of credentials that can be used to log into MongoDB Realm using\n+     * {@link RealmApp#loginAsync(RealmCredentials, RealmApp.Callback)}.\n      */\n     public static RealmCredentials emailPassword(String email, String password) {\n-        assertStringNotEmpty(email, \"email\");\n-        assertStringNotEmpty(password, \"password\");\n+        Util.checkEmpty(email, \"email\");\n+        Util.checkEmpty(password, \"password\");\n         return new RealmCredentials(OsAppCredentials.emailPassword(email, password));\n     }\n \n     /**\n-     * FIXME\n-     * Creates credentials based on a Facebook login.\n+     * Creates credentials representing a login using an Facebook access token.\n+     * <p>\n+     * This provider must be enabled on MongoDB Realm to work.\n      *\n-     * @param accessToken a facebook userIdentifier acquired by logging into Facebook.\n-     * @return a set of credentials that can be used to log into the Object Server using\n+     * @param accessToken the access token returned when logging in to Facebook.\n+     * @return a set of credentials that can be used to log into MongoDB Realm using\n      * {@link RealmApp#loginAsync(RealmCredentials, RealmApp.Callback)}.\n-     * @throws IllegalArgumentException if user name is either {@code null} or empty.\n      */\n     public static RealmCredentials facebook(String accessToken) {\n-        assertStringNotEmpty(accessToken, \"accessToken\");\n+        Util.checkEmpty(accessToken, \"accessToken\");\n         return new RealmCredentials(OsAppCredentials.facebook(accessToken));\n     }\n \n     /**\n-     * FIXME\n-     * Creates credentials based on a Google login.\n+     * Creates credentials representing a login using an Google access token.\n+     * <p>\n+     * This provider must be enabled on MongoDB Realm to work.\n      *\n-     * @param googleToken a google userIdentifier acquired by logging into Google.\n-     * @return a set of credentials that can be used to log into the Object Server using\n+     * @param googleToken the access token returned when logging in to Facebook.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25a8aee0e37fcfda8988ba32b277e53de7ae756"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MDQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * All of these expect {@link #EMAIL_PASSWORD} must be enabled manually on MongoDB Realm to\n          \n          \n            \n                 * All of these except {@link #EMAIL_PASSWORD} must be enabled manually on MongoDB Realm to", "url": "https://github.com/realm/realm-java/pull/6795#discussion_r402990498", "createdAt": "2020-04-03T13:05:31Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmCredentials.java", "diffHunk": "@@ -173,64 +182,34 @@ public String asJson() {\n         return osCredentials.asJson();\n     }\n \n-    private static void assertStringNotEmpty(String string, String message) {\n-        //noinspection ConstantConditions\n-        if (Util.isEmptyString(string)) {\n-            throw new IllegalArgumentException(\"Non-null '\" + message + \"' required.\");\n-        }\n-    }\n-\n     private RealmCredentials(OsAppCredentials credentials) {\n         this.osCredentials = credentials;\n     }\n \n     /**\n-     * FIXME\n+     * This enum contains the list of identity providers supported by MongoDB Realm.\n+     * All of these expect {@link #EMAIL_PASSWORD} must be enabled manually on MongoDB Realm to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f25a8aee0e37fcfda8988ba32b277e53de7ae756"}, "originalPosition": 233}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0101288120a977c364371b3c675cba9ab8fd9646", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/0101288120a977c364371b3c675cba9ab8fd9646", "committedDate": "2020-04-03T13:32:37Z", "message": "Merge branch 'v10' into cm/app/login-credentials\n\n# Conflicts:\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac3868cb29caaf383deb568cf4e9cdc6a3705f5", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/2ac3868cb29caaf383deb568cf4e9cdc6a3705f5", "committedDate": "2020-04-03T13:35:52Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Nabil Hachicha <nh@realm.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf91ec26d7bbc7e9570529470883080072941fd3", "author": {"user": {"login": "cmelchior", "name": "Christian Melchior"}}, "url": "https://github.com/realm/realm-java/commit/cf91ec26d7bbc7e9570529470883080072941fd3", "committedDate": "2020-04-03T14:06:43Z", "message": "PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MjkzMzkw", "url": "https://github.com/realm/realm-java/pull/6795#pullrequestreview-387293390", "createdAt": "2020-04-03T14:12:23Z", "commit": {"oid": "cf91ec26d7bbc7e9570529470883080072941fd3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2477, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}