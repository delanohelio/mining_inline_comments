{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzY0MzU3", "number": 6837, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozODoyM1rOD50fyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo0NTo0NVrOD6VT5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTU1NTMxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozODoyM1rOGRTZ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDozNjozN1rOGSPSrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5Njg5MQ==", "bodyText": "Rather than deleting these when the functions are ready, I would actually put them in their own JniBsonProtocolTest file. I think these two functions are super useful in and of themselves to make sure we never brake the conversion. Maybe write a jniRoundTrip test for them.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420796891", "createdAt": "2020-05-06T13:38:23Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -15,16 +15,30 @@\n  */\n package io.realm;\n \n-import org.bson.BsonValue;\n+import org.bson.codecs.configuration.CodecRegistry;\n \n import io.realm.internal.jni.JniBsonProtocol;\n \n-public class RealmFunctions {\n+// FIXME This class is only a placeholder for JNI round trip as  until actual RealmFunctions\n+//  implementation supersedes it.\n+class RealmFunctions {\n+\n+    private CodecRegistry codecRegistry;\n+\n+    RealmFunctions(CodecRegistry codecRegistry) {\n+        this.codecRegistry = codecRegistry;\n+    }\n+\n+    // FIXME Prelimiry implementation to be able to test passing BsonValues through JNI\n+    <T> T invoke(Object arg, Class<T> resultClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3ODA5Mg==", "bodyText": "Yes, it already pinpointed some errors in C++ parsing. I migrated the test to work across the actual functions by echoing  from the Stitch server in #6810 , as it seems like there is currently no way to easily do test only JNI implementation.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421778092", "createdAt": "2020-05-07T20:36:37Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -15,16 +15,30 @@\n  */\n package io.realm;\n \n-import org.bson.BsonValue;\n+import org.bson.codecs.configuration.CodecRegistry;\n \n import io.realm.internal.jni.JniBsonProtocol;\n \n-public class RealmFunctions {\n+// FIXME This class is only a placeholder for JNI round trip as  until actual RealmFunctions\n+//  implementation supersedes it.\n+class RealmFunctions {\n+\n+    private CodecRegistry codecRegistry;\n+\n+    RealmFunctions(CodecRegistry codecRegistry) {\n+        this.codecRegistry = codecRegistry;\n+    }\n+\n+    // FIXME Prelimiry implementation to be able to test passing BsonValues through JNI\n+    <T> T invoke(Object arg, Class<T> resultClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5Njg5MQ=="}, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTU3NDAzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo0MjowOVrOGRTlMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoyNzo0MVrOGRVwkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5OTc5NQ==", "bodyText": "The functions should be created independently but come from them the user user.getFunctions() which I guess becomes user.functions in Kotlin. We should make the RealmFunctions constructor package-private if possible.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420799795", "createdAt": "2020-05-06T13:42:09Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwMTExNg==", "bodyText": "The functions need to be tied to a user. This isn't happening in ObjectStore right now, so we need to fix it there as well and pass in the user as a constructor argument from Java", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420801116", "createdAt": "2020-05-06T13:43:54Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5OTc5NQ=="}, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwOTk3Ng==", "bodyText": "Looking at the RealmFunctions class it was marked as \"in-progress\" I guess this is fine for now.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420809976", "createdAt": "2020-05-06T13:54:55Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5OTc5NQ=="}, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzNTQ3Mw==", "bodyText": "Yep. All actual function-implementation (creating it from users, etc.) is in #6810, as it requires OS bson stuff, and I did not want to pull that in yet.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420835473", "createdAt": "2020-05-06T14:27:41Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5OTc5NQ=="}, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTU5MTU4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo0NTo0NVrOGRTwNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo0NTo0NVrOGRTwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwMjYxNA==", "bodyText": "Seems to have been fixed in OS", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420802614", "createdAt": "2020-05-06T13:45:45Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    // Test of BSON JNI round trip until superseded with actual public api tests are added.\n+    @Test\n+    fun jniRoundTripForDefaultCodecRegistry() {\n+        val i32 = 42\n+        val i64 = 42L\n+\n+        for (type in BsonType.values()) {\n+            when (type) {\n+                BsonType.DOUBLE -> {\n+                    assertTypedEcho(java.lang.Float(1.4), java.lang.Float::class.java)\n+                    assertTypedEcho(java.lang.Double(1.4), java.lang.Double::class.java)\n+                    assertTypedEcho(BsonDouble(1.4), BsonDouble::class.java)\n+                }\n+                BsonType.STRING -> {\n+                    assertTypedEcho(\"Realm\", String::class.java)\n+                    assertTypedEcho(BsonString(\"Realm\"), BsonString::class.java)\n+                }\n+                BsonType.ARRAY -> {\n+                    // FIXME Fails in C++ parsing when boolean values are added...needs investigation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTU5Nzg4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo0NzowMVrOGRT0NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDozMDoyMFrOGRV4pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwMzYzNg==", "bodyText": "minor: Not sure I understand the Echo suffix. Am I missing some commonly known convention here?", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420803636", "createdAt": "2020-05-06T13:47:01Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    // Test of BSON JNI round trip until superseded with actual public api tests are added.\n+    @Test\n+    fun jniRoundTripForDefaultCodecRegistry() {\n+        val i32 = 42\n+        val i64 = 42L\n+\n+        for (type in BsonType.values()) {\n+            when (type) {\n+                BsonType.DOUBLE -> {\n+                    assertTypedEcho(java.lang.Float(1.4), java.lang.Float::class.java)\n+                    assertTypedEcho(java.lang.Double(1.4), java.lang.Double::class.java)\n+                    assertTypedEcho(BsonDouble(1.4), BsonDouble::class.java)\n+                }\n+                BsonType.STRING -> {\n+                    assertTypedEcho(\"Realm\", String::class.java)\n+                    assertTypedEcho(BsonString(\"Realm\"), BsonString::class.java)\n+                }\n+                BsonType.ARRAY -> {\n+                    // FIXME Fails in C++ parsing when boolean values are added...needs investigation\n+                    //  io.realm.exceptions.RealmError: Unrecoverable error. current state '$1' is not of expected state '$2' in /Users/claus.rorbech/proj/realm-java/realm/realm-library/src/main/cpp/io_realm_RealmFunctions.cpp line 32\n+                    //val listValues = listOf<Any>(true, i32, i64)\n+                    val listValues = listOf<Any>(i32, i64)\n+                    assertTypedEcho(listValues, List::class.java)\n+                }\n+                BsonType.BINARY -> {\n+                    val value = byteArrayOf(1, 2, 3)\n+                    val actual = functions.invoke(value, ByteArray::class.java)\n+                    assertEquals(value.toList(), actual.toList())\n+                    // FIXME Does not seem to preserve type\n+                    // assertTypedEcho(BsonBinary(UUID.randomUUID()), BsonBinary::class.java)\n+                    assertTypedEcho(BsonBinary(byteArrayOf(1,2,3)), BsonBinary::class.java)\n+                }\n+                BsonType.OBJECT_ID -> {\n+                    assertTypedEcho(ObjectId(), ObjectId::class.java)\n+                    assertTypedEcho(BsonObjectId(ObjectId()), BsonObjectId::class.java)\n+                }\n+                BsonType.BOOLEAN -> {\n+                    val value: Boolean = true\n+                    val actual: java.lang.Boolean = functions.invoke(value, java.lang.Boolean::class.java)\n+                    assertEquals(value, actual.booleanValue())\n+                    assertTypedEcho(BsonBoolean(true), BsonBoolean::class.java)\n+                }\n+                BsonType.INT32 -> {\n+                    assertTypedEcho(java.lang.Integer(32), Integer::class.java)\n+                    assertTypedEcho(BsonInt32(32), BsonInt32::class.java)\n+                }\n+                BsonType.INT64 -> {\n+                    assertTypedEcho(java.lang.Long(32L), java.lang.Long::class.java)\n+                    assertTypedEcho(BsonInt64(32), BsonInt64::class.java)\n+                }\n+                BsonType.DECIMAL128 -> {\n+                    assertTypedEcho(Decimal128(32L), Decimal128::class.java)\n+                    assertTypedEcho(BsonDecimal128(Decimal128(32L)), BsonDecimal128::class.java)\n+                }\n+                // TODO\n+                BsonType.DOCUMENT,\n+                BsonType.UNDEFINED,\n+                BsonType.DATE_TIME,\n+                BsonType.NULL,\n+                BsonType.REGULAR_EXPRESSION,\n+                BsonType.SYMBOL,\n+                BsonType.DB_POINTER,\n+                BsonType.JAVASCRIPT,\n+                BsonType.JAVASCRIPT_WITH_SCOPE,\n+                BsonType.TIMESTAMP,\n+                BsonType.END_OF_DOCUMENT,\n+                BsonType.MIN_KEY,\n+                BsonType.MAX_KEY -> {\n+                    // No conversion is implemented for these types yet\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun <T: Any> assertTypedEcho(value: T, returnClass: Class<T>) : T {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzNzU0Mg==", "bodyText": "No. Just because the underlying JNI implementation is just echo'ing (returning the arguments directly) as it is not yet hitting the action Stitch functions .", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420837542", "createdAt": "2020-05-06T14:30:20Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    // Test of BSON JNI round trip until superseded with actual public api tests are added.\n+    @Test\n+    fun jniRoundTripForDefaultCodecRegistry() {\n+        val i32 = 42\n+        val i64 = 42L\n+\n+        for (type in BsonType.values()) {\n+            when (type) {\n+                BsonType.DOUBLE -> {\n+                    assertTypedEcho(java.lang.Float(1.4), java.lang.Float::class.java)\n+                    assertTypedEcho(java.lang.Double(1.4), java.lang.Double::class.java)\n+                    assertTypedEcho(BsonDouble(1.4), BsonDouble::class.java)\n+                }\n+                BsonType.STRING -> {\n+                    assertTypedEcho(\"Realm\", String::class.java)\n+                    assertTypedEcho(BsonString(\"Realm\"), BsonString::class.java)\n+                }\n+                BsonType.ARRAY -> {\n+                    // FIXME Fails in C++ parsing when boolean values are added...needs investigation\n+                    //  io.realm.exceptions.RealmError: Unrecoverable error. current state '$1' is not of expected state '$2' in /Users/claus.rorbech/proj/realm-java/realm/realm-library/src/main/cpp/io_realm_RealmFunctions.cpp line 32\n+                    //val listValues = listOf<Any>(true, i32, i64)\n+                    val listValues = listOf<Any>(i32, i64)\n+                    assertTypedEcho(listValues, List::class.java)\n+                }\n+                BsonType.BINARY -> {\n+                    val value = byteArrayOf(1, 2, 3)\n+                    val actual = functions.invoke(value, ByteArray::class.java)\n+                    assertEquals(value.toList(), actual.toList())\n+                    // FIXME Does not seem to preserve type\n+                    // assertTypedEcho(BsonBinary(UUID.randomUUID()), BsonBinary::class.java)\n+                    assertTypedEcho(BsonBinary(byteArrayOf(1,2,3)), BsonBinary::class.java)\n+                }\n+                BsonType.OBJECT_ID -> {\n+                    assertTypedEcho(ObjectId(), ObjectId::class.java)\n+                    assertTypedEcho(BsonObjectId(ObjectId()), BsonObjectId::class.java)\n+                }\n+                BsonType.BOOLEAN -> {\n+                    val value: Boolean = true\n+                    val actual: java.lang.Boolean = functions.invoke(value, java.lang.Boolean::class.java)\n+                    assertEquals(value, actual.booleanValue())\n+                    assertTypedEcho(BsonBoolean(true), BsonBoolean::class.java)\n+                }\n+                BsonType.INT32 -> {\n+                    assertTypedEcho(java.lang.Integer(32), Integer::class.java)\n+                    assertTypedEcho(BsonInt32(32), BsonInt32::class.java)\n+                }\n+                BsonType.INT64 -> {\n+                    assertTypedEcho(java.lang.Long(32L), java.lang.Long::class.java)\n+                    assertTypedEcho(BsonInt64(32), BsonInt64::class.java)\n+                }\n+                BsonType.DECIMAL128 -> {\n+                    assertTypedEcho(Decimal128(32L), Decimal128::class.java)\n+                    assertTypedEcho(BsonDecimal128(Decimal128(32L)), BsonDecimal128::class.java)\n+                }\n+                // TODO\n+                BsonType.DOCUMENT,\n+                BsonType.UNDEFINED,\n+                BsonType.DATE_TIME,\n+                BsonType.NULL,\n+                BsonType.REGULAR_EXPRESSION,\n+                BsonType.SYMBOL,\n+                BsonType.DB_POINTER,\n+                BsonType.JAVASCRIPT,\n+                BsonType.JAVASCRIPT_WITH_SCOPE,\n+                BsonType.TIMESTAMP,\n+                BsonType.END_OF_DOCUMENT,\n+                BsonType.MIN_KEY,\n+                BsonType.MAX_KEY -> {\n+                    // No conversion is implemented for these types yet\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun <T: Any> assertTypedEcho(value: T, returnClass: Class<T>) : T {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwMzYzNg=="}, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTYwNTIxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo0ODozMVrOGRT4yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjo1NTo1MFrOGRw0kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNDgxMQ==", "bodyText": "What about the primitive types? This is the boxed types if I remember correctly? Same for the other tests", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420804811", "createdAt": "2020-05-06T13:48:31Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    // Test of BSON JNI round trip until superseded with actual public api tests are added.\n+    @Test\n+    fun jniRoundTripForDefaultCodecRegistry() {\n+        val i32 = 42\n+        val i64 = 42L\n+\n+        for (type in BsonType.values()) {\n+            when (type) {\n+                BsonType.DOUBLE -> {\n+                    assertTypedEcho(java.lang.Float(1.4), java.lang.Float::class.java)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3ODg2NA==", "bodyText": "Yes. There were some constraints around typing for the asertTypedEcho call to match the result. I have updated it to direct invoke-calls, to be able to keep the primitive types.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421278864", "createdAt": "2020-05-07T06:55:50Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    // Test of BSON JNI round trip until superseded with actual public api tests are added.\n+    @Test\n+    fun jniRoundTripForDefaultCodecRegistry() {\n+        val i32 = 42\n+        val i64 = 42L\n+\n+        for (type in BsonType.values()) {\n+            when (type) {\n+                BsonType.DOUBLE -> {\n+                    assertTypedEcho(java.lang.Float(1.4), java.lang.Float::class.java)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNDgxMQ=="}, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTYxMDk4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo0OTozN1rOGRT8ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjo1Mzo0MFrOGRwwXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNTczOA==", "bodyText": "UUID is a custom type. Maybe because a CodeRegistry is missing?", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420805738", "createdAt": "2020-05-06T13:49:37Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    // Test of BSON JNI round trip until superseded with actual public api tests are added.\n+    @Test\n+    fun jniRoundTripForDefaultCodecRegistry() {\n+        val i32 = 42\n+        val i64 = 42L\n+\n+        for (type in BsonType.values()) {\n+            when (type) {\n+                BsonType.DOUBLE -> {\n+                    assertTypedEcho(java.lang.Float(1.4), java.lang.Float::class.java)\n+                    assertTypedEcho(java.lang.Double(1.4), java.lang.Double::class.java)\n+                    assertTypedEcho(BsonDouble(1.4), BsonDouble::class.java)\n+                }\n+                BsonType.STRING -> {\n+                    assertTypedEcho(\"Realm\", String::class.java)\n+                    assertTypedEcho(BsonString(\"Realm\"), BsonString::class.java)\n+                }\n+                BsonType.ARRAY -> {\n+                    // FIXME Fails in C++ parsing when boolean values are added...needs investigation\n+                    //  io.realm.exceptions.RealmError: Unrecoverable error. current state '$1' is not of expected state '$2' in /Users/claus.rorbech/proj/realm-java/realm/realm-library/src/main/cpp/io_realm_RealmFunctions.cpp line 32\n+                    //val listValues = listOf<Any>(true, i32, i64)\n+                    val listValues = listOf<Any>(i32, i64)\n+                    assertTypedEcho(listValues, List::class.java)\n+                }\n+                BsonType.BINARY -> {\n+                    val value = byteArrayOf(1, 2, 3)\n+                    val actual = functions.invoke(value, ByteArray::class.java)\n+                    assertEquals(value.toList(), actual.toList())\n+                    // FIXME Does not seem to preserve type\n+                    // assertTypedEcho(BsonBinary(UUID.randomUUID()), BsonBinary::class.java)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3Nzc4OQ==", "bodyText": "Seems to be that the C++ roundtrip actually reset subtube. I will raise it with OS.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421277789", "createdAt": "2020-05-07T06:53:40Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTests.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.bson.*\n+import org.bson.codecs.StringCodec\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.codecs.pojo.PojoCodecProvider\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTests {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var functions : RealmFunctions\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        functions = RealmFunctions(app.configuration.codecRegistry)\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    // Test of BSON JNI round trip until superseded with actual public api tests are added.\n+    @Test\n+    fun jniRoundTripForDefaultCodecRegistry() {\n+        val i32 = 42\n+        val i64 = 42L\n+\n+        for (type in BsonType.values()) {\n+            when (type) {\n+                BsonType.DOUBLE -> {\n+                    assertTypedEcho(java.lang.Float(1.4), java.lang.Float::class.java)\n+                    assertTypedEcho(java.lang.Double(1.4), java.lang.Double::class.java)\n+                    assertTypedEcho(BsonDouble(1.4), BsonDouble::class.java)\n+                }\n+                BsonType.STRING -> {\n+                    assertTypedEcho(\"Realm\", String::class.java)\n+                    assertTypedEcho(BsonString(\"Realm\"), BsonString::class.java)\n+                }\n+                BsonType.ARRAY -> {\n+                    // FIXME Fails in C++ parsing when boolean values are added...needs investigation\n+                    //  io.realm.exceptions.RealmError: Unrecoverable error. current state '$1' is not of expected state '$2' in /Users/claus.rorbech/proj/realm-java/realm/realm-library/src/main/cpp/io_realm_RealmFunctions.cpp line 32\n+                    //val listValues = listOf<Any>(true, i32, i64)\n+                    val listValues = listOf<Any>(i32, i64)\n+                    assertTypedEcho(listValues, List::class.java)\n+                }\n+                BsonType.BINARY -> {\n+                    val value = byteArrayOf(1, 2, 3)\n+                    val actual = functions.invoke(value, ByteArray::class.java)\n+                    assertEquals(value.toList(), actual.toList())\n+                    // FIXME Does not seem to preserve type\n+                    // assertTypedEcho(BsonBinary(UUID.randomUUID()), BsonBinary::class.java)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNTczOA=="}, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTYxNzEwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1MDo1M1rOGRUAPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjo1Mjo0NlrOGRwuqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNjcxNw==", "bodyText": "Should probably be getDefaultCodecRegistry", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420806717", "createdAt": "2020-05-06T13:50:53Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getCodecRegistry() { return codecRegistry; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3NzM1NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421277355", "createdAt": "2020-05-07T06:52:46Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getCodecRegistry() { return codecRegistry; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNjcxNw=="}, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTYyNDk1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1MjoyOVrOGRUFJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1MjoyOVrOGRUFJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNzk3NQ==", "bodyText": "It is fine to keep this public as long as there is a Javadoc stating it is still work-in-progress. The v10 branch is considered under development anyway, so merging \"half-finshed\" work should be okay as long as it is marked as such and doesn't break existing functionality.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420807975", "createdAt": "2020-05-06T13:52:29Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -15,16 +15,30 @@\n  */\n package io.realm;\n \n-import org.bson.BsonValue;\n+import org.bson.codecs.configuration.CodecRegistry;\n \n import io.realm.internal.jni.JniBsonProtocol;\n \n-public class RealmFunctions {\n+// FIXME This class is only a placeholder for JNI round trip as  until actual RealmFunctions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTYzMTYzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/jni/JniBsonProtocol.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1Mzo0NVrOGRUJHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1Mzo0NVrOGRUJHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwODk4OQ==", "bodyText": "Nitpick: Newlines are missing between these methods", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420808989", "createdAt": "2020-05-06T13:53:45Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/jni/JniBsonProtocol.java", "diffHunk": "@@ -35,14 +44,30 @@\n                 .outputMode(JsonMode.EXTENDED)\n                 .build();\n \n-    public static String encode(BsonValue bsonValue) {\n-        BsonDocument document = new BsonDocument(VALUE, bsonValue);\n-        return document.toJson(writerSettings);\n+    public static <T> String encode(T value, CodecRegistry registry) {\n+        return encode(value, (Encoder<T>)registry.get(value.getClass()));\n+    }\n+    public static <T> String encode(T value, Encoder<T> encoder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzQ4OTI5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo1MzoyNFrOGR5J4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODo1MzowN1rOGSL31A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg==", "bodyText": "Just stumbled upon the BsonUtils.java class in the Stitch SDK. The use this:\n  public static final CodecRegistry DEFAULT_CODEC_REGISTRY =\n      fromProviders(\n          asList(\n              new ValueCodecProvider(),\n              new BsonValueCodecProvider(),\n              new DocumentCodecProvider(),\n              new IterableCodecProvider(),\n              new MapCodecProvider()));", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421415392", "createdAt": "2020-05-07T10:53:24Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getDefaultCodecRegistry() { return codecRegistry; }\n+\n     /**\n      * FIXME\n      */\n     public static class Builder {\n+        // Default BSON codec for passing BSON to/from JNI\n+        static CodecRegistry DEFAULT_BSON_CODEC_REGISTRY = CodecRegistries.fromRegistries(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8321494eb2da51ef64be6063ca8a1397347c8b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0NTQ5NA==", "bodyText": "@rorbech Any thoughts on the above \u261d\ufe0f ? I would assume we would go with the broadest possible set of defaults, so whatever type people bring there is a fair good chance it will work?", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421645494", "createdAt": "2020-05-07T16:44:16Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getDefaultCodecRegistry() { return codecRegistry; }\n+\n     /**\n      * FIXME\n      */\n     public static class Builder {\n+        // Default BSON codec for passing BSON to/from JNI\n+        static CodecRegistry DEFAULT_BSON_CODEC_REGISTRY = CodecRegistries.fromRegistries(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg=="}, "originalCommit": {"oid": "ae8321494eb2da51ef64be6063ca8a1397347c8b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxNzMyOA==", "bodyText": "Did not evaluate all providers/codecs yet, but just added what I immediately spotted as userful.\nThe MapCodecProvider sounds like an obvious candidate, and from @edualonso it sounded like the DocumentCodecProvider would be useful for the collections.\nSo the above DEFAULT_CODEC_REGISTRY sound like a good update, but given the parser issues lower down the stack I would prefer awaiting usage/tests and add them in another PR to avoid pushing this one further.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421717328", "createdAt": "2020-05-07T18:44:54Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getDefaultCodecRegistry() { return codecRegistry; }\n+\n     /**\n      * FIXME\n      */\n     public static class Builder {\n+        // Default BSON codec for passing BSON to/from JNI\n+        static CodecRegistry DEFAULT_BSON_CODEC_REGISTRY = CodecRegistries.fromRegistries(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg=="}, "originalCommit": {"oid": "ae8321494eb2da51ef64be6063ca8a1397347c8b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxODU4MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421718580", "createdAt": "2020-05-07T18:47:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getDefaultCodecRegistry() { return codecRegistry; }\n+\n     /**\n      * FIXME\n      */\n     public static class Builder {\n+        // Default BSON codec for passing BSON to/from JNI\n+        static CodecRegistry DEFAULT_BSON_CODEC_REGISTRY = CodecRegistries.fromRegistries(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg=="}, "originalCommit": {"oid": "ae8321494eb2da51ef64be6063ca8a1397347c8b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMjA2OA==", "bodyText": "I added it as TODO on #6810", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421722068", "createdAt": "2020-05-07T18:53:07Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getDefaultCodecRegistry() { return codecRegistry; }\n+\n     /**\n      * FIXME\n      */\n     public static class Builder {\n+        // Default BSON codec for passing BSON to/from JNI\n+        static CodecRegistry DEFAULT_BSON_CODEC_REGISTRY = CodecRegistries.fromRegistries(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg=="}, "originalCommit": {"oid": "ae8321494eb2da51ef64be6063ca8a1397347c8b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDkzMTU5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo0NTo0NVrOGSHQKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODo1MjozNVrOGSL2dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0NjM3OA==", "bodyText": "We don't have a similar name. I find this name really exotic and not very readable (as a non-native english speaker), but given that I don't really have a good alternative we might as well adopt this I guess. It does has the benefit that it will be familiar to anyone coming to it from the Mongo side.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421646378", "createdAt": "2020-05-07T16:45:45Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -388,6 +413,14 @@ public Builder syncRootDirectory(File rootDir) {\n             return this;\n         }\n \n+        // FIXME Naming: Does it clash with Realm sync concepts and set up wrong expectations?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2720f070030dd786a150412209f8c7566a12ece2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMTcxOQ==", "bodyText": "Ok, will keep it then.", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421721719", "createdAt": "2020-05-07T18:52:35Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -388,6 +413,14 @@ public Builder syncRootDirectory(File rootDir) {\n             return this;\n         }\n \n+        // FIXME Naming: Does it clash with Realm sync concepts and set up wrong expectations?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0NjM3OA=="}, "originalCommit": {"oid": "2720f070030dd786a150412209f8c7566a12ece2"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 685, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}