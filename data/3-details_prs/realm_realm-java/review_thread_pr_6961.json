{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTQ4NDY2", "number": 6961, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoxNTo0NFrOEHdAzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0Njo1MlrOEKZrrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjUwODI4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoxNTo0NFrOGm0gNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoxNTo0NFrOGm0gNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1OTI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * </p>", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443359287", "createdAt": "2020-06-22T07:15:44Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -424,6 +441,7 @@ public Builder defaultSyncErrorHandler(SyncSession.ErrorHandler errorHandler) {\n          * <p>\n          * The default root dir is {@code Context.getFilesDir()/mongodb-realm}.\n          * </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjUzMzQ1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoyNDo0MFrOGm0wLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODoyNTowM1rOGm2pOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzM3Mg==", "bodyText": "Maybe we should unwrap this into an actual LoggingInterceptor that could be passed into the OkHttpNetworkTransport.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443363372", "createdAt": "2020-06-22T07:24:40Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java", "diffHunk": "@@ -90,7 +99,10 @@ private synchronized OkHttpClient getClient(long timeoutMs) {\n                                     // We only expect request context to be JSON.\n                                     Buffer buffer = new Buffer();\n                                     request.body().writeTo(buffer);\n-                                    sb.append(buffer.readString(UTF8));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3NTk0NA==", "bodyText": "Makes sense \ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443375944", "createdAt": "2020-06-22T07:50:02Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java", "diffHunk": "@@ -90,7 +99,10 @@ private synchronized OkHttpClient getClient(long timeoutMs) {\n                                     // We only expect request context to be JSON.\n                                     Buffer buffer = new Buffer();\n                                     request.body().writeTo(buffer);\n-                                    sb.append(buffer.readString(UTF8));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzM3Mg=="}, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NDM2MQ==", "bodyText": "Sounds like a good idea.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443394361", "createdAt": "2020-06-22T08:25:03Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java", "diffHunk": "@@ -90,7 +99,10 @@ private synchronized OkHttpClient getClient(long timeoutMs) {\n                                     // We only expect request context to be JSON.\n                                     Buffer buffer = new Buffer();\n                                     request.body().writeTo(buffer);\n-                                    sb.append(buffer.readString(UTF8));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzM3Mg=="}, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjU4NDc2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/EmailPasswordObfuscator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo0MToxOFrOGm1PrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODoyNzozOFrOGm2vpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MTQzNw==", "bodyText": "Is this needed?", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443371437", "createdAt": "2020-06-22T07:41:18Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/EmailPasswordObfuscator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.log.obfuscator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Obfuscator for email- and password-related login requests.\n+ * <p>\n+ * It will replace the\n+ * <ul>\n+ * <li>{@code \"username\":\"<USERNAME>\"} and</li>\n+ * <li>{@code \"password\":\"<PASSWORD>\"}</li>\n+ * </ul>\n+ * patterns with\n+ * <ul>\n+ * <li>{@code \"username\":\"***\"} and</li>\n+ * <li>{@code \"password\":\"***\"}</li>\n+ * </ul>\n+ * respectively.\n+ */\n+public class EmailPasswordObfuscator extends PatternObfuscator {\n+\n+    private EmailPasswordObfuscator(Map<Pattern, String> patternReplacementMap) {\n+        super(patternReplacementMap);\n+    }\n+\n+    /**\n+     * Creates a {@link PatternObfuscator} for emails and passwords.\n+     *\n+     * @return an obfuscator that keeps emails and passwords from being displayed in the logcat.\n+     */\n+    public static EmailPasswordObfuscator obfuscator() {\n+        return new EmailPasswordObfuscator(getPatterns());\n+    }\n+\n+    private static Map<Pattern, String> getPatterns() {\n+        Map<Pattern, String> map = new HashMap<>();\n+        map.put(Pattern.compile(\"((\\\"email\\\"):(\\\".+?\\\"))\"), \"\\\"email\\\":\\\"***\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NjAwNQ==", "bodyText": "It is for account creation too.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443396005", "createdAt": "2020-06-22T08:27:38Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/EmailPasswordObfuscator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.log.obfuscator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Obfuscator for email- and password-related login requests.\n+ * <p>\n+ * It will replace the\n+ * <ul>\n+ * <li>{@code \"username\":\"<USERNAME>\"} and</li>\n+ * <li>{@code \"password\":\"<PASSWORD>\"}</li>\n+ * </ul>\n+ * patterns with\n+ * <ul>\n+ * <li>{@code \"username\":\"***\"} and</li>\n+ * <li>{@code \"password\":\"***\"}</li>\n+ * </ul>\n+ * respectively.\n+ */\n+public class EmailPasswordObfuscator extends PatternObfuscator {\n+\n+    private EmailPasswordObfuscator(Map<Pattern, String> patternReplacementMap) {\n+        super(patternReplacementMap);\n+    }\n+\n+    /**\n+     * Creates a {@link PatternObfuscator} for emails and passwords.\n+     *\n+     * @return an obfuscator that keeps emails and passwords from being displayed in the logcat.\n+     */\n+    public static EmailPasswordObfuscator obfuscator() {\n+        return new EmailPasswordObfuscator(getPatterns());\n+    }\n+\n+    private static Map<Pattern, String> getPatterns() {\n+        Map<Pattern, String> map = new HashMap<>();\n+        map.put(Pattern.compile(\"((\\\"email\\\"):(\\\".+?\\\"))\"), \"\\\"email\\\":\\\"***\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MTQzNw=="}, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjU4OTM4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo0Mjo0NlrOGm1SoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODoyOToyMFrOGm2ztA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MjE5Mw==", "bodyText": "Right now this class is part of the public API? Do we really think that people are going to use this to implement obfuscators themselves? Otherwise, we should probably move them to the internal package so as not to clutter the public API too much?\nI don't have a strong opinion either way though, so up to you.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443372193", "createdAt": "2020-06-22T07:42:46Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.log.obfuscator;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The LoginInfoObfuscator keeps sensitive login information from being displayed in the logcat.\n+ */\n+public class LoginInfoObfuscator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NzA0NA==", "bodyText": "I thought it had to do with the \"log feature\", but it's true this has no utility whatsoever for users. I think I'll move it.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443397044", "createdAt": "2020-06-22T08:29:20Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.log.obfuscator;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The LoginInfoObfuscator keeps sensitive login information from being displayed in the logcat.\n+ */\n+public class LoginInfoObfuscator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MjE5Mw=="}, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjU5NDY1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo0NDo0MVrOGm1WTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo0NDo0MVrOGm1WTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MzEzMg==", "bodyText": "It would be faster to call indexOf directly and check for -1. Right now you are iterating the list twice.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443373132", "createdAt": "2020-06-22T07:44:41Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.log.obfuscator;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The LoginInfoObfuscator keeps sensitive login information from being displayed in the logcat.\n+ */\n+public class LoginInfoObfuscator {\n+\n+    private Map<String, PatternObfuscator> patternObfuscatorMap;\n+\n+    /**\n+     * {@link Map} of identity providers and {@link PatternObfuscator}s used to determine which\n+     * obfuscator has to be used.\n+     *\n+     * @param patternObfuscatorMap the map of credential identity providers and obfuscators.\n+     */\n+    public LoginInfoObfuscator(Map<String, PatternObfuscator> patternObfuscatorMap) {\n+        this.patternObfuscatorMap = patternObfuscatorMap;\n+    }\n+\n+    /**\n+     * Obfuscates a logcat entry or not depending on whether the request that is being sent is a\n+     * login request. If it is, its full path must contain a {@code providers} segment. If it is not\n+     * the logcat entry will not be obfuscated\n+     * <p>\n+     * Once extracted the identity provider its corresponding {@link PatternObfuscator} will carry\n+     * out the obfuscation.\n+     *\n+     * @param urlSegments the URL segments of the request to be sent.\n+     * @param input       the original logcat entry.\n+     * @return the obfuscated logcat entry.\n+     */\n+    public String obfuscate(List<String> urlSegments, String input) {\n+        if (urlSegments.contains(\"providers\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjYwNDU2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo0Nzo1MlrOGm1csw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo0Nzo1MlrOGm1csw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3NDc3MQ==", "bodyText": "Shouldn't we keep the key for all of these? So this turns into \"authCode\": \"***\"", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443374771", "createdAt": "2020-06-22T07:47:52Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.log.obfuscator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Obfuscator for token-related login requests.\n+ * <p>\n+ * It will replace the\n+ * <ul>\n+ * <li>{@code \"authCode\":\"<TOKEN>\"},</li>\n+ * <li>{@code \"id_token\":\"<TOKEN>\"},</li>\n+ * <li>{@code \"token\":\"<TOKEN>\"}, and</li>\n+ * <li>{@code \"access_token\":\"<TOKEN>\"}</li>\n+ * </ul>\n+ * patterns with {@code \"token\":\"***\"}.\n+ */\n+public class TokenObfuscator extends PatternObfuscator {\n+\n+    private TokenObfuscator(Map<Pattern, String> patternReplacementMap) {\n+        super(patternReplacementMap);\n+    }\n+\n+    /**\n+     * Creates a {@link PatternObfuscator} for tokens.\n+     *\n+     * @return an obfuscator that keeps token information from being displayed in the logcat.\n+     */\n+    public static TokenObfuscator obfuscator() {\n+        return new TokenObfuscator(getPatterns());\n+    }\n+\n+    private static Map<Pattern, String> getPatterns() {\n+        Map<Pattern, String> map = new HashMap<>();\n+        map.put(Pattern.compile(\"((\\\"authCode\\\"):(\\\".+?\\\"))\"), \"\\\"token\\\":\\\"***\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjYzMTE1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo1NTo1NlrOGm1tTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODo0MDozMVrOGm3M5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3OTAyMA==", "bodyText": "Maybe rename to httpLogObfuscator ? ... The PatternObfuscator class isn't restricted to only login, so if anyone actually implements their own class they could obfuscate other things as well.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443379020", "createdAt": "2020-06-22T07:55:56Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -470,6 +487,19 @@ public Builder codecRegistry(CodecRegistry codecRegistry) {\n             return this;\n         }\n \n+        /**\n+         * Sets the {@link LoginInfoObfuscator} used to keep sensitive data from being displayed in\n+         * the logcat. These obfuscators default to\n+         * {@link PatternObfuscatorFactory#getObfuscators()} in a production environment.\n+         *\n+         * @param loginInfoObfuscator The default login obfuscator for the app.\n+         */\n+        public Builder loginInfoObfuscator(LoginInfoObfuscator loginInfoObfuscator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwMzQ5Mw==", "bodyText": "Unless the providers URL segment is used for other stuff than login, then it is only for login. I could abstract the specific segment we want to look for in the URL though, then it won't be login specific. Does it make sense?", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443403493", "createdAt": "2020-06-22T08:40:31Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -470,6 +487,19 @@ public Builder codecRegistry(CodecRegistry codecRegistry) {\n             return this;\n         }\n \n+        /**\n+         * Sets the {@link LoginInfoObfuscator} used to keep sensitive data from being displayed in\n+         * the logcat. These obfuscators default to\n+         * {@link PatternObfuscatorFactory#getObfuscators()} in a production environment.\n+         *\n+         * @param loginInfoObfuscator The default login obfuscator for the app.\n+         */\n+        public Builder loginInfoObfuscator(LoginInfoObfuscator loginInfoObfuscator) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3OTAyMA=="}, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjYzNTI5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/PatternObfuscatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo1NzoxNFrOGm1v1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo1NzoxNFrOGm1v1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3OTY2OQ==", "bodyText": "Nitpick: I think I feel that RegexObfuscatorFactory is a bit more clear than PatternObfuscatorFactory?", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443379669", "createdAt": "2020-06-22T07:57:14Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/PatternObfuscatorFactory.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.realm.log.obfuscator.ApiKeyObfuscator;\n+import io.realm.log.obfuscator.CustomFunctionObfuscator;\n+import io.realm.log.obfuscator.EmailPasswordObfuscator;\n+import io.realm.log.obfuscator.PatternObfuscator;\n+import io.realm.log.obfuscator.TokenObfuscator;\n+\n+public class PatternObfuscatorFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjY0NjY5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/log/obfuscator/CustomFunctionObfuscatorTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowMDo0N1rOGm13RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowMDo0N1rOGm13RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4MTU3Mg==", "bodyText": "Given that Kotlin support multiline strings when using \"\"\" it would be nice if this as nicely formatted with linebreaks. Makes it a lot easier to read.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443381572", "createdAt": "2020-06-22T08:00:47Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/log/obfuscator/CustomFunctionObfuscatorTest.kt", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.log.obfuscator\n+\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+import kotlin.test.assertFailsWith\n+\n+const val CUSTOM_FUNCTION_ORIGINAL_INPUT = \"\"\"{\"mail\":\"myfakemail@mongodb.com\",\"id\":{\"{$}numberInt\":\"666\"},\"options\":{\"device\":{\"appVersion\":\"1.0.\",\"appId\":\"realm-sdk-integration-tests-grbrc\",\"platform\":\"android\",\"platformVersion\":\"10\",\"sdkVersion\":\"10.0.0-BETA.5-SNAPSHOT\"}}}\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjY1MDM4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/log/obfuscator/LoginInfoObfuscatorTest.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowMTo1NlrOGm15kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODozNzo0OFrOGm3G4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4MjE2Mg==", "bodyText": "Is the ID from the Credentails not available in a JVM test?", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443382162", "createdAt": "2020-06-22T08:01:56Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/log/obfuscator/LoginInfoObfuscatorTest.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.log.obfuscator\n+\n+import io.realm.mongodb.PatternObfuscatorFactory\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+const val IRRELEVANT_INPUT = \"\"\"{\"blahblahblah\":\"blehblehbleh\"}\"\"\"\n+\n+class LoginInfoObfuscatorTest {\n+\n+    private val apiKeyUrlSegments = listOf(\"providers\", \"api-key\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwMTk1Mg==", "bodyText": "The credentials are located in the objectServer package, so they aren't visible from the main package - that's why I put the pattern factory inside objectServer so as to be able to get the ID providers, instead of using strings directly. Maybe I need to rethink where to locate these classes...", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443401952", "createdAt": "2020-06-22T08:37:48Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/log/obfuscator/LoginInfoObfuscatorTest.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.log.obfuscator\n+\n+import io.realm.mongodb.PatternObfuscatorFactory\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+const val IRRELEVANT_INPUT = \"\"\"{\"blahblahblah\":\"blehblehbleh\"}\"\"\"\n+\n+class LoginInfoObfuscatorTest {\n+\n+    private val apiKeyUrlSegments = listOf(\"providers\", \"api-key\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4MjE2Mg=="}, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjY4NTc2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/log/obfuscator/LoginInfoObfuscatorTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODoxMzowMlrOGm2Png==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODoxMzowMlrOGm2Png==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4NzgwNg==", "bodyText": "You seem to test all the relevant things, but I'm a bit concerned there are no proper integration tests. The reason being that if ObjectStore at some point changes which payload is sent to the server, we will not detect this and these obfuscators will fail to do the right thing.\nWe don't need to test all the error cases, but IMO we should test the happy path towards a real server.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443387806", "createdAt": "2020-06-22T08:13:02Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/log/obfuscator/LoginInfoObfuscatorTest.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.log.obfuscator\n+\n+import io.realm.mongodb.PatternObfuscatorFactory\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+\n+const val IRRELEVANT_INPUT = \"\"\"{\"blahblahblah\":\"blehblehbleh\"}\"\"\"\n+\n+class LoginInfoObfuscatorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzAwMjM5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/CredentialsTests.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowNzozOFrOGngSkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxNTowMlrOGngkGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NjY4OQ==", "bodyText": "A bit weird to have this mixed handling of app.close. Explicit here but also in tearDown. I guess app could be a local variable just for this test.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444076689", "createdAt": "2020-06-23T09:07:38Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/CredentialsTests.kt", "diffHunk": "@@ -239,6 +239,7 @@ class CredentialsTests {\n                 }\n             }\n         }\n+        app.close()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e850a9f31d2c8d5d8f34f8f35f4ed1daff00110"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MTE3Ng==", "bodyText": "Yeah, this is a leftover from some things I was trying when adding the obfuscation. Forgot to clean up.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444081176", "createdAt": "2020-06-23T09:15:02Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/CredentialsTests.kt", "diffHunk": "@@ -239,6 +239,7 @@ class CredentialsTests {\n                 }\n             }\n         }\n+        app.close()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NjY4OQ=="}, "originalCommit": {"oid": "2e850a9f31d2c8d5d8f34f8f35f4ed1daff00110"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQyMDIwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/network/interceptor/LoggingInterceptorTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxODowN1rOGnuQzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxODowN1rOGnuQzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwNTYxNA==", "bodyText": "This will not be removed if there is a test failure. It should probably either be in tearDown or in a finally block. Same in the other tests.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444305614", "createdAt": "2020-06-23T15:18:07Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/network/interceptor/LoggingInterceptorTest.kt", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.internal.network.interceptor\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.admin.ServerAdmin\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.App\n+import io.realm.mongodb.Credentials\n+import io.realm.mongodb.RegexObfuscatorPatternFactory\n+import io.realm.mongodb.close\n+import org.bson.Document\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertTrue\n+\n+class LoggingInterceptorTest {\n+\n+    private lateinit var app: App\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun emailPasswordRegistrationAndLogin_noObfuscation() {\n+        app = TestApp()\n+        val testLogger = getLogger()\n+\n+        val email = TestHelper.getRandomEmail()\n+        val password = \"123456\"\n+        app.emailPasswordAuth.registerUser(email, password)\n+        assertTrue(testLogger.message.contains(\"\"\"\n+            \"email\":\"$email\"\n+        \"\"\".trimIndent()))\n+        assertTrue(testLogger.message.contains(\"\"\"\n+            \"password\":\"$password\"\n+        \"\"\".trimIndent()))\n+\n+        app.login(Credentials.emailPassword(email, password))\n+        val usernameLatestMessage = testLogger.message.contains(\"\"\"\n+            \"email\":\"$email\"\n+        \"\"\".trimIndent())\n+        val usernamePreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"username\":\"$email\"\n+        \"\"\".trimIndent())\n+        assertTrue(usernameLatestMessage || usernamePreviousMessage)\n+        val passwordLatestMessage = testLogger.message.contains(\"\"\"\n+            \"password\":\"$password\"\n+        \"\"\".trimIndent())\n+        val passwordPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"password\":\"$password\"\n+        \"\"\".trimIndent())\n+        assertTrue(passwordLatestMessage || passwordPreviousMessage)\n+\n+        RealmLog.remove(testLogger)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQ0MjYzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/network/interceptor/LoggingInterceptorTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToyMjo1OVrOGnufEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToyMjo1OVrOGnufEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwOTI2NQ==", "bodyText": "What about this one? Seems to be missing tests for all the oAuth2 types? We should still be able to test it even if not enabled on the server as long as we catch the exception the server sends and ignore it.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444309265", "createdAt": "2020-06-23T15:22:59Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/network/interceptor/LoggingInterceptorTest.kt", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.internal.network.interceptor\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.admin.ServerAdmin\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.App\n+import io.realm.mongodb.Credentials\n+import io.realm.mongodb.RegexObfuscatorPatternFactory\n+import io.realm.mongodb.close\n+import org.bson.Document\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertTrue\n+\n+class LoggingInterceptorTest {\n+\n+    private lateinit var app: App\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun emailPasswordRegistrationAndLogin_noObfuscation() {\n+        app = TestApp()\n+        val testLogger = getLogger()\n+\n+        val email = TestHelper.getRandomEmail()\n+        val password = \"123456\"\n+        app.emailPasswordAuth.registerUser(email, password)\n+        assertTrue(testLogger.message.contains(\"\"\"\n+            \"email\":\"$email\"\n+        \"\"\".trimIndent()))\n+        assertTrue(testLogger.message.contains(\"\"\"\n+            \"password\":\"$password\"\n+        \"\"\".trimIndent()))\n+\n+        app.login(Credentials.emailPassword(email, password))\n+        val usernameLatestMessage = testLogger.message.contains(\"\"\"\n+            \"email\":\"$email\"\n+        \"\"\".trimIndent())\n+        val usernamePreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"username\":\"$email\"\n+        \"\"\".trimIndent())\n+        assertTrue(usernameLatestMessage || usernamePreviousMessage)\n+        val passwordLatestMessage = testLogger.message.contains(\"\"\"\n+            \"password\":\"$password\"\n+        \"\"\".trimIndent())\n+        val passwordPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"password\":\"$password\"\n+        \"\"\".trimIndent())\n+        assertTrue(passwordLatestMessage || passwordPreviousMessage)\n+\n+        RealmLog.remove(testLogger)\n+    }\n+\n+    @Test\n+    fun emailPasswordRegistrationAndLogin_obfuscation() {\n+        app = TestApp(loggingInterceptor = LoggingInterceptor.interceptor(RegexObfuscatorPatternFactory.LOGIN_FEATURE))\n+        val testLogger = getLogger()\n+\n+        val email = TestHelper.getRandomEmail()\n+        val password = \"123456\"\n+        app.emailPasswordAuth.registerUser(email, password)\n+        assertTrue(testLogger.message.contains(\"\"\"\n+            \"email\":\"***\"\n+        \"\"\".trimIndent()))\n+        assertTrue(testLogger.message.contains(\"\"\"\n+            \"password\":\"***\"\n+        \"\"\".trimIndent()))\n+\n+        app.login(Credentials.emailPassword(email, password))\n+        val usernameLatestMessage = testLogger.message.contains(\"\"\"\n+            \"username\":\"***\"\n+        \"\"\".trimIndent())\n+        val usernamePreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"username\":\"***\"\n+        \"\"\".trimIndent())\n+        assertTrue(usernameLatestMessage || usernamePreviousMessage)\n+        val passwordLatestMessage = testLogger.message.contains(\"\"\"\n+            \"password\":\"***\"\n+        \"\"\".trimIndent())\n+        val passwordPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"password\":\"***\"\n+        \"\"\".trimIndent())\n+        assertTrue(passwordLatestMessage || passwordPreviousMessage)\n+\n+        RealmLog.remove(testLogger)\n+    }\n+\n+    @Test\n+    fun apiKeyLogin_noObfuscation() {\n+        app = TestApp()\n+        val testLogger = getLogger()\n+        val admin = ServerAdmin()\n+        val serverKey = admin.createServerApiKey()\n+\n+        app.login(Credentials.serverApiKey(serverKey))\n+        val apiKeyLatestMessage = testLogger.message.contains(\"\"\"\n+            \"key\":\"$serverKey\"\n+        \"\"\".trimIndent())\n+        val apiKeyPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"key\":\"$serverKey\"\n+        \"\"\".trimIndent())\n+        assertTrue(apiKeyLatestMessage || apiKeyPreviousMessage)\n+    }\n+\n+    @Test\n+    fun apiKeyLogin_obfuscation() {\n+        app = TestApp(loggingInterceptor = LoggingInterceptor.interceptor(RegexObfuscatorPatternFactory.LOGIN_FEATURE))\n+        val testLogger = getLogger()\n+        val admin = ServerAdmin()\n+        val serverKey = admin.createServerApiKey()\n+\n+        app.login(Credentials.serverApiKey(serverKey))\n+        val apiKeyLatestMessage = testLogger.message.contains(\"\"\"\n+            \"key\":\"***\"\n+        \"\"\".trimIndent())\n+        val apiKeyPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"key\":\"***\"\n+        \"\"\".trimIndent())\n+        assertTrue(apiKeyLatestMessage || apiKeyPreviousMessage)\n+    }\n+\n+    @Test\n+    fun customFunctionLogin_noObfuscation() {\n+        app = TestApp()\n+        val testLogger = getLogger()\n+\n+        val key1 = \"mail\"\n+        val key2 = \"id\"\n+        val value1 = \"myfakemail@mongodb.com\"\n+        val value2 = 666\n+        val customFunction = mapOf(\n+                key1 to value1,\n+                key2 to value2\n+        ).let {\n+            Credentials.customFunction(Document(it))\n+        }\n+\n+        app.login(customFunction)\n+        val customFunctionLatestMessage = testLogger.message.contains(\"\"\"\n+            \"$key1\":\"$value1\"\n+        \"\"\".trimIndent())\n+        val customFunctionPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"$key1\":\"$value1\"\n+        \"\"\".trimIndent())\n+        assertTrue(customFunctionLatestMessage || customFunctionPreviousMessage)\n+    }\n+\n+    @Test\n+    fun customFunctionLogin_obfuscation() {\n+        app = TestApp(loggingInterceptor = LoggingInterceptor.interceptor(RegexObfuscatorPatternFactory.LOGIN_FEATURE))\n+        val testLogger = getLogger()\n+\n+        val key1 = \"mail\"\n+        val key2 = \"id\"\n+        val value1 = \"myfakemail@mongodb.com\"\n+        val value2 = 666\n+        val customFunction = mapOf(\n+                key1 to value1,\n+                key2 to value2\n+        ).let {\n+            Credentials.customFunction(Document(it))\n+        }\n+\n+        app.login(customFunction)\n+        val customFunctionLatestMessage = testLogger.message.contains(\"\"\"\n+            \"functionArgs\":\"***\"\n+        \"\"\".trimIndent())\n+        val customFunctionPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"functionArgs\":\"***\"\n+        \"\"\".trimIndent())\n+        assertTrue(customFunctionLatestMessage || customFunctionPreviousMessage)\n+    }\n+\n+    // FIXME: add tests for tokens", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQ0NzYxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/network/interceptor/LoggingInterceptorTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToyNDoxMVrOGnuiTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToyNDoxMVrOGnuiTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxMDA5NQ==", "bodyText": "This is not being reset back to LogLevel.WARN when the test ends.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444310095", "createdAt": "2020-06-23T15:24:11Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/network/interceptor/LoggingInterceptorTest.kt", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.internal.network.interceptor\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.admin.ServerAdmin\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.App\n+import io.realm.mongodb.Credentials\n+import io.realm.mongodb.RegexObfuscatorPatternFactory\n+import io.realm.mongodb.close\n+import org.bson.Document\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertTrue\n+\n+class LoggingInterceptorTest {\n+\n+    private lateinit var app: App\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun emailPasswordRegistrationAndLogin_noObfuscation() {\n+        app = TestApp()\n+        val testLogger = getLogger()\n+\n+        val email = TestHelper.getRandomEmail()\n+        val password = \"123456\"\n+        app.emailPasswordAuth.registerUser(email, password)\n+        assertTrue(testLogger.message.contains(\"\"\"\n+            \"email\":\"$email\"\n+        \"\"\".trimIndent()))\n+        assertTrue(testLogger.message.contains(\"\"\"\n+            \"password\":\"$password\"\n+        \"\"\".trimIndent()))\n+\n+        app.login(Credentials.emailPassword(email, password))\n+        val usernameLatestMessage = testLogger.message.contains(\"\"\"\n+            \"email\":\"$email\"\n+        \"\"\".trimIndent())\n+        val usernamePreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"username\":\"$email\"\n+        \"\"\".trimIndent())\n+        assertTrue(usernameLatestMessage || usernamePreviousMessage)\n+        val passwordLatestMessage = testLogger.message.contains(\"\"\"\n+            \"password\":\"$password\"\n+        \"\"\".trimIndent())\n+        val passwordPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"password\":\"$password\"\n+        \"\"\".trimIndent())\n+        assertTrue(passwordLatestMessage || passwordPreviousMessage)\n+\n+        RealmLog.remove(testLogger)\n+    }\n+\n+    @Test\n+    fun emailPasswordRegistrationAndLogin_obfuscation() {\n+        app = TestApp(loggingInterceptor = LoggingInterceptor.interceptor(RegexObfuscatorPatternFactory.LOGIN_FEATURE))\n+        val testLogger = getLogger()\n+\n+        val email = TestHelper.getRandomEmail()\n+        val password = \"123456\"\n+        app.emailPasswordAuth.registerUser(email, password)\n+        assertTrue(testLogger.message.contains(\"\"\"\n+            \"email\":\"***\"\n+        \"\"\".trimIndent()))\n+        assertTrue(testLogger.message.contains(\"\"\"\n+            \"password\":\"***\"\n+        \"\"\".trimIndent()))\n+\n+        app.login(Credentials.emailPassword(email, password))\n+        val usernameLatestMessage = testLogger.message.contains(\"\"\"\n+            \"username\":\"***\"\n+        \"\"\".trimIndent())\n+        val usernamePreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"username\":\"***\"\n+        \"\"\".trimIndent())\n+        assertTrue(usernameLatestMessage || usernamePreviousMessage)\n+        val passwordLatestMessage = testLogger.message.contains(\"\"\"\n+            \"password\":\"***\"\n+        \"\"\".trimIndent())\n+        val passwordPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"password\":\"***\"\n+        \"\"\".trimIndent())\n+        assertTrue(passwordLatestMessage || passwordPreviousMessage)\n+\n+        RealmLog.remove(testLogger)\n+    }\n+\n+    @Test\n+    fun apiKeyLogin_noObfuscation() {\n+        app = TestApp()\n+        val testLogger = getLogger()\n+        val admin = ServerAdmin()\n+        val serverKey = admin.createServerApiKey()\n+\n+        app.login(Credentials.serverApiKey(serverKey))\n+        val apiKeyLatestMessage = testLogger.message.contains(\"\"\"\n+            \"key\":\"$serverKey\"\n+        \"\"\".trimIndent())\n+        val apiKeyPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"key\":\"$serverKey\"\n+        \"\"\".trimIndent())\n+        assertTrue(apiKeyLatestMessage || apiKeyPreviousMessage)\n+    }\n+\n+    @Test\n+    fun apiKeyLogin_obfuscation() {\n+        app = TestApp(loggingInterceptor = LoggingInterceptor.interceptor(RegexObfuscatorPatternFactory.LOGIN_FEATURE))\n+        val testLogger = getLogger()\n+        val admin = ServerAdmin()\n+        val serverKey = admin.createServerApiKey()\n+\n+        app.login(Credentials.serverApiKey(serverKey))\n+        val apiKeyLatestMessage = testLogger.message.contains(\"\"\"\n+            \"key\":\"***\"\n+        \"\"\".trimIndent())\n+        val apiKeyPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"key\":\"***\"\n+        \"\"\".trimIndent())\n+        assertTrue(apiKeyLatestMessage || apiKeyPreviousMessage)\n+    }\n+\n+    @Test\n+    fun customFunctionLogin_noObfuscation() {\n+        app = TestApp()\n+        val testLogger = getLogger()\n+\n+        val key1 = \"mail\"\n+        val key2 = \"id\"\n+        val value1 = \"myfakemail@mongodb.com\"\n+        val value2 = 666\n+        val customFunction = mapOf(\n+                key1 to value1,\n+                key2 to value2\n+        ).let {\n+            Credentials.customFunction(Document(it))\n+        }\n+\n+        app.login(customFunction)\n+        val customFunctionLatestMessage = testLogger.message.contains(\"\"\"\n+            \"$key1\":\"$value1\"\n+        \"\"\".trimIndent())\n+        val customFunctionPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"$key1\":\"$value1\"\n+        \"\"\".trimIndent())\n+        assertTrue(customFunctionLatestMessage || customFunctionPreviousMessage)\n+    }\n+\n+    @Test\n+    fun customFunctionLogin_obfuscation() {\n+        app = TestApp(loggingInterceptor = LoggingInterceptor.interceptor(RegexObfuscatorPatternFactory.LOGIN_FEATURE))\n+        val testLogger = getLogger()\n+\n+        val key1 = \"mail\"\n+        val key2 = \"id\"\n+        val value1 = \"myfakemail@mongodb.com\"\n+        val value2 = 666\n+        val customFunction = mapOf(\n+                key1 to value1,\n+                key2 to value2\n+        ).let {\n+            Credentials.customFunction(Document(it))\n+        }\n+\n+        app.login(customFunction)\n+        val customFunctionLatestMessage = testLogger.message.contains(\"\"\"\n+            \"functionArgs\":\"***\"\n+        \"\"\".trimIndent())\n+        val customFunctionPreviousMessage = testLogger.previousMessage.contains(\"\"\"\n+            \"functionArgs\":\"***\"\n+        \"\"\".trimIndent())\n+        assertTrue(customFunctionLatestMessage || customFunctionPreviousMessage)\n+    }\n+\n+    // FIXME: add tests for tokens\n+\n+    private fun getLogger(): TestHelper.TestLogger =\n+            TestHelper.TestLogger().also {\n+                RealmLog.add(it)\n+                RealmLog.setLevel(LogLevel.ALL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQ1NzQ3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToyNjoxN1rOGnuofA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToyNjoxN1rOGnuofA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxMTY3Ng==", "bodyText": "The more correct term would probably be oAuth2 token related", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444311676", "createdAt": "2020-06-23T15:26:17Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.obfuscator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Obfuscator for token-related login requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQ3OTU3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTozMToxNVrOGnu22w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTozMToxNVrOGnu22w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNTM1NQ==", "bodyText": "Should we only allow one? If people add their own, it will replace ours, which might be a problem. I'm fine with us starting by just allowing one, but we should probably make clear in the JavaDoc that this is just for Http requests (not logging in general) and that if you replace it you are responsible for obfuscating the details.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444315355", "createdAt": "2020-06-23T15:31:15Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -470,6 +485,18 @@ public Builder codecRegistry(CodecRegistry codecRegistry) {\n             return this;\n         }\n \n+        /**\n+         * Sets the {@link LoggingInterceptor} used to keep sensitive data from being displayed in\n+         * the logcat.\n+         *\n+         * @param loggingInterceptor The default login interceptor for the app.\n+         */\n+        public Builder loggingInterceptor(LoggingInterceptor loggingInterceptor) {\n+            Util.checkNull(loggingInterceptor, \"loggingInterceptor\");\n+            this.loggingInterceptor = loggingInterceptor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQ4MDk3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTozMTozOFrOGnu31Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTozMTozOFrOGnu31Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNTYwNQ==", "bodyText": "This class is part of the public API, so should have a JavaDoc description", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444315605", "createdAt": "2020-06-23T15:31:38Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.realm.internal.obfuscator.ApiKeyObfuscator;\n+import io.realm.internal.obfuscator.CustomFunctionObfuscator;\n+import io.realm.internal.obfuscator.EmailPasswordObfuscator;\n+import io.realm.internal.obfuscator.RegexPatternObfuscator;\n+import io.realm.internal.obfuscator.TokenObfuscator;\n+\n+public class RegexObfuscatorPatternFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQ4ODU2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/syncTestUtils/kotlin/io/realm/TestApp.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTozMzozOVrOGnu9Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDoyNDo0M1rOGoMO8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNjkzOA==", "bodyText": "I suspect we are not using this anymore? But it feels a bit weird to both send in the network transport and the logging interceptor as arguments, since the logging interceptor is used when configuring the network transport.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444316938", "createdAt": "2020-06-23T15:33:39Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/syncTestUtils/kotlin/io/realm/TestApp.kt", "diffHunk": "@@ -29,7 +31,11 @@ import io.realm.mongodb.AppConfiguration\n const val SERVICE_NAME = \"BackingDB\"    // it comes from the test server's BackingDB/config.json\n const val DATABASE_NAME = \"test_data\"   // same as above\n \n-class TestApp(networkTransport: OsJavaNetworkTransport? = null, customizeConfig: (AppConfiguration.Builder) -> Unit = {}) : App(createConfiguration()) {\n+class TestApp(\n+        networkTransport: OsJavaNetworkTransport? = null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY4NjM4Mw==", "bodyText": "I made a more general builder approach as part of https://github.com/realm/realm-java/pull/6939/files#diff-f2dd3e47385160ce79724e23a321625eR29 but it has not been merged yet. Concept is that you pass a closure that gets the pre-initialized builder that you can continue to setup and the test app is created from the resulting builder.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444686383", "createdAt": "2020-06-24T07:03:48Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/syncTestUtils/kotlin/io/realm/TestApp.kt", "diffHunk": "@@ -29,7 +31,11 @@ import io.realm.mongodb.AppConfiguration\n const val SERVICE_NAME = \"BackingDB\"    // it comes from the test server's BackingDB/config.json\n const val DATABASE_NAME = \"test_data\"   // same as above\n \n-class TestApp(networkTransport: OsJavaNetworkTransport? = null, customizeConfig: (AppConfiguration.Builder) -> Unit = {}) : App(createConfiguration()) {\n+class TestApp(\n+        networkTransport: OsJavaNetworkTransport? = null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNjkzOA=="}, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc5MzA3MQ==", "bodyText": "I like the idea of passing an app config builder better. I didn't know you had written that.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444793071", "createdAt": "2020-06-24T10:18:08Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/syncTestUtils/kotlin/io/realm/TestApp.kt", "diffHunk": "@@ -29,7 +31,11 @@ import io.realm.mongodb.AppConfiguration\n const val SERVICE_NAME = \"BackingDB\"    // it comes from the test server's BackingDB/config.json\n const val DATABASE_NAME = \"test_data\"   // same as above\n \n-class TestApp(networkTransport: OsJavaNetworkTransport? = null, customizeConfig: (AppConfiguration.Builder) -> Unit = {}) : App(createConfiguration()) {\n+class TestApp(\n+        networkTransport: OsJavaNetworkTransport? = null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNjkzOA=="}, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc5NjY1Nw==", "bodyText": "I do not expect the PR to be ready for merge soon, so I guess you will just have to clone the concept here, but should be easy as it is only a couple of lines.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444796657", "createdAt": "2020-06-24T10:24:43Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/syncTestUtils/kotlin/io/realm/TestApp.kt", "diffHunk": "@@ -29,7 +31,11 @@ import io.realm.mongodb.AppConfiguration\n const val SERVICE_NAME = \"BackingDB\"    // it comes from the test server's BackingDB/config.json\n const val DATABASE_NAME = \"test_data\"   // same as above\n \n-class TestApp(networkTransport: OsJavaNetworkTransport? = null, customizeConfig: (AppConfiguration.Builder) -> Unit = {}) : App(createConfiguration()) {\n+class TestApp(\n+        networkTransport: OsJavaNetworkTransport? = null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNjkzOA=="}, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQ5MTMwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/internal/obfuscator/ApiKeyObfuscatorTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTozNDoyNVrOGnu-7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTozNDoyNVrOGnu-7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNzQyMw==", "bodyText": "Much nicer to read when indented this way \ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444317423", "createdAt": "2020-06-23T15:34:25Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/internal/obfuscator/ApiKeyObfuscatorTest.kt", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.internal.obfuscator\n+\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+import kotlin.test.assertFailsWith\n+\n+val API_KEY_ORIGINAL_INPUT = \"\"\"\n+{\n+  \"blahblahblah\":\"blehblehbleh\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQ5MzU2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/internal/obfuscator/CustomFunctionObfuscatorTest.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTozNTowMFrOGnvAZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo1MTowNlrOGoNAGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNzc5OA==", "bodyText": "Couldn't you just escape the $  with \\$ ?", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444317798", "createdAt": "2020-06-23T15:35:00Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/internal/obfuscator/CustomFunctionObfuscatorTest.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.internal.obfuscator\n+\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+import kotlin.test.assertFailsWith\n+\n+val CUSTOM_FUNCTION_ORIGINAL_INPUT = \"\"\"\n+{\n+  \"mail\":\"myfakemail@mongodb.com\",\n+  \"id\":{\n+    \"{${'$'}}numberInt\": \"666\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc5MjgzMw==", "bodyText": "Nope, raw strings require dollar signs to be escaped like this.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444792833", "createdAt": "2020-06-24T10:17:39Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/internal/obfuscator/CustomFunctionObfuscatorTest.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.internal.obfuscator\n+\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+import kotlin.test.assertFailsWith\n+\n+val CUSTOM_FUNCTION_ORIGINAL_INPUT = \"\"\"\n+{\n+  \"mail\":\"myfakemail@mongodb.com\",\n+  \"id\":{\n+    \"{${'$'}}numberInt\": \"666\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNzc5OA=="}, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwOTI0MQ==", "bodyText": "\ud83e\udd26 Okay \ud83d\ude04", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444809241", "createdAt": "2020-06-24T10:51:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/internal/obfuscator/CustomFunctionObfuscatorTest.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.internal.obfuscator\n+\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+import kotlin.test.assertFailsWith\n+\n+val CUSTOM_FUNCTION_ORIGINAL_INPUT = \"\"\"\n+{\n+  \"mail\":\"myfakemail@mongodb.com\",\n+  \"id\":{\n+    \"{${'$'}}numberInt\": \"666\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNzc5OA=="}, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODU0Njg2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0ODowNlrOGnvjAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDoxNzoxN1rOGoL_OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyNjY1Nw==", "bodyText": "I'm a bit uneasy about this API:\n\nCalling it loggingInterceptor is a bit too generic. It only works for http requests, not all logs. Maybe rename to httpLoggingInterceptor?\nIt taking a LoggingInterceptor as argument is a bit weird as LoggingInterceptor is not an interface but an actual class that people cannot really customize. Should this just have been Interceptor ? But Interceptor is an interface from OkHttp. I would a be a bit uneasy about letting that be part of our public API as we are then bound by that contract.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444326657", "createdAt": "2020-06-23T15:48:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -470,6 +485,18 @@ public Builder codecRegistry(CodecRegistry codecRegistry) {\n             return this;\n         }\n \n+        /**\n+         * Sets the {@link LoggingInterceptor} used to keep sensitive data from being displayed in\n+         * the logcat.\n+         *\n+         * @param loggingInterceptor The default login interceptor for the app.\n+         */\n+        public Builder loggingInterceptor(LoggingInterceptor loggingInterceptor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc5MjYzMw==", "bodyText": "That is a very valid concern. I guess I should tattoo the Liskov substitution principle in my forehead \ud83d\ude13 .", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444792633", "createdAt": "2020-06-24T10:17:17Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -470,6 +485,18 @@ public Builder codecRegistry(CodecRegistry codecRegistry) {\n             return this;\n         }\n \n+        /**\n+         * Sets the {@link LoggingInterceptor} used to keep sensitive data from being displayed in\n+         * the logcat.\n+         *\n+         * @param loggingInterceptor The default login interceptor for the app.\n+         */\n+        public Builder loggingInterceptor(LoggingInterceptor loggingInterceptor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyNjY1Nw=="}, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODU2NjM3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/network/interceptor/LoggingInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo1Mjo0M1rOGnvvqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo1Mjo0M1rOGnvvqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyOTg5Ng==", "bodyText": "This factory method feels a bit weird to have public? Since it doesn't really work for any other \"feature\"?", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444329896", "createdAt": "2020-06-23T15:52:43Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/network/interceptor/LoggingInterceptor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.network.interceptor;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.internal.obfuscator.HttpLogObfuscator;\n+import io.realm.internal.obfuscator.RegexPatternObfuscator;\n+import io.realm.mongodb.RegexObfuscatorPatternFactory;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okio.Buffer;\n+\n+/**\n+ * The LoggingInterceptor prints information\n+ */\n+public class LoggingInterceptor implements Interceptor {\n+\n+    private static final Charset UTF8 = Charset.forName(\"UTF-8\");\n+\n+    @Nullable\n+    private HttpLogObfuscator httpLogObfuscator;\n+\n+    private LoggingInterceptor(@Nullable HttpLogObfuscator httpLogObfuscator) {\n+        this.httpLogObfuscator = httpLogObfuscator;\n+    }\n+\n+    @Override\n+    public Response intercept(Chain chain) throws IOException {\n+        Request request = chain.request();\n+        if (RealmLog.getLevel() <= LogLevel.DEBUG) {\n+            StringBuilder sb = new StringBuilder(request.method());\n+            sb.append(' ');\n+            sb.append(request.url());\n+            sb.append('\\n');\n+            sb.append(request.headers());\n+            if (request.body() != null) {\n+                // Stripped down version of https://github.com/square/okhttp/blob/master/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java\n+                // We only expect request context to be JSON.\n+                Buffer buffer = new Buffer();\n+                request.body().writeTo(buffer);\n+\n+                // Obfuscate sensitive information if applicable\n+                String input = buffer.readString(UTF8);\n+                if (httpLogObfuscator != null) {\n+                    input = httpLogObfuscator.obfuscate(request.url().pathSegments(), input);\n+                }\n+                sb.append(input);\n+            }\n+            RealmLog.debug(\"HTTP Request = \\n%s\", sb);\n+        }\n+        return chain.proceed(request);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (!(o instanceof LoggingInterceptor)) return false;\n+        LoggingInterceptor that = (LoggingInterceptor) o;\n+        if (httpLogObfuscator == null) {\n+            return that.httpLogObfuscator == null;\n+        }\n+        return httpLogObfuscator.equals(that.httpLogObfuscator);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        if (httpLogObfuscator == null) {\n+            return super.hashCode();\n+        }\n+        return httpLogObfuscator.hashCode() + 27;\n+    }\n+\n+    /**\n+     * Returns an initialized {@link Interceptor} for a specific feature, e.g. login would be\n+     * {@code providers}.\n+     *\n+     * @param feature the feature to be intercepted or null if no obfuscation is to take place.\n+     * @return the interceptor to be used for logging purposes.\n+     */\n+    public static LoggingInterceptor interceptor(@Nullable String feature) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzE3MjM4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/network/LoggingInterceptorTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyNDoxOVrOGrYVFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyNDoxOVrOGrYVFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MDU2NQ==", "bodyText": "You should probably check for the error code as this might hide a number of other errors.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448140565", "createdAt": "2020-07-01T06:24:19Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/network/LoggingInterceptorTest.kt", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.internal.network\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.admin.ServerAdmin\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.App\n+import io.realm.mongodb.AppException\n+import io.realm.mongodb.Credentials\n+import io.realm.mongodb.close\n+import io.realm.mongodb.log.obfuscator.HttpLogObfuscator\n+import io.realm.mongodb.log.obfuscator.RegexPatternObfuscatorFactory\n+import io.realm.mongodb.log.obfuscator.RegexPatternObfuscatorFactory.LOGIN_FEATURE\n+import org.bson.Document\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertTrue\n+\n+class LoggingInterceptorTest {\n+\n+    private lateinit var app: App\n+    private lateinit var testLogger: TestHelper.TestLogger\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+        if (this::testLogger.isInitialized) {\n+            RealmLog.setLevel(LogLevel.WARN)\n+            RealmLog.remove(testLogger)\n+        }\n+    }\n+\n+    @Test\n+    fun emailPasswordRegistrationAndLogin_noObfuscation() {\n+        app = TestApp()\n+        testLogger = getLogger()\n+\n+        val email = TestHelper.getRandomEmail()\n+        val password = \"123456\"\n+        app.emailPasswordAuth.registerUser(email, password)\n+        assertMessageExists(\"\"\"\"email\":\"$email\"\"\"\", \"\"\"\"password\":\"$password\"\"\"\")\n+\n+        app.login(Credentials.emailPassword(email, password))\n+        assertMessageExists(\"\"\"\"username\":\"$email\"\"\"\", \"\"\"\"password\":\"$password\"\"\"\")\n+    }\n+\n+    @Test\n+    fun emailPasswordRegistrationAndLogin_obfuscation() {\n+        app = TestApp { builder ->\n+            builder.httpLogObfuscator(HttpLogObfuscator(LOGIN_FEATURE, RegexPatternObfuscatorFactory.getObfuscators(LOGIN_FEATURE)))\n+        }\n+        testLogger = getLogger()\n+\n+        val email = TestHelper.getRandomEmail()\n+        val password = \"123456\"\n+        app.emailPasswordAuth.registerUser(email, password)\n+        assertMessageExists(\"\"\"\"email\":\"***\"\"\"\", \"\"\"\"password\":\"***\"\"\"\")\n+\n+        app.login(Credentials.emailPassword(email, password))\n+        assertMessageExists(\"\"\"\"username\":\"***\"\"\"\", \"\"\"\"password\":\"***\"\"\"\")\n+    }\n+\n+    @Test\n+    fun apiKeyLogin_noObfuscation() {\n+        app = TestApp()\n+        testLogger = getLogger()\n+        val admin = ServerAdmin()\n+        val serverKey = admin.createServerApiKey()\n+\n+        app.login(Credentials.serverApiKey(serverKey))\n+        assertMessageExists(\"\"\"\"key\":\"$serverKey\"\"\"\")\n+    }\n+\n+    @Test\n+    fun apiKeyLogin_obfuscation() {\n+        app = TestApp { builder ->\n+            builder.httpLogObfuscator(HttpLogObfuscator(LOGIN_FEATURE, RegexPatternObfuscatorFactory.getObfuscators(LOGIN_FEATURE)))\n+        }\n+        testLogger = getLogger()\n+        val admin = ServerAdmin()\n+        val serverKey = admin.createServerApiKey()\n+\n+        app.login(Credentials.serverApiKey(serverKey))\n+        assertMessageExists(\"\"\"\"key\":\"***\"\"\"\")\n+    }\n+\n+    @Test\n+    fun customFunctionLogin_noObfuscation() {\n+        app = TestApp()\n+        testLogger = getLogger()\n+\n+        val key1 = \"mail\"\n+        val key2 = \"id\"\n+        val value1 = \"myfakemail@mongodb.com\"\n+        val value2 = 666\n+        val customFunction = mapOf(\n+                key1 to value1,\n+                key2 to value2\n+        ).let {\n+            Credentials.customFunction(Document(it))\n+        }\n+\n+        app.login(customFunction)\n+        assertMessageExists(\"\"\"\"$key1\":\"$value1\"\"\"\")\n+    }\n+\n+    @Test\n+    fun customFunctionLogin_obfuscation() {\n+        app = TestApp { builder ->\n+            builder.httpLogObfuscator(HttpLogObfuscator(LOGIN_FEATURE, RegexPatternObfuscatorFactory.getObfuscators(LOGIN_FEATURE)))\n+        }\n+        testLogger = getLogger()\n+\n+        val key1 = \"mail\"\n+        val key2 = \"id\"\n+        val value1 = \"myfakemail@mongodb.com\"\n+        val value2 = 666\n+        val customFunction = mapOf(\n+                key1 to value1,\n+                key2 to value2\n+        ).let { credsMap ->\n+            Credentials.customFunction(Document(credsMap))\n+        }\n+\n+        app.login(customFunction)\n+        assertMessageExists(\"\"\"\"functionArgs\":\"***\"\"\"\")\n+    }\n+\n+    @Test\n+    fun facebookTokenLogin_noObfuscation() {\n+        app = TestApp()\n+        testLogger = getLogger()\n+        val token = \"facebook-token\"\n+\n+        try {\n+            app.login(Credentials.facebook(token))\n+        } catch (error: AppException) {\n+            // It will fail as long as oauth2 tokens aren't supported\n+        } finally {\n+            assertMessageExists(\"\"\"\"access_token\":\"$token\"\"\"\")\n+        }\n+    }\n+\n+    @Test\n+    fun facebookTokenLogin_obfuscation() {\n+        app = TestApp { builder ->\n+            builder.httpLogObfuscator(HttpLogObfuscator(LOGIN_FEATURE, RegexPatternObfuscatorFactory.getObfuscators(LOGIN_FEATURE)))\n+        }\n+        testLogger = getLogger()\n+        val token = \"facebook-token\"\n+\n+        try {\n+            app.login(Credentials.facebook(token))\n+        } catch (error: AppException) {\n+            // It will fail as long as oauth2 tokens aren't supported", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzE3MzA2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/network/LoggingInterceptorTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyNDozN1rOGrYVgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyNDozN1rOGrYVgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MDY3NQ==", "bodyText": "Same also in other tests below", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448140675", "createdAt": "2020-07-01T06:24:37Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/network/LoggingInterceptorTest.kt", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.internal.network\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.admin.ServerAdmin\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.App\n+import io.realm.mongodb.AppException\n+import io.realm.mongodb.Credentials\n+import io.realm.mongodb.close\n+import io.realm.mongodb.log.obfuscator.HttpLogObfuscator\n+import io.realm.mongodb.log.obfuscator.RegexPatternObfuscatorFactory\n+import io.realm.mongodb.log.obfuscator.RegexPatternObfuscatorFactory.LOGIN_FEATURE\n+import org.bson.Document\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertTrue\n+\n+class LoggingInterceptorTest {\n+\n+    private lateinit var app: App\n+    private lateinit var testLogger: TestHelper.TestLogger\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+        if (this::testLogger.isInitialized) {\n+            RealmLog.setLevel(LogLevel.WARN)\n+            RealmLog.remove(testLogger)\n+        }\n+    }\n+\n+    @Test\n+    fun emailPasswordRegistrationAndLogin_noObfuscation() {\n+        app = TestApp()\n+        testLogger = getLogger()\n+\n+        val email = TestHelper.getRandomEmail()\n+        val password = \"123456\"\n+        app.emailPasswordAuth.registerUser(email, password)\n+        assertMessageExists(\"\"\"\"email\":\"$email\"\"\"\", \"\"\"\"password\":\"$password\"\"\"\")\n+\n+        app.login(Credentials.emailPassword(email, password))\n+        assertMessageExists(\"\"\"\"username\":\"$email\"\"\"\", \"\"\"\"password\":\"$password\"\"\"\")\n+    }\n+\n+    @Test\n+    fun emailPasswordRegistrationAndLogin_obfuscation() {\n+        app = TestApp { builder ->\n+            builder.httpLogObfuscator(HttpLogObfuscator(LOGIN_FEATURE, RegexPatternObfuscatorFactory.getObfuscators(LOGIN_FEATURE)))\n+        }\n+        testLogger = getLogger()\n+\n+        val email = TestHelper.getRandomEmail()\n+        val password = \"123456\"\n+        app.emailPasswordAuth.registerUser(email, password)\n+        assertMessageExists(\"\"\"\"email\":\"***\"\"\"\", \"\"\"\"password\":\"***\"\"\"\")\n+\n+        app.login(Credentials.emailPassword(email, password))\n+        assertMessageExists(\"\"\"\"username\":\"***\"\"\"\", \"\"\"\"password\":\"***\"\"\"\")\n+    }\n+\n+    @Test\n+    fun apiKeyLogin_noObfuscation() {\n+        app = TestApp()\n+        testLogger = getLogger()\n+        val admin = ServerAdmin()\n+        val serverKey = admin.createServerApiKey()\n+\n+        app.login(Credentials.serverApiKey(serverKey))\n+        assertMessageExists(\"\"\"\"key\":\"$serverKey\"\"\"\")\n+    }\n+\n+    @Test\n+    fun apiKeyLogin_obfuscation() {\n+        app = TestApp { builder ->\n+            builder.httpLogObfuscator(HttpLogObfuscator(LOGIN_FEATURE, RegexPatternObfuscatorFactory.getObfuscators(LOGIN_FEATURE)))\n+        }\n+        testLogger = getLogger()\n+        val admin = ServerAdmin()\n+        val serverKey = admin.createServerApiKey()\n+\n+        app.login(Credentials.serverApiKey(serverKey))\n+        assertMessageExists(\"\"\"\"key\":\"***\"\"\"\")\n+    }\n+\n+    @Test\n+    fun customFunctionLogin_noObfuscation() {\n+        app = TestApp()\n+        testLogger = getLogger()\n+\n+        val key1 = \"mail\"\n+        val key2 = \"id\"\n+        val value1 = \"myfakemail@mongodb.com\"\n+        val value2 = 666\n+        val customFunction = mapOf(\n+                key1 to value1,\n+                key2 to value2\n+        ).let {\n+            Credentials.customFunction(Document(it))\n+        }\n+\n+        app.login(customFunction)\n+        assertMessageExists(\"\"\"\"$key1\":\"$value1\"\"\"\")\n+    }\n+\n+    @Test\n+    fun customFunctionLogin_obfuscation() {\n+        app = TestApp { builder ->\n+            builder.httpLogObfuscator(HttpLogObfuscator(LOGIN_FEATURE, RegexPatternObfuscatorFactory.getObfuscators(LOGIN_FEATURE)))\n+        }\n+        testLogger = getLogger()\n+\n+        val key1 = \"mail\"\n+        val key2 = \"id\"\n+        val value1 = \"myfakemail@mongodb.com\"\n+        val value2 = 666\n+        val customFunction = mapOf(\n+                key1 to value1,\n+                key2 to value2\n+        ).let { credsMap ->\n+            Credentials.customFunction(Document(credsMap))\n+        }\n+\n+        app.login(customFunction)\n+        assertMessageExists(\"\"\"\"functionArgs\":\"***\"\"\"\")\n+    }\n+\n+    @Test\n+    fun facebookTokenLogin_noObfuscation() {\n+        app = TestApp()\n+        testLogger = getLogger()\n+        val token = \"facebook-token\"\n+\n+        try {\n+            app.login(Credentials.facebook(token))\n+        } catch (error: AppException) {\n+            // It will fail as long as oauth2 tokens aren't supported\n+        } finally {\n+            assertMessageExists(\"\"\"\"access_token\":\"$token\"\"\"\")\n+        }\n+    }\n+\n+    @Test\n+    fun facebookTokenLogin_obfuscation() {\n+        app = TestApp { builder ->\n+            builder.httpLogObfuscator(HttpLogObfuscator(LOGIN_FEATURE, RegexPatternObfuscatorFactory.getObfuscators(LOGIN_FEATURE)))\n+        }\n+        testLogger = getLogger()\n+        val token = \"facebook-token\"\n+\n+        try {\n+            app.login(Credentials.facebook(token))\n+        } catch (error: AppException) {\n+            // It will fail as long as oauth2 tokens aren't supported\n+        } finally {\n+            assertMessageExists(\"\"\"\"access_token\":\"***\"\"\"\")\n+        }\n+    }\n+\n+    @Test\n+    fun appleTokenLogin_noObfuscation() {\n+        app = TestApp()\n+        testLogger = getLogger()\n+        val token = \"apple-token\"\n+\n+        try {\n+            app.login(Credentials.apple(token))\n+        } catch (error: AppException) {\n+            // It will fail as long as oauth2 tokens aren't supported", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzE3NTUwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyNToyN1rOGrYW6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyNToyN1rOGrYW6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MTAzNA==", "bodyText": "This should be marked @nullable", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448141034", "createdAt": "2020-07-01T06:25:27Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -223,11 +231,22 @@ public File getSyncRootDirectory() {\n      * {@link io.realm.mongodb.mongo.MongoDatabase}.\n      *\n      * @return The default codec registry for the App.\n-     *\n      * @see #DEFAULT_BSON_CODEC_REGISTRY\n      * @see Builder#getDefaultCodecRegistry()\n      */\n-    public CodecRegistry getDefaultCodecRegistry() { return codecRegistry; }\n+    public CodecRegistry getDefaultCodecRegistry() {\n+        return codecRegistry;\n+    }\n+\n+    /**\n+     * Returns the {@link HttpLogObfuscator} used in the app, which keeps sensitive information in\n+     * HTTP requests from being displayed in the logcat.\n+     *\n+     * @return the HTTP log obfuscator.\n+     */\n+    public HttpLogObfuscator getHttpLogObfuscator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzE3NjM0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyNTo0NlrOGrYXbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowNTozNlrOGrdb4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MTE2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param headerName  the name of the header.\n          \n          \n            \n                     * @param headerName the name of the header.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448141166", "createdAt": "2020-07-01T06:25:46Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -378,7 +400,7 @@ public Builder authorizationHeaderName(String headerName) {\n         /**\n          * Adds an extra HTTP header to append to every request to a Realm Object Server.\n          *\n-         * @param headerName the name of the header.\n+         * @param headerName  the name of the header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDIyNA==", "bodyText": "This was the autoformatter, it indented both lines for the parameters to make them look cool.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448224224", "createdAt": "2020-07-01T09:05:36Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -378,7 +400,7 @@ public Builder authorizationHeaderName(String headerName) {\n         /**\n          * Adds an extra HTTP header to append to every request to a Realm Object Server.\n          *\n-         * @param headerName the name of the header.\n+         * @param headerName  the name of the header.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MTE2Ng=="}, "originalCommit": {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzM5ODMzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/ApiKeyObfuscator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0MDoxNFrOGraeMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDozNTo1M1rOGrgb4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NTY2Nw==", "bodyText": "I thought you decided to keep all these implementations outside the public API?", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448175667", "createdAt": "2020-07-01T07:40:14Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/ApiKeyObfuscator.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.log.obfuscator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3MzM3Nw==", "bodyText": "It seems I forgot to push my last commit. I moved this one to internal.log.obfuscator.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448273377", "createdAt": "2020-07-01T10:35:53Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/ApiKeyObfuscator.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.log.obfuscator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NTY2Nw=="}, "originalCommit": {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQwMTY5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0MToxOFrOGrageA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0MToxOFrOGrageA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NjI0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The HttpLogObfuscator keeps sensitive information from being displayed in the logcat.\n          \n          \n            \n             * The HttpLogObfuscator keeps sensitive information from being displayed in Logcat.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448176248", "createdAt": "2020-07-01T07:41:18Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.log.obfuscator;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.realm.internal.Util;\n+\n+/**\n+ * The HttpLogObfuscator keeps sensitive information from being displayed in the logcat.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQwMzM4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0MTo1NlrOGrahjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0MTo1NlrOGrahjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NjUyNg==", "bodyText": "This isn't a well-defined term, so probably a little more description.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448176526", "createdAt": "2020-07-01T07:41:56Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.log.obfuscator;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.realm.internal.Util;\n+\n+/**\n+ * The HttpLogObfuscator keeps sensitive information from being displayed in the logcat.\n+ */\n+public class HttpLogObfuscator {\n+\n+    private String feature;\n+    private Map<String, RegexPatternObfuscator> patternObfuscatorMap;\n+\n+    /**\n+     * Constructor for creating an HTTP log obfuscator.\n+     *\n+     * @param feature              the feature to obfuscate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQwNTM2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0MjozMFrOGrai2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0MjozMFrOGrai2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3Njg1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The obfuscator removes sensitive information from logcat entries.\n          \n          \n            \n             * The obfuscator removes sensitive information from Logcat entries.", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448176856", "createdAt": "2020-07-01T07:42:30Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.log.obfuscator;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import io.realm.internal.Util;\n+\n+/**\n+ * The obfuscator removes sensitive information from logcat entries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQxOTk3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0Njo1MlrOGrar6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0Njo1MlrOGrar6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3OTE3Ng==", "bodyText": "Not 100% sure why this class is public? Despite it's name it cannot really construct anything since only the LOGIN feature is allowed, so what would end users use this for? Couldn't this just be implemented as static information in AppConfiguration?", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448179176", "createdAt": "2020-07-01T07:46:52Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.log.obfuscator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.realm.mongodb.Credentials;\n+\n+/**\n+ * The RegexPatternObfuscatorFactory provides the {@link RegexPatternObfuscator}s needed to\n+ * obfuscate HTTP requests being logged for a particular feature.\n+ */\n+public class RegexPatternObfuscatorFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 410, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}