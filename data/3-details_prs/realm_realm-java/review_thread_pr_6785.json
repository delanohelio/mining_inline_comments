{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNjIxNzQ0", "number": 6785, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDo1MDoxMlrODtJXVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDo0MjoyMVrODtViFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjY1OTQyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/EmailPasswordAuthProviderTests.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDo1MDoxMlrOF-ZofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjoyOTowN1rOF-yeMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk3NTk5Nw==", "bodyText": "why did the state change?", "url": "https://github.com/realm/realm-java/pull/6785#discussion_r400975997", "createdAt": "2020-03-31T14:50:12Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/EmailPasswordAuthProviderTests.kt", "diffHunk": "@@ -88,7 +88,7 @@ class EmailPasswordAuthProviderTests {\n         val password = \"password1234\"\n         app.emailPasswordAuthProvider.registerUser(email, password)\n         val user = app.login(RealmCredentials.emailPassword(email, password))\n-        assertEquals(RealmUser.State.ACTIVE, user.state)\n+        assertEquals(RealmUser.State.LOGGED_IN, user.state)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc81ff5736c7f5e3256fcb16ba914f5ed7d77e88"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4Mjk2Mw==", "bodyText": "The names where previously ACTIVE, ERROR, LOGGED_OUT, which didn't feel as descriptive, so the where changed to LOGGED_IN, REMOVED and LOGGED_OUT in ObjectStore", "url": "https://github.com/realm/realm-java/pull/6785#discussion_r401382963", "createdAt": "2020-04-01T06:29:07Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/EmailPasswordAuthProviderTests.kt", "diffHunk": "@@ -88,7 +88,7 @@ class EmailPasswordAuthProviderTests {\n         val password = \"password1234\"\n         app.emailPasswordAuthProvider.registerUser(email, password)\n         val user = app.login(RealmCredentials.emailPassword(email, password))\n-        assertEquals(RealmUser.State.ACTIVE, user.state)\n+        assertEquals(RealmUser.State.LOGGED_IN, user.state)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk3NTk5Nw=="}, "originalCommit": {"oid": "cc81ff5736c7f5e3256fcb16ba914f5ed7d77e88"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzY1MDUyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo0NjoyOVrOF-jZtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo0NjoyOVrOF-jZtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzNjA1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                    assertTrue(app.allUsers().isEmpty())\n          \n          \n            \n                }", "url": "https://github.com/realm/realm-java/pull/6785#discussion_r401136055", "createdAt": "2020-03-31T18:46:29Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt", "diffHunk": "@@ -58,12 +60,173 @@ class RealmAppTests {\n         assertNull(app.currentUser())\n     }\n \n+    @Test\n+    fun allUsers() {\n+        assertEquals(0, app.allUsers().size)\n+        val user1 = app.login(RealmCredentials.anonymous())\n+        var allUsers = app.allUsers()\n+        assertEquals(1, allUsers.size)\n+        assertTrue(allUsers.containsKey(user1.id))\n+        assertEquals(user1, allUsers[user1.id])\n+\n+        val user2 = app.login(RealmCredentials.anonymous())\n+        allUsers = app.allUsers()\n+        assertEquals(2, allUsers.size)\n+        assertTrue(allUsers.containsKey(user2.id))\n+\n+        val user3: RealmUser = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        allUsers = app.allUsers()\n+        assertEquals(3, allUsers.size)\n+        assertTrue(allUsers.containsKey(user3.id))\n+\n+        // Logging out users that registered with email/password will just put them in LOGGED_OUT state\n+        user3.logOut();\n+        allUsers = app.allUsers()\n+        assertEquals(3, allUsers.size)\n+        assertTrue(allUsers.containsKey(user3.id))\n+        assertEquals(RealmUser.State.LOGGED_OUT, allUsers[user3.id]!!.state)\n+\n+        // Logging out anonymous users will remove them completely\n+        user1.logOut()\n+        allUsers = app.allUsers()\n+        assertEquals(2, allUsers.size)\n+        assertFalse(allUsers.containsKey(user1.id))\n+    }\n+\n+    @Test\n+    fun allUsers_retrieveRemovedUser() {\n+        val user1: RealmUser = app.login(RealmCredentials.anonymous())\n+        val allUsers: Map<String, RealmUser> = app.allUsers()\n+        assertEquals(1, allUsers.size)\n+        user1.logOut()\n+        assertEquals(1, allUsers.size)\n+        val userCopy: RealmUser = allUsers[user1.id] ?: error(\"Could not find user\")\n+        assertEquals(user1, userCopy)\n+        assertEquals(RealmUser.State.REMOVED, userCopy.state)\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc81ff5736c7f5e3256fcb16ba914f5ed7d77e88"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzcwMTc4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo1OTozNlrOF-j5aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo1OTozNlrOF-j5aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NDE2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n                @Test\n          \n          \n            \n                fun currentUser_FallbackToNextValidUser() {\n          \n          \n            \n                    val user1: RealmUser = app.login(RealmCredentials.anonymous())\n          \n          \n            \n                    val user2: RealmUser = app.login(RealmCredentials.anonymous())\n          \n          \n            \n                    assertEquals(user2, app.currentUser())\n          \n          \n            \n                    user2.logOut()\n          \n          \n            \n                    assertEquals(user1, app.currentUser())\n          \n          \n            \n                    user1.logOut()\n          \n          \n            \n                    assertNull(app.currentUser())\n          \n          \n            \n                }", "url": "https://github.com/realm/realm-java/pull/6785#discussion_r401144168", "createdAt": "2020-03-31T18:59:36Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt", "diffHunk": "@@ -58,12 +60,173 @@ class RealmAppTests {\n         assertNull(app.currentUser())\n     }\n \n+    @Test\n+    fun allUsers() {\n+        assertEquals(0, app.allUsers().size)\n+        val user1 = app.login(RealmCredentials.anonymous())\n+        var allUsers = app.allUsers()\n+        assertEquals(1, allUsers.size)\n+        assertTrue(allUsers.containsKey(user1.id))\n+        assertEquals(user1, allUsers[user1.id])\n+\n+        val user2 = app.login(RealmCredentials.anonymous())\n+        allUsers = app.allUsers()\n+        assertEquals(2, allUsers.size)\n+        assertTrue(allUsers.containsKey(user2.id))\n+\n+        val user3: RealmUser = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        allUsers = app.allUsers()\n+        assertEquals(3, allUsers.size)\n+        assertTrue(allUsers.containsKey(user3.id))\n+\n+        // Logging out users that registered with email/password will just put them in LOGGED_OUT state\n+        user3.logOut();\n+        allUsers = app.allUsers()\n+        assertEquals(3, allUsers.size)\n+        assertTrue(allUsers.containsKey(user3.id))\n+        assertEquals(RealmUser.State.LOGGED_OUT, allUsers[user3.id]!!.state)\n+\n+        // Logging out anonymous users will remove them completely\n+        user1.logOut()\n+        allUsers = app.allUsers()\n+        assertEquals(2, allUsers.size)\n+        assertFalse(allUsers.containsKey(user1.id))\n+    }\n+\n+    @Test\n+    fun allUsers_retrieveRemovedUser() {\n+        val user1: RealmUser = app.login(RealmCredentials.anonymous())\n+        val allUsers: Map<String, RealmUser> = app.allUsers()\n+        assertEquals(1, allUsers.size)\n+        user1.logOut()\n+        assertEquals(1, allUsers.size)\n+        val userCopy: RealmUser = allUsers[user1.id] ?: error(\"Could not find user\")\n+        assertEquals(user1, userCopy)\n+        assertEquals(RealmUser.State.REMOVED, userCopy.state)\n+    }\n+\n+    @Test\n+    fun switchUser() {\n+        val user1: RealmUser = app.login(RealmCredentials.anonymous())\n+        assertEquals(user1, app.currentUser())\n+        val user2: RealmUser = app.login(RealmCredentials.anonymous())\n+        assertEquals(user2, app.currentUser())\n+\n+        assertEquals(user1, app.switchUser(user1))\n+        assertEquals(user1, app.currentUser())\n+    }\n+\n+    @Test\n+    fun switchUser_throwIfUserNotLoggedIn() {\n+        val user1: RealmUser = app.login(RealmCredentials.anonymous())\n+        val user2: RealmUser = app.login(RealmCredentials.anonymous())\n+        assertEquals(user2, app.currentUser())\n+\n+        user1.logOut()\n+        try {\n+            app.switchUser(user1)\n+            fail()\n+        } catch (ignore: IllegalArgumentException) {\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc81ff5736c7f5e3256fcb16ba914f5ed7d77e88"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODM3OTUxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_RealmApp.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyNjo0MlrOF-qeDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo0NjowNVrOF-y3nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1MTg1Mw==", "bodyText": "I assume the heap-allocated SyncUser  will be removed via OsSyncUser destructor?", "url": "https://github.com/realm/realm-java/pull/6785#discussion_r401251853", "createdAt": "2020-03-31T22:26:42Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_RealmApp.cpp", "diffHunk": "@@ -104,3 +104,56 @@ JNIEXPORT jobject JNICALL Java_io_realm_RealmApp_nativeCurrentUser(JNIEnv* env,\n     return NULL;\n }\n \n+JNIEXPORT jlongArray JNICALL Java_io_realm_RealmApp_nativeGetAllUsers(JNIEnv* env, jclass, jlong j_app_ptr)\n+{\n+    try {\n+        App *app = reinterpret_cast<App *>(j_app_ptr);\n+        std::vector<std::shared_ptr<SyncUser>> users = app->all_users();\n+        auto size = users.size();\n+\n+        jlongArray java_users = env->NewLongArray(size);\n+        if (!java_users) {\n+            ThrowException(env, OutOfMemory, \"Could not allocate memory to create array of users.\");\n+            return nullptr;\n+        }\n+\n+        jlong* user_ptrs = new jlong[size];\n+        for(size_t i = 0; i < size; ++i) {\n+            auto *java_user = new std::shared_ptr<SyncUser>(std::move(users[i]));\n+            user_ptrs[i] = reinterpret_cast<int64_t>(java_user);\n+        }\n+\n+        env->SetLongArrayRegion(java_users, 0, size, user_ptrs);\n+        delete[] user_ptrs;\n+        return java_users;\n+    }\n+    CATCH_STD()\n+    return nullptr;\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_RealmApp_nativeSwitchUser(JNIEnv* env,\n+                                                               jclass,\n+                                                               jlong j_app_ptr,\n+                                                               jlong j_user_ptr)\n+{\n+    try {\n+        App* app = reinterpret_cast<App*>(j_app_ptr);\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_user_ptr);\n+        app->switch_user(user);\n+    }\n+    CATCH_STD()\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_RealmApp_nativeRemoveUser(JNIEnv* env,\n+                                                               jclass,\n+                                                               jlong j_app_ptr,\n+                                                               jlong j_user_ptr,\n+                                                               jobject j_callback)\n+{\n+    try {\n+        App* app = reinterpret_cast<App*>(j_app_ptr);\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_user_ptr);\n+        app->remove_user(user, JavaNetworkTransport::create_void_callback(env, j_callback));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc81ff5736c7f5e3256fcb16ba914f5ed7d77e88"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTQ3MQ==", "bodyText": "Yes", "url": "https://github.com/realm/realm-java/pull/6785#discussion_r401389471", "createdAt": "2020-04-01T06:46:05Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_RealmApp.cpp", "diffHunk": "@@ -104,3 +104,56 @@ JNIEXPORT jobject JNICALL Java_io_realm_RealmApp_nativeCurrentUser(JNIEnv* env,\n     return NULL;\n }\n \n+JNIEXPORT jlongArray JNICALL Java_io_realm_RealmApp_nativeGetAllUsers(JNIEnv* env, jclass, jlong j_app_ptr)\n+{\n+    try {\n+        App *app = reinterpret_cast<App *>(j_app_ptr);\n+        std::vector<std::shared_ptr<SyncUser>> users = app->all_users();\n+        auto size = users.size();\n+\n+        jlongArray java_users = env->NewLongArray(size);\n+        if (!java_users) {\n+            ThrowException(env, OutOfMemory, \"Could not allocate memory to create array of users.\");\n+            return nullptr;\n+        }\n+\n+        jlong* user_ptrs = new jlong[size];\n+        for(size_t i = 0; i < size; ++i) {\n+            auto *java_user = new std::shared_ptr<SyncUser>(std::move(users[i]));\n+            user_ptrs[i] = reinterpret_cast<int64_t>(java_user);\n+        }\n+\n+        env->SetLongArrayRegion(java_users, 0, size, user_ptrs);\n+        delete[] user_ptrs;\n+        return java_users;\n+    }\n+    CATCH_STD()\n+    return nullptr;\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_RealmApp_nativeSwitchUser(JNIEnv* env,\n+                                                               jclass,\n+                                                               jlong j_app_ptr,\n+                                                               jlong j_user_ptr)\n+{\n+    try {\n+        App* app = reinterpret_cast<App*>(j_app_ptr);\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_user_ptr);\n+        app->switch_user(user);\n+    }\n+    CATCH_STD()\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_RealmApp_nativeRemoveUser(JNIEnv* env,\n+                                                               jclass,\n+                                                               jlong j_app_ptr,\n+                                                               jlong j_user_ptr,\n+                                                               jobject j_callback)\n+{\n+    try {\n+        App* app = reinterpret_cast<App*>(j_app_ptr);\n+        auto user = *reinterpret_cast<std::shared_ptr<SyncUser>*>(j_user_ptr);\n+        app->remove_user(user, JavaNetworkTransport::create_void_callback(env, j_callback));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1MTg1Mw=="}, "originalCommit": {"oid": "cc81ff5736c7f5e3256fcb16ba914f5ed7d77e88"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODY0OTY3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDo0MDoyMFrOF-s_yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDo0MDoyMFrOF-s_yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5MzI1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * happen on the same thread as this this method is called on.\n          \n          \n            \n                 * happen on the same thread as this method is called on.", "url": "https://github.com/realm/realm-java/pull/6785#discussion_r401293257", "createdAt": "2020-04-01T00:40:20Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -139,12 +142,58 @@ public RealmUser currentUser() {\n     }\n \n     /**\n-     * TODO: Manually set the user returned by {@link #currentUser()}\n+     * Switch current user. The current user is the user returned by {@link #currentUser()}.\n      *\n-     * @param user\n+     * @param user the new current user.\n+     * @throws IllegalArgumentException if the user is is not {@link RealmUser.State#LOGGED_IN}.\n      */\n-    public static void setCurrentUser(SyncUser user) {\n-        // FIXME\n+    public RealmUser switchUser(RealmUser user) {\n+        Util.checkNull(user, \"user\");\n+        nativeSwitchUser(nativePtr, user.osUser.getNativePtr());\n+        return user;\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @param user user to remove.\n+     * @return user that was removed.\n+     * @throws ObjectServerError if called from the UI thread or if the user was logged in, but\n+     * could not be logged out.\n+     */\n+    public RealmUser removeUser(RealmUser user) throws ObjectServerError {\n+        Util.checkNull(user, \"user\");\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeRemoveUser(nativePtr, user.osUser.getNativePtr(), new OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected void mapSuccess(Object result, AtomicReference<RealmUser> success) {\n+                success.set(user);\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @param user user to remove.\n+     * @param callback callback when removing the user has completed or failed. The callback will always\n+     * happen on the same thread as this this method is called on.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc81ff5736c7f5e3256fcb16ba914f5ed7d77e88"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODY1MzAzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDo0MjoyMVrOF-tB5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDo0MjoyMVrOF-tB5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5Mzc5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * happen on the same thread as this this method is called on.\n          \n          \n            \n                 * happen on the same thread as this method is called on.", "url": "https://github.com/realm/realm-java/pull/6785#discussion_r401293798", "createdAt": "2020-04-01T00:42:21Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -217,7 +270,13 @@ public void logOut() {\n      * <p>\n      * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n      * will be notified and user credentials will be deleted from this device.\n+     * <p>\n+     * Logging out anonymous users will remove them immediately instead of marking them as\n+     * {@link RealmUser.State#LOGGED_OUT}. All other users will be marked as {@link RealmUser.State#LOGGED_OUT}\n+     * and will still be returned by {@link #allUsers()}.\n      *\n+     * @param callback callback when logging out has completed or failed. The callback will always\n+     * happen on the same thread as this this method is called on.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc81ff5736c7f5e3256fcb16ba914f5ed7d77e88"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 632, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}