{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODU4Mzkz", "number": 6788, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyMzoxN1rOD1QZiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToxNToyNFrOD1mGGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTY5ODAwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyMzoxOFrOGKmfKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjozOTozNlrOGLIzvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2OTUxMg==", "bodyText": "Yes. I guess we should somehow manage them in Realm, but don't what differentiates multiple apps when we want to support more than one. Is it only app id? And are they never a need to clearing them?", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413769512", "createdAt": "2020-04-23T12:23:18Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -98,14 +85,95 @@ public RealmApp(String appId) {\n      * @param config\n      */\n     public RealmApp(RealmAppConfiguration config) {\n+        // FIXME: Right now we only support one RealmApp. This class will throw a\n+        // exception if you try to create it twice. This is a really hacky way to do this\n+        // Figure out a better API that is always forward compatible\n+        synchronized (SyncManager.class) {\n+            String appId = config.getAppId();\n+            if (CREATED_APP_ID != null && !appId.equals(CREATED_APP_ID)) {\n+                throw new IllegalStateException(\"Only one RealmApp is currently supported. \" + CREATED_APP_ID + \" already exists.\");\n+            }\n+            CREATED_APP_ID = appId;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MDUxMA==", "bodyText": "And is it safe to have multiple instance? Seems like we can create multiple instances as long as it just have the same app id.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413770510", "createdAt": "2020-04-23T12:24:47Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -98,14 +85,95 @@ public RealmApp(String appId) {\n      * @param config\n      */\n     public RealmApp(RealmAppConfiguration config) {\n+        // FIXME: Right now we only support one RealmApp. This class will throw a\n+        // exception if you try to create it twice. This is a really hacky way to do this\n+        // Figure out a better API that is always forward compatible\n+        synchronized (SyncManager.class) {\n+            String appId = config.getAppId();\n+            if (CREATED_APP_ID != null && !appId.equals(CREATED_APP_ID)) {\n+                throw new IllegalStateException(\"Only one RealmApp is currently supported. \" + CREATED_APP_ID + \" already exists.\");\n+            }\n+            CREATED_APP_ID = appId;\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2OTUxMg=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzMTgzOQ==", "bodyText": "I modified the check, so only one instance is created. Also improved the error message.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414331839", "createdAt": "2020-04-24T06:39:36Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -98,14 +85,95 @@ public RealmApp(String appId) {\n      * @param config\n      */\n     public RealmApp(RealmAppConfiguration config) {\n+        // FIXME: Right now we only support one RealmApp. This class will throw a\n+        // exception if you try to create it twice. This is a really hacky way to do this\n+        // Figure out a better API that is always forward compatible\n+        synchronized (SyncManager.class) {\n+            String appId = config.getAppId();\n+            if (CREATED_APP_ID != null && !appId.equals(CREATED_APP_ID)) {\n+                throw new IllegalStateException(\"Only one RealmApp is currently supported. \" + CREATED_APP_ID + \" already exists.\");\n+            }\n+            CREATED_APP_ID = appId;\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2OTUxMg=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjA5NzE0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDoxMzoyMFrOGKqPYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo0MDo1MVrOGLI1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzMTAxMA==", "bodyText": "Not really any check for illegal headers", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413831010", "createdAt": "2020-04-23T14:13:20Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -219,25 +294,97 @@ public Builder appVersion(String appVersion) {\n         /**\n          * FIXME\n          *\n-         * @param errorHandler\n+         * @param time\n+         * @param unit\n          * @return\n          */\n-        public Builder defaultSessionErrorHandler(@Nullable SyncSession.ErrorHandler errorHandler) {\n-            // FIXME checks\n-            this.defaultErrorHandler = errorHandler;\n+        public Builder requestTimeout(long time, TimeUnit unit) {\n+            if (time < 1) {\n+                throw new IllegalStateException(\"A timeout above 0 is required: \" + time);\n+            }\n+            Util.checkNull(unit, \"unit\");\n+            this.requestTimeoutMs = TimeUnit.MICROSECONDS.convert(time, unit);\n             return this;\n         }\n \n         /**\n-         * FIXME\n+         * Sets the name of the HTTP header used to send authorization data in when making requests to\n+         * MongoDB Realm. The MongoDB server or firewall must have been configured to expect a\n+         * custom authorization header.\n+         * <p>\n+         * The default authorization header is named \"Authorization\".\n          *\n-         * @param time\n-         * @param unit\n+         * @param headerName name of the header.\n+         * @throws IllegalArgumentException if a null or empty header is provided.\n+         * @see <a href=\"https://docs.realm.io/platform/guides/learn-realm-sync-and-integrate-with-a-proxy#adding-a-custom-proxy\">Adding a custom proxy</a>\n+         */\n+        public Builder authorizationHeaderName(String headerName) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            this.autorizationHeaderName = headerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds an extra HTTP header to append to every request to a Realm Object Server.\n+         *\n+         * @param headerName the name of the header.\n+         * @param headerValue the value of header.\n+         * @throws IllegalArgumentException if a non-empty {@code headerName} is provided or a null {@code headerValue}.\n+         */\n+        public Builder addCustomRequestHeader(String headerName, String headerValue) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            Util.checkNull(headerValue, \"headerValue\");\n+            customHeaders.put(headerName, headerValue);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds extra HTTP headers to append to every request to a Realm Object Server.\n+         *\n+         * @param headers map of (headerName, headerValue) pairs.\n+         * @throws IllegalArgumentException If any of the headers provided are illegal.\n+         */\n+        public Builder addCustomRequestHeaders(@Nullable Map<String, String> headers) {\n+            if (headers != null) {\n+                customHeaders.putAll(headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzNjQyOQ==", "bodyText": "Good point. It mostly isn't there because I would expect the lower layers to validate as needed, but we need to add tests for it. I'll add a FIXME", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413836429", "createdAt": "2020-04-23T14:19:32Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -219,25 +294,97 @@ public Builder appVersion(String appVersion) {\n         /**\n          * FIXME\n          *\n-         * @param errorHandler\n+         * @param time\n+         * @param unit\n          * @return\n          */\n-        public Builder defaultSessionErrorHandler(@Nullable SyncSession.ErrorHandler errorHandler) {\n-            // FIXME checks\n-            this.defaultErrorHandler = errorHandler;\n+        public Builder requestTimeout(long time, TimeUnit unit) {\n+            if (time < 1) {\n+                throw new IllegalStateException(\"A timeout above 0 is required: \" + time);\n+            }\n+            Util.checkNull(unit, \"unit\");\n+            this.requestTimeoutMs = TimeUnit.MICROSECONDS.convert(time, unit);\n             return this;\n         }\n \n         /**\n-         * FIXME\n+         * Sets the name of the HTTP header used to send authorization data in when making requests to\n+         * MongoDB Realm. The MongoDB server or firewall must have been configured to expect a\n+         * custom authorization header.\n+         * <p>\n+         * The default authorization header is named \"Authorization\".\n          *\n-         * @param time\n-         * @param unit\n+         * @param headerName name of the header.\n+         * @throws IllegalArgumentException if a null or empty header is provided.\n+         * @see <a href=\"https://docs.realm.io/platform/guides/learn-realm-sync-and-integrate-with-a-proxy#adding-a-custom-proxy\">Adding a custom proxy</a>\n+         */\n+        public Builder authorizationHeaderName(String headerName) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            this.autorizationHeaderName = headerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds an extra HTTP header to append to every request to a Realm Object Server.\n+         *\n+         * @param headerName the name of the header.\n+         * @param headerValue the value of header.\n+         * @throws IllegalArgumentException if a non-empty {@code headerName} is provided or a null {@code headerValue}.\n+         */\n+        public Builder addCustomRequestHeader(String headerName, String headerValue) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            Util.checkNull(headerValue, \"headerValue\");\n+            customHeaders.put(headerName, headerValue);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds extra HTTP headers to append to every request to a Realm Object Server.\n+         *\n+         * @param headers map of (headerName, headerValue) pairs.\n+         * @throws IllegalArgumentException If any of the headers provided are illegal.\n+         */\n+        public Builder addCustomRequestHeaders(@Nullable Map<String, String> headers) {\n+            if (headers != null) {\n+                customHeaders.putAll(headers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzMTAxMA=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzMjMyMA==", "bodyText": "Added a FIXME in the tests", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414332320", "createdAt": "2020-04-24T06:40:51Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -219,25 +294,97 @@ public Builder appVersion(String appVersion) {\n         /**\n          * FIXME\n          *\n-         * @param errorHandler\n+         * @param time\n+         * @param unit\n          * @return\n          */\n-        public Builder defaultSessionErrorHandler(@Nullable SyncSession.ErrorHandler errorHandler) {\n-            // FIXME checks\n-            this.defaultErrorHandler = errorHandler;\n+        public Builder requestTimeout(long time, TimeUnit unit) {\n+            if (time < 1) {\n+                throw new IllegalStateException(\"A timeout above 0 is required: \" + time);\n+            }\n+            Util.checkNull(unit, \"unit\");\n+            this.requestTimeoutMs = TimeUnit.MICROSECONDS.convert(time, unit);\n             return this;\n         }\n \n         /**\n-         * FIXME\n+         * Sets the name of the HTTP header used to send authorization data in when making requests to\n+         * MongoDB Realm. The MongoDB server or firewall must have been configured to expect a\n+         * custom authorization header.\n+         * <p>\n+         * The default authorization header is named \"Authorization\".\n          *\n-         * @param time\n-         * @param unit\n+         * @param headerName name of the header.\n+         * @throws IllegalArgumentException if a null or empty header is provided.\n+         * @see <a href=\"https://docs.realm.io/platform/guides/learn-realm-sync-and-integrate-with-a-proxy#adding-a-custom-proxy\">Adding a custom proxy</a>\n+         */\n+        public Builder authorizationHeaderName(String headerName) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            this.autorizationHeaderName = headerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds an extra HTTP header to append to every request to a Realm Object Server.\n+         *\n+         * @param headerName the name of the header.\n+         * @param headerValue the value of header.\n+         * @throws IllegalArgumentException if a non-empty {@code headerName} is provided or a null {@code headerValue}.\n+         */\n+        public Builder addCustomRequestHeader(String headerName, String headerValue) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            Util.checkNull(headerValue, \"headerValue\");\n+            customHeaders.put(headerName, headerValue);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds extra HTTP headers to append to every request to a Realm Object Server.\n+         *\n+         * @param headers map of (headerName, headerValue) pairs.\n+         * @throws IllegalArgumentException If any of the headers provided are illegal.\n+         */\n+        public Builder addCustomRequestHeaders(@Nullable Map<String, String> headers) {\n+            if (headers != null) {\n+                customHeaders.putAll(headers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzMTAxMA=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjEzNzMzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDoyMDoyN1rOGKqncw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo1MjoyMVrOGLJK_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzNzE3MQ==", "bodyText": "Any reason for all these config methods not being on RealmUser?", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413837171", "createdAt": "2020-04-23T14:20:27Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -182,6 +196,55 @@ public static RealmConfiguration forRecovery(String canonicalPath, @Nullable byt\n         return forRecovery(canonicalPath, encryptionKey, schemaMediator);\n     }\n \n+    /**\n+     * FIXME\n+     *\n+     * @param user\n+     * @param partitionValue\n+     * @return\n+     */\n+    @Beta\n+    public static SyncConfiguration defaultConfig(RealmUser user, String partitionValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzNzc4OA==", "bodyText": "Yes and no.... The original design intent was to keep the same pattern for local and synced Realms, so:\nval localConfig = RealmConfiguration.Builder()....build()\nval localRealm = Realm.getInstance(localConfig)\n\nval syncConfig = SyncConfiguration.Builder(user, \"partitionValue\")....build()\nval syncConfig = Realm.getInstance(syncConfig)\n\nThat doesn't really explain why these helper methods for creating the simple config are here though and if we do this, we should probably also add RealmConfiguration.defaultConfig() for symmetry.\nWould it make sense to instead have?\nval user = app.login(RealmCredentials.anonymous())\nval syncConfig = user.defaultSyncConfiguration(\"partitionValue\")\n\nIt might, but we wanted to move people away from having to go through users for configurations, which the above doesn't really do.\nFor this PR, I would like to keep them where they are...but it is definitely an area of the API we need to keep a close eye one.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414337788", "createdAt": "2020-04-24T06:52:21Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -182,6 +196,55 @@ public static RealmConfiguration forRecovery(String canonicalPath, @Nullable byt\n         return forRecovery(canonicalPath, encryptionKey, schemaMediator);\n     }\n \n+    /**\n+     * FIXME\n+     *\n+     * @param user\n+     * @param partitionValue\n+     * @return\n+     */\n+    @Beta\n+    public static SyncConfiguration defaultConfig(RealmUser user, String partitionValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzNzE3MQ=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjM4NDI1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTowMzo1OFrOGKs9iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo1Mzo0MVrOGLJNdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3NTU5Mg==", "bodyText": "Just a generic thought about this:\nI acknowledge the comment written just above this line but using static variables to controlling instantiation logic is kind of ugly. I don't think the class itself should be responsible for knowing whether it has been instantiated or not. Would it not make sense to hide it behind something else?", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413875592", "createdAt": "2020-04-23T15:03:58Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -49,30 +57,7 @@\n     // we might want to lift in the future. So any implementation details so ideally be made\n     // with that in mind, i.e. keep static state to minimum.\n \n-    // Default session error handler that just output errors to LogCat\n-    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n-        @Override\n-        public void onError(SyncSession session, ObjectServerError error) {\n-            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n-                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n-                return;\n-            }\n-\n-            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n-                    session.getConfiguration().getServerUrl(),\n-                    error.toString());\n-            switch (error.getErrorCode().getCategory()) {\n-                case FATAL:\n-                    RealmLog.error(errorMsg);\n-                    break;\n-                case RECOVERABLE:\n-                    RealmLog.info(errorMsg);\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n-            }\n-        }\n-    };\n+    private volatile static String CREATED_APP_ID = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzODQyMw==", "bodyText": "Yes, this is super ugly and a hack. But it is one that is going to be removed shortly so this was the smallest amount of code needed to check it. Note, I improved the check and description around these variables. Hopefully, that makes it acceptable as a temp solution.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414338423", "createdAt": "2020-04-24T06:53:41Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -49,30 +57,7 @@\n     // we might want to lift in the future. So any implementation details so ideally be made\n     // with that in mind, i.e. keep static state to minimum.\n \n-    // Default session error handler that just output errors to LogCat\n-    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n-        @Override\n-        public void onError(SyncSession session, ObjectServerError error) {\n-            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n-                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n-                return;\n-            }\n-\n-            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n-                    session.getConfiguration().getServerUrl(),\n-                    error.toString());\n-            switch (error.getErrorCode().getCategory()) {\n-                case FATAL:\n-                    RealmLog.error(errorMsg);\n-                    break;\n-                case RECOVERABLE:\n-                    RealmLog.info(errorMsg);\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n-            }\n-        }\n-    };\n+    private volatile static String CREATED_APP_ID = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3NTU5Mg=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjM5NDM2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTowNTo1NVrOGKtDvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTowNTo1NVrOGKtDvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3NzE4MA==", "bodyText": "Unfortunately I still have not found a nice way to serialize to json without adding json keys using org.bson-library", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413877180", "createdAt": "2020-04-23T15:05:55Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java", "diffHunk": "@@ -90,16 +74,32 @@ public void realmClosed(RealmConfiguration configuration) {\n     public Object[] getSyncConfigurationOptions(RealmConfiguration config) {\n         if (config instanceof SyncConfiguration) {\n             SyncConfiguration syncConfig = (SyncConfiguration) config;\n-            SyncUser user = syncConfig.getUser();\n+            RealmUser user = syncConfig.getUser();\n+            RealmApp app = user.getApp();\n             String rosServerUrl = syncConfig.getServerUrl().toString();\n-            String rosUserIdentity = user.getIdentity();\n-            String syncRealmAuthUrl = user.getAuthenticationUrl().toString();\n-            String syncUserRefreshToken = user.getRefreshToken().toJson().toString();\n-            String syncUserAccessToken = user.getAccessToken(((SyncConfiguration) config)).toJson().toString();\n+            String rosUserIdentity = user.getId();\n+            String syncRealmAuthUrl = user.getApp().getConfiguration().getBaseUrl().toString();\n+            String syncUserRefreshToken = user.getRefreshToken();\n+            String syncUserAccessToken = user.getAccessToken();\n             byte sessionStopPolicy = syncConfig.getSessionStopPolicy().getNativeValue();\n             String urlPrefix = syncConfig.getUrlPrefix();\n-            String customAuthorizationHeaderName = SyncManager.getAuthorizationHeaderName(syncConfig.getServerUrl());\n-            Map<String, String> customHeaders = SyncManager.getCustomRequestHeaders(syncConfig.getServerUrl());\n+            String customAuthorizationHeaderName = app.getConfiguration().getAuthorizationHeaderName();\n+            Map<String, String> customHeaders = app.getConfiguration().getCustomRequestHeaders();\n+\n+            // Temporary work-around for serializing supported bson values\n+            BsonValue val = syncConfig.getPartitionValue();\n+            String partitionValue = null;\n+            if (val.isString()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjQyMDU0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/syncTestUtils/java/io/realm/TestRealmApp.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToxMDozMVrOGKtTXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToxMDozMVrOGKtTXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4MTE4Mg==", "bodyText": "customizeConfig is not used...but assume it is for future use.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413881182", "createdAt": "2020-04-23T15:10:31Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/syncTestUtils/java/io/realm/TestRealmApp.kt", "diffHunk": "@@ -26,7 +26,7 @@ import io.realm.log.LogLevel\n  *\n  * NOTE: This class must remain in the [io.realm] package in order to work.\n  */\n-class TestRealmApp(networkTransport: OsJavaNetworkTransport? = null) : RealmApp(createConfiguration()) {\n+class TestRealmApp(networkTransport: OsJavaNetworkTransport? = null, customizeConfig: (RealmAppConfiguration.Builder) -> Unit = {}) : RealmApp(createConfiguration()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjQ1MDQ5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToxNTo0N1rOGKtlcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo1NDoyMFrOGLJOpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4NTgwOQ==", "bodyText": "We could improve the readability in this method by hiding the computation of syncDir, userAgentBindingInfo and appDefinedUserAgent behind helper methods/classes. These could be tested in isolation making it less error-prone.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413885809", "createdAt": "2020-04-23T15:15:47Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -98,14 +85,95 @@ public RealmApp(String appId) {\n      * @param config\n      */\n     public RealmApp(RealmAppConfiguration config) {\n+        // FIXME: Right now we only support one RealmApp. This class will throw a\n+        // exception if you try to create it twice. This is a really hacky way to do this\n+        // Figure out a better API that is always forward compatible\n+        synchronized (SyncManager.class) {\n+            String appId = config.getAppId();\n+            if (CREATED_APP_ID != null && !appId.equals(CREATED_APP_ID)) {\n+                throw new IllegalStateException(\"Only one RealmApp is currently supported. \" + CREATED_APP_ID + \" already exists.\");\n+            }\n+            CREATED_APP_ID = appId;\n+        }\n+\n         this.config = config;\n         this.networkTransport = new OkHttpNetworkTransport();\n-        this.nativePtr = nativeCreate(\n+        networkTransport.setAuthorizationHeaderName(config.getAuthorizationHeaderName());\n+        for (Map.Entry<String, String> entry : config.getCustomRequestHeaders().entrySet()) {\n+            networkTransport.addCustomRequestHeader(entry.getKey(), entry.getValue());\n+        }\n+        this.syncManager = new SyncManager(this);\n+        this.nativePtr = init(config);\n+    }\n+\n+    private long init(RealmAppConfiguration config) {\n+        // Setup Realm part of User-Agent string\n+        String userAgentBindingInfo = \"Unknown\"; // Fallback in case of anything going wrong\n+        try {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"RealmJava/\");\n+            sb.append(BuildConfig.VERSION_NAME);\n+            sb.append(\" (\");\n+            sb.append(Util.isEmptyString(Build.DEVICE) ? \"unknown-device\" : Build.DEVICE);\n+            sb.append(\", \");\n+            sb.append(Util.isEmptyString(Build.MODEL) ? \"unknown-model\" : Build.MODEL);\n+            sb.append(\", v\");\n+            sb.append(Build.VERSION.SDK_INT);\n+            sb.append(\")\");\n+            userAgentBindingInfo = sb.toString();\n+        } catch (Exception e) {\n+            // Failures to construct the user agent should never cause the system itself to crash.\n+            RealmLog.warn(\"Constructing User-Agent description failed.\", e);\n+        }\n+\n+        // Create app UserAgent string\n+        String appDefinedUserAgent = null;\n+        String appName = config.getAppName();\n+        String appVersion = config.getAppVersion();\n+        if (!Util.isEmptyString(appName) || !Util.isEmptyString(appVersion)) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(Util.isEmptyString(appName) ? \"Undefined\" : appName);\n+            sb.append('/');\n+            sb.append(Util.isEmptyString(appName) ? \"Undefined\" : appVersion);\n+            appDefinedUserAgent = sb.toString();\n+        }\n+\n+        if (BaseRealm.applicationContext == null) {\n+            throw new IllegalStateException(\"Call Realm.init() first.\");\n+        }\n+        Context context = BaseRealm.applicationContext;\n+\n+        String syncDir = null;\n+        if (SyncManager.Debug.separatedDirForSyncManager) {\n+            try {\n+                // Files.createTempDirectory is not available on JDK 6.\n+                File dir = File.createTempFile(\"remote_sync_\", \"_\" + android.os.Process.myPid(), context.getFilesDir());\n+                if (!dir.delete()) {\n+                    throw new IllegalStateException(String.format(Locale.US,\n+                            \"Temp file '%s' cannot be deleted.\", dir.getPath()));\n+                }\n+                if (!dir.mkdir()) {\n+                    throw new IllegalStateException(String.format(Locale.US,\n+                            \"Directory '%s' for SyncManager cannot be created. \",\n+                            dir.getPath()));\n+                }\n+                syncDir = dir.getPath();\n+            } catch (IOException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            syncDir = context.getFilesDir().getPath();\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzODcyNg==", "bodyText": "Yes, I split the class into smaller methods", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414338726", "createdAt": "2020-04-24T06:54:20Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -98,14 +85,95 @@ public RealmApp(String appId) {\n      * @param config\n      */\n     public RealmApp(RealmAppConfiguration config) {\n+        // FIXME: Right now we only support one RealmApp. This class will throw a\n+        // exception if you try to create it twice. This is a really hacky way to do this\n+        // Figure out a better API that is always forward compatible\n+        synchronized (SyncManager.class) {\n+            String appId = config.getAppId();\n+            if (CREATED_APP_ID != null && !appId.equals(CREATED_APP_ID)) {\n+                throw new IllegalStateException(\"Only one RealmApp is currently supported. \" + CREATED_APP_ID + \" already exists.\");\n+            }\n+            CREATED_APP_ID = appId;\n+        }\n+\n         this.config = config;\n         this.networkTransport = new OkHttpNetworkTransport();\n-        this.nativePtr = nativeCreate(\n+        networkTransport.setAuthorizationHeaderName(config.getAuthorizationHeaderName());\n+        for (Map.Entry<String, String> entry : config.getCustomRequestHeaders().entrySet()) {\n+            networkTransport.addCustomRequestHeader(entry.getKey(), entry.getValue());\n+        }\n+        this.syncManager = new SyncManager(this);\n+        this.nativePtr = init(config);\n+    }\n+\n+    private long init(RealmAppConfiguration config) {\n+        // Setup Realm part of User-Agent string\n+        String userAgentBindingInfo = \"Unknown\"; // Fallback in case of anything going wrong\n+        try {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"RealmJava/\");\n+            sb.append(BuildConfig.VERSION_NAME);\n+            sb.append(\" (\");\n+            sb.append(Util.isEmptyString(Build.DEVICE) ? \"unknown-device\" : Build.DEVICE);\n+            sb.append(\", \");\n+            sb.append(Util.isEmptyString(Build.MODEL) ? \"unknown-model\" : Build.MODEL);\n+            sb.append(\", v\");\n+            sb.append(Build.VERSION.SDK_INT);\n+            sb.append(\")\");\n+            userAgentBindingInfo = sb.toString();\n+        } catch (Exception e) {\n+            // Failures to construct the user agent should never cause the system itself to crash.\n+            RealmLog.warn(\"Constructing User-Agent description failed.\", e);\n+        }\n+\n+        // Create app UserAgent string\n+        String appDefinedUserAgent = null;\n+        String appName = config.getAppName();\n+        String appVersion = config.getAppVersion();\n+        if (!Util.isEmptyString(appName) || !Util.isEmptyString(appVersion)) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(Util.isEmptyString(appName) ? \"Undefined\" : appName);\n+            sb.append('/');\n+            sb.append(Util.isEmptyString(appName) ? \"Undefined\" : appVersion);\n+            appDefinedUserAgent = sb.toString();\n+        }\n+\n+        if (BaseRealm.applicationContext == null) {\n+            throw new IllegalStateException(\"Call Realm.init() first.\");\n+        }\n+        Context context = BaseRealm.applicationContext;\n+\n+        String syncDir = null;\n+        if (SyncManager.Debug.separatedDirForSyncManager) {\n+            try {\n+                // Files.createTempDirectory is not available on JDK 6.\n+                File dir = File.createTempFile(\"remote_sync_\", \"_\" + android.os.Process.myPid(), context.getFilesDir());\n+                if (!dir.delete()) {\n+                    throw new IllegalStateException(String.format(Locale.US,\n+                            \"Temp file '%s' cannot be deleted.\", dir.getPath()));\n+                }\n+                if (!dir.mkdir()) {\n+                    throw new IllegalStateException(String.format(Locale.US,\n+                            \"Directory '%s' for SyncManager cannot be created. \",\n+                            dir.getPath()));\n+                }\n+                syncDir = dir.getPath();\n+            } catch (IOException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            syncDir = context.getFilesDir().getPath();\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4NTgwOQ=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjU1NjYyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTozNToyMVrOGKulAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODo1NzoxNVrOGLNr6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwMjA4Mg==", "bodyText": "Is this change intended? Also, avoid using magic numbers.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413902082", "createdAt": "2020-04-23T15:35:21Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java", "diffHunk": "@@ -66,7 +65,7 @@ public void realmClosed(RealmConfiguration configuration) {\n     }\n \n     public Object[] getSyncConfigurationOptions(RealmConfiguration config) {\n-        return new Object[12];\n+        return new Object[14];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxMTc1Mg==", "bodyText": "Yes, good point. Added a constant with this that is shared.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414411752", "createdAt": "2020-04-24T08:57:15Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java", "diffHunk": "@@ -66,7 +65,7 @@ public void realmClosed(RealmConfiguration configuration) {\n     }\n \n     public Object[] getSyncConfigurationOptions(RealmConfiguration config) {\n-        return new Object[12];\n+        return new Object[14];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwMjA4Mg=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjU2MDQ1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTozNjowM1rOGKunVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTozNjowM1rOGKunVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwMjY3Nw==", "bodyText": "Is there a typo in the variable name?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String partionKeyValue = (String) syncConfigurationOptions[12];\n          \n          \n            \n                    String partitionKeyValue = (String) syncConfigurationOptions[12];", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413902677", "createdAt": "2020-04-23T15:36:03Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java", "diffHunk": "@@ -218,6 +218,8 @@ private OsRealmConfig(final RealmConfiguration config,\n         String urlPrefix = (String)(syncConfigurationOptions[8]);\n         String customAuthorizationHeaderName = (String)(syncConfigurationOptions[9]);\n         Byte clientResyncMode = (Byte) syncConfigurationOptions[11];\n+        String partionKeyValue = (String) syncConfigurationOptions[12];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjU2MTI2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/util/KotlinTestUtils.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTozNjoxMVrOGKunzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTozNjoxMVrOGKunzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwMjc5Nw==", "bodyText": "As already mentioned org.jetbrains.kotlin:kotlin-test has an assertFailsWith which we could use in Kotlin-land.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413902797", "createdAt": "2020-04-23T15:36:11Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/util/KotlinTestUtils.kt", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.realm.util\n+\n+import io.realm.ErrorCode\n+import io.realm.ObjectServerError\n+import org.junit.Assert.assertEquals\n+import org.junit.Assert.fail\n+\n+// Helper methods for improving Kotlin unit tests.\n+\n+/**\n+ * Verify that a specific exception is thrown\n+ */\n+inline fun <reified T : Exception> expectException(method: () -> Unit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjU5MzY2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTo0MjoxOVrOGKu7Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo0NzoyNFrOGLPqxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwNzcyNg==", "bodyText": "What does this annotation do?", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413907726", "createdAt": "2020-04-23T15:42:19Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -432,8 +442,9 @@ public RealmMongoDBService getMongoDBService() {\n         return null;\n     }\n \n+    @SuppressFBWarnings(\"NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0NDIyOA==", "bodyText": "It disables a FindBugs false positive. You can use this if what FindBugs complains about isn't accurate.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414444228", "createdAt": "2020-04-24T09:47:24Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -432,8 +442,9 @@ public RealmMongoDBService getMongoDBService() {\n         return null;\n     }\n \n+    @SuppressFBWarnings(\"NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwNzcyNg=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQzNjcyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzoxODoyM1rOGK_7fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjozMzoyNVrOGLIpLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NjM2NQ==", "bodyText": "btw why not rename SyncManager to SyncService?", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414186365", "createdAt": "2020-04-23T23:18:23Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java", "diffHunk": "@@ -149,16 +153,17 @@ public void errorHandler_clientResetReported() {\n         looperThread.addTestRealm(realm);\n \n         // Trigger error\n-        SyncManager.simulateClientReset(SyncManager.getOrCreateSession(config, null));\n+        SyncManager syncService = user.getApp().getSyncService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyOTEzNQ==", "bodyText": "After yesterday's design meeting with the other SDK's the consensus landed on just renaming this to RealmSync in a similar way to RealmFunctions.\nWe are probably going to go through another round of naming review when we get closer to official launch.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414329135", "createdAt": "2020-04-24T06:33:25Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java", "diffHunk": "@@ -149,16 +153,17 @@ public void errorHandler_clientResetReported() {\n         looperThread.addTestRealm(realm);\n \n         // Trigger error\n-        SyncManager.simulateClientReset(SyncManager.getOrCreateSession(config, null));\n+        SyncManager syncService = user.getApp().getSyncService();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NjM2NQ=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQ2ODYwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SchemaTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozMDoxMVrOGLANMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozMDoxMVrOGLANMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MDg5Nw==", "bodyText": "You can annotate createTestUser with @JvmStatic and call it as a static method\nRealmUser user = SyncTestUtils.createTestUser(app);", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414190897", "createdAt": "2020-04-23T23:30:11Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SchemaTests.java", "diffHunk": "@@ -42,11 +43,18 @@\n     public final TestSyncConfigurationFactory configFactory = new TestSyncConfigurationFactory();\n \n     private SyncConfiguration config;\n+    private TestRealmApp app;\n \n     @Before\n     public void setUp() {\n-        SyncUser user = SyncTestUtils.createTestUser();\n-        config = configFactory.createSyncConfigurationBuilder(user, \"realm://objectserver.realm.io/~/default\").build();\n+        app = new TestRealmApp();\n+        RealmUser user = SyncTestUtils.Companion.createTestUser(app);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUyMzI4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0OTozMVrOGLAqZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo1Njo1OVrOGLQCfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODM3Mg==", "bodyText": "This is always true? it will test identity", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414198372", "createdAt": "2020-04-23T23:49:31Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.kt", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.SyncTestUtils.Companion.createTestUser\n+import io.realm.entities.StringOnly\n+import io.realm.entities.StringOnlyModule\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import io.realm.rule.RunInLooperThread\n+import io.realm.util.expectException\n+import org.junit.*\n+import org.junit.Assert.assertEquals\n+import org.junit.Assert.assertTrue\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.io.File\n+import java.lang.IllegalArgumentException\n+\n+@RunWith(AndroidJUnit4::class)\n+class SyncConfigurationTests {\n+\n+    companion object {\n+        private const val DEFAULT_PARTITION = \"default\"\n+    }\n+\n+    @get:Rule\n+    val configFactory = TestSyncConfigurationFactory()\n+\n+    @get:Rule\n+    val looperThread = RunInLooperThread()\n+\n+    @get:Rule\n+    val tempFolder = TemporaryFolder()\n+\n+    private lateinit var app: TestRealmApp\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        app.close()\n+    }\n+\n+    @Test\n+    fun errorHandler() {\n+        val builder: SyncConfiguration.Builder = SyncConfiguration.Builder(createTestUser(app), DEFAULT_PARTITION)\n+        val errorHandler: SyncSession.ErrorHandler = object : SyncSession.ErrorHandler {\n+            override fun onError(session: SyncSession, error: ObjectServerError) {}\n+        }\n+        val config = builder.errorHandler(errorHandler).build()\n+        Assert.assertEquals(errorHandler, config.errorHandler)\n+    }\n+\n+    @Test\n+    fun errorHandler_fromSyncManager() {\n+        val user: RealmUser = createTestUser(app)\n+        val config: SyncConfiguration = SyncConfiguration.defaultConfig(user, DEFAULT_PARTITION)\n+        Assert.assertEquals(app.configuration.defaultErrorHandler, config.errorHandler)\n+    }\n+\n+    @Test\n+    fun errorHandler_nullThrows() {\n+        val user: RealmUser = createTestUser(app)\n+        val builder = SyncConfiguration.Builder(user, DEFAULT_PARTITION)\n+        expectException<java.lang.IllegalArgumentException> { builder.errorHandler(TestHelper.getNull())  }\n+    }\n+\n+    @Test\n+    fun equals() {\n+        val user: RealmUser = createTestUser(app)\n+        val config: SyncConfiguration = SyncConfiguration.defaultConfig(user, DEFAULT_PARTITION)\n+        Assert.assertTrue(config == config)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MDMwMQ==", "bodyText": "In Kotlin == is the same as using .equals(...) while === is identity.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414450301", "createdAt": "2020-04-24T09:56:59Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.kt", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.SyncTestUtils.Companion.createTestUser\n+import io.realm.entities.StringOnly\n+import io.realm.entities.StringOnlyModule\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import io.realm.rule.RunInLooperThread\n+import io.realm.util.expectException\n+import org.junit.*\n+import org.junit.Assert.assertEquals\n+import org.junit.Assert.assertTrue\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.io.File\n+import java.lang.IllegalArgumentException\n+\n+@RunWith(AndroidJUnit4::class)\n+class SyncConfigurationTests {\n+\n+    companion object {\n+        private const val DEFAULT_PARTITION = \"default\"\n+    }\n+\n+    @get:Rule\n+    val configFactory = TestSyncConfigurationFactory()\n+\n+    @get:Rule\n+    val looperThread = RunInLooperThread()\n+\n+    @get:Rule\n+    val tempFolder = TemporaryFolder()\n+\n+    private lateinit var app: TestRealmApp\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        app.close()\n+    }\n+\n+    @Test\n+    fun errorHandler() {\n+        val builder: SyncConfiguration.Builder = SyncConfiguration.Builder(createTestUser(app), DEFAULT_PARTITION)\n+        val errorHandler: SyncSession.ErrorHandler = object : SyncSession.ErrorHandler {\n+            override fun onError(session: SyncSession, error: ObjectServerError) {}\n+        }\n+        val config = builder.errorHandler(errorHandler).build()\n+        Assert.assertEquals(errorHandler, config.errorHandler)\n+    }\n+\n+    @Test\n+    fun errorHandler_fromSyncManager() {\n+        val user: RealmUser = createTestUser(app)\n+        val config: SyncConfiguration = SyncConfiguration.defaultConfig(user, DEFAULT_PARTITION)\n+        Assert.assertEquals(app.configuration.defaultErrorHandler, config.errorHandler)\n+    }\n+\n+    @Test\n+    fun errorHandler_nullThrows() {\n+        val user: RealmUser = createTestUser(app)\n+        val builder = SyncConfiguration.Builder(user, DEFAULT_PARTITION)\n+        expectException<java.lang.IllegalArgumentException> { builder.errorHandler(TestHelper.getNull())  }\n+    }\n+\n+    @Test\n+    fun equals() {\n+        val user: RealmUser = createTestUser(app)\n+        val config: SyncConfiguration = SyncConfiguration.defaultConfig(user, DEFAULT_PARTITION)\n+        Assert.assertTrue(config == config)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODM3Mg=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDYyODU0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/KotlinSyncedRealmTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyOTozMFrOGLBhpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyOTozMFrOGLBhpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMjUxNg==", "bodyText": "Is this a bad renaming? remove this or top function", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414212516", "createdAt": "2020-04-24T00:29:30Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/KotlinSyncedRealmTests.kt", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.entities.*\n+import io.realm.kotlin.syncSession\n+import io.realm.kotlin.where\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Ignore\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import java.util.*\n+\n+@RunWith(AndroidJUnit4::class)\n+class KotlinSyncedRealmTests { // FIXME: Rename to SyncedRealmTests once remaining Java tests have been moved\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var realm: Realm\n+    private lateinit var partitionValue: String\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.TRACE)\n+        app = TestRealmApp()\n+        partitionValue = UUID.randomUUID().toString()\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::realm.isInitialized) {\n+            realm.close()\n+            app.close()\n+        }\n+        RealmLog.setLevel(LogLevel.WARN)\n+    }\n+\n+    // Smoke test for Sync. Waiting for working Sync support.\n+    @Test\n+    fun connectWithInitialSchema() {\n+        val user: RealmUser = createNewUser()\n+        val config = createDefaultConfig(user)\n+        realm = Realm.getInstance(config)\n+        app.syncManager.getSession(config).uploadAllLocalChanges()\n+        app.syncManager.getSession(config).downloadAllServerChanges()\n+        assertTrue(realm.isEmpty)\n+    }\n+\n+    // Smoke test for Sync\n+    @Ignore(\"Dev Mode doesn't work fully yet on the server\")\n+    @Test\n+    fun roundTripObjectsNotInServerSchemaObject() {\n+        // User 1 creates an object an uploads it to MongoDB Realm\n+        val user1: RealmUser = createNewUser()\n+        val config1: SyncConfiguration = createDefaultConfig(user1, partitionValue)\n+        realm = Realm.getInstance(config1)\n+        realm.executeTransaction {\n+            for (i in 1..10) {\n+                it.insert(SyncColor())\n+            }\n+        }\n+        app.syncManager.getSession(config1).uploadAllLocalChanges()\n+        assertEquals(10, realm.where<SyncColor>().count())\n+        realm.close()\n+\n+        // User 2 logs and using the same partition key should see the object\n+        val user2: RealmUser = createNewUser()\n+        val config2 = createDefaultConfig(user2, partitionValue)\n+        realm = Realm.getInstance(config2)\n+        app.syncManager.getSession(config2).downloadAllServerChanges()\n+        assertEquals(10, realm.where<SyncColor>().count())\n+    }\n+\n+    // Smoke test for sync\n+    // Insert different types with no links between them\n+    @Test\n+    fun roundTripSimpleObjectsInServerSchema() {\n+        @Test\n+        fun roundTripLinkedObjectsInServerSchemaObject() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTE0NTA1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_RealmApp.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDozMToxNVrOGLF6kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDozMToxNVrOGLF6kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4NDQzNA==", "bodyText": "This could be related to the FindClass being performed on a different classloader than the one containing the Java class", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414284434", "createdAt": "2020-04-24T04:31:15Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_RealmApp.cpp", "diffHunk": "@@ -21,21 +21,80 @@\n #include \"jni_util/java_method.hpp\"\n #include \"jni_util/jni_utils.hpp\"\n \n+#include <binding_callback_thread_observer.hpp>\n #include <sync/app.hpp>\n+#include <sync/sync_manager.hpp>\n \n using namespace realm;\n using namespace realm::app;\n using namespace realm::jni_util;\n using namespace realm::_impl;\n \n+struct AndroidClientListener : public realm::BindingCallbackThreadObserver {\n+    AndroidClientListener(JNIEnv* env)\n+            : m_realm_exception_class(env, \"io/realm/exceptions/RealmError\")\n+    {\n+    }\n+\n+    void did_create_thread() override\n+    {\n+        Log::d(\"SyncClient thread created\");\n+        // Attach the sync client thread to the JVM so errors can be returned properly\n+        JniUtils::get_env(true);\n+    }\n+\n+    void will_destroy_thread() override\n+    {\n+        // avoid allocating any NewString if we have a pending exception\n+        // otherwise a \"JNI called with pending exception\" will be called\n+        if (JniUtils::get_env(true)->ExceptionCheck() == JNI_FALSE) {\n+            Log::d(\"SyncClient thread destroyed\");\n+        }\n+\n+        // Failing to detach the JVM before closing the thread will crash on ART\n+        JniUtils::detach_current_thread();\n+    }\n+\n+    void handle_error(std::exception const& e) override\n+    {\n+        JNIEnv* env = JniUtils::get_env(true);\n+        std::string msg = format(\"An exception has been thrown on the sync client thread:\\n%1\", e.what());\n+        Log::f(msg.c_str());\n+        // Since user has no way to handle exceptions thrown on the sync client thread, we just convert it to a Java\n+        // exception to get more debug information for ourself.\n+        // FIXME: We really need to find a universal and clever way to get the native backtrace when exception thrown\n+        env->ThrowNew(m_realm_exception_class, msg.c_str());\n+    }\n+\n+private:\n+    // For some reasons, FindClass() doesn't work in the native thread even when the JVM is attached before. Get the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTE4ODk1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDo0OTozOVrOGLGReA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDoyNDo1MFrOGLREwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5MDI5Ng==", "bodyText": "isn't this leaked?", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414290296", "createdAt": "2020-04-24T04:49:39Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp", "diffHunk": "@@ -255,12 +258,11 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_OsRealmConfig_nativeCreateAndSe\n         // Doing the methods lookup from the thread that loaded the lib, to avoid\n         // https://developer.android.com/training/articles/perf-jni.html#faq_FindClass\n         static JavaMethod java_error_callback_method(env, sync_manager_class, \"notifyErrorHandler\",\n-                                                     \"(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V\", true);\n-        static JavaMethod java_bind_session_method(env, sync_manager_class, \"bindSessionWithConfig\",\n-                                                   \"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\", true);\n+                                                     \"(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V\");\n \n         // error handler will be called form the sync client thread\n-        auto error_handler = [](std::shared_ptr<SyncSession> session, SyncError error) {\n+        auto sync_service_object = env->NewGlobalRef(j_java_sync_service);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2NzI2NA==", "bodyText": "Yes. Good catch. We need to modify the JavaGlobalRef class so it can be passed in lamdas. I'm adding a FIXME for now.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414467264", "createdAt": "2020-04-24T10:24:50Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp", "diffHunk": "@@ -255,12 +258,11 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_OsRealmConfig_nativeCreateAndSe\n         // Doing the methods lookup from the thread that loaded the lib, to avoid\n         // https://developer.android.com/training/articles/perf-jni.html#faq_FindClass\n         static JavaMethod java_error_callback_method(env, sync_manager_class, \"notifyErrorHandler\",\n-                                                     \"(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V\", true);\n-        static JavaMethod java_bind_session_method(env, sync_manager_class, \"bindSessionWithConfig\",\n-                                                   \"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\", true);\n+                                                     \"(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V\");\n \n         // error handler will be called form the sync client thread\n-        auto error_handler = [](std::shared_ptr<SyncSession> session, SyncError error) {\n+        auto sync_service_object = env->NewGlobalRef(j_java_sync_service);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5MDI5Ng=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTIwNjA4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDo1NzowNVrOGLGaxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDo1NzowNVrOGLGaxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5MjY3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the root folder containing all files and Realms used when when synchronizing data\n          \n          \n            \n                 * Returns the root folder containing all files and Realms used when synchronizing data", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414292679", "createdAt": "2020-04-24T04:57:05Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -88,48 +111,68 @@ public String getAppVersion() {\n      * FIXME\n      * @return\n      */\n-    public String getBaseUrl() {\n+    public URL getBaseUrl() {\n         return baseUrl;\n     }\n \n     /**\n      * FIXME\n      * @return\n      */\n-    public Context getContext() {\n-        return context;\n+    public byte[] getEncryptionKey() {\n+        return encryptionKey == null ? null : Arrays.copyOf(encryptionKey, encryptionKey.length);\n     }\n \n     /**\n      * FIXME\n      * @return\n      */\n-    public SyncSession.ErrorHandler getDefaultErrorHandler() {\n-        return defaultErrorHandler;\n+    public long getLogLevel() {\n+        return logLevel;\n     }\n \n     /**\n      * FIXME\n      * @return\n      */\n-    public byte[] getEncryptionKey() {\n-        return encryptionKey == null ? null : Arrays.copyOf(encryptionKey, encryptionKey.length);\n+    public long getRequestTimeoutMs() {\n+        return requestTimeoutMs;\n     }\n \n+\n     /**\n      * FIXME\n+     *\n      * @return\n      */\n-    public long getLogLevel() {\n-        return logLevel;\n+    public String getAuthorizationHeaderName() {\n+        return authorizationHeaderName;\n     }\n \n     /**\n      * FIXME\n+     *\n      * @return\n      */\n-    public long getRequestTimeoutMs() {\n-        return requestTimeoutMs;\n+    public Map<String, String> getCustomRequestHeaders() {\n+        return customHeaders;\n+    }\n+\n+    /**\n+     * FIXME\n+     *\n+     * @return\n+     */\n+    public SyncSession.ErrorHandler getDefaultErrorHandler() {\n+        return defaultErrorHandler;\n+    }\n+\n+    /**\n+     * Returns the root folder containing all files and Realms used when when synchronizing data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTIxMDEwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDo1ODo1NVrOGLGdHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDo1ODo1NVrOGLGdHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5MzI3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Configures the root folder containing all files and Realms used when when synchronizing data\n          \n          \n            \n                     * Configures the root folder containing all files and Realms used when synchronizing data", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414293276", "createdAt": "2020-04-24T04:58:55Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -219,25 +294,97 @@ public Builder appVersion(String appVersion) {\n         /**\n          * FIXME\n          *\n-         * @param errorHandler\n+         * @param time\n+         * @param unit\n          * @return\n          */\n-        public Builder defaultSessionErrorHandler(@Nullable SyncSession.ErrorHandler errorHandler) {\n-            // FIXME checks\n-            this.defaultErrorHandler = errorHandler;\n+        public Builder requestTimeout(long time, TimeUnit unit) {\n+            if (time < 1) {\n+                throw new IllegalStateException(\"A timeout above 0 is required: \" + time);\n+            }\n+            Util.checkNull(unit, \"unit\");\n+            this.requestTimeoutMs = TimeUnit.MICROSECONDS.convert(time, unit);\n             return this;\n         }\n \n         /**\n-         * FIXME\n+         * Sets the name of the HTTP header used to send authorization data in when making requests to\n+         * MongoDB Realm. The MongoDB server or firewall must have been configured to expect a\n+         * custom authorization header.\n+         * <p>\n+         * The default authorization header is named \"Authorization\".\n          *\n-         * @param time\n-         * @param unit\n+         * @param headerName name of the header.\n+         * @throws IllegalArgumentException if a null or empty header is provided.\n+         * @see <a href=\"https://docs.realm.io/platform/guides/learn-realm-sync-and-integrate-with-a-proxy#adding-a-custom-proxy\">Adding a custom proxy</a>\n+         */\n+        public Builder authorizationHeaderName(String headerName) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            this.autorizationHeaderName = headerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds an extra HTTP header to append to every request to a Realm Object Server.\n+         *\n+         * @param headerName the name of the header.\n+         * @param headerValue the value of header.\n+         * @throws IllegalArgumentException if a non-empty {@code headerName} is provided or a null {@code headerValue}.\n+         */\n+        public Builder addCustomRequestHeader(String headerName, String headerValue) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            Util.checkNull(headerValue, \"headerValue\");\n+            customHeaders.put(headerName, headerValue);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds extra HTTP headers to append to every request to a Realm Object Server.\n+         *\n+         * @param headers map of (headerName, headerValue) pairs.\n+         * @throws IllegalArgumentException If any of the headers provided are illegal.\n+         */\n+        public Builder addCustomRequestHeaders(@Nullable Map<String, String> headers) {\n+            if (headers != null) {\n+                customHeaders.putAll(headers);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         *\n+         * @param errorHandler\n          * @return\n          */\n-        public Builder requestTimeout(long time, TimeUnit unit) {\n-            // FIXME checks\n-            this.requestTimeoutMs = TimeUnit.MICROSECONDS.convert(time, unit);\n+        public Builder defaultSyncErrorHandler(SyncSession.ErrorHandler errorHandler) {\n+            Util.checkNull(errorHandler, \"errorHandler\");\n+            defaultErrorHandler = errorHandler;\n+            return this;\n+        }\n+\n+        /**\n+         * Configures the root folder containing all files and Realms used when when synchronizing data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 298}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTIyMDUxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTowMzoyNVrOGLGisQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDoyODoyNFrOGLRM4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NDcwNQ==", "bodyText": "I think all these endpoints (+ Stitch) should be in the dependencies file (built via BuildConfig)", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414294705", "createdAt": "2020-04-24T05:03:25Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -200,29 +263,33 @@ static RealmConfiguration forRecovery(String canonicalPath, @Nullable byte[] enc\n         return new RealmConfiguration(null,null, canonicalPath,null, encryptionKey, 0,null, false, OsRealmConfig.Durability.FULL, schemaMediator, null, null, true, null, true, Long.MAX_VALUE);\n     }\n \n-    static URI resolveServerUrl(URI serverUrl, String userIdentifier) {\n+    static URI resolveServerUrl(URI baseUrl, RealmUser user) {\n+        // Configure the full path to the Realm\n+        String path = String.format(\"/api/client/v2.0/app/%s/realm-sync\", user.getApp().getConfiguration().getAppId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2OTM0NA==", "bodyText": "This is being handled by ObjectStore now. So this method can actually be deleted.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414469344", "createdAt": "2020-04-24T10:28:24Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -200,29 +263,33 @@ static RealmConfiguration forRecovery(String canonicalPath, @Nullable byte[] enc\n         return new RealmConfiguration(null,null, canonicalPath,null, encryptionKey, 0,null, false, OsRealmConfig.Durability.FULL, schemaMediator, null, null, true, null, true, Long.MAX_VALUE);\n     }\n \n-    static URI resolveServerUrl(URI serverUrl, String userIdentifier) {\n+    static URI resolveServerUrl(URI baseUrl, RealmUser user) {\n+        // Configure the full path to the Realm\n+        String path = String.format(\"/api/client/v2.0/app/%s/realm-sync\", user.getApp().getConfiguration().getAppId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NDcwNQ=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTIyNjYzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTowNTo1MlrOGLGl4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTowNTo1MlrOGLGl4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NTUyMQ==", "bodyText": "maybe remove smaller since it's subjective\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * into smaller Realms that can be synchronized independently.\n          \n          \n            \n                 * into Realms that can be synchronized independently.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414295521", "createdAt": "2020-04-24T05:05:52Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -411,19 +477,27 @@ public String getUrlPrefix() {\n     /**\n      * Returns what happens in case of a Client Resync.\n      */\n-    public ClientResyncMode getClientResyncMode() {\n+    ClientResyncMode getClientResyncMode() {\n         return clientResyncMode;\n     }\n \n+    /**\n+     * Returns the value this Realm is partitioned on. The partition key is a property defined in\n+     * MongoDB Realm. All classes with a property with this value will be synchronized to the\n+     * Realm.\n+     *\n+     * @return the value being used by MongoDB Realm to partition the server side MongoDB Database\n+     * into smaller Realms that can be synchronized independently.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTIzMjU0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTowNzo0N1rOGLGo1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTowNzo0N1rOGLGo1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NjI3Nw==", "bodyText": "this description is a bit ambiguous, maybe reformulate into something similar to https://github.com/realm/realm-java/pull/6788/files#diff-f19583eb27d992ab7655df81251f244cR489", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414296277", "createdAt": "2020-04-24T05:07:47Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -456,65 +530,101 @@ public ClientResyncMode getClientResyncMode() {\n         @Nullable // null means the user hasn't explicitly set one. An appropriate default is chosen when calling build()\n         private ClientResyncMode clientResyncMode = null;\n         private long maxNumberOfActiveVersions = Long.MAX_VALUE;\n+        private final BsonValue partitionKeyValue;\n \n-        Builder(Context context, SyncUser user, String url) {\n-            //noinspection ConstantConditions\n+        /**\n+         * FIXME\n+         *\n+         * @param user\n+         * @param partitionValue\n+         */\n+        public Builder(RealmUser user, String partitionValue) {\n+            this(user, new BsonString(partitionValue));\n+        }\n+\n+        /**\n+         * FIXME\n+         *\n+         * @param user\n+         * @param partitionValue\n+         */\n+        public Builder(RealmUser user, ObjectId partitionValue) {\n+            this(user, new BsonObjectId(partitionValue));\n+        }\n+\n+        /**\n+         * FIXME\n+         *\n+         * @param user\n+         * @param partitionValue\n+         */\n+        public Builder(RealmUser user, int partitionValue) {\n+            this(user, new BsonInt32(partitionValue));\n+        }\n+\n+        /**\n+         * FIXME\n+         *\n+         * @param user\n+         * @param partitionValue\n+         */\n+        public Builder(RealmUser user, long partitionValue) {\n+            this(user, new BsonInt64(partitionValue));\n+        }\n+\n+        /**\n+         * Builder used to construct instances of a SyncConfiguration in a fluent manner.\n+         *\n+         * @param user the user opening the Realm on the server.\n+         * @param partitionValue the partition value specifying which subset of data to include in the Realm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTI0MDEwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToxMDoyN1rOGLGssA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToxMDoyN1rOGLGssA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NzI2NA==", "bodyText": "can we add a FIXME if the sync  team is willing to re-enable RECOVER_LOCAL_REALM?", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414297264", "createdAt": "2020-04-24T05:10:27Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -1052,48 +1086,35 @@ public SyncConfiguration build() {\n                 }\n             }\n \n-            // Check if the user has an identifier, if not, it cannot use /~/.\n-            if (serverUrl.toString().contains(\"/~/\") && user.getIdentity() == null) {\n-                throw new IllegalStateException(\"The serverUrl contains a /~/, but the user does not have an identity.\" +\n-                        \" Most likely it hasn't been authenticated yet or has been created directly from an\" +\n-                        \" access token. Use a path without /~/.\");\n-            }\n-\n             // Set the default Client Resync Mode based on the current type of Realm.\n             // Eventually RECOVER_LOCAL_REALM should be the default for all types.\n             if (clientResyncMode == null) {\n-                clientResyncMode = ClientResyncMode.RECOVER_LOCAL_REALM;\n+                clientResyncMode = ClientResyncMode.MANUAL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 573}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTI0MTc3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToxMTowOFrOGLGtnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDozODowOFrOGLRjIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NzUwMw==", "bodyText": "it is possible or not? if yes we need to add a test for it", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414297503", "createdAt": "2020-04-24T05:11:08Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -1052,48 +1086,35 @@ public SyncConfiguration build() {\n                 }\n             }\n \n-            // Check if the user has an identifier, if not, it cannot use /~/.\n-            if (serverUrl.toString().contains(\"/~/\") && user.getIdentity() == null) {\n-                throw new IllegalStateException(\"The serverUrl contains a /~/, but the user does not have an identity.\" +\n-                        \" Most likely it hasn't been authenticated yet or has been created directly from an\" +\n-                        \" access token. Use a path without /~/.\");\n-            }\n-\n             // Set the default Client Resync Mode based on the current type of Realm.\n             // Eventually RECOVER_LOCAL_REALM should be the default for all types.\n             if (clientResyncMode == null) {\n-                clientResyncMode = ClientResyncMode.RECOVER_LOCAL_REALM;\n+                clientResyncMode = ClientResyncMode.MANUAL;\n             }\n \n             if (rxFactory == null && isRxJavaAvailable()) {\n                 rxFactory = new RealmObservableFactory(true);\n             }\n \n+            // FIXME: Figure out how to map to on-disk path. Partition key can be up to 16MB in size.\n             // Determine location on disk\n-            // Use the serverUrl + user to create a unique filepath unless it has been explicitly overridden.\n-            // <rootDir>/<userIdentifier>/<serverPath>/<serverFileNameOrOverriddenFileName>\n-            URI resolvedServerUrl = resolveServerUrl(serverUrl, user.getIdentity());\n-            File rootDir = overrideDefaultFolder ? directory : defaultFolder;\n-            String realmPathFromRootDir = user.getIdentity() + \"/\" + getServerPath(resolvedServerUrl);\n-            File realmFileDirectory = new File(rootDir, realmPathFromRootDir);\n-\n-            String realmFileName = overrideDefaultLocalFileName ? fileName : defaultLocalFileName;\n+            // Use the serverUrl + user to create a unique filepath.\n+            // It is possible for users to change the root directory or realm file name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 591}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ3NTA0MA==", "bodyText": "I removed the option for changing the realm file name. The Sync root dir is now being defined as part of the RealmAppconfiguration. There should be a test for it there.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414475040", "createdAt": "2020-04-24T10:38:08Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -1052,48 +1086,35 @@ public SyncConfiguration build() {\n                 }\n             }\n \n-            // Check if the user has an identifier, if not, it cannot use /~/.\n-            if (serverUrl.toString().contains(\"/~/\") && user.getIdentity() == null) {\n-                throw new IllegalStateException(\"The serverUrl contains a /~/, but the user does not have an identity.\" +\n-                        \" Most likely it hasn't been authenticated yet or has been created directly from an\" +\n-                        \" access token. Use a path without /~/.\");\n-            }\n-\n             // Set the default Client Resync Mode based on the current type of Realm.\n             // Eventually RECOVER_LOCAL_REALM should be the default for all types.\n             if (clientResyncMode == null) {\n-                clientResyncMode = ClientResyncMode.RECOVER_LOCAL_REALM;\n+                clientResyncMode = ClientResyncMode.MANUAL;\n             }\n \n             if (rxFactory == null && isRxJavaAvailable()) {\n                 rxFactory = new RealmObservableFactory(true);\n             }\n \n+            // FIXME: Figure out how to map to on-disk path. Partition key can be up to 16MB in size.\n             // Determine location on disk\n-            // Use the serverUrl + user to create a unique filepath unless it has been explicitly overridden.\n-            // <rootDir>/<userIdentifier>/<serverPath>/<serverFileNameOrOverriddenFileName>\n-            URI resolvedServerUrl = resolveServerUrl(serverUrl, user.getIdentity());\n-            File rootDir = overrideDefaultFolder ? directory : defaultFolder;\n-            String realmPathFromRootDir = user.getIdentity() + \"/\" + getServerPath(resolvedServerUrl);\n-            File realmFileDirectory = new File(rootDir, realmPathFromRootDir);\n-\n-            String realmFileName = overrideDefaultLocalFileName ? fileName : defaultLocalFileName;\n+            // Use the serverUrl + user to create a unique filepath.\n+            // It is possible for users to change the root directory or realm file name.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NzUwMw=="}, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 591}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTI1MDA1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToxNDoxNlrOGLGyEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToxNDoxNlrOGLGyEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5ODY0MQ==", "bodyText": "I think you used 14 elsewhere (since we added two parameters only)", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414298641", "createdAt": "2020-04-24T05:14:16Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java", "diffHunk": "@@ -112,10 +112,12 @@ public void realmClosed(RealmConfiguration configuration) {\n                     urlPrefix,\n                     customAuthorizationHeaderName,\n                     customHeaders,\n-                    syncConfig.getClientResyncMode().getNativeValue()\n+                    OsRealmConfig.CLIENT_RESYNC_MODE_MANUAL, // Client Resync is no longer supported in v10, but might be re-added later.\n+                    partitionValue,\n+                    app.getSyncService()\n             };\n         } else {\n-            return new Object[12];\n+            return new Object[15];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTI1Mjc0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/syncTestUtils/java/io/realm/SyncTestUtils.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToxNToyNFrOGLGzhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToxNToyNFrOGLGzhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5OTAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // in order to be able fully re-initialize.\n          \n          \n            \n                            // in order to be able to fully re-initialize.", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414299012", "createdAt": "2020-04-24T05:15:24Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/syncTestUtils/java/io/realm/SyncTestUtils.kt", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2016 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.BaseRealm\n+import io.realm.Realm\n+import io.realm.internal.objectserver.Token\n+import io.realm.internal.objectstore.OsJavaNetworkTransport\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.objectserver.utils.UserFactory\n+import java.io.File\n+import java.io.IOException\n+import java.lang.IllegalStateException\n+import java.util.*\n+\n+class SyncTestUtils {\n+    companion object {\n+        private var originalLogLevel = RealmLog.getLevel() // Should only be modified by prepareEnvironmentForTest and restoreEnvironmentAfterTest = 0\n+        fun prepareEnvironmentForTest() {\n+            Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+            originalLogLevel = RealmLog.getLevel()\n+            RealmLog.setLevel(LogLevel.DEBUG)\n+        }\n+\n+        /**\n+         * Tries to restore the environment as best as possible after a test.\n+         */\n+        fun restoreEnvironmentAfterTest() {\n+            // Block until all users are logged out\n+            UserFactory.logoutAllUsers()\n+\n+            // Reset log level\n+            RealmLog.setLevel(originalLogLevel)\n+            if (BaseRealm.applicationContext != null) {\n+                // Realm was already initialized. Reset all internal state\n+                // in order to be able fully re-initialize.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 641, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}