{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMjQ1NDc1", "number": 7206, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo1MDo1MlrOFLSbBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTozOTozNFrOFLnLJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzgwNDg3OnYy", "diffSide": "RIGHT", "path": "examples/coroutinesExample/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo1MDo1MlrOIOX8Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo1MDo1MlrOIOX8Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MzIyNw==", "bodyText": "They are out of BETA now, so we should use the proper release: https://search.maven.org/artifact/com.dropbox.mobile.store/store4/4.0.0/jar", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r551943227", "createdAt": "2021-01-05T13:50:52Z", "author": {"login": "cmelchior"}, "path": "examples/coroutinesExample/build.gradle", "diffHunk": "@@ -54,18 +59,37 @@ dependencies {\n     implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n     implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n \n-    implementation \"androidx.constraintlayout:constraintlayout:2.0.1\"\n-\n     implementation \"androidx.activity:activity-ktx:1.1.0\"\n-    implementation \"androidx.fragment:fragment-ktx:1.2.5\"\n \n     implementation \"androidx.appcompat:appcompat:1.2.0\"\n \n+    implementation \"androidx.constraintlayout:constraintlayout:2.0.4\"\n+    implementation \"androidx.coordinatorlayout:coordinatorlayout:1.1.0\"\n+\n+    implementation \"androidx.fragment:fragment-ktx:1.2.5\"\n+\n     implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0\"\n     implementation \"androidx.lifecycle:lifecycle-runtime-ktx:2.2.0\"\n     implementation \"androidx.lifecycle:lifecycle-livedata-ktx:2.2.0\"\n     implementation \"androidx.lifecycle:lifecycle-common-java8:2.2.0\"\n \n+    implementation \"androidx.legacy:legacy-support-v4:1.0.0\"\n+\n+    implementation \"androidx.multidex:multidex:2.0.1\"\n+\n+    implementation \"androidx.recyclerview:recyclerview:1.1.0\"\n+\n+    implementation \"com.dropbox.mobile.store:store4:4.0.0-beta01\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAyODU0OnYy", "diffSide": "RIGHT", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/data/newsreader/local/RealmNYTDao.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0NzozMlrOIO2Wdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0NzozMlrOIO2Wdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTQ2Mw==", "bodyText": "I would add some comments to why this is Closable", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552441463", "createdAt": "2021-01-06T08:47:32Z", "author": {"login": "cmelchior"}, "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/data/newsreader/local/RealmNYTDao.kt", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.data.newsreader.local\n+\n+import io.realm.Realm\n+import io.realm.RealmConfiguration\n+import io.realm.RealmList\n+import io.realm.RealmResults\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTMultimedium\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTimesArticle\n+import io.realm.kotlin.executeTransactionAwait\n+import io.realm.kotlin.toFlow\n+import io.realm.kotlin.where\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.withContext\n+import java.io.Closeable\n+import java.util.concurrent.Executors\n+\n+interface RealmNYTDao : Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAzMDI5OnYy", "diffSide": "RIGHT", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/data/newsreader/local/RealmNYTDao.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0ODowOVrOIO2Xhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0ODowOVrOIO2Xhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTczNA==", "bodyText": "Maybe just realm? Calling it closableRealm would, to me, indicate that you can also have nonclosableRealm which isn't true.", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552441734", "createdAt": "2021-01-06T08:48:09Z", "author": {"login": "cmelchior"}, "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/data/newsreader/local/RealmNYTDao.kt", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.data.newsreader.local\n+\n+import io.realm.Realm\n+import io.realm.RealmConfiguration\n+import io.realm.RealmList\n+import io.realm.RealmResults\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTMultimedium\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTimesArticle\n+import io.realm.kotlin.executeTransactionAwait\n+import io.realm.kotlin.toFlow\n+import io.realm.kotlin.where\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.withContext\n+import java.io.Closeable\n+import java.util.concurrent.Executors\n+\n+interface RealmNYTDao : Closeable {\n+    suspend fun insertArticles(articles: List<RealmNYTimesArticle>)\n+    suspend fun updateArticle(id: String)\n+    suspend fun deleteArticles(section: String)\n+    suspend fun deleteAllArticles()\n+    fun getArticlesBlocking(section: String): RealmResults<RealmNYTimesArticle>\n+    fun getArticles(section: String): Flow<List<RealmNYTimesArticle>>\n+    fun getArticleBlocking(id: String): RealmNYTimesArticle?\n+    fun getArticle(id: String): Flow<RealmNYTimesArticle?>\n+    fun countArticles(section: String): Long\n+}\n+\n+class RealmNYTDaoImpl(\n+        private val realmConfiguration: RealmConfiguration\n+) : RealmNYTDao {\n+\n+    private val monoThreadDispatcher = Executors.newFixedThreadPool(1).asCoroutineDispatcher()\n+    private val closeableRealm = Realm.getInstance(realmConfiguration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAzMTM2OnYy", "diffSide": "RIGHT", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/data/newsreader/local/RealmNYTDao.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0ODozM1rOIO2YKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0ODozM1rOIO2YKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTg5OQ==", "bodyText": "Maybe add a comment as to why we need this?", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552441899", "createdAt": "2021-01-06T08:48:33Z", "author": {"login": "cmelchior"}, "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/data/newsreader/local/RealmNYTDao.kt", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.data.newsreader.local\n+\n+import io.realm.Realm\n+import io.realm.RealmConfiguration\n+import io.realm.RealmList\n+import io.realm.RealmResults\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTMultimedium\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTimesArticle\n+import io.realm.kotlin.executeTransactionAwait\n+import io.realm.kotlin.toFlow\n+import io.realm.kotlin.where\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.withContext\n+import java.io.Closeable\n+import java.util.concurrent.Executors\n+\n+interface RealmNYTDao : Closeable {\n+    suspend fun insertArticles(articles: List<RealmNYTimesArticle>)\n+    suspend fun updateArticle(id: String)\n+    suspend fun deleteArticles(section: String)\n+    suspend fun deleteAllArticles()\n+    fun getArticlesBlocking(section: String): RealmResults<RealmNYTimesArticle>\n+    fun getArticles(section: String): Flow<List<RealmNYTimesArticle>>\n+    fun getArticleBlocking(id: String): RealmNYTimesArticle?\n+    fun getArticle(id: String): Flow<RealmNYTimesArticle?>\n+    fun countArticles(section: String): Long\n+}\n+\n+class RealmNYTDaoImpl(\n+        private val realmConfiguration: RealmConfiguration\n+) : RealmNYTDao {\n+\n+    private val monoThreadDispatcher = Executors.newFixedThreadPool(1).asCoroutineDispatcher()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA5MTIyOnYy", "diffSide": "RIGHT", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/di/DependencyGraph.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTowODoyMlrOIO270w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTowODoyMlrOIO270w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1MTAyNw==", "bodyText": "Maybe just add a comment that this is our own DI solution for the sake of keeping the example simple?", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552451027", "createdAt": "2021-01-06T09:08:22Z", "author": {"login": "cmelchior"}, "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/di/DependencyGraph.kt", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.di\n+\n+import com.dropbox.android.external.store4.Fetcher\n+import com.dropbox.android.external.store4.SourceOfTruth\n+import com.dropbox.android.external.store4.Store\n+import com.dropbox.android.external.store4.StoreBuilder\n+import io.realm.RealmConfiguration\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTDao\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTDaoImpl\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTimesArticle\n+import io.realm.examples.coroutinesexample.data.newsreader.local.insertArticles\n+import io.realm.examples.coroutinesexample.data.newsreader.local.repository.NewsReaderRepository\n+import io.realm.examples.coroutinesexample.data.newsreader.network.NYTimesApiClient\n+import io.realm.examples.coroutinesexample.data.newsreader.network.NYTimesApiClientImpl\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTimesArticle\n+import io.realm.examples.coroutinesexample.util.NewsReaderFlowFactory\n+import kotlinx.coroutines.flow.map\n+\n+object DependencyGraph {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzE4NDE4OnYy", "diffSide": "RIGHT", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/ui/details/DetailsViewModel.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTozNToxNVrOIO3ytQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMzowNToxMFrOIO_ZTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2NTA3Nw==", "bodyText": "Is this check needed? I thought that delay would abort in a clean way if the coroutine is closed?", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552465077", "createdAt": "2021-01-06T09:35:15Z", "author": {"login": "cmelchior"}, "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/ui/details/DetailsViewModel.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.ui.details\n+\n+import androidx.lifecycle.*\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTimesArticle\n+import io.realm.examples.coroutinesexample.di.DependencyGraph\n+import kotlinx.coroutines.currentCoroutineContext\n+import kotlinx.coroutines.delay\n+import kotlinx.coroutines.flow.flow\n+import kotlinx.coroutines.flow.launchIn\n+import kotlinx.coroutines.flow.onEach\n+import kotlinx.coroutines.isActive\n+import kotlin.time.ExperimentalTime\n+import kotlin.time.seconds\n+\n+@ExperimentalTime\n+class DetailsViewModel : ViewModel() {\n+\n+    private val repository = DependencyGraph.provideNewsReaderRepository()\n+\n+    private val article = MutableLiveData<RealmNYTimesArticle>()\n+\n+    private val _read = MutableLiveData<Boolean>()\n+    val read: LiveData<Boolean>\n+        get() = _read\n+\n+    val date = article.map { it.updatedDate.toString() }\n+    val title = article.map { it.title }\n+    val articleText = article.map { it.abstractText }\n+\n+    override fun onCleared() {\n+        repository.close()\n+    }\n+\n+    fun loadDetails(id: String) {\n+        repository.getStory(id)\n+                .onEach { realmArticle ->\n+                    checkNotNull(realmArticle)\n+                            .also {\n+                                if (article.value == null) {\n+                                    article.postValue(it)\n+\n+                                    if (!it.read) {\n+                                        markAsRead(it)\n+                                    } else {\n+                                        markAsRead(it, true)\n+                                    }\n+                                }\n+                            }\n+                }.launchIn(viewModelScope)\n+    }\n+\n+    private fun markAsRead(article: RealmNYTimesArticle, immediately: Boolean = false) {\n+        if (immediately) {\n+            _read.postValue(true)\n+        } else {\n+            flow<Unit> {\n+                delay(2.seconds)\n+                if (currentCoroutineContext().isActive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU4OTY0Ng==", "bodyText": "That's correct, I forgot the flow is launched used viewModelScope.", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552589646", "createdAt": "2021-01-06T13:05:10Z", "author": {"login": "edualonso"}, "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/ui/details/DetailsViewModel.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.ui.details\n+\n+import androidx.lifecycle.*\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTimesArticle\n+import io.realm.examples.coroutinesexample.di.DependencyGraph\n+import kotlinx.coroutines.currentCoroutineContext\n+import kotlinx.coroutines.delay\n+import kotlinx.coroutines.flow.flow\n+import kotlinx.coroutines.flow.launchIn\n+import kotlinx.coroutines.flow.onEach\n+import kotlinx.coroutines.isActive\n+import kotlin.time.ExperimentalTime\n+import kotlin.time.seconds\n+\n+@ExperimentalTime\n+class DetailsViewModel : ViewModel() {\n+\n+    private val repository = DependencyGraph.provideNewsReaderRepository()\n+\n+    private val article = MutableLiveData<RealmNYTimesArticle>()\n+\n+    private val _read = MutableLiveData<Boolean>()\n+    val read: LiveData<Boolean>\n+        get() = _read\n+\n+    val date = article.map { it.updatedDate.toString() }\n+    val title = article.map { it.title }\n+    val articleText = article.map { it.abstractText }\n+\n+    override fun onCleared() {\n+        repository.close()\n+    }\n+\n+    fun loadDetails(id: String) {\n+        repository.getStory(id)\n+                .onEach { realmArticle ->\n+                    checkNotNull(realmArticle)\n+                            .also {\n+                                if (article.value == null) {\n+                                    article.postValue(it)\n+\n+                                    if (!it.read) {\n+                                        markAsRead(it)\n+                                    } else {\n+                                        markAsRead(it, true)\n+                                    }\n+                                }\n+                            }\n+                }.launchIn(viewModelScope)\n+    }\n+\n+    private fun markAsRead(article: RealmNYTimesArticle, immediately: Boolean = false) {\n+        if (immediately) {\n+            _read.postValue(true)\n+        } else {\n+            flow<Unit> {\n+                delay(2.seconds)\n+                if (currentCoroutineContext().isActive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2NTA3Nw=="}, "originalCommit": {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzE5OTE1OnYy", "diffSide": "RIGHT", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/ui/main/MainFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTozNzo1NlrOIO38Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMzowNToyM1rOIO_aMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2NzQ5OQ==", "bodyText": "Any reason we need both ErrorException and ErrorMessage as states? Doesn't that just complicate things since we are just reading the error message from the exception anyway?", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552467499", "createdAt": "2021-01-06T09:37:56Z", "author": {"login": "cmelchior"}, "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/ui/main/MainFragment.kt", "diffHunk": "@@ -21,76 +21,175 @@ import android.util.Log\n import android.view.LayoutInflater\n import android.view.View\n import android.view.ViewGroup\n-import android.widget.Button\n+import android.widget.AdapterView\n+import android.widget.ArrayAdapter\n+import android.widget.SpinnerAdapter\n+import android.widget.Toast\n import androidx.fragment.app.Fragment\n import androidx.fragment.app.viewModels\n import androidx.lifecycle.Observer\n+import androidx.recyclerview.widget.LinearLayoutManager\n import io.realm.examples.coroutinesexample.R\n-import io.realm.examples.coroutinesexample.TAG\n-import io.realm.examples.coroutinesexample.model.Dog\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTimesArticle\n+import io.realm.examples.coroutinesexample.data.newsreader.network.sectionsToNames\n+import io.realm.examples.coroutinesexample.databinding.FragmentMainBinding\n+import java.util.*\n+import kotlin.Comparator\n \n class MainFragment : Fragment() {\n \n-    companion object {\n-        fun newInstance() = MainFragment()\n+    interface OnItemClicked {\n+        fun onItemClicked(id: String)\n     }\n \n-    private val viewModel: MainViewModel by viewModels()\n+    internal lateinit var onItemclickedCallback: OnItemClicked\n \n-    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n-                              savedInstanceState: Bundle?): View {\n-        return inflater.inflate(R.layout.main_fragment, container, false)\n-                .also { view -> addClickListeners(view) }\n+    private val viewModel: MainViewModel by viewModels()\n+    private val newsReaderAdapter = MainAdapter { id ->\n+        onItemclickedCallback.onItemClicked(id)\n     }\n \n-    override fun onResume() {\n-        super.onResume()\n-        addObservers()\n-    }\n+    private lateinit var binding: FragmentMainBinding\n \n-    override fun onPause() {\n-        super.onPause()\n-        removeObservers()\n-    }\n+    override fun onCreateView(\n+            inflater: LayoutInflater,\n+            container: ViewGroup?,\n+            savedInstanceState: Bundle?\n+    ): View? = FragmentMainBinding.inflate(inflater, container, false)\n+            .also { binding ->\n+                binding.lifecycleOwner = viewLifecycleOwner\n+                this.binding = binding\n+                setupSpinner()\n+                setupRecyclerView()\n+                setupLiveData()\n+            }.root\n \n-    private fun addClickListeners(view: View) {\n-        view.findViewById<Button>(R.id.buttonHeavyTransaction).setOnClickListener {\n-            // Calling this multiple times before each transaction is done will not\n-            // freeze the UI\n-            viewModel.insertDogs(100000)\n-        }\n-        view.findViewById<Button>(R.id.buttonTransaction).setOnClickListener {\n-            // Calling this multiple times before each transaction is done will not\n-            // freeze the UI\n-            viewModel.insertDogs()\n+    private fun setupSpinner() {\n+        with(binding.spinner) {\n+            adapter = ArrayAdapter<CharSequence>(\n+                    context,\n+                    android.R.layout.simple_spinner_dropdown_item,\n+                    sectionsToNames.keys.sortedWith(\n+                            Comparator { o1, o2 ->\n+                                if (o1.toLowerCase(Locale.ROOT) == \"home\") return@Comparator -1\n+                                if (o2.toLowerCase(Locale.ROOT) == \"home\") return@Comparator 1\n+                                return@Comparator o1.compareTo(o2, ignoreCase = true)\n+                            }\n+                    )\n+            )\n+            onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\n+                override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\n+                    viewModel.getTopStories(getApiSection(adapter, position))\n+                }\n+\n+                override fun onNothingSelected(parent: AdapterView<*>?) {\n+                    // No-op\n+                }\n+            }\n         }\n-        view.findViewById<Button>(R.id.buttonCount).setOnClickListener {\n-            viewModel.countDogs()\n+    }\n+\n+    private fun setupRecyclerView() {\n+        with(binding.list) {\n+            layoutManager = LinearLayoutManager(context)\n+            adapter = newsReaderAdapter\n         }\n-        view.findViewById<Button>(R.id.buttonDelete).setOnClickListener {\n-            // Calling this while bulk-inserting will not freeze the UI\n-            viewModel.deleteAll()\n+\n+        with(binding.refresh) {\n+            setOnRefreshListener {\n+                with(binding.spinner) {\n+                    viewModel.getTopStories(getApiSection(adapter, selectedItemPosition), true)\n+                }\n+            }\n         }\n-        view.findViewById<Button>(R.id.buttonCancelCoroutine).setOnClickListener {\n-            viewModel.cancel()\n+    }\n+\n+    private fun setupLiveData() {\n+        viewModel.newsReaderState.observe(viewLifecycleOwner, Observer { viewState ->\n+            when (viewState) {\n+                is NewsReaderState.Loading -> {\n+                    Log.d(TAG, \"--- origin: ${viewState.origin}, loading\")\n+                    RealmStateHelper.loading(binding)\n+                }\n+                is NewsReaderState.Data -> {\n+                    Log.d(TAG, \"--- origin: ${viewState.origin}, elements: ${viewState.data.size}\")\n+                    RealmStateHelper.data(binding, viewState.data, newsReaderAdapter)\n+                }\n+                is NewsReaderState.NoNewData -> {\n+                    Log.d(TAG, \"--- origin: ${viewState.origin}, no new data\")\n+                    RealmStateHelper.noNewData(binding)\n+                }\n+                is NewsReaderState.ErrorException -> {\n+                    val stacktrace = viewState.throwable.cause?.stackTrace?.joinToString { \"$it\\n\" }\n+                    Log.e(TAG, \"--- error (exception): ${viewState.throwable.message} - ${viewState.throwable.cause?.message}: $stacktrace\")\n+                    RealmStateHelper.error(binding)\n+                }\n+                is NewsReaderState.ErrorMessage -> {\n+                    Log.e(TAG, \"--- error (message): ${viewState.message}\")\n+                    RealmStateHelper.error(binding)\n+                }\n+            }\n+        })\n+    }\n+\n+    private fun getApiSection(adapter: SpinnerAdapter, position: Int): String {\n+        val apiSection = adapter.getItem(position) as String\n+        return requireNotNull(sectionsToNames[apiSection])\n+    }\n+\n+    companion object {\n+\n+        const val TAG = \"MainFragment\"\n+\n+        fun newInstance() = MainFragment()\n+    }\n+}\n+\n+sealed class NewsReaderState {\n+\n+    abstract val origin: String\n+\n+    data class Loading(override val origin: String) : NewsReaderState()\n+    data class Data(override val origin: String, val data: List<RealmNYTimesArticle>) : NewsReaderState()\n+    data class NoNewData(override val origin: String) : NewsReaderState()\n+    data class ErrorException(override val origin: String, val throwable: Throwable) : NewsReaderState()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU4OTg3NA==", "bodyText": "IIRC this is because Store can emit either an \"error exception\" or an \"error message\". I decided to leave it the same way for consistency.", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552589874", "createdAt": "2021-01-06T13:05:23Z", "author": {"login": "edualonso"}, "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/ui/main/MainFragment.kt", "diffHunk": "@@ -21,76 +21,175 @@ import android.util.Log\n import android.view.LayoutInflater\n import android.view.View\n import android.view.ViewGroup\n-import android.widget.Button\n+import android.widget.AdapterView\n+import android.widget.ArrayAdapter\n+import android.widget.SpinnerAdapter\n+import android.widget.Toast\n import androidx.fragment.app.Fragment\n import androidx.fragment.app.viewModels\n import androidx.lifecycle.Observer\n+import androidx.recyclerview.widget.LinearLayoutManager\n import io.realm.examples.coroutinesexample.R\n-import io.realm.examples.coroutinesexample.TAG\n-import io.realm.examples.coroutinesexample.model.Dog\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTimesArticle\n+import io.realm.examples.coroutinesexample.data.newsreader.network.sectionsToNames\n+import io.realm.examples.coroutinesexample.databinding.FragmentMainBinding\n+import java.util.*\n+import kotlin.Comparator\n \n class MainFragment : Fragment() {\n \n-    companion object {\n-        fun newInstance() = MainFragment()\n+    interface OnItemClicked {\n+        fun onItemClicked(id: String)\n     }\n \n-    private val viewModel: MainViewModel by viewModels()\n+    internal lateinit var onItemclickedCallback: OnItemClicked\n \n-    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n-                              savedInstanceState: Bundle?): View {\n-        return inflater.inflate(R.layout.main_fragment, container, false)\n-                .also { view -> addClickListeners(view) }\n+    private val viewModel: MainViewModel by viewModels()\n+    private val newsReaderAdapter = MainAdapter { id ->\n+        onItemclickedCallback.onItemClicked(id)\n     }\n \n-    override fun onResume() {\n-        super.onResume()\n-        addObservers()\n-    }\n+    private lateinit var binding: FragmentMainBinding\n \n-    override fun onPause() {\n-        super.onPause()\n-        removeObservers()\n-    }\n+    override fun onCreateView(\n+            inflater: LayoutInflater,\n+            container: ViewGroup?,\n+            savedInstanceState: Bundle?\n+    ): View? = FragmentMainBinding.inflate(inflater, container, false)\n+            .also { binding ->\n+                binding.lifecycleOwner = viewLifecycleOwner\n+                this.binding = binding\n+                setupSpinner()\n+                setupRecyclerView()\n+                setupLiveData()\n+            }.root\n \n-    private fun addClickListeners(view: View) {\n-        view.findViewById<Button>(R.id.buttonHeavyTransaction).setOnClickListener {\n-            // Calling this multiple times before each transaction is done will not\n-            // freeze the UI\n-            viewModel.insertDogs(100000)\n-        }\n-        view.findViewById<Button>(R.id.buttonTransaction).setOnClickListener {\n-            // Calling this multiple times before each transaction is done will not\n-            // freeze the UI\n-            viewModel.insertDogs()\n+    private fun setupSpinner() {\n+        with(binding.spinner) {\n+            adapter = ArrayAdapter<CharSequence>(\n+                    context,\n+                    android.R.layout.simple_spinner_dropdown_item,\n+                    sectionsToNames.keys.sortedWith(\n+                            Comparator { o1, o2 ->\n+                                if (o1.toLowerCase(Locale.ROOT) == \"home\") return@Comparator -1\n+                                if (o2.toLowerCase(Locale.ROOT) == \"home\") return@Comparator 1\n+                                return@Comparator o1.compareTo(o2, ignoreCase = true)\n+                            }\n+                    )\n+            )\n+            onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\n+                override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\n+                    viewModel.getTopStories(getApiSection(adapter, position))\n+                }\n+\n+                override fun onNothingSelected(parent: AdapterView<*>?) {\n+                    // No-op\n+                }\n+            }\n         }\n-        view.findViewById<Button>(R.id.buttonCount).setOnClickListener {\n-            viewModel.countDogs()\n+    }\n+\n+    private fun setupRecyclerView() {\n+        with(binding.list) {\n+            layoutManager = LinearLayoutManager(context)\n+            adapter = newsReaderAdapter\n         }\n-        view.findViewById<Button>(R.id.buttonDelete).setOnClickListener {\n-            // Calling this while bulk-inserting will not freeze the UI\n-            viewModel.deleteAll()\n+\n+        with(binding.refresh) {\n+            setOnRefreshListener {\n+                with(binding.spinner) {\n+                    viewModel.getTopStories(getApiSection(adapter, selectedItemPosition), true)\n+                }\n+            }\n         }\n-        view.findViewById<Button>(R.id.buttonCancelCoroutine).setOnClickListener {\n-            viewModel.cancel()\n+    }\n+\n+    private fun setupLiveData() {\n+        viewModel.newsReaderState.observe(viewLifecycleOwner, Observer { viewState ->\n+            when (viewState) {\n+                is NewsReaderState.Loading -> {\n+                    Log.d(TAG, \"--- origin: ${viewState.origin}, loading\")\n+                    RealmStateHelper.loading(binding)\n+                }\n+                is NewsReaderState.Data -> {\n+                    Log.d(TAG, \"--- origin: ${viewState.origin}, elements: ${viewState.data.size}\")\n+                    RealmStateHelper.data(binding, viewState.data, newsReaderAdapter)\n+                }\n+                is NewsReaderState.NoNewData -> {\n+                    Log.d(TAG, \"--- origin: ${viewState.origin}, no new data\")\n+                    RealmStateHelper.noNewData(binding)\n+                }\n+                is NewsReaderState.ErrorException -> {\n+                    val stacktrace = viewState.throwable.cause?.stackTrace?.joinToString { \"$it\\n\" }\n+                    Log.e(TAG, \"--- error (exception): ${viewState.throwable.message} - ${viewState.throwable.cause?.message}: $stacktrace\")\n+                    RealmStateHelper.error(binding)\n+                }\n+                is NewsReaderState.ErrorMessage -> {\n+                    Log.e(TAG, \"--- error (message): ${viewState.message}\")\n+                    RealmStateHelper.error(binding)\n+                }\n+            }\n+        })\n+    }\n+\n+    private fun getApiSection(adapter: SpinnerAdapter, position: Int): String {\n+        val apiSection = adapter.getItem(position) as String\n+        return requireNotNull(sectionsToNames[apiSection])\n+    }\n+\n+    companion object {\n+\n+        const val TAG = \"MainFragment\"\n+\n+        fun newInstance() = MainFragment()\n+    }\n+}\n+\n+sealed class NewsReaderState {\n+\n+    abstract val origin: String\n+\n+    data class Loading(override val origin: String) : NewsReaderState()\n+    data class Data(override val origin: String, val data: List<RealmNYTimesArticle>) : NewsReaderState()\n+    data class NoNewData(override val origin: String) : NewsReaderState()\n+    data class ErrorException(override val origin: String, val throwable: Throwable) : NewsReaderState()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2NzQ5OQ=="}, "originalCommit": {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzIwNDg1OnYy", "diffSide": "RIGHT", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/util/NewsReaderFlowFactory.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTozOTozNFrOIO3_mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMzowNTozMVrOIO_a2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2ODM3Nw==", "bodyText": "Wouldn't a much cleaner solution be to just call the super methods and then drop or filter out the first element emitted?\nCopying the entire internal implementation seems very error-prone in terms of maintaining it?", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552468377", "createdAt": "2021-01-06T09:39:34Z", "author": {"login": "cmelchior"}, "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/util/NewsReaderFlowFactory.kt", "diffHunk": "@@ -0,0 +1,500 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.util\n+\n+import io.realm.*\n+import io.realm.coroutines.FlowFactory\n+import io.realm.rx.CollectionChange\n+import io.realm.rx.ObjectChange\n+import kotlinx.coroutines.channels.awaitClose\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.callbackFlow\n+import kotlinx.coroutines.flow.flowOf\n+\n+/**\n+ * Similar to [io.realm.coroutines.RealmFlowFactory] but it will not emit the current value\n+ * immediately. This is needed by Store to function properly or else it will receive updates with\n+ * empty [RealmResults] that will make it think existing values for the current key are present.\n+ */\n+class NewsReaderFlowFactory : FlowFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU5MDA0MA==", "bodyText": "Well spotted. I also thought about doing that but when I did this the updated factory (with the latest changes and such) wasn't in the source branch for this branch, so I copied it entirely from the flow factory branch I was simultaneously working on as temporary solution. It seems I forgot to clean it up \ud83d\ude4a", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552590040", "createdAt": "2021-01-06T13:05:31Z", "author": {"login": "edualonso"}, "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/util/NewsReaderFlowFactory.kt", "diffHunk": "@@ -0,0 +1,500 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.util\n+\n+import io.realm.*\n+import io.realm.coroutines.FlowFactory\n+import io.realm.rx.CollectionChange\n+import io.realm.rx.ObjectChange\n+import kotlinx.coroutines.channels.awaitClose\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.callbackFlow\n+import kotlinx.coroutines.flow.flowOf\n+\n+/**\n+ * Similar to [io.realm.coroutines.RealmFlowFactory] but it will not emit the current value\n+ * immediately. This is needed by Store to function properly or else it will receive updates with\n+ * empty [RealmResults] that will make it think existing values for the current key are present.\n+ */\n+class NewsReaderFlowFactory : FlowFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2ODM3Nw=="}, "originalCommit": {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 376, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}