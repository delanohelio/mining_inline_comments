{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4Njk2NzY1", "number": 6729, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTozMDo0OFrODbuclA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTozMToyNVrODbudOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzk5MTI0OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTozMDo0OFrOFjYLaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTozMDo0OFrOFjYLaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0MDYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `IncompatibleSyncedFileException` is removed and no longer thrown.\n          \n          \n            \n            * [ObjectServer] `IncompatibleSyncedFileException` is removed and no longer thrown.", "url": "https://github.com/realm/realm-java/pull/6729#discussion_r372640616", "createdAt": "2020-01-29T21:30:48Z", "author": {"login": "cmelchior"}, "path": "CHANGELOG.md", "diffHunk": "@@ -13,44 +13,49 @@ NOTE: This version bumps the Realm file format to version 10. It is not possible\n * [ObjectServer] `IncompatibleSyncedFileException` is removed as it is no longer used.\n * [ObjectServer] New error codes thrown by the underlying sync layers now have proper enum mappings in `ErrorCode.java`. A few other errors have been renamed in order to have consistent naming. (Issue [#6387](https://github.com/realm/realm-java/issues/6387)) \n * RxJava Flowables and Observables are now subscribed to and unsubscribed to asynchronously on the thread holding the live Realm, instead of previously where this was done synchronously.\n-* All RxJava Flowables and Observables now return frozen objects instead of live objects. This can be configured using `RealmConfiguration.Builder.rxFactory(new RealmObservableFactory(boolean))`. By using frozen objects, it is possible to send RealmObjects across threads, which means that all RxJava operators should now be supported without the need to copy Realm data into unmanaged objects.\n+* All RxJava Flowables and Observables now return frozen objects instead of live objects. This can be configured using `RealmConfiguration.Builder.rxFactory(new RealmObservableFactory(true|false))`. By using frozen objects, it is possible to send RealmObjects across threads, which means that all RxJava operators should now be supported without the need to copy Realm data into unmanaged objects.\n * MIPS is not supported anymore.\n * Realm now requires `minSdkVersion` 16. Up from 9.\n+* `IncompatibleSyncedFileException` is removed and no longer thrown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1b548b76448dd7db3b38c07ac5aeeee5424c53"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzk5MjkxOnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTozMToyNVrOFjYMdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMToyNjoxMlrOFkuP5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0MDg4Nw==", "bodyText": "Was the previous entry a mistake?", "url": "https://github.com/realm/realm-java/pull/6729#discussion_r372640887", "createdAt": "2020-01-29T21:31:25Z", "author": {"login": "cmelchior"}, "path": "CHANGELOG.md", "diffHunk": "@@ -13,44 +13,49 @@ NOTE: This version bumps the Realm file format to version 10. It is not possible\n * [ObjectServer] `IncompatibleSyncedFileException` is removed as it is no longer used.\n * [ObjectServer] New error codes thrown by the underlying sync layers now have proper enum mappings in `ErrorCode.java`. A few other errors have been renamed in order to have consistent naming. (Issue [#6387](https://github.com/realm/realm-java/issues/6387)) \n * RxJava Flowables and Observables are now subscribed to and unsubscribed to asynchronously on the thread holding the live Realm, instead of previously where this was done synchronously.\n-* All RxJava Flowables and Observables now return frozen objects instead of live objects. This can be configured using `RealmConfiguration.Builder.rxFactory(new RealmObservableFactory(boolean))`. By using frozen objects, it is possible to send RealmObjects across threads, which means that all RxJava operators should now be supported without the need to copy Realm data into unmanaged objects.\n+* All RxJava Flowables and Observables now return frozen objects instead of live objects. This can be configured using `RealmConfiguration.Builder.rxFactory(new RealmObservableFactory(true|false))`. By using frozen objects, it is possible to send RealmObjects across threads, which means that all RxJava operators should now be supported without the need to copy Realm data into unmanaged objects.\n * MIPS is not supported anymore.\n * Realm now requires `minSdkVersion` 16. Up from 9.\n+* `IncompatibleSyncedFileException` is removed and no longer thrown.\n \n ### Enhancements\n * Added `Realm.freeze()`, `RealmObject.freeze()`, `RealmResults.freeze()` and `RealmList.freeze()`. These methods will return a frozen version of the current Realm data. This data can be read from any thread without throwing an `IllegalStateException`, but will never change. All frozen Realms and data can be closed by calling `Realm.close()` on the frozen Realm, but fully closing all live Realms will also close the frozen ones. Frozen data can be queried as normal, but trying to mutate it in any way will throw an `IllegalStateException`. This includes all methods that attempt to refresh or add change listeners. (Issue [#6590](https://github.com/realm/realm-java/pull/6590))\n * Added `Realm.isFrozen()`, `RealmObject.isFrozen()`, `RealmObject.isFrozen(RealmModel)`, `RealmResults.isFrozen()` and `RealmList.isFrozen()`, which returns whether or not the data is frozen.\n * Added `RealmConfiguration.Builder.maxNumberOfActiveVersions(long number)`. Setting this will cause Realm to throw an `IllegalStateException` if too many versions of the Realm data are live at the same time. Having too many versions can dramatically increase the filesize of the Realm.\n-* `RealmResults.asJSON()` is no longer `@Beta`.\n-* Storing large binary blobs in Realm files no longer forces the file to be at least 8x the size of the largest blob.\n-* Reduce the size of transaction logs stored inside the Realm file, reducing file size growth from large transactions.\n+* `RealmResults.asJSON()` is no longer `@Beta`\n \n ### Compatibility\n * Realm Object Server: 3.23.1 or later.\n-* File format: Generates Realms with format v10 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n+* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1b548b76448dd7db3b38c07ac5aeeee5424c53"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0ODkwNw==", "bodyText": "No, just a merge mistake, I'll revert", "url": "https://github.com/realm/realm-java/pull/6729#discussion_r374048907", "createdAt": "2020-02-03T11:21:23Z", "author": {"login": "nhachicha"}, "path": "CHANGELOG.md", "diffHunk": "@@ -13,44 +13,49 @@ NOTE: This version bumps the Realm file format to version 10. It is not possible\n * [ObjectServer] `IncompatibleSyncedFileException` is removed as it is no longer used.\n * [ObjectServer] New error codes thrown by the underlying sync layers now have proper enum mappings in `ErrorCode.java`. A few other errors have been renamed in order to have consistent naming. (Issue [#6387](https://github.com/realm/realm-java/issues/6387)) \n * RxJava Flowables and Observables are now subscribed to and unsubscribed to asynchronously on the thread holding the live Realm, instead of previously where this was done synchronously.\n-* All RxJava Flowables and Observables now return frozen objects instead of live objects. This can be configured using `RealmConfiguration.Builder.rxFactory(new RealmObservableFactory(boolean))`. By using frozen objects, it is possible to send RealmObjects across threads, which means that all RxJava operators should now be supported without the need to copy Realm data into unmanaged objects.\n+* All RxJava Flowables and Observables now return frozen objects instead of live objects. This can be configured using `RealmConfiguration.Builder.rxFactory(new RealmObservableFactory(true|false))`. By using frozen objects, it is possible to send RealmObjects across threads, which means that all RxJava operators should now be supported without the need to copy Realm data into unmanaged objects.\n * MIPS is not supported anymore.\n * Realm now requires `minSdkVersion` 16. Up from 9.\n+* `IncompatibleSyncedFileException` is removed and no longer thrown.\n \n ### Enhancements\n * Added `Realm.freeze()`, `RealmObject.freeze()`, `RealmResults.freeze()` and `RealmList.freeze()`. These methods will return a frozen version of the current Realm data. This data can be read from any thread without throwing an `IllegalStateException`, but will never change. All frozen Realms and data can be closed by calling `Realm.close()` on the frozen Realm, but fully closing all live Realms will also close the frozen ones. Frozen data can be queried as normal, but trying to mutate it in any way will throw an `IllegalStateException`. This includes all methods that attempt to refresh or add change listeners. (Issue [#6590](https://github.com/realm/realm-java/pull/6590))\n * Added `Realm.isFrozen()`, `RealmObject.isFrozen()`, `RealmObject.isFrozen(RealmModel)`, `RealmResults.isFrozen()` and `RealmList.isFrozen()`, which returns whether or not the data is frozen.\n * Added `RealmConfiguration.Builder.maxNumberOfActiveVersions(long number)`. Setting this will cause Realm to throw an `IllegalStateException` if too many versions of the Realm data are live at the same time. Having too many versions can dramatically increase the filesize of the Realm.\n-* `RealmResults.asJSON()` is no longer `@Beta`.\n-* Storing large binary blobs in Realm files no longer forces the file to be at least 8x the size of the largest blob.\n-* Reduce the size of transaction logs stored inside the Realm file, reducing file size growth from large transactions.\n+* `RealmResults.asJSON()` is no longer `@Beta`\n \n ### Compatibility\n * Realm Object Server: 3.23.1 or later.\n-* File format: Generates Realms with format v10 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n+* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0MDg4Nw=="}, "originalCommit": {"oid": "0a1b548b76448dd7db3b38c07ac5aeeee5424c53"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1MDc5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n          \n          \n            \n            * File format: Generates Realms with format v10 (Reads and upgrades all previous formats from Realm Java 2.0 and later).", "url": "https://github.com/realm/realm-java/pull/6729#discussion_r374050790", "createdAt": "2020-02-03T11:26:12Z", "author": {"login": "nhachicha"}, "path": "CHANGELOG.md", "diffHunk": "@@ -13,44 +13,49 @@ NOTE: This version bumps the Realm file format to version 10. It is not possible\n * [ObjectServer] `IncompatibleSyncedFileException` is removed as it is no longer used.\n * [ObjectServer] New error codes thrown by the underlying sync layers now have proper enum mappings in `ErrorCode.java`. A few other errors have been renamed in order to have consistent naming. (Issue [#6387](https://github.com/realm/realm-java/issues/6387)) \n * RxJava Flowables and Observables are now subscribed to and unsubscribed to asynchronously on the thread holding the live Realm, instead of previously where this was done synchronously.\n-* All RxJava Flowables and Observables now return frozen objects instead of live objects. This can be configured using `RealmConfiguration.Builder.rxFactory(new RealmObservableFactory(boolean))`. By using frozen objects, it is possible to send RealmObjects across threads, which means that all RxJava operators should now be supported without the need to copy Realm data into unmanaged objects.\n+* All RxJava Flowables and Observables now return frozen objects instead of live objects. This can be configured using `RealmConfiguration.Builder.rxFactory(new RealmObservableFactory(true|false))`. By using frozen objects, it is possible to send RealmObjects across threads, which means that all RxJava operators should now be supported without the need to copy Realm data into unmanaged objects.\n * MIPS is not supported anymore.\n * Realm now requires `minSdkVersion` 16. Up from 9.\n+* `IncompatibleSyncedFileException` is removed and no longer thrown.\n \n ### Enhancements\n * Added `Realm.freeze()`, `RealmObject.freeze()`, `RealmResults.freeze()` and `RealmList.freeze()`. These methods will return a frozen version of the current Realm data. This data can be read from any thread without throwing an `IllegalStateException`, but will never change. All frozen Realms and data can be closed by calling `Realm.close()` on the frozen Realm, but fully closing all live Realms will also close the frozen ones. Frozen data can be queried as normal, but trying to mutate it in any way will throw an `IllegalStateException`. This includes all methods that attempt to refresh or add change listeners. (Issue [#6590](https://github.com/realm/realm-java/pull/6590))\n * Added `Realm.isFrozen()`, `RealmObject.isFrozen()`, `RealmObject.isFrozen(RealmModel)`, `RealmResults.isFrozen()` and `RealmList.isFrozen()`, which returns whether or not the data is frozen.\n * Added `RealmConfiguration.Builder.maxNumberOfActiveVersions(long number)`. Setting this will cause Realm to throw an `IllegalStateException` if too many versions of the Realm data are live at the same time. Having too many versions can dramatically increase the filesize of the Realm.\n-* `RealmResults.asJSON()` is no longer `@Beta`.\n-* Storing large binary blobs in Realm files no longer forces the file to be at least 8x the size of the largest blob.\n-* Reduce the size of transaction logs stored inside the Realm file, reducing file size growth from large transactions.\n+* `RealmResults.asJSON()` is no longer `@Beta`\n \n ### Compatibility\n * Realm Object Server: 3.23.1 or later.\n-* File format: Generates Realms with format v10 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n+* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0MDg4Nw=="}, "originalCommit": {"oid": "0a1b548b76448dd7db3b38c07ac5aeeee5424c53"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 587, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}