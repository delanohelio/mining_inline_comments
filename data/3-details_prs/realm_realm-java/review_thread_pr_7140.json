{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2Nzg1Nzg5", "number": 7140, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo0Mzo1N1rOEpwR_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1Nzo0NVrOEpwiGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjE4MTA5OnYy", "diffSide": "RIGHT", "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo0Mzo1N1rOHbni2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDowMDowNFrOHboAwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMTQ5Ng==", "bodyText": "This doesn't actually do anything. Realm.getInstance() will increment the reference count and then close it again. But any other underlying Realms will not be closed.", "url": "https://github.com/realm/realm-java/pull/7140#discussion_r498721496", "createdAt": "2020-10-02T09:43:57Z", "author": {"login": "cmelchior"}, "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "diffHunk": "@@ -28,19 +27,14 @@ class CoroutineTests {\n     private lateinit var configuration: RealmConfiguration\n     private lateinit var testDispatcher: TestCoroutineDispatcher\n     private lateinit var testScope: TestCoroutineScope\n-    private lateinit var realm: Realm\n \n     @Before\n     fun setUp() {\n         testDispatcher = TestCoroutineDispatcher()\n         testScope = TestCoroutineScope(testDispatcher)\n         configuration = configFactory.createConfiguration()\n-        realm = Realm.getInstance(configuration)\n-    }\n \n-    @After\n-    fun tearDown() {\n-        realm.close()\n+        Realm.getInstance(configuration).close()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92cd01e6949bd371b3b717ccb6ff5d6bd16ae7ac"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyODkzMg==", "bodyText": "I had to do this because I'm using a dynamic realm in one of the tests, so I would have a schema error if I don't have it.", "url": "https://github.com/realm/realm-java/pull/7140#discussion_r498728932", "createdAt": "2020-10-02T09:59:37Z", "author": {"login": "edualonso"}, "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "diffHunk": "@@ -28,19 +27,14 @@ class CoroutineTests {\n     private lateinit var configuration: RealmConfiguration\n     private lateinit var testDispatcher: TestCoroutineDispatcher\n     private lateinit var testScope: TestCoroutineScope\n-    private lateinit var realm: Realm\n \n     @Before\n     fun setUp() {\n         testDispatcher = TestCoroutineDispatcher()\n         testScope = TestCoroutineScope(testDispatcher)\n         configuration = configFactory.createConfiguration()\n-        realm = Realm.getInstance(configuration)\n-    }\n \n-    @After\n-    fun tearDown() {\n-        realm.close()\n+        Realm.getInstance(configuration).close()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMTQ5Ng=="}, "originalCommit": {"oid": "92cd01e6949bd371b3b717ccb6ff5d6bd16ae7ac"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyOTE1Mw==", "bodyText": "OK, you're right this is probably something else. I will remove it.", "url": "https://github.com/realm/realm-java/pull/7140#discussion_r498729153", "createdAt": "2020-10-02T10:00:04Z", "author": {"login": "edualonso"}, "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "diffHunk": "@@ -28,19 +27,14 @@ class CoroutineTests {\n     private lateinit var configuration: RealmConfiguration\n     private lateinit var testDispatcher: TestCoroutineDispatcher\n     private lateinit var testScope: TestCoroutineScope\n-    private lateinit var realm: Realm\n \n     @Before\n     fun setUp() {\n         testDispatcher = TestCoroutineDispatcher()\n         testScope = TestCoroutineScope(testDispatcher)\n         configuration = configFactory.createConfiguration()\n-        realm = Realm.getInstance(configuration)\n-    }\n \n-    @After\n-    fun tearDown() {\n-        realm.close()\n+        Realm.getInstance(configuration).close()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMTQ5Ng=="}, "originalCommit": {"oid": "92cd01e6949bd371b3b717ccb6ff5d6bd16ae7ac"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjE5Mjg2OnYy", "diffSide": "LEFT", "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo0Nzo0MVrOHbnp9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDowMjoxNFrOHboEZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMzMxNg==", "bodyText": "I see a Realm.close() in the setUp but there is no tearDown step, couldn't it leave an open instance after the last test execution?", "url": "https://github.com/realm/realm-java/pull/7140#discussion_r498723316", "createdAt": "2020-10-02T09:47:41Z", "author": {"login": "clementetb"}, "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "diffHunk": "@@ -28,19 +27,14 @@ class CoroutineTests {\n     private lateinit var configuration: RealmConfiguration\n     private lateinit var testDispatcher: TestCoroutineDispatcher\n     private lateinit var testScope: TestCoroutineScope\n-    private lateinit var realm: Realm\n \n     @Before\n     fun setUp() {\n         testDispatcher = TestCoroutineDispatcher()\n         testScope = TestCoroutineScope(testDispatcher)\n         configuration = configFactory.createConfiguration()\n-        realm = Realm.getInstance(configuration)\n-    }\n \n-    @After\n-    fun tearDown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92cd01e6949bd371b3b717ccb6ff5d6bd16ae7ac"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMDA4Ng==", "bodyText": "No. I don't really need to use a global realm instance for these tests. Now instead I use Kotlin's use scope function, which receives the instance of the object you're calling it on (which has to be a Closeable) and calls close() automatically at the end of the closure.", "url": "https://github.com/realm/realm-java/pull/7140#discussion_r498730086", "createdAt": "2020-10-02T10:02:14Z", "author": {"login": "edualonso"}, "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "diffHunk": "@@ -28,19 +27,14 @@ class CoroutineTests {\n     private lateinit var configuration: RealmConfiguration\n     private lateinit var testDispatcher: TestCoroutineDispatcher\n     private lateinit var testScope: TestCoroutineScope\n-    private lateinit var realm: Realm\n \n     @Before\n     fun setUp() {\n         testDispatcher = TestCoroutineDispatcher()\n         testScope = TestCoroutineScope(testDispatcher)\n         configuration = configFactory.createConfiguration()\n-        realm = Realm.getInstance(configuration)\n-    }\n \n-    @After\n-    fun tearDown() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMzMxNg=="}, "originalCommit": {"oid": "92cd01e6949bd371b3b717ccb6ff5d6bd16ae7ac"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjE5ODA4OnYy", "diffSide": "RIGHT", "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo0OToxN1rOHbntCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo0OToxN1rOHbntCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyNDEwNw==", "bodyText": "Maybe wrap the underlying block in use instead of manually closing, because close will not be called if the awaitOrFails throws", "url": "https://github.com/realm/realm-java/pull/7140#discussion_r498724107", "createdAt": "2020-10-02T09:49:17Z", "author": {"login": "cmelchior"}, "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "diffHunk": "@@ -134,6 +130,7 @@ class CoroutineTests {\n         val countDownLatch = CountDownLatch(1)\n \n         // Get results from the test thread\n+        val realm = Realm.getInstance(configuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92cd01e6949bd371b3b717ccb6ff5d6bd16ae7ac"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjIwMjU4OnYy", "diffSide": "RIGHT", "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1MDo1NVrOHbnwCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1MDo1NVrOHbnwCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyNDg3NA==", "bodyText": "Ah, nice. Didn't know this was possible \ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/7140#discussion_r498724874", "createdAt": "2020-10-02T09:50:55Z", "author": {"login": "cmelchior"}, "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "diffHunk": "@@ -475,17 +473,90 @@ class CoroutineTests {\n         }\n \n         val countDownLatch = CountDownLatch(1)\n-        val otherMainScope = CoroutineScope(Dispatchers.Main)\n-        otherMainScope.launch {\n-            // Wait for 50 ms and cancel scope so that not all planned 10 elements are inserted\n+        CoroutineScope(Dispatchers.Main).launch {\n+            // Wait for 50 ms and cancel job so that not all planned 10 elements are inserted\n             delay(50)\n-            mainScope.cancel(\"Cancelling\")\n+            job.cancelAndJoin()\n+\n+            assertNotEquals(upperBound.toLong(), realmInstance!!.where<SimpleClass>().count())\n+\n+            realmInstance!!.close()\n+\n+            countDownLatch.countDown()\n+            this.cancel()\n+        }\n+\n+        TestHelper.awaitOrFail(countDownLatch)\n+    }\n+\n+    @Test\n+    fun executeTransactionAwait_cancelCoroutineWithHeavyCooperativeTransaction() {\n+        val upperBound = 10000\n+        var realmInstance: Realm? = null\n+\n+        val job = CoroutineScope(Dispatchers.Main).launch {\n+            realmInstance = Realm.getInstance(configuration)\n+\n+            realmInstance!!.executeTransactionAwait { transactionRealm ->\n+                for (i in 1..upperBound) {\n+                    // The coroutine itself will not cancel the transaction, but we can make it cooperative ourselves\n+                    if (isActive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92cd01e6949bd371b3b717ccb6ff5d6bd16ae7ac"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjIxOTc2OnYy", "diffSide": "RIGHT", "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1Njo1NVrOHbn7DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDowNDowM1rOHboHQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyNzY5Mw==", "bodyText": "This delay feels a bit dangerous. 50ms is a long time and the first job might already have completed here?", "url": "https://github.com/realm/realm-java/pull/7140#discussion_r498727693", "createdAt": "2020-10-02T09:56:55Z", "author": {"login": "cmelchior"}, "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "diffHunk": "@@ -475,17 +473,90 @@ class CoroutineTests {\n         }\n \n         val countDownLatch = CountDownLatch(1)\n-        val otherMainScope = CoroutineScope(Dispatchers.Main)\n-        otherMainScope.launch {\n-            // Wait for 50 ms and cancel scope so that not all planned 10 elements are inserted\n+        CoroutineScope(Dispatchers.Main).launch {\n+            // Wait for 50 ms and cancel job so that not all planned 10 elements are inserted\n             delay(50)\n-            mainScope.cancel(\"Cancelling\")\n+            job.cancelAndJoin()\n+\n+            assertNotEquals(upperBound.toLong(), realmInstance!!.where<SimpleClass>().count())\n+\n+            realmInstance!!.close()\n+\n+            countDownLatch.countDown()\n+            this.cancel()\n+        }\n+\n+        TestHelper.awaitOrFail(countDownLatch)\n+    }\n+\n+    @Test\n+    fun executeTransactionAwait_cancelCoroutineWithHeavyCooperativeTransaction() {\n+        val upperBound = 10000\n+        var realmInstance: Realm? = null\n+\n+        val job = CoroutineScope(Dispatchers.Main).launch {\n+            realmInstance = Realm.getInstance(configuration)\n+\n+            realmInstance!!.executeTransactionAwait { transactionRealm ->\n+                for (i in 1..upperBound) {\n+                    // The coroutine itself will not cancel the transaction, but we can make it cooperative ourselves\n+                    if (isActive) {\n+                        val simpleObject = SimpleClass().apply { name = \"simpleName $i\" }\n+                        transactionRealm.insert(simpleObject)\n+                    }\n+                }\n+            }\n+        }\n \n+        val countDownLatch = CountDownLatch(1)\n+        CoroutineScope(Dispatchers.Main).launch {\n+            // Wait for 50 ms and cancel job\n+            delay(10)\n+            job.cancelAndJoin()\n+\n+            // The coroutine won't finish until the transaction is completely done\n+            // but not all elements will have been inserted since the transaction is cooperative\n             assertNotEquals(upperBound.toLong(), realmInstance!!.where<SimpleClass>().count())\n \n             realmInstance!!.close()\n+\n             countDownLatch.countDown()\n-            otherMainScope.cancel()\n+            this.cancel()\n+        }\n+\n+        TestHelper.awaitOrFail(countDownLatch)\n+    }\n+\n+    @Test\n+    fun executeTransactionAwait_cancelCoroutineWithHeavyNonCooperativeTransaction() {\n+        val upperBound = 10000\n+        var realmInstance: Realm? = null\n+\n+        val job = CoroutineScope(Dispatchers.Main).launch {\n+            realmInstance = Realm.getInstance(configuration)\n+\n+            realmInstance!!.executeTransactionAwait { transactionRealm ->\n+                for (i in 1..upperBound) {\n+                    val simpleObject = SimpleClass().apply { name = \"simpleName $i\" }\n+                    transactionRealm.insert(simpleObject)\n+                }\n+            }\n+        }\n+\n+        val countDownLatch = CountDownLatch(1)\n+        CoroutineScope(Dispatchers.Main).launch {\n+            // Wait for 50 ms and cancel job\n+            delay(50)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92cd01e6949bd371b3b717ccb6ff5d6bd16ae7ac"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMDgxOA==", "bodyText": "True. I wrote 50ms because I had another delay of 10ms in the loop of transactions in the original test, which was enough. I will lower it.", "url": "https://github.com/realm/realm-java/pull/7140#discussion_r498730818", "createdAt": "2020-10-02T10:04:03Z", "author": {"login": "edualonso"}, "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "diffHunk": "@@ -475,17 +473,90 @@ class CoroutineTests {\n         }\n \n         val countDownLatch = CountDownLatch(1)\n-        val otherMainScope = CoroutineScope(Dispatchers.Main)\n-        otherMainScope.launch {\n-            // Wait for 50 ms and cancel scope so that not all planned 10 elements are inserted\n+        CoroutineScope(Dispatchers.Main).launch {\n+            // Wait for 50 ms and cancel job so that not all planned 10 elements are inserted\n             delay(50)\n-            mainScope.cancel(\"Cancelling\")\n+            job.cancelAndJoin()\n+\n+            assertNotEquals(upperBound.toLong(), realmInstance!!.where<SimpleClass>().count())\n+\n+            realmInstance!!.close()\n+\n+            countDownLatch.countDown()\n+            this.cancel()\n+        }\n+\n+        TestHelper.awaitOrFail(countDownLatch)\n+    }\n+\n+    @Test\n+    fun executeTransactionAwait_cancelCoroutineWithHeavyCooperativeTransaction() {\n+        val upperBound = 10000\n+        var realmInstance: Realm? = null\n+\n+        val job = CoroutineScope(Dispatchers.Main).launch {\n+            realmInstance = Realm.getInstance(configuration)\n+\n+            realmInstance!!.executeTransactionAwait { transactionRealm ->\n+                for (i in 1..upperBound) {\n+                    // The coroutine itself will not cancel the transaction, but we can make it cooperative ourselves\n+                    if (isActive) {\n+                        val simpleObject = SimpleClass().apply { name = \"simpleName $i\" }\n+                        transactionRealm.insert(simpleObject)\n+                    }\n+                }\n+            }\n+        }\n \n+        val countDownLatch = CountDownLatch(1)\n+        CoroutineScope(Dispatchers.Main).launch {\n+            // Wait for 50 ms and cancel job\n+            delay(10)\n+            job.cancelAndJoin()\n+\n+            // The coroutine won't finish until the transaction is completely done\n+            // but not all elements will have been inserted since the transaction is cooperative\n             assertNotEquals(upperBound.toLong(), realmInstance!!.where<SimpleClass>().count())\n \n             realmInstance!!.close()\n+\n             countDownLatch.countDown()\n-            otherMainScope.cancel()\n+            this.cancel()\n+        }\n+\n+        TestHelper.awaitOrFail(countDownLatch)\n+    }\n+\n+    @Test\n+    fun executeTransactionAwait_cancelCoroutineWithHeavyNonCooperativeTransaction() {\n+        val upperBound = 10000\n+        var realmInstance: Realm? = null\n+\n+        val job = CoroutineScope(Dispatchers.Main).launch {\n+            realmInstance = Realm.getInstance(configuration)\n+\n+            realmInstance!!.executeTransactionAwait { transactionRealm ->\n+                for (i in 1..upperBound) {\n+                    val simpleObject = SimpleClass().apply { name = \"simpleName $i\" }\n+                    transactionRealm.insert(simpleObject)\n+                }\n+            }\n+        }\n+\n+        val countDownLatch = CountDownLatch(1)\n+        CoroutineScope(Dispatchers.Main).launch {\n+            // Wait for 50 ms and cancel job\n+            delay(50)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyNzY5Mw=="}, "originalCommit": {"oid": "92cd01e6949bd371b3b717ccb6ff5d6bd16ae7ac"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjIyMDg1OnYy", "diffSide": "RIGHT", "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1NzoxN1rOHbn7rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1NzoxN1rOHbn7rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyNzg1NA==", "bodyText": "Maybe wrap with use to preven leakage if the test fails.", "url": "https://github.com/realm/realm-java/pull/7140#discussion_r498727854", "createdAt": "2020-10-02T09:57:17Z", "author": {"login": "cmelchior"}, "path": "realm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutineTests.kt", "diffHunk": "@@ -495,20 +566,26 @@ class CoroutineTests {\n     fun executeTransactionAwait_throwsDueToThreadViolation() {\n         // Just to prevent the test to end prematurely\n         val countDownLatch = CountDownLatch(1)\n+        val realm = Realm.getInstance(configuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92cd01e6949bd371b3b717ccb6ff5d6bd16ae7ac"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjIyMjMzOnYy", "diffSide": "RIGHT", "path": "realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmExtensions.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1Nzo0NVrOHbn8jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1Nzo0NVrOHbn8jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyODA3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * realmInstance.executeTransactionAwait { transactionRealm ->\n          \n          \n            \n             * realm.executeTransactionAwait { transactionRealm ->", "url": "https://github.com/realm/realm-java/pull/7140#discussion_r498728076", "createdAt": "2020-10-02T09:57:45Z", "author": {"login": "cmelchior"}, "path": "realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmExtensions.kt", "diffHunk": "@@ -97,6 +99,21 @@ inline fun <reified T : RealmModel> Realm.createEmbeddedObject(parentObject: Rea\n /**\n  * Suspend version of [Realm.executeTransaction] to use within coroutines.\n  *\n+ * Canceling the scope or job in which this function is executed does not cancel the transaction itself. If you want to ensure\n+ * your transaction is cooperative, you have to check for the value of [CoroutineScope.isActive] while running the transaction:\n+ *\n+ * ```\n+ * // insert 100 objects\n+ * realmInstance.executeTransactionAwait { transactionRealm ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92cd01e6949bd371b3b717ccb6ff5d6bd16ae7ac"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 552, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}