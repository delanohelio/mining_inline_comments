{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjAxNjYy", "number": 6971, "title": "Implement a typed version of RealmAsyncTask", "bodyText": "The new RealmAsyncResultTask<> is a generically typed task. Results can be delivered both in a blocking (blockingGet) and asynchronous way (get).\nThis new task class has been decoupled from the Request class that dealt with background threading and was used to produce instances of the current RealmAsyncTask. Unlike what happens with Request.start(), which is that the task gets executed immediately, this new task defers its asynchronous execution until get is called. The threading logic from Request has been ported to this new class for integrity and consistency.\nThere are a few caveats regarding its location in the project. The Callback and Result classes are inside the Appclass. That makes sense as Results can have errors with AppExceptions and Callbacks depend on Results, so it doesn't make sense to have these outside the objectServer package. Due to this, I had to put both RealmAsyncResultTask and its implementation in the objectServer package. I guess that's OK...?\nThe new API looks like this:\npublic interface RealmAsyncResultTask<T> extends RealmAsyncTask {\n    T blockingGet();\n    void get(App.Callback<T> callback);\n}\n\nCalls to both look like so:\nval task: RealmAsyncResultTask<Int> = RealmAsyncResultTaskImpl(...)\n\n// blocking get call\nval result: Int = task.blockingGet()\n\n// async get call\ntask.get { result: App.Result<Int> ->\n    // do stuff\n}", "createdAt": "2020-06-26T13:57:53Z", "url": "https://github.com/realm/realm-java/pull/6971", "merged": true, "mergeCommit": {"oid": "8eb12b47c2223fa9c137423590c32465c85eb125"}, "closed": true, "closedAt": "2020-07-01T15:34:20Z", "author": {"login": "edualonso"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvDcQVAH2gAyNDQwNjAxNjYyOmU5YWI0ODViMTZhNWQxZTllMjdlYmVkZjUyMmY5YTIxN2VmZGFlMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwn4coAH2gAyNDQwNjAxNjYyOjdjZTY4ZDJiMDBiNGZiYWRmMDNkZmRkNGE4NjA2Nzk1MzA3NjI3ZTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e9ab485b16a5d1e9e27ebedf522f9a217efdae34", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/e9ab485b16a5d1e9e27ebedf522f9a217efdae34", "committedDate": "2020-06-26T13:41:06Z", "message": "Added RealmAsyncResultTask and implementation and tests for the latter. This class exposes the blockingGet and get methods, that allow users to retrieve results from a task"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODk4NTYx", "url": "https://github.com/realm/realm-java/pull/6971#pullrequestreview-438898561", "createdAt": "2020-06-29T05:40:37Z", "commit": {"oid": "e9ab485b16a5d1e9e27ebedf522f9a217efdae34"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNTo0MDozOFrOGqFfrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNTo1NDozMlrOGqFvqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc4MzQwNg==", "bodyText": "Given that we normally use the pattern <method>Async I would suggest we do the same here instead of reversing it.", "url": "https://github.com/realm/realm-java/pull/6971#discussion_r446783406", "createdAt": "2020-06-29T05:40:38Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RealmAsyncResultTask.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import io.realm.RealmAsyncTask;\n+\n+/**\n+ * FIXME\n+ */\n+public interface RealmAsyncResultTask<T> extends RealmAsyncTask {\n+\n+    /**\n+     * FIXME\n+     *\n+     * @return\n+     */\n+    T blockingGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ab485b16a5d1e9e27ebedf522f9a217efdae34"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc4NDQyMA==", "bodyText": "It would have been ideal if this could have been more generic, but if we don't want to use this class for anything in the \"base\" API. This is fine. It also makes the callback a bit more clear as we can use the App.Callback` instead of coming up with yet another callback interface.", "url": "https://github.com/realm/realm-java/pull/6971#discussion_r446784420", "createdAt": "2020-06-29T05:44:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RealmAsyncResultTask.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ab485b16a5d1e9e27ebedf522f9a217efdae34"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc4NTgzNg==", "bodyText": "Nitpick: When a test is structured like this you can use fun get() = looperThread.runBlocking { .. }", "url": "https://github.com/realm/realm-java/pull/6971#discussion_r446785836", "createdAt": "2020-06-29T05:48:59Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/async/RealmAsyncResultTaskImplTest.kt", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.async\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import io.realm.mongodb.App\n+import io.realm.mongodb.AppException\n+import io.realm.mongodb.RealmAsyncResultTask\n+import io.realm.rule.BlockingLooperThread\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import java.util.concurrent.ThreadPoolExecutor\n+import kotlin.test.*\n+\n+private const val OUTPUT = 42\n+private const val EXCEPTION_REASON = \"BOOM\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class RealmAsyncResultTaskImplTest {\n+\n+    private val looperThread = BlockingLooperThread()\n+    private val service: ThreadPoolExecutor = App.NETWORK_POOL_EXECUTOR\n+\n+    @Test\n+    fun blockingGet() {\n+        val asyncTask: RealmAsyncResultTask<Int> = RealmAsyncResultTaskImpl(\n+                service,\n+                object : RealmAsyncResultTaskImpl.Executor<Int>() {\n+                    override fun run(): Int {\n+                        return OUTPUT\n+                    }\n+                }\n+        )\n+        assertEquals(OUTPUT, asyncTask.blockingGet())\n+    }\n+\n+    @Test\n+    fun blockingGet_fails() {\n+        val asyncTask: RealmAsyncResultTask<String> = RealmAsyncResultTaskImpl(\n+                service,\n+                object : RealmAsyncResultTaskImpl.Executor<String>() {\n+                    override fun run(): String {\n+                        throw RuntimeException(EXCEPTION_REASON)\n+                    }\n+                }\n+        )\n+        assertFailsWith<RuntimeException> {\n+            asyncTask.blockingGet()\n+        }.let {\n+            assertTrue(it.message!!.contains(EXCEPTION_REASON))\n+        }\n+    }\n+\n+    @Test\n+    fun get() {\n+        looperThread.runBlocking {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ab485b16a5d1e9e27ebedf522f9a217efdae34"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc4NjQyMw==", "bodyText": "I don't have a strong opinion. RealmAsyncResultTask is a bit long and RealmResultTask does feel a bit more readable, but up to you.", "url": "https://github.com/realm/realm-java/pull/6971#discussion_r446786423", "createdAt": "2020-06-29T05:50:55Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/async/RealmAsyncResultTaskImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.async;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.App;\n+import io.realm.mongodb.AppException;\n+import io.realm.mongodb.ErrorCode;\n+import io.realm.mongodb.RealmAsyncResultTask;\n+\n+/**\n+ * FIXME - would RealmResultTask be a more suitable name given that it offers both blocking and async result-retrieval?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ab485b16a5d1e9e27ebedf522f9a217efdae34"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc4NzQ5Ng==", "bodyText": "There isn't anything checking if you call this on a thread without a Looper. Not exactly sure what happens, but it probably blows up with some weird exception. There also seem to tests lacking around this.\nIdeally, we should throw an exception when you call task.get(callback) if the caller thread doesn't have a Looper.", "url": "https://github.com/realm/realm-java/pull/6971#discussion_r446787496", "createdAt": "2020-06-29T05:54:32Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/async/RealmAsyncResultTaskImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.async;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.App;\n+import io.realm.mongodb.AppException;\n+import io.realm.mongodb.ErrorCode;\n+import io.realm.mongodb.RealmAsyncResultTask;\n+\n+/**\n+ * FIXME - would RealmResultTask be a more suitable name given that it offers both blocking and async result-retrieval?\n+ *\n+ * @param <T>\n+ */\n+public class RealmAsyncResultTaskImpl<T> implements RealmAsyncResultTask<T> {\n+\n+    private Future<?> pendingTask;\n+    private volatile boolean isCancelled = false;\n+    private final ThreadPoolExecutor service;\n+    private RealmNotifier handler = new AndroidRealmNotifier(null, new AndroidCapabilities());\n+    private Executor<T> executor;\n+\n+    /**\n+     * FIXME\n+     *\n+     * @param service\n+     * @param executor\n+     */\n+    public RealmAsyncResultTaskImpl(ThreadPoolExecutor service, Executor<T> executor) {\n+        this.service = service;\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void cancel() {\n+        if (pendingTask != null) {\n+            pendingTask.cancel(true);\n+            isCancelled = true;\n+\n+            // From \"Java Threads\": By Scott Oaks & Henry Wong\n+            // cancelled tasks are never executed, but may\n+            // accumulate in work queues, which may causes a memory leak\n+            // if the task hold references (to an enclosing class for example)\n+            // we can use purge() but one caveat applies: if a second thread attempts to add\n+            // something to the pool (using the execute() method) at the same time the\n+            // first thread is attempting to purge the queue the attempt to purge\n+            // the queue fails and the cancelled object remain in the queue.\n+            // A better way to cancel objects with thread pools is to use the remove()\n+            service.getQueue().remove(pendingTask);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isCancelled() {\n+        return isCancelled;\n+    }\n+\n+    @Override\n+    public T blockingGet() {\n+        return executor.run();\n+    }\n+\n+    @Override\n+    public void get(App.Callback<T> callback) {\n+        pendingTask = service.submit(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    postSuccess(executor.run(), callback);\n+                } catch (AppException e) {\n+                    postError(e, callback);\n+                } catch (Throwable e) {\n+                    postError(new AppException(ErrorCode.UNKNOWN, \"Unexpected error\", e), callback);\n+                }\n+            }\n+        });\n+    }\n+\n+    private void postError(final AppException error, App.Callback<T> callback) {\n+        boolean errorHandled = false;\n+        if (callback != null) {\n+            Runnable action = new Runnable() {\n+                @Override\n+                public void run() {\n+                    callback.onResult(App.Result.withError(error));\n+                }\n+            };\n+            errorHandled = handler.post(action);\n+        }\n+\n+        if (!errorHandled) {\n+            RealmLog.error(error, \"An error was thrown, but could not be posted: \\n\" + error.toString());\n+        }\n+    }\n+\n+    private void postSuccess(final T result, App.Callback<T> callback) {\n+        if (callback != null) {\n+            handler.post(new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ab485b16a5d1e9e27ebedf522f9a217efdae34"}, "originalPosition": 125}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc2331de6e7522c00982996ac830db09efb0a537", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/cc2331de6e7522c00982996ac830db09efb0a537", "committedDate": "2020-06-29T12:28:48Z", "message": "Changed method names, added checks for illegal arguments and looper thread, plus added documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74e1e3518e63afbeac3af6df3e38af3e822c11f5", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/74e1e3518e63afbeac3af6df3e38af3e822c11f5", "committedDate": "2020-06-29T12:36:00Z", "message": "Merge branch 'v10' into el/async-task"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzQ0Mzcy", "url": "https://github.com/realm/realm-java/pull/6971#pullrequestreview-440344372", "createdAt": "2020-06-30T20:02:59Z", "commit": {"oid": "74e1e3518e63afbeac3af6df3e38af3e822c11f5"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDowMzowMFrOGrMdTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDowOTozM1rOGrMrKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0NjA2MQ==", "bodyText": "It is a bit concerning that null is allowed outright here. Normally we attempt to have default nonnullable using package annotations like this: https://github.com/realm/realm-java/blob/master/realm/realm-library/src/main/java/io/realm/package-info.java\nWith that enabled you can use TestHelper.getNull() here instead, since adding that package level annotation will otherwise make Kotlin treat it as nonnull pr default.", "url": "https://github.com/realm/realm-java/pull/6971#discussion_r447946061", "createdAt": "2020-06-30T20:03:00Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/internal/async/RealmResultTaskImplTest.kt", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.async\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import io.realm.mongodb.App\n+import io.realm.mongodb.AppException\n+import io.realm.mongodb.RealmResultTask\n+import io.realm.rule.BlockingLooperThread\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import java.util.concurrent.ThreadPoolExecutor\n+import kotlin.test.*\n+\n+private const val OUTPUT = 42\n+private const val EXCEPTION_REASON = \"BOOM\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class RealmResultTaskImplTest {\n+\n+    private val looperThread = BlockingLooperThread()\n+    private val service: ThreadPoolExecutor = App.NETWORK_POOL_EXECUTOR\n+\n+    @Test\n+    fun constructor_throwsOnNullArgs() {\n+        assertFailsWith<IllegalArgumentException> {\n+            RealmResultTaskImpl<String>(null, object : RealmResultTaskImpl.Executor<String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e1e3518e63afbeac3af6df3e38af3e822c11f5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0ODIyMA==", "bodyText": "This description doesn't really say anything you cannot tell from just reading the class name. Perhaps something like Implementation of RealmResultTask used internally by MongoDB Realm API's. Implementation is separate from the interface so we can hide the constructor from end users.", "url": "https://github.com/realm/realm-java/pull/6971#discussion_r447948220", "createdAt": "2020-06-30T20:06:59Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/async/RealmResultTaskImpl.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.async;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.Util;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.App;\n+import io.realm.mongodb.AppException;\n+import io.realm.mongodb.ErrorCode;\n+import io.realm.mongodb.RealmResultTask;\n+\n+/**\n+ * Specific implementation of {@link RealmResultTask}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e1e3518e63afbeac3af6df3e38af3e822c11f5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0ODg0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * mechanism to work with asynchronous operations carried out against the Object Server.\n          \n          \n            \n             * mechanism to work with asynchronous operations carried out against MongoDB Realm.", "url": "https://github.com/realm/realm-java/pull/6971#discussion_r447948847", "createdAt": "2020-06-30T20:08:07Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RealmResultTask.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import io.realm.RealmAsyncTask;\n+\n+/**\n+ * The RealmResultTask is a specific version of the {@link RealmAsyncTask} that provides a\n+ * mechanism to work with asynchronous operations carried out against the Object Server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e1e3518e63afbeac3af6df3e38af3e822c11f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0OTYxMQ==", "bodyText": "Missing @throws message about what happens if you call this from a non-looper Thread.", "url": "https://github.com/realm/realm-java/pull/6971#discussion_r447949611", "createdAt": "2020-06-30T20:09:33Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RealmResultTask.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import io.realm.RealmAsyncTask;\n+\n+/**\n+ * The RealmResultTask is a specific version of the {@link RealmAsyncTask} that provides a\n+ * mechanism to work with asynchronous operations carried out against the Object Server.\n+ * <p>\n+ * This class offers both blocking ({@code get}) and non-blocking ({@code getAsync}) method calls.\n+ *\n+ * @param <T> the result type delivered by this task.\n+ */\n+public interface RealmResultTask<T> extends RealmAsyncTask {\n+\n+    /**\n+     * Blocks the thread on which the call is made until the result of the operation arrives.\n+     *\n+     * @return the result of the operation executed by this task.\n+     */\n+    T get();\n+\n+    /**\n+     * Provides a way to subscribe to asynchronous operations via a callback, which handles both\n+     * results and errors.\n+     *\n+     * @param callback the {@link App.Callback} designed to receive results.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e1e3518e63afbeac3af6df3e38af3e822c11f5"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a893409325fef562d054086232bede16d4804162", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/a893409325fef562d054086232bede16d4804162", "committedDate": "2020-06-30T21:55:48Z", "message": "Added nonnullbydefault and modified tests accordingly, updated docs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTc1NjA1", "url": "https://github.com/realm/realm-java/pull/6971#pullrequestreview-440575605", "createdAt": "2020-07-01T06:22:59Z", "commit": {"oid": "a893409325fef562d054086232bede16d4804162"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fe52946e908f398df16c7edc4a055cc0083af67", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/9fe52946e908f398df16c7edc4a055cc0083af67", "committedDate": "2020-07-01T08:29:27Z", "message": "Changed wrong names in test functions, added test for cancelling tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ce68d2b00b4fbadf03dfdd4a8606795307627e5", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/7ce68d2b00b4fbadf03dfdd4a8606795307627e5", "committedDate": "2020-07-01T10:42:24Z", "message": "Added guard to avoid callback if task has been marked as cancelled"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2262, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}