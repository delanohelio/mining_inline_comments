{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MzQ3OTQz", "number": 6804, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyODo0MlrODypPiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowNDo0MlrOD4XJug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDMxMTEyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyODo0MlrOGG0Dog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyODo0MlrOGG0Dog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NzUzOA==", "bodyText": "These types of javadoc should be removed as they don't make much sense in our API", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r409797538", "createdAt": "2020-04-16T19:28:42Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDMxNjc0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTozMDoyMlrOGG0HGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODo1MDo1MFrOGHFi6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5ODQyNQ==", "bodyText": "Historically we haven't used annotations like this. What value does it provide?", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r409798425", "createdAt": "2020-04-16T19:30:22Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0\n+ */\n+\n+// TODO: Stitch uses its own with retention policy RUNTIME instead of CLASS, which one should we use?\n+@Immutable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA4MzI4Ng==", "bodyText": "I would say none, but maybe it did something in Stitch - haven't looked at it in detail though. I think it would be safe to delete.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r410083286", "createdAt": "2020-04-17T08:49:28Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0\n+ */\n+\n+// TODO: Stitch uses its own with retention policy RUNTIME instead of CLASS, which one should we use?\n+@Immutable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5ODQyNQ=="}, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA4NDA3NA==", "bodyText": "Yeah, in that case I would probably just delete it.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r410084074", "createdAt": "2020-04-17T08:50:50Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0\n+ */\n+\n+// TODO: Stitch uses its own with retention policy RUNTIME instead of CLASS, which one should we use?\n+@Immutable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5ODQyNQ=="}, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDMxODMxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTozMDo1MlrOGG0IIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTozMDo1MlrOGG0IIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5ODY4OQ==", "bodyText": "These should be removed", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r409798689", "createdAt": "2020-04-16T19:30:52Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0\n+ */\n+\n+// TODO: Stitch uses its own with retention policy RUNTIME instead of CLASS, which one should we use?\n+@Immutable\n+public final class MongoNamespace {\n+    public static final String COMMAND_COLLECTION_NAME = \"$cmd\";\n+\n+    private static final Set<Character> PROHIBITED_CHARACTERS_IN_DATABASE_NAME =\n+            new HashSet<Character>(asList('\\0', '/', '\\\\', ' ', '\"', '.'));\n+\n+    private final String databaseName;\n+    private final String collectionName;\n+    @BsonIgnore\n+    private final String fullName;  // cache to avoid repeated string building\n+\n+    /**\n+     * Check the validity of the given database name. A valid database name is non-null, non-empty, and does not contain any of the\n+     * following characters: {@code '\\0', '/', '\\\\', ' ', '\"', '.'}. The server may impose additional restrictions on database names.\n+     *\n+     * @param databaseName the database name\n+     * @throws IllegalArgumentException if the database name is invalid\n+     * @mongodb.driver.manual reference/limits/#naming-restrictions Naming Restrictions\n+     * @since 3.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDMyMzUzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTozMjozNlrOGG0Liw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOToyMjo1N1rOGHGmzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5OTU2Mw==", "bodyText": "This annotation looks unfamiliar to me. I wonder if it is one used by a custom javadoc generator. In which case we need to replace it with @see and a proper link.\nWe should probably figure out exactly how this is used. Perhaps it is something we can utilize ourselves.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r409799563", "createdAt": "2020-04-16T19:32:36Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0\n+ */\n+\n+// TODO: Stitch uses its own with retention policy RUNTIME instead of CLASS, which one should we use?\n+@Immutable\n+public final class MongoNamespace {\n+    public static final String COMMAND_COLLECTION_NAME = \"$cmd\";\n+\n+    private static final Set<Character> PROHIBITED_CHARACTERS_IN_DATABASE_NAME =\n+            new HashSet<Character>(asList('\\0', '/', '\\\\', ' ', '\"', '.'));\n+\n+    private final String databaseName;\n+    private final String collectionName;\n+    @BsonIgnore\n+    private final String fullName;  // cache to avoid repeated string building\n+\n+    /**\n+     * Check the validity of the given database name. A valid database name is non-null, non-empty, and does not contain any of the\n+     * following characters: {@code '\\0', '/', '\\\\', ' ', '\"', '.'}. The server may impose additional restrictions on database names.\n+     *\n+     * @param databaseName the database name\n+     * @throws IllegalArgumentException if the database name is invalid\n+     * @mongodb.driver.manual reference/limits/#naming-restrictions Naming Restrictions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMTQ1NA==", "bodyText": "I have added a reminder for myself about this.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r410101454", "createdAt": "2020-04-17T09:22:57Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0\n+ */\n+\n+// TODO: Stitch uses its own with retention policy RUNTIME instead of CLASS, which one should we use?\n+@Immutable\n+public final class MongoNamespace {\n+    public static final String COMMAND_COLLECTION_NAME = \"$cmd\";\n+\n+    private static final Set<Character> PROHIBITED_CHARACTERS_IN_DATABASE_NAME =\n+            new HashSet<Character>(asList('\\0', '/', '\\\\', ' ', '\"', '.'));\n+\n+    private final String databaseName;\n+    private final String collectionName;\n+    @BsonIgnore\n+    private final String fullName;  // cache to avoid repeated string building\n+\n+    /**\n+     * Check the validity of the given database name. A valid database name is non-null, non-empty, and does not contain any of the\n+     * following characters: {@code '\\0', '/', '\\\\', ' ', '\"', '.'}. The server may impose additional restrictions on database names.\n+     *\n+     * @param databaseName the database name\n+     * @throws IllegalArgumentException if the database name is invalid\n+     * @mongodb.driver.manual reference/limits/#naming-restrictions Naming Restrictions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5OTU2Mw=="}, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDMzNzQ1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTozNjo0MVrOGG0UFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTozNjo0MVrOGG0UFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwMTc1MA==", "bodyText": "Remove annotations like this here and elsewhere", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r409801750", "createdAt": "2020-04-16T19:36:41Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0\n+ */\n+\n+// TODO: Stitch uses its own with retention policy RUNTIME instead of CLASS, which one should we use?\n+@Immutable\n+public final class MongoNamespace {\n+    public static final String COMMAND_COLLECTION_NAME = \"$cmd\";\n+\n+    private static final Set<Character> PROHIBITED_CHARACTERS_IN_DATABASE_NAME =\n+            new HashSet<Character>(asList('\\0', '/', '\\\\', ' ', '\"', '.'));\n+\n+    private final String databaseName;\n+    private final String collectionName;\n+    @BsonIgnore\n+    private final String fullName;  // cache to avoid repeated string building\n+\n+    /**\n+     * Check the validity of the given database name. A valid database name is non-null, non-empty, and does not contain any of the\n+     * following characters: {@code '\\0', '/', '\\\\', ' ', '\"', '.'}. The server may impose additional restrictions on database names.\n+     *\n+     * @param databaseName the database name\n+     * @throws IllegalArgumentException if the database name is invalid\n+     * @mongodb.driver.manual reference/limits/#naming-restrictions Naming Restrictions\n+     * @since 3.4\n+     */\n+    public static void checkDatabaseNameValidity(final String databaseName) {\n+        notNull(\"databaseName\", databaseName);\n+        isTrueArgument(\"databaseName is not empty\", !databaseName.isEmpty());\n+        for (int i = 0; i < databaseName.length(); i++) {\n+            isTrueArgument(\"databaseName does not contain '\" + databaseName.charAt(i) + \"'\",\n+                    !PROHIBITED_CHARACTERS_IN_DATABASE_NAME.contains(databaseName.charAt(i)));\n+        }\n+    }\n+\n+    /**\n+     * Check the validity of the given collection name.   A valid collection name is non-null and non-empty.  The server may impose\n+     * additional restrictions on collection names.\n+     *\n+     * @param collectionName the collection name\n+     * @throws IllegalArgumentException if the collection name is invalid\n+     * @mongodb.driver.manual reference/limits/#naming-restrictions Naming Restrictions\n+     * @since 3.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDM1NzM0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo0MjoyM1rOGG0gQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1NzozOVrOGPJCiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNDg2NA==", "bodyText": "I wonder what all of these annotations do \ud83e\udd14", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r409804864", "createdAt": "2020-04-16T19:42:23Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0\n+ */\n+\n+// TODO: Stitch uses its own with retention policy RUNTIME instead of CLASS, which one should we use?\n+@Immutable\n+public final class MongoNamespace {\n+    public static final String COMMAND_COLLECTION_NAME = \"$cmd\";\n+\n+    private static final Set<Character> PROHIBITED_CHARACTERS_IN_DATABASE_NAME =\n+            new HashSet<Character>(asList('\\0', '/', '\\\\', ' ', '\"', '.'));\n+\n+    private final String databaseName;\n+    private final String collectionName;\n+    @BsonIgnore\n+    private final String fullName;  // cache to avoid repeated string building\n+\n+    /**\n+     * Check the validity of the given database name. A valid database name is non-null, non-empty, and does not contain any of the\n+     * following characters: {@code '\\0', '/', '\\\\', ' ', '\"', '.'}. The server may impose additional restrictions on database names.\n+     *\n+     * @param databaseName the database name\n+     * @throws IllegalArgumentException if the database name is invalid\n+     * @mongodb.driver.manual reference/limits/#naming-restrictions Naming Restrictions\n+     * @since 3.4\n+     */\n+    public static void checkDatabaseNameValidity(final String databaseName) {\n+        notNull(\"databaseName\", databaseName);\n+        isTrueArgument(\"databaseName is not empty\", !databaseName.isEmpty());\n+        for (int i = 0; i < databaseName.length(); i++) {\n+            isTrueArgument(\"databaseName does not contain '\" + databaseName.charAt(i) + \"'\",\n+                    !PROHIBITED_CHARACTERS_IN_DATABASE_NAME.contains(databaseName.charAt(i)));\n+        }\n+    }\n+\n+    /**\n+     * Check the validity of the given collection name.   A valid collection name is non-null and non-empty.  The server may impose\n+     * additional restrictions on collection names.\n+     *\n+     * @param collectionName the collection name\n+     * @throws IllegalArgumentException if the collection name is invalid\n+     * @mongodb.driver.manual reference/limits/#naming-restrictions Naming Restrictions\n+     * @since 3.4\n+     */\n+    public static void checkCollectionNameValidity(final String collectionName) {\n+        notNull(\"collectionName\", collectionName);\n+        isTrueArgument(\"collectionName is not empty\", !collectionName.isEmpty());\n+    }\n+\n+    /**\n+     * Construct an instance for the given full name.  The database name is the string preceding the first {@code \".\"} character.\n+     *\n+     * @param fullName the non-null full namespace\n+     * @see #checkDatabaseNameValidity(String)\n+     * @see #checkCollectionNameValidity(String)\n+     */\n+    public MongoNamespace(final String fullName) {\n+        notNull(\"fullName\", fullName);\n+        this.fullName = fullName;\n+        this.databaseName = getDatatabaseNameFromFullName(fullName);\n+        this.collectionName = getCollectionNameFullName(fullName);\n+        checkDatabaseNameValidity(databaseName);\n+        checkCollectionNameValidity(collectionName);\n+    }\n+\n+    /**\n+     * Construct an instance from the given database name and collection name.\n+     *\n+     * @param databaseName   the valid database name\n+     * @param collectionName the valid collection name\n+     * @see #checkDatabaseNameValidity(String)\n+     * @see #checkCollectionNameValidity(String)\n+     */\n+    @BsonCreator\n+    public MongoNamespace(@BsonProperty(\"db\") final String databaseName,\n+                          @BsonProperty(\"coll\") final String collectionName) {\n+        checkDatabaseNameValidity(databaseName);\n+        checkCollectionNameValidity(collectionName);\n+        this.databaseName = databaseName;\n+        this.collectionName = collectionName;\n+        this.fullName = databaseName + '.' + collectionName;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return the database name\n+     */\n+    @BsonProperty(\"db\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyOTkzMQ==", "bodyText": "I suspect we can just remove.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418529931", "createdAt": "2020-05-01T12:57:39Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0\n+ */\n+\n+// TODO: Stitch uses its own with retention policy RUNTIME instead of CLASS, which one should we use?\n+@Immutable\n+public final class MongoNamespace {\n+    public static final String COMMAND_COLLECTION_NAME = \"$cmd\";\n+\n+    private static final Set<Character> PROHIBITED_CHARACTERS_IN_DATABASE_NAME =\n+            new HashSet<Character>(asList('\\0', '/', '\\\\', ' ', '\"', '.'));\n+\n+    private final String databaseName;\n+    private final String collectionName;\n+    @BsonIgnore\n+    private final String fullName;  // cache to avoid repeated string building\n+\n+    /**\n+     * Check the validity of the given database name. A valid database name is non-null, non-empty, and does not contain any of the\n+     * following characters: {@code '\\0', '/', '\\\\', ' ', '\"', '.'}. The server may impose additional restrictions on database names.\n+     *\n+     * @param databaseName the database name\n+     * @throws IllegalArgumentException if the database name is invalid\n+     * @mongodb.driver.manual reference/limits/#naming-restrictions Naming Restrictions\n+     * @since 3.4\n+     */\n+    public static void checkDatabaseNameValidity(final String databaseName) {\n+        notNull(\"databaseName\", databaseName);\n+        isTrueArgument(\"databaseName is not empty\", !databaseName.isEmpty());\n+        for (int i = 0; i < databaseName.length(); i++) {\n+            isTrueArgument(\"databaseName does not contain '\" + databaseName.charAt(i) + \"'\",\n+                    !PROHIBITED_CHARACTERS_IN_DATABASE_NAME.contains(databaseName.charAt(i)));\n+        }\n+    }\n+\n+    /**\n+     * Check the validity of the given collection name.   A valid collection name is non-null and non-empty.  The server may impose\n+     * additional restrictions on collection names.\n+     *\n+     * @param collectionName the collection name\n+     * @throws IllegalArgumentException if the collection name is invalid\n+     * @mongodb.driver.manual reference/limits/#naming-restrictions Naming Restrictions\n+     * @since 3.4\n+     */\n+    public static void checkCollectionNameValidity(final String collectionName) {\n+        notNull(\"collectionName\", collectionName);\n+        isTrueArgument(\"collectionName is not empty\", !collectionName.isEmpty());\n+    }\n+\n+    /**\n+     * Construct an instance for the given full name.  The database name is the string preceding the first {@code \".\"} character.\n+     *\n+     * @param fullName the non-null full namespace\n+     * @see #checkDatabaseNameValidity(String)\n+     * @see #checkCollectionNameValidity(String)\n+     */\n+    public MongoNamespace(final String fullName) {\n+        notNull(\"fullName\", fullName);\n+        this.fullName = fullName;\n+        this.databaseName = getDatatabaseNameFromFullName(fullName);\n+        this.collectionName = getCollectionNameFullName(fullName);\n+        checkDatabaseNameValidity(databaseName);\n+        checkCollectionNameValidity(collectionName);\n+    }\n+\n+    /**\n+     * Construct an instance from the given database name and collection name.\n+     *\n+     * @param databaseName   the valid database name\n+     * @param collectionName the valid collection name\n+     * @see #checkDatabaseNameValidity(String)\n+     * @see #checkCollectionNameValidity(String)\n+     */\n+    @BsonCreator\n+    public MongoNamespace(@BsonProperty(\"db\") final String databaseName,\n+                          @BsonProperty(\"coll\") final String collectionName) {\n+        checkDatabaseNameValidity(databaseName);\n+        checkCollectionNameValidity(collectionName);\n+        this.databaseName = databaseName;\n+        this.collectionName = collectionName;\n+        this.fullName = databaseName + '.' + collectionName;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return the database name\n+     */\n+    @BsonProperty(\"db\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNDg2NA=="}, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDM4NDgyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/remote/RemoteCountOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo1MDoyMlrOGG0xXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODo1MjoxOVrOGHFmOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwOTI0Ng==", "bodyText": "Style nitpick: We always try to end files with an empty line. Here and in other classes", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r409809246", "createdAt": "2020-04-16T19:50:22Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/remote/RemoteCountOptions.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.realm.mongodb.remote;\n+\n+/**\n+ * The options for a count operation.\n+ */\n+public class RemoteCountOptions {\n+    private int limit;\n+\n+    /**\n+     * Gets the limit to apply.  The default is 0, which means there is no limit.\n+     *\n+     * @return the limit\n+     */\n+    public int getLimit() {\n+        return limit;\n+    }\n+\n+    /**\n+     * Sets the limit to apply.\n+     *\n+     * @param limit the limit\n+     * @return this\n+     */\n+    public RemoteCountOptions limit(final int limit) {\n+        this.limit = limit;\n+        return this;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"RemoteCountOptions{\"\n+                + \"limit=\" + limit\n+                + '}';\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA4NDkyMw==", "bodyText": "Yeps, I do too, forgot to add the setting to AS.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r410084923", "createdAt": "2020-04-17T08:52:19Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/remote/RemoteCountOptions.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.realm.mongodb.remote;\n+\n+/**\n+ * The options for a count operation.\n+ */\n+public class RemoteCountOptions {\n+    private int limit;\n+\n+    /**\n+     * Gets the limit to apply.  The default is 0, which means there is no limit.\n+     *\n+     * @return the limit\n+     */\n+    public int getLimit() {\n+        return limit;\n+    }\n+\n+    /**\n+     * Sets the limit to apply.\n+     *\n+     * @param limit the limit\n+     * @return this\n+     */\n+    public RemoteCountOptions limit(final int limit) {\n+        this.limit = limit;\n+        return this;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"RemoteCountOptions{\"\n+                + \"limit=\" + limit\n+                + '}';\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwOTI0Ng=="}, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDM4NzM3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo1MTowNlrOGG0y7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo1MTowNlrOGG0y7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwOTY0NA==", "bodyText": "All of these files should also have a Realm license header. You can copy one from any other class and just adjust the date to 2020", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r409809644", "createdAt": "2020-04-16T19:51:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDQzMDIzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDowNDowNlrOGG1Nwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOToxNTo0OVrOGHGYMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxNjUxNA==", "bodyText": "Is this class being used anywhere?", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r409816514", "createdAt": "2020-04-16T20:04:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0\n+ */\n+\n+// TODO: Stitch uses its own with retention policy RUNTIME instead of CLASS, which one should we use?\n+@Immutable\n+public final class MongoNamespace {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5NzcxMg==", "bodyText": "Yes, collections have a namespace.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r410097712", "createdAt": "2020-04-17T09:15:49Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ *\n+ * @since 3.0\n+ */\n+\n+// TODO: Stitch uses its own with retention policy RUNTIME instead of CLASS, which one should we use?\n+@Immutable\n+public final class MongoNamespace {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxNjUxNA=="}, "originalCommit": {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDIyNjMxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo0NzoxMVrOGPI2aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo0NzoxMVrOGPI2aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyNjgyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                implementation \"com.google.android.gms:play-services-tasks:17.0.2\"      // added to support mongo client's asynchronous nature without breaking Stitch's API\n          \n          \n            \n                // FIXME: Attempt to find a way to remove this dependency\n          \n          \n            \n                implementation \"com.google.android.gms:play-services-tasks:17.0.2\"      // added to support mongo client's asynchronous nature without breaking Stitch's API", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418526824", "createdAt": "2020-05-01T12:47:11Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/build.gradle", "diffHunk": "@@ -211,6 +211,7 @@ dependencies {\n     implementation('io.reactivex.rxjava2:rxandroid:2.1.1') {\n         exclude group: 'io.reactivex.rxjava2', module: 'rxjava'\n     }\n+    implementation \"com.google.android.gms:play-services-tasks:17.0.2\"      // added to support mongo client's asynchronous nature without breaking Stitch's API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDIyOTgwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/CMakeLists.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo0OTowOFrOGPI4cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoxMjozMlrOGPJVMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyNzM0Ng==", "bodyText": "We attempt to keep these entries in alphabetical order. But sometimes we forget \ud83d\ude48", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418527346", "createdAt": "2020-05-01T12:49:08Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/CMakeLists.txt", "diffHunk": "@@ -113,6 +113,9 @@ if (build_SYNC)\n         io.realm.internal.objectstore.OsAsyncOpenTask\n         io.realm.internal.objectstore.OsJavaNetworkTransport\n         io.realm.internal.objectstore.OsSyncUser\n+        io.realm.internal.objectstore.OsRemoteMongoClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzNDcwNA==", "bodyText": "Got it \ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418534704", "createdAt": "2020-05-01T13:12:32Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/cpp/CMakeLists.txt", "diffHunk": "@@ -113,6 +113,9 @@ if (build_SYNC)\n         io.realm.internal.objectstore.OsAsyncOpenTask\n         io.realm.internal.objectstore.OsJavaNetworkTransport\n         io.realm.internal.objectstore.OsSyncUser\n+        io.realm.internal.objectstore.OsRemoteMongoClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyNzM0Ng=="}, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDIzMDQzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/CMakeLists.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo0OTozMVrOGPI41g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo0OTozMVrOGPI41g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyNzQ0Ng==", "bodyText": "Same, alphabetical ordering so it matches imports/the file system", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418527446", "createdAt": "2020-05-01T12:49:31Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/CMakeLists.txt", "diffHunk": "@@ -204,6 +207,9 @@ if (NOT build_SYNC)\n         ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_internal_objectstore_OsAsyncOpenTask.cpp\n         ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_internal_objectstore_OsAppCredentials.cpp\n         ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_internal_objectstore_OsSyncUser.cpp\n+        ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_internal_objectstore_OsRemoteMongoClient.cpp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDIzMTg4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoClient.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1MDoxN1rOGPI5wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1MDoxN1rOGPI5wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyNzY4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    App *app = reinterpret_cast<App *>(j_app_ptr);\n          \n          \n            \n                    App* app = reinterpret_cast<App*>(j_app_ptr);", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418527681", "createdAt": "2020-05-01T12:50:17Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoClient.cpp", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"io_realm_internal_objectstore_OsRemoteMongoClient.h\"\n+\n+#include \"java_class_global_def.hpp\"\n+#include \"java_network_transport.hpp\"\n+#include \"util.hpp\"\n+#include \"jni_util/java_method.hpp\"\n+#include \"jni_util/jni_utils.hpp\"\n+\n+#include <realm/util/optional.hpp>\n+#include <sync/app.hpp>\n+#include <sync/sync_user.hpp>\n+#include <sync/remote_mongo_client.hpp>\n+#include <sync/remote_mongo_database.hpp>\n+\n+using namespace realm;\n+using namespace realm::app;\n+using namespace realm::jni_util;\n+using namespace realm::_impl;\n+\n+static void finalize_client(jlong ptr) {\n+    delete reinterpret_cast<RemoteMongoClient*>(ptr);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoClient_nativeCreate(JNIEnv *env,\n+                                                                    jclass,\n+                                                                    jlong j_app_ptr,\n+                                                                    jstring j_service_name) {\n+    try {\n+        App *app = reinterpret_cast<App *>(j_app_ptr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDIzNDIyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoClient.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1MToyMlrOGPI7Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1MToyMlrOGPI7Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyODAyNw==", "bodyText": "I believe `RemoteMongoClient client(app->remote_mongo_client(name));\nwould be more efficient. = invokes the copy constructor.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418528027", "createdAt": "2020-05-01T12:51:22Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoClient.cpp", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"io_realm_internal_objectstore_OsRemoteMongoClient.h\"\n+\n+#include \"java_class_global_def.hpp\"\n+#include \"java_network_transport.hpp\"\n+#include \"util.hpp\"\n+#include \"jni_util/java_method.hpp\"\n+#include \"jni_util/jni_utils.hpp\"\n+\n+#include <realm/util/optional.hpp>\n+#include <sync/app.hpp>\n+#include <sync/sync_user.hpp>\n+#include <sync/remote_mongo_client.hpp>\n+#include <sync/remote_mongo_database.hpp>\n+\n+using namespace realm;\n+using namespace realm::app;\n+using namespace realm::jni_util;\n+using namespace realm::_impl;\n+\n+static void finalize_client(jlong ptr) {\n+    delete reinterpret_cast<RemoteMongoClient*>(ptr);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoClient_nativeCreate(JNIEnv *env,\n+                                                                    jclass,\n+                                                                    jlong j_app_ptr,\n+                                                                    jstring j_service_name) {\n+    try {\n+        App *app = reinterpret_cast<App *>(j_app_ptr);\n+        JStringAccessor name(env, j_service_name);\n+        RemoteMongoClient client = app->remote_mongo_client(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDIzNTg2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoClient.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1MjowNVrOGPI8Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1MjowNVrOGPI8Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyODI3MQ==", "bodyText": "Nitpick: I would put this at the top of the class under the static finalize_client method", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418528271", "createdAt": "2020-05-01T12:52:05Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoClient.cpp", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"io_realm_internal_objectstore_OsRemoteMongoClient.h\"\n+\n+#include \"java_class_global_def.hpp\"\n+#include \"java_network_transport.hpp\"\n+#include \"util.hpp\"\n+#include \"jni_util/java_method.hpp\"\n+#include \"jni_util/jni_utils.hpp\"\n+\n+#include <realm/util/optional.hpp>\n+#include <sync/app.hpp>\n+#include <sync/sync_user.hpp>\n+#include <sync/remote_mongo_client.hpp>\n+#include <sync/remote_mongo_database.hpp>\n+\n+using namespace realm;\n+using namespace realm::app;\n+using namespace realm::jni_util;\n+using namespace realm::_impl;\n+\n+static void finalize_client(jlong ptr) {\n+    delete reinterpret_cast<RemoteMongoClient*>(ptr);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoClient_nativeCreate(JNIEnv *env,\n+                                                                    jclass,\n+                                                                    jlong j_app_ptr,\n+                                                                    jstring j_service_name) {\n+    try {\n+        App *app = reinterpret_cast<App *>(j_app_ptr);\n+        JStringAccessor name(env, j_service_name);\n+        RemoteMongoClient client = app->remote_mongo_client(name);\n+        return reinterpret_cast<jlong>(new RemoteMongoClient(std::move(client)));\n+    }\n+    CATCH_STD()\n+    return reinterpret_cast<jlong>(nullptr);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoClient_nativeCreateDatabase(JNIEnv *env,\n+                                                                            jclass,\n+                                                                            jlong j_client_ptr,\n+                                                                            jstring j_database_name) {\n+    try {\n+        RemoteMongoClient *client = reinterpret_cast<RemoteMongoClient *>(j_client_ptr);\n+        JStringAccessor name(env, j_database_name);\n+        RemoteMongoDatabase database = client->db(name);\n+        return reinterpret_cast<jlong>(new RemoteMongoDatabase(std::move(database)));\n+    }\n+    CATCH_STD()\n+    return reinterpret_cast<jlong>(nullptr);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoClient_nativeGetFinalizerMethodPtr(JNIEnv *, jclass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDIzNzg4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1MzoxNFrOGPI9Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1MzoxNFrOGPI9Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyODU5MA==", "bodyText": "rename to filter", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418528590", "createdAt": "2020-05-01T12:53:14Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"io_realm_internal_objectstore_OsRemoteMongoCollection.h\"\n+\n+#include \"java_class_global_def.hpp\"\n+#include \"java_network_transport.hpp\"\n+#include \"util.hpp\"\n+#include \"jni_util/java_method.hpp\"\n+#include \"jni_util/jni_utils.hpp\"\n+#include \"object-store/src/util/bson/bson.hpp\"\n+\n+#include <realm/util/optional.hpp>\n+#include <sync/app.hpp>\n+#include <sync/sync_user.hpp>\n+#include <sync/remote_mongo_database.hpp>\n+#include <sync/remote_mongo_collection.hpp>\n+\n+using namespace realm;\n+using namespace realm::app;\n+using namespace realm::jni_util;\n+using namespace realm::_impl;\n+\n+static std::function<jobject(JNIEnv*, uint64_t)> collection_mapper = [](JNIEnv* env, uint64_t result) {\n+    return JavaClassGlobalDef::new_long(env, result);\n+};\n+\n+static void finalize_collection(jlong ptr) {\n+    delete reinterpret_cast<RemoteMongoCollection*>(ptr);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoCollection_nativeCount(JNIEnv *env,\n+                                                                       jclass,\n+                                                                       jlong j_collection_ptr,\n+                                                                       jstring j_filter,\n+                                                                       jlong j_limit,\n+                                                                       jobject j_callback) {\n+    try {\n+        RemoteMongoCollection* collection = reinterpret_cast<RemoteMongoCollection*>(j_collection_ptr);\n+        JStringAccessor name(env, j_filter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDIzODUxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoDatabase.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1MzozNVrOGPI9sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1MzozNVrOGPI9sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyODY4OA==", "bodyText": "Same nitpick", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418528688", "createdAt": "2020-05-01T12:53:35Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoDatabase.cpp", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"io_realm_internal_objectstore_OsRemoteMongoDatabase.h\"\n+\n+#include \"java_class_global_def.hpp\"\n+#include \"java_network_transport.hpp\"\n+#include \"util.hpp\"\n+#include \"jni_util/java_method.hpp\"\n+#include \"jni_util/jni_utils.hpp\"\n+\n+#include <realm/util/optional.hpp>\n+#include <sync/app.hpp>\n+#include <sync/sync_user.hpp>\n+#include <sync/remote_mongo_database.hpp>\n+#include <sync/remote_mongo_collection.hpp>\n+\n+using namespace realm;\n+using namespace realm::app;\n+using namespace realm::jni_util;\n+using namespace realm::_impl;\n+\n+static void finalize_database(jlong ptr) {\n+    delete reinterpret_cast<RemoteMongoDatabase*>(ptr);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoDatabase_nativeGetCollection(JNIEnv* env,\n+                                                                             jclass,\n+                                                                             jlong j_database_ptr,\n+                                                                             jstring j_collection_name) {\n+    try {\n+        RemoteMongoDatabase* database = reinterpret_cast<RemoteMongoDatabase*>(j_database_ptr);\n+        JStringAccessor name(env, j_collection_name);\n+        RemoteMongoCollection collection = database->collection(name);\n+        return reinterpret_cast<jlong>(new RemoteMongoCollection(std::move(collection)));\n+    }\n+    CATCH_STD()\n+    return reinterpret_cast<jlong>(nullptr);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoDatabase_nativeGetFinalizerMethodPtr(JNIEnv*, jclass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI0MDY5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1NDozN1rOGPI-9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1NTowOVrOGPI_mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyOTAxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * TODO\n          \n          \n            \n             * FIXME", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418529015", "createdAt": "2020-05-01T12:54:37Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoClient.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.objectstore;\n+\n+import io.realm.RealmApp;\n+import io.realm.internal.NativeObject;\n+\n+/**\n+ * TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyOTE3OA==", "bodyText": "We don't require Javadoc on Os* classes, so only add it if you think it is valuable.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418529178", "createdAt": "2020-05-01T12:55:09Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoClient.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.objectstore;\n+\n+import io.realm.RealmApp;\n+import io.realm.internal.NativeObject;\n+\n+/**\n+ * TODO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyOTAxNQ=="}, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI0MjQyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1NToyN1rOGPI_6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1NToyN1rOGPI_6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyOTI1OA==", "bodyText": "Same", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418529258", "createdAt": "2020-05-01T12:55:27Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.objectstore;\n+\n+import io.realm.internal.NativeObject;\n+\n+/**\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI0NDE3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1NjoyMlrOGPJA_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1NjoyMlrOGPJA_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyOTUzNQ==", "bodyText": "Depending on the case, it is better to use throw UnsupportedOperationException() In that case, it becomes very clear it is missing.\nOtherwise replace with FIXME", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418529535", "createdAt": "2020-05-01T12:56:22Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.objectstore;\n+\n+import io.realm.internal.NativeObject;\n+\n+/**\n+ *\n+ */\n+public class OsRemoteMongoCollection implements NativeObject {\n+\n+    private static final long nativeFinalizerPtr = nativeGetFinalizerMethodPtr();\n+\n+    private final long nativePtr;\n+\n+    OsRemoteMongoCollection(long nativeCollectionPtr) {\n+        this.nativePtr = nativeCollectionPtr;\n+    }\n+\n+    @Override\n+    public long getNativePtr() {\n+        return nativePtr;\n+    }\n+\n+    @Override\n+    public long getNativeFinalizerPtr() {\n+        return nativeFinalizerPtr;\n+    }\n+\n+    public void count(String filter) {\n+        // TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI0NDQyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoDatabase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1NjozMVrOGPJBKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1NjozMVrOGPJBKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyOTU3OQ==", "bodyText": "Same", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418529579", "createdAt": "2020-05-01T12:56:31Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoDatabase.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.objectstore;\n+\n+import io.realm.internal.NativeObject;\n+\n+/**\n+ * TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI0NDk4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoDatabase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1Njo0M1rOGPJBeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1Njo0M1rOGPJBeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyOTY1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // TODO: what about this one?\n          \n          \n            \n                // FIXME: what about this one?", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418529657", "createdAt": "2020-05-01T12:56:43Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoDatabase.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.objectstore;\n+\n+import io.realm.internal.NativeObject;\n+\n+/**\n+ * TODO\n+ */\n+public class OsRemoteMongoDatabase implements NativeObject {\n+\n+    private static final long nativeFinalizerPtr = nativeGetFinalizerMethodPtr();\n+\n+    private final long nativePtr;\n+\n+    public OsRemoteMongoDatabase(long nativeDatabasePtr) {\n+        this.nativePtr = nativeDatabasePtr;\n+    }\n+\n+    public OsRemoteMongoCollection getCollection(String collectionName) {\n+        long nativeCollectionPtr = nativeGetCollection(nativePtr, collectionName);\n+        return new OsRemoteMongoCollection(nativeCollectionPtr);\n+    }\n+\n+    // TODO: what about this one?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI0NTQyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1Njo1N1rOGPJBwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1Njo1N1rOGPJBwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyOTcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418529728", "createdAt": "2020-05-01T12:56:57Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import org.bson.codecs.pojo.annotations.BsonCreator;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static java.util.Arrays.asList;\n+import static org.bson.assertions.Assertions.isTrueArgument;\n+import static org.bson.assertions.Assertions.notNull;\n+\n+/**\n+ * A MongoDB namespace, which includes a database name and collection name.\n+ */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI0ODU2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1ODoyN1rOGPJDqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1ODoyN1rOGPJDqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMDIxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The remote MongoClient used for working with data in MongoDB remotely via Stitch.\n          \n          \n            \n             * The remote MongoClient used for working with data in MongoDB remotely via Realm.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418530219", "createdAt": "2020-05-01T12:58:27Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import io.realm.RealmApp;\n+import io.realm.internal.Util;\n+import io.realm.internal.objectstore.OsRemoteMongoClient;\n+\n+/**\n+ * The remote MongoClient used for working with data in MongoDB remotely via Stitch.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI0OTM5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1ODo0MlrOGPJEGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoyODoyMFrOGPLMjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMDMyOA==", "bodyText": "Not sure this should be a public constructor?", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418530328", "createdAt": "2020-05-01T12:58:42Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import io.realm.RealmApp;\n+import io.realm.internal.Util;\n+import io.realm.internal.objectstore.OsRemoteMongoClient;\n+\n+/**\n+ * The remote MongoClient used for working with data in MongoDB remotely via Stitch.\n+ */\n+public class RemoteMongoClient {\n+\n+    private OsRemoteMongoClient osRemoteMongoClient;\n+\n+    public RemoteMongoClient(RealmApp realmApp, String serviceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMDUyMQ==", "bodyText": "If possible hide it, but since it is in a different package it might be impossible. In that case, Javadoc is required.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418530521", "createdAt": "2020-05-01T12:59:17Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import io.realm.RealmApp;\n+import io.realm.internal.Util;\n+import io.realm.internal.objectstore.OsRemoteMongoClient;\n+\n+/**\n+ * The remote MongoClient used for working with data in MongoDB remotely via Stitch.\n+ */\n+public class RemoteMongoClient {\n+\n+    private OsRemoteMongoClient osRemoteMongoClient;\n+\n+    public RemoteMongoClient(RealmApp realmApp, String serviceName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMDMyOA=="}, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMDc3Mg==", "bodyText": "Also, I suspect the real parameter is a RealmUser that way you know which user is making requests. RealmApp.currentUser() might change.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418530772", "createdAt": "2020-05-01T13:00:04Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import io.realm.RealmApp;\n+import io.realm.internal.Util;\n+import io.realm.internal.objectstore.OsRemoteMongoClient;\n+\n+/**\n+ * The remote MongoClient used for working with data in MongoDB remotely via Stitch.\n+ */\n+public class RemoteMongoClient {\n+\n+    private OsRemoteMongoClient osRemoteMongoClient;\n+\n+    public RemoteMongoClient(RealmApp realmApp, String serviceName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMDMyOA=="}, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NzY0Mw==", "bodyText": "I could create a public static builder and make the constructor private. It's not like it changes much, but it might make less tempting...?", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418557643", "createdAt": "2020-05-01T14:11:02Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import io.realm.RealmApp;\n+import io.realm.internal.Util;\n+import io.realm.internal.objectstore.OsRemoteMongoClient;\n+\n+/**\n+ * The remote MongoClient used for working with data in MongoDB remotely via Stitch.\n+ */\n+public class RemoteMongoClient {\n+\n+    private OsRemoteMongoClient osRemoteMongoClient;\n+\n+    public RemoteMongoClient(RealmApp realmApp, String serviceName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMDMyOA=="}, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2NTI2Mw==", "bodyText": "With only one constructor keeping it as is probably fine \ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418565263", "createdAt": "2020-05-01T14:28:20Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import io.realm.RealmApp;\n+import io.realm.internal.Util;\n+import io.realm.internal.objectstore.OsRemoteMongoClient;\n+\n+/**\n+ * The remote MongoClient used for working with data in MongoDB remotely via Stitch.\n+ */\n+public class RemoteMongoClient {\n+\n+    private OsRemoteMongoClient osRemoteMongoClient;\n+\n+    public RemoteMongoClient(RealmApp realmApp, String serviceName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMDMyOA=="}, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI1MzI1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoCollection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowMDo0M1rOGPJGig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowMDo0M1rOGPJGig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMDk1NA==", "bodyText": "Don't think this should be split across multiple lines?", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418530954", "createdAt": "2020-05-01T13:00:43Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoCollection.java", "diffHunk": "@@ -0,0 +1,651 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import com.google.android.gms.tasks.Task;\n+\n+import org.bson.BsonDocument;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import java.util.List;\n+\n+import io.realm.internal.objectstore.OsRemoteMongoCollection;\n+import io.realm.mongodb.remote.RemoteCountOptions;\n+import io.realm.mongodb.remote.RemoteFindOneAndModifyOptions;\n+import io.realm.mongodb.remote.RemoteUpdateOptions;\n+import io.realm.mongodb.remote.internal.RemoteDeleteResult;\n+import io.realm.mongodb.remote.RemoteFindOptions;\n+import io.realm.mongodb.remote.internal.RemoteInsertManyResult;\n+import io.realm.mongodb.remote.internal.RemoteInsertOneResult;\n+import io.realm.mongodb.remote.internal.RemoteUpdateResult;\n+import io.realm.mongodb.remote.internal.aggregate.RemoteAggregateIterable;\n+import io.realm.mongodb.remote.internal.find.RemoteFindIterable;\n+\n+/**\n+ * The RemoteMongoCollection interface provides read and write access to documents.\n+ * <p>\n+ * Use {@link RemoteMongoDatabase#getCollection} to get a collection instance.\n+ * </p><p>\n+ * Before any access is possible, there must be an active, logged-in user.\n+ * </p><p>\n+ * Create, read, update and delete (CRUD) functionality is available depending\n+ * on the privileges of the active logged-in user. You can set up\n+ * <a href=\"https://docs.mongodb.com/stitch/mongodb/define-roles-and-permissions/\" target=\".\">Roles</a>\n+ * in the Stitch console. Stitch checks any given request against the Roles for the\n+ * active user and determines whether the request is permitted for each requested\n+ * document.\n+ * </p>\n+ *\n+ * @param <DocumentT> The type that this collection will encode documents from and decode documents\n+ *                    to.\n+ * @see RemoteMongoDatabase\n+ * @see <a href=\"https://docs.mongodb.com/stitch/mongodb/\" target=\".\">\n+ * MongoDB Atlas Overview with Stitch</a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI1NDUwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowMToxOVrOGPJHTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowMToxOVrOGPJHTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMTE1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // TODO: what about these?\n          \n          \n            \n                // FIXME: what about these?", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418531150", "createdAt": "2020-05-01T13:01:19Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoCollection.java", "diffHunk": "@@ -0,0 +1,651 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import com.google.android.gms.tasks.Task;\n+\n+import org.bson.BsonDocument;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import java.util.List;\n+\n+import io.realm.internal.objectstore.OsRemoteMongoCollection;\n+import io.realm.mongodb.remote.RemoteCountOptions;\n+import io.realm.mongodb.remote.RemoteFindOneAndModifyOptions;\n+import io.realm.mongodb.remote.RemoteUpdateOptions;\n+import io.realm.mongodb.remote.internal.RemoteDeleteResult;\n+import io.realm.mongodb.remote.RemoteFindOptions;\n+import io.realm.mongodb.remote.internal.RemoteInsertManyResult;\n+import io.realm.mongodb.remote.internal.RemoteInsertOneResult;\n+import io.realm.mongodb.remote.internal.RemoteUpdateResult;\n+import io.realm.mongodb.remote.internal.aggregate.RemoteAggregateIterable;\n+import io.realm.mongodb.remote.internal.find.RemoteFindIterable;\n+\n+/**\n+ * The RemoteMongoCollection interface provides read and write access to documents.\n+ * <p>\n+ * Use {@link RemoteMongoDatabase#getCollection} to get a collection instance.\n+ * </p><p>\n+ * Before any access is possible, there must be an active, logged-in user.\n+ * </p><p>\n+ * Create, read, update and delete (CRUD) functionality is available depending\n+ * on the privileges of the active logged-in user. You can set up\n+ * <a href=\"https://docs.mongodb.com/stitch/mongodb/define-roles-and-permissions/\" target=\".\">Roles</a>\n+ * in the Stitch console. Stitch checks any given request against the Roles for the\n+ * active user and determines whether the request is permitted for each requested\n+ * document.\n+ * </p>\n+ *\n+ * @param <DocumentT> The type that this collection will encode documents from and decode documents\n+ *                    to.\n+ * @see RemoteMongoDatabase\n+ * @see <a href=\"https://docs.mongodb.com/stitch/mongodb/\" target=\".\">\n+ * MongoDB Atlas Overview with Stitch</a>\n+ */\n+public class RemoteMongoCollection<DocumentT> {\n+\n+    private OsRemoteMongoCollection osRemoteMongoCollection;\n+\n+    public RemoteMongoCollection(OsRemoteMongoCollection osRemoteMongoCollection) {\n+        this.osRemoteMongoCollection = osRemoteMongoCollection;\n+    }\n+\n+    /**\n+     * Gets the namespace of this collection, i.e. the database and collection names together.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace() {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     * <p>\n+     * If you used the simple {@link RemoteMongoDatabase#getCollection(String)} to get\n+     * this collection,\n+     * this is {@link org.bson.Document}.\n+     * </p>\n+     *\n+     * @return the class\n+     */\n+    Class<DocumentT> getDocumentClass() {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Get the codec registry for the RemoteMongoCollection.\n+     *\n+     * @return the {@link CodecRegistry}\n+     */\n+    CodecRegistry getCodecRegistry() {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Create a new RemoteMongoCollection instance with a different default class to cast any\n+     * documents returned from the database into.\n+     *\n+     * @param clazz          the default class to cast any documents returned from the database into.\n+     * @param <NewDocumentT> The type that the new collection will encode documents from and decode\n+     *                       documents to.\n+     * @return a new RemoteMongoCollection instance with the different default class\n+     */\n+    <NewDocumentT> RemoteMongoCollection<NewDocumentT> withDocumentClass(\n+            final Class<NewDocumentT> clazz) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Create a new RemoteMongoCollection instance with a different codec registry.\n+     *\n+     * @param codecRegistry the new {@link CodecRegistry} for the\n+     *                      collection.\n+     * @return a new RemoteMongoCollection instance with the different codec registry\n+     */\n+    RemoteMongoCollection<DocumentT> withCodecRegistry(final CodecRegistry codecRegistry) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return a task containing the number of documents in the collection\n+     */\n+    Task<Long> count() {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @return a task containing the number of documents in the collection\n+     */\n+    Task<Long> count(final Bson filter) {\n+        BsonDocument bsonDocument = filter.toBsonDocument(null, null);\n+        osRemoteMongoCollection.count(bsonDocument.toJson());\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter  the query filter\n+     * @param options the options describing the count\n+     * @return a task containing the number of documents in the collection\n+     */\n+    Task<Long> count(final Bson filter, final RemoteCountOptions options) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection.\n+     *\n+     * @return a task containing the result of the find one operation\n+     */\n+    Task<DocumentT> findOne() {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection.\n+     *\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type\n+     * @return a task containing the result of the find one operation\n+     */\n+    <ResultT> Task<ResultT> findOne(final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection.\n+     *\n+     * @param filter the query filter\n+     * @return a task containing the result of the find one operation\n+     */\n+    Task<DocumentT> findOne(final Bson filter) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection.\n+     *\n+     * @param filter      the query filter\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return a task containing the result of the find one operation\n+     */\n+    <ResultT> Task<ResultT> findOne(final Bson filter, final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection.\n+     *\n+     * @param filter  the query filter\n+     * @param options A RemoteFindOptions struct\n+     * @return a task containing the result of the find one operation\n+     */\n+    Task<DocumentT> findOne(final Bson filter, final RemoteFindOptions options) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection.\n+     *\n+     * @param filter      the query filter\n+     * @param options     A RemoteFindOptions struct\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return a task containing the result of the find one operation\n+     */\n+    <ResultT> Task<ResultT> findOne(\n+            final Bson filter,\n+            final RemoteFindOptions options,\n+            final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @return the find iterable interface\n+     */\n+    RemoteFindIterable<DocumentT> find() {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return the find iterable interface\n+     */\n+    <ResultT> RemoteFindIterable<ResultT> find(final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds all documents in the collection that match the given filter.\n+     *\n+     * @param filter the query filter\n+     * @return the find iterable interface\n+     */\n+    RemoteFindIterable<DocumentT> find(final Bson filter) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds all documents in the collection that match the given filter.\n+     *\n+     * @param filter      the query filter\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return the find iterable interface\n+     */\n+    <ResultT> RemoteFindIterable<ResultT> find(final Bson filter, final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregation pipeline\n+     * @return an iterable containing the result of the aggregation operation\n+     */\n+    RemoteAggregateIterable<DocumentT> aggregate(final List<? extends Bson> pipeline) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline    the aggregation pipeline\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return an iterable containing the result of the aggregation operation\n+     */\n+    <ResultT> RemoteAggregateIterable<ResultT> aggregate(\n+            final List<? extends Bson> pipeline,\n+            final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Inserts the provided document. If the document is missing an identifier, the client should\n+     * generate one.\n+     *\n+     * @param document the document to insert\n+     * @return a task containing the result of the insert one operation\n+     */\n+    Task<RemoteInsertOneResult> insertOne(final DocumentT document) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Inserts one or more documents.\n+     *\n+     * @param documents the documents to insert\n+     * @return a task containing the result of the insert many operation\n+     */\n+    Task<RemoteInsertManyResult> insertMany(final List<? extends DocumentT> documents) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Removes at most one document from the collection that matches the given filter.  If no\n+     * documents match, the collection is not\n+     * modified.\n+     *\n+     * @param filter the query filter to apply the the delete operation\n+     * @return a task containing the result of the remove one operation\n+     */\n+    Task<RemoteDeleteResult> deleteOne(final Bson filter) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Removes all documents from the collection that match the given query filter.  If no documents\n+     * match, the collection is not modified.\n+     *\n+     * @param filter the query filter to apply the the delete operation\n+     * @return a task containing the result of the remove many operation\n+     */\n+    Task<RemoteDeleteResult> deleteMany(final Bson filter) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Update a single document in the collection according to the specified arguments.\n+     *\n+     * @param filter a document describing the query filter, which may not be null.\n+     * @param update a document describing the update, which may not be null. The update to\n+     *               apply must include only update operators.\n+     * @return a task containing the result of the update one operation\n+     */\n+    Task<RemoteUpdateResult> updateOne(final Bson filter, final Bson update) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Update a single document in the collection according to the specified arguments.\n+     *\n+     * @param filter        a document describing the query filter, which may not be null.\n+     * @param update        a document describing the update, which may not be null. The update to\n+     *                      apply must include only update operators.\n+     * @param updateOptions the options to apply to the update operation\n+     * @return a task containing the result of the update one operation\n+     */\n+    Task<RemoteUpdateResult> updateOne(\n+            final Bson filter,\n+            final Bson update,\n+            final RemoteUpdateOptions updateOptions) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Update all documents in the collection according to the specified arguments.\n+     *\n+     * @param filter a document describing the query filter, which may not be null.\n+     * @param update a document describing the update, which may not be null. The update to\n+     *               apply must include only update operators.\n+     * @return a task containing the result of the update many operation\n+     */\n+    Task<RemoteUpdateResult> updateMany(final Bson filter, final Bson update) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Update all documents in the collection according to the specified arguments.\n+     *\n+     * @param filter        a document describing the query filter, which may not be null.\n+     * @param update        a document describing the update, which may not be null. The update to\n+     *                      apply must include only update operators.\n+     * @param updateOptions the options to apply to the update operation\n+     * @return a task containing the result of the update many operation\n+     */\n+    Task<RemoteUpdateResult> updateMany(\n+            final Bson filter,\n+            final Bson update,\n+            final RemoteUpdateOptions updateOptions) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and performs the given update.\n+     *\n+     * @param filter the query filter\n+     * @param update the update document\n+     * @return a task containing the resulting document\n+     */\n+    Task<DocumentT> findOneAndUpdate(final Bson filter, final Bson update) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and performs the given update.\n+     *\n+     * @param filter      the query filter\n+     * @param update      the update document\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return a task containing the resulting document\n+     */\n+    <ResultT> Task<ResultT> findOneAndUpdate(final Bson filter,\n+                                             final Bson update,\n+                                             final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and performs the given update.\n+     *\n+     * @param filter  the query filter\n+     * @param update  the update document\n+     * @param options A RemoteFindOneAndModifyOptions struct\n+     * @return a task containing the resulting document\n+     */\n+    Task<DocumentT> findOneAndUpdate(final Bson filter,\n+                                     final Bson update,\n+                                     final RemoteFindOneAndModifyOptions options) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and performs the given update.\n+     *\n+     * @param filter      the query filter\n+     * @param update      the update document\n+     * @param options     A RemoteFindOneAndModifyOptions struct\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return a task containing the resulting document\n+     */\n+    <ResultT> Task<ResultT> findOneAndUpdate(\n+            final Bson filter,\n+            final Bson update,\n+            final RemoteFindOneAndModifyOptions options,\n+            final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and replaces it with the given document.\n+     *\n+     * @param filter      the query filter\n+     * @param replacement the document to replace the matched document with\n+     * @return a task containing the resulting document\n+     */\n+    Task<DocumentT> findOneAndReplace(final Bson filter, final Bson replacement) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and replaces it with the given document.\n+     *\n+     * @param filter      the query filter\n+     * @param replacement the document to replace the matched document with\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return a task containing the resulting document\n+     */\n+    <ResultT> Task<ResultT> findOneAndReplace(final Bson filter,\n+                                              final Bson replacement,\n+                                              final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and replaces it with the given document.\n+     *\n+     * @param filter      the query filter\n+     * @param replacement the document to replace the matched document with\n+     * @param options     A RemoteFindOneAndModifyOptions struct\n+     * @return a task containing the resulting document\n+     */\n+    Task<DocumentT> findOneAndReplace(final Bson filter,\n+                                      final Bson replacement,\n+                                      final RemoteFindOneAndModifyOptions options) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and replaces it with the given document.\n+     *\n+     * @param filter      the query filter\n+     * @param replacement the document to replace the matched document with\n+     * @param options     A RemoteFindOneAndModifyOptions struct\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return a task containing the resulting document\n+     */\n+    <ResultT> Task<ResultT> findOneAndReplace(\n+            final Bson filter,\n+            final Bson replacement,\n+            final RemoteFindOneAndModifyOptions options,\n+            final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and delete it.\n+     *\n+     * @param filter the query filter\n+     * @return a task containing the resulting document\n+     */\n+    Task<DocumentT> findOneAndDelete(final Bson filter) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and delete it.\n+     *\n+     * @param filter      the query filter\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return a task containing the resulting document\n+     */\n+    <ResultT> Task<ResultT> findOneAndDelete(final Bson filter,\n+                                             final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and delete it.\n+     *\n+     * @param filter  the query filter\n+     * @param options A RemoteFindOneAndModifyOptions struct\n+     * @return a task containing the resulting document\n+     */\n+    Task<DocumentT> findOneAndDelete(final Bson filter,\n+                                     final RemoteFindOneAndModifyOptions options) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    /**\n+     * Finds a document in the collection and delete it.\n+     *\n+     * @param filter      the query filter\n+     * @param options     A RemoteFindOneAndModifyOptions struct\n+     * @param resultClass the class to decode each document into\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return a task containing the resulting document\n+     */\n+    <ResultT> Task<ResultT> findOneAndDelete(\n+            final Bson filter,\n+            final RemoteFindOneAndModifyOptions options,\n+            final Class<ResultT> resultClass) {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    // TODO: what about these?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 560}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI1NjAyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoDatabase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowMTo1OVrOGPJILw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowMTo1OVrOGPJILw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMTM3NQ==", "bodyText": "Meaningless description. Describe the purpose of the class and value to end-user.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418531375", "createdAt": "2020-05-01T13:01:59Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoDatabase.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import org.bson.Document;\n+\n+import io.realm.internal.Util;\n+import io.realm.internal.objectstore.OsRemoteMongoDatabase;\n+\n+/**\n+ * The RemoteMongoDatabase interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI1NzA2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoDatabase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowMjozMFrOGPJI2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowMjozMFrOGPJI2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMTU0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // TODO: what about this one?\n          \n          \n            \n                // FIXME: what about this one?", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418531544", "createdAt": "2020-05-01T13:02:30Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoDatabase.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import org.bson.Document;\n+\n+import io.realm.internal.Util;\n+import io.realm.internal.objectstore.OsRemoteMongoDatabase;\n+\n+/**\n+ * The RemoteMongoDatabase interface.\n+ */\n+public class RemoteMongoDatabase {\n+\n+    private String databaseName;\n+    private OsRemoteMongoDatabase osRemoteMongoDatabase;\n+\n+    RemoteMongoDatabase(OsRemoteMongoDatabase osRemoteMongoDatabase, String databaseName) {\n+        // we deliver the database name because we don't want to modify the C++ code right now,\n+        // although ideally it should be done there, i.e. remote_mongo_database.hpp should\n+        // include the public (Java) API's methods that aren't there yet.\n+        this.databaseName = databaseName;\n+        this.osRemoteMongoDatabase = osRemoteMongoDatabase;\n+    }\n+\n+    /**\n+     * Gets the name of the database.\n+     *\n+     * @return the database name\n+     */\n+    String getName() {\n+        return databaseName;\n+    }\n+\n+    /**\n+     * Gets a collection.\n+     *\n+     * @param collectionName the name of the collection to return\n+     * @return the collection\n+     */\n+    RemoteMongoCollection<Document> getCollection(final String collectionName) {\n+        Util.checkEmpty(collectionName, \"collectionName\");\n+        return new RemoteMongoCollection<>(osRemoteMongoDatabase.getCollection(collectionName));\n+    }\n+\n+    // TODO: what about this one?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI1Nzc5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/remote/RemoteCountOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowMjo1NlrOGPJJXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowMjo1NlrOGPJJXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMTY3Ng==", "bodyText": "This is probably a copy, so just leave it, but this tells you nothing the class name doesn't.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418531676", "createdAt": "2020-05-01T13:02:56Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/remote/RemoteCountOptions.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.remote;\n+\n+/**\n+ * The options for a count operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI2MTcwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/remote/internal/RemoteInsertOneResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowNDo0MlrOGPJLkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzowNDo0MlrOGPJLkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzMjI0MQ==", "bodyText": "These and others are referenced in the public API e.g. RemoteMongoDBCollection so they should not be in internal packages.", "url": "https://github.com/realm/realm-java/pull/6804#discussion_r418532241", "createdAt": "2020-05-01T13:04:42Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/remote/internal/RemoteInsertOneResult.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.remote.internal;\n+\n+import org.bson.BsonValue;\n+\n+/**\n+ * The result of an insert one operation.\n+ */\n+public class RemoteInsertOneResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 656, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}