{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MDkxNDcz", "number": 6959, "title": "Fix ProgressListenerTests", "bodyText": "Updated tests according to current sync state:\n\nCannot reproduce issue with downloadable-numbers never reaching total #6921\nThere are still sporadic failing tests due to stalling uploads. Created #6967 to track it", "createdAt": "2020-06-19T13:06:35Z", "url": "https://github.com/realm/realm-java/pull/6959", "merged": true, "mergeCommit": {"oid": "c18a86a7a42ece0eab877db91ae5d665d97b64af"}, "closed": true, "closedAt": "2020-06-29T12:14:56Z", "author": {"login": "rorbech"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsx1cCAH2gAyNDM3MDkxNDczOmE3ZmQxOGI0MGE0YzUzYzY3ZDVmNThiYjdjZDUwODM5YTg2OWYxMGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcv_SfGAH2gAyNDM3MDkxNDczOjZlMDRlMmMzOTVmYTFlNDQxZWFhOTIyZTg0OGNiNmZmM2M5MDQ1NzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a7fd18b40a4c53c67d5f58bb7cd50839a869f10d", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/a7fd18b40a4c53c67d5f58bb7cd50839a869f10d", "committedDate": "2020-06-19T12:02:28Z", "message": "Remove already migrated ProgressListenerTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99627bce099144d1e1f1d9d80e02ee712e3855a7", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/99627bce099144d1e1f1d9d80e02ee712e3855a7", "committedDate": "2020-06-19T13:00:06Z", "message": "Fix ProgressListenerTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfb4725e0223a1a7be84b7b60d06881f45907f5c", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/cfb4725e0223a1a7be84b7b60d06881f45907f5c", "committedDate": "2020-06-22T13:34:20Z", "message": "Add timeout to progress listener tests to get indicators of what blocks CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b317f5fe67584b3e7ee4c83ecedd68e45eeb1554", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/b317f5fe67584b3e7ee4c83ecedd68e45eeb1554", "committedDate": "2020-06-23T07:59:59Z", "message": "Minor adjustments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "937dd68d943be954c32a6a2141badc7c1151ee59", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/937dd68d943be954c32a6a2141badc7c1151ee59", "committedDate": "2020-06-23T10:34:05Z", "message": "Minor adjustments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "119875d2a77014e71386253dd0cbd5b40a2ea00b", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/119875d2a77014e71386253dd0cbd5b40a2ea00b", "committedDate": "2020-06-23T10:49:58Z", "message": "Minor adjustments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "301b44294b89ee1a518e6da146c6fd75c917f136", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/301b44294b89ee1a518e6da146c6fd75c917f136", "committedDate": "2020-06-23T13:48:22Z", "message": "Merge branch 'v10' into cr/sync-integration-test-progresslisteners"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fc19be50af75d0fd99a7107939f6c89ef11f167", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/2fc19be50af75d0fd99a7107939f6c89ef11f167", "committedDate": "2020-06-23T14:35:49Z", "message": "Minor adjustments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3225a5479efd4bcd98cae196d09759e6e267e5c", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/d3225a5479efd4bcd98cae196d09759e6e267e5c", "committedDate": "2020-06-23T14:47:41Z", "message": "Minor adjustment for CI test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6816ae7837d3b99664ba79949c0519810e53627", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/c6816ae7837d3b99664ba79949c0519810e53627", "committedDate": "2020-06-24T08:27:21Z", "message": "Log user exceptions in progress listeners"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/3d3bdab6b9433893cfac6127186a7f63130ebe0f", "committedDate": "2020-06-24T09:58:44Z", "message": "Ignoring test until upload is not stalling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NTU1NzY0", "url": "https://github.com/realm/realm-java/pull/6959#pullrequestreview-436555764", "createdAt": "2020-06-24T11:24:26Z", "commit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToyNDoyN1rOGoN-ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTo1Mzo0MFrOGoO2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNTI4Mw==", "bodyText": "Looks like a mistake in the old test. This isn't used for anything.", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444825283", "createdAt": "2020-06-24T11:24:27Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -59,44 +60,39 @@ class ProgressListenerTests {\n \n     @After\n     fun tearDown() {\n-        if (this::realm.isInitialized) {\n-            realm.close()\n-        }\n         if (this::app.isInitialized) {\n             app.close()\n         }\n         RealmLog.setLevel(LogLevel.WARN)\n     }\n \n-    @Ignore(\"See https://mongodb.slack.com/archives/CQLDYRJ3V/p1587563930459100\")\n     @Test\n     fun downloadProgressListener_changesOnly() {\n         val allChangesDownloaded = CountDownLatch(1)\n-        val user1: User = app.login(Credentials.anonymous())\n+        val user1: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n         val user1Config = createSyncConfig(user1)\n-        createRemoteData(user1Config)\n-        val user2: User = app.login(Credentials.anonymous())\n+        val user2: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n         val user2Config = createSyncConfig(user2)\n-        val realm = Realm.getInstance(user2Config)\n-        val session: SyncSession = realm.syncSession\n-        session.addDownloadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            RealmLog.error(progress.toString())\n-            if (progress.isTransferComplete) {\n-                assertTransferComplete(progress, true)\n-                assertEquals(TEST_SIZE, getStoreTestDataSize(user2Config))\n-                allChangesDownloaded.countDown()\n+        Realm.getInstance(user2Config).use { realm ->\n+            createRemoteData(user1Config)\n+            realm.syncSession.addDownloadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                RealmLog.error(progress.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNjQzNQ==", "bodyText": "Also looks like a mistake", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444826435", "createdAt": "2020-06-24T11:27:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -147,155 +144,155 @@ class ProgressListenerTests {\n         val transferCompleted = AtomicInteger(0)\n         val testDone = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm) // Write first batch of sample data\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                when (transferCompleted.incrementAndGet()) {\n-                    1 -> {\n-                        val realm = Realm.getInstance(config)\n-                        writeSampleData(realm)\n-                        realm.close()\n-                        throw RuntimeException(\"Crashing the changelistener\")\n-                    }\n-                    2 -> {\n-                        assertTransferComplete(progress, true)\n-                        testDone.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    when (transferCompleted.incrementAndGet()) {\n+                        1 -> {\n+                            Realm.getInstance(config).use { realm ->\n+                            writeSampleData(realm)\n+                            }\n+                            throw RuntimeException(\"Crashing the changelistener\")\n+                        }\n+                        2 -> {\n+                            assertTransferComplete(progress, true)\n+                            testDone.countDown()\n+                        }\n+                        else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                     }\n-                    else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                 }\n             }\n+            writeSampleData(realm) // Write first batch of sample data\n+            TestHelper.awaitOrFail(testDone)\n         }\n-        TestHelper.awaitOrFail(testDone)\n-        realm.close()\n     }\n \n     @Test\n     fun uploadProgressListener_changesOnly() {\n         val allChangeUploaded = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        assertEquals(SyncSession.State.ACTIVE, session.state)\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            RealmLog.error(progress.toString());\n-            if (progress.isTransferComplete) {\n-                assertTransferComplete(progress, true)\n-                allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            assertEquals(SyncSession.State.ACTIVE, session.state)\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                RealmLog.error(progress.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNjY4Nw==", "bodyText": "Same", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444826687", "createdAt": "2020-06-24T11:27:35Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -147,155 +144,155 @@ class ProgressListenerTests {\n         val transferCompleted = AtomicInteger(0)\n         val testDone = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm) // Write first batch of sample data\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                when (transferCompleted.incrementAndGet()) {\n-                    1 -> {\n-                        val realm = Realm.getInstance(config)\n-                        writeSampleData(realm)\n-                        realm.close()\n-                        throw RuntimeException(\"Crashing the changelistener\")\n-                    }\n-                    2 -> {\n-                        assertTransferComplete(progress, true)\n-                        testDone.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    when (transferCompleted.incrementAndGet()) {\n+                        1 -> {\n+                            Realm.getInstance(config).use { realm ->\n+                            writeSampleData(realm)\n+                            }\n+                            throw RuntimeException(\"Crashing the changelistener\")\n+                        }\n+                        2 -> {\n+                            assertTransferComplete(progress, true)\n+                            testDone.countDown()\n+                        }\n+                        else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                     }\n-                    else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                 }\n             }\n+            writeSampleData(realm) // Write first batch of sample data\n+            TestHelper.awaitOrFail(testDone)\n         }\n-        TestHelper.awaitOrFail(testDone)\n-        realm.close()\n     }\n \n     @Test\n     fun uploadProgressListener_changesOnly() {\n         val allChangeUploaded = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        assertEquals(SyncSession.State.ACTIVE, session.state)\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            RealmLog.error(progress.toString());\n-            if (progress.isTransferComplete) {\n-                assertTransferComplete(progress, true)\n-                allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            assertEquals(SyncSession.State.ACTIVE, session.state)\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                RealmLog.error(progress.toString());\n+                if (progress.isTransferComplete) {\n+                    assertTransferComplete(progress, true)\n+                    allChangeUploaded.countDown()\n+                }\n             }\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun uploadProgressListener_indefinitely() {\n         val transferCompleted = AtomicInteger(0)\n         val testDone = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm) // Write first batch of sample data\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                when (transferCompleted.incrementAndGet()) {\n-                    1 -> {\n-                        val realm = Realm.getInstance(config)\n-                        writeSampleData(realm)\n-                        realm.close()\n-                    }\n-                    2 -> {\n-                        assertTransferComplete(progress, true)\n-                        testDone.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    when (transferCompleted.incrementAndGet()) {\n+                        1 -> {\n+                            Realm.getInstance(config).use { realm ->\n+                                writeSampleData(realm)\n+                            }\n+                        }\n+                        2 -> {\n+                            assertTransferComplete(progress, true)\n+                            testDone.countDown()\n+                        }\n+                        else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                     }\n-                    else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                 }\n             }\n+            writeSampleData(realm) // Write first batch of sample data\n+            TestHelper.awaitOrFail(testDone)\n         }\n-        TestHelper.awaitOrFail(testDone)\n-        realm.close()\n     }\n \n     @Test\n     fun addListenerInsideCallback() {\n         val allChangeUploaded = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            if (progress.isTransferComplete) {\n-                val realm = Realm.getInstance(config)\n-                writeSampleData(realm)\n-                realm.close()\n-                session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-                    if (progress.isTransferComplete) {\n-                        allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                if (progress.isTransferComplete) {\n+                    Realm.getInstance(config).use { realm ->\n+                        writeSampleData(realm)\n+                    }\n+                    session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                        if (progress.isTransferComplete) {\n+                            allChangeUploaded.countDown()\n+                        }\n                     }\n                 }\n             }\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun addListenerInsideCallback_mixProgressModes() {\n         val allChangeUploaded = CountDownLatch(3)\n         val progressCompletedReported = AtomicBoolean(false)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                allChangeUploaded.countDown()\n-                if (progressCompletedReported.compareAndSet(false, true)) {\n-                    val realm = Realm.getInstance(config)\n-                    writeSampleData(realm)\n-                    realm.close()\n-                    session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-                        if (progress.isTransferComplete) {\n-                            allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    allChangeUploaded.countDown()\n+                    if (progressCompletedReported.compareAndSet(false, true)) {\n+                        Realm.getInstance(config).use { realm ->\n+                            writeSampleData(realm)\n+                        }\n+                        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                            if (progress.isTransferComplete) {\n+                                allChangeUploaded.countDown()\n+                            }\n                         }\n                     }\n                 }\n             }\n+            writeSampleData(realm)\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun addProgressListener_triggerImmediatelyWhenRegistered() {\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        val session: SyncSession = realm.syncSession\n-        checkListener(session, ProgressMode.INDEFINITELY)\n-        checkListener(session, ProgressMode.CURRENT_CHANGES)\n-        realm.close()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            checkListener(session, ProgressMode.INDEFINITELY)\n+            checkListener(session, ProgressMode.CURRENT_CHANGES)\n+        }\n     }\n \n     @Test\n     fun uploadListener_keepIncreasingInSize() {\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        val session: SyncSession = realm.syncSession\n-        for (i in 0..9) {\n-            val changesUploaded = CountDownLatch(1)\n-            writeSampleData(realm)\n-            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-                RealmLog.info(\"Test %s -> %s\", Integer.toString(i), progress.toString())\n-                if (progress.isTransferComplete) {\n-                    assertTransferComplete(progress, true)\n-                    changesUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            for (i in 0..9) {\n+                val changesUploaded = CountDownLatch(1)\n+                writeSampleData(realm)\n+                session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                    RealmLog.info(\"Test %s -> %s\", Integer.toString(i), progress.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 395}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNzA0NA==", "bodyText": "Hmm, is refreshing here really neeeded?", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444827044", "createdAt": "2020-06-24T11:28:19Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -325,30 +322,30 @@ class ProgressListenerTests {\n \n     // Create remote data for a given user.\n     private fun createRemoteData(config: SyncConfiguration) {\n-        val realm = Realm.getInstance(config)\n-        val changesUploaded = CountDownLatch(1)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES, object : ProgressListener {\n-            override fun onChange(progress: Progress) {\n-                if (progress.isTransferComplete) {\n-                    session.removeProgressListener(this)\n-                    changesUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val changesUploaded = CountDownLatch(1)\n+            val session: SyncSession = realm.syncSession\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES, object : ProgressListener {\n+                override fun onChange(progress: Progress) {\n+                    if (progress.isTransferComplete) {\n+                        session.removeProgressListener(this)\n+                        changesUploaded.countDown()\n+                    }\n                 }\n-            }\n-        })\n-        TestHelper.awaitOrFail(changesUploaded)\n-        realm.close()\n+            })\n+            TestHelper.awaitOrFail(changesUploaded)\n+        }\n     }\n \n     private fun getStoreTestDataSize(config: RealmConfiguration): Long {\n-        val realm: Realm = Realm.getInstance(config)\n-        val objectCounts: Long = realm.where<SyncDog>().count()\n-        realm.close()\n-        return objectCounts\n+        Realm.getInstance(config).use { realm ->\n+            realm.refresh()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 468}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzOTQ3Mw==", "bodyText": "This seems like a behavioral change, where we now swallow the exception?\nNote, it is probably not a bad idea since callbacks generally shouldn't be allowed to crash here, but as a minimum, we would need a test for it + an update to the breaking section of the changelog", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r444839473", "createdAt": "2020-06-24T11:53:40Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncSession.java", "diffHunk": "@@ -259,13 +259,21 @@ public boolean isConnected() {\n         return (sessionState == State.ACTIVE || sessionState == State.DYING) && connectionState == ConnectionState.CONNECTED;\n     }\n \n+    /**\n+     * All progress listener events from native Sync are reported to this method.\n+     */\n+    @SuppressWarnings(\"unused\")\n     synchronized void notifyProgressListener(long listenerId, long transferredBytes, long transferableBytes) {\n         Pair<ProgressListener, Progress> listener = listenerIdToProgressListenerMap.get(listenerId);\n         if (listener != null) {\n             Progress newProgressNotification = new Progress(transferredBytes, transferableBytes);\n             if (!newProgressNotification.equals(listener.second)) {\n                 listener.second = newProgressNotification;\n-                listener.first.onChange(newProgressNotification);\n+                try {\n+                    listener.first.onChange(newProgressNotification);\n+                } catch (Exception exception) {\n+                    RealmLog.error(exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3bdab6b9433893cfac6127186a7f63130ebe0f"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c95793af14e7d3755633a14ff972d7eb52483188", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/c95793af14e7d3755633a14ff972d7eb52483188", "committedDate": "2020-06-29T08:06:49Z", "message": "Updates according to code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd45e7b1891123848ea8d696ef271ddeacde7ba6", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/fd45e7b1891123848ea8d696ef271ddeacde7ba6", "committedDate": "2020-06-29T08:11:43Z", "message": "Add test for initial progress listener callback on waitForInitialRemoteData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8554e49f66c63640502fc1c1cea1680aeef0c8df", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/8554e49f66c63640502fc1c1cea1680aeef0c8df", "committedDate": "2020-06-29T08:12:11Z", "message": "Update test server image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4f2cc642f2835058cad5a34e09e714f7601fc50", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/b4f2cc642f2835058cad5a34e09e714f7601fc50", "committedDate": "2020-06-29T09:49:03Z", "message": "Ignore failing test but track issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MDI4NTg5", "url": "https://github.com/realm/realm-java/pull/6959#pullrequestreview-439028589", "createdAt": "2020-06-29T11:05:30Z", "commit": {"oid": "b4f2cc642f2835058cad5a34e09e714f7601fc50"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTowNTozMFrOGqLzhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTowNTozMFrOGqLzhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4Njc4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Ignore(\"Tracked by https://github.com/realm/realm-java/issues/6976\")\n          \n          \n            \n                @Ignore(\"FIXME: Tracked by https://github.com/realm/realm-java/issues/6976\")\n          \n      \n    \n    \n  \n\nMakes it easier to find again when searching the codebase", "url": "https://github.com/realm/realm-java/pull/6959#discussion_r446886789", "createdAt": "2020-06-29T11:05:30Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/ProgressListenerTests.kt", "diffHunk": "@@ -147,171 +141,198 @@ class ProgressListenerTests {\n         val transferCompleted = AtomicInteger(0)\n         val testDone = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm) // Write first batch of sample data\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                when (transferCompleted.incrementAndGet()) {\n-                    1 -> {\n-                        val realm = Realm.getInstance(config)\n-                        writeSampleData(realm)\n-                        realm.close()\n-                        throw RuntimeException(\"Crashing the changelistener\")\n-                    }\n-                    2 -> {\n-                        assertTransferComplete(progress, true)\n-                        testDone.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    when (transferCompleted.incrementAndGet()) {\n+                        1 -> {\n+                            Realm.getInstance(config).use { realm ->\n+                            writeSampleData(realm)\n+                            }\n+                            throw RuntimeException(\"Crashing the changelistener\")\n+                        }\n+                        2 -> {\n+                            assertTransferComplete(progress, true)\n+                            testDone.countDown()\n+                        }\n+                        else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                     }\n-                    else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                 }\n             }\n+            writeSampleData(realm) // Write first batch of sample data\n+            TestHelper.awaitOrFail(testDone)\n         }\n-        TestHelper.awaitOrFail(testDone)\n-        realm.close()\n     }\n \n     @Test\n     fun uploadProgressListener_changesOnly() {\n         val allChangeUploaded = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        assertEquals(SyncSession.State.ACTIVE, session.state)\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            RealmLog.error(progress.toString());\n-            if (progress.isTransferComplete) {\n-                assertTransferComplete(progress, true)\n-                allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            assertEquals(SyncSession.State.ACTIVE, session.state)\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                if (progress.isTransferComplete) {\n+                    assertTransferComplete(progress, true)\n+                    allChangeUploaded.countDown()\n+                }\n             }\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun uploadProgressListener_indefinitely() {\n         val transferCompleted = AtomicInteger(0)\n         val testDone = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm) // Write first batch of sample data\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                when (transferCompleted.incrementAndGet()) {\n-                    1 -> {\n-                        val realm = Realm.getInstance(config)\n-                        writeSampleData(realm)\n-                        realm.close()\n-                    }\n-                    2 -> {\n-                        assertTransferComplete(progress, true)\n-                        testDone.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    when (transferCompleted.incrementAndGet()) {\n+                        1 -> {\n+                            Realm.getInstance(config).use { realm ->\n+                                writeSampleData(realm)\n+                            }\n+                        }\n+                        2 -> {\n+                            assertTransferComplete(progress, true)\n+                            testDone.countDown()\n+                        }\n+                        else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                     }\n-                    else -> fail(\"Unsupported number of transfers completed: \" + transferCompleted.get())\n                 }\n             }\n+            writeSampleData(realm) // Write first batch of sample data\n+            TestHelper.awaitOrFail(testDone)\n         }\n-        TestHelper.awaitOrFail(testDone)\n-        realm.close()\n     }\n \n     @Test\n     fun addListenerInsideCallback() {\n         val allChangeUploaded = CountDownLatch(1)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-            if (progress.isTransferComplete) {\n-                val realm = Realm.getInstance(config)\n-                writeSampleData(realm)\n-                realm.close()\n-                session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-                    if (progress.isTransferComplete) {\n-                        allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            writeSampleData(realm)\n+            session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                if (progress.isTransferComplete) {\n+                    Realm.getInstance(config).use { realm ->\n+                        writeSampleData(realm)\n+                    }\n+                    session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                        if (progress.isTransferComplete) {\n+                            allChangeUploaded.countDown()\n+                        }\n                     }\n                 }\n             }\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun addListenerInsideCallback_mixProgressModes() {\n         val allChangeUploaded = CountDownLatch(3)\n         val progressCompletedReported = AtomicBoolean(false)\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        writeSampleData(realm)\n-        val session: SyncSession = realm.syncSession\n-        session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n-            if (progress.isTransferComplete) {\n-                allChangeUploaded.countDown()\n-                if (progressCompletedReported.compareAndSet(false, true)) {\n-                    val realm = Realm.getInstance(config)\n-                    writeSampleData(realm)\n-                    realm.close()\n-                    session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n-                        if (progress.isTransferComplete) {\n-                            allChangeUploaded.countDown()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            session.addUploadProgressListener(ProgressMode.INDEFINITELY) { progress ->\n+                if (progress.isTransferComplete) {\n+                    allChangeUploaded.countDown()\n+                    if (progressCompletedReported.compareAndSet(false, true)) {\n+                        Realm.getInstance(config).use { realm ->\n+                            writeSampleData(realm)\n+                        }\n+                        session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES) { progress ->\n+                            if (progress.isTransferComplete) {\n+                                allChangeUploaded.countDown()\n+                            }\n                         }\n                     }\n                 }\n             }\n+            writeSampleData(realm)\n+            TestHelper.awaitOrFail(allChangeUploaded)\n         }\n-        TestHelper.awaitOrFail(allChangeUploaded)\n-        realm.close()\n     }\n \n     @Test\n     fun addProgressListener_triggerImmediatelyWhenRegistered() {\n         val config = createSyncConfig()\n-        val realm = Realm.getInstance(config)\n-        val session: SyncSession = realm.syncSession\n-        checkListener(session, ProgressMode.INDEFINITELY)\n-        checkListener(session, ProgressMode.CURRENT_CHANGES)\n-        realm.close()\n+        Realm.getInstance(config).use { realm ->\n+            val session: SyncSession = realm.syncSession\n+            checkDownloadListener(session, ProgressMode.INDEFINITELY)\n+            checkUploadListener(session, ProgressMode.INDEFINITELY)\n+            checkDownloadListener(session, ProgressMode.CURRENT_CHANGES)\n+            checkUploadListener(session, ProgressMode.CURRENT_CHANGES)\n+        }\n+    }\n+\n+    @Test\n+    @Ignore(\"Tracked by https://github.com/realm/realm-java/issues/6976\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4f2cc642f2835058cad5a34e09e714f7601fc50"}, "originalPosition": 374}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "579211073da259eecde5ad6fa661d216b5867063", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/579211073da259eecde5ad6fa661d216b5867063", "committedDate": "2020-06-29T11:11:22Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Christian Melchior <christian@ilios.dk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e04e2c395fa1e441eaa922e848cb6ff3c904576", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/6e04e2c395fa1e441eaa922e848cb6ff3c904576", "committedDate": "2020-06-29T11:24:44Z", "message": "Merge branch 'v10' into cr/sync-integration-test-progresslisteners"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2244, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}