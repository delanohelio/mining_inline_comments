{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNDM1OTM4", "number": 7207, "title": "Mixed datatypes - support primitive types", "bodyText": "Implements support for primitive types on Mixed:\n\nAnnotation processor,\nsupport for managed and unmanaged modes,\nand its test cases.", "createdAt": "2020-11-17T14:05:22Z", "url": "https://github.com/realm/realm-java/pull/7207", "merged": true, "mergeCommit": {"oid": "f0d8ee39d7ee8faf1017d2462ef4bbcaed1f4c57"}, "closed": true, "closedAt": "2021-01-11T12:49:42Z", "author": {"login": "clementetb"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddaFNwAH2gAyNTIyNDM1OTM4OjcyZDliZjdkODEzMTQ3YmRmYmI2MzljZjM0NGNjNzk3ZTQ0OTgyMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtMnWSAH2gAyNTIyNDM1OTM4OjYwYzU4ZWFlMGU5N2I5Y2Y2NjA0ZDIxM2YzMjYxZTEyM2E5Mjg0ZDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "72d9bf7d813147bdfbb639cf344cc797e449820e", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/72d9bf7d813147bdfbb639cf344cc797e449820e", "committedDate": "2020-11-17T14:04:16Z", "message": "Initial work on Mixed datatype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0def0df770643f384f3f77c7ba52ccbe7927a99d", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/0def0df770643f384f3f77c7ba52ccbe7927a99d", "committedDate": "2020-11-23T07:41:09Z", "message": "Annotations processor for non-managed mixed data type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9af3ae2427d2031d3a29a7276707308c9b83d691", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/9af3ae2427d2031d3a29a7276707308c9b83d691", "committedDate": "2020-11-26T18:31:19Z", "message": "Remove mixed lists and rollback to managed mixed types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "230b72bbfac2e1755e8c2039b0917e6137211778", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/230b72bbfac2e1755e8c2039b0917e6137211778", "committedDate": "2020-11-27T11:21:40Z", "message": "Polish support for primitive realm values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/aba922799ddaf51b6c763807820afaf5e8b17e2c", "committedDate": "2020-11-27T16:46:23Z", "message": "Merge branch 'support-new-datatypes' into ct/support-mixed-type\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/java_object_accessor.hpp"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1OTQ5OTY4", "url": "https://github.com/realm/realm-java/pull/7207#pullrequestreview-545949968", "createdAt": "2020-12-07T09:08:12Z", "commit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTowODoxMlrOIAcn1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTozODo0NlrOIAd4uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzOTg2MQ==", "bodyText": "Is this wrongly indented for this file?", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537339861", "createdAt": "2020-12-07T09:08:12Z", "author": {"login": "edualonso"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -922,11 +973,21 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n                 \"io.realm.MutableRealmInteger\" -> {\n                     emitStatement(\"Long %s = ((%s) object).%s().get()\", getter, interfaceName, getter)\n                     beginControlFlow(\"if (%s != null)\", getter)\n-                        emitStatement(\"Table.nativeSetLong(tableNativePtr, columnInfo.%sColKey, objKey, %s.longValue(), false)\", fieldName, getter)\n-                        if (isUpdate) {\n-                            nextControlFlow(\"else\")\n-                                emitStatement(\"Table.nativeSetNull(tableNativePtr, columnInfo.%sColKey, objKey, false)\", fieldName)\n-                        }\n+                    emitStatement(\"Table.nativeSetLong(tableNativePtr, columnInfo.%sColKey, objKey, %s.longValue(), false)\", fieldName, getter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0MTAxMg==", "bodyText": "I'd write a FIXME here, just for visibility", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537341012", "createdAt": "2020-12-07T09:10:00Z", "author": {"login": "edualonso"}, "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "diffHunk": "@@ -1379,6 +1407,7 @@ public static String getSimpleClassName() {\n                 } else {\n                     objProxy.realmSet$columnDate(JsonUtils.stringToDate(reader.nextString()));\n                 }\n+            } else if (name.equals(\"columnMixed\")) {\n             } else if (name.equals(\"columnBinary\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0MzY3OA==", "bodyText": "I would move these two under io.realm.entitites.", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537343678", "createdAt": "2020-12-07T09:14:07Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/MixedTests.kt", "diffHunk": "@@ -0,0 +1,285 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.Index\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.util.*\n+import kotlin.test.assertEquals\n+import kotlin.test.assertTrue\n+\n+open class MixedNotIndexed : RealmObject() {\n+    companion object {\n+        const val FIELD_MIXED = \"mixed\"\n+    }\n+\n+    var mixed: Mixed? = null\n+}\n+\n+open class MixedIndexed : RealmObject() {\n+    companion object {\n+        const val FIELD_MIXED = \"mixed\"\n+    }\n+\n+    @Index\n+    var mixed: Mixed? = null\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2MDM2NQ==", "bodyText": "Is this going to be addressed later?", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537360365", "createdAt": "2020-12-07T09:38:29Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "diffHunk": "@@ -438,6 +438,335 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeIsNull(JNIEnv*, jo\n     return to_jbool(table->get_object(ObjKey(rowKey)).is_null(ColKey(columnKey))); // noexcept\n }\n \n+// ----------------- Mixed getters\n+\n+JNIEXPORT jint JNICALL Java_io_realm_internal_Table_nativeMixedGetType(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        // TODO: Throw exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2MDU2OQ==", "bodyText": "Same as above", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537360569", "createdAt": "2020-12-07T09:38:46Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "diffHunk": "@@ -438,6 +438,335 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeIsNull(JNIEnv*, jo\n     return to_jbool(table->get_object(ObjKey(rowKey)).is_null(ColKey(columnKey))); // noexcept\n }\n \n+// ----------------- Mixed getters\n+\n+JNIEXPORT jint JNICALL Java_io_realm_internal_Table_nativeMixedGetType(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        // TODO: Throw exception\n+    }\n+    auto mixed = table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey));\n+\n+    if(mixed.is_null()){\n+        return -1;\n+    } else {\n+        return mixed.get_type();\n+    }\n+}\n+\n+JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeMixedAsLong(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return 0;\n+    }\n+    try {\n+        return table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<int64_t>();\n+    }\n+    CATCH_STD()\n+    return 0;\n+}\n+\n+JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeMixedAsBoolean(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return JNI_FALSE;\n+    }\n+    try {\n+        return table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<bool>();\n+    }\n+    CATCH_STD()\n+    return JNI_FALSE;\n+}\n+\n+JNIEXPORT jfloat JNICALL Java_io_realm_internal_Table_nativeMixedAsFloat(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return 0;\n+    }\n+    try {\n+        return table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<float>();\n+    }\n+    CATCH_STD()\n+    return 0;\n+}\n+\n+JNIEXPORT jdouble JNICALL Java_io_realm_internal_Table_nativeMixedAsDouble(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return 0;\n+    }\n+    try {\n+        return table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<double>();\n+    }\n+    CATCH_STD()\n+    return 0;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_Table_nativeMixedAsString(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey) {\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return nullptr;\n+    }\n+    try {\n+        return to_jstring(env,\n+                table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<StringData>());\n+    }\n+    CATCH_STD()\n+    return nullptr;\n+\n+}\n+\n+JNIEXPORT jbyteArray JNICALL Java_io_realm_internal_Table_nativeMixedAsByteArray(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return nullptr;\n+    }\n+    try {\n+        realm::BinaryData bin = table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<BinaryData>();\n+        return JavaClassGlobalDef::new_byte_array(env, bin);\n+    }\n+    CATCH_STD()\n+\n+    return nullptr;\n+}\n+\n+JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeMixedAsTimestamp(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return 0;\n+    }\n+    try {\n+        return to_milliseconds(table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<Timestamp>());\n+    }\n+    CATCH_STD()\n+    return 0;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_Table_nativeMixedAsObjectId(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return nullptr;\n+    }\n+    try {\n+        return to_jstring(env, table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<ObjectId>().to_string().data());\n+    }\n+    CATCH_STD()\n+    return nullptr;\n+}\n+\n+JNIEXPORT jlongArray JNICALL Java_io_realm_internal_Table_nativeMixedAsDecimal128(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return nullptr;\n+    }\n+    try {\n+        Decimal128 decimal128 = table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<Decimal128>();\n+        RETURN_DECIMAL128_AS_JLONG_ARRAY__OR_NULL(decimal128)\n+    }\n+    CATCH_STD()\n+    return nullptr;\n+}\n+\n+JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeMixedIsNull(JNIEnv* env, jobject, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        // TODO: Throw exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 157}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f71f32f38a3681abe318d12d2634044410c00015", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/f71f32f38a3681abe318d12d2634044410c00015", "committedDate": "2020-12-07T19:36:05Z", "message": "EL PR change requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "133a9c27075728e67773eeac2c2c223b754ed06d", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/133a9c27075728e67773eeac2c2c223b754ed06d", "committedDate": "2020-12-07T19:40:04Z", "message": "Add missing imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c47b73b27ed2a371b606e64696a2a8913c89235a", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/c47b73b27ed2a371b606e64696a2a8913c89235a", "committedDate": "2020-12-15T17:59:59Z", "message": "Add tests for checking for managed, validity and frozen.\nRename Mixed type NO_TYPE to NULL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eebddfd4e62abc12b9ce2b2934eba1152111054f", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/eebddfd4e62abc12b9ce2b2934eba1152111054f", "committedDate": "2020-12-15T18:34:56Z", "message": "Merge branch 'support-new-datatypes' into ct/support-mixed-type\n\n# Conflicts:\n#\trealm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.kt\n#\trealm/realm-annotations-processor/src/main/java/io/realm/processor/Constants.kt\n#\trealm/realm-annotations-processor/src/main/java/io/realm/processor/OsObjectBuilderTypeHelper.kt\n#\trealm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt\n#\trealm/realm-annotations-processor/src/main/java/io/realm/processor/TypeMirrors.kt\n#\trealm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java\n#\trealm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\n#\trealm/realm-library/src/main/java/io/realm/RealmFieldType.java\n#\trealm/realm-library/src/main/java/io/realm/internal/InvalidRow.java\n#\trealm/realm-library/src/main/java/io/realm/internal/Property.java\n#\trealm/realm-library/src/main/java/io/realm/internal/Row.java\n#\trealm/realm-library/src/main/java/io/realm/internal/Table.java\n#\trealm/realm-library/src/main/java/io/realm/internal/objectstore/OsObjectBuilder.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "796f40f6e6333446b0d18634cca0e0713fdb13bd", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/796f40f6e6333446b0d18634cca0e0713fdb13bd", "committedDate": "2020-12-15T18:40:00Z", "message": "Disable indexed Mixed class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "785adb2f56538eddab7a1f19361358e41ceb9b5f", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/785adb2f56538eddab7a1f19361358e41ceb9b5f", "committedDate": "2020-12-16T09:24:31Z", "message": "Fix bunch test cases\nAdd unmanaged constructors for byte and integer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1989f8fc71867f75cd0861fc956fbdd634016b73", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/1989f8fc71867f75cd0861fc956fbdd634016b73", "committedDate": "2020-12-16T09:27:07Z", "message": "Fix style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58f81bcdace393a198828b33de70ce3dcf3b7d21", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/58f81bcdace393a198828b33de70ce3dcf3b7d21", "committedDate": "2020-12-16T09:42:49Z", "message": "Use actual realm reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e5efef73a0cd6c20ed2050a76db3e2de35d8457", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/7e5efef73a0cd6c20ed2050a76db3e2de35d8457", "committedDate": "2020-12-16T10:53:06Z", "message": "Add object schema tests for ObjectId and UUID"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a925acaf582e16adbbd819472b3b3ee858f11ec6", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/a925acaf582e16adbbd819472b3b3ee858f11ec6", "committedDate": "2020-12-16T14:29:06Z", "message": "Add support for primitives byte, short, and ints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d5b6fda0a2634446b3b8900281a08b9a4e4c918", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/9d5b6fda0a2634446b3b8900281a08b9a4e4c918", "committedDate": "2020-12-17T08:58:33Z", "message": "Add support for UUD realm primitive type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beb4737dde50fff1d546630cf6e175aca4841ee3", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/beb4737dde50fff1d546630cf6e175aca4841ee3", "committedDate": "2020-12-17T09:25:58Z", "message": "Add tests for mixed managed short, byte, int and long"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bafe4253105165020a046d09156ef70fc7ca34f", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/1bafe4253105165020a046d09156ef70fc7ca34f", "committedDate": "2020-12-17T14:55:40Z", "message": "Add table set UUID functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTkyMzA0", "url": "https://github.com/realm/realm-java/pull/7207#pullrequestreview-556192304", "createdAt": "2020-12-21T08:04:10Z", "commit": {"oid": "1bafe4253105165020a046d09156ef70fc7ca34f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNjk0ODkx", "url": "https://github.com/realm/realm-java/pull/7207#pullrequestreview-553694891", "createdAt": "2020-12-16T13:41:38Z", "commit": {"oid": "1989f8fc71867f75cd0861fc956fbdd634016b73"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0MTozOFrOIHF1Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0ODowNFrOIHGH2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwNjUyMg==", "bodyText": "Are this block and the next not the same?", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r544306522", "createdAt": "2020-12-16T13:41:38Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmJsonNullPrimaryKeyTests.java", "diffHunk": "@@ -95,6 +97,15 @@ public void createObjectFromJson_primaryKey_isNull_fromJsonObject() throws JSONE\n             assertEquals(1, results.size());\n             assertEquals(Long.valueOf(secondaryFieldValue).longValue(), results.first().getId());\n             assertNull(results.first().getName());\n+\n+            // PrimaryKeyAsObjectId\n+        } else if (clazz.equals(PrimaryKeyAsUUID.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1989f8fc71867f75cd0861fc956fbdd634016b73"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwNjc0OQ==", "bodyText": "Also this one.", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r544306749", "createdAt": "2020-12-16T13:41:57Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmJsonNullPrimaryKeyTests.java", "diffHunk": "@@ -140,6 +160,15 @@ public void createOrUpdateObjectFromJson_primaryKey_isNull_updateFromJsonObject(\n             assertEquals(1, results.size());\n             assertEquals(Long.valueOf(secondaryFieldValue).longValue(), results.first().getId());\n             assertEquals(null, results.first().getName());\n+\n+            // PrimaryKeyAsObjectId\n+        } else if (clazz.equals(PrimaryKeyAsUUID.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1989f8fc71867f75cd0861fc956fbdd634016b73"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxMTI1Nw==", "bodyText": "Wrong naming? Is this supposed to be a Mixed field for UUID instead?", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r544311257", "createdAt": "2020-12-16T13:48:04Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTest/java/io/realm/entities/AllJavaTypes.java", "diffHunk": "@@ -100,6 +105,8 @@\n     private byte[] fieldBinary;\n     private Decimal128 fieldDecimal128;\n     private ObjectId fieldObjectId;\n+    private UUID fieldUUID;\n+    private UUID fieldMixed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1989f8fc71867f75cd0861fc956fbdd634016b73"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60c58eae0e97b9cf6604d213f3261e123a9284d4", "author": {"user": {"login": "clementetb", "name": null}}, "url": "https://github.com/realm/realm-java/commit/60c58eae0e97b9cf6604d213f3261e123a9284d4", "committedDate": "2021-01-05T15:25:40Z", "message": "PR review changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2209, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}