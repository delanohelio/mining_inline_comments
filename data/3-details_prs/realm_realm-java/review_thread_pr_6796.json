{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzY0MzE4", "number": 6796, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoxMTozN1rODxnYbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjowNzozMlrODzj1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzUyMDQ1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmUserTests.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoxMTozN1rOGFLnag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODoyNToxNFrOGGGKIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NjM3OA==", "bodyText": "Is this still the case?", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408086378", "createdAt": "2020-04-14T12:11:37Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmUserTests.kt", "diffHunk": "@@ -66,17 +69,193 @@ class RealmUserTests {\n \n     @Test\n     fun logOut() {\n-        anonUser.logOut()\n-        assertEquals(RealmUser.State.REMOVED, anonUser.state)\n+        anonUser.logOut(); // Remove user created for other tests\n+\n+        // Anonymous users are removed upon log out\n+        val user1: RealmUser = app.login(RealmCredentials.anonymous())\n+        assertEquals(user1, app.currentUser())\n+        user1.logOut()\n+        assertEquals(RealmUser.State.REMOVED, user1.state)\n+        assertNull(app.currentUser())\n+\n+        // Users registered with Email/Password will register as Logged Out\n+        val user2: RealmUser = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        assertEquals(user2, app.currentUser())\n+        user2.logOut()\n+        assertEquals(RealmUser.State.LOGGED_OUT, user2.state)\n+        assertNull(app.currentUser())\n     }\n \n     @Test\n     fun logOutAsync() = looperThread.runBlocking {\n-        anonUser.logOutAsync {\n-            when(it.isSuccess) {\n-                true -> looperThread.testComplete()\n-                false -> fail(it.error.toString())\n+        assertEquals(anonUser, app.currentUser())\n+        anonUser.logOutAsync() { result ->\n+            val callbackUser: RealmUser = result.orThrow\n+            assertNull(app.currentUser())\n+            assertEquals(anonUser, callbackUser)\n+            assertEquals(RealmUser.State.REMOVED, anonUser.state)\n+            assertEquals(RealmUser.State.REMOVED, callbackUser.state)\n+            looperThread.testComplete()\n+        }\n+    }\n+\n+    @Test\n+    fun logOutAsync_throwsOnNonLooperThread() {\n+        val user: RealmUser = app.login(RealmCredentials.anonymous())\n+        try {\n+            user.logOutAsync { fail() }\n+            fail()\n+        } catch (ignore: IllegalStateException) {\n+        }\n+    }\n+\n+    @Ignore(\"FIXME: Wait for linkUser support in ObjectStore\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NTUzNg==", "bodyText": "Yes, there are apparently still issues with linkUser, I need to investigate that further.", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r409045536", "createdAt": "2020-04-15T18:25:14Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmUserTests.kt", "diffHunk": "@@ -66,17 +69,193 @@ class RealmUserTests {\n \n     @Test\n     fun logOut() {\n-        anonUser.logOut()\n-        assertEquals(RealmUser.State.REMOVED, anonUser.state)\n+        anonUser.logOut(); // Remove user created for other tests\n+\n+        // Anonymous users are removed upon log out\n+        val user1: RealmUser = app.login(RealmCredentials.anonymous())\n+        assertEquals(user1, app.currentUser())\n+        user1.logOut()\n+        assertEquals(RealmUser.State.REMOVED, user1.state)\n+        assertNull(app.currentUser())\n+\n+        // Users registered with Email/Password will register as Logged Out\n+        val user2: RealmUser = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        assertEquals(user2, app.currentUser())\n+        user2.logOut()\n+        assertEquals(RealmUser.State.LOGGED_OUT, user2.state)\n+        assertNull(app.currentUser())\n     }\n \n     @Test\n     fun logOutAsync() = looperThread.runBlocking {\n-        anonUser.logOutAsync {\n-            when(it.isSuccess) {\n-                true -> looperThread.testComplete()\n-                false -> fail(it.error.toString())\n+        assertEquals(anonUser, app.currentUser())\n+        anonUser.logOutAsync() { result ->\n+            val callbackUser: RealmUser = result.orThrow\n+            assertNull(app.currentUser())\n+            assertEquals(anonUser, callbackUser)\n+            assertEquals(RealmUser.State.REMOVED, anonUser.state)\n+            assertEquals(RealmUser.State.REMOVED, callbackUser.state)\n+            looperThread.testComplete()\n+        }\n+    }\n+\n+    @Test\n+    fun logOutAsync_throwsOnNonLooperThread() {\n+        val user: RealmUser = app.login(RealmCredentials.anonymous())\n+        try {\n+            user.logOutAsync { fail() }\n+            fail()\n+        } catch (ignore: IllegalStateException) {\n+        }\n+    }\n+\n+    @Ignore(\"FIXME: Wait for linkUser support in ObjectStore\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NjM3OA=="}, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzYxNTMyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozNzowMlrOGFMhXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoxMDoxNFrOGIElVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTIxMg==", "bodyText": "Can we link a user with multiple credentials (ex: Facebook, Google & email) if yes do we have a test for it?", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408101212", "createdAt": "2020-04-14T12:37:02Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NTgwMQ==", "bodyText": "You can and no, we don't have a test for it. I can add it.", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r409045801", "createdAt": "2020-04-15T18:25:45Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTIxMg=="}, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNjg4NQ==", "bodyText": "I believe the test added was for the same credentials type (email) consider adding a test with other types once they're implemented", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r411116885", "createdAt": "2020-04-20T06:10:14Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTIxMg=="}, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzY0ODczOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo0NDo1M1rOGFM1eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo0NDo1M1rOGFM1eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNjM2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * synchronization to and from the users Realms, and those Realms will be deleted next time\n          \n          \n            \n                 * synchronization to and from the users' Realms, and those Realms will be deleted next time", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408106360", "createdAt": "2020-04-14T12:44:53Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous linking identities is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return linkUser(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @return user that was removed.\n+     * @throws ObjectServerError if called from the UI thread or if the user was logged in, but\n+     * could not be logged out.\n+     */\n+    public RealmUser removeUser() throws ObjectServerError {\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeRemoveUser(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @param user user to remove.\n+     * @param callback callback when removing the user has completed or failed. The callback will always\n+     * happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask removeUserAsync(RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous removal of users is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return removeUser();\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Log the user out of the Realm App. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time\n+     * the app restarts. Therefor logging out should not be done until all changes to Realms have\n+     * been uploaded to the server.\n      * <p>\n      * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n      * will be notified and user credentials will be deleted from this device.\n+     * <p>\n+     * Logging out anonymous users will remove them immediately instead of marking them as\n+     * {@link RealmUser.State#LOGGED_OUT}. All other users will be marked as {@link RealmUser.State#LOGGED_OUT}\n+     * and will still be returned by {@link #allUsers()}. They can be removed completely by calling\n+     * {@link #removeUser()}.\n      *\n      * @throws ObjectServerError if an error occurred while trying to log the user out of the Realm\n      * App.\n      */\n-    public void logOut() {\n-        app.logOut(this);\n+    public void logOut() throws ObjectServerError {\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLogOut(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIVoidResultCallback(error));\n+        handleResult(null, error);\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch. If the user is already logged out or in an error state, this method does nothing.\n-     * <p>\n-     * If the user is already logged out, this method does nothing.\n-     * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Log the user out of the Realm App asynchronously. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzY1MDQ4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo0NToxOFrOGFM2hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo0NToxOFrOGFM2hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNjYzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * synchronization to and from the users Realms, and those Realms will be deleted next time\n          \n          \n            \n                 * synchronization to and from the users' Realms, and those Realms will be deleted next time", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408106631", "createdAt": "2020-04-14T12:45:18Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous linking identities is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return linkUser(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @return user that was removed.\n+     * @throws ObjectServerError if called from the UI thread or if the user was logged in, but\n+     * could not be logged out.\n+     */\n+    public RealmUser removeUser() throws ObjectServerError {\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeRemoveUser(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @param user user to remove.\n+     * @param callback callback when removing the user has completed or failed. The callback will always\n+     * happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask removeUserAsync(RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous removal of users is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return removeUser();\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Log the user out of the Realm App. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzc1MTg4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoxMDowNVrOGFN1xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODoyNjoxM1rOGGGMVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMjgyMQ==", "bodyText": "I thought we renamed this in another PR to lose the prefix?", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408122821", "createdAt": "2020-04-14T13:10:05Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous linking identities is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return linkUser(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @return user that was removed.\n+     * @throws ObjectServerError if called from the UI thread or if the user was logged in, but\n+     * could not be logged out.\n+     */\n+    public RealmUser removeUser() throws ObjectServerError {\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeRemoveUser(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @param user user to remove.\n+     * @param callback callback when removing the user has completed or failed. The callback will always\n+     * happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask removeUserAsync(RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous removal of users is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return removeUser();\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Log the user out of the Realm App. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time\n+     * the app restarts. Therefor logging out should not be done until all changes to Realms have\n+     * been uploaded to the server.\n      * <p>\n      * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n      * will be notified and user credentials will be deleted from this device.\n+     * <p>\n+     * Logging out anonymous users will remove them immediately instead of marking them as\n+     * {@link RealmUser.State#LOGGED_OUT}. All other users will be marked as {@link RealmUser.State#LOGGED_OUT}\n+     * and will still be returned by {@link #allUsers()}. They can be removed completely by calling\n+     * {@link #removeUser()}.\n      *\n      * @throws ObjectServerError if an error occurred while trying to log the user out of the Realm\n      * App.\n      */\n-    public void logOut() {\n-        app.logOut(this);\n+    public void logOut() throws ObjectServerError {\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLogOut(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIVoidResultCallback(error));\n+        handleResult(null, error);\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch. If the user is already logged out or in an error state, this method does nothing.\n-     * <p>\n-     * If the user is already logged out, this method does nothing.\n-     * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Log the user out of the Realm App asynchronously. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time\n+     * the app restarts. Therefor logging out should not be done until all changes to Realms have\n+     * been uploaded to the server.\n      * <p>\n      * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n      * will be notified and user credentials will be deleted from this device.\n+     * <p>\n+     * Logging out anonymous users will remove them immediately instead of marking them as\n+     * {@link RealmUser.State#LOGGED_OUT}. All other users will be marked as {@link RealmUser.State#LOGGED_OUT}\n+     * and will still be returned by {@link #allUsers()}. They can be removed completely by calling\n+     * {@link #removeUser()}.\n      *\n-     * @throws IllegalStateException if not called on a looper thread.\n+     * @param callback callback when logging out has completed or failed. The callback will always\n+     * happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask logOutAsync(RealmApp.Callback<RealmUser> callback) {\n+        final RealmUser user = this;\n+        Util.checkLooperThread(\"Asynchronous log out is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                logOut();\n+                return user;\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Returns a wrapper for managing API keys controlled by the current user.\n+     *\n+     * @return wrapper for managing API keys controlled by the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     */\n+    public synchronized ApiKeyAuthProvider getApiKeyAuthProvider() {\n+        checkLoggedIn();\n+        if (apiKeyAuthProvider == null) {\n+            apiKeyAuthProvider = new ApiKeyAuthProvider(this);\n+        }\n+        return apiKeyAuthProvider;\n+    }\n+\n+    /**\n+     * FIXME Add support for functions. Name of Class and method still TBD.\n+     */\n+    public RealmFunctions getFunctions() {\n+        return null;\n+    }\n+\n+    /**\n+     * FIXME Add support for push notifications. Name of Class and method still TBD.\n      */\n-    public RealmAsyncTask logOutAsync(RealmApp.Callback callback) {\n-        return app.logOutAsync(this, callback);\n+    public RealmPushNotifications getFSMPushNotifications() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NjEwMA==", "bodyText": "I think you are right. I'll rename here.", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r409046100", "createdAt": "2020-04-15T18:26:13Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous linking identities is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return linkUser(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @return user that was removed.\n+     * @throws ObjectServerError if called from the UI thread or if the user was logged in, but\n+     * could not be logged out.\n+     */\n+    public RealmUser removeUser() throws ObjectServerError {\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeRemoveUser(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @param user user to remove.\n+     * @param callback callback when removing the user has completed or failed. The callback will always\n+     * happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask removeUserAsync(RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous removal of users is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return removeUser();\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Log the user out of the Realm App. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time\n+     * the app restarts. Therefor logging out should not be done until all changes to Realms have\n+     * been uploaded to the server.\n      * <p>\n      * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n      * will be notified and user credentials will be deleted from this device.\n+     * <p>\n+     * Logging out anonymous users will remove them immediately instead of marking them as\n+     * {@link RealmUser.State#LOGGED_OUT}. All other users will be marked as {@link RealmUser.State#LOGGED_OUT}\n+     * and will still be returned by {@link #allUsers()}. They can be removed completely by calling\n+     * {@link #removeUser()}.\n      *\n      * @throws ObjectServerError if an error occurred while trying to log the user out of the Realm\n      * App.\n      */\n-    public void logOut() {\n-        app.logOut(this);\n+    public void logOut() throws ObjectServerError {\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLogOut(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIVoidResultCallback(error));\n+        handleResult(null, error);\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch. If the user is already logged out or in an error state, this method does nothing.\n-     * <p>\n-     * If the user is already logged out, this method does nothing.\n-     * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Log the user out of the Realm App asynchronously. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time\n+     * the app restarts. Therefor logging out should not be done until all changes to Realms have\n+     * been uploaded to the server.\n      * <p>\n      * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n      * will be notified and user credentials will be deleted from this device.\n+     * <p>\n+     * Logging out anonymous users will remove them immediately instead of marking them as\n+     * {@link RealmUser.State#LOGGED_OUT}. All other users will be marked as {@link RealmUser.State#LOGGED_OUT}\n+     * and will still be returned by {@link #allUsers()}. They can be removed completely by calling\n+     * {@link #removeUser()}.\n      *\n-     * @throws IllegalStateException if not called on a looper thread.\n+     * @param callback callback when logging out has completed or failed. The callback will always\n+     * happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask logOutAsync(RealmApp.Callback<RealmUser> callback) {\n+        final RealmUser user = this;\n+        Util.checkLooperThread(\"Asynchronous log out is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                logOut();\n+                return user;\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Returns a wrapper for managing API keys controlled by the current user.\n+     *\n+     * @return wrapper for managing API keys controlled by the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     */\n+    public synchronized ApiKeyAuthProvider getApiKeyAuthProvider() {\n+        checkLoggedIn();\n+        if (apiKeyAuthProvider == null) {\n+            apiKeyAuthProvider = new ApiKeyAuthProvider(this);\n+        }\n+        return apiKeyAuthProvider;\n+    }\n+\n+    /**\n+     * FIXME Add support for functions. Name of Class and method still TBD.\n+     */\n+    public RealmFunctions getFunctions() {\n+        return null;\n+    }\n+\n+    /**\n+     * FIXME Add support for push notifications. Name of Class and method still TBD.\n      */\n-    public RealmAsyncTask logOutAsync(RealmApp.Callback callback) {\n-        return app.logOutAsync(this, callback);\n+    public RealmPushNotifications getFSMPushNotifications() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMjgyMQ=="}, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDIyMTY5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo1MDozMlrOGFSdSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo1MToyNFrOGFSf-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5ODQ3Mw==", "bodyText": "Is this correct? Should linkUser not be called on user instead of app?", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408198473", "createdAt": "2020-04-14T14:50:32Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5OTE2Mg==", "bodyText": "There are some other instances of this one below as well.", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408199162", "createdAt": "2020-04-14T14:51:24Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5ODQ3Mw=="}, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDIzMTU3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo1MjozNlrOGFSjkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo1MjozNlrOGFSjkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMDA4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Removes a users credentials from this device. If the user was currently logged in, they\n          \n          \n            \n                 * Removes a user's credentials from this device. If the user was currently logged in, they", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408200082", "createdAt": "2020-04-14T14:52:36Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous linking identities is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return linkUser(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @return user that was removed.\n+     * @throws ObjectServerError if called from the UI thread or if the user was logged in, but\n+     * could not be logged out.\n+     */\n+    public RealmUser removeUser() throws ObjectServerError {\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeRemoveUser(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzkxMDMzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjowNzozMlrOGIEhXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjowNzozMlrOGIEhXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNTg3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * userg.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n          \n          \n            \n                 * user.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r411115871", "createdAt": "2020-04-20T06:07:32Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -281,7 +281,7 @@ protected RealmUser mapSuccess(Object result) {\n      * // Example\n      * RealmApp app = new RealmApp(\"app-id\")\n      * RealmUser user = app.login(RealmCredentials.anonymous());\n-     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * userg.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b5b2c6a6dfdb75200a7428c11c3893f4565adc"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 651, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}