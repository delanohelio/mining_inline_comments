{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NzE0NTg5", "number": 7220, "title": "Fixing annotation processor to safely check for embedded classes", "bodyText": "Fixes #7213\nkapt runs within modules so classCollection contains only processed classes from the particular module. However, the embedded class could be in another transitive module, therefore  relying on classCollection could throw an exception because we might be trying to lookup a class processed from another round/module.\nThe usage of classCollection.getClassFromQualifiedName is mainly introduced to know if the type we're processing is embedded or not. In this PR we introduce an alternative way to obtain this information without relying necessarily on the classCollection, we use alternatively the JDK compiler tools API.", "createdAt": "2020-11-27T16:58:51Z", "url": "https://github.com/realm/realm-java/pull/7220", "merged": true, "mergeCommit": {"oid": "ae8ae246458741ee80da916d3e84a31efced891b"}, "closed": true, "closedAt": "2020-11-27T19:35:07Z", "author": {"login": "nhachicha"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgqdr7gH2gAyNTI4NzE0NTg5OjEwMGQ4ZDBlNDM1NTU5MzA2MjcyMWU0MjVmYzBlZmNjMDg3MGUzYzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgstsugH2gAyNTI4NzE0NTg5OmUyYTc2Y2ZjMGRkODk3MmRhN2Q5ZDhhNjg1YTE2YTMzNGQyNjlmYTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "100d8d0e4355593062721e425fc0efcc0870e3c9", "author": {"user": {"login": "nhachicha", "name": "Nabil Hachicha"}}, "url": "https://github.com/realm/realm-java/commit/100d8d0e4355593062721e425fc0efcc0870e3c9", "committedDate": "2020-11-27T16:51:15Z", "message": "Fixes https://github.com/realm/realm-java/issues/7213"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTI5OTIz", "url": "https://github.com/realm/realm-java/pull/7220#pullrequestreview-540129923", "createdAt": "2020-11-27T18:15:56Z", "commit": {"oid": "100d8d0e4355593062721e425fc0efcc0870e3c9"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODoxODoxMFrOH7F1uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODoyODozNlrOH7GAQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyMzcwNw==", "bodyText": "Suggested change", "url": "https://github.com/realm/realm-java/pull/7220#discussion_r531723707", "createdAt": "2020-11-27T18:18:10Z", "author": {"login": "rorbech"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -2410,5 +2407,39 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n             }\n             return count\n         }\n+\n+    }\n+\n+    // Returns whether a type of a  Realm field is embedded or not.\n+    // If the type class is part of this processing round then lookup the class metadata from 'classCollection'\n+    // then invoke 'embedded' property, Otherwise the class might not be present within the 'classCollection' because it was\n+    // processed from another module for example, then use the compiler tool api to find out if it was annotated with 'embedded'\n+    // the second method could be slightly slower this is why we default to the first appraoch.\n+    private fun isFieldTypeEmbedded(type: TypeMirror) : Boolean  {\n+        val fieldType = QualifiedClassName(type)\n+        val fieldTypeMetaData: ClassMetaData? = classCollection.getClassFromQualifiedNameOrNull(fieldType)\n+        return fieldTypeMetaData?.embedded ?: type.isEmbedded()\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100d8d0e4355593062721e425fc0efcc0870e3c9"}, "originalPosition": 401}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNjIzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Returns whether a type of a  Realm field is embedded or not.\n          \n          \n            \n                // If the type class is part of this processing round then lookup the class metadata from 'classCollection'\n          \n          \n            \n                // then invoke 'embedded' property, Otherwise the class might not be present within the 'classCollection' because it was\n          \n          \n            \n                // processed from another module for example, then use the compiler tool api to find out if it was annotated with 'embedded'\n          \n          \n            \n                // the second method could be slightly slower this is why we default to the first appraoch.\n          \n          \n            \n                // Returns whether a type of a Realm field is embedded or not.\n          \n          \n            \n                // For types which are part of this processing round we can look it up immediately from \n          \n          \n            \n                // the metadata in the `classCollection`. For types defined in other modules we will \n          \n          \n            \n                // have to use the slower approach of inspecting the `embedded` property of the\n          \n          \n            \n                // RealmClass annotation using the compiler tool api.", "url": "https://github.com/realm/realm-java/pull/7220#discussion_r531726236", "createdAt": "2020-11-27T18:27:52Z", "author": {"login": "rorbech"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -2410,5 +2407,39 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n             }\n             return count\n         }\n+\n+    }\n+\n+    // Returns whether a type of a  Realm field is embedded or not.\n+    // If the type class is part of this processing round then lookup the class metadata from 'classCollection'\n+    // then invoke 'embedded' property, Otherwise the class might not be present within the 'classCollection' because it was\n+    // processed from another module for example, then use the compiler tool api to find out if it was annotated with 'embedded'\n+    // the second method could be slightly slower this is why we default to the first appraoch.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100d8d0e4355593062721e425fc0efcc0870e3c9"}, "originalPosition": 395}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNjQwMQ==", "bodyText": "Suggested change", "url": "https://github.com/realm/realm-java/pull/7220#discussion_r531726401", "createdAt": "2020-11-27T18:28:36Z", "author": {"login": "rorbech"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -2032,9 +2030,9 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n             emitEmptyLine()\n         }\n     }\n-   \n \n-   \n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100d8d0e4355593062721e425fc0efcc0870e3c9"}, "originalPosition": 344}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTM4NDU3", "url": "https://github.com/realm/realm-java/pull/7220#pullrequestreview-540138457", "createdAt": "2020-11-27T18:46:53Z", "commit": {"oid": "100d8d0e4355593062721e425fc0efcc0870e3c9"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODo0Njo1M1rOH7GSEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODo0OToyMFrOH7GUSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczMDk2Mw==", "bodyText": "Nice \ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/7220#discussion_r531730963", "createdAt": "2020-11-27T18:46:53Z", "author": {"login": "cmelchior"}, "path": "realm/realm-annotations-processor/build.gradle", "diffHunk": "@@ -15,15 +15,16 @@ dependencies {\n     implementation \"io.realm:realm-annotations:${version}\"\n     implementation \"org.mongodb:bson:${properties.getProperty('BSON_DEPENDENCY')}\"\n     implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n+    implementation files(Jvm.current().toolsJar)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100d8d0e4355593062721e425fc0efcc0870e3c9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczMTUzMQ==", "bodyText": "Should we break after this?", "url": "https://github.com/realm/realm-java/pull/7220#discussion_r531731531", "createdAt": "2020-11-27T18:49:20Z", "author": {"login": "cmelchior"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -2410,5 +2407,39 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n             }\n             return count\n         }\n+\n+    }\n+\n+    // Returns whether a type of a  Realm field is embedded or not.\n+    // If the type class is part of this processing round then lookup the class metadata from 'classCollection'\n+    // then invoke 'embedded' property, Otherwise the class might not be present within the 'classCollection' because it was\n+    // processed from another module for example, then use the compiler tool api to find out if it was annotated with 'embedded'\n+    // the second method could be slightly slower this is why we default to the first appraoch.\n+    private fun isFieldTypeEmbedded(type: TypeMirror) : Boolean  {\n+        val fieldType = QualifiedClassName(type)\n+        val fieldTypeMetaData: ClassMetaData? = classCollection.getClassFromQualifiedNameOrNull(fieldType)\n+        return fieldTypeMetaData?.embedded ?: type.isEmbedded()\n+    }\n+\n+\n+    private fun TypeMirror.isEmbedded() : Boolean {\n+        var isEmbedded = false\n+\n+        if (this is Type.ClassType) {\n+            val declarationAttributes: com.sun.tools.javac.util.List<Attribute.Compound>? = tsym.metadata?.declarationAttributes\n+            if (declarationAttributes != null) {\n+                for (attribute: Attribute.Compound in declarationAttributes) {\n+                    if (attribute.type.tsym.qualifiedName.toString() == \"io.realm.annotations.RealmClass\") {\n+                        for (pair: Pair<Symbol.MethodSymbol, Attribute> in attribute.values) {\n+                            if (pair.fst.name.toString() == \"embedded\") {\n+                                isEmbedded = pair.snd.value as Boolean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100d8d0e4355593062721e425fc0efcc0870e3c9"}, "originalPosition": 413}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cd08db64ea6299da6882054bd0b87e72987582c", "author": {"user": {"login": "nhachicha", "name": "Nabil Hachicha"}}, "url": "https://github.com/realm/realm-java/commit/5cd08db64ea6299da6882054bd0b87e72987582c", "committedDate": "2020-11-27T19:22:31Z", "message": "Update realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt\n\nCo-authored-by: Claus R\u00f8rbech <claus.rorbech@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "286fa7f34da3a48ae06fed42634cbd912371e01e", "author": {"user": {"login": "nhachicha", "name": "Nabil Hachicha"}}, "url": "https://github.com/realm/realm-java/commit/286fa7f34da3a48ae06fed42634cbd912371e01e", "committedDate": "2020-11-27T19:23:02Z", "message": "Update realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt\n\nCo-authored-by: Claus R\u00f8rbech <claus.rorbech@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8cbd1186b5ec5ec404af0255a2305dfd77c705b", "author": {"user": {"login": "nhachicha", "name": "Nabil Hachicha"}}, "url": "https://github.com/realm/realm-java/commit/f8cbd1186b5ec5ec404af0255a2305dfd77c705b", "committedDate": "2020-11-27T19:23:08Z", "message": "Update realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt\n\nCo-authored-by: Claus R\u00f8rbech <claus.rorbech@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2a76cfc0dd8972da7d9d8a685a16a334d269fa3", "author": {"user": {"login": "nhachicha", "name": "Nabil Hachicha"}}, "url": "https://github.com/realm/realm-java/commit/e2a76cfc0dd8972da7d9d8a685a16a334d269fa3", "committedDate": "2020-11-27T19:28:33Z", "message": "PR feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2222, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}