{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNDM1OTM4", "number": 7207, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTowODoxMlrOFBq-Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0ODowNFrOFGM3Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mjk2OTg3OnYy", "diffSide": "RIGHT", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTowODoxMlrOIAcn1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTozNToyNVrOIA3SUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzOTg2MQ==", "bodyText": "Is this wrongly indented for this file?", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537339861", "createdAt": "2020-12-07T09:08:12Z", "author": {"login": "edualonso"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -922,11 +973,21 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n                 \"io.realm.MutableRealmInteger\" -> {\n                     emitStatement(\"Long %s = ((%s) object).%s().get()\", getter, interfaceName, getter)\n                     beginControlFlow(\"if (%s != null)\", getter)\n-                        emitStatement(\"Table.nativeSetLong(tableNativePtr, columnInfo.%sColKey, objKey, %s.longValue(), false)\", fieldName, getter)\n-                        if (isUpdate) {\n-                            nextControlFlow(\"else\")\n-                                emitStatement(\"Table.nativeSetNull(tableNativePtr, columnInfo.%sColKey, objKey, false)\", fieldName)\n-                        }\n+                    emitStatement(\"Table.nativeSetLong(tableNativePtr, columnInfo.%sColKey, objKey, %s.longValue(), false)\", fieldName, getter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3NjcyMA==", "bodyText": "I don't think so.", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537776720", "createdAt": "2020-12-07T19:35:25Z", "author": {"login": "clementetb"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -922,11 +973,21 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n                 \"io.realm.MutableRealmInteger\" -> {\n                     emitStatement(\"Long %s = ((%s) object).%s().get()\", getter, interfaceName, getter)\n                     beginControlFlow(\"if (%s != null)\", getter)\n-                        emitStatement(\"Table.nativeSetLong(tableNativePtr, columnInfo.%sColKey, objKey, %s.longValue(), false)\", fieldName, getter)\n-                        if (isUpdate) {\n-                            nextControlFlow(\"else\")\n-                                emitStatement(\"Table.nativeSetNull(tableNativePtr, columnInfo.%sColKey, objKey, false)\", fieldName)\n-                        }\n+                    emitStatement(\"Table.nativeSetLong(tableNativePtr, columnInfo.%sColKey, objKey, %s.longValue(), false)\", fieldName, getter)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzOTg2MQ=="}, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mjk3NzUyOnYy", "diffSide": "RIGHT", "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOToxMDowMFrOIAcsVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjoxOToxMlrOIAuvYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0MTAxMg==", "bodyText": "I'd write a FIXME here, just for visibility", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537341012", "createdAt": "2020-12-07T09:10:00Z", "author": {"login": "edualonso"}, "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "diffHunk": "@@ -1379,6 +1407,7 @@ public static String getSimpleClassName() {\n                 } else {\n                     objProxy.realmSet$columnDate(JsonUtils.stringToDate(reader.nextString()));\n                 }\n+            } else if (name.equals(\"columnMixed\")) {\n             } else if (name.equals(\"columnBinary\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzNjcwNw==", "bodyText": "Oh, this is the test class for the generated code. Never mind then.", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537636707", "createdAt": "2020-12-07T16:19:12Z", "author": {"login": "edualonso"}, "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "diffHunk": "@@ -1379,6 +1407,7 @@ public static String getSimpleClassName() {\n                 } else {\n                     objProxy.realmSet$columnDate(JsonUtils.stringToDate(reader.nextString()));\n                 }\n+            } else if (name.equals(\"columnMixed\")) {\n             } else if (name.equals(\"columnBinary\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0MTAxMg=="}, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mjk5NTYxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/MixedTests.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOToxNDowN1rOIAc2vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOToxNDowN1rOIAc2vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0MzY3OA==", "bodyText": "I would move these two under io.realm.entitites.", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537343678", "createdAt": "2020-12-07T09:14:07Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/MixedTests.kt", "diffHunk": "@@ -0,0 +1,285 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.Index\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.util.*\n+import kotlin.test.assertEquals\n+import kotlin.test.assertTrue\n+\n+open class MixedNotIndexed : RealmObject() {\n+    companion object {\n+        const val FIELD_MIXED = \"mixed\"\n+    }\n+\n+    var mixed: Mixed? = null\n+}\n+\n+open class MixedIndexed : RealmObject() {\n+    companion object {\n+        const val FIELD_MIXED = \"mixed\"\n+    }\n+\n+    @Index\n+    var mixed: Mixed? = null\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzEwODYyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTozODoyOVrOIAd37Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTozMjo0M1rOIA3GFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2MDM2NQ==", "bodyText": "Is this going to be addressed later?", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537360365", "createdAt": "2020-12-07T09:38:29Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "diffHunk": "@@ -438,6 +438,335 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeIsNull(JNIEnv*, jo\n     return to_jbool(table->get_object(ObjKey(rowKey)).is_null(ColKey(columnKey))); // noexcept\n }\n \n+// ----------------- Mixed getters\n+\n+JNIEXPORT jint JNICALL Java_io_realm_internal_Table_nativeMixedGetType(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        // TODO: Throw exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MzU5MQ==", "bodyText": "Forgot to replace it \ud83d\ude33", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537773591", "createdAt": "2020-12-07T19:32:43Z", "author": {"login": "clementetb"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "diffHunk": "@@ -438,6 +438,335 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeIsNull(JNIEnv*, jo\n     return to_jbool(table->get_object(ObjKey(rowKey)).is_null(ColKey(columnKey))); // noexcept\n }\n \n+// ----------------- Mixed getters\n+\n+JNIEXPORT jint JNICALL Java_io_realm_internal_Table_nativeMixedGetType(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        // TODO: Throw exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2MDM2NQ=="}, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzExMDEzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTozODo0NlrOIAd4uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTozODo0NlrOIAd4uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2MDU2OQ==", "bodyText": "Same as above", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r537360569", "createdAt": "2020-12-07T09:38:46Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "diffHunk": "@@ -438,6 +438,335 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeIsNull(JNIEnv*, jo\n     return to_jbool(table->get_object(ObjKey(rowKey)).is_null(ColKey(columnKey))); // noexcept\n }\n \n+// ----------------- Mixed getters\n+\n+JNIEXPORT jint JNICALL Java_io_realm_internal_Table_nativeMixedGetType(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        // TODO: Throw exception\n+    }\n+    auto mixed = table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey));\n+\n+    if(mixed.is_null()){\n+        return -1;\n+    } else {\n+        return mixed.get_type();\n+    }\n+}\n+\n+JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeMixedAsLong(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return 0;\n+    }\n+    try {\n+        return table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<int64_t>();\n+    }\n+    CATCH_STD()\n+    return 0;\n+}\n+\n+JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeMixedAsBoolean(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return JNI_FALSE;\n+    }\n+    try {\n+        return table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<bool>();\n+    }\n+    CATCH_STD()\n+    return JNI_FALSE;\n+}\n+\n+JNIEXPORT jfloat JNICALL Java_io_realm_internal_Table_nativeMixedAsFloat(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return 0;\n+    }\n+    try {\n+        return table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<float>();\n+    }\n+    CATCH_STD()\n+    return 0;\n+}\n+\n+JNIEXPORT jdouble JNICALL Java_io_realm_internal_Table_nativeMixedAsDouble(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return 0;\n+    }\n+    try {\n+        return table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<double>();\n+    }\n+    CATCH_STD()\n+    return 0;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_Table_nativeMixedAsString(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey) {\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return nullptr;\n+    }\n+    try {\n+        return to_jstring(env,\n+                table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<StringData>());\n+    }\n+    CATCH_STD()\n+    return nullptr;\n+\n+}\n+\n+JNIEXPORT jbyteArray JNICALL Java_io_realm_internal_Table_nativeMixedAsByteArray(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return nullptr;\n+    }\n+    try {\n+        realm::BinaryData bin = table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<BinaryData>();\n+        return JavaClassGlobalDef::new_byte_array(env, bin);\n+    }\n+    CATCH_STD()\n+\n+    return nullptr;\n+}\n+\n+JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeMixedAsTimestamp(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return 0;\n+    }\n+    try {\n+        return to_milliseconds(table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<Timestamp>());\n+    }\n+    CATCH_STD()\n+    return 0;\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_Table_nativeMixedAsObjectId(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return nullptr;\n+    }\n+    try {\n+        return to_jstring(env, table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<ObjectId>().to_string().data());\n+    }\n+    CATCH_STD()\n+    return nullptr;\n+}\n+\n+JNIEXPORT jlongArray JNICALL Java_io_realm_internal_Table_nativeMixedAsDecimal128(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        return nullptr;\n+    }\n+    try {\n+        Decimal128 decimal128 = table->get_object(ObjKey(rowKey)).get<Mixed>(ColKey(columnKey)).get<Decimal128>();\n+        RETURN_DECIMAL128_AS_JLONG_ARRAY__OR_NULL(decimal128)\n+    }\n+    CATCH_STD()\n+    return nullptr;\n+}\n+\n+JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeMixedIsNull(JNIEnv* env, jobject, jlong nativeTableRefPtr,\n+                                                                       jlong columnKey, jlong rowKey)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Mixed)) {\n+        // TODO: Throw exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba922799ddaf51b6c763807820afaf5e8b17e2c"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDQzMzM4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmJsonNullPrimaryKeyTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0MTozOFrOIHF1Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0MTozOFrOIHF1Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwNjUyMg==", "bodyText": "Are this block and the next not the same?", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r544306522", "createdAt": "2020-12-16T13:41:38Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmJsonNullPrimaryKeyTests.java", "diffHunk": "@@ -95,6 +97,15 @@ public void createObjectFromJson_primaryKey_isNull_fromJsonObject() throws JSONE\n             assertEquals(1, results.size());\n             assertEquals(Long.valueOf(secondaryFieldValue).longValue(), results.first().getId());\n             assertNull(results.first().getName());\n+\n+            // PrimaryKeyAsObjectId\n+        } else if (clazz.equals(PrimaryKeyAsUUID.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1989f8fc71867f75cd0861fc956fbdd634016b73"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDQzNDg1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmJsonNullPrimaryKeyTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0MTo1N1rOIHF2PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0MTo1N1rOIHF2PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwNjc0OQ==", "bodyText": "Also this one.", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r544306749", "createdAt": "2020-12-16T13:41:57Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmJsonNullPrimaryKeyTests.java", "diffHunk": "@@ -140,6 +160,15 @@ public void createOrUpdateObjectFromJson_primaryKey_isNull_updateFromJsonObject(\n             assertEquals(1, results.size());\n             assertEquals(Long.valueOf(secondaryFieldValue).longValue(), results.first().getId());\n             assertEquals(null, results.first().getName());\n+\n+            // PrimaryKeyAsObjectId\n+        } else if (clazz.equals(PrimaryKeyAsUUID.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1989f8fc71867f75cd0861fc956fbdd634016b73"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDQ2NTU5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/entities/AllJavaTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0ODowNFrOIHGH2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0ODowNFrOIHGH2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxMTI1Nw==", "bodyText": "Wrong naming? Is this supposed to be a Mixed field for UUID instead?", "url": "https://github.com/realm/realm-java/pull/7207#discussion_r544311257", "createdAt": "2020-12-16T13:48:04Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTest/java/io/realm/entities/AllJavaTypes.java", "diffHunk": "@@ -100,6 +105,8 @@\n     private byte[] fieldBinary;\n     private Decimal128 fieldDecimal128;\n     private ObjectId fieldObjectId;\n+    private UUID fieldUUID;\n+    private UUID fieldMixed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1989f8fc71867f75cd0861fc956fbdd634016b73"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 379, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}