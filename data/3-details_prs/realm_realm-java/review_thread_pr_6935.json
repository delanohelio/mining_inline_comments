{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNzI1ODEy", "number": 6935, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo0NzoxN1rOEEKU4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjo1NToxNlrOEEkCYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzk4OTQ2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushClientTest.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo0NzoxN1rOGhm_Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOToyNjozMlrOGhsnOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg5NDk0Nw==", "bodyText": "Any reason for not just letting an exception cause the test to fail. It will be easier to see what caused it if the exception is part of the report.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437894947", "createdAt": "2020-06-10T06:47:17Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushClientTest.kt", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.push\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.*\n+import io.realm.util.assertFailsWithErrorCode\n+import io.realm.util.blockingGetResult\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertFailsWith\n+import kotlin.test.assertTrue\n+import kotlin.test.fail\n+\n+private const val SERVICE_NAME = \"gcm\"      // it comes from the test server's gcm/config.json\n+private const val SAMPLE_TOKEN = \"fXXW6Qv0Tb2fgNf3pFOtqt:APA91bGs4YUXswCC2w8-X9tSdwo9-r6KwAeicP0FDJtBubyuFgorbAICNTftI4SbSSynvN0s-KVWXaGUo1eWuumkGJzFWngwuxQWWv5uolsfjidYz3kLEdiwWW0D_igtD5nRtYZu6gMW\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class PushClientTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice() {\n+        var allGood = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4NzEzMA==", "bodyText": "My intent was to make it visible that the code should not fail. I'm not a fan of tests without assertions. I will write it like this instead:\n        try {\n            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n        } catch (e: Exception) {\n            fail(e.message)\n        }\n\nThis way we can still see the reason why it failed if it does fail - which shouldn't.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437987130", "createdAt": "2020-06-10T09:26:32Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushClientTest.kt", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.push\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.*\n+import io.realm.util.assertFailsWithErrorCode\n+import io.realm.util.blockingGetResult\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertFailsWith\n+import kotlin.test.assertTrue\n+import kotlin.test.fail\n+\n+private const val SERVICE_NAME = \"gcm\"      // it comes from the test server's gcm/config.json\n+private const val SAMPLE_TOKEN = \"fXXW6Qv0Tb2fgNf3pFOtqt:APA91bGs4YUXswCC2w8-X9tSdwo9-r6KwAeicP0FDJtBubyuFgorbAICNTftI4SbSSynvN0s-KVWXaGUo1eWuumkGJzFWngwuxQWWv5uolsfjidYz3kLEdiwWW0D_igtD5nRtYZu6gMW\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class PushClientTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice() {\n+        var allGood = true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg5NDk0Nw=="}, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzk5MjMyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushClientTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo0ODoxNVrOGhnA3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo0ODoxNVrOGhnA3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg5NTM4OQ==", "bodyText": "Maybe add note on why this is something we need to have a test for.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437895389", "createdAt": "2020-06-10T06:48:15Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushClientTest.kt", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.push\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.*\n+import io.realm.util.assertFailsWithErrorCode\n+import io.realm.util.blockingGetResult\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertFailsWith\n+import kotlin.test.assertTrue\n+import kotlin.test.fail\n+\n+private const val SERVICE_NAME = \"gcm\"      // it comes from the test server's gcm/config.json\n+private const val SAMPLE_TOKEN = \"fXXW6Qv0Tb2fgNf3pFOtqt:APA91bGs4YUXswCC2w8-X9tSdwo9-r6KwAeicP0FDJtBubyuFgorbAICNTftI4SbSSynvN0s-KVWXaGUo1eWuumkGJzFWngwuxQWWv5uolsfjidYz3kLEdiwWW0D_igtD5nRtYZu6gMW\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class PushClientTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice() {\n+        var allGood = true\n+        try {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            allGood = false\n+        }\n+        assertTrue(allGood)\n+    }\n+\n+    @Test\n+    fun registerDevice_twice() {\n+        var allGood = true\n+        try {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzk5NTEwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushClientTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo0OToyMlrOGhnCnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo0OToyMlrOGhnCnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg5NTgzNw==", "bodyText": "Not needed. Should be thrown by assertFailsWithErrorCode.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437895837", "createdAt": "2020-06-10T06:49:22Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushClientTest.kt", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.push\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.*\n+import io.realm.util.assertFailsWithErrorCode\n+import io.realm.util.blockingGetResult\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertFailsWith\n+import kotlin.test.assertTrue\n+import kotlin.test.fail\n+\n+private const val SERVICE_NAME = \"gcm\"      // it comes from the test server's gcm/config.json\n+private const val SAMPLE_TOKEN = \"fXXW6Qv0Tb2fgNf3pFOtqt:APA91bGs4YUXswCC2w8-X9tSdwo9-r6KwAeicP0FDJtBubyuFgorbAICNTftI4SbSSynvN0s-KVWXaGUo1eWuumkGJzFWngwuxQWWv5uolsfjidYz3kLEdiwWW0D_igtD5nRtYZu6gMW\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class PushClientTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice() {\n+        var allGood = true\n+        try {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            allGood = false\n+        }\n+        assertTrue(allGood)\n+    }\n+\n+    @Test\n+    fun registerDevice_twice() {\n+        var allGood = true\n+        try {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            allGood = false\n+        }\n+        assertTrue(allGood)\n+    }\n+\n+    @Test\n+    fun registerDevice_throwsBecauseOfUnknownService() {\n+        assertFailsWithErrorCode(ErrorCode.SERVICE_NOT_FOUND) {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, \"asdf\").blockingGetResult()\n+            fail(\"should never reach this\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzk5ODk4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushClientTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo1MDo0NlrOGhnE_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo1MDo0NlrOGhnE_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg5NjQ0Nw==", "bodyText": "The test is called deregister, but calls registerDevice??", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437896447", "createdAt": "2020-06-10T06:50:46Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushClientTest.kt", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.push\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.*\n+import io.realm.util.assertFailsWithErrorCode\n+import io.realm.util.blockingGetResult\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertFailsWith\n+import kotlin.test.assertTrue\n+import kotlin.test.fail\n+\n+private const val SERVICE_NAME = \"gcm\"      // it comes from the test server's gcm/config.json\n+private const val SAMPLE_TOKEN = \"fXXW6Qv0Tb2fgNf3pFOtqt:APA91bGs4YUXswCC2w8-X9tSdwo9-r6KwAeicP0FDJtBubyuFgorbAICNTftI4SbSSynvN0s-KVWXaGUo1eWuumkGJzFWngwuxQWWv5uolsfjidYz3kLEdiwWW0D_igtD5nRtYZu6gMW\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class PushClientTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice() {\n+        var allGood = true\n+        try {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            allGood = false\n+        }\n+        assertTrue(allGood)\n+    }\n+\n+    @Test\n+    fun registerDevice_twice() {\n+        var allGood = true\n+        try {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            allGood = false\n+        }\n+        assertTrue(allGood)\n+    }\n+\n+    @Test\n+    fun registerDevice_throwsBecauseOfUnknownService() {\n+        assertFailsWithErrorCode(ErrorCode.SERVICE_NOT_FOUND) {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, \"asdf\").blockingGetResult()\n+            fail(\"should never reach this\")\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice_throwsBecauseOfLoggedOutUser() {\n+        user.logOut()\n+        assertFailsWithErrorCode(ErrorCode.SERVICE_UNKNOWN) {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+            fail(\"should never reach this\")\n+        }\n+    }\n+\n+    @Test\n+    fun deregisterDevice() {\n+        var allGood = true\n+        try {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODAwMTA5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushClientTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo1MTo0MFrOGhnGZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo1MTo0MFrOGhnGZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg5NjgwNg==", "bodyText": "Name of test seems off compared to what it actually does.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437896806", "createdAt": "2020-06-10T06:51:40Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushClientTest.kt", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.push\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.*\n+import io.realm.util.assertFailsWithErrorCode\n+import io.realm.util.blockingGetResult\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertFailsWith\n+import kotlin.test.assertTrue\n+import kotlin.test.fail\n+\n+private const val SERVICE_NAME = \"gcm\"      // it comes from the test server's gcm/config.json\n+private const val SAMPLE_TOKEN = \"fXXW6Qv0Tb2fgNf3pFOtqt:APA91bGs4YUXswCC2w8-X9tSdwo9-r6KwAeicP0FDJtBubyuFgorbAICNTftI4SbSSynvN0s-KVWXaGUo1eWuumkGJzFWngwuxQWWv5uolsfjidYz3kLEdiwWW0D_igtD5nRtYZu6gMW\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class PushClientTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice() {\n+        var allGood = true\n+        try {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            allGood = false\n+        }\n+        assertTrue(allGood)\n+    }\n+\n+    @Test\n+    fun registerDevice_twice() {\n+        var allGood = true\n+        try {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            allGood = false\n+        }\n+        assertTrue(allGood)\n+    }\n+\n+    @Test\n+    fun registerDevice_throwsBecauseOfUnknownService() {\n+        assertFailsWithErrorCode(ErrorCode.SERVICE_NOT_FOUND) {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, \"asdf\").blockingGetResult()\n+            fail(\"should never reach this\")\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice_throwsBecauseOfLoggedOutUser() {\n+        user.logOut()\n+        assertFailsWithErrorCode(ErrorCode.SERVICE_UNKNOWN) {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+            fail(\"should never reach this\")\n+        }\n+    }\n+\n+    @Test\n+    fun deregisterDevice() {\n+        var allGood = true\n+        try {\n+            user.pushNotifications.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            allGood = false\n+        }\n+        assertTrue(allGood)\n+    }\n+\n+    @Test\n+    fun deregisterDevice_twice() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODAxMDk3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo1NTozMVrOGhnMug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODo0NToxM1rOGhrD-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg5ODQyNg==", "bodyText": "Do not know if this is expensive, but you could just allocate it when needed. I image it to be quite common not always needing a PushClient or MongoClient.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437898426", "createdAt": "2020-06-10T06:55:31Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java", "diffHunk": "@@ -59,6 +60,8 @@\n     private ApiKeyAuth apiKeyAuthProvider = null;\n     private MongoClient mongoClient = null;\n     private Functions functions = null;\n+    private PushClient pushClient = null;\n+    private TaskDispatcher dispatcher = new TaskDispatcher();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk2MTcyMg==", "bodyText": "It only initialises an ExecutorService. But it makes sense to defer initialisation to when it's needed.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437961722", "createdAt": "2020-06-10T08:45:13Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java", "diffHunk": "@@ -59,6 +60,8 @@\n     private ApiKeyAuth apiKeyAuthProvider = null;\n     private MongoClient mongoClient = null;\n     private Functions functions = null;\n+    private PushClient pushClient = null;\n+    private TaskDispatcher dispatcher = new TaskDispatcher();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg5ODQyNg=="}, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODAyMDE5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo1ODo0N1rOGhnSQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo1ODo0N1rOGhnSQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg5OTg0Mw==", "bodyText": "I guess it will probably not lead to incorrect behavior, but could consider synchronizing to avoid creating multiple instance on races.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437899843", "createdAt": "2020-06-10T06:58:47Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java", "diffHunk": "@@ -505,10 +514,14 @@ public Functions getFunctions(CodecRegistry codecRegistry) {\n     }\n \n     /**\n-     * FIXME Add support for push notifications.\n+     * Returns the {@link PushClient} instance for allowing support for push notifications.\n      */\n-    Push getPush() {\n-        return null;\n+    public PushClient getPushNotifications() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODAyMzUyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo1OTo1N1rOGhnUXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo1OTo1N1rOGhnUXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwMDM4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the {@link PushClient} instance for allowing support for push notifications.\n          \n          \n            \n                 * Returns the {@link PushClient} instance for managing push notification registrations.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437900380", "createdAt": "2020-06-10T06:59:57Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java", "diffHunk": "@@ -505,10 +514,14 @@ public Functions getFunctions(CodecRegistry codecRegistry) {\n     }\n \n     /**\n-     * FIXME Add support for push notifications.\n+     * Returns the {@link PushClient} instance for allowing support for push notifications.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODI0NTI3OnYy", "diffSide": "RIGHT", "path": "tools/sync_test_server/setup_mongodb_realm.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODowMzo1NlrOGhpf_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODozOToxMlrOGhq1ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzNjEyNQ==", "bodyText": "Is it safe to have these here, or should we move them to a local environment variable?", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437936125", "createdAt": "2020-06-10T08:03:56Z", "author": {"login": "rorbech"}, "path": "tools/sync_test_server/setup_mongodb_realm.sh", "diffHunk": "@@ -59,6 +59,14 @@ stitch-cli secrets add \\\n                   --base-url=http://localhost:9090 \\\n                   --config-path=/tmp/stitch-config\n \n+#    - b) Firebase Cloud Messaging: create your own app and paste the \"server key\" here\n+stitch-cli secrets add \\\n+                  --name=\"FCM\" \\\n+                  --value=\"AAAAQLogIEA:APA91bGq5nvqcwR0NE3aQKADal14gP9sFS9MJ28JFqXeJ8h8kffHUaQ2GnpWFzbPRRCQn4P2Ux_HGTWJ9xxgZUmkv-Stcl4-Nbj3vcLOQP253wdzsQsc3dSIDKG53eWxTXWMr0_uleAE\" \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1ODA1MQ==", "bodyText": "I'm silly, I don't know why I didn't remove them. They were needed only for me to test the actual push. They aren't needed for testing the registration though. I will remove them.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437958051", "createdAt": "2020-06-10T08:39:12Z", "author": {"login": "edualonso"}, "path": "tools/sync_test_server/setup_mongodb_realm.sh", "diffHunk": "@@ -59,6 +59,14 @@ stitch-cli secrets add \\\n                   --base-url=http://localhost:9090 \\\n                   --config-path=/tmp/stitch-config\n \n+#    - b) Firebase Cloud Messaging: create your own app and paste the \"server key\" here\n+stitch-cli secrets add \\\n+                  --name=\"FCM\" \\\n+                  --value=\"AAAAQLogIEA:APA91bGq5nvqcwR0NE3aQKADal14gP9sFS9MJ28JFqXeJ8h8kffHUaQ2GnpWFzbPRRCQn4P2Ux_HGTWJ9xxgZUmkv-Stcl4-Nbj3vcLOQP253wdzsQsc3dSIDKG53eWxTXWMr0_uleAE\" \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzNjEyNQ=="}, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODI1Nzk2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/push/PushClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODowNzoxM1rOGhpn9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODowNzoxM1rOGhpn9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzODE2Nw==", "bodyText": "According to the decision log this should be Push, so maybe check up on the naming.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437938167", "createdAt": "2020-06-10T08:07:13Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/push/PushClient.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb.push;\n+\n+import com.google.android.gms.tasks.Task;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.realm.annotations.Beta;\n+import io.realm.internal.common.TaskDispatcher;\n+import io.realm.internal.jni.OsJNIVoidResultCallback;\n+import io.realm.internal.network.ResultHandler;\n+import io.realm.internal.objectstore.OsPushClient;\n+import io.realm.mongodb.AppException;\n+\n+/**\n+ * The PushClient allows to register/deregister for push notifications from a client app.\n+ */\n+@Beta\n+public abstract class PushClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODI4OTQ3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/push/PushClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoxNToyOFrOGhp7kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODo0OTo0MFrOGhrOsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0MzE4Ng==", "bodyText": "Since there is not results involved here, we could might as well go directly for RealmAsyncTask. But then we would probably need both a sync and async. Maybe just tag it with a TODO linking it to the task of aligning async API for now!?", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437943186", "createdAt": "2020-06-10T08:15:28Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/push/PushClient.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb.push;\n+\n+import com.google.android.gms.tasks.Task;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.realm.annotations.Beta;\n+import io.realm.internal.common.TaskDispatcher;\n+import io.realm.internal.jni.OsJNIVoidResultCallback;\n+import io.realm.internal.network.ResultHandler;\n+import io.realm.internal.objectstore.OsPushClient;\n+import io.realm.mongodb.AppException;\n+\n+/**\n+ * The PushClient allows to register/deregister for push notifications from a client app.\n+ */\n+@Beta\n+public abstract class PushClient {\n+\n+    private final TaskDispatcher dispatcher;\n+    private final OsPushClient osPushClient;\n+\n+    public PushClient(final OsPushClient osPushClient, TaskDispatcher dispatcher) {\n+        this.osPushClient = osPushClient;\n+        this.dispatcher = dispatcher;\n+    }\n+\n+    /**\n+     * Registers the given FCM registration token with the currently logged in user's\n+     * device on MongoDB Realm.\n+     *\n+     * @param registrationToken the registration token to register.\n+     * @return A {@link Task} that completes when the registration is finished.\n+     */\n+    public Task<Void> registerDevice(String registrationToken, String serviceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk2NDQ2Ng==", "bodyText": "I thought of that, but that would be a divergence between the Mongo client and this. I think it's best to stick to Task and once we have our framework ready, move all to use it. Until then, the API still respects the original Stitch contract. I will add a TODO pointing at the task for async rework in any case.", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r437964466", "createdAt": "2020-06-10T08:49:40Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/push/PushClient.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb.push;\n+\n+import com.google.android.gms.tasks.Task;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.realm.annotations.Beta;\n+import io.realm.internal.common.TaskDispatcher;\n+import io.realm.internal.jni.OsJNIVoidResultCallback;\n+import io.realm.internal.network.ResultHandler;\n+import io.realm.internal.objectstore.OsPushClient;\n+import io.realm.mongodb.AppException;\n+\n+/**\n+ * The PushClient allows to register/deregister for push notifications from a client app.\n+ */\n+@Beta\n+public abstract class PushClient {\n+\n+    private final TaskDispatcher dispatcher;\n+    private final OsPushClient osPushClient;\n+\n+    public PushClient(final OsPushClient osPushClient, TaskDispatcher dispatcher) {\n+        this.osPushClient = osPushClient;\n+        this.dispatcher = dispatcher;\n+    }\n+\n+    /**\n+     * Registers the given FCM registration token with the currently logged in user's\n+     * device on MongoDB Realm.\n+     *\n+     * @param registrationToken the registration token to register.\n+     * @return A {@link Task} that completes when the registration is finished.\n+     */\n+    public Task<Void> registerDevice(String registrationToken, String serviceName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0MzE4Ng=="}, "originalCommit": {"oid": "de16065b8c670c535758d54287e83abb852f097b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTE2Nzg3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjozNDowNlrOGhyodg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjozNDowNlrOGhyodg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NTc1MA==", "bodyText": "This isn't needed... an uncaught exception will fail the test", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r438085750", "createdAt": "2020-06-10T12:34:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushTest.kt", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.push\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.ErrorCode\n+import io.realm.mongodb.User\n+import io.realm.mongodb.close\n+import io.realm.mongodb.registerUserAndLogin\n+import io.realm.util.assertFailsWithErrorCode\n+import io.realm.util.blockingGetResult\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.fail\n+\n+private const val SERVICE_NAME = \"gcm\"      // it comes from the test server's gcm/config.json\n+private const val SAMPLE_TOKEN = \"fXXW6Qv0Tb2fgNf3pFOtqt:APA91bGs4YUXswCC2w8-X9tSdwo9-r6KwAeicP0FDJtBubyuFgorbAICNTftI4SbSSynvN0s-KVWXaGUo1eWuumkGJzFWngwuxQWWv5uolsfjidYz3kLEdiwWW0D_igtD5nRtYZu6gMW\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class PushTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice() {\n+        try {\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            fail(e.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236c0eff6e9872fb84d78aca2f84034c86503240"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTE2OTEwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjozNDozMlrOGhypQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjozNDozMlrOGhypQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NTk1NQ==", "bodyText": "Unnecessary", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r438085955", "createdAt": "2020-06-10T12:34:32Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushTest.kt", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.push\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.ErrorCode\n+import io.realm.mongodb.User\n+import io.realm.mongodb.close\n+import io.realm.mongodb.registerUserAndLogin\n+import io.realm.util.assertFailsWithErrorCode\n+import io.realm.util.blockingGetResult\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.fail\n+\n+private const val SERVICE_NAME = \"gcm\"      // it comes from the test server's gcm/config.json\n+private const val SAMPLE_TOKEN = \"fXXW6Qv0Tb2fgNf3pFOtqt:APA91bGs4YUXswCC2w8-X9tSdwo9-r6KwAeicP0FDJtBubyuFgorbAICNTftI4SbSSynvN0s-KVWXaGUo1eWuumkGJzFWngwuxQWWv5uolsfjidYz3kLEdiwWW0D_igtD5nRtYZu6gMW\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class PushTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice() {\n+        try {\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            fail(e.toString())\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice_twice() {\n+        // the API allows registering/deregistering twice, just checking we don't get errors\n+        try {\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            fail(e.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236c0eff6e9872fb84d78aca2f84034c86503240"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTE3MjY3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjozNTozM1rOGhyrbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjozNTozM1rOGhyrbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NjUwOQ==", "bodyText": "Unnecessary", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r438086509", "createdAt": "2020-06-10T12:35:33Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushTest.kt", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.push\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.ErrorCode\n+import io.realm.mongodb.User\n+import io.realm.mongodb.close\n+import io.realm.mongodb.registerUserAndLogin\n+import io.realm.util.assertFailsWithErrorCode\n+import io.realm.util.blockingGetResult\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.fail\n+\n+private const val SERVICE_NAME = \"gcm\"      // it comes from the test server's gcm/config.json\n+private const val SAMPLE_TOKEN = \"fXXW6Qv0Tb2fgNf3pFOtqt:APA91bGs4YUXswCC2w8-X9tSdwo9-r6KwAeicP0FDJtBubyuFgorbAICNTftI4SbSSynvN0s-KVWXaGUo1eWuumkGJzFWngwuxQWWv5uolsfjidYz3kLEdiwWW0D_igtD5nRtYZu6gMW\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class PushTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice() {\n+        try {\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            fail(e.toString())\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice_twice() {\n+        // the API allows registering/deregistering twice, just checking we don't get errors\n+        try {\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            fail(e.toString())\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice_throwsBecauseOfUnknownService() {\n+        assertFailsWithErrorCode(ErrorCode.SERVICE_NOT_FOUND) {\n+            user.push.registerDevice(SAMPLE_TOKEN, \"asdf\").blockingGetResult()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice_throwsBecauseOfLoggedOutUser() {\n+        user.logOut()\n+        assertFailsWithErrorCode(ErrorCode.SERVICE_UNKNOWN) {\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        }\n+    }\n+\n+    @Test\n+    fun deregisterDevice() {\n+        try {\n+            user.push.deregisterDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            fail(e.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236c0eff6e9872fb84d78aca2f84034c86503240"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTE3MzIzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjozNTo0MFrOGhyrsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjozNTo0MFrOGhyrsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NjU3OQ==", "bodyText": "Unnecessary", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r438086579", "createdAt": "2020-06-10T12:35:40Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushTest.kt", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.push\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.ErrorCode\n+import io.realm.mongodb.User\n+import io.realm.mongodb.close\n+import io.realm.mongodb.registerUserAndLogin\n+import io.realm.util.assertFailsWithErrorCode\n+import io.realm.util.blockingGetResult\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.fail\n+\n+private const val SERVICE_NAME = \"gcm\"      // it comes from the test server's gcm/config.json\n+private const val SAMPLE_TOKEN = \"fXXW6Qv0Tb2fgNf3pFOtqt:APA91bGs4YUXswCC2w8-X9tSdwo9-r6KwAeicP0FDJtBubyuFgorbAICNTftI4SbSSynvN0s-KVWXaGUo1eWuumkGJzFWngwuxQWWv5uolsfjidYz3kLEdiwWW0D_igtD5nRtYZu6gMW\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class PushTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice() {\n+        try {\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            fail(e.toString())\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice_twice() {\n+        // the API allows registering/deregistering twice, just checking we don't get errors\n+        try {\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            fail(e.toString())\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice_throwsBecauseOfUnknownService() {\n+        assertFailsWithErrorCode(ErrorCode.SERVICE_NOT_FOUND) {\n+            user.push.registerDevice(SAMPLE_TOKEN, \"asdf\").blockingGetResult()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice_throwsBecauseOfLoggedOutUser() {\n+        user.logOut()\n+        assertFailsWithErrorCode(ErrorCode.SERVICE_UNKNOWN) {\n+            user.push.registerDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        }\n+    }\n+\n+    @Test\n+    fun deregisterDevice() {\n+        try {\n+            user.push.deregisterDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            fail(e.toString())\n+        }\n+    }\n+\n+    @Test\n+    fun deregisterDevice_twice() {\n+        // the API allows registering/deregistering twice, just checking we don't get errors\n+        try {\n+            user.push.deregisterDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+            user.push.deregisterDevice(SAMPLE_TOKEN, SERVICE_NAME).blockingGetResult()\n+        } catch (e: Exception) {\n+            fail(e.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236c0eff6e9872fb84d78aca2f84034c86503240"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTE5NDcxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/push/Push.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo0MTozM1rOGhy49g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo0MTozM1rOGhy49g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4OTk3NA==", "bodyText": "IMO we should use the registerDevice/registerDeviceAsync pattern just like for Functions instead of the Task interface. Or is there a reason you opted for the Task here?\nUsing the Task pattern requires people to bring their own threading and we just kept it for the Mongo API's as we assumed people would already have infrastructure in place for those legacy API's, but IMO the sync/async pattern is easier to consume for new users.\nThoughts?", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r438089974", "createdAt": "2020-06-10T12:41:33Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/push/Push.java", "diffHunk": "@@ -15,11 +15,60 @@\n  */\n package io.realm.mongodb.push;\n \n+import com.google.android.gms.tasks.Task;\n+\n+import java.util.concurrent.Callable;\n+\n import io.realm.annotations.Beta;\n+import io.realm.internal.common.TaskDispatcher;\n+import io.realm.internal.objectstore.OsPush;\n \n /**\n- * FIXME: Add Javadoc and implementation\n+ * The Push client allows to register/deregister for push notifications from a client app.\n  */\n @Beta\n-public class Push {\n+public abstract class Push {\n+\n+    private final TaskDispatcher dispatcher;\n+    private final OsPush osPush;\n+\n+    public Push(final OsPush osPush, TaskDispatcher dispatcher) {\n+        this.osPush = osPush;\n+        this.dispatcher = dispatcher;\n+    }\n+\n+    // TODO: Task vs RealmAsyncTask - https://github.com/realm/realm-java/issues/6914\n+    /**\n+     * Registers the given FCM registration token with the currently logged in user's\n+     * device on MongoDB Realm.\n+     *\n+     * @param registrationToken the registration token to register.\n+     * @return A {@link Task} that completes when the registration is finished.\n+     */\n+    public Task<Void> registerDevice(String registrationToken, String serviceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236c0eff6e9872fb84d78aca2f84034c86503240"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTIwNTQyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsPush.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo0NDozNVrOGhzAEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo0NDozNVrOGhzAEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5MTc5Mg==", "bodyText": "It shouldn't take the current user, the user should be provided as an argument", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r438091792", "createdAt": "2020-06-10T12:44:35Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsPush.cpp", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"io_realm_internal_objectstore_OsPush.h\"\n+\n+#include \"java_class_global_def.hpp\"\n+#include \"java_network_transport.hpp\"\n+#include \"util.hpp\"\n+#include \"jni_util/java_method.hpp\"\n+#include \"jni_util/jni_utils.hpp\"\n+\n+#include <realm/util/optional.hpp>\n+#include <sync/app.hpp>\n+#include <jni.h>\n+\n+using namespace realm;\n+using namespace realm::app;\n+using namespace realm::bson;\n+using namespace realm::jni_util;\n+using namespace realm::_impl;\n+\n+static void finalize_push_client(jlong ptr) {\n+    delete reinterpret_cast<PushClient*>(ptr);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_io_realm_internal_objectstore_OsPush_nativeGetFinalizerMethodPtr(JNIEnv*, jclass) {\n+    return reinterpret_cast<jlong>(&finalize_push_client);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_io_realm_internal_objectstore_OsPush_nativeRegisterDevice(JNIEnv *env,\n+                                                               jclass,\n+                                                               jlong j_app_ptr,\n+                                                               jstring j_service_name,\n+                                                               jstring j_registration_token,\n+                                                               jobject j_callback) {\n+    try {\n+        std::shared_ptr<App> &app = *reinterpret_cast<std::shared_ptr<App> *>(j_app_ptr);\n+\n+        JStringAccessor service_name(env, j_service_name);\n+        JStringAccessor registration_token(env, j_registration_token);\n+\n+        app->push_notification_client(service_name)\n+                .register_device(registration_token,\n+                                 app->current_user(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "252168d1e47b418e334be74ea5a0f7033f34040b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTIwNTg1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsPush.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo0NDo0NFrOGhzAWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo0NDo0NFrOGhzAWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5MTg2Nw==", "bodyText": "It shouldn't take the current user, the user should be provided as an argument", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r438091867", "createdAt": "2020-06-10T12:44:44Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsPush.cpp", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"io_realm_internal_objectstore_OsPush.h\"\n+\n+#include \"java_class_global_def.hpp\"\n+#include \"java_network_transport.hpp\"\n+#include \"util.hpp\"\n+#include \"jni_util/java_method.hpp\"\n+#include \"jni_util/jni_utils.hpp\"\n+\n+#include <realm/util/optional.hpp>\n+#include <sync/app.hpp>\n+#include <jni.h>\n+\n+using namespace realm;\n+using namespace realm::app;\n+using namespace realm::bson;\n+using namespace realm::jni_util;\n+using namespace realm::_impl;\n+\n+static void finalize_push_client(jlong ptr) {\n+    delete reinterpret_cast<PushClient*>(ptr);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_io_realm_internal_objectstore_OsPush_nativeGetFinalizerMethodPtr(JNIEnv*, jclass) {\n+    return reinterpret_cast<jlong>(&finalize_push_client);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_io_realm_internal_objectstore_OsPush_nativeRegisterDevice(JNIEnv *env,\n+                                                               jclass,\n+                                                               jlong j_app_ptr,\n+                                                               jstring j_service_name,\n+                                                               jstring j_registration_token,\n+                                                               jobject j_callback) {\n+    try {\n+        std::shared_ptr<App> &app = *reinterpret_cast<std::shared_ptr<App> *>(j_app_ptr);\n+\n+        JStringAccessor service_name(env, j_service_name);\n+        JStringAccessor registration_token(env, j_registration_token);\n+\n+        app->push_notification_client(service_name)\n+                .register_device(registration_token,\n+                                 app->current_user(),\n+                                 JavaNetworkTransport::create_void_callback(env, j_callback));\n+    }\n+    CATCH_STD()\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_io_realm_internal_objectstore_OsPush_nativeDeregisterDevice(JNIEnv *env,\n+                                                                 jclass,\n+                                                                 jlong j_app_ptr,\n+                                                                 jstring j_service_name,\n+                                                                 jstring j_registration_token,\n+                                                                 jobject j_callback) {\n+    try {\n+        std::shared_ptr<App> &app = *reinterpret_cast<std::shared_ptr<App> *>(j_app_ptr);\n+\n+        JStringAccessor service_name(env, j_service_name);\n+        JStringAccessor registration_token(env, j_registration_token);\n+\n+        app->push_notification_client(service_name)\n+                .deregister_device(registration_token,\n+                                   app->current_user(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "252168d1e47b418e334be74ea5a0f7033f34040b"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjIwMTkzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjo1NToxNlrOGiQvbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjo1NToxNlrOGiQvbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3OTA1NQ==", "bodyText": "Nitpick, but you can use\nfun registerDeviceAsync = looperThread.runBlocking {\n\n}\n\nSyntax to save a few lines in these cases", "url": "https://github.com/realm/realm-java/pull/6935#discussion_r438579055", "createdAt": "2020-06-11T06:55:16Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/push/PushTest.kt", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.push\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.ErrorCode\n+import io.realm.mongodb.User\n+import io.realm.mongodb.close\n+import io.realm.mongodb.registerUserAndLogin\n+import io.realm.rule.BlockingLooperThread\n+import io.realm.util.assertFailsWithErrorCode\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertFailsWith\n+\n+private const val SERVICE_NAME = \"gcm\"      // it comes from the test server's gcm/config.json\n+private const val SAMPLE_TOKEN = \"fXXW6Qv0Tb2fgNf3pFOtqt:APA91bGs4YUXswCC2w8-X9tSdwo9-r6KwAeicP0FDJtBubyuFgorbAICNTftI4SbSSynvN0s-KVWXaGUo1eWuumkGJzFWngwuxQWWv5uolsfjidYz3kLEdiwWW0D_igtD5nRtYZu6gMW\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class PushTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+\n+    private val looperThread = BlockingLooperThread()\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice() {\n+        user.getPush(SERVICE_NAME).registerDevice(SAMPLE_TOKEN)\n+    }\n+\n+    @Test\n+    fun registerDevice_twice() {\n+        // the API allows registering/deregistering twice, just checking we don't get errors\n+        user.getPush(SERVICE_NAME).registerDevice(SAMPLE_TOKEN)\n+        user.getPush(SERVICE_NAME).registerDevice(SAMPLE_TOKEN)\n+    }\n+\n+    @Test\n+    fun registerDevice_throwsBecauseOfUnknownService() {\n+        assertFailsWithErrorCode(ErrorCode.SERVICE_NOT_FOUND) {\n+            user.getPush(\"asdf\").registerDevice(SAMPLE_TOKEN)\n+        }\n+    }\n+\n+    @Test\n+    fun registerDevice_throwsBecauseOfLoggedOutUser() {\n+        user.logOut()\n+        assertFailsWithErrorCode(ErrorCode.SERVICE_UNKNOWN) {\n+            user.getPush(SERVICE_NAME).registerDevice(SAMPLE_TOKEN)\n+        }\n+    }\n+\n+    @Test\n+    fun registerDeviceAsync() {\n+        looperThread.runBlocking {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1a807af030aafb609921690051678d2d300ef4"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 753, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}