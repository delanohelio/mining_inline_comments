{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNzE3NjIz", "number": 6779, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMDo1NVrODpgAmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyODo0MlrODp2Vtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQyNjUxOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppExt.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMDo1NlrOF4tqjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMDo1NlrOF4tqjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMjc1MA==", "bodyText": "Close should be responsible for freeing resources, the init should happens in the init part (or at setup).\nI think you're even doing this in initializeMongoDbRealm", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395012750", "createdAt": "2020-03-19T13:10:56Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppExt.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+\n+/**\n+ * Resets the Realm Application and delete all local state.\n+ *\n+ * Trying to access any Sync or Realm App API's after this has been called has undefined\n+ * behavior.\n+ */\n+fun RealmApp.close() {\n+    // TODO Do we need to log out users?\n+    SyncManager.reset()\n+    BaseRealm.applicationContext = null // Required for Realm.init() to work\n+    Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30519959e43a537deaeca3db177b1baed54e66de"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTMwOTYzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjozMDo0M1rOF42l7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjozMDo0M1rOF42l7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1OTAyMw==", "bodyText": "keepStrongReference is not nullable no need for the double bang. Same below", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395159023", "createdAt": "2020-03-19T16:30:43Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.rule\n+\n+import android.os.Handler\n+import android.os.Looper\n+import io.realm.TestHelper\n+import io.realm.TestHelper.LooperTest\n+import io.realm.internal.android.AndroidCapabilities\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.runners.model.MultipleFailureException\n+import java.io.Closeable\n+import java.io.PrintStream\n+import java.util.*\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.locks.ReentrantLock\n+import kotlin.collections.ArrayList\n+\n+/**\n+ * Helper class that makes it easier to run a piece of code inside a Looper Thread. This is done by\n+ * calling the `run` method. This method will block until the Looper either completes or throws\n+ * an exception.\n+ *\n+ * Usage:\n+ * ```\n+ * @get:Rule\n+ * val lopperThread = LooperThreadTest()\n+ *\n+ * @Before\n+ * fun setUp() {\n+ *     // Runs before test\n+ * }\n+ *\n+ * @After\n+ * fun tearDown() {\n+ *     // Runs after test completed or failed\n+ * }\n+ *\n+ * @Test\n+ * fun myTest() = looperThread.run {\n+ *     // test code\n+ * }\n+ * ```\n+ */\n+class BlockingLooperThread {\n+    // lock protecting objects shared with the test thread\n+    private val lock = ReentrantLock()\n+    private var condition: CountDownLatch = CountDownLatch(1)\n+\n+    // Thread safe\n+    private val signalTestCompleted = CountDownLatch(1)\n+\n+    // Access guarded by 'lock'\n+    private var backgroundHandler: Handler? = null\n+\n+    // the variables created inside the test are local and eligible for GC.\n+    // but sometimes we need the variables to survive across different Looper\n+    // events (Callbacks happening in the future), so we add a strong reference\n+    // to them for the duration of the test.\n+    // Access guarded by 'lock'\n+    private var keepStrongReference = ArrayList<Any>()\n+\n+    // List of closable resources that will be automatically closed when the test finishes.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private var closableResources = ArrayList<Closeable>()\n+\n+    // Runnable guaranteed to trigger after the test either succeeded or failed.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private val runAfterTestIsComplete = ArrayList<Runnable>()\n+\n+    /**\n+     * Runs the test on a Looper thread\n+     */\n+    fun runBlocking(threadName: String = \"TestLooperThread\", emulateMainThread: Boolean = false, test: () -> Unit) {\n+        RunInLooperThreadStatement(threadName, emulateMainThread, test).evaluate()\n+    }\n+\n+    /**\n+     * Hold a reference to an object, to prevent it from being GCed,\n+     * until after the test completes.\n+     *\n+     * Accessed only from the main thread, here, but synchronized in case it is called from within a test.\n+     */\n+    fun keepStrongReference(obj: Any) {\n+        synchronized(lock) { keepStrongReference!!.add(obj) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a208c63f73631e374bc46d506cd4f0d24a9e467a"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTMxMDYyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjozMDo1OFrOF42mnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjozMDo1OFrOF42mnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1OTE5Nw==", "bodyText": "ditto", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395159197", "createdAt": "2020-03-19T16:30:58Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.rule\n+\n+import android.os.Handler\n+import android.os.Looper\n+import io.realm.TestHelper\n+import io.realm.TestHelper.LooperTest\n+import io.realm.internal.android.AndroidCapabilities\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.runners.model.MultipleFailureException\n+import java.io.Closeable\n+import java.io.PrintStream\n+import java.util.*\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.locks.ReentrantLock\n+import kotlin.collections.ArrayList\n+\n+/**\n+ * Helper class that makes it easier to run a piece of code inside a Looper Thread. This is done by\n+ * calling the `run` method. This method will block until the Looper either completes or throws\n+ * an exception.\n+ *\n+ * Usage:\n+ * ```\n+ * @get:Rule\n+ * val lopperThread = LooperThreadTest()\n+ *\n+ * @Before\n+ * fun setUp() {\n+ *     // Runs before test\n+ * }\n+ *\n+ * @After\n+ * fun tearDown() {\n+ *     // Runs after test completed or failed\n+ * }\n+ *\n+ * @Test\n+ * fun myTest() = looperThread.run {\n+ *     // test code\n+ * }\n+ * ```\n+ */\n+class BlockingLooperThread {\n+    // lock protecting objects shared with the test thread\n+    private val lock = ReentrantLock()\n+    private var condition: CountDownLatch = CountDownLatch(1)\n+\n+    // Thread safe\n+    private val signalTestCompleted = CountDownLatch(1)\n+\n+    // Access guarded by 'lock'\n+    private var backgroundHandler: Handler? = null\n+\n+    // the variables created inside the test are local and eligible for GC.\n+    // but sometimes we need the variables to survive across different Looper\n+    // events (Callbacks happening in the future), so we add a strong reference\n+    // to them for the duration of the test.\n+    // Access guarded by 'lock'\n+    private var keepStrongReference = ArrayList<Any>()\n+\n+    // List of closable resources that will be automatically closed when the test finishes.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private var closableResources = ArrayList<Closeable>()\n+\n+    // Runnable guaranteed to trigger after the test either succeeded or failed.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private val runAfterTestIsComplete = ArrayList<Runnable>()\n+\n+    /**\n+     * Runs the test on a Looper thread\n+     */\n+    fun runBlocking(threadName: String = \"TestLooperThread\", emulateMainThread: Boolean = false, test: () -> Unit) {\n+        RunInLooperThreadStatement(threadName, emulateMainThread, test).evaluate()\n+    }\n+\n+    /**\n+     * Hold a reference to an object, to prevent it from being GCed,\n+     * until after the test completes.\n+     *\n+     * Accessed only from the main thread, here, but synchronized in case it is called from within a test.\n+     */\n+    fun keepStrongReference(obj: Any) {\n+        synchronized(lock) { keepStrongReference!!.add(obj) }\n+    }\n+\n+    /**\n+     * Add a closable resource which this test will guarantee to call [Closeable.close] on\n+     * when the tests is done.\n+     *\n+     * @param closeable [Closeable] to close.\n+     */\n+    fun closeAfterTest(closeable: Closeable) {\n+        synchronized(lock) { closableResources!!.add(closeable) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a208c63f73631e374bc46d506cd4f0d24a9e467a"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTg2ODU0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1NzoxOVrOF48QOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1NzoxOVrOF48QOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTc2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import io.realm.log.RealmLog", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395251769", "createdAt": "2020-03-19T18:57:19Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt", "diffHunk": "@@ -16,19 +16,31 @@\n package io.realm\n \n import androidx.test.ext.junit.runners.AndroidJUnit4\n-import org.junit.Assert.assertNotNull\n+import io.realm.log.RealmLog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTg2OTMwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1NzozM1rOF48QtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1NzozM1rOF48QtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTg5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.junit.Rule", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395251892", "createdAt": "2020-03-19T18:57:33Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt", "diffHunk": "@@ -16,19 +16,31 @@\n package io.realm\n \n import androidx.test.ext.junit.runners.AndroidJUnit4\n-import org.junit.Assert.assertNotNull\n+import io.realm.log.RealmLog\n+import io.realm.rule.BlockingLooperThread\n+import io.realm.rule.RunInLooperThread\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.After\n+import org.junit.Assert.*\n import org.junit.Before\n+import org.junit.Rule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTk2MTg1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0NTozOVrOF5QjTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0NTozOVrOF5QjTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4NDMzMg==", "bodyText": "The annotation is not needed for usage", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395584332", "createdAt": "2020-03-20T11:45:39Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.rule\n+\n+import android.os.Handler\n+import android.os.Looper\n+import io.realm.TestHelper\n+import io.realm.TestHelper.LooperTest\n+import io.realm.internal.android.AndroidCapabilities\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.runners.model.MultipleFailureException\n+import java.io.Closeable\n+import java.io.PrintStream\n+import java.util.*\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.locks.ReentrantLock\n+import kotlin.collections.ArrayList\n+\n+/**\n+ * Helper class that makes it easier to run a piece of code inside a Looper Thread. This is done by\n+ * calling the `run` method. This method will block until the Looper either completes or throws\n+ * an exception.\n+ *\n+ * Usage:\n+ * ```\n+ * @get:Rule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTk2NjY2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0NzozNVrOF5QmUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0NzozNVrOF5QmUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4NTEwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                condition.await(5*1000, TimeUnit.MILLISECONDS)\n          \n          \n            \n                                condition.await(5, TimeUnit.SECONDS)", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395585107", "createdAt": "2020-03-20T11:47:35Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/rule/BlockingLooperThread.kt", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.rule\n+\n+import android.os.Handler\n+import android.os.Looper\n+import io.realm.TestHelper\n+import io.realm.TestHelper.LooperTest\n+import io.realm.internal.android.AndroidCapabilities\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.runners.model.MultipleFailureException\n+import java.io.Closeable\n+import java.io.PrintStream\n+import java.util.*\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.locks.ReentrantLock\n+import kotlin.collections.ArrayList\n+\n+/**\n+ * Helper class that makes it easier to run a piece of code inside a Looper Thread. This is done by\n+ * calling the `run` method. This method will block until the Looper either completes or throws\n+ * an exception.\n+ *\n+ * Usage:\n+ * ```\n+ * @get:Rule\n+ * val lopperThread = LooperThreadTest()\n+ *\n+ * @Before\n+ * fun setUp() {\n+ *     // Runs before test\n+ * }\n+ *\n+ * @After\n+ * fun tearDown() {\n+ *     // Runs after test completed or failed\n+ * }\n+ *\n+ * @Test\n+ * fun myTest() = looperThread.run {\n+ *     // test code\n+ * }\n+ * ```\n+ */\n+class BlockingLooperThread {\n+    // lock protecting objects shared with the test thread\n+    private val lock = ReentrantLock()\n+    private var condition: CountDownLatch = CountDownLatch(1)\n+\n+    // Thread safe\n+    private val signalTestCompleted = CountDownLatch(1)\n+\n+    // Access guarded by 'lock'\n+    private var backgroundHandler: Handler? = null\n+\n+    // the variables created inside the test are local and eligible for GC.\n+    // but sometimes we need the variables to survive across different Looper\n+    // events (Callbacks happening in the future), so we add a strong reference\n+    // to them for the duration of the test.\n+    // Access guarded by 'lock'\n+    private var keepStrongReference = ArrayList<Any>()\n+\n+    // List of closable resources that will be automatically closed when the test finishes.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private var closableResources = ArrayList<Closeable>()\n+\n+    // Runnable guaranteed to trigger after the test either succeeded or failed.\n+    // These will run before any methods marked with `@After`.\n+    // Access guarded by 'lock'\n+    private val runAfterTestIsComplete = ArrayList<Runnable>()\n+\n+    /**\n+     * Runs the test on a Looper thread\n+     */\n+    fun runBlocking(threadName: String = \"TestLooperThread\", emulateMainThread: Boolean = false, test: () -> Unit) {\n+        RunInLooperThreadStatement(threadName, emulateMainThread, test).evaluate()\n+    }\n+\n+    /**\n+     * Hold a reference to an object, to prevent it from being GCed,\n+     * until after the test completes.\n+     *\n+     * Accessed only from the main thread, here, but synchronized in case it is called from within a test.\n+     */\n+    fun keepStrongReference(obj: Any) {\n+        synchronized(lock) { keepStrongReference!!.add(obj) }\n+    }\n+\n+    /**\n+     * Add a closable resource which this test will guarantee to call [Closeable.close] on\n+     * when the tests is done.\n+     *\n+     * @param closeable [Closeable] to close.\n+     */\n+    fun closeAfterTest(closeable: Closeable) {\n+        synchronized(lock) { closableResources!!.add(closeable) }\n+    }\n+\n+    /**\n+     * Posts a runnable to the currently running looper.\n+     */\n+    fun postRunnable(runnable: Runnable) {\n+        getBackgroundHandler().post(runnable)\n+    }\n+\n+    /**\n+     * Posts a runnable to this worker threads looper with a delay in milli second.\n+     */\n+    fun postRunnableDelayed(runnable: Runnable, delayMillis: Long) {\n+        getBackgroundHandler().postDelayed(runnable, delayMillis)\n+    }\n+\n+    /**\n+     * Signal that the test has completed.\n+     */\n+    fun testComplete() {\n+        // Close all resources and run any after test tasks\n+        // Post as runnable to ensure that this code runs on the correct thread.\n+        postRunnable(Runnable { closeTestResources() })\n+    }\n+\n+    /**\n+     * Internal logic for shutting down a test.\n+     */\n+    private fun closeTestResources() {\n+        try {\n+            closeResources()\n+            for (task in runAfterTestIsComplete) {\n+                task.run()\n+            }\n+        } catch (t: Throwable) {\n+            throw AssertionError(\"Failed to close test resources correctly\", t)\n+        } finally {\n+            signalTestCompleted.countDown()\n+        }\n+    }\n+\n+    /**\n+     * Signal that the test has completed, after waiting for any additional latches.\n+     *\n+     * @param latches additional latches to wait on, before setting the test completed flag.\n+     */\n+    fun testComplete(vararg latches: CountDownLatch) {\n+        for (latch in latches) {\n+            TestHelper.awaitOrFail(latch)\n+        }\n+        testComplete()\n+    }\n+\n+    private fun getBackgroundHandler(): Handler {\n+        synchronized(lock) {\n+            while (backgroundHandler == null) {\n+                try {\n+                    condition.await(5*1000, TimeUnit.MILLISECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTk3ODAyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmUserTests.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo1MTo0MlrOF5Qtcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo1MTo0MlrOF5Qtcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4NjkzMA==", "bodyText": "Some this logic is also covered in RealmAppTests can't we merge both test cases?", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395586930", "createdAt": "2020-03-20T11:51:42Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmUserTests.kt", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import io.realm.rule.BlockingLooperThread\n+import io.realm.rule.RunInLooperThread\n+import io.realm.rule.RunTestInLooperThread\n+import org.junit.After\n+import org.junit.Assert.assertEquals\n+import org.junit.Assert.fail\n+import org.junit.Before\n+import org.junit.Ignore\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+class RealmUserTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjAyNTYyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_RealmApp.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjowODoyNlrOF5RKvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjowODoyNlrOF5RKvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NDQyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return [callback, success_mapper](T result, Optional<app::AppError> error) {\n          \n          \n            \n                return [&](T result, Optional<app::AppError> error) {\n          \n      \n    \n    \n  \n\nwhy not capture by reference?", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395594429", "createdAt": "2020-03-20T12:08:26Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_RealmApp.cpp", "diffHunk": "@@ -27,6 +28,58 @@ using namespace realm::app;\n using namespace realm::jni_util;\n using namespace realm::_impl;\n \n+// Helper method for constructing callbacks for REST calls that must return an actual result to Java\n+template<typename T>\n+std::function<void(T, Optional<app::AppError>)> create_result_callback(JNIEnv* env, jobject j_callback, const std::function<jobject (JNIEnv*, T)>& success_mapper) {\n+    jobject callback = env->NewGlobalRef(j_callback);\n+    return [callback, success_mapper](T result, Optional<app::AppError> error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA1NzUwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_RealmApp.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoxOTozNlrOF5ReKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoxOTozNlrOF5ReKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5OTQwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    std::function<std::unique_ptr<GenericNetworkTransport>()> transport_generator = [java_app_obj] {\n          \n          \n            \n                    std::function<std::unique_ptr<GenericNetworkTransport>()> transport_generator = [&] {", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395599400", "createdAt": "2020-03-20T12:19:36Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_RealmApp.cpp", "diffHunk": "@@ -35,66 +88,71 @@ JNIEXPORT jlong JNICALL Java_io_realm_RealmApp_nativeCreate(JNIEnv* env, jobject\n                                                             jlong j_request_timeout_ms)\n {\n     try {\n-        JavaVM* jvm;\n-        jint ret = env->GetJavaVM(&jvm);\n-        if (ret != 0) {\n-            throw std::runtime_error(util::format(\"Failed to get Java VM. Error: %d\", ret));\n-        }\n         jobject java_app_obj = env->NewGlobalRef(obj); // FIXME: Leaking the app object\n-        std::function<std::unique_ptr<GenericNetworkTransport>()> transport_generator = [jvm, java_app_obj] {\n-            JNIEnv* env;\n-            if (jvm->GetEnv((void**)&env, JNI_VERSION_1_6) != JNI_OK) {\n-                jvm->AttachCurrentThread(&env, nullptr); // Should never fail\n-            }\n+        std::function<std::unique_ptr<GenericNetworkTransport>()> transport_generator = [java_app_obj] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA2NzY0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsSyncUser.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMjo1OFrOF5RkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMjo1OFrOF5RkOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMDk1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #include <realm/util/to_string.hpp>", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395600952", "createdAt": "2020-03-20T12:22:58Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsSyncUser.cpp", "diffHunk": "@@ -20,11 +20,13 @@\n #include \"util.hpp\"\n #include \"jni_util/java_class.hpp\"\n \n+#include <realm/util/to_string.hpp>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA3NzQ0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyNjoxNlrOF5RqLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyNjoxNlrOF5RqLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMjQ3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Log the current user out of the Realm App, destroying their server state, unregistering them from the\n          \n          \n            \n                 * Log the current user out of the Realm App asynchronously, destroying their server state, unregistering them from the", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395602478", "createdAt": "2020-03-20T12:26:16Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -201,11 +181,67 @@ public RealmUser run() throws ObjectServerError {\n         }.start();\n     }\n \n-    public static void logout(RealmUser user) {\n+    /**\n+     * Log the current user out of the Realm App, destroying their server state, unregistering them from the\n+     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n+     * launch.\n+     * <p>\n+     * This method should be called whenever the application is committed to not using a user again.\n+     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * <p>\n+     * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n+     * will be notified and user credentials will be deleted from this device.\n+     *\n+     * @throws IllegalStateException if no current user could be found.\n+     * @throws ObjectServerError if an error occurred while trying to log the user out of the Realm\n+     * App.\n+     */\n+     public void logOut() {\n+        RealmUser user = currentUser();\n+        if (user == null) {\n+            throw new IllegalStateException(\"No current user was found.\");\n+        }\n+        logOut(user);\n+     }\n \n+    /**\n+     * Log the current user out of the Realm App, destroying their server state, unregistering them from the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjA4NTAzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyODo0MlrOF5RuwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyODo0MlrOF5RuwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzY0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            RealmLog.error(\"Log out user\");\n          \n          \n            \n                            RealmLog.info(\"Log out user \" + user.getEmail());", "url": "https://github.com/realm/realm-java/pull/6779#discussion_r395603648", "createdAt": "2020-03-20T12:28:42Z", "author": {"login": "nhachicha"}, "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -201,11 +181,67 @@ public RealmUser run() throws ObjectServerError {\n         }.start();\n     }\n \n-    public static void logout(RealmUser user) {\n+    /**\n+     * Log the current user out of the Realm App, destroying their server state, unregistering them from the\n+     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n+     * launch.\n+     * <p>\n+     * This method should be called whenever the application is committed to not using a user again.\n+     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * <p>\n+     * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n+     * will be notified and user credentials will be deleted from this device.\n+     *\n+     * @throws IllegalStateException if no current user could be found.\n+     * @throws ObjectServerError if an error occurred while trying to log the user out of the Realm\n+     * App.\n+     */\n+     public void logOut() {\n+        RealmUser user = currentUser();\n+        if (user == null) {\n+            throw new IllegalStateException(\"No current user was found.\");\n+        }\n+        logOut(user);\n+     }\n \n+    /**\n+     * Log the current user out of the Realm App, destroying their server state, unregistering them from the\n+     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n+     * launch.\n+     * <p>\n+     * This method should be called whenever the application is committed to not using a user again.\n+     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * <p>\n+     * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n+     * will be notified and user credentials will be deleted from this device.\n+     *\n+     * @throws IllegalStateException if not called on a looper thread or no current user could be found.\n+     */\n+     public RealmAsyncTask logOutAsync(Callback<RealmUser> callback) {\n+         RealmUser user = currentUser();\n+         if (user == null) {\n+             throw new IllegalStateException(\"No current user was found.\");\n+         }\n+         return logOutAsync(user, callback);\n+     }\n+\n+    void logOut(RealmUser user) {\n+        checkNull(user, \"user\");\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLogOut(nativePtr, user.osUser.getNativePtr(), new OsJNIVoidResultCallback(error));\n+        handleResult(null, error);\n     }\n-    public RealmAsyncTask logoutAsync(RealmUser user, Callback<Void> callback) {\n-        return null;\n+\n+    RealmAsyncTask logOutAsync(RealmUser user, Callback<RealmUser> callback) {\n+        checkLooperThread(\"Asynchronous log out is only possible from looper threads.\");\n+        return new Request<RealmUser>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                RealmLog.error(\"Log out user\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d864fc17b473dcf10fe17f25ce121c7d11ee41c6"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 620, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}