{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNTc3NTc1", "number": 6874, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowNDozNlrOD_VWmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowNzo0MFrOD_VaAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzM2NzI4OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/functions/Functions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowNDozNlrOGZ8CKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTowNTozMlrOGZ9h6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MTE3OA==", "bodyText": "Is there a reason you are not calling invoke directly from the public callFunction methods?", "url": "https://github.com/realm/realm-java/pull/6874#discussion_r429851178", "createdAt": "2020-05-25T10:04:36Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/functions/Functions.java", "diffHunk": "@@ -96,7 +97,34 @@ protected Functions(RealmUser user, CodecRegistry codecRegistry) {\n      * @see RealmAppConfiguration#getDefaultCodecRegistry()\n      */\n     public <T> T callFunction(String name, List<?> args, Class<T> resultClass) {\n-        return callFunction(name, args, resultClass, defaultCodecRegistry);\n+        return callFunction(name, args, defaultCodecRegistry, defaultCodecRegistry.get(resultClass));\n+    }\n+\n+    /**\n+     * Call a MongoDB Realm function synchronously with custom result decoder.\n+     * <p>\n+     * The arguments will be encoded with the default codec registry encoding.\n+     *\n+     * @param name Name of the Stitch function to call.\n+     * @param args Arguments to the Stitch function.\n+     * @param resultDecoder The decoder used to decode the result.\n+     * @param <T> The type that the response will be decoded as using the {@code resultDecoder}\n+     * @return Result of the Stitch function.\n+     *\n+     * @throws ObjectServerError if the request failed in some way.\n+     * @throws org.bson.codecs.configuration.CodecConfigurationException if the {@code codecRegistry}\n+     * does not provide codecs for the argument or {@code resultClass}.\n+     * @throws org.bson.BSONException is an error occurred during BSON processing.\n+     *\n+     * @see #callFunction(String, List, Class, CodecRegistry)\n+     * @see RealmAppConfiguration#getDefaultCodecRegistry()\n+     */\n+    public <T> T callFunction(String name, List<?> args, Decoder<T> resultDecoder) {\n+        return callFunction(name, args, defaultCodecRegistry, resultDecoder);\n+    }\n+\n+    <T> T callFunction(String name, List<?> args, CodecRegistry codecRegistry, Decoder<T> resultDecoder) {\n+        return invoke(name, args, codecRegistry, resultDecoder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285f6969bd517f54fffd44bc34e036ae49484f34"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3NTY4OA==", "bodyText": "No, did not streamline the various versions in the first go and did not catch that it ended up being a passthrough method in the end. \ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/6874#discussion_r429875688", "createdAt": "2020-05-25T11:05:32Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/functions/Functions.java", "diffHunk": "@@ -96,7 +97,34 @@ protected Functions(RealmUser user, CodecRegistry codecRegistry) {\n      * @see RealmAppConfiguration#getDefaultCodecRegistry()\n      */\n     public <T> T callFunction(String name, List<?> args, Class<T> resultClass) {\n-        return callFunction(name, args, resultClass, defaultCodecRegistry);\n+        return callFunction(name, args, defaultCodecRegistry, defaultCodecRegistry.get(resultClass));\n+    }\n+\n+    /**\n+     * Call a MongoDB Realm function synchronously with custom result decoder.\n+     * <p>\n+     * The arguments will be encoded with the default codec registry encoding.\n+     *\n+     * @param name Name of the Stitch function to call.\n+     * @param args Arguments to the Stitch function.\n+     * @param resultDecoder The decoder used to decode the result.\n+     * @param <T> The type that the response will be decoded as using the {@code resultDecoder}\n+     * @return Result of the Stitch function.\n+     *\n+     * @throws ObjectServerError if the request failed in some way.\n+     * @throws org.bson.codecs.configuration.CodecConfigurationException if the {@code codecRegistry}\n+     * does not provide codecs for the argument or {@code resultClass}.\n+     * @throws org.bson.BSONException is an error occurred during BSON processing.\n+     *\n+     * @see #callFunction(String, List, Class, CodecRegistry)\n+     * @see RealmAppConfiguration#getDefaultCodecRegistry()\n+     */\n+    public <T> T callFunction(String name, List<?> args, Decoder<T> resultDecoder) {\n+        return callFunction(name, args, defaultCodecRegistry, resultDecoder);\n+    }\n+\n+    <T> T callFunction(String name, List<?> args, CodecRegistry codecRegistry, Decoder<T> resultDecoder) {\n+        return invoke(name, args, codecRegistry, resultDecoder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MTE3OA=="}, "originalCommit": {"oid": "285f6969bd517f54fffd44bc34e036ae49484f34"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzM3NjAzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/functions/Functions.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowNzo0MFrOGZ8Hjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMDozNFrOGaTnpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjU1OA==", "bodyText": "The Callback will always return ObjectServerError in case of an error, but it might just wrap the underlying exception. But this description is not entirely accurate.", "url": "https://github.com/realm/realm-java/pull/6874#discussion_r429852558", "createdAt": "2020-05-25T10:07:40Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/functions/Functions.java", "diffHunk": "@@ -159,7 +181,44 @@ public T run() throws ObjectServerError {\n      * @see RealmAppConfiguration#getDefaultCodecRegistry()\n      */\n     public <T> RealmAsyncTask callFunctionAsync(String name, List<?> args, Class<T> resultClass, RealmApp.Callback<T> callback) {\n-        return callFunctionAsync(name, args, resultClass, defaultCodecRegistry, callback);\n+        return callFunctionAsync(name, args, defaultCodecRegistry, defaultCodecRegistry.get(resultClass), callback);\n+    }\n+\n+    /**\n+     * Call a MongoDB Realm function asynchronously with custom result decoder.\n+     * <p>\n+     * This is the asynchronous equivalent of {@link #callFunction(String, List, Decoder)}.\n+     *\n+     * @param name Name of the Stitch function to call.\n+     * @param args Arguments to the Stitch function.\n+     * @param resultDecoder The decoder used to decode the result.\n+     * @param callback The callback that will receive the result of the request. If the request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285f6969bd517f54fffd44bc34e036ae49484f34"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3NDI4Mg==", "bodyText": "I see. Should we then introduce a specific client side encoding/decoding related error code and also encapsulate it as ObjectServerErrors in the synchronous case?\nAs I see it the most appropriate existing error code is INVALID_PARAMETER, but it sort of sounds like it would overlap with actual object server errors, whereas the encoding/decoding error is a client side error potentially caused by users misconfiguration of the codec registry etc.", "url": "https://github.com/realm/realm-java/pull/6874#discussion_r429874282", "createdAt": "2020-05-25T11:01:41Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/functions/Functions.java", "diffHunk": "@@ -159,7 +181,44 @@ public T run() throws ObjectServerError {\n      * @see RealmAppConfiguration#getDefaultCodecRegistry()\n      */\n     public <T> RealmAsyncTask callFunctionAsync(String name, List<?> args, Class<T> resultClass, RealmApp.Callback<T> callback) {\n-        return callFunctionAsync(name, args, resultClass, defaultCodecRegistry, callback);\n+        return callFunctionAsync(name, args, defaultCodecRegistry, defaultCodecRegistry.get(resultClass), callback);\n+    }\n+\n+    /**\n+     * Call a MongoDB Realm function asynchronously with custom result decoder.\n+     * <p>\n+     * This is the asynchronous equivalent of {@link #callFunction(String, List, Decoder)}.\n+     *\n+     * @param name Name of the Stitch function to call.\n+     * @param args Arguments to the Stitch function.\n+     * @param resultDecoder The decoder used to decode the result.\n+     * @param callback The callback that will receive the result of the request. If the request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjU1OA=="}, "originalCommit": {"oid": "285f6969bd517f54fffd44bc34e036ae49484f34"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3NzI4MA==", "bodyText": "That probably makes a lot of sense. The ErrorCode.java has a section for binding specific error codes, that are already wrapping other Java exceptions: https://github.com/realm/realm-java/blob/v10/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java#L41", "url": "https://github.com/realm/realm-java/pull/6874#discussion_r429877280", "createdAt": "2020-05-25T11:10:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/functions/Functions.java", "diffHunk": "@@ -159,7 +181,44 @@ public T run() throws ObjectServerError {\n      * @see RealmAppConfiguration#getDefaultCodecRegistry()\n      */\n     public <T> RealmAsyncTask callFunctionAsync(String name, List<?> args, Class<T> resultClass, RealmApp.Callback<T> callback) {\n-        return callFunctionAsync(name, args, resultClass, defaultCodecRegistry, callback);\n+        return callFunctionAsync(name, args, defaultCodecRegistry, defaultCodecRegistry.get(resultClass), callback);\n+    }\n+\n+    /**\n+     * Call a MongoDB Realm function asynchronously with custom result decoder.\n+     * <p>\n+     * This is the asynchronous equivalent of {@link #callFunction(String, List, Decoder)}.\n+     *\n+     * @param name Name of the Stitch function to call.\n+     * @param args Arguments to the Stitch function.\n+     * @param resultDecoder The decoder used to decode the result.\n+     * @param callback The callback that will receive the result of the request. If the request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjU1OA=="}, "originalCommit": {"oid": "285f6969bd517f54fffd44bc34e036ae49484f34"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MDc5Nw==", "bodyText": "There is also an already existing Type.JSON (https://github.com/realm/realm-java/blob/v10/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java#L326)  Would it make sense to use that for extended JSON too, or is it again object server internal (can't really find any use of it)?\nAnd can I just pick the actual error codes freely as long as it does not overlap any others with the same type (whether it ends up being Java or JSON)? Or are there other locations to investigate for overlap?", "url": "https://github.com/realm/realm-java/pull/6874#discussion_r429890797", "createdAt": "2020-05-25T11:44:11Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/functions/Functions.java", "diffHunk": "@@ -159,7 +181,44 @@ public T run() throws ObjectServerError {\n      * @see RealmAppConfiguration#getDefaultCodecRegistry()\n      */\n     public <T> RealmAsyncTask callFunctionAsync(String name, List<?> args, Class<T> resultClass, RealmApp.Callback<T> callback) {\n-        return callFunctionAsync(name, args, resultClass, defaultCodecRegistry, callback);\n+        return callFunctionAsync(name, args, defaultCodecRegistry, defaultCodecRegistry.get(resultClass), callback);\n+    }\n+\n+    /**\n+     * Call a MongoDB Realm function asynchronously with custom result decoder.\n+     * <p>\n+     * This is the asynchronous equivalent of {@link #callFunction(String, List, Decoder)}.\n+     *\n+     * @param name Name of the Stitch function to call.\n+     * @param args Arguments to the Stitch function.\n+     * @param resultDecoder The decoder used to decode the result.\n+     * @param callback The callback that will receive the result of the request. If the request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjU1OA=="}, "originalCommit": {"oid": "285f6969bd517f54fffd44bc34e036ae49484f34"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMDU1MA==", "bodyText": "The JSON error type is an error category exposed by App in C++. I don't think we should use it for our own purpose.\nThe only requirement for error codes is that they should be unique within each section, so for Type.JAVA, 1000-1002 (I think) is already taken.", "url": "https://github.com/realm/realm-java/pull/6874#discussion_r429930550", "createdAt": "2020-05-25T13:18:53Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/functions/Functions.java", "diffHunk": "@@ -159,7 +181,44 @@ public T run() throws ObjectServerError {\n      * @see RealmAppConfiguration#getDefaultCodecRegistry()\n      */\n     public <T> RealmAsyncTask callFunctionAsync(String name, List<?> args, Class<T> resultClass, RealmApp.Callback<T> callback) {\n-        return callFunctionAsync(name, args, resultClass, defaultCodecRegistry, callback);\n+        return callFunctionAsync(name, args, defaultCodecRegistry, defaultCodecRegistry.get(resultClass), callback);\n+    }\n+\n+    /**\n+     * Call a MongoDB Realm function asynchronously with custom result decoder.\n+     * <p>\n+     * This is the asynchronous equivalent of {@link #callFunction(String, List, Decoder)}.\n+     *\n+     * @param name Name of the Stitch function to call.\n+     * @param args Arguments to the Stitch function.\n+     * @param resultDecoder The decoder used to decode the result.\n+     * @param callback The callback that will receive the result of the request. If the request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjU1OA=="}, "originalCommit": {"oid": "285f6969bd517f54fffd44bc34e036ae49484f34"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNzYwNw==", "bodyText": "Added a couple of BSON related Type.JAVA error codes and now throws ObjectServerErrrors with the specific error codes on encoding, decoding and codec configuration errors", "url": "https://github.com/realm/realm-java/pull/6874#discussion_r430237607", "createdAt": "2020-05-26T08:20:34Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/functions/Functions.java", "diffHunk": "@@ -159,7 +181,44 @@ public T run() throws ObjectServerError {\n      * @see RealmAppConfiguration#getDefaultCodecRegistry()\n      */\n     public <T> RealmAsyncTask callFunctionAsync(String name, List<?> args, Class<T> resultClass, RealmApp.Callback<T> callback) {\n-        return callFunctionAsync(name, args, resultClass, defaultCodecRegistry, callback);\n+        return callFunctionAsync(name, args, defaultCodecRegistry, defaultCodecRegistry.get(resultClass), callback);\n+    }\n+\n+    /**\n+     * Call a MongoDB Realm function asynchronously with custom result decoder.\n+     * <p>\n+     * This is the asynchronous equivalent of {@link #callFunction(String, List, Decoder)}.\n+     *\n+     * @param name Name of the Stitch function to call.\n+     * @param args Arguments to the Stitch function.\n+     * @param resultDecoder The decoder used to decode the result.\n+     * @param callback The callback that will receive the result of the request. If the request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjU1OA=="}, "originalCommit": {"oid": "285f6969bd517f54fffd44bc34e036ae49484f34"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 721, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}