{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjU0NzA2", "number": 6986, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjozNTozOFrOELI6wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTo1MTo1MFrOELOdRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTE1OTA1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/jni_util/java_global_ref_copy.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjozNTozOFrOGslRWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjozNTozOFrOGslRWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwMTE3Ng==", "bodyText": "I would always add some justification as to why this could be used (e.g. the description you have in the PR).", "url": "https://github.com/realm/realm-java/pull/6986#discussion_r449401176", "createdAt": "2020-07-03T06:35:38Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/jni_util/java_global_ref_copy.hpp", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#ifndef REALM_JNI_UTIL_JAVA_GLOBAL_REF_COPY_HPP\n+#define REALM_JNI_UTIL_JAVA_GLOBAL_REF_COPY_HPP\n+\n+#include <jni.h>\n+\n+namespace realm {\n+    namespace jni_util {\n+\n+        // Manage the lifecycle of jobject's global ref via copy constructors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a5cebf032faf6fcc0215fdfb040191835ca0f6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTE2MTQ0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/jni_util/java_global_ref_copy.hpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjozNjozNlrOGslSzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjo1NzoyOVrOGslxUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwMTU0OA==", "bodyText": "Would it make sense to rename these classes to JavaGlobalRefByMove and JavaGlobalRefByCopy? Just to make it clear from the class name? Having just JavaGlobalRef and JavaGlobalRefCopy` might be confusing?", "url": "https://github.com/realm/realm-java/pull/6986#discussion_r449401548", "createdAt": "2020-07-03T06:36:36Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/jni_util/java_global_ref_copy.hpp", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#ifndef REALM_JNI_UTIL_JAVA_GLOBAL_REF_COPY_HPP\n+#define REALM_JNI_UTIL_JAVA_GLOBAL_REF_COPY_HPP\n+\n+#include <jni.h>\n+\n+namespace realm {\n+    namespace jni_util {\n+\n+        // Manage the lifecycle of jobject's global ref via copy constructors\n+        class JavaGlobalRefCopy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a5cebf032faf6fcc0215fdfb040191835ca0f6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwOTM2MQ==", "bodyText": "Yes, it is better your proposal.", "url": "https://github.com/realm/realm-java/pull/6986#discussion_r449409361", "createdAt": "2020-07-03T06:57:29Z", "author": {"login": "clementetb"}, "path": "realm/realm-library/src/main/cpp/jni_util/java_global_ref_copy.hpp", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#ifndef REALM_JNI_UTIL_JAVA_GLOBAL_REF_COPY_HPP\n+#define REALM_JNI_UTIL_JAVA_GLOBAL_REF_COPY_HPP\n+\n+#include <jni.h>\n+\n+namespace realm {\n+    namespace jni_util {\n+\n+        // Manage the lifecycle of jobject's global ref via copy constructors\n+        class JavaGlobalRefCopy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwMTU0OA=="}, "originalCommit": {"oid": "46a5cebf032faf6fcc0215fdfb040191835ca0f6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTE3NDY5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/jni_util/java_global_ref_copy.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjo0MTo1NFrOGslaRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjo0MTo1NFrOGslaRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwMzQ2Mw==", "bodyText": "Don't we need to delete the move constructor in a similar to how the copy constructor is deleted in JavaGlobalRef?", "url": "https://github.com/realm/realm-java/pull/6986#discussion_r449403463", "createdAt": "2020-07-03T06:41:54Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/jni_util/java_global_ref_copy.hpp", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#ifndef REALM_JNI_UTIL_JAVA_GLOBAL_REF_COPY_HPP\n+#define REALM_JNI_UTIL_JAVA_GLOBAL_REF_COPY_HPP\n+\n+#include <jni.h>\n+\n+namespace realm {\n+    namespace jni_util {\n+\n+        // Manage the lifecycle of jobject's global ref via copy constructors\n+        class JavaGlobalRefCopy {\n+        public:\n+            JavaGlobalRefCopy();\n+\n+            JavaGlobalRefCopy(JNIEnv *env, jobject obj);\n+\n+            JavaGlobalRefCopy(const JavaGlobalRefCopy &rhs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a5cebf032faf6fcc0215fdfb040191835ca0f6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjA2NjYzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/jni_util/java_global_ref_by_copy.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTo1MTo1MFrOGst8Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTo1MTo1MFrOGst8Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MzIyMg==", "bodyText": "Seems like this should have been deleted?", "url": "https://github.com/realm/realm-java/pull/6986#discussion_r449543222", "createdAt": "2020-07-03T11:51:50Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/jni_util/java_global_ref_by_copy.hpp", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#ifndef REALM_JNI_UTIL_JAVA_GLOBAL_REF_COPY_HPP\n+#define REALM_JNI_UTIL_JAVA_GLOBAL_REF_COPY_HPP\n+\n+#include <jni.h>\n+\n+namespace realm {\n+    namespace jni_util {\n+\n+        // Manages the lifecycle of jobject's global ref via copy constructors\n+        //\n+        // It prevents leaking global references by automatically referencing and unreferencing Java objects\n+        // any time the instance is copied or destroyed. Its principal use is on data structures that don't support\n+        // moving operations such as in std::function lambdas.\n+        //\n+        // Note that there is another flavor exists: JavaGlobalRefByMove. It manages the reference lifecycle by moving\n+        // operations.\n+        // Manages the lifecycle of jobject's global ref via move constructors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20c90a45f8ee15fbdf1be14238371cdac123057b"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 441, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}