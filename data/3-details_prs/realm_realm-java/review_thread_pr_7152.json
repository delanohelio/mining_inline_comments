{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNDMwNDU3", "number": 7152, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzoyNzoyMFrOEvorvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo0MzoxN1rOFAHsNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzg1MDg1OnYy", "diffSide": "RIGHT", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzoyNzoyMFrOHkuQ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTowMjo0OFrOHk2zMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2ODc5MA==", "bodyText": "Generally we try to mimic the control flow of the emitted code. So since this is inside an if statement, it should be indented one more level. While at first it looks a bit odd, it actually makes it a lot easier to understand the structure of the code being emitted.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508268790", "createdAt": "2020-10-20T07:27:20Z", "author": {"login": "cmelchior"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -853,6 +858,14 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n                                 nextControlFlow(\"else\")\n                                 emitStatement(\"objKey = table.findFirstObjectId(pkColumnKey, value)\")\n                                 endControlFlow()\n+                            } else if (Utils.isUUID(primaryKeyElement)) {\n+                                emitStatement(\"java.util.UUID value = ((%s) object).%s()\", interfaceName, primaryKeyGetter)\n+                                emitStatement(\"long objKey = Table.NO_MATCH\")\n+                                beginControlFlow(\"if (value == null)\")\n+                                emitStatement(\"objKey = table.findFirstNull(pkColumnKey)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwODYyNw==", "bodyText": "Makes sense \ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508408627", "createdAt": "2020-10-20T11:02:48Z", "author": {"login": "clementetb"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -853,6 +858,14 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n                                 nextControlFlow(\"else\")\n                                 emitStatement(\"objKey = table.findFirstObjectId(pkColumnKey, value)\")\n                                 endControlFlow()\n+                            } else if (Utils.isUUID(primaryKeyElement)) {\n+                                emitStatement(\"java.util.UUID value = ((%s) object).%s()\", interfaceName, primaryKeyGetter)\n+                                emitStatement(\"long objKey = Table.NO_MATCH\")\n+                                beginControlFlow(\"if (value == null)\")\n+                                emitStatement(\"objKey = table.findFirstNull(pkColumnKey)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2ODc5MA=="}, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzg1MjMxOnYy", "diffSide": "RIGHT", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzoyNzo0MFrOHkuRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzoyNzo0MFrOHkuRxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2ODk5OQ==", "bodyText": "Same as above. Also a few cases below", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508268999", "createdAt": "2020-10-20T07:27:40Z", "author": {"login": "cmelchior"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -1017,6 +1030,16 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n                     }\n                     endControlFlow()\n                 }\n+                \"java.util.UUID\" -> {\n+                    emitStatement(\"java.util.UUID %s = ((%s) object).%s()\", getter, interfaceName, getter)\n+                    beginControlFlow(\"if (%s != null)\", getter)\n+                    emitStatement(\"Table.nativeSetUUID(tableNativePtr, columnInfo.%sColKey, objKey, %s.toString(), false)\", fieldName, getter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzg2Njk3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsDynamicTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzozMTozNVrOHkubBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTowMzo1NVrOHk21dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MTM2NQ==", "bodyText": "Primitive lists have been implemented. We should probably track fixing these unit tests through a separate issue.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508271365", "createdAt": "2020-10-20T07:31:35Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsDynamicTests.java", "diffHunk": "@@ -253,6 +256,11 @@ public void linkingObjects_invalidFieldType() {\n                         //object.linkingObjects(AllJavaTypes.CLASS_NAME, AllJavaTypes.FIELD_DOUBLE_LIST);\n                         //break;\n                         throw new IllegalArgumentException(\"Unexpected field type\");\n+                    case UUID_LIST:\n+                        // FIXME enable this once Primitive List is implemented", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwOTIwNg==", "bodyText": "Have created this PR: #7160 with the tests.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508409206", "createdAt": "2020-10-20T11:03:55Z", "author": {"login": "clementetb"}, "path": "realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsDynamicTests.java", "diffHunk": "@@ -253,6 +256,11 @@ public void linkingObjects_invalidFieldType() {\n                         //object.linkingObjects(AllJavaTypes.CLASS_NAME, AllJavaTypes.FIELD_DOUBLE_LIST);\n                         //break;\n                         throw new IllegalArgumentException(\"Unexpected field type\");\n+                    case UUID_LIST:\n+                        // FIXME enable this once Primitive List is implemented", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MTM2NQ=="}, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzg3NTg3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzozNDowNlrOHkuguw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTozNDozNlrOHk35cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MjgyNw==", "bodyText": "Any reason you are not using UUID directly here. There are a a lot of UUID.fromString(...) calls below that could be removed by doing that instead?", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508272827", "createdAt": "2020-10-20T07:34:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java", "diffHunk": "@@ -84,6 +85,9 @@\n     private Realm realm;\n     private RealmResults<AllTypes> collection;\n \n+    private static final String uuid1 = \"017ba5ca-aa12-4afa-9219-e20cc3018599\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyNjYwOA==", "bodyText": "I thought to force use different object instances during the validation to simulate what would be a real scenario, where you store one instance and then you compare with another.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508426608", "createdAt": "2020-10-20T11:34:36Z", "author": {"login": "clementetb"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java", "diffHunk": "@@ -84,6 +85,9 @@\n     private Realm realm;\n     private RealmResults<AllTypes> collection;\n \n+    private static final String uuid1 = \"017ba5ca-aa12-4afa-9219-e20cc3018599\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MjgyNw=="}, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzk4OTQyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODowMjoxMVrOHkvlww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODowMjoxMVrOHkvlww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5MDQ5OQ==", "bodyText": "I don't think you need the @field: prefix anymore?", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508290499", "createdAt": "2020-10-20T08:02:11Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "diffHunk": "@@ -0,0 +1,435 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.util.*\n+\n+open class UUIDPrimaryKeyRequired\n+    : RealmObject() {\n+    @field:PrimaryKey", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzk5NjUwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODowMzo1NFrOHkvp9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODowMzo1NFrOHkvp9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5MTU3Mg==", "bodyText": "Instead of this we have the TestRealmConfigurationFactory rule which makes it easier to create custom configurations that are cleaned up afterwards.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508291572", "createdAt": "2020-10-20T08:03:54Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "diffHunk": "@@ -0,0 +1,435 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.util.*\n+\n+open class UUIDPrimaryKeyRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    @field:Required\n+    var id: UUID? = null\n+    var name: String = \"\"\n+    var anotherId: UUID? = null\n+}\n+\n+open class UUIDPrimaryKeyNotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: UUID? = null\n+    var name: String = \"\"\n+\n+}\n+\n+open class UUIDAndString\n+    : RealmObject() {\n+    var id: UUID? = null\n+    var name: String = \"\"\n+}\n+\n+open class UUIDRequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+open class UUIDOptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class UUIDTests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField\n+    val folder = TemporaryFolder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDAwNjk0OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODowNjozNVrOHkvwbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODowNjozNVrOHkvwbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5MzIzMQ==", "bodyText": "We have assertFailsWith<RealmException> { ... } making it a lot easier to use this pattern.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508293231", "createdAt": "2020-10-20T08:06:35Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "diffHunk": "@@ -0,0 +1,435 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.util.*\n+\n+open class UUIDPrimaryKeyRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    @field:Required\n+    var id: UUID? = null\n+    var name: String = \"\"\n+    var anotherId: UUID? = null\n+}\n+\n+open class UUIDPrimaryKeyNotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: UUID? = null\n+    var name: String = \"\"\n+\n+}\n+\n+open class UUIDAndString\n+    : RealmObject() {\n+    var id: UUID? = null\n+    var name: String = \"\"\n+}\n+\n+open class UUIDRequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+open class UUIDOptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class UUIDTests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField\n+    val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(UUIDPrimaryKeyRequired::class.java,\n+                        UUIDPrimaryKeyNotRequired::class.java,\n+                        UUIDAndString::class.java,\n+                        UUIDRequiredRealmList::class.java,\n+                        UUIDOptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+        val uuid3 = UUID.randomUUID()\n+\n+        val value = UUIDPrimaryKeyRequired()\n+        value.id = uuid1\n+        value.anotherId = uuid2\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(uuid1, obj.id)\n+        assertEquals(uuid2, obj.anotherId)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyToRealmOrUpdate\n+        value.name = \"Bar\"\n+        value.anotherId = uuid3\n+        realm.beginTransaction()\n+        realm.copyToRealmOrUpdate(value)\n+        realm.commitTransaction()\n+\n+        // copyFromRealm\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(uuid1, copy.id)\n+        assertEquals(uuid3, copy.anotherId)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun insert() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+        val uuid3 = UUID.randomUUID()\n+\n+        val value = UUIDPrimaryKeyRequired()\n+        value.id = uuid1\n+        value.name = \"Foo\"\n+        value.anotherId = uuid2\n+\n+        // insert\n+        realm.beginTransaction()\n+        realm.insert(value)\n+        realm.commitTransaction()\n+\n+        val obj = realm.where<UUIDPrimaryKeyRequired>().findFirst()\n+        assertNotNull(obj)\n+        assertEquals(uuid1, obj!!.id)\n+        assertEquals(uuid2, obj.anotherId)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // insertOrUpdate\n+        realm.beginTransaction()\n+        obj.anotherId = uuid3\n+        obj.name = \"Bar\"\n+        realm.insertOrUpdate(obj)\n+        realm.commitTransaction()\n+\n+        val all = realm.where<UUIDPrimaryKeyRequired>().findAll()\n+        assertEquals(1, all.size)\n+        assertEquals(uuid1, all[0]!!.id)\n+        assertEquals(uuid3, all[0]!!.anotherId)\n+        assertEquals(\"Bar\", all[0]!!.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+        obj.name = \"foo\"\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<UUIDPrimaryKeyRequired>()\n+        assertEquals(uuid1, frozen.id)\n+        assertEquals(\"foo\", frozen.name)\n+    }\n+\n+    @Test\n+    fun requiredPK() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        realm.beginTransaction()\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDAyNDUzOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODoxMDo1NFrOHkv7Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODoxMDo1NFrOHkv7Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NjAxOQ==", "bodyText": "I would probably break the sections here into separate tests.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508296019", "createdAt": "2020-10-20T08:10:54Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "diffHunk": "@@ -0,0 +1,435 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.util.*\n+\n+open class UUIDPrimaryKeyRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    @field:Required\n+    var id: UUID? = null\n+    var name: String = \"\"\n+    var anotherId: UUID? = null\n+}\n+\n+open class UUIDPrimaryKeyNotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: UUID? = null\n+    var name: String = \"\"\n+\n+}\n+\n+open class UUIDAndString\n+    : RealmObject() {\n+    var id: UUID? = null\n+    var name: String = \"\"\n+}\n+\n+open class UUIDRequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+open class UUIDOptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class UUIDTests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField\n+    val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(UUIDPrimaryKeyRequired::class.java,\n+                        UUIDPrimaryKeyNotRequired::class.java,\n+                        UUIDAndString::class.java,\n+                        UUIDRequiredRealmList::class.java,\n+                        UUIDOptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDAyNTEwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODoxMTowMVrOHkv7rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODoxMTowMVrOHkv7rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NjEwOA==", "bodyText": "Same", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508296108", "createdAt": "2020-10-20T08:11:01Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "diffHunk": "@@ -0,0 +1,435 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.util.*\n+\n+open class UUIDPrimaryKeyRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    @field:Required\n+    var id: UUID? = null\n+    var name: String = \"\"\n+    var anotherId: UUID? = null\n+}\n+\n+open class UUIDPrimaryKeyNotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: UUID? = null\n+    var name: String = \"\"\n+\n+}\n+\n+open class UUIDAndString\n+    : RealmObject() {\n+    var id: UUID? = null\n+    var name: String = \"\"\n+}\n+\n+open class UUIDRequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+open class UUIDOptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class UUIDTests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField\n+    val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(UUIDPrimaryKeyRequired::class.java,\n+                        UUIDPrimaryKeyNotRequired::class.java,\n+                        UUIDAndString::class.java,\n+                        UUIDRequiredRealmList::class.java,\n+                        UUIDOptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+        val uuid3 = UUID.randomUUID()\n+\n+        val value = UUIDPrimaryKeyRequired()\n+        value.id = uuid1\n+        value.anotherId = uuid2\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(uuid1, obj.id)\n+        assertEquals(uuid2, obj.anotherId)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyToRealmOrUpdate\n+        value.name = \"Bar\"\n+        value.anotherId = uuid3\n+        realm.beginTransaction()\n+        realm.copyToRealmOrUpdate(value)\n+        realm.commitTransaction()\n+\n+        // copyFromRealm\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(uuid1, copy.id)\n+        assertEquals(uuid3, copy.anotherId)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun insert() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDAyODE5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODoxMTo0NFrOHkv9nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODoxMTo0NFrOHkv9nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NjYwNQ==", "bodyText": "Same. Each test should generally only test one aspect.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508296605", "createdAt": "2020-10-20T08:11:44Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "diffHunk": "@@ -0,0 +1,435 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.util.*\n+\n+open class UUIDPrimaryKeyRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    @field:Required\n+    var id: UUID? = null\n+    var name: String = \"\"\n+    var anotherId: UUID? = null\n+}\n+\n+open class UUIDPrimaryKeyNotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: UUID? = null\n+    var name: String = \"\"\n+\n+}\n+\n+open class UUIDAndString\n+    : RealmObject() {\n+    var id: UUID? = null\n+    var name: String = \"\"\n+}\n+\n+open class UUIDRequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+open class UUIDOptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class UUIDTests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField\n+    val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(UUIDPrimaryKeyRequired::class.java,\n+                        UUIDPrimaryKeyNotRequired::class.java,\n+                        UUIDAndString::class.java,\n+                        UUIDRequiredRealmList::class.java,\n+                        UUIDOptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+        val uuid3 = UUID.randomUUID()\n+\n+        val value = UUIDPrimaryKeyRequired()\n+        value.id = uuid1\n+        value.anotherId = uuid2\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(uuid1, obj.id)\n+        assertEquals(uuid2, obj.anotherId)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyToRealmOrUpdate\n+        value.name = \"Bar\"\n+        value.anotherId = uuid3\n+        realm.beginTransaction()\n+        realm.copyToRealmOrUpdate(value)\n+        realm.commitTransaction()\n+\n+        // copyFromRealm\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(uuid1, copy.id)\n+        assertEquals(uuid3, copy.anotherId)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun insert() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+        val uuid3 = UUID.randomUUID()\n+\n+        val value = UUIDPrimaryKeyRequired()\n+        value.id = uuid1\n+        value.name = \"Foo\"\n+        value.anotherId = uuid2\n+\n+        // insert\n+        realm.beginTransaction()\n+        realm.insert(value)\n+        realm.commitTransaction()\n+\n+        val obj = realm.where<UUIDPrimaryKeyRequired>().findFirst()\n+        assertNotNull(obj)\n+        assertEquals(uuid1, obj!!.id)\n+        assertEquals(uuid2, obj.anotherId)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // insertOrUpdate\n+        realm.beginTransaction()\n+        obj.anotherId = uuid3\n+        obj.name = \"Bar\"\n+        realm.insertOrUpdate(obj)\n+        realm.commitTransaction()\n+\n+        val all = realm.where<UUIDPrimaryKeyRequired>().findAll()\n+        assertEquals(1, all.size)\n+        assertEquals(uuid1, all[0]!!.id)\n+        assertEquals(uuid3, all[0]!!.anotherId)\n+        assertEquals(\"Bar\", all[0]!!.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+        obj.name = \"foo\"\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<UUIDPrimaryKeyRequired>()\n+        assertEquals(uuid1, frozen.id)\n+        assertEquals(\"foo\", frozen.name)\n+    }\n+\n+    @Test\n+    fun requiredPK() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        realm.beginTransaction()\n+        try {\n+            realm.createObject<UUIDPrimaryKeyRequired>()\n+            fail()\n+        } catch (ignore: RealmException) {\n+        }\n+\n+        val obj = realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+        obj.name = \"foo\"\n+\n+        realm.commitTransaction()\n+\n+        val result = realm.where<UUIDPrimaryKeyRequired>().equalTo(\"id\", uuid1).findFirst()\n+        assertNotNull(result)\n+        assertEquals(\"foo\", result?.name)\n+    }\n+\n+    @Test\n+    fun nullablePK() {\n+        try {\n+            realm.createObject<UUIDPrimaryKeyNotRequired>()\n+            fail()\n+        } catch (ignore: RealmException) {\n+        }\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDPrimaryKeyNotRequired>(null)\n+        obj.name = \"foo\"\n+        realm.commitTransaction()\n+\n+        val result = realm.where<UUIDPrimaryKeyNotRequired>().equalTo(\"id\", null as UUID?).findFirst()\n+        assertNotNull(result)\n+        assertEquals(\"foo\", result!!.name)\n+    }\n+\n+\n+    @Test\n+    fun requiredRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDRequiredRealmList>()\n+        try {\n+            obj.ids.add(null)\n+            fail(\"It should not be possible to add nullable elements to a required RealmList<UUID>\")\n+        } catch (expected: Exception) {\n+        }\n+    }\n+\n+    @Test\n+    fun optionalRealmList() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDOptionalRealmList>()\n+        obj.ids.add(null)\n+        obj.ids.add(uuid1)\n+        realm.commitTransaction()\n+\n+        assertEquals(2, realm.where<UUIDOptionalRealmList>().findFirst()?.ids?.size)\n+    }\n+\n+    @Test\n+    fun linkQueryNotSupported() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        try {\n+            realm.where<UUIDRequiredRealmList>().greaterThan(\"ids\", uuid1).findAll()\n+            fail(\"It should not be possible to perform link query on UUID\")\n+        } catch (expected: IllegalArgumentException) {\n+        }\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDRequiredRealmList>()\n+        realm.cancelTransaction()\n+\n+        try {\n+            obj.ids.where().equalTo(\"ids\", uuid1).findAll()\n+        } catch (expected: UnsupportedOperationException) {\n+        }\n+    }\n+\n+    @Test\n+    fun duplicatePK() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        realm.beginTransaction()\n+        realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+        try {\n+            realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+            fail(\"It should throw for duplicate PK usage\")\n+        } catch (expected: RealmPrimaryKeyConstraintException) {\n+        }\n+\n+        realm.cancelTransaction()\n+    }\n+\n+    @Test\n+    fun sort() {\n+        val uuid1 = UUID.fromString(\"017ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid2 = UUID.fromString(\"027ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid3 = UUID.fromString(\"037ba5ca-aa12-4afa-9219-e20cc3018599\")\n+\n+        realm.beginTransaction()\n+        realm.createObject<UUIDAndString>().id = uuid3\n+        realm.createObject<UUIDAndString>().id = uuid1\n+        realm.createObject<UUIDAndString>().id = uuid2\n+        realm.commitTransaction()\n+\n+        var all = realm.where<UUIDAndString>().sort(\"id\", Sort.ASCENDING).findAll()\n+        assertEquals(3, all.size)\n+        assertEquals(uuid1, all[0]!!.id)\n+        assertEquals(uuid2, all[1]!!.id)\n+        assertEquals(uuid3, all[2]!!.id)\n+\n+        all = realm.where<UUIDAndString>().sort(\"id\", Sort.DESCENDING).findAll()\n+        assertEquals(3, all.size)\n+        assertEquals(uuid3, all[0]!!.id)\n+        assertEquals(uuid2, all[1]!!.id)\n+        assertEquals(uuid1, all[2]!!.id)\n+    }\n+\n+    @Test\n+    fun distinct() {\n+        val uuid1 = UUID.fromString(\"017ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid2 = UUID.fromString(\"027ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid3 = UUID.fromString(\"037ba5ca-aa12-4afa-9219-e20cc3018599\")\n+\n+        realm.beginTransaction()\n+        realm.createObject<UUIDAndString>().id = uuid2\n+        realm.createObject<UUIDAndString>().id = uuid2\n+        realm.createObject<UUIDAndString>().id = null\n+        realm.createObject<UUIDAndString>().id = uuid1\n+        realm.createObject<UUIDAndString>().id = uuid1\n+        realm.createObject<UUIDAndString>().id = null\n+        realm.createObject<UUIDAndString>().id = uuid3\n+        realm.createObject<UUIDAndString>().id = uuid3\n+        realm.createObject<UUIDAndString>().id = null\n+        realm.commitTransaction()\n+\n+        val all = realm.where<UUIDAndString>().distinct(\"id\").sort(\"id\", Sort.ASCENDING).findAll()\n+        assertEquals(4, all.size)\n+        assertNull(all[0]!!.id)\n+        assertEquals(uuid1, all[1]!!.id)\n+        assertEquals(uuid2, all[2]!!.id)\n+        assertEquals(uuid3, all[3]!!.id)\n+\n+    }\n+\n+    @Test\n+    fun queries() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4155188f32342af59a9d38962f49a11a175444e4"}, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzI0MDgyOnYy", "diffSide": "RIGHT", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/Utils.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNzozMzowMVrOHxBjUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTo0NDowN1rOHxyi0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE2NzY5OQ==", "bodyText": "Is there a reason we don't use field: VariableElement and !! at the callsites? At least that would feel more idiomatic to me?", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521167699", "createdAt": "2020-11-11T07:33:01Z", "author": {"login": "cmelchior"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/Utils.kt", "diffHunk": "@@ -115,6 +106,17 @@ object Utils {\n         return getFieldTypeQualifiedName(field).toString() == \"org.bson.types.ObjectId\"\n     }\n \n+    /**\n+     * @return `true` if a field is of type \"java.util.UUID\", `false` otherwise.\n+     * @throws IllegalArgumentException if the field is `null`.\n+     */\n+    fun isUUID(field: VariableElement?): Boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3MDM4Ng==", "bodyText": "I followed what the other functions did to have common behavior.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521970386", "createdAt": "2020-11-12T09:44:07Z", "author": {"login": "clementetb"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/Utils.kt", "diffHunk": "@@ -115,6 +106,17 @@ object Utils {\n         return getFieldTypeQualifiedName(field).toString() == \"org.bson.types.ObjectId\"\n     }\n \n+    /**\n+     * @return `true` if a field is of type \"java.util.UUID\", `false` otherwise.\n+     * @throws IllegalArgumentException if the field is `null`.\n+     */\n+    fun isUUID(field: VariableElement?): Boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE2NzY5OQ=="}, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzI2NzA1OnYy", "diffSide": "RIGHT", "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNzo0MTozM1rOHxByPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoxODozMFrOHxUKQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MTUxNw==", "bodyText": "Are there test for imports through UUID?", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521171517", "createdAt": "2020-11-11T07:41:33Z", "author": {"login": "rorbech"}, "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "diffHunk": "@@ -1165,6 +1241,9 @@ public static String getSimpleClassName() {\n             if (json.has(\"columnObjectIdList\")) {\n                 excludeFields.add(\"columnObjectIdList\");\n             }\n+            if (json.has(\"columnUUIDList\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjU3Nw==", "bodyText": "Good catch, I have added them now.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521472577", "createdAt": "2020-11-11T16:18:30Z", "author": {"login": "clementetb"}, "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "diffHunk": "@@ -1165,6 +1241,9 @@ public static String getSimpleClassName() {\n             if (json.has(\"columnObjectIdList\")) {\n                 excludeFields.add(\"columnObjectIdList\");\n             }\n+            if (json.has(\"columnUUIDList\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MTUxNw=="}, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzI2ODYyOnYy", "diffSide": "RIGHT", "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNzo0MjowN1rOHxBzMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoxOTowOVrOHxUL4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MTc2MQ==", "bodyText": "This doesn't look righ. Empty block!?", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521171761", "createdAt": "2020-11-11T07:42:07Z", "author": {"login": "rorbech"}, "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "diffHunk": "@@ -1367,6 +1447,7 @@ public static String getSimpleClassName() {\n                 } else {\n                     objProxy.realmSet$columnObjectId(new org.bson.types.ObjectId(reader.nextString()));\n                 }\n+            } else if (name.equals(\"columnUUID\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3Mjk5Mg==", "bodyText": "I didn't include a json conversor in the annotation processor. Now should be ok.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521472992", "createdAt": "2020-11-11T16:19:09Z", "author": {"login": "clementetb"}, "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "diffHunk": "@@ -1367,6 +1447,7 @@ public static String getSimpleClassName() {\n                 } else {\n                     objProxy.realmSet$columnObjectId(new org.bson.types.ObjectId(reader.nextString()));\n                 }\n+            } else if (name.equals(\"columnUUID\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MTc2MQ=="}, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzI3NTU1OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNzo0NDo0MlrOHxB3dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoyNjoyOVrOHxUfkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3Mjg1NA==", "bodyText": "With all the tests in UUID tests, maybe remove this one? Also it doesn't really test equalTo, but sort.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521172854", "createdAt": "2020-11-11T07:44:42Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -684,6 +688,15 @@ public void equalTo_objectId() {\n         }\n     }\n \n+    @Test\n+    public void equalTo_UUID() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3ODAzMg==", "bodyText": "The test was based on the objectid's equalto. I have fixed them.\nHave added tests for notequal on UUID, objectid and decimal128 as well.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521478032", "createdAt": "2020-11-11T16:26:29Z", "author": {"login": "clementetb"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -684,6 +688,15 @@ public void equalTo_objectId() {\n         }\n     }\n \n+    @Test\n+    public void equalTo_UUID() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3Mjg1NA=="}, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzI5MDEwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNzo1MDowM1rOHxCAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTo1NToxNlrOIA4DPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3NTE2MQ==", "bodyText": "Doesn't test that it is not equal. In populateTestRealm you could insert uuid if i%2==0 and otherwise insert a random one.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521175161", "createdAt": "2020-11-11T07:50:03Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -684,6 +688,15 @@ public void equalTo_objectId() {\n         }\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NDU3NQ==", "bodyText": "Have included thenotequal test and the modified the equalto for UUID as well for the ObjectId and Decimal128.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521474575", "createdAt": "2020-11-11T16:21:28Z", "author": {"login": "clementetb"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -684,6 +688,15 @@ public void equalTo_objectId() {\n         }\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3NTE2MQ=="}, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0NTg5Nw==", "bodyText": "But without filtering some out you have not shown that equalTo actually discards non-equal entries (unless notEqual is implemented by the complement of equalTo)", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r522045897", "createdAt": "2020-11-12T11:46:14Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -684,6 +688,15 @@ public void equalTo_objectId() {\n         }\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3NTE2MQ=="}, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0OTY3MA==", "bodyText": "Still does not show that equalsTo actually filter things out.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r534849670", "createdAt": "2020-12-03T07:54:10Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -684,6 +688,15 @@ public void equalTo_objectId() {\n         }\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3NTE2MQ=="}, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc4OTI0NA==", "bodyText": "We do check the number of results for the given query. Do you have any suggestions?", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r537789244", "createdAt": "2020-12-07T19:55:16Z", "author": {"login": "clementetb"}, "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -684,6 +688,15 @@ public void equalTo_objectId() {\n         }\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3NTE2MQ=="}, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzU2ODY5OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxNDo1OFrOHxEqZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxNDo1OFrOHxEqZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxODY2MA==", "bodyText": "I think we can remove this FIXME.  Aggregate methods like average doesn't really make sense for UUID's.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521218660", "createdAt": "2020-11-11T09:14:58Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "diffHunk": "@@ -0,0 +1,590 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import io.realm.rule.TestRealmConfigurationFactory\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import java.util.*\n+import kotlin.test.assertFailsWith\n+\n+open class UUIDPrimaryKeyRequired\n+    : RealmObject() {\n+    @PrimaryKey\n+    @Required\n+    var id: UUID? = null\n+    var name: String = \"\"\n+    var anotherId: UUID? = null\n+}\n+\n+open class UUIDPrimaryKeyNotRequired\n+    : RealmObject() {\n+    @PrimaryKey\n+    var id: UUID? = null\n+    var name: String = \"\"\n+}\n+\n+open class UUIDAndString\n+    : RealmObject() {\n+    var id: UUID? = null\n+    var name: String = \"\"\n+}\n+\n+open class UUIDRequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @Required\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+open class UUIDOptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class UUIDTests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField\n+    val configFactory = TestRealmConfigurationFactory()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = configFactory\n+                .createConfigurationBuilder()\n+                .schema(UUIDPrimaryKeyRequired::class.java,\n+                        UUIDPrimaryKeyNotRequired::class.java,\n+                        UUIDAndString::class.java,\n+                        UUIDRequiredRealmList::class.java,\n+                        UUIDOptionalRealmList::class.java)\n+                .build()\n+\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToRealm() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+\n+        val value = UUIDPrimaryKeyRequired()\n+        value.id = uuid1\n+        value.anotherId = uuid2\n+        value.name = \"Foo\"\n+\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+\n+        assertEquals(uuid1, obj.id)\n+        assertEquals(uuid2, obj.anotherId)\n+        assertEquals(\"Foo\", obj.name)\n+    }\n+\n+    @Test\n+    fun copyFromRealm() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+        obj.anotherId = uuid2\n+        obj.name = \"Foo\"\n+        realm.commitTransaction()\n+\n+        val copy = realm.copyFromRealm(obj)\n+\n+        assertEquals(uuid1, copy.id)\n+        assertEquals(uuid2, copy.anotherId)\n+        assertEquals(\"Foo\", copy.name)\n+    }\n+\n+    @Test\n+    fun copyToRealmOrUpdate() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+        val uuid3 = UUID.randomUUID()\n+\n+        realm.executeTransaction { realm ->\n+            val obj = realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+            obj.anotherId = uuid2\n+            obj.name = \"Foo\"\n+        }\n+\n+        val value = UUIDPrimaryKeyRequired()\n+        value.id = uuid1\n+        value.name = \"Bar\"\n+        value.anotherId = uuid3\n+\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealmOrUpdate(value)\n+        realm.commitTransaction()\n+\n+        assertEquals(uuid1, obj.id)\n+        assertEquals(uuid3, obj.anotherId)\n+        assertEquals(\"Bar\", obj.name)\n+    }\n+\n+    @Test\n+    fun insert() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+\n+        realm.executeTransaction { realm ->\n+            val value = UUIDPrimaryKeyRequired()\n+            value.id = uuid1\n+            value.name = \"Foo\"\n+            value.anotherId = uuid2\n+\n+            realm.insert(value)\n+        }\n+\n+        val obj = realm.where<UUIDPrimaryKeyRequired>().findFirst()\n+\n+        assertNotNull(obj)\n+        assertEquals(uuid1, obj!!.id)\n+        assertEquals(uuid2, obj.anotherId)\n+        assertEquals(\"Foo\", obj.name)\n+    }\n+\n+    @Test\n+    fun insertOrUpdate() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+        val uuid3 = UUID.randomUUID()\n+\n+        realm.executeTransaction { realm ->\n+            val value = realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+            value.name = \"Foo\"\n+            value.anotherId = uuid2\n+        }\n+\n+        realm.executeTransaction { realm ->\n+            val obj = UUIDPrimaryKeyRequired()\n+            obj.id = uuid1\n+            obj.anotherId = uuid3\n+            obj.name = \"Bar\"\n+            realm.insertOrUpdate(obj)\n+        }\n+\n+        val all = realm.where<UUIDPrimaryKeyRequired>().findAll()\n+\n+        assertEquals(1, all.size)\n+        assertEquals(uuid1, all[0]!!.id)\n+        assertEquals(uuid3, all[0]!!.anotherId)\n+        assertEquals(\"Bar\", all[0]!!.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+        obj.name = \"foo\"\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<UUIDPrimaryKeyRequired>()\n+        assertEquals(uuid1, frozen.id)\n+        assertEquals(\"foo\", frozen.name)\n+    }\n+\n+    @Test\n+    fun requiredPK() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        realm.beginTransaction()\n+\n+        assertFailsWith<RealmException> {\n+            realm.createObject<UUIDPrimaryKeyRequired>()\n+        }\n+\n+        val obj = realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+        obj.name = \"foo\"\n+\n+        realm.commitTransaction()\n+\n+        val result = realm.where<UUIDPrimaryKeyRequired>().equalTo(\"id\", uuid1).findFirst()\n+        assertNotNull(result)\n+        assertEquals(\"foo\", result?.name)\n+    }\n+\n+    @Test\n+    fun nullablePK() {\n+        assertFailsWith<RealmException> {\n+            realm.createObject<UUIDPrimaryKeyNotRequired>()\n+        }\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDPrimaryKeyNotRequired>(null)\n+        obj.name = \"foo\"\n+        realm.commitTransaction()\n+\n+        val result = realm.where<UUIDPrimaryKeyNotRequired>().equalTo(\"id\", null as UUID?).findFirst()\n+        assertNotNull(result)\n+        assertEquals(\"foo\", result!!.name)\n+    }\n+\n+\n+    @Test\n+    fun requiredRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDRequiredRealmList>()\n+\n+        assertFailsWith<IllegalArgumentException>(\"It should not be possible to add nullable elements to a required RealmList<UUID>\") {\n+            obj.ids.add(null)\n+        }\n+    }\n+\n+    @Test\n+    fun optionalRealmList() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDOptionalRealmList>()\n+        obj.ids.add(null)\n+        obj.ids.add(uuid1)\n+        realm.commitTransaction()\n+\n+        assertEquals(2, realm.where<UUIDOptionalRealmList>().findFirst()?.ids?.size)\n+    }\n+\n+    @Test\n+    fun linkQueryNotSupported() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        assertFailsWith<IllegalArgumentException>(\"It should not be possible to perform link query on UUID\") {\n+            realm.where<UUIDRequiredRealmList>().greaterThan(\"ids\", uuid1).findAll()\n+        }\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<UUIDRequiredRealmList>()\n+        realm.cancelTransaction()\n+\n+        assertFailsWith<UnsupportedOperationException> {\n+            obj.ids.where().equalTo(\"ids\", uuid1).findAll()\n+        }\n+    }\n+\n+    @Test\n+    fun duplicatePK() {\n+        val uuid1 = UUID.randomUUID()\n+\n+        realm.beginTransaction()\n+        realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+\n+        assertFailsWith<RealmPrimaryKeyConstraintException>(\"It should throw for duplicate PK usage\") {\n+            realm.createObject<UUIDPrimaryKeyRequired>(uuid1)\n+        }\n+\n+        realm.cancelTransaction()\n+    }\n+\n+    @Test\n+    fun sort() {\n+        val uuid1 = UUID.fromString(\"017ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid2 = UUID.fromString(\"027ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid3 = UUID.fromString(\"037ba5ca-aa12-4afa-9219-e20cc3018599\")\n+\n+        realm.beginTransaction()\n+        realm.createObject<UUIDAndString>().id = uuid3\n+        realm.createObject<UUIDAndString>().id = uuid1\n+        realm.createObject<UUIDAndString>().id = uuid2\n+        realm.commitTransaction()\n+\n+        var all = realm.where<UUIDAndString>().sort(\"id\", Sort.ASCENDING).findAll()\n+\n+        assertEquals(3, all.size)\n+        assertEquals(uuid1, all[0]!!.id)\n+        assertEquals(uuid2, all[1]!!.id)\n+        assertEquals(uuid3, all[2]!!.id)\n+\n+        all = realm.where<UUIDAndString>().sort(\"id\", Sort.DESCENDING).findAll()\n+\n+        assertEquals(3, all.size)\n+        assertEquals(uuid3, all[0]!!.id)\n+        assertEquals(uuid2, all[1]!!.id)\n+        assertEquals(uuid1, all[2]!!.id)\n+    }\n+\n+    @Test\n+    fun distinct() {\n+        val uuid1 = UUID.fromString(\"017ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid2 = UUID.fromString(\"027ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid3 = UUID.fromString(\"037ba5ca-aa12-4afa-9219-e20cc3018599\")\n+\n+        realm.beginTransaction()\n+        realm.createObject<UUIDAndString>().id = uuid2\n+        realm.createObject<UUIDAndString>().id = uuid2\n+        realm.createObject<UUIDAndString>().id = null\n+        realm.createObject<UUIDAndString>().id = uuid1\n+        realm.createObject<UUIDAndString>().id = uuid1\n+        realm.createObject<UUIDAndString>().id = null\n+        realm.createObject<UUIDAndString>().id = uuid3\n+        realm.createObject<UUIDAndString>().id = uuid3\n+        realm.createObject<UUIDAndString>().id = null\n+        realm.commitTransaction()\n+\n+        val all = realm.where<UUIDAndString>().distinct(\"id\").sort(\"id\", Sort.ASCENDING).findAll()\n+\n+        assertEquals(4, all.size)\n+        assertNull(all[0]!!.id)\n+        assertEquals(uuid1, all[1]!!.id)\n+        assertEquals(uuid2, all[2]!!.id)\n+        assertEquals(uuid3, all[3]!!.id)\n+\n+    }\n+\n+    @Test\n+    fun queries() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+        val uuid3 = UUID.randomUUID()\n+\n+        realm.executeTransaction { realm ->\n+            realm.createObject<UUIDAndString>().id = uuid2\n+            realm.createObject<UUIDAndString>().id = null\n+            realm.createObject<UUIDAndString>().id = uuid3\n+            realm.createObject<UUIDAndString>().id = uuid1\n+        }\n+\n+        assertEquals(4, realm.where<UUIDAndString>().count())\n+    }\n+\n+    @Test\n+    fun queriesNotEqualTo() {\n+        val uuid1 = UUID.fromString(\"017ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid2 = UUID.fromString(\"027ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid3 = UUID.fromString(\"037ba5ca-aa12-4afa-9219-e20cc3018599\")\n+\n+        realm.executeTransaction { realm ->\n+            realm.createObject<UUIDAndString>().id = uuid2\n+            realm.createObject<UUIDAndString>().id = null\n+            realm.createObject<UUIDAndString>().id = uuid3\n+            realm.createObject<UUIDAndString>().id = uuid1\n+        }\n+\n+        val all = realm.where<UUIDAndString>()\n+                .notEqualTo(\"id\", uuid2)\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+\n+        assertEquals(3, all.size)\n+        assertNull(all[0]!!.id)\n+        assertEquals(uuid1, all[1]!!.id)\n+        assertEquals(uuid3, all[2]!!.id)\n+    }\n+\n+    @Test\n+    fun queriesGreaterThanOrEqualTo() {\n+        val uuid1 = UUID.fromString(\"017ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid2 = UUID.fromString(\"027ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid3 = UUID.fromString(\"037ba5ca-aa12-4afa-9219-e20cc3018599\")\n+\n+        realm.executeTransaction { realm ->\n+            realm.createObject<UUIDAndString>().id = uuid2\n+            realm.createObject<UUIDAndString>().id = null\n+            realm.createObject<UUIDAndString>().id = uuid3\n+            realm.createObject<UUIDAndString>().id = uuid1\n+        }\n+\n+        val all = realm.where<UUIDAndString>()\n+                .greaterThanOrEqualTo(\"id\", uuid2)\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+\n+        assertEquals(2, all.size)\n+        assertEquals(uuid2, all[0]!!.id)\n+        assertEquals(uuid3, all[1]!!.id)\n+    }\n+\n+    @Test\n+    fun queriesGreaterThan() {\n+        val uuid1 = UUID.fromString(\"017ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid2 = UUID.fromString(\"027ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid3 = UUID.fromString(\"037ba5ca-aa12-4afa-9219-e20cc3018599\")\n+\n+        realm.executeTransaction { realm ->\n+            realm.createObject<UUIDAndString>().id = uuid2\n+            realm.createObject<UUIDAndString>().id = null\n+            realm.createObject<UUIDAndString>().id = uuid3\n+            realm.createObject<UUIDAndString>().id = uuid1\n+        }\n+\n+        val all = realm.where<UUIDAndString>()\n+                .greaterThan(\"id\", uuid2)\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+\n+        assertEquals(1, all.size)\n+        assertEquals(uuid3, all[0]!!.id)\n+    }\n+\n+    @Test\n+    fun queriesLessThanOrEqualTo() {\n+        val uuid1 = UUID.fromString(\"017ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid2 = UUID.fromString(\"027ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid3 = UUID.fromString(\"037ba5ca-aa12-4afa-9219-e20cc3018599\")\n+\n+        realm.executeTransaction { realm ->\n+            realm.createObject<UUIDAndString>().id = uuid2\n+            realm.createObject<UUIDAndString>().id = null\n+            realm.createObject<UUIDAndString>().id = uuid3\n+            realm.createObject<UUIDAndString>().id = uuid1\n+        }\n+\n+        val all = realm.where<UUIDAndString>()\n+                .lessThanOrEqualTo(\"id\", uuid2)\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+\n+        assertEquals(2, all.size)\n+        assertEquals(uuid1, all[0]!!.id)\n+        assertEquals(uuid2, all[1]!!.id)\n+    }\n+\n+    @Test\n+    fun queriesLessThan() {\n+        val uuid1 = UUID.fromString(\"017ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid2 = UUID.fromString(\"027ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid3 = UUID.fromString(\"037ba5ca-aa12-4afa-9219-e20cc3018599\")\n+\n+        realm.executeTransaction { realm ->\n+            realm.createObject<UUIDAndString>().id = uuid2\n+            realm.createObject<UUIDAndString>().id = null\n+            realm.createObject<UUIDAndString>().id = uuid3\n+            realm.createObject<UUIDAndString>().id = uuid1\n+        }\n+\n+        val all = realm.where<UUIDAndString>()\n+                .lessThan(\"id\", uuid2)\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+\n+        assertEquals(1, all.size)\n+        assertEquals(uuid1, all[0]!!.id)\n+    }\n+\n+    @Test\n+    fun queriesIsNull() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+        val uuid3 = UUID.randomUUID()\n+\n+        realm.executeTransaction { realm ->\n+            realm.createObject<UUIDAndString>().id = uuid2\n+            realm.createObject<UUIDAndString>().id = null\n+            realm.createObject<UUIDAndString>().id = uuid3\n+            realm.createObject<UUIDAndString>().id = uuid1\n+        }\n+\n+        val all = realm.where<UUIDAndString>()\n+                .isNull(\"id\")\n+                .findAll()\n+\n+        assertEquals(1, all.size)\n+        assertNull(all[0]!!.id)\n+    }\n+\n+    @Test\n+    fun queriesIsNotNull() {\n+        val uuid1 = UUID.fromString(\"017ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid2 = UUID.fromString(\"027ba5ca-aa12-4afa-9219-e20cc3018599\")\n+        val uuid3 = UUID.fromString(\"037ba5ca-aa12-4afa-9219-e20cc3018599\")\n+\n+        realm.executeTransaction { realm ->\n+            realm.createObject<UUIDAndString>().id = uuid2\n+            realm.createObject<UUIDAndString>().id = null\n+            realm.createObject<UUIDAndString>().id = uuid3\n+            realm.createObject<UUIDAndString>().id = uuid1\n+        }\n+\n+        val all = realm.where<UUIDAndString>()\n+                .isNotNull(\"id\")\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+\n+        assertEquals(3, all.size)\n+        assertEquals(uuid1, all[0]!!.id)\n+        assertEquals(uuid2, all[1]!!.id)\n+        assertEquals(uuid3, all[2]!!.id)\n+    }\n+\n+    @Test\n+    fun queriesAverage() {\n+        val uuid1 = UUID.randomUUID()\n+        val uuid2 = UUID.randomUUID()\n+        val uuid3 = UUID.randomUUID()\n+\n+        realm.executeTransaction { realm ->\n+            realm.createObject<UUIDAndString>().id = uuid2\n+            realm.createObject<UUIDAndString>().id = null\n+            realm.createObject<UUIDAndString>().id = uuid3\n+            realm.createObject<UUIDAndString>().id = uuid1\n+        }\n+\n+        assertFailsWith<IllegalArgumentException>(\"Average is not supported for UUID\") {\n+            realm.where<UUIDAndString>().average(\"id\") // FIXME should we support average queries in Core?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 569}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzU3MDMwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxNToxN1rOHxErRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxNToxN1rOHxErRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxODg4NQ==", "bodyText": "Nice test coverage \ud83d\udc4d\nTwo things I see missing is:\n\nTest for linked queries, i.e. equalTo(\"parentObj.uuidField\", uuid)\nRealmObjectSchema tests, i.e. RealmObjectSchema.getFieldType() == RealmFieldType.UUID", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521218885", "createdAt": "2020-11-11T09:15:17Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/UUIDTests.kt", "diffHunk": "@@ -0,0 +1,590 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import io.realm.rule.TestRealmConfigurationFactory\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import java.util.*\n+import kotlin.test.assertFailsWith\n+\n+open class UUIDPrimaryKeyRequired\n+    : RealmObject() {\n+    @PrimaryKey\n+    @Required\n+    var id: UUID? = null\n+    var name: String = \"\"\n+    var anotherId: UUID? = null\n+}\n+\n+open class UUIDPrimaryKeyNotRequired\n+    : RealmObject() {\n+    @PrimaryKey\n+    var id: UUID? = null\n+    var name: String = \"\"\n+}\n+\n+open class UUIDAndString\n+    : RealmObject() {\n+    var id: UUID? = null\n+    var name: String = \"\"\n+}\n+\n+open class UUIDRequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @Required\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+open class UUIDOptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var ids: RealmList<UUID> = RealmList()\n+    var name: String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class UUIDTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzU4MDk2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxODoyNFrOHxEx9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxODoyNFrOHxEx9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMDU5OA==", "bodyText": "We should probably mark this line as //throws as well. I assume COL_NULLABLE throws here?", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521220598", "createdAt": "2020-11-11T09:18:24Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp", "diffHunk": "@@ -243,6 +243,35 @@ static inline Obj do_create_row_with_object_id_primary_key(JNIEnv* env, jlong sh\n     }\n }\n \n+static inline Obj do_create_row_with_uuid_primary_key(JNIEnv* env, jlong shared_realm_ptr, jlong table_ref_ptr,\n+                                                           jlong pk_column_key, jstring pk_value)\n+{\n+    auto& shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));\n+    TableRef table = TBL_REF(table_ref_ptr);\n+    ColKey col_key(pk_column_key);\n+    shared_realm->verify_in_write(); // throws\n+    JStringAccessor str_accessor(env, pk_value); // throws\n+    if (!pk_value && !COL_NULLABLE(env, table, pk_column_key)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzU4NTc3OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxOTozOFrOHxE06g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxOTozOFrOHxE06g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMTM1NA==", "bodyText": "Isn't this a potential bug? It seems that we might return an unmanaged Obj from do_create_row_with_uuid_primary_key?", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521221354", "createdAt": "2020-11-11T09:19:38Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp", "diffHunk": "@@ -388,6 +417,32 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateNewObjectWit\n     return 0;\n }\n \n+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateRowWithUUIDPrimaryKey(\n+        JNIEnv* env, jclass, jlong shared_realm_ptr, jlong table_ref_ptr, jlong pk_column_ndx, jstring pk_value)\n+{\n+    try {\n+        Obj obj = do_create_row_with_uuid_primary_key(env, shared_realm_ptr, table_ref_ptr, pk_column_ndx, pk_value);\n+        return (jlong)(obj.get_key().value);\n+    }\n+    CATCH_STD()\n+    return realm::npos;\n+}\n+\n+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateNewObjectWithUUIDPrimaryKey(\n+        JNIEnv* env, jclass, jlong shared_realm_ptr, jlong table_ref_ptr, jlong pk_column_ndx, jstring pk_value)\n+{\n+    try {\n+        Obj obj = do_create_row_with_uuid_primary_key(env, shared_realm_ptr, table_ref_ptr, pk_column_ndx, pk_value);\n+        if (bool(obj)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzU4NzQ2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToyMDowM1rOHxE16w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToxOTo1OFrOHx2P6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMTYxMQ==", "bodyText": "Given the checks belows, should we return a nullptr here?", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521221611", "createdAt": "2020-11-11T09:20:03Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp", "diffHunk": "@@ -243,6 +243,35 @@ static inline Obj do_create_row_with_object_id_primary_key(JNIEnv* env, jlong sh\n     }\n }\n \n+static inline Obj do_create_row_with_uuid_primary_key(JNIEnv* env, jlong shared_realm_ptr, jlong table_ref_ptr,\n+                                                           jlong pk_column_key, jstring pk_value)\n+{\n+    auto& shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));\n+    TableRef table = TBL_REF(table_ref_ptr);\n+    ColKey col_key(pk_column_key);\n+    shared_realm->verify_in_write(); // throws\n+    JStringAccessor str_accessor(env, pk_value); // throws\n+    if (!pk_value && !COL_NULLABLE(env, table, pk_column_key)) {\n+        return Obj();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMTA4Mg==", "bodyText": "We cannot return a null pointer because the function return is by value. We should be throwing a C++ exception, then would be caught and converted to a Java one by the calling function.\nWe cannot do that because COL_NULLABLE directly throws a Java exception, forcing us to return a dummy object.\nWe should target this on a different PR. This piece of code follows the same pattern as the other data types.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r522031082", "createdAt": "2020-11-12T11:19:58Z", "author": {"login": "clementetb"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp", "diffHunk": "@@ -243,6 +243,35 @@ static inline Obj do_create_row_with_object_id_primary_key(JNIEnv* env, jlong sh\n     }\n }\n \n+static inline Obj do_create_row_with_uuid_primary_key(JNIEnv* env, jlong shared_realm_ptr, jlong table_ref_ptr,\n+                                                           jlong pk_column_key, jstring pk_value)\n+{\n+    auto& shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));\n+    TableRef table = TBL_REF(table_ref_ptr);\n+    ColKey col_key(pk_column_key);\n+    shared_realm->verify_in_write(); // throws\n+    JStringAccessor str_accessor(env, pk_value); // throws\n+    if (!pk_value && !COL_NULLABLE(env, table, pk_column_key)) {\n+        return Obj();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMTYxMQ=="}, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzYzODQ2OnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTozMzoyMVrOHxFU9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTozMzoyMVrOHxFU9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyOTU1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // ObjectID\n          \n          \n            \n            // UUID\n          \n      \n    \n    \n  \n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // ObjectID\n          \n          \n            \n            // ObjectID", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521229559", "createdAt": "2020-11-11T09:33:21Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp", "diffHunk": "@@ -1226,6 +1226,134 @@ static void TableQuery_StringPredicate(JNIEnv* env, jlong nativeQueryPtr, jlongA\n     CATCH_STD()\n }\n \n+// ObjectID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzczMjgwOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTo1OTowNFrOHxGPkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyMTo0OVrOHx2URw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI0NDU2MA==", "bodyText": "Is it sane to silently ignore operations on invalid type?", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521244560", "createdAt": "2020-11-11T09:59:04Z", "author": {"login": "rorbech"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "diffHunk": "@@ -609,6 +609,21 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetObjectId(JNIEnv* en\n     CATCH_STD()\n }\n \n+JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetUUID(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                      jlong columnKey, jlong rowKey, jstring j_value,\n+                                                                      jboolean isDefault)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_UUID)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMjE5OQ==", "bodyText": "I don't think that is a good practice neither. I am following the same pattern as the other data types to get the same behavior.\nWe should address this on a different PR.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r522032199", "createdAt": "2020-11-12T11:21:49Z", "author": {"login": "clementetb"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "diffHunk": "@@ -609,6 +609,21 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetObjectId(JNIEnv* en\n     CATCH_STD()\n }\n \n+JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetUUID(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                      jlong columnKey, jlong rowKey, jstring j_value,\n+                                                                      jboolean isDefault)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_UUID)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI0NDU2MA=="}, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDMyMTczOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMTozMzo0OVrOHxfE8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMTozMzo0OVrOHxfE8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MTQ0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LinkChain linkChain = getTableForLinkQuery(nativeQueryPtr, table_arr, col_key_arr);", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521651443", "createdAt": "2020-11-11T21:33:49Z", "author": {"login": "bmunkholm"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp", "diffHunk": "@@ -1226,6 +1226,134 @@ static void TableQuery_StringPredicate(JNIEnv* env, jlong nativeQueryPtr, jlongA\n     CATCH_STD()\n }\n \n+// ObjectID\n+enum UUIDPredicate { UUIDEqual, UUIDNotEqual, UUIDLess, UUIDLessEqual, UUIDGreater, UUIDGreaterEqual };\n+static void TableQuery_UUIDPredicate(JNIEnv* env, jlong nativeQueryPtr, jlongArray columnKeys,\n+                                         jlongArray tablePointers, jstring j_data, UUIDPredicate predicate)\n+{\n+    try {\n+        JStringAccessor data(env, j_data);\n+        JLongArrayAccessor table_arr(env, tablePointers);\n+        JLongArrayAccessor col_key_arr(env, columnKeys);\n+        jsize arr_len = col_key_arr.size();\n+        LinkChain linkChain = getTableForLinkQuery(nativeQueryPtr, table_arr, col_key_arr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDMyNzkyOnYy", "diffSide": "RIGHT", "path": "realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMTozNTo0NVrOHxfIdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTo1ODoyNlrOHxzJJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MjM0MA==", "bodyText": "Is there a reason to have all these below functions? Why not call TableQuery_UUIDPredicate with the additional enum?", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521652340", "createdAt": "2020-11-11T21:35:45Z", "author": {"login": "bmunkholm"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp", "diffHunk": "@@ -1226,6 +1226,134 @@ static void TableQuery_StringPredicate(JNIEnv* env, jlong nativeQueryPtr, jlongA\n     CATCH_STD()\n }\n \n+// ObjectID\n+enum UUIDPredicate { UUIDEqual, UUIDNotEqual, UUIDLess, UUIDLessEqual, UUIDGreater, UUIDGreaterEqual };\n+static void TableQuery_UUIDPredicate(JNIEnv* env, jlong nativeQueryPtr, jlongArray columnKeys,\n+                                         jlongArray tablePointers, jstring j_data, UUIDPredicate predicate)\n+{\n+    try {\n+        JStringAccessor data(env, j_data);\n+        JLongArrayAccessor table_arr(env, tablePointers);\n+        JLongArrayAccessor col_key_arr(env, columnKeys);\n+        jsize arr_len = col_key_arr.size();\n+        LinkChain linkChain = getTableForLinkQuery(nativeQueryPtr, table_arr, col_key_arr);\n+\n+        UUID uuid = UUID(StringData(data).data());\n+        if (arr_len == 1) {\n+            if (!TYPE_VALID(env, Q(nativeQueryPtr)->get_table(), col_key_arr[0], type_UUID)) {\n+                return;\n+            }\n+\n+            switch (predicate) {\n+                case UUIDEqual:\n+                    Q(nativeQueryPtr)->equal(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+                case UUIDNotEqual:\n+                    Q(nativeQueryPtr)->not_equal(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+                case UUIDLess:\n+                    Q(nativeQueryPtr)->less(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+                case UUIDLessEqual:\n+                    Q(nativeQueryPtr)->less_equal(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+                case UUIDGreater:\n+                    Q(nativeQueryPtr)->greater(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+                case UUIDGreaterEqual:\n+                    Q(nativeQueryPtr)->greater_equal(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+            }\n+        }\n+        else {\n+            LinkChain linkChain = getTableForLinkQuery(nativeQueryPtr, table_arr, col_key_arr);\n+            switch (predicate) {\n+                case UUIDEqual:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(linkChain.column<UUID>(ColKey(col_key_arr[arr_len - 1])) ==\n+                                        uuid);\n+                    break;\n+                case UUIDNotEqual:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(linkChain.column<UUID>(ColKey(col_key_arr[arr_len - 1])) !=\n+                                        uuid);\n+                    break;\n+                case UUIDLess:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(numeric_link_less<UUID, UUID, UUID>(linkChain, col_key_arr[arr_len - 1], uuid));\n+                    break;\n+                case UUIDLessEqual:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(numeric_link_lessequal<UUID, UUID, UUID>(linkChain, col_key_arr[arr_len - 1], uuid));\n+                    break;\n+                case UUIDGreater:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(numeric_link_greater<UUID, UUID, UUID>(linkChain, col_key_arr[arr_len - 1], uuid));\n+                    break;\n+                case UUIDGreaterEqual:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(numeric_link_greaterequal<UUID, UUID, UUID>(linkChain, col_key_arr[arr_len - 1], uuid));\n+                    break;\n+            }\n+        }\n+    }\n+    CATCH_STD()\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeEqualUUID(JNIEnv* env, jobject,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4MDE5Nw==", "bodyText": "On this PR I was following along with the other data types, but yes we could have an additional enum and reduce the number of functions.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521980197", "createdAt": "2020-11-12T09:58:26Z", "author": {"login": "clementetb"}, "path": "realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp", "diffHunk": "@@ -1226,6 +1226,134 @@ static void TableQuery_StringPredicate(JNIEnv* env, jlong nativeQueryPtr, jlongA\n     CATCH_STD()\n }\n \n+// ObjectID\n+enum UUIDPredicate { UUIDEqual, UUIDNotEqual, UUIDLess, UUIDLessEqual, UUIDGreater, UUIDGreaterEqual };\n+static void TableQuery_UUIDPredicate(JNIEnv* env, jlong nativeQueryPtr, jlongArray columnKeys,\n+                                         jlongArray tablePointers, jstring j_data, UUIDPredicate predicate)\n+{\n+    try {\n+        JStringAccessor data(env, j_data);\n+        JLongArrayAccessor table_arr(env, tablePointers);\n+        JLongArrayAccessor col_key_arr(env, columnKeys);\n+        jsize arr_len = col_key_arr.size();\n+        LinkChain linkChain = getTableForLinkQuery(nativeQueryPtr, table_arr, col_key_arr);\n+\n+        UUID uuid = UUID(StringData(data).data());\n+        if (arr_len == 1) {\n+            if (!TYPE_VALID(env, Q(nativeQueryPtr)->get_table(), col_key_arr[0], type_UUID)) {\n+                return;\n+            }\n+\n+            switch (predicate) {\n+                case UUIDEqual:\n+                    Q(nativeQueryPtr)->equal(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+                case UUIDNotEqual:\n+                    Q(nativeQueryPtr)->not_equal(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+                case UUIDLess:\n+                    Q(nativeQueryPtr)->less(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+                case UUIDLessEqual:\n+                    Q(nativeQueryPtr)->less_equal(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+                case UUIDGreater:\n+                    Q(nativeQueryPtr)->greater(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+                case UUIDGreaterEqual:\n+                    Q(nativeQueryPtr)->greater_equal(ColKey(col_key_arr[0]), uuid);\n+                    break;\n+            }\n+        }\n+        else {\n+            LinkChain linkChain = getTableForLinkQuery(nativeQueryPtr, table_arr, col_key_arr);\n+            switch (predicate) {\n+                case UUIDEqual:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(linkChain.column<UUID>(ColKey(col_key_arr[arr_len - 1])) ==\n+                                        uuid);\n+                    break;\n+                case UUIDNotEqual:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(linkChain.column<UUID>(ColKey(col_key_arr[arr_len - 1])) !=\n+                                        uuid);\n+                    break;\n+                case UUIDLess:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(numeric_link_less<UUID, UUID, UUID>(linkChain, col_key_arr[arr_len - 1], uuid));\n+                    break;\n+                case UUIDLessEqual:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(numeric_link_lessequal<UUID, UUID, UUID>(linkChain, col_key_arr[arr_len - 1], uuid));\n+                    break;\n+                case UUIDGreater:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(numeric_link_greater<UUID, UUID, UUID>(linkChain, col_key_arr[arr_len - 1], uuid));\n+                    break;\n+                case UUIDGreaterEqual:\n+                    Q(nativeQueryPtr)\n+                            ->and_query(numeric_link_greaterequal<UUID, UUID, UUID>(linkChain, col_key_arr[arr_len - 1], uuid));\n+                    break;\n+            }\n+        }\n+    }\n+    CATCH_STD()\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeEqualUUID(JNIEnv* env, jobject,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MjM0MA=="}, "originalCommit": {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTY1MjUwOnYy", "diffSide": "RIGHT", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmJsonTypeHelper.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0NTo0OVrOH-DtpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0NTo0OVrOH-DtpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgzNDU5Nw==", "bodyText": "Easier to read if indentation follow flow of emitted code.", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r534834597", "createdAt": "2020-12-03T07:45:49Z", "author": {"login": "rorbech"}, "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmJsonTypeHelper.kt", "diffHunk": "@@ -421,6 +422,55 @@ object RealmJsonTypeHelper {\n         }\n     }\n \n+    private class UUIDTypeConverter() : JsonToRealmFieldTypeConverter {\n+        @Throws(IOException::class)\n+        override fun emitTypeConversion(varName: String, accessor: String, fieldName: String, fieldType: QualifiedClassName, writer: JavaWriter) {\n+            writer.apply {\n+                beginControlFlow(\"if (json.has(\\\"%s\\\"))\", fieldName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea44950461ac783f88db7a17b2e5d2ca835a4cd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjcwMzI2OnYy", "diffSide": "RIGHT", "path": "realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo0MzoxN1rOH-O5ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo0MzoxN1rOH-O5ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzkyMw==", "bodyText": "Probably not for this PR, but bookkeeping/correctness of all these test would be improved significantly if we introduced RealmFieldType.indexable(), etc. and had the test iterate the RealmFieldType.values(). If not needed in the public API we could maybe add some utilities for test with the same concept. But seems like there are plenty of places where it could be convenient internally too ex. https://github.com/realm/realm-java/pull/7152/files#diff-6d4cb257e0e9ac7445f8cce3a43be3a9c690525ec6268d5ddb96fb80d157ce4bR58", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r535017923", "createdAt": "2020-12-03T09:43:17Z", "author": {"login": "rorbech"}, "path": "realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java", "diffHunk": "@@ -278,7 +278,7 @@ public void compileCustomAccessor() {\n     @Test\n     public void compileIndexTypes() throws IOException {\n         final String[] validIndexFieldTypes = {\"byte\", \"short\", \"int\", \"long\", \"boolean\", \"String\", \"java.util.Date\",\n-                \"Byte\", \"Short\", \"Integer\", \"Long\", \"Boolean\"};\n+                \"Byte\", \"Short\", \"Integer\", \"Long\", \"Boolean\", \"org.bson.types.ObjectId\", \"java.util.UUID\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93cf711f3bed6e16b7e93fa779b66474b08a48a1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 566, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}