{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjUwNzkz", "number": 6982, "title": "Add DynamicRealm.createEmbeddedObject + add check for invalid Realm model types", "bodyText": "Added DynamicRealm.createEmbeddedObject() and abstracted common code for both dynamic- and regular Realms.\nAdded check to ensure parent properties holding embedded objects provided when calling createEmbeddedObject() are defined as the same type as the children. This is addressed by looking into the schemas of both the embedded object and parent. If the parent property does not match the embedded object type, an exception indicating the mismatch will be thrown.\nA battery of new tests for dynamic realm embedded object creation has been added as well.", "createdAt": "2020-07-01T11:56:39Z", "url": "https://github.com/realm/realm-java/pull/6982", "merged": true, "mergeCommit": {"oid": "bea18c53d2902f0da003e4248da79c95e9dcbfea"}, "closed": true, "closedAt": "2020-07-18T15:34:27Z", "author": {"login": "edualonso"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwozBpgH2gAyNDQyNjUwNzkzOmJkN2NmOWE3NmVlMGUzMjk5NTY4MGI5MGEyY2M2ZTY1MGY3NGYxZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc16VIzgH2gAyNDQyNjUwNzkzOjQ4ZTI4NTgzYzk0NWJlZjc1NjYyZmE5MDlmY2FjYWE2MjVmMmJlOTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bd7cf9a76ee0e32995680b90a2cc6e650f74f1ff", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/bd7cf9a76ee0e32995680b90a2cc6e650f74f1ff", "committedDate": "2020-07-01T11:46:23Z", "message": "Added check for incompatible model types when creating an embedded object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddaa95187087c935b2a127e4a06f1e3b0c31f075", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/ddaa95187087c935b2a127e4a06f1e3b0c31f075", "committedDate": "2020-07-01T11:57:09Z", "message": "Added missing doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzM1MDA5", "url": "https://github.com/realm/realm-java/pull/6982#pullrequestreview-442335009", "createdAt": "2020-07-03T11:01:31Z", "commit": {"oid": "ddaa95187087c935b2a127e4a06f1e3b0c31f075"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTowMTozMVrOGsswWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTowMTozMVrOGsswWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMzgwMA==", "bodyText": "Does it make sense to lift this check outside the switch? I'm not 100% sure how it would affect the default branch here.", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r449523800", "createdAt": "2020-07-03T11:01:31Z", "author": {"login": "edualonso"}, "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1045,23 +1045,33 @@ private Scanner getFullStringScanner(InputStream in) {\n         if (!RealmObject.isManaged(parentObject) || !RealmObject.isValid(parentObject)) {\n             throw new IllegalArgumentException(\"Only valid, managed objects can be a parent to an embedded object.\");\n         }\n+\n         RealmObjectProxy proxy = (RealmObjectProxy) parentObject;\n         long parentPropertyColKey = schema.getSchemaForClass(parentObject.getClass()).getColumnKey(parentProperty);\n         RealmFieldType parentPropertyType = schema.getSchemaForClass(parentObject.getClass()).getFieldType(parentProperty);\n+        RealmSchema schema = getSchema();\n+        RealmObjectSchema parentObjectSchema = schema.getSchemaForClass(parentObject.getClass());\n+        String className = schema.getSchemaForClass(clazz).getClassName();\n+        String linkedType = parentObjectSchema.getPropertyType(parentProperty);\n         Row embeddedObject;\n-        switch(parentPropertyType) {\n-            case OBJECT: {\n-                // FIXME: Check type of link\n-                long objKey = proxy.realmGet$proxyState().getRow$realm().createEmbeddedObject(parentPropertyColKey);\n-                embeddedObject = getTable(clazz).getUncheckedRow(objKey);\n+\n+        switch (parentPropertyType) {\n+            case OBJECT:\n+                if (linkedType.equals(className)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddaa95187087c935b2a127e4a06f1e3b0c31f075"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcb3d67fbda44753815af47bf092a57acf3c76f9", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/bcb3d67fbda44753815af47bf092a57acf3c76f9", "committedDate": "2020-07-03T13:34:26Z", "message": "Merge branch 'v10' into el/embedded-obj-model-mismatch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNDEzMDAy", "url": "https://github.com/realm/realm-java/pull/6982#pullrequestreview-442413002", "createdAt": "2020-07-03T13:27:42Z", "commit": {"oid": "ddaa95187087c935b2a127e4a06f1e3b0c31f075"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzoyNzo0MlrOGswaHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzozODo1OVrOGswtxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4MzY0Ng==", "bodyText": "Probably a bit overkill to add this type of object, we have tons of other classes that are not embedded?", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r449583646", "createdAt": "2020-07-03T13:27:42Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/entities/NonEmbeddedRealmModel.kt", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.entities\n+\n+import io.realm.RealmObject\n+import io.realm.annotations.RealmClass\n+import java.util.*\n+\n+/**\n+ * Just a regular RealmObject. As this class cannot represent an embedded object, it is used to test\n+ * that the embedded object creation process detects incorrectly specified relationships between\n+ * parents and children.\n+ */\n+open class NonEmbeddedRealmModel(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddaa95187087c935b2a127e4a06f1e3b0c31f075"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4NDQyOA==", "bodyText": "What happens if the parentPropotype is not a link? There seems to be a missing test for it?", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r449584428", "createdAt": "2020-07-03T13:29:29Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1045,23 +1045,33 @@ private Scanner getFullStringScanner(InputStream in) {\n         if (!RealmObject.isManaged(parentObject) || !RealmObject.isValid(parentObject)) {\n             throw new IllegalArgumentException(\"Only valid, managed objects can be a parent to an embedded object.\");\n         }\n+\n         RealmObjectProxy proxy = (RealmObjectProxy) parentObject;\n         long parentPropertyColKey = schema.getSchemaForClass(parentObject.getClass()).getColumnKey(parentProperty);\n         RealmFieldType parentPropertyType = schema.getSchemaForClass(parentObject.getClass()).getFieldType(parentProperty);\n+        RealmSchema schema = getSchema();\n+        RealmObjectSchema parentObjectSchema = schema.getSchemaForClass(parentObject.getClass());\n+        String className = schema.getSchemaForClass(clazz).getClassName();\n+        String linkedType = parentObjectSchema.getPropertyType(parentProperty);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddaa95187087c935b2a127e4a06f1e3b0c31f075"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4NDcyNg==", "bodyText": "yeah, lifting it out would not work for the default branch, the default branch catches things like INTEGER and BOOLEAN... Not sure what would happen in that case?", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r449584726", "createdAt": "2020-07-03T13:30:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1045,23 +1045,33 @@ private Scanner getFullStringScanner(InputStream in) {\n         if (!RealmObject.isManaged(parentObject) || !RealmObject.isValid(parentObject)) {\n             throw new IllegalArgumentException(\"Only valid, managed objects can be a parent to an embedded object.\");\n         }\n+\n         RealmObjectProxy proxy = (RealmObjectProxy) parentObject;\n         long parentPropertyColKey = schema.getSchemaForClass(parentObject.getClass()).getColumnKey(parentProperty);\n         RealmFieldType parentPropertyType = schema.getSchemaForClass(parentObject.getClass()).getFieldType(parentProperty);\n+        RealmSchema schema = getSchema();\n+        RealmObjectSchema parentObjectSchema = schema.getSchemaForClass(parentObject.getClass());\n+        String className = schema.getSchemaForClass(clazz).getClassName();\n+        String linkedType = parentObjectSchema.getPropertyType(parentProperty);\n         Row embeddedObject;\n-        switch(parentPropertyType) {\n-            case OBJECT: {\n-                // FIXME: Check type of link\n-                long objKey = proxy.realmGet$proxyState().getRow$realm().createEmbeddedObject(parentPropertyColKey);\n-                embeddedObject = getTable(clazz).getUncheckedRow(objKey);\n+\n+        switch (parentPropertyType) {\n+            case OBJECT:\n+                if (linkedType.equals(className)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMzgwMA=="}, "originalCommit": {"oid": "ddaa95187087c935b2a127e4a06f1e3b0c31f075"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4NjM0Nw==", "bodyText": "What is returned if the property is not a Link or List? ... Right now getPropertyType sounds similar to getFieldType() which returns the type of the Field... maybe rename this to getLinkedType() which will throw an illegal state exception with something like \"Field does not contain a link, but X\" kind of error if the field doesn't contain a link", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r449586347", "createdAt": "2020-07-03T13:33:35Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java", "diffHunk": "@@ -462,6 +462,22 @@ public void setEmbedded(boolean embedded) {\n         }\n     }\n \n+    /**\n+     * Retrieves the type of a given property.\n+     *\n+     * @param property the field for which we want to know the type.\n+     * @return the name of the property.\n+     * @throws IllegalStateException if the given property is not found in the schema.\n+     */\n+    public String getPropertyType(String property) {\n+        ColumnInfo.ColumnDetails columnDetails = columnInfo.getColumnDetails(property);\n+        if (columnDetails == null) {\n+            throw new IllegalStateException(String.format(\"Property %s not found.\", property));\n+        } else {\n+            return columnDetails.linkedClassName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddaa95187087c935b2a127e4a06f1e3b0c31f075"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4ODY3OA==", "bodyText": "This implementation is a bit problematic to have in RealmObjectSchema .. methods in here should work for both DynamicRealm and Realm instances, but ColumnInfo doesn't exist for DynamicRealms. I think this implementation should be in ImmutableRealmObjectSchema instead and we\nneed another implementation for the MutableRealmObjectSchema.\nSince this is part of the public API we also need tests specifically for this outside the context of createEmbeddedObject", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r449588678", "createdAt": "2020-07-03T13:38:59Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java", "diffHunk": "@@ -462,6 +462,22 @@ public void setEmbedded(boolean embedded) {\n         }\n     }\n \n+    /**\n+     * Retrieves the type of a given property.\n+     *\n+     * @param property the field for which we want to know the type.\n+     * @return the name of the property.\n+     * @throws IllegalStateException if the given property is not found in the schema.\n+     */\n+    public String getPropertyType(String property) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddaa95187087c935b2a127e4a06f1e3b0c31f075"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "017a1f934db0403605501690dcf06933b802c700", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/017a1f934db0403605501690dcf06933b802c700", "committedDate": "2020-07-03T14:01:43Z", "message": "Merge branch 'v10' into el/embedded-obj-model-mismatch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5df5fd655087009bcec7076ff8e43ef0ab308bb0", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/5df5fd655087009bcec7076ff8e43ef0ab308bb0", "committedDate": "2020-07-03T14:55:24Z", "message": "Merge branch 'v10' into el/embedded-obj-model-mismatch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "595a1d5f090692dcb9c482f760b1c76858579539", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/595a1d5f090692dcb9c482f760b1c76858579539", "committedDate": "2020-07-13T15:29:32Z", "message": "Added embedded object creation for dynamic realms and some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f74878958d074f10e50469d25808a87cb2f21c3d", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/f74878958d074f10e50469d25808a87cb2f21c3d", "committedDate": "2020-07-13T15:33:27Z", "message": "Merge branch 'v10' into el/embedded-obj-model-mismatch\n\n# Conflicts:\n#\trealm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb14025fec2611cb004691ce305bee255abe5d78", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/bb14025fec2611cb004691ce305bee255abe5d78", "committedDate": "2020-07-14T09:37:40Z", "message": "More tests for embedded realmlists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0edddc0de741be86d017d8520896b99ca4400f14", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/0edddc0de741be86d017d8520896b99ca4400f14", "committedDate": "2020-07-14T10:59:23Z", "message": "More tests and cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6428d3cee2c874a421ae0064c605e385520922f", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/e6428d3cee2c874a421ae0064c605e385520922f", "committedDate": "2020-07-14T14:26:31Z", "message": "More cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77177e40327f4e10b4c65261350577035c7c694f", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/77177e40327f4e10b4c65261350577035c7c694f", "committedDate": "2020-07-14T16:13:50Z", "message": "Modified proxy class generator to incorporate changes in row.createEmbeddedObject method signature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/ddd2ee247d7a709052e13e393967ded27cc03738", "committedDate": "2020-07-15T08:02:23Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTYwNTA3", "url": "https://github.com/realm/realm-java/pull/6982#pullrequestreview-449560507", "createdAt": "2020-07-16T07:07:06Z", "commit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzowNzowNlrOGyc6gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzozMjo0NlrOGyduLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1NTcxMw==", "bodyText": "Nitpick: I would move this up in the line above", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r455555713", "createdAt": "2020-07-16T07:07:06Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -132,11 +130,79 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Placeholder for all tests for DynamicRealm.createEmbeddedObject()\")\n-    fun dynamicRealm_createEmbeddedObject() {\n-        TODO()\n+    fun dynamicRealm_createEmbeddedObject() =\n+            DynamicRealm.getInstance(realm.configuration).use { realm ->\n+                realm.executeTransaction {\n+                    val parent = realm.createObject(\"EmbeddedSimpleParent\", \"PK_VALUE\")\n+                    val child = realm.createEmbeddedObject(\"EmbeddedSimpleChild\", parent, \"child\")\n+\n+                    val idValue = \"ID_VALUE\"\n+                    child.setString(\"id\", idValue)\n+\n+                    val childInParent = parent.getObject(\"child\")\n+                    assertNotNull(childInParent)\n+                    assertEquals(childInParent!!.getString(\"id\"), idValue)\n+                    assertEquals(child, childInParent)\n+\n+                    val linkingParent = child.linkingObjects(\"EmbeddedSimpleParent\", \"child\")\n+                            .first()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1NjQxMQ==", "bodyText": "If you think this test is sufficient, just remove the TODO, otherwise, we need to implement a test for all the other \"wrong\" types.", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r455556411", "createdAt": "2020-07-16T07:08:32Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -132,11 +130,79 @@ class EmbeddedObjectsTest {\n     }\n \n     @Test\n-    @Ignore(\"Placeholder for all tests for DynamicRealm.createEmbeddedObject()\")\n-    fun dynamicRealm_createEmbeddedObject() {\n-        TODO()\n+    fun dynamicRealm_createEmbeddedObject() =\n+            DynamicRealm.getInstance(realm.configuration).use { realm ->\n+                realm.executeTransaction {\n+                    val parent = realm.createObject(\"EmbeddedSimpleParent\", \"PK_VALUE\")\n+                    val child = realm.createEmbeddedObject(\"EmbeddedSimpleChild\", parent, \"child\")\n+\n+                    val idValue = \"ID_VALUE\"\n+                    child.setString(\"id\", idValue)\n+\n+                    val childInParent = parent.getObject(\"child\")\n+                    assertNotNull(childInParent)\n+                    assertEquals(childInParent!!.getString(\"id\"), idValue)\n+                    assertEquals(child, childInParent)\n+\n+                    val linkingParent = child.linkingObjects(\"EmbeddedSimpleParent\", \"child\")\n+                            .first()\n+                    assertNotNull(linkingParent)\n+                    assertEquals(parent.getString(\"id\"), linkingParent!!.getString(\"id\"))\n+                    assertEquals(parent.getObject(\"child\"), linkingParent.getObject(\"child\"))\n+                }\n+            }\n+\n+    @Test\n+    fun dynamicRealm_createEmbeddedObject_simpleChildList() =\n+            DynamicRealm.getInstance(realm.configuration).use { realm ->\n+                realm.executeTransaction {\n+                    val parent = realm.createObject(\"EmbeddedSimpleListParent\", UUID.randomUUID().toString())\n+                    val child1 = realm.createEmbeddedObject(\"EmbeddedSimpleChild\", parent, \"children\")\n+                    val child2 = realm.createEmbeddedObject(\"EmbeddedSimpleChild\", parent, \"children\")\n+                    assertEquals(2, parent.getList(\"children\").size.toLong())\n+                    assertEquals(child1, parent.getList(\"children\").first()!!)\n+                    assertEquals(child2, parent.getList(\"children\").last()!!)\n+                }\n+            }\n+\n+    @Test\n+    fun dynamicRealm_createEmbeddedObject_wrongParentPropertyTypeThrows() {\n+        DynamicRealm.getInstance(realm.configuration).use { realm ->\n+            realm.executeTransaction {\n+                val parent = realm.createObject(\"EmbeddedSimpleParent\", \"parent\")\n+\n+                // TODO: Smoke-test for wrong type. Figure out how to test all unsupported types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2MDkzNQ==", "bodyText": "This doesn't throw because the parent is unmanaged, but because the parent is not a DynamicRealmObject. It isn't possible to have unmanaged DynamicRealmObjects currently, so not sure if it makes sense to keep this test.", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r455560935", "createdAt": "2020-07-16T07:17:50Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/androidTest/kotlin/io/realm/EmbeddedObjectsTest.kt", "diffHunk": "@@ -332,15 +412,27 @@ class EmbeddedObjectsTest {\n     @Ignore(\"FIXME\")\n     fun copyToRealmOrUpdate_deleteReplacedObjects() {\n         TODO()\n-\n     }\n \n     @Test\n-    @Ignore(\"Add in another PR\")\n     fun insert_noParentThrows() {\n-        TODO()\n+        realm.executeTransaction { realm ->\n+            val child = EmbeddedSimpleChild(\"child\")\n+            assertFailsWith<IllegalArgumentException> { realm.insert(child) }\n+        }\n     }\n \n+    @Test\n+    fun dynamicRealm_createEmbeddedObjectWithUnmanagedParentThrows() =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NDQ0NQ==", "bodyText": "I suspect we will never hit this as parentObjectSchema.getLinkedType(parentProperty); will throw first. We should probably move the linkedType property into the switch?", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r455564445", "createdAt": "2020-07-16T07:24:31Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/BaseRealm.java", "diffHunk": "@@ -508,6 +508,45 @@ protected void checkIfValidAndInTransaction() {\n         }\n     }\n \n+    /**\n+     * Creates a row representing an embedded object - for internal use only.\n+     *\n+     * @param className the class name of the object to create.\n+     * @param parentProxy The parent object which should hold a reference to the embedded object.\n+     * @param parentProperty the property in the parent class which holds the reference.\n+     * @param schema the Realm schema from which to obtain table information.\n+     * @param parentObjectSchema the parent object schema from which to obtain property information.\n+     * @return the row representing the newly created embedded object.\n+     * @throws IllegalArgumentException if any embedded object invariants are broken.\n+     */\n+    Row getEmbeddedObjectRow(final String className,\n+                             final RealmObjectProxy parentProxy,\n+                             final String parentProperty,\n+                             final RealmSchema schema,\n+                             final RealmObjectSchema parentObjectSchema) {\n+        final long parentPropertyColKey = parentObjectSchema.getColumnKey(parentProperty);\n+        final RealmFieldType parentPropertyType = parentObjectSchema.getFieldType(parentProperty);\n+        final String linkedType = parentObjectSchema.getLinkedType(parentProperty);\n+        final Row row = parentProxy.realmGet$proxyState().getRow$realm();\n+        Row embeddedObject;\n+\n+        switch (parentPropertyType) {\n+            case OBJECT:\n+            case LIST:\n+                if (linkedType.equals(className)) {\n+                    long objKey = row.createEmbeddedObject(parentPropertyColKey, parentPropertyType);\n+                    embeddedObject = schema.getTable(className).getCheckedRow(objKey);\n+                } else {\n+                    throw new IllegalArgumentException(String.format(\"Parent type %s expects that property '%s' be of type %s but was %s.\", parentObjectSchema.getClassName(), parentProperty, linkedType, className));\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Parent property is not a reference to embedded objects of the appropriate type: \" + parentPropertyType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NjQwMg==", "bodyText": "I think we we should use DynamicRealmObject here. By using RealmModel it opens up for people accidentially using their typed model classes", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r455566402", "createdAt": "2020-07-16T07:28:14Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/DynamicRealm.java", "diffHunk": "@@ -160,6 +164,51 @@ public DynamicRealmObject createObject(String className, Object primaryKeyValue)\n                 CheckedRow.getFromRow(OsObject.createWithPrimaryKey(table, primaryKeyValue)));\n     }\n \n+    /**\n+     * Instantiates and adds a new embedded object to the Realm.\n+     * <p>\n+     * This method should only be used to create objects of types marked as embedded.\n+     *\n+     * @param className the class name of the object to create.\n+     * @param parentObject The parent object which should hold a reference to the embedded object.\n+     *                     If the parent property is a list the embedded object will be added to the\n+     *                     end of that list.\n+     * @param parentProperty the property in the parent class which holds the reference.\n+     * @return the newly created embedded object.\n+     * @throws IllegalArgumentException if {@code clazz} is not an embedded class or if the property\n+     * in the parent class cannot hold objects of the appropriate type.\n+     * @see RealmClass#embedded()\n+     */\n+    public DynamicRealmObject createEmbeddedObject(String className,\n+                                                   RealmModel parentObject,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2Njg1MA==", "bodyText": "This cast can be avoided if the above is fixed.", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r455566850", "createdAt": "2020-07-16T07:29:00Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/DynamicRealm.java", "diffHunk": "@@ -160,6 +164,51 @@ public DynamicRealmObject createObject(String className, Object primaryKeyValue)\n                 CheckedRow.getFromRow(OsObject.createWithPrimaryKey(table, primaryKeyValue)));\n     }\n \n+    /**\n+     * Instantiates and adds a new embedded object to the Realm.\n+     * <p>\n+     * This method should only be used to create objects of types marked as embedded.\n+     *\n+     * @param className the class name of the object to create.\n+     * @param parentObject The parent object which should hold a reference to the embedded object.\n+     *                     If the parent property is a list the embedded object will be added to the\n+     *                     end of that list.\n+     * @param parentProperty the property in the parent class which holds the reference.\n+     * @return the newly created embedded object.\n+     * @throws IllegalArgumentException if {@code clazz} is not an embedded class or if the property\n+     * in the parent class cannot hold objects of the appropriate type.\n+     * @see RealmClass#embedded()\n+     */\n+    public DynamicRealmObject createEmbeddedObject(String className,\n+                                                   RealmModel parentObject,\n+                                                   String parentProperty) {\n+        checkIfValid();\n+        Util.checkNull(parentObject, \"parentObject\");\n+        Util.checkEmpty(parentProperty, \"parentProperty\");\n+        if (!RealmObject.isManaged(parentObject) || !RealmObject.isValid(parentObject)) {\n+            throw new IllegalArgumentException(\"Only valid, managed objects can be a parent to an embedded object.\");\n+        }\n+\n+        String pkField = OsObjectStore.getPrimaryKeyForObject(sharedRealm, className);\n+        // Check and throw the exception earlier for a better exception message.\n+        if (pkField != null) {\n+            throw new RealmException(String.format(Locale.US,\n+                    \"'%s' has a primary key field '%s', embedded objects cannot have primary keys.\",\n+                    className, pkField));\n+        }\n+\n+        String parentClassName = ((DynamicRealmObject) parentObject).getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NzAyOA==", "bodyText": "Remove?", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r455567028", "createdAt": "2020-07-16T07:29:17Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java", "diffHunk": "@@ -1281,7 +1281,8 @@ public String toString() {\n                     RealmFieldType.OBJECT.name(), RealmFieldType.LIST.name()));\n         }\n \n-        return RealmResults.createDynamicBacklinkResults(realm, (CheckedRow) proxyState.getRow$realm(), realmObjectSchema.getTable(), srcFieldName);\n+        return RealmResults.createDynamicBacklinkResults(realm, (UncheckedRow) proxyState.getRow$realm(), realmObjectSchema.getTable(), srcFieldName);\n+//        return RealmResults.createDynamicBacklinkResults(realm, (CheckedRow) proxyState.getRow$realm(), realmObjectSchema.getTable(), srcFieldName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODQxNA==", "bodyText": "This Javadoc doesn't seem entirely accurate. It will return the linked type regardless of classes being embedded or not.", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r455568414", "createdAt": "2020-07-16T07:31:46Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java", "diffHunk": "@@ -462,6 +462,25 @@ public void setEmbedded(boolean embedded) {\n         }\n     }\n \n+    /**\n+     * Checks whether a given class property can represent a valid embedded object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODY5Ng==", "bodyText": "Since this is a new method in the public API we should also have tests for this directly instead of indirectly through other methods.", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r455568696", "createdAt": "2020-07-16T07:32:16Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java", "diffHunk": "@@ -462,6 +462,25 @@ public void setEmbedded(boolean embedded) {\n         }\n     }\n \n+    /**\n+     * Checks whether a given class property can represent a valid embedded object\n+     * {@code @LinkingObjects} backlink that points to a parent. Valid embedded object backlink\n+     * typs are {@link RealmFieldType#OBJECT} and {@link RealmFieldType#LIST}.\n+     *\n+     * @param linkingProperty the field for which we want to know the type.\n+     * @return the name of the property.\n+     * @throws IllegalStateException if the given property is not found in the schema or the\n+     * backlink property is not a valid type.\n+     */\n+    public abstract String getLinkedType(String linkingProperty);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODc2Mg==", "bodyText": "Remove?", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r455568762", "createdAt": "2020-07-16T07:32:24Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/RealmResults.java", "diffHunk": "@@ -83,7 +83,8 @@\n     }\n \n     // Abandon typing information, all ye who enter here\n-    static RealmResults<DynamicRealmObject> createDynamicBacklinkResults(DynamicRealm realm, CheckedRow row, Table srcTable, String srcFieldName) {\n+//    static RealmResults<DynamicRealmObject> createDynamicBacklinkResults(DynamicRealm realm, CheckedRow row, Table srcTable, String srcFieldName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODk0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"Wrong parentPropertyType, expected OBJECT or LIST bur received \" + parentPropertyType);\n          \n          \n            \n                            throw new IllegalArgumentException(\"Wrong parentPropertyType, expected OBJECT or LIST but received \" + parentPropertyType);", "url": "https://github.com/realm/realm-java/pull/6982#discussion_r455568943", "createdAt": "2020-07-16T07:32:46Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java", "diffHunk": "@@ -307,9 +307,16 @@ public void setObjectId(long columnKey, @Nullable ObjectId value) {\n     }\n \n     @Override\n-    public long createEmbeddedObject(long columnKey) {\n-        parent.checkImmutable();\n-        return nativeCreateEmbeddedObject(nativePtr, columnKey);\n+    public long createEmbeddedObject(long columnKey, RealmFieldType parentPropertyType) {\n+        switch (parentPropertyType) {\n+            case OBJECT:\n+                parent.checkImmutable();\n+                return nativeCreateEmbeddedObject(nativePtr, columnKey);\n+            case LIST:\n+                return getModelList(columnKey).createAndAddEmbeddedObject();\n+            default:\n+                throw new IllegalArgumentException(\"Wrong parentPropertyType, expected OBJECT or LIST bur received \" + parentPropertyType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2ee247d7a709052e13e393967ded27cc03738"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b924170849da34dd1716c9ca191b570f2658cd95", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/b924170849da34dd1716c9ca191b570f2658cd95", "committedDate": "2020-07-16T11:49:03Z", "message": "Addressed comments after code review: made methods that deal with property class names and their assertions package private in RealmObjectSchema, fixed typos here and there and improved documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46cf67b9751df6478a1f636cdef9023d6adc665a", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/46cf67b9751df6478a1f636cdef9023d6adc665a", "committedDate": "2020-07-16T13:03:43Z", "message": "Fixed bogus logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96b534262b9cdd5e6e5f3fb6202469d088432ef3", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/96b534262b9cdd5e6e5f3fb6202469d088432ef3", "committedDate": "2020-07-16T13:31:28Z", "message": "Updated changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "750533204627d666691039b8182a2520beded70d", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/750533204627d666691039b8182a2520beded70d", "committedDate": "2020-07-17T20:57:49Z", "message": "Removed unnecessary casting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48e28583c945bef75662fa909fcacaa625f2be96", "author": {"user": null}, "url": "https://github.com/realm/realm-java/commit/48e28583c945bef75662fa909fcacaa625f2be96", "committedDate": "2020-07-17T21:01:39Z", "message": "Removed unnecessary cast vol 2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2274, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}