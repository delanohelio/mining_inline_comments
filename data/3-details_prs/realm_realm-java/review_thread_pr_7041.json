{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MzEyNzU4", "number": 7041, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjozOToyOVrOEZkJAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTo0OToxN1rOEZ5t9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjQxOTg3OnYy", "diffSide": "RIGHT", "path": "realm-transformer/src/main/java/io/realm/transformer/UrlEncodedAnalytics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjozOTozMFrOHCc5AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjozOTozMFrOHCc5AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzMjU0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"ignoring: \", ignored);\n          \n          \n            \n                        logger.debug(\"Ignoring: \", ignored);", "url": "https://github.com/realm/realm-java/pull/7041#discussion_r472332544", "createdAt": "2020-08-18T16:39:30Z", "author": {"login": "cmelchior"}, "path": "realm-transformer/src/main/java/io/realm/transformer/UrlEncodedAnalytics.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package io.realm.transformer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.security.NoSuchAlgorithmException;\n+\n+\n+\n+public class UrlEncodedAnalytics {\n+\n+    private Logger logger = LoggerFactory.getLogger(\"realm-logger\");\n+\n+    private String prefix;\n+    private String suffix;\n+\n+    public UrlEncodedAnalytics(String prefix, String suffix) {\n+        this.prefix = prefix;\n+        this.suffix = suffix;\n+    }\n+\n+    public void execute(RealmAnalytics analytics) {\n+        try {\n+            URL url = getUrl(analytics);\n+\n+            logger.debug(\"submitting: \" + url);\n+\n+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.connect();\n+            logger.debug(\"submitted: \" +  connection.getResponseCode() + \" \" + url);\n+            connection.getResponseCode();\n+        } catch (Exception ignored) {\n+            logger.debug(\"ignoring: \", ignored);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9662a4742bc6980ddee0ca457c176f5321f43bd7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjQyMzAyOnYy", "diffSide": "RIGHT", "path": "realm-transformer/src/main/java/io/realm/transformer/UrlEncodedAnalytics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjo0MDoxMlrOHCc67A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjo0MDoxMlrOHCc67A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzMzAzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"submitting: \" + url);\n          \n          \n            \n                        logger.debug(\"Submitting: \" + url);", "url": "https://github.com/realm/realm-java/pull/7041#discussion_r472333036", "createdAt": "2020-08-18T16:40:12Z", "author": {"login": "cmelchior"}, "path": "realm-transformer/src/main/java/io/realm/transformer/UrlEncodedAnalytics.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package io.realm.transformer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.security.NoSuchAlgorithmException;\n+\n+\n+\n+public class UrlEncodedAnalytics {\n+\n+    private Logger logger = LoggerFactory.getLogger(\"realm-logger\");\n+\n+    private String prefix;\n+    private String suffix;\n+\n+    public UrlEncodedAnalytics(String prefix, String suffix) {\n+        this.prefix = prefix;\n+        this.suffix = suffix;\n+    }\n+\n+    public void execute(RealmAnalytics analytics) {\n+        try {\n+            URL url = getUrl(analytics);\n+\n+            logger.debug(\"submitting: \" + url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9662a4742bc6980ddee0ca457c176f5321f43bd7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjQzMDYzOnYy", "diffSide": "RIGHT", "path": "realm-transformer/src/main/java/io/realm/transformer/UrlEncodedAnalytics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjo0MjowMlrOHCc_rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjo0MjowMlrOHCc_rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNDI1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"submitted: \" +  connection.getResponseCode() + \" \" + url);\n          \n          \n            \n                        logger.debug(\"Submitted: \" +  connection.getResponseCode() + \" \" + url);", "url": "https://github.com/realm/realm-java/pull/7041#discussion_r472334254", "createdAt": "2020-08-18T16:42:02Z", "author": {"login": "cmelchior"}, "path": "realm-transformer/src/main/java/io/realm/transformer/UrlEncodedAnalytics.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package io.realm.transformer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.security.NoSuchAlgorithmException;\n+\n+\n+\n+public class UrlEncodedAnalytics {\n+\n+    private Logger logger = LoggerFactory.getLogger(\"realm-logger\");\n+\n+    private String prefix;\n+    private String suffix;\n+\n+    public UrlEncodedAnalytics(String prefix, String suffix) {\n+        this.prefix = prefix;\n+        this.suffix = suffix;\n+    }\n+\n+    public void execute(RealmAnalytics analytics) {\n+        try {\n+            URL url = getUrl(analytics);\n+\n+            logger.debug(\"submitting: \" + url);\n+\n+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.connect();\n+            logger.debug(\"submitted: \" +  connection.getResponseCode() + \" \" + url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9662a4742bc6980ddee0ca457c176f5321f43bd7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjQzNjAxOnYy", "diffSide": "RIGHT", "path": "realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjo0MzoyOFrOHCdDAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjo1MDo1OFrOHC3xow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNTEwNw==", "bodyText": "Is the dependency name just the \"middle\" part? e.g. this would normally be org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.72, so it doesn't start with org. ?", "url": "https://github.com/realm/realm-java/pull/7041#discussion_r472335107", "createdAt": "2020-08-18T16:43:28Z", "author": {"login": "cmelchior"}, "path": "realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt", "diffHunk": "@@ -133,19 +137,14 @@ class RealmTransformer(val project: Project) : Transform() {\n             }\n \n             var containsKotlin = false\n-\n+            // Should be safe to iterate the configurations as we are way beyond the configuration\n+            // phase\n             outer@\n-            for(input: TransformInput in inputs) {\n-                for (di: DirectoryInput in input.directoryInputs) {\n-                    val path: String = di.file.absolutePath\n-                    val index: Int = path.indexOf(\"build${File.separator}intermediates${File.separator}classes\")\n-                    if (index != -1) {\n-                        val projectPath: String = path.substring(0, index)\n-                        val buildFile = File(projectPath + \"build.gradle\")\n-                        if (buildFile.exists() && buildFile.readText().contains(\"kotlin\")) {\n-                            containsKotlin = true\n-                            break@outer\n-                        }\n+            for (configuration in project.configurations) {\n+                for (dependency in configuration.dependencies) {\n+                    if (dependency.name.startsWith(\"kotlin-stdlib\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9662a4742bc6980ddee0ca457c176f5321f43bd7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc3MjA5OA==", "bodyText": "Format is <group>:<name>:<version>. Seems to do the right thing...as opposed to the old one which I printed after the /\nAnalyzed:  name=compatibilityExample,           containsKotlin=true/false,   sync=true,   targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=encryptionExample,              containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=gridViewExample,                containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=introExample,                   containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=jsonExample,                    containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=kotlinExample,                  containsKotlin=true/false,   sync=false,  targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=migrationExample,               containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=mongoDbRealmExample,            containsKotlin=true/false,   sync=true,   targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=multiprocessExample,            containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=newsreaderExample,              containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=rxJavaExample,                  containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=threadExample,                  containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=unitTestExample,                containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=app\nAnalyzed:  name=library,                        containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=library\nAnalyzed:  name=app,                            containsKotlin=false/false,  sync=false,  targetSdk=29,  minSdk=16,  target=app", "url": "https://github.com/realm/realm-java/pull/7041#discussion_r472772098", "createdAt": "2020-08-19T06:49:55Z", "author": {"login": "rorbech"}, "path": "realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt", "diffHunk": "@@ -133,19 +137,14 @@ class RealmTransformer(val project: Project) : Transform() {\n             }\n \n             var containsKotlin = false\n-\n+            // Should be safe to iterate the configurations as we are way beyond the configuration\n+            // phase\n             outer@\n-            for(input: TransformInput in inputs) {\n-                for (di: DirectoryInput in input.directoryInputs) {\n-                    val path: String = di.file.absolutePath\n-                    val index: Int = path.indexOf(\"build${File.separator}intermediates${File.separator}classes\")\n-                    if (index != -1) {\n-                        val projectPath: String = path.substring(0, index)\n-                        val buildFile = File(projectPath + \"build.gradle\")\n-                        if (buildFile.exists() && buildFile.readText().contains(\"kotlin\")) {\n-                            containsKotlin = true\n-                            break@outer\n-                        }\n+            for (configuration in project.configurations) {\n+                for (dependency in configuration.dependencies) {\n+                    if (dependency.name.startsWith(\"kotlin-stdlib\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNTEwNw=="}, "originalCommit": {"oid": "9662a4742bc6980ddee0ca457c176f5321f43bd7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc3MzAyNw==", "bodyText": "Cool \ud83d\udc4d", "url": "https://github.com/realm/realm-java/pull/7041#discussion_r472773027", "createdAt": "2020-08-19T06:50:58Z", "author": {"login": "cmelchior"}, "path": "realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt", "diffHunk": "@@ -133,19 +137,14 @@ class RealmTransformer(val project: Project) : Transform() {\n             }\n \n             var containsKotlin = false\n-\n+            // Should be safe to iterate the configurations as we are way beyond the configuration\n+            // phase\n             outer@\n-            for(input: TransformInput in inputs) {\n-                for (di: DirectoryInput in input.directoryInputs) {\n-                    val path: String = di.file.absolutePath\n-                    val index: Int = path.indexOf(\"build${File.separator}intermediates${File.separator}classes\")\n-                    if (index != -1) {\n-                        val projectPath: String = path.substring(0, index)\n-                        val buildFile = File(projectPath + \"build.gradle\")\n-                        if (buildFile.exists() && buildFile.readText().contains(\"kotlin\")) {\n-                            containsKotlin = true\n-                            break@outer\n-                        }\n+            for (configuration in project.configurations) {\n+                for (dependency in configuration.dependencies) {\n+                    if (dependency.name.startsWith(\"kotlin-stdlib\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNTEwNw=="}, "originalCommit": {"oid": "9662a4742bc6980ddee0ca457c176f5321f43bd7"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjQ0NDI1OnYy", "diffSide": "RIGHT", "path": "realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjo0NTo0NlrOHCdIQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjo0NTo0NlrOHCdIQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNjQ1MA==", "bodyText": "Nitpick. I would check for each case specifically and if we couldn't detect either app or library use \"unknown\"?", "url": "https://github.com/realm/realm-java/pull/7041#discussion_r472336450", "createdAt": "2020-08-18T16:45:46Z", "author": {"login": "cmelchior"}, "path": "realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt", "diffHunk": "@@ -154,8 +153,17 @@ class RealmTransformer(val project: Project) : Transform() {\n             val targetSdk: String? = project.getTargetSdk()\n             val minSdk: String?  = project.getMinSdk()\n             val sync: Boolean = Utils.isSyncEnabled(project)\n-            val analytics = RealmAnalytics(packages, containsKotlin, sync, targetSdk, minSdk)\n-            analytics.execute()\n+            val app = project.plugins.findPlugin(\"com.android.application\") != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9662a4742bc6980ddee0ca457c176f5321f43bd7"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTk1NTA4OnYy", "diffSide": "RIGHT", "path": "realm-transformer/src/main/java/io/realm/transformer/UrlEncodedAnalytics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTo0OToxN1rOHC_1ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTo1ODoyOFrOHDAJBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkwNTE0Ng==", "bodyText": "Remove this?", "url": "https://github.com/realm/realm-java/pull/7041#discussion_r472905146", "createdAt": "2020-08-19T09:49:17Z", "author": {"login": "cmelchior"}, "path": "realm-transformer/src/main/java/io/realm/transformer/UrlEncodedAnalytics.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.realm.transformer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.security.NoSuchAlgorithmException;\n+\n+\n+\n+public class UrlEncodedAnalytics {\n+\n+    private String prefix;\n+    private String suffix;\n+\n+    public UrlEncodedAnalytics(String prefix, String suffix) {\n+        this.prefix = prefix;\n+        this.suffix = suffix;\n+    }\n+\n+    public void execute(RealmAnalytics analytics) {\n+        try {\n+            URL url = getUrl(analytics);\n+\n+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.connect();\n+            connection.getResponseCode();\n+        } catch (Exception ignored) {\n+        }\n+    }\n+\n+    private URL getUrl(RealmAnalytics analytics) throws\n+            MalformedURLException,\n+            SocketException,\n+            NoSuchAlgorithmException,\n+            UnsupportedEncodingException {\n+        return new URL(prefix + Utils.base64Encode(analytics.generateJson()) + suffix);\n+    }\n+\n+    public static class MixPanel extends UrlEncodedAnalytics {\n+        private static final String ADDRESS_PREFIX = \"https://api.mixpanel.com/track/?data=\";\n+        private static final String ADDRESS_SUFFIX = \"&ip=1\";\n+\n+        public MixPanel() {\n+            super(ADDRESS_PREFIX, ADDRESS_SUFFIX);\n+        }\n+    }\n+\n+    public static class Segment extends UrlEncodedAnalytics {\n+        // FIXME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb3c22bc31237f037cbfe8d89b166fcd64364e9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkxMDA4NQ==", "bodyText": "Yep. The webhook-part is still in review, so still need to update the actual URL when it is done. I accidentially made a non-draft PR and got away from converting it.", "url": "https://github.com/realm/realm-java/pull/7041#discussion_r472910085", "createdAt": "2020-08-19T09:58:28Z", "author": {"login": "rorbech"}, "path": "realm-transformer/src/main/java/io/realm/transformer/UrlEncodedAnalytics.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.realm.transformer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.security.NoSuchAlgorithmException;\n+\n+\n+\n+public class UrlEncodedAnalytics {\n+\n+    private String prefix;\n+    private String suffix;\n+\n+    public UrlEncodedAnalytics(String prefix, String suffix) {\n+        this.prefix = prefix;\n+        this.suffix = suffix;\n+    }\n+\n+    public void execute(RealmAnalytics analytics) {\n+        try {\n+            URL url = getUrl(analytics);\n+\n+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.connect();\n+            connection.getResponseCode();\n+        } catch (Exception ignored) {\n+        }\n+    }\n+\n+    private URL getUrl(RealmAnalytics analytics) throws\n+            MalformedURLException,\n+            SocketException,\n+            NoSuchAlgorithmException,\n+            UnsupportedEncodingException {\n+        return new URL(prefix + Utils.base64Encode(analytics.generateJson()) + suffix);\n+    }\n+\n+    public static class MixPanel extends UrlEncodedAnalytics {\n+        private static final String ADDRESS_PREFIX = \"https://api.mixpanel.com/track/?data=\";\n+        private static final String ADDRESS_SUFFIX = \"&ip=1\";\n+\n+        public MixPanel() {\n+            super(ADDRESS_PREFIX, ADDRESS_SUFFIX);\n+        }\n+    }\n+\n+    public static class Segment extends UrlEncodedAnalytics {\n+        // FIXME", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkwNTE0Ng=="}, "originalCommit": {"oid": "2fb3c22bc31237f037cbfe8d89b166fcd64364e9"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 492, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}