{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NzgyNzQz", "number": 6963, "title": "Migrate and reenable encrypted sync tests", "bodyText": "", "createdAt": "2020-06-22T08:46:07Z", "url": "https://github.com/realm/realm-java/pull/6963", "merged": true, "mergeCommit": {"oid": "ef91f43702db27d666e506fce835ea8a1c41a7ee"}, "closed": true, "closedAt": "2020-06-23T13:45:22Z", "author": {"login": "rorbech"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctr_j2gH2gAyNDM3NzgyNzQzOjM0ZTNkYjc5YmM0NGUyMmM3NDVhNTM0ZDY1NjgzZmYxYTk5NjIwOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuDjR_gH2gAyNDM3NzgyNzQzOmJjZDhmNTg4MmY1OWUxZmYyMGUzNTAyMWVkMzhjYzBmNTU0OTZhZTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "34e3db79bc44e22c745a534d65683ff1a9962096", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/34e3db79bc44e22c745a534d65683ff1a9962096", "committedDate": "2020-06-22T07:48:01Z", "message": "Move EncryptedSynchronizedRealmTests to Kotlin source set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb1cb306ca2cf4894c6e4da0bd73931f98c1b02a", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/cb1cb306ca2cf4894c6e4da0bd73931f98c1b02a", "committedDate": "2020-06-22T07:48:59Z", "message": "Automatic convertion of EncryptedSynchronizedRealmTests to Kotlin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd31d947c88385e8f388e1b5779c298f7f111eb7", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/cd31d947c88385e8f388e1b5779c298f7f111eb7", "committedDate": "2020-06-22T08:44:19Z", "message": "Fix EncryptionSynchronizedRealmTests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTgyMjE4", "url": "https://github.com/realm/realm-java/pull/6963#pullrequestreview-434982218", "createdAt": "2020-06-22T14:32:08Z", "commit": {"oid": "cd31d947c88385e8f388e1b5779c298f7f111eb7"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozMjowOFrOGnDWoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozMzo0OFrOGnDbzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMjU5Mg==", "bodyText": "Is this needed or just for development purposes?", "url": "https://github.com/realm/realm-java/pull/6963#discussion_r443602592", "createdAt": "2020-06-22T14:32:08Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/syncIntegrationTest/kotlin/io/realm/EncryptedSynchronizedRealmTests.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.entities.SyncStringOnly\n+import io.realm.exceptions.RealmFileException\n+import io.realm.kotlin.syncSession\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.App\n+import io.realm.mongodb.Credentials\n+import io.realm.mongodb.close\n+import io.realm.mongodb.registerUserAndLogin\n+import io.realm.mongodb.sync.SyncConfiguration\n+import io.realm.mongodb.sync.testSchema\n+import org.bson.BsonObjectId\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertFailsWith\n+\n+private val SECRET_PASSWORD = \"123456\"\n+\n+class EncryptedSynchronizedRealmTests {\n+\n+    private lateinit var app: App\n+\n+    private val configurationFactory: TestSyncConfigurationFactory = TestSyncConfigurationFactory()\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.ALL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd31d947c88385e8f388e1b5779c298f7f111eb7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMzQxNQ==", "bodyText": "We should statically import these instead of usingAssert.", "url": "https://github.com/realm/realm-java/pull/6963#discussion_r443603415", "createdAt": "2020-06-22T14:33:10Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/syncIntegrationTest/kotlin/io/realm/EncryptedSynchronizedRealmTests.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.entities.SyncStringOnly\n+import io.realm.exceptions.RealmFileException\n+import io.realm.kotlin.syncSession\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.App\n+import io.realm.mongodb.Credentials\n+import io.realm.mongodb.close\n+import io.realm.mongodb.registerUserAndLogin\n+import io.realm.mongodb.sync.SyncConfiguration\n+import io.realm.mongodb.sync.testSchema\n+import org.bson.BsonObjectId\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertFailsWith\n+\n+private val SECRET_PASSWORD = \"123456\"\n+\n+class EncryptedSynchronizedRealmTests {\n+\n+    private lateinit var app: App\n+\n+    private val configurationFactory: TestSyncConfigurationFactory = TestSyncConfigurationFactory()\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.ALL)\n+        app = TestApp()\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+        RealmLog.setLevel(LogLevel.WARN)\n+    }\n+\n+    // Make sure the encryption is local, i.e after deleting a synced Realm\n+    // re-open it again with no (or different) key, should be possible.\n+    @Test\n+    fun setEncryptionKey_canReOpenRealmWithoutKey() {\n+\n+        // STEP 1: open a synced Realm using a local encryption key\n+        var user = app.registerUserAndLogin(TestHelper.getRandomEmail(), SECRET_PASSWORD)\n+        val randomKey = TestHelper.getRandomKey()\n+        val configWithEncryption: SyncConfiguration = configurationFactory.createSyncConfigurationBuilder(user, BsonObjectId())\n+                .testSchema(SyncStringOnly::class.java)\n+                .waitForInitialRemoteData()\n+                .errorHandler { session, error -> Assert.fail(error.getErrorMessage()) }\n+                .encryptionKey(randomKey)\n+                .build()\n+\n+        Realm.getInstance(configWithEncryption).use { realm ->\n+            Assert.assertTrue(realm.isEmpty)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd31d947c88385e8f388e1b5779c298f7f111eb7"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMzkxNg==", "bodyText": "!! shouldn't be needed?", "url": "https://github.com/realm/realm-java/pull/6963#discussion_r443603916", "createdAt": "2020-06-22T14:33:48Z", "author": {"login": "cmelchior"}, "path": "realm/realm-library/src/syncIntegrationTest/kotlin/io/realm/EncryptedSynchronizedRealmTests.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.entities.SyncStringOnly\n+import io.realm.exceptions.RealmFileException\n+import io.realm.kotlin.syncSession\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.App\n+import io.realm.mongodb.Credentials\n+import io.realm.mongodb.close\n+import io.realm.mongodb.registerUserAndLogin\n+import io.realm.mongodb.sync.SyncConfiguration\n+import io.realm.mongodb.sync.testSchema\n+import org.bson.BsonObjectId\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import kotlin.test.assertFailsWith\n+\n+private val SECRET_PASSWORD = \"123456\"\n+\n+class EncryptedSynchronizedRealmTests {\n+\n+    private lateinit var app: App\n+\n+    private val configurationFactory: TestSyncConfigurationFactory = TestSyncConfigurationFactory()\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.ALL)\n+        app = TestApp()\n+    }\n+\n+    @After\n+    fun teardown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+        RealmLog.setLevel(LogLevel.WARN)\n+    }\n+\n+    // Make sure the encryption is local, i.e after deleting a synced Realm\n+    // re-open it again with no (or different) key, should be possible.\n+    @Test\n+    fun setEncryptionKey_canReOpenRealmWithoutKey() {\n+\n+        // STEP 1: open a synced Realm using a local encryption key\n+        var user = app.registerUserAndLogin(TestHelper.getRandomEmail(), SECRET_PASSWORD)\n+        val randomKey = TestHelper.getRandomKey()\n+        val configWithEncryption: SyncConfiguration = configurationFactory.createSyncConfigurationBuilder(user, BsonObjectId())\n+                .testSchema(SyncStringOnly::class.java)\n+                .waitForInitialRemoteData()\n+                .errorHandler { session, error -> Assert.fail(error.getErrorMessage()) }\n+                .encryptionKey(randomKey)\n+                .build()\n+\n+        Realm.getInstance(configWithEncryption).use { realm ->\n+            Assert.assertTrue(realm.isEmpty)\n+            realm.executeTransaction {\n+                realm.createObject(SyncStringOnly::class.java, ObjectId()).chars = \"Hi Alice\"\n+            }\n+\n+            // STEP 2:  make sure the changes gets to the server\n+            realm.syncSession.uploadAllLocalChanges()\n+        }\n+        user.logOut()\n+\n+        // STEP 3: try to open again the same sync Realm but different local name without the encryption key should not\n+        // fail\n+        var user2 = app.registerUserAndLogin(TestHelper.getRandomEmail(), SECRET_PASSWORD)\n+        val configWithoutEncryption: SyncConfiguration = configurationFactory.createSyncConfigurationBuilder(user2, configWithEncryption.partitionValue)\n+                // Using different user with same partition value to trigger a different path instead of\n+                // .name(\"newName\")\n+                .testSchema(SyncStringOnly::class.java)\n+                .waitForInitialRemoteData()\n+                .errorHandler { session, error -> Assert.fail(error.getErrorMessage()) }\n+                .build()\n+\n+        Realm.getInstance(configWithoutEncryption).use { realm ->\n+            val all = realm.where(SyncStringOnly::class.java).findAll()\n+            Assert.assertEquals(1, all.size.toLong())\n+            Assert.assertEquals(\"Hi Alice\", all[0]!!.chars)\n+        }\n+        user.logOut()\n+    }\n+\n+    // If an encrypted synced Realm is re-opened with the wrong key, throw an exception.\n+    @Test\n+    fun setEncryptionKey_shouldCrashIfKeyNotProvided() {\n+        // STEP 1: open a synced Realm using a local encryption key\n+        var user = app.registerUserAndLogin(TestHelper.getRandomEmail(), SECRET_PASSWORD)\n+        val randomKey = TestHelper.getRandomKey()\n+        val configWithEncryption: SyncConfiguration = configurationFactory.createSyncConfigurationBuilder(user, BsonObjectId())\n+                .testSchema(SyncStringOnly::class.java)\n+                .waitForInitialRemoteData()\n+                .errorHandler { session, error -> Assert.fail(error.getErrorMessage()) }\n+                .encryptionKey(randomKey)\n+                .build()\n+\n+        Realm.getInstance(configWithEncryption).use { realm ->\n+            Assert.assertTrue(realm!!.isEmpty)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd31d947c88385e8f388e1b5779c298f7f111eb7"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95e9016a900255c64f06967287dde746730c2175", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/95e9016a900255c64f06967287dde746730c2175", "committedDate": "2020-06-23T08:02:37Z", "message": "Updates according to review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcd8f5882f59e1ff20e35021ed38cc0f55496ae8", "author": {"user": {"login": "rorbech", "name": "Claus R\u00f8rbech"}}, "url": "https://github.com/realm/realm-java/commit/bcd8f5882f59e1ff20e35021ed38cc0f55496ae8", "committedDate": "2020-06-23T11:14:51Z", "message": "Merge branch 'v10' into cr/sync-integration-test-encrypted-realm"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2252, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}