{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDMyODg0", "number": 633, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowMTo1MVrOD__9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToxODoxNlrOEA2hqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDM0NzQ3OnYy", "diffSide": "RIGHT", "path": "whois-rpsl/src/main/java/net/ripe/db/whois/common/rpsl/attrs/InetnumStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowMTo1MVrOGbAEUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowMTo1MVrOGbAEUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2NTg0Mw==", "bodyText": "Should we still allow LIR-PARTITIONED PA under SUB-ALLOCATED PA (for now)?", "url": "https://github.com/RIPE-NCC/whois/pull/633#discussion_r430965843", "createdAt": "2020-05-27T09:01:51Z", "author": {"login": "eshryane"}, "path": "whois-rpsl/src/main/java/net/ripe/db/whois/common/rpsl/attrs/InetnumStatus.java", "diffHunk": "@@ -16,37 +17,31 @@\n import static net.ripe.db.whois.common.rpsl.attrs.OrgType.RIR;\n \n public enum InetnumStatus implements InetStatus {\n+\n     ALLOCATED_PA(\"ALLOCATED PA\", IANA, RIR, LIR),\n-    ALLOCATED_PI(\"ALLOCATED PI\", IANA, RIR, LIR),\n     ALLOCATED_UNSPECIFIED(\"ALLOCATED UNSPECIFIED\", IANA, RIR, LIR),\n     LIR_PARTITIONED_PA(\"LIR-PARTITIONED PA\", LIR, OTHER),\n-    LIR_PARTITIONED_PI(\"LIR-PARTITIONED PI\", LIR, OTHER),\n     SUB_ALLOCATED_PA(\"SUB-ALLOCATED PA\", LIR, OTHER),\n     ASSIGNED_PA(\"ASSIGNED PA\", LIR, OTHER),\n     ASSIGNED_PI(\"ASSIGNED PI\", LIR, OTHER, RIR),\n     ASSIGNED_ANYCAST(\"ASSIGNED ANYCAST\", LIR, OTHER),\n-    EARLY_REGISTRATION(\"EARLY-REGISTRATION\", LIR, OTHER),\n-    NOT_SET(\"NOT-SET\", LIR, OTHER),\n     LEGACY(\"LEGACY\", LIR, OTHER);\n \n-    private static final EnumSet<InetnumStatus> RS_MNTNER_STATUSES = EnumSet.of(ASSIGNED_ANYCAST, EARLY_REGISTRATION, ALLOCATED_UNSPECIFIED);\n-    private static final EnumSet<InetnumStatus> NEEDS_ORG_REFERENCE = EnumSet.of(ALLOCATED_PI, ALLOCATED_PA, ALLOCATED_UNSPECIFIED);\n-    private static final EnumSet<InetnumStatus> NEEDS_PARENT_RS_MNTR = EnumSet.of(ALLOCATED_UNSPECIFIED, ALLOCATED_PI);\n+    private static final EnumSet<InetnumStatus> RS_MNTNER_STATUSES = EnumSet.of(ASSIGNED_ANYCAST, ALLOCATED_UNSPECIFIED);\n+    private static final EnumSet<InetnumStatus> NEEDS_ORG_REFERENCE = EnumSet.of(ALLOCATED_PA, ALLOCATED_UNSPECIFIED);\n+    private static final EnumSet<InetnumStatus> NEEDS_PARENT_RS_MNTR = EnumSet.of(ALLOCATED_UNSPECIFIED);\n \n     private static final EnumMap<InetnumStatus, EnumSet<InetnumStatus>> PARENT_STATUS;\n \n     static {\n-        PARENT_STATUS = new EnumMap(InetnumStatus.class);\n-        PARENT_STATUS.put(ALLOCATED_PI, EnumSet.of(ALLOCATED_UNSPECIFIED));\n+        PARENT_STATUS = Maps.newEnumMap(InetnumStatus.class);\n         PARENT_STATUS.put(ALLOCATED_PA, EnumSet.of(ALLOCATED_UNSPECIFIED));\n         PARENT_STATUS.put(ALLOCATED_UNSPECIFIED, EnumSet.of(ALLOCATED_UNSPECIFIED));\n-        PARENT_STATUS.put(LIR_PARTITIONED_PA, EnumSet.of(ALLOCATED_UNSPECIFIED, ALLOCATED_PA, LIR_PARTITIONED_PA, SUB_ALLOCATED_PA, EARLY_REGISTRATION));\n-        PARENT_STATUS.put(LIR_PARTITIONED_PI, EnumSet.of(ALLOCATED_UNSPECIFIED, ALLOCATED_PI, LIR_PARTITIONED_PI, EARLY_REGISTRATION));\n-        PARENT_STATUS.put(SUB_ALLOCATED_PA, EnumSet.of(ALLOCATED_PA, LIR_PARTITIONED_PA, SUB_ALLOCATED_PA, EARLY_REGISTRATION));\n-        PARENT_STATUS.put(ASSIGNED_PA, EnumSet.of(ALLOCATED_UNSPECIFIED, ALLOCATED_PA, LIR_PARTITIONED_PA, SUB_ALLOCATED_PA, EARLY_REGISTRATION, ASSIGNED_PA));\n-        PARENT_STATUS.put(ASSIGNED_ANYCAST, EnumSet.of(ALLOCATED_UNSPECIFIED, ALLOCATED_PI));\n-        PARENT_STATUS.put(EARLY_REGISTRATION, EnumSet.of(ALLOCATED_UNSPECIFIED, EARLY_REGISTRATION));\n-        PARENT_STATUS.put(ASSIGNED_PI, EnumSet.of(ALLOCATED_UNSPECIFIED, ALLOCATED_PI, LIR_PARTITIONED_PI, EARLY_REGISTRATION, ASSIGNED_PI));\n+        PARENT_STATUS.put(LIR_PARTITIONED_PA, EnumSet.of(ALLOCATED_UNSPECIFIED, ALLOCATED_PA, LIR_PARTITIONED_PA));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50f5f36fc68a85fab0d3b7b24a2ce1eb4f39bf2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDM1ODExOnYy", "diffSide": "RIGHT", "path": "whois-rpsl/src/test/java/net/ripe/db/whois/common/rpsl/attrs/InetnumStatusTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowNDo0NlrOGbALkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowNToyMFrOGbANEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2NzY5Nw==", "bodyText": "Should we still allow LIR-PARTITIONED PA under LIR-PARTITIONED PA (for now) ?", "url": "https://github.com/RIPE-NCC/whois/pull/633#discussion_r430967697", "createdAt": "2020-05-27T09:04:46Z", "author": {"login": "eshryane"}, "path": "whois-rpsl/src/test/java/net/ripe/db/whois/common/rpsl/attrs/InetnumStatusTest.java", "diffHunk": "@@ -21,54 +18,26 @@\n \n     @Test\n     public void parentVerification() {\n-        assertThat(ASSIGNED_PA.worksWithParentStatus(ASSIGNED_PA, true), is(true));\n-        assertThat(ASSIGNED_PA.worksWithParentStatus(EARLY_REGISTRATION, true), is(true));\n         assertThat(ASSIGNED_PA.worksWithParentStatus(SUB_ALLOCATED_PA, true), is(true));\n-        assertThat(ASSIGNED_PA.worksWithParentStatus(LIR_PARTITIONED_PI, true), is(false));\n         assertThat(ASSIGNED_PA.worksWithParentStatus(LIR_PARTITIONED_PA, true), is(true));\n-        assertThat(ASSIGNED_PA.worksWithParentStatus(ALLOCATED_UNSPECIFIED, true), is(true));\n \n         assertThat(SUB_ALLOCATED_PA.worksWithParentStatus(ALLOCATED_PA, true), is(true));\n         assertThat(SUB_ALLOCATED_PA.worksWithParentStatus(LIR_PARTITIONED_PA, true), is(true));\n-        assertThat(SUB_ALLOCATED_PA.worksWithParentStatus(SUB_ALLOCATED_PA, true), is(true));\n-        assertThat(SUB_ALLOCATED_PA.worksWithParentStatus(EARLY_REGISTRATION, false), is(true));\n \n         assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(ALLOCATED_UNSPECIFIED, true), is(true));\n-        assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(ALLOCATED_PI, true), is(false));\n         assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(ALLOCATED_PA, true), is(true));\n-        assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(LIR_PARTITIONED_PI, true), is(false));\n-        assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(LIR_PARTITIONED_PA, true), is(true));\n-        assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(EARLY_REGISTRATION, true), is(true));\n-        assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(SUB_ALLOCATED_PA, true), is(true));\n-\n-        assertThat(LIR_PARTITIONED_PI.worksWithParentStatus(EARLY_REGISTRATION, true), is(true));\n-        assertThat(LIR_PARTITIONED_PI.worksWithParentStatus(ALLOCATED_UNSPECIFIED, true), is(true));\n-        assertThat(LIR_PARTITIONED_PI.worksWithParentStatus(LIR_PARTITIONED_PI, true), is(true));\n-        assertThat(LIR_PARTITIONED_PI.worksWithParentStatus(ALLOCATED_PI, true), is(true));\n-        assertThat(LIR_PARTITIONED_PI.worksWithParentStatus(LIR_PARTITIONED_PA, true), is(false));\n-\n-        assertThat(ALLOCATED_PI.worksWithParentStatus(ALLOCATED_UNSPECIFIED, true), is(true));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50f5f36fc68a85fab0d3b7b24a2ce1eb4f39bf2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2ODA4MA==", "bodyText": "Also under SUB-ALLOCATED PA", "url": "https://github.com/RIPE-NCC/whois/pull/633#discussion_r430968080", "createdAt": "2020-05-27T09:05:20Z", "author": {"login": "eshryane"}, "path": "whois-rpsl/src/test/java/net/ripe/db/whois/common/rpsl/attrs/InetnumStatusTest.java", "diffHunk": "@@ -21,54 +18,26 @@\n \n     @Test\n     public void parentVerification() {\n-        assertThat(ASSIGNED_PA.worksWithParentStatus(ASSIGNED_PA, true), is(true));\n-        assertThat(ASSIGNED_PA.worksWithParentStatus(EARLY_REGISTRATION, true), is(true));\n         assertThat(ASSIGNED_PA.worksWithParentStatus(SUB_ALLOCATED_PA, true), is(true));\n-        assertThat(ASSIGNED_PA.worksWithParentStatus(LIR_PARTITIONED_PI, true), is(false));\n         assertThat(ASSIGNED_PA.worksWithParentStatus(LIR_PARTITIONED_PA, true), is(true));\n-        assertThat(ASSIGNED_PA.worksWithParentStatus(ALLOCATED_UNSPECIFIED, true), is(true));\n \n         assertThat(SUB_ALLOCATED_PA.worksWithParentStatus(ALLOCATED_PA, true), is(true));\n         assertThat(SUB_ALLOCATED_PA.worksWithParentStatus(LIR_PARTITIONED_PA, true), is(true));\n-        assertThat(SUB_ALLOCATED_PA.worksWithParentStatus(SUB_ALLOCATED_PA, true), is(true));\n-        assertThat(SUB_ALLOCATED_PA.worksWithParentStatus(EARLY_REGISTRATION, false), is(true));\n \n         assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(ALLOCATED_UNSPECIFIED, true), is(true));\n-        assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(ALLOCATED_PI, true), is(false));\n         assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(ALLOCATED_PA, true), is(true));\n-        assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(LIR_PARTITIONED_PI, true), is(false));\n-        assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(LIR_PARTITIONED_PA, true), is(true));\n-        assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(EARLY_REGISTRATION, true), is(true));\n-        assertThat(LIR_PARTITIONED_PA.worksWithParentStatus(SUB_ALLOCATED_PA, true), is(true));\n-\n-        assertThat(LIR_PARTITIONED_PI.worksWithParentStatus(EARLY_REGISTRATION, true), is(true));\n-        assertThat(LIR_PARTITIONED_PI.worksWithParentStatus(ALLOCATED_UNSPECIFIED, true), is(true));\n-        assertThat(LIR_PARTITIONED_PI.worksWithParentStatus(LIR_PARTITIONED_PI, true), is(true));\n-        assertThat(LIR_PARTITIONED_PI.worksWithParentStatus(ALLOCATED_PI, true), is(true));\n-        assertThat(LIR_PARTITIONED_PI.worksWithParentStatus(LIR_PARTITIONED_PA, true), is(false));\n-\n-        assertThat(ALLOCATED_PI.worksWithParentStatus(ALLOCATED_UNSPECIFIED, true), is(true));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2NzY5Nw=="}, "originalCommit": {"oid": "b50f5f36fc68a85fab0d3b7b24a2ce1eb4f39bf2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzI4NTEwOnYy", "diffSide": "RIGHT", "path": "whois-api/src/test/java/net/ripe/db/whois/api/rest/BatchUpdatesServiceTestIntegration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToxNzowOVrOGcYr5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToyNTozM1rOGgV3CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNzc2Ng==", "bodyText": "Remove the catch? (test won't fail)", "url": "https://github.com/RIPE-NCC/whois/pull/633#discussion_r432417766", "createdAt": "2020-05-29T11:17:09Z", "author": {"login": "eshryane"}, "path": "whois-api/src/test/java/net/ripe/db/whois/api/rest/BatchUpdatesServiceTestIntegration.java", "diffHunk": "@@ -437,10 +437,15 @@ public void batch_update_using_sso_credential() {\n                                 \"source:       TEST\")\n                 );\n \n-        RestTest.target(getPort(), \"whois/batch/TEST\")\n-                .request()\n-                .cookie(\"crowd.token_key\", \"valid-token\")\n-                .post(Entity.entity(whoisResources, MediaType.APPLICATION_JSON_TYPE), WhoisResources.class);\n+        try {\n+            RestTest.target(getPort(), \"whois/batch/TEST\")\n+                    .request()\n+                    .cookie(\"crowd.token_key\", \"valid-token\")\n+                    .post(Entity.entity(whoisResources, MediaType.APPLICATION_JSON_TYPE), WhoisResources.class);\n+        } catch (BadRequestException bre) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea060a7458378a2f453d9e539726b4a6e99b8c9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2NTc2OQ==", "bodyText": "Done, cleaned up left over test code..", "url": "https://github.com/RIPE-NCC/whois/pull/633#discussion_r436565769", "createdAt": "2020-06-08T09:25:33Z", "author": {"login": "sbusk"}, "path": "whois-api/src/test/java/net/ripe/db/whois/api/rest/BatchUpdatesServiceTestIntegration.java", "diffHunk": "@@ -437,10 +437,15 @@ public void batch_update_using_sso_credential() {\n                                 \"source:       TEST\")\n                 );\n \n-        RestTest.target(getPort(), \"whois/batch/TEST\")\n-                .request()\n-                .cookie(\"crowd.token_key\", \"valid-token\")\n-                .post(Entity.entity(whoisResources, MediaType.APPLICATION_JSON_TYPE), WhoisResources.class);\n+        try {\n+            RestTest.target(getPort(), \"whois/batch/TEST\")\n+                    .request()\n+                    .cookie(\"crowd.token_key\", \"valid-token\")\n+                    .post(Entity.entity(whoisResources, MediaType.APPLICATION_JSON_TYPE), WhoisResources.class);\n+        } catch (BadRequestException bre) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNzc2Ng=="}, "originalCommit": {"oid": "1ea060a7458378a2f453d9e539726b4a6e99b8c9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzI4ODA4OnYy", "diffSide": "LEFT", "path": "whois-api/src/test/java/net/ripe/db/whois/api/rest/WhoisRestServiceEndToEndTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToxODoxNlrOGcYt4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToyNzo1MFrOGgV7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxODI3NA==", "bodyText": "Should this test be removed? It's testing the error message, not the missing status", "url": "https://github.com/RIPE-NCC/whois/pull/633#discussion_r432418274", "createdAt": "2020-05-29T11:18:16Z", "author": {"login": "eshryane"}, "path": "whois-api/src/test/java/net/ripe/db/whois/api/rest/WhoisRestServiceEndToEndTest.java", "diffHunk": "@@ -678,27 +677,6 @@ public void apply(String input, Deque<String> result) {\n                 \"<credential>PasswordCredential</credential>\"));\n     }\n \n-    @Test\n-    public void create_inetnum_with_parent_without_status_to_check_error_message_beginning_with_percent_is_handled_correctly() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea060a7458378a2f453d9e539726b4a6e99b8c9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2Njk2Nw==", "bodyText": "It was creating a situation that cannot be created and then checking against (parent has no status). All that logic has been removed as it is no longer possible to create these types of situations and none exist in the data anymore. Test is therefore obsolete.", "url": "https://github.com/RIPE-NCC/whois/pull/633#discussion_r436566967", "createdAt": "2020-06-08T09:27:50Z", "author": {"login": "sbusk"}, "path": "whois-api/src/test/java/net/ripe/db/whois/api/rest/WhoisRestServiceEndToEndTest.java", "diffHunk": "@@ -678,27 +677,6 @@ public void apply(String input, Deque<String> result) {\n                 \"<credential>PasswordCredential</credential>\"));\n     }\n \n-    @Test\n-    public void create_inetnum_with_parent_without_status_to_check_error_message_beginning_with_percent_is_handled_correctly() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxODI3NA=="}, "originalCommit": {"oid": "1ea060a7458378a2f453d9e539726b4a6e99b8c9"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4639, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}