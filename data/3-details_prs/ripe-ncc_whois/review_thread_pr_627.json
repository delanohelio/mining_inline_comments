{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1ODU5ODM0", "number": 627, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzoyNDoyNVrODzlX2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzozNzo0MlrODzlrMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDE2MjgwOnYy", "diffSide": "RIGHT", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzoyNDoyNVrOGIGvVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDo0NzowMlrOGIOdFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1MjIxNA==", "bodyText": "Use CIString? Or are these values always lowercase?", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411152214", "createdAt": "2020-04-20T07:24:25Z", "author": {"login": "eshryane"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3NzgyNg==", "bodyText": "They're part of delegated stats format and always lowercase apparently..", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411277826", "createdAt": "2020-04-20T10:45:41Z", "author": {"login": "sbusk"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1MjIxNA=="}, "originalCommit": {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3ODYxMw==", "bodyText": "Ok if it's already implemented this way", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411278613", "createdAt": "2020-04-20T10:47:02Z", "author": {"login": "eshryane"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1MjIxNA=="}, "originalCommit": {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDE2NDI5OnYy", "diffSide": "RIGHT", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzoyNDo0OFrOGIGwKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzoyNDo0OFrOGIGwKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1MjQyNQ==", "bodyText": "Use CIString for parameters also?", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411152425", "createdAt": "2020-04-20T07:24:48Z", "author": {"login": "eshryane"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");\n+\n+    protected final Logger logger;\n+\n+    final SortedRangeSet<Asn, AsnRange> autNums = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv4, Ipv4Range> ipv4Space = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv6, Ipv6Range> ipv6Space = new SortedRangeSet<>();\n+\n+    AbstractAuthoritativeResourceLoader(final Logger logger) {\n+        this.logger = logger;\n+    }\n+\n+    void handleResource(final String source,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDE2Njg3OnYy", "diffSide": "RIGHT", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzoyNToyOVrOGIGxmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDo0NTowMlrOGIOYpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1Mjc5NA==", "bodyText": "Document when an asterisk is used? Is this RSNG specific, or in the delegated stats format?", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411152794", "createdAt": "2020-04-20T07:25:29Z", "author": {"login": "eshryane"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");\n+\n+    protected final Logger logger;\n+\n+    final SortedRangeSet<Asn, AsnRange> autNums = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv4, Ipv4Range> ipv4Space = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv6, Ipv6Range> ipv6Space = new SortedRangeSet<>();\n+\n+    AbstractAuthoritativeResourceLoader(final Logger logger) {\n+        this.logger = logger;\n+    }\n+\n+    void handleResource(final String source,\n+                        final String countryCode,\n+                        final String type,\n+                        final String start,\n+                        final String value,\n+                        final String status,\n+                        final String expectedSource) {\n+\n+        if (!source.toLowerCase().contains(expectedSource)) {\n+            logger.debug(\"Ignoring source '{}', expected {}\", source, expectedSource);\n+            return;\n+        }\n+\n+        if (countryCode.indexOf('*') != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3NzQ3OA==", "bodyText": "This was in the existing code.. it's in the delegated stats format (which RSNG also outputs).", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411277478", "createdAt": "2020-04-20T10:45:02Z", "author": {"login": "sbusk"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");\n+\n+    protected final Logger logger;\n+\n+    final SortedRangeSet<Asn, AsnRange> autNums = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv4, Ipv4Range> ipv4Space = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv6, Ipv6Range> ipv6Space = new SortedRangeSet<>();\n+\n+    AbstractAuthoritativeResourceLoader(final Logger logger) {\n+        this.logger = logger;\n+    }\n+\n+    void handleResource(final String source,\n+                        final String countryCode,\n+                        final String type,\n+                        final String start,\n+                        final String value,\n+                        final String status,\n+                        final String expectedSource) {\n+\n+        if (!source.toLowerCase().contains(expectedSource)) {\n+            logger.debug(\"Ignoring source '{}', expected {}\", source, expectedSource);\n+            return;\n+        }\n+\n+        if (countryCode.indexOf('*') != -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1Mjc5NA=="}, "originalCommit": {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDE4MDA0OnYy", "diffSide": "RIGHT", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzoyODo1NFrOGIG5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjozNDo1OFrOGLVlXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NDc5Mw==", "bodyText": "Replace ignored with ignored.getClass().getName() for consistency (default toString() may print anything).", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411154793", "createdAt": "2020-04-20T07:28:54Z", "author": {"login": "eshryane"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");\n+\n+    protected final Logger logger;\n+\n+    final SortedRangeSet<Asn, AsnRange> autNums = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv4, Ipv4Range> ipv4Space = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv6, Ipv6Range> ipv6Space = new SortedRangeSet<>();\n+\n+    AbstractAuthoritativeResourceLoader(final Logger logger) {\n+        this.logger = logger;\n+    }\n+\n+    void handleResource(final String source,\n+                        final String countryCode,\n+                        final String type,\n+                        final String start,\n+                        final String value,\n+                        final String status,\n+                        final String expectedSource) {\n+\n+        if (!source.toLowerCase().contains(expectedSource)) {\n+            logger.debug(\"Ignoring source '{}', expected {}\", source, expectedSource);\n+            return;\n+        }\n+\n+        if (countryCode.indexOf('*') != -1) {\n+            logger.debug(\"Ignoring country code '{}'\", countryCode);\n+            return;\n+        }\n+\n+        if (!ALLOWED_STATUSES.contains(status)) {\n+            logger.debug(\"Ignoring status '{}'\", status);\n+            return;\n+        }\n+\n+        try {\n+            switch (type) {\n+                case \"ipv4\":\n+                    createIpv4Resource(start, value);\n+                    break;\n+                case \"ipv6\":\n+                    createIpv6Resource(start, value);\n+                    break;\n+                case \"asn\":\n+                    createAutNum(start, value);\n+                    break;\n+                default:\n+                    logger.debug(\"Unsupported type '{}\", type);\n+                    break;\n+            }\n+        } catch (RuntimeException ignored) {\n+            logger.warn(\"Unexpected '{}-{}'\", ignored, ignored.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0MTE1MQ==", "bodyText": "I don't mind to leave as-is, whatever you prefer", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r414541151", "createdAt": "2020-04-24T12:34:58Z", "author": {"login": "eshryane"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");\n+\n+    protected final Logger logger;\n+\n+    final SortedRangeSet<Asn, AsnRange> autNums = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv4, Ipv4Range> ipv4Space = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv6, Ipv6Range> ipv6Space = new SortedRangeSet<>();\n+\n+    AbstractAuthoritativeResourceLoader(final Logger logger) {\n+        this.logger = logger;\n+    }\n+\n+    void handleResource(final String source,\n+                        final String countryCode,\n+                        final String type,\n+                        final String start,\n+                        final String value,\n+                        final String status,\n+                        final String expectedSource) {\n+\n+        if (!source.toLowerCase().contains(expectedSource)) {\n+            logger.debug(\"Ignoring source '{}', expected {}\", source, expectedSource);\n+            return;\n+        }\n+\n+        if (countryCode.indexOf('*') != -1) {\n+            logger.debug(\"Ignoring country code '{}'\", countryCode);\n+            return;\n+        }\n+\n+        if (!ALLOWED_STATUSES.contains(status)) {\n+            logger.debug(\"Ignoring status '{}'\", status);\n+            return;\n+        }\n+\n+        try {\n+            switch (type) {\n+                case \"ipv4\":\n+                    createIpv4Resource(start, value);\n+                    break;\n+                case \"ipv6\":\n+                    createIpv6Resource(start, value);\n+                    break;\n+                case \"asn\":\n+                    createAutNum(start, value);\n+                    break;\n+                default:\n+                    logger.debug(\"Unsupported type '{}\", type);\n+                    break;\n+            }\n+        } catch (RuntimeException ignored) {\n+            logger.warn(\"Unexpected '{}-{}'\", ignored, ignored.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NDc5Mw=="}, "originalCommit": {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDIwNTAwOnYy", "diffSide": "RIGHT", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AuthoritativeResourceImportTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzozNTozNFrOGIHHtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDo0NjoyM1rOGIOboQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1ODQ1NQ==", "bodyText": "Do you also need to update AuthoritativeResourceRefreshTask.java to poll more frequently? It's currently set to once per hour", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411158455", "createdAt": "2020-04-20T07:35:34Z", "author": {"login": "eshryane"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AuthoritativeResourceImportTask.java", "diffHunk": "@@ -65,22 +58,10 @@ public void setEmbeddedValueResolver(final StringValueResolver valueResolver) {\n     @Scheduled(cron = \"0 15 0 * * *\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3NzEwMA==", "bodyText": "Grs sources are refreshed on an hourly basis, the main source is refreshed every minute (if there are changes).", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411277100", "createdAt": "2020-04-20T10:44:16Z", "author": {"login": "sbusk"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AuthoritativeResourceImportTask.java", "diffHunk": "@@ -65,22 +58,10 @@ public void setEmbeddedValueResolver(final StringValueResolver valueResolver) {\n     @Scheduled(cron = \"0 15 0 * * *\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1ODQ1NQ=="}, "originalCommit": {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3ODI0MQ==", "bodyText": "OK, it's the GRS caches that are refreshed once an hour, thanks.", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411278241", "createdAt": "2020-04-20T10:46:23Z", "author": {"login": "eshryane"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AuthoritativeResourceImportTask.java", "diffHunk": "@@ -65,22 +58,10 @@ public void setEmbeddedValueResolver(final StringValueResolver valueResolver) {\n     @Scheduled(cron = \"0 15 0 * * *\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1ODQ1NQ=="}, "originalCommit": {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDIxMjMzOnYy", "diffSide": "RIGHT", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/RipeAuthoritativeResourceImportTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzozNzo0MlrOGIHMPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDo0MzozNFrOGIOVnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1OTYxNQ==", "bodyText": "Why are you using an explicit ObjectMapper, rather than creating a domain class for the response (and have JAX-RS handle it automatically)?", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411159615", "createdAt": "2020-04-20T07:37:42Z", "author": {"login": "eshryane"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/RipeAuthoritativeResourceImportTask.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.Sets;\n+import net.javacrumbs.shedlock.core.SchedulerLock;\n+import net.ripe.db.whois.common.dao.ResourceDataDao;\n+import net.ripe.db.whois.common.scheduler.DailyScheduledTask;\n+import org.glassfish.jersey.client.ClientProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import java.io.IOException;\n+\n+@Component\n+public class RipeAuthoritativeResourceImportTask extends AbstractAutoritativeResourceImportTask implements DailyScheduledTask {\n+\n+    protected static final String TASK_NAME = \"RipeAuthoritativeResourceImport\";\n+\n+    private final static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    private final String baseUrl;\n+\n+    private Client client;\n+\n+    @Autowired\n+    public RipeAuthoritativeResourceImportTask(final ResourceDataDao resourceDataDao,\n+                                               @Value(\"${grs.import.enabled}\") final boolean enabled,\n+                                               @Value(\"${rsng.base.url}\") final String baseUrl) {\n+        super(enabled, resourceDataDao);\n+        this.baseUrl = baseUrl;\n+        this.client = ClientBuilder.newBuilder()\n+                .property(ClientProperties.CONNECT_TIMEOUT, 10_000)\n+                .property(ClientProperties.READ_TIMEOUT, 10_000)\n+                .build();\n+    }\n+\n+    /**\n+     * Run every 15 minutes.\n+     */\n+    @Override\n+    @Scheduled(cron = \"0 5/15 * * * *\")\n+    @SchedulerLock(name = TASK_NAME)\n+    public void run() {\n+        doImport(Sets.newHashSet(\"ripe\"));\n+    }\n+\n+    @Override\n+    protected AuthoritativeResource fetchAuthoritativeResource(String sourceName) throws IOException {\n+        final AuthoritativeResource authoritativeResource = new AuthoritativeResourceJsonLoader(LOGGER).load(\n+            OBJECT_MAPPER.readValue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac0814a12c7cfe901c20e8202e2de88f13eeac8"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3NjcwMw==", "bodyText": "As discussed during standup I completely agree it should be done automatically (I'd set it up like that initially) but for some reason it doesn't work with Jersey. I'll put a TODO in there as agreed.", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411276703", "createdAt": "2020-04-20T10:43:34Z", "author": {"login": "sbusk"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/RipeAuthoritativeResourceImportTask.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.Sets;\n+import net.javacrumbs.shedlock.core.SchedulerLock;\n+import net.ripe.db.whois.common.dao.ResourceDataDao;\n+import net.ripe.db.whois.common.scheduler.DailyScheduledTask;\n+import org.glassfish.jersey.client.ClientProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import java.io.IOException;\n+\n+@Component\n+public class RipeAuthoritativeResourceImportTask extends AbstractAutoritativeResourceImportTask implements DailyScheduledTask {\n+\n+    protected static final String TASK_NAME = \"RipeAuthoritativeResourceImport\";\n+\n+    private final static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    private final String baseUrl;\n+\n+    private Client client;\n+\n+    @Autowired\n+    public RipeAuthoritativeResourceImportTask(final ResourceDataDao resourceDataDao,\n+                                               @Value(\"${grs.import.enabled}\") final boolean enabled,\n+                                               @Value(\"${rsng.base.url}\") final String baseUrl) {\n+        super(enabled, resourceDataDao);\n+        this.baseUrl = baseUrl;\n+        this.client = ClientBuilder.newBuilder()\n+                .property(ClientProperties.CONNECT_TIMEOUT, 10_000)\n+                .property(ClientProperties.READ_TIMEOUT, 10_000)\n+                .build();\n+    }\n+\n+    /**\n+     * Run every 15 minutes.\n+     */\n+    @Override\n+    @Scheduled(cron = \"0 5/15 * * * *\")\n+    @SchedulerLock(name = TASK_NAME)\n+    public void run() {\n+        doImport(Sets.newHashSet(\"ripe\"));\n+    }\n+\n+    @Override\n+    protected AuthoritativeResource fetchAuthoritativeResource(String sourceName) throws IOException {\n+        final AuthoritativeResource authoritativeResource = new AuthoritativeResourceJsonLoader(LOGGER).load(\n+            OBJECT_MAPPER.readValue(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1OTYxNQ=="}, "originalCommit": {"oid": "8ac0814a12c7cfe901c20e8202e2de88f13eeac8"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4630, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}