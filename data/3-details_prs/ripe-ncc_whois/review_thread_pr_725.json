{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNTMzNTIw", "number": 725, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTo0MzoxOVrOFMLxng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxMDo1MDoyNFrOFabs4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzIwMTU4OnYy", "diffSide": "RIGHT", "path": "whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/InetnumSpec.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTo0MzoxOVrOIPxZDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTo0MzoxOVrOIPxZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQwODc4Mg==", "bodyText": "FYI some messages reversed order when I renamed / moved the validator classes", "url": "https://github.com/RIPE-NCC/whois/pull/725#discussion_r553408782", "createdAt": "2021-01-07T15:43:19Z", "author": {"login": "eshryane"}, "path": "whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/InetnumSpec.groovy", "diffHunk": "@@ -1449,8 +1449,8 @@ class InetnumSpec extends BaseQueryUpdateSpec {\n         ack.countErrorWarnInfo(2, 0, 1)\n         ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 62.59.192.2 - 62.59.192.30\" }\n         ack.errorMessagesFor(\"Create\", \"[inetnum] 62.59.192.2 - 62.59.192.30\") ==\n-                [\"This range overlaps with 62.59.192.0 - 62.59.192.7\",\n-                \"Status ASSIGNED PA not allowed when more specific object '62.59.192.8 - 62.59.192.15' has status ALLOCATED PA\"]\n+                [\"Status ASSIGNED PA not allowed when more specific object '62.59.192.8 - 62.59.192.15' has status ALLOCATED PA\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "016380dca3777333059ab50720f2618b184f3c63"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzMjYxMTUzOnYy", "diffSide": "RIGHT", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/dao/jdbc/JdbcStatusDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxMDo1MDoyNFrOIlaiGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxNDo0NzoyMVrOIljBXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjEwMjkzOA==", "bodyText": "Use constant for the magic number.", "url": "https://github.com/RIPE-NCC/whois/pull/725#discussion_r576102938", "createdAt": "2021-02-15T10:50:24Z", "author": {"login": "sbusk"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/dao/jdbc/JdbcStatusDao.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package net.ripe.db.whois.common.dao.jdbc;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import net.ripe.db.whois.common.aspects.RetryFor;\n+import net.ripe.db.whois.common.dao.StatusDao;\n+import net.ripe.db.whois.common.domain.CIString;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.RecoverableDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.sql.DataSource;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Repository\n+@RetryFor(RecoverableDataAccessException.class)\n+public class JdbcStatusDao implements StatusDao {\n+\n+    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    @Autowired\n+    public JdbcStatusDao(@Qualifier(\"sourceAwareDataSource\") final DataSource dataSource) {\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);\n+    }\n+\n+    @Override\n+    public CIString getStatus(final int objectId) {\n+        return jdbcTemplate.queryForObject(\n+            \"SELECT status FROM status WHERE object_id = ?\",\n+            (rs, rowNum) -> CIString.ciString(rs.getString(1)),\n+            objectId);\n+    }\n+\n+    @Override\n+    public Map<Integer, CIString> getStatus(final List<Integer> objectIds) {\n+        final Map<Integer, CIString> results = Maps.newHashMap();\n+        final Map<String, Object> params = Maps.newHashMap();\n+\n+        // partition object ids to keep inside the max_packet_size limit for the IN clause\n+        for (List<Integer> partition : Lists.partition(objectIds, 10_000)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d170666eba552df0ce9a5b3746a2c75619462440"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjI0MjAxNA==", "bodyText": "Done, thanks!", "url": "https://github.com/RIPE-NCC/whois/pull/725#discussion_r576242014", "createdAt": "2021-02-15T14:47:21Z", "author": {"login": "eshryane"}, "path": "whois-commons/src/main/java/net/ripe/db/whois/common/dao/jdbc/JdbcStatusDao.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package net.ripe.db.whois.common.dao.jdbc;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import net.ripe.db.whois.common.aspects.RetryFor;\n+import net.ripe.db.whois.common.dao.StatusDao;\n+import net.ripe.db.whois.common.domain.CIString;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.RecoverableDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.sql.DataSource;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Repository\n+@RetryFor(RecoverableDataAccessException.class)\n+public class JdbcStatusDao implements StatusDao {\n+\n+    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    @Autowired\n+    public JdbcStatusDao(@Qualifier(\"sourceAwareDataSource\") final DataSource dataSource) {\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);\n+    }\n+\n+    @Override\n+    public CIString getStatus(final int objectId) {\n+        return jdbcTemplate.queryForObject(\n+            \"SELECT status FROM status WHERE object_id = ?\",\n+            (rs, rowNum) -> CIString.ciString(rs.getString(1)),\n+            objectId);\n+    }\n+\n+    @Override\n+    public Map<Integer, CIString> getStatus(final List<Integer> objectIds) {\n+        final Map<Integer, CIString> results = Maps.newHashMap();\n+        final Map<String, Object> params = Maps.newHashMap();\n+\n+        // partition object ids to keep inside the max_packet_size limit for the IN clause\n+        for (List<Integer> partition : Lists.partition(objectIds, 10_000)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjEwMjkzOA=="}, "originalCommit": {"oid": "d170666eba552df0ce9a5b3746a2c75619462440"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4621, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}