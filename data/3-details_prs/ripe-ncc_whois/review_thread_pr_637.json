{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMDM4MDky", "number": 637, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyMDozMlrOEFatQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOTowOTozMlrOEHC_FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTE1OTA2OnYy", "diffSide": "RIGHT", "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyMDozMlrOGjl96A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0Mzo1M1rOGjmqpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NTQwMA==", "bodyText": "This header doesn't mean very much, as the proxy doesn't check the CA. Do we need to include it?", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r439975400", "createdAt": "2020-06-15T07:20:32Z", "author": {"login": "eshryane"}, "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package net.ripe.db.whois.api.rest;\n+\n+import net.ripe.db.whois.common.io.ByteArrayInput;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.security.Principal;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Optional;\n+\n+import static org.apache.commons.codec.binary.Base64.decodeBase64;\n+\n+public class ClientCertificateExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientCertificateExtractor.class);\n+\n+    private final static String HEADER_SSL_CLIENT_CERT = \"SSL_CLIENT_CERT\";\n+    private final static String HEADER_SSL_CLIENT_VERIFY = \"SSL_CLIENT_VERIFY\";\n+\n+    public static Optional<X509Certificate> getClientCertificate(final HttpServletRequest request) {\n+        final String sslClientCert = request.getHeader(HEADER_SSL_CLIENT_CERT);\n+\n+        if (StringUtils.isBlank(sslClientCert)) {\n+            return Optional.empty();\n+        }\n+\n+        final String sslClientVerify = request.getHeader(HEADER_SSL_CLIENT_VERIFY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "044bf98565041ded572de927e86bc95e4257b34a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4NTc5MA==", "bodyText": "As specified in the requirements, we should check the value is as expected.,", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r439985790", "createdAt": "2020-06-15T07:41:42Z", "author": {"login": "eshryane"}, "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package net.ripe.db.whois.api.rest;\n+\n+import net.ripe.db.whois.common.io.ByteArrayInput;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.security.Principal;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Optional;\n+\n+import static org.apache.commons.codec.binary.Base64.decodeBase64;\n+\n+public class ClientCertificateExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientCertificateExtractor.class);\n+\n+    private final static String HEADER_SSL_CLIENT_CERT = \"SSL_CLIENT_CERT\";\n+    private final static String HEADER_SSL_CLIENT_VERIFY = \"SSL_CLIENT_VERIFY\";\n+\n+    public static Optional<X509Certificate> getClientCertificate(final HttpServletRequest request) {\n+        final String sslClientCert = request.getHeader(HEADER_SSL_CLIENT_CERT);\n+\n+        if (StringUtils.isBlank(sslClientCert)) {\n+            return Optional.empty();\n+        }\n+\n+        final String sslClientVerify = request.getHeader(HEADER_SSL_CLIENT_VERIFY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NTQwMA=="}, "originalCommit": {"oid": "044bf98565041ded572de927e86bc95e4257b34a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4Njg1Mw==", "bodyText": "We're expecting Apache to do the verification and tell us:\n\n\n\nSSL_CLIENT_VERIFY\nstring\nNONE,\u00a0SUCCESS,\u00a0GENEROUS\u00a0or\u00a0FAILED:reason\n\n\n\nIf it's not GENEROUS or SUCCESS we don't accept the cert and otherwise we do but we check it again.", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r439986853", "createdAt": "2020-06-15T07:43:53Z", "author": {"login": "sbusk"}, "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package net.ripe.db.whois.api.rest;\n+\n+import net.ripe.db.whois.common.io.ByteArrayInput;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.security.Principal;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Optional;\n+\n+import static org.apache.commons.codec.binary.Base64.decodeBase64;\n+\n+public class ClientCertificateExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientCertificateExtractor.class);\n+\n+    private final static String HEADER_SSL_CLIENT_CERT = \"SSL_CLIENT_CERT\";\n+    private final static String HEADER_SSL_CLIENT_VERIFY = \"SSL_CLIENT_VERIFY\";\n+\n+    public static Optional<X509Certificate> getClientCertificate(final HttpServletRequest request) {\n+        final String sslClientCert = request.getHeader(HEADER_SSL_CLIENT_CERT);\n+\n+        if (StringUtils.isBlank(sslClientCert)) {\n+            return Optional.empty();\n+        }\n+\n+        final String sslClientVerify = request.getHeader(HEADER_SSL_CLIENT_VERIFY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NTQwMA=="}, "originalCommit": {"oid": "044bf98565041ded572de927e86bc95e4257b34a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTE2MTA2OnYy", "diffSide": "RIGHT", "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyMToxMFrOGjl_Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzo1NjozOVrOGjzU_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NTcxMA==", "bodyText": "Remove this?", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r439975710", "createdAt": "2020-06-15T07:21:10Z", "author": {"login": "eshryane"}, "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package net.ripe.db.whois.api.rest;\n+\n+import net.ripe.db.whois.common.io.ByteArrayInput;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.security.Principal;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Optional;\n+\n+import static org.apache.commons.codec.binary.Base64.decodeBase64;\n+\n+public class ClientCertificateExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientCertificateExtractor.class);\n+\n+    private final static String HEADER_SSL_CLIENT_CERT = \"SSL_CLIENT_CERT\";\n+    private final static String HEADER_SSL_CLIENT_VERIFY = \"SSL_CLIENT_VERIFY\";\n+\n+    public static Optional<X509Certificate> getClientCertificate(final HttpServletRequest request) {\n+        final String sslClientCert = request.getHeader(HEADER_SSL_CLIENT_CERT);\n+\n+        if (StringUtils.isBlank(sslClientCert)) {\n+            return Optional.empty();\n+        }\n+\n+        final String sslClientVerify = request.getHeader(HEADER_SSL_CLIENT_VERIFY);\n+        if (!\"GENEROUS\".equals(sslClientVerify) && !\"SUCCESS\".equals(sslClientVerify)) {\n+            return Optional.empty();\n+        }\n+\n+        return getX509Certificate(sslClientCert);\n+    }\n+\n+    private static Optional<X509Certificate> getX509Certificate(final String certificate) {\n+        // TODO what to log as cert identifier (fingerprint, subjectDN?)\n+        Principal subject = null;\n+        try {\n+            final X509Certificate x509 = (X509Certificate) CertificateFactory.getInstance(\"X.509\").generateCertificate(new ByteArrayInput(decodeBase64(certificate)));\n+\n+            subject = x509.getSubjectDN();\n+            x509.checkValidity();\n+\n+\n+            // TODO signature verification (both self signed and ca)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "044bf98565041ded572de927e86bc95e4257b34a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5NDMwMA==", "bodyText": "Ok, as discussed we leave the verification to the proxy.", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r440194300", "createdAt": "2020-06-15T13:56:39Z", "author": {"login": "sbusk"}, "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package net.ripe.db.whois.api.rest;\n+\n+import net.ripe.db.whois.common.io.ByteArrayInput;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.security.Principal;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Optional;\n+\n+import static org.apache.commons.codec.binary.Base64.decodeBase64;\n+\n+public class ClientCertificateExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientCertificateExtractor.class);\n+\n+    private final static String HEADER_SSL_CLIENT_CERT = \"SSL_CLIENT_CERT\";\n+    private final static String HEADER_SSL_CLIENT_VERIFY = \"SSL_CLIENT_VERIFY\";\n+\n+    public static Optional<X509Certificate> getClientCertificate(final HttpServletRequest request) {\n+        final String sslClientCert = request.getHeader(HEADER_SSL_CLIENT_CERT);\n+\n+        if (StringUtils.isBlank(sslClientCert)) {\n+            return Optional.empty();\n+        }\n+\n+        final String sslClientVerify = request.getHeader(HEADER_SSL_CLIENT_VERIFY);\n+        if (!\"GENEROUS\".equals(sslClientVerify) && !\"SUCCESS\".equals(sslClientVerify)) {\n+            return Optional.empty();\n+        }\n+\n+        return getX509Certificate(sslClientCert);\n+    }\n+\n+    private static Optional<X509Certificate> getX509Certificate(final String certificate) {\n+        // TODO what to log as cert identifier (fingerprint, subjectDN?)\n+        Principal subject = null;\n+        try {\n+            final X509Certificate x509 = (X509Certificate) CertificateFactory.getInstance(\"X.509\").generateCertificate(new ByteArrayInput(decodeBase64(certificate)));\n+\n+            subject = x509.getSubjectDN();\n+            x509.checkValidity();\n+\n+\n+            // TODO signature verification (both self signed and ca)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NTcxMA=="}, "originalCommit": {"oid": "044bf98565041ded572de927e86bc95e4257b34a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTE2MjQxOnYy", "diffSide": "RIGHT", "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyMTo0MVrOGjmADw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyMTo0MVrOGjmADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NTk1MQ==", "bodyText": "Fingerprint I think (can it be included in the audit log?)", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r439975951", "createdAt": "2020-06-15T07:21:41Z", "author": {"login": "eshryane"}, "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package net.ripe.db.whois.api.rest;\n+\n+import net.ripe.db.whois.common.io.ByteArrayInput;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.security.Principal;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Optional;\n+\n+import static org.apache.commons.codec.binary.Base64.decodeBase64;\n+\n+public class ClientCertificateExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientCertificateExtractor.class);\n+\n+    private final static String HEADER_SSL_CLIENT_CERT = \"SSL_CLIENT_CERT\";\n+    private final static String HEADER_SSL_CLIENT_VERIFY = \"SSL_CLIENT_VERIFY\";\n+\n+    public static Optional<X509Certificate> getClientCertificate(final HttpServletRequest request) {\n+        final String sslClientCert = request.getHeader(HEADER_SSL_CLIENT_CERT);\n+\n+        if (StringUtils.isBlank(sslClientCert)) {\n+            return Optional.empty();\n+        }\n+\n+        final String sslClientVerify = request.getHeader(HEADER_SSL_CLIENT_VERIFY);\n+        if (!\"GENEROUS\".equals(sslClientVerify) && !\"SUCCESS\".equals(sslClientVerify)) {\n+            return Optional.empty();\n+        }\n+\n+        return getX509Certificate(sslClientCert);\n+    }\n+\n+    private static Optional<X509Certificate> getX509Certificate(final String certificate) {\n+        // TODO what to log as cert identifier (fingerprint, subjectDN?)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "044bf98565041ded572de927e86bc95e4257b34a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTE2MzM1OnYy", "diffSide": "RIGHT", "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyMTo1N1rOGjmAoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxNjozM1rOGj21GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjA5Nw==", "bodyText": "Log at DEBUG?", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r439976097", "createdAt": "2020-06-15T07:21:57Z", "author": {"login": "eshryane"}, "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package net.ripe.db.whois.api.rest;\n+\n+import net.ripe.db.whois.common.io.ByteArrayInput;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.security.Principal;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Optional;\n+\n+import static org.apache.commons.codec.binary.Base64.decodeBase64;\n+\n+public class ClientCertificateExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientCertificateExtractor.class);\n+\n+    private final static String HEADER_SSL_CLIENT_CERT = \"SSL_CLIENT_CERT\";\n+    private final static String HEADER_SSL_CLIENT_VERIFY = \"SSL_CLIENT_VERIFY\";\n+\n+    public static Optional<X509Certificate> getClientCertificate(final HttpServletRequest request) {\n+        final String sslClientCert = request.getHeader(HEADER_SSL_CLIENT_CERT);\n+\n+        if (StringUtils.isBlank(sslClientCert)) {\n+            return Optional.empty();\n+        }\n+\n+        final String sslClientVerify = request.getHeader(HEADER_SSL_CLIENT_VERIFY);\n+        if (!\"GENEROUS\".equals(sslClientVerify) && !\"SUCCESS\".equals(sslClientVerify)) {\n+            return Optional.empty();\n+        }\n+\n+        return getX509Certificate(sslClientCert);\n+    }\n+\n+    private static Optional<X509Certificate> getX509Certificate(final String certificate) {\n+        // TODO what to log as cert identifier (fingerprint, subjectDN?)\n+        Principal subject = null;\n+        try {\n+            final X509Certificate x509 = (X509Certificate) CertificateFactory.getInstance(\"X.509\").generateCertificate(new ByteArrayInput(decodeBase64(certificate)));\n+\n+            subject = x509.getSubjectDN();\n+            x509.checkValidity();\n+\n+\n+            // TODO signature verification (both self signed and ca)\n+            //x509.verify(x509.getPublicKey());\n+\n+            return Optional.of(x509);\n+        } catch (CertificateExpiredException cee) {\n+            LOGGER.info(\"Certificate {} has expired\", subject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "044bf98565041ded572de927e86bc95e4257b34a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4Nzg3Ng==", "bodyText": "I think we won't be swamped by ppl sending us their client certs and it helps with troubleshooting to see a client cert was expired so it wasn't accepted as a valid credential so I'd leave the logging at info level.", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r439987876", "createdAt": "2020-06-15T07:45:52Z", "author": {"login": "sbusk"}, "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package net.ripe.db.whois.api.rest;\n+\n+import net.ripe.db.whois.common.io.ByteArrayInput;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.security.Principal;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Optional;\n+\n+import static org.apache.commons.codec.binary.Base64.decodeBase64;\n+\n+public class ClientCertificateExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientCertificateExtractor.class);\n+\n+    private final static String HEADER_SSL_CLIENT_CERT = \"SSL_CLIENT_CERT\";\n+    private final static String HEADER_SSL_CLIENT_VERIFY = \"SSL_CLIENT_VERIFY\";\n+\n+    public static Optional<X509Certificate> getClientCertificate(final HttpServletRequest request) {\n+        final String sslClientCert = request.getHeader(HEADER_SSL_CLIENT_CERT);\n+\n+        if (StringUtils.isBlank(sslClientCert)) {\n+            return Optional.empty();\n+        }\n+\n+        final String sslClientVerify = request.getHeader(HEADER_SSL_CLIENT_VERIFY);\n+        if (!\"GENEROUS\".equals(sslClientVerify) && !\"SUCCESS\".equals(sslClientVerify)) {\n+            return Optional.empty();\n+        }\n+\n+        return getX509Certificate(sslClientCert);\n+    }\n+\n+    private static Optional<X509Certificate> getX509Certificate(final String certificate) {\n+        // TODO what to log as cert identifier (fingerprint, subjectDN?)\n+        Principal subject = null;\n+        try {\n+            final X509Certificate x509 = (X509Certificate) CertificateFactory.getInstance(\"X.509\").generateCertificate(new ByteArrayInput(decodeBase64(certificate)));\n+\n+            subject = x509.getSubjectDN();\n+            x509.checkValidity();\n+\n+\n+            // TODO signature verification (both self signed and ca)\n+            //x509.verify(x509.getPublicKey());\n+\n+            return Optional.of(x509);\n+        } catch (CertificateExpiredException cee) {\n+            LOGGER.info(\"Certificate {} has expired\", subject);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjA5Nw=="}, "originalCommit": {"oid": "044bf98565041ded572de927e86bc95e4257b34a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MTY3Mw==", "bodyText": "OK", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r440251673", "createdAt": "2020-06-15T15:16:33Z", "author": {"login": "eshryane"}, "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package net.ripe.db.whois.api.rest;\n+\n+import net.ripe.db.whois.common.io.ByteArrayInput;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.security.Principal;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Optional;\n+\n+import static org.apache.commons.codec.binary.Base64.decodeBase64;\n+\n+public class ClientCertificateExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientCertificateExtractor.class);\n+\n+    private final static String HEADER_SSL_CLIENT_CERT = \"SSL_CLIENT_CERT\";\n+    private final static String HEADER_SSL_CLIENT_VERIFY = \"SSL_CLIENT_VERIFY\";\n+\n+    public static Optional<X509Certificate> getClientCertificate(final HttpServletRequest request) {\n+        final String sslClientCert = request.getHeader(HEADER_SSL_CLIENT_CERT);\n+\n+        if (StringUtils.isBlank(sslClientCert)) {\n+            return Optional.empty();\n+        }\n+\n+        final String sslClientVerify = request.getHeader(HEADER_SSL_CLIENT_VERIFY);\n+        if (!\"GENEROUS\".equals(sslClientVerify) && !\"SUCCESS\".equals(sslClientVerify)) {\n+            return Optional.empty();\n+        }\n+\n+        return getX509Certificate(sslClientCert);\n+    }\n+\n+    private static Optional<X509Certificate> getX509Certificate(final String certificate) {\n+        // TODO what to log as cert identifier (fingerprint, subjectDN?)\n+        Principal subject = null;\n+        try {\n+            final X509Certificate x509 = (X509Certificate) CertificateFactory.getInstance(\"X.509\").generateCertificate(new ByteArrayInput(decodeBase64(certificate)));\n+\n+            subject = x509.getSubjectDN();\n+            x509.checkValidity();\n+\n+\n+            // TODO signature verification (both self signed and ca)\n+            //x509.verify(x509.getPublicKey());\n+\n+            return Optional.of(x509);\n+        } catch (CertificateExpiredException cee) {\n+            LOGGER.info(\"Certificate {} has expired\", subject);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjA5Nw=="}, "originalCommit": {"oid": "044bf98565041ded572de927e86bc95e4257b34a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTE2ODE1OnYy", "diffSide": "RIGHT", "path": "whois-update/src/main/java/net/ripe/db/whois/update/authentication/credential/ClientCertificateCredentialValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyMzozMlrOGjmDmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDozNzozOFrOGj1GEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3Njg1Ng==", "bodyText": "Also log the offered credential in the audit log here?", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r439976856", "createdAt": "2020-06-15T07:23:32Z", "author": {"login": "eshryane"}, "path": "whois-update/src/main/java/net/ripe/db/whois/update/authentication/credential/ClientCertificateCredentialValidator.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package net.ripe.db.whois.update.authentication.credential;\n+\n+import net.ripe.db.whois.common.DateTimeProvider;\n+import net.ripe.db.whois.common.dao.RpslObjectDao;\n+import net.ripe.db.whois.common.rpsl.ObjectType;\n+import net.ripe.db.whois.common.rpsl.RpslObject;\n+import net.ripe.db.whois.update.domain.ClientCertificateCredential;\n+import net.ripe.db.whois.update.domain.PreparedUpdate;\n+import net.ripe.db.whois.update.domain.UpdateContext;\n+import net.ripe.db.whois.update.domain.UpdateMessages;\n+import net.ripe.db.whois.update.domain.X509Credential;\n+import net.ripe.db.whois.update.keycert.X509CertificateWrapper;\n+import net.ripe.db.whois.update.log.LoggerContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.CheckForNull;\n+import java.util.Collection;\n+\n+@Component\n+public class ClientCertificateCredentialValidator implements CredentialValidator<ClientCertificateCredential, X509Credential> {\n+\n+    private final RpslObjectDao rpslObjectDao;\n+    private final DateTimeProvider dateTimeProvider;\n+    private final LoggerContext loggerContext;\n+\n+    @Autowired\n+    public ClientCertificateCredentialValidator(final RpslObjectDao rpslObjectDao, final DateTimeProvider dateTimeProvider, final LoggerContext loggerContext) {\n+        this.rpslObjectDao = rpslObjectDao;\n+        this.dateTimeProvider = dateTimeProvider;\n+        this.loggerContext = loggerContext;\n+    }\n+\n+    @Override\n+    public Class<X509Credential> getSupportedCredentials() {\n+        return X509Credential.class;\n+    }\n+\n+    @Override\n+    public Class<ClientCertificateCredential> getSupportedOfferedCredentialType() {\n+        return ClientCertificateCredential.class;\n+    }\n+\n+    @Override\n+    public boolean hasValidCredential(final PreparedUpdate update, final UpdateContext updateContext, final Collection<ClientCertificateCredential> offeredCredentials, final X509Credential knownCredential) {\n+        for (final ClientCertificateCredential offeredCredential : offeredCredentials) {\n+\n+            if (verifyClientCertificate(update, updateContext, offeredCredential, knownCredential)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "044bf98565041ded572de927e86bc95e4257b34a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMzI1MQ==", "bodyText": "Done.", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r440223251", "createdAt": "2020-06-15T14:37:38Z", "author": {"login": "sbusk"}, "path": "whois-update/src/main/java/net/ripe/db/whois/update/authentication/credential/ClientCertificateCredentialValidator.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package net.ripe.db.whois.update.authentication.credential;\n+\n+import net.ripe.db.whois.common.DateTimeProvider;\n+import net.ripe.db.whois.common.dao.RpslObjectDao;\n+import net.ripe.db.whois.common.rpsl.ObjectType;\n+import net.ripe.db.whois.common.rpsl.RpslObject;\n+import net.ripe.db.whois.update.domain.ClientCertificateCredential;\n+import net.ripe.db.whois.update.domain.PreparedUpdate;\n+import net.ripe.db.whois.update.domain.UpdateContext;\n+import net.ripe.db.whois.update.domain.UpdateMessages;\n+import net.ripe.db.whois.update.domain.X509Credential;\n+import net.ripe.db.whois.update.keycert.X509CertificateWrapper;\n+import net.ripe.db.whois.update.log.LoggerContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.CheckForNull;\n+import java.util.Collection;\n+\n+@Component\n+public class ClientCertificateCredentialValidator implements CredentialValidator<ClientCertificateCredential, X509Credential> {\n+\n+    private final RpslObjectDao rpslObjectDao;\n+    private final DateTimeProvider dateTimeProvider;\n+    private final LoggerContext loggerContext;\n+\n+    @Autowired\n+    public ClientCertificateCredentialValidator(final RpslObjectDao rpslObjectDao, final DateTimeProvider dateTimeProvider, final LoggerContext loggerContext) {\n+        this.rpslObjectDao = rpslObjectDao;\n+        this.dateTimeProvider = dateTimeProvider;\n+        this.loggerContext = loggerContext;\n+    }\n+\n+    @Override\n+    public Class<X509Credential> getSupportedCredentials() {\n+        return X509Credential.class;\n+    }\n+\n+    @Override\n+    public Class<ClientCertificateCredential> getSupportedOfferedCredentialType() {\n+        return ClientCertificateCredential.class;\n+    }\n+\n+    @Override\n+    public boolean hasValidCredential(final PreparedUpdate update, final UpdateContext updateContext, final Collection<ClientCertificateCredential> offeredCredentials, final X509Credential knownCredential) {\n+        for (final ClientCertificateCredential offeredCredential : offeredCredentials) {\n+\n+            if (verifyClientCertificate(update, updateContext, offeredCredential, knownCredential)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3Njg1Ng=="}, "originalCommit": {"oid": "044bf98565041ded572de927e86bc95e4257b34a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDAzNjkzOnYy", "diffSide": "RIGHT", "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTowODozMFrOGk8z2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowNDo0OFrOGl8d0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5ODIzNA==", "bodyText": "Can you use the X509CertificateWrapper class to extract the certificate?", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r441398234", "createdAt": "2020-06-17T09:08:30Z", "author": {"login": "eshryane"}, "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "diffHunk": "@@ -23,6 +24,9 @@\n     private final static String HEADER_SSL_CLIENT_CERT = \"SSL_CLIENT_CERT\";\n     private final static String HEADER_SSL_CLIENT_VERIFY = \"SSL_CLIENT_VERIFY\";\n \n+    private static final String X509_HEADER = \"-----BEGIN CERTIFICATE-----\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42bd80c5ec60e2d385a2919f0c6f34e215ce89cb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MTE2OA==", "bodyText": "Done.", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r442441168", "createdAt": "2020-06-18T19:04:48Z", "author": {"login": "sbusk"}, "path": "whois-api/src/main/java/net/ripe/db/whois/api/rest/ClientCertificateExtractor.java", "diffHunk": "@@ -23,6 +24,9 @@\n     private final static String HEADER_SSL_CLIENT_CERT = \"SSL_CLIENT_CERT\";\n     private final static String HEADER_SSL_CLIENT_VERIFY = \"SSL_CLIENT_VERIFY\";\n \n+    private static final String X509_HEADER = \"-----BEGIN CERTIFICATE-----\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5ODIzNA=="}, "originalCommit": {"oid": "42bd80c5ec60e2d385a2919f0c6f34e215ce89cb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODI0NDA1OnYy", "diffSide": "RIGHT", "path": "whois-commons/src/main/resources/whois.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOTowOTozMlrOGmNs7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTozNzo1MVrOGm86Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyMzU2NA==", "bodyText": "Be careful with this, I think Spring will default to TRUE if it's not explicitly set to FALSE in the external properties file (and what's the order?). Is it safer to remove it?", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r442723564", "createdAt": "2020-06-19T09:09:32Z", "author": {"login": "eshryane"}, "path": "whois-commons/src/main/resources/whois.properties", "diffHunk": "@@ -136,3 +136,5 @@ rdap.redirect.apnic=http://rdap.apnic.net/\n rdap.redirect.afrinic=\n rdap.redirect.arin=http://rdappilot.arin.net\n rdap.redirect.lacnic=http://restfulwhoisv2.labs.lacnic.net\n+\n+client.cert.auth.enabled=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d90e5ae2fe6f364bac9f263b5ba87eb46c8fd1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5NzAxNQ==", "bodyText": "Yes, it's gone, well spotted!", "url": "https://github.com/RIPE-NCC/whois/pull/637#discussion_r443497015", "createdAt": "2020-06-22T11:37:51Z", "author": {"login": "sbusk"}, "path": "whois-commons/src/main/resources/whois.properties", "diffHunk": "@@ -136,3 +136,5 @@ rdap.redirect.apnic=http://rdap.apnic.net/\n rdap.redirect.afrinic=\n rdap.redirect.arin=http://rdappilot.arin.net\n rdap.redirect.lacnic=http://restfulwhoisv2.labs.lacnic.net\n+\n+client.cert.auth.enabled=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyMzU2NA=="}, "originalCommit": {"oid": "52d90e5ae2fe6f364bac9f263b5ba87eb46c8fd1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4645, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}