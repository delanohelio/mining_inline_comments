{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMjA4OTA0", "number": 1841, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxMjoyNlrODkKZdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDozMzo1N1rODkN5hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjQ1Njg0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/StreamTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxMjoyNlrOFwVXWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoyNToxNlrOFwVlnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNjAxMA==", "bodyText": "Is this indentation change required?", "url": "https://github.com/apache/calcite/pull/1841#discussion_r386226010", "createdAt": "2020-03-02T07:12:26Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/test/StreamTest.java", "diffHunk": "@@ -286,12 +286,11 @@ private static String schemaFor(String name, Class<? extends TableFactory> clazz\n             + \"      LogicalTableScan(table=[[STREAM_JOINS, PRODUCTS]])\\n\")\n         .explainContains(\"\"\n             + \"EnumerableCalc(expr#0..6=[{inputs}], proj#0..1=[{exprs}], SUPPLIERID=[$t6])\\n\"\n-            + \"  EnumerableHashJoin(condition=[=($4, $5)], joinType=[inner])\\n\"\n-            + \"    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t2):VARCHAR(32) NOT NULL], proj#0..4=[{exprs}])\\n\"\n-            + \"      EnumerableInterpreter\\n\"\n-            + \"        BindableTableScan(table=[[STREAM_JOINS, ORDERS, (STREAM)]])\\n\"\n-            + \"    EnumerableInterpreter\\n\"\n-            + \"      BindableTableScan(table=[[STREAM_JOINS, PRODUCTS]])\")\n+                + \"  EnumerableHashJoin(condition=[=($4, $5)], joinType=[inner])\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4fd221c6b6f6322b1c07796b3e7d6acea8aba11"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyOTY2MQ==", "bodyText": "No, would fire a fix", "url": "https://github.com/apache/calcite/pull/1841#discussion_r386229661", "createdAt": "2020-03-02T07:25:16Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/test/StreamTest.java", "diffHunk": "@@ -286,12 +286,11 @@ private static String schemaFor(String name, Class<? extends TableFactory> clazz\n             + \"      LogicalTableScan(table=[[STREAM_JOINS, PRODUCTS]])\\n\")\n         .explainContains(\"\"\n             + \"EnumerableCalc(expr#0..6=[{inputs}], proj#0..1=[{exprs}], SUPPLIERID=[$t6])\\n\"\n-            + \"  EnumerableHashJoin(condition=[=($4, $5)], joinType=[inner])\\n\"\n-            + \"    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t2):VARCHAR(32) NOT NULL], proj#0..4=[{exprs}])\\n\"\n-            + \"      EnumerableInterpreter\\n\"\n-            + \"        BindableTableScan(table=[[STREAM_JOINS, ORDERS, (STREAM)]])\\n\"\n-            + \"    EnumerableInterpreter\\n\"\n-            + \"      BindableTableScan(table=[[STREAM_JOINS, PRODUCTS]])\")\n+                + \"  EnumerableHashJoin(condition=[=($4, $5)], joinType=[inner])\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNjAxMA=="}, "originalCommit": {"oid": "f4fd221c6b6f6322b1c07796b3e7d6acea8aba11"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzAzMDQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/interpreter/Bindables.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDozMzo1N1rOFwarHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjowMjo1NFrOFwdItg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMjk5MQ==", "bodyText": "Instead of adding this code snippet, wouldn't be sufficient to just remove the factor 0.01d from the multiplier in line 253?", "url": "https://github.com/apache/calcite/pull/1841#discussion_r386312991", "createdAt": "2020-03-02T10:33:57Z", "author": {"login": "zabetak"}, "path": "core/src/main/java/org/apache/calcite/interpreter/Bindables.java", "diffHunk": "@@ -234,6 +234,11 @@ public static BindableTableScan create(RelOptCluster cluster,\n \n     @Override public RelOptCost computeSelfCost(RelOptPlanner planner,\n         RelMetadataQuery mq) {\n+      boolean noPushing = filters.isEmpty()\n+              && projects.size() == table.getRowType().getFieldCount();\n+      if (noPushing) {\n+        return super.computeSelfCost(planner, mq);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656896ca9a28b5649742d55eb2635e1f7a0f0499"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxNTk2Mg==", "bodyText": "No, we should give a preference though, so that the planner would choose BindableTableScan instead of EnumerabeTableScan, without this factor(0.01d), the BindableTableScan would never be choosed if the BindableTableScan has an expression and also pushings.", "url": "https://github.com/apache/calcite/pull/1841#discussion_r386315962", "createdAt": "2020-03-02T10:39:55Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/interpreter/Bindables.java", "diffHunk": "@@ -234,6 +234,11 @@ public static BindableTableScan create(RelOptCluster cluster,\n \n     @Override public RelOptCost computeSelfCost(RelOptPlanner planner,\n         RelMetadataQuery mq) {\n+      boolean noPushing = filters.isEmpty()\n+              && projects.size() == table.getRowType().getFieldCount();\n+      if (noPushing) {\n+        return super.computeSelfCost(planner, mq);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMjk5MQ=="}, "originalCommit": {"oid": "656896ca9a28b5649742d55eb2635e1f7a0f0499"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0MDg5Ng==", "bodyText": "Aren't the factors f and p sufficient for achieving this?", "url": "https://github.com/apache/calcite/pull/1841#discussion_r386340896", "createdAt": "2020-03-02T11:33:06Z", "author": {"login": "zabetak"}, "path": "core/src/main/java/org/apache/calcite/interpreter/Bindables.java", "diffHunk": "@@ -234,6 +234,11 @@ public static BindableTableScan create(RelOptCluster cluster,\n \n     @Override public RelOptCost computeSelfCost(RelOptPlanner planner,\n         RelMetadataQuery mq) {\n+      boolean noPushing = filters.isEmpty()\n+              && projects.size() == table.getRowType().getFieldCount();\n+      if (noPushing) {\n+        return super.computeSelfCost(planner, mq);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMjk5MQ=="}, "originalCommit": {"oid": "656896ca9a28b5649742d55eb2635e1f7a0f0499"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MjYxNw==", "bodyText": "Yes, the 0.01d factor would ensure that we choose the BindableTableScan if we have any pushing projects or filter. The EnumerableInterpreter has another 0.5 overhead of the input table.", "url": "https://github.com/apache/calcite/pull/1841#discussion_r386352617", "createdAt": "2020-03-02T12:01:03Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/interpreter/Bindables.java", "diffHunk": "@@ -234,6 +234,11 @@ public static BindableTableScan create(RelOptCluster cluster,\n \n     @Override public RelOptCost computeSelfCost(RelOptPlanner planner,\n         RelMetadataQuery mq) {\n+      boolean noPushing = filters.isEmpty()\n+              && projects.size() == table.getRowType().getFieldCount();\n+      if (noPushing) {\n+        return super.computeSelfCost(planner, mq);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMjk5MQ=="}, "originalCommit": {"oid": "656896ca9a28b5649742d55eb2635e1f7a0f0499"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MzMzNA==", "bodyText": "This is our current choice, the cost estimation is not that accurate and we would rather to give some preference.\nFor example, why the factor of EnumerableInterpreter  is 0.5 ?", "url": "https://github.com/apache/calcite/pull/1841#discussion_r386353334", "createdAt": "2020-03-02T12:02:54Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/interpreter/Bindables.java", "diffHunk": "@@ -234,6 +234,11 @@ public static BindableTableScan create(RelOptCluster cluster,\n \n     @Override public RelOptCost computeSelfCost(RelOptPlanner planner,\n         RelMetadataQuery mq) {\n+      boolean noPushing = filters.isEmpty()\n+              && projects.size() == table.getRowType().getFieldCount();\n+      if (noPushing) {\n+        return super.computeSelfCost(planner, mq);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMjk5MQ=="}, "originalCommit": {"oid": "656896ca9a28b5649742d55eb2635e1f7a0f0499"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 320, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}