{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNzYxODE2", "number": 2171, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMjoxNTowOFrOEn5s4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMjoxODoxMVrOEn5uew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjc1Mjk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMjoxNTowOFrOHYsg-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMjoyODoyNVrOHZWSnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NzIwOQ==", "bodyText": "Maybe we can set a descriptive/imperative message here, like operands must not be null or operands is null, it will be more clear?\nSame for the call in other places.", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495657209", "createdAt": "2020-09-28T02:15:08Z", "author": {"login": "liupc"}, "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "diffHunk": "@@ -123,21 +126,13 @@ public static boolean isCharTypeComparable(\n       SqlCallBinding binding,\n       List<SqlNode> operands,\n       boolean throwOnFailure) {\n-    final SqlValidator validator = binding.getValidator();\n-    final SqlValidatorScope scope = binding.getScope();\n-    assert operands != null;\n-    assert operands.size() >= 2;\n+    requireNonNull(operands, \"operands\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8beb3d576f4980ad46c4a817460e75f29700d5cd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMDg2OQ==", "bodyText": "Maybe we can set a descriptive/imperative message here, like operands must not be null or operands is null, it will be more clear?\n\nThe error message would be like NullPointerException: operands.\nI guess it is more-or-less clear.\nThere should be a separate PR that replaces requireNonNull(var); with requireNonNull(var, \"var\"); and assert var != null; with requireNonNull(var, \"var\");", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495730869", "createdAt": "2020-09-28T07:10:38Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "diffHunk": "@@ -123,21 +126,13 @@ public static boolean isCharTypeComparable(\n       SqlCallBinding binding,\n       List<SqlNode> operands,\n       boolean throwOnFailure) {\n-    final SqlValidator validator = binding.getValidator();\n-    final SqlValidatorScope scope = binding.getScope();\n-    assert operands != null;\n-    assert operands.size() >= 2;\n+    requireNonNull(operands, \"operands\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NzIwOQ=="}, "originalCommit": {"oid": "8beb3d576f4980ad46c4a817460e75f29700d5cd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM0MTY2Mw==", "bodyText": "@vlsi ok, maybe it's clear enough, but I still prefer a descriptive/imperative message, anyway, it just doesn't matters.", "url": "https://github.com/apache/calcite/pull/2171#discussion_r496341663", "createdAt": "2020-09-29T02:28:25Z", "author": {"login": "liupc"}, "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "diffHunk": "@@ -123,21 +126,13 @@ public static boolean isCharTypeComparable(\n       SqlCallBinding binding,\n       List<SqlNode> operands,\n       boolean throwOnFailure) {\n-    final SqlValidator validator = binding.getValidator();\n-    final SqlValidatorScope scope = binding.getScope();\n-    assert operands != null;\n-    assert operands.size() >= 2;\n+    requireNonNull(operands, \"operands\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NzIwOQ=="}, "originalCommit": {"oid": "8beb3d576f4980ad46c4a817460e75f29700d5cd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjc1NzA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMjoxODoxMVrOHYsjMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzoxODo0OFrOHZeKFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw==", "bodyText": "I think we should avoid the use of assert due to the assertion is usually disabled in a JVM.", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495657777", "createdAt": "2020-09-28T02:18:11Z", "author": {"login": "liupc"}, "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "diffHunk": "@@ -123,21 +126,13 @@ public static boolean isCharTypeComparable(\n       SqlCallBinding binding,\n       List<SqlNode> operands,\n       boolean throwOnFailure) {\n-    final SqlValidator validator = binding.getValidator();\n-    final SqlValidatorScope scope = binding.getScope();\n-    assert operands != null;\n-    assert operands.size() >= 2;\n+    requireNonNull(operands, \"operands\");\n+    assert operands.size() >= 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8beb3d576f4980ad46c4a817460e75f29700d5cd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMTgyNw==", "bodyText": "The code was there long ago (I guess before Objects.requireNonNull existed), so it was using asserts.\nHowever,\n\nSignificant rework of assert is out of the scope of this PR\nassert operands.size() >= 2 does not seem to have a corresponding Java API.", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495731827", "createdAt": "2020-09-28T07:12:42Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "diffHunk": "@@ -123,21 +126,13 @@ public static boolean isCharTypeComparable(\n       SqlCallBinding binding,\n       List<SqlNode> operands,\n       boolean throwOnFailure) {\n-    final SqlValidator validator = binding.getValidator();\n-    final SqlValidatorScope scope = binding.getScope();\n-    assert operands != null;\n-    assert operands.size() >= 2;\n+    requireNonNull(operands, \"operands\");\n+    assert operands.size() >= 2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw=="}, "originalCommit": {"oid": "8beb3d576f4980ad46c4a817460e75f29700d5cd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MzcxOA==", "bodyText": "assert operands.size() >= 2 does not seem to have a corresponding Java API.\n\nI agree that we should keep the scope of this PR minimal and clear, and maybe rework the assert in another PR,\nbut regrading to the above comments, I think we can use the guava's Preconditions.checkArgument to do this check.", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495983718", "createdAt": "2020-09-28T14:30:21Z", "author": {"login": "liupc"}, "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "diffHunk": "@@ -123,21 +126,13 @@ public static boolean isCharTypeComparable(\n       SqlCallBinding binding,\n       List<SqlNode> operands,\n       boolean throwOnFailure) {\n-    final SqlValidator validator = binding.getValidator();\n-    final SqlValidatorScope scope = binding.getScope();\n-    assert operands != null;\n-    assert operands.size() >= 2;\n+    requireNonNull(operands, \"operands\");\n+    assert operands.size() >= 2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw=="}, "originalCommit": {"oid": "8beb3d576f4980ad46c4a817460e75f29700d5cd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4ODE1MQ==", "bodyText": "Preconditions.checkArgument allocates garbage even in case the error is not thrown (at least in Guava 19)", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495988151", "createdAt": "2020-09-28T14:36:17Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "diffHunk": "@@ -123,21 +126,13 @@ public static boolean isCharTypeComparable(\n       SqlCallBinding binding,\n       List<SqlNode> operands,\n       boolean throwOnFailure) {\n-    final SqlValidator validator = binding.getValidator();\n-    final SqlValidatorScope scope = binding.getScope();\n-    assert operands != null;\n-    assert operands.size() >= 2;\n+    requireNonNull(operands, \"operands\");\n+    assert operands.size() >= 2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw=="}, "originalCommit": {"oid": "8beb3d576f4980ad46c4a817460e75f29700d5cd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzODM1OA==", "bodyText": "hi @vlsi , what do you mean by allocates garbage?", "url": "https://github.com/apache/calcite/pull/2171#discussion_r496338358", "createdAt": "2020-09-29T02:15:53Z", "author": {"login": "liupc"}, "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "diffHunk": "@@ -123,21 +126,13 @@ public static boolean isCharTypeComparable(\n       SqlCallBinding binding,\n       List<SqlNode> operands,\n       boolean throwOnFailure) {\n-    final SqlValidator validator = binding.getValidator();\n-    final SqlValidatorScope scope = binding.getScope();\n-    assert operands != null;\n-    assert operands.size() >= 2;\n+    requireNonNull(operands, \"operands\");\n+    assert operands.size() >= 2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw=="}, "originalCommit": {"oid": "8beb3d576f4980ad46c4a817460e75f29700d5cd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ3MDU1MQ==", "bodyText": "I mean primitive arguments boxing, and vararg array allocation.\nThis is missing in Guava 19: google/guava@892e323#diff-fe7358934fa6eba23c2791eb40cec030", "url": "https://github.com/apache/calcite/pull/2171#discussion_r496470551", "createdAt": "2020-09-29T07:18:48Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "diffHunk": "@@ -123,21 +126,13 @@ public static boolean isCharTypeComparable(\n       SqlCallBinding binding,\n       List<SqlNode> operands,\n       boolean throwOnFailure) {\n-    final SqlValidator validator = binding.getValidator();\n-    final SqlValidatorScope scope = binding.getScope();\n-    assert operands != null;\n-    assert operands.size() >= 2;\n+    requireNonNull(operands, \"operands\");\n+    assert operands.size() >= 2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw=="}, "originalCommit": {"oid": "8beb3d576f4980ad46c4a817460e75f29700d5cd"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 34, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}