{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NDM5MzE5", "number": 1724, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMjo0MDoyMFrODWI5uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozMDozMVrODWiqAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTQxMTE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMjo0MDoyMFrOFaumbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDowMzoxNlrOFavZCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MDc5OQ==", "bodyText": "It might be better if we put the if condition out of the loop.", "url": "https://github.com/apache/calcite/pull/1724#discussion_r363570799", "createdAt": "2020-01-07T02:40:20Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java", "diffHunk": "@@ -293,16 +294,26 @@ private RelDataType inferTypeFromValidator(\n     return ret;\n   }\n \n-  private RelDataType inferTypeFromOperands(\n-      RelDataTypeFactory typeFactory,\n-      List<RelDataType> argTypes) {\n+  private RelDataType inferTypeFromOperands(SqlOperatorBinding opBinding) {\n+    final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();\n+    final List<RelDataType> argTypes = opBinding.collectOperandTypes();\n     assert (argTypes.size() % 2) == 1 : \"odd number of arguments expected: \"\n         + argTypes.size();\n     assert argTypes.size() > 1 : \"CASE must have more than 1 argument. Given \"\n       + argTypes.size() + \", \" + argTypes;\n     List<RelDataType> thenTypes = new ArrayList<>();\n     for (int j = 1; j < (argTypes.size() - 1); j += 2) {\n-      thenTypes.add(argTypes.get(j));\n+      RelDataType argType = argTypes.get(j);\n+      if (opBinding instanceof RexCallBinding) {\n+        RexNode whenNode = ((RexCallBinding) opBinding).getOperands().get(j - 1);\n+        RexNode thenNode = ((RexCallBinding) opBinding).getOperands().get(j);\n+        if (whenNode.getKind() == SqlKind.IS_NOT_NULL && argType.isNullable()) {\n+          if (((RexCall) whenNode).getOperands().get(0).equals(thenNode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09906561de8e309bf1df302414ed7a2e1d7420f7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MTAzNA==", "bodyText": "Also extract ((RexCallBinding) opBinding) as a variable to avoid casting twice.", "url": "https://github.com/apache/calcite/pull/1724#discussion_r363571034", "createdAt": "2020-01-07T02:41:38Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java", "diffHunk": "@@ -293,16 +294,26 @@ private RelDataType inferTypeFromValidator(\n     return ret;\n   }\n \n-  private RelDataType inferTypeFromOperands(\n-      RelDataTypeFactory typeFactory,\n-      List<RelDataType> argTypes) {\n+  private RelDataType inferTypeFromOperands(SqlOperatorBinding opBinding) {\n+    final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();\n+    final List<RelDataType> argTypes = opBinding.collectOperandTypes();\n     assert (argTypes.size() % 2) == 1 : \"odd number of arguments expected: \"\n         + argTypes.size();\n     assert argTypes.size() > 1 : \"CASE must have more than 1 argument. Given \"\n       + argTypes.size() + \", \" + argTypes;\n     List<RelDataType> thenTypes = new ArrayList<>();\n     for (int j = 1; j < (argTypes.size() - 1); j += 2) {\n-      thenTypes.add(argTypes.get(j));\n+      RelDataType argType = argTypes.get(j);\n+      if (opBinding instanceof RexCallBinding) {\n+        RexNode whenNode = ((RexCallBinding) opBinding).getOperands().get(j - 1);\n+        RexNode thenNode = ((RexCallBinding) opBinding).getOperands().get(j);\n+        if (whenNode.getKind() == SqlKind.IS_NOT_NULL && argType.isNullable()) {\n+          if (((RexCall) whenNode).getOperands().get(0).equals(thenNode)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MDc5OQ=="}, "originalCommit": {"oid": "09906561de8e309bf1df302414ed7a2e1d7420f7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4Mzc1NA==", "bodyText": "Thanks for review!\n\nIt might be better if we put the if condition out of the loop.\n\nIt's might be difficult. Only when SqlKind is IS_NOT_NULL, we convert it to RexCall. Or can we combine these two if conditions?\n\nAlso extract ((RexCallBinding) opBinding) as a variable to avoid casting twice.\n\nDone.", "url": "https://github.com/apache/calcite/pull/1724#discussion_r363583754", "createdAt": "2020-01-07T04:03:16Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java", "diffHunk": "@@ -293,16 +294,26 @@ private RelDataType inferTypeFromValidator(\n     return ret;\n   }\n \n-  private RelDataType inferTypeFromOperands(\n-      RelDataTypeFactory typeFactory,\n-      List<RelDataType> argTypes) {\n+  private RelDataType inferTypeFromOperands(SqlOperatorBinding opBinding) {\n+    final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();\n+    final List<RelDataType> argTypes = opBinding.collectOperandTypes();\n     assert (argTypes.size() % 2) == 1 : \"odd number of arguments expected: \"\n         + argTypes.size();\n     assert argTypes.size() > 1 : \"CASE must have more than 1 argument. Given \"\n       + argTypes.size() + \", \" + argTypes;\n     List<RelDataType> thenTypes = new ArrayList<>();\n     for (int j = 1; j < (argTypes.size() - 1); j += 2) {\n-      thenTypes.add(argTypes.get(j));\n+      RelDataType argType = argTypes.get(j);\n+      if (opBinding instanceof RexCallBinding) {\n+        RexNode whenNode = ((RexCallBinding) opBinding).getOperands().get(j - 1);\n+        RexNode thenNode = ((RexCallBinding) opBinding).getOperands().get(j);\n+        if (whenNode.getKind() == SqlKind.IS_NOT_NULL && argType.isNullable()) {\n+          if (((RexCall) whenNode).getOperands().get(0).equals(thenNode)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MDc5OQ=="}, "originalCommit": {"oid": "09906561de8e309bf1df302414ed7a2e1d7420f7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTYyNzc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexCallBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzoyOToyOVrOFbW1jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMzozMzo1MlrOFbqI9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMDAzMQ==", "bodyText": "Follow the SqlCallBinding name pattern, use operands or operand.", "url": "https://github.com/apache/calcite/pull/1724#discussion_r364230031", "createdAt": "2020-01-08T13:29:29Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rex/RexCallBinding.java", "diffHunk": "@@ -122,6 +122,10 @@ public static RexCallBinding create(RelDataTypeFactory typeFactory,\n     return RexUtil.isLiteral(operands.get(ordinal), allowCast);\n   }\n \n+  public List<RexNode> getOperands() {\n+    return operands;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b301ba518e61fe6fde83c02b26648a38a0cb064f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0NjI5NA==", "bodyText": "Done", "url": "https://github.com/apache/calcite/pull/1724#discussion_r364546294", "createdAt": "2020-01-09T03:33:52Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/rex/RexCallBinding.java", "diffHunk": "@@ -122,6 +122,10 @@ public static RexCallBinding create(RelDataTypeFactory typeFactory,\n     return RexUtil.isLiteral(operands.get(ordinal), allowCast);\n   }\n \n+  public List<RexNode> getOperands() {\n+    return operands;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMDAzMQ=="}, "originalCommit": {"oid": "b301ba518e61fe6fde83c02b26648a38a0cb064f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTYzMDc1OnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozMDozMVrOFbW3bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODoyNDoxOFrOFbt3gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMDUwOA==", "bodyText": "Just as the comment addressed, can we unify the call bindings ?", "url": "https://github.com/apache/calcite/pull/1724#discussion_r364230508", "createdAt": "2020-01-08T13:30:31Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java", "diffHunk": "@@ -216,9 +219,7 @@ public RelDataType inferReturnType(\n       SqlOperatorBinding opBinding) {\n     // REVIEW jvs 4-June-2005:  can't these be unified?\n     if (!(opBinding instanceof SqlCallBinding)) {\n-      return inferTypeFromOperands(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b301ba518e61fe6fde83c02b26648a38a0cb064f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0NjA0MQ==", "bodyText": "I ever noticed the comment left by Julian and made some efforts to unify them.\nBut it seems to be diffcult, especially for the usage of unique fields in SqlCallBinding.\nMaybe we need a thorough consideration on unifying type inference in different phases (validating/converting/runtime).", "url": "https://github.com/apache/calcite/pull/1724#discussion_r364546041", "createdAt": "2020-01-09T03:32:16Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java", "diffHunk": "@@ -216,9 +219,7 @@ public RelDataType inferReturnType(\n       SqlOperatorBinding opBinding) {\n     // REVIEW jvs 4-June-2005:  can't these be unified?\n     if (!(opBinding instanceof SqlCallBinding)) {\n-      return inferTypeFromOperands(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMDUwOA=="}, "originalCommit": {"oid": "b301ba518e61fe6fde83c02b26648a38a0cb064f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYwNzM2MA==", "bodyText": "Thanks for the clarification, i have no more comments.", "url": "https://github.com/apache/calcite/pull/1724#discussion_r364607360", "createdAt": "2020-01-09T08:24:18Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java", "diffHunk": "@@ -216,9 +219,7 @@ public RelDataType inferReturnType(\n       SqlOperatorBinding opBinding) {\n     // REVIEW jvs 4-June-2005:  can't these be unified?\n     if (!(opBinding instanceof SqlCallBinding)) {\n-      return inferTypeFromOperands(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMDUwOA=="}, "originalCommit": {"oid": "b301ba518e61fe6fde83c02b26648a38a0cb064f"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 350, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}