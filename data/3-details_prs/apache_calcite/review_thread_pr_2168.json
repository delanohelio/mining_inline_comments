{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMzU4NzY2", "number": 2168, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjozODoxMVrOEnBd7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjozODoxMVrOEnBd7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzUzOTY2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjozODoxMVrOHXYnKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozMzo0OFrOHXd8FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MjUzNg==", "bodyText": "Should this check be moved to EnumerableMergeJoin constructor?", "url": "https://github.com/apache/calcite/pull/2168#discussion_r494282536", "createdAt": "2020-09-24T12:38:11Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -1618,20 +1619,23 @@ private void checkCollation(RelOptCluster cluster, RelOptTable empTable,\n     final EnumerableMergeJoin join;\n     join = EnumerableMergeJoin.create(project, deptSort,\n         rexBuilder.makeLiteral(true), leftKeys, rightKeys, JoinRelType.INNER);\n+    assertThat(join.getTraitSet().getConvention(), equalTo(EnumerableConvention.INSTANCE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2111125c0a3c0b3b98cda73fd58cb11164b29cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NzU2Nw==", "bodyText": "Other similar operators (e.g. EnumerableHashJoin, EnumerableNestedLoopJoin, EnumerableBatchNestedLoopJoin) don't have this check in their constructors. In fact, it is not recommended to call these constructors directly (unless you know what you are doing) and they are not public, so I am ok with their current behavior of \"trusting\" the RelTraitSet parameter.\nOn the contrary, EnumerableMergeJoin#create method is public (as the other create methods in the other join operators), so it is its responsibility to create a valid traitSet bafore calling EnumerableMergeJoin's constructor.", "url": "https://github.com/apache/calcite/pull/2168#discussion_r494287567", "createdAt": "2020-09-24T12:46:33Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -1618,20 +1619,23 @@ private void checkCollation(RelOptCluster cluster, RelOptTable empTable,\n     final EnumerableMergeJoin join;\n     join = EnumerableMergeJoin.create(project, deptSort,\n         rexBuilder.makeLiteral(true), leftKeys, rightKeys, JoinRelType.INNER);\n+    assertThat(join.getTraitSet().getConvention(), equalTo(EnumerableConvention.INSTANCE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MjUzNg=="}, "originalCommit": {"oid": "f2111125c0a3c0b3b98cda73fd58cb11164b29cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4OTA2OQ==", "bodyText": "See \n  \n    \n      calcite/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java\n    \n    \n         Line 77\n      in\n      978bb7e\n    \n    \n    \n    \n\n        \n          \n           assert getConvention() instanceof EnumerableConvention; \n        \n    \n  \n\n and other assertions of that kind: https://github.com/apache/calcite/search?q=%22getConvention%28%29+instanceof+EnumerableConvention%22", "url": "https://github.com/apache/calcite/pull/2168#discussion_r494289069", "createdAt": "2020-09-24T12:48:46Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -1618,20 +1619,23 @@ private void checkCollation(RelOptCluster cluster, RelOptTable empTable,\n     final EnumerableMergeJoin join;\n     join = EnumerableMergeJoin.create(project, deptSort,\n         rexBuilder.makeLiteral(true), leftKeys, rightKeys, JoinRelType.INNER);\n+    assertThat(join.getTraitSet().getConvention(), equalTo(EnumerableConvention.INSTANCE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MjUzNg=="}, "originalCommit": {"oid": "f2111125c0a3c0b3b98cda73fd58cb11164b29cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMzUwMw==", "bodyText": "Ok, I'm not against having the assertion in the constructor. I'll add it.", "url": "https://github.com/apache/calcite/pull/2168#discussion_r494303503", "createdAt": "2020-09-24T13:10:37Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -1618,20 +1619,23 @@ private void checkCollation(RelOptCluster cluster, RelOptTable empTable,\n     final EnumerableMergeJoin join;\n     join = EnumerableMergeJoin.create(project, deptSort,\n         rexBuilder.makeLiteral(true), leftKeys, rightKeys, JoinRelType.INNER);\n+    assertThat(join.getTraitSet().getConvention(), equalTo(EnumerableConvention.INSTANCE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MjUzNg=="}, "originalCommit": {"oid": "f2111125c0a3c0b3b98cda73fd58cb11164b29cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwNDg4NQ==", "bodyText": "Great. Then the assertion in the test won't be needed", "url": "https://github.com/apache/calcite/pull/2168#discussion_r494304885", "createdAt": "2020-09-24T13:12:29Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -1618,20 +1619,23 @@ private void checkCollation(RelOptCluster cluster, RelOptTable empTable,\n     final EnumerableMergeJoin join;\n     join = EnumerableMergeJoin.create(project, deptSort,\n         rexBuilder.makeLiteral(true), leftKeys, rightKeys, JoinRelType.INNER);\n+    assertThat(join.getTraitSet().getConvention(), equalTo(EnumerableConvention.INSTANCE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MjUzNg=="}, "originalCommit": {"oid": "f2111125c0a3c0b3b98cda73fd58cb11164b29cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwNjg0OA==", "bodyText": "I'd prefer to keep it in the unit test, so that we can detect any potential regression in the future.\nAlso, I like the idea of systematically adding a new test scenario every time we encounter an issue.", "url": "https://github.com/apache/calcite/pull/2168#discussion_r494306848", "createdAt": "2020-09-24T13:15:13Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -1618,20 +1619,23 @@ private void checkCollation(RelOptCluster cluster, RelOptTable empTable,\n     final EnumerableMergeJoin join;\n     join = EnumerableMergeJoin.create(project, deptSort,\n         rexBuilder.makeLiteral(true), leftKeys, rightKeys, JoinRelType.INNER);\n+    assertThat(join.getTraitSet().getConvention(), equalTo(EnumerableConvention.INSTANCE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MjUzNg=="}, "originalCommit": {"oid": "f2111125c0a3c0b3b98cda73fd58cb11164b29cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxOTA3MA==", "bodyText": "Assertion added to EnumerableMergeJoin's constructor.", "url": "https://github.com/apache/calcite/pull/2168#discussion_r494319070", "createdAt": "2020-09-24T13:31:56Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -1618,20 +1619,23 @@ private void checkCollation(RelOptCluster cluster, RelOptTable empTable,\n     final EnumerableMergeJoin join;\n     join = EnumerableMergeJoin.create(project, deptSort,\n         rexBuilder.makeLiteral(true), leftKeys, rightKeys, JoinRelType.INNER);\n+    assertThat(join.getTraitSet().getConvention(), equalTo(EnumerableConvention.INSTANCE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MjUzNg=="}, "originalCommit": {"oid": "f2111125c0a3c0b3b98cda73fd58cb11164b29cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTU5MQ==", "bodyText": "I think we do not need to duplicate logic though.\nFor instance, if the method receives String, then we don't need to add a test that tries to pass Integer there.\nThe assertion in the constructor covers all the possible ways to create EnumerableMergeJoin, so it is more-or-less enough from my point of view.", "url": "https://github.com/apache/calcite/pull/2168#discussion_r494349591", "createdAt": "2020-09-24T14:07:33Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -1618,20 +1619,23 @@ private void checkCollation(RelOptCluster cluster, RelOptTable empTable,\n     final EnumerableMergeJoin join;\n     join = EnumerableMergeJoin.create(project, deptSort,\n         rexBuilder.makeLiteral(true), leftKeys, rightKeys, JoinRelType.INNER);\n+    assertThat(join.getTraitSet().getConvention(), equalTo(EnumerableConvention.INSTANCE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MjUzNg=="}, "originalCommit": {"oid": "f2111125c0a3c0b3b98cda73fd58cb11164b29cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2Mzg0OQ==", "bodyText": "Ok, I don't mind removing the check from the test. I just want this fix merged before next release.", "url": "https://github.com/apache/calcite/pull/2168#discussion_r494363849", "createdAt": "2020-09-24T14:26:19Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -1618,20 +1619,23 @@ private void checkCollation(RelOptCluster cluster, RelOptTable empTable,\n     final EnumerableMergeJoin join;\n     join = EnumerableMergeJoin.create(project, deptSort,\n         rexBuilder.makeLiteral(true), leftKeys, rightKeys, JoinRelType.INNER);\n+    assertThat(join.getTraitSet().getConvention(), equalTo(EnumerableConvention.INSTANCE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MjUzNg=="}, "originalCommit": {"oid": "f2111125c0a3c0b3b98cda73fd58cb11164b29cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2OTgxMg==", "bodyText": "Done.", "url": "https://github.com/apache/calcite/pull/2168#discussion_r494369812", "createdAt": "2020-09-24T14:33:48Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -1618,20 +1619,23 @@ private void checkCollation(RelOptCluster cluster, RelOptTable empTable,\n     final EnumerableMergeJoin join;\n     join = EnumerableMergeJoin.create(project, deptSort,\n         rexBuilder.makeLiteral(true), leftKeys, rightKeys, JoinRelType.INNER);\n+    assertThat(join.getTraitSet().getConvention(), equalTo(EnumerableConvention.INSTANCE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MjUzNg=="}, "originalCommit": {"oid": "f2111125c0a3c0b3b98cda73fd58cb11164b29cf"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 30, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}