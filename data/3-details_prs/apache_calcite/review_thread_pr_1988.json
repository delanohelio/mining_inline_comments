{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzU1ODQ4", "number": 1988, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTo0NDo0NlrOD_Ph9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMjo1NzowOFrOD_6zDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQxMzM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTo0NDo0NlrOGZy4WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTo0NDo0NlrOGZy4WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwMTIwOQ==", "bodyText": "why create a new  SqlInsert instance, can we just make a cast from call object?", "url": "https://github.com/apache/calcite/pull/1988#discussion_r429701209", "createdAt": "2020-05-25T01:44:46Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,\n+      SqlWriter writer,\n+      SqlCall call) {\n+    final List<SqlNode> operands = call.getOperandList();\n+    switch (operator.getKind()) {\n+    case INSERT:\n+      assert operands.size() == 3 || operands.size() == 4;\n+      final SqlInsert insert = new SqlInsert(call.getParserPosition(),\n+          (SqlNodeList) operands.get(0), operands.get(1), operands.get(2),\n+          operands.size() == 3 ? null : (SqlNodeList) call.getOperandList().get(3));\n+      insert.unparse(writer, operator.getLeftPrec(), operator.getRightPrec());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4e8cfd45b4e19dd957c4ab7e312dc981a25fd8b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTE1MTc3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMjozMDo0N1rOGaM2pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMjozODo0MVrOGaM8kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjc1Nw==", "bodyText": "how about add  some checks for the result of accept", "url": "https://github.com/apache/calcite/pull/1988#discussion_r430126757", "createdAt": "2020-05-26T02:30:47Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java", "diffHunk": "@@ -5747,6 +5748,17 @@ public void subTestIntervalMonthFailsValidation() {\n         .ok(\"INTERVAL '0' MONTH(0)\");\n   }\n \n+  @Test void testSqlParserPosPlus() throws Exception {\n+    final String sql = \"insert into emps select * from emps\";\n+    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n+    sqlNode.accept(new SqlShuttle() {\n+      @Override public SqlNode visit(SqlIdentifier identifier) {\n+        return new SqlIdentifier(identifier.names,\n+            identifier.getParserPosition());\n+      }\n+    });\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a90c5c1a4d3d0e0815f00e5842779105d32ec52"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyODI3NA==", "bodyText": "Thanks, add check for it.", "url": "https://github.com/apache/calcite/pull/1988#discussion_r430128274", "createdAt": "2020-05-26T02:38:41Z", "author": {"login": "xy2953396112"}, "path": "core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java", "diffHunk": "@@ -5747,6 +5748,17 @@ public void subTestIntervalMonthFailsValidation() {\n         .ok(\"INTERVAL '0' MONTH(0)\");\n   }\n \n+  @Test void testSqlParserPosPlus() throws Exception {\n+    final String sql = \"insert into emps select * from emps\";\n+    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n+    sqlNode.accept(new SqlShuttle() {\n+      @Override public SqlNode visit(SqlIdentifier identifier) {\n+        return new SqlIdentifier(identifier.names,\n+            identifier.getParserPosition());\n+      }\n+    });\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjc1Nw=="}, "originalCommit": {"oid": "9a90c5c1a4d3d0e0815f00e5842779105d32ec52"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzUwMjIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlInsert.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMjo1NzowOFrOGa3xzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjo1MTozMVrOGa7p1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMDAyOA==", "bodyText": "Is it possible that targetTable is null or source is null?", "url": "https://github.com/apache/calcite/pull/1988#discussion_r430830028", "createdAt": "2020-05-27T02:57:08Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlInsert.java", "diffHunk": "@@ -62,7 +62,11 @@ public SqlOperator getOperator() {\n   }\n \n   public List<SqlNode> getOperandList() {\n-    return ImmutableNullableList.of(keywords, targetTable, source, columnList);\n+    if (columnList == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7ca1091f5a44af5debba7e3ef134c397992c924"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4MDY0OQ==", "bodyText": "@DonnyZone Thansk for review. targetTable and source should be not null.\nFor example a sql such as insert into emps , it can\u2019t be parsed.\ninsert into emps VALUES (true, 1) be parsed as SqlInsert, source not null.", "url": "https://github.com/apache/calcite/pull/1988#discussion_r430880649", "createdAt": "2020-05-27T06:18:04Z", "author": {"login": "xy2953396112"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlInsert.java", "diffHunk": "@@ -62,7 +62,11 @@ public SqlOperator getOperator() {\n   }\n \n   public List<SqlNode> getOperandList() {\n-    return ImmutableNullableList.of(keywords, targetTable, source, columnList);\n+    if (columnList == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMDAyOA=="}, "originalCommit": {"oid": "a7ca1091f5a44af5debba7e3ef134c397992c924"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5MzUyNg==", "bodyText": "Thanks for clarification.", "url": "https://github.com/apache/calcite/pull/1988#discussion_r430893526", "createdAt": "2020-05-27T06:51:31Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlInsert.java", "diffHunk": "@@ -62,7 +62,11 @@ public SqlOperator getOperator() {\n   }\n \n   public List<SqlNode> getOperandList() {\n-    return ImmutableNullableList.of(keywords, targetTable, source, columnList);\n+    if (columnList == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMDAyOA=="}, "originalCommit": {"oid": "a7ca1091f5a44af5debba7e3ef134c397992c924"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 159, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}