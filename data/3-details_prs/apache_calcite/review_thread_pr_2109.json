{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MjkzMjg5", "number": 2109, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzowMzozOVrOEYCvlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowOTo0MFrOEYQOfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjQ2MjMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSort.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzowMzozOVrOHAKhoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzowMzozOVrOHAKhoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNDQ5Nw==", "bodyText": "minor: for consistency reasons inside this method, please declare all variables as \"final\" (if they are effectively final)", "url": "https://github.com/apache/calcite/pull/2109#discussion_r469934497", "createdAt": "2020-08-13T13:03:39Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSort.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.adapter.enumerable;\n+\n+import org.apache.calcite.linq4j.tree.BlockBuilder;\n+import org.apache.calcite.linq4j.tree.Expression;\n+import org.apache.calcite.linq4j.tree.Expressions;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelOptCost;\n+import org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.calcite.plan.RelTraitSet;\n+import org.apache.calcite.rel.RelCollation;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Sort;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.calcite.rex.RexLiteral;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.util.BuiltInMethod;\n+import org.apache.calcite.util.Pair;\n+\n+import static org.apache.calcite.adapter.enumerable.EnumerableLimit.getExpression;\n+\n+/**\n+ * Implementation of {@link org.apache.calcite.rel.core.Sort} in\n+ * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}.\n+ * It optimizes sorts that have a limit and an optional offset.\n+ */\n+public class EnumerableLimitSort extends Sort implements EnumerableRel {\n+\n+  /**\n+   * Creates an EnumerableLimitSort.\n+   *\n+   * <p>Use {@link #create} unless you know what you're doing.\n+   */\n+  public EnumerableLimitSort(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      RelCollation collation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    super(cluster, traitSet, input, collation, offset, fetch);\n+    assert this.getConvention() instanceof EnumerableConvention;\n+    assert this.getConvention() == input.getConvention();\n+  }\n+\n+  /** Creates an EnumerableLimitSort. */\n+  public static EnumerableLimitSort create(\n+      RelNode input,\n+      RelCollation collation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    final RelOptCluster cluster = input.getCluster();\n+    final RelTraitSet traitSet = cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(\n+        collation);\n+    return new EnumerableLimitSort(cluster, traitSet, input, collation, offset, fetch);\n+  }\n+\n+  @Override public EnumerableLimitSort copy(\n+      RelTraitSet traitSet,\n+      RelNode newInput,\n+      RelCollation newCollation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    return new EnumerableLimitSort(\n+        this.getCluster(),\n+        traitSet,\n+        newInput,\n+        newCollation,\n+        offset,\n+        fetch);\n+  }\n+\n+  @Override public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n+    final BlockBuilder builder = new BlockBuilder();\n+    final EnumerableRel child = (EnumerableRel) this.getInput();\n+    final Result result = implementor.visitChild(this, 0, child, pref);\n+    final PhysType physType = PhysTypeImpl.of(\n+        implementor.getTypeFactory(),\n+        this.getRowType(),\n+        result.format);\n+    Expression childExp = builder.append(\"child\", result.block);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjQ4NTE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSort.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzowOToxMVrOHAKvaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoxNjozMlrOHCQsQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzODAyNA==", "bodyText": "Inside implement method you allow this.fetch to be a dynamic parameter; however here (computeSelfCost) you assume it will be a RexLiteral (I have the impression that arriving at this point with a RexDynamicParam will throw an exception).\nEither we modify cost computation (but it will be impossible to give a precise cost in case of dynamic parameter); or to simplify things we could decide that EnumerableLimitSort only supports fetch (and offset) in the form of RexLiteral (and adapt EnumerableLimitSortRule accordingly).", "url": "https://github.com/apache/calcite/pull/2109#discussion_r469938024", "createdAt": "2020-08-13T13:09:11Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSort.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.adapter.enumerable;\n+\n+import org.apache.calcite.linq4j.tree.BlockBuilder;\n+import org.apache.calcite.linq4j.tree.Expression;\n+import org.apache.calcite.linq4j.tree.Expressions;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelOptCost;\n+import org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.calcite.plan.RelTraitSet;\n+import org.apache.calcite.rel.RelCollation;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Sort;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.calcite.rex.RexLiteral;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.util.BuiltInMethod;\n+import org.apache.calcite.util.Pair;\n+\n+import static org.apache.calcite.adapter.enumerable.EnumerableLimit.getExpression;\n+\n+/**\n+ * Implementation of {@link org.apache.calcite.rel.core.Sort} in\n+ * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}.\n+ * It optimizes sorts that have a limit and an optional offset.\n+ */\n+public class EnumerableLimitSort extends Sort implements EnumerableRel {\n+\n+  /**\n+   * Creates an EnumerableLimitSort.\n+   *\n+   * <p>Use {@link #create} unless you know what you're doing.\n+   */\n+  public EnumerableLimitSort(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      RelCollation collation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    super(cluster, traitSet, input, collation, offset, fetch);\n+    assert this.getConvention() instanceof EnumerableConvention;\n+    assert this.getConvention() == input.getConvention();\n+  }\n+\n+  /** Creates an EnumerableLimitSort. */\n+  public static EnumerableLimitSort create(\n+      RelNode input,\n+      RelCollation collation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    final RelOptCluster cluster = input.getCluster();\n+    final RelTraitSet traitSet = cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(\n+        collation);\n+    return new EnumerableLimitSort(cluster, traitSet, input, collation, offset, fetch);\n+  }\n+\n+  @Override public EnumerableLimitSort copy(\n+      RelTraitSet traitSet,\n+      RelNode newInput,\n+      RelCollation newCollation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    return new EnumerableLimitSort(\n+        this.getCluster(),\n+        traitSet,\n+        newInput,\n+        newCollation,\n+        offset,\n+        fetch);\n+  }\n+\n+  @Override public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n+    final BlockBuilder builder = new BlockBuilder();\n+    final EnumerableRel child = (EnumerableRel) this.getInput();\n+    final Result result = implementor.visitChild(this, 0, child, pref);\n+    final PhysType physType = PhysTypeImpl.of(\n+        implementor.getTypeFactory(),\n+        this.getRowType(),\n+        result.format);\n+    Expression childExp = builder.append(\"child\", result.block);\n+\n+    PhysType inputPhysType = result.physType;\n+    final Pair<Expression, Expression> pair =\n+        inputPhysType.generateCollationKey(this.collation.getFieldCollations());\n+\n+    Expression fetchVal;\n+    if (this.fetch == null) {\n+      fetchVal = Expressions.constant(Integer.valueOf(Integer.MAX_VALUE));\n+    } else {\n+      fetchVal = getExpression(this.fetch);\n+    }\n+\n+    Expression offsetVal = this.offset == null ? Expressions.constant(Integer.valueOf(0))\n+        : getExpression(this.offset);\n+\n+    builder.add(\n+        Expressions.return_(\n+            null, Expressions.call(\n+                BuiltInMethod.ORDER_BY_WITH_FETCH_AND_OFFSET.method, Expressions.list(\n+                    childExp,\n+                    builder.append(\"keySelector\", pair.left))\n+                    .appendIfNotNull(builder.appendIfNotNull(\"comparator\", pair.right))\n+                    .appendIfNotNull(\n+                        builder.appendIfNotNull(\"offset\",\n+                            Expressions.constant(offsetVal)))\n+                    .appendIfNotNull(\n+                        builder.appendIfNotNull(\"fetch\",\n+                            Expressions.constant(fetchVal)))\n+            )));\n+    return implementor.result(physType, builder.toBlock());\n+  }\n+\n+  @Override public RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {\n+    final double rowCount = mq.getRowCount(this.input).doubleValue();\n+    double toSort = this.fetch == null ? rowCount : RexLiteral.intValue(this.fetch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzMjY3Mw==", "bodyText": "I've modified the cost, so that it falls back to the row count if there are dynamic parameters", "url": "https://github.com/apache/calcite/pull/2109#discussion_r472132673", "createdAt": "2020-08-18T12:16:32Z", "author": {"login": "thomasrebele"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSort.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.adapter.enumerable;\n+\n+import org.apache.calcite.linq4j.tree.BlockBuilder;\n+import org.apache.calcite.linq4j.tree.Expression;\n+import org.apache.calcite.linq4j.tree.Expressions;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelOptCost;\n+import org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.calcite.plan.RelTraitSet;\n+import org.apache.calcite.rel.RelCollation;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Sort;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.calcite.rex.RexLiteral;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.util.BuiltInMethod;\n+import org.apache.calcite.util.Pair;\n+\n+import static org.apache.calcite.adapter.enumerable.EnumerableLimit.getExpression;\n+\n+/**\n+ * Implementation of {@link org.apache.calcite.rel.core.Sort} in\n+ * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}.\n+ * It optimizes sorts that have a limit and an optional offset.\n+ */\n+public class EnumerableLimitSort extends Sort implements EnumerableRel {\n+\n+  /**\n+   * Creates an EnumerableLimitSort.\n+   *\n+   * <p>Use {@link #create} unless you know what you're doing.\n+   */\n+  public EnumerableLimitSort(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      RelCollation collation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    super(cluster, traitSet, input, collation, offset, fetch);\n+    assert this.getConvention() instanceof EnumerableConvention;\n+    assert this.getConvention() == input.getConvention();\n+  }\n+\n+  /** Creates an EnumerableLimitSort. */\n+  public static EnumerableLimitSort create(\n+      RelNode input,\n+      RelCollation collation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    final RelOptCluster cluster = input.getCluster();\n+    final RelTraitSet traitSet = cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(\n+        collation);\n+    return new EnumerableLimitSort(cluster, traitSet, input, collation, offset, fetch);\n+  }\n+\n+  @Override public EnumerableLimitSort copy(\n+      RelTraitSet traitSet,\n+      RelNode newInput,\n+      RelCollation newCollation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    return new EnumerableLimitSort(\n+        this.getCluster(),\n+        traitSet,\n+        newInput,\n+        newCollation,\n+        offset,\n+        fetch);\n+  }\n+\n+  @Override public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n+    final BlockBuilder builder = new BlockBuilder();\n+    final EnumerableRel child = (EnumerableRel) this.getInput();\n+    final Result result = implementor.visitChild(this, 0, child, pref);\n+    final PhysType physType = PhysTypeImpl.of(\n+        implementor.getTypeFactory(),\n+        this.getRowType(),\n+        result.format);\n+    Expression childExp = builder.append(\"child\", result.block);\n+\n+    PhysType inputPhysType = result.physType;\n+    final Pair<Expression, Expression> pair =\n+        inputPhysType.generateCollationKey(this.collation.getFieldCollations());\n+\n+    Expression fetchVal;\n+    if (this.fetch == null) {\n+      fetchVal = Expressions.constant(Integer.valueOf(Integer.MAX_VALUE));\n+    } else {\n+      fetchVal = getExpression(this.fetch);\n+    }\n+\n+    Expression offsetVal = this.offset == null ? Expressions.constant(Integer.valueOf(0))\n+        : getExpression(this.offset);\n+\n+    builder.add(\n+        Expressions.return_(\n+            null, Expressions.call(\n+                BuiltInMethod.ORDER_BY_WITH_FETCH_AND_OFFSET.method, Expressions.list(\n+                    childExp,\n+                    builder.append(\"keySelector\", pair.left))\n+                    .appendIfNotNull(builder.appendIfNotNull(\"comparator\", pair.right))\n+                    .appendIfNotNull(\n+                        builder.appendIfNotNull(\"offset\",\n+                            Expressions.constant(offsetVal)))\n+                    .appendIfNotNull(\n+                        builder.appendIfNotNull(\"fetch\",\n+                            Expressions.constant(fetchVal)))\n+            )));\n+    return implementor.result(physType, builder.toBlock());\n+  }\n+\n+  @Override public RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {\n+    final double rowCount = mq.getRowCount(this.input).doubleValue();\n+    double toSort = this.fetch == null ? rowCount : RexLiteral.intValue(this.fetch);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzODAyNA=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjUxNDQzOnYy", "diffSide": "RIGHT", "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoxNTo1OVrOHALA9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoyNjo0N1rOHALcHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MjUxNg==", "bodyText": "this if condition looks wrong/useless", "url": "https://github.com/apache/calcite/pull/2109#discussion_r469942516", "createdAt": "2020-08-13T13:15:59Z", "author": {"login": "rubenada"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -2624,6 +2624,86 @@ public static boolean isMergeJoinSupported(JoinType joinType) {\n     };\n   }\n \n+\n+  /**\n+   * A sort implementation optimized for a sort with a fetch size (LIMIT).\n+   * @param offset how many rows are skipped from the sorted output.\n+   *               Must be greater than or equal to 0.\n+   * @param fetch how many rows are retrieved. Must be greater than 0.\n+   */\n+  public static <TSource, TKey> Enumerable<TSource> orderBy(\n+      Enumerable<TSource> source,\n+      Function1<TSource, TKey> keySelector,\n+      Comparator<TKey> comparator,\n+      int offset, int fetch) {\n+    return new AbstractEnumerable<TSource>() {\n+      @Override public Enumerator<TSource> enumerator() {\n+        TreeMap<TKey, List<TSource>> map = new TreeMap<>(comparator);\n+        long size = 0;\n+        long needed = fetch + offset;\n+\n+        try (Enumerator<TSource> os = source.enumerator()) {\n+          while (os.moveNext()) {\n+            TSource o = os.current();\n+            TKey key = keySelector.apply(o);\n+            if (needed >= 0 && size >= needed) {\n+              if (comparator.compare(key, map.lastKey()) >= 0) {\n+                continue;\n+              }\n+              // remove last entry from tree map\n+              List<TSource> l = map.get(map.lastKey());\n+              if (l.size() == 1) {\n+                map.remove(map.lastKey());\n+              } else {\n+                l.remove(l.size() - 1);\n+              }\n+              size--;\n+            }\n+            map.compute(key, (k, l) -> {\n+              if (l == null) {\n+                return Collections.singletonList(o);\n+              }\n+              if (l.size() == 1) {\n+                l = new ArrayList<>(l);\n+              }\n+              l.add(o);\n+              return l;\n+            });\n+            size++;\n+          }\n+        }\n+\n+        if (offset > 0) {\n+          // search until which key we have to remove entries from the map\n+          int skipped = 0;\n+          TKey until = null;\n+          for (Map.Entry<TKey, List<TSource>> e : map.entrySet()) {\n+            skipped += e.getValue().size();\n+\n+            if (skipped > offset) {\n+              // we might need to remove entries from the list\n+              List<TSource> l = e.getValue();\n+              int toKeep = skipped - offset;\n+              if (toKeep < l.size()) {\n+                l.subList(0, l.size() - toKeep).clear();\n+              }\n+\n+              until = e.getKey();\n+              break;\n+            }\n+          }\n+          if (until == null) {\n+            return Linq4j.emptyEnumerator();\n+          } else if (until != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0OTQ3MA==", "bodyText": "also, since we have a return inside the previous if, I think we could just remove the else", "url": "https://github.com/apache/calcite/pull/2109#discussion_r469949470", "createdAt": "2020-08-13T13:26:47Z", "author": {"login": "rubenada"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -2624,6 +2624,86 @@ public static boolean isMergeJoinSupported(JoinType joinType) {\n     };\n   }\n \n+\n+  /**\n+   * A sort implementation optimized for a sort with a fetch size (LIMIT).\n+   * @param offset how many rows are skipped from the sorted output.\n+   *               Must be greater than or equal to 0.\n+   * @param fetch how many rows are retrieved. Must be greater than 0.\n+   */\n+  public static <TSource, TKey> Enumerable<TSource> orderBy(\n+      Enumerable<TSource> source,\n+      Function1<TSource, TKey> keySelector,\n+      Comparator<TKey> comparator,\n+      int offset, int fetch) {\n+    return new AbstractEnumerable<TSource>() {\n+      @Override public Enumerator<TSource> enumerator() {\n+        TreeMap<TKey, List<TSource>> map = new TreeMap<>(comparator);\n+        long size = 0;\n+        long needed = fetch + offset;\n+\n+        try (Enumerator<TSource> os = source.enumerator()) {\n+          while (os.moveNext()) {\n+            TSource o = os.current();\n+            TKey key = keySelector.apply(o);\n+            if (needed >= 0 && size >= needed) {\n+              if (comparator.compare(key, map.lastKey()) >= 0) {\n+                continue;\n+              }\n+              // remove last entry from tree map\n+              List<TSource> l = map.get(map.lastKey());\n+              if (l.size() == 1) {\n+                map.remove(map.lastKey());\n+              } else {\n+                l.remove(l.size() - 1);\n+              }\n+              size--;\n+            }\n+            map.compute(key, (k, l) -> {\n+              if (l == null) {\n+                return Collections.singletonList(o);\n+              }\n+              if (l.size() == 1) {\n+                l = new ArrayList<>(l);\n+              }\n+              l.add(o);\n+              return l;\n+            });\n+            size++;\n+          }\n+        }\n+\n+        if (offset > 0) {\n+          // search until which key we have to remove entries from the map\n+          int skipped = 0;\n+          TKey until = null;\n+          for (Map.Entry<TKey, List<TSource>> e : map.entrySet()) {\n+            skipped += e.getValue().size();\n+\n+            if (skipped > offset) {\n+              // we might need to remove entries from the list\n+              List<TSource> l = e.getValue();\n+              int toKeep = skipped - offset;\n+              if (toKeep < l.size()) {\n+                l.subList(0, l.size() - toKeep).clear();\n+              }\n+\n+              until = e.getKey();\n+              break;\n+            }\n+          }\n+          if (until == null) {\n+            return Linq4j.emptyEnumerator();\n+          } else if (until != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MjUxNg=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjU3NzYzOnYy", "diffSide": "RIGHT", "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozMDo0OFrOHALm-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODozNjowNlrOHC9EdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MjI0OQ==", "bodyText": "minor: maybe adding here the same comment that we have in toLookup_ to explain the choice of List implementation?\n// for first entry, use a singleton list to save space\n// when we go from 1 to 2 elements, switch to array list", "url": "https://github.com/apache/calcite/pull/2109#discussion_r469952249", "createdAt": "2020-08-13T13:30:48Z", "author": {"login": "rubenada"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -2624,6 +2624,86 @@ public static boolean isMergeJoinSupported(JoinType joinType) {\n     };\n   }\n \n+\n+  /**\n+   * A sort implementation optimized for a sort with a fetch size (LIMIT).\n+   * @param offset how many rows are skipped from the sorted output.\n+   *               Must be greater than or equal to 0.\n+   * @param fetch how many rows are retrieved. Must be greater than 0.\n+   */\n+  public static <TSource, TKey> Enumerable<TSource> orderBy(\n+      Enumerable<TSource> source,\n+      Function1<TSource, TKey> keySelector,\n+      Comparator<TKey> comparator,\n+      int offset, int fetch) {\n+    return new AbstractEnumerable<TSource>() {\n+      @Override public Enumerator<TSource> enumerator() {\n+        TreeMap<TKey, List<TSource>> map = new TreeMap<>(comparator);\n+        long size = 0;\n+        long needed = fetch + offset;\n+\n+        try (Enumerator<TSource> os = source.enumerator()) {\n+          while (os.moveNext()) {\n+            TSource o = os.current();\n+            TKey key = keySelector.apply(o);\n+            if (needed >= 0 && size >= needed) {\n+              if (comparator.compare(key, map.lastKey()) >= 0) {\n+                continue;\n+              }\n+              // remove last entry from tree map\n+              List<TSource> l = map.get(map.lastKey());\n+              if (l.size() == 1) {\n+                map.remove(map.lastKey());\n+              } else {\n+                l.remove(l.size() - 1);\n+              }\n+              size--;\n+            }\n+            map.compute(key, (k, l) -> {\n+              if (l == null) {\n+                return Collections.singletonList(o);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NDczMg==", "bodyText": "+1. I was also looking for some comments to explain the algorithm briefly.", "url": "https://github.com/apache/calcite/pull/2109#discussion_r470274732", "createdAt": "2020-08-13T22:05:01Z", "author": {"login": "amaliujia"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -2624,6 +2624,86 @@ public static boolean isMergeJoinSupported(JoinType joinType) {\n     };\n   }\n \n+\n+  /**\n+   * A sort implementation optimized for a sort with a fetch size (LIMIT).\n+   * @param offset how many rows are skipped from the sorted output.\n+   *               Must be greater than or equal to 0.\n+   * @param fetch how many rows are retrieved. Must be greater than 0.\n+   */\n+  public static <TSource, TKey> Enumerable<TSource> orderBy(\n+      Enumerable<TSource> source,\n+      Function1<TSource, TKey> keySelector,\n+      Comparator<TKey> comparator,\n+      int offset, int fetch) {\n+    return new AbstractEnumerable<TSource>() {\n+      @Override public Enumerator<TSource> enumerator() {\n+        TreeMap<TKey, List<TSource>> map = new TreeMap<>(comparator);\n+        long size = 0;\n+        long needed = fetch + offset;\n+\n+        try (Enumerator<TSource> os = source.enumerator()) {\n+          while (os.moveNext()) {\n+            TSource o = os.current();\n+            TKey key = keySelector.apply(o);\n+            if (needed >= 0 && size >= needed) {\n+              if (comparator.compare(key, map.lastKey()) >= 0) {\n+                continue;\n+              }\n+              // remove last entry from tree map\n+              List<TSource> l = map.get(map.lastKey());\n+              if (l.size() == 1) {\n+                map.remove(map.lastKey());\n+              } else {\n+                l.remove(l.size() - 1);\n+              }\n+              size--;\n+            }\n+            map.compute(key, (k, l) -> {\n+              if (l == null) {\n+                return Collections.singletonList(o);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MjI0OQ=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNDAxNg==", "bodyText": "@amaliujia, do you mean that I should add some comments that explain the implementation of the new orderBy method.", "url": "https://github.com/apache/calcite/pull/2109#discussion_r472134016", "createdAt": "2020-08-18T12:18:58Z", "author": {"login": "thomasrebele"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -2624,6 +2624,86 @@ public static boolean isMergeJoinSupported(JoinType joinType) {\n     };\n   }\n \n+\n+  /**\n+   * A sort implementation optimized for a sort with a fetch size (LIMIT).\n+   * @param offset how many rows are skipped from the sorted output.\n+   *               Must be greater than or equal to 0.\n+   * @param fetch how many rows are retrieved. Must be greater than 0.\n+   */\n+  public static <TSource, TKey> Enumerable<TSource> orderBy(\n+      Enumerable<TSource> source,\n+      Function1<TSource, TKey> keySelector,\n+      Comparator<TKey> comparator,\n+      int offset, int fetch) {\n+    return new AbstractEnumerable<TSource>() {\n+      @Override public Enumerator<TSource> enumerator() {\n+        TreeMap<TKey, List<TSource>> map = new TreeMap<>(comparator);\n+        long size = 0;\n+        long needed = fetch + offset;\n+\n+        try (Enumerator<TSource> os = source.enumerator()) {\n+          while (os.moveNext()) {\n+            TSource o = os.current();\n+            TKey key = keySelector.apply(o);\n+            if (needed >= 0 && size >= needed) {\n+              if (comparator.compare(key, map.lastKey()) >= 0) {\n+                continue;\n+              }\n+              // remove last entry from tree map\n+              List<TSource> l = map.get(map.lastKey());\n+              if (l.size() == 1) {\n+                map.remove(map.lastKey());\n+              } else {\n+                l.remove(l.size() - 1);\n+              }\n+              size--;\n+            }\n+            map.compute(key, (k, l) -> {\n+              if (l == null) {\n+                return Collections.singletonList(o);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MjI0OQ=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2MTkwOQ==", "bodyText": "Yes.\nOr you can link the JIRA but update the JIRA with the final detailed algorithm you have chosen.\nI found the JIRA has many discussions so was confused on which algorithm you finally chose, until I read the implementation here :). Something to help people understand the implementation directly in the future will be very helpful.", "url": "https://github.com/apache/calcite/pull/2109#discussion_r472661909", "createdAt": "2020-08-19T04:03:29Z", "author": {"login": "amaliujia"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -2624,6 +2624,86 @@ public static boolean isMergeJoinSupported(JoinType joinType) {\n     };\n   }\n \n+\n+  /**\n+   * A sort implementation optimized for a sort with a fetch size (LIMIT).\n+   * @param offset how many rows are skipped from the sorted output.\n+   *               Must be greater than or equal to 0.\n+   * @param fetch how many rows are retrieved. Must be greater than 0.\n+   */\n+  public static <TSource, TKey> Enumerable<TSource> orderBy(\n+      Enumerable<TSource> source,\n+      Function1<TSource, TKey> keySelector,\n+      Comparator<TKey> comparator,\n+      int offset, int fetch) {\n+    return new AbstractEnumerable<TSource>() {\n+      @Override public Enumerator<TSource> enumerator() {\n+        TreeMap<TKey, List<TSource>> map = new TreeMap<>(comparator);\n+        long size = 0;\n+        long needed = fetch + offset;\n+\n+        try (Enumerator<TSource> os = source.enumerator()) {\n+          while (os.moveNext()) {\n+            TSource o = os.current();\n+            TKey key = keySelector.apply(o);\n+            if (needed >= 0 && size >= needed) {\n+              if (comparator.compare(key, map.lastKey()) >= 0) {\n+                continue;\n+              }\n+              // remove last entry from tree map\n+              List<TSource> l = map.get(map.lastKey());\n+              if (l.size() == 1) {\n+                map.remove(map.lastKey());\n+              } else {\n+                l.remove(l.size() - 1);\n+              }\n+              size--;\n+            }\n+            map.compute(key, (k, l) -> {\n+              if (l == null) {\n+                return Collections.singletonList(o);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MjI0OQ=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1OTc2NQ==", "bodyText": "I've added an explanation at the beginning and more comments in the actual code to make the algorithm easier to understand.", "url": "https://github.com/apache/calcite/pull/2109#discussion_r472859765", "createdAt": "2020-08-19T08:36:06Z", "author": {"login": "thomasrebele"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -2624,6 +2624,86 @@ public static boolean isMergeJoinSupported(JoinType joinType) {\n     };\n   }\n \n+\n+  /**\n+   * A sort implementation optimized for a sort with a fetch size (LIMIT).\n+   * @param offset how many rows are skipped from the sorted output.\n+   *               Must be greater than or equal to 0.\n+   * @param fetch how many rows are retrieved. Must be greater than 0.\n+   */\n+  public static <TSource, TKey> Enumerable<TSource> orderBy(\n+      Enumerable<TSource> source,\n+      Function1<TSource, TKey> keySelector,\n+      Comparator<TKey> comparator,\n+      int offset, int fetch) {\n+    return new AbstractEnumerable<TSource>() {\n+      @Override public Enumerator<TSource> enumerator() {\n+        TreeMap<TKey, List<TSource>> map = new TreeMap<>(comparator);\n+        long size = 0;\n+        long needed = fetch + offset;\n+\n+        try (Enumerator<TSource> os = source.enumerator()) {\n+          while (os.moveNext()) {\n+            TSource o = os.current();\n+            TKey key = keySelector.apply(o);\n+            if (needed >= 0 && size >= needed) {\n+              if (comparator.compare(key, map.lastKey()) >= 0) {\n+                continue;\n+              }\n+              // remove last entry from tree map\n+              List<TSource> l = map.get(map.lastKey());\n+              if (l.size() == 1) {\n+                map.remove(map.lastKey());\n+              } else {\n+                l.remove(l.size() - 1);\n+              }\n+              size--;\n+            }\n+            map.compute(key, (k, l) -> {\n+              if (l == null) {\n+                return Collections.singletonList(o);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MjI0OQ=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODYyMTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSortRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMTo1MDozMVrOHAe8Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMTo1MDozMVrOHAe8Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI2ODkzOA==", "bodyText": "remove the extra //", "url": "https://github.com/apache/calcite/pull/2109#discussion_r470268938", "createdAt": "2020-08-13T21:50:31Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSortRule.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.adapter.enumerable;\n+\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelRule;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Sort;\n+import org.apache.calcite.rel.logical.LogicalSort;\n+\n+/**\n+ * Rule to convert an {@link EnumerableLimit} of on\n+ * {@link EnumerableSort} into an {@link EnumerableLimitSort}.\n+ */\n+public class EnumerableLimitSortRule extends RelRule<EnumerableLimitSortRule.Config> {\n+\n+  /**\n+   * Creates a EnumerableLimitSortRule.\n+   */\n+  public EnumerableLimitSortRule(Config config) {\n+    super(config);\n+  }\n+\n+  @Override public void onMatch(RelOptRuleCall call) {\n+    final LogicalSort sort = call.rel(0);\n+    RelNode input = sort.getInput();\n+    final Sort o = EnumerableLimitSort.create(//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODYzNzIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSort.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMTo1NjowNFrOHAfFBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoyMTowOFrOHCQ2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3MTIzNg==", "bodyText": "Out of curiosity: why do you decide to extend Sort?", "url": "https://github.com/apache/calcite/pull/2109#discussion_r470271236", "createdAt": "2020-08-13T21:56:04Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSort.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.adapter.enumerable;\n+\n+import org.apache.calcite.linq4j.tree.BlockBuilder;\n+import org.apache.calcite.linq4j.tree.Expression;\n+import org.apache.calcite.linq4j.tree.Expressions;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelOptCost;\n+import org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.calcite.plan.RelTraitSet;\n+import org.apache.calcite.rel.RelCollation;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Sort;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.calcite.rex.RexLiteral;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.util.BuiltInMethod;\n+import org.apache.calcite.util.Pair;\n+\n+import static org.apache.calcite.adapter.enumerable.EnumerableLimit.getExpression;\n+\n+/**\n+ * Implementation of {@link org.apache.calcite.rel.core.Sort} in\n+ * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}.\n+ * It optimizes sorts that have a limit and an optional offset.\n+ */\n+public class EnumerableLimitSort extends Sort implements EnumerableRel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNTIyNA==", "bodyText": "For the same reason that EnumerableSort extends Sort. I guess it is because both classes provide an implementation of a Sort algorithm.", "url": "https://github.com/apache/calcite/pull/2109#discussion_r472135224", "createdAt": "2020-08-18T12:21:08Z", "author": {"login": "thomasrebele"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSort.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.adapter.enumerable;\n+\n+import org.apache.calcite.linq4j.tree.BlockBuilder;\n+import org.apache.calcite.linq4j.tree.Expression;\n+import org.apache.calcite.linq4j.tree.Expressions;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelOptCost;\n+import org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.calcite.plan.RelTraitSet;\n+import org.apache.calcite.rel.RelCollation;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Sort;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.calcite.rex.RexLiteral;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.util.BuiltInMethod;\n+import org.apache.calcite.util.Pair;\n+\n+import static org.apache.calcite.adapter.enumerable.EnumerableLimit.getExpression;\n+\n+/**\n+ * Implementation of {@link org.apache.calcite.rel.core.Sort} in\n+ * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}.\n+ * It optimizes sorts that have a limit and an optional offset.\n+ */\n+public class EnumerableLimitSort extends Sort implements EnumerableRel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3MTIzNg=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY0NjAzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMTo1OTo0MFrOHAfKdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNTozMFrOHCxERw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3MjYyOQ==", "bodyText": "Do you need\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_LIMIT_RULE,\n\nas you have listed EnumerableRules.ENUMERABLE_LIMIT_SORT_RULE in the list?", "url": "https://github.com/apache/calcite/pull/2109#discussion_r470272629", "createdAt": "2020-08-13T21:59:40Z", "author": {"login": "amaliujia"}, "path": "core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java", "diffHunk": "@@ -1039,6 +1039,54 @@ private void basePushFilterPastAggWithGroupingSets(boolean unchanged) {\n         .check();\n   }\n \n+  /**\n+   * Test if limit and sort are replaced by a limit sort.\n+   * Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-3920\">[CALCITE-3920]\n+   * Improve ORDER BY computation in Enumerable convention by exploiting LIMIT</a>.\n+   */\n+  @Test void testLimitSort() {\n+    final String sql = \"select mgr from sales.emp\\n\"\n+        + \"union select mgr from sales.emp\\n\"\n+        + \"order by mgr limit 10 offset 5\";\n+\n+    VolcanoPlanner planner = new VolcanoPlanner(null, null);\n+    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n+    RelOptUtil.registerDefaultRules(planner, false, false);\n+    planner.addRule(EnumerableRules.ENUMERABLE_LIMIT_SORT_RULE);\n+\n+    Tester tester = createTester().withDecorrelation(true)\n+        .withClusterFactory(\n+            relOptCluster -> RelOptCluster.create(planner, relOptCluster.getRexBuilder()));\n+\n+    RelRoot root = tester.convertSqlToRel(sql);\n+\n+    String planBefore = NL + RelOptUtil.toString(root.rel);\n+    getDiffRepos().assertEquals(\"planBefore\", \"${planBefore}\", planBefore);\n+\n+    RuleSet ruleSet =\n+        RuleSets.ofList(\n+            EnumerableRules.ENUMERABLE_SORT_RULE,\n+            EnumerableRules.ENUMERABLE_LIMIT_RULE,\n+            EnumerableRules.ENUMERABLE_LIMIT_SORT_RULE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNTg3MQ==", "bodyText": "Yes, to check whether the new operator is chosen correctly. A plan with EnumerableLimit(EnumerableSort(...)) should have a higher cost.", "url": "https://github.com/apache/calcite/pull/2109#discussion_r472135871", "createdAt": "2020-08-18T12:22:15Z", "author": {"login": "thomasrebele"}, "path": "core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java", "diffHunk": "@@ -1039,6 +1039,54 @@ private void basePushFilterPastAggWithGroupingSets(boolean unchanged) {\n         .check();\n   }\n \n+  /**\n+   * Test if limit and sort are replaced by a limit sort.\n+   * Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-3920\">[CALCITE-3920]\n+   * Improve ORDER BY computation in Enumerable convention by exploiting LIMIT</a>.\n+   */\n+  @Test void testLimitSort() {\n+    final String sql = \"select mgr from sales.emp\\n\"\n+        + \"union select mgr from sales.emp\\n\"\n+        + \"order by mgr limit 10 offset 5\";\n+\n+    VolcanoPlanner planner = new VolcanoPlanner(null, null);\n+    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n+    RelOptUtil.registerDefaultRules(planner, false, false);\n+    planner.addRule(EnumerableRules.ENUMERABLE_LIMIT_SORT_RULE);\n+\n+    Tester tester = createTester().withDecorrelation(true)\n+        .withClusterFactory(\n+            relOptCluster -> RelOptCluster.create(planner, relOptCluster.getRexBuilder()));\n+\n+    RelRoot root = tester.convertSqlToRel(sql);\n+\n+    String planBefore = NL + RelOptUtil.toString(root.rel);\n+    getDiffRepos().assertEquals(\"planBefore\", \"${planBefore}\", planBefore);\n+\n+    RuleSet ruleSet =\n+        RuleSets.ofList(\n+            EnumerableRules.ENUMERABLE_SORT_RULE,\n+            EnumerableRules.ENUMERABLE_LIMIT_RULE,\n+            EnumerableRules.ENUMERABLE_LIMIT_SORT_RULE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3MjYyOQ=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2MzExMQ==", "bodyText": "Thanks for your clarification!", "url": "https://github.com/apache/calcite/pull/2109#discussion_r472663111", "createdAt": "2020-08-19T04:05:30Z", "author": {"login": "amaliujia"}, "path": "core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java", "diffHunk": "@@ -1039,6 +1039,54 @@ private void basePushFilterPastAggWithGroupingSets(boolean unchanged) {\n         .check();\n   }\n \n+  /**\n+   * Test if limit and sort are replaced by a limit sort.\n+   * Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-3920\">[CALCITE-3920]\n+   * Improve ORDER BY computation in Enumerable convention by exploiting LIMIT</a>.\n+   */\n+  @Test void testLimitSort() {\n+    final String sql = \"select mgr from sales.emp\\n\"\n+        + \"union select mgr from sales.emp\\n\"\n+        + \"order by mgr limit 10 offset 5\";\n+\n+    VolcanoPlanner planner = new VolcanoPlanner(null, null);\n+    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n+    RelOptUtil.registerDefaultRules(planner, false, false);\n+    planner.addRule(EnumerableRules.ENUMERABLE_LIMIT_SORT_RULE);\n+\n+    Tester tester = createTester().withDecorrelation(true)\n+        .withClusterFactory(\n+            relOptCluster -> RelOptCluster.create(planner, relOptCluster.getRexBuilder()));\n+\n+    RelRoot root = tester.convertSqlToRel(sql);\n+\n+    String planBefore = NL + RelOptUtil.toString(root.rel);\n+    getDiffRepos().assertEquals(\"planBefore\", \"${planBefore}\", planBefore);\n+\n+    RuleSet ruleSet =\n+        RuleSets.ofList(\n+            EnumerableRules.ENUMERABLE_SORT_RULE,\n+            EnumerableRules.ENUMERABLE_LIMIT_RULE,\n+            EnumerableRules.ENUMERABLE_LIMIT_SORT_RULE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3MjYyOQ=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY2ODg4OnYy", "diffSide": "RIGHT", "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowODozNlrOHAfX7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNTo1NFrOHCxFMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjA3Nw==", "bodyText": "Does it make sense to name this function as topNOrderBy or topNSortLimit?", "url": "https://github.com/apache/calcite/pull/2109#discussion_r470276077", "createdAt": "2020-08-13T22:08:36Z", "author": {"login": "amaliujia"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -2624,6 +2624,86 @@ public static boolean isMergeJoinSupported(JoinType joinType) {\n     };\n   }\n \n+\n+  /**\n+   * A sort implementation optimized for a sort with a fetch size (LIMIT).\n+   * @param offset how many rows are skipped from the sorted output.\n+   *               Must be greater than or equal to 0.\n+   * @param fetch how many rows are retrieved. Must be greater than 0.\n+   */\n+  public static <TSource, TKey> Enumerable<TSource> orderBy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNjU1OQ==", "bodyText": "Might make sense, I'm not yet familiar how the Calcite project chooses names.", "url": "https://github.com/apache/calcite/pull/2109#discussion_r472136559", "createdAt": "2020-08-18T12:23:29Z", "author": {"login": "thomasrebele"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -2624,6 +2624,86 @@ public static boolean isMergeJoinSupported(JoinType joinType) {\n     };\n   }\n \n+\n+  /**\n+   * A sort implementation optimized for a sort with a fetch size (LIMIT).\n+   * @param offset how many rows are skipped from the sorted output.\n+   *               Must be greater than or equal to 0.\n+   * @param fetch how many rows are retrieved. Must be greater than 0.\n+   */\n+  public static <TSource, TKey> Enumerable<TSource> orderBy(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjA3Nw=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MTQ0Nw==", "bodyText": "Since the limit parameter is \"optional\" (it can take Integer.MAX_VALUE if fetch is null in EnumerableLimitSort, I think the current method name is ok.", "url": "https://github.com/apache/calcite/pull/2109#discussion_r472141447", "createdAt": "2020-08-18T12:32:08Z", "author": {"login": "rubenada"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -2624,6 +2624,86 @@ public static boolean isMergeJoinSupported(JoinType joinType) {\n     };\n   }\n \n+\n+  /**\n+   * A sort implementation optimized for a sort with a fetch size (LIMIT).\n+   * @param offset how many rows are skipped from the sorted output.\n+   *               Must be greater than or equal to 0.\n+   * @param fetch how many rows are retrieved. Must be greater than 0.\n+   */\n+  public static <TSource, TKey> Enumerable<TSource> orderBy(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjA3Nw=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2MzM0Ng==", "bodyText": "I see. That makes sense.", "url": "https://github.com/apache/calcite/pull/2109#discussion_r472663346", "createdAt": "2020-08-19T04:05:54Z", "author": {"login": "amaliujia"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -2624,6 +2624,86 @@ public static boolean isMergeJoinSupported(JoinType joinType) {\n     };\n   }\n \n+\n+  /**\n+   * A sort implementation optimized for a sort with a fetch size (LIMIT).\n+   * @param offset how many rows are skipped from the sorted output.\n+   *               Must be greater than or equal to 0.\n+   * @param fetch how many rows are retrieved. Must be greater than 0.\n+   */\n+  public static <TSource, TKey> Enumerable<TSource> orderBy(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjA3Nw=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODY3MTMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSort.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowOTo0MFrOHAfZjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoyNjozMVrOHCRCOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjQ5Mg==", "bodyText": "Why not use max?", "url": "https://github.com/apache/calcite/pull/2109#discussion_r470276492", "createdAt": "2020-08-13T22:09:40Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSort.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.adapter.enumerable;\n+\n+import org.apache.calcite.linq4j.tree.BlockBuilder;\n+import org.apache.calcite.linq4j.tree.Expression;\n+import org.apache.calcite.linq4j.tree.Expressions;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelOptCost;\n+import org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.calcite.plan.RelTraitSet;\n+import org.apache.calcite.rel.RelCollation;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Sort;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.calcite.rex.RexLiteral;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.util.BuiltInMethod;\n+import org.apache.calcite.util.Pair;\n+\n+import static org.apache.calcite.adapter.enumerable.EnumerableLimit.getExpression;\n+\n+/**\n+ * Implementation of {@link org.apache.calcite.rel.core.Sort} in\n+ * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}.\n+ * It optimizes sorts that have a limit and an optional offset.\n+ */\n+public class EnumerableLimitSort extends Sort implements EnumerableRel {\n+\n+  /**\n+   * Creates an EnumerableLimitSort.\n+   *\n+   * <p>Use {@link #create} unless you know what you're doing.\n+   */\n+  public EnumerableLimitSort(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      RelCollation collation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    super(cluster, traitSet, input, collation, offset, fetch);\n+    assert this.getConvention() instanceof EnumerableConvention;\n+    assert this.getConvention() == input.getConvention();\n+  }\n+\n+  /** Creates an EnumerableLimitSort. */\n+  public static EnumerableLimitSort create(\n+      RelNode input,\n+      RelCollation collation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    final RelOptCluster cluster = input.getCluster();\n+    final RelTraitSet traitSet = cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(\n+        collation);\n+    return new EnumerableLimitSort(cluster, traitSet, input, collation, offset, fetch);\n+  }\n+\n+  @Override public EnumerableLimitSort copy(\n+      RelTraitSet traitSet,\n+      RelNode newInput,\n+      RelCollation newCollation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    return new EnumerableLimitSort(\n+        this.getCluster(),\n+        traitSet,\n+        newInput,\n+        newCollation,\n+        offset,\n+        fetch);\n+  }\n+\n+  @Override public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n+    final BlockBuilder builder = new BlockBuilder();\n+    final EnumerableRel child = (EnumerableRel) this.getInput();\n+    final Result result = implementor.visitChild(this, 0, child, pref);\n+    final PhysType physType = PhysTypeImpl.of(\n+        implementor.getTypeFactory(),\n+        this.getRowType(),\n+        result.format);\n+    Expression childExp = builder.append(\"child\", result.block);\n+\n+    PhysType inputPhysType = result.physType;\n+    final Pair<Expression, Expression> pair =\n+        inputPhysType.generateCollationKey(this.collation.getFieldCollations());\n+\n+    Expression fetchVal;\n+    if (this.fetch == null) {\n+      fetchVal = Expressions.constant(Integer.valueOf(Integer.MAX_VALUE));\n+    } else {\n+      fetchVal = getExpression(this.fetch);\n+    }\n+\n+    Expression offsetVal = this.offset == null ? Expressions.constant(Integer.valueOf(0))\n+        : getExpression(this.offset);\n+\n+    builder.add(\n+        Expressions.return_(\n+            null, Expressions.call(\n+                BuiltInMethod.ORDER_BY_WITH_FETCH_AND_OFFSET.method, Expressions.list(\n+                    childExp,\n+                    builder.append(\"keySelector\", pair.left))\n+                    .appendIfNotNull(builder.appendIfNotNull(\"comparator\", pair.right))\n+                    .appendIfNotNull(\n+                        builder.appendIfNotNull(\"offset\",\n+                            Expressions.constant(offsetVal)))\n+                    .appendIfNotNull(\n+                        builder.appendIfNotNull(\"fetch\",\n+                            Expressions.constant(fetchVal)))\n+            )));\n+    return implementor.result(physType, builder.toBlock());\n+  }\n+\n+  @Override public RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {\n+    final double rowCount = mq.getRowCount(this.input).doubleValue();\n+    double toSort = this.fetch == null ? rowCount : RexLiteral.intValue(this.fetch);\n+    if (this.offset != null) {\n+      toSort += RexLiteral.intValue(this.offset);\n+    }\n+    toSort = Math.min(rowCount, toSort);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzODI5OQ==", "bodyText": "If there are only rowCount rows, we only need to sort that many. E.g., if fetch is 100, but there are only 10 rows in the input, we only need to do lookups for the 10 rows.", "url": "https://github.com/apache/calcite/pull/2109#discussion_r472138299", "createdAt": "2020-08-18T12:26:31Z", "author": {"login": "thomasrebele"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitSort.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.adapter.enumerable;\n+\n+import org.apache.calcite.linq4j.tree.BlockBuilder;\n+import org.apache.calcite.linq4j.tree.Expression;\n+import org.apache.calcite.linq4j.tree.Expressions;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelOptCost;\n+import org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.calcite.plan.RelTraitSet;\n+import org.apache.calcite.rel.RelCollation;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Sort;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.calcite.rex.RexLiteral;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.util.BuiltInMethod;\n+import org.apache.calcite.util.Pair;\n+\n+import static org.apache.calcite.adapter.enumerable.EnumerableLimit.getExpression;\n+\n+/**\n+ * Implementation of {@link org.apache.calcite.rel.core.Sort} in\n+ * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}.\n+ * It optimizes sorts that have a limit and an optional offset.\n+ */\n+public class EnumerableLimitSort extends Sort implements EnumerableRel {\n+\n+  /**\n+   * Creates an EnumerableLimitSort.\n+   *\n+   * <p>Use {@link #create} unless you know what you're doing.\n+   */\n+  public EnumerableLimitSort(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      RelCollation collation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    super(cluster, traitSet, input, collation, offset, fetch);\n+    assert this.getConvention() instanceof EnumerableConvention;\n+    assert this.getConvention() == input.getConvention();\n+  }\n+\n+  /** Creates an EnumerableLimitSort. */\n+  public static EnumerableLimitSort create(\n+      RelNode input,\n+      RelCollation collation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    final RelOptCluster cluster = input.getCluster();\n+    final RelTraitSet traitSet = cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(\n+        collation);\n+    return new EnumerableLimitSort(cluster, traitSet, input, collation, offset, fetch);\n+  }\n+\n+  @Override public EnumerableLimitSort copy(\n+      RelTraitSet traitSet,\n+      RelNode newInput,\n+      RelCollation newCollation,\n+      RexNode offset,\n+      RexNode fetch) {\n+    return new EnumerableLimitSort(\n+        this.getCluster(),\n+        traitSet,\n+        newInput,\n+        newCollation,\n+        offset,\n+        fetch);\n+  }\n+\n+  @Override public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n+    final BlockBuilder builder = new BlockBuilder();\n+    final EnumerableRel child = (EnumerableRel) this.getInput();\n+    final Result result = implementor.visitChild(this, 0, child, pref);\n+    final PhysType physType = PhysTypeImpl.of(\n+        implementor.getTypeFactory(),\n+        this.getRowType(),\n+        result.format);\n+    Expression childExp = builder.append(\"child\", result.block);\n+\n+    PhysType inputPhysType = result.physType;\n+    final Pair<Expression, Expression> pair =\n+        inputPhysType.generateCollationKey(this.collation.getFieldCollations());\n+\n+    Expression fetchVal;\n+    if (this.fetch == null) {\n+      fetchVal = Expressions.constant(Integer.valueOf(Integer.MAX_VALUE));\n+    } else {\n+      fetchVal = getExpression(this.fetch);\n+    }\n+\n+    Expression offsetVal = this.offset == null ? Expressions.constant(Integer.valueOf(0))\n+        : getExpression(this.offset);\n+\n+    builder.add(\n+        Expressions.return_(\n+            null, Expressions.call(\n+                BuiltInMethod.ORDER_BY_WITH_FETCH_AND_OFFSET.method, Expressions.list(\n+                    childExp,\n+                    builder.append(\"keySelector\", pair.left))\n+                    .appendIfNotNull(builder.appendIfNotNull(\"comparator\", pair.right))\n+                    .appendIfNotNull(\n+                        builder.appendIfNotNull(\"offset\",\n+                            Expressions.constant(offsetVal)))\n+                    .appendIfNotNull(\n+                        builder.appendIfNotNull(\"fetch\",\n+                            Expressions.constant(fetchVal)))\n+            )));\n+    return implementor.result(physType, builder.toBlock());\n+  }\n+\n+  @Override public RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {\n+    final double rowCount = mq.getRowCount(this.input).doubleValue();\n+    double toSort = this.fetch == null ? rowCount : RexLiteral.intValue(this.fetch);\n+    if (this.offset != null) {\n+      toSort += RexLiteral.intValue(this.offset);\n+    }\n+    toSort = Math.min(rowCount, toSort);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjQ5Mg=="}, "originalCommit": {"oid": "a777643adb49dcaf3c31066ec40e08a55e529c72"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 113, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}