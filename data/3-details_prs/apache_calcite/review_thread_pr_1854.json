{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MDAzNzMx", "number": 1854, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNjo0Nzo0NFrODnWXUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzoxMzoyNlrODomsww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTg3NDczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNjo0Nzo0NFrOF1S31A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNjo0Nzo0NFrOF1S31A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQyODA1Mg==", "bodyText": "I think this logic could be applicable in other unknownAs modes\nIn case you want to do this only in UAF (this case) you may go further...and get into nulls.\nHowever I think that it would be better to move this out from this method into a method which is run for all simplifyAnd-s and do it generally .", "url": "https://github.com/apache/calcite/pull/1854#discussion_r391428052", "createdAt": "2020-03-12T06:47:44Z", "author": {"login": "kgyrtkirk"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1568,10 +1568,33 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     final Comparison comparison = Comparison.of(e);\n     // Check for comparison with null values\n     if (comparison == null\n-        || comparison.kind == SqlKind.NOT_EQUALS\n         || comparison.literal.getValue() == null) {\n       return e;\n     }\n+\n+    // Given x=5 and x is not null, x!=5 can be simplified to false.\n+    if (comparison.kind == SqlKind.NOT_EQUALS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684605bc29cd6790d5ee68175f57614aaad47886"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODcyNDI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzo1Mjo1NFrOF3NIsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyMTo0NVrOF3R2bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzMTIxOQ==", "bodyText": "remove this line", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393431219", "createdAt": "2020-03-17T03:52:54Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null\n+          || !predicate.ref.equals(comparison.ref)) {\n+        continue;\n+      }\n+\n+      // Given x=5 and x is not nullable, x!=5 can be simplified to false and x!=3 can be\n+      // simplified to true.\n+      // Given x=5 and x is nullable, x!=5 can be simplified to 'null and x is null' and x!=3 can\n+      // be simplified to 'null or x is not null'.\n+      final RelDataType type = comparison.ref.getType();\n+      final boolean nullable = type.isNullable();\n+      if (predicate.literal.equals(comparison.literal)) {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.AND,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(false);\n+      } else {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.OR,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(true);\n+      }\n+    }\n+    return e;\n+  }\n+\n   private <C extends Comparable<C>> RexNode simplifyUsingPredicates(RexNode e,\n       Class<C> clazz) {\n     if (predicates.pulledUpPredicates.isEmpty()) {\n       return e;\n     }\n+\n+    if (e.getKind() == SqlKind.NOT_EQUALS) {\n+      return simplifyNotEqual(e);\n+    }\n+\n     final Comparison comparison = Comparison.of(e);\n     // Check for comparison with null values\n     if (comparison == null\n-        || comparison.kind == SqlKind.NOT_EQUALS\n         || comparison.literal.getValue() == null) {\n       return e;\n     }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ab36fdd61b4848a17831f9543fb824743ba19c1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwODQ2MQ==", "bodyText": "Ok.", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393508461", "createdAt": "2020-03-17T08:21:45Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null\n+          || !predicate.ref.equals(comparison.ref)) {\n+        continue;\n+      }\n+\n+      // Given x=5 and x is not nullable, x!=5 can be simplified to false and x!=3 can be\n+      // simplified to true.\n+      // Given x=5 and x is nullable, x!=5 can be simplified to 'null and x is null' and x!=3 can\n+      // be simplified to 'null or x is not null'.\n+      final RelDataType type = comparison.ref.getType();\n+      final boolean nullable = type.isNullable();\n+      if (predicate.literal.equals(comparison.literal)) {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.AND,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(false);\n+      } else {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.OR,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(true);\n+      }\n+    }\n+    return e;\n+  }\n+\n   private <C extends Comparable<C>> RexNode simplifyUsingPredicates(RexNode e,\n       Class<C> clazz) {\n     if (predicates.pulledUpPredicates.isEmpty()) {\n       return e;\n     }\n+\n+    if (e.getKind() == SqlKind.NOT_EQUALS) {\n+      return simplifyNotEqual(e);\n+    }\n+\n     final Comparison comparison = Comparison.of(e);\n     // Check for comparison with null values\n     if (comparison == null\n-        || comparison.kind == SqlKind.NOT_EQUALS\n         || comparison.literal.getValue() == null) {\n       return e;\n     }\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzMTIxOQ=="}, "originalCommit": {"oid": "7ab36fdd61b4848a17831f9543fb824743ba19c1"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODk5MDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNjo0OToyOVrOF3PsvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToxMDowNlrOF3TaYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3MzIxMw==", "bodyText": "this can't happen. Please see the Comparison constructor\nplease remove:\n\nthe literal.getValue() == null checks\nand also the \"check for comparision with null values\" comment; which (after the removal) will be entirely misleading\n\nNote that: in case the literal is null; comparisions are simplifed because they are Strong.", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393473213", "createdAt": "2020-03-17T06:49:29Z", "author": {"login": "kgyrtkirk"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ab36fdd61b4848a17831f9543fb824743ba19c1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzNDA1MQ==", "bodyText": "Done.", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393534051", "createdAt": "2020-03-17T09:10:06Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3MzIxMw=="}, "originalCommit": {"oid": "7ab36fdd61b4848a17831f9543fb824743ba19c1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODk5ODI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNjo1Mzo0MlrOF3PxuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToxMDoxNlrOF3Tatg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3NDQ4OQ==", "bodyText": "please remove this \"nullable\" boolean - and let other parts of RexSimplify do their tricks; please note that the UnknownAs.FALSE case is not yet handled; I know in case of a second invokation of RexSimplify; that will be done - but ideally; RexSimplify should not be able to do any more simplification on a result of a previously simplification.\nconstruct the AND ; and call simplifyUnknownAs(andNode, unknownAs)", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393474489", "createdAt": "2020-03-17T06:53:42Z", "author": {"login": "kgyrtkirk"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null\n+          || !predicate.ref.equals(comparison.ref)) {\n+        continue;\n+      }\n+\n+      // Given x=5 and x is not nullable, x!=5 can be simplified to false and x!=3 can be\n+      // simplified to true.\n+      // Given x=5 and x is nullable, x!=5 can be simplified to 'null and x is null' and x!=3 can\n+      // be simplified to 'null or x is not null'.\n+      final RelDataType type = comparison.ref.getType();\n+      final boolean nullable = type.isNullable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ab36fdd61b4848a17831f9543fb824743ba19c1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwMTUwMQ==", "bodyText": "Makes sense.", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393501501", "createdAt": "2020-03-17T08:06:55Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null\n+          || !predicate.ref.equals(comparison.ref)) {\n+        continue;\n+      }\n+\n+      // Given x=5 and x is not nullable, x!=5 can be simplified to false and x!=3 can be\n+      // simplified to true.\n+      // Given x=5 and x is nullable, x!=5 can be simplified to 'null and x is null' and x!=3 can\n+      // be simplified to 'null or x is not null'.\n+      final RelDataType type = comparison.ref.getType();\n+      final boolean nullable = type.isNullable();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3NDQ4OQ=="}, "originalCommit": {"oid": "7ab36fdd61b4848a17831f9543fb824743ba19c1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzNDEzNA==", "bodyText": "Done.", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393534134", "createdAt": "2020-03-17T09:10:16Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null\n+          || !predicate.ref.equals(comparison.ref)) {\n+        continue;\n+      }\n+\n+      // Given x=5 and x is not nullable, x!=5 can be simplified to false and x!=3 can be\n+      // simplified to true.\n+      // Given x=5 and x is nullable, x!=5 can be simplified to 'null and x is null' and x!=3 can\n+      // be simplified to 'null or x is not null'.\n+      final RelDataType type = comparison.ref.getType();\n+      final boolean nullable = type.isNullable();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3NDQ4OQ=="}, "originalCommit": {"oid": "7ab36fdd61b4848a17831f9543fb824743ba19c1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTAzNjgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNzoxMzoyNlrOF3QKXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODowNzoxMlrOF3Rbug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MDc5Ng==", "bodyText": "I believe the current simplification logic could be extended to also handle the case when we have an a!=0 predicate; and we have an a!=0 node to simplify.\nthis wasn't working before this patch; so it's entirely optional...", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393480796", "createdAt": "2020-03-17T07:13:26Z", "author": {"login": "kgyrtkirk"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null\n+          || !predicate.ref.equals(comparison.ref)) {\n+        continue;\n+      }\n+\n+      // Given x=5 and x is not nullable, x!=5 can be simplified to false and x!=3 can be\n+      // simplified to true.\n+      // Given x=5 and x is nullable, x!=5 can be simplified to 'null and x is null' and x!=3 can\n+      // be simplified to 'null or x is not null'.\n+      final RelDataType type = comparison.ref.getType();\n+      final boolean nullable = type.isNullable();\n+      if (predicate.literal.equals(comparison.literal)) {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.AND,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(false);\n+      } else {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.OR,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(true);\n+      }\n+    }\n+    return e;\n+  }\n+\n   private <C extends Comparable<C>> RexNode simplifyUsingPredicates(RexNode e,\n       Class<C> clazz) {\n     if (predicates.pulledUpPredicates.isEmpty()) {\n       return e;\n     }\n+\n+    if (e.getKind() == SqlKind.NOT_EQUALS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ab36fdd61b4848a17831f9543fb824743ba19c1"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwMTYyNg==", "bodyText": "I am a little busy recently. So I prefer next pr to do it when I am free.", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393501626", "createdAt": "2020-03-17T08:07:12Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null\n+          || !predicate.ref.equals(comparison.ref)) {\n+        continue;\n+      }\n+\n+      // Given x=5 and x is not nullable, x!=5 can be simplified to false and x!=3 can be\n+      // simplified to true.\n+      // Given x=5 and x is nullable, x!=5 can be simplified to 'null and x is null' and x!=3 can\n+      // be simplified to 'null or x is not null'.\n+      final RelDataType type = comparison.ref.getType();\n+      final boolean nullable = type.isNullable();\n+      if (predicate.literal.equals(comparison.literal)) {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.AND,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(false);\n+      } else {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.OR,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(true);\n+      }\n+    }\n+    return e;\n+  }\n+\n   private <C extends Comparable<C>> RexNode simplifyUsingPredicates(RexNode e,\n       Class<C> clazz) {\n     if (predicates.pulledUpPredicates.isEmpty()) {\n       return e;\n     }\n+\n+    if (e.getKind() == SqlKind.NOT_EQUALS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MDc5Ng=="}, "originalCommit": {"oid": "7ab36fdd61b4848a17831f9543fb824743ba19c1"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 335, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}