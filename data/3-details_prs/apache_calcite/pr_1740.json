{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMDcxNjQz", "number": 1740, "title": "[CALCITE-3713] Remove column names from Project#digest", "bodyText": "See https://issues.apache.org/jira/browse/CALCITE-3713\nProjects that differ with column names only are equivalent,\nso the planning space can be reduced if field names\ndo not participate in relation matching.\nFor instance, Project(input=rel#1,empid=$0) and Project(input=rel#1,deptno=$0) are equivalent under the new digest approach.", "createdAt": "2020-01-09T17:20:48Z", "url": "https://github.com/apache/calcite/pull/1740", "merged": true, "mergeCommit": {"oid": "3092159056280ab1f3c284394ed99ae8211b3f6d"}, "closed": true, "closedAt": "2020-01-10T08:34:43Z", "author": {"login": "vlsi"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4uiNMgBqjI5MzYwNDQyOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb46M9MABqjI5Mzc2NzM3MTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2dc1507fb04d71c31d8e7a32b07ec840b3281533", "author": {"user": {"login": "vlsi", "name": "Vladimir Sitnikov"}}, "url": "https://github.com/apache/calcite/commit/2dc1507fb04d71c31d8e7a32b07ec840b3281533", "committedDate": "2020-01-09T17:19:11Z", "message": "[CALCITE-3713] Remove column names from Project#digest\n\nProjects that differ with column names only are equivalent,\nso the planning space can be reduced if field names\ndo not participate in relation matching.\n\nFor instance, Project(input=rel#1,empid=$0) and\nProject(input=rel#1,deptno=$0) are equivalent"}, "afterCommit": {"oid": "43e583e8a04c65342afbf3abacec44ff40caba30", "author": {"user": {"login": "vlsi", "name": "Vladimir Sitnikov"}}, "url": "https://github.com/apache/calcite/commit/43e583e8a04c65342afbf3abacec44ff40caba30", "committedDate": "2020-01-09T18:47:11Z", "message": "[CALCITE-3713] Remove column names from Project#digest\n\nProjects that differ with column names only are equivalent,\nso the planning space can be reduced if field names\ndo not participate in relation matching.\n\nFor instance, Project(input=rel#1,empid=$0) and\nProject(input=rel#1,deptno=$0) are equivalent"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5d35fd0fbbcbe1ea9b112173e69ddf5f061bc66", "author": {"user": {"login": "vlsi", "name": "Vladimir Sitnikov"}}, "url": "https://github.com/apache/calcite/commit/c5d35fd0fbbcbe1ea9b112173e69ddf5f061bc66", "committedDate": "2020-01-09T21:50:54Z", "message": "Refine ColumnUniqueness for Subset(input=Sort)"}, "afterCommit": {"oid": "df79468c2e30285b0c7c83223cedb8d25969cf9f", "author": {"user": {"login": "vlsi", "name": "Vladimir Sitnikov"}}, "url": "https://github.com/apache/calcite/commit/df79468c2e30285b0c7c83223cedb8d25969cf9f", "committedDate": "2020-01-09T21:56:47Z", "message": "Refine ColumnUniqueness for Subset(input=Sort)\n\nIt fixes StackOverflowError in FoodmartTest.test query id=5871\nThe optimizer generated dummy Project(Aggregate(Sort(Project(Aggregate(Sort(...\nchains, and it was not able to see that extra aggregation adds nothing.\n\nNow it figures out that columns already are unique, so it sees\nthat an extra Aggregate adds nothing."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwOTUwMDI5", "url": "https://github.com/apache/calcite/pull/1740#pullrequestreview-340950029", "createdAt": "2020-01-10T04:33:54Z", "commit": {"oid": "df79468c2e30285b0c7c83223cedb8d25969cf9f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNDozMzo1NFrOFcKEDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNDozMzo1NFrOFcKEDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2OTMyNA==", "bodyText": "I'm confused with the code snippet\n        && (kind == kind.reverse()\n        || !op.getName().equals(kind.sql)\n        || sb.length() < 2 || sb.charAt(sb.length() - 1) != '(')", "url": "https://github.com/apache/calcite/pull/1740#discussion_r365069324", "createdAt": "2020-01-10T04:33:54Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rex/RexCall.java", "diffHunk": "@@ -127,11 +137,83 @@ protected final StringBuilder appendOperands(StringBuilder sb) {\n           includeType = RexDigestIncludeType.NO_TYPE;\n         }\n       }\n-      sb.append(((RexLiteral) operand).computeDigest(includeType));\n+      operandDigests.add(((RexLiteral) operand).computeDigest(includeType));\n+    }\n+    int totalLength = (operandDigests.size() - 1) * 2; // commas\n+    for (String s : operandDigests) {\n+      totalLength += s.length();\n+    }\n+    sb.ensureCapacity(sb.length() + totalLength);\n+    sortOperandsIfNeeded(sb, operands, operandDigests);\n+    for (int i = 0; i < operandDigests.size(); i++) {\n+      String op = operandDigests.get(i);\n+      if (i != 0) {\n+        sb.append(\", \");\n+      }\n+      sb.append(op);\n     }\n     return sb;\n   }\n \n+  private void sortOperandsIfNeeded(StringBuilder sb,\n+      List<RexNode> operands, List<String> operandDigests) {\n+    if (operands.isEmpty() || !needNormalize()) {\n+      return;\n+    }\n+    final SqlKind kind = op.getKind();\n+    if (SqlKind.SYMMETRICAL_SAME_ARG_TYPE.contains(kind)) {\n+      final RelDataType firstType = operands.get(0).getType();\n+      for (int i = 1; i < operands.size(); i++) {\n+        if (!equalSansNullability(firstType, operands.get(i).getType())) {\n+          // Arguments have different type, thus they must not be sorted\n+          return;\n+        }\n+      }\n+      // fall through: order arguments below\n+    } else if (!SqlKind.SYMMETRICAL.contains(kind)\n+        && (kind == kind.reverse()\n+        || !op.getName().equals(kind.sql)\n+        || sb.length() < 2 || sb.charAt(sb.length() - 1) != '(')) {\n+      // The operations have to be either symmetrical or reversible", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df79468c2e30285b0c7c83223cedb8d25969cf9f"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwOTUwOTA3", "url": "https://github.com/apache/calcite/pull/1740#pullrequestreview-340950907", "createdAt": "2020-01-10T04:39:20Z", "commit": {"oid": "df79468c2e30285b0c7c83223cedb8d25969cf9f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNDozOToyMVrOFcKG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNDozOToyMVrOFcKG7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA3MDA2MQ==", "bodyText": "We can make a sort if:\n\nThere is no decimals in the PLUS\nThere is no INTERVALs in TIMES", "url": "https://github.com/apache/calcite/pull/1740#discussion_r365070061", "createdAt": "2020-01-10T04:39:21Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rex/RexCall.java", "diffHunk": "@@ -127,11 +137,83 @@ protected final StringBuilder appendOperands(StringBuilder sb) {\n           includeType = RexDigestIncludeType.NO_TYPE;\n         }\n       }\n-      sb.append(((RexLiteral) operand).computeDigest(includeType));\n+      operandDigests.add(((RexLiteral) operand).computeDigest(includeType));\n+    }\n+    int totalLength = (operandDigests.size() - 1) * 2; // commas\n+    for (String s : operandDigests) {\n+      totalLength += s.length();\n+    }\n+    sb.ensureCapacity(sb.length() + totalLength);\n+    sortOperandsIfNeeded(sb, operands, operandDigests);\n+    for (int i = 0; i < operandDigests.size(); i++) {\n+      String op = operandDigests.get(i);\n+      if (i != 0) {\n+        sb.append(\", \");\n+      }\n+      sb.append(op);\n     }\n     return sb;\n   }\n \n+  private void sortOperandsIfNeeded(StringBuilder sb,\n+      List<RexNode> operands, List<String> operandDigests) {\n+    if (operands.isEmpty() || !needNormalize()) {\n+      return;\n+    }\n+    final SqlKind kind = op.getKind();\n+    if (SqlKind.SYMMETRICAL_SAME_ARG_TYPE.contains(kind)) {\n+      final RelDataType firstType = operands.get(0).getType();\n+      for (int i = 1; i < operands.size(); i++) {\n+        if (!equalSansNullability(firstType, operands.get(i).getType())) {\n+          // Arguments have different type, thus they must not be sorted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df79468c2e30285b0c7c83223cedb8d25969cf9f"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e9b4da0573ec73d332d4e65fb7fd30491b4318d", "author": {"user": {"login": "vlsi", "name": "Vladimir Sitnikov"}}, "url": "https://github.com/apache/calcite/commit/1e9b4da0573ec73d332d4e65fb7fd30491b4318d", "committedDate": "2020-01-10T06:59:49Z", "message": "[CALCITE-3713] Remove column names from Project#digest\n\nProjects that differ with column names only are equivalent,\nso the planning space can be reduced if field names\ndo not participate in relation matching.\n\nFor instance, Project(input=rel#1,empid=$0) and\nProject(input=rel#1,deptno=$0) are equivalent"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df79468c2e30285b0c7c83223cedb8d25969cf9f", "author": {"user": {"login": "vlsi", "name": "Vladimir Sitnikov"}}, "url": "https://github.com/apache/calcite/commit/df79468c2e30285b0c7c83223cedb8d25969cf9f", "committedDate": "2020-01-09T21:56:47Z", "message": "Refine ColumnUniqueness for Subset(input=Sort)\n\nIt fixes StackOverflowError in FoodmartTest.test query id=5871\nThe optimizer generated dummy Project(Aggregate(Sort(Project(Aggregate(Sort(...\nchains, and it was not able to see that extra aggregation adds nothing.\n\nNow it figures out that columns already are unique, so it sees\nthat an extra Aggregate adds nothing."}, "afterCommit": {"oid": "4bfc291326ad08ba4203d8e1bb43f2db1ad90b1a", "author": {"user": {"login": "vlsi", "name": "Vladimir Sitnikov"}}, "url": "https://github.com/apache/calcite/commit/4bfc291326ad08ba4203d8e1bb43f2db1ad90b1a", "committedDate": "2020-01-10T06:59:49Z", "message": "Refine ColumnUniqueness for Subset(input=Sort)\n\nIt fixes StackOverflowError in FoodmartTest.test query id=5871\nThe optimizer generated dummy Project(Aggregate(Sort(Project(Aggregate(Sort(...\nchains, and it was not able to see that extra aggregation adds nothing.\n\nNow it figures out that columns already are unique, so it sees\nthat an extra Aggregate adds nothing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3092159056280ab1f3c284394ed99ae8211b3f6d", "author": {"user": {"login": "vlsi", "name": "Vladimir Sitnikov"}}, "url": "https://github.com/apache/calcite/commit/3092159056280ab1f3c284394ed99ae8211b3f6d", "committedDate": "2020-01-10T08:23:13Z", "message": "Refine ColumnUniqueness for Subset(input=Sort)\n\nIt fixes StackOverflowError in FoodmartTest.test query id=5871\nThe optimizer generated dummy Project(Aggregate(Sort(Project(Aggregate(Sort(...\nchains, and it was not able to see that extra aggregation adds nothing.\n\nNow it figures out that columns already are unique, so it sees\nthat an extra Aggregate adds nothing."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4bfc291326ad08ba4203d8e1bb43f2db1ad90b1a", "author": {"user": {"login": "vlsi", "name": "Vladimir Sitnikov"}}, "url": "https://github.com/apache/calcite/commit/4bfc291326ad08ba4203d8e1bb43f2db1ad90b1a", "committedDate": "2020-01-10T06:59:49Z", "message": "Refine ColumnUniqueness for Subset(input=Sort)\n\nIt fixes StackOverflowError in FoodmartTest.test query id=5871\nThe optimizer generated dummy Project(Aggregate(Sort(Project(Aggregate(Sort(...\nchains, and it was not able to see that extra aggregation adds nothing.\n\nNow it figures out that columns already are unique, so it sees\nthat an extra Aggregate adds nothing."}, "afterCommit": {"oid": "3092159056280ab1f3c284394ed99ae8211b3f6d", "author": {"user": {"login": "vlsi", "name": "Vladimir Sitnikov"}}, "url": "https://github.com/apache/calcite/commit/3092159056280ab1f3c284394ed99ae8211b3f6d", "committedDate": "2020-01-10T08:23:13Z", "message": "Refine ColumnUniqueness for Subset(input=Sort)\n\nIt fixes StackOverflowError in FoodmartTest.test query id=5871\nThe optimizer generated dummy Project(Aggregate(Sort(Project(Aggregate(Sort(...\nchains, and it was not able to see that extra aggregation adds nothing.\n\nNow it figures out that columns already are unique, so it sees\nthat an extra Aggregate adds nothing."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4451, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}