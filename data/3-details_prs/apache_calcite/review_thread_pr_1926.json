{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NjU4ODU5", "number": 1926, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzo0MjozMVrODzh4ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzo0MjozMVrODzh4ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzU5MTM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzo0MjozMVrOGIB4pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyMTozMlrOGIE3Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MjY3Nw==", "bodyText": "Can wet fix the hashCode function in TableScan directly?", "url": "https://github.com/apache/calcite/pull/1926#discussion_r411072677", "createdAt": "2020-04-20T03:42:31Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java", "diffHunk": "@@ -36,11 +36,12 @@ public static MutableScan of(TableScan scan) {\n   @Override public boolean equals(Object obj) {\n     return obj == this\n         || obj instanceof MutableScan\n-        && rel.equals(((MutableScan) obj).rel);\n+        && rel.getTable().getQualifiedName().equals(((MutableScan) obj).rel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb150b25236c0f3426d2dd3e05f2d33632a7896"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwNzkyMA==", "bodyText": "Hi @DonnyZone  Thanks a lot for looking into this !\nThere's a discussion for overriding equals()&hashCode() in https://issues.apache.org/jira/browse/CALCITE-3167\nThe conclusion is to make equals()&hashCode() final in AbstractRelNode  and  have independent mechanisms to define the equality.", "url": "https://github.com/apache/calcite/pull/1926#discussion_r411107920", "createdAt": "2020-04-20T05:45:49Z", "author": {"login": "jinxing64"}, "path": "core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java", "diffHunk": "@@ -36,11 +36,12 @@ public static MutableScan of(TableScan scan) {\n   @Override public boolean equals(Object obj) {\n     return obj == this\n         || obj instanceof MutableScan\n-        && rel.equals(((MutableScan) obj).rel);\n+        && rel.getTable().getQualifiedName().equals(((MutableScan) obj).rel", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MjY3Nw=="}, "originalCommit": {"oid": "bfb150b25236c0f3426d2dd3e05f2d33632a7896"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyMTQyNg==", "bodyText": "@jinxing64 Thanks for clarification. LGTM!", "url": "https://github.com/apache/calcite/pull/1926#discussion_r411121426", "createdAt": "2020-04-20T06:21:32Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java", "diffHunk": "@@ -36,11 +36,12 @@ public static MutableScan of(TableScan scan) {\n   @Override public boolean equals(Object obj) {\n     return obj == this\n         || obj instanceof MutableScan\n-        && rel.equals(((MutableScan) obj).rel);\n+        && rel.getTable().getQualifiedName().equals(((MutableScan) obj).rel", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MjY3Nw=="}, "originalCommit": {"oid": "bfb150b25236c0f3426d2dd3e05f2d33632a7896"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 261, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}