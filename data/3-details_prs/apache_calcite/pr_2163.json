{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwODY2MDk0", "number": 2163, "title": "[CALCITE-4273] Support get expression lineage for Calc", "bodyText": "", "createdAt": "2020-09-22T11:14:48Z", "url": "https://github.com/apache/calcite/pull/2163", "merged": true, "mergeCommit": {"oid": "2e9edae7fc57ab9c9c7c097008724ac99a1791a3"}, "closed": true, "closedAt": "2020-11-04T00:19:23Z", "author": {"login": "yanlin-Lynn"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLWN08gFqTQ5MzM1OTQ0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY1eNbgFqTUyMjI5ODM5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzU5NDQz", "url": "https://github.com/apache/calcite/pull/2163#pullrequestreview-493359443", "createdAt": "2020-09-22T11:23:24Z", "commit": {"oid": "04d864777c5eb8090cf61849616501d70b6f2e3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyMzoyNFrOHV1bKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyMzoyNFrOHV1bKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1NzQ1MQ==", "bodyText": "Could you please elaborate on what does explainCalc mean?", "url": "https://github.com/apache/calcite/pull/2163#discussion_r492657451", "createdAt": "2020-09-22T11:23:24Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -3607,6 +3607,25 @@ public int size() {\n     return relBuilder.build();\n   }\n \n+  /** Explain filtering condition and projections for Calc. */\n+  public static Pair<RexNode, List<RexNode>> explainCalc(Calc calc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d864777c5eb8090cf61849616501d70b6f2e3a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzY2ODE2", "url": "https://github.com/apache/calcite/pull/2163#pullrequestreview-493366816", "createdAt": "2020-09-22T11:34:50Z", "commit": {"oid": "04d864777c5eb8090cf61849616501d70b6f2e3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTozNDo1MFrOHV1xiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTozNDo1MFrOHV1xiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MzE3Ng==", "bodyText": "I'm afraid it is obscure what is the expected output and why is that expected. Do you think you can convert the expected value to a single string with a corresponding message that clarifies why the value is expected?\nFor instance, when testing planning rules we use full explain plan for comparison rather than adding lots assertions.", "url": "https://github.com/apache/calcite/pull/2163#discussion_r492663176", "createdAt": "2020-09-22T11:34:50Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -2506,6 +2506,30 @@ private void checkPredicates(RelOptCluster cluster, RelOptTable empTable,\n     assertNull(r);\n   }\n \n+  @Test void testExpressionLineageCalc() {\n+    final RelNode rel = convertSql(\"select sal from (\\n\"\n+        + \" select * from emp) \"\n+        + \"where deptno = 10\");\n+    final RelNode tableRel = convertSql(\"select * from emp\");\n+    final HepProgramBuilder programBuilder = HepProgram.builder();\n+    programBuilder.addRuleInstance(CoreRules.PROJECT_TO_CALC);\n+    programBuilder.addRuleInstance(CoreRules.FILTER_TO_CALC);\n+    programBuilder.addRuleInstance(CoreRules.CALC_MERGE);\n+    final HepPlanner planner = new HepPlanner(programBuilder.build());\n+    planner.setRoot(rel);\n+    final RelNode optimizedRel = planner.findBestExp();\n+    final RelMetadataQuery mq = optimizedRel.getCluster().getMetadataQuery();\n+\n+    final RexNode ref = RexInputRef.of(0, optimizedRel.getRowType().getFieldList());\n+    final Set<RexNode> r = mq.getExpressionLineage(optimizedRel, ref);\n+\n+    final String inputRef = RexInputRef.of(5, tableRel.getRowType().getFieldList()).toString();\n+    assertThat(r.size(), is(1));\n+    final String resultString = r.iterator().next().toString();\n+    assertThat(resultString, startsWith(EMP_QNAME.toString()));\n+    assertThat(resultString, endsWith(inputRef));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d864777c5eb8090cf61849616501d70b6f2e3a"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04d864777c5eb8090cf61849616501d70b6f2e3a", "author": {"user": {"login": "yanlin-Lynn", "name": "Wang Yanlin"}}, "url": "https://github.com/apache/calcite/commit/04d864777c5eb8090cf61849616501d70b6f2e3a", "committedDate": "2020-09-22T11:11:28Z", "message": "[CALCITE-4273] Support get expression lineage for Calc"}, "afterCommit": {"oid": "7477c4201b471eefa7fe55244bf20624390f552f", "author": {"user": {"login": "yanlin-Lynn", "name": "Wang Yanlin"}}, "url": "https://github.com/apache/calcite/commit/7477c4201b471eefa7fe55244bf20624390f552f", "committedDate": "2020-10-07T11:08:19Z", "message": "[CALCITE-4273] Support get expression lineage for Calc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7477c4201b471eefa7fe55244bf20624390f552f", "author": {"user": {"login": "yanlin-Lynn", "name": "Wang Yanlin"}}, "url": "https://github.com/apache/calcite/commit/7477c4201b471eefa7fe55244bf20624390f552f", "committedDate": "2020-10-07T11:08:19Z", "message": "[CALCITE-4273] Support get expression lineage for Calc"}, "afterCommit": {"oid": "11db5b80279a375f48a4953eb3122c334f8a7f05", "author": {"user": {"login": "yanlin-Lynn", "name": "Wang Yanlin"}}, "url": "https://github.com/apache/calcite/commit/11db5b80279a375f48a4953eb3122c334f8a7f05", "committedDate": "2020-10-15T06:44:06Z", "message": "[CALCITE-4273] Support get expression lineage for Calc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDQ1NDQ3", "url": "https://github.com/apache/calcite/pull/2163#pullrequestreview-521445447", "createdAt": "2020-11-02T09:11:39Z", "commit": {"oid": "11db5b80279a375f48a4953eb3122c334f8a7f05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxMTozOVrOHr7wEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxMTozOVrOHr7wEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyOTc3OA==", "bodyText": "calcFilterAndProjects  -> calcProjectsAndFilter ? Because projects are the key part.", "url": "https://github.com/apache/calcite/pull/2163#discussion_r515829778", "createdAt": "2020-11-02T09:11:39Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java", "diffHunk": "@@ -407,6 +409,35 @@ protected RelMdExpressionLineage() {}\n     return mq.getExpressionLineage(rel.getInput(), outputExpression);\n   }\n \n+  /**\n+   * Expression lineage from Calc.\n+   */\n+  public Set<RexNode> getExpressionLineage(Calc calc,\n+      RelMetadataQuery mq, RexNode outputExpression) {\n+    final RelNode input = calc.getInput();\n+    final RexBuilder rexBuilder = calc.getCluster().getRexBuilder();\n+    // Extract input fields referenced by expression\n+    final ImmutableBitSet inputFieldsUsed = extractInputRefs(outputExpression);\n+\n+    // Infer column origin expressions for given references\n+    final Map<RexInputRef, Set<RexNode>> mapping = new LinkedHashMap<>();\n+    Pair<ImmutableList<RexNode>, ImmutableList<RexNode>> calcFilterAndProjects =\n+        calc.getProgram().split();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11db5b80279a375f48a4953eb3122c334f8a7f05"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96365f4f4cb12944d5c70fdab827b908ea884ad7", "author": {"user": {"login": "yanlin-Lynn", "name": "Wang Yanlin"}}, "url": "https://github.com/apache/calcite/commit/96365f4f4cb12944d5c70fdab827b908ea884ad7", "committedDate": "2020-11-03T02:53:53Z", "message": "[CALCITE-4273] Support get expression lineage for Calc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11db5b80279a375f48a4953eb3122c334f8a7f05", "author": {"user": {"login": "yanlin-Lynn", "name": "Wang Yanlin"}}, "url": "https://github.com/apache/calcite/commit/11db5b80279a375f48a4953eb3122c334f8a7f05", "committedDate": "2020-10-15T06:44:06Z", "message": "[CALCITE-4273] Support get expression lineage for Calc"}, "afterCommit": {"oid": "96365f4f4cb12944d5c70fdab827b908ea884ad7", "author": {"user": {"login": "yanlin-Lynn", "name": "Wang Yanlin"}}, "url": "https://github.com/apache/calcite/commit/96365f4f4cb12944d5c70fdab827b908ea884ad7", "committedDate": "2020-11-03T02:53:53Z", "message": "[CALCITE-4273] Support get expression lineage for Calc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjk4Mzk5", "url": "https://github.com/apache/calcite/pull/2163#pullrequestreview-522298399", "createdAt": "2020-11-03T09:09:23Z", "commit": {"oid": "96365f4f4cb12944d5c70fdab827b908ea884ad7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2867, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}