{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMzExNDI2", "number": 2095, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNjoyMTo1NFrOEVruTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzozOToxNlrOEV7Y2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTcxOTE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNjoyMTo1NFrOG8k1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo0MjozMVrOG8sUcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3MTMzMA==", "bodyText": "There are many codes in Calcite use assert, should we also eliminate them ?", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466171330", "createdAt": "2020-08-06T06:21:54Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java", "diffHunk": "@@ -78,7 +78,9 @@ protected ReflectiveRelMetadataProvider(\n       ConcurrentMap<Class<RelNode>, UnboundMetadata> map,\n       Class<? extends Metadata> metadataClass0,\n       Multimap<Method, MetadataHandler> handlerMap) {\n-    assert !map.isEmpty() : \"are your methods named wrong?\";\n+    if (map.isEmpty()) {\n+      throw new IllegalArgumentException(\"ReflectiveRelMetadataProvider methods map is empty\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df8c583be124a0b00b3538a7f3c7e6e145ae35b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5MTMwNw==", "bodyText": "No, I think generally assertions are a valid mechanism, but in this particular case in my opinion an exception is safer, for the reasons I mention in the Jira ticket: if assertions are deactivated we will not get later a runtime exception in this scenario, we will just end up silently constructing an invalid, empty ReflectiveRelMetadataProvider; and there is no mechanism in the caller module to verify this situation on its side. Hence this specific change to avoid this situation in 100% of the cases.", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466191307", "createdAt": "2020-08-06T07:10:12Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java", "diffHunk": "@@ -78,7 +78,9 @@ protected ReflectiveRelMetadataProvider(\n       ConcurrentMap<Class<RelNode>, UnboundMetadata> map,\n       Class<? extends Metadata> metadataClass0,\n       Multimap<Method, MetadataHandler> handlerMap) {\n-    assert !map.isEmpty() : \"are your methods named wrong?\";\n+    if (map.isEmpty()) {\n+      throw new IllegalArgumentException(\"ReflectiveRelMetadataProvider methods map is empty\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3MTMzMA=="}, "originalCommit": {"oid": "8df8c583be124a0b00b3538a7f3c7e6e145ae35b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2ODkzOQ==", "bodyText": "No, I think generally assertions are a valid mechanism I'm not convinced by this, we may need to reorganize our assertion usage. Can you log an issue there ?", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466268939", "createdAt": "2020-08-06T09:20:42Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java", "diffHunk": "@@ -78,7 +78,9 @@ protected ReflectiveRelMetadataProvider(\n       ConcurrentMap<Class<RelNode>, UnboundMetadata> map,\n       Class<? extends Metadata> metadataClass0,\n       Multimap<Method, MetadataHandler> handlerMap) {\n-    assert !map.isEmpty() : \"are your methods named wrong?\";\n+    if (map.isEmpty()) {\n+      throw new IllegalArgumentException(\"ReflectiveRelMetadataProvider methods map is empty\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3MTMzMA=="}, "originalCommit": {"oid": "8df8c583be124a0b00b3538a7f3c7e6e145ae35b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5Mzg3NA==", "bodyText": "Ok, @danny0405 . I will merge the current PR and open a separate ticket to discuss / review the general usage of assertions in the code", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466293874", "createdAt": "2020-08-06T09:42:31Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java", "diffHunk": "@@ -78,7 +78,9 @@ protected ReflectiveRelMetadataProvider(\n       ConcurrentMap<Class<RelNode>, UnboundMetadata> map,\n       Class<? extends Metadata> metadataClass0,\n       Multimap<Method, MetadataHandler> handlerMap) {\n-    assert !map.isEmpty() : \"are your methods named wrong?\";\n+    if (map.isEmpty()) {\n+      throw new IllegalArgumentException(\"ReflectiveRelMetadataProvider methods map is empty\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3MTMzMA=="}, "originalCommit": {"oid": "8df8c583be124a0b00b3538a7f3c7e6e145ae35b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDI4NTY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzozOToxNlrOG89s9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzo1Mjo0OVrOG9QMGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3ODY3Nw==", "bodyText": "Sorry I missed your PR.\nWhy not use CheckArgument in Guava?", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466578677", "createdAt": "2020-08-06T17:39:16Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java", "diffHunk": "@@ -78,7 +78,9 @@ protected ReflectiveRelMetadataProvider(\n       ConcurrentMap<Class<RelNode>, UnboundMetadata> map,\n       Class<? extends Metadata> metadataClass0,\n       Multimap<Method, MetadataHandler> handlerMap) {\n-    assert !map.isEmpty() : \"are your methods named wrong?\";\n+    if (map.isEmpty()) {\n+      throw new IllegalArgumentException(\"ReflectiveRelMetadataProvider methods map is empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df8c583be124a0b00b3538a7f3c7e6e145ae35b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTA2OQ==", "bodyText": "Thanks for the feedback @amaliujia , you are right, I am considering open a follow-up PR to change it into Preconditions.checkArgument", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466679069", "createdAt": "2020-08-06T20:51:18Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java", "diffHunk": "@@ -78,7 +78,9 @@ protected ReflectiveRelMetadataProvider(\n       ConcurrentMap<Class<RelNode>, UnboundMetadata> map,\n       Class<? extends Metadata> metadataClass0,\n       Multimap<Method, MetadataHandler> handlerMap) {\n-    assert !map.isEmpty() : \"are your methods named wrong?\";\n+    if (map.isEmpty()) {\n+      throw new IllegalArgumentException(\"ReflectiveRelMetadataProvider methods map is empty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3ODY3Nw=="}, "originalCommit": {"oid": "8df8c583be124a0b00b3538a7f3c7e6e145ae35b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4MTU2MA==", "bodyText": "@amaliujia please check #2100", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466881560", "createdAt": "2020-08-07T07:52:49Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java", "diffHunk": "@@ -78,7 +78,9 @@ protected ReflectiveRelMetadataProvider(\n       ConcurrentMap<Class<RelNode>, UnboundMetadata> map,\n       Class<? extends Metadata> metadataClass0,\n       Multimap<Method, MetadataHandler> handlerMap) {\n-    assert !map.isEmpty() : \"are your methods named wrong?\";\n+    if (map.isEmpty()) {\n+      throw new IllegalArgumentException(\"ReflectiveRelMetadataProvider methods map is empty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3ODY3Nw=="}, "originalCommit": {"oid": "8df8c583be124a0b00b3538a7f3c7e6e145ae35b"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 104, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}