{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1OTIwOTc5", "number": 2031, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDo1ODo1MVrOEHJS1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDo1ODo1MVrOEHJS1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTI3NzY0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/enumerable/EnumerableUncollectTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDo1ODo1MVrOGmX1Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTowNTozOVrOGmYE0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4OTU1MA==", "bodyText": "Should these all really be unordered? I'm not sure what other implementations do, but I would have expected array elements to remain in order (same for the tests below).", "url": "https://github.com/apache/calcite/pull/2031#discussion_r442889550", "createdAt": "2020-06-19T14:58:51Z", "author": {"login": "michaelmior"}, "path": "core/src/test/java/org/apache/calcite/test/enumerable/EnumerableUncollectTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.test.enumerable;\n+\n+import org.apache.calcite.config.CalciteConnectionProperty;\n+import org.apache.calcite.config.Lex;\n+import org.apache.calcite.test.CalciteAssert;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+class EnumerableUncollectTest {\n+\n+  @Test void simpleUnnestArray() {\n+    final String sql = \"select * from UNNEST(array[3, 4]) as T2(y)\";\n+    tester()\n+        .query(sql)\n+        .returnsUnordered(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97bac414ffddf973ae2c1702a148b77edaa00d1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg5MzUyMA==", "bodyText": "If I am not mistaken, our UNNEST implementation keeps the order, however SQL standard says that UNNEST does not guarantee to keep order, that is why the \"WITH ORDINALITY\" exists. This the reason why returnsUnordered is used here.", "url": "https://github.com/apache/calcite/pull/2031#discussion_r442893520", "createdAt": "2020-06-19T15:05:39Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/test/enumerable/EnumerableUncollectTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.test.enumerable;\n+\n+import org.apache.calcite.config.CalciteConnectionProperty;\n+import org.apache.calcite.config.Lex;\n+import org.apache.calcite.test.CalciteAssert;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+class EnumerableUncollectTest {\n+\n+  @Test void simpleUnnestArray() {\n+    final String sql = \"select * from UNNEST(array[3, 4]) as T2(y)\";\n+    tester()\n+        .query(sql)\n+        .returnsUnordered(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4OTU1MA=="}, "originalCommit": {"oid": "d97bac414ffddf973ae2c1702a148b77edaa00d1"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 203, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}