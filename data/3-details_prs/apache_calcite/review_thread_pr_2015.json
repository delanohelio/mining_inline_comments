{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNzg0MTc4", "number": 2015, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzo1MzozMVrOEElFvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDozODoyOVrOEEtowg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjM3NDM5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/sql2rel/RelFieldTrimmerTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzo1MzozMVrOGiScYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDoyMjoyOFrOGiXYBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwNjk0Nw==", "bodyText": "Great fix, can we also add a test case for the aggregate ? thanks for that ~", "url": "https://github.com/apache/calcite/pull/2015#discussion_r438606947", "createdAt": "2020-06-11T07:53:31Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/sql2rel/RelFieldTrimmerTest.java", "diffHunk": "@@ -183,4 +187,44 @@\n     assertThat(trimmed, hasTree(expected));\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-4055\">[CALCITE-4055]\n+   * RelFieldTrimmer loses hints</a>. */\n+  @Test void testJoinWithHints() {\n+    final RelHint noHashJoinHint = RelHint.builder(\"NO_HASH_JOIN\").build();\n+    final RelBuilder builder = RelBuilder.create(config().build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d000e06dc760ac85995e0de412ec146cf63282f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwODQwNw==", "bodyText": "We can also promote the RelBuilder#hints like i said in the JIRA.", "url": "https://github.com/apache/calcite/pull/2015#discussion_r438608407", "createdAt": "2020-06-11T07:56:21Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/sql2rel/RelFieldTrimmerTest.java", "diffHunk": "@@ -183,4 +187,44 @@\n     assertThat(trimmed, hasTree(expected));\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-4055\">[CALCITE-4055]\n+   * RelFieldTrimmer loses hints</a>. */\n+  @Test void testJoinWithHints() {\n+    final RelHint noHashJoinHint = RelHint.builder(\"NO_HASH_JOIN\").build();\n+    final RelBuilder builder = RelBuilder.create(config().build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwNjk0Nw=="}, "originalCommit": {"oid": "5d000e06dc760ac85995e0de412ec146cf63282f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY1MzU5Mg==", "bodyText": "Thanks, I will add more tests.\nWhat do you mean by \"promoting\" RelBuilder#hints ?", "url": "https://github.com/apache/calcite/pull/2015#discussion_r438653592", "createdAt": "2020-06-11T09:18:41Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/sql2rel/RelFieldTrimmerTest.java", "diffHunk": "@@ -183,4 +187,44 @@\n     assertThat(trimmed, hasTree(expected));\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-4055\">[CALCITE-4055]\n+   * RelFieldTrimmer loses hints</a>. */\n+  @Test void testJoinWithHints() {\n+    final RelHint noHashJoinHint = RelHint.builder(\"NO_HASH_JOIN\").build();\n+    final RelBuilder builder = RelBuilder.create(config().build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwNjk0Nw=="}, "originalCommit": {"oid": "5d000e06dc760ac85995e0de412ec146cf63282f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY1NjUyMQ==", "bodyText": "Disregard my question, I already saw what you mean \"if the passed in hints is empty, just returns the builder early\". Ok, I will do that.", "url": "https://github.com/apache/calcite/pull/2015#discussion_r438656521", "createdAt": "2020-06-11T09:24:01Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/sql2rel/RelFieldTrimmerTest.java", "diffHunk": "@@ -183,4 +187,44 @@\n     assertThat(trimmed, hasTree(expected));\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-4055\">[CALCITE-4055]\n+   * RelFieldTrimmer loses hints</a>. */\n+  @Test void testJoinWithHints() {\n+    final RelHint noHashJoinHint = RelHint.builder(\"NO_HASH_JOIN\").build();\n+    final RelBuilder builder = RelBuilder.create(config().build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwNjk0Nw=="}, "originalCommit": {"oid": "5d000e06dc760ac85995e0de412ec146cf63282f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4Nzc1MQ==", "bodyText": "changes committed, please check.", "url": "https://github.com/apache/calcite/pull/2015#discussion_r438687751", "createdAt": "2020-06-11T10:22:28Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/sql2rel/RelFieldTrimmerTest.java", "diffHunk": "@@ -183,4 +187,44 @@\n     assertThat(trimmed, hasTree(expected));\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-4055\">[CALCITE-4055]\n+   * RelFieldTrimmer loses hints</a>. */\n+  @Test void testJoinWithHints() {\n+    final RelHint noHashJoinHint = RelHint.builder(\"NO_HASH_JOIN\").build();\n+    final RelBuilder builder = RelBuilder.create(config().build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwNjk0Nw=="}, "originalCommit": {"oid": "5d000e06dc760ac85995e0de412ec146cf63282f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzc3NDc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDozODoyOVrOGigYvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMzo0MzozNFrOGi2E0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNTM4OQ==", "bodyText": "How about we change the param originalRelNode  to just hints which seems more straight-forward.", "url": "https://github.com/apache/calcite/pull/2015#discussion_r438835389", "createdAt": "2020-06-11T14:38:29Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java", "diffHunk": "@@ -417,17 +417,30 @@ public TrimResult trimFields(\n \n     relBuilder.push(newInput);\n     relBuilder.project(newProjects, newRowType.getFieldNames());\n-    return result(relBuilder.build(), mapping);\n+    final RelNode newProject = RelOptUtil.propagateRelHints(project, relBuilder.build());\n+    return result(newProject, mapping);\n   }\n \n   /** Creates a project with a dummy column, to protect the parts of the system\n    * that cannot handle a relational expression with no columns.\n    *\n    * @param fieldCount Number of fields in the original relational expression\n    * @param input Trimmed input\n-   * @return Dummy project, or null if no dummy is required\n+   * @return Dummy project\n    */\n   protected TrimResult dummyProject(int fieldCount, RelNode input) {\n+    return dummyProject(fieldCount, input, null);\n+  }\n+\n+  /** Creates a project with a dummy column, to protect the parts of the system\n+   * that cannot handle a relational expression with no columns.\n+   *\n+   * @param fieldCount Number of fields in the original relational expression\n+   * @param input Trimmed input\n+   * @param originalRelNode Source RelNode for hint propagation (or null if no propagation needed)\n+   * @return Dummy project\n+   */\n+  protected TrimResult dummyProject(int fieldCount, RelNode input, RelNode originalRelNode) {\n     final RelOptCluster cluster = input.getCluster();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba25b12d75b87670bdee1f3fab4941aaeac6e99"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2MTA4OA==", "bodyText": "uhmm... I thought we required the RelNode (not just the hints) in order to use RelOptUtil#propagateRelHints(RelNode originalRel, RelNode equiv)", "url": "https://github.com/apache/calcite/pull/2015#discussion_r438861088", "createdAt": "2020-06-11T15:15:14Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java", "diffHunk": "@@ -417,17 +417,30 @@ public TrimResult trimFields(\n \n     relBuilder.push(newInput);\n     relBuilder.project(newProjects, newRowType.getFieldNames());\n-    return result(relBuilder.build(), mapping);\n+    final RelNode newProject = RelOptUtil.propagateRelHints(project, relBuilder.build());\n+    return result(newProject, mapping);\n   }\n \n   /** Creates a project with a dummy column, to protect the parts of the system\n    * that cannot handle a relational expression with no columns.\n    *\n    * @param fieldCount Number of fields in the original relational expression\n    * @param input Trimmed input\n-   * @return Dummy project, or null if no dummy is required\n+   * @return Dummy project\n    */\n   protected TrimResult dummyProject(int fieldCount, RelNode input) {\n+    return dummyProject(fieldCount, input, null);\n+  }\n+\n+  /** Creates a project with a dummy column, to protect the parts of the system\n+   * that cannot handle a relational expression with no columns.\n+   *\n+   * @param fieldCount Number of fields in the original relational expression\n+   * @param input Trimmed input\n+   * @param originalRelNode Source RelNode for hint propagation (or null if no propagation needed)\n+   * @return Dummy project\n+   */\n+  protected TrimResult dummyProject(int fieldCount, RelNode input, RelNode originalRelNode) {\n     final RelOptCluster cluster = input.getCluster();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNTM4OQ=="}, "originalCommit": {"oid": "bba25b12d75b87670bdee1f3fab4941aaeac6e99"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE5MDczNw==", "bodyText": "Okey, that's a reason.", "url": "https://github.com/apache/calcite/pull/2015#discussion_r439190737", "createdAt": "2020-06-12T03:43:34Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java", "diffHunk": "@@ -417,17 +417,30 @@ public TrimResult trimFields(\n \n     relBuilder.push(newInput);\n     relBuilder.project(newProjects, newRowType.getFieldNames());\n-    return result(relBuilder.build(), mapping);\n+    final RelNode newProject = RelOptUtil.propagateRelHints(project, relBuilder.build());\n+    return result(newProject, mapping);\n   }\n \n   /** Creates a project with a dummy column, to protect the parts of the system\n    * that cannot handle a relational expression with no columns.\n    *\n    * @param fieldCount Number of fields in the original relational expression\n    * @param input Trimmed input\n-   * @return Dummy project, or null if no dummy is required\n+   * @return Dummy project\n    */\n   protected TrimResult dummyProject(int fieldCount, RelNode input) {\n+    return dummyProject(fieldCount, input, null);\n+  }\n+\n+  /** Creates a project with a dummy column, to protect the parts of the system\n+   * that cannot handle a relational expression with no columns.\n+   *\n+   * @param fieldCount Number of fields in the original relational expression\n+   * @param input Trimmed input\n+   * @param originalRelNode Source RelNode for hint propagation (or null if no propagation needed)\n+   * @return Dummy project\n+   */\n+  protected TrimResult dummyProject(int fieldCount, RelNode input, RelNode originalRelNode) {\n     final RelOptCluster cluster = input.getCluster();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNTM4OQ=="}, "originalCommit": {"oid": "bba25b12d75b87670bdee1f3fab4941aaeac6e99"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 186, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}