{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0OTk2MzIw", "number": 2027, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0OTo0M1rOEF-VrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODo1MTowMFrOEIq8KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Njk5NjkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0OTo0M1rOGkfF8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0OToyOVrOGlEKHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTM0Nw==", "bodyText": "minor thing: now that this variable is a boolean, maybe it should be renamed (changeCount -> change ?)", "url": "https://github.com/apache/calcite/pull/2027#discussion_r440911347", "createdAt": "2020-06-16T14:49:43Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -56,42 +54,40 @@ public int size() {\n   public static <V, E extends DefaultEdge> FrozenGraph<V, E> makeImmutable(\n       DirectedGraph<V, E> graph) {\n     DefaultDirectedGraph<V, E> graph1 = (DefaultDirectedGraph<V, E>) graph;\n-    Map<Pair<V, V>, List<V>> shortestPaths = new HashMap<>();\n+    Map<Pair<V, V>, int[]> shortestDistances = new HashMap<>();\n     for (DefaultDirectedGraph.VertexInfo<V, E> arc\n         : graph1.vertexMap.values()) {\n       for (E edge : arc.outEdges) {\n         final V source = graph1.source(edge);\n         final V target = graph1.target(edge);\n-        shortestPaths.put(Pair.of(source, target),\n-            ImmutableList.of(source, target));\n+        shortestDistances.put(Pair.of(source, target), new int[] {1});\n       }\n     }\n     while (true) {\n       // Take a copy of the map's keys to avoid\n       // ConcurrentModificationExceptions.\n       final List<Pair<V, V>> previous =\n-          ImmutableList.copyOf(shortestPaths.keySet());\n-      int changeCount = 0;\n+          ImmutableList.copyOf(shortestDistances.keySet());\n+      boolean changeCount = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38cc79a2ad376725a22c88cf62acb5598dac6db9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxODYyMw==", "bodyText": "Revised. Thanks for your kind reminder.", "url": "https://github.com/apache/calcite/pull/2027#discussion_r441518623", "createdAt": "2020-06-17T12:49:29Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -56,42 +54,40 @@ public int size() {\n   public static <V, E extends DefaultEdge> FrozenGraph<V, E> makeImmutable(\n       DirectedGraph<V, E> graph) {\n     DefaultDirectedGraph<V, E> graph1 = (DefaultDirectedGraph<V, E>) graph;\n-    Map<Pair<V, V>, List<V>> shortestPaths = new HashMap<>();\n+    Map<Pair<V, V>, int[]> shortestDistances = new HashMap<>();\n     for (DefaultDirectedGraph.VertexInfo<V, E> arc\n         : graph1.vertexMap.values()) {\n       for (E edge : arc.outEdges) {\n         final V source = graph1.source(edge);\n         final V target = graph1.target(edge);\n-        shortestPaths.put(Pair.of(source, target),\n-            ImmutableList.of(source, target));\n+        shortestDistances.put(Pair.of(source, target), new int[] {1});\n       }\n     }\n     while (true) {\n       // Take a copy of the map's keys to avoid\n       // ConcurrentModificationExceptions.\n       final List<Pair<V, V>> previous =\n-          ImmutableList.copyOf(shortestPaths.keySet());\n-      int changeCount = 0;\n+          ImmutableList.copyOf(shortestDistances.keySet());\n+      boolean changeCount = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTM0Nw=="}, "originalCommit": {"oid": "38cc79a2ad376725a22c88cf62acb5598dac6db9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODQ5OTg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozNzoxM1rOGkuEQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoyMTo1NVrOGlitdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjY3NA==", "bodyText": "Can you also fix the getPaths() to return shortest paths first? This is to make sure we choose the shortest path during convert.", "url": "https://github.com/apache/calcite/pull/2027#discussion_r441156674", "createdAt": "2020-06-16T21:37:13Z", "author": {"login": "xndai"}, "path": "core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java", "diffHunk": "@@ -234,10 +234,10 @@ private ConversionData getConversionData(RelOptPlanner planner) {\n       return pathMap;\n     }\n \n-    public List<Convention> getShortestPath(\n+    public int getShortestDistance(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38cc79a2ad376725a22c88cf62acb5598dac6db9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxODM5OQ==", "bodyText": "IMO, it would be an overkill to call getPaths() only to get the shortest path.\nTo support this scenario, I have restored the getShortestPath API, and implement it with BFS. It should be more efficient than the Dijkstra and Floyd algorihtms.", "url": "https://github.com/apache/calcite/pull/2027#discussion_r441518399", "createdAt": "2020-06-17T12:49:07Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java", "diffHunk": "@@ -234,10 +234,10 @@ private ConversionData getConversionData(RelOptPlanner planner) {\n       return pathMap;\n     }\n \n-    public List<Convention> getShortestPath(\n+    public int getShortestDistance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjY3NA=="}, "originalCommit": {"oid": "38cc79a2ad376725a22c88cf62acb5598dac6db9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMzM2NA==", "bodyText": "IMHO this is not the ideal approach, now we would be re-computing everything time something (shortest path) that was previously computed only once and returned in O(1).\nIf we take a few steps back, I think it is clear that we require both pieces of information (shortesPath & distance), to be provided ASAP from FrozenGraph. Then why not just pre-computing both in Graphs#makeImmutable and storing both of them in FrozenGraph, so that we guarantee that getShortestPath & getShortestDistance are executed in O(1)?\nI think we could keep track of shortestPath and distance in Graphs#makeImmutable, somehow combining the old approach with the newly proposed approach, either keeping two maps:\nMap<Pair<V, V>, List<V>> shortestPaths\nMap<Pair<V, V>, int[]> shortestDistances\n\nOr a single map with the combination of both as value:\nMap<Pair<V, V>, Pair<List<V>, Integer>> shortestPathsAndDistances\n\nThen we would pass this information as a parameter for FrozeGraph constructor, and we would have shortesPath & distance pre-computed from the beginning.\nI'm not sure if what I say makes sense or it is an overkill. What do you guys think?", "url": "https://github.com/apache/calcite/pull/2027#discussion_r441533364", "createdAt": "2020-06-17T13:12:33Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java", "diffHunk": "@@ -234,10 +234,10 @@ private ConversionData getConversionData(RelOptPlanner planner) {\n       return pathMap;\n     }\n \n-    public List<Convention> getShortestPath(\n+    public int getShortestDistance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjY3NA=="}, "originalCommit": {"oid": "38cc79a2ad376725a22c88cf62acb5598dac6db9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY4MTAzNg==", "bodyText": "@liyafan82 I am not saying getPaths() to return shortest paths. What I mean is you should put shortest path at the front of list, so during convert() we always choose the shortest converted path if possible. This only requires a sort after generating all possible path.\n@rubenada I don't think we need to cache shortest path. This is only one time used and there's no benefit to cache it.", "url": "https://github.com/apache/calcite/pull/2027#discussion_r441681036", "createdAt": "2020-06-17T16:40:46Z", "author": {"login": "xndai"}, "path": "core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java", "diffHunk": "@@ -234,10 +234,10 @@ private ConversionData getConversionData(RelOptPlanner planner) {\n       return pathMap;\n     }\n \n-    public List<Convention> getShortestPath(\n+    public int getShortestDistance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjY3NA=="}, "originalCommit": {"oid": "38cc79a2ad376725a22c88cf62acb5598dac6db9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxOTE5MQ==", "bodyText": "@xndai I have revised the getPaths() method accordingly. Thank you.\n@rubenada Thanks a lot for your suggestion. I tend to agree with @xndai. If getting shortest paths is not a frequently used operation, there is no need to store all pairs of shortest paths. Here, we preserve the getShortestPath API, mainly for the sake of backward compatibility.", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442019191", "createdAt": "2020-06-18T07:21:55Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java", "diffHunk": "@@ -234,10 +234,10 @@ private ConversionData getConversionData(RelOptPlanner planner) {\n       return pathMap;\n     }\n \n-    public List<Convention> getShortestPath(\n+    public int getShortestDistance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjY3NA=="}, "originalCommit": {"oid": "38cc79a2ad376725a22c88cf62acb5598dac6db9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Mzg5MzQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoyOTo0N1rOGli9SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTozOTo1M1rOGlnsFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzI0MQ==", "bodyText": "I think we can just remove this method. Nobody is using it anymore.", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442023241", "createdAt": "2020-06-18T07:29:47Z", "author": {"login": "xndai"}, "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -134,7 +135,44 @@ public int size() {\n       if (from.equals(to)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8054aeedb88524f6e2464feaf7aa3f341a5781"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwMDc1Ng==", "bodyText": "Removed. Maybe we can add it back some time in the future, if we find a requirement for it.", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442100756", "createdAt": "2020-06-18T09:39:53Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -134,7 +135,44 @@ public int size() {\n       if (from.equals(to)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzI0MQ=="}, "originalCommit": {"oid": "8d8054aeedb88524f6e2464feaf7aa3f341a5781"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Mzg5NDQ4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzozMDowN1rOGli97A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo0MDoyMFrOGlntGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzQwNA==", "bodyText": "where are the tests for getShortestDistance()?", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442023404", "createdAt": "2020-06-18T07:30:07Z", "author": {"login": "xndai"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -66,7 +66,7 @@\n     assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n     assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n     assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n-    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n+    assertEquals(\"[[A, B, D], [A, B, C, D]]\", paths(g, \"A\", \"D\").toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8054aeedb88524f6e2464feaf7aa3f341a5781"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwMTAxOA==", "bodyText": "We have DirectedGraphTest#testDistance", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442101018", "createdAt": "2020-06-18T09:40:20Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -66,7 +66,7 @@\n     assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n     assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n     assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n-    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n+    assertEquals(\"[[A, B, D], [A, B, C, D]]\", paths(g, \"A\", \"D\").toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzQwNA=="}, "originalCommit": {"oid": "8d8054aeedb88524f6e2464feaf7aa3f341a5781"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTI3MzQ0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODo1MDoyNFrOGoxa-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo0NTozOVrOGqKm_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNTk0Nw==", "bodyText": "This seems a regression, I think we should put somewhere (getPaths? findPaths?) that if (from.equals(to)) the empty list is a valid path (as it happened previously in the old getShortestPath method).", "url": "https://github.com/apache/calcite/pull/2027#discussion_r445405947", "createdAt": "2020-06-25T08:50:24Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -64,14 +64,21 @@\n     g.addEdge(\"B\", \"D\");\n     assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n     assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n-    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n+    assertEquals(\"[D, C, D]\", shortestPath(g, \"D\", \"D\").toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDQ0Mg==", "bodyText": "Sounds reasonable. I have revised the code to include the empty path to itself.\nBTW, the empty path from node D to itself should be denoted \"[D]\"? as it helps to maintain the relation:\npathLength == path.size() - 1", "url": "https://github.com/apache/calcite/pull/2027#discussion_r446590442", "createdAt": "2020-06-28T02:21:59Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -64,14 +64,21 @@\n     g.addEdge(\"B\", \"D\");\n     assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n     assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n-    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n+    assertEquals(\"[D, C, D]\", shortestPath(g, \"D\", \"D\").toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNTk0Nw=="}, "originalCommit": {"oid": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2NzE5Ng==", "bodyText": "Ok.", "url": "https://github.com/apache/calcite/pull/2027#discussion_r446867196", "createdAt": "2020-06-29T08:45:39Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -64,14 +64,21 @@\n     g.addEdge(\"B\", \"D\");\n     assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n     assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n-    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n+    assertEquals(\"[D, C, D]\", shortestPath(g, \"D\", \"D\").toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNTk0Nw=="}, "originalCommit": {"oid": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTI3NTkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODo1MTowMFrOGoxclQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo0MToxMVrOGqKclg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNjM1Nw==", "bodyText": "minor: I'd use \"increasing order\" instead of \"non-decreasing order\"", "url": "https://github.com/apache/calcite/pull/2027#discussion_r445406357", "createdAt": "2020-06-25T08:51:00Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -102,41 +99,28 @@ public int size() {\n    */\n   public static class FrozenGraph<V, E extends DefaultEdge> {\n     private final DefaultDirectedGraph<V, E> graph;\n-    private final Map<Pair<V, V>, List<V>> shortestPaths;\n+    private final Map<Pair<V, V>, int[]> shortestDistances;\n \n     /** Creates a frozen graph as a copy of another graph. */\n     FrozenGraph(DefaultDirectedGraph<V, E> graph,\n-        Map<Pair<V, V>, List<V>> shortestPaths) {\n+        Map<Pair<V, V>, int[]> shortestDistances) {\n       this.graph = graph;\n-      this.shortestPaths = shortestPaths;\n+      this.shortestDistances = shortestDistances;\n     }\n \n     /**\n-     * Returns an iterator of all paths between two nodes, shortest first.\n+     * Returns an iterator of all paths between two nodes,\n+     * in non-decreasing order of path lengths.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcxMjYzMg==", "bodyText": "+1", "url": "https://github.com/apache/calcite/pull/2027#discussion_r445712632", "createdAt": "2020-06-25T17:12:53Z", "author": {"login": "xndai"}, "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -102,41 +99,28 @@ public int size() {\n    */\n   public static class FrozenGraph<V, E extends DefaultEdge> {\n     private final DefaultDirectedGraph<V, E> graph;\n-    private final Map<Pair<V, V>, List<V>> shortestPaths;\n+    private final Map<Pair<V, V>, int[]> shortestDistances;\n \n     /** Creates a frozen graph as a copy of another graph. */\n     FrozenGraph(DefaultDirectedGraph<V, E> graph,\n-        Map<Pair<V, V>, List<V>> shortestPaths) {\n+        Map<Pair<V, V>, int[]> shortestDistances) {\n       this.graph = graph;\n-      this.shortestPaths = shortestPaths;\n+      this.shortestDistances = shortestDistances;\n     }\n \n     /**\n-     * Returns an iterator of all paths between two nodes, shortest first.\n+     * Returns an iterator of all paths between two nodes,\n+     * in non-decreasing order of path lengths.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNjM1Nw=="}, "originalCommit": {"oid": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDcwMQ==", "bodyText": "Thanks a lot for your careful review.\nIt seems there is a minor difference between increasing and non-decreasing order. A sequence is said to be in increasing order, if\na0 < a1 < ... < an\n\nIt is said to be in non-decreasing order, if\na0 <= a1 <= ... <= an\n\nFor paths between two nodes in a graph, it is possible that there are multiple paths with the same length. So the sequence of path lengths should be in non-decreasing order. What do you think", "url": "https://github.com/apache/calcite/pull/2027#discussion_r446590701", "createdAt": "2020-06-28T02:26:16Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -102,41 +99,28 @@ public int size() {\n    */\n   public static class FrozenGraph<V, E extends DefaultEdge> {\n     private final DefaultDirectedGraph<V, E> graph;\n-    private final Map<Pair<V, V>, List<V>> shortestPaths;\n+    private final Map<Pair<V, V>, int[]> shortestDistances;\n \n     /** Creates a frozen graph as a copy of another graph. */\n     FrozenGraph(DefaultDirectedGraph<V, E> graph,\n-        Map<Pair<V, V>, List<V>> shortestPaths) {\n+        Map<Pair<V, V>, int[]> shortestDistances) {\n       this.graph = graph;\n-      this.shortestPaths = shortestPaths;\n+      this.shortestDistances = shortestDistances;\n     }\n \n     /**\n-     * Returns an iterator of all paths between two nodes, shortest first.\n+     * Returns an iterator of all paths between two nodes,\n+     * in non-decreasing order of path lengths.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNjM1Nw=="}, "originalCommit": {"oid": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2NDUzNA==", "bodyText": "@liyafan82 you're right, thanks for the clarification.", "url": "https://github.com/apache/calcite/pull/2027#discussion_r446864534", "createdAt": "2020-06-29T08:41:11Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -102,41 +99,28 @@ public int size() {\n    */\n   public static class FrozenGraph<V, E extends DefaultEdge> {\n     private final DefaultDirectedGraph<V, E> graph;\n-    private final Map<Pair<V, V>, List<V>> shortestPaths;\n+    private final Map<Pair<V, V>, int[]> shortestDistances;\n \n     /** Creates a frozen graph as a copy of another graph. */\n     FrozenGraph(DefaultDirectedGraph<V, E> graph,\n-        Map<Pair<V, V>, List<V>> shortestPaths) {\n+        Map<Pair<V, V>, int[]> shortestDistances) {\n       this.graph = graph;\n-      this.shortestPaths = shortestPaths;\n+      this.shortestDistances = shortestDistances;\n     }\n \n     /**\n-     * Returns an iterator of all paths between two nodes, shortest first.\n+     * Returns an iterator of all paths between two nodes,\n+     * in non-decreasing order of path lengths.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNjM1Nw=="}, "originalCommit": {"oid": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 201, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}