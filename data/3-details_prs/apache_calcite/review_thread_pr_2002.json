{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3Njk0NTIz", "number": 2002, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0Nzo0OFrOECizdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0Nzo0OFrOECizdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTAyODM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0Nzo0OFrOGfEEaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo1ODowOFrOGfEddA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNTcwNw==", "bodyText": "LOL. \ud83d\ude1d\nI remembered I created that JIRA but not immediately create a pull request, because I had to come up with a test case.\nThe code change looks good to me, but I think we'd better add a test case. :)", "url": "https://github.com/apache/calcite/pull/2002#discussion_r435225707", "createdAt": "2020-06-04T12:47:48Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java", "diffHunk": "@@ -145,6 +145,12 @@ public static RelNode swap(Join join, boolean swapOuterJoins,\n         .build();\n   }\n \n+  public boolean matches(RelOptRuleCall call) {\n+    Join join = call.rel(0);\n+    // SEMI and ANTI join cannot be swapped.\n+    return join.getJoinType().projectsRight();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec78b740a955d949de7c5c2fca29e572420edac"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMjExNg==", "bodyText": "You're right. I will create a test case.", "url": "https://github.com/apache/calcite/pull/2002#discussion_r435232116", "createdAt": "2020-06-04T12:58:08Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java", "diffHunk": "@@ -145,6 +145,12 @@ public static RelNode swap(Join join, boolean swapOuterJoins,\n         .build();\n   }\n \n+  public boolean matches(RelOptRuleCall call) {\n+    Join join = call.rel(0);\n+    // SEMI and ANTI join cannot be swapped.\n+    return join.getJoinType().projectsRight();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNTcwNw=="}, "originalCommit": {"oid": "7ec78b740a955d949de7c5c2fca29e572420edac"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 165, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}