{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MjQ1NzM3", "number": 2189, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTo0NDo0MlrOEvsOLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMjozMjowN1rOE5PzdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDQzMDUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTo0NDo0MlrOHkz2SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjo1MToxMVrOHmS-pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MDI2NA==", "bodyText": "If derived == null, we would get an NPE here.", "url": "https://github.com/apache/calcite/pull/2189#discussion_r508360264", "createdAt": "2020-10-20T09:44:42Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -351,11 +351,32 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * returns null\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n+    return getColumnOrigin(rel, column, false);\n+  }\n+\n+  /**\n+   * Determines the origin of a column. If the param derived is false, provided the column maps\n+   * to a single column that isn't derived, otherwise the column is derived.\n+   *\n+   * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n+   *\n+   * @param rel the RelNode of the column\n+   * @param column the offset of the column whose origin we are trying to\n+   * determine\n+   * @param derived allow column derived\n+   *\n+   * @return the origin of a column provided it's a simple column; otherwise,\n+   * returns null\n+   */\n+  public RelColumnOrigin getColumnOrigin(RelNode rel, int column, Boolean derived) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n     if (origins == null || origins.size() != 1) {\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n+    if (derived) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd27435d7bc8bc8dca31f0b2624f5ba80d025b66"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkxODg4NA==", "bodyText": "If derived == null, we would get an NPE here.\n\nThanks, update the code.", "url": "https://github.com/apache/calcite/pull/2189#discussion_r509918884", "createdAt": "2020-10-22T06:51:11Z", "author": {"login": "xy2953396112"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -351,11 +351,32 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * returns null\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n+    return getColumnOrigin(rel, column, false);\n+  }\n+\n+  /**\n+   * Determines the origin of a column. If the param derived is false, provided the column maps\n+   * to a single column that isn't derived, otherwise the column is derived.\n+   *\n+   * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n+   *\n+   * @param rel the RelNode of the column\n+   * @param column the offset of the column whose origin we are trying to\n+   * determine\n+   * @param derived allow column derived\n+   *\n+   * @return the origin of a column provided it's a simple column; otherwise,\n+   * returns null\n+   */\n+  public RelColumnOrigin getColumnOrigin(RelNode rel, int column, Boolean derived) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n     if (origins == null || origins.size() != 1) {\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n+    if (derived) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MDI2NA=="}, "originalCommit": {"oid": "fd27435d7bc8bc8dca31f0b2624f5ba80d025b66"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODQxNTU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoxNzoyMFrOHxMu_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoxNzoyMFrOHxMu_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM1MDkxMA==", "bodyText": "I think what you mean is\n\"\nDetermines the origin of a column, allow users to choose whether to include the derived column.\"", "url": "https://github.com/apache/calcite/pull/2189#discussion_r521350910", "createdAt": "2020-11-11T13:17:20Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -351,11 +353,32 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * returns null\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n+    return getColumnOrigin(rel, column, false);\n+  }\n+\n+  /**\n+   * Determines the origin of a column. If the param derived is false, provided the column maps\n+   * to a single column that isn't derived, otherwise the column is derived.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4afd705ff1de6533bd6f049adafb165cf874a978"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTEzMDg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjoyNjoyM1rOHxmwrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyMzozN1rOHx2YQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3NzMyNA==", "bodyText": "Instead of overload the methods, why not return the origin directly, no matter if it is derived.", "url": "https://github.com/apache/calcite/pull/2189#discussion_r521777324", "createdAt": "2020-11-12T02:26:23Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -351,11 +353,32 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * returns null\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n+    return getColumnOrigin(rel, column, false);\n+  }\n+\n+  /**\n+   * Determines the origin of a column. If the param derived is false, provided the column maps\n+   * to a single column that isn't derived, otherwise the column is derived.\n+   *\n+   * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n+   *\n+   * @param rel the RelNode of the column\n+   * @param column the offset of the column whose origin we are trying to\n+   * determine\n+   * @param derived allow column derived\n+   *\n+   * @return the origin of a column provided it's a simple column; otherwise,\n+   * returns null\n+   */\n+  public RelColumnOrigin getColumnOrigin(RelNode rel, int column, Boolean derived) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n     if (origins == null || origins.size() != 1) {\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n+    if (BooleanUtils.isTrue(derived)) {\n+      return origin;\n+    }\n     return origin.isDerived() ? null : origin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4afd705ff1de6533bd6f049adafb165cf874a978"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMzIxOQ==", "bodyText": "you are right. return the origin directly.", "url": "https://github.com/apache/calcite/pull/2189#discussion_r522033219", "createdAt": "2020-11-12T11:23:37Z", "author": {"login": "xy2953396112"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -351,11 +353,32 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * returns null\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n+    return getColumnOrigin(rel, column, false);\n+  }\n+\n+  /**\n+   * Determines the origin of a column. If the param derived is false, provided the column maps\n+   * to a single column that isn't derived, otherwise the column is derived.\n+   *\n+   * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n+   *\n+   * @param rel the RelNode of the column\n+   * @param column the offset of the column whose origin we are trying to\n+   * determine\n+   * @param derived allow column derived\n+   *\n+   * @return the origin of a column provided it's a simple column; otherwise,\n+   * returns null\n+   */\n+  public RelColumnOrigin getColumnOrigin(RelNode rel, int column, Boolean derived) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n     if (origins == null || origins.size() != 1) {\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n+    if (BooleanUtils.isTrue(derived)) {\n+      return origin;\n+    }\n     return origin.isDerived() ? null : origin;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3NzMyNA=="}, "originalCommit": {"oid": "4afd705ff1de6533bd6f049adafb165cf874a978"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzI1NjQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzozMTo0OVrOHx63jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzozMTo0OVrOHx63jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwNjc2Nw==", "bodyText": "The annotation here is in-correct.", "url": "https://github.com/apache/calcite/pull/2189#discussion_r522106767", "createdAt": "2020-11-12T13:31:49Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -338,25 +338,24 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a single\n-   * column that isn't derived.\n+   * Determines the origin of a column, provided the column maps to a origin\n+   * column.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565c5cde3bc12f766a609a2199a21af388d78ef8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzI1OTEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzozMjoyNVrOHx65Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoyNToxNlrOHyUaXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwNzE3OA==", "bodyText": "The doc here does not match with the code.", "url": "https://github.com/apache/calcite/pull/2189#discussion_r522107178", "createdAt": "2020-11-12T13:32:25Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -338,25 +338,24 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a single\n-   * column that isn't derived.\n+   * Determines the origin of a column, provided the column maps to a origin\n+   * column.\n    *\n    * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n    *\n    * @param rel the RelNode of the column\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n+   * @return the origin of a column provided it's a simple column;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565c5cde3bc12f766a609a2199a21af388d78ef8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNTI3OA==", "bodyText": "Thanks for review, update the doc.", "url": "https://github.com/apache/calcite/pull/2189#discussion_r522525278", "createdAt": "2020-11-13T00:25:16Z", "author": {"login": "xy2953396112"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -338,25 +338,24 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a single\n-   * column that isn't derived.\n+   * Determines the origin of a column, provided the column maps to a origin\n+   * column.\n    *\n    * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n    *\n    * @param rel the RelNode of the column\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n+   * @return the origin of a column provided it's a simple column;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwNzE3OA=="}, "originalCommit": {"oid": "565c5cde3bc12f766a609a2199a21af388d78ef8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjEyMzUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTo1NTo0NFrOHyWgEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMjoxMjoyOFrOHzl5Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTUwNA==", "bodyText": "The code that uses this method should also be tweaked, such as the LoptMultiJoin.", "url": "https://github.com/apache/calcite/pull/2189#discussion_r522559504", "createdAt": "2020-11-13T01:55:44Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -338,25 +338,23 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a single\n-   * column that isn't derived.\n+   * Determines the origin of a column.\n    *\n    * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n    *\n    * @param rel the RelNode of the column\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n+   * @return the origin of a column;\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n     if (origins == null || origins.size() != 1) {\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n-    return origin.isDerived() ? null : origin;\n+    return origin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74856a5f06730f09dfaf0623d4d37af88aaa9703"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg2MDMyNw==", "bodyText": "Thanks, Please review the code again.", "url": "https://github.com/apache/calcite/pull/2189#discussion_r523860327", "createdAt": "2020-11-16T02:12:28Z", "author": {"login": "xy2953396112"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -338,25 +338,23 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a single\n-   * column that isn't derived.\n+   * Determines the origin of a column.\n    *\n    * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n    *\n    * @param rel the RelNode of the column\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n+   * @return the origin of a column;\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n     if (origins == null || origins.size() != 1) {\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n-    return origin.isDerived() ? null : origin;\n+    return origin;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTUwNA=="}, "originalCommit": {"oid": "74856a5f06730f09dfaf0623d4d37af88aaa9703"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDYzMjIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMjozMjowN1rOHzmKhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMzowNDowOVrOHzm3HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg2NDcxMQ==", "bodyText": "Remove ;.", "url": "https://github.com/apache/calcite/pull/2189#discussion_r523864711", "createdAt": "2020-11-16T02:32:07Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -338,25 +338,23 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a single\n-   * column that isn't derived.\n+   * Determines the origin of a column.\n    *\n    * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n    *\n    * @param rel the RelNode of the column\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n+   * @return the origin of a column;\n    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802dde0ed961db4c5b311d41c2282b77a89ca80a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg3NjEyNA==", "bodyText": "ok, Thanks", "url": "https://github.com/apache/calcite/pull/2189#discussion_r523876124", "createdAt": "2020-11-16T03:04:09Z", "author": {"login": "xy2953396112"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -338,25 +338,23 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a single\n-   * column that isn't derived.\n+   * Determines the origin of a column.\n    *\n    * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n    *\n    * @param rel the RelNode of the column\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n+   * @return the origin of a column;\n    */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg2NDcxMQ=="}, "originalCommit": {"oid": "802dde0ed961db4c5b311d41c2282b77a89ca80a"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 41, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}