{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNzI1MDEw", "number": 1749, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNTo0MjoyOVrODXYe2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNTo0MjoyOVrODXYe2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODQ0OTU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNTo0MjoyOVrOFcp8NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNjozMjo0MlrOFcqJCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5MTYwNQ==", "bodyText": "Hi @vlsi\nShall we do analogous optimization for rules like ProjectSetOpTransposeRule, AggregateUnionAggregateRule, AggregateUnionTransposeRule. I mean check setOp.all or union.all by operandJ, rather than checking in method of onMatch, thus to save the \"match\" to be added into optimizer queue", "url": "https://github.com/apache/calcite/pull/1749#discussion_r365591605", "createdAt": "2020-01-12T15:42:29Z", "author": {"login": "jinxing64"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java", "diffHunk": "@@ -43,7 +43,9 @@\n    */\n   public UnionToDistinctRule(Class<? extends Union> unionClazz,\n       RelBuilderFactory relBuilderFactory) {\n-    super(operand(unionClazz, any()), relBuilderFactory, null);\n+    super(\n+        operandJ(unionClazz, null, union -> !union.all, any()),\n+        relBuilderFactory, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e387deddb0cce39f5827de8744645286b2cb1d7f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5NDg5MQ==", "bodyText": "That is true: it is better to use operandJ or matches methods to reduce the planning overhead.\nI improved the rules that produced lots of false positives in MaterializedTest, and I have not verified other rules.", "url": "https://github.com/apache/calcite/pull/1749#discussion_r365594891", "createdAt": "2020-01-12T16:32:42Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java", "diffHunk": "@@ -43,7 +43,9 @@\n    */\n   public UnionToDistinctRule(Class<? extends Union> unionClazz,\n       RelBuilderFactory relBuilderFactory) {\n-    super(operand(unionClazz, any()), relBuilderFactory, null);\n+    super(\n+        operandJ(unionClazz, null, union -> !union.all, any()),\n+        relBuilderFactory, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5MTYwNQ=="}, "originalCommit": {"oid": "e387deddb0cce39f5827de8744645286b2cb1d7f"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 362, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}