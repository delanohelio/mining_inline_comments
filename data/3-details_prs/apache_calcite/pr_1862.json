{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDE4OTc3", "number": 1862, "title": "[CALCITE-3864] Supports CONCAT for variable arguments", "bodyText": "Pull request for https://issues.apache.org/jira/browse/CALCITE-3864", "createdAt": "2020-03-19T13:57:16Z", "url": "https://github.com/apache/calcite/pull/1862", "merged": true, "mergeCommit": {"oid": "888dd3a7d20ad04b22434f16d96177b7ca2c28aa"}, "closed": true, "closedAt": "2020-03-27T14:35:01Z", "author": {"login": "wenhuitang"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQhKrWAFqTM3OTYxODA2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRufovgBqjMxNzE4OTgwNTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjE4MDY5", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-379618069", "createdAt": "2020-03-23T16:47:23Z", "commit": {"oid": "8f0a0031e67f5261a38665660a250a122cb92eb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0NzoyNFrOF6ObXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0NzoyNFrOF6ObXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5ODExMQ==", "bodyText": "I noticed that the number of function parameters in different databases is different:\nMysql\nCONCAT(string1,string2, ... );\n\nOracle\nCONCAT(char1, char2)\n\nPostgreSql\nCONCAT(str_1, str_2, ...)", "url": "https://github.com/apache/calcite/pull/1862#discussion_r396598111", "createdAt": "2020-03-23T16:47:24Z", "author": {"login": "XuQianJin-Stars"}, "path": "core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java", "diffHunk": "@@ -460,6 +460,15 @@ public static ByteString concat(ByteString s0, ByteString s1) {\n     return s0.concat(s1);\n   }\n \n+  /** SQL function CONCAT(arg, ...)*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0a0031e67f5261a38665660a250a122cb92eb7"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f0a0031e67f5261a38665660a250a122cb92eb7", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/8f0a0031e67f5261a38665660a250a122cb92eb7", "committedDate": "2020-03-19T13:54:33Z", "message": "[CALCITE-3864] Add Implementation for SqlLibraryOperators.CONCAT_FUNCTION in SqlFunctions and correct the return type inference of SqlLibraryOperators.CONCAT_FUNCTION (Wenhui Tang)"}, "afterCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/689780e87195e6db10f83f22411fe30e36b96443", "committedDate": "2020-03-24T09:52:02Z", "message": "[CALCITE-3864] Add Implementation for SqlLibraryOperators.CONCAT_FUNCTION in SqlFunctions and correct the return type inference of SqlLibraryOperators.CONCAT_FUNCTION (Wenhui Tang)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTY3Mjg4", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-380167288", "createdAt": "2020-03-24T10:15:14Z", "commit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDoxNToxNVrOF6pZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDoxNToxNVrOF6pZRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzOTk0MA==", "bodyText": "oracle CONCAT (char1, char2) only accept how to reflect two parameters?", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397039940", "createdAt": "2020-03-24T10:15:15Z", "author": {"login": "XuQianJin-Stars"}, "path": "core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java", "diffHunk": "@@ -2169,6 +2170,21 @@ protected static Calendar getCalendarNotTooNear(int timeUnit) {\n         \"VARCHAR(33335) NOT NULL\");\n     tester.checkNull(\"x'ff' || cast(null as varbinary)\");\n     tester.checkNull(\" cast(null as ANY) || cast(null as ANY) \");\n+    tester.checkString(\"cast('a' as varchar) || cast('b' as varchar) \"\n+        + \"|| cast('c' as varchar)\", \"abc\", \"VARCHAR NOT NULL\");\n+\n+    final SqlTester tester1 = tester(SqlLibrary.MYSQL);\n+    final SqlTester tester2 = tester(SqlLibrary.POSTGRESQL);\n+    final SqlTester tester3 = tester(SqlLibrary.ORACLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjU4NTM1", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-380258535", "createdAt": "2020-03-24T12:26:00Z", "commit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyNjowMFrOF6t2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyNjowMFrOF6t2xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMzAyOA==", "bodyText": "Please move this piece of code before switch-case block, you can refer to the style in OracleSqlDialect.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397113028", "createdAt": "2020-03-24T12:26:00Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java", "diffHunk": "@@ -208,12 +212,52 @@ public boolean supportsAliasedValues() {\n \n       unparseFloor(writer, call);\n       break;\n-\n     default:\n+      if (call.getOperator() == SqlStdOperatorTable.CONCAT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjU5Mjcy", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-380259272", "createdAt": "2020-03-24T12:27:04Z", "commit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyNzowNFrOF6t48Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyNzowNFrOF6t48Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMzU4NQ==", "bodyText": "Can we add some doc here?", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397113585", "createdAt": "2020-03-24T12:27:04Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlLibraryOperators.java", "diffHunk": "@@ -286,8 +286,13 @@ private SqlLibraryOperators() {\n               opBinding -> {\n                 int precision = opBinding.collectOperandTypes().stream()\n                     .mapToInt(RelDataType::getPrecision).sum();\n-                return opBinding.getTypeFactory()\n-                    .createSqlType(SqlTypeName.VARCHAR, precision);\n+                if (precision > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjczMjEy", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-380273212", "createdAt": "2020-03-24T12:47:02Z", "commit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0NzowMlrOF6ulNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0NzowMlrOF6ulNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNDkxNg==", "bodyText": "Why do we need to expand operands? operand.unparse can recursively handle nested case in nature.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397124916", "createdAt": "2020-03-24T12:47:02Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java", "diffHunk": "@@ -208,12 +212,52 @@ public boolean supportsAliasedValues() {\n \n       unparseFloor(writer, call);\n       break;\n-\n     default:\n+      if (call.getOperator() == SqlStdOperatorTable.CONCAT) {\n+        unparseConcat(writer, call);\n+        break;\n+      }\n       super.unparseCall(writer, call, leftPrec, rightPrec);\n     }\n   }\n \n+  /**\n+   * Unparses String concatenation operator for Mysql, Mysql uses Concat as string concatenation\n+   * operator when PIPES_AS_CONCAT is not enabled. CONCAT concatenation characters are used by\n+   * default.\n+   *\n+   * @param writer writer\n+   * @param call call\n+   */\n+  private void unparseConcat(SqlWriter writer, SqlCall call) {\n+    List<SqlNode> expandOperandList = new ArrayList<>();\n+    expandConcatOperands(call, expandOperandList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/689780e87195e6db10f83f22411fe30e36b96443", "committedDate": "2020-03-24T09:52:02Z", "message": "[CALCITE-3864] Add Implementation for SqlLibraryOperators.CONCAT_FUNCTION in SqlFunctions and correct the return type inference of SqlLibraryOperators.CONCAT_FUNCTION (Wenhui Tang)"}, "afterCommit": {"oid": "517d0d53105fdd594d112d1f493b4a246db4ffe4", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/517d0d53105fdd594d112d1f493b4a246db4ffe4", "committedDate": "2020-03-24T13:39:37Z", "message": "[CALCITE-3864] Add Implementation for SqlLibraryOperators.CONCAT_FUNCTION in SqlFunctions and correct the return type inference of SqlLibraryOperators.CONCAT_FUNCTION (Wenhui Tang)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODQyMjM0", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-380842234", "createdAt": "2020-03-25T03:46:19Z", "commit": {"oid": "517d0d53105fdd594d112d1f493b4a246db4ffe4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NjoyMFrOF7LOVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NjoyMFrOF7LOVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDE5Nw==", "bodyText": "In concat(x, y, z), if the precision of x, y, z are specified (i.e., precision != PRECISION_NOT_SPECIFIED), the return type is the sum of them. However, if one operand's precision is PRECISION_NOT_SPECIFIED, the return type should also be PRECISION_NOT_SPECIFIED.\nE.g., for concat('aaa', cast('bb' as varchar), 'ccc'), operand's precisions are: [3, -1, 3]. The return type's precision (3-1+3=5) is not resonable.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397594197", "createdAt": "2020-03-25T03:46:20Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlLibraryOperators.java", "diffHunk": "@@ -286,6 +286,9 @@ private SqlLibraryOperators() {\n               opBinding -> {\n                 int precision = opBinding.collectOperandTypes().stream()\n                     .mapToInt(RelDataType::getPrecision).sum();\n+                // precision may be smaller than -1 when operands' precision are not be specified,\n+                // which is not allowed.\n+                precision = Math.max(precision, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "517d0d53105fdd594d112d1f493b4a246db4ffe4"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "517d0d53105fdd594d112d1f493b4a246db4ffe4", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/517d0d53105fdd594d112d1f493b4a246db4ffe4", "committedDate": "2020-03-24T13:39:37Z", "message": "[CALCITE-3864] Add Implementation for SqlLibraryOperators.CONCAT_FUNCTION in SqlFunctions and correct the return type inference of SqlLibraryOperators.CONCAT_FUNCTION (Wenhui Tang)"}, "afterCommit": {"oid": "703357f0542b02ed75b75eca6c86c9c00d8f36b7", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/703357f0542b02ed75b75eca6c86c9c00d8f36b7", "committedDate": "2020-03-25T09:18:53Z", "message": "[CALCITE-3864] Add Implementation for SqlLibraryOperators.CONCAT_FUNCTION in SqlFunctions and correct the return type inference of SqlLibraryOperators.CONCAT_FUNCTION (Wenhui Tang)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "703357f0542b02ed75b75eca6c86c9c00d8f36b7", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/703357f0542b02ed75b75eca6c86c9c00d8f36b7", "committedDate": "2020-03-25T09:18:53Z", "message": "[CALCITE-3864] Add Implementation for SqlLibraryOperators.CONCAT_FUNCTION in SqlFunctions and correct the return type inference of SqlLibraryOperators.CONCAT_FUNCTION (Wenhui Tang)"}, "afterCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/2cf7349335c2574d281dc91cf09ed5d439ba9858", "committedDate": "2020-03-25T09:21:07Z", "message": "[CALCITE-3864] Add Implementation for SqlLibraryOperators.CONCAT_FUNCTION in SqlFunctions and correct the return type inference of SqlLibraryOperators.CONCAT_FUNCTION (Wenhui Tang)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTc3NDEz", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-380977413", "createdAt": "2020-03-25T09:27:04Z", "commit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyNzowNFrOF7SZig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyNzowNFrOF7SZig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMTc1NA==", "bodyText": "You can use String.join(\"\", args).", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397711754", "createdAt": "2020-03-25T09:27:04Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java", "diffHunk": "@@ -460,6 +460,14 @@ public static ByteString concat(ByteString s0, ByteString s1) {\n     return s0.concat(s1);\n   }\n \n+  /** SQL {@code concat(string0, string2, string3, ...)} function. */\n+  public static String concat(String... args) {\n+    List<String> argList = Arrays.asList(args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTc5MDU1", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-380979055", "createdAt": "2020-03-25T09:29:16Z", "commit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyOToxNlrOF7SfPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyOToxNlrOF7SfPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMzIxMw==", "bodyText": "Maybe there is no need to register CONCAT2 into RexImpTable. In runtime, Calcite can automatically find the concat function. You can have a try.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397713213", "createdAt": "2020-03-25T09:29:16Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "diffHunk": "@@ -332,6 +334,8 @@\n         NullPolicy.STRICT);\n     defineMethod(CONCAT, BuiltInMethod.STRING_CONCAT.method,\n         NullPolicy.STRICT);\n+    defineMethod(CONCAT2, BuiltInMethod.STRING_CONCAT.method, NullPolicy.STRICT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTgwODM3", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-380980837", "createdAt": "2020-03-25T09:31:36Z", "commit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTozMTozNlrOF7SlSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTozMTozNlrOF7SlSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNDc2Mw==", "bodyText": "To align with args, \"arg0, arg1...\" is better than \"string0, ..\" in doc.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397714763", "createdAt": "2020-03-25T09:31:36Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java", "diffHunk": "@@ -460,6 +460,14 @@ public static ByteString concat(ByteString s0, ByteString s1) {\n     return s0.concat(s1);\n   }\n \n+  /** SQL {@code concat(string0, string2, string3, ...)} function. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMDEyMjI3", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-381012227", "createdAt": "2020-03-25T10:14:53Z", "commit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxNDo1M1rOF7UNdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxNDo1M1rOF7UNdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MTQzMQ==", "bodyText": "You can directly break the iteration when: 1) encountering PRECISION_NOT_SPECIFIED, 2) amount large than max precision.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397741431", "createdAt": "2020-03-25T10:14:53Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "diffHunk": "@@ -655,6 +655,54 @@ public int size() {\n         return ret;\n       };\n \n+\n+  /**\n+   * Type-inference strategy for String concatenation.\n+   * For example,\n+   *\n+   * concat(cast('a' as varchar(2)), cast('b' as varchar(3)),cast('c' as varchar(2)))\n+   * returns varchar(7),\n+   *\n+   * concat(cast('a' as varchar), cast('b' as varchar(2), cast('c' as varchar(2))))\n+   * returns varchar,\n+   *\n+   * concat(cast('a' as varchar(65535)), cast('b' as varchar(2)), cast('c' as varchar(2)))\n+   * returns varchar\n+   */\n+  public static final SqlReturnTypeInference MULTIVALENT_STRING_SUM_PRECISION =\n+      opBinding -> {\n+        boolean hasPrecisionNotSpecifiedOperand = false;\n+        int typePrecision;\n+        long amount = 0;\n+        List<RelDataType> operandTypes = opBinding.collectOperandTypes();\n+        for (RelDataType operandType: operandTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMDIwODk0", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-381020894", "createdAt": "2020-03-25T10:26:51Z", "commit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoyNjo1MVrOF7Up6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoyNjo1MVrOF7Up6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0ODcxNQ==", "bodyText": "Improve the comment, you can refer to DYADIC_STRING_SUM_PRECISION for \"||\" operator.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397748715", "createdAt": "2020-03-25T10:26:51Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "diffHunk": "@@ -655,6 +655,54 @@ public int size() {\n         return ret;\n       };\n \n+\n+  /**\n+   * Type-inference strategy for String concatenation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/2cf7349335c2574d281dc91cf09ed5d439ba9858", "committedDate": "2020-03-25T09:21:07Z", "message": "[CALCITE-3864] Add Implementation for SqlLibraryOperators.CONCAT_FUNCTION in SqlFunctions and correct the return type inference of SqlLibraryOperators.CONCAT_FUNCTION (Wenhui Tang)"}, "afterCommit": {"oid": "d0d787bdb09cb2605093a5e36c36967bf6a00cb5", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/d0d787bdb09cb2605093a5e36c36967bf6a00cb5", "committedDate": "2020-03-25T11:56:20Z", "message": "[CALCITE-3684] Implement Concat function.(Wenhui Tang)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0d787bdb09cb2605093a5e36c36967bf6a00cb5", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/d0d787bdb09cb2605093a5e36c36967bf6a00cb5", "committedDate": "2020-03-25T11:56:20Z", "message": "[CALCITE-3684] Implement Concat function.(Wenhui Tang)"}, "afterCommit": {"oid": "782123bc8409ed82c7f2842925a48b26ab8aca03", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/782123bc8409ed82c7f2842925a48b26ab8aca03", "committedDate": "2020-03-25T13:04:17Z", "message": "[CALCITE-3684] Implement Concat function.(Wenhui Tang)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "782123bc8409ed82c7f2842925a48b26ab8aca03", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/782123bc8409ed82c7f2842925a48b26ab8aca03", "committedDate": "2020-03-25T13:04:17Z", "message": "[CALCITE-3684] Implement Concat function.(Wenhui Tang)"}, "afterCommit": {"oid": "7152d72d11d22f53d921a1a0130ef052651e1aef", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/7152d72d11d22f53d921a1a0130ef052651e1aef", "committedDate": "2020-03-26T02:43:18Z", "message": "[CALCITE-3684] Implement Concat function (Wenhui Tang)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNTU3NTAw", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-382557500", "createdAt": "2020-03-27T03:22:43Z", "commit": {"oid": "7152d72d11d22f53d921a1a0130ef052651e1aef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzoyMjo0M1rOF8h5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzoyMjo0M1rOF8h5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxNDI3OQ==", "bodyText": "Please add a test case whose parameter is empty.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r399014279", "createdAt": "2020-03-27T03:22:43Z", "author": {"login": "chunweilei"}, "path": "core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java", "diffHunk": "@@ -2169,6 +2173,31 @@ protected static Calendar getCalendarNotTooNear(int timeUnit) {\n         \"VARCHAR(33335) NOT NULL\");\n     tester.checkNull(\"x'ff' || cast(null as varbinary)\");\n     tester.checkNull(\" cast(null as ANY) || cast(null as ANY) \");\n+    tester.checkString(\"cast('a' as varchar) || cast('b' as varchar) \"\n+        + \"|| cast('c' as varchar)\", \"abc\", \"VARCHAR NOT NULL\");\n+\n+    final SqlTester tester1 = tester(SqlLibrary.MYSQL);\n+    final SqlTester tester2 = tester(SqlLibrary.POSTGRESQL);\n+    final SqlTester tester3 = tester(SqlLibrary.ORACLE);\n+    for (SqlTester sqlTester: ImmutableList.of(tester1, tester2)) {\n+      sqlTester.setFor(SqlLibraryOperators.CONCAT_FUNCTION);\n+      sqlTester.checkString(\"concat('a', 'b', 'c')\", \"abc\",\n+          \"VARCHAR(3) NOT NULL\");\n+      sqlTester.checkString(\"concat(cast('a' as varchar), cast('b' as varchar), \"\n+          + \"cast('c' as varchar))\", \"abc\", \"VARCHAR NOT NULL\");\n+      sqlTester.checkNull(\"concat('a', 'b', cast(null as char(2)))\");\n+      sqlTester.checkNull(\"concat(cast(null as ANY), 'b', cast(null as char(2)))\");\n+    }\n+    tester3.setFor(SqlLibraryOperators.CONCAT2);\n+    tester3.checkString(\"concat(cast('fe' as char(2)), cast('df' as varchar(65535)))\",\n+        \"fedf\", \"VARCHAR NOT NULL\");\n+    tester3.checkString(\"concat(cast('fe' as char(2)), cast('df' as varchar))\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7152d72d11d22f53d921a1a0130ef052651e1aef"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNTYxOTcy", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-382561972", "createdAt": "2020-03-27T03:40:55Z", "commit": {"oid": "7152d72d11d22f53d921a1a0130ef052651e1aef"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMDQ1NzMw", "url": "https://github.com/apache/calcite/pull/1862#pullrequestreview-382045730", "createdAt": "2020-03-26T14:10:24Z", "commit": {"oid": "7152d72d11d22f53d921a1a0130ef052651e1aef"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxMDoyNFrOF8IvRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxMjo0OVrOF8I2gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwMjA1NQ==", "bodyText": "End up the comment with dot.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r398602055", "createdAt": "2020-03-26T14:10:24Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "diffHunk": "@@ -655,6 +655,59 @@ public int size() {\n         return ret;\n       };\n \n+\n+  /**\n+   * Type-inference strategy for String concatenation.\n+   * Result is varying if either input is; otherwise fixed.\n+   * For example,\n+   *\n+   * concat(cast('a' as varchar(2)), cast('b' as varchar(3)),cast('c' as varchar(2)))\n+   * returns varchar(7),\n+   *\n+   * concat(cast('a' as varchar), cast('b' as varchar(2), cast('c' as varchar(2))))\n+   * returns varchar,\n+   *\n+   * concat(cast('a' as varchar(65535)), cast('b' as varchar(2)), cast('c' as varchar(2)))\n+   * returns varchar\n+   */\n+  public static final SqlReturnTypeInference MULTIVALENT_STRING_SUM_PRECISION =\n+      opBinding -> {\n+        boolean hasPrecisionNotSpecifiedOperand = false;\n+        boolean precisionOverflow = false;\n+        int typePrecision;\n+        long amount = 0;\n+        List<RelDataType> operandTypes = opBinding.collectOperandTypes();\n+        final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();\n+        final RelDataTypeSystem typeSystem = typeFactory.getTypeSystem();\n+        for (RelDataType operandType: operandTypes) {\n+          int operandPrecision = operandType.getPrecision();\n+          amount = (long) operandPrecision + amount;\n+          if (operandPrecision == RelDataType.PRECISION_NOT_SPECIFIED) {\n+            hasPrecisionNotSpecifiedOperand = true;\n+            break;\n+          }\n+          if (amount > typeSystem.getMaxPrecision(SqlTypeName.VARCHAR)) {\n+            precisionOverflow = true;\n+            break;\n+          }\n+        }\n+        if (hasPrecisionNotSpecifiedOperand || precisionOverflow) {\n+          typePrecision = RelDataType.PRECISION_NOT_SPECIFIED;\n+        } else {\n+          typePrecision = (int) amount;\n+        }\n+\n+        return opBinding.getTypeFactory()\n+            .createSqlType(SqlTypeName.VARCHAR, typePrecision);\n+      };\n+\n+  /**\n+   * Same as {@link #MULTIVALENT_STRING_SUM_PRECISION} and using\n+   * {@link org.apache.calcite.sql.type.SqlTypeTransforms#TO_NULLABLE}\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7152d72d11d22f53d921a1a0130ef052651e1aef"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwMzkwNA==", "bodyText": "Start with <p> If there is a blank line ahead. And end with dot.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r398603904", "createdAt": "2020-03-26T14:12:49Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "diffHunk": "@@ -655,6 +655,59 @@ public int size() {\n         return ret;\n       };\n \n+\n+  /**\n+   * Type-inference strategy for String concatenation.\n+   * Result is varying if either input is; otherwise fixed.\n+   * For example,\n+   *\n+   * concat(cast('a' as varchar(2)), cast('b' as varchar(3)),cast('c' as varchar(2)))\n+   * returns varchar(7),\n+   *\n+   * concat(cast('a' as varchar), cast('b' as varchar(2), cast('c' as varchar(2))))\n+   * returns varchar,\n+   *\n+   * concat(cast('a' as varchar(65535)), cast('b' as varchar(2)), cast('c' as varchar(2)))\n+   * returns varchar\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7152d72d11d22f53d921a1a0130ef052651e1aef"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "413be6fc73c5a5b5c785e10c518034b8b1fd37d9", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/413be6fc73c5a5b5c785e10c518034b8b1fd37d9", "committedDate": "2020-03-27T10:49:43Z", "message": "[CALCITE-3684] Supports CONCAT for variable arguments (Wenhui Tang)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7152d72d11d22f53d921a1a0130ef052651e1aef", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/7152d72d11d22f53d921a1a0130ef052651e1aef", "committedDate": "2020-03-26T02:43:18Z", "message": "[CALCITE-3684] Implement Concat function (Wenhui Tang)"}, "afterCommit": {"oid": "413be6fc73c5a5b5c785e10c518034b8b1fd37d9", "author": {"user": {"login": "wenhuitang", "name": "TANG Wen-hui"}}, "url": "https://github.com/apache/calcite/commit/413be6fc73c5a5b5c785e10c518034b8b1fd37d9", "committedDate": "2020-03-27T10:49:43Z", "message": "[CALCITE-3684] Supports CONCAT for variable arguments (Wenhui Tang)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3864, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}