{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwODMwOTI3", "number": 2007, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODo1MjowMlrOEDWp3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo0MDowMlrOEDXuzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTUyMzQ5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODo1MjowMlrOGgUp5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODo1ODo0OVrOGgU5kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0NjAyMg==", "bodyText": "(minor) Maybe adding a unit test for the same node scenario?\nassertEquals(0, frozenGraph.getShortestDistance(\"B\", \"B\"));", "url": "https://github.com/apache/calcite/pull/2007#discussion_r436546022", "createdAt": "2020-06-08T08:52:02Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -215,6 +215,34 @@\n     assertEquals(\"[D, E]\", frozenGraph.getShortestPath(\"D\", \"E\").toString());\n   }\n \n+  @Test void testDistances() {\n+    //       B -> C\n+    //      /      \\\n+    //     A        E\n+    //      \\      /\n+    //       D -->\n+    final DefaultDirectedGraph<String, DefaultEdge> graph =\n+        DefaultDirectedGraph.create();\n+    graph.addVertex(\"A\");\n+    graph.addVertex(\"B\");\n+    graph.addVertex(\"C\");\n+    graph.addVertex(\"D\");\n+    graph.addVertex(\"E\");\n+    graph.addVertex(\"F\");\n+    graph.addEdge(\"A\", \"B\");\n+    graph.addEdge(\"B\", \"C\");\n+    graph.addEdge(\"A\", \"D\");\n+    graph.addEdge(\"D\", \"E\");\n+    graph.addEdge(\"C\", \"E\");\n+    final Graphs.FrozenGraph<String, DefaultEdge> frozenGraph =\n+        Graphs.makeImmutable(graph);\n+    assertEquals(1, frozenGraph.getShortestDistance(\"A\", \"B\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143b539e4cc1ff3a77bf87ed4988d1c220aaa4b9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1MDAzMg==", "bodyText": "Done. Thank you for the good suggestion.", "url": "https://github.com/apache/calcite/pull/2007#discussion_r436550032", "createdAt": "2020-06-08T08:58:49Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -215,6 +215,34 @@\n     assertEquals(\"[D, E]\", frozenGraph.getShortestPath(\"D\", \"E\").toString());\n   }\n \n+  @Test void testDistances() {\n+    //       B -> C\n+    //      /      \\\n+    //     A        E\n+    //      \\      /\n+    //       D -->\n+    final DefaultDirectedGraph<String, DefaultEdge> graph =\n+        DefaultDirectedGraph.create();\n+    graph.addVertex(\"A\");\n+    graph.addVertex(\"B\");\n+    graph.addVertex(\"C\");\n+    graph.addVertex(\"D\");\n+    graph.addVertex(\"E\");\n+    graph.addVertex(\"F\");\n+    graph.addEdge(\"A\", \"B\");\n+    graph.addEdge(\"B\", \"C\");\n+    graph.addEdge(\"A\", \"D\");\n+    graph.addEdge(\"D\", \"E\");\n+    graph.addEdge(\"C\", \"E\");\n+    final Graphs.FrozenGraph<String, DefaultEdge> frozenGraph =\n+        Graphs.makeImmutable(graph);\n+    assertEquals(1, frozenGraph.getShortestDistance(\"A\", \"B\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0NjAyMg=="}, "originalCommit": {"oid": "143b539e4cc1ff3a77bf87ed4988d1c220aaa4b9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTY5OTk3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo0MDowMlrOGgWVow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjoyMzozNFrOGgbLvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3MzYwMw==", "bodyText": "May I suggest another formatting to make it clearer that all edges are directed? e.g.:\n// A+-->B+-->C+-->E\n// +              ^\n// |              |\n// +----->D+------+", "url": "https://github.com/apache/calcite/pull/2007#discussion_r436573603", "createdAt": "2020-06-08T09:40:02Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -215,6 +215,35 @@\n     assertEquals(\"[D, E]\", frozenGraph.getShortestPath(\"D\", \"E\").toString());\n   }\n \n+  @Test void testDistances() {\n+    //       B -> C", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80067b5b67f8ced064f1c7006b996e0966ea3173"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY0Mzg1Mg==", "bodyText": "Sounds reasonable. I have revised the code accordingly. Please check it.", "url": "https://github.com/apache/calcite/pull/2007#discussion_r436643852", "createdAt": "2020-06-08T12:05:08Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -215,6 +215,35 @@\n     assertEquals(\"[D, E]\", frozenGraph.getShortestPath(\"D\", \"E\").toString());\n   }\n \n+  @Test void testDistances() {\n+    //       B -> C", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3MzYwMw=="}, "originalCommit": {"oid": "80067b5b67f8ced064f1c7006b996e0966ea3173"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY1Mjk5MQ==", "bodyText": "thanks, looks good.", "url": "https://github.com/apache/calcite/pull/2007#discussion_r436652991", "createdAt": "2020-06-08T12:23:34Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -215,6 +215,35 @@\n     assertEquals(\"[D, E]\", frozenGraph.getShortestPath(\"D\", \"E\").toString());\n   }\n \n+  @Test void testDistances() {\n+    //       B -> C", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3MzYwMw=="}, "originalCommit": {"oid": "80067b5b67f8ced064f1c7006b996e0966ea3173"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 176, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}