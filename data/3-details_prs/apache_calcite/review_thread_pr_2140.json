{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMjAyNzMw", "number": 2140, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTo0MDo1N1rOEgkqeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTo0MDo1N1rOEgkqeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTkwNTg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/Util.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTo0MDo1N1rOHNfxzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwODoxNzowMFrOHNggkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxNDE4OQ==", "bodyText": "Why this block is not present in the other version of this function?", "url": "https://github.com/apache/calcite/pull/2140#discussion_r483914189", "createdAt": "2020-09-05T05:40:57Z", "author": {"login": "eolivelli"}, "path": "core/src/main/java/org/apache/calcite/util/Util.java", "diffHunk": "@@ -911,6 +912,43 @@ public static void throwIfUnchecked(Throwable throwable) {\n     }\n   }\n \n+  /**\n+   * This method rethrows input throwable as is (if its unchecked) or\n+   * wraps it with {@link RuntimeException} and throws.\n+   * <p>The typical usage would be {@code throw throwAsRuntime(...)}, where {@code throw} statement\n+   * is needed so Java compiler knows the execution stops at that line.</p>\n+   *\n+   * @param throwable input throwable\n+   * @return the method never returns, it always throws an unchecked exception\n+   */\n+  @API(since = \"1.26\", status = API.Status.EXPERIMENTAL)\n+  public static RuntimeException throwAsRuntime(Throwable throwable) {\n+    throwIfUnchecked(throwable);\n+    throw new RuntimeException(throwable);\n+  }\n+\n+  /**\n+   * This method rethrows input throwable as is (if its unchecked) with an extra message or\n+   * wraps it with {@link RuntimeException} and throws.\n+   * <p>The typical usage would be {@code throw throwAsRuntime(...)}, where {@code throw} statement\n+   * is needed so Java compiler knows the execution stops at that line.</p>\n+   *\n+   * @param throwable input throwable\n+   * @return the method never returns, it always throws an unchecked exception\n+   */\n+  @API(since = \"1.26\", status = API.Status.EXPERIMENTAL)\n+  public static RuntimeException throwAsRuntime(String message, Throwable throwable) {\n+    if (throwable instanceof RuntimeException) {\n+      throwable.addSuppressed(new Throwable(message));\n+      throw (RuntimeException) throwable;\n+    }\n+    if (throwable instanceof Error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "046f104da0df7d1843562a98ccd85c823f860e0f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyNjE2MQ==", "bodyText": "This block is a part of throwIfUnchecked, however, here I need to call addSuppressed before the throwing.\nAn alternative implementation could be:\ntry {\n  throwIfUnchecked(throwable);\n} catch (Throwable t) {\n  // Ok, it is unchecked, so addSuppressed and rethrow\n  t.addSuppressed(new Throwable(message));\n  throwIfUnchecked(throwable);\n}\nEven though it looks like \"code reuse\", I don't like it", "url": "https://github.com/apache/calcite/pull/2140#discussion_r483926161", "createdAt": "2020-09-05T08:17:00Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Util.java", "diffHunk": "@@ -911,6 +912,43 @@ public static void throwIfUnchecked(Throwable throwable) {\n     }\n   }\n \n+  /**\n+   * This method rethrows input throwable as is (if its unchecked) or\n+   * wraps it with {@link RuntimeException} and throws.\n+   * <p>The typical usage would be {@code throw throwAsRuntime(...)}, where {@code throw} statement\n+   * is needed so Java compiler knows the execution stops at that line.</p>\n+   *\n+   * @param throwable input throwable\n+   * @return the method never returns, it always throws an unchecked exception\n+   */\n+  @API(since = \"1.26\", status = API.Status.EXPERIMENTAL)\n+  public static RuntimeException throwAsRuntime(Throwable throwable) {\n+    throwIfUnchecked(throwable);\n+    throw new RuntimeException(throwable);\n+  }\n+\n+  /**\n+   * This method rethrows input throwable as is (if its unchecked) with an extra message or\n+   * wraps it with {@link RuntimeException} and throws.\n+   * <p>The typical usage would be {@code throw throwAsRuntime(...)}, where {@code throw} statement\n+   * is needed so Java compiler knows the execution stops at that line.</p>\n+   *\n+   * @param throwable input throwable\n+   * @return the method never returns, it always throws an unchecked exception\n+   */\n+  @API(since = \"1.26\", status = API.Status.EXPERIMENTAL)\n+  public static RuntimeException throwAsRuntime(String message, Throwable throwable) {\n+    if (throwable instanceof RuntimeException) {\n+      throwable.addSuppressed(new Throwable(message));\n+      throw (RuntimeException) throwable;\n+    }\n+    if (throwable instanceof Error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxNDE4OQ=="}, "originalCommit": {"oid": "046f104da0df7d1843562a98ccd85c823f860e0f"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 131, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}