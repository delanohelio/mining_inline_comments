{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NjY5NDU1", "number": 2131, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0MTo1OVrOEflo2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoyMDo1MlrOEf23cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTU3OTc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0MTo1OVrOHL88Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoxODo0MlrOHMZTnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5NDgxOQ==", "bodyText": "(1D - selectivity) * left/right to estimate the number of row,null tuple makes sense (although it relies on a good estimation on selectivity, which usually is a hard engineering problem :-))", "url": "https://github.com/apache/calcite/pull/2131#discussion_r482294819", "createdAt": "2020-09-02T18:41:59Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java", "diffHunk": "@@ -731,19 +734,22 @@ public static Double getJoinRowCount(RelMetadataQuery mq, Join join,\n         return max;\n       }\n     }\n-    double product = left * right;\n-\n-    return product * mq.getSelectivity(join, condition);\n-  }\n \n-  /** Returns an estimate of the number of rows returned by a semi-join. */\n-  public static Double getSemiJoinRowCount(RelMetadataQuery mq, RelNode left,\n-      RelNode right, JoinRelType joinType, RexNode condition) {\n-    final Double leftCount = mq.getRowCount(left);\n-    if (leftCount == null) {\n-      return null;\n+    double product = left * right;\n+    double selectivity = mq.getSelectivity(join, condition);\n+    double innerRowCount = product * selectivity;\n+    switch (join.getJoinType()) {\n+    case INNER:\n+      return innerRowCount;\n+    case LEFT:\n+      return left * (1D - selectivity) + innerRowCount;\n+    case RIGHT:\n+      return right * (1D - selectivity) + innerRowCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1NzE2Mw==", "bodyText": "I agree. IMHO the proposed formula is far from perfect and depends on how good (or bad) is the selectivity estimation, but I think it is a bit better than the current formula.", "url": "https://github.com/apache/calcite/pull/2131#discussion_r482757163", "createdAt": "2020-09-03T07:14:08Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java", "diffHunk": "@@ -731,19 +734,22 @@ public static Double getJoinRowCount(RelMetadataQuery mq, Join join,\n         return max;\n       }\n     }\n-    double product = left * right;\n-\n-    return product * mq.getSelectivity(join, condition);\n-  }\n \n-  /** Returns an estimate of the number of rows returned by a semi-join. */\n-  public static Double getSemiJoinRowCount(RelMetadataQuery mq, RelNode left,\n-      RelNode right, JoinRelType joinType, RexNode condition) {\n-    final Double leftCount = mq.getRowCount(left);\n-    if (leftCount == null) {\n-      return null;\n+    double product = left * right;\n+    double selectivity = mq.getSelectivity(join, condition);\n+    double innerRowCount = product * selectivity;\n+    switch (join.getJoinType()) {\n+    case INNER:\n+      return innerRowCount;\n+    case LEFT:\n+      return left * (1D - selectivity) + innerRowCount;\n+    case RIGHT:\n+      return right * (1D - selectivity) + innerRowCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5NDgxOQ=="}, "originalCommit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1OTU4MA==", "bodyText": "agreed. I think your change indeed is better.", "url": "https://github.com/apache/calcite/pull/2131#discussion_r482759580", "createdAt": "2020-09-03T07:18:42Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java", "diffHunk": "@@ -731,19 +734,22 @@ public static Double getJoinRowCount(RelMetadataQuery mq, Join join,\n         return max;\n       }\n     }\n-    double product = left * right;\n-\n-    return product * mq.getSelectivity(join, condition);\n-  }\n \n-  /** Returns an estimate of the number of rows returned by a semi-join. */\n-  public static Double getSemiJoinRowCount(RelMetadataQuery mq, RelNode left,\n-      RelNode right, JoinRelType joinType, RexNode condition) {\n-    final Double leftCount = mq.getRowCount(left);\n-    if (leftCount == null) {\n-      return null;\n+    double product = left * right;\n+    double selectivity = mq.getSelectivity(join, condition);\n+    double innerRowCount = product * selectivity;\n+    switch (join.getJoinType()) {\n+    case INNER:\n+      return innerRowCount;\n+    case LEFT:\n+      return left * (1D - selectivity) + innerRowCount;\n+    case RIGHT:\n+      return right * (1D - selectivity) + innerRowCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5NDgxOQ=="}, "originalCommit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTU5MTU5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0NDowNlrOHL9Djg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0MTowMVrOHMaFAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5NjcxOA==", "bodyText": "From the name of I am thinking this test intended to test empty join right? (now it is changed to test left join empty?", "url": "https://github.com/apache/calcite/pull/2131#discussion_r482296718", "createdAt": "2020-09-02T18:44:06Z", "author": {"login": "amaliujia"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -596,11 +596,11 @@ private void checkExchangeRowCount(RelNode rel, double expected, double expected\n   }\n \n   @Test void testRowCountRightJoinEmptyFinite() {\n-    final String sql = \"select * from (select * from emp limit 0) as emp\\n\"\n-        + \"right join (select * from dept limit 4) as dept\\n\"\n+    final String sql = \"select * from (select * from emp limit 4) as emp\\n\"\n+        + \"right join (select * from dept limit 0) as dept\\n\"\n         + \"on emp.deptno = dept.deptno\";\n     checkRowCount(sql, 1D, // 0, rounded up to row count's minimum 1\n-        0D, 4D); // 1 * 4\n+        0D, 0D); // 0 * 4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MjIyNg==", "bodyText": "You're right, I have reviewed the test and added more cases", "url": "https://github.com/apache/calcite/pull/2131#discussion_r482772226", "createdAt": "2020-09-03T07:41:01Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -596,11 +596,11 @@ private void checkExchangeRowCount(RelNode rel, double expected, double expected\n   }\n \n   @Test void testRowCountRightJoinEmptyFinite() {\n-    final String sql = \"select * from (select * from emp limit 0) as emp\\n\"\n-        + \"right join (select * from dept limit 4) as dept\\n\"\n+    final String sql = \"select * from (select * from emp limit 4) as emp\\n\"\n+        + \"right join (select * from dept limit 0) as dept\\n\"\n         + \"on emp.deptno = dept.deptno\";\n     checkRowCount(sql, 1D, // 0, rounded up to row count's minimum 1\n-        0D, 4D); // 1 * 4\n+        0D, 0D); // 0 * 4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5NjcxOA=="}, "originalCommit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQwMjQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoyMDo1MlrOHMZXzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0MTowN1rOHMaFRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MDY1Mw==", "bodyText": "This would fail with NPE in case selectivity is null", "url": "https://github.com/apache/calcite/pull/2131#discussion_r482760653", "createdAt": "2020-09-03T07:20:52Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java", "diffHunk": "@@ -713,9 +714,11 @@ public static Double getJoinRowCount(RelMetadataQuery mq, Join join,\n       // semijoin filter and pass it to getSelectivity\n       RexNode semiJoinSelectivity =\n           RelMdUtil.makeSemiJoinSelectivityRexNode(mq, join);\n-\n+      Double selectivity = mq.getSelectivity(join.getLeft(), semiJoinSelectivity);\n       return NumberUtil.multiply(\n-          mq.getSelectivity(join.getLeft(), semiJoinSelectivity),\n+          join.getJoinType() == JoinRelType.SEMI\n+              ? selectivity\n+              : 1D - selectivity, // ANTI join", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MjI5NA==", "bodyText": "Fixed.", "url": "https://github.com/apache/calcite/pull/2131#discussion_r482772294", "createdAt": "2020-09-03T07:41:07Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java", "diffHunk": "@@ -713,9 +714,11 @@ public static Double getJoinRowCount(RelMetadataQuery mq, Join join,\n       // semijoin filter and pass it to getSelectivity\n       RexNode semiJoinSelectivity =\n           RelMdUtil.makeSemiJoinSelectivityRexNode(mq, join);\n-\n+      Double selectivity = mq.getSelectivity(join.getLeft(), semiJoinSelectivity);\n       return NumberUtil.multiply(\n-          mq.getSelectivity(join.getLeft(), semiJoinSelectivity),\n+          join.getJoinType() == JoinRelType.SEMI\n+              ? selectivity\n+              : 1D - selectivity, // ANTI join", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MDY1Mw=="}, "originalCommit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 124, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}