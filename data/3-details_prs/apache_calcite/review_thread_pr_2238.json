{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyOTI4Mjkx", "number": 2238, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDoxMzozNVrOE0iLgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1NzowMlrOE26BEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTIxNDA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDoxMzozNVrOHsUEPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDoxMzozNVrOHsUEPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyODE1OQ==", "bodyText": "s/Checks/Returns/; \"Checks\" often means that the method will throw if the check fails, whereas \"Returns\" is unambiguous.\nPut the criteria in the javadoc, and describe the purpose of newTermsCnt.\nI wouldn't abbreviate count to cnt. Save to characters, but convert a word into a non-word.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r516228159", "createdAt": "2020-11-02T20:13:35Z", "author": {"login": "julianhyde"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -2710,6 +2710,16 @@ private boolean accept1(RexNode e, SqlKind kind,\n       }\n     }\n \n+    /** Checks whether it is worth to fix and convert to {@code SEARCH} calls. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306544af0108b196d26e36eadb9c9d1161c87d20"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTI0NDkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDoyMzowN1rOHsUWoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzoxNToyOFrOHt2GhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMjg2NQ==", "bodyText": "Streams are cool but they are very expensive.\nProbably we are in some hot path here.\nIs it worth to use a simple loop?", "url": "https://github.com/apache/calcite/pull/2238#discussion_r516232865", "createdAt": "2020-11-02T20:23:07Z", "author": {"login": "eolivelli"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -2710,6 +2710,16 @@ private boolean accept1(RexNode e, SqlKind kind,\n       }\n     }\n \n+    /** Checks whether it is worth to fix and convert to {@code SEARCH} calls. */\n+    boolean needToFix(int newTermsCnt) {\n+      // Fix and converts to SEARCH if:\n+      // 1. A Sarg has complexity greater than 1;\n+      // 2. The terms are reduced as simpler Sarg points.\n+      return map.values().stream().anyMatch(b -> b.complexity() > 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306544af0108b196d26e36eadb9c9d1161c87d20"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNzg3Nw==", "bodyText": "+1 for this suggestion.\nBy using a simple loop, we can combine the two stream expressions?\nIn addition, checking condition newTermsCnt == 1 is cheap, can we move it forward?", "url": "https://github.com/apache/calcite/pull/2238#discussion_r516407877", "createdAt": "2020-11-03T03:16:35Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -2710,6 +2710,16 @@ private boolean accept1(RexNode e, SqlKind kind,\n       }\n     }\n \n+    /** Checks whether it is worth to fix and convert to {@code SEARCH} calls. */\n+    boolean needToFix(int newTermsCnt) {\n+      // Fix and converts to SEARCH if:\n+      // 1. A Sarg has complexity greater than 1;\n+      // 2. The terms are reduced as simpler Sarg points.\n+      return map.values().stream().anyMatch(b -> b.complexity() > 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMjg2NQ=="}, "originalCommit": {"oid": "306544af0108b196d26e36eadb9c9d1161c87d20"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzNDM3Mg==", "bodyText": "Sorry i found that it is hard to keep the decision branches in just one for loop and make the logic clear and clean. So i would not follow that.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r517834372", "createdAt": "2020-11-05T07:15:28Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -2710,6 +2710,16 @@ private boolean accept1(RexNode e, SqlKind kind,\n       }\n     }\n \n+    /** Checks whether it is worth to fix and convert to {@code SEARCH} calls. */\n+    boolean needToFix(int newTermsCnt) {\n+      // Fix and converts to SEARCH if:\n+      // 1. A Sarg has complexity greater than 1;\n+      // 2. The terms are reduced as simpler Sarg points.\n+      return map.values().stream().anyMatch(b -> b.complexity() > 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMjg2NQ=="}, "originalCommit": {"oid": "306544af0108b196d26e36eadb9c9d1161c87d20"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTMzNjQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDo1MToyM1rOHsVMmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1OTo1N1rOHtGoJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0NjY4Mg==", "bodyText": "What if we always convert to sarg format? Are there drawbacks?", "url": "https://github.com/apache/calcite/pull/2238#discussion_r516246682", "createdAt": "2020-11-02T20:51:23Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1330,7 +1330,7 @@ RexNode simplifyAnd(RexCall e, RexUnknownAs unknownAs) {\n \n     final SargCollector sargCollector = new SargCollector(rexBuilder, true);\n     operands.forEach(t -> sargCollector.accept(t, terms));\n-    if (sargCollector.map.values().stream().anyMatch(b -> b.complexity() > 1)) {\n+    if (sargCollector.needToFix(terms.size())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306544af0108b196d26e36eadb9c9d1161c87d20"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNzc2OA==", "bodyText": "The drawback is there are many unnecessary plan change.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r516407768", "createdAt": "2020-11-03T03:16:04Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1330,7 +1330,7 @@ RexNode simplifyAnd(RexCall e, RexUnknownAs unknownAs) {\n \n     final SargCollector sargCollector = new SargCollector(rexBuilder, true);\n     operands.forEach(t -> sargCollector.accept(t, terms));\n-    if (sargCollector.map.values().stream().anyMatch(b -> b.complexity() > 1)) {\n+    if (sargCollector.needToFix(terms.size())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0NjY4Mg=="}, "originalCommit": {"oid": "306544af0108b196d26e36eadb9c9d1161c87d20"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc0MzAxOQ==", "bodyText": "What do you mean unnecessary plan change?\nDo you mean plan changes when compared with 1.25 or 1.26?\nI guess 1.26 is not really viable (since there are significant issues with Sarg), so I would skip 1.26 from consideration with regard to plan changes.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r516743019", "createdAt": "2020-11-03T15:15:37Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1330,7 +1330,7 @@ RexNode simplifyAnd(RexCall e, RexUnknownAs unknownAs) {\n \n     final SargCollector sargCollector = new SargCollector(rexBuilder, true);\n     operands.forEach(t -> sargCollector.accept(t, terms));\n-    if (sargCollector.map.values().stream().anyMatch(b -> b.complexity() > 1)) {\n+    if (sargCollector.needToFix(terms.size())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0NjY4Mg=="}, "originalCommit": {"oid": "306544af0108b196d26e36eadb9c9d1161c87d20"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NjU1MQ==", "bodyText": "For example, a simple $0=1 would be converted to Sarg which is meaningless.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r517056551", "createdAt": "2020-11-04T01:59:57Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1330,7 +1330,7 @@ RexNode simplifyAnd(RexCall e, RexUnknownAs unknownAs) {\n \n     final SargCollector sargCollector = new SargCollector(rexBuilder, true);\n     operands.forEach(t -> sargCollector.accept(t, terms));\n-    if (sargCollector.map.values().stream().anyMatch(b -> b.complexity() > 1)) {\n+    if (sargCollector.needToFix(terms.size())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0NjY4Mg=="}, "originalCommit": {"oid": "306544af0108b196d26e36eadb9c9d1161c87d20"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjM3MzkwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzoxODoxOFrOHsfDkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzoxODoxOFrOHsfDkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwODIwOQ==", "bodyText": "Maybe we need another test case:\ndeptno in (20, 10) and deptno = 30\n==> false?", "url": "https://github.com/apache/calcite/pull/2238#discussion_r516408209", "createdAt": "2020-11-03T03:18:18Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -1774,6 +1770,17 @@ private void checkExponentialCnf(int n) {\n     checkSimplify2(e, \"SEARCH(?0.int0, Sarg[10])\", \"=(?0.int0, 10)\");\n   }\n \n+  @Test void testSimplifyInAnd() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f20ffff275811d36f579256e9bfcc18db52b20"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjI2MDg2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjozODoxOVrOHtWULg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzowODowMVrOHt17Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxMzU4Mg==", "bodyText": "I find deptno > 0 or deptno in (20, 10) can' t be simplified as deptno > 0", "url": "https://github.com/apache/calcite/pull/2238#discussion_r517313582", "createdAt": "2020-11-04T12:38:19Z", "author": {"login": "godfreyhe"}, "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -1774,6 +1770,27 @@ private void checkExponentialCnf(int n) {\n     checkSimplify2(e, \"SEARCH(?0.int0, Sarg[10])\", \"=(?0.int0, 10)\");\n   }\n \n+  @Test void testSimplifyInAnd() {\n+    // deptno in (20, 10) and deptno = 10\n+    //   ==>\n+    // deptno = 10\n+    checkSimplify2(\n+        and(\n+            in(vInt(), literal(20), literal(10)),\n+            eq(vInt(), literal(10))),\n+        \"SEARCH(?0.int0, Sarg[10])\",\n+        \"=(?0.int0, 10)\");\n+\n+    // deptno in (20, 10) and deptno = 30\n+    //   ==>\n+    // false\n+    checkSimplify(\n+        and(\n+        in(vInt(), literal(20), literal(10)),\n+        eq(vInt(), literal(30))),\n+        \"false\");\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ca3165ead471656fa8c3f401132cba469f6bb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzMTQ2Mw==", "bodyText": "Thanks, i have updated the test case.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r517831463", "createdAt": "2020-11-05T07:08:01Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -1774,6 +1770,27 @@ private void checkExponentialCnf(int n) {\n     checkSimplify2(e, \"SEARCH(?0.int0, Sarg[10])\", \"=(?0.int0, 10)\");\n   }\n \n+  @Test void testSimplifyInAnd() {\n+    // deptno in (20, 10) and deptno = 10\n+    //   ==>\n+    // deptno = 10\n+    checkSimplify2(\n+        and(\n+            in(vInt(), literal(20), literal(10)),\n+            eq(vInt(), literal(10))),\n+        \"SEARCH(?0.int0, Sarg[10])\",\n+        \"=(?0.int0, 10)\");\n+\n+    // deptno in (20, 10) and deptno = 30\n+    //   ==>\n+    // false\n+    checkSimplify(\n+        and(\n+        in(vInt(), literal(20), literal(10)),\n+        eq(vInt(), literal(30))),\n+        \"false\");\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxMzU4Mg=="}, "originalCommit": {"oid": "4c5ca3165ead471656fa8c3f401132cba469f6bb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTY3OTU4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo0MTo0NVrOHt2xKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo0MTo0NVrOHt2xKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTI4OA==", "bodyText": "An improvement change.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r517845288", "createdAt": "2020-11-05T07:41:45Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -1475,11 +1476,11 @@ private void checkExponentialCnf(int n) {\n             ne(aRef, literal4)),\n         \"<>(?0.a, 4)\");\n \n-    // \"b <> 1 or b = 1\" cannot be simplified, because b might be null\n+    // \"b <> 1 or b = 1\" ==> \"b is not null\" with unknown as false\n     final RexNode neOrEq =\n         or(ne(bRef, literal(1)),\n             eq(bRef, literal(1)));\n-    checkSimplifyFilter(neOrEq, \"OR(<>(?0.b, 1), =(?0.b, 1))\");\n+    checkSimplifyFilter(neOrEq, \"SEARCH(?0.b, Sarg[NOT NULL])\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "061ba0acc3a47ba8cfeba6256f4c1353697e1270"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTY4MDUyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo0MTo1N1rOHt2xoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo0MTo1N1rOHt2xoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTQwOQ==", "bodyText": "An improvement change.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r517845409", "createdAt": "2020-11-05T07:41:57Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -1846,7 +1880,7 @@ private void checkExponentialCnf(int n) {\n                 and(\n                     ge(vInt(), literal(1)),\n                     le(vInt(), literal(1))))),\n-        \"AND(=(?0.int2, 2), OR(=(?0.int3, 3), AND(>=(?0.int0, 1), <=(?0.int0, 1))))\",\n+        \"AND(=(?0.int2, 2), OR(=(?0.int3, 3), SEARCH(?0.int0, Sarg[1])))\",\n         \"AND(=(?0.int2, 2), OR(=(?0.int3, 3), =(?0.int0, 1)))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "061ba0acc3a47ba8cfeba6256f4c1353697e1270"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTY4MTI3OnYy", "diffSide": "RIGHT", "path": "core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo0MjoxMFrOHt2yDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzo0Mjo1M1rOHufHRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTUxNg==", "bodyText": "An improvement change.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r517845516", "createdAt": "2020-11-05T07:42:10Z", "author": {"login": "danny0405"}, "path": "core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml", "diffHunk": "@@ -6217,7 +6217,7 @@ LogicalProject(EXPR$0=[1])\n       LogicalProject(DEPTNO=[$7])\n         LogicalFilter(condition=[>($7, 1)])\n           LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-    LogicalFilter(condition=[OR(>($7, 7), >($7, 1))])\n+    LogicalFilter(condition=[SEARCH($7, Sarg[(1..+\u221e)])])\n       LogicalTableScan(table=[[CATALOG, SALES, EMP]])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "061ba0acc3a47ba8cfeba6256f4c1353697e1270"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTc2OQ==", "bodyText": "It should have been >($7, 1)", "url": "https://github.com/apache/calcite/pull/2238#discussion_r517845769", "createdAt": "2020-11-05T07:42:45Z", "author": {"login": "vlsi"}, "path": "core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml", "diffHunk": "@@ -6217,7 +6217,7 @@ LogicalProject(EXPR$0=[1])\n       LogicalProject(DEPTNO=[$7])\n         LogicalFilter(condition=[>($7, 1)])\n           LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-    LogicalFilter(condition=[OR(>($7, 7), >($7, 1))])\n+    LogicalFilter(condition=[SEARCH($7, Sarg[(1..+\u221e)])])\n       LogicalTableScan(table=[[CATALOG, SALES, EMP]])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTUxNg=="}, "originalCommit": {"oid": "061ba0acc3a47ba8cfeba6256f4c1353697e1270"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2MTI2MQ==", "bodyText": "What's the difference ?", "url": "https://github.com/apache/calcite/pull/2238#discussion_r517861261", "createdAt": "2020-11-05T08:14:33Z", "author": {"login": "danny0405"}, "path": "core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml", "diffHunk": "@@ -6217,7 +6217,7 @@ LogicalProject(EXPR$0=[1])\n       LogicalProject(DEPTNO=[$7])\n         LogicalFilter(condition=[>($7, 1)])\n           LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-    LogicalFilter(condition=[OR(>($7, 7), >($7, 1))])\n+    LogicalFilter(condition=[SEARCH($7, Sarg[(1..+\u221e)])])\n       LogicalTableScan(table=[[CATALOG, SALES, EMP]])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTUxNg=="}, "originalCommit": {"oid": "061ba0acc3a47ba8cfeba6256f4c1353697e1270"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2NDEyOQ==", "bodyText": ">($7, 1) is easier to follow than SEARCH($7, Sarg[(1..+\u221e)]).", "url": "https://github.com/apache/calcite/pull/2238#discussion_r517864129", "createdAt": "2020-11-05T08:19:46Z", "author": {"login": "vlsi"}, "path": "core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml", "diffHunk": "@@ -6217,7 +6217,7 @@ LogicalProject(EXPR$0=[1])\n       LogicalProject(DEPTNO=[$7])\n         LogicalFilter(condition=[>($7, 1)])\n           LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-    LogicalFilter(condition=[OR(>($7, 7), >($7, 1))])\n+    LogicalFilter(condition=[SEARCH($7, Sarg[(1..+\u221e)])])\n       LogicalTableScan(table=[[CATALOG, SALES, EMP]])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTUxNg=="}, "originalCommit": {"oid": "061ba0acc3a47ba8cfeba6256f4c1353697e1270"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2OTA5OA==", "bodyText": "I agree, but there are already many SEARCH($7, Sarg[(1..+\u221e)]) nodes in our plans, we can fire another issue to promote it but not in this patch.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r517869098", "createdAt": "2020-11-05T08:28:26Z", "author": {"login": "danny0405"}, "path": "core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml", "diffHunk": "@@ -6217,7 +6217,7 @@ LogicalProject(EXPR$0=[1])\n       LogicalProject(DEPTNO=[$7])\n         LogicalFilter(condition=[>($7, 1)])\n           LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-    LogicalFilter(condition=[OR(>($7, 7), >($7, 1))])\n+    LogicalFilter(condition=[SEARCH($7, Sarg[(1..+\u221e)])])\n       LogicalTableScan(table=[[CATALOG, SALES, EMP]])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTUxNg=="}, "originalCommit": {"oid": "061ba0acc3a47ba8cfeba6256f4c1353697e1270"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNjMxMA==", "bodyText": "I have fixed it, thanks.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r518506310", "createdAt": "2020-11-06T03:42:53Z", "author": {"login": "danny0405"}, "path": "core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml", "diffHunk": "@@ -6217,7 +6217,7 @@ LogicalProject(EXPR$0=[1])\n       LogicalProject(DEPTNO=[$7])\n         LogicalFilter(condition=[>($7, 1)])\n           LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-    LogicalFilter(condition=[OR(>($7, 7), >($7, 1))])\n+    LogicalFilter(condition=[SEARCH($7, Sarg[(1..+\u221e)])])\n       LogicalTableScan(table=[[CATALOG, SALES, EMP]])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTUxNg=="}, "originalCommit": {"oid": "061ba0acc3a47ba8cfeba6256f4c1353697e1270"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA2NDc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/RangeSets.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1MDoyOVrOHv8sPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDoyMDo1NlrOHwLLxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzOTQ4Ng==", "bodyText": "Will throw if ranges.isEmpty() because you iterate before you check size. Add a test where this is called on an empty range set.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r520039486", "createdAt": "2020-11-09T18:50:29Z", "author": {"login": "julianhyde"}, "path": "core/src/main/java/org/apache/calcite/util/RangeSets.java", "diffHunk": "@@ -128,6 +129,14 @@ private RangeSets() {}\n         && !range.isEmpty();\n   }\n \n+  /** Returns whether a range set is a single open interval. */\n+  public static <C extends Comparable<C>> boolean isOpenInterval(RangeSet<C> rangeSet) {\n+    final Set<Range<C>> ranges = rangeSet.asRanges();\n+    final Range<C> range = ranges.iterator().next();\n+    return ranges.size() == 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ec77a6639b15a54c695ff4ee3a84dc9c61d8c6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3NjkzMg==", "bodyText": "Agree, have added the tests.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r520276932", "createdAt": "2020-11-10T04:20:56Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/util/RangeSets.java", "diffHunk": "@@ -128,6 +129,14 @@ private RangeSets() {}\n         && !range.isEmpty();\n   }\n \n+  /** Returns whether a range set is a single open interval. */\n+  public static <C extends Comparable<C>> boolean isOpenInterval(RangeSet<C> rangeSet) {\n+    final Set<Range<C>> ranges = rangeSet.asRanges();\n+    final Range<C> range = ranges.iterator().next();\n+    return ranges.size() == 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzOTQ4Ng=="}, "originalCommit": {"oid": "74ec77a6639b15a54c695ff4ee3a84dc9c61d8c6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA3NTU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1MzoxM1rOHv8yuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1MzoxM1rOHv8yuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MTE0NA==", "bodyText": "There is no objective definition of 'simple'. I would claim that 'x <> 5' is simple, and so is 'x IS NOT NULL'. You might disagree.\nSo, this method doesn't belong on Sarg. It belongs in whichever piece of code needs a particular definition of 'simple'.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r520041144", "createdAt": "2020-11-09T18:53:13Z", "author": {"login": "julianhyde"}, "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "diffHunk": "@@ -170,6 +170,14 @@ public boolean isComplementedPoints() {\n             .allMatch(RangeSets::isPoint);\n   }\n \n+  /**\n+   * Returns whether this Sarg can be expanded to more simple form, e.g.\n+   * the IN call or single comparison.\n+   */\n+  public boolean isSimple() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ec77a6639b15a54c695ff4ee3a84dc9c61d8c6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA5MTA1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1NzowMlrOHv88CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDoxODo0NlrOHwLJhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MzUyOA==", "bodyText": "Do you think we should flatten those ANDs in AND(AND(>($0, 0), <($0, 10)), IS NOT NULL($1))? I know it might be difficult to achieve efficiently.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r520043528", "createdAt": "2020-11-09T18:57:02Z", "author": {"login": "julianhyde"}, "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -1687,10 +1687,8 @@ private void checkExponentialCnf(int n) {\n         isNotNull(bRef));\n     // [CALCITE-4352] causes \"and b is not null\" to disappear from the expanded\n     // form.\n-    final String simplified = \"AND(SEARCH($0, Sarg[(0..10)]),\"\n-        + \" SEARCH($1, Sarg[NOT NULL]))\";\n-    final String expanded =\n-        \"AND(AND(>($0, 0), <($0, 10)), IS NOT NULL($1))\";\n+    final String simplified = \"AND(SEARCH($0, Sarg[(0..10)]), IS NOT NULL($1))\";\n+    final String expanded = \"AND(AND(>($0, 0), <($0, 10)), IS NOT NULL($1))\";\n     checkSimplify(expr, simplified)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ec77a6639b15a54c695ff4ee3a84dc9c61d8c6"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3NjM1OQ==", "bodyText": "I agree, have promoted it in the new commit.", "url": "https://github.com/apache/calcite/pull/2238#discussion_r520276359", "createdAt": "2020-11-10T04:18:46Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -1687,10 +1687,8 @@ private void checkExponentialCnf(int n) {\n         isNotNull(bRef));\n     // [CALCITE-4352] causes \"and b is not null\" to disappear from the expanded\n     // form.\n-    final String simplified = \"AND(SEARCH($0, Sarg[(0..10)]),\"\n-        + \" SEARCH($1, Sarg[NOT NULL]))\";\n-    final String expanded =\n-        \"AND(AND(>($0, 0), <($0, 10)), IS NOT NULL($1))\";\n+    final String simplified = \"AND(SEARCH($0, Sarg[(0..10)]), IS NOT NULL($1))\";\n+    final String expanded = \"AND(AND(>($0, 0), <($0, 10)), IS NOT NULL($1))\";\n     checkSimplify(expr, simplified)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MzUyOA=="}, "originalCommit": {"oid": "74ec77a6639b15a54c695ff4ee3a84dc9c61d8c6"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 70, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}