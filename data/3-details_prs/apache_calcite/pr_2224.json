{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NzIxMjA1", "number": 2224, "title": "[CALCITE-4332] Improve error when planning rule produces a relational\u2026", "bodyText": "\u2026 expression with wrong row type", "createdAt": "2020-10-19T06:32:11Z", "url": "https://github.com/apache/calcite/pull/2224", "merged": true, "mergeCommit": {"oid": "f9d23a62145e8c490492214836ce9cd7d1dcc35e"}, "closed": true, "closedAt": "2020-10-27T03:14:49Z", "author": {"login": "chunweilei"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdT-s-TAFqTUxMTQ2Mjc4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWfZNtABqjM5MjM2MDE2NzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDYyNzg3", "url": "https://github.com/apache/calcite/pull/2224#pullrequestreview-511462787", "createdAt": "2020-10-19T07:05:02Z", "commit": {"oid": "e10f5c51380328dc7b8284920b38b294d62f3ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzowNTowMlrOHkAXVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzowNTowMlrOHkAXVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxNjc1Nw==", "bodyText": "Please, remove that.\nThe field count says nothing, and it would be a nightmare to debug errors saying \"one is 5, another one is 6\"\nPlease incorporate that into \"extra field\" / \"field removed\" message.", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507516757", "createdAt": "2020-10-19T07:05:02Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType other,\n+      RelDataType another) {\n+    if (other == another) {\n+      return \"\";\n+    }\n+\n+    if (other.getFieldCount() != another.getFieldCount()) {\n+      return \"Type mismatch: the field size is not equal,\"\n+         + \" one is \" + other.getFieldCount()\n+         + \", another one is \" + another.getFieldCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10f5c51380328dc7b8284920b38b294d62f3ff8"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDY0NjAw", "url": "https://github.com/apache/calcite/pull/2224#pullrequestreview-511464600", "createdAt": "2020-10-19T07:08:07Z", "commit": {"oid": "e10f5c51380328dc7b8284920b38b294d62f3ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzowODowN1rOHkAdAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzowODowN1rOHkAdAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxODIwOQ==", "bodyText": "It is better if we can make a difference which is the source type and which is the target type.", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507518209", "createdAt": "2020-10-19T07:08:07Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType other,\n+      RelDataType another) {\n+    if (other == another) {\n+      return \"\";\n+    }\n+\n+    if (other.getFieldCount() != another.getFieldCount()) {\n+      return \"Type mismatch: the field size is not equal,\"\n+         + \" one is \" + other.getFieldCount()\n+         + \", another one is \" + another.getFieldCount();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10f5c51380328dc7b8284920b38b294d62f3ff8"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDY2Njkw", "url": "https://github.com/apache/calcite/pull/2224#pullrequestreview-511466690", "createdAt": "2020-10-19T07:11:34Z", "commit": {"oid": "e10f5c51380328dc7b8284920b38b294d62f3ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzoxMTozNFrOHkAjjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzoxMTozNFrOHkAjjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxOTg4Nw==", "bodyText": "Do you think the method could take a lambda for the equivalence rather than baking the logic here?\nI think we should use reuse the comparison rather than duplicate logic.", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507519887", "createdAt": "2020-10-19T07:11:34Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType other,\n+      RelDataType another) {\n+    if (other == another) {\n+      return \"\";\n+    }\n+\n+    if (other.getFieldCount() != another.getFieldCount()) {\n+      return \"Type mismatch: the field size is not equal,\"\n+         + \" one is \" + other.getFieldCount()\n+         + \", another one is \" + another.getFieldCount();\n+    }\n+\n+    final StringBuilder stringBuilder = new StringBuilder(\"Type mismatch: \\n\");\n+    final List<RelDataTypeField> f1 = other.getFieldList();\n+    final List<RelDataTypeField> f2 = another.getFieldList();\n+    for (Pair<RelDataTypeField, RelDataTypeField> pair : Pair.zip(f1, f2)) {\n+      final RelDataType type1 = pair.left.getType();\n+      final RelDataType type2 = pair.right.getType();\n+      // If one of the types is ANY comparison should succeed\n+      if (type1.getSqlTypeName() == SqlTypeName.ANY\n+          || type2.getSqlTypeName() == SqlTypeName.ANY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10f5c51380328dc7b8284920b38b294d62f3ff8"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDY3MzIz", "url": "https://github.com/apache/calcite/pull/2224#pullrequestreview-511467323", "createdAt": "2020-10-19T07:12:32Z", "commit": {"oid": "e10f5c51380328dc7b8284920b38b294d62f3ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzoxMjozMlrOHkAleA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzoxMjozMlrOHkAleA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUyMDM3Ng==", "bodyText": "This is nice, however, can you please add a planning case as well to see which message comes out of a planner?", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507520376", "createdAt": "2020-10-19T07:12:32Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java", "diffHunk": "@@ -130,6 +130,43 @@\n         Util.toLinux(RelOptUtil.dumpType(t2) + \"\\n\"));\n   }\n \n+  @Test void testTypeDifference() {\n+    final RelDataTypeFactory typeFactory =\n+        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n+    final RelDataType t1 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 5, 2)\n+            .add(\"f1\", SqlTypeName.VARCHAR, 10)\n+            .build();\n+\n+    RelDataType t2 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 5, 2)\n+            .add(\"f1\", SqlTypeName.VARCHAR, 5)\n+            .build();\n+\n+    TestUtil.assertEqualsVerbose(\n+        TestUtil.fold(\n+            \"Type mismatch: \",\n+            \"f1: VARCHAR(10) NOT NULL -> VARCHAR(5) NOT NULL\",\n+            \"\"),\n+        Util.toLinux(RelOptUtil.getFullTypeDifferenceString(t1, t2) + \"\\n\"));\n+\n+    t2 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 4, 2)\n+            .add(\"f1\", SqlTypeName.BIGINT)\n+            .build();\n+\n+    TestUtil.assertEqualsVerbose(\n+        TestUtil.fold(\n+            \"Type mismatch: \",\n+            \"f0: DECIMAL(5, 2) NOT NULL -> DECIMAL(4, 2) NOT NULL\",\n+            \"f1: VARCHAR(10) NOT NULL -> BIGINT NOT NULL\",\n+            \"\"),\n+        Util.toLinux(RelOptUtil.getFullTypeDifferenceString(t1, t2) + \"\\n\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10f5c51380328dc7b8284920b38b294d62f3ff8"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNjY4NzQy", "url": "https://github.com/apache/calcite/pull/2224#pullrequestreview-511668742", "createdAt": "2020-10-19T11:37:01Z", "commit": {"oid": "6e09e5db15516482bdc123e72f014140cd01fd0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTozNzowMlrOHkKH3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTozNzowMlrOHkKH3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NjYzNw==", "bodyText": "Is this method used anywhere?", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507676637", "createdAt": "2020-10-19T11:37:02Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e09e5db15516482bdc123e72f014140cd01fd0b"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODY3MDk5", "url": "https://github.com/apache/calcite/pull/2224#pullrequestreview-511867099", "createdAt": "2020-10-19T15:07:10Z", "commit": {"oid": "6e09e5db15516482bdc123e72f014140cd01fd0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowNzoxMFrOHkTc4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowNzoxMFrOHkTc4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyOTQ3NQ==", "bodyText": "I'm afraid Type mismatch: the target type has less fields than the source type provides very little information to the developer on what is wrong.", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507829475", "createdAt": "2020-10-19T15:07:10Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType source,\n+      RelDataType target) {\n+    if (source == target) {\n+      return \"\";\n+    }\n+\n+    if (source.getFieldCount() > target.getFieldCount()) {\n+      return \"Type mismatch: the target type has less fields than the source type\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e09e5db15516482bdc123e72f014140cd01fd0b"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTA4NTY1", "url": "https://github.com/apache/calcite/pull/2224#pullrequestreview-512508565", "createdAt": "2020-10-20T09:26:28Z", "commit": {"oid": "6e09e5db15516482bdc123e72f014140cd01fd0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyNjoyOFrOHkzG3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyNjoyOFrOHkzG3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0ODEyNA==", "bodyText": "If the fields are identical, we should not have the prefix \"Type mismatch\"?", "url": "https://github.com/apache/calcite/pull/2224#discussion_r508348124", "createdAt": "2020-10-20T09:26:28Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType source,\n+      RelDataType target) {\n+    if (source == target) {\n+      return \"\";\n+    }\n+\n+    if (source.getFieldCount() > target.getFieldCount()) {\n+      return \"Type mismatch: the target type has less fields than the source type\";\n+    } else if (source.getFieldCount() < target.getFieldCount()) {\n+      return \"Type mismatch: the target type has more fields than the source type\";\n+    }\n+\n+    final StringBuilder stringBuilder = new StringBuilder(\"Type mismatch: \\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e09e5db15516482bdc123e72f014140cd01fd0b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTExMDA1", "url": "https://github.com/apache/calcite/pull/2224#pullrequestreview-512511005", "createdAt": "2020-10-20T09:29:12Z", "commit": {"oid": "6e09e5db15516482bdc123e72f014140cd01fd0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyOToxMlrOHkzObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyOToxMlrOHkzObQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1MDA2MQ==", "bodyText": "Please use assertThrows to make sure that an exception is actually thrown.", "url": "https://github.com/apache/calcite/pull/2224#discussion_r508350061", "createdAt": "2020-10-20T09:29:12Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java", "diffHunk": "@@ -296,6 +300,32 @@\n                 \"PhysSingleRel:RelSubset#0.PHYS.[]\")));\n   }\n \n+  @Test void testTypeMismatch() {\n+    VolcanoPlanner planner = new VolcanoPlanner();\n+    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n+    planner.addRule(MockPhysLeafRule.INSTANCE);\n+\n+    RelOptCluster cluster = newCluster(planner);\n+    NoneLeafRel leafRel =\n+        new NoneLeafRel(\n+            cluster,\n+            \"a\");\n+    RelNode convertedRel =\n+        planner.changeTraits(\n+            leafRel,\n+            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n+    planner.setRoot(convertedRel);\n+    try {\n+      planner.chooseDelegate().findBestExp();\n+    } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e09e5db15516482bdc123e72f014140cd01fd0b"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72e4bb2b2b37eeb4bbe9514b8a22803f1d6e6de2", "author": {"user": {"login": "chunweilei", "name": "chunwei"}}, "url": "https://github.com/apache/calcite/commit/72e4bb2b2b37eeb4bbe9514b8a22803f1d6e6de2", "committedDate": "2020-10-20T11:00:41Z", "message": "address comment"}, "afterCommit": {"oid": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "author": {"user": {"login": "chunweilei", "name": "chunwei"}}, "url": "https://github.com/apache/calcite/commit/c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "committedDate": "2020-10-20T11:19:03Z", "message": "address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMjc2NzQ3", "url": "https://github.com/apache/calcite/pull/2224#pullrequestreview-513276747", "createdAt": "2020-10-21T03:15:11Z", "commit": {"oid": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoxNToxMVrOHlYqpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoxNToxMVrOHlYqpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2MzQ5Mg==", "bodyText": "Maybe we also need a test case for which the types are identical, and the difference string is empty?", "url": "https://github.com/apache/calcite/pull/2224#discussion_r508963492", "createdAt": "2020-10-21T03:15:11Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java", "diffHunk": "@@ -130,6 +130,43 @@\n         Util.toLinux(RelOptUtil.dumpType(t2) + \"\\n\"));\n   }\n \n+  @Test void testTypeDifference() {\n+    final RelDataTypeFactory typeFactory =\n+        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n+    final RelDataType t1 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 5, 2)\n+            .add(\"f1\", SqlTypeName.VARCHAR, 10)\n+            .build();\n+\n+    RelDataType t2 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 5, 2)\n+            .add(\"f1\", SqlTypeName.VARCHAR, 5)\n+            .build();\n+\n+    TestUtil.assertEqualsVerbose(\n+        TestUtil.fold(\n+            \"Type mismatch: \",\n+            \"f1: VARCHAR(10) NOT NULL -> VARCHAR(5) NOT NULL\",\n+            \"\"),\n+        Util.toLinux(RelOptUtil.getFullTypeDifferenceString(t1, t2) + \"\\n\"));\n+\n+    t2 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 4, 2)\n+            .add(\"f1\", SqlTypeName.BIGINT)\n+            .build();\n+\n+    TestUtil.assertEqualsVerbose(\n+        TestUtil.fold(\n+            \"Type mismatch: \",\n+            \"f0: DECIMAL(5, 2) NOT NULL -> DECIMAL(4, 2) NOT NULL\",\n+            \"f1: VARCHAR(10) NOT NULL -> BIGINT NOT NULL\",\n+            \"\"),\n+        Util.toLinux(RelOptUtil.getFullTypeDifferenceString(t1, t2) + \"\\n\"));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzkyMTA1", "url": "https://github.com/apache/calcite/pull/2224#pullrequestreview-513392105", "createdAt": "2020-10-21T07:44:35Z", "commit": {"oid": "3b0e5bb25799446f104f323176109ec10507f8a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b0e5bb25799446f104f323176109ec10507f8a2", "author": {"user": {"login": "chunweilei", "name": "chunwei"}}, "url": "https://github.com/apache/calcite/commit/3b0e5bb25799446f104f323176109ec10507f8a2", "committedDate": "2020-10-21T05:46:16Z", "message": "add more test cases"}, "afterCommit": {"oid": "7bdc1ba4beff32624e6d6e1dbca51913b41d2fd2", "author": {"user": {"login": "chunweilei", "name": "chunwei"}}, "url": "https://github.com/apache/calcite/commit/7bdc1ba4beff32624e6d6e1dbca51913b41d2fd2", "committedDate": "2020-10-22T02:24:57Z", "message": "[CALCITE-4332] Improve error when planning rule produces a relational expression with wrong row type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTc0NjAw", "url": "https://github.com/apache/calcite/pull/2224#pullrequestreview-515174600", "createdAt": "2020-10-22T22:55:44Z", "commit": {"oid": "7bdc1ba4beff32624e6d6e1dbca51913b41d2fd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo1NTo0NFrOHm2oTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo1NTo0NFrOHm2oTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMjk5MQ==", "bodyText": "The message does not help developers.\nHere's a long-standing issue for JUnit4 which was finally fixed in 4.13\nhttps://github.com/junit-team/junit4/blob/HEAD/doc/ReleaseNotes4.13.md#pull-request-1300-show-contents-of-actual-array-when-array-lengths-differ\n\nPreviously, when comparing two arrays which differ in length, assertArrayEquals() would only report that they differ in length. Now, it does the usual array comparison even when arrays differ in length, producing a failure message which combines the difference in length and the first difference in content. Where the content is another array, it is described by its type and length\n\nThat is why \"source has 5 fields, target has 4 fields\" is not really much better than \"something is different\", and it indeed is way worse than the previous error which produced full type dump. At least, there was a possibility to manually inspect and compare types, and now it is lost.", "url": "https://github.com/apache/calcite/pull/2224#discussion_r510502991", "createdAt": "2020-10-22T22:55:44Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,57 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType source,\n+      RelDataType target) {\n+    if (source == target) {\n+      return \"\";\n+    }\n+\n+    final int sourceFieldCount = source.getFieldCount();\n+    final int targetFieldCount = target.getFieldCount();\n+    if (sourceFieldCount != targetFieldCount) {\n+      return \"Type mismatch: the field size of source and target are not equal, \"\n+          + \"the source type has \" + sourceFieldCount + \" fields, \"\n+          + \"while the target type has \" + targetFieldCount + \" fields\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bdc1ba4beff32624e6d6e1dbca51913b41d2fd2"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ca17213bfbda0e2f97441b81461e7adc70d609d", "author": {"user": {"login": "chunweilei", "name": "chunwei"}}, "url": "https://github.com/apache/calcite/commit/2ca17213bfbda0e2f97441b81461e7adc70d609d", "committedDate": "2020-10-27T02:17:32Z", "message": "[CALCITE-4332] Improve error when planning rule produces a relational expression with wrong row type"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d9bbb62c12ffd15adfbc38f6ea76e3926ecb23ac", "author": {"user": {"login": "chunweilei", "name": "chunwei"}}, "url": "https://github.com/apache/calcite/commit/d9bbb62c12ffd15adfbc38f6ea76e3926ecb23ac", "committedDate": "2020-10-23T08:03:09Z", "message": "address comments"}, "afterCommit": {"oid": "2ca17213bfbda0e2f97441b81461e7adc70d609d", "author": {"user": {"login": "chunweilei", "name": "chunwei"}}, "url": "https://github.com/apache/calcite/commit/2ca17213bfbda0e2f97441b81461e7adc70d609d", "committedDate": "2020-10-27T02:17:32Z", "message": "[CALCITE-4332] Improve error when planning rule produces a relational expression with wrong row type"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2970, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}