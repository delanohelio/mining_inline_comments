{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxOTA5MjIz", "number": 1788, "title": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions", "bodyText": "Jira ticket: CALCITE-3285.\nAdded an extra predicate for non-equi condition in EnumerableDefaults#MergeJoinEnumerator (it will be null in case of equi-joins).", "createdAt": "2020-02-06T13:49:04Z", "url": "https://github.com/apache/calcite/pull/1788", "merged": true, "mergeCommit": {"oid": "f76ddd1f02af2d6d335a82acc92a30ccf6d7379d"}, "closed": true, "closedAt": "2020-03-19T17:08:18Z", "author": {"login": "rubenada"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKrYzWABqjMxMDExNTE4ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO1t7CgBqjMxNDEwNzIyNzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da857036b3f6dd64f0ba7760d5bf9c0e5612409f", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/da857036b3f6dd64f0ba7760d5bf9c0e5612409f", "committedDate": "2020-03-04T13:49:01Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}, "afterCommit": {"oid": "d70152b7412757e70c298d990358354121b7f140", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/d70152b7412757e70c298d990358354121b7f140", "committedDate": "2020-03-05T13:11:38Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d70152b7412757e70c298d990358354121b7f140", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/d70152b7412757e70c298d990358354121b7f140", "committedDate": "2020-03-05T13:11:38Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}, "afterCommit": {"oid": "936f22a369f4a90b40264181ce0cdc9a35438546", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/936f22a369f4a90b40264181ce0cdc9a35438546", "committedDate": "2020-03-06T09:43:28Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "936f22a369f4a90b40264181ce0cdc9a35438546", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/936f22a369f4a90b40264181ce0cdc9a35438546", "committedDate": "2020-03-06T09:43:28Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}, "afterCommit": {"oid": "3dd1b99c89a15f1767d3e81b1c99cf596296898d", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/3dd1b99c89a15f1767d3e81b1c99cf596296898d", "committedDate": "2020-03-10T09:00:20Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dd1b99c89a15f1767d3e81b1c99cf596296898d", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/3dd1b99c89a15f1767d3e81b1c99cf596296898d", "committedDate": "2020-03-10T09:00:20Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}, "afterCommit": {"oid": "6f055fd1178cca0c57beaf890550e3f12eb990f9", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/6f055fd1178cca0c57beaf890550e3f12eb990f9", "committedDate": "2020-03-10T09:02:16Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6c109b1f2fb469b9cb394b49d7e87792c1352c6", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/f6c109b1f2fb469b9cb394b49d7e87792c1352c6", "committedDate": "2020-03-13T13:30:17Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}, "afterCommit": {"oid": "88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2", "committedDate": "2020-03-13T13:31:20Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDE1Nzcx", "url": "https://github.com/apache/calcite/pull/1788#pullrequestreview-375015771", "createdAt": "2020-03-16T08:58:15Z", "commit": {"oid": "88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo1ODoxNVrOF2qqRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo1ODoxNVrOF2qqRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM3Mw==", "bodyText": "How is this different from a filter on top of Linq4j.product?\nIf it is not different, then please remove manual for-for.\nIf it is different please add a clarification comment.", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392866373", "createdAt": "2020-03-16T08:58:15Z", "author": {"login": "vlsi"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3911,9 +3936,33 @@ private boolean advance() {\n         }\n         rights.add(right);\n       }\n-      cartesians = Linq4j.product(\n-          ImmutableList.of(Linq4j.enumerator(lefts),\n-              Linq4j.enumerator(rights)));\n+\n+      if (extraPredicate == null) {\n+        cartesians = Linq4j.product(\n+            ImmutableList.of(Linq4j.enumerator(lefts),\n+                Linq4j.enumerator(rights)));\n+      } else {\n+        // we must verify the non equi-join predicate\n+        final List<List<Object>> results = new ArrayList<>();\n+        for (TSource currentLeft : lefts) {\n+          for (TInner currentRight : rights) {\n+            if (extraPredicate.apply(currentLeft, currentRight)) {\n+              final List<Object> result = new ArrayList<>(2);\n+              result.add(currentLeft);\n+              result.add(currentRight);\n+              results.add(result);\n+            }\n+          }\n+        }\n+        if (results.isEmpty()) {\n+          if (done) {\n+            return false;\n+          }\n+          return advance();\n+        } else {\n+          cartesians = Linq4j.enumerator(results);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDE2NTE0", "url": "https://github.com/apache/calcite/pull/1788#pullrequestreview-375016514", "createdAt": "2020-03-16T08:59:21Z", "commit": {"oid": "88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo1OToyMVrOF2qsfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo1OToyMVrOF2qsfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njk0MQ==", "bodyText": "Please add the relevant documentation that clarifies why this extraPredicate is needed and how it is different from a predicate on top of join results.", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392866941", "createdAt": "2020-03-16T08:59:21Z", "author": {"login": "vlsi"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -1971,6 +1972,26 @@ private void closeInner() {\n       final Function2<TSource, TInner, TResult> resultSelector,\n       boolean generateNullsOnLeft,\n       boolean generateNullsOnRight) {\n+    return mergeJoin(outer, inner, outerKeySelector, innerKeySelector, null,\n+        resultSelector, generateNullsOnLeft, generateNullsOnRight);\n+  }\n+\n+  /**\n+   * Joins two inputs that are sorted on the key, with an extra predicate for non equi-join\n+   * conditions (in case of equi-join, it will be null).\n+   * Inputs must sorted in ascending order, nulls last.\n+   * NOTE: The current API is experimental and subject to change without notice.\n+   */\n+  @Experimental\n+  public static <TSource, TInner, TKey extends Comparable<TKey>, TResult> Enumerable<TResult>\n+      mergeJoin(final Enumerable<TSource> outer,\n+      final Enumerable<TInner> inner,\n+      final Function1<TSource, TKey> outerKeySelector,\n+      final Function1<TInner, TKey> innerKeySelector,\n+      final Predicate2<TSource, TInner> extraPredicate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDE5NzI4", "url": "https://github.com/apache/calcite/pull/1788#pullrequestreview-375019728", "createdAt": "2020-03-16T09:04:31Z", "commit": {"oid": "88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTowNDozMVrOF2q2Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTowNDozMVrOF2q2Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2OTQ3MA==", "bodyText": "I would suggest @API(...)", "url": "https://github.com/apache/calcite/pull/1788#discussion_r392869470", "createdAt": "2020-03-16T09:04:31Z", "author": {"login": "vlsi"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -1971,6 +1972,26 @@ private void closeInner() {\n       final Function2<TSource, TInner, TResult> resultSelector,\n       boolean generateNullsOnLeft,\n       boolean generateNullsOnRight) {\n+    return mergeJoin(outer, inner, outerKeySelector, innerKeySelector, null,\n+        resultSelector, generateNullsOnLeft, generateNullsOnRight);\n+  }\n+\n+  /**\n+   * Joins two inputs that are sorted on the key, with an extra predicate for non equi-join\n+   * conditions (in case of equi-join, it will be null).\n+   * Inputs must sorted in ascending order, nulls last.\n+   * NOTE: The current API is experimental and subject to change without notice.\n+   */\n+  @Experimental", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88edc40afd6dc8716a1b40d78d0a3890bb7fcfa2"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTc0OTY4", "url": "https://github.com/apache/calcite/pull/1788#pullrequestreview-375974968", "createdAt": "2020-03-17T12:09:54Z", "commit": {"oid": "10caf1edfdb95d5887d6ab61e7e6a1f82342bb24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjowOTo1NFrOF3Zbdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjowOTo1NFrOF3Zbdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMjYzMA==", "bodyText": "What is the purpose of Arrays.asList and .clone() here?", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393632630", "createdAt": "2020-03-17T12:09:54Z", "author": {"login": "vlsi"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3951,6 +3982,24 @@ public void close() {\n     }\n   }\n \n+  private static class CartesianProductJoinEnumerator<TResult, TOuter, TInner>\n+      extends CartesianProductEnumerator<Object, TResult> {\n+    private final Function2<TOuter, TInner, TResult> resultSelector;\n+\n+    CartesianProductJoinEnumerator(Function2<TOuter, TInner, TResult> resultSelector,\n+                                   Enumerator<Object> outer, Enumerator<Object> inner) {\n+      super(ImmutableList.of(outer, inner));\n+      this.resultSelector = resultSelector;\n+    }\n+\n+    @Override public TResult current() {\n+      final List<Object> list = Arrays.asList(elements.clone());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10caf1edfdb95d5887d6ab61e7e6a1f82342bb24"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTc2MTMz", "url": "https://github.com/apache/calcite/pull/1788#pullrequestreview-375976133", "createdAt": "2020-03-17T12:11:47Z", "commit": {"oid": "10caf1edfdb95d5887d6ab61e7e6a1f82342bb24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoxMTo0OFrOF3ZfSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoxMTo0OFrOF3ZfSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMzYxMQ==", "bodyText": "Should it be typed like Enumerator<TOuter>?", "url": "https://github.com/apache/calcite/pull/1788#discussion_r393633611", "createdAt": "2020-03-17T12:11:48Z", "author": {"login": "vlsi"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3951,6 +3982,24 @@ public void close() {\n     }\n   }\n \n+  private static class CartesianProductJoinEnumerator<TResult, TOuter, TInner>\n+      extends CartesianProductEnumerator<Object, TResult> {\n+    private final Function2<TOuter, TInner, TResult> resultSelector;\n+\n+    CartesianProductJoinEnumerator(Function2<TOuter, TInner, TResult> resultSelector,\n+                                   Enumerator<Object> outer, Enumerator<Object> inner) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10caf1edfdb95d5887d6ab61e7e6a1f82342bb24"}, "originalPosition": 137}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4617d1e32de5caf6a889d5b6cb7b40c4e0806ed", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/d4617d1e32de5caf6a889d5b6cb7b40c4e0806ed", "committedDate": "2020-03-17T12:45:42Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}, "afterCommit": {"oid": "58dd0687e69b8c20382c50eb9899ac8f58e4c65f", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/58dd0687e69b8c20382c50eb9899ac8f58e4c65f", "committedDate": "2020-03-17T17:25:26Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d12d03f0212e94d02da9dae7480b905bffb53c8", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/9d12d03f0212e94d02da9dae7480b905bffb53c8", "committedDate": "2020-03-18T11:35:25Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58dd0687e69b8c20382c50eb9899ac8f58e4c65f", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/58dd0687e69b8c20382c50eb9899ac8f58e4c65f", "committedDate": "2020-03-17T17:25:26Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}, "afterCommit": {"oid": "9d12d03f0212e94d02da9dae7480b905bffb53c8", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/9d12d03f0212e94d02da9dae7480b905bffb53c8", "committedDate": "2020-03-18T11:35:25Z", "message": "[CALCITE-3285] EnumerableMergeJoin should support non-equi join conditions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4215, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}