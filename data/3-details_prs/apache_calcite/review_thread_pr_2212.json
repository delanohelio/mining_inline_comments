{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyOTIzODQw", "number": 2212, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozNjozNFrOEtP7SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzowMjo1MlrOEtQT5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODgyMzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozNjozNFrOHg747g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzowMDozM1rOHg8aRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5NzcxMA==", "bodyText": "Should this be int complexity = rangeSet.asRanges().size(), and then if (...) { complexity = 1;}?", "url": "https://github.com/apache/calcite/pull/2212#discussion_r504297710", "createdAt": "2020-10-13T22:36:34Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "diffHunk": "@@ -149,4 +150,33 @@ public boolean isComplementedPoints() {\n         && rangeSet.complement().asRanges().stream()\n             .allMatch(RangeSets::isPoint);\n   }\n+\n+  /** Returns a measure of the complexity of this expression.\n+   *\n+   * <p>It is basically the number of values that need to be checked against\n+   * (including NULL).\n+   *\n+   * <p>Examples:\n+   * <ul>\n+   *   <li>{@code x = 1}, {@code x <> 1}, {@code x > 1} have complexity 1\n+   *   <li>{@code x > 1 or x is null} has complexity 2\n+   *   <li>{@code x in (2, 4, 6) or x > 20} has complexity 4\n+   *   <li>{@code x between 3 and 8 or x between 10 and 20} has complexity 2\n+   * </ul>\n+   */\n+  public int complexity() {\n+    int complexity;\n+    if (rangeSet.asRanges().size() == 2\n+        && rangeSet.complement().asRanges().size() == 1\n+        && RangeSets.isPoint(\n+            Iterables.getOnlyElement(rangeSet.complement().asRanges()))) {\n+      complexity = 1;\n+    } else {\n+      complexity = rangeSet.asRanges().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf7a8d25157dda11f6c295b066f9337076e5c5b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwMDg3Mw==", "bodyText": "It's a matter of taste. I prefer not to re-assign variables.", "url": "https://github.com/apache/calcite/pull/2212#discussion_r504300873", "createdAt": "2020-10-13T22:45:21Z", "author": {"login": "julianhyde"}, "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "diffHunk": "@@ -149,4 +150,33 @@ public boolean isComplementedPoints() {\n         && rangeSet.complement().asRanges().stream()\n             .allMatch(RangeSets::isPoint);\n   }\n+\n+  /** Returns a measure of the complexity of this expression.\n+   *\n+   * <p>It is basically the number of values that need to be checked against\n+   * (including NULL).\n+   *\n+   * <p>Examples:\n+   * <ul>\n+   *   <li>{@code x = 1}, {@code x <> 1}, {@code x > 1} have complexity 1\n+   *   <li>{@code x > 1 or x is null} has complexity 2\n+   *   <li>{@code x in (2, 4, 6) or x > 20} has complexity 4\n+   *   <li>{@code x between 3 and 8 or x between 10 and 20} has complexity 2\n+   * </ul>\n+   */\n+  public int complexity() {\n+    int complexity;\n+    if (rangeSet.asRanges().size() == 2\n+        && rangeSet.complement().asRanges().size() == 1\n+        && RangeSets.isPoint(\n+            Iterables.getOnlyElement(rangeSet.complement().asRanges()))) {\n+      complexity = 1;\n+    } else {\n+      complexity = rangeSet.asRanges().size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5NzcxMA=="}, "originalCommit": {"oid": "ecf7a8d25157dda11f6c295b066f9337076e5c5b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwNjI0Ng==", "bodyText": "Then please avoid re-computing the same things again and again.\nIt is hard to review and analyze how these .asRanges().size() differ.", "url": "https://github.com/apache/calcite/pull/2212#discussion_r504306246", "createdAt": "2020-10-13T23:00:33Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "diffHunk": "@@ -149,4 +150,33 @@ public boolean isComplementedPoints() {\n         && rangeSet.complement().asRanges().stream()\n             .allMatch(RangeSets::isPoint);\n   }\n+\n+  /** Returns a measure of the complexity of this expression.\n+   *\n+   * <p>It is basically the number of values that need to be checked against\n+   * (including NULL).\n+   *\n+   * <p>Examples:\n+   * <ul>\n+   *   <li>{@code x = 1}, {@code x <> 1}, {@code x > 1} have complexity 1\n+   *   <li>{@code x > 1 or x is null} has complexity 2\n+   *   <li>{@code x in (2, 4, 6) or x > 20} has complexity 4\n+   *   <li>{@code x between 3 and 8 or x between 10 and 20} has complexity 2\n+   * </ul>\n+   */\n+  public int complexity() {\n+    int complexity;\n+    if (rangeSet.asRanges().size() == 2\n+        && rangeSet.complement().asRanges().size() == 1\n+        && RangeSets.isPoint(\n+            Iterables.getOnlyElement(rangeSet.complement().asRanges()))) {\n+      complexity = 1;\n+    } else {\n+      complexity = rangeSet.asRanges().size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5NzcxMA=="}, "originalCommit": {"oid": "ecf7a8d25157dda11f6c295b066f9337076e5c5b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODg4NjEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzowMjo1MlrOHg8ddw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzowODowMFrOHg8j2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwNzA2Mw==", "bodyText": "Is this computation important for something?\nPlease add the relevant comment: if it is important, then clarify so. If it is just a fine detail, then comment so. The intention behind the conditions is not really visible.", "url": "https://github.com/apache/calcite/pull/2212#discussion_r504307063", "createdAt": "2020-10-13T23:02:52Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "diffHunk": "@@ -149,4 +150,33 @@ public boolean isComplementedPoints() {\n         && rangeSet.complement().asRanges().stream()\n             .allMatch(RangeSets::isPoint);\n   }\n+\n+  /** Returns a measure of the complexity of this expression.\n+   *\n+   * <p>It is basically the number of values that need to be checked against\n+   * (including NULL).\n+   *\n+   * <p>Examples:\n+   * <ul>\n+   *   <li>{@code x = 1}, {@code x <> 1}, {@code x > 1} have complexity 1\n+   *   <li>{@code x > 1 or x is null} has complexity 2\n+   *   <li>{@code x in (2, 4, 6) or x > 20} has complexity 4\n+   *   <li>{@code x between 3 and 8 or x between 10 and 20} has complexity 2\n+   * </ul>\n+   */\n+  public int complexity() {\n+    int complexity;\n+    if (rangeSet.asRanges().size() == 2\n+        && rangeSet.complement().asRanges().size() == 1\n+        && RangeSets.isPoint(\n+            Iterables.getOnlyElement(rangeSet.complement().asRanges()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf7a8d25157dda11f6c295b066f9337076e5c5b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwNzQ0OQ==", "bodyText": "Oh, this code already existed. Then I'm puzzled.", "url": "https://github.com/apache/calcite/pull/2212#discussion_r504307449", "createdAt": "2020-10-13T23:04:00Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "diffHunk": "@@ -149,4 +150,33 @@ public boolean isComplementedPoints() {\n         && rangeSet.complement().asRanges().stream()\n             .allMatch(RangeSets::isPoint);\n   }\n+\n+  /** Returns a measure of the complexity of this expression.\n+   *\n+   * <p>It is basically the number of values that need to be checked against\n+   * (including NULL).\n+   *\n+   * <p>Examples:\n+   * <ul>\n+   *   <li>{@code x = 1}, {@code x <> 1}, {@code x > 1} have complexity 1\n+   *   <li>{@code x > 1 or x is null} has complexity 2\n+   *   <li>{@code x in (2, 4, 6) or x > 20} has complexity 4\n+   *   <li>{@code x between 3 and 8 or x between 10 and 20} has complexity 2\n+   * </ul>\n+   */\n+  public int complexity() {\n+    int complexity;\n+    if (rangeSet.asRanges().size() == 2\n+        && rangeSet.complement().asRanges().size() == 1\n+        && RangeSets.isPoint(\n+            Iterables.getOnlyElement(rangeSet.complement().asRanges()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwNzA2Mw=="}, "originalCommit": {"oid": "ecf7a8d25157dda11f6c295b066f9337076e5c5b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwODY5OQ==", "bodyText": "Yeah, there aren't many comments in the code. But there are reasonable method javadoc comments. Also a test, testSargComplexity. Run the test, and all will become clear.\nI moved the code so that I could add a test.", "url": "https://github.com/apache/calcite/pull/2212#discussion_r504308699", "createdAt": "2020-10-13T23:08:00Z", "author": {"login": "julianhyde"}, "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "diffHunk": "@@ -149,4 +150,33 @@ public boolean isComplementedPoints() {\n         && rangeSet.complement().asRanges().stream()\n             .allMatch(RangeSets::isPoint);\n   }\n+\n+  /** Returns a measure of the complexity of this expression.\n+   *\n+   * <p>It is basically the number of values that need to be checked against\n+   * (including NULL).\n+   *\n+   * <p>Examples:\n+   * <ul>\n+   *   <li>{@code x = 1}, {@code x <> 1}, {@code x > 1} have complexity 1\n+   *   <li>{@code x > 1 or x is null} has complexity 2\n+   *   <li>{@code x in (2, 4, 6) or x > 20} has complexity 4\n+   *   <li>{@code x between 3 and 8 or x between 10 and 20} has complexity 2\n+   * </ul>\n+   */\n+  public int complexity() {\n+    int complexity;\n+    if (rangeSet.asRanges().size() == 2\n+        && rangeSet.complement().asRanges().size() == 1\n+        && RangeSets.isPoint(\n+            Iterables.getOnlyElement(rangeSet.complement().asRanges()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwNzA2Mw=="}, "originalCommit": {"oid": "ecf7a8d25157dda11f6c295b066f9337076e5c5b"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 52, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}