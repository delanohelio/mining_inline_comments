{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMTMzNDEz", "number": 2266, "title": " [CALCITE-4402] SqlCall#equalsDeep does not take into account the function quantifier", "bodyText": "The method equalsDeep of SqlCall will returns wrong result when used to compare count and count_distinct, because it does not compare the functionQuantifier", "createdAt": "2020-11-17T04:38:22Z", "url": "https://github.com/apache/calcite/pull/2266", "merged": true, "mergeCommit": {"oid": "5a847ea0c33113a3052bed4266700a9bde0eb16b"}, "closed": true, "closedAt": "2020-11-19T08:23:19Z", "author": {"login": "hqx871"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddXO8tgFqTUzMjIzNjA3NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABddr_iAgH2gAyNTIyMTMzNDEzOmRiMWQ5OWE0YTgyMTg5OWYwNTMzMTg3ZmVhMzQzMGJkNTc1ZDE0MmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMjM2MDc0", "url": "https://github.com/apache/calcite/pull/2266#pullrequestreview-532236074", "createdAt": "2020-11-17T10:45:11Z", "commit": {"oid": "124c059a299d35a84647746a404faee32e9b73ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDo0NToxMVrOH0u7tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDo0NToxMVrOH0u7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA1Njk1MQ==", "bodyText": "Please factor this to a method with two expression arguments.\nThe method should be like assertThat(\"{\" + expr1 + \"}.equalsDeep({\" + expr2 + \"})\", parseExpression(expr1).equals(parseExpression(expr2)), is(..))", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525056951", "createdAt": "2020-11-17T10:45:11Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/sql/test/SqlEqualsDeepTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.sql.test;\n+\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.util.Litmus;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+/**\n+ * Unit test for fix [CALCITE-4402] The equalsDeep returns wrong result.\n+ */\n+class SqlEqualsDeepTest {\n+\n+  @Test void testCountEqualsDeep() throws SqlParseException {\n+\n+    SqlNode countExpression = parseExpression(\"count(a)\");\n+    SqlNode countDistinctExpression = parseExpression(\"count(distinct a)\");\n+\n+    assertThat(\"count(a) doesn't equals count(a)\",\n+        countExpression.equalsDeep(parseExpression(\"count(a)\"), Litmus.IGNORE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "124c059a299d35a84647746a404faee32e9b73ed"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMjgxMzk5", "url": "https://github.com/apache/calcite/pull/2266#pullrequestreview-532281399", "createdAt": "2020-11-17T11:46:00Z", "commit": {"oid": "1f91bb15fd22372c7adf4deeff1e04da3c70e9d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0NjowMFrOH0xHnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0NjowMFrOH0xHnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5Mjc2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                boolean actual = sqlNode0.equalsDeep(sqlNode1, Litmus.IGNORE);\n          \n          \n            \n                String reason = expr0 + \" equals \" + expr1;\n          \n          \n            \n            \n          \n          \n            \n                assertEquals(expected, actual, reason);\n          \n          \n            \n                assertEquals(expected, sqlNode0.equalsDeep(sqlNode1, Litmus.IGNORE), () -> expr0 + \" equalsDeep \" + expr1);", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525092764", "createdAt": "2020-11-17T11:46:00Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/sql/test/SqlEqualsDeepTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.sql.test;\n+\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.util.Litmus;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Unit test for fix [CALCITE-4402] equalsDeep.\n+ */\n+class SqlEqualsDeepTest {\n+\n+  @Test void testCountEqualsDeep() throws SqlParseException {\n+    assertEqualsDeep(\"count(a)\", \"count(a)\", true);\n+    assertEqualsDeep(\"count(distinct a)\", \"count(distinct a)\", true);\n+    assertEqualsDeep(\"count(distinct a)\", \"count(a)\", false);\n+  }\n+\n+  private void assertEqualsDeep(String expr0, String expr1, boolean expected)\n+      throws SqlParseException {\n+\n+    SqlNode sqlNode0 = parseExpression(expr0);\n+    SqlNode sqlNode1 = parseExpression(expr1);\n+    boolean actual = sqlNode0.equalsDeep(sqlNode1, Litmus.IGNORE);\n+    String reason = expr0 + \" equals \" + expr1;\n+\n+    assertEquals(expected, actual, reason);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f91bb15fd22372c7adf4deeff1e04da3c70e9d7"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMzA3NDA5", "url": "https://github.com/apache/calcite/pull/2266#pullrequestreview-532307409", "createdAt": "2020-11-17T12:22:02Z", "commit": {"oid": "2e516cf445e1d4010f49606fe9aa65f509a9ae6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjoyMjowMlrOH0yWSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjoyMjowMlrOH0yWSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExMjkwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return litmus.fail(\"{} != {}\", this, node);\n          \n          \n            \n                  return litmus.fail(\"{} != {} (functionQualifier differs)\", this, node);", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525112906", "createdAt": "2020-11-17T12:22:02Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCall.java", "diffHunk": "@@ -146,6 +146,9 @@ public int operandCount() {\n       return litmus.fail(\"{} != {}\", this, node);\n     }\n     SqlCall that = (SqlCall) node;\n+    if (!equalDeep(this.getFunctionQuantifier(), that.getFunctionQuantifier(), litmus)) {\n+      return litmus.fail(\"{} != {}\", this, node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e516cf445e1d4010f49606fe9aa65f509a9ae6e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMjE2MjM4", "url": "https://github.com/apache/calcite/pull/2266#pullrequestreview-533216238", "createdAt": "2020-11-18T08:45:26Z", "commit": {"oid": "6edd09ff1e60f8da1373cf00bd9b4c2aba295ec3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo0NToyNlrOH1i2iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo0NToyNlrOH1i2iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNzU5NQ==", "bodyText": "minor: message says \"functionQualifier\", and I guess it should be \"function quantifier\".\nAlso, personally I would prefer to add this new check after the operator's name check (i.e. reach the verification of function quantifier only in those cases where operator names' match).", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525907595", "createdAt": "2020-11-18T08:45:26Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCall.java", "diffHunk": "@@ -146,6 +146,9 @@ public int operandCount() {\n       return litmus.fail(\"{} != {}\", this, node);\n     }\n     SqlCall that = (SqlCall) node;\n+    if (!equalDeep(this.getFunctionQuantifier(), that.getFunctionQuantifier(), litmus)) {\n+      return litmus.fail(\"{} != {} (functionQualifier differs)\", this, node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6edd09ff1e60f8da1373cf00bd9b4c2aba295ec3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMjE5OTIy", "url": "https://github.com/apache/calcite/pull/2266#pullrequestreview-533219922", "createdAt": "2020-11-18T08:49:52Z", "commit": {"oid": "6edd09ff1e60f8da1373cf00bd9b4c2aba295ec3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo0OTo1MlrOH1jBHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo0OTo1MlrOH1jBHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMDMwMg==", "bodyText": "minor: usually javadoc for test cases related to a certain Jira follow the following format:\n  /** Test case for\n   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-4402\">[CALCITE-4402]\n   * SqlCall#equalsDeep does not take into account the function quantifier</a>. */", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525910302", "createdAt": "2020-11-18T08:49:52Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/sql/test/SqlEqualsDeepTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.sql.test;\n+\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.util.Litmus;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6edd09ff1e60f8da1373cf00bd9b4c2aba295ec3"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzE1NjY2", "url": "https://github.com/apache/calcite/pull/2266#pullrequestreview-533315666", "createdAt": "2020-11-18T10:43:16Z", "commit": {"oid": "123337e62ec60fdcdf7b43fb90491501ea100ac0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo0MzoxN1rOH1npOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo0MzoxN1rOH1npOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NjEwNA==", "bodyText": "Sorry, the message still uses an incorrect term :\n\"function qualifier differs\"\nit should be\n\"function quantifier differs\"\nAlso, please add you name between parenthesis at the end of the commit message, as per https://calcite.apache.org/develop/#contributing \"If you are not a committer, add your name in parentheses at the end of the message\"", "url": "https://github.com/apache/calcite/pull/2266#discussion_r525986104", "createdAt": "2020-11-18T10:43:17Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCall.java", "diffHunk": "@@ -153,6 +153,9 @@ public int operandCount() {\n     if (!this.getOperator().getName().equalsIgnoreCase(that.getOperator().getName())) {\n       return litmus.fail(\"{} != {}\", this, node);\n     }\n+    if (!equalDeep(this.getFunctionQuantifier(), that.getFunctionQuantifier(), litmus)) {\n+      return litmus.fail(\"{} != {} (function qualifier differs)\", this, node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123337e62ec60fdcdf7b43fb90491501ea100ac0"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db1d99a4a821899f0533187fea3430bd575d142d", "author": {"user": null}, "url": "https://github.com/apache/calcite/commit/db1d99a4a821899f0533187fea3430bd575d142d", "committedDate": "2020-11-18T10:56:21Z", "message": "[CALCITE-4402] SqlCall#equalsDeep does not take into account the function quantifier (Huang Qixiang)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4977, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}