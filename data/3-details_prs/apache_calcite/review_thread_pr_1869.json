{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjk0MjAz", "number": 1869, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyMTo0MlrODqqxIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzowNjo0OVrODrg6nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY3NDg4OnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyMTo0MlrOF6jhLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1NzoxMFrOF66Bwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0MzY2MA==", "bodyText": "How should we validate the rule description pattern now ?", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396943660", "createdAt": "2020-03-24T07:21:42Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -130,24 +125,15 @@ public void checkCancel() {\n    *\n    * @param rule Rule\n    */\n-  protected void mapRuleDescription(RelOptRule rule) {\n-    // Check that there isn't a rule with the same description,\n-    // also validating description string.\n-\n+  protected boolean mapRuleDescription(RelOptRule rule) {\n+    // Check that there isn't a rule with the same description\n     final String description = rule.toString();\n     assert description != null;\n-    assert !description.contains(\"$\")\n-        : \"Rule's description should not contain '$': \"\n-        + description;\n-    assert !INTEGER_PATTERN.matcher(description).matches()\n-        : \"Rule's description should not be an integer: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxMjQ1MA==", "bodyText": "When creating the rule", "url": "https://github.com/apache/calcite/pull/1869#discussion_r397312450", "createdAt": "2020-03-24T16:57:10Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -130,24 +125,15 @@ public void checkCancel() {\n    *\n    * @param rule Rule\n    */\n-  protected void mapRuleDescription(RelOptRule rule) {\n-    // Check that there isn't a rule with the same description,\n-    // also validating description string.\n-\n+  protected boolean mapRuleDescription(RelOptRule rule) {\n+    // Check that there isn't a rule with the same description\n     final String description = rule.toString();\n     assert description != null;\n-    assert !description.contains(\"$\")\n-        : \"Rule's description should not contain '$': \"\n-        + description;\n-    assert !INTEGER_PATTERN.matcher(description).matches()\n-        : \"Rule's description should not be an integer: \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0MzY2MA=="}, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDk0NzE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1MToxMFrOF6mMVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMjozMjozNFrOF9M0ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw==", "bodyText": "With this change the map becomes the main data structure holding the rules so I think the Javadoc should be updated to reflect this. Increasing the visibility of the field makes it public API; it might be better to keep this private and rely on public/protected methods to recover the necessary info.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396987477", "createdAt": "2020-03-24T08:51:10Z", "author": {"login": "zabetak"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -44,18 +44,13 @@\n  * Abstract base for implementations of the {@link RelOptPlanner} interface.\n  */\n public abstract class AbstractRelOptPlanner implements RelOptPlanner {\n-  //~ Static fields/initializers ---------------------------------------------\n-\n-  /** Regular expression for integer. */\n-  private static final Pattern INTEGER_PATTERN = Pattern.compile(\"[0-9]+\");\n-\n   //~ Instance fields --------------------------------------------------------\n \n   /**\n    * Maps rule description to rule, just to ensure that rules' descriptions\n    * are unique.\n    */\n-  private final Map<String, RelOptRule> mapDescToRule = new HashMap<>();\n+  protected final Map<String, RelOptRule> mapDescToRule = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxOTYyOA==", "bodyText": "I think we may need to change it to LinkedHashMap to be consistent with the requirement of HepPlanner.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r397319628", "createdAt": "2020-03-24T17:07:18Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -44,18 +44,13 @@\n  * Abstract base for implementations of the {@link RelOptPlanner} interface.\n  */\n public abstract class AbstractRelOptPlanner implements RelOptPlanner {\n-  //~ Static fields/initializers ---------------------------------------------\n-\n-  /** Regular expression for integer. */\n-  private static final Pattern INTEGER_PATTERN = Pattern.compile(\"[0-9]+\");\n-\n   //~ Instance fields --------------------------------------------------------\n \n   /**\n    * Maps rule description to rule, just to ensure that rules' descriptions\n    * are unique.\n    */\n-  private final Map<String, RelOptRule> mapDescToRule = new HashMap<>();\n+  protected final Map<String, RelOptRule> mapDescToRule = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw=="}, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Mjg4OQ==", "bodyText": "It turns out we still need it to be protected to avoid copying.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398182889", "createdAt": "2020-03-25T21:31:50Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -44,18 +44,13 @@\n  * Abstract base for implementations of the {@link RelOptPlanner} interface.\n  */\n public abstract class AbstractRelOptPlanner implements RelOptPlanner {\n-  //~ Static fields/initializers ---------------------------------------------\n-\n-  /** Regular expression for integer. */\n-  private static final Pattern INTEGER_PATTERN = Pattern.compile(\"[0-9]+\");\n-\n   //~ Instance fields --------------------------------------------------------\n \n   /**\n    * Maps rule description to rule, just to ensure that rules' descriptions\n    * are unique.\n    */\n-  private final Map<String, RelOptRule> mapDescToRule = new HashMap<>();\n+  protected final Map<String, RelOptRule> mapDescToRule = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw=="}, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxMDE4Ng==", "bodyText": "I think that in most cases the number of rules is not very big so I was thinking that copying vs. mapDescToRule.values() is not going to have significant performance overhead in the planning phase, thus, I tend to prefer better encapsulation. Having that said, I do not have any concrete measures to support my claims (just instinct that could be wrong) :)", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398410186", "createdAt": "2020-03-26T09:00:53Z", "author": {"login": "zabetak"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -44,18 +44,13 @@\n  * Abstract base for implementations of the {@link RelOptPlanner} interface.\n  */\n public abstract class AbstractRelOptPlanner implements RelOptPlanner {\n-  //~ Static fields/initializers ---------------------------------------------\n-\n-  /** Regular expression for integer. */\n-  private static final Pattern INTEGER_PATTERN = Pattern.compile(\"[0-9]+\");\n-\n   //~ Instance fields --------------------------------------------------------\n \n   /**\n    * Maps rule description to rule, just to ensure that rules' descriptions\n    * are unique.\n    */\n-  private final Map<String, RelOptRule> mapDescToRule = new HashMap<>();\n+  protected final Map<String, RelOptRule> mapDescToRule = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw=="}, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NTI2MQ==", "bodyText": "I agree the rules is not very big. But in onNewClass, every time we add a new logical/physical operator we have to copy it. It will copy N times depends on how many operators you have. Though not a significant overhead, but I think we still need to avoid multiple times copy.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r399585261", "createdAt": "2020-03-27T23:45:10Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -44,18 +44,13 @@\n  * Abstract base for implementations of the {@link RelOptPlanner} interface.\n  */\n public abstract class AbstractRelOptPlanner implements RelOptPlanner {\n-  //~ Static fields/initializers ---------------------------------------------\n-\n-  /** Regular expression for integer. */\n-  private static final Pattern INTEGER_PATTERN = Pattern.compile(\"[0-9]+\");\n-\n   //~ Instance fields --------------------------------------------------------\n \n   /**\n    * Maps rule description to rule, just to ensure that rules' descriptions\n    * are unique.\n    */\n-  private final Map<String, RelOptRule> mapDescToRule = new HashMap<>();\n+  protected final Map<String, RelOptRule> mapDescToRule = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw=="}, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNzQ3Ng==", "bodyText": "I'm fine with any option so I am leaving the final decision up to you :)", "url": "https://github.com/apache/calcite/pull/1869#discussion_r399717476", "createdAt": "2020-03-28T22:32:34Z", "author": {"login": "zabetak"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -44,18 +44,13 @@\n  * Abstract base for implementations of the {@link RelOptPlanner} interface.\n  */\n public abstract class AbstractRelOptPlanner implements RelOptPlanner {\n-  //~ Static fields/initializers ---------------------------------------------\n-\n-  /** Regular expression for integer. */\n-  private static final Pattern INTEGER_PATTERN = Pattern.compile(\"[0-9]+\");\n-\n   //~ Instance fields --------------------------------------------------------\n \n   /**\n    * Maps rule description to rule, just to ensure that rules' descriptions\n    * are unique.\n    */\n-  private final Map<String, RelOptRule> mapDescToRule = new HashMap<>();\n+  protected final Map<String, RelOptRule> mapDescToRule = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw=="}, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDk1NzgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1NDowMFrOF6mS7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1NDowMFrOF6mS7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4OTE2Nw==", "bodyText": "The method now basically registers the rule to the planner so it might be better to rename this entirely to addRule.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396989167", "createdAt": "2020-03-24T08:54:00Z", "author": {"login": "zabetak"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -130,24 +125,15 @@ public void checkCancel() {\n    *\n    * @param rule Rule\n    */\n-  protected void mapRuleDescription(RelOptRule rule) {\n-    // Check that there isn't a rule with the same description,\n-    // also validating description string.\n-\n+  protected boolean mapRuleDescription(RelOptRule rule) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDk2MDQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1NDo0NlrOF6mUxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowODo1MFrOF7Lhaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4OTYzNw==", "bodyText": "Rename this to removeRule and update the Javadoc?", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396989637", "createdAt": "2020-03-24T08:54:46Z", "author": {"login": "zabetak"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -156,16 +142,18 @@ protected void mapRuleDescription(RelOptRule rule) {\n             + \"existing rule=\" + existingRule + \"; new rule=\" + rule);\n       }\n     }\n+    return true;\n   }\n \n   /**\n    * Removes the mapping between a rule and its description.\n    *\n    * @param rule Rule\n+   * @return the rule that is removed, or null if no rule is removed\n    */\n-  protected void unmapRuleDescription(RelOptRule rule) {\n+  protected RelOptRule unmapRuleDescription(RelOptRule rule) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxODk5Mw==", "bodyText": "will do", "url": "https://github.com/apache/calcite/pull/1869#discussion_r397318993", "createdAt": "2020-03-24T17:06:22Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -156,16 +142,18 @@ protected void mapRuleDescription(RelOptRule rule) {\n             + \"existing rule=\" + existingRule + \"; new rule=\" + rule);\n       }\n     }\n+    return true;\n   }\n \n   /**\n    * Removes the mapping between a rule and its description.\n    *\n    * @param rule Rule\n+   * @return the rule that is removed, or null if no rule is removed\n    */\n-  protected void unmapRuleDescription(RelOptRule rule) {\n+  protected RelOptRule unmapRuleDescription(RelOptRule rule) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4OTYzNw=="}, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5OTA4Mw==", "bodyText": "The parameter of this method is weird, should be string description of the rule, like removeRule(String desc) ?", "url": "https://github.com/apache/calcite/pull/1869#discussion_r397599083", "createdAt": "2020-03-25T04:08:50Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -156,16 +142,18 @@ protected void mapRuleDescription(RelOptRule rule) {\n             + \"existing rule=\" + existingRule + \"; new rule=\" + rule);\n       }\n     }\n+    return true;\n   }\n \n   /**\n    * Removes the mapping between a rule and its description.\n    *\n    * @param rule Rule\n+   * @return the rule that is removed, or null if no rule is removed\n    */\n-  protected void unmapRuleDescription(RelOptRule rule) {\n+  protected RelOptRule unmapRuleDescription(RelOptRule rule) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4OTYzNw=="}, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDk3OTU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1OTozOVrOF6mg2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowNjoxMFrOF66auQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MjczMA==", "bodyText": "Would it be a good idea to move the method to AbstractRelOptPlanner? This would allow us to keep mapDescToRule private and replace calls to mapDescToRule.values() with calls to this method.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396992730", "createdAt": "2020-03-24T08:59:39Z", "author": {"login": "zabetak"}, "path": "core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "diffHunk": "@@ -392,35 +382,24 @@ public RelSet getSet(RelNode rel) {\n     this.mapRel2Subset.clear();\n     this.relImportances.clear();\n     this.ruleQueue.clear();\n-    this.ruleNames.clear();\n     this.materializations.clear();\n     this.latticeByName.clear();\n     this.provenanceMap.clear();\n   }\n \n   public List<RelOptRule> getRules() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxODg0MQ==", "bodyText": "Yes.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r397318841", "createdAt": "2020-03-24T17:06:10Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "diffHunk": "@@ -392,35 +382,24 @@ public RelSet getSet(RelNode rel) {\n     this.mapRel2Subset.clear();\n     this.relImportances.clear();\n     this.ruleQueue.clear();\n-    this.ruleNames.clear();\n     this.materializations.clear();\n     this.latticeByName.clear();\n     this.provenanceMap.clear();\n   }\n \n   public List<RelOptRule> getRules() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MjczMA=="}, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDk4NzAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowMTozNlrOF6mlkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzo1NzoyMFrOF7ytpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzkzNg==", "bodyText": "If we choose to add this method to the superclass (instead of having mapRuleDescription) then here we can ovverride.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396993936", "createdAt": "2020-03-24T09:01:36Z", "author": {"login": "zabetak"}, "path": "core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "diffHunk": "@@ -392,35 +382,24 @@ public RelSet getSet(RelNode rel) {\n     this.mapRel2Subset.clear();\n     this.relImportances.clear();\n     this.ruleQueue.clear();\n-    this.ruleNames.clear();\n     this.materializations.clear();\n     this.latticeByName.clear();\n     this.provenanceMap.clear();\n   }\n \n   public List<RelOptRule> getRules() {\n-    return ImmutableList.copyOf(ruleSet);\n+    return ImmutableList.copyOf(mapDescToRule.values());\n   }\n \n   public boolean addRule(RelOptRule rule) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0MTE5MQ==", "bodyText": "@zabetak I have addressed your comments. Thanks.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398241191", "createdAt": "2020-03-25T23:57:20Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "diffHunk": "@@ -392,35 +382,24 @@ public RelSet getSet(RelNode rel) {\n     this.mapRel2Subset.clear();\n     this.relImportances.clear();\n     this.ruleQueue.clear();\n-    this.ruleNames.clear();\n     this.materializations.clear();\n     this.latticeByName.clear();\n     this.provenanceMap.clear();\n   }\n \n   public List<RelOptRule> getRules() {\n-    return ImmutableList.copyOf(ruleSet);\n+    return ImmutableList.copyOf(mapDescToRule.values());\n   }\n \n   public boolean addRule(RelOptRule rule) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzkzNg=="}, "originalCommit": {"oid": "2df439464cac8321e5ed3c98d278c57193501dbb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTU0NjUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzowNjo0OVrOF75owQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMTowNTozMlrOF8fxyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1NDYyNQ==", "bodyText": "If we already know the size of mapDescToRule, we can create a set with exact size, which will eliminate capacity expansion overhead and space waste when creating. Even though this is trivial update, I think it is always a good manner to create collection in such way if possible.\ninstruction.ruleSet = Sets.newHashSetWithExpectedSize(mapDescToRule.size());", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398354625", "createdAt": "2020-03-26T07:06:49Z", "author": {"login": "neoremind"}, "path": "core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java", "diffHunk": "@@ -275,7 +253,7 @@ void executeInstruction(\n     LOGGER.trace(\"Applying rule class {}\", instruction.ruleClass);\n     if (instruction.ruleSet == null) {\n       instruction.ruleSet = new LinkedHashSet<>();\n-      for (RelOptRule rule : allRules) {\n+      for (RelOptRule rule : mapDescToRule.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f913d76fb488d6b6615b74be38d6edf9699c12"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2MjM2Mw==", "bodyText": "Yes, will do.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398362363", "createdAt": "2020-03-26T07:27:08Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java", "diffHunk": "@@ -275,7 +253,7 @@ void executeInstruction(\n     LOGGER.trace(\"Applying rule class {}\", instruction.ruleClass);\n     if (instruction.ruleSet == null) {\n       instruction.ruleSet = new LinkedHashSet<>();\n-      for (RelOptRule rule : allRules) {\n+      for (RelOptRule rule : mapDescToRule.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1NDYyNQ=="}, "originalCommit": {"oid": "19f913d76fb488d6b6615b74be38d6edf9699c12"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMzY5OA==", "bodyText": "It turns out the size instruction.ruleSet is undetermined, we don't know the exact size. So I will leave as it is.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398933698", "createdAt": "2020-03-26T22:37:05Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java", "diffHunk": "@@ -275,7 +253,7 @@ void executeInstruction(\n     LOGGER.trace(\"Applying rule class {}\", instruction.ruleClass);\n     if (instruction.ruleSet == null) {\n       instruction.ruleSet = new LinkedHashSet<>();\n-      for (RelOptRule rule : allRules) {\n+      for (RelOptRule rule : mapDescToRule.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1NDYyNQ=="}, "originalCommit": {"oid": "19f913d76fb488d6b6615b74be38d6edf9699c12"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3OTUyOQ==", "bodyText": "I agree, there is \"if\" check to determine what to be added. I didn't find that out clearly, sorry about the false alert.", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398979529", "createdAt": "2020-03-27T01:05:32Z", "author": {"login": "neoremind"}, "path": "core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java", "diffHunk": "@@ -275,7 +253,7 @@ void executeInstruction(\n     LOGGER.trace(\"Applying rule class {}\", instruction.ruleClass);\n     if (instruction.ruleSet == null) {\n       instruction.ruleSet = new LinkedHashSet<>();\n-      for (RelOptRule rule : allRules) {\n+      for (RelOptRule rule : mapDescToRule.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1NDYyNQ=="}, "originalCommit": {"oid": "19f913d76fb488d6b6615b74be38d6edf9699c12"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 223, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}