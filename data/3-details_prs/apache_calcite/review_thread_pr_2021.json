{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTA3Njgw", "number": 2021, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTowNTowN1rOEHJbxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToxMToxMFrOEHnYxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTMwMDUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTowNTowN1rOGmYDzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoyNjoxOVrOGnILUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg5MzI2MQ==", "bodyText": "Where is this class attribute used? It doesn't seem to be in RelJsonWriter#toAggCall.", "url": "https://github.com/apache/calcite/pull/2021#discussion_r442893261", "createdAt": "2020-06-19T15:05:07Z", "author": {"login": "michaelmior"}, "path": "core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java", "diffHunk": "@@ -271,7 +271,9 @@ public RelDataType toType(RelDataTypeFactory typeFactory, Object o) {\n \n   public Object toJson(AggregateCall node) {\n     final Map<String, Object> map = jsonBuilder.map();\n-    map.put(\"agg\", toJson(node.getAggregation()));\n+    Map<String, Object> aggMap = new HashMap(toJson(node.getAggregation()));\n+    aggMap.put(\"class\", node.getAggregation().getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d8d86dd3ab971921f5122de6c95868dec8739c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4NTMwMw==", "bodyText": "Thank you for your comments. This is a problem of lack of class information during udaf serialization. When we deserialize udaf, we will try to load udaf function through class attribute[1].If we can't load SqlAggregateFunction correctly, there will be an exception when creating AggregateCall.\n[1]RelJson#toOp", "url": "https://github.com/apache/calcite/pull/2021#discussion_r443085303", "createdAt": "2020-06-20T00:38:28Z", "author": {"login": "xy2953396112"}, "path": "core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java", "diffHunk": "@@ -271,7 +271,9 @@ public RelDataType toType(RelDataTypeFactory typeFactory, Object o) {\n \n   public Object toJson(AggregateCall node) {\n     final Map<String, Object> map = jsonBuilder.map();\n-    map.put(\"agg\", toJson(node.getAggregation()));\n+    Map<String, Object> aggMap = new HashMap(toJson(node.getAggregation()));\n+    aggMap.put(\"class\", node.getAggregation().getClass().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg5MzI2MQ=="}, "originalCommit": {"oid": "e7d8d86dd3ab971921f5122de6c95868dec8739c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMDA5OA==", "bodyText": "why new a map here, is it OK to do like this?\nfinal Map<String, Object> aggMap = toJson(node.getAggregation());\naggMap.put(\"class\", node.getAggregation().getClass().getName());\n\nAnd you only need to add class info for UDAF, for system aggregate function, you do not need to add class info in the map.", "url": "https://github.com/apache/calcite/pull/2021#discussion_r443630098", "createdAt": "2020-06-22T15:08:55Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java", "diffHunk": "@@ -271,7 +271,9 @@ public RelDataType toType(RelDataTypeFactory typeFactory, Object o) {\n \n   public Object toJson(AggregateCall node) {\n     final Map<String, Object> map = jsonBuilder.map();\n-    map.put(\"agg\", toJson(node.getAggregation()));\n+    Map<String, Object> aggMap = new HashMap(toJson(node.getAggregation()));\n+    aggMap.put(\"class\", node.getAggregation().getClass().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg5MzI2MQ=="}, "originalCommit": {"oid": "e7d8d86dd3ab971921f5122de6c95868dec8739c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4MTYxOQ==", "bodyText": "Thanks for review.", "url": "https://github.com/apache/calcite/pull/2021#discussion_r443681619", "createdAt": "2020-06-22T16:26:19Z", "author": {"login": "xy2953396112"}, "path": "core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java", "diffHunk": "@@ -271,7 +271,9 @@ public RelDataType toType(RelDataTypeFactory typeFactory, Object o) {\n \n   public Object toJson(AggregateCall node) {\n     final Map<String, Object> map = jsonBuilder.map();\n-    map.put(\"agg\", toJson(node.getAggregation()));\n+    Map<String, Object> aggMap = new HashMap(toJson(node.getAggregation()));\n+    aggMap.put(\"class\", node.getAggregation().getClass().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg5MzI2MQ=="}, "originalCommit": {"oid": "e7d8d86dd3ab971921f5122de6c95868dec8739c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDIwMTMyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/plan/RelWriterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTowOTozOFrOGnFEKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjozMzoxM1rOGnIb6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMDYzMw==", "bodyText": "I don't think class info is needed for system aggregate function", "url": "https://github.com/apache/calcite/pull/2021#discussion_r443630633", "createdAt": "2020-06-22T15:09:38Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/test/java/org/apache/calcite/plan/RelWriterTest.java", "diffHunk": "@@ -146,8 +147,9 @@\n       + \"        {\\n\"\n       + \"          \\\"agg\\\": {\\n\"\n       + \"            \\\"name\\\": \\\"COUNT\\\",\\n\"\n-      + \"            \\\"kind\\\": \\\"COUNT\\\",\\n\"\n-      + \"            \\\"syntax\\\": \\\"FUNCTION_STAR\\\"\\n\"\n+      + \"            \\\"syntax\\\": \\\"FUNCTION_STAR\\\",\\n\"\n+      + \"            \\\"class\\\": \\\"org.apache.calcite.sql.fun.SqlCountAggFunction\\\",\\n\"\n+      + \"            \\\"kind\\\": \\\"COUNT\\\"\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d8d86dd3ab971921f5122de6c95868dec8739c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4NTg2Nw==", "bodyText": "You are right. Code has been updated.", "url": "https://github.com/apache/calcite/pull/2021#discussion_r443685867", "createdAt": "2020-06-22T16:33:13Z", "author": {"login": "xy2953396112"}, "path": "core/src/test/java/org/apache/calcite/plan/RelWriterTest.java", "diffHunk": "@@ -146,8 +147,9 @@\n       + \"        {\\n\"\n       + \"          \\\"agg\\\": {\\n\"\n       + \"            \\\"name\\\": \\\"COUNT\\\",\\n\"\n-      + \"            \\\"kind\\\": \\\"COUNT\\\",\\n\"\n-      + \"            \\\"syntax\\\": \\\"FUNCTION_STAR\\\"\\n\"\n+      + \"            \\\"syntax\\\": \\\"FUNCTION_STAR\\\",\\n\"\n+      + \"            \\\"class\\\": \\\"org.apache.calcite.sql.fun.SqlCountAggFunction\\\",\\n\"\n+      + \"            \\\"kind\\\": \\\"COUNT\\\"\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMDYzMw=="}, "originalCommit": {"oid": "e7d8d86dd3ab971921f5122de6c95868dec8739c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDIwODA1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/MockSqlOperatorTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToxMToxMFrOGnFIdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwOTowMToyNVrOGp0bSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMTczMg==", "bodyText": "extends SqlUserDefinedAggFunction might be better for your case", "url": "https://github.com/apache/calcite/pull/2021#discussion_r443631732", "createdAt": "2020-06-22T15:11:10Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/test/java/org/apache/calcite/test/MockSqlOperatorTable.java", "diffHunk": "@@ -125,6 +125,18 @@ public RelDataType inferReturnType(SqlOperatorBinding opBinding) {\n     }\n   }\n \n+  /** \"MYAGGFUNC\" user-defined aggregate function. This agg function accept one or more arguments\n+   * in order to reproduce the throws of CALCITE-3929. */\n+  public static class MyAggFunc extends SqlAggFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d8d86dd3ab971921f5122de6c95868dec8739c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzc1Mg==", "bodyText": "@yanlin-Lynn\nThanks, SqlUserDefinedAggFunction  has an AggregateFunction argument, it's not convenient for reproduce this case.So it's better to extends SqlAggFunction and define it as a user-defined function.", "url": "https://github.com/apache/calcite/pull/2021#discussion_r446503752", "createdAt": "2020-06-27T09:01:25Z", "author": {"login": "xy2953396112"}, "path": "core/src/test/java/org/apache/calcite/test/MockSqlOperatorTable.java", "diffHunk": "@@ -125,6 +125,18 @@ public RelDataType inferReturnType(SqlOperatorBinding opBinding) {\n     }\n   }\n \n+  /** \"MYAGGFUNC\" user-defined aggregate function. This agg function accept one or more arguments\n+   * in order to reproduce the throws of CALCITE-3929. */\n+  public static class MyAggFunc extends SqlAggFunction {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMTczMg=="}, "originalCommit": {"oid": "e7d8d86dd3ab971921f5122de6c95868dec8739c"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 199, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}