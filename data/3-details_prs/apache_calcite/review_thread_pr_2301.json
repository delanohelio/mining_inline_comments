{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMDE5MTY1", "number": 2301, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjoyOTo0NlrOFI2nbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjozMToxMVrOFI2p5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODI3NzU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjoyOTo0NlrOILAcFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMToxNjo1OVrOILnWkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxMjQzNg==", "bodyText": "Can you give an example for CASE (deptno, job) WHEN (20, 'CLERK') THEN 1, what is the exprs.get(0) and exprs.get(1)?\nIs exprs.get(0) (deptno, job and  exprs.get(1) (20, 'CLERK')", "url": "https://github.com/apache/calcite/pull/2301#discussion_r548412436", "createdAt": "2020-12-24T06:29:46Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java", "diffHunk": "@@ -860,6 +861,29 @@ public RexNode convertCall(\n             : operandTypeChecker.getConsistency();\n     final List<RexNode> exprs = convertOperands(cx, call, consistency);\n     RelDataType type = rexBuilder.deriveReturnType(op, exprs);\n+\n+    //generate relation for `=(Row1,Row2)`\n+    if (op.kind == SqlKind.EQUALS) {\n+      RexNode expr0 = RexUtil.removeCast(exprs.get(0));\n+      RexNode expr1 = RexUtil.removeCast(exprs.get(1));\n+      SqlKind expr0Kind = expr0.getKind();\n+      SqlKind expr1Kind = expr1.getKind();\n+      if (expr0Kind == SqlKind.ROW && expr1Kind == SqlKind.ROW) {\n+        RexCall call0 = (RexCall) expr0;\n+        RexCall call1 = (RexCall) expr1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3462a9115ff9a94f56f8553c9dbb12bb08496fe2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MDAwMQ==", "bodyText": "YES", "url": "https://github.com/apache/calcite/pull/2301#discussion_r549050001", "createdAt": "2020-12-27T01:16:59Z", "author": {"login": "zinking"}, "path": "core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java", "diffHunk": "@@ -860,6 +861,29 @@ public RexNode convertCall(\n             : operandTypeChecker.getConsistency();\n     final List<RexNode> exprs = convertOperands(cx, call, consistency);\n     RelDataType type = rexBuilder.deriveReturnType(op, exprs);\n+\n+    //generate relation for `=(Row1,Row2)`\n+    if (op.kind == SqlKind.EQUALS) {\n+      RexNode expr0 = RexUtil.removeCast(exprs.get(0));\n+      RexNode expr1 = RexUtil.removeCast(exprs.get(1));\n+      SqlKind expr0Kind = expr0.getKind();\n+      SqlKind expr1Kind = expr1.getKind();\n+      if (expr0Kind == SqlKind.ROW && expr1Kind == SqlKind.ROW) {\n+        RexCall call0 = (RexCall) expr0;\n+        RexCall call1 = (RexCall) expr1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxMjQzNg=="}, "originalCommit": {"oid": "3462a9115ff9a94f56f8553c9dbb12bb08496fe2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODI4MzkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjozMToxMVrOILAgaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMToxNzo1N1rOILnWsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxMzU0Nw==", "bodyText": "Actually why need to remove cast?", "url": "https://github.com/apache/calcite/pull/2301#discussion_r548413547", "createdAt": "2020-12-24T06:31:11Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java", "diffHunk": "@@ -860,6 +861,29 @@ public RexNode convertCall(\n             : operandTypeChecker.getConsistency();\n     final List<RexNode> exprs = convertOperands(cx, call, consistency);\n     RelDataType type = rexBuilder.deriveReturnType(op, exprs);\n+\n+    //generate relation for `=(Row1,Row2)`\n+    if (op.kind == SqlKind.EQUALS) {\n+      RexNode expr0 = RexUtil.removeCast(exprs.get(0));\n+      RexNode expr1 = RexUtil.removeCast(exprs.get(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3462a9115ff9a94f56f8553c9dbb12bb08496fe2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNDcwMw==", "bodyText": "If you have to remove cast, then better to add a test that include CAST to show the difference?", "url": "https://github.com/apache/calcite/pull/2301#discussion_r548414703", "createdAt": "2020-12-24T06:33:26Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java", "diffHunk": "@@ -860,6 +861,29 @@ public RexNode convertCall(\n             : operandTypeChecker.getConsistency();\n     final List<RexNode> exprs = convertOperands(cx, call, consistency);\n     RelDataType type = rexBuilder.deriveReturnType(op, exprs);\n+\n+    //generate relation for `=(Row1,Row2)`\n+    if (op.kind == SqlKind.EQUALS) {\n+      RexNode expr0 = RexUtil.removeCast(exprs.get(0));\n+      RexNode expr1 = RexUtil.removeCast(exprs.get(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxMzU0Nw=="}, "originalCommit": {"oid": "3462a9115ff9a94f56f8553c9dbb12bb08496fe2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MDAzNQ==", "bodyText": "ROW operation naturally includes a Cast outside. so the example test already has it.", "url": "https://github.com/apache/calcite/pull/2301#discussion_r549050035", "createdAt": "2020-12-27T01:17:57Z", "author": {"login": "zinking"}, "path": "core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java", "diffHunk": "@@ -860,6 +861,29 @@ public RexNode convertCall(\n             : operandTypeChecker.getConsistency();\n     final List<RexNode> exprs = convertOperands(cx, call, consistency);\n     RelDataType type = rexBuilder.deriveReturnType(op, exprs);\n+\n+    //generate relation for `=(Row1,Row2)`\n+    if (op.kind == SqlKind.EQUALS) {\n+      RexNode expr0 = RexUtil.removeCast(exprs.get(0));\n+      RexNode expr1 = RexUtil.removeCast(exprs.get(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxMzU0Nw=="}, "originalCommit": {"oid": "3462a9115ff9a94f56f8553c9dbb12bb08496fe2"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 15, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}