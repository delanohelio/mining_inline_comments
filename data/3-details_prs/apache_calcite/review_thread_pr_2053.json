{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMjY5MDM0", "number": 2053, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMTozNTowMVrOELGOIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjozMjowNlrOEOE4rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDcxNzEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMTozNTowMVrOGshOeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjowMTo1N1rOGskpZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzNDkwNg==", "bodyText": "we do not format like this", "url": "https://github.com/apache/calcite/pull/2053#discussion_r449334906", "createdAt": "2020-07-03T01:35:01Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "diffHunk": "@@ -901,6 +902,19 @@ public ImmutableBitSet shift(int offset) {\n     return builder.build();\n   }\n \n+  /**\n+   * Checks if all bit sets contain a particular bit.\n+   */\n+  public static boolean allContain(Collection<ImmutableBitSet> bitSets,\n+                                   int bit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b3e8720944a241c70c7e6ecbff187043d648d3d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5MDk0OA==", "bodyText": "Revised. Thank you for your kind reminder.", "url": "https://github.com/apache/calcite/pull/2053#discussion_r449390948", "createdAt": "2020-07-03T06:01:57Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java", "diffHunk": "@@ -901,6 +902,19 @@ public ImmutableBitSet shift(int offset) {\n     return builder.build();\n   }\n \n+  /**\n+   * Checks if all bit sets contain a particular bit.\n+   */\n+  public static boolean allContain(Collection<ImmutableBitSet> bitSets,\n+                                   int bit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzNDkwNg=="}, "originalCommit": {"oid": "5b3e8720944a241c70c7e6ecbff187043d648d3d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTk1NTY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/core/Aggregate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjozMjowNlrOGxBtWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjowODowNVrOGxFfNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2MTQwMQ==", "bodyText": "Would there be duplicate values since Set is changed to List?", "url": "https://github.com/apache/calcite/pull/2053#discussion_r454061401", "createdAt": "2020-07-14T02:32:06Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rel/core/Aggregate.java", "diffHunk": "@@ -548,19 +538,22 @@ public static boolean isRollup(ImmutableBitSet groupSet,\n      *\n      * @see #isRollup(ImmutableBitSet, List) */\n     public static List<Integer> getRollup(List<ImmutableBitSet> groupSets) {\n-      final Set<Integer> set = new LinkedHashSet<>();\n+      final List<Integer> rollUpBits = new ArrayList<>(groupSets.size() - 1);\n       ImmutableBitSet g = null;\n       for (ImmutableBitSet bitSet : groupSets) {\n         if (g == null) {\n           // First item must equal groupSet\n         } else {\n           // Each subsequent items must be a subset with one fewer bit than the\n           // previous item\n-          set.addAll(g.except(bitSet).toList());\n+          ImmutableBitSet diff = g.except(bitSet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "add875776e9b91424e2750430af904278e12c9a0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMzMxNw==", "bodyText": "@chunweilei Thanks a lot for your feedback.\nAccording to the definition of Rollup (https://github.com/apache/calcite/blob/master/core/src/main/java/org/apache/calcite/rel/core/Aggregate.java#L508-L513), there can be no duplicate.", "url": "https://github.com/apache/calcite/pull/2053#discussion_r454123317", "createdAt": "2020-07-14T06:08:05Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/rel/core/Aggregate.java", "diffHunk": "@@ -548,19 +538,22 @@ public static boolean isRollup(ImmutableBitSet groupSet,\n      *\n      * @see #isRollup(ImmutableBitSet, List) */\n     public static List<Integer> getRollup(List<ImmutableBitSet> groupSets) {\n-      final Set<Integer> set = new LinkedHashSet<>();\n+      final List<Integer> rollUpBits = new ArrayList<>(groupSets.size() - 1);\n       ImmutableBitSet g = null;\n       for (ImmutableBitSet bitSet : groupSets) {\n         if (g == null) {\n           // First item must equal groupSet\n         } else {\n           // Each subsequent items must be a subset with one fewer bit than the\n           // previous item\n-          set.addAll(g.except(bitSet).toList());\n+          ImmutableBitSet diff = g.except(bitSet);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2MTQwMQ=="}, "originalCommit": {"oid": "add875776e9b91424e2750430af904278e12c9a0"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 219, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}