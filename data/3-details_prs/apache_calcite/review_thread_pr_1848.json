{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0Njc1NDA1", "number": 1848, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNzoyN1rODmT2lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyOTo0NVrODmUkKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk3NzUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNzoyN1rOFzp45w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowMToxN1rOFzsVOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwODAwNw==", "bodyText": "Can you please add a message, so the failure looks human-readable?", "url": "https://github.com/apache/calcite/pull/1848#discussion_r389708007", "createdAt": "2020-03-09T14:07:27Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java", "diffHunk": "@@ -302,6 +302,7 @@ public ProjectReduceExpressionsRule(Class<? extends Project> projectClass,\n           Lists.newArrayList(project.getProjects());\n       if (reduceExpressions(project, expList, predicates, false,\n           matchNullability)) {\n+        assert !project.getProjects().equals(expList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07468739d859f0221daa7eff7021d2ba6b1a1957"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0ODAyNg==", "bodyText": "Ok. Will do.", "url": "https://github.com/apache/calcite/pull/1848#discussion_r389748026", "createdAt": "2020-03-09T15:01:17Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java", "diffHunk": "@@ -302,6 +302,7 @@ public ProjectReduceExpressionsRule(Class<? extends Project> projectClass,\n           Lists.newArrayList(project.getProjects());\n       if (reduceExpressions(project, expList, predicates, false,\n           matchNullability)) {\n+        assert !project.getProjects().equals(expList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwODAwNw=="}, "originalCommit": {"oid": "07468739d859f0221daa7eff7021d2ba6b1a1957"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTA5NDE5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyOTo0NVrOFzq_qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNToxMDoxOFrOFzss6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNjEyMA==", "bodyText": "This looks way too verbose :-/", "url": "https://github.com/apache/calcite/pull/1848#discussion_r389726120", "createdAt": "2020-03-09T14:29:45Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java", "diffHunk": "@@ -3480,6 +3481,51 @@ private void checkReduceNullableToNotNull(ReduceExpressionsRule rule) {\n     sql(sql).with(program).check();\n   }\n \n+  @Test public void testReduceCaseWhenWithCast() {\n+    final RelBuilder relBuilder = RelBuilder.create(RelBuilderTest.config().build());\n+    final RexBuilder rexBuilder = relBuilder.getRexBuilder();\n+    final RelDataType type = rexBuilder.getTypeFactory().createSqlType(SqlTypeName.BIGINT);\n+\n+    RelNode left = relBuilder\n+        .values(new String[]{\"x\", \"y\"}, 1, 2).build();\n+    RexNode ref = rexBuilder.makeInputRef(left, 0);\n+    RexNode literal1 = rexBuilder.makeLiteral(1, type, false);\n+    RexNode literal2 = rexBuilder.makeLiteral(2, type, false);\n+    RexNode literal3 = rexBuilder.makeLiteral(3, type, false);\n+\n+    // CASE WHEN x % 2 = 1 THEN x < 2\n+    //      WHEN x % 3 = 2 THEN x < 1\n+    //      ELSE x < 3\n+    final RexNode caseRexNode = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n+        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,\n+            rexBuilder.makeCall(SqlStdOperatorTable.MOD, ref, literal2), literal1),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal2),\n+        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,\n+            rexBuilder.makeCall(SqlStdOperatorTable.MOD, ref, literal3), literal2),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal1),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07468739d859f0221daa7eff7021d2ba6b1a1957"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0OTc0OQ==", "bodyText": "I wish I can provide a more simple case, but I cannot.  Because CASE WHEN will be changed to OR in many cases and thus it will not reproduce the issue.", "url": "https://github.com/apache/calcite/pull/1848#discussion_r389749749", "createdAt": "2020-03-09T15:03:48Z", "author": {"login": "chunweilei"}, "path": "core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java", "diffHunk": "@@ -3480,6 +3481,51 @@ private void checkReduceNullableToNotNull(ReduceExpressionsRule rule) {\n     sql(sql).with(program).check();\n   }\n \n+  @Test public void testReduceCaseWhenWithCast() {\n+    final RelBuilder relBuilder = RelBuilder.create(RelBuilderTest.config().build());\n+    final RexBuilder rexBuilder = relBuilder.getRexBuilder();\n+    final RelDataType type = rexBuilder.getTypeFactory().createSqlType(SqlTypeName.BIGINT);\n+\n+    RelNode left = relBuilder\n+        .values(new String[]{\"x\", \"y\"}, 1, 2).build();\n+    RexNode ref = rexBuilder.makeInputRef(left, 0);\n+    RexNode literal1 = rexBuilder.makeLiteral(1, type, false);\n+    RexNode literal2 = rexBuilder.makeLiteral(2, type, false);\n+    RexNode literal3 = rexBuilder.makeLiteral(3, type, false);\n+\n+    // CASE WHEN x % 2 = 1 THEN x < 2\n+    //      WHEN x % 3 = 2 THEN x < 1\n+    //      ELSE x < 3\n+    final RexNode caseRexNode = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n+        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,\n+            rexBuilder.makeCall(SqlStdOperatorTable.MOD, ref, literal2), literal1),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal2),\n+        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,\n+            rexBuilder.makeCall(SqlStdOperatorTable.MOD, ref, literal3), literal2),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal1),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNjEyMA=="}, "originalCommit": {"oid": "07468739d859f0221daa7eff7021d2ba6b1a1957"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1NDA5MA==", "bodyText": "What I mean is signal to noise ratio leaves much to be desired here.\nThe dance of rexBuilder.makeCall(SqlStdOperatorTable repeats again and again :(", "url": "https://github.com/apache/calcite/pull/1848#discussion_r389754090", "createdAt": "2020-03-09T15:10:18Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java", "diffHunk": "@@ -3480,6 +3481,51 @@ private void checkReduceNullableToNotNull(ReduceExpressionsRule rule) {\n     sql(sql).with(program).check();\n   }\n \n+  @Test public void testReduceCaseWhenWithCast() {\n+    final RelBuilder relBuilder = RelBuilder.create(RelBuilderTest.config().build());\n+    final RexBuilder rexBuilder = relBuilder.getRexBuilder();\n+    final RelDataType type = rexBuilder.getTypeFactory().createSqlType(SqlTypeName.BIGINT);\n+\n+    RelNode left = relBuilder\n+        .values(new String[]{\"x\", \"y\"}, 1, 2).build();\n+    RexNode ref = rexBuilder.makeInputRef(left, 0);\n+    RexNode literal1 = rexBuilder.makeLiteral(1, type, false);\n+    RexNode literal2 = rexBuilder.makeLiteral(2, type, false);\n+    RexNode literal3 = rexBuilder.makeLiteral(3, type, false);\n+\n+    // CASE WHEN x % 2 = 1 THEN x < 2\n+    //      WHEN x % 3 = 2 THEN x < 1\n+    //      ELSE x < 3\n+    final RexNode caseRexNode = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n+        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,\n+            rexBuilder.makeCall(SqlStdOperatorTable.MOD, ref, literal2), literal1),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal2),\n+        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,\n+            rexBuilder.makeCall(SqlStdOperatorTable.MOD, ref, literal3), literal2),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal1),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNjEyMA=="}, "originalCommit": {"oid": "07468739d859f0221daa7eff7021d2ba6b1a1957"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 323, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}