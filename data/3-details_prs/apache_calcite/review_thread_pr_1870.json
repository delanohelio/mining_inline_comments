{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDM4OTk1", "number": 1870, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMjoyNzoxMFrODr5uMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzowODozOVrODr6Krw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzYxMDc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMjoyNzoxMFrOF8hDYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODozNjoxM1rOF8nhMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwMDQxOA==", "bodyText": "I just noticed another PR on array's initial capacity:)", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399000418", "createdAt": "2020-03-27T02:27:10Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java", "diffHunk": "@@ -164,6 +165,17 @@ public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n         leftResult.physType.project(joinInfo.leftKeys, JavaRowFormat.LIST);\n     final PhysType rightKeyPhysType =\n         rightResult.physType.project(joinInfo.rightKeys, JavaRowFormat.LIST);\n+\n+    // Generate the appropriate key Comparator (keys must be sorted in ascending order, nulls last).\n+    final List<RelFieldCollation> fieldCollations = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a460fc3661f30e6cdbed14908f1fc44cdb4679"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNjM1NA==", "bodyText": "done", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399106354", "createdAt": "2020-03-27T08:36:13Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java", "diffHunk": "@@ -164,6 +165,17 @@ public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n         leftResult.physType.project(joinInfo.leftKeys, JavaRowFormat.LIST);\n     final PhysType rightKeyPhysType =\n         rightResult.physType.project(joinInfo.rightKeys, JavaRowFormat.LIST);\n+\n+    // Generate the appropriate key Comparator (keys must be sorted in ascending order, nulls last).\n+    final List<RelFieldCollation> fieldCollations = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwMDQxOA=="}, "originalCommit": {"oid": "04a460fc3661f30e6cdbed14908f1fc44cdb4679"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzY4MTQ4OnYy", "diffSide": "RIGHT", "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzowNzowN1rOF8hr5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOToxNTowNFrOF8oxpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMDc4OA==", "bodyText": "Should we put the comment on the top?", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399010788", "createdAt": "2020-03-27T03:07:07Z", "author": {"login": "chunweilei"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3836,6 +3837,7 @@ public void remove() {\n     // extra predicate in case of non equi-join, in case of equi-join it will be null\n     private final Predicate2<TSource, TInner> extraPredicate;\n     private final Function2<TSource, TInner, TResult> resultSelector;\n+    private final Comparator<TKey> comparator; // possibly null (compareTo to be used in that case)\n     private boolean done;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a460fc3661f30e6cdbed14908f1fc44cdb4679"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzA2NQ==", "bodyText": "I have added a javadoc @param comment for comparator in mergeJoin method", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399107065", "createdAt": "2020-03-27T08:37:41Z", "author": {"login": "rubenada"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3836,6 +3837,7 @@ public void remove() {\n     // extra predicate in case of non equi-join, in case of equi-join it will be null\n     private final Predicate2<TSource, TInner> extraPredicate;\n     private final Function2<TSource, TInner, TResult> resultSelector;\n+    private final Comparator<TKey> comparator; // possibly null (compareTo to be used in that case)\n     private boolean done;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMDc4OA=="}, "originalCommit": {"oid": "04a460fc3661f30e6cdbed14908f1fc44cdb4679"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExODQ0MA==", "bodyText": "AFAIK, according to the calcite code convention, the comment is always on the top.", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399118440", "createdAt": "2020-03-27T08:59:22Z", "author": {"login": "chunweilei"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3836,6 +3837,7 @@ public void remove() {\n     // extra predicate in case of non equi-join, in case of equi-join it will be null\n     private final Predicate2<TSource, TInner> extraPredicate;\n     private final Function2<TSource, TInner, TResult> resultSelector;\n+    private final Comparator<TKey> comparator; // possibly null (compareTo to be used in that case)\n     private boolean done;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMDc4OA=="}, "originalCommit": {"oid": "04a460fc3661f30e6cdbed14908f1fc44cdb4679"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNDE1OQ==", "bodyText": "sorry, I misunderstood you, I will change it", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399124159", "createdAt": "2020-03-27T09:10:07Z", "author": {"login": "rubenada"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3836,6 +3837,7 @@ public void remove() {\n     // extra predicate in case of non equi-join, in case of equi-join it will be null\n     private final Predicate2<TSource, TInner> extraPredicate;\n     private final Function2<TSource, TInner, TResult> resultSelector;\n+    private final Comparator<TKey> comparator; // possibly null (compareTo to be used in that case)\n     private boolean done;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMDc4OA=="}, "originalCommit": {"oid": "04a460fc3661f30e6cdbed14908f1fc44cdb4679"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNjk0OQ==", "bodyText": "changed.", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399126949", "createdAt": "2020-03-27T09:15:04Z", "author": {"login": "rubenada"}, "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3836,6 +3837,7 @@ public void remove() {\n     // extra predicate in case of non equi-join, in case of equi-join it will be null\n     private final Predicate2<TSource, TInner> extraPredicate;\n     private final Function2<TSource, TInner, TResult> resultSelector;\n+    private final Comparator<TKey> comparator; // possibly null (compareTo to be used in that case)\n     private boolean done;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMDc4OA=="}, "originalCommit": {"oid": "04a460fc3661f30e6cdbed14908f1fc44cdb4679"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzY4MzY3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/enumerable/EnumerableJoinTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzowODozOVrOF8htNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoxMjowMFrOF8m0Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMTEyNw==", "bodyText": "The comment seems a little confusing. Why is it important?", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399011127", "createdAt": "2020-03-27T03:08:39Z", "author": {"login": "chunweilei"}, "path": "core/src/test/java/org/apache/calcite/test/enumerable/EnumerableJoinTest.java", "diffHunk": "@@ -220,6 +220,44 @@\n             + \"empid=150; name=Sebastian; dept_name=Sales; e_deptno=10; d_deptno=10\");\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-3846\">[CALCITE-3846]\n+   * EnumerableMergeJoin: wrong comparison of composite key with null values</a>. */\n+  @Test public void testMergeJoinWithCompositeKeyAndNullValues() {\n+    tester(false, new JdbcTest.HrSchema())\n+        .query(\"?\")\n+        .withHook(Hook.PLANNER, (Consumer<RelOptPlanner>) planner -> {\n+          planner.addRule(EnumerableRules.ENUMERABLE_MERGE_JOIN_RULE);\n+          planner.removeRule(EnumerableRules.ENUMERABLE_JOIN_RULE);\n+        })\n+        .withRel(builder -> builder\n+            .scan(\"s\", \"emps\")\n+            .sort(builder.field(\"deptno\"), builder.field(\"commission\"))\n+            .scan(\"s\", \"emps\")\n+            .sort(builder.field(\"deptno\"), builder.field(\"commission\"))\n+            .join(JoinRelType.INNER,\n+                builder.and(\n+                    builder.equals(\n+                        builder.field(2, 0, \"deptno\"),\n+                        builder.field(2, 1, \"deptno\")),\n+                    builder.equals(\n+                        builder.field(2, 0, \"commission\"),\n+                        builder.field(2, 1, \"commission\"))))\n+            .project(\n+                builder.field(\"empid\"))\n+            .build())\n+        .explainHookMatches(\"\" // It is important that we have MergeJoin in the plan\n+            + \"EnumerableCalc(expr#0..4=[{inputs}], empid=[$t0])\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a460fc3661f30e6cdbed14908f1fc44cdb4679"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDg3OQ==", "bodyText": "If the join is not implemented via MergeJoin (but e.g. via HashJoin), then we would not see the bug, but just because a different algorithm was used.", "url": "https://github.com/apache/calcite/pull/1870#discussion_r399094879", "createdAt": "2020-03-27T08:12:00Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/test/enumerable/EnumerableJoinTest.java", "diffHunk": "@@ -220,6 +220,44 @@\n             + \"empid=150; name=Sebastian; dept_name=Sales; e_deptno=10; d_deptno=10\");\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-3846\">[CALCITE-3846]\n+   * EnumerableMergeJoin: wrong comparison of composite key with null values</a>. */\n+  @Test public void testMergeJoinWithCompositeKeyAndNullValues() {\n+    tester(false, new JdbcTest.HrSchema())\n+        .query(\"?\")\n+        .withHook(Hook.PLANNER, (Consumer<RelOptPlanner>) planner -> {\n+          planner.addRule(EnumerableRules.ENUMERABLE_MERGE_JOIN_RULE);\n+          planner.removeRule(EnumerableRules.ENUMERABLE_JOIN_RULE);\n+        })\n+        .withRel(builder -> builder\n+            .scan(\"s\", \"emps\")\n+            .sort(builder.field(\"deptno\"), builder.field(\"commission\"))\n+            .scan(\"s\", \"emps\")\n+            .sort(builder.field(\"deptno\"), builder.field(\"commission\"))\n+            .join(JoinRelType.INNER,\n+                builder.and(\n+                    builder.equals(\n+                        builder.field(2, 0, \"deptno\"),\n+                        builder.field(2, 1, \"deptno\")),\n+                    builder.equals(\n+                        builder.field(2, 0, \"commission\"),\n+                        builder.field(2, 1, \"commission\"))))\n+            .project(\n+                builder.field(\"empid\"))\n+            .build())\n+        .explainHookMatches(\"\" // It is important that we have MergeJoin in the plan\n+            + \"EnumerableCalc(expr#0..4=[{inputs}], empid=[$t0])\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxMTEyNw=="}, "originalCommit": {"oid": "04a460fc3661f30e6cdbed14908f1fc44cdb4679"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 225, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}