{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0OTk2MzIw", "number": 2027, "title": "[CALCITE-4049] Improve the implementation of the shortest-path algorithm", "bodyText": "According to the discussion in the JIRA, we revert the changes to ConsList class, and replace shortest distances with the shortest paths.", "createdAt": "2020-06-16T06:10:35Z", "url": "https://github.com/apache/calcite/pull/2027", "merged": true, "mergeCommit": {"oid": "bd121aa3a6d3b0314785a4c9141028b2ef252ebf"}, "closed": true, "closedAt": "2020-06-30T06:50:42Z", "author": {"login": "liyafan82"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr2be1gFqTQzMTU4NjIxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwMsaUgBqjM0OTU0ODkzOTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTg2MjE1", "url": "https://github.com/apache/calcite/pull/2027#pullrequestreview-431586215", "createdAt": "2020-06-16T14:49:43Z", "commit": {"oid": "38cc79a2ad376725a22c88cf62acb5598dac6db9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0OTo0M1rOGkfF8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0OTo0M1rOGkfF8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTM0Nw==", "bodyText": "minor thing: now that this variable is a boolean, maybe it should be renamed (changeCount -> change ?)", "url": "https://github.com/apache/calcite/pull/2027#discussion_r440911347", "createdAt": "2020-06-16T14:49:43Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -56,42 +54,40 @@ public int size() {\n   public static <V, E extends DefaultEdge> FrozenGraph<V, E> makeImmutable(\n       DirectedGraph<V, E> graph) {\n     DefaultDirectedGraph<V, E> graph1 = (DefaultDirectedGraph<V, E>) graph;\n-    Map<Pair<V, V>, List<V>> shortestPaths = new HashMap<>();\n+    Map<Pair<V, V>, int[]> shortestDistances = new HashMap<>();\n     for (DefaultDirectedGraph.VertexInfo<V, E> arc\n         : graph1.vertexMap.values()) {\n       for (E edge : arc.outEdges) {\n         final V source = graph1.source(edge);\n         final V target = graph1.target(edge);\n-        shortestPaths.put(Pair.of(source, target),\n-            ImmutableList.of(source, target));\n+        shortestDistances.put(Pair.of(source, target), new int[] {1});\n       }\n     }\n     while (true) {\n       // Take a copy of the map's keys to avoid\n       // ConcurrentModificationExceptions.\n       final List<Pair<V, V>> previous =\n-          ImmutableList.copyOf(shortestPaths.keySet());\n-      int changeCount = 0;\n+          ImmutableList.copyOf(shortestDistances.keySet());\n+      boolean changeCount = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38cc79a2ad376725a22c88cf62acb5598dac6db9"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTEwMjUy", "url": "https://github.com/apache/calcite/pull/2027#pullrequestreview-431910252", "createdAt": "2020-06-16T21:37:13Z", "commit": {"oid": "38cc79a2ad376725a22c88cf62acb5598dac6db9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozNzoxM1rOGkuEQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozNzoxM1rOGkuEQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjY3NA==", "bodyText": "Can you also fix the getPaths() to return shortest paths first? This is to make sure we choose the shortest path during convert.", "url": "https://github.com/apache/calcite/pull/2027#discussion_r441156674", "createdAt": "2020-06-16T21:37:13Z", "author": {"login": "xndai"}, "path": "core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java", "diffHunk": "@@ -234,10 +234,10 @@ private ConversionData getConversionData(RelOptPlanner planner) {\n       return pathMap;\n     }\n \n-    public List<Convention> getShortestPath(\n+    public int getShortestDistance(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38cc79a2ad376725a22c88cf62acb5598dac6db9"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7277cf5bcec5a05ae6e2c1f8845777d8e672615d", "author": {"user": {"login": "liyafan82", "name": null}}, "url": "https://github.com/apache/calcite/commit/7277cf5bcec5a05ae6e2c1f8845777d8e672615d", "committedDate": "2020-06-17T12:39:24Z", "message": "[CALCITE-4049] Implement the shortest path algorithm by BFS"}, "afterCommit": {"oid": "542dfd71cd8765f7c9982eea61c16592f75018fd", "author": {"user": {"login": "liyafan82", "name": null}}, "url": "https://github.com/apache/calcite/commit/542dfd71cd8765f7c9982eea61c16592f75018fd", "committedDate": "2020-06-17T12:42:53Z", "message": "[CALCITE-4049] Implement the shortest path algorithm by BFS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMDEwODgw", "url": "https://github.com/apache/calcite/pull/2027#pullrequestreview-433010880", "createdAt": "2020-06-18T07:29:47Z", "commit": {"oid": "8d8054aeedb88524f6e2464feaf7aa3f341a5781"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoyOTo0N1rOGli9SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzozMDowN1rOGli97A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzI0MQ==", "bodyText": "I think we can just remove this method. Nobody is using it anymore.", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442023241", "createdAt": "2020-06-18T07:29:47Z", "author": {"login": "xndai"}, "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -134,7 +135,44 @@ public int size() {\n       if (from.equals(to)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8054aeedb88524f6e2464feaf7aa3f341a5781"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzQwNA==", "bodyText": "where are the tests for getShortestDistance()?", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442023404", "createdAt": "2020-06-18T07:30:07Z", "author": {"login": "xndai"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -66,7 +66,7 @@\n     assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n     assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n     assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n-    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n+    assertEquals(\"[[A, B, D], [A, B, C, D]]\", paths(g, \"A\", \"D\").toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8054aeedb88524f6e2464feaf7aa3f341a5781"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MjkzOTg1", "url": "https://github.com/apache/calcite/pull/2027#pullrequestreview-437293985", "createdAt": "2020-06-25T08:50:23Z", "commit": {"oid": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODo1MDoyNFrOGoxa-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODo1MDoyNFrOGoxa-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNTk0Nw==", "bodyText": "This seems a regression, I think we should put somewhere (getPaths? findPaths?) that if (from.equals(to)) the empty list is a valid path (as it happened previously in the old getShortestPath method).", "url": "https://github.com/apache/calcite/pull/2027#discussion_r445405947", "createdAt": "2020-06-25T08:50:24Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -64,14 +64,21 @@\n     g.addEdge(\"B\", \"D\");\n     assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n     assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n-    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n+    assertEquals(\"[D, C, D]\", shortestPath(g, \"D\", \"D\").toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Mjk0NDg0", "url": "https://github.com/apache/calcite/pull/2027#pullrequestreview-437294484", "createdAt": "2020-06-25T08:51:00Z", "commit": {"oid": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODo1MTowMFrOGoxclQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODo1MTowMFrOGoxclQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNjM1Nw==", "bodyText": "minor: I'd use \"increasing order\" instead of \"non-decreasing order\"", "url": "https://github.com/apache/calcite/pull/2027#discussion_r445406357", "createdAt": "2020-06-25T08:51:00Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -102,41 +99,28 @@ public int size() {\n    */\n   public static class FrozenGraph<V, E extends DefaultEdge> {\n     private final DefaultDirectedGraph<V, E> graph;\n-    private final Map<Pair<V, V>, List<V>> shortestPaths;\n+    private final Map<Pair<V, V>, int[]> shortestDistances;\n \n     /** Creates a frozen graph as a copy of another graph. */\n     FrozenGraph(DefaultDirectedGraph<V, E> graph,\n-        Map<Pair<V, V>, List<V>> shortestPaths) {\n+        Map<Pair<V, V>, int[]> shortestDistances) {\n       this.graph = graph;\n-      this.shortestPaths = shortestPaths;\n+      this.shortestDistances = shortestDistances;\n     }\n \n     /**\n-     * Returns an iterator of all paths between two nodes, shortest first.\n+     * Returns an iterator of all paths between two nodes,\n+     * in non-decreasing order of path lengths.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "author": {"user": {"login": "liyafan82", "name": null}}, "url": "https://github.com/apache/calcite/commit/eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "committedDate": "2020-06-30T03:01:15Z", "message": "[CALCITE-4049] Improve the implementation of the shortest-path algorithm"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f246db18a3297bdf9a4107d5990c0071f1be8c88", "author": {"user": {"login": "liyafan82", "name": null}}, "url": "https://github.com/apache/calcite/commit/f246db18a3297bdf9a4107d5990c0071f1be8c88", "committedDate": "2020-06-28T02:16:16Z", "message": "[CALCITE-4049] Add an empty path to the node itself"}, "afterCommit": {"oid": "eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "author": {"user": {"login": "liyafan82", "name": null}}, "url": "https://github.com/apache/calcite/commit/eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "committedDate": "2020-06-30T03:01:15Z", "message": "[CALCITE-4049] Improve the implementation of the shortest-path algorithm"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3719, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}