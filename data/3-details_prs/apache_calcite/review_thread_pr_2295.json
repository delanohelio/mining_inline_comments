{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NDQwOTcw", "number": 2295, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTowNToyMlrOFD4rUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTowNToyMlrOFD4rUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjE4NjQzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTowNToyMlrOIDvbOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTozNjo0MlrOIDwpLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5MzY1OQ==", "bodyText": "Just to complete: could we have a test that fails because we use index == fieldList.size()  (I guess 2 in this specific case) ?", "url": "https://github.com/apache/calcite/pull/2295#discussion_r540793659", "createdAt": "2020-12-11T09:05:22Z", "author": {"login": "rubenada"}, "path": "core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java", "diffHunk": "@@ -735,4 +740,46 @@ private void checkBigDecimalLiteral(RexBuilder builder, String val) {\n         literal.getValueAs(BigDecimal.class).toString(), is(val));\n   }\n \n+  @Test void testValidateRexFieldAccess() {\n+    final RelDataTypeFactory typeFactory =\n+        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n+    final RexBuilder builder = new RexBuilder(typeFactory);\n+\n+    RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n+    RelDataType longType = typeFactory.createSqlType(SqlTypeName.BIGINT);\n+\n+    RelDataType structType = typeFactory.createStructType(\n+        Arrays.asList(intType, longType), Arrays.asList(\"x\", \"y\"));\n+    RexInputRef inputRef = builder.makeInputRef(structType, 0);\n+\n+    // construct RexFieldAccess fails because of negative index\n+    IllegalArgumentException e1 = assertThrows(IllegalArgumentException.class, () -> {\n+      RelDataTypeField field = new RelDataTypeFieldImpl(\"z\", -1, intType);\n+      new RexFieldAccess(inputRef, field);\n+    });\n+    assertThat(e1.getMessage(),\n+        is(\"Field #-1: z INTEGER does not exist for expression $0\"));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068cc12af15b8c06a509c32df932f337b751a5a4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgxMzYxNQ==", "bodyText": "@rubenada Thanks for your good suggestion.\nI have adjusted the PR to test the case for index == fieldList.size()", "url": "https://github.com/apache/calcite/pull/2295#discussion_r540813615", "createdAt": "2020-12-11T09:36:42Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java", "diffHunk": "@@ -735,4 +740,46 @@ private void checkBigDecimalLiteral(RexBuilder builder, String val) {\n         literal.getValueAs(BigDecimal.class).toString(), is(val));\n   }\n \n+  @Test void testValidateRexFieldAccess() {\n+    final RelDataTypeFactory typeFactory =\n+        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n+    final RexBuilder builder = new RexBuilder(typeFactory);\n+\n+    RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n+    RelDataType longType = typeFactory.createSqlType(SqlTypeName.BIGINT);\n+\n+    RelDataType structType = typeFactory.createStructType(\n+        Arrays.asList(intType, longType), Arrays.asList(\"x\", \"y\"));\n+    RexInputRef inputRef = builder.makeInputRef(structType, 0);\n+\n+    // construct RexFieldAccess fails because of negative index\n+    IllegalArgumentException e1 = assertThrows(IllegalArgumentException.class, () -> {\n+      RelDataTypeField field = new RelDataTypeFieldImpl(\"z\", -1, intType);\n+      new RexFieldAccess(inputRef, field);\n+    });\n+    assertThat(e1.getMessage(),\n+        is(\"Field #-1: z INTEGER does not exist for expression $0\"));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5MzY1OQ=="}, "originalCommit": {"oid": "068cc12af15b8c06a509c32df932f337b751a5a4"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 13, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}