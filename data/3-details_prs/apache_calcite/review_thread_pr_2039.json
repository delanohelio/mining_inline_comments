{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NDc5NTk2", "number": 2039, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDozOToyMlrOEHhMtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNTo0N1rOEHmFIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzE5NDE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/plan/RelOptNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDozOToyMlrOGm7Olw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDozOToyMlrOGm7Olw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ2OTQ2Mw==", "bodyText": "Thanks a lot to keep this String getDigest, which is heavily relied on in our internal code base.", "url": "https://github.com/apache/calcite/pull/2039#discussion_r443469463", "createdAt": "2020-06-22T10:39:22Z", "author": {"login": "jinxing64"}, "path": "core/src/main/java/org/apache/calcite/plan/RelOptNode.java", "diffHunk": "@@ -45,9 +47,20 @@\n    * <p>If you want a descriptive string which contains the identity, call\n    * {@link Object#toString()}, which always returns \"rel#{id}:{digest}\".\n    *\n+   * @return Digest string of this {@code RelNode}\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897163219d981565a524121d47ec7845c971c473"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mzk0MzMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/plan/RelDigest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxNTozNlrOGnCkUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxNTozNlrOGnCkUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4OTcxMg==", "bodyText": "Any benchmark for the improvement?", "url": "https://github.com/apache/calcite/pull/2039#discussion_r443589712", "createdAt": "2020-06-22T14:15:36Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/plan/RelDigest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.plan;\n+\n+import org.apache.calcite.rel.RelNode;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * The digest is the exact representation of the corresponding {@code RelNode},\n+ * at anytime, anywhere. The only difference is that digest is compared using\n+ * {@code #equals} and {@code #hashCode}, which are prohibited to override\n+ * for RelNode, for legacy reasons.\n+ *\n+ * <p>INTERNAL USE ONLY.</p>\n+ */\n+@API(since = \"1.24\", status = API.Status.INTERNAL)\n+public interface RelDigest {\n+  /**\n+   * Reset state, possibly cache of hash code.\n+   */\n+  void clear();\n+\n+  /**\n+   * Returns the relnode that this digest is associated with.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3084dd2bce8fa712e57d1df5f0c960ddfae32062"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mzk5Mzk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexSubQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNTo0N1rOGnDC-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNTo0N1rOGnDC-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NzU2Mg==", "bodyText": "Nice catch", "url": "https://github.com/apache/calcite/pull/2039#discussion_r443597562", "createdAt": "2020-06-22T14:25:47Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSubQuery.java", "diffHunk": "@@ -139,11 +138,14 @@ public RexSubQuery clone(RelNode rel) {\n \n   @Override public boolean equals(Object obj) {\n     return obj == this\n-        || obj instanceof RexCall\n+        || obj instanceof RexSubQuery\n         && toString().equals(obj.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3084dd2bce8fa712e57d1df5f0c960ddfae32062"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 210, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}