{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MzQxNDQ1", "number": 1849, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMjo0NzowNVrODmJeFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNjozMToyN1rODnugMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzI3NjM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/codegen/templates/Parser.jj", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMjo0NzowNVrOFzZq0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNToxMjoxM1rOF0pcMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0MjI1Ng==", "bodyText": "Since SOME and EVERY are also SQL standard aggregate functions, should we add them in ReservedFunctionNames?", "url": "https://github.com/apache/calcite/pull/1849#discussion_r389442256", "createdAt": "2020-03-09T02:47:05Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/codegen/templates/Parser.jj", "diffHunk": "@@ -6405,6 +6423,7 @@ SqlIdentifier ReservedFunctionName() :\n     |   <FIRST_VALUE>\n     |   <FLOOR>\n     |   <FUSION>\n+    |   <INTERSECTION>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bbf26434209f3e97dfa3f3f5111a5ffb02c164"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0OTIzMw==", "bodyText": "Thanks @DonnyZone  for the review. I put the comment for this question in JIRA. Please kindly refer to it and let me know  if I am missing anything.", "url": "https://github.com/apache/calcite/pull/1849#discussion_r390749233", "createdAt": "2020-03-11T05:12:13Z", "author": {"login": "HanumathRao"}, "path": "core/src/main/codegen/templates/Parser.jj", "diffHunk": "@@ -6405,6 +6423,7 @@ SqlIdentifier ReservedFunctionName() :\n     |   <FIRST_VALUE>\n     |   <FLOOR>\n     |   <FUSION>\n+    |   <INTERSECTION>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0MjI1Ng=="}, "originalCommit": {"oid": "06bbf26434209f3e97dfa3f3f5111a5ffb02c164"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzI4MjI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMjo1MjoxNlrOFzZuew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMjo1MjoxNlrOFzZuew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0MzE5NQ==", "bodyText": "nitpicking: keep the indent style for new line, or put them in the same line", "url": "https://github.com/apache/calcite/pull/1849#discussion_r389443195", "createdAt": "2020-03-09T02:52:16Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "diffHunk": "@@ -1540,6 +1542,43 @@ public Expression implementResult(AggContext info,\n     }\n   }\n \n+  /** Implementor for the {@code INTERSECTION} aggregate function. */\n+  static class IntersectionImplementor extends StrictAggImplementor {\n+    @Override protected void implementNotNullReset(AggContext info,\n+                                                   AggResetContext reset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bbf26434209f3e97dfa3f3f5111a5ffb02c164"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzI5MzYxOnYy", "diffSide": "RIGHT", "path": "site/_docs/reference.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMzowMjo1MFrOFzZ1fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNToxMzowMFrOF0pczA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0NDk4OA==", "bodyText": "If no rows are selected, the result is NULL\n\nIs this an expected behavior?", "url": "https://github.com/apache/calcite/pull/1849#discussion_r389444988", "createdAt": "2020-03-09T03:02:50Z", "author": {"login": "DonnyZone"}, "path": "site/_docs/reference.md", "diffHunk": "@@ -1766,12 +1766,15 @@ and `LISTAGG`).\n | COUNT( [ ALL &#124; DISTINCT ] value [, value ]*) | Returns the number of input rows for which *value* is not null (wholly not null if *value* is composite)\n | COUNT(*)                           | Returns the number of input rows\n | FUSION(multiset)                   | Returns the multiset union of *multiset* across all input values\n+| INTERSECTION(multiset)             | Returns the multiset intersection of *multiset* across all input values\n | APPROX_COUNT_DISTINCT(value [, value ]*)      | Returns the approximate number of distinct values of *value*; the database is allowed to use an approximation but is not required to\n | AVG( [ ALL &#124; DISTINCT ] numeric)         | Returns the average (arithmetic mean) of *numeric* across all input values\n | SUM( [ ALL &#124; DISTINCT ] numeric)         | Returns the sum of *numeric* across all input values\n | MAX( [ ALL &#124; DISTINCT ] value)           | Returns the maximum value of *value* across all input values\n | MIN( [ ALL &#124; DISTINCT ] value)           | Returns the minimum value of *value* across all input values\n | ANY_VALUE( [ ALL &#124; DISTINCT ] value)     | Returns one of the values of *value* across all input values; this is NOT specified in the SQL standard\n+| SOME( [ condition ] )                         | Returns true if any expression is true. If no rows are selected, the result is NULL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bbf26434209f3e97dfa3f3f5111a5ffb02c164"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0OTM4OA==", "bodyText": "I assumed that the semantics for SOME and EVERY are similar to MIN and MAX respectively. Please let me know if it is misleading, I will remove it.", "url": "https://github.com/apache/calcite/pull/1849#discussion_r390749388", "createdAt": "2020-03-11T05:13:00Z", "author": {"login": "HanumathRao"}, "path": "site/_docs/reference.md", "diffHunk": "@@ -1766,12 +1766,15 @@ and `LISTAGG`).\n | COUNT( [ ALL &#124; DISTINCT ] value [, value ]*) | Returns the number of input rows for which *value* is not null (wholly not null if *value* is composite)\n | COUNT(*)                           | Returns the number of input rows\n | FUSION(multiset)                   | Returns the multiset union of *multiset* across all input values\n+| INTERSECTION(multiset)             | Returns the multiset intersection of *multiset* across all input values\n | APPROX_COUNT_DISTINCT(value [, value ]*)      | Returns the approximate number of distinct values of *value*; the database is allowed to use an approximation but is not required to\n | AVG( [ ALL &#124; DISTINCT ] numeric)         | Returns the average (arithmetic mean) of *numeric* across all input values\n | SUM( [ ALL &#124; DISTINCT ] numeric)         | Returns the sum of *numeric* across all input values\n | MAX( [ ALL &#124; DISTINCT ] value)           | Returns the maximum value of *value* across all input values\n | MIN( [ ALL &#124; DISTINCT ] value)           | Returns the minimum value of *value* across all input values\n | ANY_VALUE( [ ALL &#124; DISTINCT ] value)     | Returns one of the values of *value* across all input values; this is NOT specified in the SQL standard\n+| SOME( [ condition ] )                         | Returns true if any expression is true. If no rows are selected, the result is NULL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0NDk4OA=="}, "originalCommit": {"oid": "06bbf26434209f3e97dfa3f3f5111a5ffb02c164"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTgyOTYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlKind.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNjozMToyN1rOF1459g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoyMjo0MFrOF2Xrqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1MTE5MA==", "bodyText": "Please also add INTERSECTION in AGGREGATE EnumSet [1].\n[1] \n  \n    \n      calcite/core/src/main/java/org/apache/calcite/sql/SqlKind.java\n    \n    \n         Line 1159\n      in\n      4c3cef9\n    \n    \n    \n    \n\n        \n          \n           public static final EnumSet<SqlKind> AGGREGATE =", "url": "https://github.com/apache/calcite/pull/1849#discussion_r392051190", "createdAt": "2020-03-13T06:31:27Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlKind.java", "diffHunk": "@@ -966,6 +966,9 @@\n   /** The {@code FUSION} aggregate function. */\n   FUSION,\n \n+  /** The {@code INTERSECTION} aggregate function. */\n+  INTERSECTION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdb1287c452b4952a9e4959741977b3057af2d2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1NjUzNw==", "bodyText": "@DonnyZone  Thank you for the suggestion. I added INTESECTION, to the Aggregate enumset. I also noticed that ANY_VALUE was missing, so added it.", "url": "https://github.com/apache/calcite/pull/1849#discussion_r392356537", "createdAt": "2020-03-13T17:02:23Z", "author": {"login": "HanumathRao"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlKind.java", "diffHunk": "@@ -966,6 +966,9 @@\n   /** The {@code FUSION} aggregate function. */\n   FUSION,\n \n+  /** The {@code INTERSECTION} aggregate function. */\n+  INTERSECTION,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1MTE5MA=="}, "originalCommit": {"oid": "bcdb1287c452b4952a9e4959741977b3057af2d2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTQzNQ==", "bodyText": "That's great! Thanks;)", "url": "https://github.com/apache/calcite/pull/1849#discussion_r392555435", "createdAt": "2020-03-14T04:22:40Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlKind.java", "diffHunk": "@@ -966,6 +966,9 @@\n   /** The {@code FUSION} aggregate function. */\n   FUSION,\n \n+  /** The {@code INTERSECTION} aggregate function. */\n+  INTERSECTION,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1MTE5MA=="}, "originalCommit": {"oid": "bcdb1287c452b4952a9e4959741977b3057af2d2"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 326, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}