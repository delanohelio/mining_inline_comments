{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxODgxMzI2", "number": 1907, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozNDoxOFrODw4Jxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMzozMjozOVrODxIOPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc4MjQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozNDoxOFrOGEHe9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMjoxMToyN1rOGEJkXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MDEwMg==", "bodyText": "@chunweilei  If I understand correctly this is basically trying to find the input with least number of rows, and that number is being used as minimum row count. If so then this looks wrong, because minimum number of rows for UNION DISTINCT will be 1 since the input with least number of rows can have all duplicates in which case only one row will be returned.", "url": "https://github.com/apache/calcite/pull/1907#discussion_r406970102", "createdAt": "2020-04-10T22:34:18Z", "author": {"login": "vineetgarg02"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java", "diffHunk": "@@ -54,14 +54,31 @@\n   }\n \n   public Double getMinRowCount(Union rel, RelMetadataQuery mq) {\n-    double rowCount = 0.0;\n-    for (RelNode input : rel.getInputs()) {\n-      Double partialRowCount = mq.getMinRowCount(input);\n-      if (partialRowCount != null) {\n-        rowCount += partialRowCount;\n+    if (rel.all) {\n+      double rowCount = 0.0;\n+      for (RelNode input : rel.getInputs()) {\n+        Double partialRowCount = mq.getMinRowCount(input);\n+        if (partialRowCount != null) {\n+          rowCount += partialRowCount;\n+        }\n+      }\n+      return rowCount;\n+    } else {\n+      boolean valid = false;\n+      double rowCount = Double.POSITIVE_INFINITY;\n+      for (RelNode input : rel.getInputs()) {\n+        Double partialRowCount = mq.getMinRowCount(input);\n+        if (partialRowCount != null && rowCount > partialRowCount) {\n+          rowCount = partialRowCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f80217df580cc62b8807bcc5c2c821323f9f43"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDI1NQ==", "bodyText": "Good point! PR was updated.", "url": "https://github.com/apache/calcite/pull/1907#discussion_r407004255", "createdAt": "2020-04-11T02:11:27Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java", "diffHunk": "@@ -54,14 +54,31 @@\n   }\n \n   public Double getMinRowCount(Union rel, RelMetadataQuery mq) {\n-    double rowCount = 0.0;\n-    for (RelNode input : rel.getInputs()) {\n-      Double partialRowCount = mq.getMinRowCount(input);\n-      if (partialRowCount != null) {\n-        rowCount += partialRowCount;\n+    if (rel.all) {\n+      double rowCount = 0.0;\n+      for (RelNode input : rel.getInputs()) {\n+        Double partialRowCount = mq.getMinRowCount(input);\n+        if (partialRowCount != null) {\n+          rowCount += partialRowCount;\n+        }\n+      }\n+      return rowCount;\n+    } else {\n+      boolean valid = false;\n+      double rowCount = Double.POSITIVE_INFINITY;\n+      for (RelNode input : rel.getInputs()) {\n+        Double partialRowCount = mq.getMinRowCount(input);\n+        if (partialRowCount != null && rowCount > partialRowCount) {\n+          rowCount = partialRowCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MDEwMg=="}, "originalCommit": {"oid": "90f80217df580cc62b8807bcc5c2c821323f9f43"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc4NTI1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozNjowN1rOGEHgjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozNjowN1rOGEHgjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MDUwOA==", "bodyText": "select x from values ('a', 'a') UNION DISTINCT select x from values ('a', 'a') should produce one row right?", "url": "https://github.com/apache/calcite/pull/1907#discussion_r406970508", "createdAt": "2020-04-10T22:36:07Z", "author": {"login": "vineetgarg02"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -614,6 +614,13 @@ private void checkExchangeRowCount(RelNode rel, double expected, double expected\n     checkRowCount(sql, EMP_SIZE + DEPT_SIZE, 0D, 140D);\n   }\n \n+  @Test void testRowCountUnionDistinct() {\n+    final String sql = \"select x from (values 'a', 'b') as t(x)\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f80217df580cc62b8807bcc5c2c821323f9f43"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjEwMTYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMzo1NjoyMlrOGEKIMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMzo1NjoyMlrOGEKIMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAxMzQyNg==", "bodyText": "return min(rowCount, 1d);", "url": "https://github.com/apache/calcite/pull/1907#discussion_r407013426", "createdAt": "2020-04-11T03:56:22Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java", "diffHunk": "@@ -61,7 +61,16 @@ public Double getMinRowCount(Union rel, RelMetadataQuery mq) {\n         rowCount += partialRowCount;\n       }\n     }\n-    return rowCount;\n+\n+    if (rel.all) {\n+      return rowCount;\n+    } else {\n+      if (rowCount < 1) {\n+        return rowCount;\n+      } else {\n+        return 1d;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b80d79f8c05e5f3f71bb6aea1c7b440fa54060b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODQxNTM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMzozMjozOVrOGEbq9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMToyNzoxOVrOGEj7AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMwMDg1Mg==", "bodyText": "Maybe there is a potential improvement here: if rel.all == false, and once we find the current value of rowCount greater than 1d, we can stop the loop early and directly return 1d.\nIt also makes the code less readable, so I am not sure if it is worth it.", "url": "https://github.com/apache/calcite/pull/1907#discussion_r407300852", "createdAt": "2020-04-13T03:32:39Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java", "diffHunk": "@@ -61,7 +61,12 @@ public Double getMinRowCount(Union rel, RelMetadataQuery mq) {\n         rowCount += partialRowCount;\n       }\n     }\n-    return rowCount;\n+\n+    if (rel.all) {\n+      return rowCount;\n+    } else {\n+      return Math.min(rowCount, 1d);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2511690445c4771108f06a0376c4c627b9c9f70"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMxODAzMA==", "bodyText": "Considering there would not be a huge overhead, I prefer it more readable.", "url": "https://github.com/apache/calcite/pull/1907#discussion_r407318030", "createdAt": "2020-04-13T04:54:25Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java", "diffHunk": "@@ -61,7 +61,12 @@ public Double getMinRowCount(Union rel, RelMetadataQuery mq) {\n         rowCount += partialRowCount;\n       }\n     }\n-    return rowCount;\n+\n+    if (rel.all) {\n+      return rowCount;\n+    } else {\n+      return Math.min(rowCount, 1d);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMwMDg1Mg=="}, "originalCommit": {"oid": "d2511690445c4771108f06a0376c4c627b9c9f70"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQzNjAzMw==", "bodyText": "Sounds reasonable.", "url": "https://github.com/apache/calcite/pull/1907#discussion_r407436033", "createdAt": "2020-04-13T11:27:19Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java", "diffHunk": "@@ -61,7 +61,12 @@ public Double getMinRowCount(Union rel, RelMetadataQuery mq) {\n         rowCount += partialRowCount;\n       }\n     }\n-    return rowCount;\n+\n+    if (rel.all) {\n+      return rowCount;\n+    } else {\n+      return Math.min(rowCount, 1d);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMwMDg1Mg=="}, "originalCommit": {"oid": "d2511690445c4771108f06a0376c4c627b9c9f70"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 247, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}