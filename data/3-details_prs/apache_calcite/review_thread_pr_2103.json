{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NDc3MjIx", "number": 2103, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzo0NTozMFrOEW5Uew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1MzozNlrOEX1sqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDQzMjU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlArgumentAssignmentOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzo0NTozMFrOG-Y5zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzo0NTozMFrOG-Y5zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA3MjkxMA==", "bodyText": "This is really nice. I actually tried to add named parameter support but failed on making non-scalar case (i.e. table function) work.\nI wasn't aware that this can be as simple as override this parameter in SqlArgumentAssignmentOperator.java", "url": "https://github.com/apache/calcite/pull/2103#discussion_r468072910", "createdAt": "2020-08-10T17:45:30Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlArgumentAssignmentOperator.java", "diffHunk": "@@ -47,4 +47,8 @@\n     writer.keyword(getName());\n     call.operand(0).unparse(writer, getRightPrec(), rightPrec);\n   }\n+\n+  @Override public boolean argumentMustBeScalar(int ordinal) {\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613a7839366af41ace767d770ef57b38b0cc545a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDIwMDYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMjoxODowMlrOG_PbUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMTowNjozMVrOHAdsAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2NjIyNA==", "bodyText": "Why use i < descriptors + 1 rather than i <= descriptors?", "url": "https://github.com/apache/calcite/pull/2103#discussion_r468966224", "createdAt": "2020-08-12T02:18:02Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -66,7 +86,53 @@ protected boolean throwValidationSignatureErrorOrReturnFalse(SqlCallBinding call\n     }\n   }\n \n-  protected void validateColumnNames(SqlValidator validator,\n+  /**\n+   * Validate the heading operands are in the form:\n+   * (ROW, DESCRIPTOR, DESCRIPTOR ..., other params).\n+   *\n+   * @param callBinding The call binding\n+   * @param descriptors The number of descriptors following the first operand (e.g. the table)\n+   *\n+   * @return true if validation passes\n+   */\n+  protected boolean validateTableWithFollowingDescriptors(\n+      SqlCallBinding callBinding, int descriptors) {\n+    final SqlNode operand0 = callBinding.operand(0);\n+    final SqlValidator validator = callBinding.getValidator();\n+    final RelDataType type = validator.getValidatedNodeType(operand0);\n+    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n+      return false;\n+    }\n+    for (int i = 1; i < descriptors + 1; i++) {\n+      final SqlNode operand = callBinding.operand(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8366ac62a6cfedaf8c67fd3eb051756d72f9675"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNjkxMg==", "bodyText": "Because the descriptors  represent the number of the descriptors.", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469036912", "createdAt": "2020-08-12T06:39:23Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -66,7 +86,53 @@ protected boolean throwValidationSignatureErrorOrReturnFalse(SqlCallBinding call\n     }\n   }\n \n-  protected void validateColumnNames(SqlValidator validator,\n+  /**\n+   * Validate the heading operands are in the form:\n+   * (ROW, DESCRIPTOR, DESCRIPTOR ..., other params).\n+   *\n+   * @param callBinding The call binding\n+   * @param descriptors The number of descriptors following the first operand (e.g. the table)\n+   *\n+   * @return true if validation passes\n+   */\n+  protected boolean validateTableWithFollowingDescriptors(\n+      SqlCallBinding callBinding, int descriptors) {\n+    final SqlNode operand0 = callBinding.operand(0);\n+    final SqlValidator validator = callBinding.getValidator();\n+    final RelDataType type = validator.getValidatedNodeType(operand0);\n+    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n+      return false;\n+    }\n+    for (int i = 1; i < descriptors + 1; i++) {\n+      final SqlNode operand = callBinding.operand(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2NjIyNA=="}, "originalCommit": {"oid": "a8366ac62a6cfedaf8c67fd3eb051756d72f9675"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTI4MQ==", "bodyText": "i <= descriptors is better since it has fewer operations.", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469059281", "createdAt": "2020-08-12T07:27:20Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -66,7 +86,53 @@ protected boolean throwValidationSignatureErrorOrReturnFalse(SqlCallBinding call\n     }\n   }\n \n-  protected void validateColumnNames(SqlValidator validator,\n+  /**\n+   * Validate the heading operands are in the form:\n+   * (ROW, DESCRIPTOR, DESCRIPTOR ..., other params).\n+   *\n+   * @param callBinding The call binding\n+   * @param descriptors The number of descriptors following the first operand (e.g. the table)\n+   *\n+   * @return true if validation passes\n+   */\n+  protected boolean validateTableWithFollowingDescriptors(\n+      SqlCallBinding callBinding, int descriptors) {\n+    final SqlNode operand0 = callBinding.operand(0);\n+    final SqlValidator validator = callBinding.getValidator();\n+    final RelDataType type = validator.getValidatedNodeType(operand0);\n+    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n+      return false;\n+    }\n+    for (int i = 1; i < descriptors + 1; i++) {\n+      final SqlNode operand = callBinding.operand(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2NjIyNA=="}, "originalCommit": {"oid": "a8366ac62a6cfedaf8c67fd3eb051756d72f9675"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxOTIyNw==", "bodyText": "Hi @danny0405\nany suggestions on https://issues.apache.org/jira/browse/CALCITE-3780?focusedCommentId=17169620&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17169620?\nYour change will assume that the structure of window table functions be row, (ROW, DESCRIPTOR, DESCRIPTOR ..., other params), in the comment we are thinking to make key descriptor of SESSION as optional, which might mean it will be moved to the last of the arguments so it becomes SESSION(data TABLE, ts DESCRIPTOR, gap interval, key DESCRIPTOR optional)", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469619227", "createdAt": "2020-08-13T00:19:20Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -66,7 +86,53 @@ protected boolean throwValidationSignatureErrorOrReturnFalse(SqlCallBinding call\n     }\n   }\n \n-  protected void validateColumnNames(SqlValidator validator,\n+  /**\n+   * Validate the heading operands are in the form:\n+   * (ROW, DESCRIPTOR, DESCRIPTOR ..., other params).\n+   *\n+   * @param callBinding The call binding\n+   * @param descriptors The number of descriptors following the first operand (e.g. the table)\n+   *\n+   * @return true if validation passes\n+   */\n+  protected boolean validateTableWithFollowingDescriptors(\n+      SqlCallBinding callBinding, int descriptors) {\n+    final SqlNode operand0 = callBinding.operand(0);\n+    final SqlValidator validator = callBinding.getValidator();\n+    final RelDataType type = validator.getValidatedNodeType(operand0);\n+    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n+      return false;\n+    }\n+    for (int i = 1; i < descriptors + 1; i++) {\n+      final SqlNode operand = callBinding.operand(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2NjIyNA=="}, "originalCommit": {"oid": "a8366ac62a6cfedaf8c67fd3eb051756d72f9675"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMjQwNw==", "bodyText": "I think it is still straight-forward when it is the form (ROW, DESCRIPTOR ..., other params), in this form, we always assume that the DESCRIPTOR has the column as the time column.", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469812407", "createdAt": "2020-08-13T09:14:11Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -66,7 +86,53 @@ protected boolean throwValidationSignatureErrorOrReturnFalse(SqlCallBinding call\n     }\n   }\n \n-  protected void validateColumnNames(SqlValidator validator,\n+  /**\n+   * Validate the heading operands are in the form:\n+   * (ROW, DESCRIPTOR, DESCRIPTOR ..., other params).\n+   *\n+   * @param callBinding The call binding\n+   * @param descriptors The number of descriptors following the first operand (e.g. the table)\n+   *\n+   * @return true if validation passes\n+   */\n+  protected boolean validateTableWithFollowingDescriptors(\n+      SqlCallBinding callBinding, int descriptors) {\n+    final SqlNode operand0 = callBinding.operand(0);\n+    final SqlValidator validator = callBinding.getValidator();\n+    final RelDataType type = validator.getValidatedNodeType(operand0);\n+    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n+      return false;\n+    }\n+    for (int i = 1; i < descriptors + 1; i++) {\n+      final SqlNode operand = callBinding.operand(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2NjIyNA=="}, "originalCommit": {"oid": "a8366ac62a6cfedaf8c67fd3eb051756d72f9675"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0ODQ0OQ==", "bodyText": "Ok. I will take a look what is the best way when authoring that PR.", "url": "https://github.com/apache/calcite/pull/2103#discussion_r470248449", "createdAt": "2020-08-13T21:06:31Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -66,7 +86,53 @@ protected boolean throwValidationSignatureErrorOrReturnFalse(SqlCallBinding call\n     }\n   }\n \n-  protected void validateColumnNames(SqlValidator validator,\n+  /**\n+   * Validate the heading operands are in the form:\n+   * (ROW, DESCRIPTOR, DESCRIPTOR ..., other params).\n+   *\n+   * @param callBinding The call binding\n+   * @param descriptors The number of descriptors following the first operand (e.g. the table)\n+   *\n+   * @return true if validation passes\n+   */\n+  protected boolean validateTableWithFollowingDescriptors(\n+      SqlCallBinding callBinding, int descriptors) {\n+    final SqlNode operand0 = callBinding.operand(0);\n+    final SqlValidator validator = callBinding.getValidator();\n+    final RelDataType type = validator.getValidatedNodeType(operand0);\n+    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n+      return false;\n+    }\n+    for (int i = 1; i < descriptors + 1; i++) {\n+      final SqlNode operand = callBinding.operand(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2NjIyNA=="}, "originalCommit": {"oid": "a8366ac62a6cfedaf8c67fd3eb051756d72f9675"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDYyNjYxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjoyMDoyM1rOG_TS6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTozNDowOVrOG_ZjRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyOTYxMA==", "bodyText": "does the order of parameters matter?", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469029610", "createdAt": "2020-08-12T06:20:23Z", "author": {"login": "chunweilei"}, "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "diffHunk": "@@ -10287,13 +10287,41 @@ private void checkCustomColumnResolving(String table) {\n   }\n \n   @Test public void testTumbleTableFunction() {\n-    sql(\"select * from table(\\n\"\n-        + \"^tumble(table orders, descriptor(rowtime))^)\")\n-        .fails(\"Invalid number of arguments to function 'TUMBLE'. Was expecting 3 arguments\");\n     sql(\"select rowtime, productid, orderid, 'window_start', 'window_end' from table(\\n\"\n         + \"tumble(table orders, descriptor(rowtime), interval '2' hour))\").ok();\n     sql(\"select rowtime, productid, orderid, 'window_start', 'window_end' from table(\\n\"\n         + \"tumble(table orders, descriptor(rowtime), interval '2' hour, interval '1' hour))\").ok();\n+    // test named params.\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"data => table orders,\\n\"\n+        + \"timecol => descriptor(rowtime),\\n\"\n+        + \"size => interval '2' hour))\").ok();\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"data => table orders,\\n\"\n+        + \"timecol => descriptor(rowtime),\\n\"\n+        + \"size => interval '2' hour,\\n\"\n+        + \"\\\"OFFSET\\\" => interval '1' hour))\").ok();\n+    // negative tests.\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"TIMECOL => descriptor(rowtime),\\n\"\n+        + \"SIZE => interval '2' hour))\")\n+        .fails(\"Param 'data' not found in function 'TUMBLE'; did you mean 'DATA'\\\\?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8366ac62a6cfedaf8c67fd3eb051756d72f9675"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNjM1NA==", "bodyText": "No, but only the first data param, because for a table function, only the first param can be a query.", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469036354", "createdAt": "2020-08-12T06:37:59Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "diffHunk": "@@ -10287,13 +10287,41 @@ private void checkCustomColumnResolving(String table) {\n   }\n \n   @Test public void testTumbleTableFunction() {\n-    sql(\"select * from table(\\n\"\n-        + \"^tumble(table orders, descriptor(rowtime))^)\")\n-        .fails(\"Invalid number of arguments to function 'TUMBLE'. Was expecting 3 arguments\");\n     sql(\"select rowtime, productid, orderid, 'window_start', 'window_end' from table(\\n\"\n         + \"tumble(table orders, descriptor(rowtime), interval '2' hour))\").ok();\n     sql(\"select rowtime, productid, orderid, 'window_start', 'window_end' from table(\\n\"\n         + \"tumble(table orders, descriptor(rowtime), interval '2' hour, interval '1' hour))\").ok();\n+    // test named params.\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"data => table orders,\\n\"\n+        + \"timecol => descriptor(rowtime),\\n\"\n+        + \"size => interval '2' hour))\").ok();\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"data => table orders,\\n\"\n+        + \"timecol => descriptor(rowtime),\\n\"\n+        + \"size => interval '2' hour,\\n\"\n+        + \"\\\"OFFSET\\\" => interval '1' hour))\").ok();\n+    // negative tests.\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"TIMECOL => descriptor(rowtime),\\n\"\n+        + \"SIZE => interval '2' hour))\")\n+        .fails(\"Param 'data' not found in function 'TUMBLE'; did you mean 'DATA'\\\\?\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyOTYxMA=="}, "originalCommit": {"oid": "a8366ac62a6cfedaf8c67fd3eb051756d72f9675"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTY5Mw==", "bodyText": "Should we add some tests about it? (Ignore it if it already has)", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469059693", "createdAt": "2020-08-12T07:28:10Z", "author": {"login": "chunweilei"}, "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "diffHunk": "@@ -10287,13 +10287,41 @@ private void checkCustomColumnResolving(String table) {\n   }\n \n   @Test public void testTumbleTableFunction() {\n-    sql(\"select * from table(\\n\"\n-        + \"^tumble(table orders, descriptor(rowtime))^)\")\n-        .fails(\"Invalid number of arguments to function 'TUMBLE'. Was expecting 3 arguments\");\n     sql(\"select rowtime, productid, orderid, 'window_start', 'window_end' from table(\\n\"\n         + \"tumble(table orders, descriptor(rowtime), interval '2' hour))\").ok();\n     sql(\"select rowtime, productid, orderid, 'window_start', 'window_end' from table(\\n\"\n         + \"tumble(table orders, descriptor(rowtime), interval '2' hour, interval '1' hour))\").ok();\n+    // test named params.\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"data => table orders,\\n\"\n+        + \"timecol => descriptor(rowtime),\\n\"\n+        + \"size => interval '2' hour))\").ok();\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"data => table orders,\\n\"\n+        + \"timecol => descriptor(rowtime),\\n\"\n+        + \"size => interval '2' hour,\\n\"\n+        + \"\\\"OFFSET\\\" => interval '1' hour))\").ok();\n+    // negative tests.\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"TIMECOL => descriptor(rowtime),\\n\"\n+        + \"SIZE => interval '2' hour))\")\n+        .fails(\"Param 'data' not found in function 'TUMBLE'; did you mean 'DATA'\\\\?\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyOTYxMA=="}, "originalCommit": {"oid": "a8366ac62a6cfedaf8c67fd3eb051756d72f9675"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEzMjEwMw==", "bodyText": "Already added in the SqlToRelConverterTest.", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469132103", "createdAt": "2020-08-12T09:34:09Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "diffHunk": "@@ -10287,13 +10287,41 @@ private void checkCustomColumnResolving(String table) {\n   }\n \n   @Test public void testTumbleTableFunction() {\n-    sql(\"select * from table(\\n\"\n-        + \"^tumble(table orders, descriptor(rowtime))^)\")\n-        .fails(\"Invalid number of arguments to function 'TUMBLE'. Was expecting 3 arguments\");\n     sql(\"select rowtime, productid, orderid, 'window_start', 'window_end' from table(\\n\"\n         + \"tumble(table orders, descriptor(rowtime), interval '2' hour))\").ok();\n     sql(\"select rowtime, productid, orderid, 'window_start', 'window_end' from table(\\n\"\n         + \"tumble(table orders, descriptor(rowtime), interval '2' hour, interval '1' hour))\").ok();\n+    // test named params.\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"data => table orders,\\n\"\n+        + \"timecol => descriptor(rowtime),\\n\"\n+        + \"size => interval '2' hour))\").ok();\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"data => table orders,\\n\"\n+        + \"timecol => descriptor(rowtime),\\n\"\n+        + \"size => interval '2' hour,\\n\"\n+        + \"\\\"OFFSET\\\" => interval '1' hour))\").ok();\n+    // negative tests.\n+    sql(\"select rowtime, productid, orderid, 'window_start', 'window_end'\\n\"\n+        + \"from table(\\n\"\n+        + \"tumble(\\n\"\n+        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"TIMECOL => descriptor(rowtime),\\n\"\n+        + \"SIZE => interval '2' hour))\")\n+        .fails(\"Param 'data' not found in function 'TUMBLE'; did you mean 'DATA'\\\\?\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyOTYxMA=="}, "originalCommit": {"oid": "a8366ac62a6cfedaf8c67fd3eb051756d72f9675"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMyNDg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1MzozNlrOG_2vSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMTowNjozN1rOHAdsJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDMxMg==", "bodyText": "Note that I asked one of the authors of the \"one sql to rule them all\" paper. The only reason that they use wstart and wend was because of the layout for a paper. I got suggestion to use window_start and window_end.\nI also believe in a JIRA or an email (sorry I cannot recall which one it is) we agreed to switch to window_start and window_end.\nSo I will suggest we keep window_start and window_end, which can be understood easier than wstart/wend.", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469610312", "createdAt": "2020-08-12T23:53:36Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -98,8 +173,8 @@ private static RelDataType inferRowType(SqlOperatorBinding opBinding) {\n     return typeFactory.builder()\n         .kind(inputRowType.getStructKind())\n         .addAll(inputRowType.getFieldList())\n-        .add(\"window_start\", timestampType)\n-        .add(\"window_end\", timestampType)\n+        .add(\"wstart\", timestampType)\n+        .add(\"wend\", timestampType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d900acad2a4e9db2a5e0f5f72f8cbdea8ab6227d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzNDEyOQ==", "bodyText": "Well, I didn\u2019t notice that, can you share the discussion?", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469634129", "createdAt": "2020-08-13T01:01:09Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -98,8 +173,8 @@ private static RelDataType inferRowType(SqlOperatorBinding opBinding) {\n     return typeFactory.builder()\n         .kind(inputRowType.getStructKind())\n         .addAll(inputRowType.getFieldList())\n-        .add(\"window_start\", timestampType)\n-        .add(\"window_end\", timestampType)\n+        .add(\"wstart\", timestampType)\n+        .add(\"wend\", timestampType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDMxMg=="}, "originalCommit": {"oid": "d900acad2a4e9db2a5e0f5f72f8cbdea8ab6227d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MjYzMA==", "bodyText": "I will spend some time to search for that JIRA.", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469642630", "createdAt": "2020-08-13T01:25:25Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -98,8 +173,8 @@ private static RelDataType inferRowType(SqlOperatorBinding opBinding) {\n     return typeFactory.builder()\n         .kind(inputRowType.getStructKind())\n         .addAll(inputRowType.getFieldList())\n-        .add(\"window_start\", timestampType)\n-        .add(\"window_end\", timestampType)\n+        .add(\"wstart\", timestampType)\n+        .add(\"wend\", timestampType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDMxMg=="}, "originalCommit": {"oid": "d900acad2a4e9db2a5e0f5f72f8cbdea8ab6227d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0Nzg0OA==", "bodyText": "ok. I might or might not discussed this in Calcite (because I cannot find a JIRA that about it), but\n\n\nThis is the acknowledge from Kenneth Knowles, one of the paper authors: https://docs.google.com/document/d/138uA7VTpbF84CFrd--cz3YVe0-AQ9ALnsavaSE2JeE4/edit?disco=AAAAEAjWvxg\n\n\nI started to use window_start and window_end in https://issues.apache.org/jira/browse/CALCITE-3272. Julian, as another paper author, didn't against it I think.", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469747848", "createdAt": "2020-08-13T07:21:59Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -98,8 +173,8 @@ private static RelDataType inferRowType(SqlOperatorBinding opBinding) {\n     return typeFactory.builder()\n         .kind(inputRowType.getStructKind())\n         .addAll(inputRowType.getFieldList())\n-        .add(\"window_start\", timestampType)\n-        .add(\"window_end\", timestampType)\n+        .add(\"wstart\", timestampType)\n+        .add(\"wend\", timestampType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDMxMg=="}, "originalCommit": {"oid": "d900acad2a4e9db2a5e0f5f72f8cbdea8ab6227d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMjc0Ng==", "bodyText": "Thanks for the share, i have reverted the rename back.", "url": "https://github.com/apache/calcite/pull/2103#discussion_r469812746", "createdAt": "2020-08-13T09:14:45Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -98,8 +173,8 @@ private static RelDataType inferRowType(SqlOperatorBinding opBinding) {\n     return typeFactory.builder()\n         .kind(inputRowType.getStructKind())\n         .addAll(inputRowType.getFieldList())\n-        .add(\"window_start\", timestampType)\n-        .add(\"window_end\", timestampType)\n+        .add(\"wstart\", timestampType)\n+        .add(\"wend\", timestampType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDMxMg=="}, "originalCommit": {"oid": "d900acad2a4e9db2a5e0f5f72f8cbdea8ab6227d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0ODQ4Nw==", "bodyText": "Thank you!", "url": "https://github.com/apache/calcite/pull/2103#discussion_r470248487", "createdAt": "2020-08-13T21:06:37Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlWindowTableFunction.java", "diffHunk": "@@ -98,8 +173,8 @@ private static RelDataType inferRowType(SqlOperatorBinding opBinding) {\n     return typeFactory.builder()\n         .kind(inputRowType.getStructKind())\n         .addAll(inputRowType.getFieldList())\n-        .add(\"window_start\", timestampType)\n-        .add(\"window_end\", timestampType)\n+        .add(\"wstart\", timestampType)\n+        .add(\"wend\", timestampType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDMxMg=="}, "originalCommit": {"oid": "d900acad2a4e9db2a5e0f5f72f8cbdea8ab6227d"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 107, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}