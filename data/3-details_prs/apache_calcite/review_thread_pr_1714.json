{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NTc4Nzg1", "number": 1714, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxODozNDowNFrODVg5-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMzozODoyNlrODVloKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzODg1ODE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxODozNDowNFrOFZyFGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNToyMDo0NVrOFaCY8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3OTIyNw==", "bodyText": "Also need to validate the second operand?", "url": "https://github.com/apache/calcite/pull/1714#discussion_r362579227", "createdAt": "2020-01-02T18:34:04Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java", "diffHunk": "@@ -192,6 +197,37 @@ public BigQuerySqlDialect(SqlDialect.Context context) {\n     }\n   }\n \n+  /**\n+   * For usage of TRIM, LTRIM and RTRIM in BQ see\n+   * <a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#trim\">\n+   *  BQ Trim Function</a>.\n+   */\n+  private void unparseTrim(SqlWriter writer, SqlCall call, int leftPrec,\n+      int rightPrec) {\n+    assert call.operand(0) instanceof SqlLiteral : call.operand(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "371c648a93c874dd21d2670123eb560afd2aab0f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NjQ1MA==", "bodyText": "Removed this assert as the operands type check is already done in SqlTrimFunction class", "url": "https://github.com/apache/calcite/pull/1714#discussion_r362846450", "createdAt": "2020-01-03T15:20:45Z", "author": {"login": "dhirenda-gautam"}, "path": "core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java", "diffHunk": "@@ -192,6 +197,37 @@ public BigQuerySqlDialect(SqlDialect.Context context) {\n     }\n   }\n \n+  /**\n+   * For usage of TRIM, LTRIM and RTRIM in BQ see\n+   * <a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#trim\">\n+   *  BQ Trim Function</a>.\n+   */\n+  private void unparseTrim(SqlWriter writer, SqlCall call, int leftPrec,\n+      int rightPrec) {\n+    assert call.operand(0) instanceof SqlLiteral : call.operand(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3OTIyNw=="}, "originalCommit": {"oid": "371c648a93c874dd21d2670123eb560afd2aab0f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzODg2NTY3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxODozNzo0NlrOFZyJ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDo1NToyMVrOFaBzfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU4MDQzNw==", "bodyText": "As you can see there is a comment about this test case which is hive related. So you can also add comments for BQ.\nYou can either add another comment for BQ, or split this test case to hive and BQ and then add comments seperately.", "url": "https://github.com/apache/calcite/pull/1714#discussion_r362580437", "createdAt": "2020-01-02T18:37:46Z", "author": {"login": "amaliujia"}, "path": "core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java", "diffHunk": "@@ -958,36 +958,82 @@ private static String toSql(RelNode root, SqlDialect dialect) {\n    * <a href=\"https://issues.apache.org/jira/browse/CALCITE-3220\">[CALCITE-3220]\n    * HiveSqlDialect should transform the SQL-standard TRIM function to TRIM,\n    * LTRIM or RTRIM</a>. */\n-  @Test public void testHiveTrim() {\n+  @Test public void testHiveAndBqTrim() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "371c648a93c874dd21d2670123eb560afd2aab0f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgzNjg2MQ==", "bodyText": "Added the comment for the BQ test cases along with JIRA Id", "url": "https://github.com/apache/calcite/pull/1714#discussion_r362836861", "createdAt": "2020-01-03T14:55:21Z", "author": {"login": "dhirenda-gautam"}, "path": "core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java", "diffHunk": "@@ -958,36 +958,82 @@ private static String toSql(RelNode root, SqlDialect dialect) {\n    * <a href=\"https://issues.apache.org/jira/browse/CALCITE-3220\">[CALCITE-3220]\n    * HiveSqlDialect should transform the SQL-standard TRIM function to TRIM,\n    * LTRIM or RTRIM</a>. */\n-  @Test public void testHiveTrim() {\n+  @Test public void testHiveAndBqTrim() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU4MDQzNw=="}, "originalCommit": {"oid": "371c648a93c874dd21d2670123eb560afd2aab0f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTYzMTc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMzozODoyNlrOFZ5aJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDo1NTozMVrOFaBztQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY5OTMwMg==", "bodyText": "This if logic is different with that of HiveSqlDialect. Could you add doc for it?", "url": "https://github.com/apache/calcite/pull/1714#discussion_r362699302", "createdAt": "2020-01-03T03:38:26Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java", "diffHunk": "@@ -192,6 +197,37 @@ public BigQuerySqlDialect(SqlDialect.Context context) {\n     }\n   }\n \n+  /**\n+   * For usage of TRIM, LTRIM and RTRIM in BQ see\n+   * <a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#trim\">\n+   *  BQ Trim Function</a>.\n+   */\n+  private void unparseTrim(SqlWriter writer, SqlCall call, int leftPrec,\n+      int rightPrec) {\n+    assert call.operand(0) instanceof SqlLiteral : call.operand(0);\n+    final String operatorName;\n+    SqlLiteral trimFlag = call.operand(0);\n+    SqlLiteral valueToTrim = call.operand(1);\n+    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n+    case LEADING:\n+      operatorName = \"LTRIM\";\n+      break;\n+    case TRAILING:\n+      operatorName = \"RTRIM\";\n+      break;\n+    default:\n+      operatorName = call.getOperator().getName();\n+      break;\n+    }\n+    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n+    call.operand(2).unparse(writer, leftPrec, rightPrec);\n+    if (!valueToTrim.toValue().matches(\"\\\\s+\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "371c648a93c874dd21d2670123eb560afd2aab0f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgzNjkxNw==", "bodyText": "Added the doc which specify the purpose of the if block", "url": "https://github.com/apache/calcite/pull/1714#discussion_r362836917", "createdAt": "2020-01-03T14:55:31Z", "author": {"login": "dhirenda-gautam"}, "path": "core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java", "diffHunk": "@@ -192,6 +197,37 @@ public BigQuerySqlDialect(SqlDialect.Context context) {\n     }\n   }\n \n+  /**\n+   * For usage of TRIM, LTRIM and RTRIM in BQ see\n+   * <a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#trim\">\n+   *  BQ Trim Function</a>.\n+   */\n+  private void unparseTrim(SqlWriter writer, SqlCall call, int leftPrec,\n+      int rightPrec) {\n+    assert call.operand(0) instanceof SqlLiteral : call.operand(0);\n+    final String operatorName;\n+    SqlLiteral trimFlag = call.operand(0);\n+    SqlLiteral valueToTrim = call.operand(1);\n+    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n+    case LEADING:\n+      operatorName = \"LTRIM\";\n+      break;\n+    case TRAILING:\n+      operatorName = \"RTRIM\";\n+      break;\n+    default:\n+      operatorName = call.getOperator().getName();\n+      break;\n+    }\n+    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n+    call.operand(2).unparse(writer, leftPrec, rightPrec);\n+    if (!valueToTrim.toValue().matches(\"\\\\s+\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY5OTMwMg=="}, "originalCommit": {"oid": "371c648a93c874dd21d2670123eb560afd2aab0f"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 343, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}