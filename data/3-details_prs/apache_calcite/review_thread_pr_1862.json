{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDE4OTc3", "number": 1862, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0NzoyNFrODqdoHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzoyMjo0M1rODr6S9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODUyMTg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0NzoyNFrOF6ObXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDowNDozOFrOF6pAgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5ODExMQ==", "bodyText": "I noticed that the number of function parameters in different databases is different:\nMysql\nCONCAT(string1,string2, ... );\n\nOracle\nCONCAT(char1, char2)\n\nPostgreSql\nCONCAT(str_1, str_2, ...)", "url": "https://github.com/apache/calcite/pull/1862#discussion_r396598111", "createdAt": "2020-03-23T16:47:24Z", "author": {"login": "XuQianJin-Stars"}, "path": "core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java", "diffHunk": "@@ -460,6 +460,15 @@ public static ByteString concat(ByteString s0, ByteString s1) {\n     return s0.concat(s1);\n   }\n \n+  /** SQL function CONCAT(arg, ...)*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0a0031e67f5261a38665660a250a122cb92eb7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMzYwMw==", "bodyText": "I noticed this problem too, and I found that creating two SqlFunction for CONCAT is redundant and unnecessary, what's more, it maybe cause exception when look up method.\nI have updated this pull request, concat function is equivalent to || operator.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397033603", "createdAt": "2020-03-24T10:04:38Z", "author": {"login": "wenhuitang"}, "path": "core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java", "diffHunk": "@@ -460,6 +460,15 @@ public static ByteString concat(ByteString s0, ByteString s1) {\n     return s0.concat(s1);\n   }\n \n+  /** SQL function CONCAT(arg, ...)*/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5ODExMQ=="}, "originalCommit": {"oid": "8f0a0031e67f5261a38665660a250a122cb92eb7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTI2OTg1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDoxNToxNVrOF6pZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo1MzoxOFrOF6qwzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzOTk0MA==", "bodyText": "oracle CONCAT (char1, char2) only accept how to reflect two parameters?", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397039940", "createdAt": "2020-03-24T10:15:15Z", "author": {"login": "XuQianJin-Stars"}, "path": "core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java", "diffHunk": "@@ -2169,6 +2170,21 @@ protected static Calendar getCalendarNotTooNear(int timeUnit) {\n         \"VARCHAR(33335) NOT NULL\");\n     tester.checkNull(\"x'ff' || cast(null as varbinary)\");\n     tester.checkNull(\" cast(null as ANY) || cast(null as ANY) \");\n+    tester.checkString(\"cast('a' as varchar) || cast('b' as varchar) \"\n+        + \"|| cast('c' as varchar)\", \"abc\", \"VARCHAR NOT NULL\");\n+\n+    final SqlTester tester1 = tester(SqlLibrary.MYSQL);\n+    final SqlTester tester2 = tester(SqlLibrary.POSTGRESQL);\n+    final SqlTester tester3 = tester(SqlLibrary.ORACLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NjEzMg==", "bodyText": "I don't think that it is a serious problem since concat function will be translated to || operator and it can work well for oracle and also support concat('a', 'b'). In a practical application scenario, we may use two SqlLibaray at a same time, if they have different concat function, ambiguity will be caused when check arguements, even we register oracle concat as a alias of SqlStdOperatorTable.CONCAT.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397056132", "createdAt": "2020-03-24T10:42:33Z", "author": {"login": "wenhuitang"}, "path": "core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java", "diffHunk": "@@ -2169,6 +2170,21 @@ protected static Calendar getCalendarNotTooNear(int timeUnit) {\n         \"VARCHAR(33335) NOT NULL\");\n     tester.checkNull(\"x'ff' || cast(null as varbinary)\");\n     tester.checkNull(\" cast(null as ANY) || cast(null as ANY) \");\n+    tester.checkString(\"cast('a' as varchar) || cast('b' as varchar) \"\n+        + \"|| cast('c' as varchar)\", \"abc\", \"VARCHAR NOT NULL\");\n+\n+    final SqlTester tester1 = tester(SqlLibrary.MYSQL);\n+    final SqlTester tester2 = tester(SqlLibrary.POSTGRESQL);\n+    final SqlTester tester3 = tester(SqlLibrary.ORACLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzOTk0MA=="}, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2MjM0OA==", "bodyText": "I don't think that it is a serious problem since concat function will be translated to || operator and it can work well for oracle and also support concat('a', 'b'). In a practical application scenario, we may use two SqlLibaray at a same time, if they have different concat function, ambiguity will be caused when check arguements, even we register oracle concat as a alias of SqlStdOperatorTable.CONCAT.\n\nI did not say that this is a serious problem, but I noticed that oracle's concat is a special case of your concat implementation. Because oracle concat only supports two parameters.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397062348", "createdAt": "2020-03-24T10:53:18Z", "author": {"login": "XuQianJin-Stars"}, "path": "core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java", "diffHunk": "@@ -2169,6 +2170,21 @@ protected static Calendar getCalendarNotTooNear(int timeUnit) {\n         \"VARCHAR(33335) NOT NULL\");\n     tester.checkNull(\"x'ff' || cast(null as varbinary)\");\n     tester.checkNull(\" cast(null as ANY) || cast(null as ANY) \");\n+    tester.checkString(\"cast('a' as varchar) || cast('b' as varchar) \"\n+        + \"|| cast('c' as varchar)\", \"abc\", \"VARCHAR NOT NULL\");\n+\n+    final SqlTester tester1 = tester(SqlLibrary.MYSQL);\n+    final SqlTester tester2 = tester(SqlLibrary.POSTGRESQL);\n+    final SqlTester tester3 = tester(SqlLibrary.ORACLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzOTk0MA=="}, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTcyMzczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyNjowMFrOF6t2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyNjowMFrOF6t2xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMzAyOA==", "bodyText": "Please move this piece of code before switch-case block, you can refer to the style in OracleSqlDialect.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397113028", "createdAt": "2020-03-24T12:26:00Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java", "diffHunk": "@@ -208,12 +212,52 @@ public boolean supportsAliasedValues() {\n \n       unparseFloor(writer, call);\n       break;\n-\n     default:\n+      if (call.getOperator() == SqlStdOperatorTable.CONCAT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTcyNzI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlLibraryOperators.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyNzowNFrOF6t48Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzo0MDozNVrOF6wrTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMzU4NQ==", "bodyText": "Can we add some doc here?", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397113585", "createdAt": "2020-03-24T12:27:04Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlLibraryOperators.java", "diffHunk": "@@ -286,8 +286,13 @@ private SqlLibraryOperators() {\n               opBinding -> {\n                 int precision = opBinding.collectOperandTypes().stream()\n                     .mapToInt(RelDataType::getPrecision).sum();\n-                return opBinding.getTypeFactory()\n-                    .createSqlType(SqlTypeName.VARCHAR, precision);\n+                if (precision > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1OTI0NA==", "bodyText": "Thanks a lot, I have already addressed. And make a little change of code.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397159244", "createdAt": "2020-03-24T13:40:35Z", "author": {"login": "wenhuitang"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlLibraryOperators.java", "diffHunk": "@@ -286,8 +286,13 @@ private SqlLibraryOperators() {\n               opBinding -> {\n                 int precision = opBinding.collectOperandTypes().stream()\n                     .mapToInt(RelDataType::getPrecision).sum();\n-                return opBinding.getTypeFactory()\n-                    .createSqlType(SqlTypeName.VARCHAR, precision);\n+                if (precision > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMzU4NQ=="}, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTc5ODM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0NzowMlrOF6ulNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzo0MzozMlrOF6w0CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNDkxNg==", "bodyText": "Why do we need to expand operands? operand.unparse can recursively handle nested case in nature.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397124916", "createdAt": "2020-03-24T12:47:02Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java", "diffHunk": "@@ -208,12 +212,52 @@ public boolean supportsAliasedValues() {\n \n       unparseFloor(writer, call);\n       break;\n-\n     default:\n+      if (call.getOperator() == SqlStdOperatorTable.CONCAT) {\n+        unparseConcat(writer, call);\n+        break;\n+      }\n       super.unparseCall(writer, call, leftPrec, rightPrec);\n     }\n   }\n \n+  /**\n+   * Unparses String concatenation operator for Mysql, Mysql uses Concat as string concatenation\n+   * operator when PIPES_AS_CONCAT is not enabled. CONCAT concatenation characters are used by\n+   * default.\n+   *\n+   * @param writer writer\n+   * @param call call\n+   */\n+  private void unparseConcat(SqlWriter writer, SqlCall call) {\n+    List<SqlNode> expandOperandList = new ArrayList<>();\n+    expandConcatOperands(call, expandOperandList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MTQ4MQ==", "bodyText": "Why do we need to expand operands? operand.unparse can recursively handle nested case in nature.\n\nExpand operands for CONCAT, so we can generate CONCAT(fname, '', '', lname) instead of CONCAT(CONCAT(CONCAT(fname, ''), ''), lname)", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397161481", "createdAt": "2020-03-24T13:43:32Z", "author": {"login": "wenhuitang"}, "path": "core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java", "diffHunk": "@@ -208,12 +212,52 @@ public boolean supportsAliasedValues() {\n \n       unparseFloor(writer, call);\n       break;\n-\n     default:\n+      if (call.getOperator() == SqlStdOperatorTable.CONCAT) {\n+        unparseConcat(writer, call);\n+        break;\n+      }\n       super.unparseCall(writer, call, leftPrec, rightPrec);\n     }\n   }\n \n+  /**\n+   * Unparses String concatenation operator for Mysql, Mysql uses Concat as string concatenation\n+   * operator when PIPES_AS_CONCAT is not enabled. CONCAT concatenation characters are used by\n+   * default.\n+   *\n+   * @param writer writer\n+   * @param call call\n+   */\n+  private void unparseConcat(SqlWriter writer, SqlCall call) {\n+    List<SqlNode> expandOperandList = new ArrayList<>();\n+    expandConcatOperands(call, expandOperandList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNDkxNg=="}, "originalCommit": {"oid": "689780e87195e6db10f83f22411fe30e36b96443"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDcyMDgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlLibraryOperators.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NjoyMFrOF7LOVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NjoyMFrOF7LOVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDE5Nw==", "bodyText": "In concat(x, y, z), if the precision of x, y, z are specified (i.e., precision != PRECISION_NOT_SPECIFIED), the return type is the sum of them. However, if one operand's precision is PRECISION_NOT_SPECIFIED, the return type should also be PRECISION_NOT_SPECIFIED.\nE.g., for concat('aaa', cast('bb' as varchar), 'ccc'), operand's precisions are: [3, -1, 3]. The return type's precision (3-1+3=5) is not resonable.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397594197", "createdAt": "2020-03-25T03:46:20Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlLibraryOperators.java", "diffHunk": "@@ -286,6 +286,9 @@ private SqlLibraryOperators() {\n               opBinding -> {\n                 int precision = opBinding.collectOperandTypes().stream()\n                     .mapToInt(RelDataType::getPrecision).sum();\n+                // precision may be smaller than -1 when operands' precision are not be specified,\n+                // which is not allowed.\n+                precision = Math.max(precision, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "517d0d53105fdd594d112d1f493b4a246db4ffe4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTQ4OTI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyNzowNFrOF7SZig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyNzowNFrOF7SZig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMTc1NA==", "bodyText": "You can use String.join(\"\", args).", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397711754", "createdAt": "2020-03-25T09:27:04Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java", "diffHunk": "@@ -460,6 +460,14 @@ public static ByteString concat(ByteString s0, ByteString s1) {\n     return s0.concat(s1);\n   }\n \n+  /** SQL {@code concat(string0, string2, string3, ...)} function. */\n+  public static String concat(String... args) {\n+    List<String> argList = Arrays.asList(args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTQ5ODcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyOToxNlrOF7SfPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjowMjozOVrOF7X53g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMzIxMw==", "bodyText": "Maybe there is no need to register CONCAT2 into RexImpTable. In runtime, Calcite can automatically find the concat function. You can have a try.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397713213", "createdAt": "2020-03-25T09:29:16Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "diffHunk": "@@ -332,6 +334,8 @@\n         NullPolicy.STRICT);\n     defineMethod(CONCAT, BuiltInMethod.STRING_CONCAT.method,\n         NullPolicy.STRICT);\n+    defineMethod(CONCAT2, BuiltInMethod.STRING_CONCAT.method, NullPolicy.STRICT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwMTk1MA==", "bodyText": "Still keep defineMethod for CONCAT2 for looking up method clearly.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397801950", "createdAt": "2020-03-25T12:02:39Z", "author": {"login": "wenhuitang"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "diffHunk": "@@ -332,6 +334,8 @@\n         NullPolicy.STRICT);\n     defineMethod(CONCAT, BuiltInMethod.STRING_CONCAT.method,\n         NullPolicy.STRICT);\n+    defineMethod(CONCAT2, BuiltInMethod.STRING_CONCAT.method, NullPolicy.STRICT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMzIxMw=="}, "originalCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTUwODQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTozMTozNlrOF7SlSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTozMTozNlrOF7SlSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNDc2Mw==", "bodyText": "To align with args, \"arg0, arg1...\" is better than \"string0, ..\" in doc.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397714763", "createdAt": "2020-03-25T09:31:36Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java", "diffHunk": "@@ -460,6 +460,14 @@ public static ByteString concat(ByteString s0, ByteString s1) {\n     return s0.concat(s1);\n   }\n \n+  /** SQL {@code concat(string0, string2, string3, ...)} function. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTY3NDQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxNDo1M1rOF7UNdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxNDo1M1rOF7UNdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MTQzMQ==", "bodyText": "You can directly break the iteration when: 1) encountering PRECISION_NOT_SPECIFIED, 2) amount large than max precision.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397741431", "createdAt": "2020-03-25T10:14:53Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "diffHunk": "@@ -655,6 +655,54 @@ public int size() {\n         return ret;\n       };\n \n+\n+  /**\n+   * Type-inference strategy for String concatenation.\n+   * For example,\n+   *\n+   * concat(cast('a' as varchar(2)), cast('b' as varchar(3)),cast('c' as varchar(2)))\n+   * returns varchar(7),\n+   *\n+   * concat(cast('a' as varchar), cast('b' as varchar(2), cast('c' as varchar(2))))\n+   * returns varchar,\n+   *\n+   * concat(cast('a' as varchar(65535)), cast('b' as varchar(2)), cast('c' as varchar(2)))\n+   * returns varchar\n+   */\n+  public static final SqlReturnTypeInference MULTIVALENT_STRING_SUM_PRECISION =\n+      opBinding -> {\n+        boolean hasPrecisionNotSpecifiedOperand = false;\n+        int typePrecision;\n+        long amount = 0;\n+        List<RelDataType> operandTypes = opBinding.collectOperandTypes();\n+        for (RelDataType operandType: operandTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTcxOTQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoyNjo1MVrOF7Up6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoyNjo1MVrOF7Up6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0ODcxNQ==", "bodyText": "Improve the comment, you can refer to DYADIC_STRING_SUM_PRECISION for \"||\" operator.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r397748715", "createdAt": "2020-03-25T10:26:51Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "diffHunk": "@@ -655,6 +655,54 @@ public int size() {\n         return ret;\n       };\n \n+\n+  /**\n+   * Type-inference strategy for String concatenation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf7349335c2574d281dc91cf09ed5d439ba9858"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTEwNzQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxMDoyNFrOF8IvRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxMDoyNFrOF8IvRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwMjA1NQ==", "bodyText": "End up the comment with dot.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r398602055", "createdAt": "2020-03-26T14:10:24Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "diffHunk": "@@ -655,6 +655,59 @@ public int size() {\n         return ret;\n       };\n \n+\n+  /**\n+   * Type-inference strategy for String concatenation.\n+   * Result is varying if either input is; otherwise fixed.\n+   * For example,\n+   *\n+   * concat(cast('a' as varchar(2)), cast('b' as varchar(3)),cast('c' as varchar(2)))\n+   * returns varchar(7),\n+   *\n+   * concat(cast('a' as varchar), cast('b' as varchar(2), cast('c' as varchar(2))))\n+   * returns varchar,\n+   *\n+   * concat(cast('a' as varchar(65535)), cast('b' as varchar(2)), cast('c' as varchar(2)))\n+   * returns varchar\n+   */\n+  public static final SqlReturnTypeInference MULTIVALENT_STRING_SUM_PRECISION =\n+      opBinding -> {\n+        boolean hasPrecisionNotSpecifiedOperand = false;\n+        boolean precisionOverflow = false;\n+        int typePrecision;\n+        long amount = 0;\n+        List<RelDataType> operandTypes = opBinding.collectOperandTypes();\n+        final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();\n+        final RelDataTypeSystem typeSystem = typeFactory.getTypeSystem();\n+        for (RelDataType operandType: operandTypes) {\n+          int operandPrecision = operandType.getPrecision();\n+          amount = (long) operandPrecision + amount;\n+          if (operandPrecision == RelDataType.PRECISION_NOT_SPECIFIED) {\n+            hasPrecisionNotSpecifiedOperand = true;\n+            break;\n+          }\n+          if (amount > typeSystem.getMaxPrecision(SqlTypeName.VARCHAR)) {\n+            precisionOverflow = true;\n+            break;\n+          }\n+        }\n+        if (hasPrecisionNotSpecifiedOperand || precisionOverflow) {\n+          typePrecision = RelDataType.PRECISION_NOT_SPECIFIED;\n+        } else {\n+          typePrecision = (int) amount;\n+        }\n+\n+        return opBinding.getTypeFactory()\n+            .createSqlType(SqlTypeName.VARCHAR, typePrecision);\n+      };\n+\n+  /**\n+   * Same as {@link #MULTIVALENT_STRING_SUM_PRECISION} and using\n+   * {@link org.apache.calcite.sql.type.SqlTypeTransforms#TO_NULLABLE}\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7152d72d11d22f53d921a1a0130ef052651e1aef"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTExODQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxMjo0OVrOF8I2gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxMjo0OVrOF8I2gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwMzkwNA==", "bodyText": "Start with <p> If there is a blank line ahead. And end with dot.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r398603904", "createdAt": "2020-03-26T14:12:49Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java", "diffHunk": "@@ -655,6 +655,59 @@ public int size() {\n         return ret;\n       };\n \n+\n+  /**\n+   * Type-inference strategy for String concatenation.\n+   * Result is varying if either input is; otherwise fixed.\n+   * For example,\n+   *\n+   * concat(cast('a' as varchar(2)), cast('b' as varchar(3)),cast('c' as varchar(2)))\n+   * returns varchar(7),\n+   *\n+   * concat(cast('a' as varchar), cast('b' as varchar(2), cast('c' as varchar(2))))\n+   * returns varchar,\n+   *\n+   * concat(cast('a' as varchar(65535)), cast('b' as varchar(2)), cast('c' as varchar(2)))\n+   * returns varchar\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7152d72d11d22f53d921a1a0130ef052651e1aef"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzcwNDg0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzoyMjo0M1rOF8h5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzoyMjo0M1rOF8h5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxNDI3OQ==", "bodyText": "Please add a test case whose parameter is empty.", "url": "https://github.com/apache/calcite/pull/1862#discussion_r399014279", "createdAt": "2020-03-27T03:22:43Z", "author": {"login": "chunweilei"}, "path": "core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java", "diffHunk": "@@ -2169,6 +2173,31 @@ protected static Calendar getCalendarNotTooNear(int timeUnit) {\n         \"VARCHAR(33335) NOT NULL\");\n     tester.checkNull(\"x'ff' || cast(null as varbinary)\");\n     tester.checkNull(\" cast(null as ANY) || cast(null as ANY) \");\n+    tester.checkString(\"cast('a' as varchar) || cast('b' as varchar) \"\n+        + \"|| cast('c' as varchar)\", \"abc\", \"VARCHAR NOT NULL\");\n+\n+    final SqlTester tester1 = tester(SqlLibrary.MYSQL);\n+    final SqlTester tester2 = tester(SqlLibrary.POSTGRESQL);\n+    final SqlTester tester3 = tester(SqlLibrary.ORACLE);\n+    for (SqlTester sqlTester: ImmutableList.of(tester1, tester2)) {\n+      sqlTester.setFor(SqlLibraryOperators.CONCAT_FUNCTION);\n+      sqlTester.checkString(\"concat('a', 'b', 'c')\", \"abc\",\n+          \"VARCHAR(3) NOT NULL\");\n+      sqlTester.checkString(\"concat(cast('a' as varchar), cast('b' as varchar), \"\n+          + \"cast('c' as varchar))\", \"abc\", \"VARCHAR NOT NULL\");\n+      sqlTester.checkNull(\"concat('a', 'b', cast(null as char(2)))\");\n+      sqlTester.checkNull(\"concat(cast(null as ANY), 'b', cast(null as char(2)))\");\n+    }\n+    tester3.setFor(SqlLibraryOperators.CONCAT2);\n+    tester3.checkString(\"concat(cast('fe' as char(2)), cast('df' as varchar(65535)))\",\n+        \"fedf\", \"VARCHAR NOT NULL\");\n+    tester3.checkString(\"concat(cast('fe' as char(2)), cast('df' as varchar))\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7152d72d11d22f53d921a1a0130ef052651e1aef"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 220, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}