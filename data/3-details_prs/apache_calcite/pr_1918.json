{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzODkwMDgw", "number": 1918, "title": "[CALCITE-3926] CannotPlanException when an empty LogicalValues requires a certain collation", "bodyText": "Jira: CALCITE-3926", "createdAt": "2020-04-15T17:21:38Z", "url": "https://github.com/apache/calcite/pull/1918", "merged": true, "mergeCommit": {"oid": "e3fe745a4e8e5e15ae5e04345975c98ab737b31b"}, "closed": true, "closedAt": "2020-05-07T09:45:18Z", "author": {"login": "rubenada"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX77WfAFqTM5NDAwNDU0MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcejihuABqjMzMDcyMTc4MjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDA0NTQw", "url": "https://github.com/apache/calcite/pull/1918#pullrequestreview-394004540", "createdAt": "2020-04-15T17:54:49Z", "commit": {"oid": "d9a3b7da738bc63daac9eea38241e1ae72e0538b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo1NDo0OVrOGGFFlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo1NTozMFrOGGFHPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNzk5MA==", "bodyText": "Not only sort, but all the operators can have the same issue.\nWe should update emptyValues to have the same traits with single. Just collation is not enough, should be all the traits.", "url": "https://github.com/apache/calcite/pull/1918#discussion_r409027990", "createdAt": "2020-04-15T17:54:49Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java", "diffHunk": "@@ -400,7 +401,13 @@ private static boolean isEmpty(RelNode node) {\n \n     public void onMatch(RelOptRuleCall call) {\n       SingleRel single = call.rel(0);\n-      call.transformTo(call.builder().push(single).empty().build());\n+      RelNode emptyValues = call.builder().push(single).empty().build();\n+      if (single instanceof Sort) {\n+        emptyValues = emptyValues.copy(\n+            emptyValues.getTraitSet().replace(((Sort) single).getCollation()),\n+            Collections.emptyList());\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a3b7da738bc63daac9eea38241e1ae72e0538b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyODQxMw==", "bodyText": "Can you also compare the plan?", "url": "https://github.com/apache/calcite/pull/1918#discussion_r409028413", "createdAt": "2020-04-15T17:55:30Z", "author": {"login": "hsyuan"}, "path": "core/src/test/java/org/apache/calcite/test/RelBuilderTest.java", "diffHunk": "@@ -3426,4 +3426,24 @@ private void checkExpandTable(RelBuilder builder, Matcher<RelNode> matcher) {\n             builder.literal(5));\n     assertThat(call.toStringRaw(), is(\"BETWEEN ASYMMETRIC($0, 1, 5)\"));\n   }\n+\n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-3926\">[CALCITE-3926]\n+   * CannotPlanException when an empty LogicalValues requires a certain collation</a>. */\n+  @Test void testEmptyValuesWithCollation() throws Exception {\n+    final RelBuilder builder = RelBuilder.create(config().build());\n+    final RelNode root =\n+        builder\n+            .scan(\"DEPT\")\n+            .filter(builder.literal(false))\n+            .sort(\n+                builder.field(\"DNAME\"),\n+                builder.field(\"DEPTNO\"))\n+            .build();\n+    try (PreparedStatement preparedStatement = RelRunners.run(root)) {\n+      final String s = CalciteAssert.toString(preparedStatement.executeQuery());\n+      final String result = \"\";\n+      assertThat(s, is(result));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a3b7da738bc63daac9eea38241e1ae72e0538b"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDM3Mzg1", "url": "https://github.com/apache/calcite/pull/1918#pullrequestreview-394037385", "createdAt": "2020-04-15T18:40:24Z", "commit": {"oid": "d9a3b7da738bc63daac9eea38241e1ae72e0538b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0MDoyNFrOGGGtYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0MDoyNFrOGGGtYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NDU2Mg==", "bodyText": "Instead of doing this, can we just modify copy(traitset, inputs) method to just return new EnumerableValues(getCluster(), rowType, tuples, traitSet);?", "url": "https://github.com/apache/calcite/pull/1918#discussion_r409054562", "createdAt": "2020-04-15T18:40:24Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java", "diffHunk": "@@ -65,6 +65,19 @@ public static EnumerableValues create(RelOptCluster cluster,\n     return new EnumerableValues(cluster, rowType, tuples, traitSet);\n   }\n \n+  /** Creates an EnumerableValues. */\n+  public static EnumerableValues create(Values input) {\n+    final RelOptCluster cluster = input.getCluster();\n+    final ImmutableList<ImmutableList<RexLiteral>> tuples = input.getTuples();\n+    final RelDataType rowType = input.getRowType();\n+    final RelTraitSet traitSet =\n+        input.getTraitSet()\n+            .replace(EnumerableConvention.INSTANCE)\n+            .replaceIf(RelDistributionTraitDef.INSTANCE,\n+                () -> RelMdDistribution.values(rowType, tuples));\n+    return new EnumerableValues(cluster, rowType, tuples, traitSet);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a3b7da738bc63daac9eea38241e1ae72e0538b"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MzgwMjMw", "url": "https://github.com/apache/calcite/pull/1918#pullrequestreview-394380230", "createdAt": "2020-04-16T07:50:40Z", "commit": {"oid": "468911f1df6a960a8498115bda6d17a797aa99e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo1MDo0MVrOGGY1_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo1MDo0MVrOGGY1_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1MTY3OA==", "bodyText": "This is not expected. That means the rule or something else doesn't work.", "url": "https://github.com/apache/calcite/pull/1918#discussion_r409351678", "createdAt": "2020-04-16T07:50:41Z", "author": {"login": "hsyuan"}, "path": "core/src/test/java/org/apache/calcite/test/RelBuilderTest.java", "diffHunk": "@@ -3440,10 +3440,14 @@ private void checkExpandTable(RelBuilder builder, Matcher<RelNode> matcher) {\n                 builder.field(\"DNAME\"),\n                 builder.field(\"DEPTNO\"))\n             .build();\n+    final String expectedTree = \"\"\n+        + \"LogicalSort(sort0=[$1], sort1=[$0], dir0=[ASC], dir1=[ASC])\\n\"\n+        + \"  LogicalValues(tuples=[[]])\\n\";\n+    assertThat(root, hasTree(expectedTree));\n     try (PreparedStatement preparedStatement = RelRunners.run(root)) {\n-      final String s = CalciteAssert.toString(preparedStatement.executeQuery());\n-      final String result = \"\";\n-      assertThat(s, is(result));\n+      final String result = CalciteAssert.toString(preparedStatement.executeQuery());\n+      final String expectedResult = \"\";\n+      assertThat(result, is(expectedResult));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "468911f1df6a960a8498115bda6d17a797aa99e1"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MzgxMjE4", "url": "https://github.com/apache/calcite/pull/1918#pullrequestreview-394381218", "createdAt": "2020-04-16T07:52:02Z", "commit": {"oid": "468911f1df6a960a8498115bda6d17a797aa99e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo1MjowM1rOGGY5RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo1MjowM1rOGGY5RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1MjUxNg==", "bodyText": "If you change PruneEmptyRule's autoPruneOld to false, you might be able to see another error.", "url": "https://github.com/apache/calcite/pull/1918#discussion_r409352516", "createdAt": "2020-04-16T07:52:03Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java", "diffHunk": "@@ -402,12 +404,8 @@ private static boolean isEmpty(RelNode node) {\n     public void onMatch(RelOptRuleCall call) {\n       SingleRel single = call.rel(0);\n       RelNode emptyValues = call.builder().push(single).empty().build();\n-      if (single instanceof Sort) {\n-        emptyValues = emptyValues.copy(\n-            emptyValues.getTraitSet().replace(((Sort) single).getCollation()),\n-            Collections.emptyList());\n-      }\n-      call.transformTo(emptyValues);\n+      RelNode result = emptyValues.copy(single.getTraitSet(), Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "468911f1df6a960a8498115bda6d17a797aa99e1"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MjM2NjM1", "url": "https://github.com/apache/calcite/pull/1918#pullrequestreview-395236635", "createdAt": "2020-04-17T07:53:31Z", "commit": {"oid": "52fcec7eb089e34dca2332b74fa31ecdf3a95800"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1MzozMlrOGHDrcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1MzozMlrOGHDrcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1MzQ4OA==", "bodyText": "Always use create instead of new directly.", "url": "https://github.com/apache/calcite/pull/1918#discussion_r410053488", "createdAt": "2020-04-17T07:53:32Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java", "diffHunk": "@@ -46,7 +46,7 @@\n  * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}. */\n public class EnumerableValues extends Values implements EnumerableRel {\n   /** Creates an EnumerableValues. */\n-  private EnumerableValues(RelOptCluster cluster, RelDataType rowType,\n+  EnumerableValues(RelOptCluster cluster, RelDataType rowType,\n       ImmutableList<ImmutableList<RexLiteral>> tuples, RelTraitSet traitSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52fcec7eb089e34dca2332b74fa31ecdf3a95800"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMzM5NjY1", "url": "https://github.com/apache/calcite/pull/1918#pullrequestreview-403339665", "createdAt": "2020-04-30T09:10:57Z", "commit": {"oid": "826af564c8160bc1b5558a6518eeb64a374215c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOToxMDo1N1rOGOgn9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOToxMDo1N1rOGOgn9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg2Nzc2NQ==", "bodyText": "How about we modify the other create to support an explicit traitSet param ?", "url": "https://github.com/apache/calcite/pull/1918#discussion_r417867765", "createdAt": "2020-04-30T09:10:57Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java", "diffHunk": "@@ -65,9 +65,20 @@ public static EnumerableValues create(RelOptCluster cluster,\n     return new EnumerableValues(cluster, rowType, tuples, traitSet);\n   }\n \n+  /** Creates an EnumerableValues. */\n+  public static EnumerableValues create(Values input) {\n+    final RelOptCluster cluster = input.getCluster();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "826af564c8160bc1b5558a6518eeb64a374215c3"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMzQxOTk1", "url": "https://github.com/apache/calcite/pull/1918#pullrequestreview-403341995", "createdAt": "2020-04-30T09:14:08Z", "commit": {"oid": "826af564c8160bc1b5558a6518eeb64a374215c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOToxNDowOFrOGOgvPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOToxNDowOFrOGOgvPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg2OTYzMQ==", "bodyText": "Why only copy the Collation trait ?", "url": "https://github.com/apache/calcite/pull/1918#discussion_r417869631", "createdAt": "2020-04-30T09:14:08Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java", "diffHunk": "@@ -277,7 +278,11 @@ private static boolean isEmpty(RelNode node) {\n           if (sort.fetch != null\n               && !(sort.fetch instanceof RexDynamicParam)\n               && RexLiteral.intValue(sort.fetch) == 0) {\n-            call.transformTo(call.builder().push(sort).empty().build());\n+            RelNode emptyValues = call.builder().push(sort).empty().build();\n+            emptyValues = emptyValues.copy(\n+                emptyValues.getTraitSet().replace(sort.getCollation()),\n+                Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "826af564c8160bc1b5558a6518eeb64a374215c3"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7b7c7e3c390d8c5aae449eb2cd40d1cde97a7a7", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/e7b7c7e3c390d8c5aae449eb2cd40d1cde97a7a7", "committedDate": "2020-05-06T07:27:09Z", "message": "[CALCITE-3926] CannotPlanException when an empty LogicalValues requires a certain collation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cebcaa580798e28193f9d0eed68e1afb51df9560", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/cebcaa580798e28193f9d0eed68e1afb51df9560", "committedDate": "2020-05-05T15:00:59Z", "message": "[CALCITE-3926] CannotPlanException when an empty LogicalValues requires a certain collation"}, "afterCommit": {"oid": "e7b7c7e3c390d8c5aae449eb2cd40d1cde97a7a7", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/e7b7c7e3c390d8c5aae449eb2cd40d1cde97a7a7", "committedDate": "2020-05-06T07:27:09Z", "message": "[CALCITE-3926] CannotPlanException when an empty LogicalValues requires a certain collation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4091, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}