{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNjE4MTMz", "number": 2014, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoyMToxN1rOEKghfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMTo1NDo1M1rOEO7r8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDU0MDc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoyMToxN1rOGrlniw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDo0OTo0OVrOGx4uEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODI4Mw==", "bodyText": "this name is really weird.\ncould you find a way to inline your implementation in the original place instead of here.", "url": "https://github.com/apache/calcite/pull/2014#discussion_r448358283", "createdAt": "2020-07-01T13:21:17Z", "author": {"login": "zinking"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2MjcwNw==", "bodyText": "SqlUtil#unparseSpecialSyntax is used for unparse SqlSyntax.SPECIAL. other processing logic also exists in SqlUtil.", "url": "https://github.com/apache/calcite/pull/2014#discussion_r454962707", "createdAt": "2020-07-15T10:49:49Z", "author": {"login": "xy2953396112"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODI4Mw=="}, "originalCommit": {"oid": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDU0NTA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoyMjoxM1rOGrlqDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDo0OTo1NFrOGx4uOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODkyNQ==", "bodyText": "why null and why not reusing operands in this line ?", "url": "https://github.com/apache/calcite/pull/2014#discussion_r448358925", "createdAt": "2020-07-01T13:22:13Z", "author": {"login": "zinking"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,\n+      SqlWriter writer,\n+      SqlCall call) {\n+    final List<SqlNode> operands = call.getOperandList();\n+    switch (operator.getKind()) {\n+    case INSERT:\n+      assert operands.size() == 3 || operands.size() == 4;\n+      final SqlInsert insert = new SqlInsert(call.getParserPosition(),\n+          (SqlNodeList) operands.get(0), operands.get(1), operands.get(2),\n+          operands.size() == 3 ? null : (SqlNodeList) call.getOperandList().get(3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1OTA2Mw==", "bodyText": "what's the cases for operands.size() == 3 and operands.size() == 4", "url": "https://github.com/apache/calcite/pull/2014#discussion_r453259063", "createdAt": "2020-07-12T02:50:38Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,\n+      SqlWriter writer,\n+      SqlCall call) {\n+    final List<SqlNode> operands = call.getOperandList();\n+    switch (operator.getKind()) {\n+    case INSERT:\n+      assert operands.size() == 3 || operands.size() == 4;\n+      final SqlInsert insert = new SqlInsert(call.getParserPosition(),\n+          (SqlNodeList) operands.get(0), operands.get(1), operands.get(2),\n+          operands.size() == 3 ? null : (SqlNodeList) call.getOperandList().get(3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODkyNQ=="}, "originalCommit": {"oid": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI2MDEzOA==", "bodyText": "The size of operands is always 4, right?", "url": "https://github.com/apache/calcite/pull/2014#discussion_r453260138", "createdAt": "2020-07-12T03:06:42Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,\n+      SqlWriter writer,\n+      SqlCall call) {\n+    final List<SqlNode> operands = call.getOperandList();\n+    switch (operator.getKind()) {\n+    case INSERT:\n+      assert operands.size() == 3 || operands.size() == 4;\n+      final SqlInsert insert = new SqlInsert(call.getParserPosition(),\n+          (SqlNodeList) operands.get(0), operands.get(1), operands.get(2),\n+          operands.size() == 3 ? null : (SqlNodeList) call.getOperandList().get(3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODkyNQ=="}, "originalCommit": {"oid": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxODg0MQ==", "bodyText": "I mean:\n\nwhy null, is there a better value to pass\ncall.getOperandList() => operands", "url": "https://github.com/apache/calcite/pull/2014#discussion_r453618841", "createdAt": "2020-07-13T12:39:24Z", "author": {"login": "zinking"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,\n+      SqlWriter writer,\n+      SqlCall call) {\n+    final List<SqlNode> operands = call.getOperandList();\n+    switch (operator.getKind()) {\n+    case INSERT:\n+      assert operands.size() == 3 || operands.size() == 4;\n+      final SqlInsert insert = new SqlInsert(call.getParserPosition(),\n+          (SqlNodeList) operands.get(0), operands.get(1), operands.get(2),\n+          operands.size() == 3 ? null : (SqlNodeList) call.getOperandList().get(3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODkyNQ=="}, "originalCommit": {"oid": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2Mjc0NA==", "bodyText": "@yanlin-Lynn @zinking\nThanks.The size of operands is always 4, update the code.", "url": "https://github.com/apache/calcite/pull/2014#discussion_r454962744", "createdAt": "2020-07-15T10:49:54Z", "author": {"login": "xy2953396112"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,\n+      SqlWriter writer,\n+      SqlCall call) {\n+    final List<SqlNode> operands = call.getOperandList();\n+    switch (operator.getKind()) {\n+    case INSERT:\n+      assert operands.size() == 3 || operands.size() == 4;\n+      final SqlInsert insert = new SqlInsert(call.getParserPosition(),\n+          (SqlNodeList) operands.get(0), operands.get(1), operands.get(2),\n+          operands.size() == 3 ? null : (SqlNodeList) call.getOperandList().get(3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODkyNQ=="}, "originalCommit": {"oid": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDU1NDY1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoyNDo0MlrOGrlwLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1MzoxNVrOGx_Ngw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2MDQ5NQ==", "bodyText": "what about one more test regarding the actual execution?", "url": "https://github.com/apache/calcite/pull/2014#discussion_r448360495", "createdAt": "2020-07-01T13:24:42Z", "author": {"login": "zinking"}, "path": "core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java", "diffHunk": "@@ -5818,6 +5818,21 @@ public void subTestIntervalDayFailsValidation() {\n     assertTrue(sqlNodeVisited.getKind() == SqlKind.INSERT);\n   }\n \n+  @Test void testSqlInsertSqlBasicCallToString() throws Exception {\n+    final String sql = \"insert into emps select * from emps\";\n+    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n+    final SqlNode sqlNodeVisited = sqlNode.accept(new SqlShuttle() {\n+      @Override public SqlNode visit(SqlIdentifier identifier) {\n+        return new SqlIdentifier(identifier.names,\n+            identifier.getParserPosition());\n+      }\n+    });\n+    final String str = \"INSERT INTO `EMPS`\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2OTA1OQ==", "bodyText": "Thanks, update the code.", "url": "https://github.com/apache/calcite/pull/2014#discussion_r455069059", "createdAt": "2020-07-15T13:53:15Z", "author": {"login": "xy2953396112"}, "path": "core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java", "diffHunk": "@@ -5818,6 +5818,21 @@ public void subTestIntervalDayFailsValidation() {\n     assertTrue(sqlNodeVisited.getKind() == SqlKind.INSERT);\n   }\n \n+  @Test void testSqlInsertSqlBasicCallToString() throws Exception {\n+    final String sql = \"insert into emps select * from emps\";\n+    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n+    final SqlNode sqlNodeVisited = sqlNode.accept(new SqlShuttle() {\n+      @Override public SqlNode visit(SqlIdentifier identifier) {\n+        return new SqlIdentifier(identifier.names,\n+            identifier.getParserPosition());\n+      }\n+    });\n+    final String str = \"INSERT INTO `EMPS`\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2MDQ5NQ=="}, "originalCommit": {"oid": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDkzNDI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMTo1NDo1M1rOGyXSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjowMjo0M1rOGybQ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ2MzQ0Ng==", "bodyText": "Just use (SqlNodeList) operands.get(3) will be fine", "url": "https://github.com/apache/calcite/pull/2014#discussion_r455463446", "createdAt": "2020-07-16T01:54:53Z", "author": {"login": "yanlin-Lynn"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,\n+      SqlWriter writer,\n+      SqlCall call) {\n+    final List<SqlNode> operands = call.getOperandList();\n+    switch (operator.getKind()) {\n+    case INSERT:\n+      assert operands.size() == 4;\n+      final SqlInsert insert = new SqlInsert(call.getParserPosition(),\n+          (SqlNodeList) operands.get(0), operands.get(1), operands.get(2),\n+          operands.get(3) == null ? null : (SqlNodeList) operands.get(3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a650e235799772ea508279b4cb50c61e773782c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyODY3Nw==", "bodyText": "ok, Thanks a lot.", "url": "https://github.com/apache/calcite/pull/2014#discussion_r455528677", "createdAt": "2020-07-16T06:02:43Z", "author": {"login": "xy2953396112"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,\n+      SqlWriter writer,\n+      SqlCall call) {\n+    final List<SqlNode> operands = call.getOperandList();\n+    switch (operator.getKind()) {\n+    case INSERT:\n+      assert operands.size() == 4;\n+      final SqlInsert insert = new SqlInsert(call.getParserPosition(),\n+          (SqlNodeList) operands.get(0), operands.get(1), operands.get(2),\n+          operands.get(3) == null ? null : (SqlNodeList) operands.get(3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ2MzQ0Ng=="}, "originalCommit": {"oid": "9a650e235799772ea508279b4cb50c61e773782c"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 183, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}