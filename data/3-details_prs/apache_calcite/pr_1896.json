{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzY5OTgx", "number": 1896, "title": "3877, 3892, 3814 and 3876", "bodyText": "", "createdAt": "2020-04-02T19:20:25Z", "url": "https://github.com/apache/calcite/pull/1896", "merged": true, "mergeCommit": {"oid": "9492dd4146f63ddc028010d6c4e86f6a5cb29a8d"}, "closed": true, "closedAt": "2020-04-05T21:33:46Z", "author": {"login": "julianhyde"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT4WHagFqTM4NjkxNTAzMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUwi6ugBqjMyMDI5ODE0MjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTE1MDMy", "url": "https://github.com/apache/calcite/pull/1896#pullrequestreview-386915032", "createdAt": "2020-04-03T03:28:43Z", "commit": {"oid": "d22d59326c4a2a188cf5d852f576617b854cf71a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMzoyODo0M1rOGAD6Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMzoyODo0M1rOGAD6Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcxNzIxOQ==", "bodyText": "Do we also need to prevent merging projects in RelBuilder when converting SqlNode to RelNode?\nLogicalProject(EXPR$0=[ROW_NUMBER() OVER (ORDER BY ROW_NUMBER() OVER (ORDER BY $1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])\n  JdbcTableScan(table=[[foodmart, product]])", "url": "https://github.com/apache/calcite/pull/1896#discussion_r402717219", "createdAt": "2020-04-03T03:28:43Z", "author": {"login": "DonnyZone"}, "path": "core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java", "diffHunk": "@@ -1439,6 +1439,14 @@ private boolean needNewSubQuery(RelNode rel, Clause[] clauses) {\n         return true;\n       }\n \n+      if (rel instanceof Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d22d59326c4a2a188cf5d852f576617b854cf71a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTM2NDkw", "url": "https://github.com/apache/calcite/pull/1896#pullrequestreview-386936490", "createdAt": "2020-04-03T04:56:15Z", "commit": {"oid": "e6d62e6286d27803295959993ebe569e265cf5a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDo1NjoxNVrOGAFGUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDo1NjoxNVrOGAFGUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczNjcyMg==", "bodyText": "What about we do not have any options for OVER , there would then has no reference for underlying inputs.", "url": "https://github.com/apache/calcite/pull/1896#discussion_r402736722", "createdAt": "2020-04-03T04:56:15Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java", "diffHunk": "@@ -2749,6 +2749,28 @@ private void checkLiteral2(String expression, String expected) {\n     sql(query).ok(expected);\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-3876\">[CALCITE-3876]\n+   * RelToSqlConverter should not combine Projects when top Project contains\n+   * window function referencing window function from bottom Project</a>. */\n+  @Test public void testWindowOnWindowDoesNotCombineProjects() {\n+    final String query = \"SELECT ROW_NUMBER() OVER (ORDER BY rn)\\n\"\n+        + \"FROM (SELECT *,\\n\"\n+        + \"  ROW_NUMBER() OVER (ORDER BY \\\"product_id\\\") as rn\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6d62e6286d27803295959993ebe569e265cf5a5"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTQyMDAx", "url": "https://github.com/apache/calcite/pull/1896#pullrequestreview-386942001", "createdAt": "2020-04-03T05:16:32Z", "commit": {"oid": "2ece8a122ff1fcd778a5849cb3c0899776e33e53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNToxNjozMlrOGAFY1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNToxNjozMlrOGAFY1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0MTQ2Mw==", "bodyText": "This block seems not necessary.", "url": "https://github.com/apache/calcite/pull/1896#discussion_r402741463", "createdAt": "2020-04-03T05:16:32Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java", "diffHunk": "@@ -1943,24 +1944,43 @@ private RexNode convertOver(Blackboard bb, SqlNode node) {\n \n     SqlNode windowOrRef = call.operand(1);\n     final SqlWindow window =\n-        validator.resolveWindow(windowOrRef, bb.scope, true);\n+        validator.resolveWindow(windowOrRef, bb.scope);\n \n-    // ROW_NUMBER() expects specific kind of framing.\n-    if (aggCall.getKind() == SqlKind.ROW_NUMBER) {\n-      window.setLowerBound(SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO));\n-      window.setUpperBound(SqlWindow.createCurrentRow(SqlParserPos.ZERO));\n-      window.setRows(SqlLiteral.createBoolean(true, SqlParserPos.ZERO));\n+    SqlNode sqlLowerBound = window.getLowerBound();\n+    SqlNode sqlUpperBound = window.getUpperBound();\n+    boolean rows = window.isRows();\n+    SqlNodeList orderList = window.getOrderList();\n+\n+    if (!aggCall.getOperator().allowsFraming()) {\n+      // If the operator does not allow framing, bracketing is implicitly\n+      // everything up to the current row.\n+      sqlLowerBound = SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO);\n+      sqlUpperBound = SqlWindow.createCurrentRow(SqlParserPos.ZERO);\n+      if (aggCall.getKind() == SqlKind.ROW_NUMBER) {\n+        // ROW_NUMBER() expects specific kind of framing.\n+        rows = true;\n+      }\n+    } else if (orderList.size() == 0) {\n+      // Without ORDER BY, there must be no bracketing.\n+      sqlLowerBound = SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO);\n+      sqlUpperBound = SqlWindow.createUnboundedFollowing(SqlParserPos.ZERO);\n+    } else if (sqlLowerBound == null && sqlUpperBound == null) {\n+      sqlLowerBound = SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ece8a122ff1fcd778a5849cb3c0899776e33e53"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTQzMTM3", "url": "https://github.com/apache/calcite/pull/1896#pullrequestreview-386943137", "createdAt": "2020-04-03T05:20:43Z", "commit": {"oid": "2ece8a122ff1fcd778a5849cb3c0899776e33e53"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNToyMDo0M1rOGAFcxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNToyNjoyOFrOGAFiOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0MjQ3MQ==", "bodyText": "Is this true ? From the MS-SQL syntax, the ORDER BY has no relationship with <ROW or RANGE clause>, they can both exist separately. [1]\nhttps://docs.microsoft.com/en-us/sql/t-sql/queries/select-over-clause-transact-sql?view=sql-server-ver15", "url": "https://github.com/apache/calcite/pull/1896#discussion_r402742471", "createdAt": "2020-04-03T05:20:43Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java", "diffHunk": "@@ -1943,24 +1944,43 @@ private RexNode convertOver(Blackboard bb, SqlNode node) {\n \n     SqlNode windowOrRef = call.operand(1);\n     final SqlWindow window =\n-        validator.resolveWindow(windowOrRef, bb.scope, true);\n+        validator.resolveWindow(windowOrRef, bb.scope);\n \n-    // ROW_NUMBER() expects specific kind of framing.\n-    if (aggCall.getKind() == SqlKind.ROW_NUMBER) {\n-      window.setLowerBound(SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO));\n-      window.setUpperBound(SqlWindow.createCurrentRow(SqlParserPos.ZERO));\n-      window.setRows(SqlLiteral.createBoolean(true, SqlParserPos.ZERO));\n+    SqlNode sqlLowerBound = window.getLowerBound();\n+    SqlNode sqlUpperBound = window.getUpperBound();\n+    boolean rows = window.isRows();\n+    SqlNodeList orderList = window.getOrderList();\n+\n+    if (!aggCall.getOperator().allowsFraming()) {\n+      // If the operator does not allow framing, bracketing is implicitly\n+      // everything up to the current row.\n+      sqlLowerBound = SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO);\n+      sqlUpperBound = SqlWindow.createCurrentRow(SqlParserPos.ZERO);\n+      if (aggCall.getKind() == SqlKind.ROW_NUMBER) {\n+        // ROW_NUMBER() expects specific kind of framing.\n+        rows = true;\n+      }\n+    } else if (orderList.size() == 0) {\n+      // Without ORDER BY, there must be no bracketing.\n+      sqlLowerBound = SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ece8a122ff1fcd778a5849cb3c0899776e33e53"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0Mzg2Nw==", "bodyText": "Why this change ?", "url": "https://github.com/apache/calcite/pull/1896#discussion_r402743867", "createdAt": "2020-04-03T05:26:28Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/schema/Schemas.java", "diffHunk": "@@ -224,15 +224,15 @@ public static DataContext createDataContext(\n    * array. */\n   public static Enumerable<Object[]> enumerable(final FilterableTable table,\n       final DataContext root) {\n-    return table.scan(root, ImmutableList.of());\n+    return table.scan(root, new ArrayList<>());\n   }\n \n   /** Returns an {@link org.apache.calcite.linq4j.Enumerable} over the rows of\n    * a given table, not applying any filters and projecting all columns,\n    * representing each row as an object array. */\n   public static Enumerable<Object[]> enumerable(\n       final ProjectableFilterableTable table, final DataContext root) {\n-    return table.scan(root, ImmutableList.of(),\n+    return table.scan(root, new ArrayList<>(),\n         identity(table.getRowType(root.getTypeFactory()).getFieldCount()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a4c89c702ad6d5cd1428294ccd6db0ae41d19e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTg2ODc1", "url": "https://github.com/apache/calcite/pull/1896#pullrequestreview-386986875", "createdAt": "2020-04-03T07:15:35Z", "commit": {"oid": "82a4c89c702ad6d5cd1428294ccd6db0ae41d19e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoxNTozNlrOGAHwgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoxNTozNlrOGAHwgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MDI4OA==", "bodyText": "Please remove 9, 10, 11, 12, 13 from the list. We test only LTS (8, 11) and EA (14) JDK versions.\nI'm not sure we test with Oracle JDK.", "url": "https://github.com/apache/calcite/pull/1896#discussion_r402780288", "createdAt": "2020-04-03T07:15:36Z", "author": {"login": "vlsi"}, "path": "site/_docs/history.md", "diffHunk": "@@ -31,6 +31,11 @@ Downloads are available on the\n ## <a href=\"https://github.com/apache/calcite/releases/tag/calcite-1.23.0\">1.23.0</a> / under development\n {: #v1-23-0}\n \n+Compatibility: This release is tested on Linux, macOS, Microsoft Windows;\n+using Oracle JDK 8, 9, 10, 11, 12, 13, 14 and OpenJDK 8, 9, 10, 11, 12, 13, 14;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a4c89c702ad6d5cd1428294ccd6db0ae41d19e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTg3MTQ2", "url": "https://github.com/apache/calcite/pull/1896#pullrequestreview-386987146", "createdAt": "2020-04-03T07:16:08Z", "commit": {"oid": "82a4c89c702ad6d5cd1428294ccd6db0ae41d19e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoxNjowOVrOGAHxSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoxNjowOVrOGAHxSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MDQ4OQ==", "bodyText": "19.0 to 28.2-jre;\n\nAre you sure all the versions in-between are really tested? Where's the CI?", "url": "https://github.com/apache/calcite/pull/1896#discussion_r402780489", "createdAt": "2020-04-03T07:16:09Z", "author": {"login": "vlsi"}, "path": "site/_docs/history.md", "diffHunk": "@@ -31,6 +31,11 @@ Downloads are available on the\n ## <a href=\"https://github.com/apache/calcite/releases/tag/calcite-1.23.0\">1.23.0</a> / under development\n {: #v1-23-0}\n \n+Compatibility: This release is tested on Linux, macOS, Microsoft Windows;\n+using Oracle JDK 8, 9, 10, 11, 12, 13, 14 and OpenJDK 8, 9, 10, 11, 12, 13, 14;\n+Guava versions 19.0 to 28.2-jre; Apache Flink 1.10.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a4c89c702ad6d5cd1428294ccd6db0ae41d19e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTg3NDY0", "url": "https://github.com/apache/calcite/pull/1896#pullrequestreview-386987464", "createdAt": "2020-04-03T07:16:45Z", "commit": {"oid": "82a4c89c702ad6d5cd1428294ccd6db0ae41d19e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoxNjo0NlrOGAHyUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoxNjo0NlrOGAHyUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MDc1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return table.scan(root, new ArrayList<>());\n          \n          \n            \n                return table.scan(root, Collections.emptyList());", "url": "https://github.com/apache/calcite/pull/1896#discussion_r402780755", "createdAt": "2020-04-03T07:16:46Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/schema/Schemas.java", "diffHunk": "@@ -224,15 +224,15 @@ public static DataContext createDataContext(\n    * array. */\n   public static Enumerable<Object[]> enumerable(final FilterableTable table,\n       final DataContext root) {\n-    return table.scan(root, ImmutableList.of());\n+    return table.scan(root, new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a4c89c702ad6d5cd1428294ccd6db0ae41d19e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTkxMTky", "url": "https://github.com/apache/calcite/pull/1896#pullrequestreview-386991192", "createdAt": "2020-04-03T07:23:06Z", "commit": {"oid": "2ece8a122ff1fcd778a5849cb3c0899776e33e53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoyMzowNlrOGAH-Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoyMzowNlrOGAH-Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4Mzc5OQ==", "bodyText": "What does dense_rank without ORDER BY mean?\nI guess it should be an error.", "url": "https://github.com/apache/calcite/pull/1896#discussion_r402783799", "createdAt": "2020-04-03T07:23:06Z", "author": {"login": "vlsi"}, "path": "babel/src/test/resources/sql/redshift.iq", "diffHunk": "@@ -603,11 +603,11 @@ EMPNO, EXPR$1\n select dense_rank() over () from emp where deptno = 30;\n EXPR$0\n 6\n-6\n-6\n-6\n-6\n-6\n+1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ece8a122ff1fcd778a5849cb3c0899776e33e53"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDA0MDU4", "url": "https://github.com/apache/calcite/pull/1896#pullrequestreview-387004058", "createdAt": "2020-04-03T07:33:05Z", "commit": {"oid": "2ece8a122ff1fcd778a5849cb3c0899776e33e53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozMzowNVrOGAIRtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozMzowNVrOGAIRtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4ODc4OQ==", "bodyText": "This is invalid because it does not verify if rows vs range is in its default value.\nFor instance,\ncount(x) over (order by x RANGE between unbounded preceding and current row) returns different values depending on RANGE vs ROW", "url": "https://github.com/apache/calcite/pull/1896#discussion_r402788789", "createdAt": "2020-04-03T07:33:05Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/rel/core/Window.java", "diffHunk": "@@ -246,26 +244,38 @@ public String toString() {\n     }\n \n     private String computeString() {\n-      final StringBuilder buf = new StringBuilder();\n-      buf.append(\"window(partition \");\n-      buf.append(keys);\n-      buf.append(\" order by \");\n-      buf.append(orderKeys);\n-      buf.append(isRows ? \" rows \" : \" range \");\n-      if (lowerBound != null) {\n-        if (upperBound != null) {\n-          buf.append(\"between \");\n-          buf.append(lowerBound);\n-          buf.append(\" and \");\n-          buf.append(upperBound);\n-        } else {\n-          buf.append(lowerBound);\n-        }\n-      } else if (upperBound != null) {\n+      final StringBuilder buf = new StringBuilder(\"window(\");\n+      final int i = buf.length();\n+      if (!keys.isEmpty()) {\n+        buf.append(\"partition \");\n+        buf.append(keys);\n+      }\n+      if (!orderKeys.getFieldCollations().isEmpty()) {\n+        buf.append(buf.length() == i ? \"order by \" : \" order by \");\n+        buf.append(orderKeys);\n+      }\n+      if (orderKeys.getFieldCollations().isEmpty()\n+          && lowerBound.isUnbounded()\n+          && lowerBound.isPreceding()\n+          && upperBound.isUnbounded()\n+          && upperBound.isFollowing()) {\n+        // skip bracket if no ORDER BY, and if bracket is the default\n+      } else if (!orderKeys.getFieldCollations().isEmpty()\n+          && lowerBound.isUnbounded()\n+          && lowerBound.isPreceding()\n+          && upperBound.isCurrentRow()) {\n+        // skip bracket if there is ORDER BY, and if bracket is the default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ece8a122ff1fcd778a5849cb3c0899776e33e53"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df3e3c652e3499ec03a224468fb2918752bae461", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/df3e3c652e3499ec03a224468fb2918752bae461", "committedDate": "2020-04-05T20:53:37Z", "message": "[CALCITE-3876] RelToSqlConverter should not merge a Project that contains a window function that references a window function in input Project\n\nMain fix is to RelToSqlConverter, to force a new sub-query to be created.\n\nThe problem in this case was not with ProjectMergeRule or with\nRelBuilder.project, but I fixed those also."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddda872b4922266c102f474042b4df27ba9a09be", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/ddda872b4922266c102f474042b4df27ba9a09be", "committedDate": "2020-04-05T20:53:38Z", "message": "[CALCITE-3877] In RexWindow, make fields upperBound and lowerBound not-nullable\n\nWhere you would previously have supplied null to RexBuilder.makeOver,\nnow supply RexWindowBounds.UNBOUNDED_PRECEDING,\nRexWindowBounds.UNBOUNDED_FOLLOWING, or RexWindowBounds.CURRENT_ROW.\n\nMove RexWindowBound.create into new class RexWindowBounds, with methods\nand constants for the various types of bound.\n\nDon't keep SqlNode inside RexWindowBound objects.\n\nDuring validation, don't mutate the lowerBound and upperBound fields in\nSqlWindow.\n\nNote that \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\" is not\nequivalent to \"ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\".\n\"RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\"\n(that is, not bracket) is equivalent to\n\"ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\",\nbut we require RANGE, to keep things canonical.\n\nClose apache/calcite#1896"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1b2d3c45f085b71c18a45392337989d0d474136", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/f1b2d3c45f085b71c18a45392337989d0d474136", "committedDate": "2020-04-05T20:57:49Z", "message": "[CALCITE-3814] Support JDK 14 and guava 28.2-jre\n\nThe real work for JDK 14 was done in c60f6750d \"Update Gradle: 6.1.1 -> 6.3\".\n\nAs of Gauava 28, ImmutableList.removeIf throws even if the list is empty\n(and therefore no elements would be removed)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9492dd4146f63ddc028010d6c4e86f6a5cb29a8d", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/9492dd4146f63ddc028010d6c4e86f6a5cb29a8d", "committedDate": "2020-04-05T20:57:49Z", "message": "[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5, classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere, or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75ee3ec79ffc5a3b9e4d8ebf3391a0ac5980350f", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/75ee3ec79ffc5a3b9e4d8ebf3391a0ac5980350f", "committedDate": "2020-04-04T01:04:57Z", "message": "\"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\" is not equivalent to \"ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\""}, "afterCommit": {"oid": "9492dd4146f63ddc028010d6c4e86f6a5cb29a8d", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/9492dd4146f63ddc028010d6c4e86f6a5cb29a8d", "committedDate": "2020-04-05T20:57:49Z", "message": "[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5, classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere, or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4021, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}