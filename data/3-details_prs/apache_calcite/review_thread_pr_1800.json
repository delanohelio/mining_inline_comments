{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0Njg3MDYw", "number": 1800, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo0OToyOVrODgBwwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDo0MTo1MVrODy2o8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTA5ODkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo0OToyOVrOFqEpvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTo1MzoyOVrOFqh1qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDczMg==", "bodyText": "This seems to impact #toString() output :-/", "url": "https://github.com/apache/calcite/pull/1800#discussion_r379660732", "createdAt": "2020-02-14T21:49:29Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "diffHunk": "@@ -167,7 +167,7 @@ private FileSource(URL url) {\n \n     private FileSource(File file) {\n       this.file = Objects.requireNonNull(file);\n-      this.url = null;\n+      this.url = fileToUrl(file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzODkyMw==", "bodyText": "Yes. It impacts the output of the toString method, when the source is constructed solely by a file object.\nI did not find any document specifying the output format, so maybe the client code should not depend on the specific format of the output.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r380138923", "createdAt": "2020-02-17T11:53:29Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "diffHunk": "@@ -167,7 +167,7 @@ private FileSource(URL url) {\n \n     private FileSource(File file) {\n       this.file = Objects.requireNonNull(file);\n-      this.url = null;\n+      this.url = fileToUrl(file);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDczMg=="}, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTEwMjAxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo1MDo1M1rOFqErpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTo1NDowM1rOFqh2ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MTIyMg==", "bodyText": "Please don't do that. It would be extremely hard to understand the nature of the failure if that assert fails in CI.\nPlease use the appropriate methods, and add messages so the failure is easy to understand by looking at CI output.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r379661222", "createdAt": "2020-02-14T21:50:53Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,12 +70,27 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzOTE3MQ==", "bodyText": "Thanks for the good suggestion. I have revised the code to include an error message.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r380139171", "createdAt": "2020-02-17T11:54:03Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,12 +70,27 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MTIyMg=="}, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTEwMjc0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo1MToxNVrOFqEsGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjowNTozMlrOFqiJng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MTMzOQ==", "bodyText": "Please add the relevant message to clarify why you expect one thing to be equal to another thing.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r379661339", "createdAt": "2020-02-14T21:51:15Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,12 +70,27 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null);\n+\n+    String urlPath = new File(url.toURI().getPath()).getAbsolutePath();\n+    assertEquals(absolutePath(path), urlPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0NDAzMA==", "bodyText": "Message added. Please take a look. Thank you.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r380144030", "createdAt": "2020-02-17T12:05:32Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,12 +70,27 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null);\n+\n+    String urlPath = new File(url.toURI().getPath()).getAbsolutePath();\n+    assertEquals(absolutePath(path), urlPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MTMzOQ=="}, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTEwNzk5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo1MzozNFrOFqEvVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjozMjoxMVrOFrcdgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjE2Ng==", "bodyText": "This looks like a behavior change. Can you please clarify what is produced in the output?\nCan you please clarify why the append of two relative paths becomes an absolute? It does look weird.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r379662166", "createdAt": "2020-02-14T21:53:34Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,12 +70,27 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null);\n+\n+    String urlPath = new File(url.toURI().getPath()).getAbsolutePath();\n+    assertEquals(absolutePath(path), urlPath);\n+  }\n+\n+  private String absolutePath(String relativePath) {\n+    return new File(relativePath).getAbsolutePath();\n+  }\n+\n   @Test public void testAppendWithSpaces() {\n     String fooRelative = \"fo o+\";\n     String fooAbsolute = ROOT_PREFIX + \"fo o+\";\n     String barRelative = \"b ar+\";\n     String barAbsolute = ROOT_PREFIX + \"b ar+\";\n-    assertAppend(file(null, fooRelative), file(null, barRelative), \"fo o+/b ar+\");\n+    assertAppend(file(null, fooRelative), file(null, barRelative), absolutePath(\"fo o+/b ar+\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0NjcxMw==", "bodyText": "Sure. When the file source is constructed solely by a file object, a url is converted from the file object. Meantime, the path of the url is changed to an absolute path. When verifying results, it depends on the toString method of the file source, which uses the url path (as you have observed in a previous comment).\nThis is why the path has changed to an absolute one.\nI have made this explicit by adding a comment in the code.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r380146713", "createdAt": "2020-02-17T12:11:56Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,12 +70,27 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null);\n+\n+    String urlPath = new File(url.toURI().getPath()).getAbsolutePath();\n+    assertEquals(absolutePath(path), urlPath);\n+  }\n+\n+  private String absolutePath(String relativePath) {\n+    return new File(relativePath).getAbsolutePath();\n+  }\n+\n   @Test public void testAppendWithSpaces() {\n     String fooRelative = \"fo o+\";\n     String fooAbsolute = ROOT_PREFIX + \"fo o+\";\n     String barRelative = \"b ar+\";\n     String barAbsolute = ROOT_PREFIX + \"b ar+\";\n-    assertAppend(file(null, fooRelative), file(null, barRelative), \"fo o+/b ar+\");\n+    assertAppend(file(null, fooRelative), file(null, barRelative), absolutePath(\"fo o+/b ar+\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjE2Ng=="}, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5NzIyOA==", "bodyText": "Meantime, the path of the url is changed to an absolute path.\n\nDoes that mean the change prevents the use of FileSource with relative paths?\nWhat's the reason to always convert the path to absolute format?", "url": "https://github.com/apache/calcite/pull/1800#discussion_r380197228", "createdAt": "2020-02-17T13:59:26Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,12 +70,27 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null);\n+\n+    String urlPath = new File(url.toURI().getPath()).getAbsolutePath();\n+    assertEquals(absolutePath(path), urlPath);\n+  }\n+\n+  private String absolutePath(String relativePath) {\n+    return new File(relativePath).getAbsolutePath();\n+  }\n+\n   @Test public void testAppendWithSpaces() {\n     String fooRelative = \"fo o+\";\n     String fooAbsolute = ROOT_PREFIX + \"fo o+\";\n     String barRelative = \"b ar+\";\n     String barAbsolute = ROOT_PREFIX + \"b ar+\";\n-    assertAppend(file(null, fooRelative), file(null, barRelative), \"fo o+/b ar+\");\n+    assertAppend(file(null, fooRelative), file(null, barRelative), absolutePath(\"fo o+/b ar+\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjE2Ng=="}, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2MzYwMg==", "bodyText": "Does that mean the change prevents the use of FileSource with relative paths?\n\nMaybe not. We can still provide a relative path to the constructor of FileSource. The constructor will convert it to an absolute path and use it to construct a url. FileSource still works appropriately.\n\nWhat's the reason to always convert the path to absolute format?\n\nThis is determined by the behavior of the standard Java API. But I think the fundamental reason is that, according to the definition (https://en.wikipedia.org/wiki/URL), a URL is always based on an absolute path, as it needs to identify a resource without the aid of other information (e.g. working directory).", "url": "https://github.com/apache/calcite/pull/1800#discussion_r380463602", "createdAt": "2020-02-18T05:40:54Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,12 +70,27 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null);\n+\n+    String urlPath = new File(url.toURI().getPath()).getAbsolutePath();\n+    assertEquals(absolutePath(path), urlPath);\n+  }\n+\n+  private String absolutePath(String relativePath) {\n+    return new File(relativePath).getAbsolutePath();\n+  }\n+\n   @Test public void testAppendWithSpaces() {\n     String fooRelative = \"fo o+\";\n     String fooAbsolute = ROOT_PREFIX + \"fo o+\";\n     String barRelative = \"b ar+\";\n     String barAbsolute = ROOT_PREFIX + \"b ar+\";\n-    assertAppend(file(null, fooRelative), file(null, barRelative), \"fo o+/b ar+\");\n+    assertAppend(file(null, fooRelative), file(null, barRelative), absolutePath(\"fo o+/b ar+\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjE2Ng=="}, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYyNDk3MQ==", "bodyText": "Just to recap:  the current code supports relative paths.\nNow you come and suggest a fix that (silently) drops that support.\nI do not like features being dropped for no reason :-/", "url": "https://github.com/apache/calcite/pull/1800#discussion_r380624971", "createdAt": "2020-02-18T11:51:28Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,12 +70,27 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null);\n+\n+    String urlPath = new File(url.toURI().getPath()).getAbsolutePath();\n+    assertEquals(absolutePath(path), urlPath);\n+  }\n+\n+  private String absolutePath(String relativePath) {\n+    return new File(relativePath).getAbsolutePath();\n+  }\n+\n   @Test public void testAppendWithSpaces() {\n     String fooRelative = \"fo o+\";\n     String fooAbsolute = ROOT_PREFIX + \"fo o+\";\n     String barRelative = \"b ar+\";\n     String barAbsolute = ROOT_PREFIX + \"b ar+\";\n-    assertAppend(file(null, fooRelative), file(null, barRelative), \"fo o+/b ar+\");\n+    assertAppend(file(null, fooRelative), file(null, barRelative), absolutePath(\"fo o+/b ar+\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjE2Ng=="}, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5OTM5NA==", "bodyText": "@vlsi\nThanks a lot for the feedback. I agree with you that we should not drop a feature silently.\nBut sorry I do not fully understand your point.\nIMO, we do not drop the support for relative path, as we still can construct a file source with a relative file path, and the source works appropriately. What we change is the internal stuff of the class. So I am not sure what is the feature referred to here.\nMaybe the feature refers to the output format of the toString method? I think it is sth. that can be overcome, but I am not sure if it is necessary. It seems the method is only used in the test case, and I do not find any evidence suggesting it is part of the class specification.\nWould you please give more information/hints?", "url": "https://github.com/apache/calcite/pull/1800#discussion_r381099394", "createdAt": "2020-02-19T06:32:11Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,12 +70,27 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null);\n+\n+    String urlPath = new File(url.toURI().getPath()).getAbsolutePath();\n+    assertEquals(absolutePath(path), urlPath);\n+  }\n+\n+  private String absolutePath(String relativePath) {\n+    return new File(relativePath).getAbsolutePath();\n+  }\n+\n   @Test public void testAppendWithSpaces() {\n     String fooRelative = \"fo o+\";\n     String fooAbsolute = ROOT_PREFIX + \"fo o+\";\n     String barRelative = \"b ar+\";\n     String barAbsolute = ROOT_PREFIX + \"b ar+\";\n-    assertAppend(file(null, fooRelative), file(null, barRelative), \"fo o+/b ar+\");\n+    assertAppend(file(null, fooRelative), file(null, barRelative), absolutePath(\"fo o+/b ar+\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjE2Ng=="}, "originalCommit": {"oid": "2eda0f98a2fd59bbf8609867a387c08b0e9a865d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDk3NDQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzo0NjoyOFrOF-JOtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDowNDo0NlrOF-OaNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwNzI1NA==", "bodyText": "Why do you omit SecurityException e in the caused by chain?", "url": "https://github.com/apache/calcite/pull/1800#discussion_r400707254", "createdAt": "2020-03-31T07:46:28Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "diffHunk": "@@ -189,14 +196,25 @@ private static File urlToFile(URL url) {\n       return Paths.get(uri).toFile();\n     }\n \n+    private static URL fileToUrl(File file) {\n+      URI uri;\n+      try {\n+        uri = file.toURI();\n+      } catch (SecurityException e) {\n+        throw new IllegalArgumentException(\"No access to the underlying file \" + file.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc8008c88018d5f7395dd6cdb1b27102c181aad"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5MjExOA==", "bodyText": "Nice catch. Thank you.\nI have revised the code to wrap the SecurityException in the IllegalArgumentException.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r400792118", "createdAt": "2020-03-31T10:04:46Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "diffHunk": "@@ -189,14 +196,25 @@ private static File urlToFile(URL url) {\n       return Paths.get(uri).toFile();\n     }\n \n+    private static URL fileToUrl(File file) {\n+      URI uri;\n+      try {\n+        uri = file.toURI();\n+      } catch (SecurityException e) {\n+        throw new IllegalArgumentException(\"No access to the underlying file \" + file.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwNzI1NA=="}, "originalCommit": {"oid": "bfc8008c88018d5f7395dd6cdb1b27102c181aad"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDk5MTk1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzo1MTozMlrOF-JZqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDowNToyMlrOF-Objg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMDA1Ng==", "bodyText": "What does this mean?\nCould you please remove == null from within assert call?", "url": "https://github.com/apache/calcite/pull/1800#discussion_r400710056", "createdAt": "2020-03-31T07:51:32Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,6 +70,19 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null, \"No url generated for file source\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc8008c88018d5f7395dd6cdb1b27102c181aad"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5MjQ2Mg==", "bodyText": "Thank you for the good suggestion.\nI have revised the code accordingly. Please take anotehr look.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r400792462", "createdAt": "2020-03-31T10:05:22Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,6 +70,19 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null, \"No url generated for file source\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMDA1Ng=="}, "originalCommit": {"oid": "bfc8008c88018d5f7395dd6cdb1b27102c181aad"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDk5NDYxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzo1MjoxN1rOF-JbZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDowNjoyOFrOF-OeFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMDUwMg==", "bodyText": "Does this support filenames with spaces?", "url": "https://github.com/apache/calcite/pull/1800#discussion_r400710502", "createdAt": "2020-03-31T07:52:17Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,6 +70,19 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null, \"No url generated for file source\");\n+\n+    // convert the url back to a file, and assert they are identical.\n+    File urlFile = new File(url.toURI().getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc8008c88018d5f7395dd6cdb1b27102c181aad"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5MzExMQ==", "bodyText": "Yes. The standard Java API supports file names with spaces.\nI have revised the test case to give a file name with space in it.\nPlease take a look. Thank you.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r400793111", "createdAt": "2020-03-31T10:06:28Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,6 +70,19 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test public void testFileToUrl() throws URISyntaxException {\n+    final String path = \"abc.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertFalse(url == null, \"No url generated for file source\");\n+\n+    // convert the url back to a file, and assert they are identical.\n+    File urlFile = new File(url.toURI().getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMDUwMg=="}, "originalCommit": {"oid": "bfc8008c88018d5f7395dd6cdb1b27102c181aad"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTY4OTYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoyNzoyMFrOGGaPAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjo0NzoxOVrOGGjkEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3NDQ2Nw==", "bodyText": "I wonder if it should have something like\n      String filePath = file.getPath();\n      if (!file.isAbsolute()) {\n        if (File.separatorChar != '/') {\n          filePath = filePath.replace(File.separatorChar, '/');\n        }\n        if (file.isDirectory() && !filePath.endsWith(\"/\")) {\n          filePath += \"/\";\n        }\n        try {\n          return new URL(\"file\", null, 0, URLEncoder.encode(filePath, StandardCharsets.UTF_8.name()));\n        } catch (MalformedURLException e) {\n          throw new IllegalArgumentException(\"Unable to create URI for file \" + filePath, e);\n        } catch (UnsupportedEncodingException e) {\n          throw new IllegalArgumentException(\"UTF-8 is not found\", e);\n        }\n      }\nThen implementation would handle both relative and absolute files symmetrically.\nIn other words, for the relative file it would produce something like file:abc%20def.txt which is in line with FileSource(URL).", "url": "https://github.com/apache/calcite/pull/1800#discussion_r409374467", "createdAt": "2020-04-16T08:27:20Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "diffHunk": "@@ -189,14 +196,25 @@ private static File urlToFile(URL url) {\n       return Paths.get(uri).toFile();\n     }\n \n+    private static URL fileToUrl(File file) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c98492725209cef1a66c5e48d5c5bc48ad4307f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUyNzMxNQ==", "bodyText": "@vlsi Thanks a lot for your feedback. I have revised the code accordingly.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r409527315", "createdAt": "2020-04-16T12:47:19Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "diffHunk": "@@ -189,14 +196,25 @@ private static File urlToFile(URL url) {\n       return Paths.get(uri).toFile();\n     }\n \n+    private static URL fileToUrl(File file) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3NDQ2Nw=="}, "originalCommit": {"oid": "6c98492725209cef1a66c5e48d5c5bc48ad4307f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjY2NTM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjo1MjowNlrOGGjwkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDozNzoxOFrOGHI9MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzMDUxNQ==", "bodyText": "Would you please remove else?\nIt is not really required as if branch either returns or throws.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r409530515", "createdAt": "2020-04-16T12:52:06Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "diffHunk": "@@ -189,14 +198,43 @@ private static File urlToFile(URL url) {\n       return Paths.get(uri).toFile();\n     }\n \n+    private static URL fileToUrl(File file) {\n+      String filePath = file.getPath();\n+      if (!file.isAbsolute()) {\n+        // convert relative file paths\n+        if (File.separatorChar != '/') {\n+          filePath = filePath.replace(File.separatorChar, '/');\n+        }\n+        if (file.isDirectory() && !filePath.endsWith(\"/\")) {\n+          filePath += \"/\";\n+        }\n+        try {\n+          return new URL(\n+              \"file\", null, 0, URLEncoder.encode(filePath, StandardCharsets.UTF_8.name()));\n+        } catch (MalformedURLException e) {\n+          throw new IllegalArgumentException(\"Unable to create URI for file \" + filePath, e);\n+        } catch (UnsupportedEncodingException e) {\n+          throw new IllegalArgumentException(\"UTF-8 is not supported\", e);\n+        }\n+      } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144a44b74ee5ace218f3295249d10a6c6d7be441"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEzOTk1Mw==", "bodyText": "Removed. Thanks for your suggestion.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r410139953", "createdAt": "2020-04-17T10:37:18Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "diffHunk": "@@ -189,14 +198,43 @@ private static File urlToFile(URL url) {\n       return Paths.get(uri).toFile();\n     }\n \n+    private static URL fileToUrl(File file) {\n+      String filePath = file.getPath();\n+      if (!file.isAbsolute()) {\n+        // convert relative file paths\n+        if (File.separatorChar != '/') {\n+          filePath = filePath.replace(File.separatorChar, '/');\n+        }\n+        if (file.isDirectory() && !filePath.endsWith(\"/\")) {\n+          filePath += \"/\";\n+        }\n+        try {\n+          return new URL(\n+              \"file\", null, 0, URLEncoder.encode(filePath, StandardCharsets.UTF_8.name()));\n+        } catch (MalformedURLException e) {\n+          throw new IllegalArgumentException(\"Unable to create URI for file \" + filePath, e);\n+        } catch (UnsupportedEncodingException e) {\n+          throw new IllegalArgumentException(\"UTF-8 is not supported\", e);\n+        }\n+      } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzMDUxNQ=="}, "originalCommit": {"oid": "144a44b74ee5ace218f3295249d10a6c6d7be441"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjY2OTE1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjo1MzowN1rOGGjzFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDozNzo0OVrOGHI-LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzMTE1Nw==", "bodyText": "Would you please use literal for the expected value? It would make the expected value easier to understand when reading the code.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r409531157", "createdAt": "2020-04-16T12:53:07Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,6 +72,32 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test void testRelativeFileToUrl() throws UnsupportedEncodingException {\n+    // a file path with space\n+    final String path = \"abc def.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertNotNull(url, \"No url generated for file source\");\n+\n+    String expected = \"file:\" + URLEncoder.encode(path, StandardCharsets.UTF_8.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144a44b74ee5ace218f3295249d10a6c6d7be441"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0MDIwNA==", "bodyText": "Sure. Thank you for the good suggestion.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r410140204", "createdAt": "2020-04-17T10:37:49Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/util/SourceTest.java", "diffHunk": "@@ -67,6 +72,32 @@ private static String getRootPrefix() {\n     }\n   }\n \n+  @Test void testRelativeFileToUrl() throws UnsupportedEncodingException {\n+    // a file path with space\n+    final String path = \"abc def.txt\";\n+    Source fileSource = file(null, path);\n+    URL url = fileSource.url();\n+\n+    assertNotNull(url, \"No url generated for file source\");\n+\n+    String expected = \"file:\" + URLEncoder.encode(path, StandardCharsets.UTF_8.name());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzMTE1Nw=="}, "originalCommit": {"oid": "144a44b74ee5ace218f3295249d10a6c6d7be441"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjUwNjExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDo0MTo1MVrOGHJE9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDo0NToyOVrOGHJL8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0MTk0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      throw new IllegalArgumentException(\"Unable to create URI for file \" + filePath, e);\n          \n          \n            \n                      throw new IllegalArgumentException(\"Unable to create URL for file \" + filePath, e);\n          \n      \n    \n    \n  \n\nsorry for nit-picking :-/", "url": "https://github.com/apache/calcite/pull/1800#discussion_r410141941", "createdAt": "2020-04-17T10:41:51Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "diffHunk": "@@ -189,14 +198,43 @@ private static File urlToFile(URL url) {\n       return Paths.get(uri).toFile();\n     }\n \n+    private static URL fileToUrl(File file) {\n+      String filePath = file.getPath();\n+      if (!file.isAbsolute()) {\n+        // convert relative file paths\n+        if (File.separatorChar != '/') {\n+          filePath = filePath.replace(File.separatorChar, '/');\n+        }\n+        if (file.isDirectory() && !filePath.endsWith(\"/\")) {\n+          filePath += \"/\";\n+        }\n+        try {\n+          return new URL(\n+              \"file\", null, 0, URLEncoder.encode(filePath, StandardCharsets.UTF_8.name()));\n+        } catch (MalformedURLException e) {\n+          throw new IllegalArgumentException(\"Unable to create URI for file \" + filePath, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20cf28ae30f5f17396f8e26aeb9f09b22d3b2606"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0MzczMA==", "bodyText": "Revised. Thanks a lot for your careful review.", "url": "https://github.com/apache/calcite/pull/1800#discussion_r410143730", "createdAt": "2020-04-17T10:45:29Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/util/Sources.java", "diffHunk": "@@ -189,14 +198,43 @@ private static File urlToFile(URL url) {\n       return Paths.get(uri).toFile();\n     }\n \n+    private static URL fileToUrl(File file) {\n+      String filePath = file.getPath();\n+      if (!file.isAbsolute()) {\n+        // convert relative file paths\n+        if (File.separatorChar != '/') {\n+          filePath = filePath.replace(File.separatorChar, '/');\n+        }\n+        if (file.isDirectory() && !filePath.endsWith(\"/\")) {\n+          filePath += \"/\";\n+        }\n+        try {\n+          return new URL(\n+              \"file\", null, 0, URLEncoder.encode(filePath, StandardCharsets.UTF_8.name()));\n+        } catch (MalformedURLException e) {\n+          throw new IllegalArgumentException(\"Unable to create URI for file \" + filePath, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0MTk0MQ=="}, "originalCommit": {"oid": "20cf28ae30f5f17396f8e26aeb9f09b22d3b2606"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 294, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}