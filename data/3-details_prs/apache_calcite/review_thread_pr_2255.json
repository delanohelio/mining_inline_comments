{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MjU3MTcx", "number": 2255, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1MjozOFrOE3yekA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0OToyM1rOE3-0DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTM0MTYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1MjozOFrOHxVqIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDoxNzo1MVrOHxz6Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5NzEyMQ==", "bodyText": "Suggest you don\u2019t create the defaultCall outside the loop. Most calls do not need default arguments.\nYou could in-line the defaultCall method, because it\u2019s very simple.", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521497121", "createdAt": "2020-11-11T16:52:38Z", "author": {"login": "julianhyde"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -145,10 +144,11 @@ public SqlCall getCall() {\n       }\n       final SqlOperandCountRange range = checker.getOperandCountRange();\n       final List<SqlNode> list = Lists.newArrayList(operandList);\n+      final SqlCall defaultCall = createDefaultCall();\n       while (list.size() < range.getMax()\n           && checker.isOptional(list.size())\n           && checker.isFixedParameters()) {\n-        list.add(DEFAULT_CALL);\n+        list.add(defaultCall);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "874f174f9bfcfe87217e77f683f7df27da91e267"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MjgwNw==", "bodyText": "Thanks, I was not aware that most case indeed did not require the default call. Changed.", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521992807", "createdAt": "2020-11-12T10:17:51Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -145,10 +144,11 @@ public SqlCall getCall() {\n       }\n       final SqlOperandCountRange range = checker.getOperandCountRange();\n       final List<SqlNode> list = Lists.newArrayList(operandList);\n+      final SqlCall defaultCall = createDefaultCall();\n       while (list.size() < range.getMax()\n           && checker.isOptional(list.size())\n           && checker.isFixedParameters()) {\n-        list.add(DEFAULT_CALL);\n+        list.add(defaultCall);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5NzEyMQ=="}, "originalCommit": {"oid": "874f174f9bfcfe87217e77f683f7df27da91e267"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTQ0MzgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoxODoxOFrOHxWrSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDoxODoyM1rOHxz7rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxMzgwMg==", "bodyText": "static? The motivation is to ensure the method does not accidentally use the fields.", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521513802", "createdAt": "2020-11-11T17:18:18Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -411,4 +411,8 @@ public CalciteException newValidationError(\n   public boolean isTypeCoercionEnabled() {\n     return validator.config().typeCoercionEnabled();\n   }\n+\n+  private SqlCall createDefaultCall() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "874f174f9bfcfe87217e77f683f7df27da91e267"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MzEzNQ==", "bodyText": "method removed in the latest version", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521993135", "createdAt": "2020-11-12T10:18:23Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -411,4 +411,8 @@ public CalciteException newValidationError(\n   public boolean isTypeCoercionEnabled() {\n     return validator.config().typeCoercionEnabled();\n   }\n+\n+  private SqlCall createDefaultCall() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxMzgwMg=="}, "originalCommit": {"oid": "874f174f9bfcfe87217e77f683f7df27da91e267"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTQ1MTEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyMDoxOFrOHxWv7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyMDoxOFrOHxWv7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxNDk4OA==", "bodyText": "Should this be moved outside of the loop?", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521514988", "createdAt": "2020-11-11T17:20:18Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -201,7 +201,7 @@ private boolean hasAssignment() {\n             // with DEFAULT and then convert to nulls during sql-to-rel conversion.\n             // Thus, there is no need to show the optional operands in the plan and\n             // decide if the optional operand is null when code generation.\n-            permuted.add(DEFAULT_CALL);\n+            permuted.add(createDefaultCall());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "874f174f9bfcfe87217e77f683f7df27da91e267"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTM2MjY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0OToyM1rOHxo_UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDozODo0NlrOHx0uXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzg0MQ==", "bodyText": "Do we need to create a new call, if one already exists?", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521813841", "createdAt": "2020-11-12T03:49:23Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -411,4 +411,8 @@ public CalciteException newValidationError(\n   public boolean isTypeCoercionEnabled() {\n     return validator.config().typeCoercionEnabled();\n   }\n+\n+  private SqlCall createDefaultCall() {\n+    return SqlStdOperatorTable.DEFAULT.createCall(SqlParserPos.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "874f174f9bfcfe87217e77f683f7df27da91e267"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MzgyNA==", "bodyText": "having a single static call caused a circular dependency, the purpose is to avoid it (by creating the default call ad-hoc only when needed)", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521993824", "createdAt": "2020-11-12T10:19:26Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -411,4 +411,8 @@ public CalciteException newValidationError(\n   public boolean isTypeCoercionEnabled() {\n     return validator.config().typeCoercionEnabled();\n   }\n+\n+  private SqlCall createDefaultCall() {\n+    return SqlStdOperatorTable.DEFAULT.createCall(SqlParserPos.ZERO);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzg0MQ=="}, "originalCommit": {"oid": "874f174f9bfcfe87217e77f683f7df27da91e267"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzIwMA==", "bodyText": "Just in case, a nested static class would avoid circular dependency as well.", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521997200", "createdAt": "2020-11-12T10:24:39Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -411,4 +411,8 @@ public CalciteException newValidationError(\n   public boolean isTypeCoercionEnabled() {\n     return validator.config().typeCoercionEnabled();\n   }\n+\n+  private SqlCall createDefaultCall() {\n+    return SqlStdOperatorTable.DEFAULT.createCall(SqlParserPos.ZERO);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzg0MQ=="}, "originalCommit": {"oid": "874f174f9bfcfe87217e77f683f7df27da91e267"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwNjExMA==", "bodyText": "Yes... but my fear is that it would be a more \"obscure\" solution when looking at this code in the future: \"why is this static nested class here, for apparently no reason, just with a private static field...\".\nI guess it can be a good (and efficient) solution, but we'll need a clear javadoc stating the purpose of the class and why it is needed (and cannot be removed). It should be feasible, I'll commit this approach.", "url": "https://github.com/apache/calcite/pull/2255#discussion_r522006110", "createdAt": "2020-11-12T10:38:46Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -411,4 +411,8 @@ public CalciteException newValidationError(\n   public boolean isTypeCoercionEnabled() {\n     return validator.config().typeCoercionEnabled();\n   }\n+\n+  private SqlCall createDefaultCall() {\n+    return SqlStdOperatorTable.DEFAULT.createCall(SqlParserPos.ZERO);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzg0MQ=="}, "originalCommit": {"oid": "874f174f9bfcfe87217e77f683f7df27da91e267"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 79, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}