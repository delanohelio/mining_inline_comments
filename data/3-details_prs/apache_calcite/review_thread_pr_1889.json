{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTkyMzUx", "number": 1889, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjozOToyMlrODtWvZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjozOToyMlrODtWvZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODg1MDk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjozOToyMlrOF-u3BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo1OTo1MlrOGAs8kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyMzc4MA==", "bodyText": "If NOT_ENUMERABLE is not needed any more, should we also no need to retain the predicate parameter?", "url": "https://github.com/apache/calcite/pull/1889#discussion_r401323780", "createdAt": "2020-04-01T02:39:22Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java", "diffHunk": "@@ -53,28 +52,21 @@\n    * will be pushed into the ON clause. */\n   public static final Predicate TRUE_PREDICATE = (join, joinType, exp) -> true;\n \n-  /** Predicate that returns true if the join is not Enumerable convention,\n-   * will be replaced by {@link #TRUE_PREDICATE} once enumerable join supports\n-   * non-equi join. */\n-  // to be removed before 1.22.0\n-  private static final Predicate NOT_ENUMERABLE = (join, joinType, exp) ->\n-      join.getConvention() != EnumerableConvention.INSTANCE;\n-\n   /** Rule that pushes predicates from a Filter into the Join below them. */\n   public static final FilterJoinRule FILTER_ON_JOIN =\n       new FilterIntoJoinRule(true, RelFactories.LOGICAL_BUILDER,\n-          NOT_ENUMERABLE);\n+          TRUE_PREDICATE);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a1c9180ffabca1ff898ff62d26690e1c8c03bb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4OTU4NA==", "bodyText": "I guess still need it for backward compatibility, in case some other is still using it.", "url": "https://github.com/apache/calcite/pull/1889#discussion_r403389584", "createdAt": "2020-04-03T23:59:52Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java", "diffHunk": "@@ -53,28 +52,21 @@\n    * will be pushed into the ON clause. */\n   public static final Predicate TRUE_PREDICATE = (join, joinType, exp) -> true;\n \n-  /** Predicate that returns true if the join is not Enumerable convention,\n-   * will be replaced by {@link #TRUE_PREDICATE} once enumerable join supports\n-   * non-equi join. */\n-  // to be removed before 1.22.0\n-  private static final Predicate NOT_ENUMERABLE = (join, joinType, exp) ->\n-      join.getConvention() != EnumerableConvention.INSTANCE;\n-\n   /** Rule that pushes predicates from a Filter into the Join below them. */\n   public static final FilterJoinRule FILTER_ON_JOIN =\n       new FilterIntoJoinRule(true, RelFactories.LOGICAL_BUILDER,\n-          NOT_ENUMERABLE);\n+          TRUE_PREDICATE);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyMzc4MA=="}, "originalCommit": {"oid": "c6a1c9180ffabca1ff898ff62d26690e1c8c03bb"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 234, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}