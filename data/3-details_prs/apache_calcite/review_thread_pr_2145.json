{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMzE5NjM2", "number": 2145, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzozMjo1NlrOEh72zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjowNjozMVrOEh9rXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDE5MTUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzozMjo1NlrOHPhqHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzo0MzozMVrOHPh0Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0MjE0Mg==", "bodyText": "should we return false or null?", "url": "https://github.com/apache/calcite/pull/2145#discussion_r486042142", "createdAt": "2020-09-10T03:32:56Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java", "diffHunk": "@@ -348,10 +348,13 @@ public Boolean areColumnsUnique(Join rel, RelMetadataQuery mq,\n \n   public Boolean areColumnsUnique(Aggregate rel, RelMetadataQuery mq,\n       ImmutableBitSet columns, boolean ignoreNulls) {\n-    columns = decorateWithConstantColumnsFromPredicates(columns, rel, mq);\n-    // group by keys form a unique key\n-    ImmutableBitSet groupKey = ImmutableBitSet.range(rel.getGroupCount());\n-    return columns.contains(groupKey);\n+    if (Aggregate.isSimple(rel) || ignoreNulls) {\n+      columns = decorateWithConstantColumnsFromPredicates(columns, rel, mq);\n+      // group by keys form a unique key\n+      ImmutableBitSet groupKey = ImmutableBitSet.range(rel.getGroupCount());\n+      return columns.contains(groupKey);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbd2ed071903becf60a3b9bece848375ed0babe1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0NDY4Nw==", "bodyText": "Return null seems better(it means unknown). Thank you for your review.", "url": "https://github.com/apache/calcite/pull/2145#discussion_r486044687", "createdAt": "2020-09-10T03:43:31Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java", "diffHunk": "@@ -348,10 +348,13 @@ public Boolean areColumnsUnique(Join rel, RelMetadataQuery mq,\n \n   public Boolean areColumnsUnique(Aggregate rel, RelMetadataQuery mq,\n       ImmutableBitSet columns, boolean ignoreNulls) {\n-    columns = decorateWithConstantColumnsFromPredicates(columns, rel, mq);\n-    // group by keys form a unique key\n-    ImmutableBitSet groupKey = ImmutableBitSet.range(rel.getGroupCount());\n-    return columns.contains(groupKey);\n+    if (Aggregate.isSimple(rel) || ignoreNulls) {\n+      columns = decorateWithConstantColumnsFromPredicates(columns, rel, mq);\n+      // group by keys form a unique key\n+      ImmutableBitSet groupKey = ImmutableBitSet.range(rel.getGroupCount());\n+      return columns.contains(groupKey);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0MjE0Mg=="}, "originalCommit": {"oid": "fbd2ed071903becf60a3b9bece848375ed0babe1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQ4OTg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjowNjozMVrOHPkWXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1Mzo1MVrOHQSUGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NjIzOA==", "bodyText": "Since the group set is immutable, we can directly return rel.getGroupSet()?", "url": "https://github.com/apache/calcite/pull/2145#discussion_r486086238", "createdAt": "2020-09-10T06:06:31Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java", "diffHunk": "@@ -246,8 +246,14 @@ private RelMdUniqueKeys() {}\n \n   public Set<ImmutableBitSet> getUniqueKeys(Aggregate rel, RelMetadataQuery mq,\n       boolean ignoreNulls) {\n-    // group by keys form a unique key\n-    return ImmutableSet.of(rel.getGroupSet());\n+    if (Aggregate.isSimple(rel) || ignoreNulls) {\n+      // group by keys form a unique key\n+      return ImmutableSet.of(rel.getGroupSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0096b7f639c7776e23ba7dafdebd6331d9ee515c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyMjQyMw==", "bodyText": "I don't think so. rel.getGroupSet() returns ImmutableBitSet while here we should return Set<ImmutableBitSet>", "url": "https://github.com/apache/calcite/pull/2145#discussion_r486822423", "createdAt": "2020-09-11T07:19:44Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java", "diffHunk": "@@ -246,8 +246,14 @@ private RelMdUniqueKeys() {}\n \n   public Set<ImmutableBitSet> getUniqueKeys(Aggregate rel, RelMetadataQuery mq,\n       boolean ignoreNulls) {\n-    // group by keys form a unique key\n-    return ImmutableSet.of(rel.getGroupSet());\n+    if (Aggregate.isSimple(rel) || ignoreNulls) {\n+      // group by keys form a unique key\n+      return ImmutableSet.of(rel.getGroupSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NjIzOA=="}, "originalCommit": {"oid": "0096b7f639c7776e23ba7dafdebd6331d9ee515c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzOTMyMw==", "bodyText": "I see. Thanks for the clarification.", "url": "https://github.com/apache/calcite/pull/2145#discussion_r486839323", "createdAt": "2020-09-11T07:53:51Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java", "diffHunk": "@@ -246,8 +246,14 @@ private RelMdUniqueKeys() {}\n \n   public Set<ImmutableBitSet> getUniqueKeys(Aggregate rel, RelMetadataQuery mq,\n       boolean ignoreNulls) {\n-    // group by keys form a unique key\n-    return ImmutableSet.of(rel.getGroupSet());\n+    if (Aggregate.isSimple(rel) || ignoreNulls) {\n+      // group by keys form a unique key\n+      return ImmutableSet.of(rel.getGroupSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NjIzOA=="}, "originalCommit": {"oid": "0096b7f639c7776e23ba7dafdebd6331d9ee515c"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 137, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}