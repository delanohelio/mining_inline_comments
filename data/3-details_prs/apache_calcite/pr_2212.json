{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyOTIzODQw", "number": 2212, "title": "[CALCITE-4325] RexSimplify incorrectly simplifies complex expressions that contain Sarg and IS NULL", "bodyText": "Improve how class Sarg handles IS NULL and IS NOT NULL\nconditions. They are now handled symmetrically, using fields\nnullCount and notNullCount, whereas previously we used\ncontainsNull, which could handle IS NULL only in certain\ncircumstances and IS NOT NULL not at all.", "createdAt": "2020-10-13T22:29:12Z", "url": "https://github.com/apache/calcite/pull/2212", "merged": true, "mergeCommit": {"oid": "ffc1e3b05e7f920d95c48f7c75fd48372684b8e7"}, "closed": true, "closedAt": "2020-10-15T21:43:47Z", "author": {"login": "julianhyde"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSQbqVAFqTUwNzg3NjMwOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdS20KJgBqjM4ODMyMDA0NjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3ODc2MzA4", "url": "https://github.com/apache/calcite/pull/2212#pullrequestreview-507876308", "createdAt": "2020-10-13T22:36:33Z", "commit": {"oid": "ecf7a8d25157dda11f6c295b066f9337076e5c5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozNjozNFrOHg747g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozNjozNFrOHg747g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5NzcxMA==", "bodyText": "Should this be int complexity = rangeSet.asRanges().size(), and then if (...) { complexity = 1;}?", "url": "https://github.com/apache/calcite/pull/2212#discussion_r504297710", "createdAt": "2020-10-13T22:36:34Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "diffHunk": "@@ -149,4 +150,33 @@ public boolean isComplementedPoints() {\n         && rangeSet.complement().asRanges().stream()\n             .allMatch(RangeSets::isPoint);\n   }\n+\n+  /** Returns a measure of the complexity of this expression.\n+   *\n+   * <p>It is basically the number of values that need to be checked against\n+   * (including NULL).\n+   *\n+   * <p>Examples:\n+   * <ul>\n+   *   <li>{@code x = 1}, {@code x <> 1}, {@code x > 1} have complexity 1\n+   *   <li>{@code x > 1 or x is null} has complexity 2\n+   *   <li>{@code x in (2, 4, 6) or x > 20} has complexity 4\n+   *   <li>{@code x between 3 and 8 or x between 10 and 20} has complexity 2\n+   * </ul>\n+   */\n+  public int complexity() {\n+    int complexity;\n+    if (rangeSet.asRanges().size() == 2\n+        && rangeSet.complement().asRanges().size() == 1\n+        && RangeSets.isPoint(\n+            Iterables.getOnlyElement(rangeSet.complement().asRanges()))) {\n+      complexity = 1;\n+    } else {\n+      complexity = rangeSet.asRanges().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf7a8d25157dda11f6c295b066f9337076e5c5b"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3ODg3NjYx", "url": "https://github.com/apache/calcite/pull/2212#pullrequestreview-507887661", "createdAt": "2020-10-13T23:02:52Z", "commit": {"oid": "ecf7a8d25157dda11f6c295b066f9337076e5c5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzowMjo1MlrOHg8ddw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzowMjo1MlrOHg8ddw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwNzA2Mw==", "bodyText": "Is this computation important for something?\nPlease add the relevant comment: if it is important, then clarify so. If it is just a fine detail, then comment so. The intention behind the conditions is not really visible.", "url": "https://github.com/apache/calcite/pull/2212#discussion_r504307063", "createdAt": "2020-10-13T23:02:52Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/util/Sarg.java", "diffHunk": "@@ -149,4 +150,33 @@ public boolean isComplementedPoints() {\n         && rangeSet.complement().asRanges().stream()\n             .allMatch(RangeSets::isPoint);\n   }\n+\n+  /** Returns a measure of the complexity of this expression.\n+   *\n+   * <p>It is basically the number of values that need to be checked against\n+   * (including NULL).\n+   *\n+   * <p>Examples:\n+   * <ul>\n+   *   <li>{@code x = 1}, {@code x <> 1}, {@code x > 1} have complexity 1\n+   *   <li>{@code x > 1 or x is null} has complexity 2\n+   *   <li>{@code x in (2, 4, 6) or x > 20} has complexity 4\n+   *   <li>{@code x between 3 and 8 or x between 10 and 20} has complexity 2\n+   * </ul>\n+   */\n+  public int complexity() {\n+    int complexity;\n+    if (rangeSet.asRanges().size() == 2\n+        && rangeSet.complement().asRanges().size() == 1\n+        && RangeSets.isPoint(\n+            Iterables.getOnlyElement(rangeSet.complement().asRanges()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf7a8d25157dda11f6c295b066f9337076e5c5b"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ecf7a8d25157dda11f6c295b066f9337076e5c5b", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/ecf7a8d25157dda11f6c295b066f9337076e5c5b", "committedDate": "2020-10-13T22:25:24Z", "message": "[CALCITE-4325] RexSimplify incorrectly simplifies complex expressions that contain Sarg and IS NULL\n\nImprove how class Sarg handles IS NULL and IS NOT NULL\nconditions. They are now handled symmetrically, using fields\nnullCount and notNullCount, whereas previously we used\ncontainsNull, which could handle IS NULL only in certain\ncircumstances and IS NOT NULL not at all."}, "afterCommit": {"oid": "d25d75f787dfdd74be8398e66d2f29ef51f73e4a", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/d25d75f787dfdd74be8398e66d2f29ef51f73e4a", "committedDate": "2020-10-14T20:37:58Z", "message": "[CALCITE-4325] RexSimplify incorrectly simplifies complex expressions that contain Sarg and IS NULL\n\nImprove how class Sarg handles IS NULL and IS NOT NULL\nconditions. They are now handled symmetrically, using fields\nnullCount and notNullCount, whereas previously we used\ncontainsNull, which could handle IS NULL only in certain\ncircumstances and IS NOT NULL not at all."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d25d75f787dfdd74be8398e66d2f29ef51f73e4a", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/d25d75f787dfdd74be8398e66d2f29ef51f73e4a", "committedDate": "2020-10-14T20:37:58Z", "message": "[CALCITE-4325] RexSimplify incorrectly simplifies complex expressions that contain Sarg and IS NULL\n\nImprove how class Sarg handles IS NULL and IS NOT NULL\nconditions. They are now handled symmetrically, using fields\nnullCount and notNullCount, whereas previously we used\ncontainsNull, which could handle IS NULL only in certain\ncircumstances and IS NOT NULL not at all."}, "afterCommit": {"oid": "8c6957d3659a7f9f791ddde99a7ca30b26ff2082", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/8c6957d3659a7f9f791ddde99a7ca30b26ff2082", "committedDate": "2020-10-15T00:15:04Z", "message": "[CALCITE-4325] RexSimplify incorrectly simplifies complex expressions that contain Sarg and IS NULL\n\nImprove how class Sarg handles IS NULL and IS NOT NULL\nconditions. They are now handled symmetrically, using fields\nnullCount and notNullCount, whereas previously we used\ncontainsNull, which could handle IS NULL only in certain\ncircumstances and IS NOT NULL not at all.\n\nIn CalciteAssert, correct rounding floating point rounding\nerrors before comparing SQL column values. For example,\n'236.55000000000007' becomes '236.55'. This fixes some\nintermittent Druid test failures."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee5c78444558117c71cc7058a79bc920a52cad59", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/ee5c78444558117c71cc7058a79bc920a52cad59", "committedDate": "2020-10-15T01:15:13Z", "message": "[CALCITE-4325] RexSimplify incorrectly simplifies complex expressions that contain Sarg and IS NULL\n\nImprove how class Sarg handles IS NULL and IS NOT NULL\nconditions. They are now handled symmetrically, using fields\nnullCount and notNullCount, whereas previously we used\ncontainsNull, which could handle IS NULL only in certain\ncircumstances and IS NOT NULL not at all.\n\nIn CalciteAssert, correct rounding floating point rounding\nerrors before comparing SQL column values. For example,\n'236.55000000000007' becomes '236.55'. This fixes some\nintermittent Druid test failures."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1467245a260ddb20480b3247a5070de3a983d1a", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/f1467245a260ddb20480b3247a5070de3a983d1a", "committedDate": "2020-10-15T01:13:00Z", "message": "[CALCITE-4204] Intermittent precision in Druid results when using aggregation functions over columns of type DOUBLE"}, "afterCommit": {"oid": "10c80d61c074214963e2c2541ab584f6d74064e6", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/10c80d61c074214963e2c2541ab584f6d74064e6", "committedDate": "2020-10-15T02:08:11Z", "message": "more 4204"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc1e3b05e7f920d95c48f7c75fd48372684b8e7", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/ffc1e3b05e7f920d95c48f7c75fd48372684b8e7", "committedDate": "2020-10-15T19:18:56Z", "message": "Make progress on [CALCITE-4204] Intermittent precision in Druid results when using aggregation functions over columns of type DOUBLE\n\nIf a query returns a column value that has at least four\nzeros or nines after the decimal point (indicating that\nrounding has occurred) clean up the rounding. For example,\n'12.3449999962' becomes '12.345'. Most queries have a result\nthat is decimal exact to a small number of decimal places;\nsuch queries are re-enabled in this change, because they are\nnow deterministic. There are still a few queries whose\ndecimal does not terminate (perhaps it is a rational number)\nand therefore [CALCITE-4204] remains open."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7fc9a4440ae1ab48f3a034aef62e2b7e5e543731", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/7fc9a4440ae1ab48f3a034aef62e2b7e5e543731", "committedDate": "2020-10-15T16:53:24Z", "message": "remove some 4204 protectors"}, "afterCommit": {"oid": "ffc1e3b05e7f920d95c48f7c75fd48372684b8e7", "author": {"user": {"login": "julianhyde", "name": "Julian Hyde"}}, "url": "https://github.com/apache/calcite/commit/ffc1e3b05e7f920d95c48f7c75fd48372684b8e7", "committedDate": "2020-10-15T19:18:56Z", "message": "Make progress on [CALCITE-4204] Intermittent precision in Druid results when using aggregation functions over columns of type DOUBLE\n\nIf a query returns a column value that has at least four\nzeros or nines after the decimal point (indicating that\nrounding has occurred) clean up the rounding. For example,\n'12.3449999962' becomes '12.345'. Most queries have a result\nthat is decimal exact to a small number of decimal places;\nsuch queries are re-enabled in this change, because they are\nnow deterministic. There are still a few queries whose\ndecimal does not terminate (perhaps it is a rational number)\nand therefore [CALCITE-4204] remains open."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2958, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}