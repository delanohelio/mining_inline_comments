{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwODg5Mzk4", "number": 2071, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODowNToyM1rOEPcDKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDoxMjoyMVrOEPjQZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjIzNjU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODowNToyM1rOGzJe9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowMTowMVrOGzLR4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4NTk0MA==", "bodyText": "It would be cool if we can also describe a little what the original purpose of this method too ~", "url": "https://github.com/apache/calcite/pull/2071#discussion_r456285940", "createdAt": "2020-07-17T08:05:23Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "diffHunk": "@@ -177,7 +177,8 @@ public void register(RelOptPlanner planner) {\n     Util.discard(planner);\n   }\n \n-  public final String getRelTypeName() {\n+  // It is not recommended to override this method, but sub-classes can do it at their own risk.\n+  public String getRelTypeName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a672aac6359ceac4be8b473a2c925aa1ebcf660"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5Nzc3NQ==", "bodyText": "I think there is a very complete description in the javadoc of the interface RelNode; we could copy-paste it in here, but I think it would be redundant and less simple to maintain.", "url": "https://github.com/apache/calcite/pull/2071#discussion_r456297775", "createdAt": "2020-07-17T08:27:52Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "diffHunk": "@@ -177,7 +177,8 @@ public void register(RelOptPlanner planner) {\n     Util.discard(planner);\n   }\n \n-  public final String getRelTypeName() {\n+  // It is not recommended to override this method, but sub-classes can do it at their own risk.\n+  public String getRelTypeName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4NTk0MA=="}, "originalCommit": {"oid": "2a672aac6359ceac4be8b473a2c925aa1ebcf660"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwODkxNQ==", "bodyText": "The original document is not suitable now because it describes the default behavior, one can override it to a different one.", "url": "https://github.com/apache/calcite/pull/2071#discussion_r456308915", "createdAt": "2020-07-17T08:48:45Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "diffHunk": "@@ -177,7 +177,8 @@ public void register(RelOptPlanner planner) {\n     Util.discard(planner);\n   }\n \n-  public final String getRelTypeName() {\n+  // It is not recommended to override this method, but sub-classes can do it at their own risk.\n+  public String getRelTypeName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4NTk0MA=="}, "originalCommit": {"oid": "2a672aac6359ceac4be8b473a2c925aa1ebcf660"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNTM2MA==", "bodyText": "The original javadoc is the one from the interface (RelNode), which is a contract, so I think its documentation is still valid. Overridden implementations must respect this contract, but they can implement it in a different way, e.g. returning a String literal with the class name, instead of using the default mechanism of AbstractRelNode based on getClass().getName()", "url": "https://github.com/apache/calcite/pull/2071#discussion_r456315360", "createdAt": "2020-07-17T09:01:01Z", "author": {"login": "rubenada"}, "path": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "diffHunk": "@@ -177,7 +177,8 @@ public void register(RelOptPlanner planner) {\n     Util.discard(planner);\n   }\n \n-  public final String getRelTypeName() {\n+  // It is not recommended to override this method, but sub-classes can do it at their own risk.\n+  public String getRelTypeName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4NTk0MA=="}, "originalCommit": {"oid": "2a672aac6359ceac4be8b473a2c925aa1ebcf660"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzQxNzMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDoxMjoyMVrOGzUmZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDoxMjoyMVrOGzUmZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2ODA3MQ==", "bodyText": "nit: It might be better to 2 lines.", "url": "https://github.com/apache/calcite/pull/2071#discussion_r456468071", "createdAt": "2020-07-17T14:12:21Z", "author": {"login": "hsyuan"}, "path": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "diffHunk": "@@ -177,7 +177,8 @@ public void register(RelOptPlanner planner) {\n     Util.discard(planner);\n   }\n \n-  public final String getRelTypeName() {\n+  // It is not recommended to override this method, but sub-classes can do it at their own risk.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a672aac6359ceac4be8b473a2c925aa1ebcf660"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 93, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}