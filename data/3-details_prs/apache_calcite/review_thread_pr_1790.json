{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMzA2NjI3", "number": 1790, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzozNTo0OFrODfEp6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzozNTo0OFrODfEp6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTA4NzE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/tools/RelRunners.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzozNTo0OFrOFokLiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzoyMTozM1rOFouQLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MDEzNw==", "bodyText": "This looks odd.\nCan you clarify why is this replacement needed?", "url": "https://github.com/apache/calcite/pull/1790#discussion_r378080137", "createdAt": "2020-02-12T07:35:48Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/tools/RelRunners.java", "diffHunk": "@@ -29,6 +35,19 @@ private RelRunners() {}\n \n   /** Runs a relational expression by creating a JDBC connection. */\n   public static PreparedStatement run(RelNode rel) {\n+    final RelShuttle shuttle = new RelHomogeneousShuttle() {\n+      @Override public RelNode visit(TableScan scan) {\n+        final RelOptTable table = scan.getTable();\n+        if (scan instanceof LogicalTableScan\n+            && Bindables.BindableTableScan.canHandle(table)) {\n+          // Always replace the LogicalTableScan with BindableTableScan\n+          // because it's implementation does not require a \"schema\" as context.\n+          return Bindables.BindableTableScan.create(scan.getCluster(), table);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de20b8280aebfde0f9afda7f2c8d7ee5418e44c5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3MjU0Nw==", "bodyText": "Because the Enumerables implementation needs a \"schema\" to look up for the table. but the RelRunners does not actually have a schema, the Bindables actually can implement that.", "url": "https://github.com/apache/calcite/pull/1790#discussion_r378172547", "createdAt": "2020-02-12T10:45:53Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/tools/RelRunners.java", "diffHunk": "@@ -29,6 +35,19 @@ private RelRunners() {}\n \n   /** Runs a relational expression by creating a JDBC connection. */\n   public static PreparedStatement run(RelNode rel) {\n+    final RelShuttle shuttle = new RelHomogeneousShuttle() {\n+      @Override public RelNode visit(TableScan scan) {\n+        final RelOptTable table = scan.getTable();\n+        if (scan instanceof LogicalTableScan\n+            && Bindables.BindableTableScan.canHandle(table)) {\n+          // Always replace the LogicalTableScan with BindableTableScan\n+          // because it's implementation does not require a \"schema\" as context.\n+          return Bindables.BindableTableScan.create(scan.getCluster(), table);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MDEzNw=="}, "originalCommit": {"oid": "de20b8280aebfde0f9afda7f2c8d7ee5418e44c5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5NzI2Mw==", "bodyText": "Can the clients of Relrunners do the appropriate conversion instead?\norg.apache.calcite.tools.RelRunners#run API says nothing on what changes would it make to the input rel node.\nIt might be very unexpected for those who see just the call to RelRunners.run(root)).", "url": "https://github.com/apache/calcite/pull/1790#discussion_r378197263", "createdAt": "2020-02-12T11:36:03Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/tools/RelRunners.java", "diffHunk": "@@ -29,6 +35,19 @@ private RelRunners() {}\n \n   /** Runs a relational expression by creating a JDBC connection. */\n   public static PreparedStatement run(RelNode rel) {\n+    final RelShuttle shuttle = new RelHomogeneousShuttle() {\n+      @Override public RelNode visit(TableScan scan) {\n+        final RelOptTable table = scan.getTable();\n+        if (scan instanceof LogicalTableScan\n+            && Bindables.BindableTableScan.canHandle(table)) {\n+          // Always replace the LogicalTableScan with BindableTableScan\n+          // because it's implementation does not require a \"schema\" as context.\n+          return Bindables.BindableTableScan.create(scan.getCluster(), table);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MDEzNw=="}, "originalCommit": {"oid": "de20b8280aebfde0f9afda7f2c8d7ee5418e44c5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0NTE2NA==", "bodyText": "The logic is the same compared to the old one. The RelRunners always run a logical plan.", "url": "https://github.com/apache/calcite/pull/1790#discussion_r378245164", "createdAt": "2020-02-12T13:21:33Z", "author": {"login": "danny0405"}, "path": "core/src/main/java/org/apache/calcite/tools/RelRunners.java", "diffHunk": "@@ -29,6 +35,19 @@ private RelRunners() {}\n \n   /** Runs a relational expression by creating a JDBC connection. */\n   public static PreparedStatement run(RelNode rel) {\n+    final RelShuttle shuttle = new RelHomogeneousShuttle() {\n+      @Override public RelNode visit(TableScan scan) {\n+        final RelOptTable table = scan.getTable();\n+        if (scan instanceof LogicalTableScan\n+            && Bindables.BindableTableScan.canHandle(table)) {\n+          // Always replace the LogicalTableScan with BindableTableScan\n+          // because it's implementation does not require a \"schema\" as context.\n+          return Bindables.BindableTableScan.create(scan.getCluster(), table);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MDEzNw=="}, "originalCommit": {"oid": "de20b8280aebfde0f9afda7f2c8d7ee5418e44c5"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 284, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}