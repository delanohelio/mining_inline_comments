{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNjAwNDA3", "number": 2144, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo0NDowMlrOEhjCPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyMjo1MlrOEhlhPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjEyNDc5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo0NDowMlrOHO6wuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo0OToxM1rOHO68-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQwNDg1Ng==", "bodyText": "Can Sarg[, null] be promoted to Sarg[null] ?", "url": "https://github.com/apache/calcite/pull/2144#discussion_r485404856", "createdAt": "2020-09-09T07:44:02Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -1640,6 +1640,21 @@ private void checkExponentialCnf(int n) {\n         .expandedSearch(expanded);\n   }\n \n+  @Test void testSimplifyRange6() {\n+    // An IS NULL condition would not usually become a Sarg,\n+    // but here it is combined with another condition, and together they cross\n+    // the complexity threshold.\n+    final RexNode aRef = input(tInt(true), 0);\n+    final RexNode bRef = input(tInt(true), 1);\n+    // a in (1, 2) or b is null\n+    RexNode expr = or(eq(aRef, literal(1)), eq(aRef, literal(2)), isNull(bRef));\n+    final String simplified =\n+        \"OR(SEARCH($1, Sarg[, null]), SEARCH($0, Sarg[1, 2]))\";\n+    final String expanded = \"OR(IS NULL($1), OR(=($0, 1), =($0, 2)))\";\n+    checkSimplify(expr, simplified)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46f8f928076e8f558572e284d2d43c0a38431972"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQwNzk5NQ==", "bodyText": "NULL isn't a value on the line -infinity to infinity, so it cannot be part of the range-set.\nIdeally we wouldn't create a Sarg with an empty range-set that allows NULL. It happened in this case because the complexity threshold isn't perfect (maybe we'll improve that later). We will always want to allow Sarg[, null] - it might occur if you intersect Sarg[ < 2, null] with Sarg[ > 10, null] - but hopefully we won't use it very often.", "url": "https://github.com/apache/calcite/pull/2144#discussion_r485407995", "createdAt": "2020-09-09T07:49:13Z", "author": {"login": "julianhyde"}, "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -1640,6 +1640,21 @@ private void checkExponentialCnf(int n) {\n         .expandedSearch(expanded);\n   }\n \n+  @Test void testSimplifyRange6() {\n+    // An IS NULL condition would not usually become a Sarg,\n+    // but here it is combined with another condition, and together they cross\n+    // the complexity threshold.\n+    final RexNode aRef = input(tInt(true), 0);\n+    final RexNode bRef = input(tInt(true), 1);\n+    // a in (1, 2) or b is null\n+    RexNode expr = or(eq(aRef, literal(1)), eq(aRef, literal(2)), isNull(bRef));\n+    final String simplified =\n+        \"OR(SEARCH($1, Sarg[, null]), SEARCH($0, Sarg[1, 2]))\";\n+    final String expanded = \"OR(IS NULL($1), OR(=($0, 1), =($0, 2)))\";\n+    checkSimplify(expr, simplified)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQwNDg1Ng=="}, "originalCommit": {"oid": "46f8f928076e8f558572e284d2d43c0a38431972"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjM0NDE2OnYy", "diffSide": "LEFT", "path": "plus/src/test/java/org/apache/calcite/adapter/tpcds/TpcdsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozOTo1NFrOHO829g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMToxMjowNFrOHxItPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzOTIyMg==", "bodyText": "This is a breaking change in a minor release.", "url": "https://github.com/apache/calcite/pull/2144#discussion_r485439222", "createdAt": "2020-09-09T08:39:54Z", "author": {"login": "vlsi"}, "path": "plus/src/test/java/org/apache/calcite/adapter/tpcds/TpcdsTest.java", "diffHunk": "@@ -367,15 +366,13 @@ protected void foo(CalciteAssert.AssertThat with, String tableName,\n                 builder.equals(builder.field(\"CD_EDUCATION_STATUS\"),\n                     builder.literal(\"HIGH SCHOOL\")),\n                 builder.equals(builder.field(\"D_YEAR\"), builder.literal(1998)),\n-                builder.call(SqlStdOperatorTable.IN,\n-                    builder.field(\"S_STATE\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60aa74f4e5b3b01ad90cb9ee9a4520483d45b2b4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI4NDkyNg==", "bodyText": "Hi, I stumbled upon this breaking change as well and unfortunately it is not categorized as breaking change in Calcite release notes.", "url": "https://github.com/apache/calcite/pull/2144#discussion_r521284926", "createdAt": "2020-11-11T11:12:04Z", "author": {"login": "Dominick1993"}, "path": "plus/src/test/java/org/apache/calcite/adapter/tpcds/TpcdsTest.java", "diffHunk": "@@ -367,15 +366,13 @@ protected void foo(CalciteAssert.AssertThat with, String tableName,\n                 builder.equals(builder.field(\"CD_EDUCATION_STATUS\"),\n                     builder.literal(\"HIGH SCHOOL\")),\n                 builder.equals(builder.field(\"D_YEAR\"), builder.literal(1998)),\n-                builder.call(SqlStdOperatorTable.IN,\n-                    builder.field(\"S_STATE\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzOTIyMg=="}, "originalCommit": {"oid": "60aa74f4e5b3b01ad90cb9ee9a4520483d45b2b4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjQxMTQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1NDo0MVrOHO9fqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1NDo0MVrOHO9fqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0OTY0MQ==", "bodyText": "I wonder if this can be integrated into addRange, so it skips adding duplicate items in the first place rather than add duplicates and de-duplicate it later.", "url": "https://github.com/apache/calcite/pull/2144#discussion_r485449641", "createdAt": "2020-09-09T08:54:41Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -2690,7 +2691,14 @@ int complexity() {\n     }\n \n     @Override public RelDataType getType() {\n-      return rexBuilder.typeFactory.leastRestrictive(Util.distinctList(types));\n+      if (this.types.isEmpty()) {\n+        // Expression is \"x IS NULL\"\n+        return ref.getType();\n+      }\n+      final List<RelDataType> distinctTypes = Util.distinctList(this.types);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60aa74f4e5b3b01ad90cb9ee9a4520483d45b2b4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjUzMTgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyMjo1MlrOHO-p7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo1MDo0MVrOHPTS-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2ODY1NA==", "bodyText": "It looks strange that ref.getType() is considered only in the case of null-only sarg.\nShould it be included to this.types in the constructor instead, so the types are handled in a uniform way?", "url": "https://github.com/apache/calcite/pull/2144#discussion_r485468654", "createdAt": "2020-09-09T09:22:52Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -2690,7 +2691,14 @@ int complexity() {\n     }\n \n     @Override public RelDataType getType() {\n-      return rexBuilder.typeFactory.leastRestrictive(Util.distinctList(types));\n+      if (this.types.isEmpty()) {\n+        // Expression is \"x IS NULL\"\n+        return ref.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60aa74f4e5b3b01ad90cb9ee9a4520483d45b2b4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNjg0Mg==", "bodyText": "I agree it's a bit strange. It's tricky because the assignment rules for the left-hand type are different from the right-hand types.\nThe type assignment rules are complicated (e.g. when you compare a REAL to a DECIMAL, do you convert the REAL to a DECIMAL or vice versa?; and hundred other things).  I decided to not spend effort addressing it at this point.  If you can find a SQL example where it matters, log a bug.", "url": "https://github.com/apache/calcite/pull/2144#discussion_r485806842", "createdAt": "2020-09-09T17:50:41Z", "author": {"login": "julianhyde"}, "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -2690,7 +2691,14 @@ int complexity() {\n     }\n \n     @Override public RelDataType getType() {\n-      return rexBuilder.typeFactory.leastRestrictive(Util.distinctList(types));\n+      if (this.types.isEmpty()) {\n+        // Expression is \"x IS NULL\"\n+        return ref.getType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2ODY1NA=="}, "originalCommit": {"oid": "60aa74f4e5b3b01ad90cb9ee9a4520483d45b2b4"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 134, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}