{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NTk4Njc3", "number": 2256, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzozMToyMFrOE4B4Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTo1NzoxMVrOE4FaMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTg2NDQyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzozMToyMFrOHxtl-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODoxNToxNFrOHxu9Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4OTI3NQ==", "bodyText": "Please factor this into a method and make the assertion messages distinguishable.", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521889275", "createdAt": "2020-11-12T07:31:20Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +197,31 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  @Test public void testEqualSansNullability() {\n+    final RelDataTypeFactory factory = f.typeFactory;\n+\n+    RelDataType bigIntType = f.sqlBigInt;\n+    RelDataType nullableBigIntType = f.sqlBigIntNullable;\n+    RelDataType varCharType = f.sqlVarchar;\n+\n+    // different types\n+    assertThat(\n+        SqlTypeUtil.equalSansNullability(factory, bigIntType, varCharType), is(false));\n+    assertThat(\n+        SqlTypeUtil.equalSansNullability(bigIntType, varCharType), is(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68e982e3f6b1eb1df170b1b50ec52556024040f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkxMTU2Mg==", "bodyText": "Done. Thanks for the good suggestion.", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521911562", "createdAt": "2020-11-12T08:15:14Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +197,31 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  @Test public void testEqualSansNullability() {\n+    final RelDataTypeFactory factory = f.typeFactory;\n+\n+    RelDataType bigIntType = f.sqlBigInt;\n+    RelDataType nullableBigIntType = f.sqlBigIntNullable;\n+    RelDataType varCharType = f.sqlVarchar;\n+\n+    // different types\n+    assertThat(\n+        SqlTypeUtil.equalSansNullability(factory, bigIntType, varCharType), is(false));\n+    assertThat(\n+        SqlTypeUtil.equalSansNullability(bigIntType, varCharType), is(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4OTI3NQ=="}, "originalCommit": {"oid": "f68e982e3f6b1eb1df170b1b50ec52556024040f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjMzMTk5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTozMDo0NVrOHxyBow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDoyNDo1MlrOHx0MFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2MTg5MQ==", "bodyText": "unequal  is not a valid word.", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521961891", "createdAt": "2020-11-12T09:30:45Z", "author": {"login": "danny0405"}, "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +198,35 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  private void compareTypesIgnoringNullability(\n+      RelDataType type1, RelDataType type2, boolean expectedResult) {\n+    String msg = String.format(Locale.ROOT,\n+        \"%s and %s are expected to be %s ignoring nullability.\",\n+        type1.getFullTypeString(),\n+        type2.getFullTypeString(),\n+        expectedResult ? \"equal\" : \"unequal\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430249fcefd78b1ee877077fcb56adba4270487b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3MDk0NA==", "bodyText": "Changed to 'not equal'. Thanks.", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521970944", "createdAt": "2020-11-12T09:44:57Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +198,35 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  private void compareTypesIgnoringNullability(\n+      RelDataType type1, RelDataType type2, boolean expectedResult) {\n+    String msg = String.format(Locale.ROOT,\n+        \"%s and %s are expected to be %s ignoring nullability.\",\n+        type1.getFullTypeString(),\n+        type2.getFullTypeString(),\n+        expectedResult ? \"equal\" : \"unequal\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2MTg5MQ=="}, "originalCommit": {"oid": "430249fcefd78b1ee877077fcb56adba4270487b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3ODE3Mw==", "bodyText": "Another issue here is that both asserts have the same message, so it is hard to tell which fails.\nI would suggest:\n    assertThat(\n        \"SqlTypeUtil.equalSansNullability(typeFactory, \" + type1 + \", \" + type2 + \"), comment: \" + comment,\n        SqlTypeUtil.equalSansNullability(f.typeFactory, type1, type2), is(expectedResult));\n    assertThat(\n        \"SqlTypeUtil.equalSansNullability(\" + type1 + \", \" + type2 + \"), comment: \" + comment,\n        SqlTypeUtil.equalSansNullability(type1, type2), is(expectedResult));", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521978173", "createdAt": "2020-11-12T09:55:33Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +198,35 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  private void compareTypesIgnoringNullability(\n+      RelDataType type1, RelDataType type2, boolean expectedResult) {\n+    String msg = String.format(Locale.ROOT,\n+        \"%s and %s are expected to be %s ignoring nullability.\",\n+        type1.getFullTypeString(),\n+        type2.getFullTypeString(),\n+        expectedResult ? \"equal\" : \"unequal\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2MTg5MQ=="}, "originalCommit": {"oid": "430249fcefd78b1ee877077fcb56adba4270487b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzMzMg==", "bodyText": "Sounds reasonable. Revised accordingly. Thank you.", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521997332", "createdAt": "2020-11-12T10:24:52Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +198,35 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  private void compareTypesIgnoringNullability(\n+      RelDataType type1, RelDataType type2, boolean expectedResult) {\n+    String msg = String.format(Locale.ROOT,\n+        \"%s and %s are expected to be %s ignoring nullability.\",\n+        type1.getFullTypeString(),\n+        type2.getFullTypeString(),\n+        expectedResult ? \"equal\" : \"unequal\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2MTg5MQ=="}, "originalCommit": {"oid": "430249fcefd78b1ee877077fcb56adba4270487b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjQ0MzM5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTo1NzoxMVrOHxzFzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDo1NjozMlrOHx1ZJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3OTM0MA==", "bodyText": "This should a parameter to compareTypesIgnoringNullability method.", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521979340", "createdAt": "2020-11-12T09:57:11Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +198,35 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  private void compareTypesIgnoringNullability(\n+      RelDataType type1, RelDataType type2, boolean expectedResult) {\n+    String msg = String.format(Locale.ROOT,\n+        \"%s and %s are expected to be %s ignoring nullability.\",\n+        type1.getFullTypeString(),\n+        type2.getFullTypeString(),\n+        expectedResult ? \"equal\" : \"not equal\");\n+\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(f.typeFactory, type1, type2), is(expectedResult));\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(type1, type2), is(expectedResult));\n+  }\n+\n+  @Test public void testEqualSansNullability() {\n+    RelDataType bigIntType = f.sqlBigInt;\n+    RelDataType nullableBigIntType = f.sqlBigIntNullable;\n+    RelDataType varCharType = f.sqlVarchar;\n+    RelDataType bigIntType1 =\n+        f.typeFactory.createTypeWithNullability(nullableBigIntType, false);\n+\n+    // different types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f5fa02aa3979e3a98a924223108cf7dff19226"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzY5MA==", "bodyText": "I guess you mean the type factory should be a parameter? Revised accordingly. Thanks.", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521997690", "createdAt": "2020-11-12T10:25:21Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +198,35 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  private void compareTypesIgnoringNullability(\n+      RelDataType type1, RelDataType type2, boolean expectedResult) {\n+    String msg = String.format(Locale.ROOT,\n+        \"%s and %s are expected to be %s ignoring nullability.\",\n+        type1.getFullTypeString(),\n+        type2.getFullTypeString(),\n+        expectedResult ? \"equal\" : \"not equal\");\n+\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(f.typeFactory, type1, type2), is(expectedResult));\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(type1, type2), is(expectedResult));\n+  }\n+\n+  @Test public void testEqualSansNullability() {\n+    RelDataType bigIntType = f.sqlBigInt;\n+    RelDataType nullableBigIntType = f.sqlBigIntNullable;\n+    RelDataType varCharType = f.sqlVarchar;\n+    RelDataType bigIntType1 =\n+        f.typeFactory.createTypeWithNullability(nullableBigIntType, false);\n+\n+    // different types", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3OTM0MA=="}, "originalCommit": {"oid": "01f5fa02aa3979e3a98a924223108cf7dff19226"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMTcwOQ==", "bodyText": "I mean different types should be a comment parameter rather than a comment", "url": "https://github.com/apache/calcite/pull/2256#discussion_r522001709", "createdAt": "2020-11-12T10:31:45Z", "author": {"login": "vlsi"}, "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +198,35 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  private void compareTypesIgnoringNullability(\n+      RelDataType type1, RelDataType type2, boolean expectedResult) {\n+    String msg = String.format(Locale.ROOT,\n+        \"%s and %s are expected to be %s ignoring nullability.\",\n+        type1.getFullTypeString(),\n+        type2.getFullTypeString(),\n+        expectedResult ? \"equal\" : \"not equal\");\n+\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(f.typeFactory, type1, type2), is(expectedResult));\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(type1, type2), is(expectedResult));\n+  }\n+\n+  @Test public void testEqualSansNullability() {\n+    RelDataType bigIntType = f.sqlBigInt;\n+    RelDataType nullableBigIntType = f.sqlBigIntNullable;\n+    RelDataType varCharType = f.sqlVarchar;\n+    RelDataType bigIntType1 =\n+        f.typeFactory.createTypeWithNullability(nullableBigIntType, false);\n+\n+    // different types", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3OTM0MA=="}, "originalCommit": {"oid": "01f5fa02aa3979e3a98a924223108cf7dff19226"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxNzA2MQ==", "bodyText": "Revised. Thanks for your clarification.", "url": "https://github.com/apache/calcite/pull/2256#discussion_r522017061", "createdAt": "2020-11-12T10:56:32Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +198,35 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  private void compareTypesIgnoringNullability(\n+      RelDataType type1, RelDataType type2, boolean expectedResult) {\n+    String msg = String.format(Locale.ROOT,\n+        \"%s and %s are expected to be %s ignoring nullability.\",\n+        type1.getFullTypeString(),\n+        type2.getFullTypeString(),\n+        expectedResult ? \"equal\" : \"not equal\");\n+\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(f.typeFactory, type1, type2), is(expectedResult));\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(type1, type2), is(expectedResult));\n+  }\n+\n+  @Test public void testEqualSansNullability() {\n+    RelDataType bigIntType = f.sqlBigInt;\n+    RelDataType nullableBigIntType = f.sqlBigIntNullable;\n+    RelDataType varCharType = f.sqlVarchar;\n+    RelDataType bigIntType1 =\n+        f.typeFactory.createTypeWithNullability(nullableBigIntType, false);\n+\n+    // different types", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3OTM0MA=="}, "originalCommit": {"oid": "01f5fa02aa3979e3a98a924223108cf7dff19226"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 84, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}