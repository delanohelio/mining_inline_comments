{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0NTQxOTUw", "number": 2146, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzoyOTozM1rOEialEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMjowNTo1NVrOEi8FBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTIyNTE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzoyOTozM1rOHQRkVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODoyMjoyMVrOHQTO3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyNzA5NA==", "bodyText": "RelMdUtil#areColumnsDefinitelyUniqueWhenNullsFiltered has different implementation from RelMdUtil#areColumnsDefinitelyUnique. The former one would ignore null while the other one not. Why do you say they have same behavoirs?", "url": "https://github.com/apache/calcite/pull/2146#discussion_r486827094", "createdAt": "2020-09-11T07:29:33Z", "author": {"login": "chunweilei"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java", "diffHunk": "@@ -2064,7 +2064,7 @@ private static boolean areSelfJoinKeysUnique(RelMetadataQuery mq,\n     // are unique.  When removing self-joins, if needed, we'll later add an\n     // IS NOT NULL filter on the join keys that are nullable.  Therefore,\n     // it's ok if there are nulls in the unique key.\n-    return RelMdUtil.areColumnsDefinitelyUniqueWhenNullsFiltered(mq, leftRel,\n+    return RelMdUtil.areColumnsDefinitelyUnique(mq, leftRel,\n         joinInfo.leftSet());\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dddaf5e85a912534f0b069a0f47484aa661b6363"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg1NDM2Nw==", "bodyText": "@chunweilei Thanks a lot for your careful review. They are different indeed.\nHowever, areColumnsDefinitelyUniqueWhenNullsFiltered methods could be implemented in a more efficient way.", "url": "https://github.com/apache/calcite/pull/2146#discussion_r486854367", "createdAt": "2020-09-11T08:22:21Z", "author": {"login": "liyafan82"}, "path": "core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java", "diffHunk": "@@ -2064,7 +2064,7 @@ private static boolean areSelfJoinKeysUnique(RelMetadataQuery mq,\n     // are unique.  When removing self-joins, if needed, we'll later add an\n     // IS NOT NULL filter on the join keys that are nullable.  Therefore,\n     // it's ok if there are nulls in the unique key.\n-    return RelMdUtil.areColumnsDefinitelyUniqueWhenNullsFiltered(mq, leftRel,\n+    return RelMdUtil.areColumnsDefinitelyUnique(mq, leftRel,\n         joinInfo.leftSet());\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyNzA5NA=="}, "originalCommit": {"oid": "dddaf5e85a912534f0b069a0f47484aa661b6363"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDcxMzY3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMjowNTo1NVrOHRBrNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMzowODowMlrOHRCeMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNTI4Ng==", "bodyText": "Could you add a test case which contains null literal?", "url": "https://github.com/apache/calcite/pull/2146#discussion_r487615286", "createdAt": "2020-09-14T02:05:55Z", "author": {"login": "chunweilei"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -918,6 +918,28 @@ private void checkRelSelectivity(\n \n   @Test void testDistinctRowCountTable() {\n     // no unique key information is available so return null\n+    RelNode rel = convertSql(\"select * from (values \"\n+        + \"(1, 2, 3), \"\n+        + \"(3, 4, 5), \"\n+        + \"(3, 4, 5), \"\n+        + \"(8, 4, 5) \"\n+        + \") t(c1, c2, c3)\");\n+    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n+\n+    ImmutableBitSet groupKey = ImmutableBitSet.of(0, 1, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2c0a6ec53fb0e90b8633f1b911b72d7181ff70"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYyODMzNw==", "bodyText": "Sure. Cases for null literals are added. Thanks for your good suggestion.", "url": "https://github.com/apache/calcite/pull/2146#discussion_r487628337", "createdAt": "2020-09-14T03:08:02Z", "author": {"login": "liyafan82"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -918,6 +918,28 @@ private void checkRelSelectivity(\n \n   @Test void testDistinctRowCountTable() {\n     // no unique key information is available so return null\n+    RelNode rel = convertSql(\"select * from (values \"\n+        + \"(1, 2, 3), \"\n+        + \"(3, 4, 5), \"\n+        + \"(3, 4, 5), \"\n+        + \"(8, 4, 5) \"\n+        + \") t(c1, c2, c3)\");\n+    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n+\n+    ImmutableBitSet groupKey = ImmutableBitSet.of(0, 1, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNTI4Ng=="}, "originalCommit": {"oid": "9d2c0a6ec53fb0e90b8633f1b911b72d7181ff70"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 140, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}