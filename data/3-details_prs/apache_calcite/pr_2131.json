{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NjY5NDU1", "number": 2131, "title": "[CALCITE-4208] Improve metadata row count for Join", "bodyText": "Currently, the default metadata row count for join RelMdRowCount#getRowCount(Join rel, RelMetadataQuery mq) relies on RelMdUtil.getJoinRowCount. This method has several issues:\n\nIn case of ANTI join, it returns the same estimation as a SEMI join\nIn other cases (INNER, LEFT, RIGHT, FULL), it returns always the same formula:\nleftRowCount * rightRowCount * mq.getSelectivity(join, condition)\nwhich seems valid for an INNER join, but not for LEFT / RIGHT / FULL.\n\nThe goal of this patch is fixing the ANTI computation and providing a more accurate value for LEFT / RIGHT / FULL.", "createdAt": "2020-09-02T08:48:03Z", "url": "https://github.com/apache/calcite/pull/2131", "merged": true, "mergeCommit": {"oid": "7353fa94bad8d5db48a217799d8c9567c9639a2f"}, "closed": true, "closedAt": "2020-09-05T09:35:33Z", "author": {"login": "rubenada"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFAgKNgFqTQ4MTE2NjY3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFgQM_gBqjM3MjgzOTc2Mzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMTY2Njcx", "url": "https://github.com/apache/calcite/pull/2131#pullrequestreview-481166671", "createdAt": "2020-09-02T18:41:58Z", "commit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0MTo1OVrOHL88Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0MTo1OVrOHL88Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5NDgxOQ==", "bodyText": "(1D - selectivity) * left/right to estimate the number of row,null tuple makes sense (although it relies on a good estimation on selectivity, which usually is a hard engineering problem :-))", "url": "https://github.com/apache/calcite/pull/2131#discussion_r482294819", "createdAt": "2020-09-02T18:41:59Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java", "diffHunk": "@@ -731,19 +734,22 @@ public static Double getJoinRowCount(RelMetadataQuery mq, Join join,\n         return max;\n       }\n     }\n-    double product = left * right;\n-\n-    return product * mq.getSelectivity(join, condition);\n-  }\n \n-  /** Returns an estimate of the number of rows returned by a semi-join. */\n-  public static Double getSemiJoinRowCount(RelMetadataQuery mq, RelNode left,\n-      RelNode right, JoinRelType joinType, RexNode condition) {\n-    final Double leftCount = mq.getRowCount(left);\n-    if (leftCount == null) {\n-      return null;\n+    double product = left * right;\n+    double selectivity = mq.getSelectivity(join, condition);\n+    double innerRowCount = product * selectivity;\n+    switch (join.getJoinType()) {\n+    case INNER:\n+      return innerRowCount;\n+    case LEFT:\n+      return left * (1D - selectivity) + innerRowCount;\n+    case RIGHT:\n+      return right * (1D - selectivity) + innerRowCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMTY4MDk5", "url": "https://github.com/apache/calcite/pull/2131#pullrequestreview-481168099", "createdAt": "2020-09-02T18:44:06Z", "commit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0NDowNlrOHL9Djg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0NDowNlrOHL9Djg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5NjcxOA==", "bodyText": "From the name of I am thinking this test intended to test empty join right? (now it is changed to test left join empty?", "url": "https://github.com/apache/calcite/pull/2131#discussion_r482296718", "createdAt": "2020-09-02T18:44:06Z", "author": {"login": "amaliujia"}, "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -596,11 +596,11 @@ private void checkExchangeRowCount(RelNode rel, double expected, double expected\n   }\n \n   @Test void testRowCountRightJoinEmptyFinite() {\n-    final String sql = \"select * from (select * from emp limit 0) as emp\\n\"\n-        + \"right join (select * from dept limit 4) as dept\\n\"\n+    final String sql = \"select * from (select * from emp limit 4) as emp\\n\"\n+        + \"right join (select * from dept limit 0) as dept\\n\"\n         + \"on emp.deptno = dept.deptno\";\n     checkRowCount(sql, 1D, // 0, rounded up to row count's minimum 1\n-        0D, 4D); // 1 * 4\n+        0D, 0D); // 0 * 4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTYwNzA5", "url": "https://github.com/apache/calcite/pull/2131#pullrequestreview-481560709", "createdAt": "2020-09-03T07:20:52Z", "commit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoyMDo1MlrOHMZXzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoyMDo1MlrOHMZXzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MDY1Mw==", "bodyText": "This would fail with NPE in case selectivity is null", "url": "https://github.com/apache/calcite/pull/2131#discussion_r482760653", "createdAt": "2020-09-03T07:20:52Z", "author": {"login": "vlsi"}, "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java", "diffHunk": "@@ -713,9 +714,11 @@ public static Double getJoinRowCount(RelMetadataQuery mq, Join join,\n       // semijoin filter and pass it to getSelectivity\n       RexNode semiJoinSelectivity =\n           RelMdUtil.makeSemiJoinSelectivityRexNode(mq, join);\n-\n+      Double selectivity = mq.getSelectivity(join.getLeft(), semiJoinSelectivity);\n       return NumberUtil.multiply(\n-          mq.getSelectivity(join.getLeft(), semiJoinSelectivity),\n+          join.getJoinType() == JoinRelType.SEMI\n+              ? selectivity\n+              : 1D - selectivity, // ANTI join", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e815159c5592b54831d25d16b0066131305b9c25"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDQ5OTI1", "url": "https://github.com/apache/calcite/pull/2131#pullrequestreview-482049925", "createdAt": "2020-09-03T17:21:05Z", "commit": {"oid": "77bd083d93f1de7e6cc0fc5945006510f018cfa0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "529c143229893c0072a89d897de43abd6823f66d", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/529c143229893c0072a89d897de43abd6823f66d", "committedDate": "2020-09-04T07:40:54Z", "message": "[CALCITE-4208] Improve metadata row count for Join"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77bd083d93f1de7e6cc0fc5945006510f018cfa0", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/77bd083d93f1de7e6cc0fc5945006510f018cfa0", "committedDate": "2020-09-03T07:39:55Z", "message": "[CALCITE-4208] Improve metadata row count for Join"}, "afterCommit": {"oid": "529c143229893c0072a89d897de43abd6823f66d", "author": {"user": {"login": "rubenada", "name": null}}, "url": "https://github.com/apache/calcite/commit/529c143229893c0072a89d897de43abd6823f66d", "committedDate": "2020-09-04T07:40:54Z", "message": "[CALCITE-4208] Improve metadata row count for Join"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3289, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}