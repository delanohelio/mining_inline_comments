{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwODk4NzQ4", "number": 2164, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowNTo0OVrOEmt95A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjoxODoxNVrOEm2TDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDM0NDY4OnYy", "diffSide": "LEFT", "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowNTo0OVrOHW6dIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjoxMzowNlrOHXHRFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4ODQ0OA==", "bodyText": "Seems like you have changed this test which intended to test whether the first augment is named param is ok? If so can you change it back?", "url": "https://github.com/apache/calcite/pull/2164#discussion_r493788448", "createdAt": "2020-09-23T18:05:49Z", "author": {"login": "amaliujia"}, "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "diffHunk": "@@ -10512,41 +10515,47 @@ private void checkCustomColumnResolving(String table) {\n         + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n         .ok();\n-    // negative tests.\n     sql(\"select * from table(\\n\"\n         + \"session(\\n\"\n-        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"data => table orders,\\n\"\n         + \"timecol => descriptor(rowtime),\\n\"\n-        + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n-        .fails(\"Param 'data' not found in function 'SESSION'; did you mean 'DATA'\\\\?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5Mzg2OA==", "bodyText": "The test you mentioned is at L10534, I just add some new tests.", "url": "https://github.com/apache/calcite/pull/2164#discussion_r493993868", "createdAt": "2020-09-24T01:55:21Z", "author": {"login": "liupc"}, "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "diffHunk": "@@ -10512,41 +10515,47 @@ private void checkCustomColumnResolving(String table) {\n         + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n         .ok();\n-    // negative tests.\n     sql(\"select * from table(\\n\"\n         + \"session(\\n\"\n-        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"data => table orders,\\n\"\n         + \"timecol => descriptor(rowtime),\\n\"\n-        + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n-        .fails(\"Param 'data' not found in function 'SESSION'; did you mean 'DATA'\\\\?\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4ODQ0OA=="}, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5ODM1OA==", "bodyText": "Got it. Thanks!", "url": "https://github.com/apache/calcite/pull/2164#discussion_r493998358", "createdAt": "2020-09-24T02:13:06Z", "author": {"login": "amaliujia"}, "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "diffHunk": "@@ -10512,41 +10515,47 @@ private void checkCustomColumnResolving(String table) {\n         + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n         .ok();\n-    // negative tests.\n     sql(\"select * from table(\\n\"\n         + \"session(\\n\"\n-        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"data => table orders,\\n\"\n         + \"timecol => descriptor(rowtime),\\n\"\n-        + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n-        .fails(\"Param 'data' not found in function 'SESSION'; did you mean 'DATA'\\\\?\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4ODQ0OA=="}, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDM0ODAyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowNjo1MVrOHW6fUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjoxMzo0MlrOHXHRnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4OTAxMQ==", "bodyText": "One thing I am not sure is, does current Calcite named argument has an ordering requirement? Will Calcite accept if key/timecol is reordered?", "url": "https://github.com/apache/calcite/pull/2164#discussion_r493789011", "createdAt": "2020-09-23T18:06:51Z", "author": {"login": "amaliujia"}, "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "diffHunk": "@@ -10512,41 +10515,47 @@ private void checkCustomColumnResolving(String table) {\n         + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n         .ok();\n-    // negative tests.\n     sql(\"select * from table(\\n\"\n         + \"session(\\n\"\n-        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"data => table orders,\\n\"\n         + \"timecol => descriptor(rowtime),\\n\"\n-        + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n-        .fails(\"Param 'data' not found in function 'SESSION'; did you mean 'DATA'\\\\?\");\n+        .ok();\n+    // negative tests.\n     sql(\"select * from table(\\n\"\n         + \"^session(\\n\"\n         + \"data => table orders,\\n\"\n         + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour)^)\")\n-        .fails(\"Invalid number of arguments to function 'SESSION'. Was expecting 4 arguments\");\n+        .fails(\"Cannot apply 'SESSION' to arguments of type 'SESSION\\\\(<RECORDTYPE\\\\(TIMESTAMP\\\\(\"\n+            + \"0\\\\) ROWTIME, INTEGER PRODUCTID, INTEGER ORDERID\\\\)>, <COLUMN_LIST>, \"\n+            + \"<INTERVAL HOUR>\\\\)'. Supported form\\\\(s\\\\): SESSION\\\\(TABLE table_name, DESCRIPTOR\\\\(\"\n+            + \"timecol\\\\), DESCRIPTOR\\\\(key\\\\) optional, datetime interval\\\\)\");\n     sql(\"select * from table(\\n\"\n-        + \"^session(table orders, descriptor(rowtime), interval '2' hour)^)\")\n-        .fails(\"Invalid number of arguments to function 'SESSION'. Was expecting 4 arguments\");\n+        + \"session(\\n\"\n+        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"timecol => descriptor(rowtime),\\n\"\n+        + \"key => descriptor(productid),\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5NDYyOQ==", "bodyText": "Yes, Calcite will permute the operands before checking if it's a SqlArgumentAssignmentOperator, so here is ok.", "url": "https://github.com/apache/calcite/pull/2164#discussion_r493994629", "createdAt": "2020-09-24T01:58:28Z", "author": {"login": "liupc"}, "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "diffHunk": "@@ -10512,41 +10515,47 @@ private void checkCustomColumnResolving(String table) {\n         + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n         .ok();\n-    // negative tests.\n     sql(\"select * from table(\\n\"\n         + \"session(\\n\"\n-        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"data => table orders,\\n\"\n         + \"timecol => descriptor(rowtime),\\n\"\n-        + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n-        .fails(\"Param 'data' not found in function 'SESSION'; did you mean 'DATA'\\\\?\");\n+        .ok();\n+    // negative tests.\n     sql(\"select * from table(\\n\"\n         + \"^session(\\n\"\n         + \"data => table orders,\\n\"\n         + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour)^)\")\n-        .fails(\"Invalid number of arguments to function 'SESSION'. Was expecting 4 arguments\");\n+        .fails(\"Cannot apply 'SESSION' to arguments of type 'SESSION\\\\(<RECORDTYPE\\\\(TIMESTAMP\\\\(\"\n+            + \"0\\\\) ROWTIME, INTEGER PRODUCTID, INTEGER ORDERID\\\\)>, <COLUMN_LIST>, \"\n+            + \"<INTERVAL HOUR>\\\\)'. Supported form\\\\(s\\\\): SESSION\\\\(TABLE table_name, DESCRIPTOR\\\\(\"\n+            + \"timecol\\\\), DESCRIPTOR\\\\(key\\\\) optional, datetime interval\\\\)\");\n     sql(\"select * from table(\\n\"\n-        + \"^session(table orders, descriptor(rowtime), interval '2' hour)^)\")\n-        .fails(\"Invalid number of arguments to function 'SESSION'. Was expecting 4 arguments\");\n+        + \"session(\\n\"\n+        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"timecol => descriptor(rowtime),\\n\"\n+        + \"key => descriptor(productid),\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4OTAxMQ=="}, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5ODQ5Mg==", "bodyText": "Thanks for the clarification.", "url": "https://github.com/apache/calcite/pull/2164#discussion_r493998492", "createdAt": "2020-09-24T02:13:42Z", "author": {"login": "amaliujia"}, "path": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java", "diffHunk": "@@ -10512,41 +10515,47 @@ private void checkCustomColumnResolving(String table) {\n         + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n         .ok();\n-    // negative tests.\n     sql(\"select * from table(\\n\"\n         + \"session(\\n\"\n-        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"data => table orders,\\n\"\n         + \"timecol => descriptor(rowtime),\\n\"\n-        + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour))\")\n-        .fails(\"Param 'data' not found in function 'SESSION'; did you mean 'DATA'\\\\?\");\n+        .ok();\n+    // negative tests.\n     sql(\"select * from table(\\n\"\n         + \"^session(\\n\"\n         + \"data => table orders,\\n\"\n         + \"key => descriptor(productid),\\n\"\n         + \"size => interval '1' hour)^)\")\n-        .fails(\"Invalid number of arguments to function 'SESSION'. Was expecting 4 arguments\");\n+        .fails(\"Cannot apply 'SESSION' to arguments of type 'SESSION\\\\(<RECORDTYPE\\\\(TIMESTAMP\\\\(\"\n+            + \"0\\\\) ROWTIME, INTEGER PRODUCTID, INTEGER ORDERID\\\\)>, <COLUMN_LIST>, \"\n+            + \"<INTERVAL HOUR>\\\\)'. Supported form\\\\(s\\\\): SESSION\\\\(TABLE table_name, DESCRIPTOR\\\\(\"\n+            + \"timecol\\\\), DESCRIPTOR\\\\(key\\\\) optional, datetime interval\\\\)\");\n     sql(\"select * from table(\\n\"\n-        + \"^session(table orders, descriptor(rowtime), interval '2' hour)^)\")\n-        .fails(\"Invalid number of arguments to function 'SESSION'. Was expecting 4 arguments\");\n+        + \"session(\\n\"\n+        + \"^\\\"data\\\"^ => table orders,\\n\"\n+        + \"timecol => descriptor(rowtime),\\n\"\n+        + \"key => descriptor(productid),\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4OTAxMQ=="}, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDM1MjY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlHopTableFunction.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowODoxN1rOHW6iYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo1NjowNFrOHX9HtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4OTc5Mg==", "bodyText": "Why need this addition (as this PR is to change SESSION)? is there a test case verify this line of change?", "url": "https://github.com/apache/calcite/pull/2164#discussion_r493789792", "createdAt": "2020-09-23T18:08:17Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlHopTableFunction.java", "diffHunk": "@@ -48,6 +48,9 @@ public SqlHopTableFunction() {\n       if (!checkTableAndDescriptorOperands(callBinding, 1)) {\n         return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n       }\n+      if (!checkTimeColumnDescriptorOperand(callBinding, 1)) {\n+        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5NzIzNA==", "bodyText": "For TUMBLE/HOP table function, the descriptor must refer to a time column, I just add this check by the way.\ncurrently, there are no tests to verify this change, but If it's ok to do it in this PR, I can add some tests for it.\nOr maybe we can put it in another PR? what's your idea?", "url": "https://github.com/apache/calcite/pull/2164#discussion_r493997234", "createdAt": "2020-09-24T02:08:34Z", "author": {"login": "liupc"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlHopTableFunction.java", "diffHunk": "@@ -48,6 +48,9 @@ public SqlHopTableFunction() {\n       if (!checkTableAndDescriptorOperands(callBinding, 1)) {\n         return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n       }\n+      if (!checkTimeColumnDescriptorOperand(callBinding, 1)) {\n+        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4OTc5Mg=="}, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5Nzk4Nw==", "bodyText": "I see. Please add tests to this PR (for both TUMBLE and HOP) and we can merge it together.", "url": "https://github.com/apache/calcite/pull/2164#discussion_r493997987", "createdAt": "2020-09-24T02:11:40Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlHopTableFunction.java", "diffHunk": "@@ -48,6 +48,9 @@ public SqlHopTableFunction() {\n       if (!checkTableAndDescriptorOperands(callBinding, 1)) {\n         return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n       }\n+      if (!checkTimeColumnDescriptorOperand(callBinding, 1)) {\n+        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4OTc5Mg=="}, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MDY5Mg==", "bodyText": "Done", "url": "https://github.com/apache/calcite/pull/2164#discussion_r494880692", "createdAt": "2020-09-25T09:56:04Z", "author": {"login": "liupc"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlHopTableFunction.java", "diffHunk": "@@ -48,6 +48,9 @@ public SqlHopTableFunction() {\n       if (!checkTableAndDescriptorOperands(callBinding, 1)) {\n         return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n       }\n+      if (!checkTimeColumnDescriptorOperand(callBinding, 1)) {\n+        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4OTc5Mg=="}, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTcwOTU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/calcite/sql/SqlSessionTableFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjoxODoxNlrOHXHWCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjoyMDoyMFrOHXHYFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5OTYyNA==", "bodyText": "In fact, as I recall checkTableAndDescriptorOperands will check whether the second argument is a descriptor, so this line might not be needed.", "url": "https://github.com/apache/calcite/pull/2164#discussion_r493999624", "createdAt": "2020-09-24T02:18:16Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlSessionTableFunction.java", "diffHunk": "@@ -42,25 +43,41 @@ public SqlSessionTableFunction() {\n   private static class OperandMetadataImpl extends AbstractOperandMetadata {\n     OperandMetadataImpl() {\n       super(ImmutableList.of(PARAM_DATA, PARAM_TIMECOL, PARAM_KEY, PARAM_SIZE),\n-          4);\n+          3);\n     }\n \n     @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n         boolean throwOnFailure) {\n-      final SqlValidator validator = callBinding.getValidator();\n-      if (!checkTableAndDescriptorOperands(callBinding, 2)) {\n+      if (!checkTableAndDescriptorOperands(callBinding, 1)) {\n+        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n+      }\n+      if (!checkTimeColumnDescriptorOperand(callBinding, 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMDE0OQ==", "bodyText": "Never mind. checkTimeColumnDescriptorOperand added a check for TIMESTAMP type for the one specified by DESCRIPTOR. We can keep this function here.", "url": "https://github.com/apache/calcite/pull/2164#discussion_r494000149", "createdAt": "2020-09-24T02:20:20Z", "author": {"login": "amaliujia"}, "path": "core/src/main/java/org/apache/calcite/sql/SqlSessionTableFunction.java", "diffHunk": "@@ -42,25 +43,41 @@ public SqlSessionTableFunction() {\n   private static class OperandMetadataImpl extends AbstractOperandMetadata {\n     OperandMetadataImpl() {\n       super(ImmutableList.of(PARAM_DATA, PARAM_TIMECOL, PARAM_KEY, PARAM_SIZE),\n-          4);\n+          3);\n     }\n \n     @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n         boolean throwOnFailure) {\n-      final SqlValidator validator = callBinding.getValidator();\n-      if (!checkTableAndDescriptorOperands(callBinding, 2)) {\n+      if (!checkTableAndDescriptorOperands(callBinding, 1)) {\n+        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n+      }\n+      if (!checkTimeColumnDescriptorOperand(callBinding, 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5OTYyNA=="}, "originalCommit": {"oid": "960b89ea868ca3180b3163c3bfd35be3f7676ab2"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 26, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}