{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMjc4NDY0", "number": 2245, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODowNTozMFrOEdVNxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODowNTozMFrOEdVNxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTkxNzQ5OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODowNTozMFrOHIbjiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToyMzoxMlrOHIeFTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwMjEyMA==", "bodyText": "I'm thinking of the same problem of the same method signature when potential Hadoop 2 code calling reloginFromKeytab(false) upgrades to Hadoop 3. Because of the same method name and a bool parameter, users most likely will not notice the parameter value is for different meanings: in Hadoop 2 here, the bool parameter is for ignoreTimeElapsed where in Hadoop 3 it is actually for checkTGT.\nSo is it better to:\n\nMake this new API public synchronized void reloginFromKeytab(boolean ignoreTimeElapsed) private\nAND we also add the new API as in Hadoop 3: public void forceReloginFromKeytab().\n\nThat way, the application code which forces login will have the same code between Hadoop 2 and 3. And the other new API reloginFromKeytab(boolean) is private in UGI both in Hadoop 2 and 3.", "url": "https://github.com/apache/hadoop/pull/2245#discussion_r478602120", "createdAt": "2020-08-27T18:05:30Z", "author": {"login": "liuml07"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java", "diffHunk": "@@ -1215,23 +1215,43 @@ private void fixKerberosTicketOrder() {\n    * Re-Login a user in from a keytab file. Loads a user identity from a keytab\n    * file and logs them in. They become the currently logged-in user. This\n    * method assumes that {@link #loginUserFromKeytab(String, String)} had\n-   * happened already.\n-   * The Subject field of this UserGroupInformation object is updated to have\n-   * the new credentials.\n+   * happened already. The Subject field of this UserGroupInformation object is\n+   * updated to have the new credentials.\n+   *\n    * @throws IOException\n    * @throws KerberosAuthException on a failure\n    */\n   @InterfaceAudience.Public\n   @InterfaceStability.Evolving\n   public synchronized void reloginFromKeytab() throws IOException {\n+    reloginFromKeytab(false);\n+  }\n+\n+  /**\n+   * Force re-Login a user in from a keytab file. Loads a user identity from a\n+   * keytab file and logs them in. They become the currently logged-in user.\n+   * This method assumes that {@link #loginUserFromKeytab(String, String)} had\n+   * happened already. The Subject field of this UserGroupInformation object is\n+   * updated to have the new credentials.\n+   *\n+   * @param ignoreTimeElapsed Force re-login irrespective of the time of last\n+   *                          login\n+   * @throws IOException\n+   * @throws KerberosAuthException on a failure\n+   */\n+  @InterfaceAudience.Public\n+  @InterfaceStability.Evolving\n+  public synchronized void reloginFromKeytab(boolean ignoreTimeElapsed)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23654b10dd8ac71a1bd01c05b60f2b24011aaebe"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY0MzUzMw==", "bodyText": "@liuml07 Yes it makes sense to keep the code consistent for the callers to avoid such issues with a upgrade", "url": "https://github.com/apache/hadoop/pull/2245#discussion_r478643533", "createdAt": "2020-08-27T19:23:12Z", "author": {"login": "sguggilam"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java", "diffHunk": "@@ -1215,23 +1215,43 @@ private void fixKerberosTicketOrder() {\n    * Re-Login a user in from a keytab file. Loads a user identity from a keytab\n    * file and logs them in. They become the currently logged-in user. This\n    * method assumes that {@link #loginUserFromKeytab(String, String)} had\n-   * happened already.\n-   * The Subject field of this UserGroupInformation object is updated to have\n-   * the new credentials.\n+   * happened already. The Subject field of this UserGroupInformation object is\n+   * updated to have the new credentials.\n+   *\n    * @throws IOException\n    * @throws KerberosAuthException on a failure\n    */\n   @InterfaceAudience.Public\n   @InterfaceStability.Evolving\n   public synchronized void reloginFromKeytab() throws IOException {\n+    reloginFromKeytab(false);\n+  }\n+\n+  /**\n+   * Force re-Login a user in from a keytab file. Loads a user identity from a\n+   * keytab file and logs them in. They become the currently logged-in user.\n+   * This method assumes that {@link #loginUserFromKeytab(String, String)} had\n+   * happened already. The Subject field of this UserGroupInformation object is\n+   * updated to have the new credentials.\n+   *\n+   * @param ignoreTimeElapsed Force re-login irrespective of the time of last\n+   *                          login\n+   * @throws IOException\n+   * @throws KerberosAuthException on a failure\n+   */\n+  @InterfaceAudience.Public\n+  @InterfaceStability.Evolving\n+  public synchronized void reloginFromKeytab(boolean ignoreTimeElapsed)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwMjEyMA=="}, "originalCommit": {"oid": "23654b10dd8ac71a1bd01c05b60f2b24011aaebe"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3402, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}