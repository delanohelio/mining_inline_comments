{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzk4Nzgy", "number": 1915, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDowNTowMVrODrYL8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjozNjoyN1rODrbLdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODExNjMyOnYy", "diffSide": "RIGHT", "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/DefaultNoHARMFailoverProxyProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDowNTowMVrOF7sOCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDoxMTowN1rOF7sa_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzNDc5NQ==", "bodyText": "Avoid this change.", "url": "https://github.com/apache/hadoop/pull/1915#discussion_r398134795", "createdAt": "2020-03-25T20:05:01Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/DefaultNoHARMFailoverProxyProvider.java", "diffHunk": "@@ -95,4 +95,4 @@ public void performFailover(T currentProxy) {\n   public void close() throws IOException {\n     RPC.stopProxy(proxy);\n   }\n-}\n\\ No newline at end of file\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a258271e6256e674760344cda0e1126b55de0a8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzODEwOQ==", "bodyText": "Reverted", "url": "https://github.com/apache/hadoop/pull/1915#discussion_r398138109", "createdAt": "2020-03-25T20:11:07Z", "author": {"login": "RogPodge"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/DefaultNoHARMFailoverProxyProvider.java", "diffHunk": "@@ -95,4 +95,4 @@ public void performFailover(T currentProxy) {\n   public void close() throws IOException {\n     RPC.stopProxy(proxy);\n   }\n-}\n\\ No newline at end of file\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzNDc5NQ=="}, "originalCommit": {"oid": "1a258271e6256e674760344cda0e1126b55de0a8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODYwNTMwOnYy", "diffSide": "RIGHT", "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/TestNoHaRMFailoverProxyProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjozNTo1N1rOF7w9pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjozNTo1N1rOF7w9pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxMjUxNw==", "bodyText": "It looks likes Yetus is complaining about this:\nerror: Proxy(InvocationHandler) has protected", "url": "https://github.com/apache/hadoop/pull/1915#discussion_r398212517", "createdAt": "2020-03-25T22:35:57Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/TestNoHaRMFailoverProxyProvider.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.yarn.client;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.io.retry.FailoverProxyProvider;\n+import org.apache.hadoop.yarn.api.ApplicationClientProtocol;\n+import org.apache.hadoop.yarn.api.records.NodeReport;\n+import org.apache.hadoop.yarn.client.api.YarnClient;\n+import org.apache.hadoop.yarn.conf.YarnConfiguration;\n+import org.apache.hadoop.yarn.exceptions.YarnException;\n+import org.apache.hadoop.yarn.server.MiniYARNCluster;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Proxy;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Unit tests for {@link DefaultNoHARMFailoverProxyProvider} and\n+ * {@link AutoRefreshNoHARMFailoverProxyProvider}.\n+ */\n+public class TestNoHaRMFailoverProxyProvider {\n+\n+  // Default port of yarn RM\n+  private static final int RM1_PORT = 8032;\n+  private static final int RM2_PORT = 8031;\n+\n+  private static final int NUMNODEMANAGERS = 1;\n+  private Configuration conf;\n+\n+  @Before\n+  public void setUp() throws IOException, YarnException {\n+    conf = new YarnConfiguration();\n+  }\n+\n+  /**\n+   * Tests the proxy generated by {@link DefaultNoHAFailoverProxyProvider}\n+   * will connect to RM.\n+   */\n+  @Test\n+  public void testRestartedRM() throws Exception {\n+    MiniYARNCluster cluster =\n+        new MiniYARNCluster(\"testRestartedRMNegative\", NUMNODEMANAGERS, 1, 1);\n+    YarnClient rmClient = YarnClient.createYarnClient();\n+    try {\n+      cluster.init(conf);\n+      cluster.start();\n+      final Configuration yarnConf = cluster.getConfig();\n+      rmClient = YarnClient.createYarnClient();\n+      rmClient.init(yarnConf);\n+      rmClient.start();\n+      List <NodeReport> nodeReports = rmClient.getNodeReports();\n+      assertEquals(\n+          \"The proxy didn't get expected number of node reports\",\n+          NUMNODEMANAGERS, nodeReports.size());\n+    } finally {\n+      if (rmClient != null) {\n+        rmClient.stop();\n+      }\n+      cluster.stop();\n+    }\n+  }\n+\n+  /**\n+   * Tests the proxy generated by\n+   * {@link AutoRefreshNoHARMFailoverProxyProvider} will connect to RM.\n+   */\n+  @Test\n+  public void testConnectingToRM() throws Exception {\n+    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_NO_HA_PROXY_PROVIDER,\n+        AutoRefreshNoHARMFailoverProxyProvider.class,\n+        RMFailoverProxyProvider.class);\n+    MiniYARNCluster cluster =\n+        new MiniYARNCluster(\"testRestartedRMNegative\", NUMNODEMANAGERS, 1, 1);\n+    YarnClient rmClient = null;\n+    try {\n+      cluster.init(conf);\n+      cluster.start();\n+      final Configuration yarnConf = cluster.getConfig();\n+      rmClient = YarnClient.createYarnClient();\n+      rmClient.init(yarnConf);\n+      rmClient.start();\n+      List <NodeReport> nodeReports = rmClient.getNodeReports();\n+      assertEquals(\n+          \"The proxy didn't get expected number of node reports\",\n+          NUMNODEMANAGERS, nodeReports.size());\n+    } finally {\n+      if (rmClient != null) {\n+        rmClient.stop();\n+      }\n+      cluster.stop();\n+    }\n+  }\n+\n+  /**\n+   * Test that the {@link DefaultNoHARMFailoverProxyProvider}\n+   * will generate different proxies after RM IP changed\n+   * and {@link DefaultNoHARMFailoverProxyProvider#performFailover(Object)}\n+   * get called.\n+   */\n+  @Test\n+  public void testDefaultFPPGetOneProxy() throws Exception {\n+    // Create a proxy and mock a RMProxy\n+    Proxy mockProxy1 = new TestProxy((proxy, method, args) -> null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe748369c80af6d472bf4e197bcc54c2ca9cb873"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODYwNjYyOnYy", "diffSide": "RIGHT", "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/TestRMFailoverProxyProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjozNjoyN1rOF7w-dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjozNjoyN1rOF7w-dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxMjcyNw==", "bodyText": "Yetus complains here:\nerror: Proxy(InvocationHandler) has protected", "url": "https://github.com/apache/hadoop/pull/1915#discussion_r398212727", "createdAt": "2020-03-25T22:36:27Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/TestRMFailoverProxyProvider.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.yarn.client;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.io.retry.FailoverProxyProvider;\n+import org.apache.hadoop.yarn.api.ApplicationClientProtocol;\n+import org.apache.hadoop.yarn.conf.YarnConfiguration;\n+import org.apache.hadoop.yarn.exceptions.YarnException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Proxy;\n+import java.net.InetSocketAddress;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Unit tests for {@link ConfiguredRMFailoverProxyProvider} and\n+ * {@link AutoRefreshRMFailoverProxyProvider}.\n+ */\n+public class TestRMFailoverProxyProvider {\n+\n+  // Default port of yarn RM\n+  private static final int RM1_PORT = 8032;\n+  private static final int RM2_PORT = 8031;\n+  private static final int RM3_PORT = 8033;\n+\n+  private Configuration conf;\n+\n+  @Before\n+  public void setUp() throws IOException, YarnException {\n+    conf = new YarnConfiguration();\n+    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_NO_HA_PROXY_PROVIDER,\n+        ConfiguredRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n+    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\n+  }\n+\n+  /**\n+   * Test that the {@link ConfiguredRMFailoverProxyProvider}\n+   * will loop through its set of proxies when\n+   * and {@link ConfiguredRMFailoverProxyProvider#performFailover(Object)}\n+   * gets called.\n+   */\n+  @Test\n+  public void testFailoverChange() throws Exception {\n+    //Adjusting the YARN Conf\n+    conf.set(YarnConfiguration.RM_HA_IDS, \"rm0, rm1\");\n+\n+    // Create two proxies and mock a RMProxy\n+    Proxy mockProxy2 = new TestProxy((proxy, method, args) -> null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe748369c80af6d472bf4e197bcc54c2ca9cb873"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3636, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}