{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxODUzOTUy", "number": 2110, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1MTo0N1rOEKIrXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTo1MDoxMVrOEKwP8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDYzMzg4OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1MTo0N1rOGrAPww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMTo0MDozM1rOGrT9-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NTk4Nw==", "bodyText": "is it necessary to import static?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447745987", "createdAt": "2020-06-30T14:51:47Z", "author": {"login": "Hexiaoqiao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -34,6 +38,8 @@\n import org.apache.hadoop.classification.InterfaceAudience;\n import org.apache.hadoop.classification.InterfaceStability;\n import org.apache.hadoop.io.Text;\n+import static org.apache.hadoop.metrics2.util.Metrics2Util.NameValuePair;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NjI0MQ==", "bodyText": "Inigo told me once about it and I think it can have the usage of member variables easier and cleaner.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447986241", "createdAt": "2020-06-30T21:20:56Z", "author": {"login": "fengnanli"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -34,6 +38,8 @@\n import org.apache.hadoop.classification.InterfaceAudience;\n import org.apache.hadoop.classification.InterfaceStability;\n import org.apache.hadoop.io.Text;\n+import static org.apache.hadoop.metrics2.util.Metrics2Util.NameValuePair;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NTk4Nw=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwNDc0Mw==", "bodyText": "If the method/class is very obvious like assertTrue(), it usually makes sense to do a static import.\nIn this case, I guess is fine either way.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448004743", "createdAt": "2020-06-30T22:02:19Z", "author": {"login": "goiri"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -34,6 +38,8 @@\n import org.apache.hadoop.classification.InterfaceAudience;\n import org.apache.hadoop.classification.InterfaceStability;\n import org.apache.hadoop.io.Text;\n+import static org.apache.hadoop.metrics2.util.Metrics2Util.NameValuePair;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NTk4Nw=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2OTExNQ==", "bodyText": "Not always the case but I'd say this is fine.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448069115", "createdAt": "2020-07-01T01:40:33Z", "author": {"login": "goiri"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -34,6 +38,8 @@\n import org.apache.hadoop.classification.InterfaceAudience;\n import org.apache.hadoop.classification.InterfaceStability;\n import org.apache.hadoop.io.Text;\n+import static org.apache.hadoop.metrics2.util.Metrics2Util.NameValuePair;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NTk4Nw=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDY0NDc5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RBFConfigKeys.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1Mzo1MFrOGrAWbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyNToyNlrOGrPDAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NzY5Mw==", "bodyText": "we need to define this new configure item at hdfs-rbf-default.xml.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447747693", "createdAt": "2020-06-30T14:53:50Z", "author": {"login": "Hexiaoqiao"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RBFConfigKeys.java", "diffHunk": "@@ -79,6 +79,10 @@\n   public static final Class<? extends RouterRpcMonitor>\n       DFS_ROUTER_METRICS_CLASS_DEFAULT =\n       FederationRPCPerformanceMonitor.class;\n+  public static final String DFS_ROUTER_METRICS_TOP_NUM_TOKEN_OWNERS_KEY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTc5NA==", "bodyText": "not sure if there is a metrics.md page for RBF - if so we should add there too.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447965794", "createdAt": "2020-06-30T20:41:17Z", "author": {"login": "sunchao"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RBFConfigKeys.java", "diffHunk": "@@ -79,6 +79,10 @@\n   public static final Class<? extends RouterRpcMonitor>\n       DFS_ROUTER_METRICS_CLASS_DEFAULT =\n       FederationRPCPerformanceMonitor.class;\n+  public static final String DFS_ROUTER_METRICS_TOP_NUM_TOKEN_OWNERS_KEY =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NzY5Mw=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4ODQ4Mw==", "bodyText": "Sure. I will add it here: https://github.com/apache/hadoop/blob/trunk/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/resources/hdfs-rbf-default.xml", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447988483", "createdAt": "2020-06-30T21:25:26Z", "author": {"login": "fengnanli"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RBFConfigKeys.java", "diffHunk": "@@ -79,6 +79,10 @@\n   public static final Class<? extends RouterRpcMonitor>\n       DFS_ROUTER_METRICS_CLASS_DEFAULT =\n       FederationRPCPerformanceMonitor.class;\n+  public static final String DFS_ROUTER_METRICS_TOP_NUM_TOKEN_OWNERS_KEY =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NzY5Mw=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDY1MjkxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/TestRouterSecurityManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1NToyMFrOGrAbWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyNTozN1rOGrPDUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0ODk1Mg==", "bodyText": "just suggest to replace with single class imports.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447748952", "createdAt": "2020-06-30T14:55:20Z", "author": {"login": "Hexiaoqiao"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/TestRouterSecurityManager.java", "diffHunk": "@@ -39,6 +39,7 @@\n import org.junit.Rule;\n import org.junit.Test;\n \n+import static org.apache.hadoop.metrics2.util.Metrics2Util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4ODU2Mw==", "bodyText": "Sure", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447988563", "createdAt": "2020-06-30T21:25:37Z", "author": {"login": "fengnanli"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/TestRouterSecurityManager.java", "diffHunk": "@@ -39,6 +39,7 @@\n import org.junit.Rule;\n import org.junit.Test;\n \n+import static org.apache.hadoop.metrics2.util.Metrics2Util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0ODk1Mg=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjAyNjQyOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MDowMlrOGrNnhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNjowM1rOGrR-YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTA2MQ==", "bodyText": "will this get pretty expensive if there are lots of tokens stored? as every metrics pull needs to iterate through all tokens.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447965061", "createdAt": "2020-06-30T20:40:02Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +732,41 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5MzMzMQ==", "bodyText": "I had similar thoughts as well but didn't come up with a better way. In namenode TopN metrics, it is doing so as well just at a lower frequency like every 5/15/25 minutes. We can potentially do that by reducing the metric reporting frequency.\nI also checked modern CPU for looping over 1M, which takes about 1ms-10ms.\nAnother one would be to maintain a data structure to dynamically maintain the ordering of users and edit ordering per getdelegationtoken and per canceldelegationtoken like stream processing. I am not sure about the cost overall since in reality we generally have < 1 Million tokens.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447993331", "createdAt": "2020-06-30T21:36:07Z", "author": {"login": "fengnanli"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +732,41 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTA2MQ=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyMDc3MA==", "bodyText": "Can we update the TopN queue when creating/deleting tokens? we are just paying an extra constant cost for updating that which I think is fine. Even though it is using concurrent hashmap, I'm not sure how much performance impact will be if one thread is iterating over the key set while others want to updating the map.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448020770", "createdAt": "2020-06-30T22:46:44Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +732,41 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTA2MQ=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjQ0OA==", "bodyText": "I am fine with it. We also need to add an initialization step to make sure this structure has the initial information from currentTokens.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448036448", "createdAt": "2020-06-30T23:36:03Z", "author": {"login": "fengnanli"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +732,41 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTA2MQ=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjAyNzcxOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MDoyN1rOGrNoWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo1MTo1NVrOGrRH9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTI3NQ==", "bodyText": "any reason to use LinkedList instead of ArrayList? the latter is usually more performant.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447965275", "createdAt": "2020-06-30T20:40:27Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +732,41 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    Map<String, Integer> tokenOwnerMap = new HashMap<>();\n+    for (TokenIdent id : currentTokens.keySet()) {\n+      String realUser;\n+      if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+        realUser = id.getRealUser().toString();\n+      } else {\n+        // if there is no real user -> this is a non proxy user\n+        // the user itself is the real owner\n+        realUser = id.getUser().getUserName();\n+      }\n+      tokenOwnerMap.put(realUser, tokenOwnerMap.getOrDefault(realUser, 0)+1);\n+    }\n+    n = Math.min(n, tokenOwnerMap.size());\n+    if (n == 0) {\n+      return new LinkedList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Integer> entry : tokenOwnerMap.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5MzgyNA==", "bodyText": "There is a reverse op and I think reverse linked list is faster without additional space.\nNot sure how java implement the reverse array list, but I think it will introduce copy and reassign.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447993824", "createdAt": "2020-06-30T21:37:11Z", "author": {"login": "fengnanli"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +732,41 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    Map<String, Integer> tokenOwnerMap = new HashMap<>();\n+    for (TokenIdent id : currentTokens.keySet()) {\n+      String realUser;\n+      if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+        realUser = id.getRealUser().toString();\n+      } else {\n+        // if there is no real user -> this is a non proxy user\n+        // the user itself is the real owner\n+        realUser = id.getUser().getUserName();\n+      }\n+      tokenOwnerMap.put(realUser, tokenOwnerMap.getOrDefault(realUser, 0)+1);\n+    }\n+    n = Math.min(n, tokenOwnerMap.size());\n+    if (n == 0) {\n+      return new LinkedList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Integer> entry : tokenOwnerMap.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTI3NQ=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyMjUxOA==", "bodyText": "Reverse shouldn't need extra space - it uses two indexes from begin and end of the array and swaps elements. I don't see real difference between the two for the reverse.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448022518", "createdAt": "2020-06-30T22:51:55Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +732,41 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    Map<String, Integer> tokenOwnerMap = new HashMap<>();\n+    for (TokenIdent id : currentTokens.keySet()) {\n+      String realUser;\n+      if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+        realUser = id.getRealUser().toString();\n+      } else {\n+        // if there is no real user -> this is a non proxy user\n+        // the user itself is the real owner\n+        realUser = id.getUser().getUserName();\n+      }\n+      tokenOwnerMap.put(realUser, tokenOwnerMap.getOrDefault(realUser, 0)+1);\n+    }\n+    n = Math.min(n, tokenOwnerMap.size());\n+    if (n == 0) {\n+      return new LinkedList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Integer> entry : tokenOwnerMap.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTI3NQ=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjAzMTkxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/TestRouterSecurityManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MTozM1rOGrNq7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTozNzo0NVrOGrPY4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTkzNA==", "bodyText": "nit: extra blank line", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447965934", "createdAt": "2020-06-30T20:41:33Z", "author": {"login": "sunchao"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/TestRouterSecurityManager.java", "diffHunk": "@@ -124,6 +126,71 @@ public void testDelegationTokens() throws IOException {\n     securityManager.renewDelegationToken(token);\n   }\n \n+  @Test\n+  public void testDelgationTokenTopOwners() throws Exception {\n+    List<NameValuePair> topOwners;\n+\n+    UserGroupInformation user = UserGroupInformation\n+        .createUserForTesting(\"abc\", new String[]{\"router_group\"});\n+    UserGroupInformation.setLoginUser(user);\n+    Token dt = securityManager.getDelegationToken(new Text(\"abc\"));\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"abc\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    securityManager.renewDelegationToken(dt);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"abc\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    securityManager.cancelDelegationToken(dt);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(0, topOwners.size());\n+\n+\n+    // Use proxy user - the code should use the proxy user as the real owner\n+    UserGroupInformation routerUser =\n+        UserGroupInformation.createRemoteUser(\"router\");\n+    UserGroupInformation proxyUser = UserGroupInformation\n+        .createProxyUserForTesting(\"abc\",\n+            routerUser,\n+            new String[]{\"router_group\"});\n+    UserGroupInformation.setLoginUser(proxyUser);\n+\n+    Token proxyDT = securityManager.getDelegationToken(new Text(\"router\"));\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"router\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    // router to renew tokens\n+    UserGroupInformation.setLoginUser(routerUser);\n+    securityManager.renewDelegationToken(proxyDT);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"router\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    securityManager.cancelDelegationToken(proxyDT);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(0, topOwners.size());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NDA4Mw==", "bodyText": "will remove", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447994083", "createdAt": "2020-06-30T21:37:45Z", "author": {"login": "fengnanli"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/TestRouterSecurityManager.java", "diffHunk": "@@ -124,6 +126,71 @@ public void testDelegationTokens() throws IOException {\n     securityManager.renewDelegationToken(token);\n   }\n \n+  @Test\n+  public void testDelgationTokenTopOwners() throws Exception {\n+    List<NameValuePair> topOwners;\n+\n+    UserGroupInformation user = UserGroupInformation\n+        .createUserForTesting(\"abc\", new String[]{\"router_group\"});\n+    UserGroupInformation.setLoginUser(user);\n+    Token dt = securityManager.getDelegationToken(new Text(\"abc\"));\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"abc\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    securityManager.renewDelegationToken(dt);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"abc\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    securityManager.cancelDelegationToken(dt);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(0, topOwners.size());\n+\n+\n+    // Use proxy user - the code should use the proxy user as the real owner\n+    UserGroupInformation routerUser =\n+        UserGroupInformation.createRemoteUser(\"router\");\n+    UserGroupInformation proxyUser = UserGroupInformation\n+        .createProxyUserForTesting(\"abc\",\n+            routerUser,\n+            new String[]{\"router_group\"});\n+    UserGroupInformation.setLoginUser(proxyUser);\n+\n+    Token proxyDT = securityManager.getDelegationToken(new Text(\"router\"));\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"router\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    // router to renew tokens\n+    UserGroupInformation.setLoginUser(routerUser);\n+    securityManager.renewDelegationToken(proxyDT);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"router\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    securityManager.cancelDelegationToken(proxyDT);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(0, topOwners.size());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTkzNA=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjcwOTc4OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTozOTowMlrOGr6jaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTozOTowMlrOGr6jaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwMTI4OA==", "bodyText": "top users -> top user metrics?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448701288", "createdAt": "2020-07-02T01:39:02Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -64,7 +69,13 @@ private String formatTokenId(TokenIdent id) {\n    */\n   protected final Map<TokenIdent, DelegationTokenInformation> currentTokens \n       = new ConcurrentHashMap<>();\n-  \n+\n+  /**\n+   * Map of token real owners to its token count. This is used to generate\n+   * top users by owned tokens.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzA3OTU5OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNToyODo1NFrOGr98IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNToyODo1NFrOGr98IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1Njc2OA==", "bodyText": "nit: use capital 0L to make IDE happy", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448756768", "createdAt": "2020-07-02T05:28:54Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +741,86 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    n = Math.min(n, tokenOwnerStats.size());\n+    if (n == 0) {\n+      return new ArrayList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Long> entry : tokenOwnerStats.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new ArrayList<>();\n+    while (!topN.isEmpty()) {\n+      list.add(topN.poll());\n+    }\n+    Collections.reverse(list);\n+    return list;\n+  }\n+\n+  /**\n+   * Return the real owner for a token. If this is a token from a proxy user,\n+   * the real/effective user will be returned.\n+   *\n+   * @param id\n+   * @return real owner\n+   */\n+  public String getTokenRealOwner(TokenIdent id) {\n+    String realUser;\n+    if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+      realUser = id.getRealUser().toString();\n+    } else {\n+      // if there is no real user -> this is a non proxy user\n+      // the user itself is the real owner\n+      realUser = id.getUser().getUserName();\n+    }\n+    return realUser;\n+  }\n+\n+  /**\n+   * Add token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void addTokenForOwnerStats(TokenIdent id) {\n+    String realOwner = getTokenRealOwner(id);\n+    tokenOwnerStats.put(realOwner,\n+        tokenOwnerStats.getOrDefault(realOwner, 0l)+1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzA4NTQxOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTozMTo1NlrOGr9_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToxNTowNlrOGuUvpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1NzU4OQ==", "bodyText": "Even though tokenOwnerStats is a concurrent map, you may run into race conditions if multiple threads operate on this method at the same time. We can potentially make the method synchronized to avoid that. Not sure we should care much though since this is only for metrics.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448757589", "createdAt": "2020-07-02T05:31:56Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +741,86 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    n = Math.min(n, tokenOwnerStats.size());\n+    if (n == 0) {\n+      return new ArrayList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Long> entry : tokenOwnerStats.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new ArrayList<>();\n+    while (!topN.isEmpty()) {\n+      list.add(topN.poll());\n+    }\n+    Collections.reverse(list);\n+    return list;\n+  }\n+\n+  /**\n+   * Return the real owner for a token. If this is a token from a proxy user,\n+   * the real/effective user will be returned.\n+   *\n+   * @param id\n+   * @return real owner\n+   */\n+  public String getTokenRealOwner(TokenIdent id) {\n+    String realUser;\n+    if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+      realUser = id.getRealUser().toString();\n+    } else {\n+      // if there is no real user -> this is a non proxy user\n+      // the user itself is the real owner\n+      realUser = id.getUser().getUserName();\n+    }\n+    return realUser;\n+  }\n+\n+  /**\n+   * Add token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void addTokenForOwnerStats(TokenIdent id) {\n+    String realOwner = getTokenRealOwner(id);\n+    tokenOwnerStats.put(realOwner,\n+        tokenOwnerStats.getOrDefault(realOwner, 0l)+1);\n+  }\n+\n+  /**\n+   * Remove token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void removeTokenForOwnerStats(TokenIdent id) {\n+    String realOwner = getTokenRealOwner(id);\n+    if (tokenOwnerStats.containsKey(realOwner)) {\n+      // unlikely to be less than 1 but in case\n+      if (tokenOwnerStats.get(realOwner) <= 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzU1OQ==", "bodyText": "The function is called from createPassword and cancelToken which are all synchronized so it is safe here. Similarly currentTokens is used in the pattern.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r451227559", "createdAt": "2020-07-08T01:15:06Z", "author": {"login": "fengnanli"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +741,86 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    n = Math.min(n, tokenOwnerStats.size());\n+    if (n == 0) {\n+      return new ArrayList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Long> entry : tokenOwnerStats.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new ArrayList<>();\n+    while (!topN.isEmpty()) {\n+      list.add(topN.poll());\n+    }\n+    Collections.reverse(list);\n+    return list;\n+  }\n+\n+  /**\n+   * Return the real owner for a token. If this is a token from a proxy user,\n+   * the real/effective user will be returned.\n+   *\n+   * @param id\n+   * @return real owner\n+   */\n+  public String getTokenRealOwner(TokenIdent id) {\n+    String realUser;\n+    if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+      realUser = id.getRealUser().toString();\n+    } else {\n+      // if there is no real user -> this is a non proxy user\n+      // the user itself is the real owner\n+      realUser = id.getUser().getUserName();\n+    }\n+    return realUser;\n+  }\n+\n+  /**\n+   * Add token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void addTokenForOwnerStats(TokenIdent id) {\n+    String realOwner = getTokenRealOwner(id);\n+    tokenOwnerStats.put(realOwner,\n+        tokenOwnerStats.getOrDefault(realOwner, 0l)+1);\n+  }\n+\n+  /**\n+   * Remove token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void removeTokenForOwnerStats(TokenIdent id) {\n+    String realOwner = getTokenRealOwner(id);\n+    if (tokenOwnerStats.containsKey(realOwner)) {\n+      // unlikely to be less than 1 but in case\n+      if (tokenOwnerStats.get(realOwner) <= 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1NzU4OQ=="}, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzA4NzM5OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTozMzoxNVrOGr-AdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMTowODo0NVrOGuUpuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1Nzg3Nw==", "bodyText": "It's slightly unfortunate that we need to expose NameValuePair in a public method here as it is scope = private, but I don't know an easy way to avoid this.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448757877", "createdAt": "2020-07-02T05:33:15Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +741,86 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNjA0MA==", "bodyText": "I will keep it as it is.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r451226040", "createdAt": "2020-07-08T01:08:45Z", "author": {"login": "fengnanli"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +741,86 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1Nzg3Nw=="}, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzA4OTI0OnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/resources/hdfs-rbf-default.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTozNDozNVrOGr-BlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToxNDowNlrOGuUuuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1ODE2NA==", "bodyText": "nit: might explain a little bit what \"real owners\" mean here", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448758164", "createdAt": "2020-07-02T05:34:35Z", "author": {"login": "sunchao"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/resources/hdfs-rbf-default.xml", "diffHunk": "@@ -657,4 +657,12 @@\n     </description>\n   </property>\n \n+  <property>\n+    <name>dfs.federation.router.top.num.token.realowners</name>\n+    <value>10</value>\n+    <description>\n+      The number of top real owners by tokens count to report in the JMX metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzMyMw==", "bodyText": "fixed.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r451227323", "createdAt": "2020-07-08T01:14:06Z", "author": {"login": "fengnanli"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/resources/hdfs-rbf-default.xml", "diffHunk": "@@ -657,4 +657,12 @@\n     </description>\n   </property>\n \n+  <property>\n+    <name>dfs.federation.router.top.num.token.realowners</name>\n+    <value>10</value>\n+    <description>\n+      The number of top real owners by tokens count to report in the JMX metrics.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1ODE2NA=="}, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzA5MTY5OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTozNTo1MFrOGr-C8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTozNTo1MFrOGr-C8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1ODUxMg==", "bodyText": "can we swap the order and update the stats as last step?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448758512", "createdAt": "2020-07-02T05:35:50Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -292,6 +303,7 @@ protected DelegationTokenInformation getTokenInfo(TokenIdent ident) {\n   protected void storeToken(TokenIdent ident,\n       DelegationTokenInformation tokenInfo) throws IOException {\n     currentTokens.put(ident, tokenInfo);\n+    addTokenForOwnerStats(ident);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzA5MjQxOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTozNjowOFrOGr-DYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToxMzo1N1rOGuUumw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1ODYyNA==", "bodyText": "same here - swap order and update stats as the last step?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448758624", "createdAt": "2020-07-02T05:36:08Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -578,6 +591,7 @@ public synchronized TokenIdent cancelToken(Token<TokenIdent> token,\n     if (info == null) {\n       throw new InvalidToken(\"Token not found \" + formatTokenId(id));\n     }\n+    removeTokenForOwnerStats(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzI5MQ==", "bodyText": "The reason i left the order as this is that the metric is a in-memory reflection currentTokens so it can be calculated once the memory data structure is changed.\nThe procedure after is for persistent storage.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r451227291", "createdAt": "2020-07-08T01:13:57Z", "author": {"login": "fengnanli"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -578,6 +591,7 @@ public synchronized TokenIdent cancelToken(Token<TokenIdent> token,\n     if (info == null) {\n       throw new InvalidToken(\"Token not found \" + formatTokenId(id));\n     }\n+    removeTokenForOwnerStats(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1ODYyNA=="}, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzA5ODcxOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTozOTo0MlrOGr-HHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToxMjo1OFrOGuUtvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1OTU4Mw==", "bodyText": "This and a few others do not need to be public?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448759583", "createdAt": "2020-07-02T05:39:42Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +741,86 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    n = Math.min(n, tokenOwnerStats.size());\n+    if (n == 0) {\n+      return new ArrayList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Long> entry : tokenOwnerStats.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new ArrayList<>();\n+    while (!topN.isEmpty()) {\n+      list.add(topN.poll());\n+    }\n+    Collections.reverse(list);\n+    return list;\n+  }\n+\n+  /**\n+   * Return the real owner for a token. If this is a token from a proxy user,\n+   * the real/effective user will be returned.\n+   *\n+   * @param id\n+   * @return real owner\n+   */\n+  public String getTokenRealOwner(TokenIdent id) {\n+    String realUser;\n+    if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+      realUser = id.getRealUser().toString();\n+    } else {\n+      // if there is no real user -> this is a non proxy user\n+      // the user itself is the real owner\n+      realUser = id.getUser().getUserName();\n+    }\n+    return realUser;\n+  }\n+\n+  /**\n+   * Add token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void addTokenForOwnerStats(TokenIdent id) {\n+    String realOwner = getTokenRealOwner(id);\n+    tokenOwnerStats.put(realOwner,\n+        tokenOwnerStats.getOrDefault(realOwner, 0l)+1);\n+  }\n+\n+  /**\n+   * Remove token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void removeTokenForOwnerStats(TokenIdent id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzA2OQ==", "bodyText": "this was fixed.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r451227069", "createdAt": "2020-07-08T01:12:58Z", "author": {"login": "fengnanli"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +741,86 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    n = Math.min(n, tokenOwnerStats.size());\n+    if (n == 0) {\n+      return new ArrayList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Long> entry : tokenOwnerStats.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new ArrayList<>();\n+    while (!topN.isEmpty()) {\n+      list.add(topN.poll());\n+    }\n+    Collections.reverse(list);\n+    return list;\n+  }\n+\n+  /**\n+   * Return the real owner for a token. If this is a token from a proxy user,\n+   * the real/effective user will be returned.\n+   *\n+   * @param id\n+   * @return real owner\n+   */\n+  public String getTokenRealOwner(TokenIdent id) {\n+    String realUser;\n+    if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+      realUser = id.getRealUser().toString();\n+    } else {\n+      // if there is no real user -> this is a non proxy user\n+      // the user itself is the real owner\n+      realUser = id.getUser().getUserName();\n+    }\n+    return realUser;\n+  }\n+\n+  /**\n+   * Add token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void addTokenForOwnerStats(TokenIdent id) {\n+    String realOwner = getTokenRealOwner(id);\n+    tokenOwnerStats.put(realOwner,\n+        tokenOwnerStats.getOrDefault(realOwner, 0l)+1);\n+  }\n+\n+  /**\n+   * Remove token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void removeTokenForOwnerStats(TokenIdent id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1OTU4Mw=="}, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzExNzMxOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTo1MDoxMVrOGr-SKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxODowMDowOFrOGuzWrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2MjQwOQ==", "bodyText": "Seems this won't be updated if a standby NN updates its own token info by pulling from edit log?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448762409", "createdAt": "2020-07-02T05:50:11Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -64,7 +69,13 @@ private String formatTokenId(TokenIdent id) {\n    */\n   protected final Map<TokenIdent, DelegationTokenInformation> currentTokens \n       = new ConcurrentHashMap<>();\n-  \n+\n+  /**\n+   * Map of token real owners to its token count. This is used to generate\n+   * top users by owned tokens.\n+   */\n+  protected final Map<String, Long> tokenOwnerStats = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzAyNQ==", "bodyText": "It depends on individual secret manager to initialize the currentTokens. In namenode, it is loading from edit log. In router, it is loading from ZK.\nI would have a separate ticket for namenode.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r451227025", "createdAt": "2020-07-08T01:12:47Z", "author": {"login": "fengnanli"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -64,7 +69,13 @@ private String formatTokenId(TokenIdent id) {\n    */\n   protected final Map<TokenIdent, DelegationTokenInformation> currentTokens \n       = new ConcurrentHashMap<>();\n-  \n+\n+  /**\n+   * Map of token real owners to its token count. This is used to generate\n+   * top users by owned tokens.\n+   */\n+  protected final Map<String, Long> tokenOwnerStats = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2MjQwOQ=="}, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcyOTA3MQ==", "bodyText": "OK. Can you add a comment for this though indicating that this only support RBF for now?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r451729071", "createdAt": "2020-07-08T18:00:08Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -64,7 +69,13 @@ private String formatTokenId(TokenIdent id) {\n    */\n   protected final Map<TokenIdent, DelegationTokenInformation> currentTokens \n       = new ConcurrentHashMap<>();\n-  \n+\n+  /**\n+   * Map of token real owners to its token count. This is used to generate\n+   * top users by owned tokens.\n+   */\n+  protected final Map<String, Long> tokenOwnerStats = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2MjQwOQ=="}, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3478, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}