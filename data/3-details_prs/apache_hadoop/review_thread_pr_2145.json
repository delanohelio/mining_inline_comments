{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMDI4MzY4", "number": 2145, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODowMzoyOVrOEPPf3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQxODoxNToyMlrOFp-w0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDE4MDE1OnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServerWebServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODowMzoyOVrOGy2Ztw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjoxMjowOVrOGzC-ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MzMwMw==", "bodyText": "We probably want to do the same for kms..", "url": "https://github.com/apache/hadoop/pull/2145#discussion_r455973303", "createdAt": "2020-07-16T18:03:29Z", "author": {"login": "jojochuang"}, "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServerWebServer.java", "diffHunk": "@@ -119,6 +120,7 @@\n       conf.set(HttpServer2.FILTER_INITIALIZER_PROPERTY, actualInitializers);\n     }\n \n+    DefaultMetricsSystem.initialize(\"httpfs\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb9071cdeb50d0c474ee6f2dac0da1919b25f125"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3OTMwMA==", "bodyText": "Thank you. Added 2f3db46", "url": "https://github.com/apache/hadoop/pull/2145#discussion_r456179300", "createdAt": "2020-07-17T02:12:09Z", "author": {"login": "aajisaka"}, "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServerWebServer.java", "diffHunk": "@@ -119,6 +120,7 @@\n       conf.set(HttpServer2.FILTER_INITIALIZER_PROPERTY, actualInitializers);\n     }\n \n+    DefaultMetricsSystem.initialize(\"httpfs\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MzMwMw=="}, "originalCommit": {"oid": "fb9071cdeb50d0c474ee6f2dac0da1919b25f125"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTgzNTEyOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2Metrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowOTowNlrOG0dgKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowOTowNlrOG0dgKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjUwNw==", "bodyText": "should be in its own block", "url": "https://github.com/apache/hadoop/pull/2145#discussion_r457662507", "createdAt": "2020-07-20T20:09:06Z", "author": {"login": "steveloughran"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2Metrics.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.http;\n+\n+import org.apache.hadoop.classification.InterfaceAudience;\n+import org.apache.hadoop.classification.InterfaceStability;\n+import org.apache.hadoop.metrics2.MetricsSystem;\n+import org.apache.hadoop.metrics2.annotation.Metric;\n+import org.apache.hadoop.metrics2.annotation.Metrics;\n+import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;\n+import org.eclipse.jetty.server.handler.StatisticsHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55d6fd4e97e8eac1d31f37d0c229033460802ddc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc3NjU3MTU5OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOVQxODoxNTo0NVrOI6MGZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQwNTo1MTo1NFrOI8Y0Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzg4NjU2NQ==", "bodyText": "If I understand correctly, this paragraph explains why we need to put the StatisticsHandler as the first handler, right? Is it possible that we can have a unit test to reproduce the scenario where the response is not committed ?", "url": "https://github.com/apache/hadoop/pull/2145#discussion_r597886565", "createdAt": "2021-03-19T18:15:45Z", "author": {"login": "Jing9"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java", "diffHunk": "@@ -669,6 +674,16 @@ private void initializeWebServer(String name, String hostName,\n     addDefaultApps(contexts, appDir, conf);\n     webServer.setHandler(handlers);\n \n+    // Jetty StatisticsHandler should be the first handler.\n+    // The handler returns 503 if there is no next handler and the response is\n+    // not committed. In Apache Hadoop, there are some servlets that do not\n+    // commit (i.e. close) the response. Therefore the handler fails.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5095cf83c4cbbf808b693f7476a679a9cdd686e4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE2MDQ3NQ==", "bodyText": "I think it is possible. I'll create a unit test to reproduce the scenario.", "url": "https://github.com/apache/hadoop/pull/2145#discussion_r600160475", "createdAt": "2021-03-24T04:37:25Z", "author": {"login": "aajisaka"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java", "diffHunk": "@@ -669,6 +674,16 @@ private void initializeWebServer(String name, String hostName,\n     addDefaultApps(contexts, appDir, conf);\n     webServer.setHandler(handlers);\n \n+    // Jetty StatisticsHandler should be the first handler.\n+    // The handler returns 503 if there is no next handler and the response is\n+    // not committed. In Apache Hadoop, there are some servlets that do not\n+    // commit (i.e. close) the response. Therefore the handler fails.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzg4NjU2NQ=="}, "originalCommit": {"oid": "5095cf83c4cbbf808b693f7476a679a9cdd686e4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE5MjA5OA==", "bodyText": "I found why the handler should be inserted and updated the explanation: https://www.eclipse.org/lists/jetty-users/msg06273.html\nCreated a test case for the scenario: 34bb0a6\n\nThank you @Jing9  for your review.", "url": "https://github.com/apache/hadoop/pull/2145#discussion_r600192098", "createdAt": "2021-03-24T05:51:54Z", "author": {"login": "aajisaka"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java", "diffHunk": "@@ -669,6 +674,16 @@ private void initializeWebServer(String name, String hostName,\n     addDefaultApps(contexts, appDir, conf);\n     webServer.setHandler(handlers);\n \n+    // Jetty StatisticsHandler should be the first handler.\n+    // The handler returns 503 if there is no next handler and the response is\n+    // not committed. In Apache Hadoop, there are some servlets that do not\n+    // commit (i.e. close) the response. Therefore the handler fails.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzg4NjU2NQ=="}, "originalCommit": {"oid": "5095cf83c4cbbf808b693f7476a679a9cdd686e4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc3NjYzNDE5OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOVQxODozMjo0OVrOI6MtHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQwNDozNjo1OVrOI8W3lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzg5NjQ3Nw==", "bodyText": "so if we have both http and https bound to the server, this metrics will cover both connectors but its name will only use one of the port?", "url": "https://github.com/apache/hadoop/pull/2145#discussion_r597896477", "createdAt": "2021-03-19T18:32:49Z", "author": {"login": "Jing9"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java", "diffHunk": "@@ -1227,6 +1242,16 @@ public void start() throws IOException {\n               .register(\"prometheus\", \"Hadoop metrics prometheus exporter\",\n                   prometheusMetricsSink);\n         }\n+        if (statsHandler != null) {\n+          // Create metrics source for each HttpServer2 instance.\n+          // Use port number to make the metrics source name unique.\n+          int port = -1;\n+          for (ServerConnector connector : listeners) {\n+            port = connector.getLocalPort();\n+            break;\n+          }\n+          metrics = HttpServer2Metrics.create(statsHandler, port);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5095cf83c4cbbf808b693f7476a679a9cdd686e4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE2MDE0OQ==", "bodyText": "Yes.", "url": "https://github.com/apache/hadoop/pull/2145#discussion_r600160149", "createdAt": "2021-03-24T04:36:59Z", "author": {"login": "aajisaka"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java", "diffHunk": "@@ -1227,6 +1242,16 @@ public void start() throws IOException {\n               .register(\"prometheus\", \"Hadoop metrics prometheus exporter\",\n                   prometheusMetricsSink);\n         }\n+        if (statsHandler != null) {\n+          // Create metrics source for each HttpServer2 instance.\n+          // Use port number to make the metrics source name unique.\n+          int port = -1;\n+          for (ServerConnector connector : listeners) {\n+            port = connector.getLocalPort();\n+            break;\n+          }\n+          metrics = HttpServer2Metrics.create(statsHandler, port);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzg5NjQ3Nw=="}, "originalCommit": {"oid": "5095cf83c4cbbf808b693f7476a679a9cdd686e4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5NTY0MjQzOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQxODoxNToyMlrOI86Vww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQwODoxOToxN1rOI9VUcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDc0MTMxNQ==", "bodyText": "There are a couple of typos and mismatches in the javadoc of these metrics. Shall we use the same javadoc in StatisticsHandler.java? E.g., here is the javadoc for StatisticsHandler#getAsyncDispatches: \"the number of requests that have been asynchronously dispatched\"", "url": "https://github.com/apache/hadoop/pull/2145#discussion_r600741315", "createdAt": "2021-03-24T18:15:22Z", "author": {"login": "Jing9"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2Metrics.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.http;\n+\n+import org.eclipse.jetty.server.handler.StatisticsHandler;\n+\n+import org.apache.hadoop.classification.InterfaceAudience;\n+import org.apache.hadoop.classification.InterfaceStability;\n+import org.apache.hadoop.metrics2.MetricsSystem;\n+import org.apache.hadoop.metrics2.annotation.Metric;\n+import org.apache.hadoop.metrics2.annotation.Metrics;\n+import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;\n+\n+/**\n+ * This class collects all the metrics of Jetty's StatisticsHandler\n+ * and expose them as Hadoop Metrics.\n+ */\n+@InterfaceAudience.Private\n+@InterfaceStability.Unstable\n+@Metrics(name=\"HttpServer2\", about=\"HttpServer2 metrics\", context=\"http\")\n+public class HttpServer2Metrics {\n+\n+  private final StatisticsHandler handler;\n+  private final int port;\n+\n+  @Metric(\"number of async requests requests that have expired\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34bb0a6855cec3faca4a5b7eec323b5ca273743d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTE4MzM0Ng==", "bodyText": "Thank you! Fixed.", "url": "https://github.com/apache/hadoop/pull/2145#discussion_r601183346", "createdAt": "2021-03-25T08:19:17Z", "author": {"login": "aajisaka"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2Metrics.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.http;\n+\n+import org.eclipse.jetty.server.handler.StatisticsHandler;\n+\n+import org.apache.hadoop.classification.InterfaceAudience;\n+import org.apache.hadoop.classification.InterfaceStability;\n+import org.apache.hadoop.metrics2.MetricsSystem;\n+import org.apache.hadoop.metrics2.annotation.Metric;\n+import org.apache.hadoop.metrics2.annotation.Metrics;\n+import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;\n+\n+/**\n+ * This class collects all the metrics of Jetty's StatisticsHandler\n+ * and expose them as Hadoop Metrics.\n+ */\n+@InterfaceAudience.Private\n+@InterfaceStability.Unstable\n+@Metrics(name=\"HttpServer2\", about=\"HttpServer2 metrics\", context=\"http\")\n+public class HttpServer2Metrics {\n+\n+  private final StatisticsHandler handler;\n+  private final int port;\n+\n+  @Metric(\"number of async requests requests that have expired\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDc0MTMxNQ=="}, "originalCommit": {"oid": "34bb0a6855cec3faca4a5b7eec323b5ca273743d"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3504, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}