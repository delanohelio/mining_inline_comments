{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMTc2NDkx", "number": 2107, "title": "HDFS-15430. create should work when parent dir is internalDir and fallback configured.", "bodyText": "https://issues.apache.org/jira/browse/HDFS-15430", "createdAt": "2020-06-29T03:37:36Z", "url": "https://github.com/apache/hadoop/pull/2107", "merged": true, "mergeCommit": {"oid": "1f2a80b5e5024aeb7fb1f8c31b8fdd0fdb88bb66"}, "closed": true, "closedAt": "2020-07-04T07:12:11Z", "author": {"login": "umamaheswararao"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcweaK3gFqTQ0MDQzOTQ3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxijEhgH2gAyNDQxMTc2NDkxOmFkNzc3YzBkZWI0OTI4NmYwMWM5YmVjYjA0YjM0MGEwNzc0YzAwNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDM5NDcy", "url": "https://github.com/apache/hadoop/pull/2107#pullrequestreview-440439472", "createdAt": "2020-06-30T22:53:39Z", "commit": {"oid": "58598aefa34ee0b0029e425660c89e25fc0b4f4c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo1Mzo0MFrOGrRKbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNTo0OVrOGrR-Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyMzE1MA==", "bodyText": "where \"the\" path", "url": "https://github.com/apache/hadoop/pull/2107#discussion_r448023150", "createdAt": "2020-06-30T22:53:40Z", "author": {"login": "jojochuang"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsLinkFallback.java", "diffHunk": "@@ -294,4 +298,155 @@ public void testMkdirShouldFailWhenFallbackFSNotAvailable()\n     assertTrue(fsTarget.exists(test));\n   }\n \n+  /**\n+   * Tests that the create file should be successful when the parent directory\n+   * is same as the existent fallback directory. The new file should be created\n+   * in fallback.\n+   */\n+  @Test\n+  public void testCreateFileOnInternalMountDirWithSameDirTreeExistInFallback()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    ConfigUtil.addLink(conf, \"/user1/hive/warehouse/partition-0\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    Path dir1 = new Path(targetTestRoot,\n+        \"fallbackDir/user1/hive/warehouse/partition-0\");\n+    fsTarget.mkdirs(dir1);\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+\n+    AbstractFileSystem vfs =\n+        AbstractFileSystem.get(viewFsDefaultClusterUri, conf);\n+    Path p = new Path(\"/user1/hive/warehouse/test.file\");\n+    Path test = Path.mergePaths(fallbackTarget, p);\n+    assertFalse(fsTarget.exists(test));\n+    assertTrue(fsTarget.exists(test.getParent()));\n+    vfs.create(p, EnumSet.of(CREATE),\n+        Options.CreateOpts.perms(FsPermission.getDefault()));\n+    assertTrue(fsTarget.exists(test));\n+\n+  }\n+\n+  /**\n+   * Tests the making of a new directory which is not matching to any of\n+   * internal directory.\n+   */\n+  @Test\n+  public void testCreateNewFileWithOutMatchingToMountDirOrFallbackDirPath()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    ConfigUtil.addLink(conf, \"/user1/hive/warehouse/partition-0\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    fsTarget.mkdirs(fallbackTarget);\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+    AbstractFileSystem vfs =\n+        AbstractFileSystem.get(viewFsDefaultClusterUri, conf);\n+    Path p = new Path(\"/user2/test.file\");\n+    Path test = Path.mergePaths(fallbackTarget, p);\n+    assertFalse(fsTarget.exists(test));\n+    // user2 does not exist in fallback\n+    assertFalse(fsTarget.exists(test.getParent()));\n+    vfs.create(p, EnumSet.of(CREATE),\n+        Options.CreateOpts.perms(FsPermission.getDefault()),\n+        Options.CreateOpts.createParent());\n+    // /user2/test.file should be created in fallback\n+    assertTrue(fsTarget.exists(test));\n+  }\n+\n+  /**\n+   * Tests the making of a new file on root which is not matching to any of\n+   * fallback files on root.\n+   */\n+  @Test\n+  public void testCreateFileOnRootWithFallbackEnabled()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    fsTarget.mkdirs(fallbackTarget);\n+\n+    ConfigUtil.addLink(conf, \"/user1/hive/\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+\n+    AbstractFileSystem vfs =\n+        AbstractFileSystem.get(viewFsDefaultClusterUri, conf);\n+    Path p = new Path(\"/test.file\");\n+    Path test = Path.mergePaths(fallbackTarget, p);\n+    assertFalse(fsTarget.exists(test));\n+    vfs.create(p, EnumSet.of(CREATE),\n+        Options.CreateOpts.perms(FsPermission.getDefault()));\n+    // /test.file should be created in fallback\n+    assertTrue(fsTarget.exists(test));\n+\n+  }\n+\n+  /**\n+   * Tests the create of a file on root where the path is matching to an\n+   * existing file on fallback's file on root.\n+   */\n+  @Test (expected = FileAlreadyExistsException.class)\n+  public void testCreateFileOnRootWithFallbackWithFileAlreadyExist()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    Path testFile = new Path(fallbackTarget, \"test.file\");\n+    // pre-creating test file in fallback.\n+    fsTarget.createNewFile(testFile);\n+\n+    ConfigUtil.addLink(conf, \"/user1/hive/\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+\n+    AbstractFileSystem vfs =\n+        AbstractFileSystem.get(viewFsDefaultClusterUri, conf);\n+      Path p = new Path(\"/test.file\");\n+      assertTrue(fsTarget.exists(testFile));\n+    vfs.create(p, EnumSet.of(CREATE),\n+        Options.CreateOpts.perms(FsPermission.getDefault()));\n+  }\n+\n+  /**\n+   * Tests the creating of a file where the path is same as mount link path.\n+   */\n+  @Test(expected= FileAlreadyExistsException.class)\n+  public void testCreateFileWhereThePathIsSameAsItsMountLinkPath()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    fsTarget.mkdirs(fallbackTarget);\n+\n+    ConfigUtil.addLink(conf, \"/user1/hive/\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+\n+    AbstractFileSystem vfs =\n+        AbstractFileSystem.get(viewFsDefaultClusterUri, conf);\n+      Path p = new Path(\"/user1/hive\");\n+      assertFalse(fsTarget.exists(Path.mergePaths(fallbackTarget, p)));\n+    vfs.create(p, EnumSet.of(CREATE),\n+        Options.CreateOpts.perms(FsPermission.getDefault()));\n+  }\n+\n+  /**\n+   * Tests the create of a file where he path is same as one of of the internal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58598aefa34ee0b0029e425660c89e25fc0b4f4c"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjM4Nw==", "bodyText": "give this variable a more meaningful name?", "url": "https://github.com/apache/hadoop/pull/2107#discussion_r448036387", "createdAt": "2020-06-30T23:35:49Z", "author": {"login": "jojochuang"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "diffHunk": "@@ -765,4 +766,154 @@ public void testMkdirsShouldReturnFalseWhenFallbackFSNotAvailable()\n       assertTrue(fsTarget.exists(test));\n     }\n   }\n+\n+  /**\n+   * Tests that the create file should be successful when the parent directory\n+   * is same as the existent fallback directory. The new file should be created\n+   * in fallback.\n+   */\n+  @Test\n+  public void testCreateFileOnInternalMountDirWithSameDirTreeExistInFallback()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    ConfigUtil.addLink(conf, \"/user1/hive/warehouse/partition-0\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    Path dir1 = new Path(targetTestRoot,\n+        \"fallbackDir/user1/hive/warehouse/partition-0\");\n+    fsTarget.mkdirs(dir1);\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsDefaultClusterUri, conf)) {\n+      Path p = new Path(\"/user1/hive/warehouse/test.file\");\n+      Path test = Path.mergePaths(fallbackTarget, p);\n+      assertFalse(fsTarget.exists(test));\n+      assertTrue(fsTarget.exists(test.getParent()));\n+      vfs.createNewFile(p);\n+      assertTrue(fsTarget.exists(test));\n+    }\n+  }\n+\n+  /**\n+   * Tests the making of a new directory which is not matching to any of\n+   * internal directory.\n+   */\n+  @Test\n+  public void testCreateNewFileWithOutMatchingToMountDirOrFallbackDirPath()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    ConfigUtil.addLink(conf, \"/user1/hive/warehouse/partition-0\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    fsTarget.mkdirs(fallbackTarget);\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+    try (FileSystem vfs = FileSystem.get(viewFsDefaultClusterUri, conf)) {\n+      Path p = new Path(\"/user2/test.file\");\n+      Path test = Path.mergePaths(fallbackTarget, p);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58598aefa34ee0b0029e425660c89e25fc0b4f4c"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDYzOTA5", "url": "https://github.com/apache/hadoop/pull/2107#pullrequestreview-440463909", "createdAt": "2020-07-01T00:03:22Z", "commit": {"oid": "0b467a0a109647b9901924913d8f9bfef2b16fa6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDowMzoyM1rOGrSc1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDowMzoyM1rOGrSc1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0NDI0NA==", "bodyText": "Maybe easier to read if written as\n`\nPath fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\nPath dir1 = new Path(fallbackTarget,\n    \"user1/hive/warehouse/partition-0\");\nfsTarget.mkdirs(dir1);\n\n`", "url": "https://github.com/apache/hadoop/pull/2107#discussion_r448044244", "createdAt": "2020-07-01T00:03:23Z", "author": {"login": "jojochuang"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "diffHunk": "@@ -765,4 +766,154 @@ public void testMkdirsShouldReturnFalseWhenFallbackFSNotAvailable()\n       assertTrue(fsTarget.exists(test));\n     }\n   }\n+\n+  /**\n+   * Tests that the create file should be successful when the parent directory\n+   * is same as the existent fallback directory. The new file should be created\n+   * in fallback.\n+   */\n+  @Test\n+  public void testCreateFileOnInternalMountDirWithSameDirTreeExistInFallback()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    ConfigUtil.addLink(conf, \"/user1/hive/warehouse/partition-0\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    Path dir1 = new Path(targetTestRoot,\n+        \"fallbackDir/user1/hive/warehouse/partition-0\");\n+    fsTarget.mkdirs(dir1);\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b467a0a109647b9901924913d8f9bfef2b16fa6"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c2cb63ceb522cba1c17f2fb18c02ecbef777787", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/5c2cb63ceb522cba1c17f2fb18c02ecbef777787", "committedDate": "2020-07-01T17:13:49Z", "message": "HDFS-15430. create should work when parent dir is internalDir and fallback configured."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26829f58f1e57a133143e3444c8b31a77b3d812e", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/26829f58f1e57a133143e3444c8b31a77b3d812e", "committedDate": "2020-07-01T17:13:49Z", "message": "Fix review comments. Also moved child exist check inside fallback condition as we attempt create only in the case of fallback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c719a4777a304cd7e48f64a20119817367278c7", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/7c719a4777a304cd7e48f64a20119817367278c7", "committedDate": "2020-07-01T17:13:49Z", "message": "Fixed a review comment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3225add901ca57103cceb7ab752ad4c9c292790f", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/3225add901ca57103cceb7ab752ad4c9c292790f", "committedDate": "2020-07-01T17:13:49Z", "message": "Addressed an invalid findbugs to make findbugs happy and removed a redundant test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f7bad8bba57502a4bc629471f788e8895bd750d", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/7f7bad8bba57502a4bc629471f788e8895bd750d", "committedDate": "2020-07-01T17:11:18Z", "message": "Addressed an invalid findbugs to make findbugs happy and removed a redundant test"}, "afterCommit": {"oid": "3225add901ca57103cceb7ab752ad4c9c292790f", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/3225add901ca57103cceb7ab752ad4c9c292790f", "committedDate": "2020-07-01T17:13:49Z", "message": "Addressed an invalid findbugs to make findbugs happy and removed a redundant test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTkwODU4", "url": "https://github.com/apache/hadoop/pull/2107#pullrequestreview-442590858", "createdAt": "2020-07-04T06:24:26Z", "commit": {"oid": "3225add901ca57103cceb7ab752ad4c9c292790f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNjoyNDoyNlrOGs6QGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNjoyOTo0OFrOGs6RWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc0NDkyMA==", "bodyText": "typo \"expetion\"", "url": "https://github.com/apache/hadoop/pull/2107#discussion_r449744920", "createdAt": "2020-07-04T06:24:26Z", "author": {"login": "ayushtkn"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "diffHunk": "@@ -765,4 +766,151 @@ public void testMkdirsShouldReturnFalseWhenFallbackFSNotAvailable()\n       assertTrue(fsTarget.exists(test));\n     }\n   }\n+\n+  /**\n+   * Tests that the create file should be successful when the parent directory\n+   * is same as the existent fallback directory. The new file should be created\n+   * in fallback.\n+   */\n+  @Test\n+  public void testCreateFileOnInternalMountDirWithSameDirTreeExistInFallback()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    ConfigUtil.addLink(conf, \"/user1/hive/warehouse/partition-0\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    Path dir1 = new Path(fallbackTarget, \"user1/hive/warehouse/partition-0\");\n+    fsTarget.mkdirs(dir1);\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsDefaultClusterUri, conf)) {\n+      Path vfsTestFile = new Path(\"/user1/hive/warehouse/test.file\");\n+      Path testFileInFallback = Path.mergePaths(fallbackTarget, vfsTestFile);\n+      assertFalse(fsTarget.exists(testFileInFallback));\n+      assertTrue(fsTarget.exists(testFileInFallback.getParent()));\n+      vfs.create(vfsTestFile).close();\n+      assertTrue(fsTarget.exists(testFileInFallback));\n+    }\n+  }\n+\n+  /**\n+   * Tests the making of a new directory which is not matching to any of\n+   * internal directory.\n+   */\n+  @Test\n+  public void testCreateNewFileWithOutMatchingToMountDirOrFallbackDirPath()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    ConfigUtil.addLink(conf, \"/user1/hive/warehouse/partition-0\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    fsTarget.mkdirs(fallbackTarget);\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+    try (FileSystem vfs = FileSystem.get(viewFsDefaultClusterUri, conf)) {\n+      Path vfsTestFile = new Path(\"/user2/test.file\");\n+      Path testFileInFallback = Path.mergePaths(fallbackTarget, vfsTestFile);\n+      assertFalse(fsTarget.exists(testFileInFallback));\n+      // user2 does not exist in fallback\n+      assertFalse(fsTarget.exists(testFileInFallback.getParent()));\n+      vfs.create(vfsTestFile).close();\n+      // /user2/test.file should be created in fallback\n+      assertTrue(fsTarget.exists(testFileInFallback));\n+    }\n+  }\n+\n+  /**\n+   * Tests the making of a new file on root which is not matching to any of\n+   * fallback files on root.\n+   */\n+  @Test\n+  public void testCreateFileOnRootWithFallbackEnabled() throws Exception {\n+    Configuration conf = new Configuration();\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    fsTarget.mkdirs(fallbackTarget);\n+\n+    ConfigUtil.addLink(conf, \"/user1/hive/\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsDefaultClusterUri, conf)) {\n+      Path vfsTestFile = new Path(\"/test.file\");\n+      Path testFileInFallback = Path.mergePaths(fallbackTarget, vfsTestFile);\n+      assertFalse(fsTarget.exists(testFileInFallback));\n+      vfs.create(vfsTestFile).close();\n+      // /test.file should be created in fallback\n+      assertTrue(fsTarget.exists(testFileInFallback));\n+    }\n+  }\n+\n+  /**\n+   * Tests the create of a file on root where the path is matching to an\n+   * existing file on fallback's file on root.\n+   */\n+  @Test (expected = FileAlreadyExistsException.class)\n+  public void testCreateFileOnRootWithFallbackWithFileAlreadyExist()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    Path testFile = new Path(fallbackTarget, \"test.file\");\n+    // pre-creating test file in fallback.\n+    fsTarget.create(testFile).close();\n+\n+    ConfigUtil.addLink(conf, \"/user1/hive/\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsDefaultClusterUri, conf)) {\n+      Path vfsTestFile = new Path(\"/test.file\");\n+      assertTrue(fsTarget.exists(testFile));\n+      vfs.create(vfsTestFile, false).close();\n+    }\n+  }\n+\n+  /**\n+   * Tests the creating of a file where the path is same as mount link path.\n+   */\n+  @Test(expected= FileAlreadyExistsException.class)\n+  public void testCreateFileWhereThePathIsSameAsItsMountLinkPath()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    fsTarget.mkdirs(fallbackTarget);\n+\n+    ConfigUtil.addLink(conf, \"/user1/hive/\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsDefaultClusterUri, conf)) {\n+      Path vfsTestDir = new Path(\"/user1/hive\");\n+      assertFalse(fsTarget.exists(Path.mergePaths(fallbackTarget, vfsTestDir)));\n+      vfs.create(vfsTestDir).close();\n+    }\n+  }\n+\n+  /**\n+   * Tests the create of a file where the path is same as one of of the internal\n+   * dir path should fail.\n+   */\n+  @Test\n+  public void testCreateFileSameAsInternalDirPath() throws Exception {\n+    Configuration conf = new Configuration();\n+    Path fallbackTarget = new Path(targetTestRoot, \"fallbackDir\");\n+    fsTarget.mkdirs(fallbackTarget);\n+    ConfigUtil.addLink(conf, \"/user1/hive/\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    ConfigUtil.addLinkFallback(conf, fallbackTarget.toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsDefaultClusterUri, conf)) {\n+      Path vfsTestDir = new Path(\"/user1\");\n+      assertFalse(fsTarget.exists(Path.mergePaths(fallbackTarget, vfsTestDir)));\n+      try {\n+        vfs.create(vfsTestDir);\n+        Assert.fail(\"Should fail to create file as this is an internal dir.\");\n+      } catch (NotInMountpointException e){\n+        // This tree is part of internal tree. The above expetion will be thrown", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3225add901ca57103cceb7ab752ad4c9c292790f"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc0NTI0Mg==", "bodyText": "What do you mean by : This should not happen. Ideally client call shouldn't land here or This If check will never get hit(It does get hit, I verified),", "url": "https://github.com/apache/hadoop/pull/2107#discussion_r449745242", "createdAt": "2020-07-04T06:29:48Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java", "diffHunk": "@@ -919,6 +921,42 @@ public FSDataOutputStream createInternal(final Path f,\n         FileAlreadyExistsException, FileNotFoundException,\n         ParentNotDirectoryException, UnsupportedFileSystemException,\n         UnresolvedLinkException, IOException {\n+      Preconditions.checkNotNull(f, \"File cannot be null.\");\n+      // Just a sanity check. This should not happen.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3225add901ca57103cceb7ab752ad4c9c292790f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad777c0deb49286f01c9becb04b340a0774c0045", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/ad777c0deb49286f01c9becb04b340a0774c0045", "committedDate": "2020-07-04T07:03:27Z", "message": "HDFS-15430. Few comments corrected"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4102, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}