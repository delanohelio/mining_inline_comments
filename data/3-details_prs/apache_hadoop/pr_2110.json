{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxODUzOTUy", "number": 2110, "title": "HDFS-15447 RBF: Add top real owners metrics for delegation tokens", "bodyText": "NOTICE\nPlease create an issue in ASF JIRA before opening a pull request,\nand you need to set the title of the pull request which starts with\nthe corresponding JIRA issue number. (e.g. HADOOP-XXXXX. Fix a typo in YYY.)\nFor more details, please see https://cwiki.apache.org/confluence/display/HADOOP/How+To+Contribute", "createdAt": "2020-06-30T08:02:02Z", "url": "https://github.com/apache/hadoop/pull/2110", "merged": true, "mergeCommit": {"oid": "84b74b335c0251afa672643352c6b7ecf003e0fb"}, "closed": true, "closedAt": "2020-07-12T07:10:13Z", "author": {"login": "fengnanli"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwQ9TKgH2gAyNDQxODUzOTUyOjE2OTZiNWZiZmU3OWIxM2E2OGMxYTE0YjdjN2ZhYzJhNWZmYjAwYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczH4CnAFqTQ0NTI5MTk2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be", "author": {"user": {"login": "fengnanli", "name": "lfengnan"}}, "url": "https://github.com/apache/hadoop/commit/1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be", "committedDate": "2020-06-30T07:59:53Z", "message": "Add top real owners metrics for token"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDk3NTUw", "url": "https://github.com/apache/hadoop/pull/2110#pullrequestreview-440097550", "createdAt": "2020-06-30T14:51:46Z", "commit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1MTo0N1rOGrAPww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1NToyMFrOGrAbWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NTk4Nw==", "bodyText": "is it necessary to import static?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447745987", "createdAt": "2020-06-30T14:51:47Z", "author": {"login": "Hexiaoqiao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -34,6 +38,8 @@\n import org.apache.hadoop.classification.InterfaceAudience;\n import org.apache.hadoop.classification.InterfaceStability;\n import org.apache.hadoop.io.Text;\n+import static org.apache.hadoop.metrics2.util.Metrics2Util.NameValuePair;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NzY5Mw==", "bodyText": "we need to define this new configure item at hdfs-rbf-default.xml.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447747693", "createdAt": "2020-06-30T14:53:50Z", "author": {"login": "Hexiaoqiao"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RBFConfigKeys.java", "diffHunk": "@@ -79,6 +79,10 @@\n   public static final Class<? extends RouterRpcMonitor>\n       DFS_ROUTER_METRICS_CLASS_DEFAULT =\n       FederationRPCPerformanceMonitor.class;\n+  public static final String DFS_ROUTER_METRICS_TOP_NUM_TOKEN_OWNERS_KEY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0ODk1Mg==", "bodyText": "just suggest to replace with single class imports.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447748952", "createdAt": "2020-06-30T14:55:20Z", "author": {"login": "Hexiaoqiao"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/TestRouterSecurityManager.java", "diffHunk": "@@ -39,6 +39,7 @@\n import org.junit.Rule;\n import org.junit.Test;\n \n+import static org.apache.hadoop.metrics2.util.Metrics2Util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzY4NjYy", "url": "https://github.com/apache/hadoop/pull/2110#pullrequestreview-440368662", "createdAt": "2020-06-30T20:40:01Z", "commit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MDowMlrOGrNnhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MTozM1rOGrNq7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTA2MQ==", "bodyText": "will this get pretty expensive if there are lots of tokens stored? as every metrics pull needs to iterate through all tokens.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447965061", "createdAt": "2020-06-30T20:40:02Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +732,41 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTI3NQ==", "bodyText": "any reason to use LinkedList instead of ArrayList? the latter is usually more performant.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447965275", "createdAt": "2020-06-30T20:40:27Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +732,41 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    Map<String, Integer> tokenOwnerMap = new HashMap<>();\n+    for (TokenIdent id : currentTokens.keySet()) {\n+      String realUser;\n+      if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+        realUser = id.getRealUser().toString();\n+      } else {\n+        // if there is no real user -> this is a non proxy user\n+        // the user itself is the real owner\n+        realUser = id.getUser().getUserName();\n+      }\n+      tokenOwnerMap.put(realUser, tokenOwnerMap.getOrDefault(realUser, 0)+1);\n+    }\n+    n = Math.min(n, tokenOwnerMap.size());\n+    if (n == 0) {\n+      return new LinkedList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Integer> entry : tokenOwnerMap.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTc5NA==", "bodyText": "not sure if there is a metrics.md page for RBF - if so we should add there too.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447965794", "createdAt": "2020-06-30T20:41:17Z", "author": {"login": "sunchao"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RBFConfigKeys.java", "diffHunk": "@@ -79,6 +79,10 @@\n   public static final Class<? extends RouterRpcMonitor>\n       DFS_ROUTER_METRICS_CLASS_DEFAULT =\n       FederationRPCPerformanceMonitor.class;\n+  public static final String DFS_ROUTER_METRICS_TOP_NUM_TOKEN_OWNERS_KEY =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NzY5Mw=="}, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTkzNA==", "bodyText": "nit: extra blank line", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r447965934", "createdAt": "2020-06-30T20:41:33Z", "author": {"login": "sunchao"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/TestRouterSecurityManager.java", "diffHunk": "@@ -124,6 +126,71 @@ public void testDelegationTokens() throws IOException {\n     securityManager.renewDelegationToken(token);\n   }\n \n+  @Test\n+  public void testDelgationTokenTopOwners() throws Exception {\n+    List<NameValuePair> topOwners;\n+\n+    UserGroupInformation user = UserGroupInformation\n+        .createUserForTesting(\"abc\", new String[]{\"router_group\"});\n+    UserGroupInformation.setLoginUser(user);\n+    Token dt = securityManager.getDelegationToken(new Text(\"abc\"));\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"abc\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    securityManager.renewDelegationToken(dt);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"abc\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    securityManager.cancelDelegationToken(dt);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(0, topOwners.size());\n+\n+\n+    // Use proxy user - the code should use the proxy user as the real owner\n+    UserGroupInformation routerUser =\n+        UserGroupInformation.createRemoteUser(\"router\");\n+    UserGroupInformation proxyUser = UserGroupInformation\n+        .createProxyUserForTesting(\"abc\",\n+            routerUser,\n+            new String[]{\"router_group\"});\n+    UserGroupInformation.setLoginUser(proxyUser);\n+\n+    Token proxyDT = securityManager.getDelegationToken(new Text(\"router\"));\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"router\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    // router to renew tokens\n+    UserGroupInformation.setLoginUser(routerUser);\n+    securityManager.renewDelegationToken(proxyDT);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(1, topOwners.size());\n+    assertEquals(\"router\", topOwners.get(0).getName());\n+    assertEquals(1, topOwners.get(0).getValue());\n+\n+    securityManager.cancelDelegationToken(proxyDT);\n+    topOwners = securityManager.getSecretManager().getTopTokenRealOwners(2);\n+    assertEquals(0, topOwners.size());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1696b5fbfe79b13a68c1a14b7c7fac2a5ffb00be"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f46d5ce915f9fa3227be12f94f7dd4a4f5200db", "author": {"user": {"login": "fengnanli", "name": "lfengnan"}}, "url": "https://github.com/apache/hadoop/commit/6f46d5ce915f9fa3227be12f94f7dd4a4f5200db", "committedDate": "2020-07-01T00:08:03Z", "message": "Address comments; using streaming fashion to deal with structure updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d", "author": {"user": {"login": "fengnanli", "name": "lfengnan"}}, "url": "https://github.com/apache/hadoop/commit/64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d", "committedDate": "2020-07-01T00:56:32Z", "message": "Fix checkstyle and unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjk0ODE4", "url": "https://github.com/apache/hadoop/pull/2110#pullrequestreview-441294818", "createdAt": "2020-07-02T01:39:02Z", "commit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTozOTowMlrOGr6jaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTo1MDoxMVrOGr-SKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwMTI4OA==", "bodyText": "top users -> top user metrics?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448701288", "createdAt": "2020-07-02T01:39:02Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -64,7 +69,13 @@ private String formatTokenId(TokenIdent id) {\n    */\n   protected final Map<TokenIdent, DelegationTokenInformation> currentTokens \n       = new ConcurrentHashMap<>();\n-  \n+\n+  /**\n+   * Map of token real owners to its token count. This is used to generate\n+   * top users by owned tokens.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1Njc2OA==", "bodyText": "nit: use capital 0L to make IDE happy", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448756768", "createdAt": "2020-07-02T05:28:54Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +741,86 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    n = Math.min(n, tokenOwnerStats.size());\n+    if (n == 0) {\n+      return new ArrayList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Long> entry : tokenOwnerStats.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new ArrayList<>();\n+    while (!topN.isEmpty()) {\n+      list.add(topN.poll());\n+    }\n+    Collections.reverse(list);\n+    return list;\n+  }\n+\n+  /**\n+   * Return the real owner for a token. If this is a token from a proxy user,\n+   * the real/effective user will be returned.\n+   *\n+   * @param id\n+   * @return real owner\n+   */\n+  public String getTokenRealOwner(TokenIdent id) {\n+    String realUser;\n+    if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+      realUser = id.getRealUser().toString();\n+    } else {\n+      // if there is no real user -> this is a non proxy user\n+      // the user itself is the real owner\n+      realUser = id.getUser().getUserName();\n+    }\n+    return realUser;\n+  }\n+\n+  /**\n+   * Add token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void addTokenForOwnerStats(TokenIdent id) {\n+    String realOwner = getTokenRealOwner(id);\n+    tokenOwnerStats.put(realOwner,\n+        tokenOwnerStats.getOrDefault(realOwner, 0l)+1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1NzU4OQ==", "bodyText": "Even though tokenOwnerStats is a concurrent map, you may run into race conditions if multiple threads operate on this method at the same time. We can potentially make the method synchronized to avoid that. Not sure we should care much though since this is only for metrics.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448757589", "createdAt": "2020-07-02T05:31:56Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +741,86 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    n = Math.min(n, tokenOwnerStats.size());\n+    if (n == 0) {\n+      return new ArrayList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Long> entry : tokenOwnerStats.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new ArrayList<>();\n+    while (!topN.isEmpty()) {\n+      list.add(topN.poll());\n+    }\n+    Collections.reverse(list);\n+    return list;\n+  }\n+\n+  /**\n+   * Return the real owner for a token. If this is a token from a proxy user,\n+   * the real/effective user will be returned.\n+   *\n+   * @param id\n+   * @return real owner\n+   */\n+  public String getTokenRealOwner(TokenIdent id) {\n+    String realUser;\n+    if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+      realUser = id.getRealUser().toString();\n+    } else {\n+      // if there is no real user -> this is a non proxy user\n+      // the user itself is the real owner\n+      realUser = id.getUser().getUserName();\n+    }\n+    return realUser;\n+  }\n+\n+  /**\n+   * Add token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void addTokenForOwnerStats(TokenIdent id) {\n+    String realOwner = getTokenRealOwner(id);\n+    tokenOwnerStats.put(realOwner,\n+        tokenOwnerStats.getOrDefault(realOwner, 0l)+1);\n+  }\n+\n+  /**\n+   * Remove token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void removeTokenForOwnerStats(TokenIdent id) {\n+    String realOwner = getTokenRealOwner(id);\n+    if (tokenOwnerStats.containsKey(realOwner)) {\n+      // unlikely to be less than 1 but in case\n+      if (tokenOwnerStats.get(realOwner) <= 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1Nzg3Nw==", "bodyText": "It's slightly unfortunate that we need to expose NameValuePair in a public method here as it is scope = private, but I don't know an easy way to avoid this.", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448757877", "createdAt": "2020-07-02T05:33:15Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +741,86 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1ODE2NA==", "bodyText": "nit: might explain a little bit what \"real owners\" mean here", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448758164", "createdAt": "2020-07-02T05:34:35Z", "author": {"login": "sunchao"}, "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/resources/hdfs-rbf-default.xml", "diffHunk": "@@ -657,4 +657,12 @@\n     </description>\n   </property>\n \n+  <property>\n+    <name>dfs.federation.router.top.num.token.realowners</name>\n+    <value>10</value>\n+    <description>\n+      The number of top real owners by tokens count to report in the JMX metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1ODUxMg==", "bodyText": "can we swap the order and update the stats as last step?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448758512", "createdAt": "2020-07-02T05:35:50Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -292,6 +303,7 @@ protected DelegationTokenInformation getTokenInfo(TokenIdent ident) {\n   protected void storeToken(TokenIdent ident,\n       DelegationTokenInformation tokenInfo) throws IOException {\n     currentTokens.put(ident, tokenInfo);\n+    addTokenForOwnerStats(ident);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1ODYyNA==", "bodyText": "same here - swap order and update stats as the last step?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448758624", "createdAt": "2020-07-02T05:36:08Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -578,6 +591,7 @@ public synchronized TokenIdent cancelToken(Token<TokenIdent> token,\n     if (info == null) {\n       throw new InvalidToken(\"Token not found \" + formatTokenId(id));\n     }\n+    removeTokenForOwnerStats(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1OTU4Mw==", "bodyText": "This and a few others do not need to be public?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448759583", "createdAt": "2020-07-02T05:39:42Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -726,4 +741,86 @@ public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOExcept\n     return token.decodeIdentifier();\n   }\n \n+  /**\n+   * Return top token real owners list as well as the tokens count.\n+   *\n+   * @param n top number of users\n+   * @return map of owners to counts\n+   */\n+  public List<NameValuePair> getTopTokenRealOwners(int n) {\n+    n = Math.min(n, tokenOwnerStats.size());\n+    if (n == 0) {\n+      return new ArrayList<>();\n+    }\n+\n+    TopN topN = new TopN(n);\n+    for (Map.Entry<String, Long> entry : tokenOwnerStats.entrySet()) {\n+      topN.offer(new NameValuePair(\n+          entry.getKey(), entry.getValue()));\n+    }\n+\n+    List<NameValuePair> list = new ArrayList<>();\n+    while (!topN.isEmpty()) {\n+      list.add(topN.poll());\n+    }\n+    Collections.reverse(list);\n+    return list;\n+  }\n+\n+  /**\n+   * Return the real owner for a token. If this is a token from a proxy user,\n+   * the real/effective user will be returned.\n+   *\n+   * @param id\n+   * @return real owner\n+   */\n+  public String getTokenRealOwner(TokenIdent id) {\n+    String realUser;\n+    if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {\n+      realUser = id.getRealUser().toString();\n+    } else {\n+      // if there is no real user -> this is a non proxy user\n+      // the user itself is the real owner\n+      realUser = id.getUser().getUserName();\n+    }\n+    return realUser;\n+  }\n+\n+  /**\n+   * Add token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void addTokenForOwnerStats(TokenIdent id) {\n+    String realOwner = getTokenRealOwner(id);\n+    tokenOwnerStats.put(realOwner,\n+        tokenOwnerStats.getOrDefault(realOwner, 0l)+1);\n+  }\n+\n+  /**\n+   * Remove token stats to the owner to token count mapping.\n+   *\n+   * @param id\n+   */\n+  public void removeTokenForOwnerStats(TokenIdent id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2MjQwOQ==", "bodyText": "Seems this won't be updated if a standby NN updates its own token info by pulling from edit log?", "url": "https://github.com/apache/hadoop/pull/2110#discussion_r448762409", "createdAt": "2020-07-02T05:50:11Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java", "diffHunk": "@@ -64,7 +69,13 @@ private String formatTokenId(TokenIdent id) {\n    */\n   protected final Map<TokenIdent, DelegationTokenInformation> currentTokens \n       = new ConcurrentHashMap<>();\n-  \n+\n+  /**\n+   * Map of token real owners to its token count. This is used to generate\n+   * top users by owned tokens.\n+   */\n+  protected final Map<String, Long> tokenOwnerStats = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fcba5ccb29bee2a6b9159c758d9b5d3ceadd5d"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eee3bf835215916aaf1632920523d612bee5429f", "author": {"user": {"login": "fengnanli", "name": "lfengnan"}}, "url": "https://github.com/apache/hadoop/commit/eee3bf835215916aaf1632920523d612bee5429f", "committedDate": "2020-07-05T22:19:49Z", "message": "Address more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93caedbb9cd7bd3cf6f13a8e267e59ac23dd6442", "author": {"user": {"login": "fengnanli", "name": "lfengnan"}}, "url": "https://github.com/apache/hadoop/commit/93caedbb9cd7bd3cf6f13a8e267e59ac23dd6442", "committedDate": "2020-07-07T06:10:39Z", "message": "Remove unrelated change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MDE2ODAy", "url": "https://github.com/apache/hadoop/pull/2110#pullrequestreview-445016802", "createdAt": "2020-07-08T18:15:34Z", "commit": {"oid": "93caedbb9cd7bd3cf6f13a8e267e59ac23dd6442"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjkxOTY2", "url": "https://github.com/apache/hadoop/pull/2110#pullrequestreview-445291966", "createdAt": "2020-07-09T05:06:46Z", "commit": {"oid": "93caedbb9cd7bd3cf6f13a8e267e59ac23dd6442"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4107, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}