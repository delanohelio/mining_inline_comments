{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NzU5MjU2", "number": 2088, "title": "HDFS-15427. Merged ListStatus with Fallback target filesystem and InternalDirViewFS.", "bodyText": "https://issues.apache.org/jira/browse/HDFS-15427", "createdAt": "2020-06-22T08:03:32Z", "url": "https://github.com/apache/hadoop/pull/2088", "merged": true, "mergeCommit": {"oid": "7c02d1889bbeabc73c95a4c83f0cd204365ff410"}, "closed": true, "closedAt": "2020-06-23T08:42:26Z", "author": {"login": "umamaheswararao"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctsLrPgH2gAyNDM3NzU5MjU2OjQ5NjFjNDBmNDkwZTEzN2Q0MTBkNmRkNDRhMGU1ZjlmZDBmYjFkNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuAf2LgH2gAyNDM3NzU5MjU2OmQzOTViMDFiNGM1ZjY4YTZiODVjMmQ3NWU3YzNmNThmNWVjMzBiYzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4961c40f490e137d410d6dd44a0e5f9fd0fb1d6a", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/4961c40f490e137d410d6dd44a0e5f9fd0fb1d6a", "committedDate": "2020-06-22T08:01:15Z", "message": "HDFS-15427. Merged ListStatus with Fallback target filesystem and InternalDirViewFS."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0ODMwNjI5", "url": "https://github.com/apache/hadoop/pull/2088#pullrequestreview-434830629", "createdAt": "2020-06-22T11:21:46Z", "commit": {"oid": "4961c40f490e137d410d6dd44a0e5f9fd0fb1d6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyMTo0NlrOGm8d3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyMTo0NlrOGm8d3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4OTc1Nw==", "bodyText": "Thanx @umamaheswararao for initiating this, The idea seems good. This fallback mechanism is there in RBF too, through default namespace implementation, shall be great to bring it to ViewFs as well.\nI got the overall idea, Just a doubt regarding the above line.\nWhy in case showMountLinkAsSymlinks is true, we need to give preference to the fallback paths?\nTaking example from the structure in testLSOnLinkParentWithFallbackLinkWithSameMountDirectoryTree\nif we do ls on /user1/hive/warehouse the linkStatuses will have one partition0 which is mounted and the internalDirStatusesMergedWithFallBack will have another partition0 from the fallback. Shouldn't we give preference to the one from the mount entry. Since if I perform an operation on `user1/hive/warehouse/partiton0 the operation will be performed on the mount link resolved path rather than the Fallback partion0?\nHere collision is possible only between linkStatus and fallbackStatus, linkStatus and internalDirStatuses can not collide since ViewFs isn't allowing to mount /user1/hive -> (some path) as well as /user1/hive/warehouse -> (some path) which is allowed in RBF. So, In case if the exact mount entry is present any call will go to mount entry resolved path and the fallback dir will never be used, so in listing also it could have been overwritten?\nCan you help with logic here.", "url": "https://github.com/apache/hadoop/pull/2088#discussion_r443489757", "createdAt": "2020-06-22T11:21:46Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1258,40 +1260,52 @@ public FileStatus getFileStatus(Path f) throws IOException {\n             FileStatus status =\n                 ((ChRootedFileSystem)link.getTargetFileSystem())\n                 .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n-                status.getReplication(), status.getBlockSize(),\n-                status.getModificationTime(), status.getAccessTime(),\n-                status.getPermission(), status.getOwner(), status.getGroup(),\n-                null, path);\n+            linkStatuses.add(\n+                new FileStatus(status.getLen(), status.isDirectory(),\n+                    status.getReplication(), status.getBlockSize(),\n+                    status.getModificationTime(), status.getAccessTime(),\n+                    status.getPermission(), status.getOwner(),\n+                    status.getGroup(), null, path));\n           } catch (FileNotFoundException ex) {\n             LOG.warn(\"Cannot get one of the children's(\" + path\n                 + \")  target path(\" + link.getTargetFileSystem().getUri()\n                 + \") file status.\", ex);\n             throw ex;\n           }\n         } else {\n-          result[i++] =\n+          internalDirStatuses.add(\n               new FileStatus(0, true, 0, 0, creationTime, creationTime,\n                   PERMISSION_555, ugi.getShortUserName(),\n-                  ugi.getPrimaryGroupName(), path);\n+                  ugi.getPrimaryGroupName(), path));\n         }\n       }\n+      FileStatus[] internalDirStatusesMergedWithFallBack = internalDirStatuses\n+          .toArray(new FileStatus[internalDirStatuses.size()]);\n       if (fallbackStatuses.length > 0) {\n-        return consolidateFileStatuses(fallbackStatuses, result);\n+        internalDirStatusesMergedWithFallBack =\n+            merge(fallbackStatuses, internalDirStatusesMergedWithFallBack);\n+      }\n+\n+      // we don't use target file status as we show the mount link as symlink.\n+      if (showMountLinksAsSymlinks) {\n+        return merge(internalDirStatusesMergedWithFallBack,\n+            linkStatuses.toArray(new FileStatus[linkStatuses.size()]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4961c40f490e137d410d6dd44a0e5f9fd0fb1d6a"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e628bcd3b5fe2eee3a43f9444244d00dca3c54df", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/e628bcd3b5fe2eee3a43f9444244d00dca3c54df", "committedDate": "2020-06-23T00:07:01Z", "message": "Fixed checkstyle. Handled in ViewFs. Also fixed the precedence issue between fallback and link with symlink case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NDg4Nzkx", "url": "https://github.com/apache/hadoop/pull/2088#pullrequestreview-435488791", "createdAt": "2020-06-23T06:52:31Z", "commit": {"oid": "e628bcd3b5fe2eee3a43f9444244d00dca3c54df"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjo1MjozMVrOGnblUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjo1MzozM1rOGnbnAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5OTU3MQ==", "bodyText": "This comment line can be removed now? Now it isn't just root?", "url": "https://github.com/apache/hadoop/pull/2088#discussion_r443999571", "createdAt": "2020-06-23T06:52:31Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1258,63 +1261,72 @@ public FileStatus getFileStatus(Path f) throws IOException {\n             FileStatus status =\n                 ((ChRootedFileSystem)link.getTargetFileSystem())\n                 .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n-                status.getReplication(), status.getBlockSize(),\n-                status.getModificationTime(), status.getAccessTime(),\n-                status.getPermission(), status.getOwner(), status.getGroup(),\n-                null, path);\n+            linkStatuses.add(\n+                new FileStatus(status.getLen(), status.isDirectory(),\n+                    status.getReplication(), status.getBlockSize(),\n+                    status.getModificationTime(), status.getAccessTime(),\n+                    status.getPermission(), status.getOwner(),\n+                    status.getGroup(), null, path));\n           } catch (FileNotFoundException ex) {\n             LOG.warn(\"Cannot get one of the children's(\" + path\n                 + \")  target path(\" + link.getTargetFileSystem().getUri()\n                 + \") file status.\", ex);\n             throw ex;\n           }\n         } else {\n-          result[i++] =\n+          internalDirStatuses.add(\n               new FileStatus(0, true, 0, 0, creationTime, creationTime,\n                   PERMISSION_555, ugi.getShortUserName(),\n-                  ugi.getPrimaryGroupName(), path);\n+                  ugi.getPrimaryGroupName(), path));\n         }\n       }\n+      FileStatus[] internalDirStatusesMergedWithFallBack = internalDirStatuses\n+          .toArray(new FileStatus[internalDirStatuses.size()]);\n       if (fallbackStatuses.length > 0) {\n-        return consolidateFileStatuses(fallbackStatuses, result);\n-      } else {\n-        return result;\n+        internalDirStatusesMergedWithFallBack =\n+            merge(fallbackStatuses, internalDirStatusesMergedWithFallBack);\n       }\n+      // Links will always have precedence than internalDir or fallback paths.\n+      return merge(linkStatuses.toArray(new FileStatus[linkStatuses.size()]),\n+          internalDirStatusesMergedWithFallBack);\n     }\n \n-    private FileStatus[] consolidateFileStatuses(FileStatus[] fallbackStatuses,\n-        FileStatus[] mountPointStatuses) {\n+    private FileStatus[] merge(FileStatus[] toStatuses,\n+        FileStatus[] fromStatuses) {\n       ArrayList<FileStatus> result = new ArrayList<>();\n       Set<String> pathSet = new HashSet<>();\n-      for (FileStatus status : mountPointStatuses) {\n+      for (FileStatus status : toStatuses) {\n         result.add(status);\n         pathSet.add(status.getPath().getName());\n       }\n-      for (FileStatus status : fallbackStatuses) {\n+      for (FileStatus status : fromStatuses) {\n         if (!pathSet.contains(status.getPath().getName())) {\n           result.add(status);\n         }\n       }\n-      return result.toArray(new FileStatus[0]);\n+      return result.toArray(new FileStatus[result.size()]);\n     }\n \n     private FileStatus[] listStatusForFallbackLink() throws IOException {\n-      if (theInternalDir.isRoot() &&\n-          theInternalDir.getFallbackLink() != null) {\n-        FileSystem linkedFs =\n-            theInternalDir.getFallbackLink().getTargetFileSystem();\n-        // Fallback link is only applicable for root\n-        FileStatus[] statuses = linkedFs.listStatus(new Path(\"/\"));\n-        for (FileStatus status : statuses) {\n-          // Fix the path back to viewfs scheme\n-          status.setPath(\n-              new Path(myUri.toString(), status.getPath().getName()));\n+      if (this.fsState.getRootFallbackLink() != null) {\n+        FileSystem linkedFallbackFs =\n+            this.fsState.getRootFallbackLink().getTargetFileSystem();\n+        Path p = Path.getPathWithoutSchemeAndAuthority(\n+            new Path(theInternalDir.fullPath));\n+        if (theInternalDir.isRoot() || linkedFallbackFs.exists(p)) {\n+          // Fallback link is only applicable for root", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e628bcd3b5fe2eee3a43f9444244d00dca3c54df"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDAwMA==", "bodyText": "nit: can be assertEqual()", "url": "https://github.com/apache/hadoop/pull/2088#discussion_r444000000", "createdAt": "2020-06-23T06:53:33Z", "author": {"login": "ayushtkn"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "diffHunk": "@@ -359,4 +361,249 @@ public void testListingWithFallbackLinkWithSameMountDirectories()\n       assertTrue(vfs.getFileStatus(childDir).isDirectory());\n     }\n   }\n+\n+  /**\n+   * Tests ListStatus on non-link parent with fallback configured.\n+   * =============================Example.======================================\n+   * ===== Fallback path tree =============== Mount Path Tree ==================\n+   * ===========================================================================\n+   * *             /            *****               /          *****************\n+   * *            /             *****              /           *****************\n+   * *          user1           *****          user1           *****************\n+   * *           /              *****          /               *****************\n+   * *         hive             *****        hive              *****************\n+   * *       /      \\           *****       /                  *****************\n+   * * warehouse    warehouse1  *****  warehouse               *****************\n+   * * (-rwxr--r--)             ***** (-r-xr--r--)             *****************\n+   * *     /                    *****    /                     *****************\n+   * * partition-0              ***** partition-0              *****************\n+   * ===========================================================================\n+   * ===========================================================================\n+   * ***         ls /user1/hive                                        *********\n+   * ***         viewfs://default/user1/hive/warehouse (-rwxr--r--)    *********\n+   * ***         viewfs://default/user1/hive/warehouse1                *********\n+   * ===========================================================================\n+   */\n+  @Test\n+  public void testListingWithFallbackLinkWithSameMountDirectoryTree()\n+      throws Exception {\n+    Configuration conf = new Configuration();\n+    conf.setBoolean(Constants.CONFIG_VIEWFS_MOUNT_LINKS_AS_SYMLINKS, false);\n+    ConfigUtil.addLink(conf, \"/user1/hive/warehouse/partition-0\",\n+        new Path(targetTestRoot.toString()).toUri());\n+    // Creating multiple directories path under the fallback directory.\n+    // \"/user1/hive/warehouse/partition-0\" directory already exists as\n+    // configured mount point.\n+    Path dir1 = new Path(targetTestRoot,\n+        \"fallbackDir/user1/hive/warehouse/partition-0\");\n+    Path dir2 = new Path(targetTestRoot, \"fallbackDir/user1/hive/warehouse1\");\n+    fsTarget.mkdirs(dir1);\n+    fsTarget.mkdirs(dir2);\n+    fsTarget.setPermission(new Path(targetTestRoot, \"fallbackDir/user1/hive/\"),\n+        FsPermission.valueOf(\"-rwxr--r--\"));\n+    URI viewFsUri = new URI(FsConstants.VIEWFS_SCHEME,\n+        Constants.CONFIG_VIEWFS_DEFAULT_MOUNT_TABLE, \"/\", null, null);\n+\n+    HashSet<Path> beforeFallback = new HashSet<>();\n+    try (FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      for (FileStatus stat : vfs\n+          .listStatus(new Path(viewFsUri.toString(), \"/user1/hive/\"))) {\n+        beforeFallback.add(stat.getPath());\n+      }\n+    }\n+    ConfigUtil\n+        .addLinkFallback(conf, new Path(targetTestRoot, \"fallbackDir\").toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      HashSet<Path> afterFallback = new HashSet<>();\n+      for (FileStatus stat : vfs\n+          .listStatus(new Path(viewFsUri.toString(), \"/user1/hive/\"))) {\n+        afterFallback.add(stat.getPath());\n+        if (dir1.getName().equals(stat.getPath().getName())) {\n+          // make sure fallback dir listed out with correct permissions, but not\n+          // with link permissions.\n+          assertEquals(FsPermission.valueOf(\"-rwxr--r--\"),\n+              stat.getPermission());\n+        }\n+      }\n+      //\n+      //viewfs://default/user1/hive/warehouse\n+      afterFallback.removeAll(beforeFallback);\n+      assertTrue(\"The same directory name in fallback link should be shaded\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e628bcd3b5fe2eee3a43f9444244d00dca3c54df"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d395b01b4c5f68a6b85c2d75e7c3f58f5ec30bc0", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/d395b01b4c5f68a6b85c2d75e7c3f58f5ec30bc0", "committedDate": "2020-06-23T07:41:23Z", "message": "Updated doc and fixed few review comments."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4061, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}