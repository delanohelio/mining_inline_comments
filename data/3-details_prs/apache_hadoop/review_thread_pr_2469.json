{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyOTAzNjk4", "number": 2469, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDowNjowNlrOE7EdrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDoxMzowMVrOE7Epsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzc0NTczOnYy", "diffSide": "RIGHT", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/LocatedFileStatusFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDowNjowN1rOH2gLSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjoyMzo1MFrOH2mweQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxMjMzMQ==", "bodyText": "we're using a shaded org.apache.hadoop.thirdparty ref here. Guava has been too painful", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r526912331", "createdAt": "2020-11-19T14:06:07Z", "author": {"login": "steveloughran"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/LocatedFileStatusFetcher.java", "diffHunk": "@@ -29,6 +29,7 @@\n import java.util.concurrent.locks.Condition;\n import java.util.concurrent.locks.ReentrantLock;\n \n+import com.google.common.annotations.VisibleForTesting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8581bea57b933668c1155c158722fb6518dcb912"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyMDE1Mw==", "bodyText": "Fixed, thank you very much for your review!", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r527020153", "createdAt": "2020-11-19T16:23:50Z", "author": {"login": "dengzhhu653"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/LocatedFileStatusFetcher.java", "diffHunk": "@@ -29,6 +29,7 @@\n import java.util.concurrent.locks.Condition;\n import java.util.concurrent.locks.ReentrantLock;\n \n+import com.google.common.annotations.VisibleForTesting;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxMjMzMQ=="}, "originalCommit": {"oid": "8581bea57b933668c1155c158722fb6518dcb912"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzc1NzIyOnYy", "diffSide": "RIGHT", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDowODo0OFrOH2gSaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjoyNDowM1rOH2mxFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNDE1Mw==", "bodyText": "import ordering on new code should be\njava.*\nnon-org.apache\norg.apache.*\nstatics\nexisting stuff we normally leave alone as it makes cherrypicking harder. Imports are core part of merge pain", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r526914153", "createdAt": "2020-11-19T14:08:48Z", "author": {"login": "steveloughran"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8581bea57b933668c1155c158722fb6518dcb912"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyMDMwOQ==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r527020309", "createdAt": "2020-11-19T16:24:03Z", "author": {"login": "dengzhhu653"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNDE1Mw=="}, "originalCommit": {"oid": "8581bea57b933668c1155c158722fb6518dcb912"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzc2MjAyOnYy", "diffSide": "RIGHT", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDowOTo1M1rOH2gVUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjoyNDoyOFrOH2mykw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNDg5Nw==", "bodyText": "make a subclass of AbstractHadoopTestBase for timeout rull and thread naming", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r526914897", "createdAt": "2020-11-19T14:09:53Z", "author": {"login": "steveloughran"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class TestLocatedFileStatusFetcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8581bea57b933668c1155c158722fb6518dcb912"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyMDY5MQ==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r527020691", "createdAt": "2020-11-19T16:24:28Z", "author": {"login": "dengzhhu653"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class TestLocatedFileStatusFetcher {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNDg5Nw=="}, "originalCommit": {"oid": "8581bea57b933668c1155c158722fb6518dcb912"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzc2NzAzOnYy", "diffSide": "RIGHT", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDoxMDo1NFrOH2gYSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjoyNTowN1rOH2m0pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNTY1Ng==", "bodyText": "add an error message for the assertion", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r526915656", "createdAt": "2020-11-19T14:10:54Z", "author": {"login": "steveloughran"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class TestLocatedFileStatusFetcher {\n+\n+  private Configuration conf;\n+  private FileSystem fileSys;\n+  private boolean mkdirs;\n+  private File dir = GenericTestUtils.getTestDir(\"test-localfs\");\n+  private static long TIME_FOR_SLEEP = 10000;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    conf = new Configuration(false);\n+    conf.set(\"fs.file.impl\", MockFileSystem.class.getName());\n+    fileSys = FileSystem.getLocal(conf);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    if (mkdirs) {\n+      FileUtil.fullyDelete(dir);\n+    }\n+  }\n+\n+  @Test\n+  public void testExecutorsShutDown() throws Exception {\n+    Path scanPath = new Path(dir.getAbsolutePath());\n+    mkdirs = fileSys.mkdirs(scanPath);\n+    Path[] dirs = new Path[] {scanPath};\n+    final LocatedFileStatusFetcher fetcher = new LocatedFileStatusFetcher(conf, dirs, true,\n+        new PathFilter() {\n+          @Override\n+          public boolean accept(Path path) {\n+            return true;\n+          }\n+        }, true);\n+\n+    Thread t = new Thread() {\n+      @Override\n+      public void run() {\n+        try {\n+          fetcher.getFileStatuses();\n+        } catch (Exception e) {\n+          // This should interrupt condition.await()\n+          Assert.assertTrue(e instanceof InterruptedException);\n+        }\n+      }\n+    };\n+\n+    t.start();\n+    Thread.sleep(TIME_FOR_SLEEP / 2);\n+\n+    t.interrupt();\n+    t.join();\n+    // Check the status for executor service\n+    Assert.assertTrue(fetcher.getListeningExecutorService().isShutdown());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8581bea57b933668c1155c158722fb6518dcb912"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyMTIyMg==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r527021222", "createdAt": "2020-11-19T16:25:07Z", "author": {"login": "dengzhhu653"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class TestLocatedFileStatusFetcher {\n+\n+  private Configuration conf;\n+  private FileSystem fileSys;\n+  private boolean mkdirs;\n+  private File dir = GenericTestUtils.getTestDir(\"test-localfs\");\n+  private static long TIME_FOR_SLEEP = 10000;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    conf = new Configuration(false);\n+    conf.set(\"fs.file.impl\", MockFileSystem.class.getName());\n+    fileSys = FileSystem.getLocal(conf);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    if (mkdirs) {\n+      FileUtil.fullyDelete(dir);\n+    }\n+  }\n+\n+  @Test\n+  public void testExecutorsShutDown() throws Exception {\n+    Path scanPath = new Path(dir.getAbsolutePath());\n+    mkdirs = fileSys.mkdirs(scanPath);\n+    Path[] dirs = new Path[] {scanPath};\n+    final LocatedFileStatusFetcher fetcher = new LocatedFileStatusFetcher(conf, dirs, true,\n+        new PathFilter() {\n+          @Override\n+          public boolean accept(Path path) {\n+            return true;\n+          }\n+        }, true);\n+\n+    Thread t = new Thread() {\n+      @Override\n+      public void run() {\n+        try {\n+          fetcher.getFileStatuses();\n+        } catch (Exception e) {\n+          // This should interrupt condition.await()\n+          Assert.assertTrue(e instanceof InterruptedException);\n+        }\n+      }\n+    };\n+\n+    t.start();\n+    Thread.sleep(TIME_FOR_SLEEP / 2);\n+\n+    t.interrupt();\n+    t.join();\n+    // Check the status for executor service\n+    Assert.assertTrue(fetcher.getListeningExecutorService().isShutdown());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNTY1Ng=="}, "originalCommit": {"oid": "8581bea57b933668c1155c158722fb6518dcb912"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzc3NjUxOnYy", "diffSide": "RIGHT", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDoxMzowMVrOH2geCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTozNzowN1rOH4S9wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNzEzMQ==", "bodyText": "do we need this separate thread? Shouldn't the fetcher.getFileStatuses be enough?", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r526917131", "createdAt": "2020-11-19T14:13:01Z", "author": {"login": "steveloughran"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class TestLocatedFileStatusFetcher {\n+\n+  private Configuration conf;\n+  private FileSystem fileSys;\n+  private boolean mkdirs;\n+  private File dir = GenericTestUtils.getTestDir(\"test-localfs\");\n+  private static long TIME_FOR_SLEEP = 10000;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    conf = new Configuration(false);\n+    conf.set(\"fs.file.impl\", MockFileSystem.class.getName());\n+    fileSys = FileSystem.getLocal(conf);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    if (mkdirs) {\n+      FileUtil.fullyDelete(dir);\n+    }\n+  }\n+\n+  @Test\n+  public void testExecutorsShutDown() throws Exception {\n+    Path scanPath = new Path(dir.getAbsolutePath());\n+    mkdirs = fileSys.mkdirs(scanPath);\n+    Path[] dirs = new Path[] {scanPath};\n+    final LocatedFileStatusFetcher fetcher = new LocatedFileStatusFetcher(conf, dirs, true,\n+        new PathFilter() {\n+          @Override\n+          public boolean accept(Path path) {\n+            return true;\n+          }\n+        }, true);\n+\n+    Thread t = new Thread() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8581bea57b933668c1155c158722fb6518dcb912"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyOTQyNA==", "bodyText": "The fetcher.getFileStatuses blocks the current thread by condition.await(), which would be notified by the getting file tasks,  and shut down the executor.  Maybe raising the fetcher.getFileStatuses in a separate thread  can make it easy to interrupt the condition.await(), which will throw exception to show the case described.", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r527029424", "createdAt": "2020-11-19T16:36:17Z", "author": {"login": "dengzhhu653"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class TestLocatedFileStatusFetcher {\n+\n+  private Configuration conf;\n+  private FileSystem fileSys;\n+  private boolean mkdirs;\n+  private File dir = GenericTestUtils.getTestDir(\"test-localfs\");\n+  private static long TIME_FOR_SLEEP = 10000;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    conf = new Configuration(false);\n+    conf.set(\"fs.file.impl\", MockFileSystem.class.getName());\n+    fileSys = FileSystem.getLocal(conf);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    if (mkdirs) {\n+      FileUtil.fullyDelete(dir);\n+    }\n+  }\n+\n+  @Test\n+  public void testExecutorsShutDown() throws Exception {\n+    Path scanPath = new Path(dir.getAbsolutePath());\n+    mkdirs = fileSys.mkdirs(scanPath);\n+    Path[] dirs = new Path[] {scanPath};\n+    final LocatedFileStatusFetcher fetcher = new LocatedFileStatusFetcher(conf, dirs, true,\n+        new PathFilter() {\n+          @Override\n+          public boolean accept(Path path) {\n+            return true;\n+          }\n+        }, true);\n+\n+    Thread t = new Thread() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNzEzMQ=="}, "originalCommit": {"oid": "8581bea57b933668c1155c158722fb6518dcb912"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc5MzAyNg==", "bodyText": "let's leave fetcher alone -the more changes we do, the riskier the patch becomes.", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r528793026", "createdAt": "2020-11-23T15:37:07Z", "author": {"login": "steveloughran"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class TestLocatedFileStatusFetcher {\n+\n+  private Configuration conf;\n+  private FileSystem fileSys;\n+  private boolean mkdirs;\n+  private File dir = GenericTestUtils.getTestDir(\"test-localfs\");\n+  private static long TIME_FOR_SLEEP = 10000;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    conf = new Configuration(false);\n+    conf.set(\"fs.file.impl\", MockFileSystem.class.getName());\n+    fileSys = FileSystem.getLocal(conf);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    if (mkdirs) {\n+      FileUtil.fullyDelete(dir);\n+    }\n+  }\n+\n+  @Test\n+  public void testExecutorsShutDown() throws Exception {\n+    Path scanPath = new Path(dir.getAbsolutePath());\n+    mkdirs = fileSys.mkdirs(scanPath);\n+    Path[] dirs = new Path[] {scanPath};\n+    final LocatedFileStatusFetcher fetcher = new LocatedFileStatusFetcher(conf, dirs, true,\n+        new PathFilter() {\n+          @Override\n+          public boolean accept(Path path) {\n+            return true;\n+          }\n+        }, true);\n+\n+    Thread t = new Thread() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNzEzMQ=="}, "originalCommit": {"oid": "8581bea57b933668c1155c158722fb6518dcb912"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3119, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}