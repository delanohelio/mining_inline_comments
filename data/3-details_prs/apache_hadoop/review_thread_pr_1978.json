{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODQzNzg5", "number": 1978, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTo0OToyMFrOD23etg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxNzoyOVrOD9306Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODU4Njc4OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/IdentityTransformerInterface.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTo0OToyMFrOGM00wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo1NzoxOFrOGM3W4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEwMTU2OA==", "bodyText": "nit, add \".\" at the end o", "url": "https://github.com/apache/hadoop/pull/1978#discussion_r416101568", "createdAt": "2020-04-27T19:49:20Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/IdentityTransformerInterface.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs.oauth2;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.apache.hadoop.fs.permission.AclEntry;\n+\n+/**\n+ * {@code IdentityTransformerInterface} defines the set of translation\n+ * operations that any identity transformer implementation must provide.\n+ */\n+public interface IdentityTransformerInterface {\n+\n+  /**\n+   * Perform identity transformation for the Get request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e41ac65be948aae08aa1dcf5dbdbc87437d4218"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MzA3NQ==", "bodyText": "Fix this file and across all the files in this PR", "url": "https://github.com/apache/hadoop/pull/1978#discussion_r416143075", "createdAt": "2020-04-27T20:57:18Z", "author": {"login": "amarnathkarthik"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/IdentityTransformerInterface.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs.oauth2;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.apache.hadoop.fs.permission.AclEntry;\n+\n+/**\n+ * {@code IdentityTransformerInterface} defines the set of translation\n+ * operations that any identity transformer implementation must provide.\n+ */\n+public interface IdentityTransformerInterface {\n+\n+  /**\n+   * Perform identity transformation for the Get request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEwMTU2OA=="}, "originalCommit": {"oid": "2e41ac65be948aae08aa1dcf5dbdbc87437d4218"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODU5MTA2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/TextFileBasedIdentityHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTo1MDozMVrOGM03Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo1NzozMVrOGM3XZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEwMjI0Mw==", "bodyText": "import grouping; split up and place the org.apache.* block in its own group below the slf4j ones", "url": "https://github.com/apache/hadoop/pull/1978#discussion_r416102243", "createdAt": "2020-04-27T19:50:31Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/TextFileBasedIdentityHandler.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs.utils;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.slf4j.Logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e41ac65be948aae08aa1dcf5dbdbc87437d4218"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MzIwNw==", "bodyText": "Fix this file and across all the files in this PR.", "url": "https://github.com/apache/hadoop/pull/1978#discussion_r416143207", "createdAt": "2020-04-27T20:57:31Z", "author": {"login": "amarnathkarthik"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/TextFileBasedIdentityHandler.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs.utils;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.slf4j.Logger;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEwMjI0Mw=="}, "originalCommit": {"oid": "2e41ac65be948aae08aa1dcf5dbdbc87437d4218"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjAzNDc3OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestTextFileBasedIdentityHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxNToxMlrOGXoGkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjozMjoxN1rOGX5NAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyNzQ3Mg==", "bodyText": "there's a lot of duplication here. can't you just buid one long string and write it in one go?", "url": "https://github.com/apache/hadoop/pull/1978#discussion_r427427472", "createdAt": "2020-05-19T16:15:12Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestTextFileBasedIdentityHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.hadoop.fs.azurebfs.utils.TextFileBasedIdentityHandler;\n+\n+public class TestTextFileBasedIdentityHandler {\n+\n+  @ClassRule\n+  public static TemporaryFolder tempDir = new TemporaryFolder();\n+  private static File userMappingFile = null;\n+  private static File groupMappingFile = null;\n+  private static final String NEW_LINE = \"\\n\";\n+  private static String testUserDataLine1 =\n+      \"a2b27aec-77bd-46dd-8c8c-39611a333331:user1:11000:21000:spi-user1:abcf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine2 =\n+      \"#i2j27aec-77bd-46dd-8c8c-39611a333331:user2:41000:21000:spi-user2:mnof86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine3 =\n+      \"c2d27aec-77bd-46dd-8c8c-39611a333331:user2:21000:21000:spi-user2:deff86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine4 = \"e2f27aec-77bd-46dd-8c8c-39611a333331c\" + NEW_LINE;\n+  private static String testUserDataLine5 =\n+      \"g2h27aec-77bd-46dd-8c8c-39611a333331:user4:41000:21000:spi-user4:jklf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine6 = \"          \" + NEW_LINE;\n+  private static String testUserDataLine7 =\n+      \"i2j27aec-77bd-46dd-8c8c-39611a333331:user5:41000:21000:spi-user5:mknf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+\n+  private static String testGroupDataLine1 = \"1d23024d-957c-4456-aac1-a57f9e2de914:group1:21000:sgp-group1\" + NEW_LINE;\n+  private static String testGroupDataLine2 = \"3d43024d-957c-4456-aac1-a57f9e2de914:group2:21000:sgp-group2\" + NEW_LINE;\n+  private static String testGroupDataLine3 = \"5d63024d-957c-4456-aac1-a57f9e2de914\" + NEW_LINE;\n+  private static String testGroupDataLine4 = \"          \" + NEW_LINE;\n+  private static String testGroupDataLine5 = \"7d83024d-957c-4456-aac1-a57f9e2de914:group4:21000:sgp-group4\" + NEW_LINE;\n+\n+  @BeforeClass\n+  public static void init() throws IOException {\n+    userMappingFile = tempDir.newFile(\"user-mapping.conf\");\n+    groupMappingFile = tempDir.newFile(\"group-mapping.conf\");\n+\n+    //Stage data for user mapping\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine1, Charset.forName(\"UTF-8\"), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2fb3918f64fca6e78295911f1c467f48c828f2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwNzY1MQ==", "bodyText": "it's not duplicate, testUserDataLine2 has # which considered as comment and loader function should ignore. And testUserDataLine4 has incomplete record etc.", "url": "https://github.com/apache/hadoop/pull/1978#discussion_r427707651", "createdAt": "2020-05-20T02:32:17Z", "author": {"login": "amarnathkarthik"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestTextFileBasedIdentityHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.hadoop.fs.azurebfs.utils.TextFileBasedIdentityHandler;\n+\n+public class TestTextFileBasedIdentityHandler {\n+\n+  @ClassRule\n+  public static TemporaryFolder tempDir = new TemporaryFolder();\n+  private static File userMappingFile = null;\n+  private static File groupMappingFile = null;\n+  private static final String NEW_LINE = \"\\n\";\n+  private static String testUserDataLine1 =\n+      \"a2b27aec-77bd-46dd-8c8c-39611a333331:user1:11000:21000:spi-user1:abcf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine2 =\n+      \"#i2j27aec-77bd-46dd-8c8c-39611a333331:user2:41000:21000:spi-user2:mnof86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine3 =\n+      \"c2d27aec-77bd-46dd-8c8c-39611a333331:user2:21000:21000:spi-user2:deff86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine4 = \"e2f27aec-77bd-46dd-8c8c-39611a333331c\" + NEW_LINE;\n+  private static String testUserDataLine5 =\n+      \"g2h27aec-77bd-46dd-8c8c-39611a333331:user4:41000:21000:spi-user4:jklf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine6 = \"          \" + NEW_LINE;\n+  private static String testUserDataLine7 =\n+      \"i2j27aec-77bd-46dd-8c8c-39611a333331:user5:41000:21000:spi-user5:mknf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+\n+  private static String testGroupDataLine1 = \"1d23024d-957c-4456-aac1-a57f9e2de914:group1:21000:sgp-group1\" + NEW_LINE;\n+  private static String testGroupDataLine2 = \"3d43024d-957c-4456-aac1-a57f9e2de914:group2:21000:sgp-group2\" + NEW_LINE;\n+  private static String testGroupDataLine3 = \"5d63024d-957c-4456-aac1-a57f9e2de914\" + NEW_LINE;\n+  private static String testGroupDataLine4 = \"          \" + NEW_LINE;\n+  private static String testGroupDataLine5 = \"7d83024d-957c-4456-aac1-a57f9e2de914:group4:21000:sgp-group4\" + NEW_LINE;\n+\n+  @BeforeClass\n+  public static void init() throws IOException {\n+    userMappingFile = tempDir.newFile(\"user-mapping.conf\");\n+    groupMappingFile = tempDir.newFile(\"group-mapping.conf\");\n+\n+    //Stage data for user mapping\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine1, Charset.forName(\"UTF-8\"), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyNzQ3Mg=="}, "originalCommit": {"oid": "ad2fb3918f64fca6e78295911f1c467f48c828f2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjA0MzkzOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestTextFileBasedIdentityHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxNzoyOVrOGXoMkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjozMDowMVrOGX5KuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTAxMQ==", "bodyText": "you are expecting the lookup to raise an IOE?\nI'd prefer using LambaTestUtils.intercept, as the assertion raised there will include the string value of the closure if it unexpectedly didn't fail. Better for debugging", "url": "https://github.com/apache/hadoop/pull/1978#discussion_r427429011", "createdAt": "2020-05-19T16:17:29Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestTextFileBasedIdentityHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.hadoop.fs.azurebfs.utils.TextFileBasedIdentityHandler;\n+\n+public class TestTextFileBasedIdentityHandler {\n+\n+  @ClassRule\n+  public static TemporaryFolder tempDir = new TemporaryFolder();\n+  private static File userMappingFile = null;\n+  private static File groupMappingFile = null;\n+  private static final String NEW_LINE = \"\\n\";\n+  private static String testUserDataLine1 =\n+      \"a2b27aec-77bd-46dd-8c8c-39611a333331:user1:11000:21000:spi-user1:abcf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine2 =\n+      \"#i2j27aec-77bd-46dd-8c8c-39611a333331:user2:41000:21000:spi-user2:mnof86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine3 =\n+      \"c2d27aec-77bd-46dd-8c8c-39611a333331:user2:21000:21000:spi-user2:deff86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine4 = \"e2f27aec-77bd-46dd-8c8c-39611a333331c\" + NEW_LINE;\n+  private static String testUserDataLine5 =\n+      \"g2h27aec-77bd-46dd-8c8c-39611a333331:user4:41000:21000:spi-user4:jklf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine6 = \"          \" + NEW_LINE;\n+  private static String testUserDataLine7 =\n+      \"i2j27aec-77bd-46dd-8c8c-39611a333331:user5:41000:21000:spi-user5:mknf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+\n+  private static String testGroupDataLine1 = \"1d23024d-957c-4456-aac1-a57f9e2de914:group1:21000:sgp-group1\" + NEW_LINE;\n+  private static String testGroupDataLine2 = \"3d43024d-957c-4456-aac1-a57f9e2de914:group2:21000:sgp-group2\" + NEW_LINE;\n+  private static String testGroupDataLine3 = \"5d63024d-957c-4456-aac1-a57f9e2de914\" + NEW_LINE;\n+  private static String testGroupDataLine4 = \"          \" + NEW_LINE;\n+  private static String testGroupDataLine5 = \"7d83024d-957c-4456-aac1-a57f9e2de914:group4:21000:sgp-group4\" + NEW_LINE;\n+\n+  @BeforeClass\n+  public static void init() throws IOException {\n+    userMappingFile = tempDir.newFile(\"user-mapping.conf\");\n+    groupMappingFile = tempDir.newFile(\"group-mapping.conf\");\n+\n+    //Stage data for user mapping\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine1, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine2, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine3, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine4, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine5, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine6, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine7, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, NEW_LINE, Charset.forName(\"UTF-8\"), true);\n+\n+    //Stage data for group mapping\n+    FileUtils.writeStringToFile(groupMappingFile, testGroupDataLine1, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(groupMappingFile, testGroupDataLine2, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(groupMappingFile, testGroupDataLine3, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(groupMappingFile, testGroupDataLine4, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(groupMappingFile, testGroupDataLine5, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(groupMappingFile, NEW_LINE, Charset.forName(\"UTF-8\"), true);\n+  }\n+\n+  private void assertUserLookup(TextFileBasedIdentityHandler handler, String userInTest, String expectedUser)\n+      throws IOException {\n+    String actualUser = handler.lookupForLocalUserIdentity(userInTest);\n+    Assert.assertEquals(\"Wrong user identity for \", expectedUser, actualUser);\n+  }\n+\n+  @Test\n+  public void testLookupForUser() throws IOException {\n+    TextFileBasedIdentityHandler handler =\n+        new TextFileBasedIdentityHandler(userMappingFile.getPath(), groupMappingFile.getPath());\n+\n+    //Success scenario =>  user in test -> user2.\n+    assertUserLookup(handler, testUserDataLine3.split(\":\")[0], testUserDataLine3.split(\":\")[1]);\n+\n+    //No username found in the mapping file.\n+    assertUserLookup(handler, \"bogusIdentity\", \"\");\n+\n+    //Edge case when username is empty string.\n+    assertUserLookup(handler, \"\", \"\");\n+  }\n+\n+  @Test(expected = IOException.class)\n+  public void testLookupForUserFileNotFound() throws IOException {\n+    TextFileBasedIdentityHandler handler =\n+        new TextFileBasedIdentityHandler(userMappingFile.getPath() + \".test\", groupMappingFile.getPath());\n+    assertUserLookup(handler, testUserDataLine3.split(\":\")[0], \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2fb3918f64fca6e78295911f1c467f48c828f2"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwNzA2NQ==", "bodyText": "Thanks for recommending cool utility, made appropriate changes.", "url": "https://github.com/apache/hadoop/pull/1978#discussion_r427707065", "createdAt": "2020-05-20T02:30:01Z", "author": {"login": "amarnathkarthik"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestTextFileBasedIdentityHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.hadoop.fs.azurebfs.utils.TextFileBasedIdentityHandler;\n+\n+public class TestTextFileBasedIdentityHandler {\n+\n+  @ClassRule\n+  public static TemporaryFolder tempDir = new TemporaryFolder();\n+  private static File userMappingFile = null;\n+  private static File groupMappingFile = null;\n+  private static final String NEW_LINE = \"\\n\";\n+  private static String testUserDataLine1 =\n+      \"a2b27aec-77bd-46dd-8c8c-39611a333331:user1:11000:21000:spi-user1:abcf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine2 =\n+      \"#i2j27aec-77bd-46dd-8c8c-39611a333331:user2:41000:21000:spi-user2:mnof86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine3 =\n+      \"c2d27aec-77bd-46dd-8c8c-39611a333331:user2:21000:21000:spi-user2:deff86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine4 = \"e2f27aec-77bd-46dd-8c8c-39611a333331c\" + NEW_LINE;\n+  private static String testUserDataLine5 =\n+      \"g2h27aec-77bd-46dd-8c8c-39611a333331:user4:41000:21000:spi-user4:jklf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+  private static String testUserDataLine6 = \"          \" + NEW_LINE;\n+  private static String testUserDataLine7 =\n+      \"i2j27aec-77bd-46dd-8c8c-39611a333331:user5:41000:21000:spi-user5:mknf86e9-5a5b-49e2-a253-f5c9e2afd4ec\"\n+          + NEW_LINE;\n+\n+  private static String testGroupDataLine1 = \"1d23024d-957c-4456-aac1-a57f9e2de914:group1:21000:sgp-group1\" + NEW_LINE;\n+  private static String testGroupDataLine2 = \"3d43024d-957c-4456-aac1-a57f9e2de914:group2:21000:sgp-group2\" + NEW_LINE;\n+  private static String testGroupDataLine3 = \"5d63024d-957c-4456-aac1-a57f9e2de914\" + NEW_LINE;\n+  private static String testGroupDataLine4 = \"          \" + NEW_LINE;\n+  private static String testGroupDataLine5 = \"7d83024d-957c-4456-aac1-a57f9e2de914:group4:21000:sgp-group4\" + NEW_LINE;\n+\n+  @BeforeClass\n+  public static void init() throws IOException {\n+    userMappingFile = tempDir.newFile(\"user-mapping.conf\");\n+    groupMappingFile = tempDir.newFile(\"group-mapping.conf\");\n+\n+    //Stage data for user mapping\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine1, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine2, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine3, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine4, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine5, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine6, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, testUserDataLine7, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(userMappingFile, NEW_LINE, Charset.forName(\"UTF-8\"), true);\n+\n+    //Stage data for group mapping\n+    FileUtils.writeStringToFile(groupMappingFile, testGroupDataLine1, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(groupMappingFile, testGroupDataLine2, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(groupMappingFile, testGroupDataLine3, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(groupMappingFile, testGroupDataLine4, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(groupMappingFile, testGroupDataLine5, Charset.forName(\"UTF-8\"), true);\n+    FileUtils.writeStringToFile(groupMappingFile, NEW_LINE, Charset.forName(\"UTF-8\"), true);\n+  }\n+\n+  private void assertUserLookup(TextFileBasedIdentityHandler handler, String userInTest, String expectedUser)\n+      throws IOException {\n+    String actualUser = handler.lookupForLocalUserIdentity(userInTest);\n+    Assert.assertEquals(\"Wrong user identity for \", expectedUser, actualUser);\n+  }\n+\n+  @Test\n+  public void testLookupForUser() throws IOException {\n+    TextFileBasedIdentityHandler handler =\n+        new TextFileBasedIdentityHandler(userMappingFile.getPath(), groupMappingFile.getPath());\n+\n+    //Success scenario =>  user in test -> user2.\n+    assertUserLookup(handler, testUserDataLine3.split(\":\")[0], testUserDataLine3.split(\":\")[1]);\n+\n+    //No username found in the mapping file.\n+    assertUserLookup(handler, \"bogusIdentity\", \"\");\n+\n+    //Edge case when username is empty string.\n+    assertUserLookup(handler, \"\", \"\");\n+  }\n+\n+  @Test(expected = IOException.class)\n+  public void testLookupForUserFileNotFound() throws IOException {\n+    TextFileBasedIdentityHandler handler =\n+        new TextFileBasedIdentityHandler(userMappingFile.getPath() + \".test\", groupMappingFile.getPath());\n+    assertUserLookup(handler, testUserDataLine3.split(\":\")[0], \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTAxMQ=="}, "originalCommit": {"oid": "ad2fb3918f64fca6e78295911f1c467f48c828f2"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3534, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}