{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNzAzNjk0", "number": 2417, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNDoxMjoxM1rOE0OeUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMToxMDozOFrOFFV2WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTk4NTQ1OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNDoxMjoxM1rOHr1xkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjo1Mjo0OVrOHt1lkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczMTg1Nw==", "bodyText": "Change to\nGenerating test run configurations and test triggers over various config combinations", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r515731857", "createdAt": "2020-11-02T04:12:13Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "diffHunk": "@@ -357,6 +357,34 @@ The Huge File tests validate Azure storages's ability to handle large files \u2014t\n Tests at this scale are slow: they are best executed from hosts running in\n the cloud infrastructure where the storage endpoint is based.\n \n+##No test no review: Run different combinations of tests using the runtests.sh script", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczMjM3NQ==", "bodyText": "Also move under \"Testing Azure ABFS Client\"", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r515732375", "createdAt": "2020-11-02T04:14:55Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "diffHunk": "@@ -357,6 +357,34 @@ The Huge File tests validate Azure storages's ability to handle large files \u2014t\n Tests at this scale are slow: they are best executed from hosts running in\n the cloud infrastructure where the storage endpoint is based.\n \n+##No test no review: Run different combinations of tests using the runtests.sh script", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczMTg1Nw=="}, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyNTkzNg==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r517825936", "createdAt": "2020-11-05T06:52:49Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "diffHunk": "@@ -357,6 +357,34 @@ The Huge File tests validate Azure storages's ability to handle large files \u2014t\n Tests at this scale are slow: they are best executed from hosts running in\n the cloud infrastructure where the storage endpoint is based.\n \n+##No test no review: Run different combinations of tests using the runtests.sh script", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczMTg1Nw=="}, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA1NDEyOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowMjozOFrOHr2WoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjo1Mjo1N1rOHt1ltA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MTM0NA==", "bodyText": "Change to:\nTo simplify the testing across various authentication and features combinations that are mandatory for a PR, script dev-support/testrun-scripts/runTest.sh should be used. Once the script is updated with relevant config settings for various test combinations, it will:\n\nAuto-generate configs specific to each test combinations\nRun tests for all combinations\nSummarize results across all the test combination runs.\n\nAs a pre-requiste step, fill config values for test accounts and credentials needed for authentication in src/test/resources/azure-auth-keys.xml.template  and rename as src/test/resources/azure-auth-keys.xml.\nTo add a new test combination: Mandatory test combinations for PR validation are already pre-filled in dev-support/testrun-scripts/runTest.sh. If a new one needs to be added, add a combination set within dev-support/testrun-scripts/runTest.sh similar to the ones already defined and\n\nProvide a new combination name\nUpdate properties and values array which need to be effective for the test combination\nCall generateConfigs\n\nTo run PR validation: Running command\n\nrunTest.sh -testCombination #combinationname# or runTest.sh -tc #combinationname# : will generate configurations effective for that test combination and also run the test.\nrunTest.sh -testCombination all or runTest.sh -tc all : will generate configurations for each of the combinations defined and run tests.\n\nTest logs: <Put in the para starting \"Once the tests are completed\", with the last line modified as :\nWhen run for PR validation, the consolidated test results needs to be pasted into the PR comment section.>\nTo generate config for use in IDE: Running command\nrunTest.sh -generateConfig #combinationname# or runTest.sh -gc #combinationname#\nwill update the effective config relevant for the specific test combination. Hence the same config files used by the mvn test runs can be used for IDE without any manual updates needed within config file.\nOther command line options:\n\nThread count : ABFS mvn tests are run in parallel mode. Tests by default are run with 8 thread count. It can be changed by providing -t #ThreadCount#", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r515741344", "createdAt": "2020-11-02T05:02:38Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "diffHunk": "@@ -357,6 +357,34 @@ The Huge File tests validate Azure storages's ability to handle large files \u2014t\n Tests at this scale are slow: they are best executed from hosts running in\n the cloud infrastructure where the storage endpoint is based.\n \n+##No test no review: Run different combinations of tests using the runtests.sh script\n+\n+This is the expected way in which the tests have to be ran before raising a PR.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NTQ5Mg==", "bodyText": "Actually rewrite the Test logs section as below:\nTest runs will create a folder within dev-support/testlogs to save the test logs. Folder name will be the test start timestamp. The mvn test command line logs for each combination will be saved into a file as Test-Logs -$combination into this folder. Incase of any failures, this file will have the failure exception stack.\nAt the end of the test run, the consolidated results of all the combination runs will be saved into a file as Test-Results.log in the same folder. When run for PR validation, the consolidated test results needs to be pasted into the PR comment section.", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r515745492", "createdAt": "2020-11-02T05:23:15Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "diffHunk": "@@ -357,6 +357,34 @@ The Huge File tests validate Azure storages's ability to handle large files \u2014t\n Tests at this scale are slow: they are best executed from hosts running in\n the cloud infrastructure where the storage endpoint is based.\n \n+##No test no review: Run different combinations of tests using the runtests.sh script\n+\n+This is the expected way in which the tests have to be ran before raising a PR.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MTM0NA=="}, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyNTk3Mg==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r517825972", "createdAt": "2020-11-05T06:52:57Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "diffHunk": "@@ -357,6 +357,34 @@ The Huge File tests validate Azure storages's ability to handle large files \u2014t\n Tests at this scale are slow: they are best executed from hosts running in\n the cloud infrastructure where the storage endpoint is based.\n \n+##No test no review: Run different combinations of tests using the runtests.sh script\n+\n+This is the expected way in which the tests have to be ran before raising a PR.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MTM0NA=="}, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA1NjE2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowNDoyMVrOHr2Xxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjo1MToyMVrOHt1jjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MTYzOQ==", "bodyText": "What is the difference between -a and -c ? Just one option that can take in a combination name or 'all' would be sufficient ?", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r515741639", "createdAt": "2020-11-02T05:04:21Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "diffHunk": "@@ -0,0 +1,224 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+testresourcesdir=src/test/resources\n+combconfsdir=$testresourcesdir/combconfs\n+combtestfile=$testresourcesdir/abfs-combination-test-configs.xml\n+\n+shouldbuild=1\n+\n+logdir=dev-support/testlogs\n+testresultsregex=\"Results:(\\n|.)*?Tests run:\"\n+testresultsfilename=\n+starttime=\n+threadcount=\n+defaultthreadcount=8\n+\n+properties=\n+values=\n+\n+validate() {\n+  if [ -z \"$threadcount\" ] ; then\n+    threadcount=$defaultthreadcount\n+  fi\n+  numberegex='^[0-9]+$'\n+  if ! [[ $threadcount =~ $numberegex ]] ; then\n+    echo \"Exiting. The script param (threadcount) should be a number\"\n+    exit -1\n+  fi\n+  if [ -z \"$combination\" ]; then\n+   echo \"Exiting. combination cannot be empty\"\n+   exit -1\n+  fi\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -lt 1 ] || [ \"$valuessize\" -lt 1 ] || [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Both properties and values arrays has to be populated and of same size. Please check for combination $combination\"\n+    exit -1\n+  fi\n+\n+  for filename in \"${combinations[@]}\"; do\n+    if [[ ! -f \"$combconfsdir/$filename.xml\" ]]; then\n+      echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+      exit -1\n+    fi\n+  done\n+}\n+\n+checkdependencies() {\n+  if ! [ \"$(command -v pcregrep)\" ]; then\n+    echo \"Exiting. pcregrep is required to run the script.\"\n+    exit -1\n+  fi\n+  if ! [ \"$(command -v xmlstarlet)\" ]; then\n+    echo \"Exiting. xmlstarlet is required to run the script.\"\n+    exit -1\n+  fi\n+}\n+\n+cleancombinationconfigs() {\n+  rm -rf $combconfsdir\n+  mkdir -p $combconfsdir\n+}\n+\n+generateconfigs() {\n+  combconffile=\"$combconfsdir/$combination.xml\"\n+  rm -rf \"$combconffile\"\n+  cat > \"$combconffile\" << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Number of properties and values differ for $combination\"\n+    exit -1\n+  fi\n+  for ((i = 0; i < propertiessize; i++)); do\n+    key=${properties[$i]}\n+    val=${values[$i]}\n+    changeconf \"$key\" \"$val\"\n+  done\n+  formatxml \"$combconffile\"\n+}\n+\n+formatxml() {\n+  xmlstarlet fo -s 2 \"$1\" > \"$1.tmp\"\n+  mv \"$1.tmp\" \"$1\"\n+}\n+\n+setactiveconf() {\n+  if [[ ! -f \"$combconfsdir/$combination.xml\" ]]; then\n+    echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+    exit -1\n+  fi\n+  rm -rf $combtestfile\n+  cat > $combtestfile << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+  xmlstarlet ed -P -L -s /configuration -t elem -n include -v \"\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n href -v \"combconfs/$combination.xml\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n xmlns -v \"http://www.w3.org/2001/XInclude\" $combtestfile\n+  formatxml $combtestfile\n+}\n+\n+changeconf() {\n+  xmlstarlet ed -P -L -d \"/configuration/property[name='$1']\" \"$combconffile\"\n+  xmlstarlet ed -P -L -s /configuration -t elem -n propertyTMP -v \"\" -s /configuration/propertyTMP -t elem -n name -v \"$1\" -r /configuration/propertyTMP -v property \"$combconffile\"\n+  if ! xmlstarlet ed -P -L -s \"/configuration/property[name='$1']\" -t elem -n value -v \"$2\" \"$combconffile\"\n+  then\n+    echo \"Exiting. Changing config property failed.\"\n+    exit -1\n+  fi\n+}\n+\n+summary() {\n+  {\n+    echo \"\"\n+    echo \"$combination\"\n+    echo \"========================\"\n+    pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+  } >> \"$testresultsfilename\"\n+  printf \"\\n----- Test results -----\\n\"\n+  pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+\n+  secondstaken=$((ENDTIME - STARTTIME))\n+  mins=$((secondstaken / 60))\n+  secs=$((secondstaken % 60))\n+  printf \"\\nTime taken: %s mins %s secs.\\n\" \"$mins\" \"$secs\"\n+  echo \"Find test logs for the combination ($combination) in: $testlogfilename\"\n+  echo \"Find consolidated test results in: $testresultsfilename\"\n+  echo \"----------\"\n+}\n+\n+init() {\n+  checkdependencies\n+  if [[ \"$shouldbuild\" -eq \"1\" ]]; then\n+    if ! mvn clean install -DskipTests\n+    then\n+      echo \"\"\n+      echo \"Exiting. Build failed.\"\n+      exit -1\n+    fi\n+  fi\n+  starttime=$(date +\"%Y-%m-%d_%H-%M-%S\")\n+  mkdir -p \"$logdir\"\n+  testresultsfilename=\"$logdir/$starttime/Test-Results.txt\"\n+  if [[ -z \"$combinations\" ]]; then\n+    combinations=( $( ls $combconfsdir/*.xml ))\n+  fi\n+}\n+\n+runtests() {\n+  parseoptions \"$@\"\n+  validate\n+  if [ -z \"$starttime\" ]; then\n+    init\n+  fi\n+  shopt -s nullglob\n+  for combconffile in \"${combinations[@]}\"; do\n+    STARTTIME=$(date +%s)\n+    combination=$(basename \"$combconffile\" .xml)\n+    mkdir -p \"$logdir/$starttime\"\n+    testlogfilename=\"$logdir/$starttime/Test-Logs-$combination.txt\"\n+    printf \"\\nRunning the combination: %s...\" \"$combination\"\n+    setactiveconf\n+    mvn -T 1C -Dparallel-tests=abfs -Dscale -DtestsThreadCount=$threadcount verify >> \"$testlogfilename\" || true\n+    ENDTIME=$(date +%s)\n+    summary\n+  done\n+}\n+\n+begin() {\n+  cleancombinationconfigs\n+}\n+\n+parseoptions() {\n+  while getopts \":c:a:n?t:\" option; do\n+    case \"${option}\" in\n+      a)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        setactiveconf\n+        exit 0\n+        ;;\n+      c)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        combinations+=(\"$combination\")\n+        ;;\n+      n)\n+        shouldbuild=0\n+        ;;\n+      t)\n+        threadcount=$OPTARG\n+        ;;\n+      *|?|h)\n+        echo \"Usage: $0 [-n] [-a COMBINATION_NAME] [-c COMBINATION_NAME] [-t THREAD_COUNT]\"\n+        echo \"\"\n+        echo \"Where:\"\n+        echo \"  -a COMBINATION_NAME   Specify the combination name which needs to be activated.\"\n+        echo \"  -c COMBINATION_NAME   Specify the combination name for test runs\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyNTQyMg==", "bodyText": "-a for activating a combination for IDE\n-c to run a specific test\nto run all tests, simply run dev-support/testrun-scripts/runtests.sh", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r517825422", "createdAt": "2020-11-05T06:51:21Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "diffHunk": "@@ -0,0 +1,224 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+testresourcesdir=src/test/resources\n+combconfsdir=$testresourcesdir/combconfs\n+combtestfile=$testresourcesdir/abfs-combination-test-configs.xml\n+\n+shouldbuild=1\n+\n+logdir=dev-support/testlogs\n+testresultsregex=\"Results:(\\n|.)*?Tests run:\"\n+testresultsfilename=\n+starttime=\n+threadcount=\n+defaultthreadcount=8\n+\n+properties=\n+values=\n+\n+validate() {\n+  if [ -z \"$threadcount\" ] ; then\n+    threadcount=$defaultthreadcount\n+  fi\n+  numberegex='^[0-9]+$'\n+  if ! [[ $threadcount =~ $numberegex ]] ; then\n+    echo \"Exiting. The script param (threadcount) should be a number\"\n+    exit -1\n+  fi\n+  if [ -z \"$combination\" ]; then\n+   echo \"Exiting. combination cannot be empty\"\n+   exit -1\n+  fi\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -lt 1 ] || [ \"$valuessize\" -lt 1 ] || [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Both properties and values arrays has to be populated and of same size. Please check for combination $combination\"\n+    exit -1\n+  fi\n+\n+  for filename in \"${combinations[@]}\"; do\n+    if [[ ! -f \"$combconfsdir/$filename.xml\" ]]; then\n+      echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+      exit -1\n+    fi\n+  done\n+}\n+\n+checkdependencies() {\n+  if ! [ \"$(command -v pcregrep)\" ]; then\n+    echo \"Exiting. pcregrep is required to run the script.\"\n+    exit -1\n+  fi\n+  if ! [ \"$(command -v xmlstarlet)\" ]; then\n+    echo \"Exiting. xmlstarlet is required to run the script.\"\n+    exit -1\n+  fi\n+}\n+\n+cleancombinationconfigs() {\n+  rm -rf $combconfsdir\n+  mkdir -p $combconfsdir\n+}\n+\n+generateconfigs() {\n+  combconffile=\"$combconfsdir/$combination.xml\"\n+  rm -rf \"$combconffile\"\n+  cat > \"$combconffile\" << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Number of properties and values differ for $combination\"\n+    exit -1\n+  fi\n+  for ((i = 0; i < propertiessize; i++)); do\n+    key=${properties[$i]}\n+    val=${values[$i]}\n+    changeconf \"$key\" \"$val\"\n+  done\n+  formatxml \"$combconffile\"\n+}\n+\n+formatxml() {\n+  xmlstarlet fo -s 2 \"$1\" > \"$1.tmp\"\n+  mv \"$1.tmp\" \"$1\"\n+}\n+\n+setactiveconf() {\n+  if [[ ! -f \"$combconfsdir/$combination.xml\" ]]; then\n+    echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+    exit -1\n+  fi\n+  rm -rf $combtestfile\n+  cat > $combtestfile << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+  xmlstarlet ed -P -L -s /configuration -t elem -n include -v \"\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n href -v \"combconfs/$combination.xml\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n xmlns -v \"http://www.w3.org/2001/XInclude\" $combtestfile\n+  formatxml $combtestfile\n+}\n+\n+changeconf() {\n+  xmlstarlet ed -P -L -d \"/configuration/property[name='$1']\" \"$combconffile\"\n+  xmlstarlet ed -P -L -s /configuration -t elem -n propertyTMP -v \"\" -s /configuration/propertyTMP -t elem -n name -v \"$1\" -r /configuration/propertyTMP -v property \"$combconffile\"\n+  if ! xmlstarlet ed -P -L -s \"/configuration/property[name='$1']\" -t elem -n value -v \"$2\" \"$combconffile\"\n+  then\n+    echo \"Exiting. Changing config property failed.\"\n+    exit -1\n+  fi\n+}\n+\n+summary() {\n+  {\n+    echo \"\"\n+    echo \"$combination\"\n+    echo \"========================\"\n+    pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+  } >> \"$testresultsfilename\"\n+  printf \"\\n----- Test results -----\\n\"\n+  pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+\n+  secondstaken=$((ENDTIME - STARTTIME))\n+  mins=$((secondstaken / 60))\n+  secs=$((secondstaken % 60))\n+  printf \"\\nTime taken: %s mins %s secs.\\n\" \"$mins\" \"$secs\"\n+  echo \"Find test logs for the combination ($combination) in: $testlogfilename\"\n+  echo \"Find consolidated test results in: $testresultsfilename\"\n+  echo \"----------\"\n+}\n+\n+init() {\n+  checkdependencies\n+  if [[ \"$shouldbuild\" -eq \"1\" ]]; then\n+    if ! mvn clean install -DskipTests\n+    then\n+      echo \"\"\n+      echo \"Exiting. Build failed.\"\n+      exit -1\n+    fi\n+  fi\n+  starttime=$(date +\"%Y-%m-%d_%H-%M-%S\")\n+  mkdir -p \"$logdir\"\n+  testresultsfilename=\"$logdir/$starttime/Test-Results.txt\"\n+  if [[ -z \"$combinations\" ]]; then\n+    combinations=( $( ls $combconfsdir/*.xml ))\n+  fi\n+}\n+\n+runtests() {\n+  parseoptions \"$@\"\n+  validate\n+  if [ -z \"$starttime\" ]; then\n+    init\n+  fi\n+  shopt -s nullglob\n+  for combconffile in \"${combinations[@]}\"; do\n+    STARTTIME=$(date +%s)\n+    combination=$(basename \"$combconffile\" .xml)\n+    mkdir -p \"$logdir/$starttime\"\n+    testlogfilename=\"$logdir/$starttime/Test-Logs-$combination.txt\"\n+    printf \"\\nRunning the combination: %s...\" \"$combination\"\n+    setactiveconf\n+    mvn -T 1C -Dparallel-tests=abfs -Dscale -DtestsThreadCount=$threadcount verify >> \"$testlogfilename\" || true\n+    ENDTIME=$(date +%s)\n+    summary\n+  done\n+}\n+\n+begin() {\n+  cleancombinationconfigs\n+}\n+\n+parseoptions() {\n+  while getopts \":c:a:n?t:\" option; do\n+    case \"${option}\" in\n+      a)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        setactiveconf\n+        exit 0\n+        ;;\n+      c)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        combinations+=(\"$combination\")\n+        ;;\n+      n)\n+        shouldbuild=0\n+        ;;\n+      t)\n+        threadcount=$OPTARG\n+        ;;\n+      *|?|h)\n+        echo \"Usage: $0 [-n] [-a COMBINATION_NAME] [-c COMBINATION_NAME] [-t THREAD_COUNT]\"\n+        echo \"\"\n+        echo \"Where:\"\n+        echo \"  -a COMBINATION_NAME   Specify the combination name which needs to be activated.\"\n+        echo \"  -c COMBINATION_NAME   Specify the combination name for test runs\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MTYzOQ=="}, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA2MDM4OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowNzowNFrOHr2aBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjo1Mjo0MVrOHt1lVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MjIxNQ==", "bodyText": "Do not provide 'dont build' option. When each of the test combo triggers, it will start with build and a failure will not be visible until the test completes. Better to know at the start itself if build has a prob so that the dev can stop further run of the script.", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r515742215", "createdAt": "2020-11-02T05:07:04Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "diffHunk": "@@ -0,0 +1,224 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+testresourcesdir=src/test/resources\n+combconfsdir=$testresourcesdir/combconfs\n+combtestfile=$testresourcesdir/abfs-combination-test-configs.xml\n+\n+shouldbuild=1\n+\n+logdir=dev-support/testlogs\n+testresultsregex=\"Results:(\\n|.)*?Tests run:\"\n+testresultsfilename=\n+starttime=\n+threadcount=\n+defaultthreadcount=8\n+\n+properties=\n+values=\n+\n+validate() {\n+  if [ -z \"$threadcount\" ] ; then\n+    threadcount=$defaultthreadcount\n+  fi\n+  numberegex='^[0-9]+$'\n+  if ! [[ $threadcount =~ $numberegex ]] ; then\n+    echo \"Exiting. The script param (threadcount) should be a number\"\n+    exit -1\n+  fi\n+  if [ -z \"$combination\" ]; then\n+   echo \"Exiting. combination cannot be empty\"\n+   exit -1\n+  fi\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -lt 1 ] || [ \"$valuessize\" -lt 1 ] || [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Both properties and values arrays has to be populated and of same size. Please check for combination $combination\"\n+    exit -1\n+  fi\n+\n+  for filename in \"${combinations[@]}\"; do\n+    if [[ ! -f \"$combconfsdir/$filename.xml\" ]]; then\n+      echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+      exit -1\n+    fi\n+  done\n+}\n+\n+checkdependencies() {\n+  if ! [ \"$(command -v pcregrep)\" ]; then\n+    echo \"Exiting. pcregrep is required to run the script.\"\n+    exit -1\n+  fi\n+  if ! [ \"$(command -v xmlstarlet)\" ]; then\n+    echo \"Exiting. xmlstarlet is required to run the script.\"\n+    exit -1\n+  fi\n+}\n+\n+cleancombinationconfigs() {\n+  rm -rf $combconfsdir\n+  mkdir -p $combconfsdir\n+}\n+\n+generateconfigs() {\n+  combconffile=\"$combconfsdir/$combination.xml\"\n+  rm -rf \"$combconffile\"\n+  cat > \"$combconffile\" << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Number of properties and values differ for $combination\"\n+    exit -1\n+  fi\n+  for ((i = 0; i < propertiessize; i++)); do\n+    key=${properties[$i]}\n+    val=${values[$i]}\n+    changeconf \"$key\" \"$val\"\n+  done\n+  formatxml \"$combconffile\"\n+}\n+\n+formatxml() {\n+  xmlstarlet fo -s 2 \"$1\" > \"$1.tmp\"\n+  mv \"$1.tmp\" \"$1\"\n+}\n+\n+setactiveconf() {\n+  if [[ ! -f \"$combconfsdir/$combination.xml\" ]]; then\n+    echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+    exit -1\n+  fi\n+  rm -rf $combtestfile\n+  cat > $combtestfile << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+  xmlstarlet ed -P -L -s /configuration -t elem -n include -v \"\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n href -v \"combconfs/$combination.xml\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n xmlns -v \"http://www.w3.org/2001/XInclude\" $combtestfile\n+  formatxml $combtestfile\n+}\n+\n+changeconf() {\n+  xmlstarlet ed -P -L -d \"/configuration/property[name='$1']\" \"$combconffile\"\n+  xmlstarlet ed -P -L -s /configuration -t elem -n propertyTMP -v \"\" -s /configuration/propertyTMP -t elem -n name -v \"$1\" -r /configuration/propertyTMP -v property \"$combconffile\"\n+  if ! xmlstarlet ed -P -L -s \"/configuration/property[name='$1']\" -t elem -n value -v \"$2\" \"$combconffile\"\n+  then\n+    echo \"Exiting. Changing config property failed.\"\n+    exit -1\n+  fi\n+}\n+\n+summary() {\n+  {\n+    echo \"\"\n+    echo \"$combination\"\n+    echo \"========================\"\n+    pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+  } >> \"$testresultsfilename\"\n+  printf \"\\n----- Test results -----\\n\"\n+  pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+\n+  secondstaken=$((ENDTIME - STARTTIME))\n+  mins=$((secondstaken / 60))\n+  secs=$((secondstaken % 60))\n+  printf \"\\nTime taken: %s mins %s secs.\\n\" \"$mins\" \"$secs\"\n+  echo \"Find test logs for the combination ($combination) in: $testlogfilename\"\n+  echo \"Find consolidated test results in: $testresultsfilename\"\n+  echo \"----------\"\n+}\n+\n+init() {\n+  checkdependencies\n+  if [[ \"$shouldbuild\" -eq \"1\" ]]; then\n+    if ! mvn clean install -DskipTests\n+    then\n+      echo \"\"\n+      echo \"Exiting. Build failed.\"\n+      exit -1\n+    fi\n+  fi\n+  starttime=$(date +\"%Y-%m-%d_%H-%M-%S\")\n+  mkdir -p \"$logdir\"\n+  testresultsfilename=\"$logdir/$starttime/Test-Results.txt\"\n+  if [[ -z \"$combinations\" ]]; then\n+    combinations=( $( ls $combconfsdir/*.xml ))\n+  fi\n+}\n+\n+runtests() {\n+  parseoptions \"$@\"\n+  validate\n+  if [ -z \"$starttime\" ]; then\n+    init\n+  fi\n+  shopt -s nullglob\n+  for combconffile in \"${combinations[@]}\"; do\n+    STARTTIME=$(date +%s)\n+    combination=$(basename \"$combconffile\" .xml)\n+    mkdir -p \"$logdir/$starttime\"\n+    testlogfilename=\"$logdir/$starttime/Test-Logs-$combination.txt\"\n+    printf \"\\nRunning the combination: %s...\" \"$combination\"\n+    setactiveconf\n+    mvn -T 1C -Dparallel-tests=abfs -Dscale -DtestsThreadCount=$threadcount verify >> \"$testlogfilename\" || true\n+    ENDTIME=$(date +%s)\n+    summary\n+  done\n+}\n+\n+begin() {\n+  cleancombinationconfigs\n+}\n+\n+parseoptions() {\n+  while getopts \":c:a:n?t:\" option; do\n+    case \"${option}\" in\n+      a)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        setactiveconf\n+        exit 0\n+        ;;\n+      c)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        combinations+=(\"$combination\")\n+        ;;\n+      n)\n+        shouldbuild=0\n+        ;;\n+      t)\n+        threadcount=$OPTARG\n+        ;;\n+      *|?|h)\n+        echo \"Usage: $0 [-n] [-a COMBINATION_NAME] [-c COMBINATION_NAME] [-t THREAD_COUNT]\"\n+        echo \"\"\n+        echo \"Where:\"\n+        echo \"  -a COMBINATION_NAME   Specify the combination name which needs to be activated.\"\n+        echo \"  -c COMBINATION_NAME   Specify the combination name for test runs\"\n+        echo \"  -n Specify this option if there is no need to build before running the tests\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyNTg3OA==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r517825878", "createdAt": "2020-11-05T06:52:41Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "diffHunk": "@@ -0,0 +1,224 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+testresourcesdir=src/test/resources\n+combconfsdir=$testresourcesdir/combconfs\n+combtestfile=$testresourcesdir/abfs-combination-test-configs.xml\n+\n+shouldbuild=1\n+\n+logdir=dev-support/testlogs\n+testresultsregex=\"Results:(\\n|.)*?Tests run:\"\n+testresultsfilename=\n+starttime=\n+threadcount=\n+defaultthreadcount=8\n+\n+properties=\n+values=\n+\n+validate() {\n+  if [ -z \"$threadcount\" ] ; then\n+    threadcount=$defaultthreadcount\n+  fi\n+  numberegex='^[0-9]+$'\n+  if ! [[ $threadcount =~ $numberegex ]] ; then\n+    echo \"Exiting. The script param (threadcount) should be a number\"\n+    exit -1\n+  fi\n+  if [ -z \"$combination\" ]; then\n+   echo \"Exiting. combination cannot be empty\"\n+   exit -1\n+  fi\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -lt 1 ] || [ \"$valuessize\" -lt 1 ] || [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Both properties and values arrays has to be populated and of same size. Please check for combination $combination\"\n+    exit -1\n+  fi\n+\n+  for filename in \"${combinations[@]}\"; do\n+    if [[ ! -f \"$combconfsdir/$filename.xml\" ]]; then\n+      echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+      exit -1\n+    fi\n+  done\n+}\n+\n+checkdependencies() {\n+  if ! [ \"$(command -v pcregrep)\" ]; then\n+    echo \"Exiting. pcregrep is required to run the script.\"\n+    exit -1\n+  fi\n+  if ! [ \"$(command -v xmlstarlet)\" ]; then\n+    echo \"Exiting. xmlstarlet is required to run the script.\"\n+    exit -1\n+  fi\n+}\n+\n+cleancombinationconfigs() {\n+  rm -rf $combconfsdir\n+  mkdir -p $combconfsdir\n+}\n+\n+generateconfigs() {\n+  combconffile=\"$combconfsdir/$combination.xml\"\n+  rm -rf \"$combconffile\"\n+  cat > \"$combconffile\" << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Number of properties and values differ for $combination\"\n+    exit -1\n+  fi\n+  for ((i = 0; i < propertiessize; i++)); do\n+    key=${properties[$i]}\n+    val=${values[$i]}\n+    changeconf \"$key\" \"$val\"\n+  done\n+  formatxml \"$combconffile\"\n+}\n+\n+formatxml() {\n+  xmlstarlet fo -s 2 \"$1\" > \"$1.tmp\"\n+  mv \"$1.tmp\" \"$1\"\n+}\n+\n+setactiveconf() {\n+  if [[ ! -f \"$combconfsdir/$combination.xml\" ]]; then\n+    echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+    exit -1\n+  fi\n+  rm -rf $combtestfile\n+  cat > $combtestfile << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+  xmlstarlet ed -P -L -s /configuration -t elem -n include -v \"\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n href -v \"combconfs/$combination.xml\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n xmlns -v \"http://www.w3.org/2001/XInclude\" $combtestfile\n+  formatxml $combtestfile\n+}\n+\n+changeconf() {\n+  xmlstarlet ed -P -L -d \"/configuration/property[name='$1']\" \"$combconffile\"\n+  xmlstarlet ed -P -L -s /configuration -t elem -n propertyTMP -v \"\" -s /configuration/propertyTMP -t elem -n name -v \"$1\" -r /configuration/propertyTMP -v property \"$combconffile\"\n+  if ! xmlstarlet ed -P -L -s \"/configuration/property[name='$1']\" -t elem -n value -v \"$2\" \"$combconffile\"\n+  then\n+    echo \"Exiting. Changing config property failed.\"\n+    exit -1\n+  fi\n+}\n+\n+summary() {\n+  {\n+    echo \"\"\n+    echo \"$combination\"\n+    echo \"========================\"\n+    pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+  } >> \"$testresultsfilename\"\n+  printf \"\\n----- Test results -----\\n\"\n+  pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+\n+  secondstaken=$((ENDTIME - STARTTIME))\n+  mins=$((secondstaken / 60))\n+  secs=$((secondstaken % 60))\n+  printf \"\\nTime taken: %s mins %s secs.\\n\" \"$mins\" \"$secs\"\n+  echo \"Find test logs for the combination ($combination) in: $testlogfilename\"\n+  echo \"Find consolidated test results in: $testresultsfilename\"\n+  echo \"----------\"\n+}\n+\n+init() {\n+  checkdependencies\n+  if [[ \"$shouldbuild\" -eq \"1\" ]]; then\n+    if ! mvn clean install -DskipTests\n+    then\n+      echo \"\"\n+      echo \"Exiting. Build failed.\"\n+      exit -1\n+    fi\n+  fi\n+  starttime=$(date +\"%Y-%m-%d_%H-%M-%S\")\n+  mkdir -p \"$logdir\"\n+  testresultsfilename=\"$logdir/$starttime/Test-Results.txt\"\n+  if [[ -z \"$combinations\" ]]; then\n+    combinations=( $( ls $combconfsdir/*.xml ))\n+  fi\n+}\n+\n+runtests() {\n+  parseoptions \"$@\"\n+  validate\n+  if [ -z \"$starttime\" ]; then\n+    init\n+  fi\n+  shopt -s nullglob\n+  for combconffile in \"${combinations[@]}\"; do\n+    STARTTIME=$(date +%s)\n+    combination=$(basename \"$combconffile\" .xml)\n+    mkdir -p \"$logdir/$starttime\"\n+    testlogfilename=\"$logdir/$starttime/Test-Logs-$combination.txt\"\n+    printf \"\\nRunning the combination: %s...\" \"$combination\"\n+    setactiveconf\n+    mvn -T 1C -Dparallel-tests=abfs -Dscale -DtestsThreadCount=$threadcount verify >> \"$testlogfilename\" || true\n+    ENDTIME=$(date +%s)\n+    summary\n+  done\n+}\n+\n+begin() {\n+  cleancombinationconfigs\n+}\n+\n+parseoptions() {\n+  while getopts \":c:a:n?t:\" option; do\n+    case \"${option}\" in\n+      a)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        setactiveconf\n+        exit 0\n+        ;;\n+      c)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        combinations+=(\"$combination\")\n+        ;;\n+      n)\n+        shouldbuild=0\n+        ;;\n+      t)\n+        threadcount=$OPTARG\n+        ;;\n+      *|?|h)\n+        echo \"Usage: $0 [-n] [-a COMBINATION_NAME] [-c COMBINATION_NAME] [-t THREAD_COUNT]\"\n+        echo \"\"\n+        echo \"Where:\"\n+        echo \"  -a COMBINATION_NAME   Specify the combination name which needs to be activated.\"\n+        echo \"  -c COMBINATION_NAME   Specify the combination name for test runs\"\n+        echo \"  -n Specify this option if there is no need to build before running the tests\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MjIxNQ=="}, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA2MTUwOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowODowOFrOHr2aow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjo1MTozM1rOHt1j1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MjM3MQ==", "bodyText": "Had some suggestion on how the options to this script should be. Its added in the documentation review comments. Have a look and we can discuss.", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r515742371", "createdAt": "2020-11-02T05:08:08Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "diffHunk": "@@ -0,0 +1,224 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+testresourcesdir=src/test/resources\n+combconfsdir=$testresourcesdir/combconfs\n+combtestfile=$testresourcesdir/abfs-combination-test-configs.xml\n+\n+shouldbuild=1\n+\n+logdir=dev-support/testlogs\n+testresultsregex=\"Results:(\\n|.)*?Tests run:\"\n+testresultsfilename=\n+starttime=\n+threadcount=\n+defaultthreadcount=8\n+\n+properties=\n+values=\n+\n+validate() {\n+  if [ -z \"$threadcount\" ] ; then\n+    threadcount=$defaultthreadcount\n+  fi\n+  numberegex='^[0-9]+$'\n+  if ! [[ $threadcount =~ $numberegex ]] ; then\n+    echo \"Exiting. The script param (threadcount) should be a number\"\n+    exit -1\n+  fi\n+  if [ -z \"$combination\" ]; then\n+   echo \"Exiting. combination cannot be empty\"\n+   exit -1\n+  fi\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -lt 1 ] || [ \"$valuessize\" -lt 1 ] || [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Both properties and values arrays has to be populated and of same size. Please check for combination $combination\"\n+    exit -1\n+  fi\n+\n+  for filename in \"${combinations[@]}\"; do\n+    if [[ ! -f \"$combconfsdir/$filename.xml\" ]]; then\n+      echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+      exit -1\n+    fi\n+  done\n+}\n+\n+checkdependencies() {\n+  if ! [ \"$(command -v pcregrep)\" ]; then\n+    echo \"Exiting. pcregrep is required to run the script.\"\n+    exit -1\n+  fi\n+  if ! [ \"$(command -v xmlstarlet)\" ]; then\n+    echo \"Exiting. xmlstarlet is required to run the script.\"\n+    exit -1\n+  fi\n+}\n+\n+cleancombinationconfigs() {\n+  rm -rf $combconfsdir\n+  mkdir -p $combconfsdir\n+}\n+\n+generateconfigs() {\n+  combconffile=\"$combconfsdir/$combination.xml\"\n+  rm -rf \"$combconffile\"\n+  cat > \"$combconffile\" << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Number of properties and values differ for $combination\"\n+    exit -1\n+  fi\n+  for ((i = 0; i < propertiessize; i++)); do\n+    key=${properties[$i]}\n+    val=${values[$i]}\n+    changeconf \"$key\" \"$val\"\n+  done\n+  formatxml \"$combconffile\"\n+}\n+\n+formatxml() {\n+  xmlstarlet fo -s 2 \"$1\" > \"$1.tmp\"\n+  mv \"$1.tmp\" \"$1\"\n+}\n+\n+setactiveconf() {\n+  if [[ ! -f \"$combconfsdir/$combination.xml\" ]]; then\n+    echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+    exit -1\n+  fi\n+  rm -rf $combtestfile\n+  cat > $combtestfile << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+  xmlstarlet ed -P -L -s /configuration -t elem -n include -v \"\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n href -v \"combconfs/$combination.xml\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n xmlns -v \"http://www.w3.org/2001/XInclude\" $combtestfile\n+  formatxml $combtestfile\n+}\n+\n+changeconf() {\n+  xmlstarlet ed -P -L -d \"/configuration/property[name='$1']\" \"$combconffile\"\n+  xmlstarlet ed -P -L -s /configuration -t elem -n propertyTMP -v \"\" -s /configuration/propertyTMP -t elem -n name -v \"$1\" -r /configuration/propertyTMP -v property \"$combconffile\"\n+  if ! xmlstarlet ed -P -L -s \"/configuration/property[name='$1']\" -t elem -n value -v \"$2\" \"$combconffile\"\n+  then\n+    echo \"Exiting. Changing config property failed.\"\n+    exit -1\n+  fi\n+}\n+\n+summary() {\n+  {\n+    echo \"\"\n+    echo \"$combination\"\n+    echo \"========================\"\n+    pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+  } >> \"$testresultsfilename\"\n+  printf \"\\n----- Test results -----\\n\"\n+  pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+\n+  secondstaken=$((ENDTIME - STARTTIME))\n+  mins=$((secondstaken / 60))\n+  secs=$((secondstaken % 60))\n+  printf \"\\nTime taken: %s mins %s secs.\\n\" \"$mins\" \"$secs\"\n+  echo \"Find test logs for the combination ($combination) in: $testlogfilename\"\n+  echo \"Find consolidated test results in: $testresultsfilename\"\n+  echo \"----------\"\n+}\n+\n+init() {\n+  checkdependencies\n+  if [[ \"$shouldbuild\" -eq \"1\" ]]; then\n+    if ! mvn clean install -DskipTests\n+    then\n+      echo \"\"\n+      echo \"Exiting. Build failed.\"\n+      exit -1\n+    fi\n+  fi\n+  starttime=$(date +\"%Y-%m-%d_%H-%M-%S\")\n+  mkdir -p \"$logdir\"\n+  testresultsfilename=\"$logdir/$starttime/Test-Results.txt\"\n+  if [[ -z \"$combinations\" ]]; then\n+    combinations=( $( ls $combconfsdir/*.xml ))\n+  fi\n+}\n+\n+runtests() {\n+  parseoptions \"$@\"\n+  validate\n+  if [ -z \"$starttime\" ]; then\n+    init\n+  fi\n+  shopt -s nullglob\n+  for combconffile in \"${combinations[@]}\"; do\n+    STARTTIME=$(date +%s)\n+    combination=$(basename \"$combconffile\" .xml)\n+    mkdir -p \"$logdir/$starttime\"\n+    testlogfilename=\"$logdir/$starttime/Test-Logs-$combination.txt\"\n+    printf \"\\nRunning the combination: %s...\" \"$combination\"\n+    setactiveconf\n+    mvn -T 1C -Dparallel-tests=abfs -Dscale -DtestsThreadCount=$threadcount verify >> \"$testlogfilename\" || true\n+    ENDTIME=$(date +%s)\n+    summary\n+  done\n+}\n+\n+begin() {\n+  cleancombinationconfigs\n+}\n+\n+parseoptions() {\n+  while getopts \":c:a:n?t:\" option; do\n+    case \"${option}\" in\n+      a)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        setactiveconf\n+        exit 0\n+        ;;\n+      c)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        combinations+=(\"$combination\")\n+        ;;\n+      n)\n+        shouldbuild=0\n+        ;;\n+      t)\n+        threadcount=$OPTARG\n+        ;;\n+      *|?|h)\n+        echo \"Usage: $0 [-n] [-a COMBINATION_NAME] [-c COMBINATION_NAME] [-t THREAD_COUNT]\"\n+        echo \"\"\n+        echo \"Where:\"\n+        echo \"  -a COMBINATION_NAME   Specify the combination name which needs to be activated.\"\n+        echo \"  -c COMBINATION_NAME   Specify the combination name for test runs\"\n+        echo \"  -n Specify this option if there is no need to build before running the tests\"\n+        echo \"  -t THREAD_COUNT       Specify the thread count\"\n+        exit 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyNTQ5Mg==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r517825492", "createdAt": "2020-11-05T06:51:33Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "diffHunk": "@@ -0,0 +1,224 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+testresourcesdir=src/test/resources\n+combconfsdir=$testresourcesdir/combconfs\n+combtestfile=$testresourcesdir/abfs-combination-test-configs.xml\n+\n+shouldbuild=1\n+\n+logdir=dev-support/testlogs\n+testresultsregex=\"Results:(\\n|.)*?Tests run:\"\n+testresultsfilename=\n+starttime=\n+threadcount=\n+defaultthreadcount=8\n+\n+properties=\n+values=\n+\n+validate() {\n+  if [ -z \"$threadcount\" ] ; then\n+    threadcount=$defaultthreadcount\n+  fi\n+  numberegex='^[0-9]+$'\n+  if ! [[ $threadcount =~ $numberegex ]] ; then\n+    echo \"Exiting. The script param (threadcount) should be a number\"\n+    exit -1\n+  fi\n+  if [ -z \"$combination\" ]; then\n+   echo \"Exiting. combination cannot be empty\"\n+   exit -1\n+  fi\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -lt 1 ] || [ \"$valuessize\" -lt 1 ] || [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Both properties and values arrays has to be populated and of same size. Please check for combination $combination\"\n+    exit -1\n+  fi\n+\n+  for filename in \"${combinations[@]}\"; do\n+    if [[ ! -f \"$combconfsdir/$filename.xml\" ]]; then\n+      echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+      exit -1\n+    fi\n+  done\n+}\n+\n+checkdependencies() {\n+  if ! [ \"$(command -v pcregrep)\" ]; then\n+    echo \"Exiting. pcregrep is required to run the script.\"\n+    exit -1\n+  fi\n+  if ! [ \"$(command -v xmlstarlet)\" ]; then\n+    echo \"Exiting. xmlstarlet is required to run the script.\"\n+    exit -1\n+  fi\n+}\n+\n+cleancombinationconfigs() {\n+  rm -rf $combconfsdir\n+  mkdir -p $combconfsdir\n+}\n+\n+generateconfigs() {\n+  combconffile=\"$combconfsdir/$combination.xml\"\n+  rm -rf \"$combconffile\"\n+  cat > \"$combconffile\" << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Number of properties and values differ for $combination\"\n+    exit -1\n+  fi\n+  for ((i = 0; i < propertiessize; i++)); do\n+    key=${properties[$i]}\n+    val=${values[$i]}\n+    changeconf \"$key\" \"$val\"\n+  done\n+  formatxml \"$combconffile\"\n+}\n+\n+formatxml() {\n+  xmlstarlet fo -s 2 \"$1\" > \"$1.tmp\"\n+  mv \"$1.tmp\" \"$1\"\n+}\n+\n+setactiveconf() {\n+  if [[ ! -f \"$combconfsdir/$combination.xml\" ]]; then\n+    echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+    exit -1\n+  fi\n+  rm -rf $combtestfile\n+  cat > $combtestfile << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+  xmlstarlet ed -P -L -s /configuration -t elem -n include -v \"\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n href -v \"combconfs/$combination.xml\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n xmlns -v \"http://www.w3.org/2001/XInclude\" $combtestfile\n+  formatxml $combtestfile\n+}\n+\n+changeconf() {\n+  xmlstarlet ed -P -L -d \"/configuration/property[name='$1']\" \"$combconffile\"\n+  xmlstarlet ed -P -L -s /configuration -t elem -n propertyTMP -v \"\" -s /configuration/propertyTMP -t elem -n name -v \"$1\" -r /configuration/propertyTMP -v property \"$combconffile\"\n+  if ! xmlstarlet ed -P -L -s \"/configuration/property[name='$1']\" -t elem -n value -v \"$2\" \"$combconffile\"\n+  then\n+    echo \"Exiting. Changing config property failed.\"\n+    exit -1\n+  fi\n+}\n+\n+summary() {\n+  {\n+    echo \"\"\n+    echo \"$combination\"\n+    echo \"========================\"\n+    pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+  } >> \"$testresultsfilename\"\n+  printf \"\\n----- Test results -----\\n\"\n+  pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+\n+  secondstaken=$((ENDTIME - STARTTIME))\n+  mins=$((secondstaken / 60))\n+  secs=$((secondstaken % 60))\n+  printf \"\\nTime taken: %s mins %s secs.\\n\" \"$mins\" \"$secs\"\n+  echo \"Find test logs for the combination ($combination) in: $testlogfilename\"\n+  echo \"Find consolidated test results in: $testresultsfilename\"\n+  echo \"----------\"\n+}\n+\n+init() {\n+  checkdependencies\n+  if [[ \"$shouldbuild\" -eq \"1\" ]]; then\n+    if ! mvn clean install -DskipTests\n+    then\n+      echo \"\"\n+      echo \"Exiting. Build failed.\"\n+      exit -1\n+    fi\n+  fi\n+  starttime=$(date +\"%Y-%m-%d_%H-%M-%S\")\n+  mkdir -p \"$logdir\"\n+  testresultsfilename=\"$logdir/$starttime/Test-Results.txt\"\n+  if [[ -z \"$combinations\" ]]; then\n+    combinations=( $( ls $combconfsdir/*.xml ))\n+  fi\n+}\n+\n+runtests() {\n+  parseoptions \"$@\"\n+  validate\n+  if [ -z \"$starttime\" ]; then\n+    init\n+  fi\n+  shopt -s nullglob\n+  for combconffile in \"${combinations[@]}\"; do\n+    STARTTIME=$(date +%s)\n+    combination=$(basename \"$combconffile\" .xml)\n+    mkdir -p \"$logdir/$starttime\"\n+    testlogfilename=\"$logdir/$starttime/Test-Logs-$combination.txt\"\n+    printf \"\\nRunning the combination: %s...\" \"$combination\"\n+    setactiveconf\n+    mvn -T 1C -Dparallel-tests=abfs -Dscale -DtestsThreadCount=$threadcount verify >> \"$testlogfilename\" || true\n+    ENDTIME=$(date +%s)\n+    summary\n+  done\n+}\n+\n+begin() {\n+  cleancombinationconfigs\n+}\n+\n+parseoptions() {\n+  while getopts \":c:a:n?t:\" option; do\n+    case \"${option}\" in\n+      a)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        setactiveconf\n+        exit 0\n+        ;;\n+      c)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        combinations+=(\"$combination\")\n+        ;;\n+      n)\n+        shouldbuild=0\n+        ;;\n+      t)\n+        threadcount=$OPTARG\n+        ;;\n+      *|?|h)\n+        echo \"Usage: $0 [-n] [-a COMBINATION_NAME] [-c COMBINATION_NAME] [-t THREAD_COUNT]\"\n+        echo \"\"\n+        echo \"Where:\"\n+        echo \"  -a COMBINATION_NAME   Specify the combination name which needs to be activated.\"\n+        echo \"  -c COMBINATION_NAME   Specify the combination name for test runs\"\n+        echo \"  -n Specify this option if there is no need to build before running the tests\"\n+        echo \"  -t THREAD_COUNT       Specify the thread count\"\n+        exit 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MjM3MQ=="}, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA2Nzg2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/.gitignore", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToxMjozM1rOHr2eKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjo1MjoyNFrOHt1lAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MzI3NQ==", "bodyText": "Rename to combinationConfigFiles", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r515743275", "createdAt": "2020-11-02T05:12:33Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/.gitignore", "diffHunk": "@@ -1,2 +1,5 @@\n .checkstyle\n-bin/\n\\ No newline at end of file\n+bin/\n+src/test/resources/combconfs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyNTc5NQ==", "bodyText": "done", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r517825795", "createdAt": "2020-11-05T06:52:24Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/.gitignore", "diffHunk": "@@ -1,2 +1,5 @@\n .checkstyle\n-bin/\n\\ No newline at end of file\n+bin/\n+src/test/resources/combconfs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MzI3NQ=="}, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA2ODczOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToxMzoyMlrOHr2esQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjo1MDoyOFrOHt1iWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MzQwOQ==", "bodyText": "Camel case script names", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r515743409", "createdAt": "2020-11-02T05:13:22Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "diffHunk": "@@ -0,0 +1,224 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+testresourcesdir=src/test/resources\n+combconfsdir=$testresourcesdir/combconfs\n+combtestfile=$testresourcesdir/abfs-combination-test-configs.xml\n+\n+shouldbuild=1\n+\n+logdir=dev-support/testlogs\n+testresultsregex=\"Results:(\\n|.)*?Tests run:\"\n+testresultsfilename=\n+starttime=\n+threadcount=\n+defaultthreadcount=8\n+\n+properties=\n+values=\n+\n+validate() {\n+  if [ -z \"$threadcount\" ] ; then\n+    threadcount=$defaultthreadcount\n+  fi\n+  numberegex='^[0-9]+$'\n+  if ! [[ $threadcount =~ $numberegex ]] ; then\n+    echo \"Exiting. The script param (threadcount) should be a number\"\n+    exit -1\n+  fi\n+  if [ -z \"$combination\" ]; then\n+   echo \"Exiting. combination cannot be empty\"\n+   exit -1\n+  fi\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -lt 1 ] || [ \"$valuessize\" -lt 1 ] || [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Both properties and values arrays has to be populated and of same size. Please check for combination $combination\"\n+    exit -1\n+  fi\n+\n+  for filename in \"${combinations[@]}\"; do\n+    if [[ ! -f \"$combconfsdir/$filename.xml\" ]]; then\n+      echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+      exit -1\n+    fi\n+  done\n+}\n+\n+checkdependencies() {\n+  if ! [ \"$(command -v pcregrep)\" ]; then\n+    echo \"Exiting. pcregrep is required to run the script.\"\n+    exit -1\n+  fi\n+  if ! [ \"$(command -v xmlstarlet)\" ]; then\n+    echo \"Exiting. xmlstarlet is required to run the script.\"\n+    exit -1\n+  fi\n+}\n+\n+cleancombinationconfigs() {\n+  rm -rf $combconfsdir\n+  mkdir -p $combconfsdir\n+}\n+\n+generateconfigs() {\n+  combconffile=\"$combconfsdir/$combination.xml\"\n+  rm -rf \"$combconffile\"\n+  cat > \"$combconffile\" << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Number of properties and values differ for $combination\"\n+    exit -1\n+  fi\n+  for ((i = 0; i < propertiessize; i++)); do\n+    key=${properties[$i]}\n+    val=${values[$i]}\n+    changeconf \"$key\" \"$val\"\n+  done\n+  formatxml \"$combconffile\"\n+}\n+\n+formatxml() {\n+  xmlstarlet fo -s 2 \"$1\" > \"$1.tmp\"\n+  mv \"$1.tmp\" \"$1\"\n+}\n+\n+setactiveconf() {\n+  if [[ ! -f \"$combconfsdir/$combination.xml\" ]]; then\n+    echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+    exit -1\n+  fi\n+  rm -rf $combtestfile\n+  cat > $combtestfile << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+  xmlstarlet ed -P -L -s /configuration -t elem -n include -v \"\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n href -v \"combconfs/$combination.xml\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n xmlns -v \"http://www.w3.org/2001/XInclude\" $combtestfile\n+  formatxml $combtestfile\n+}\n+\n+changeconf() {\n+  xmlstarlet ed -P -L -d \"/configuration/property[name='$1']\" \"$combconffile\"\n+  xmlstarlet ed -P -L -s /configuration -t elem -n propertyTMP -v \"\" -s /configuration/propertyTMP -t elem -n name -v \"$1\" -r /configuration/propertyTMP -v property \"$combconffile\"\n+  if ! xmlstarlet ed -P -L -s \"/configuration/property[name='$1']\" -t elem -n value -v \"$2\" \"$combconffile\"\n+  then\n+    echo \"Exiting. Changing config property failed.\"\n+    exit -1\n+  fi\n+}\n+\n+summary() {\n+  {\n+    echo \"\"\n+    echo \"$combination\"\n+    echo \"========================\"\n+    pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+  } >> \"$testresultsfilename\"\n+  printf \"\\n----- Test results -----\\n\"\n+  pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+\n+  secondstaken=$((ENDTIME - STARTTIME))\n+  mins=$((secondstaken / 60))\n+  secs=$((secondstaken % 60))\n+  printf \"\\nTime taken: %s mins %s secs.\\n\" \"$mins\" \"$secs\"\n+  echo \"Find test logs for the combination ($combination) in: $testlogfilename\"\n+  echo \"Find consolidated test results in: $testresultsfilename\"\n+  echo \"----------\"\n+}\n+\n+init() {\n+  checkdependencies\n+  if [[ \"$shouldbuild\" -eq \"1\" ]]; then\n+    if ! mvn clean install -DskipTests\n+    then\n+      echo \"\"\n+      echo \"Exiting. Build failed.\"\n+      exit -1\n+    fi\n+  fi\n+  starttime=$(date +\"%Y-%m-%d_%H-%M-%S\")\n+  mkdir -p \"$logdir\"\n+  testresultsfilename=\"$logdir/$starttime/Test-Results.txt\"\n+  if [[ -z \"$combinations\" ]]; then\n+    combinations=( $( ls $combconfsdir/*.xml ))\n+  fi\n+}\n+\n+runtests() {\n+  parseoptions \"$@\"\n+  validate\n+  if [ -z \"$starttime\" ]; then\n+    init\n+  fi\n+  shopt -s nullglob\n+  for combconffile in \"${combinations[@]}\"; do\n+    STARTTIME=$(date +%s)\n+    combination=$(basename \"$combconffile\" .xml)\n+    mkdir -p \"$logdir/$starttime\"\n+    testlogfilename=\"$logdir/$starttime/Test-Logs-$combination.txt\"\n+    printf \"\\nRunning the combination: %s...\" \"$combination\"\n+    setactiveconf\n+    mvn -T 1C -Dparallel-tests=abfs -Dscale -DtestsThreadCount=$threadcount verify >> \"$testlogfilename\" || true\n+    ENDTIME=$(date +%s)\n+    summary\n+  done\n+}\n+\n+begin() {\n+  cleancombinationconfigs\n+}\n+\n+parseoptions() {\n+  while getopts \":c:a:n?t:\" option; do\n+    case \"${option}\" in\n+      a)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        setactiveconf\n+        exit 0\n+        ;;\n+      c)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        combinations+=(\"$combination\")\n+        ;;\n+      n)\n+        shouldbuild=0\n+        ;;\n+      t)\n+        threadcount=$OPTARG\n+        ;;\n+      *|?|h)\n+        echo \"Usage: $0 [-n] [-a COMBINATION_NAME] [-c COMBINATION_NAME] [-t THREAD_COUNT]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyNTExMg==", "bodyText": "Not doing this as the scripts in hadoop repo follows the existing format", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r517825112", "createdAt": "2020-11-05T06:50:28Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "diffHunk": "@@ -0,0 +1,224 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+testresourcesdir=src/test/resources\n+combconfsdir=$testresourcesdir/combconfs\n+combtestfile=$testresourcesdir/abfs-combination-test-configs.xml\n+\n+shouldbuild=1\n+\n+logdir=dev-support/testlogs\n+testresultsregex=\"Results:(\\n|.)*?Tests run:\"\n+testresultsfilename=\n+starttime=\n+threadcount=\n+defaultthreadcount=8\n+\n+properties=\n+values=\n+\n+validate() {\n+  if [ -z \"$threadcount\" ] ; then\n+    threadcount=$defaultthreadcount\n+  fi\n+  numberegex='^[0-9]+$'\n+  if ! [[ $threadcount =~ $numberegex ]] ; then\n+    echo \"Exiting. The script param (threadcount) should be a number\"\n+    exit -1\n+  fi\n+  if [ -z \"$combination\" ]; then\n+   echo \"Exiting. combination cannot be empty\"\n+   exit -1\n+  fi\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -lt 1 ] || [ \"$valuessize\" -lt 1 ] || [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Both properties and values arrays has to be populated and of same size. Please check for combination $combination\"\n+    exit -1\n+  fi\n+\n+  for filename in \"${combinations[@]}\"; do\n+    if [[ ! -f \"$combconfsdir/$filename.xml\" ]]; then\n+      echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+      exit -1\n+    fi\n+  done\n+}\n+\n+checkdependencies() {\n+  if ! [ \"$(command -v pcregrep)\" ]; then\n+    echo \"Exiting. pcregrep is required to run the script.\"\n+    exit -1\n+  fi\n+  if ! [ \"$(command -v xmlstarlet)\" ]; then\n+    echo \"Exiting. xmlstarlet is required to run the script.\"\n+    exit -1\n+  fi\n+}\n+\n+cleancombinationconfigs() {\n+  rm -rf $combconfsdir\n+  mkdir -p $combconfsdir\n+}\n+\n+generateconfigs() {\n+  combconffile=\"$combconfsdir/$combination.xml\"\n+  rm -rf \"$combconffile\"\n+  cat > \"$combconffile\" << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Number of properties and values differ for $combination\"\n+    exit -1\n+  fi\n+  for ((i = 0; i < propertiessize; i++)); do\n+    key=${properties[$i]}\n+    val=${values[$i]}\n+    changeconf \"$key\" \"$val\"\n+  done\n+  formatxml \"$combconffile\"\n+}\n+\n+formatxml() {\n+  xmlstarlet fo -s 2 \"$1\" > \"$1.tmp\"\n+  mv \"$1.tmp\" \"$1\"\n+}\n+\n+setactiveconf() {\n+  if [[ ! -f \"$combconfsdir/$combination.xml\" ]]; then\n+    echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+    exit -1\n+  fi\n+  rm -rf $combtestfile\n+  cat > $combtestfile << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+  xmlstarlet ed -P -L -s /configuration -t elem -n include -v \"\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n href -v \"combconfs/$combination.xml\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n xmlns -v \"http://www.w3.org/2001/XInclude\" $combtestfile\n+  formatxml $combtestfile\n+}\n+\n+changeconf() {\n+  xmlstarlet ed -P -L -d \"/configuration/property[name='$1']\" \"$combconffile\"\n+  xmlstarlet ed -P -L -s /configuration -t elem -n propertyTMP -v \"\" -s /configuration/propertyTMP -t elem -n name -v \"$1\" -r /configuration/propertyTMP -v property \"$combconffile\"\n+  if ! xmlstarlet ed -P -L -s \"/configuration/property[name='$1']\" -t elem -n value -v \"$2\" \"$combconffile\"\n+  then\n+    echo \"Exiting. Changing config property failed.\"\n+    exit -1\n+  fi\n+}\n+\n+summary() {\n+  {\n+    echo \"\"\n+    echo \"$combination\"\n+    echo \"========================\"\n+    pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+  } >> \"$testresultsfilename\"\n+  printf \"\\n----- Test results -----\\n\"\n+  pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+\n+  secondstaken=$((ENDTIME - STARTTIME))\n+  mins=$((secondstaken / 60))\n+  secs=$((secondstaken % 60))\n+  printf \"\\nTime taken: %s mins %s secs.\\n\" \"$mins\" \"$secs\"\n+  echo \"Find test logs for the combination ($combination) in: $testlogfilename\"\n+  echo \"Find consolidated test results in: $testresultsfilename\"\n+  echo \"----------\"\n+}\n+\n+init() {\n+  checkdependencies\n+  if [[ \"$shouldbuild\" -eq \"1\" ]]; then\n+    if ! mvn clean install -DskipTests\n+    then\n+      echo \"\"\n+      echo \"Exiting. Build failed.\"\n+      exit -1\n+    fi\n+  fi\n+  starttime=$(date +\"%Y-%m-%d_%H-%M-%S\")\n+  mkdir -p \"$logdir\"\n+  testresultsfilename=\"$logdir/$starttime/Test-Results.txt\"\n+  if [[ -z \"$combinations\" ]]; then\n+    combinations=( $( ls $combconfsdir/*.xml ))\n+  fi\n+}\n+\n+runtests() {\n+  parseoptions \"$@\"\n+  validate\n+  if [ -z \"$starttime\" ]; then\n+    init\n+  fi\n+  shopt -s nullglob\n+  for combconffile in \"${combinations[@]}\"; do\n+    STARTTIME=$(date +%s)\n+    combination=$(basename \"$combconffile\" .xml)\n+    mkdir -p \"$logdir/$starttime\"\n+    testlogfilename=\"$logdir/$starttime/Test-Logs-$combination.txt\"\n+    printf \"\\nRunning the combination: %s...\" \"$combination\"\n+    setactiveconf\n+    mvn -T 1C -Dparallel-tests=abfs -Dscale -DtestsThreadCount=$threadcount verify >> \"$testlogfilename\" || true\n+    ENDTIME=$(date +%s)\n+    summary\n+  done\n+}\n+\n+begin() {\n+  cleancombinationconfigs\n+}\n+\n+parseoptions() {\n+  while getopts \":c:a:n?t:\" option; do\n+    case \"${option}\" in\n+      a)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        setactiveconf\n+        exit 0\n+        ;;\n+      c)\n+        combination=$(basename \"$OPTARG\" .xml)\n+        combinations+=(\"$combination\")\n+        ;;\n+      n)\n+        shouldbuild=0\n+        ;;\n+      t)\n+        threadcount=$OPTARG\n+        ;;\n+      *|?|h)\n+        echo \"Usage: $0 [-n] [-a COMBINATION_NAME] [-c COMBINATION_NAME] [-t THREAD_COUNT]\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MzQwOQ=="}, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA4NDc1OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNToyMzo1NFrOHr2ncg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjo1MzowNFrOHt1l0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NTY1MA==", "bodyText": "Better to have testLogs folder within dev-support than within script folder.", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r515745650", "createdAt": "2020-11-02T05:23:54Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "diffHunk": "@@ -357,6 +357,34 @@ The Huge File tests validate Azure storages's ability to handle large files \u2014t\n Tests at this scale are slow: they are best executed from hosts running in\n the cloud infrastructure where the storage endpoint is based.\n \n+##No test no review: Run different combinations of tests using the runtests.sh script\n+\n+This is the expected way in which the tests have to be ran before raising a PR.\n+The script `runtests.sh` contain template for 3 combinations of tests. Ensure\n+the auth configs for all the accounts used for testing are provided in\n+azure-auth-keys.xml. In case any new flags or properties are introduced\n+with the code change, add the combinations with the possible configurations\n+into the `runtests.sh`. The thread count can be specified as the command line\n+argument for the script. By default the same will be 8. -n option can be\n+specified if build is not required prior to the tests.\n+\n+Adding a combination of tests involves setting the variable combination (ex: HNS\n+-OAuth) and specifying the specific configurations for the particular\n+combination with 2 arrays namely properties and values. Specify the property\n+names within the array properties and corresponding values in the values\n+array. The property and value is determined by the array index. The value for\n+the property mentioned at index 1 of array properties should be specified at\n+index 1 of the array values. Call the function generateconfigs once the 3\n+values mentioned are set. Now the script `runtests.sh` is ready to be ran.\n+\n+Once the tests are completed, logs will be present in the directory\n+dev-support/testrun-scripts/testlogs/$startname, $startname will be the start", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyNjAwMg==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r517826002", "createdAt": "2020-11-05T06:53:04Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "diffHunk": "@@ -357,6 +357,34 @@ The Huge File tests validate Azure storages's ability to handle large files \u2014t\n Tests at this scale are slow: they are best executed from hosts running in\n the cloud infrastructure where the storage endpoint is based.\n \n+##No test no review: Run different combinations of tests using the runtests.sh script\n+\n+This is the expected way in which the tests have to be ran before raising a PR.\n+The script `runtests.sh` contain template for 3 combinations of tests. Ensure\n+the auth configs for all the accounts used for testing are provided in\n+azure-auth-keys.xml. In case any new flags or properties are introduced\n+with the code change, add the combinations with the possible configurations\n+into the `runtests.sh`. The thread count can be specified as the command line\n+argument for the script. By default the same will be 8. -n option can be\n+specified if build is not required prior to the tests.\n+\n+Adding a combination of tests involves setting the variable combination (ex: HNS\n+-OAuth) and specifying the specific configurations for the particular\n+combination with 2 arrays namely properties and values. Specify the property\n+names within the array properties and corresponding values in the values\n+array. The property and value is determined by the array index. The value for\n+the property mentioned at index 1 of array properties should be specified at\n+index 1 of the array values. Call the function generateconfigs once the 3\n+values mentioned are set. Now the script `runtests.sh` is ready to be ran.\n+\n+Once the tests are completed, logs will be present in the directory\n+dev-support/testrun-scripts/testlogs/$startname, $startname will be the start", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NTY1MA=="}, "originalCommit": {"oid": "01bbe46561d8fb8f1b74782b57100e2e5cdf40fd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTQ1MDY4OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMToxMDoxMlrOIF0JGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToyOTo1OFrOIF5nqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2ODA5MQ==", "bodyText": "minor: can we also echo the supported combination names here too?", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r542968091", "createdAt": "2020-12-15T01:10:12Z", "author": {"login": "DadanielZ"}, "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "diffHunk": "@@ -0,0 +1,230 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+testresourcesdir=src/test/resources\n+combconfsdir=$testresourcesdir/combinationConfigFiles\n+combtestfile=$testresourcesdir/abfs-combination-test-configs.xml\n+\n+logdir=dev-support/testlogs\n+testresultsregex=\"Results:(\\n|.)*?Tests run:\"\n+testresultsfilename=\n+starttime=\n+threadcount=\n+defaultthreadcount=8\n+\n+properties=\n+values=\n+\n+validate() {\n+  if [ -z \"$threadcount\" ] ; then\n+    threadcount=$defaultthreadcount\n+  fi\n+  numberegex='^[0-9]+$'\n+  if ! [[ $threadcount =~ $numberegex ]] ; then\n+    echo \"Exiting. The script param (threadcount) should be a number\"\n+    exit -1\n+  fi\n+  if [ -z \"$combination\" ]; then\n+   echo \"Exiting. combination cannot be empty\"\n+   exit -1\n+  fi\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -lt 1 ] || [ \"$valuessize\" -lt 1 ] || [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Both properties and values arrays has to be populated and of same size. Please check for combination $combination\"\n+    exit -1\n+  fi\n+\n+  for filename in \"${combinations[@]}\"; do\n+    if [[ ! -f \"$combconfsdir/$filename.xml\" ]]; then\n+      echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+      exit -1\n+    fi\n+  done\n+}\n+\n+checkdependencies() {\n+  if ! [ \"$(command -v pcregrep)\" ]; then\n+    echo \"Exiting. pcregrep is required to run the script.\"\n+    exit -1\n+  fi\n+  if ! [ \"$(command -v xmlstarlet)\" ]; then\n+    echo \"Exiting. xmlstarlet is required to run the script.\"\n+    exit -1\n+  fi\n+}\n+\n+cleancombinationconfigs() {\n+  rm -rf $combconfsdir\n+  mkdir -p $combconfsdir\n+}\n+\n+generateconfigs() {\n+  combconffile=\"$combconfsdir/$combination.xml\"\n+  rm -rf \"$combconffile\"\n+  cat > \"$combconffile\" << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Number of properties and values differ for $combination\"\n+    exit -1\n+  fi\n+  for ((i = 0; i < propertiessize; i++)); do\n+    key=${properties[$i]}\n+    val=${values[$i]}\n+    changeconf \"$key\" \"$val\"\n+  done\n+  formatxml \"$combconffile\"\n+}\n+\n+formatxml() {\n+  xmlstarlet fo -s 2 \"$1\" > \"$1.tmp\"\n+  mv \"$1.tmp\" \"$1\"\n+}\n+\n+setactiveconf() {\n+  if [[ ! -f \"$combconfsdir/$combination.xml\" ]]; then\n+    echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+    exit -1\n+  fi\n+  rm -rf $combtestfile\n+  cat > $combtestfile << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+  xmlstarlet ed -P -L -s /configuration -t elem -n include -v \"\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n href -v \"combinationConfigFiles/$combination.xml\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n xmlns -v \"http://www.w3.org/2001/XInclude\" $combtestfile\n+  formatxml $combtestfile\n+}\n+\n+changeconf() {\n+  xmlstarlet ed -P -L -d \"/configuration/property[name='$1']\" \"$combconffile\"\n+  xmlstarlet ed -P -L -s /configuration -t elem -n propertyTMP -v \"\" -s /configuration/propertyTMP -t elem -n name -v \"$1\" -r /configuration/propertyTMP -v property \"$combconffile\"\n+  if ! xmlstarlet ed -P -L -s \"/configuration/property[name='$1']\" -t elem -n value -v \"$2\" \"$combconffile\"\n+  then\n+    echo \"Exiting. Changing config property failed.\"\n+    exit -1\n+  fi\n+}\n+\n+summary() {\n+  {\n+    echo \"\"\n+    echo \"$combination\"\n+    echo \"========================\"\n+    pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+  } >> \"$testresultsfilename\"\n+  printf \"\\n----- Test results -----\\n\"\n+  pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+\n+  secondstaken=$((ENDTIME - STARTTIME))\n+  mins=$((secondstaken / 60))\n+  secs=$((secondstaken % 60))\n+  printf \"\\nTime taken: %s mins %s secs.\\n\" \"$mins\" \"$secs\"\n+  echo \"Find test logs for the combination ($combination) in: $testlogfilename\"\n+  echo \"Find consolidated test results in: $testresultsfilename\"\n+  echo \"----------\"\n+}\n+\n+init() {\n+  checkdependencies\n+  if ! mvn clean install -DskipTests\n+  then\n+    echo \"\"\n+    echo \"Exiting. Build failed.\"\n+    exit -1\n+  fi\n+  starttime=$(date +\"%Y-%m-%d_%H-%M-%S\")\n+  mkdir -p \"$logdir\"\n+  testresultsfilename=\"$logdir/$starttime/Test-Results.txt\"\n+  if [[ -z \"$combinations\" ]]; then\n+    combinations=( $( ls $combconfsdir/*.xml ))\n+  fi\n+}\n+\n+runtests() {\n+  parseoptions \"$@\"\n+  validate\n+  if [ -z \"$starttime\" ]; then\n+    init\n+  fi\n+  shopt -s nullglob\n+  for combconffile in \"${combinations[@]}\"; do\n+    STARTTIME=$(date +%s)\n+    combination=$(basename \"$combconffile\" .xml)\n+    mkdir -p \"$logdir/$starttime\"\n+    testlogfilename=\"$logdir/$starttime/Test-Logs-$combination.txt\"\n+    printf \"\\nRunning the combination: %s...\" \"$combination\"\n+    setactiveconf\n+    mvn -T 1C -Dparallel-tests=abfs -Dscale -DtestsThreadCount=$threadcount verify >> \"$testlogfilename\" || true\n+    ENDTIME=$(date +%s)\n+    summary\n+  done\n+}\n+\n+begin() {\n+  cleancombinationconfigs\n+}\n+\n+parseoptions() {\n+runactivate=0\n+runtests=0\n+  while getopts \":c:a:t:\" option; do\n+    case \"${option}\" in\n+      a)\n+        if [[ \"$runactivate\" -eq \"1\" ]]; then\n+          echo \"-a Option is not multivalued\"\n+          exit 1\n+        fi\n+        runactivate=1\n+        combination=$(basename \"$OPTARG\" .xml)\n+        ;;\n+      c)\n+        runtests=1\n+        combination=$(basename \"$OPTARG\" .xml)\n+        combinations+=(\"$combination\")\n+        ;;\n+      t)\n+        threadcount=$OPTARG\n+        ;;\n+      *|?|h)\n+        echo \"Usage: $0 [-n] [-a COMBINATION_NAME] [-c COMBINATION_NAME] [-t THREAD_COUNT]\"\n+        echo \"\"\n+        echo \"Where:\"\n+        echo \"  -a COMBINATION_NAME   Specify the combination name which needs to be activated.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cde641256fd16d72fd051c8669155bc76e12e25"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NzgzNQ==", "bodyText": "Now the configured combinations will be echoed.", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r543057835", "createdAt": "2020-12-15T05:29:58Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/dev-support/testrun-scripts/testsupport.sh", "diffHunk": "@@ -0,0 +1,230 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+testresourcesdir=src/test/resources\n+combconfsdir=$testresourcesdir/combinationConfigFiles\n+combtestfile=$testresourcesdir/abfs-combination-test-configs.xml\n+\n+logdir=dev-support/testlogs\n+testresultsregex=\"Results:(\\n|.)*?Tests run:\"\n+testresultsfilename=\n+starttime=\n+threadcount=\n+defaultthreadcount=8\n+\n+properties=\n+values=\n+\n+validate() {\n+  if [ -z \"$threadcount\" ] ; then\n+    threadcount=$defaultthreadcount\n+  fi\n+  numberegex='^[0-9]+$'\n+  if ! [[ $threadcount =~ $numberegex ]] ; then\n+    echo \"Exiting. The script param (threadcount) should be a number\"\n+    exit -1\n+  fi\n+  if [ -z \"$combination\" ]; then\n+   echo \"Exiting. combination cannot be empty\"\n+   exit -1\n+  fi\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -lt 1 ] || [ \"$valuessize\" -lt 1 ] || [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Both properties and values arrays has to be populated and of same size. Please check for combination $combination\"\n+    exit -1\n+  fi\n+\n+  for filename in \"${combinations[@]}\"; do\n+    if [[ ! -f \"$combconfsdir/$filename.xml\" ]]; then\n+      echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+      exit -1\n+    fi\n+  done\n+}\n+\n+checkdependencies() {\n+  if ! [ \"$(command -v pcregrep)\" ]; then\n+    echo \"Exiting. pcregrep is required to run the script.\"\n+    exit -1\n+  fi\n+  if ! [ \"$(command -v xmlstarlet)\" ]; then\n+    echo \"Exiting. xmlstarlet is required to run the script.\"\n+    exit -1\n+  fi\n+}\n+\n+cleancombinationconfigs() {\n+  rm -rf $combconfsdir\n+  mkdir -p $combconfsdir\n+}\n+\n+generateconfigs() {\n+  combconffile=\"$combconfsdir/$combination.xml\"\n+  rm -rf \"$combconffile\"\n+  cat > \"$combconffile\" << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+\n+  propertiessize=${#properties[@]}\n+  valuessize=${#values[@]}\n+  if [ \"$propertiessize\" -ne \"$valuessize\" ]; then\n+    echo \"Exiting. Number of properties and values differ for $combination\"\n+    exit -1\n+  fi\n+  for ((i = 0; i < propertiessize; i++)); do\n+    key=${properties[$i]}\n+    val=${values[$i]}\n+    changeconf \"$key\" \"$val\"\n+  done\n+  formatxml \"$combconffile\"\n+}\n+\n+formatxml() {\n+  xmlstarlet fo -s 2 \"$1\" > \"$1.tmp\"\n+  mv \"$1.tmp\" \"$1\"\n+}\n+\n+setactiveconf() {\n+  if [[ ! -f \"$combconfsdir/$combination.xml\" ]]; then\n+    echo \"Exiting. Combination config file ($combconfsdir/$combination.xml) does not exist.\"\n+    exit -1\n+  fi\n+  rm -rf $combtestfile\n+  cat > $combtestfile << ENDOFFILE\n+<configuration>\n+\n+</configuration>\n+ENDOFFILE\n+  xmlstarlet ed -P -L -s /configuration -t elem -n include -v \"\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n href -v \"combinationConfigFiles/$combination.xml\" $combtestfile\n+  xmlstarlet ed -P -L -i /configuration/include -t attr -n xmlns -v \"http://www.w3.org/2001/XInclude\" $combtestfile\n+  formatxml $combtestfile\n+}\n+\n+changeconf() {\n+  xmlstarlet ed -P -L -d \"/configuration/property[name='$1']\" \"$combconffile\"\n+  xmlstarlet ed -P -L -s /configuration -t elem -n propertyTMP -v \"\" -s /configuration/propertyTMP -t elem -n name -v \"$1\" -r /configuration/propertyTMP -v property \"$combconffile\"\n+  if ! xmlstarlet ed -P -L -s \"/configuration/property[name='$1']\" -t elem -n value -v \"$2\" \"$combconffile\"\n+  then\n+    echo \"Exiting. Changing config property failed.\"\n+    exit -1\n+  fi\n+}\n+\n+summary() {\n+  {\n+    echo \"\"\n+    echo \"$combination\"\n+    echo \"========================\"\n+    pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+  } >> \"$testresultsfilename\"\n+  printf \"\\n----- Test results -----\\n\"\n+  pcregrep -M \"$testresultsregex\" \"$testlogfilename\"\n+\n+  secondstaken=$((ENDTIME - STARTTIME))\n+  mins=$((secondstaken / 60))\n+  secs=$((secondstaken % 60))\n+  printf \"\\nTime taken: %s mins %s secs.\\n\" \"$mins\" \"$secs\"\n+  echo \"Find test logs for the combination ($combination) in: $testlogfilename\"\n+  echo \"Find consolidated test results in: $testresultsfilename\"\n+  echo \"----------\"\n+}\n+\n+init() {\n+  checkdependencies\n+  if ! mvn clean install -DskipTests\n+  then\n+    echo \"\"\n+    echo \"Exiting. Build failed.\"\n+    exit -1\n+  fi\n+  starttime=$(date +\"%Y-%m-%d_%H-%M-%S\")\n+  mkdir -p \"$logdir\"\n+  testresultsfilename=\"$logdir/$starttime/Test-Results.txt\"\n+  if [[ -z \"$combinations\" ]]; then\n+    combinations=( $( ls $combconfsdir/*.xml ))\n+  fi\n+}\n+\n+runtests() {\n+  parseoptions \"$@\"\n+  validate\n+  if [ -z \"$starttime\" ]; then\n+    init\n+  fi\n+  shopt -s nullglob\n+  for combconffile in \"${combinations[@]}\"; do\n+    STARTTIME=$(date +%s)\n+    combination=$(basename \"$combconffile\" .xml)\n+    mkdir -p \"$logdir/$starttime\"\n+    testlogfilename=\"$logdir/$starttime/Test-Logs-$combination.txt\"\n+    printf \"\\nRunning the combination: %s...\" \"$combination\"\n+    setactiveconf\n+    mvn -T 1C -Dparallel-tests=abfs -Dscale -DtestsThreadCount=$threadcount verify >> \"$testlogfilename\" || true\n+    ENDTIME=$(date +%s)\n+    summary\n+  done\n+}\n+\n+begin() {\n+  cleancombinationconfigs\n+}\n+\n+parseoptions() {\n+runactivate=0\n+runtests=0\n+  while getopts \":c:a:t:\" option; do\n+    case \"${option}\" in\n+      a)\n+        if [[ \"$runactivate\" -eq \"1\" ]]; then\n+          echo \"-a Option is not multivalued\"\n+          exit 1\n+        fi\n+        runactivate=1\n+        combination=$(basename \"$OPTARG\" .xml)\n+        ;;\n+      c)\n+        runtests=1\n+        combination=$(basename \"$OPTARG\" .xml)\n+        combinations+=(\"$combination\")\n+        ;;\n+      t)\n+        threadcount=$OPTARG\n+        ;;\n+      *|?|h)\n+        echo \"Usage: $0 [-n] [-a COMBINATION_NAME] [-c COMBINATION_NAME] [-t THREAD_COUNT]\"\n+        echo \"\"\n+        echo \"Where:\"\n+        echo \"  -a COMBINATION_NAME   Specify the combination name which needs to be activated.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2ODA5MQ=="}, "originalCommit": {"oid": "3cde641256fd16d72fd051c8669155bc76e12e25"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTQ1MTc2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMToxMDozOFrOIF0Jug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToyOTozM1rOIF5nBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2ODI1MA==", "bodyText": "same here.", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r542968250", "createdAt": "2020-12-15T01:10:38Z", "author": {"login": "DadanielZ"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "diffHunk": "@@ -592,6 +592,61 @@ with the Hadoop Distributed File System permissions model when hierarchical\n namespace is enabled for the storage account.  Furthermore, the metadata and data\n produced by ADLS Gen 2 REST API can be consumed by Blob REST API, and vice versa.\n \n+## Generating test run configurations and test triggers over various config combinations\n+\n+To simplify the testing across various authentication and features combinations\n+that are mandatory for a PR, script `dev-support/testrun-scripts/runtests.sh`\n+should be used. Once the script is updated with relevant config settings for\n+various test combinations, it will:\n+1. Auto-generate configs specific to each test combinations\n+2. Run tests for all combinations\n+3. Summarize results across all the test combination runs.\n+\n+As a pre-requiste step, fill config values for test accounts and credentials\n+needed for authentication in `src/test/resources/azure-auth-keys.xml.template`\n+and rename as `src/test/resources/azure-auth-keys.xml`.\n+\n+**To add a new test combination:** Templates for mandatory test combinations\n+for PR validation are present in `dev-support/testrun-scripts/runtests.sh`.\n+If a new one needs to be added, add a combination set within\n+`dev-support/testrun-scripts/runtests.sh` similar to the ones already defined\n+and\n+1. Provide a new combination name\n+2. Update properties and values array which need to be effective for the test\n+combination\n+3. Call generateconfigs\n+\n+**To run PR validation:** Running command\n+* `dev-support/testrun-scripts/runtests.sh` will generate configurations for\n+each of the combinations defined and run tests for all the combinations.\n+* `dev-support/testrun-scripts/runtests.sh -c {combinationname}` Specific\n+combinations can be provided with -c option. If combinations are provided\n+with -c option, tests for only those combinations will be run.\n+\n+**Test logs:** Test runs will create a folder within dev-support/testlogs to\n+save the test logs. Folder name will be the test start timestamp. The mvn verify\n+command line logs for each combination will be saved into a file as\n+Test-Logs-$combination.txt into this folder. In case of any failures, this file\n+will have the failure exception stack. At the end of the test run, the\n+consolidated results of all the combination runs will be saved into a file as\n+Test-Results.log in the same folder. When run for PR validation, the\n+consolidated test results needs to be pasted into the PR comment section.\n+\n+**To generate config for use in IDE:** Running command with -a (activate) option\n+`dev-support/testrun-scripts/runtests.sh -a {combination name}` will update\n+the effective config relevant for the specific test combination. Hence the same\n+config files used by the mvn test runs can be used for IDE without any manual\n+updates needed within config file.\n+\n+**Other command line options:**\n+* -a <COMBINATION_NAME> Specify the combination name which needs to be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cde641256fd16d72fd051c8669155bc76e12e25"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NzM1NA==", "bodyText": "I have done it in the script. It won't be right to add here, as the user of the script can add, change the combinations.", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r543057354", "createdAt": "2020-12-15T05:28:41Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "diffHunk": "@@ -592,6 +592,61 @@ with the Hadoop Distributed File System permissions model when hierarchical\n namespace is enabled for the storage account.  Furthermore, the metadata and data\n produced by ADLS Gen 2 REST API can be consumed by Blob REST API, and vice versa.\n \n+## Generating test run configurations and test triggers over various config combinations\n+\n+To simplify the testing across various authentication and features combinations\n+that are mandatory for a PR, script `dev-support/testrun-scripts/runtests.sh`\n+should be used. Once the script is updated with relevant config settings for\n+various test combinations, it will:\n+1. Auto-generate configs specific to each test combinations\n+2. Run tests for all combinations\n+3. Summarize results across all the test combination runs.\n+\n+As a pre-requiste step, fill config values for test accounts and credentials\n+needed for authentication in `src/test/resources/azure-auth-keys.xml.template`\n+and rename as `src/test/resources/azure-auth-keys.xml`.\n+\n+**To add a new test combination:** Templates for mandatory test combinations\n+for PR validation are present in `dev-support/testrun-scripts/runtests.sh`.\n+If a new one needs to be added, add a combination set within\n+`dev-support/testrun-scripts/runtests.sh` similar to the ones already defined\n+and\n+1. Provide a new combination name\n+2. Update properties and values array which need to be effective for the test\n+combination\n+3. Call generateconfigs\n+\n+**To run PR validation:** Running command\n+* `dev-support/testrun-scripts/runtests.sh` will generate configurations for\n+each of the combinations defined and run tests for all the combinations.\n+* `dev-support/testrun-scripts/runtests.sh -c {combinationname}` Specific\n+combinations can be provided with -c option. If combinations are provided\n+with -c option, tests for only those combinations will be run.\n+\n+**Test logs:** Test runs will create a folder within dev-support/testlogs to\n+save the test logs. Folder name will be the test start timestamp. The mvn verify\n+command line logs for each combination will be saved into a file as\n+Test-Logs-$combination.txt into this folder. In case of any failures, this file\n+will have the failure exception stack. At the end of the test run, the\n+consolidated results of all the combination runs will be saved into a file as\n+Test-Results.log in the same folder. When run for PR validation, the\n+consolidated test results needs to be pasted into the PR comment section.\n+\n+**To generate config for use in IDE:** Running command with -a (activate) option\n+`dev-support/testrun-scripts/runtests.sh -a {combination name}` will update\n+the effective config relevant for the specific test combination. Hence the same\n+config files used by the mvn test runs can be used for IDE without any manual\n+updates needed within config file.\n+\n+**Other command line options:**\n+* -a <COMBINATION_NAME> Specify the combination name which needs to be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2ODI1MA=="}, "originalCommit": {"oid": "3cde641256fd16d72fd051c8669155bc76e12e25"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NzY3MQ==", "bodyText": "Also user is expected to know the combnations from the runtests.sh file.", "url": "https://github.com/apache/hadoop/pull/2417#discussion_r543057671", "createdAt": "2020-12-15T05:29:33Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/testing_azure.md", "diffHunk": "@@ -592,6 +592,61 @@ with the Hadoop Distributed File System permissions model when hierarchical\n namespace is enabled for the storage account.  Furthermore, the metadata and data\n produced by ADLS Gen 2 REST API can be consumed by Blob REST API, and vice versa.\n \n+## Generating test run configurations and test triggers over various config combinations\n+\n+To simplify the testing across various authentication and features combinations\n+that are mandatory for a PR, script `dev-support/testrun-scripts/runtests.sh`\n+should be used. Once the script is updated with relevant config settings for\n+various test combinations, it will:\n+1. Auto-generate configs specific to each test combinations\n+2. Run tests for all combinations\n+3. Summarize results across all the test combination runs.\n+\n+As a pre-requiste step, fill config values for test accounts and credentials\n+needed for authentication in `src/test/resources/azure-auth-keys.xml.template`\n+and rename as `src/test/resources/azure-auth-keys.xml`.\n+\n+**To add a new test combination:** Templates for mandatory test combinations\n+for PR validation are present in `dev-support/testrun-scripts/runtests.sh`.\n+If a new one needs to be added, add a combination set within\n+`dev-support/testrun-scripts/runtests.sh` similar to the ones already defined\n+and\n+1. Provide a new combination name\n+2. Update properties and values array which need to be effective for the test\n+combination\n+3. Call generateconfigs\n+\n+**To run PR validation:** Running command\n+* `dev-support/testrun-scripts/runtests.sh` will generate configurations for\n+each of the combinations defined and run tests for all the combinations.\n+* `dev-support/testrun-scripts/runtests.sh -c {combinationname}` Specific\n+combinations can be provided with -c option. If combinations are provided\n+with -c option, tests for only those combinations will be run.\n+\n+**Test logs:** Test runs will create a folder within dev-support/testlogs to\n+save the test logs. Folder name will be the test start timestamp. The mvn verify\n+command line logs for each combination will be saved into a file as\n+Test-Logs-$combination.txt into this folder. In case of any failures, this file\n+will have the failure exception stack. At the end of the test run, the\n+consolidated results of all the combination runs will be saved into a file as\n+Test-Results.log in the same folder. When run for PR validation, the\n+consolidated test results needs to be pasted into the PR comment section.\n+\n+**To generate config for use in IDE:** Running command with -a (activate) option\n+`dev-support/testrun-scripts/runtests.sh -a {combination name}` will update\n+the effective config relevant for the specific test combination. Hence the same\n+config files used by the mvn test runs can be used for IDE without any manual\n+updates needed within config file.\n+\n+**Other command line options:**\n+* -a <COMBINATION_NAME> Specify the combination name which needs to be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2ODI1MA=="}, "originalCommit": {"oid": "3cde641256fd16d72fd051c8669155bc76e12e25"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3235, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}