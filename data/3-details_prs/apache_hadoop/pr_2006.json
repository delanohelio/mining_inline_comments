{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDkzMDc5", "number": 2006, "title": "HDFS-15306. Make mount-table to read from central place ( Let's say from HDFS).", "bodyText": "HDFS-15306. Make mount-table to read from central place ( Let's say from HDFS).", "createdAt": "2020-05-09T01:22:14Z", "url": "https://github.com/apache/hadoop/pull/2006", "merged": true, "mergeCommit": {"oid": "ac4a2e11d98827c7926a34cda27aa7bcfd3f36c1"}, "closed": true, "closedAt": "2020-05-15T00:29:36Z", "author": {"login": "umamaheswararao"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfcD6agH2gAyNDE1NDkzMDc5OjJiNjllNmM2ODJhYzYxZDY0NmJlZjBjNWU4MmU4Y2ZkMTM1ZGVkYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchWXXcgFqTQxMjI1ODgxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2b69e6c682ac61d646bef0c5e82e8cfd135dedac", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/2b69e6c682ac61d646bef0c5e82e8cfd135dedac", "committedDate": "2020-05-09T01:19:21Z", "message": "HDFS-15306. Make mount-table to read from central place ( Let's say from HDFS)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjAxOTI4", "url": "https://github.com/apache/hadoop/pull/2006#pullrequestreview-408601928", "createdAt": "2020-05-09T02:09:56Z", "commit": {"oid": "2b69e6c682ac61d646bef0c5e82e8cfd135dedac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjowOTo1N1rOGS3xTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjowOTo1N1rOGS3xTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MTI5Mg==", "bodyText": "Nit: Typo: A interface-> An Interface\nWill change it in next patch.", "url": "https://github.com/apache/hadoop/pull/2006#discussion_r422441292", "createdAt": "2020-05-09T02:09:57Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/MountTableConfigLoader.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+/**\n+ * A interface for loading mount-table configuration. This class can have more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b69e6c682ac61d646bef0c5e82e8cfd135dedac"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d794b584e97dca3cdcc60f1cbc535dc668cc7ab", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/2d794b584e97dca3cdcc60f1cbc535dc668cc7ab", "committedDate": "2020-05-09T06:55:17Z", "message": "HDFS-15306. Fixed few checkstyle issues."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDc5Njcx", "url": "https://github.com/apache/hadoop/pull/2006#pullrequestreview-409479671", "createdAt": "2020-05-11T19:49:52Z", "commit": {"oid": "2d794b584e97dca3cdcc60f1cbc535dc668cc7ab"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTo0OTo1M1rOGTq6qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTo1NToxOVrOGTrGiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3OTI3Mg==", "bodyText": "typo? higheirVersion --> higherVersion?", "url": "https://github.com/apache/hadoop/pull/2006#discussion_r423279272", "createdAt": "2020-05-11T19:49:53Z", "author": {"login": "jojochuang"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/HCFSMountTableConfigLoader.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.RemoteIterator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An implementation for Apache Hadoop compatible file system based mount-table\n+ * file loading.\n+ */\n+public class HCFSMountTableConfigLoader implements MountTableConfigLoader {\n+  private static final String REGEX_DOT = \"[.]\";\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(HCFSMountTableConfigLoader.class);\n+  private Path mountTablePath = null;\n+\n+  /**\n+   * Loads the mount-table configuration from hadoop compatible file system and\n+   * add the configuration items to given configuration. Mount-table\n+   * configuration format should be suffixed with version number. Format:\n+   * mount-table.<versionNumber>.xml Example: mount-table.1.xml When user wants\n+   * to update mount table, the expectation is to upload new configuration file\n+   * with incremented version number. This API loads the highest version number\n+   * file. We can also configure single file path directly.\n+   *\n+   * @param mountTableConfigPath : A directory path where mount-table files\n+   *          stored or a mount-table file path. We recommend to configure\n+   *          directory with the mount-table version files.\n+   * @param conf : to add the mount table as resource.\n+   */\n+  @Override\n+  public void load(String mountTableConfigPath, Configuration conf)\n+      throws IOException {\n+    this.mountTablePath = new Path(mountTableConfigPath);\n+    String scheme = mountTablePath.toUri().getScheme();\n+    ViewFileSystem.FsGetter fsGetter =\n+        new ViewFileSystemOverloadScheme.ChildFsGetter(scheme);\n+    FileSystem fs = fsGetter.getNewInstance(mountTablePath.toUri(), conf);\n+\n+    RemoteIterator<LocatedFileStatus> listFiles =\n+        fs.listFiles(mountTablePath, false);\n+    LocatedFileStatus lfs = null;\n+    int higheirVersion = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d794b584e97dca3cdcc60f1cbc535dc668cc7ab"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4MTc0MQ==", "bodyText": "can we log a debug message to print the mount table file name we are about to load?", "url": "https://github.com/apache/hadoop/pull/2006#discussion_r423281741", "createdAt": "2020-05-11T19:54:12Z", "author": {"login": "jojochuang"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/HCFSMountTableConfigLoader.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.RemoteIterator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An implementation for Apache Hadoop compatible file system based mount-table\n+ * file loading.\n+ */\n+public class HCFSMountTableConfigLoader implements MountTableConfigLoader {\n+  private static final String REGEX_DOT = \"[.]\";\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(HCFSMountTableConfigLoader.class);\n+  private Path mountTablePath = null;\n+\n+  /**\n+   * Loads the mount-table configuration from hadoop compatible file system and\n+   * add the configuration items to given configuration. Mount-table\n+   * configuration format should be suffixed with version number. Format:\n+   * mount-table.<versionNumber>.xml Example: mount-table.1.xml When user wants\n+   * to update mount table, the expectation is to upload new configuration file\n+   * with incremented version number. This API loads the highest version number\n+   * file. We can also configure single file path directly.\n+   *\n+   * @param mountTableConfigPath : A directory path where mount-table files\n+   *          stored or a mount-table file path. We recommend to configure\n+   *          directory with the mount-table version files.\n+   * @param conf : to add the mount table as resource.\n+   */\n+  @Override\n+  public void load(String mountTableConfigPath, Configuration conf)\n+      throws IOException {\n+    this.mountTablePath = new Path(mountTableConfigPath);\n+    String scheme = mountTablePath.toUri().getScheme();\n+    ViewFileSystem.FsGetter fsGetter =\n+        new ViewFileSystemOverloadScheme.ChildFsGetter(scheme);\n+    FileSystem fs = fsGetter.getNewInstance(mountTablePath.toUri(), conf);\n+\n+    RemoteIterator<LocatedFileStatus> listFiles =\n+        fs.listFiles(mountTablePath, false);\n+    LocatedFileStatus lfs = null;\n+    int higheirVersion = -1;\n+    while (listFiles.hasNext()) {\n+      LocatedFileStatus curLfs = listFiles.next();\n+      String cur = curLfs.getPath().getName();\n+      String[] nameParts = cur.split(REGEX_DOT);\n+      if (nameParts.length < 2) {\n+        logInvalidFileNameFormat(cur);\n+        continue; // invalid file name\n+      }\n+      int curVersion = higheirVersion;\n+      try {\n+        curVersion = Integer.parseInt(nameParts[nameParts.length - 2]);\n+      } catch (NumberFormatException nfe) {\n+        logInvalidFileNameFormat(cur);\n+        continue;\n+      }\n+\n+      if (curVersion > higheirVersion) {\n+        higheirVersion = curVersion;\n+        lfs = curLfs;\n+      }\n+    }\n+\n+    if (lfs == null) {\n+      // No valid mount table file found.\n+      // TODO: Should we fail? Currently viewfs init will fail if no mount\n+      // links anyway.\n+      LOGGER.warn(\"No valid mount-table file exist at: \" + mountTableConfigPath\n+          + \". At least one mount-table file should present with the name \"\n+          + \"format: mount-table.<versionNumber>.xml\");\n+      return;\n+    }\n+    // Latest version file.\n+    Path letestVersionMountTable = lfs.getPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d794b584e97dca3cdcc60f1cbc535dc668cc7ab"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4MjMxMg==", "bodyText": "more precisely, versionNumber is a monotonically increasing integer.", "url": "https://github.com/apache/hadoop/pull/2006#discussion_r423282312", "createdAt": "2020-05-11T19:55:19Z", "author": {"login": "jojochuang"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/HCFSMountTableConfigLoader.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.RemoteIterator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An implementation for Apache Hadoop compatible file system based mount-table\n+ * file loading.\n+ */\n+public class HCFSMountTableConfigLoader implements MountTableConfigLoader {\n+  private static final String REGEX_DOT = \"[.]\";\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(HCFSMountTableConfigLoader.class);\n+  private Path mountTablePath = null;\n+\n+  /**\n+   * Loads the mount-table configuration from hadoop compatible file system and\n+   * add the configuration items to given configuration. Mount-table\n+   * configuration format should be suffixed with version number. Format:\n+   * mount-table.<versionNumber>.xml Example: mount-table.1.xml When user wants\n+   * to update mount table, the expectation is to upload new configuration file\n+   * with incremented version number. This API loads the highest version number\n+   * file. We can also configure single file path directly.\n+   *\n+   * @param mountTableConfigPath : A directory path where mount-table files\n+   *          stored or a mount-table file path. We recommend to configure\n+   *          directory with the mount-table version files.\n+   * @param conf : to add the mount table as resource.\n+   */\n+  @Override\n+  public void load(String mountTableConfigPath, Configuration conf)\n+      throws IOException {\n+    this.mountTablePath = new Path(mountTableConfigPath);\n+    String scheme = mountTablePath.toUri().getScheme();\n+    ViewFileSystem.FsGetter fsGetter =\n+        new ViewFileSystemOverloadScheme.ChildFsGetter(scheme);\n+    FileSystem fs = fsGetter.getNewInstance(mountTablePath.toUri(), conf);\n+\n+    RemoteIterator<LocatedFileStatus> listFiles =\n+        fs.listFiles(mountTablePath, false);\n+    LocatedFileStatus lfs = null;\n+    int higheirVersion = -1;\n+    while (listFiles.hasNext()) {\n+      LocatedFileStatus curLfs = listFiles.next();\n+      String cur = curLfs.getPath().getName();\n+      String[] nameParts = cur.split(REGEX_DOT);\n+      if (nameParts.length < 2) {\n+        logInvalidFileNameFormat(cur);\n+        continue; // invalid file name\n+      }\n+      int curVersion = higheirVersion;\n+      try {\n+        curVersion = Integer.parseInt(nameParts[nameParts.length - 2]);\n+      } catch (NumberFormatException nfe) {\n+        logInvalidFileNameFormat(cur);\n+        continue;\n+      }\n+\n+      if (curVersion > higheirVersion) {\n+        higheirVersion = curVersion;\n+        lfs = curLfs;\n+      }\n+    }\n+\n+    if (lfs == null) {\n+      // No valid mount table file found.\n+      // TODO: Should we fail? Currently viewfs init will fail if no mount\n+      // links anyway.\n+      LOGGER.warn(\"No valid mount-table file exist at: \" + mountTableConfigPath\n+          + \". At least one mount-table file should present with the name \"\n+          + \"format: mount-table.<versionNumber>.xml\");\n+      return;\n+    }\n+    // Latest version file.\n+    Path letestVersionMountTable = lfs.getPath();\n+    // We don't need to close this stream as it would have cached in\n+    // ChildFsGetter.\n+    conf.addResource(fs.open(letestVersionMountTable));\n+  }\n+\n+  private void logInvalidFileNameFormat(String cur) {\n+    LOGGER.warn(\"Invalid file name format for mount-table version file: \" + cur\n+        + \". The valid file name format is \"\n+        + \"mount-table-name.<versionNumber>.xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d794b584e97dca3cdcc60f1cbc535dc668cc7ab"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "743366ff87b6b198e76ae35d30fcf0220ef8807c", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/743366ff87b6b198e76ae35d30fcf0220ef8807c", "committedDate": "2020-05-11T23:41:18Z", "message": "HDFS-15306. Fixed few review comments and a checkstyle comment to add package-info file."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecf6ec6ab07fd322187b1a1b6173bd306a135f1b", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/ecf6ec6ab07fd322187b1a1b6173bd306a135f1b", "committedDate": "2020-05-12T05:00:07Z", "message": "HDFS-15306. Nit:Fixed a typo in a variable name."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b28142fa670bef9518b7938889cc7fe133000bab", "author": {"user": {"login": "umamaheswararao", "name": "Uma Maheswara Rao G"}}, "url": "https://github.com/apache/hadoop/commit/b28142fa670bef9518b7938889cc7fe133000bab", "committedDate": "2020-05-14T21:22:02Z", "message": "HDFS-15306. Avoided conf.addRource(inputStream) into original conf."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTk5MDI4", "url": "https://github.com/apache/hadoop/pull/2006#pullrequestreview-412199028", "createdAt": "2020-05-14T21:29:39Z", "commit": {"oid": "b28142fa670bef9518b7938889cc7fe133000bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToyOTozOVrOGVu6iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToyOTozOVrOGVu6iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0MTkyOA==", "bodyText": "Thanks @jojochuang for offline discussion. Here the issue was that, previously we added stream as resource into original configuration. What happens is that stream will be opened and read only when next get op comes. So, closing stream here can create stream closed issues. That will be kind of cached in Conf itself.\nNow, I have loaded stream into temp conf with default=false ( this will make temp conf light-weight) and we added this temp conf into original conf as resource. So, that props will be added instead of stream. Now streams can be closed safely.", "url": "https://github.com/apache/hadoop/pull/2006#discussion_r425441928", "createdAt": "2020-05-14T21:29:39Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/HCFSMountTableConfigLoader.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.RemoteIterator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An implementation for Apache Hadoop compatible file system based mount-table\n+ * file loading.\n+ */\n+public class HCFSMountTableConfigLoader implements MountTableConfigLoader {\n+  private static final String REGEX_DOT = \"[.]\";\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(HCFSMountTableConfigLoader.class);\n+  private Path mountTable = null;\n+\n+  /**\n+   * Loads the mount-table configuration from hadoop compatible file system and\n+   * add the configuration items to given configuration. Mount-table\n+   * configuration format should be suffixed with version number.\n+   * Format: mount-table.<versionNumber>.xml\n+   * Example: mount-table.1.xml\n+   * When user wants to update mount-table, the expectation is to upload new\n+   * mount-table configuration file with monotonically increasing integer as\n+   * version number. This API loads the highest version number file. We can\n+   * also configure single file path directly.\n+   *\n+   * @param mountTableConfigPath : A directory path where mount-table files\n+   *          stored or a mount-table file path. We recommend to configure\n+   *          directory with the mount-table version files.\n+   * @param conf : to add the mount table as resource.\n+   */\n+  @Override\n+  public void load(String mountTableConfigPath, Configuration conf)\n+      throws IOException {\n+    this.mountTable = new Path(mountTableConfigPath);\n+    String scheme = mountTable.toUri().getScheme();\n+    ViewFileSystem.FsGetter fsGetter =\n+        new ViewFileSystemOverloadScheme.ChildFsGetter(scheme);\n+    try (FileSystem fs = fsGetter.getNewInstance(mountTable.toUri(), conf)) {\n+      RemoteIterator<LocatedFileStatus> listFiles =\n+          fs.listFiles(mountTable, false);\n+      LocatedFileStatus lfs = null;\n+      int higherVersion = -1;\n+      while (listFiles.hasNext()) {\n+        LocatedFileStatus curLfs = listFiles.next();\n+        String cur = curLfs.getPath().getName();\n+        String[] nameParts = cur.split(REGEX_DOT);\n+        if (nameParts.length < 2) {\n+          logInvalidFileNameFormat(cur);\n+          continue; // invalid file name\n+        }\n+        int curVersion = higherVersion;\n+        try {\n+          curVersion = Integer.parseInt(nameParts[nameParts.length - 2]);\n+        } catch (NumberFormatException nfe) {\n+          logInvalidFileNameFormat(cur);\n+          continue;\n+        }\n+\n+        if (curVersion > higherVersion) {\n+          higherVersion = curVersion;\n+          lfs = curLfs;\n+        }\n+      }\n+\n+      if (lfs == null) {\n+        // No valid mount table file found.\n+        // TODO: Should we fail? Currently viewfs init will fail if no mount\n+        // links anyway.\n+        LOGGER.warn(\"No valid mount-table file exist at: {}. At least one \"\n+            + \"mount-table file should present with the name format: \"\n+            + \"mount-table.<versionNumber>.xml\", mountTableConfigPath);\n+        return;\n+      }\n+      // Latest version file.\n+      Path latestVersionMountTable = lfs.getPath();\n+      if (LOGGER.isDebugEnabled()) {\n+        LOGGER.debug(\"Loading the mount-table {} into configuration.\",\n+            latestVersionMountTable);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b28142fa670bef9518b7938889cc7fe133000bab"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjU4ODEz", "url": "https://github.com/apache/hadoop/pull/2006#pullrequestreview-412258813", "createdAt": "2020-05-14T23:49:01Z", "commit": {"oid": "b28142fa670bef9518b7938889cc7fe133000bab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4295, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}