{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMTMxMzgy", "number": 2150, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoxOTozMlrOEQW13A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoyMDozOVrOEQW3Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTg2OTA4OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoxOTozMlrOG0d1QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDo0ODowOVrOG0euQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NzkwNA==", "bodyText": "tag this as @VisibleForTesting too", "url": "https://github.com/apache/hadoop/pull/2150#discussion_r457667904", "createdAt": "2020-07-20T20:19:32Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java", "diffHunk": "@@ -170,7 +170,7 @@ String getSasToken() {\n    * Executes the REST operation with retry, by issuing one or more\n    * HTTP operations.\n    */\n-  void execute() throws AzureBlobFileSystemException {\n+   public void execute() throws AzureBlobFileSystemException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d4a5931ca4b0e79e4e4e9a8b7fb4848daae2472"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4MjQ5Nw==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2150#discussion_r457682497", "createdAt": "2020-07-20T20:48:09Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java", "diffHunk": "@@ -170,7 +170,7 @@ String getSasToken() {\n    * Executes the REST operation with retry, by issuing one or more\n    * HTTP operations.\n    */\n-  void execute() throws AzureBlobFileSystemException {\n+   public void execute() throws AzureBlobFileSystemException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NzkwNA=="}, "originalCommit": {"oid": "0d4a5931ca4b0e79e4e4e9a8b7fb4848daae2472"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTg3MjE1OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemDelete.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoyMDozOVrOG0d3NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDo1MDowMlrOG0ex1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2ODQwNQ==", "bodyText": "check spelling of mimic", "url": "https://github.com/apache/hadoop/pull/2150#discussion_r457668405", "createdAt": "2020-07-20T20:20:39Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemDelete.java", "diffHunk": "@@ -181,6 +186,64 @@ public void testDeleteIdempotency() throws Exception {\n         .describedAs(\n             \"Delete is considered idempotent by default and should return success.\")\n         .isEqualTo(HTTP_OK);\n+\n+    // Case 2: Mock instance of Http Operation response. This will return\n+    // HTTP:Bad Request\n+    AbfsHttpOperation http400Op = mock(AbfsHttpOperation.class);\n+    when(http400Op.getStatusCode()).thenReturn(HTTP_BAD_REQUEST);\n+\n+    // Mock delete response to 400\n+    when(op.getResult()).thenReturn(http400Op);\n+\n+    Assertions.assertThat(testClient.deleteIdempotencyCheckOp(op)\n+        .getResult()\n+        .getStatusCode())\n+        .describedAs(\n+            \"Idempotency check to happen only for HTTP 404 response.\")\n+        .isEqualTo(HTTP_BAD_REQUEST);\n+\n+  }\n+\n+  @Test\n+  public void testDeleteIdempotencyTriggerHttp404() throws Exception {\n+\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    AbfsClient client = TestAbfsClient.createTestClientFromCurrentContext(\n+        fs.getAbfsStore().getClient(),\n+        this.getConfiguration());\n+\n+    // Case 1: Not a retried case should throw error back\n+    intercept(AbfsRestOperationException.class,\n+        () -> client.deletePath(\n+        \"/NonExistingPath\",\n+        false,\n+        null));\n+\n+    // mock idempotency check to mimick retried case", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d4a5931ca4b0e79e4e4e9a8b7fb4848daae2472"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4MzQxMw==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2150#discussion_r457683413", "createdAt": "2020-07-20T20:50:02Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemDelete.java", "diffHunk": "@@ -181,6 +186,64 @@ public void testDeleteIdempotency() throws Exception {\n         .describedAs(\n             \"Delete is considered idempotent by default and should return success.\")\n         .isEqualTo(HTTP_OK);\n+\n+    // Case 2: Mock instance of Http Operation response. This will return\n+    // HTTP:Bad Request\n+    AbfsHttpOperation http400Op = mock(AbfsHttpOperation.class);\n+    when(http400Op.getStatusCode()).thenReturn(HTTP_BAD_REQUEST);\n+\n+    // Mock delete response to 400\n+    when(op.getResult()).thenReturn(http400Op);\n+\n+    Assertions.assertThat(testClient.deleteIdempotencyCheckOp(op)\n+        .getResult()\n+        .getStatusCode())\n+        .describedAs(\n+            \"Idempotency check to happen only for HTTP 404 response.\")\n+        .isEqualTo(HTTP_BAD_REQUEST);\n+\n+  }\n+\n+  @Test\n+  public void testDeleteIdempotencyTriggerHttp404() throws Exception {\n+\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    AbfsClient client = TestAbfsClient.createTestClientFromCurrentContext(\n+        fs.getAbfsStore().getClient(),\n+        this.getConfiguration());\n+\n+    // Case 1: Not a retried case should throw error back\n+    intercept(AbfsRestOperationException.class,\n+        () -> client.deletePath(\n+        \"/NonExistingPath\",\n+        false,\n+        null));\n+\n+    // mock idempotency check to mimick retried case", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2ODQwNQ=="}, "originalCommit": {"oid": "0d4a5931ca4b0e79e4e4e9a8b7fb4848daae2472"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3511, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}