{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MTI0MzUz", "number": 2053, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMTozMDoyM1rOEC611w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMTo0ODoyN1rOEC7IaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDk2NjYzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs/src/site/markdown/HDFSCommands.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMTozMDoyM1rOGfq0WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMTozMDoyM1rOGfq0WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2MDU2OA==", "bodyText": "This was -> This \"way\" ?\nget the access all -> get the access \"to\" all", "url": "https://github.com/apache/hadoop/pull/2053#discussion_r435860568", "createdAt": "2020-06-05T11:30:23Z", "author": {"login": "ayushtkn"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/site/markdown/HDFSCommands.md", "diffHunk": "@@ -693,4 +693,42 @@ Usage: `hdfs debug recoverLease -path <path> [-retries <num-retries>]`\n | [`-path` *path*] | HDFS path for which to recover the lease. |\n | [`-retries` *num-retries*] | Number of times the client will retry calling recoverLease. The default number of retries is 1. |\n \n-Recover the lease on the specified path. The path must reside on an HDFS filesystem. The default number of retries is 1.\n+Recover the lease on the specified path. The path must reside on an HDFS file system. The default number of retries is 1.\n+\n+dfsadmin with ViewFsOverloadScheme\n+----------------------------------\n+\n+Usage: `hdfs dfsadmin -fs <child fs mount link URI> <dfsadmin command options>`\n+\n+| COMMAND\\_OPTION | Description |\n+|:---- |:---- |\n+| `-fs` *child fs mount link URI* | Its a logical mount link path to child file system in ViewFS world. This uri typically formed as src mount link prefixed with fs.defaultFS. Please note, this is not an actual child file system uri, instead its a logical mount link uri pointing to actual child file system|\n+\n+Example command usage:\n+   `hdfs dfsadmin -fs hdfs://nn1 -safemode enter`\n+\n+In ViewFsOverloadScheme, we may have multiple child file systems as mount point mappings as shown in [ViewFsOverloadScheme Guide](./ViewFsOverloadScheme.html). Here -fs option is an optional generic parameter supported by dfsadmin. When users want to execute commands on one of the child file system, they need to pass that file system mount mapping link uri to -fs option. Let's take an example mount link configuration and dfsadmin command below.\n+\n+Mount link:\n+\n+```xml\n+<property>\n+  <name>fs.defaultFS</name>\n+  <value>hdfs://MyCluster1</value>\n+</property>\n+\n+<property>\n+  <name>fs.viewfs.mounttable.MyCluster1./user</name>\n+  <value>hdfs://MyCluster2/user</value>\n+  <!-- mount table name : MyCluster1\n+       mount link mapping: hdfs://MyCluster1/user --> hdfs://MyCluster2/user\n+       mount link path: /user\n+       mount link uri: hdfs://MyCluster1/user\n+       mount target uri for /user: hdfs://MyCluster2/user -->\n+</property>\n+```\n+\n+If user wants to talk to `hdfs://MyCluster2/`, then they can pass -fs option (`-fs hdfs://MyCluster1/user`)\n+Since /user was mapped to a cluster `hdfs://MyCluster2/user`, dfsadmin resolve the passed (`-fs hdfs://MyCluster1/user`) to target fs (`hdfs://MyCluster2/user`).\n+This was users can get the access all hdfs child file systems in ViewFsOverloadScheme.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc573f5154b2afe2082609834762b4e02c21d212"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTAwNDAzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs/src/site/markdown/ViewFsOverloadScheme.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMTo0NDoyM1rOGfrL8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMTo0NDoyM1rOGfrL8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2NjYwOQ==", "bodyText": "\"to understand to where\" -> \"to understand where\"", "url": "https://github.com/apache/hadoop/pull/2053#discussion_r435866609", "createdAt": "2020-06-05T11:44:23Z", "author": {"login": "ayushtkn"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/site/markdown/ViewFsOverloadScheme.md", "diffHunk": "@@ -0,0 +1,163 @@\n+<!---\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+   http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License. See accompanying LICENSE file.\n+-->\n+\n+View File System Overload Scheme Guide\n+======================================\n+\n+<!-- MACRO{toc|fromDepth=0|toDepth=3} -->\n+\n+Introduction\n+------------\n+\n+The View File System Overload Scheme introduced to solve two key challenges with the View File System(ViewFS). The first problem is, to use ViewFS, users need to update fs.defaultFS with viewfs scheme (`viewfs://`). The second problem is that users need to copy the mount-table configurations to all the client nodes.\n+The ViewFileSystemOverloadScheme is addressing these challenges.\n+\n+View File System Overload Scheme\n+--------------------------------\n+\n+### Details\n+\n+The View File System Overload Scheme is an extension to the View File System. This will allow users to continue to use their existing fs.defaultFS configured scheme or any new scheme name instead of using scheme `viewfs`. Mount link configurations key, value formats are same as in [ViewFS Guide](./ViewFs.html). If a user wants to continue use the same fs.defaultFS and wants to have more mount points, then mount link configurations should have the current fs.defaultFS authority name as mount table name. Example if fs.defaultFS is `hdfs://mycluster`, then the mount link configuration key name should be like in the following format `fs.viewfs.mounttable.*mycluster*.<mountLinkPath>`. We will discuss more example configurations in following sections.\n+\n+Another important improvement with the ViewFileSystemOverloadScheme is, administrators need not copy the `mount-table.xml` configuration file to 1000s of client nodes. Instead they can keep the mount-table configuration file in a Hadoop compatible file system. So, keeping the configuration file in a central place makes administrators life easier as they can update mount-table in single place.\n+\n+### Enabling View File System Overload Scheme\n+\n+To use this class, the following configurations needed to be added in core-site.xml file.\n+\n+```xml\n+<property>\n+  <name>fs.<scheme>.impl</name>\n+  <value>org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme</value>\n+</property>\n+```\n+Here `<scheme>` should be same as the uri-scheme configured in fs.defautFS. For example if fs.defaultFS was configured with `hdfs://mycluster`, then the above configuration would be like below:\n+\n+```xml\n+<property>\n+  <name>fs.hdfs.impl</name>\n+  <value>org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme</value>\n+</property>\n+```\n+\n+### Example Configurations\n+\n+**Example 1:**\n+\n+If users want some of their existing cluster (`hdfs://mycluster`) data to mount with hdfs(`hdfs://mycluster`) and other object store clusters(`o3fs://bucket1.volume1.omhost/`, `s3a://bucket1/`), the following example configurations can show how to add mount links.\n+\n+\n+```xml\n+<property>\n+  <name>fs.viewfs.mounttable.Cluster./user</name>\n+  <value>hdfs://mycluster/user</value>\n+</property>\n+\n+<property>\n+  <name>fs.viewfs.mounttable.Cluster./data</name>\n+  <value>o3fs://bucket1.volume1/data</value>\n+</property>\n+\n+<property>\n+  <name>fs.viewfs.mounttable.Cluster./backup</name>\n+  <value>s3a://bucket1/backup/</value>\n+</property>\n+```\n+\n+Let's consider the following operations to understand to where these operations will be delegated based on mount links.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc573f5154b2afe2082609834762b4e02c21d212"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTAxNDE2OnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs/src/site/markdown/ViewFsOverloadScheme.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMTo0ODoyN1rOGfrS1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMTo0ODoyN1rOGfrS1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2ODM3Mg==", "bodyText": "\"To enabled\" -> \"To enable\"", "url": "https://github.com/apache/hadoop/pull/2053#discussion_r435868372", "createdAt": "2020-06-05T11:48:27Z", "author": {"login": "ayushtkn"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/site/markdown/ViewFsOverloadScheme.md", "diffHunk": "@@ -0,0 +1,163 @@\n+<!---\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+   http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License. See accompanying LICENSE file.\n+-->\n+\n+View File System Overload Scheme Guide\n+======================================\n+\n+<!-- MACRO{toc|fromDepth=0|toDepth=3} -->\n+\n+Introduction\n+------------\n+\n+The View File System Overload Scheme introduced to solve two key challenges with the View File System(ViewFS). The first problem is, to use ViewFS, users need to update fs.defaultFS with viewfs scheme (`viewfs://`). The second problem is that users need to copy the mount-table configurations to all the client nodes.\n+The ViewFileSystemOverloadScheme is addressing these challenges.\n+\n+View File System Overload Scheme\n+--------------------------------\n+\n+### Details\n+\n+The View File System Overload Scheme is an extension to the View File System. This will allow users to continue to use their existing fs.defaultFS configured scheme or any new scheme name instead of using scheme `viewfs`. Mount link configurations key, value formats are same as in [ViewFS Guide](./ViewFs.html). If a user wants to continue use the same fs.defaultFS and wants to have more mount points, then mount link configurations should have the current fs.defaultFS authority name as mount table name. Example if fs.defaultFS is `hdfs://mycluster`, then the mount link configuration key name should be like in the following format `fs.viewfs.mounttable.*mycluster*.<mountLinkPath>`. We will discuss more example configurations in following sections.\n+\n+Another important improvement with the ViewFileSystemOverloadScheme is, administrators need not copy the `mount-table.xml` configuration file to 1000s of client nodes. Instead they can keep the mount-table configuration file in a Hadoop compatible file system. So, keeping the configuration file in a central place makes administrators life easier as they can update mount-table in single place.\n+\n+### Enabling View File System Overload Scheme\n+\n+To use this class, the following configurations needed to be added in core-site.xml file.\n+\n+```xml\n+<property>\n+  <name>fs.<scheme>.impl</name>\n+  <value>org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme</value>\n+</property>\n+```\n+Here `<scheme>` should be same as the uri-scheme configured in fs.defautFS. For example if fs.defaultFS was configured with `hdfs://mycluster`, then the above configuration would be like below:\n+\n+```xml\n+<property>\n+  <name>fs.hdfs.impl</name>\n+  <value>org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme</value>\n+</property>\n+```\n+\n+### Example Configurations\n+\n+**Example 1:**\n+\n+If users want some of their existing cluster (`hdfs://mycluster`) data to mount with hdfs(`hdfs://mycluster`) and other object store clusters(`o3fs://bucket1.volume1.omhost/`, `s3a://bucket1/`), the following example configurations can show how to add mount links.\n+\n+\n+```xml\n+<property>\n+  <name>fs.viewfs.mounttable.Cluster./user</name>\n+  <value>hdfs://mycluster/user</value>\n+</property>\n+\n+<property>\n+  <name>fs.viewfs.mounttable.Cluster./data</name>\n+  <value>o3fs://bucket1.volume1/data</value>\n+</property>\n+\n+<property>\n+  <name>fs.viewfs.mounttable.Cluster./backup</name>\n+  <value>s3a://bucket1/backup/</value>\n+</property>\n+```\n+\n+Let's consider the following operations to understand to where these operations will be delegated based on mount links.\n+\n+  *Op1:* Create a file with the the path `hdfs://mycluster/user/fileA`, then physically this file will be created at `hdfs://mycluster/user/fileA`. This delegation happened based on the first configuration parameter in above configurations. Here `/user` mapped to `hdfs://mycluster/user/`.\n+\n+  *Op2:* Create a file the the path `hdfs://mycluster/data/datafile`, then this file will be created at `o3fs://bucket1.volume1.omhost/data/datafile`. This delegation happened based on second configurations parameter in above configurations. Here `/data` was mapped with `o3fs://bucket1.volume1.omhost/data/`.\n+\n+  *Op3:* Create a file with the the path `hdfs://Cluster/backup/data.zip`, then  physically this file will be created at `s3a://bucket1/backup/data.zip`. This delegation happened based on the third configuration parameter in above configurations. Here `/backup` was mapped to `s3a://bucket1/backup/`.\n+\n+\n+**Example 2:**\n+\n+If users want some of their existing cluster (`s3a://bucketA/`) data to mount with other hdfs cluster(`hdfs://Cluster`) and object store clusters(`o3fs://bucket1.volume1.omhost/`, `s3a://bucketA/`), the following example configurations can show how to add mount links.\n+\n+\n+```xml\n+<property>\n+  <name>fs.viewfs.mounttable.bucketA./user</name>\n+  <value>hdfs://Cluster/user</value>\n+</property>\n+\n+<property>\n+  <name>fs.viewfs.mounttable.bucketA./data</name>\n+  <value>o3fs://bucket1.volume1.omhost/data</value>\n+</property>\n+\n+<property>\n+  <name>fs.viewfs.mounttable.bucketA./salesDB</name>\n+  <value>s3a://bucketA/salesDB/</value>\n+</property>\n+```\n+Let's consider the following operations to understand to where these operations will be delegated based on mount links.\n+\n+ *Op1:* Create a file with the the path `s3a://bucketA/user/fileA`, then this file will be created physically at `hdfs://Cluster/user/fileA`. This delegation happened based on the first configuration parameter in above configurations. Here `/user` mapped to `hdfs://Cluster/user`.\n+\n+  *Op2:* Create a file the the path `s3a://bucketA/data/datafile`, then this file will be created at `o3fs://bucket1.volume1.omhost/data/datafile`. This delegation happened based on second configurations parameter in above configurations. Here `/data` was mapped with `o3fs://bucket1.volume1.omhost/data/`.\n+\n+  *Op3:* Create a file with the the path `s3a://bucketA/salesDB/dbfile`, then  physically this file will be created at `s3a://bucketA/salesDB/dbfile`. This delegation happened based on the third configuration parameter in above configurations. Here `/salesDB` was mapped to `s3a://bucket1/salesDB`.\n+\n+Note: In above examples we used create operation only, but the same mechanism applies to any other file system APIs here.\n+\n+The following picture shows how the different schemes can be used in ViewFileSystemOverloadScheme compared to the ViewFileSystem.\n+\n+<img src=\"./images/ViewFSOverloadScheme.png\" width=\"1050\" height=\"550\"/>\n+\n+### Central Mount Table Configurations\n+\n+To enabled central mount table configuration, we need to configure `fs.viewfs.mounttable.path` in `core-site.xml` with the value as the Hadoop compatible file system directory/file path, where the `mount-table-<versionNumber>.xml` file copied. Here versionNumber is an integer number and need to increase the version number and upload new file in same directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc573f5154b2afe2082609834762b4e02c21d212"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3588, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}