{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NjY4MDY0", "number": 2461, "title": "YARN-10468. Fix TestNodeStatusUpdater timeouts and broken conditions", "bodyText": "This PR tries to address several problems in the test class:\n\nIn case of nodeManager failure, some loops will keep looping for ever without timeouts. The following examples was replaced by a limit that has a timeouts.\n\nwhile(heartBeadID < 12) {\n  Thread.Sleep();\n}\n\n\nheartBeatID is volatile which does not guarantee atomic updates. This has been replaced with AtomicInteger.\n\n\nLoop on heartBeatID values, was not checking whether the NM has failed. In that case, the test case will keep looping using resources and CPU in vain. This has been replaced by checks on the NM service status.\n\n\nNM was closed twice: Once in the test method and a second time in the tearDown()\n\n\nSeveral tests did not wait for the NM to start after calling nm.start()\n\n\nstopping a service did not properly wait until the service is completely shutdown.\n\n\nNOTICE\nPlease create an issue in ASF JIRA before opening a pull request,\nand you need to set the title of the pull request which starts with\nthe corresponding JIRA issue number. (e.g. HADOOP-XXXXX. Fix a typo in YYY.)\nFor more details, please see https://cwiki.apache.org/confluence/display/HADOOP/How+To+Contribute", "createdAt": "2020-11-12T06:58:58Z", "url": "https://github.com/apache/hadoop/pull/2461", "merged": true, "mergeCommit": {"oid": "569b20e31c08642a448287c9c1f8592adfd5f58e"}, "closed": true, "closedAt": "2020-11-24T19:09:30Z", "author": {"login": "amahussein"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb2cy7gFqTUyOTM0NzQ5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfsbLoABqjQwMzM3Njc2Nzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzQ3NDkx", "url": "https://github.com/apache/hadoop/pull/2461#pullrequestreview-529347491", "createdAt": "2020-11-12T17:57:24Z", "commit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1NzoyNVrOHyG8Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1OTowN1rOHyHAVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNDU5NQ==", "bodyText": "We can do this with GenericTestUtils.waitFor() right?", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522304595", "createdAt": "2020-11-12T17:57:25Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1161,43 +1165,34 @@ protected NodeStatusUpdater createNodeStatusUpdater(Context context,\n     Assert.assertTrue(\"last service is NOT the node status updater\",\n         lastService instanceof NodeStatusUpdater);\n \n-    new Thread() {\n-      public void run() {\n-        try {\n-          nm.start();\n-        } catch (Throwable e) {\n-          TestNodeStatusUpdater.this.nmStartError = e;\n-          throw new YarnRuntimeException(e);\n-        }\n+    Thread starterThread = new Thread(() -> {\n+      try {\n+        nm.start();\n+      } catch (Throwable e) {\n+        TestNodeStatusUpdater.this.nmStartError = e;\n+        throw new YarnRuntimeException(e);\n       }\n-    }.start();\n+    });\n+    starterThread.start();\n \n-    System.out.println(\" ----- thread already started..\"\n-        + nm.getServiceState());\n+    LOG.info(\" ----- thread already started..{}\", nm.getServiceState());\n \n-    int waitCount = 0;\n-    while (nm.getServiceState() == STATE.INITED && waitCount++ != 50) {\n-      LOG.info(\"Waiting for NM to start..\");\n-      if (nmStartError != null) {\n-        LOG.error(\"Error during startup. \", nmStartError);\n-        Assert.fail(nmStartError.getCause().getMessage());\n-      }\n-      Thread.sleep(2000);\n-    }\n-    if (nm.getServiceState() != STATE.STARTED) {\n-      // NM could have failed.\n-      Assert.fail(\"NodeManager failed to start\");\n+    starterThread.join(100000);\n+\n+    if (nmStartError != null) {\n+      LOG.error(\"Error during startup. \", nmStartError);\n+      Assert.fail(nmStartError.getCause().getMessage());\n     }\n \n-    waitCount = 0;\n-    while (heartBeatID <= 3 && waitCount++ != 200) {\n-      Thread.sleep(1000);\n+    int waitCount = 0;\n+    while (nm.getServiceState() == STATE.STARTED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNTIzOA==", "bodyText": "waitFor()?", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522305238", "createdAt": "2020-11-12T17:58:28Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1529,19 +1518,27 @@ public void testApplicationKeepAlive() throws Exception {\n       nm.init(conf);\n       nm.start();\n       // HB 2 -> app cancelled by RM.\n-      while (heartBeatID < 12) {\n-        Thread.sleep(1000l);\n+      GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED,\n+          20, 10000);\n+      int waitCount = 0;\n+      while (nm.getServiceState() == STATE.STARTED && heartBeatID < 12\n+          && waitCount++ < 60000000) {\n+        Thread.sleep(100l);\n       }\n+      Assert.assertTrue(heartBeatID >= 12);\n       MyResourceTracker3 rt =\n           (MyResourceTracker3) nm.getNodeStatusUpdater().getRMClient();\n       rt.context.getApplications().remove(rt.appId);\n       Assert.assertEquals(1, rt.keepAliveRequests.size());\n       int numKeepAliveRequests = rt.keepAliveRequests.get(rt.appId).size();\n       LOG.info(\"Number of Keep Alive Requests: [\" + numKeepAliveRequests + \"]\");\n       Assert.assertTrue(numKeepAliveRequests == 2 || numKeepAliveRequests == 3);\n-      while (heartBeatID < 20) {\n-        Thread.sleep(1000l);\n+      waitCount = 0;\n+      while (nm.getServiceState() == STATE.STARTED && heartBeatID < 20", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNTI5Mw==", "bodyText": "waitFor()?", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522305293", "createdAt": "2020-11-12T17:58:34Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1529,19 +1518,27 @@ public void testApplicationKeepAlive() throws Exception {\n       nm.init(conf);\n       nm.start();\n       // HB 2 -> app cancelled by RM.\n-      while (heartBeatID < 12) {\n-        Thread.sleep(1000l);\n+      GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED,\n+          20, 10000);\n+      int waitCount = 0;\n+      while (nm.getServiceState() == STATE.STARTED && heartBeatID < 12", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNTYyMQ==", "bodyText": "waitFor()?", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522305621", "createdAt": "2020-11-12T17:59:07Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1712,27 +1704,14 @@ protected ContainerManagerImpl createContainerManager(Context context,\n     YarnConfiguration conf = createNMConfig();\n     nm.init(conf);\n     nm.start();\n-\n-    System.out.println(\" ----- thread already started..\"\n-        + nm.getServiceState());\n+    GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED,\n+        20, 20000);\n \n     int waitCount = 0;\n-    while (nm.getServiceState() == STATE.INITED && waitCount++ != 20) {\n-      LOG.info(\"Waiting for NM to start..\");\n-      if (nmStartError != null) {\n-        LOG.error(\"Error during startup. \", nmStartError);\n-        Assert.fail(nmStartError.getCause().getMessage());\n-      }\n-      Thread.sleep(1000);\n-    }\n-    if (nm.getServiceState() != STATE.STARTED) {\n-      // NM could have failed.\n-      Assert.fail(\"NodeManager failed to start\");\n-    }\n \n-    waitCount = 0;\n-    while (heartBeatID <= 3 && waitCount++ != 20) {\n-      Thread.sleep(500);\n+    while (nm.getServiceState() == STATE.STARTED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 283}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc", "author": {"user": {"login": "amahussein", "name": "Ahmed Hussein"}}, "url": "https://github.com/apache/hadoop/commit/7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc", "committedDate": "2020-11-12T06:57:17Z", "message": "YARN-10468. Fix TestNodeStatusUpdater timeouts and broken conditions"}, "afterCommit": {"oid": "b37e863b13de1093580c06ddf12083f28dee16d8", "author": {"user": {"login": "amahussein", "name": "Ahmed Hussein"}}, "url": "https://github.com/apache/hadoop/commit/b37e863b13de1093580c06ddf12083f28dee16d8", "committedDate": "2020-11-12T17:30:46Z", "message": "YARN-10468. Fix TestNodeStatusUpdater timeouts and broken conditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bffc68c56dfe73698814e7b648aef196761f25b3", "author": {"user": {"login": "amahussein", "name": "Ahmed Hussein"}}, "url": "https://github.com/apache/hadoop/commit/bffc68c56dfe73698814e7b648aef196761f25b3", "committedDate": "2020-11-24T16:33:58Z", "message": "YARN-10468. Fix TestNodeStatusUpdater timeouts and broken conditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51db2bb4cd67074f4d701b44e1ec0e7deb2ce360", "author": {"user": {"login": "amahussein", "name": "Ahmed Hussein"}}, "url": "https://github.com/apache/hadoop/commit/51db2bb4cd67074f4d701b44e1ec0e7deb2ce360", "committedDate": "2020-11-24T16:33:59Z", "message": "YARN-10468. use WaitFor throughout the test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b66e55b73315d72900bd3ea92fccf303cd995cc0", "author": {"user": {"login": "amahussein", "name": "Ahmed Hussein"}}, "url": "https://github.com/apache/hadoop/commit/b66e55b73315d72900bd3ea92fccf303cd995cc0", "committedDate": "2020-11-12T20:51:14Z", "message": "YARN-10468. use WaitFor throughout the test"}, "afterCommit": {"oid": "51db2bb4cd67074f4d701b44e1ec0e7deb2ce360", "author": {"user": {"login": "amahussein", "name": "Ahmed Hussein"}}, "url": "https://github.com/apache/hadoop/commit/51db2bb4cd67074f4d701b44e1ec0e7deb2ce360", "committedDate": "2020-11-24T16:33:59Z", "message": "YARN-10468. use WaitFor throughout the test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3251, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}