{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MzE0OTM1", "number": 2352, "title": "HDFS-15607. Create trash dir when allowing snapshottable dir", "bodyText": "https://issues.apache.org/jira/browse/HDFS-15607\nChanges\n\nSnapshottable directory trash root will be automatically provisioned (with permission 777 and sticky bit) when allowing snapshot via DFSAdmin command, if dfs.namenode.snapshot.trashroot.enabled is set to true on the NameNode.\n\nNote that calling DistributedFileSystem#allowSnapshot directly will NOT provision trash root at all. This behavior is aligned with DistributedFileSystem#createEncryptionZone.\n\n\n\n$ hdfs dfsadmin -allowSnapshot /ssdir3/\nAllowing snapshot on /ssdir3/ succeeded\n$ hdfs dfs -ls /ssdir3\nFound 1 items\ndrwxrwxrwt   - smeng supergroup          0 2020-09-30 00:00 /ssdir3/.Trash\n\nAdded new dfsadmin command -provisionSnapshotTrash. Admins can use this new command to provision trash roots when the cluster is upgraded from older HDFS which doesn't have snapshottable directory trash roots feature:\n\n$ hdfs dfsadmin -provisionSnapshotTrash\nUsage: hdfs dfsadmin [-provisionSnapshotTrash <snapshotDir>]\n$ hdfs dfsadmin -provisionSnapshotTrash /ssdir2/\nProvision of snapshot trash in /ssdir2/ succeeded\n$ hdfs dfs -ls /ssdir2/\nFound 1 items\ndrwxrwxrwt   - smeng supergroup          0 2020-09-30 00:00 /ssdir2/.Trash\n\nAdded test in TestDistributedFileSystem and TestDFSAdmin.", "createdAt": "2020-09-30T07:36:14Z", "url": "https://github.com/apache/hadoop/pull/2352", "merged": true, "mergeCommit": {"oid": "43b0c0b0546d79a1ab4df5fe02310d007f6bc178"}, "closed": true, "closedAt": "2020-10-05T12:02:01Z", "author": {"login": "smengcl"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdN6U4QgFqTQ5OTI5NjgyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPhL4wgFqTUwMTkxODkxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5Mjk2ODI0", "url": "https://github.com/apache/hadoop/pull/2352#pullrequestreview-499296824", "createdAt": "2020-09-30T10:35:32Z", "commit": {"oid": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDozNTozMlrOHaXc1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDozNTozMlrOHaXc1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQwOTIzNg==", "bodyText": "should it be even allowed to create a .Trash file inside a snapshottable root?", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497409236", "createdAt": "2020-09-30T10:35:32Z", "author": {"login": "bshashikant"}, "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java", "diffHunk": "@@ -2094,6 +2103,41 @@ public Void next(final FileSystem fs, final Path p)\n     }.resolve(this, absF);\n   }\n \n+  /**\n+   * Helper function to check if a trash root exists in the given directory,\n+   * remove the trash root if it is empty, or throw IOException if not empty\n+   * @param p Path to a directory.\n+   */\n+  private void checkTrashRootAndRemoveIfEmpty(final Path p) throws IOException {\n+    Path trashRoot = new Path(p, FileSystem.TRASH_PREFIX);\n+    try {\n+      // listStatus has 4 possible outcomes here:\n+      // 1) throws FileNotFoundException: the trash root doesn't exist.\n+      // 2) returns empty array: the trash path is an empty directory.\n+      // 3) returns non-empty array, len >= 2: the trash root is not empty.\n+      // 4) returns non-empty array, len == 1:\n+      //    i) if the element's path is exactly p, the trash path is not a dir.\n+      //       e.g. a file named .Trash. Ignore.\n+      //   ii) if the element's path isn't p, the trash root is not empty.\n+      FileStatus[] fileStatuses = listStatus(trashRoot);\n+      if (fileStatuses.length == 0) {\n+        DFSClient.LOG.debug(\"Removing empty trash root {}\", trashRoot);\n+        delete(trashRoot, false);\n+      } else {\n+        if (fileStatuses.length == 1\n+            && !fileStatuses[0].isDirectory()\n+            && !fileStatuses[0].getPath().equals(p)) {\n+          // Ignore the trash path because it is not a directory.\n+          DFSClient.LOG.warn(\"{} is not a directory.\", trashRoot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzAxOTUx", "url": "https://github.com/apache/hadoop/pull/2352#pullrequestreview-499301951", "createdAt": "2020-09-30T10:43:02Z", "commit": {"oid": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzQ5NjU2", "url": "https://github.com/apache/hadoop/pull/2352#pullrequestreview-499349656", "createdAt": "2020-09-30T11:54:27Z", "commit": {"oid": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo1NDoyN1rOHaZ6hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjowMjowNVrOHaaKRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0OTYwNw==", "bodyText": "Should isSnapshotTrashRootEnabled be checked here?  If isSnapshotTrashRootEnabled == false, all the provisionSnapshottableDirTrash calls should fail.", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497449607", "createdAt": "2020-09-30T11:54:27Z", "author": {"login": "szetszwo"}, "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java", "diffHunk": "@@ -2901,6 +2945,74 @@ private void provisionEZTrash(String path, FsPermission trashPermission)\n     setPermission(trashPath, trashPermission);\n   }\n \n+  /**\n+   * HDFS only.\n+   * \n+   * Provision snapshottable directory trash.\n+   * @param path Path to a snapshottable directory.\n+   * @param trashPermission Expected FsPermission of the trash root.\n+   * @throws IOException\n+   */\n+  public void provisionSnapshottableDirTrash(final Path path,\n+      final FsPermission trashPermission) throws IOException {\n+    Path absF = fixRelativePart(path);\n+    new FileSystemLinkResolver<Void>() {\n+      @Override\n+      public Void doCall(Path p) throws IOException {\n+        provisionSnapshottableDirTrash(getPathName(p), trashPermission);\n+        return null;\n+      }\n+\n+      @Override\n+      public Void next(FileSystem fs, Path p) throws IOException {\n+        if (fs instanceof DistributedFileSystem) {\n+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;\n+          myDfs.provisionSnapshottableDirTrash(p, trashPermission);\n+          return null;\n+        }\n+        throw new UnsupportedOperationException(\n+            \"Cannot provisionSnapshottableDirTrash through a symlink to\" +\n+            \" a non-DistributedFileSystem: \" + fs + \" -> \" + p);\n+      }\n+    }.resolve(this, absF);\n+  }\n+\n+  private void provisionSnapshottableDirTrash(\n+      String pathStr, FsPermission trashPermission) throws IOException {\n+    Path path = new Path(pathStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MTA4NA==", "bodyText": "Use the constant HdfsAdmin.TRASH_PERMISSION instead of harding coding it.", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497451084", "createdAt": "2020-09-30T11:57:23Z", "author": {"login": "szetszwo"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java", "diffHunk": "@@ -1245,6 +1265,10 @@ private void printHelp(String cmd) {\n     String disallowSnapshot = \"-disallowSnapshot <snapshotDir>:\\n\" +\n         \"\\tDo not allow snapshots to be taken on a directory any more.\\n\";\n \n+    String provisionSnapshotTrash = \"-provisionSnapshotTrash <snapshotDir>:\\n\" +\n+        \"\\tProvision trash root in a snapshottable directory with permission\"\n+        + \"\\t777 and sticky bit.\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MjQxMg==", "bodyText": "Return the trash path.", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497452412", "createdAt": "2020-09-30T11:59:50Z", "author": {"login": "szetszwo"}, "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java", "diffHunk": "@@ -2901,6 +2945,74 @@ private void provisionEZTrash(String path, FsPermission trashPermission)\n     setPermission(trashPath, trashPermission);\n   }\n \n+  /**\n+   * HDFS only.\n+   * \n+   * Provision snapshottable directory trash.\n+   * @param path Path to a snapshottable directory.\n+   * @param trashPermission Expected FsPermission of the trash root.\n+   * @throws IOException\n+   */\n+  public void provisionSnapshottableDirTrash(final Path path,\n+      final FsPermission trashPermission) throws IOException {\n+    Path absF = fixRelativePart(path);\n+    new FileSystemLinkResolver<Void>() {\n+      @Override\n+      public Void doCall(Path p) throws IOException {\n+        provisionSnapshottableDirTrash(getPathName(p), trashPermission);\n+        return null;\n+      }\n+\n+      @Override\n+      public Void next(FileSystem fs, Path p) throws IOException {\n+        if (fs instanceof DistributedFileSystem) {\n+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;\n+          myDfs.provisionSnapshottableDirTrash(p, trashPermission);\n+          return null;\n+        }\n+        throw new UnsupportedOperationException(\n+            \"Cannot provisionSnapshottableDirTrash through a symlink to\" +\n+            \" a non-DistributedFileSystem: \" + fs + \" -> \" + p);\n+      }\n+    }.resolve(this, absF);\n+  }\n+\n+  private void provisionSnapshottableDirTrash(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MzMyNA==", "bodyText": "Return the trash path.", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497453324", "createdAt": "2020-09-30T12:01:32Z", "author": {"login": "szetszwo"}, "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java", "diffHunk": "@@ -2901,6 +2945,74 @@ private void provisionEZTrash(String path, FsPermission trashPermission)\n     setPermission(trashPath, trashPermission);\n   }\n \n+  /**\n+   * HDFS only.\n+   * \n+   * Provision snapshottable directory trash.\n+   * @param path Path to a snapshottable directory.\n+   * @param trashPermission Expected FsPermission of the trash root.\n+   * @throws IOException\n+   */\n+  public void provisionSnapshottableDirTrash(final Path path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MzYzNw==", "bodyText": "Print out the trash path.", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497453637", "createdAt": "2020-09-30T12:02:05Z", "author": {"login": "szetszwo"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java", "diffHunk": "@@ -782,14 +784,32 @@ public void allowSnapshot(String[] argv) throws IOException {\n    */\n   public void disallowSnapshot(String[] argv) throws IOException {\n     Path p = new Path(argv[1]);\n-    final DistributedFileSystem dfs = AdminHelper.getDFS(p.toUri(), getConf());\n+    final HdfsAdmin admin = new HdfsAdmin(p.toUri(), getConf());\n     try {\n-      dfs.disallowSnapshot(p);\n+      admin.disallowSnapshot(p);\n     } catch (SnapshotException e) {\n       throw new RemoteException(e.getClass().getName(), e.getMessage());\n     }\n     System.out.println(\"Disallowing snapshot on \" + argv[1] + \" succeeded\");\n   }\n+\n+  /**\n+   * Provision trash root in a snapshottable directory.\n+   * Usage: hdfs dfsadmin -provisionSnapshotTrash snapshotDir\n+   * @param argv List of of command line parameters.\n+   * @exception IOException\n+   */\n+  public void provisionSnapshotTrash(String[] argv) throws IOException {\n+    Path p = new Path(argv[1]);\n+    final HdfsAdmin admin = new HdfsAdmin(p.toUri(), getConf());\n+    try {\n+      admin.provisionSnapshottableDirTrash(p);\n+    } catch (SnapshotException e) {\n+      throw new RemoteException(e.getClass().getName(), e.getMessage());\n+    }\n+    System.out.println(\"Provision of snapshot trash in \" + argv[1] +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bb23eff179cdb78e903936982a1a0f6822eb762", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/hadoop/commit/3bb23eff179cdb78e903936982a1a0f6822eb762", "committedDate": "2020-10-02T19:15:35Z", "message": "Implement provisionSnapshottableDirTrash;\nadd new dfsadmin command;\nadd test in TestDistributedFileSystem.\n\nChange-Id: I09cf74a13168af6f448b85a60808ee4d3068041f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aded6c64ba4d1f65d4bd0eea6bfc2d9f49053b6a", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/hadoop/commit/aded6c64ba4d1f65d4bd0eea6bfc2d9f49053b6a", "committedDate": "2020-10-02T19:15:35Z", "message": "Add test TestDFSAdmin#testAllowDisallowSnapshot.\n\nChange-Id: If7ead8db1e2f515777d2ddc9ca5af914ddc58d2a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4458fc4ac16084af8d3bc562e41ad2274f0bd9e7", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/hadoop/commit/4458fc4ac16084af8d3bc562e41ad2274f0bd9e7", "committedDate": "2020-10-02T19:15:35Z", "message": "provisionSnapshottableDirTrash now returns Path.\n\nChange-Id: I6f662871c877aecbf1734c21d64b454df97b2a58"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e66cb598b93ff0d28dcc00bec2148c14db2c6ee", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/hadoop/commit/0e66cb598b93ff0d28dcc00bec2148c14db2c6ee", "committedDate": "2020-10-02T19:15:35Z", "message": "Address checkstyle/whitespace.\n\nChange-Id: I1016a08ecd00cefcb8225cf07d21a5047cda9c2c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8f0c1af9e73d30e3d1296bfb5c58d3e541099ff", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/hadoop/commit/f8f0c1af9e73d30e3d1296bfb5c58d3e541099ff", "committedDate": "2020-10-02T19:15:35Z", "message": "Rename provisionSnapshottableDirTrash to provisionSnapshotTrash; Add warning if snapshot trash root is disabled when provisioning trash.\n\nChange-Id: I26f40b6e8296bcd3c3b26c2187d4d942dbf99887"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f36217b2bfd4f0623906da8db3b2a80fa0c2f994", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/hadoop/commit/f36217b2bfd4f0623906da8db3b2a80fa0c2f994", "committedDate": "2020-10-02T19:15:35Z", "message": "Improve warning message.\n\nChange-Id: I31e2236a6e96ef8bd2e94e09a57f4ef74c5996e7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d71f9eab1f74010ba79902b5843d47ae8a4fad4", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/hadoop/commit/5d71f9eab1f74010ba79902b5843d47ae8a4fad4", "committedDate": "2020-10-02T19:15:35Z", "message": "Fix existing test; checkstyle.\n\nChange-Id: Icf8eee168afa3becb122cb5a7d82da89dae20f0e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9878c4eed46d7f0bd7480e43e87529c346b2e099", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/hadoop/commit/9878c4eed46d7f0bd7480e43e87529c346b2e099", "committedDate": "2020-10-02T19:25:43Z", "message": "Fix TestViewFileSystemOverloadSchemeWithDFSAdmin#testAllowAndDisalllowSnapShot failure.\n\nChange-Id: I6dc54a8d0dec4fa295faa15475ad4fb5d83dd294"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b36f3fdbf5a99b235d73ecbab3cf2fe3c7f2fdc9", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/hadoop/commit/b36f3fdbf5a99b235d73ecbab3cf2fe3c7f2fdc9", "committedDate": "2020-10-02T17:54:42Z", "message": "Fix existing test; checkstyle.\n\nChange-Id: Icf8eee168afa3becb122cb5a7d82da89dae20f0e"}, "afterCommit": {"oid": "9878c4eed46d7f0bd7480e43e87529c346b2e099", "author": {"user": {"login": "smengcl", "name": "Siyao Meng"}}, "url": "https://github.com/apache/hadoop/commit/9878c4eed46d7f0bd7480e43e87529c346b2e099", "committedDate": "2020-10-02T19:25:43Z", "message": "Fix TestViewFileSystemOverloadSchemeWithDFSAdmin#testAllowAndDisalllowSnapShot failure.\n\nChange-Id: I6dc54a8d0dec4fa295faa15475ad4fb5d83dd294"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTE4OTE4", "url": "https://github.com/apache/hadoop/pull/2352#pullrequestreview-501918918", "createdAt": "2020-10-05T10:25:57Z", "commit": {"oid": "9878c4eed46d7f0bd7480e43e87529c346b2e099"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3747, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}