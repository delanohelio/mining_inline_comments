{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMzU5NDU1", "number": 2240, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowMjowM1rOEblf3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzowMDo1MVrOEhVkjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzYxMzczOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowMjowM1rOHFmeuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMTo0MjowM1rOHNt4Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNTM4Nw==", "bodyText": "@tasanuma Thanks for your proposal. I am concerned any corner case here if put service users's request to the priority forever rather than flow controls. Such as user hdfs is one service user, and submit one big job which involve massive RPC request to NameNode, other normal users' request may postpone serious.", "url": "https://github.com/apache/hadoop/pull/2240#discussion_r475635387", "createdAt": "2020-08-24T14:02:03Z", "author": {"login": "Hexiaoqiao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java", "diffHunk": "@@ -483,6 +501,12 @@ private void recomputeScheduleCache() {\n \n     for (Map.Entry<Object, List<AtomicLong>> entry : callCosts.entrySet()) {\n       Object id = entry.getKey();\n+      // The priority for service users is always 0\n+      if (isServiceUser((String)id)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e10c6881c4cab27a42a6f404d002c1ca82e6852"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY4MTIyMg==", "bodyText": "Thanks for your comment, @Hexiaoqiao.\nI think you can adjust the existing FairCallQueue settings to deal with that case to a certain extent. You could consider increasing the weight of the highest priority queue, or extending the length of the highest priority queue. However, this simple feature is not a feature that can be used in all cases. If more fairness is needed among service users, then I believe that HADOOP-15016 would be required.\nThe case where I think this feature would be useful is when you have service users who are regularly running critical ETL jobs. A user who can make huge RPC requests at a moment may not be suite for a service user.", "url": "https://github.com/apache/hadoop/pull/2240#discussion_r475681222", "createdAt": "2020-08-24T15:02:03Z", "author": {"login": "tasanuma"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java", "diffHunk": "@@ -483,6 +501,12 @@ private void recomputeScheduleCache() {\n \n     for (Map.Entry<Object, List<AtomicLong>> entry : callCosts.entrySet()) {\n       Object id = entry.getKey();\n+      // The priority for service users is always 0\n+      if (isServiceUser((String)id)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNTM4Nw=="}, "originalCommit": {"oid": "6e10c6881c4cab27a42a6f404d002c1ca82e6852"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3NTg5OQ==", "bodyText": "@tasanuma curious why you choose to do it here and cachedOrComputedPriorityLevel instead of getPriorityLevel in the previous patch.", "url": "https://github.com/apache/hadoop/pull/2240#discussion_r482275899", "createdAt": "2020-09-02T18:21:44Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java", "diffHunk": "@@ -483,6 +501,12 @@ private void recomputeScheduleCache() {\n \n     for (Map.Entry<Object, List<AtomicLong>> entry : callCosts.entrySet()) {\n       Object id = entry.getKey();\n+      // The priority for service users is always 0\n+      if (isServiceUser((String)id)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNTM4Nw=="}, "originalCommit": {"oid": "6e10c6881c4cab27a42a6f404d002c1ca82e6852"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNzQzNQ==", "bodyText": "@sunchao Thanks for your review.\n\nWhen DecayRpcScheduler decays, it calls recomputeScheduleCache to recalculate the priority of all users, including service users, and put them in the cache. So we had to do this in recomputeScheduleCache as well. Lines 415-421 of the unit test cover this case.\nI moved it from getPriorityLevel to cachedOrComputedPriorityLevel because I thought it would be a little more efficient to determine if a user is a service user after looking at the cache information.", "url": "https://github.com/apache/hadoop/pull/2240#discussion_r482607435", "createdAt": "2020-09-02T23:59:51Z", "author": {"login": "tasanuma"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java", "diffHunk": "@@ -483,6 +501,12 @@ private void recomputeScheduleCache() {\n \n     for (Map.Entry<Object, List<AtomicLong>> entry : callCosts.entrySet()) {\n       Object id = entry.getKey();\n+      // The priority for service users is always 0\n+      if (isServiceUser((String)id)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNTM4Nw=="}, "originalCommit": {"oid": "6e10c6881c4cab27a42a6f404d002c1ca82e6852"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk5OTU3OA==", "bodyText": "Gotcha. Thanks @tasanuma . This looks most good for me. One minor nit is that the logic for handling service users now is separated into two places. Another way perhaps is to add this in computePriorityLevel which is called by recomputeScheduleCache and cacheOrComputePriorityLevel. We need to add an extra parameter for this method though. What do you think?", "url": "https://github.com/apache/hadoop/pull/2240#discussion_r483999578", "createdAt": "2020-09-05T23:25:16Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java", "diffHunk": "@@ -483,6 +501,12 @@ private void recomputeScheduleCache() {\n \n     for (Map.Entry<Object, List<AtomicLong>> entry : callCosts.entrySet()) {\n       Object id = entry.getKey();\n+      // The priority for service users is always 0\n+      if (isServiceUser((String)id)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNTM4Nw=="}, "originalCommit": {"oid": "6e10c6881c4cab27a42a6f404d002c1ca82e6852"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE0NTE1NA==", "bodyText": "Thanks for your review, @sunchao! I agreed. Updated the PR addressing it.", "url": "https://github.com/apache/hadoop/pull/2240#discussion_r484145154", "createdAt": "2020-09-07T01:42:03Z", "author": {"login": "tasanuma"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java", "diffHunk": "@@ -483,6 +501,12 @@ private void recomputeScheduleCache() {\n \n     for (Map.Entry<Object, List<AtomicLong>> entry : callCosts.entrySet()) {\n       Object id = entry.getKey();\n+      // The priority for service users is always 0\n+      if (isServiceUser((String)id)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNTM4Nw=="}, "originalCommit": {"oid": "6e10c6881c4cab27a42a6f404d002c1ca82e6852"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzkxODg3OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzowMDo1MVrOHOmNdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNToyMjo1N1rOHO3Hkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2ODE1MA==", "bodyText": "nit nit: usually it is UserName instead of Username, so better follow that pattern.", "url": "https://github.com/apache/hadoop/pull/2240#discussion_r485068150", "createdAt": "2020-09-08T17:00:51Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java", "diffHunk": "@@ -178,6 +188,7 @@\n   private static final double PRECISION = 0.0001;\n   private MetricsProxy metricsProxy;\n   private final CostProvider costProvider;\n+  private Set<String> serviceUsernames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b00671fd669a9277fa77c1f1760999fd6c1c040"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0NTE3MQ==", "bodyText": "Thanks for your review. Updated PR following UserName.", "url": "https://github.com/apache/hadoop/pull/2240#discussion_r485345171", "createdAt": "2020-09-09T05:22:57Z", "author": {"login": "tasanuma"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java", "diffHunk": "@@ -178,6 +188,7 @@\n   private static final double PRECISION = 0.0001;\n   private MetricsProxy metricsProxy;\n   private final CostProvider costProvider;\n+  private Set<String> serviceUsernames;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2ODE1MA=="}, "originalCommit": {"oid": "9b00671fd669a9277fa77c1f1760999fd6c1c040"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3396, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}