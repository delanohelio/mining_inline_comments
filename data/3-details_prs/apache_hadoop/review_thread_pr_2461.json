{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NjY4MDY0", "number": 2461, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1NzoyNVrOE4R_EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1OTowN1rOE4SBig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDUwMzg0OnYy", "diffSide": "RIGHT", "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1NzoyNVrOHyG8Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTozODo0OVrOHyLG9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNDU5NQ==", "bodyText": "We can do this with GenericTestUtils.waitFor() right?", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522304595", "createdAt": "2020-11-12T17:57:25Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1161,43 +1165,34 @@ protected NodeStatusUpdater createNodeStatusUpdater(Context context,\n     Assert.assertTrue(\"last service is NOT the node status updater\",\n         lastService instanceof NodeStatusUpdater);\n \n-    new Thread() {\n-      public void run() {\n-        try {\n-          nm.start();\n-        } catch (Throwable e) {\n-          TestNodeStatusUpdater.this.nmStartError = e;\n-          throw new YarnRuntimeException(e);\n-        }\n+    Thread starterThread = new Thread(() -> {\n+      try {\n+        nm.start();\n+      } catch (Throwable e) {\n+        TestNodeStatusUpdater.this.nmStartError = e;\n+        throw new YarnRuntimeException(e);\n       }\n-    }.start();\n+    });\n+    starterThread.start();\n \n-    System.out.println(\" ----- thread already started..\"\n-        + nm.getServiceState());\n+    LOG.info(\" ----- thread already started..{}\", nm.getServiceState());\n \n-    int waitCount = 0;\n-    while (nm.getServiceState() == STATE.INITED && waitCount++ != 50) {\n-      LOG.info(\"Waiting for NM to start..\");\n-      if (nmStartError != null) {\n-        LOG.error(\"Error during startup. \", nmStartError);\n-        Assert.fail(nmStartError.getCause().getMessage());\n-      }\n-      Thread.sleep(2000);\n-    }\n-    if (nm.getServiceState() != STATE.STARTED) {\n-      // NM could have failed.\n-      Assert.fail(\"NodeManager failed to start\");\n+    starterThread.join(100000);\n+\n+    if (nmStartError != null) {\n+      LOG.error(\"Error during startup. \", nmStartError);\n+      Assert.fail(nmStartError.getCause().getMessage());\n     }\n \n-    waitCount = 0;\n-    while (heartBeatID <= 3 && waitCount++ != 200) {\n-      Thread.sleep(1000);\n+    int waitCount = 0;\n+    while (nm.getServiceState() == STATE.STARTED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDc3OQ==", "bodyText": "Thanks @goiri, I added the nm.getServiceState() == STATE.STARTED because I found that the Unit test could keep waiting for the heartBeatID even after the nm fails.\nThe loop can be replaced with waitFor() but the conditions has to be rewritten in a way that may be confusing a little bit.\n// we should not be waiting once the service stops running\nGenericTestUtils.waitFor( () -> (nm.getServiceState() != STATE.STARTED) || heartBeatID > 3), 50, 1000);\nIf you are fine with the above version, I can replace all the loops with WaitFor()", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522314779", "createdAt": "2020-11-12T18:13:31Z", "author": {"login": "amahussein"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1161,43 +1165,34 @@ protected NodeStatusUpdater createNodeStatusUpdater(Context context,\n     Assert.assertTrue(\"last service is NOT the node status updater\",\n         lastService instanceof NodeStatusUpdater);\n \n-    new Thread() {\n-      public void run() {\n-        try {\n-          nm.start();\n-        } catch (Throwable e) {\n-          TestNodeStatusUpdater.this.nmStartError = e;\n-          throw new YarnRuntimeException(e);\n-        }\n+    Thread starterThread = new Thread(() -> {\n+      try {\n+        nm.start();\n+      } catch (Throwable e) {\n+        TestNodeStatusUpdater.this.nmStartError = e;\n+        throw new YarnRuntimeException(e);\n       }\n-    }.start();\n+    });\n+    starterThread.start();\n \n-    System.out.println(\" ----- thread already started..\"\n-        + nm.getServiceState());\n+    LOG.info(\" ----- thread already started..{}\", nm.getServiceState());\n \n-    int waitCount = 0;\n-    while (nm.getServiceState() == STATE.INITED && waitCount++ != 50) {\n-      LOG.info(\"Waiting for NM to start..\");\n-      if (nmStartError != null) {\n-        LOG.error(\"Error during startup. \", nmStartError);\n-        Assert.fail(nmStartError.getCause().getMessage());\n-      }\n-      Thread.sleep(2000);\n-    }\n-    if (nm.getServiceState() != STATE.STARTED) {\n-      // NM could have failed.\n-      Assert.fail(\"NodeManager failed to start\");\n+    starterThread.join(100000);\n+\n+    if (nmStartError != null) {\n+      LOG.error(\"Error during startup. \", nmStartError);\n+      Assert.fail(nmStartError.getCause().getMessage());\n     }\n \n-    waitCount = 0;\n-    while (heartBeatID <= 3 && waitCount++ != 200) {\n-      Thread.sleep(1000);\n+    int waitCount = 0;\n+    while (nm.getServiceState() == STATE.STARTED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNDU5NQ=="}, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3Mjg1Mg==", "bodyText": "I would split it into two lines but I think the or condition is clear enough.", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522372852", "createdAt": "2020-11-12T19:38:49Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1161,43 +1165,34 @@ protected NodeStatusUpdater createNodeStatusUpdater(Context context,\n     Assert.assertTrue(\"last service is NOT the node status updater\",\n         lastService instanceof NodeStatusUpdater);\n \n-    new Thread() {\n-      public void run() {\n-        try {\n-          nm.start();\n-        } catch (Throwable e) {\n-          TestNodeStatusUpdater.this.nmStartError = e;\n-          throw new YarnRuntimeException(e);\n-        }\n+    Thread starterThread = new Thread(() -> {\n+      try {\n+        nm.start();\n+      } catch (Throwable e) {\n+        TestNodeStatusUpdater.this.nmStartError = e;\n+        throw new YarnRuntimeException(e);\n       }\n-    }.start();\n+    });\n+    starterThread.start();\n \n-    System.out.println(\" ----- thread already started..\"\n-        + nm.getServiceState());\n+    LOG.info(\" ----- thread already started..{}\", nm.getServiceState());\n \n-    int waitCount = 0;\n-    while (nm.getServiceState() == STATE.INITED && waitCount++ != 50) {\n-      LOG.info(\"Waiting for NM to start..\");\n-      if (nmStartError != null) {\n-        LOG.error(\"Error during startup. \", nmStartError);\n-        Assert.fail(nmStartError.getCause().getMessage());\n-      }\n-      Thread.sleep(2000);\n-    }\n-    if (nm.getServiceState() != STATE.STARTED) {\n-      // NM could have failed.\n-      Assert.fail(\"NodeManager failed to start\");\n+    starterThread.join(100000);\n+\n+    if (nmStartError != null) {\n+      LOG.error(\"Error during startup. \", nmStartError);\n+      Assert.fail(nmStartError.getCause().getMessage());\n     }\n \n-    waitCount = 0;\n-    while (heartBeatID <= 3 && waitCount++ != 200) {\n-      Thread.sleep(1000);\n+    int waitCount = 0;\n+    while (nm.getServiceState() == STATE.STARTED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNDU5NQ=="}, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDUwNzgwOnYy", "diffSide": "RIGHT", "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1ODoyOFrOHyG-1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoxNDozNVrOHyHmxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNTIzOA==", "bodyText": "waitFor()?", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522305238", "createdAt": "2020-11-12T17:58:28Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1529,19 +1518,27 @@ public void testApplicationKeepAlive() throws Exception {\n       nm.init(conf);\n       nm.start();\n       // HB 2 -> app cancelled by RM.\n-      while (heartBeatID < 12) {\n-        Thread.sleep(1000l);\n+      GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED,\n+          20, 10000);\n+      int waitCount = 0;\n+      while (nm.getServiceState() == STATE.STARTED && heartBeatID < 12\n+          && waitCount++ < 60000000) {\n+        Thread.sleep(100l);\n       }\n+      Assert.assertTrue(heartBeatID >= 12);\n       MyResourceTracker3 rt =\n           (MyResourceTracker3) nm.getNodeStatusUpdater().getRMClient();\n       rt.context.getApplications().remove(rt.appId);\n       Assert.assertEquals(1, rt.keepAliveRequests.size());\n       int numKeepAliveRequests = rt.keepAliveRequests.get(rt.appId).size();\n       LOG.info(\"Number of Keep Alive Requests: [\" + numKeepAliveRequests + \"]\");\n       Assert.assertTrue(numKeepAliveRequests == 2 || numKeepAliveRequests == 3);\n-      while (heartBeatID < 20) {\n-        Thread.sleep(1000l);\n+      waitCount = 0;\n+      while (nm.getServiceState() == STATE.STARTED && heartBeatID < 20", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNTQ2MA==", "bodyText": "same as above", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522315460", "createdAt": "2020-11-12T18:14:35Z", "author": {"login": "amahussein"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1529,19 +1518,27 @@ public void testApplicationKeepAlive() throws Exception {\n       nm.init(conf);\n       nm.start();\n       // HB 2 -> app cancelled by RM.\n-      while (heartBeatID < 12) {\n-        Thread.sleep(1000l);\n+      GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED,\n+          20, 10000);\n+      int waitCount = 0;\n+      while (nm.getServiceState() == STATE.STARTED && heartBeatID < 12\n+          && waitCount++ < 60000000) {\n+        Thread.sleep(100l);\n       }\n+      Assert.assertTrue(heartBeatID >= 12);\n       MyResourceTracker3 rt =\n           (MyResourceTracker3) nm.getNodeStatusUpdater().getRMClient();\n       rt.context.getApplications().remove(rt.appId);\n       Assert.assertEquals(1, rt.keepAliveRequests.size());\n       int numKeepAliveRequests = rt.keepAliveRequests.get(rt.appId).size();\n       LOG.info(\"Number of Keep Alive Requests: [\" + numKeepAliveRequests + \"]\");\n       Assert.assertTrue(numKeepAliveRequests == 2 || numKeepAliveRequests == 3);\n-      while (heartBeatID < 20) {\n-        Thread.sleep(1000l);\n+      waitCount = 0;\n+      while (nm.getServiceState() == STATE.STARTED && heartBeatID < 20", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNTIzOA=="}, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDUwODE5OnYy", "diffSide": "RIGHT", "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1ODozNFrOHyG_DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoxNDoyOFrOHyHmcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNTI5Mw==", "bodyText": "waitFor()?", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522305293", "createdAt": "2020-11-12T17:58:34Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1529,19 +1518,27 @@ public void testApplicationKeepAlive() throws Exception {\n       nm.init(conf);\n       nm.start();\n       // HB 2 -> app cancelled by RM.\n-      while (heartBeatID < 12) {\n-        Thread.sleep(1000l);\n+      GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED,\n+          20, 10000);\n+      int waitCount = 0;\n+      while (nm.getServiceState() == STATE.STARTED && heartBeatID < 12", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNTM3OQ==", "bodyText": "Same as above", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522315379", "createdAt": "2020-11-12T18:14:28Z", "author": {"login": "amahussein"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1529,19 +1518,27 @@ public void testApplicationKeepAlive() throws Exception {\n       nm.init(conf);\n       nm.start();\n       // HB 2 -> app cancelled by RM.\n-      while (heartBeatID < 12) {\n-        Thread.sleep(1000l);\n+      GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED,\n+          20, 10000);\n+      int waitCount = 0;\n+      while (nm.getServiceState() == STATE.STARTED && heartBeatID < 12", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNTI5Mw=="}, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDUxMDE4OnYy", "diffSide": "RIGHT", "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1OTowN1rOHyHAVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoxNDo0N1rOHyHnIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNTYyMQ==", "bodyText": "waitFor()?", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522305621", "createdAt": "2020-11-12T17:59:07Z", "author": {"login": "goiri"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1712,27 +1704,14 @@ protected ContainerManagerImpl createContainerManager(Context context,\n     YarnConfiguration conf = createNMConfig();\n     nm.init(conf);\n     nm.start();\n-\n-    System.out.println(\" ----- thread already started..\"\n-        + nm.getServiceState());\n+    GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED,\n+        20, 20000);\n \n     int waitCount = 0;\n-    while (nm.getServiceState() == STATE.INITED && waitCount++ != 20) {\n-      LOG.info(\"Waiting for NM to start..\");\n-      if (nmStartError != null) {\n-        LOG.error(\"Error during startup. \", nmStartError);\n-        Assert.fail(nmStartError.getCause().getMessage());\n-      }\n-      Thread.sleep(1000);\n-    }\n-    if (nm.getServiceState() != STATE.STARTED) {\n-      // NM could have failed.\n-      Assert.fail(\"NodeManager failed to start\");\n-    }\n \n-    waitCount = 0;\n-    while (heartBeatID <= 3 && waitCount++ != 20) {\n-      Thread.sleep(500);\n+    while (nm.getServiceState() == STATE.STARTED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNTU1NQ==", "bodyText": "same as above", "url": "https://github.com/apache/hadoop/pull/2461#discussion_r522315555", "createdAt": "2020-11-12T18:14:47Z", "author": {"login": "amahussein"}, "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java", "diffHunk": "@@ -1712,27 +1704,14 @@ protected ContainerManagerImpl createContainerManager(Context context,\n     YarnConfiguration conf = createNMConfig();\n     nm.init(conf);\n     nm.start();\n-\n-    System.out.println(\" ----- thread already started..\"\n-        + nm.getServiceState());\n+    GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED,\n+        20, 20000);\n \n     int waitCount = 0;\n-    while (nm.getServiceState() == STATE.INITED && waitCount++ != 20) {\n-      LOG.info(\"Waiting for NM to start..\");\n-      if (nmStartError != null) {\n-        LOG.error(\"Error during startup. \", nmStartError);\n-        Assert.fail(nmStartError.getCause().getMessage());\n-      }\n-      Thread.sleep(1000);\n-    }\n-    if (nm.getServiceState() != STATE.STARTED) {\n-      // NM could have failed.\n-      Assert.fail(\"NodeManager failed to start\");\n-    }\n \n-    waitCount = 0;\n-    while (heartBeatID <= 3 && waitCount++ != 20) {\n-      Thread.sleep(500);\n+    while (nm.getServiceState() == STATE.STARTED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNTYyMQ=="}, "originalCommit": {"oid": "7f7b8aba9ac157a2d7d042949abffa7fcb7b92bc"}, "originalPosition": 283}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3113, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}