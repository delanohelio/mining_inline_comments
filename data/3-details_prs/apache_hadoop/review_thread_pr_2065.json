{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNTA5Njcy", "number": 2065, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoxNDoyN1rOEEaLow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo1MjoxOVrOEG2phA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDU4NzIzOnYy", "diffSide": "RIGHT", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoxNDoyN1rOGiA44w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzoyMzo1MlrOGiNN1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTMzMQ==", "bodyText": "These are test-time configs. Is it common practice adding them to the default xml? Just wondering.", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r438319331", "createdAt": "2020-06-10T18:14:27Z", "author": {"login": "saintstack"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml", "diffHunk": "@@ -1945,6 +1945,18 @@\n   <description>The HistoryStorage class to use to cache history data.</description>\n </property>\n \n+<property>\n+  <name>mapreduce.jobhistory.minicluster.enabled</name>\n+  <value>true</value>\n+  <description>Whether to launch jobhistory server inminicluster.</description>\n+</property>\n+\n+<property>\n+  <name>mapreduce.jobhistory.minicluster.launch.timeout.ms</name>\n+  <value>60000</value>\n+  <description>Timeout to launch jobhistory server inminicluster.</description>\n+</property>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMjgyMg==", "bodyText": "These look like production-facing configs to me.", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r438322822", "createdAt": "2020-06-10T18:20:52Z", "author": {"login": "ndimiduk"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml", "diffHunk": "@@ -1945,6 +1945,18 @@\n   <description>The HistoryStorage class to use to cache history data.</description>\n </property>\n \n+<property>\n+  <name>mapreduce.jobhistory.minicluster.enabled</name>\n+  <value>true</value>\n+  <description>Whether to launch jobhistory server inminicluster.</description>\n+</property>\n+\n+<property>\n+  <name>mapreduce.jobhistory.minicluster.launch.timeout.ms</name>\n+  <value>60000</value>\n+  <description>Timeout to launch jobhistory server inminicluster.</description>\n+</property>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTMzMQ=="}, "originalCommit": {"oid": "94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMTMwMg==", "bodyText": "We do not publish test-only configs usually. While some mini cluster configs are exposed for use cases outside unit tests (I guess), I prefer test class specific configs here.", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r438521302", "createdAt": "2020-06-11T03:23:52Z", "author": {"login": "iwasakims"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml", "diffHunk": "@@ -1945,6 +1945,18 @@\n   <description>The HistoryStorage class to use to cache history data.</description>\n </property>\n \n+<property>\n+  <name>mapreduce.jobhistory.minicluster.enabled</name>\n+  <value>true</value>\n+  <description>Whether to launch jobhistory server inminicluster.</description>\n+</property>\n+\n+<property>\n+  <name>mapreduce.jobhistory.minicluster.launch.timeout.ms</name>\n+  <value>60000</value>\n+  <description>Timeout to launch jobhistory server inminicluster.</description>\n+</property>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTMzMQ=="}, "originalCommit": {"oid": "94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDU5NTE5OnYy", "diffSide": "RIGHT", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoxNjo1NVrOGiA9_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo1Mzo0N1rOGl6H2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMDYzNw==", "bodyText": "Should this historyServer and thread only be initialized when the new configuration is enabled? Would be nice to avoid allocating the resources if we don't need them.", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r438320637", "createdAt": "2020-06-10T18:16:55Z", "author": {"login": "ndimiduk"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java", "diffHunk": "@@ -259,7 +267,10 @@ public void run() {\n           };\n         }.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMjIyMg==", "bodyText": "historyServer is not initialized if mapreduce.jobhistory.minicluster.enabled is set to false. I would like to keep the default value to be true to avoid breaking existing tests of hadoop and downstreams.", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r438522222", "createdAt": "2020-06-11T03:27:27Z", "author": {"login": "iwasakims"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java", "diffHunk": "@@ -259,7 +267,10 @@ public void run() {\n           };\n         }.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMDYzNw=="}, "originalCommit": {"oid": "94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMjc3OA==", "bodyText": "Yes, preserving the default value makes sense. I'm just wondering if the resource allocation can be skipped entirely when the jhs is disabled.", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r442402778", "createdAt": "2020-06-18T17:53:47Z", "author": {"login": "ndimiduk"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java", "diffHunk": "@@ -259,7 +267,10 @@ public void run() {\n           };\n         }.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMDYzNw=="}, "originalCommit": {"oid": "94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDU5OTI5OnYy", "diffSide": "RIGHT", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoxODowOVrOGiBAvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzozNDo0MVrOGiNX0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMTM0Mg==", "bodyText": "nit: this code would be simpler using a CountDownLatch.", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r438321342", "createdAt": "2020-06-10T18:18:09Z", "author": {"login": "ndimiduk"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java", "diffHunk": "@@ -259,7 +267,10 @@ public void run() {\n           };\n         }.start();\n \n-        GenericTestUtils.waitFor(() -> jhsStarted, 1500, 60_000);\n+        final int launchTimeout = getConfig().getInt(\n+            JHAdminConfig.MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS,\n+            JHAdminConfig.DEFAULT_MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS);\n+        GenericTestUtils.waitFor(() -> jhsStarted, 1500, launchTimeout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMzg1OA==", "bodyText": "I removed the jhsStarted var in a bit different way.", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r438523858", "createdAt": "2020-06-11T03:34:41Z", "author": {"login": "iwasakims"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java", "diffHunk": "@@ -259,7 +267,10 @@ public void run() {\n           };\n         }.start();\n \n-        GenericTestUtils.waitFor(() -> jhsStarted, 1500, 60_000);\n+        final int launchTimeout = getConfig().getInt(\n+            JHAdminConfig.MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS,\n+            JHAdminConfig.DEFAULT_MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS);\n+        GenericTestUtils.waitFor(() -> jhsStarted, 1500, launchTimeout);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMTM0Mg=="}, "originalCommit": {"oid": "94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjIyMjc2OnYy", "diffSide": "RIGHT", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRBringup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo1MjoxOVrOGl6Eng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzoxODoxOVrOGmDJCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMTk1MA==", "bodyText": "should this assert happen after the call to start()?", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r442401950", "createdAt": "2020-06-18T17:52:19Z", "author": {"login": "ndimiduk"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRBringup.java", "diffHunk": "@@ -36,5 +40,21 @@ public void testBringUp() throws IOException {\n       if (mr != null) { mr.shutdown(); }\n     }\n   }\n-  \n+\n+  @Test\n+  public void testMiniMRYarnClusterWithoutJHS() throws IOException {\n+    MiniMRYarnCluster mr = null;\n+    try {\n+      final Configuration conf = new Configuration();\n+      conf.setBoolean(MiniMRYarnCluster.MR_HISTORY_MINICLUSTER_ENABLED, false);\n+      mr = new MiniMRYarnCluster(\"testMiniMRYarnClusterWithoutJHS\");\n+      mr.init(conf);\n+      Assert.assertEquals(null, mr.getHistoryServer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01e77a720738ee6211bddaabeb9a4ea9ed777efe"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1MDUzOQ==", "bodyText": "Sure. It makes more stable for future change. I updated the code.", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r442550539", "createdAt": "2020-06-18T23:18:19Z", "author": {"login": "iwasakims"}, "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRBringup.java", "diffHunk": "@@ -36,5 +40,21 @@ public void testBringUp() throws IOException {\n       if (mr != null) { mr.shutdown(); }\n     }\n   }\n-  \n+\n+  @Test\n+  public void testMiniMRYarnClusterWithoutJHS() throws IOException {\n+    MiniMRYarnCluster mr = null;\n+    try {\n+      final Configuration conf = new Configuration();\n+      conf.setBoolean(MiniMRYarnCluster.MR_HISTORY_MINICLUSTER_ENABLED, false);\n+      mr = new MiniMRYarnCluster(\"testMiniMRYarnClusterWithoutJHS\");\n+      mr.init(conf);\n+      Assert.assertEquals(null, mr.getHistoryServer());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMTk1MA=="}, "originalCommit": {"oid": "01e77a720738ee6211bddaabeb9a4ea9ed777efe"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3425, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}