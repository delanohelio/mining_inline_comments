{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzQ5NjEw", "number": 2084, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzozMTowM1rOEHBSyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMToyMzozMFrOEHPZBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk2NjgyOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzozMTowM1rOGmK_jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjowNTozNVrOGmiQpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTE4Mw==", "bodyText": "Should we just fallback to showing link permissions if the directory isn't found? as it was before.\nLs command throwing FNF for a child seems little weird. If the child isn't there the Ls need not to list it. FNF from Ls should be only I guess when the directory on which we are calling getListing() isn't available, For a child if it isn't present in the destination we can just log it and revert back to previous behavior and we can document that too as well, if the actual destination is present then only it shows destination permissions.", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442679183", "createdAt": "2020-06-19T07:31:03Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1216,37 +1222,50 @@ public FileStatus getFileStatus(Path f) throws IOException {\n       for (Entry<String, INode<FileSystem>> iEntry :\n           theInternalDir.getChildren().entrySet()) {\n         INode<FileSystem> inode = iEntry.getValue();\n+        Path path = new Path(inode.fullPath).makeQualified(myUri, null);\n         if (inode.isLink()) {\n           INodeLink<FileSystem> link = (INodeLink<FileSystem>) inode;\n+\n+          if (showMountLinksAsSymlinks) {\n+            // To maintain backward compatibility, with default option(showing\n+            // mount links as symlinks), we will represent target link as\n+            // symlink and rest other properties are belongs to mount link only.\n+            result[i++] =\n+                new FileStatus(0, false, 0, 0, creationTime, creationTime,\n+                    PERMISSION_555, ugi.getShortUserName(),\n+                    ugi.getPrimaryGroupName(), link.getTargetLink(),\n+                    path);\n+            continue;\n+          }\n+\n+          //  We will represent as non-symlinks. Here it will show target\n+          //  directory/file properties like permissions, isDirectory etc on\n+          //  mount path. The path will be a mount link path and isDirectory is\n+          //  true if target is dir, otherwise false.\n+          String linkedPath = link.getTargetFileSystem().getUri().getPath();\n+          if (\"\".equals(linkedPath)) {\n+            linkedPath = \"/\";\n+          }\n           try {\n-            String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            if(\"\".equals(linkedPath)) {\n-              linkedPath = \"/\";\n-            }\n             FileStatus status =\n                 ((ChRootedFileSystem)link.getTargetFileSystem())\n                 .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                null, path);\n           } catch (FileNotFoundException ex) {\n-            result[i++] = new FileStatus(0, false, 0, 0,\n-              creationTime, creationTime, PERMISSION_555,\n-              ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+            LOG.warn(\"Cannot get one of the children's(\" + path\n+                + \")  target path(\" + link.getTargetFileSystem().getUri()\n+                + \") file status.\", ex);\n+            throw ex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NTY5MA==", "bodyText": "This is a non-symlink flow: what we should assume for isDirectory when target not available?\nI feel that users should know that target is not available somehow. In symlink case I am fine as we don't need that isDir info and anyway we will just keep target in symlink.\nIf we simply return successful when one of the child not not available, they should not assume is exist would be successful.\nOr we will simply return is directory as true when target not found and rest all permission are fake. Just logging does not help here.\nDo you know what happens in router? probably we can make it to similar behavior for consistency in this case?", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442945690", "createdAt": "2020-06-19T16:47:34Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1216,37 +1222,50 @@ public FileStatus getFileStatus(Path f) throws IOException {\n       for (Entry<String, INode<FileSystem>> iEntry :\n           theInternalDir.getChildren().entrySet()) {\n         INode<FileSystem> inode = iEntry.getValue();\n+        Path path = new Path(inode.fullPath).makeQualified(myUri, null);\n         if (inode.isLink()) {\n           INodeLink<FileSystem> link = (INodeLink<FileSystem>) inode;\n+\n+          if (showMountLinksAsSymlinks) {\n+            // To maintain backward compatibility, with default option(showing\n+            // mount links as symlinks), we will represent target link as\n+            // symlink and rest other properties are belongs to mount link only.\n+            result[i++] =\n+                new FileStatus(0, false, 0, 0, creationTime, creationTime,\n+                    PERMISSION_555, ugi.getShortUserName(),\n+                    ugi.getPrimaryGroupName(), link.getTargetLink(),\n+                    path);\n+            continue;\n+          }\n+\n+          //  We will represent as non-symlinks. Here it will show target\n+          //  directory/file properties like permissions, isDirectory etc on\n+          //  mount path. The path will be a mount link path and isDirectory is\n+          //  true if target is dir, otherwise false.\n+          String linkedPath = link.getTargetFileSystem().getUri().getPath();\n+          if (\"\".equals(linkedPath)) {\n+            linkedPath = \"/\";\n+          }\n           try {\n-            String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            if(\"\".equals(linkedPath)) {\n-              linkedPath = \"/\";\n-            }\n             FileStatus status =\n                 ((ChRootedFileSystem)link.getTargetFileSystem())\n                 .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                null, path);\n           } catch (FileNotFoundException ex) {\n-            result[i++] = new FileStatus(0, false, 0, 0,\n-              creationTime, creationTime, PERMISSION_555,\n-              ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+            LOG.warn(\"Cannot get one of the children's(\" + path\n+                + \")  target path(\" + link.getTargetFileSystem().getUri()\n+                + \") file status.\", ex);\n+            throw ex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTE4Mw=="}, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2MjkwMw==", "bodyText": "In Router if the destination isn't present it will not throw exception, it will show the permissions and owner of the mount entry. In router the mount table entries also have owner/permissions. It will first try to get it from the actual destination, if the actual destination is not available then from the mount table. if Unable to get from Mount Entry(this won't happen general) then it will show owner as super user\nisDir stays true always for mount entries assuming only directories will be mounted in general case.", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442962903", "createdAt": "2020-06-19T17:27:24Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1216,37 +1222,50 @@ public FileStatus getFileStatus(Path f) throws IOException {\n       for (Entry<String, INode<FileSystem>> iEntry :\n           theInternalDir.getChildren().entrySet()) {\n         INode<FileSystem> inode = iEntry.getValue();\n+        Path path = new Path(inode.fullPath).makeQualified(myUri, null);\n         if (inode.isLink()) {\n           INodeLink<FileSystem> link = (INodeLink<FileSystem>) inode;\n+\n+          if (showMountLinksAsSymlinks) {\n+            // To maintain backward compatibility, with default option(showing\n+            // mount links as symlinks), we will represent target link as\n+            // symlink and rest other properties are belongs to mount link only.\n+            result[i++] =\n+                new FileStatus(0, false, 0, 0, creationTime, creationTime,\n+                    PERMISSION_555, ugi.getShortUserName(),\n+                    ugi.getPrimaryGroupName(), link.getTargetLink(),\n+                    path);\n+            continue;\n+          }\n+\n+          //  We will represent as non-symlinks. Here it will show target\n+          //  directory/file properties like permissions, isDirectory etc on\n+          //  mount path. The path will be a mount link path and isDirectory is\n+          //  true if target is dir, otherwise false.\n+          String linkedPath = link.getTargetFileSystem().getUri().getPath();\n+          if (\"\".equals(linkedPath)) {\n+            linkedPath = \"/\";\n+          }\n           try {\n-            String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            if(\"\".equals(linkedPath)) {\n-              linkedPath = \"/\";\n-            }\n             FileStatus status =\n                 ((ChRootedFileSystem)link.getTargetFileSystem())\n                 .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                null, path);\n           } catch (FileNotFoundException ex) {\n-            result[i++] = new FileStatus(0, false, 0, 0,\n-              creationTime, creationTime, PERMISSION_555,\n-              ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+            LOG.warn(\"Cannot get one of the children's(\" + path\n+                + \")  target path(\" + link.getTargetFileSystem().getUri()\n+                + \") file status.\", ex);\n+            throw ex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTE4Mw=="}, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2MDM5MQ==", "bodyText": "The problem here is, rounter has state, but in viewFS is simply light, state can be build from config only, so no real permissions notion. All mounts will have same perms bit. Just showing that really may not help. Most of the fs what we mount are high available. SO, don't  expect this case should trigger ( even I see this point in you comment \"this won't happen general\"). Even if it triggered, application will anyway starts seeing failures on further ops on that directory. And one more point I am having is, restricting first and relaxing later is safer than relaxing and later restricting is tough. So, I feel Let's throw exception. If this really turning out problems, then we can always relax (that should be safe as we are having general IOException). When coming to symlink notion, you always have an identity other than file/dir, that is link. So, I have no issues. But non-symlinks case, I am not really show some temp values there. With that values anyway app is going to fail if he crawls one more level.", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r443060391", "createdAt": "2020-06-19T22:05:35Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1216,37 +1222,50 @@ public FileStatus getFileStatus(Path f) throws IOException {\n       for (Entry<String, INode<FileSystem>> iEntry :\n           theInternalDir.getChildren().entrySet()) {\n         INode<FileSystem> inode = iEntry.getValue();\n+        Path path = new Path(inode.fullPath).makeQualified(myUri, null);\n         if (inode.isLink()) {\n           INodeLink<FileSystem> link = (INodeLink<FileSystem>) inode;\n+\n+          if (showMountLinksAsSymlinks) {\n+            // To maintain backward compatibility, with default option(showing\n+            // mount links as symlinks), we will represent target link as\n+            // symlink and rest other properties are belongs to mount link only.\n+            result[i++] =\n+                new FileStatus(0, false, 0, 0, creationTime, creationTime,\n+                    PERMISSION_555, ugi.getShortUserName(),\n+                    ugi.getPrimaryGroupName(), link.getTargetLink(),\n+                    path);\n+            continue;\n+          }\n+\n+          //  We will represent as non-symlinks. Here it will show target\n+          //  directory/file properties like permissions, isDirectory etc on\n+          //  mount path. The path will be a mount link path and isDirectory is\n+          //  true if target is dir, otherwise false.\n+          String linkedPath = link.getTargetFileSystem().getUri().getPath();\n+          if (\"\".equals(linkedPath)) {\n+            linkedPath = \"/\";\n+          }\n           try {\n-            String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            if(\"\".equals(linkedPath)) {\n-              linkedPath = \"/\";\n-            }\n             FileStatus status =\n                 ((ChRootedFileSystem)link.getTargetFileSystem())\n                 .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                null, path);\n           } catch (FileNotFoundException ex) {\n-            result[i++] = new FileStatus(0, false, 0, 0,\n-              creationTime, creationTime, PERMISSION_555,\n-              ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+            LOG.warn(\"Cannot get one of the children's(\" + path\n+                + \")  target path(\" + link.getTargetFileSystem().getUri()\n+                + \") file status.\", ex);\n+            throw ex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTE4Mw=="}, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk2OTAwOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewfsFileStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzozMTo1MlrOGmLA7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo1NTo0NVrOGmbexA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTUzMw==", "bodyText": "assertFalse() ?", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442679533", "createdAt": "2020-06-19T07:31:52Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewfsFileStatus.java", "diffHunk": "@@ -148,9 +148,11 @@ public void testListStatusACL() throws IOException {\n         if (status.getPath().getName().equals(\"file\")) {\n           assertEquals(FsPermission.valueOf(\"-rwxr--r--\"),\n               status.getPermission());\n+          assertEquals(false, status.isDirectory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0OTMxNg==", "bodyText": "Oops, thats a copy paste thing :-). Will fix it.", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442949316", "createdAt": "2020-06-19T16:55:45Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewfsFileStatus.java", "diffHunk": "@@ -148,9 +148,11 @@ public void testListStatusACL() throws IOException {\n         if (status.getPath().getName().equals(\"file\")) {\n           assertEquals(FsPermission.valueOf(\"-rwxr--r--\"),\n               status.getPermission());\n+          assertEquals(false, status.isDirectory());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTUzMw=="}, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk2OTU4OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewfsFileStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzozMjowNFrOGmLBSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzo1NjozOVrOGmdEKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTYyNQ==", "bodyText": "assertTrue() ?", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442679625", "createdAt": "2020-06-19T07:32:04Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewfsFileStatus.java", "diffHunk": "@@ -148,9 +148,11 @@ public void testListStatusACL() throws IOException {\n         if (status.getPath().getName().equals(\"file\")) {\n           assertEquals(FsPermission.valueOf(\"-rwxr--r--\"),\n               status.getPermission());\n+          assertEquals(false, status.isDirectory());\n         } else {\n           assertEquals(FsPermission.valueOf(\"-r--rwxr--\"),\n               status.getPermission());\n+          assertEquals(true, status.isDirectory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3NTI3Mw==", "bodyText": "done all of this simiar", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442975273", "createdAt": "2020-06-19T17:56:39Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewfsFileStatus.java", "diffHunk": "@@ -148,9 +148,11 @@ public void testListStatusACL() throws IOException {\n         if (status.getPath().getName().equals(\"file\")) {\n           assertEquals(FsPermission.valueOf(\"-rwxr--r--\"),\n               status.getPermission());\n+          assertEquals(false, status.isDirectory());\n         } else {\n           assertEquals(FsPermission.valueOf(\"-r--rwxr--\"),\n               status.getPermission());\n+          assertEquals(true, status.isDirectory());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTYyNQ=="}, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk4MjAwOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzozNjoyNFrOGmLItQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0NToxMlrOGmbMuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MTUyNQ==", "bodyText": "A line break after @before should look better.", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442681525", "createdAt": "2020-06-19T07:36:24Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.FsConstants;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * ViewFsOverloadScheme ListStatus.\n+ */\n+public class TestViewFsOverloadSchemeListStatus {\n+\n+  private static final File TEST_DIR =\n+      GenericTestUtils.getTestDir(TestViewfsFileStatus.class.getSimpleName());\n+\n+  @Before public void setUp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NDY5OQ==", "bodyText": "For some reason, I switched to new intellij setup. somehow Intellij making this change. need to set my formatter rules.", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442944699", "createdAt": "2020-06-19T16:45:12Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.FsConstants;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * ViewFsOverloadScheme ListStatus.\n+ */\n+public class TestViewFsOverloadSchemeListStatus {\n+\n+  private static final File TEST_DIR =\n+      GenericTestUtils.getTestDir(TestViewfsFileStatus.class.getSimpleName());\n+\n+  @Before public void setUp() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MTUyNQ=="}, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODAyMTQ4OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0OToxMlrOGmLguA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0OToxMlrOGmLguA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NzY3Mg==", "bodyText": "Line Break.", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442687672", "createdAt": "2020-06-19T07:49:12Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.FsConstants;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * ViewFsOverloadScheme ListStatus.\n+ */\n+public class TestViewFsOverloadSchemeListStatus {\n+\n+  private static final File TEST_DIR =\n+      GenericTestUtils.getTestDir(TestViewfsFileStatus.class.getSimpleName());\n+\n+  @Before public void setUp() {\n+    FileUtil.fullyDelete(TEST_DIR);\n+    assertTrue(TEST_DIR.mkdirs());\n+  }\n+\n+  @After public void tearDown() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODAyOTU5OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo1MTo1MlrOGmLlvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo1MTo1MlrOGmLlvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4ODk1OA==", "bodyText": "assertFalse()", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442688958", "createdAt": "2020-06-19T07:51:52Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.FsConstants;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * ViewFsOverloadScheme ListStatus.\n+ */\n+public class TestViewFsOverloadSchemeListStatus {\n+\n+  private static final File TEST_DIR =\n+      GenericTestUtils.getTestDir(TestViewfsFileStatus.class.getSimpleName());\n+\n+  @Before public void setUp() {\n+    FileUtil.fullyDelete(TEST_DIR);\n+    assertTrue(TEST_DIR.mkdirs());\n+  }\n+\n+  @After public void tearDown() throws IOException {\n+    FileUtil.fullyDelete(TEST_DIR);\n+  }\n+\n+  /**\n+   * Tests the ACL and isDirectory returned from listStatus for directories and\n+   * files.\n+   */\n+  @Test\n+  public void testListStatusACL() throws IOException, URISyntaxException {\n+    String testfilename = \"testFileACL\";\n+    String childDirectoryName = \"testDirectoryACL\";\n+    TEST_DIR.mkdirs();\n+    File infile = new File(TEST_DIR, testfilename);\n+    final byte[] content = \"dingos\".getBytes();\n+\n+    try (FileOutputStream fos = new FileOutputStream(infile)) {\n+      fos.write(content);\n+    }\n+    assertEquals(content.length, infile.length());\n+    File childDir = new File(TEST_DIR, childDirectoryName);\n+    childDir.mkdirs();\n+\n+    Configuration conf = new Configuration();\n+    ConfigUtil.addLink(conf, \"/file\", infile.toURI());\n+    ConfigUtil.addLink(conf, \"/dir\", childDir.toURI());\n+    String fileScheme = \"file\";\n+    conf.set(String.format(\"fs.%s.impl\", fileScheme),\n+        ViewFileSystemOverloadScheme.class.getName());\n+    conf.set(String\n+        .format(FsConstants.FS_VIEWFS_OVERLOAD_SCHEME_TARGET_FS_IMPL_PATTERN,\n+            fileScheme), LocalFileSystem.class.getName());\n+    String fileUriStr = \"file:///\";\n+    try (FileSystem vfs = FileSystem.get(new URI(fileUriStr), conf)) {\n+      assertEquals(ViewFileSystemOverloadScheme.class, vfs.getClass());\n+      FileStatus[] statuses = vfs.listStatus(new Path(\"/\"));\n+\n+      FileSystem localFs = ((ViewFileSystemOverloadScheme) vfs)\n+          .getRawFileSystem(new Path(fileUriStr), conf);\n+      FileStatus fileStat = localFs.getFileStatus(new Path(infile.getPath()));\n+      FileStatus dirStat = localFs.getFileStatus(new Path(childDir.getPath()));\n+\n+      for (FileStatus status : statuses) {\n+        if (status.getPath().getName().equals(fileScheme)) {\n+          assertEquals(fileStat.getPermission(), status.getPermission());\n+        } else {\n+          assertEquals(dirStat.getPermission(), status.getPermission());\n+        }\n+      }\n+\n+      localFs.setPermission(new Path(infile.getPath()),\n+          FsPermission.valueOf(\"-rwxr--r--\"));\n+      localFs.setPermission(new Path(childDir.getPath()),\n+          FsPermission.valueOf(\"-r--rwxr--\"));\n+\n+      statuses = vfs.listStatus(new Path(\"/\"));\n+      for (FileStatus status : statuses) {\n+        if (status.getPath().getName().equals(fileScheme)) {\n+          assertEquals(FsPermission.valueOf(\"-rwxr--r--\"),\n+              status.getPermission());\n+          assertEquals(false, status.isDirectory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODAzMDI1OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo1MjowN1rOGmLmNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo1MjowN1rOGmLmNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4OTA3OQ==", "bodyText": "assertTrue()?", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442689079", "createdAt": "2020-06-19T07:52:07Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.FsConstants;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * ViewFsOverloadScheme ListStatus.\n+ */\n+public class TestViewFsOverloadSchemeListStatus {\n+\n+  private static final File TEST_DIR =\n+      GenericTestUtils.getTestDir(TestViewfsFileStatus.class.getSimpleName());\n+\n+  @Before public void setUp() {\n+    FileUtil.fullyDelete(TEST_DIR);\n+    assertTrue(TEST_DIR.mkdirs());\n+  }\n+\n+  @After public void tearDown() throws IOException {\n+    FileUtil.fullyDelete(TEST_DIR);\n+  }\n+\n+  /**\n+   * Tests the ACL and isDirectory returned from listStatus for directories and\n+   * files.\n+   */\n+  @Test\n+  public void testListStatusACL() throws IOException, URISyntaxException {\n+    String testfilename = \"testFileACL\";\n+    String childDirectoryName = \"testDirectoryACL\";\n+    TEST_DIR.mkdirs();\n+    File infile = new File(TEST_DIR, testfilename);\n+    final byte[] content = \"dingos\".getBytes();\n+\n+    try (FileOutputStream fos = new FileOutputStream(infile)) {\n+      fos.write(content);\n+    }\n+    assertEquals(content.length, infile.length());\n+    File childDir = new File(TEST_DIR, childDirectoryName);\n+    childDir.mkdirs();\n+\n+    Configuration conf = new Configuration();\n+    ConfigUtil.addLink(conf, \"/file\", infile.toURI());\n+    ConfigUtil.addLink(conf, \"/dir\", childDir.toURI());\n+    String fileScheme = \"file\";\n+    conf.set(String.format(\"fs.%s.impl\", fileScheme),\n+        ViewFileSystemOverloadScheme.class.getName());\n+    conf.set(String\n+        .format(FsConstants.FS_VIEWFS_OVERLOAD_SCHEME_TARGET_FS_IMPL_PATTERN,\n+            fileScheme), LocalFileSystem.class.getName());\n+    String fileUriStr = \"file:///\";\n+    try (FileSystem vfs = FileSystem.get(new URI(fileUriStr), conf)) {\n+      assertEquals(ViewFileSystemOverloadScheme.class, vfs.getClass());\n+      FileStatus[] statuses = vfs.listStatus(new Path(\"/\"));\n+\n+      FileSystem localFs = ((ViewFileSystemOverloadScheme) vfs)\n+          .getRawFileSystem(new Path(fileUriStr), conf);\n+      FileStatus fileStat = localFs.getFileStatus(new Path(infile.getPath()));\n+      FileStatus dirStat = localFs.getFileStatus(new Path(childDir.getPath()));\n+\n+      for (FileStatus status : statuses) {\n+        if (status.getPath().getName().equals(fileScheme)) {\n+          assertEquals(fileStat.getPermission(), status.getPermission());\n+        } else {\n+          assertEquals(dirStat.getPermission(), status.getPermission());\n+        }\n+      }\n+\n+      localFs.setPermission(new Path(infile.getPath()),\n+          FsPermission.valueOf(\"-rwxr--r--\"));\n+      localFs.setPermission(new Path(childDir.getPath()),\n+          FsPermission.valueOf(\"-r--rwxr--\"));\n+\n+      statuses = vfs.listStatus(new Path(\"/\"));\n+      for (FileStatus status : statuses) {\n+        if (status.getPath().getName().equals(fileScheme)) {\n+          assertEquals(FsPermission.valueOf(\"-rwxr--r--\"),\n+              status.getPermission());\n+          assertEquals(false, status.isDirectory());\n+        } else {\n+          assertEquals(FsPermission.valueOf(\"-r--rwxr--\"),\n+              status.getPermission());\n+          assertEquals(true, status.isDirectory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODA0NTczOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo1NzowOFrOGmLv4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo1MjoxNFrOGmbYzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MTU1NA==", "bodyText": "Rather than doing this below and re iterating and calling calling listStatus. Can't we add permissions too above and verify in one go like :\n`      FileStatus dirStat = localFs.getFileStatus(new Path(childDir.getPath()));\n  localFs.setPermission(new Path(infile.getPath()),\n      FsPermission.valueOf(\"-rwxr--r--\"));\n  localFs.setPermission(new Path(childDir.getPath()),\n      FsPermission.valueOf(\"-r--rwxr--\"));\n\n  FileStatus[] statuses = vfs.listStatus(new Path(\"/\"));\n  for (FileStatus status : statuses) {\n    if (status.getPath().getName().equals(fileScheme)) {\n      assertEquals(fileStat.getPermission(), status.getPermission());\n      assertEquals(FsPermission.valueOf(\"-rwxr--r--\"),\n          status.getPermission());\n      assertEquals(false, status.isDirectory());\n    } else {\n      assertEquals(dirStat.getPermission(), status.getPermission());\n      assertEquals(FsPermission.valueOf(\"-r--rwxr--\"),\n          status.getPermission());\n      assertEquals(true, status.isDirectory());\n    }\n  }`", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442691554", "createdAt": "2020-06-19T07:57:08Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.FsConstants;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * ViewFsOverloadScheme ListStatus.\n+ */\n+public class TestViewFsOverloadSchemeListStatus {\n+\n+  private static final File TEST_DIR =\n+      GenericTestUtils.getTestDir(TestViewfsFileStatus.class.getSimpleName());\n+\n+  @Before public void setUp() {\n+    FileUtil.fullyDelete(TEST_DIR);\n+    assertTrue(TEST_DIR.mkdirs());\n+  }\n+\n+  @After public void tearDown() throws IOException {\n+    FileUtil.fullyDelete(TEST_DIR);\n+  }\n+\n+  /**\n+   * Tests the ACL and isDirectory returned from listStatus for directories and\n+   * files.\n+   */\n+  @Test\n+  public void testListStatusACL() throws IOException, URISyntaxException {\n+    String testfilename = \"testFileACL\";\n+    String childDirectoryName = \"testDirectoryACL\";\n+    TEST_DIR.mkdirs();\n+    File infile = new File(TEST_DIR, testfilename);\n+    final byte[] content = \"dingos\".getBytes();\n+\n+    try (FileOutputStream fos = new FileOutputStream(infile)) {\n+      fos.write(content);\n+    }\n+    assertEquals(content.length, infile.length());\n+    File childDir = new File(TEST_DIR, childDirectoryName);\n+    childDir.mkdirs();\n+\n+    Configuration conf = new Configuration();\n+    ConfigUtil.addLink(conf, \"/file\", infile.toURI());\n+    ConfigUtil.addLink(conf, \"/dir\", childDir.toURI());\n+    String fileScheme = \"file\";\n+    conf.set(String.format(\"fs.%s.impl\", fileScheme),\n+        ViewFileSystemOverloadScheme.class.getName());\n+    conf.set(String\n+        .format(FsConstants.FS_VIEWFS_OVERLOAD_SCHEME_TARGET_FS_IMPL_PATTERN,\n+            fileScheme), LocalFileSystem.class.getName());\n+    String fileUriStr = \"file:///\";\n+    try (FileSystem vfs = FileSystem.get(new URI(fileUriStr), conf)) {\n+      assertEquals(ViewFileSystemOverloadScheme.class, vfs.getClass());\n+      FileStatus[] statuses = vfs.listStatus(new Path(\"/\"));\n+\n+      FileSystem localFs = ((ViewFileSystemOverloadScheme) vfs)\n+          .getRawFileSystem(new Path(fileUriStr), conf);\n+      FileStatus fileStat = localFs.getFileStatus(new Path(infile.getPath()));\n+      FileStatus dirStat = localFs.getFileStatus(new Path(childDir.getPath()));\n+\n+      for (FileStatus status : statuses) {\n+        if (status.getPath().getName().equals(fileScheme)) {\n+          assertEquals(fileStat.getPermission(), status.getPermission());\n+        } else {\n+          assertEquals(dirStat.getPermission(), status.getPermission());\n+        }\n+      }\n+\n+      localFs.setPermission(new Path(infile.getPath()),\n+          FsPermission.valueOf(\"-rwxr--r--\"));\n+      localFs.setPermission(new Path(childDir.getPath()),\n+          FsPermission.valueOf(\"-r--rwxr--\"));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0Nzc5MA==", "bodyText": "No, here the test is explicitly change permissions on fs explicitly and get listStatus then assert again whether it's respecting ur change. That was intended.", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442947790", "createdAt": "2020-06-19T16:52:14Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFsOverloadSchemeListStatus.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.viewfs;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.FsConstants;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * ViewFsOverloadScheme ListStatus.\n+ */\n+public class TestViewFsOverloadSchemeListStatus {\n+\n+  private static final File TEST_DIR =\n+      GenericTestUtils.getTestDir(TestViewfsFileStatus.class.getSimpleName());\n+\n+  @Before public void setUp() {\n+    FileUtil.fullyDelete(TEST_DIR);\n+    assertTrue(TEST_DIR.mkdirs());\n+  }\n+\n+  @After public void tearDown() throws IOException {\n+    FileUtil.fullyDelete(TEST_DIR);\n+  }\n+\n+  /**\n+   * Tests the ACL and isDirectory returned from listStatus for directories and\n+   * files.\n+   */\n+  @Test\n+  public void testListStatusACL() throws IOException, URISyntaxException {\n+    String testfilename = \"testFileACL\";\n+    String childDirectoryName = \"testDirectoryACL\";\n+    TEST_DIR.mkdirs();\n+    File infile = new File(TEST_DIR, testfilename);\n+    final byte[] content = \"dingos\".getBytes();\n+\n+    try (FileOutputStream fos = new FileOutputStream(infile)) {\n+      fos.write(content);\n+    }\n+    assertEquals(content.length, infile.length());\n+    File childDir = new File(TEST_DIR, childDirectoryName);\n+    childDir.mkdirs();\n+\n+    Configuration conf = new Configuration();\n+    ConfigUtil.addLink(conf, \"/file\", infile.toURI());\n+    ConfigUtil.addLink(conf, \"/dir\", childDir.toURI());\n+    String fileScheme = \"file\";\n+    conf.set(String.format(\"fs.%s.impl\", fileScheme),\n+        ViewFileSystemOverloadScheme.class.getName());\n+    conf.set(String\n+        .format(FsConstants.FS_VIEWFS_OVERLOAD_SCHEME_TARGET_FS_IMPL_PATTERN,\n+            fileScheme), LocalFileSystem.class.getName());\n+    String fileUriStr = \"file:///\";\n+    try (FileSystem vfs = FileSystem.get(new URI(fileUriStr), conf)) {\n+      assertEquals(ViewFileSystemOverloadScheme.class, vfs.getClass());\n+      FileStatus[] statuses = vfs.listStatus(new Path(\"/\"));\n+\n+      FileSystem localFs = ((ViewFileSystemOverloadScheme) vfs)\n+          .getRawFileSystem(new Path(fileUriStr), conf);\n+      FileStatus fileStat = localFs.getFileStatus(new Path(infile.getPath()));\n+      FileStatus dirStat = localFs.getFileStatus(new Path(childDir.getPath()));\n+\n+      for (FileStatus status : statuses) {\n+        if (status.getPath().getName().equals(fileScheme)) {\n+          assertEquals(fileStat.getPermission(), status.getPermission());\n+        } else {\n+          assertEquals(dirStat.getPermission(), status.getPermission());\n+        }\n+      }\n+\n+      localFs.setPermission(new Path(infile.getPath()),\n+          FsPermission.valueOf(\"-rwxr--r--\"));\n+      localFs.setPermission(new Path(childDir.getPath()),\n+          FsPermission.valueOf(\"-r--rwxr--\"));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MTU1NA=="}, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODA0OTU2OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo1ODoyNVrOGmLyUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo1ODoyNVrOGmLyUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MjE3Ng==", "bodyText": "Ditto. Can be a fallback to original", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r442692176", "createdAt": "2020-06-19T07:58:25Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java", "diffHunk": "@@ -999,39 +1007,53 @@ public int getUriDefaultPort() {\n      * will be listed in the returned result.\n      */\n     @Override\n-    public FileStatus[] listStatus(final Path f) throws AccessControlException,\n-        IOException {\n+    public FileStatus[] listStatus(final Path f) throws IOException {\n       checkPathIsSlash(f);\n       FileStatus[] fallbackStatuses = listStatusForFallbackLink();\n       FileStatus[] result = new FileStatus[theInternalDir.getChildren().size()];\n       int i = 0;\n       for (Entry<String, INode<AbstractFileSystem>> iEntry :\n           theInternalDir.getChildren().entrySet()) {\n         INode<AbstractFileSystem> inode = iEntry.getValue();\n-\n-        \n+        Path path = new Path(inode.fullPath).makeQualified(myUri, null);\n         if (inode.isLink()) {\n           INodeLink<AbstractFileSystem> link = \n             (INodeLink<AbstractFileSystem>) inode;\n \n+          if (showMountLinksAsSymlinks) {\n+            // To maintain backward compatibility, with default option(showing\n+            // mount links as symlinks), we will represent target link as\n+            // symlink and rest other properties are belongs to mount link only.\n+            result[i++] =\n+                new FileStatus(0, false, 0, 0, creationTime, creationTime,\n+                    PERMISSION_555, ugi.getShortUserName(),\n+                    ugi.getPrimaryGroupName(), link.getTargetLink(),\n+                    path);\n+            continue;\n+          }\n+\n+          //  We will represent as non-symlinks. Here it will show target\n+          //  directory/file properties like permissions, isDirectory etc on\n+          //  mount path. The path will be a mount link path and isDirectory is\n+          //  true if target is dir, otherwise false.\n+          String linkedPath = link.getTargetFileSystem().getUri().getPath();\n+          if (\"\".equals(linkedPath)) {\n+            linkedPath = \"/\";\n+          }\n           try {\n-            String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            FileStatus status = ((ChRootedFs)link.getTargetFileSystem())\n-                .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+            FileStatus status =\n+                ((ChRootedFs) link.getTargetFileSystem()).getMyFs()\n+                    .getFileStatus(new Path(linkedPath));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                null, path);\n           } catch (FileNotFoundException ex) {\n-            result[i++] = new FileStatus(0, false, 0, 0,\n-              creationTime, creationTime, PERMISSION_555,\n-              ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+            LOG.warn(\"Cannot get one of the children's(\" + path\n+                + \")  target path(\" + link.getTargetFileSystem().getUri()\n+                + \") file status.\", ex);\n+            throw ex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c55c9a5cf7f88f3e435a23203504072050d5e43"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDI3NjUzOnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs/src/site/markdown/ViewFsOverloadScheme.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMToyMzozMFrOGmhkrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMDozMDozMVrOGmjuhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA0OTEzMw==", "bodyText": "is link not required after cluster?\nfs.viewfs.mountable.cluster.link./user", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r443049133", "createdAt": "2020-06-19T21:23:30Z", "author": {"login": "ayushtkn"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/site/markdown/ViewFsOverloadScheme.md", "diffHunk": "@@ -55,44 +55,44 @@ Here `<scheme>` should be same as the uri-scheme configured in fs.defautFS. For\n \n **Example 1:**\n \n-If users want some of their existing cluster (`hdfs://mycluster`) data to mount with hdfs(`hdfs://mycluster`) and other object store clusters(`o3fs://bucket1.volume1.omhost/`, `s3a://bucket1/`), the following example configurations can show how to add mount links.\n+If users want some of their existing cluster (`hdfs://cluster`) data to mount with hdfs(`hdfs://cluster`) and other object store clusters(`o3fs://bucket1.volume1.omhost/`, `s3a://bucket1/`), the following example configurations can show how to add mount links.\n \n \n ```xml\n <property>\n-  <name>fs.viewfs.mounttable.Cluster./user</name>\n-  <value>hdfs://mycluster/user</value>\n+  <name>fs.viewfs.mounttable.cluster./user</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2ec00ca3c7d4f5d5706153b3eab162262fddfc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4NDQyMg==", "bodyText": "It's a good catch @ayushtkn. I have corrected this in all places docs. ex: there are places javadoc etc missed this link before.\nAlso took a liberty to correct few other doc issues like mount-table.versionNumber.xml. It should have '.' instead of -.", "url": "https://github.com/apache/hadoop/pull/2084#discussion_r443084422", "createdAt": "2020-06-20T00:30:31Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/site/markdown/ViewFsOverloadScheme.md", "diffHunk": "@@ -55,44 +55,44 @@ Here `<scheme>` should be same as the uri-scheme configured in fs.defautFS. For\n \n **Example 1:**\n \n-If users want some of their existing cluster (`hdfs://mycluster`) data to mount with hdfs(`hdfs://mycluster`) and other object store clusters(`o3fs://bucket1.volume1.omhost/`, `s3a://bucket1/`), the following example configurations can show how to add mount links.\n+If users want some of their existing cluster (`hdfs://cluster`) data to mount with hdfs(`hdfs://cluster`) and other object store clusters(`o3fs://bucket1.volume1.omhost/`, `s3a://bucket1/`), the following example configurations can show how to add mount links.\n \n \n ```xml\n <property>\n-  <name>fs.viewfs.mounttable.Cluster./user</name>\n-  <value>hdfs://mycluster/user</value>\n+  <name>fs.viewfs.mounttable.cluster./user</name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA0OTEzMw=="}, "originalCommit": {"oid": "2d2ec00ca3c7d4f5d5706153b3eab162262fddfc"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3446, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}