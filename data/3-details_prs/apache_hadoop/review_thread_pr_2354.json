{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MDEzMjY0", "number": 2354, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxMTo1NlrOEqY0-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozODoyM1rOEqvAHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODgyNDI1OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/site/markdown/filesystem/filesystem.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxMTo1NlrOHckJvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxMTo1NlrOHckJvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNDQ5NA==", "bodyText": "use listStatus() with backticks", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r499714494", "createdAt": "2020-10-05T16:11:56Z", "author": {"login": "steveloughran"}, "path": "hadoop-common-project/hadoop-common/src/site/markdown/filesystem/filesystem.md", "diffHunk": "@@ -294,6 +294,20 @@ any optimizations.\n The atomicity and consistency constraints are as for\n `listStatus(Path, PathFilter)`.\n \n+### `RemoteIterator<FileStatus> listStatusIterator(Path p)`\n+Return an iterator enumerating the `FileStatus` entries under\n+a path. This is similar to `listStatus(Path)` except the fact that\n+rather than returning an entire list, an iterator is returned.\n+The result is exactly the same as listStatus, provided no other caller ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d539eee3c0735248f9aafcd9a8ee58fe809d95"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg2Mjc2OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMToyOVrOHckhhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMToyOVrOHckhhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMDU4Mg==", "bodyText": "same: List as variable type\nActually, it may make sense to type this method\nRemoteIterator<T extends FileStatus>\n\nand have\nList<T>\n\nand\nRemoteIterator<T>\n\nwhere appropriate", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r499720582", "createdAt": "2020-10-05T16:21:29Z", "author": {"login": "steveloughran"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java", "diffHunk": "@@ -1453,6 +1453,52 @@ public static TreeScanResults treeWalk(FileSystem fs, Path path)\n     return list;\n   }\n \n+  /**\n+   * Convert a remote iterator over file status results into a list.\n+   * The utility equivalents in commons collection and guava cannot be\n+   * used here, as this is a different interface, one whose operators\n+   * can throw IOEs.\n+   * @param iterator input iterator\n+   * @return the file status entries as a list.\n+   * @throws IOException\n+   */\n+  public static List<? extends FileStatus> iteratorToList(\n+          RemoteIterator<? extends FileStatus> iterator) throws IOException {\n+    ArrayList<FileStatus> list = new ArrayList<>();\n+    while (iterator.hasNext()) {\n+      list.add(iterator.next());\n+    }\n+    return list;\n+  }\n+\n+\n+  /**\n+   * Convert a remote iterator over file status results into a list.\n+   * This uses {@link RemoteIterator#next()} calls only, expecting\n+   * a raised {@link NoSuchElementException} exception to indicate that\n+   * the end of the listing has been reached. This iteration strategy is\n+   * designed to verify that the implementation of the remote iterator\n+   * generates results and terminates consistently with the {@code hasNext/next}\n+   * iteration. More succinctly \"verifies that the {@code next()} operator\n+   * isn't relying on {@code hasNext()} to always be called during an iteration.\n+   * @param iterator input iterator\n+   * @return the status entries as a list.\n+   * @throws IOException IO problems\n+   */\n+  @SuppressWarnings(\"InfiniteLoopStatement\")\n+  public static List<? extends FileStatus> iteratorToListThroughNextCallsAlone(\n+          RemoteIterator<? extends FileStatus> iterator) throws IOException {\n+    ArrayList<FileStatus> list = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d539eee3c0735248f9aafcd9a8ee58fe809d95"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg4MzA4OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractRootDirectoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyNjo1MlrOHckuNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyNjo1MlrOHckuNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMzgzMQ==", "bodyText": "if you can have both sets of listing as collections, use Assertions.assertThat() as you've done earlier", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r499723831", "createdAt": "2020-10-05T16:26:52Z", "author": {"login": "steveloughran"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractRootDirectoryTest.java", "diffHunk": "@@ -242,6 +243,13 @@ public void testSimpleRootListing() throws IOException {\n             + \"listStatus = \" + listStatusResult\n             + \"listFiles = \" + listFilesResult,\n         fileList.size() <= statuses.length);\n+    List<FileStatus> statusList = (List<FileStatus>) iteratorToList(\n+            fs.listStatusIterator(root));\n+    String listStatusItrRes = join(statusList, \"\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d539eee3c0735248f9aafcd9a8ee58fe809d95"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg4ODM5OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyODoxNlrOHckxew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyODoxNlrOHckxew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNDY2Nw==", "bodyText": "AssertionsAssertThat to assert that the list size == 1", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r499724667", "createdAt": "2020-10-05T16:28:16Z", "author": {"login": "steveloughran"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java", "diffHunk": "@@ -322,6 +355,22 @@ public void testListStatusFile() throws Throwable {\n     verifyStatusArrayMatchesFile(f, getFileSystem().listStatus(f));\n   }\n \n+  @Test\n+  public void testListStatusIteratorFile() throws Throwable {\n+    describe(\"test the listStatusIterator(path) on a file\");\n+    Path f = touchf(\"listStItrFile\");\n+    List<FileStatus> statusList = (List<FileStatus>) iteratorToList(\n+            getFileSystem().listStatusIterator(f));\n+    assertEquals(\"size of file list returned\", 1, statusList.size());\n+    assertIsNamedFile(f, statusList.get(0));\n+    List<FileStatus> statusList2 =\n+            (List<FileStatus>) iteratorToListThroughNextCallsAlone(\n+                    getFileSystem().listStatusIterator(f));\n+    assertEquals(\"size of file list returned through next() calls\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d539eee3c0735248f9aafcd9a8ee58fe809d95"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjI2MDk5OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjo1Nzo0MlrOHdFDRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjo1Nzo0MlrOHdFDRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI1MzUwOQ==", "bodyText": "any reason not to leave both as Path and let Path.equals() to do the work? It compares URIs", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r500253509", "createdAt": "2020-10-06T12:57:42Z", "author": {"login": "steveloughran"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java", "diffHunk": "@@ -359,16 +357,39 @@ public void testListStatusFile() throws Throwable {\n   public void testListStatusIteratorFile() throws Throwable {\n     describe(\"test the listStatusIterator(path) on a file\");\n     Path f = touchf(\"listStItrFile\");\n+\n     List<FileStatus> statusList = (List<FileStatus>) iteratorToList(\n             getFileSystem().listStatusIterator(f));\n-    assertEquals(\"size of file list returned\", 1, statusList.size());\n-    assertIsNamedFile(f, statusList.get(0));\n+    validateListingForFile(f, statusList, false);\n+\n     List<FileStatus> statusList2 =\n             (List<FileStatus>) iteratorToListThroughNextCallsAlone(\n                     getFileSystem().listStatusIterator(f));\n-    assertEquals(\"size of file list returned through next() calls\",\n-            1, statusList2.size());\n-    assertIsNamedFile(f, statusList2.get(0));\n+    validateListingForFile(f, statusList2, true);\n+  }\n+\n+  /**\n+   * Validate listing result for an input path which is file.\n+   * @param f file.\n+   * @param statusList list status of a file.\n+   * @param nextCallAlone whether the listing generated just using\n+   *                      next() calls.\n+   */\n+  private void validateListingForFile(Path f,\n+                                      List<FileStatus> statusList,\n+                                      boolean nextCallAlone) {\n+    String msg = String.format(\"size of file list returned using %s should \" +\n+            \"be 1\", nextCallAlone ?\n+            \"next() calls alone\" : \"hasNext() and next() calls\");\n+    Assertions.assertThat(statusList)\n+            .describedAs(msg)\n+            .hasSize(1);\n+    Assertions.assertThat(statusList.get(0).getPath().toString())\n+            .describedAs(\"path returned should match with the input path\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d658f83bb7acf96ce57816924ecc2b84cbb3e4f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjI2ODcxOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjo1OToyM1rOHdFH_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjo1OToyM1rOHdFH_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI1NDcxOA==", "bodyText": "as discussed: better to fix DirListingIterator to match RemoteIterator API; we can consider it's failure a bug", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r500254718", "createdAt": "2020-10-06T12:59:23Z", "author": {"login": "steveloughran"}, "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java", "diffHunk": "@@ -1520,7 +1521,8 @@ public static TreeScanResults treeWalk(FileSystem fs, Path path)\n       while (true) {\n         list.add(iterator.next());\n       }\n-    } catch (NoSuchElementException expected) {\n+    } catch (NoSuchElementException | IllegalStateException expected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d658f83bb7acf96ce57816924ecc2b84cbb3e4f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQ1NzI3OnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozODoyM1rOHdG8UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozODoyM1rOHdG8UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4NDQ5Nw==", "bodyText": "Please remove this before merging. Was just added to trigger hdfs tests by yetus.", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r500284497", "createdAt": "2020-10-06T13:38:23Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java", "diffHunk": "@@ -1107,6 +1107,7 @@ public Void next(final FileSystem fs, final Path p)\n     }\n \n     HdfsFileStatus[] partialListing = thisListing.getPartialListing();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90efdfa29c0dede97f5a2a4e211d81ddf0c98e44"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3322, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}