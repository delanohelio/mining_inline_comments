{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzcwMzg0", "number": 1925, "reviewThreads": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozOTozNlrODtg1Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QxODo0Mjo1OVrOFpb0Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDUwNDY3OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozOTozNlrOF--qHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozOTozNlrOF--qHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MjYyMQ==", "bodyText": "this seems to be recurrent merge pain point: too many patches adding more things to every rest call.\nProposed: how about adding a RestOperationContext struct which gets passed down, leaseId would go in there, and later other stuff (statistics, trace context, etc) ?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r401582621", "createdAt": "2020-04-01T12:39:36Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "diffHunk": "@@ -328,13 +406,16 @@ public AbfsRestOperation renamePath(String source, final String destination, fin\n   }\n \n   public AbfsRestOperation append(final String path, final long position, final byte[] buffer, final int offset,\n-                                  final int length, boolean flush, boolean isClose)\n+                                  final int length, boolean flush, boolean isClose, final String leaseId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98c26ca2a785f2523c75b59b8eb1e356af56f4a"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDUwOTMzOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MDo1MVrOF--tMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MDo1MVrOF--tMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MzQxMQ==", "bodyText": "PathIOException with path; make error string a const to use when matching in tests. Consider also a new LeaseRequiredException if that helps testing", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r401583411", "createdAt": "2020-04-01T12:40:51Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java", "diffHunk": "@@ -168,6 +177,10 @@ public synchronized void write(final byte[] data, final int off, final int lengt\n       throw new IndexOutOfBoundsException();\n     }\n \n+    if (lease != null && lease.isFreed()) {\n+      throw new IOException(\"Attempted to write to file without lease: \" + path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98c26ca2a785f2523c75b59b8eb1e356af56f4a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDUwOTc0OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MTowMFrOF--teA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MTowMFrOF--teA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MzQ4MA==", "bodyText": "will this ever fail?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r401583480", "createdAt": "2020-04-01T12:41:00Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java", "diffHunk": "@@ -261,6 +274,9 @@ public synchronized void close() throws IOException {\n       // See HADOOP-16785\n       throw wrapException(path, e.getMessage(), e);\n     } finally {\n+      if (lease != null) {\n+        lease.free();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98c26ca2a785f2523c75b59b8eb1e356af56f4a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDUxMTgxOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MTozNFrOF--u3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MTozNFrOF--u3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MzgzNw==", "bodyText": "we are on SLF4J now", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r401583837", "createdAt": "2020-04-01T12:41:34Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import org.apache.commons.logging.Log;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98c26ca2a785f2523c75b59b8eb1e356af56f4a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDUxNTYwOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MjozOVrOF--xLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MjozOVrOF--xLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NDQzMA==", "bodyText": "switch to SLF4J logging style; include full stack @ debug level", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r401584430", "createdAt": "2020-04-01T12:42:39Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.AzureBlobFileSystemStore;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely\n+ * using a background thread. Use it to synchronize distributed processes,\n+ * or to prevent writes to the blob by other processes that don't\n+ * have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is\n+ * acquired.\n+ *\n+ * Call free() to release the Lease.\n+ *\n+ * You can use this Lease like a distributed lock. If the holder process\n+ * dies, the lease will time out since it won't be renewed.\n+ *\n+ * See also {@link org.apache.hadoop.fs.azure.SelfRenewingLease}.\n+ */\n+public class SelfRenewingLease {\n+\n+  private final AzureBlobFileSystemStore store;\n+  private final Path path;\n+  private Thread renewer;\n+  private volatile boolean leaseFreed;\n+  private String leaseID = null;\n+  private static final int LEASE_TIMEOUT = 60;  // Lease timeout in seconds\n+\n+  // Time to wait to renew lease in milliseconds\n+  public static final int LEASE_RENEWAL_PERIOD = 40000;\n+  private static final Log LOG = LogFactory.getLog(SelfRenewingLease.class);\n+\n+  // Used to allocate thread serial numbers in thread name\n+  private static AtomicInteger threadNumber = new AtomicInteger(0);\n+\n+\n+  // Time to wait to retry getting the lease in milliseconds\n+  @VisibleForTesting\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 2000;\n+\n+  public SelfRenewingLease(AzureBlobFileSystemStore store, Path path) {\n+\n+    this.leaseFreed = false;\n+    this.store = store;\n+    this.path = path;\n+\n+    // Keep trying to get the lease until you get it.\n+    while(leaseID == null) {\n+      try {\n+        leaseID = store.acquireLease(this.path, LEASE_TIMEOUT);\n+      } catch (IOException e) {\n+        LOG.info(\"Caught exception when trying to get lease on blob \" + path + \". \" + e.getMessage());\n+      }\n+      if (leaseID == null) {\n+        try {\n+          Thread.sleep(LEASE_ACQUIRE_RETRY_INTERVAL);\n+        } catch (InterruptedException e) {\n+\n+          // Restore the interrupted status\n+          Thread.currentThread().interrupt();\n+        }\n+      }\n+    }\n+    renewer = new Thread(new Renewer());\n+\n+    // A Renewer running should not keep JVM from exiting, so make it a daemon.\n+    renewer.setDaemon(true);\n+    renewer.setName(\"AzureLeaseRenewer-\" + threadNumber.getAndIncrement());\n+    renewer.start();\n+    LOG.debug(\"Acquired lease \" + leaseID + \" on \" + path\n+        + \" managed by thread \" + renewer.getName());\n+  }\n+\n+  /**\n+   * Free the lease and stop the keep-alive thread.\n+   */\n+  public void free() {\n+    try {\n+      store.releaseLease(path, leaseID);\n+    } catch (IOException e) {\n+      LOG.info(\"Exception when trying to free lease \" + leaseID + \" on \" + path + \". \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98c26ca2a785f2523c75b59b8eb1e356af56f4a"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDUyMDI3OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0Mzo1MVrOF--z_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0Mzo1MVrOF--z_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NTE1MA==", "bodyText": "should be tied in to the FileSystem instance lifecycle too: an FS instance should really have a weak ref to all leases created under it, and fs.close to stop them all", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r401585150", "createdAt": "2020-04-01T12:43:51Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.AzureBlobFileSystemStore;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely\n+ * using a background thread. Use it to synchronize distributed processes,\n+ * or to prevent writes to the blob by other processes that don't\n+ * have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is\n+ * acquired.\n+ *\n+ * Call free() to release the Lease.\n+ *\n+ * You can use this Lease like a distributed lock. If the holder process\n+ * dies, the lease will time out since it won't be renewed.\n+ *\n+ * See also {@link org.apache.hadoop.fs.azure.SelfRenewingLease}.\n+ */\n+public class SelfRenewingLease {\n+\n+  private final AzureBlobFileSystemStore store;\n+  private final Path path;\n+  private Thread renewer;\n+  private volatile boolean leaseFreed;\n+  private String leaseID = null;\n+  private static final int LEASE_TIMEOUT = 60;  // Lease timeout in seconds\n+\n+  // Time to wait to renew lease in milliseconds\n+  public static final int LEASE_RENEWAL_PERIOD = 40000;\n+  private static final Log LOG = LogFactory.getLog(SelfRenewingLease.class);\n+\n+  // Used to allocate thread serial numbers in thread name\n+  private static AtomicInteger threadNumber = new AtomicInteger(0);\n+\n+\n+  // Time to wait to retry getting the lease in milliseconds\n+  @VisibleForTesting\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 2000;\n+\n+  public SelfRenewingLease(AzureBlobFileSystemStore store, Path path) {\n+\n+    this.leaseFreed = false;\n+    this.store = store;\n+    this.path = path;\n+\n+    // Keep trying to get the lease until you get it.\n+    while(leaseID == null) {\n+      try {\n+        leaseID = store.acquireLease(this.path, LEASE_TIMEOUT);\n+      } catch (IOException e) {\n+        LOG.info(\"Caught exception when trying to get lease on blob \" + path + \". \" + e.getMessage());\n+      }\n+      if (leaseID == null) {\n+        try {\n+          Thread.sleep(LEASE_ACQUIRE_RETRY_INTERVAL);\n+        } catch (InterruptedException e) {\n+\n+          // Restore the interrupted status\n+          Thread.currentThread().interrupt();\n+        }\n+      }\n+    }\n+    renewer = new Thread(new Renewer());\n+\n+    // A Renewer running should not keep JVM from exiting, so make it a daemon.\n+    renewer.setDaemon(true);\n+    renewer.setName(\"AzureLeaseRenewer-\" + threadNumber.getAndIncrement());\n+    renewer.start();\n+    LOG.debug(\"Acquired lease \" + leaseID + \" on \" + path\n+        + \" managed by thread \" + renewer.getName());\n+  }\n+\n+  /**\n+   * Free the lease and stop the keep-alive thread.\n+   */\n+  public void free() {\n+    try {\n+      store.releaseLease(path, leaseID);\n+    } catch (IOException e) {\n+      LOG.info(\"Exception when trying to free lease \" + leaseID + \" on \" + path + \". \" + e.getMessage());\n+    } finally {\n+\n+      // Even if releasing the lease fails (e.g. because the file was deleted),\n+      // make sure to record that we freed the lease, to terminate the\n+      // keep-alive thread.\n+      leaseFreed = true;\n+      LOG.debug(\"Freed lease \" + leaseID + \" on \" + path\n+          + \" managed by thread \" + renewer.getName());\n+    }\n+  }\n+\n+  public boolean isFreed() {\n+    return leaseFreed;\n+  }\n+\n+  public String getLeaseID() {\n+    return leaseID;\n+  }\n+\n+  private class Renewer implements Runnable {\n+\n+    /**\n+     * Start a keep-alive thread that will continue to renew\n+     * the lease until it is freed or the process dies.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98c26ca2a785f2523c75b59b8eb1e356af56f4a"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQ1MDg2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0NToxOFrOHqni7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0NToxOFrOHqni7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1MDE1Ng==", "bodyText": "This likely to take time? I'm worried about what happens if there's network problems and this gets invoked. Ideally this would be done in parallel, but abfs doesnt (yet) have a thread pool", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r514450156", "createdAt": "2020-10-29T17:45:18Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java", "diffHunk": "@@ -243,6 +252,16 @@ public String getPrimaryGroup() {\n \n   @Override\n   public void close() throws IOException {\n+    for (SelfRenewingLease lease : leaseRefs.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb65e714888f104676915e8c54a0c2b00b3168e8"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQ1Mjk5OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0NTo0N1rOHqnkPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0NTo0N1rOHqnkPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1MDQ5NQ==", "bodyText": "go on, add some javadocs", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r514450495", "createdAt": "2020-10-29T17:45:47Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java", "diffHunk": "@@ -685,10 +712,38 @@ public OutputStream openFileForWrite(final Path path, final FileSystem.Statistic\n           statistics,\n           relativePath,\n           offset,\n-          populateAbfsOutputStreamContext(isAppendBlob));\n+          leaseRefs,\n+          populateAbfsOutputStreamContext(isAppendBlob, enableSingleWriter));\n     }\n   }\n \n+  public String acquireLease(final Path path, final int duration) throws AzureBlobFileSystemException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb65e714888f104676915e8c54a0c2b00b3168e8"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQ2NDI4OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0ODoyM1rOHqnrQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0ODoyM1rOHqnrQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1MjI5MQ==", "bodyText": "as well as the usual import grouping/ordering, we've gone to shaded guava on trunk", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r514452291", "createdAt": "2020-10-29T17:48:23Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import com.google.common.base.Preconditions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb65e714888f104676915e8c54a0c2b00b3168e8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQ3MTI5OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0OTo1OVrOHqnvqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0OTo1OVrOHqnvqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1MzQxNg==", "bodyText": "Prefer you use our normal RetryPolicy if possible", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r514453416", "createdAt": "2020-10-29T17:49:59Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely\n+ * using a background thread. Use it to synchronize distributed processes,\n+ * or to prevent writes to the blob by other processes that don't\n+ * have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is\n+ * acquired.\n+ *\n+ * Call free() to release the Lease.\n+ *\n+ * You can use this Lease like a distributed lock. If the holder process\n+ * dies, the lease will time out since it won't be renewed.\n+ *\n+ * See also {@link org.apache.hadoop.fs.azure.SelfRenewingLease}.\n+ */\n+public final class SelfRenewingLease {\n+\n+  private final AbfsClient client;\n+  private final Path path;\n+  private Thread renewer;\n+  private volatile boolean leaseFreed;\n+  private String leaseID = null;\n+  private static final int LEASE_TIMEOUT = 60;  // Lease timeout in seconds\n+\n+  // Time to wait to renew lease in milliseconds\n+  public static final int LEASE_RENEWAL_PERIOD = 40000;\n+  public static final Logger LOG = LoggerFactory.getLogger(SelfRenewingLease.class);\n+\n+  // Used to allocate thread serial numbers in thread name\n+  private static AtomicInteger threadNumber = new AtomicInteger(0);\n+\n+\n+  // Time to wait to retry getting the lease in milliseconds\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 2000;\n+  static final int LEASE_MAX_RETRIES = 5;\n+\n+  public static class LeaseException extends AzureBlobFileSystemException {\n+    public LeaseException(Exception innerException) {\n+      super(ERR_ACQUIRING_LEASE, innerException);\n+    }\n+  }\n+\n+  public SelfRenewingLease(AbfsClient client, Path path) throws AzureBlobFileSystemException {\n+\n+    this.leaseFreed = false;\n+    this.client = client;\n+    this.path = path;\n+\n+    // Try to get the lease a specified number of times, else throw an error\n+    int numRetries = 0;\n+    while (leaseID == null && numRetries < LEASE_MAX_RETRIES) {\n+      numRetries++;\n+      try {\n+        LOG.debug(\"lease path: {}\", path);\n+        final AbfsRestOperation op =\n+            client.acquireLease(getRelativePath(path),\n+                LEASE_TIMEOUT);\n+\n+        leaseID = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_LEASE_ID);\n+      } catch (IOException e) {\n+        if (numRetries < LEASE_MAX_RETRIES) {\n+          LOG.info(\"Caught exception when trying to acquire lease on blob {}, retrying: {}\", path,\n+              e.getMessage());\n+          LOG.debug(\"Exception acquiring lease\", e);\n+        } else {\n+          throw new LeaseException(e);\n+        }\n+      }\n+      if (leaseID == null) {\n+        try {\n+          Thread.sleep(LEASE_ACQUIRE_RETRY_INTERVAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb65e714888f104676915e8c54a0c2b00b3168e8"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTYyMDc3OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoxMTozOFrOH6ke6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoxMTozOFrOH6ke6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3NzE5NA==", "bodyText": "how about using DurationInfo in the try with resources (logging @ debug) to track how long acquire/release took. I can imagine it can take a while to acquire. Indeed, do we have to worry about timeouts, heartbeats, etc?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r531177194", "createdAt": "2020-11-26T18:11:38Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java", "diffHunk": "@@ -475,6 +475,55 @@ public FileStatus getFileStatus(final Path f) throws IOException {\n     }\n   }\n \n+  public String acquireLease(final Path f, final int duration) throws IOException {\n+    LOG.debug(\"AzureBlobFileSystem.acquireLease path: {}\", f);\n+\n+    Path qualifiedPath = makeQualified(f);\n+\n+    try {\n+      return abfsStore.acquireLease(qualifiedPath, duration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb65e714888f104676915e8c54a0c2b00b3168e8"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTYyNDA0OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoxMzoxMlrOH6kgvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoxMzoxMlrOH6kgvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3NzY2MQ==", "bodyText": "o.a.h.utils.IOUtils.close methods do this", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r531177661", "createdAt": "2020-11-26T18:13:12Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs;\n+\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.services.AbfsOutputStream;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_EXPIRED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_PARALLEL_ACCESS_DETECTED;\n+\n+/**\n+ * Test lease operations.\n+ */\n+public class ITestAzureBlobFileSystemLease extends AbstractAbfsIntegrationTest {\n+  private static final int TEST_EXECUTION_TIMEOUT = 30 * 1000;\n+  private static final int LONG_TEST_EXECUTION_TIMEOUT = 90 * 1000;\n+  private static final String TEST_FILE = \"testfile\";\n+\n+  public ITestAzureBlobFileSystemLease() throws Exception {\n+    super();\n+  }\n+\n+  @Test\n+  public void testNoSingleWriter() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.assertFalse(\"Output stream should not have lease\",\n+          ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testOneWriter() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testSubDir() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(new Path(path(methodName.getMethodName()), \"subdir\"),\n+        TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent().getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testTwoCreate() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.create(testFilePath)) {\n+        Assert.fail(\"Second create succeeded\");\n+      } catch (IOException e) {\n+        Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+            e.getMessage().contains(ERR_PARALLEL_ACCESS_DETECTED));\n+      }\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  private void twoWriters(AzureBlobFileSystem fs, Path testFilePath, boolean expectException) throws Exception {\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+        out2.writeInt(2);\n+        out2.hsync();\n+      } catch (IOException e) {\n+        if (expectException) {\n+          Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+              e.getMessage().contains(ERR_ACQUIRING_LEASE));\n+        } else {\n+          Assert.fail(\"Unexpected exception \" + e.getMessage());\n+        }\n+      }\n+      out.writeInt(1);\n+      out.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendNoSingleWriter() throws Exception {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, false);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendWithSingleWriterEnabled() throws Exception {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    twoWriters(fs, testFilePath, true);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedOnClose() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease after close\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testWriteAfterBreakLease() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    out.hsync();\n+\n+    fs.breakLease(testFilePath);\n+    try {\n+      out.write(1);\n+      out.hsync();\n+      Assert.fail(\"Expected exception on write after lease break\");\n+    } catch (IOException e) {\n+      Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+          e.getMessage().contains(ERR_LEASE_EXPIRED));\n+    }\n+    try {\n+      out.close();\n+      Assert.fail(\"Expected exception on close after lease break\");\n+    } catch (IOException e) {\n+      Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+          e.getMessage().contains(ERR_LEASE_EXPIRED));\n+    }\n+\n+    Assert.assertTrue(((AbfsOutputStream) out.getWrappedStream()).isLeaseFreed());\n+\n+    try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+      out2.write(2);\n+      out2.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = LONG_TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedAfterBreak() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out = null;\n+    try {\n+      out = fs.create(testFilePath);\n+      out.write(0);\n+\n+      fs.breakLease(testFilePath);\n+      while (!((AbfsOutputStream) out.getWrappedStream()).isLeaseFreed()) {\n+        try {\n+          Thread.sleep(1000);\n+        } catch (InterruptedException e) {\n+        }\n+      }\n+    } finally {\n+      try {\n+        if (out != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb65e714888f104676915e8c54a0c2b00b3168e8"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTYyNTgyOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoxNDowMlrOH6khwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoxNDowMlrOH6khwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3NzkyMQ==", "bodyText": "GenericTestUtils lets you assert something is in the error message. Its critical to rethrow (maybe wrapped) the exception if it is not the one you were expecting", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r531177921", "createdAt": "2020-11-26T18:14:02Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs;\n+\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.services.AbfsOutputStream;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_EXPIRED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_PARALLEL_ACCESS_DETECTED;\n+\n+/**\n+ * Test lease operations.\n+ */\n+public class ITestAzureBlobFileSystemLease extends AbstractAbfsIntegrationTest {\n+  private static final int TEST_EXECUTION_TIMEOUT = 30 * 1000;\n+  private static final int LONG_TEST_EXECUTION_TIMEOUT = 90 * 1000;\n+  private static final String TEST_FILE = \"testfile\";\n+\n+  public ITestAzureBlobFileSystemLease() throws Exception {\n+    super();\n+  }\n+\n+  @Test\n+  public void testNoSingleWriter() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.assertFalse(\"Output stream should not have lease\",\n+          ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testOneWriter() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testSubDir() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(new Path(path(methodName.getMethodName()), \"subdir\"),\n+        TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent().getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testTwoCreate() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.create(testFilePath)) {\n+        Assert.fail(\"Second create succeeded\");\n+      } catch (IOException e) {\n+        Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+            e.getMessage().contains(ERR_PARALLEL_ACCESS_DETECTED));\n+      }\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  private void twoWriters(AzureBlobFileSystem fs, Path testFilePath, boolean expectException) throws Exception {\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+        out2.writeInt(2);\n+        out2.hsync();\n+      } catch (IOException e) {\n+        if (expectException) {\n+          Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+              e.getMessage().contains(ERR_ACQUIRING_LEASE));\n+        } else {\n+          Assert.fail(\"Unexpected exception \" + e.getMessage());\n+        }\n+      }\n+      out.writeInt(1);\n+      out.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendNoSingleWriter() throws Exception {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, false);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendWithSingleWriterEnabled() throws Exception {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    twoWriters(fs, testFilePath, true);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedOnClose() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease after close\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testWriteAfterBreakLease() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    out.hsync();\n+\n+    fs.breakLease(testFilePath);\n+    try {\n+      out.write(1);\n+      out.hsync();\n+      Assert.fail(\"Expected exception on write after lease break\");\n+    } catch (IOException e) {\n+      Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+          e.getMessage().contains(ERR_LEASE_EXPIRED));\n+    }\n+    try {\n+      out.close();\n+      Assert.fail(\"Expected exception on close after lease break\");\n+    } catch (IOException e) {\n+      Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+          e.getMessage().contains(ERR_LEASE_EXPIRED));\n+    }\n+\n+    Assert.assertTrue(((AbfsOutputStream) out.getWrappedStream()).isLeaseFreed());\n+\n+    try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+      out2.write(2);\n+      out2.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = LONG_TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedAfterBreak() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out = null;\n+    try {\n+      out = fs.create(testFilePath);\n+      out.write(0);\n+\n+      fs.breakLease(testFilePath);\n+      while (!((AbfsOutputStream) out.getWrappedStream()).isLeaseFreed()) {\n+        try {\n+          Thread.sleep(1000);\n+        } catch (InterruptedException e) {\n+        }\n+      }\n+    } finally {\n+      try {\n+        if (out != null) {\n+          out.close();\n+        }\n+        // exception might or might not occur\n+      } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb65e714888f104676915e8c54a0c2b00b3168e8"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTYyODA3OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoxNDo1M1rOH6ki_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoxNDo1M1rOH6ki_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3ODIzNw==", "bodyText": "and add a message to raise if the condition is met.\nnote, it's ok to use AssertJ for your asserts, we are adopting it more broadly and enjoying its diagnostics.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r531178237", "createdAt": "2020-11-26T18:14:53Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs;\n+\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.services.AbfsOutputStream;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_EXPIRED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_PARALLEL_ACCESS_DETECTED;\n+\n+/**\n+ * Test lease operations.\n+ */\n+public class ITestAzureBlobFileSystemLease extends AbstractAbfsIntegrationTest {\n+  private static final int TEST_EXECUTION_TIMEOUT = 30 * 1000;\n+  private static final int LONG_TEST_EXECUTION_TIMEOUT = 90 * 1000;\n+  private static final String TEST_FILE = \"testfile\";\n+\n+  public ITestAzureBlobFileSystemLease() throws Exception {\n+    super();\n+  }\n+\n+  @Test\n+  public void testNoSingleWriter() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.assertFalse(\"Output stream should not have lease\",\n+          ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testOneWriter() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testSubDir() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(new Path(path(methodName.getMethodName()), \"subdir\"),\n+        TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent().getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testTwoCreate() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.create(testFilePath)) {\n+        Assert.fail(\"Second create succeeded\");\n+      } catch (IOException e) {\n+        Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+            e.getMessage().contains(ERR_PARALLEL_ACCESS_DETECTED));\n+      }\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  private void twoWriters(AzureBlobFileSystem fs, Path testFilePath, boolean expectException) throws Exception {\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+        out2.writeInt(2);\n+        out2.hsync();\n+      } catch (IOException e) {\n+        if (expectException) {\n+          Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+              e.getMessage().contains(ERR_ACQUIRING_LEASE));\n+        } else {\n+          Assert.fail(\"Unexpected exception \" + e.getMessage());\n+        }\n+      }\n+      out.writeInt(1);\n+      out.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendNoSingleWriter() throws Exception {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, false);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendWithSingleWriterEnabled() throws Exception {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    twoWriters(fs, testFilePath, true);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedOnClose() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease after close\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testWriteAfterBreakLease() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    out.hsync();\n+\n+    fs.breakLease(testFilePath);\n+    try {\n+      out.write(1);\n+      out.hsync();\n+      Assert.fail(\"Expected exception on write after lease break\");\n+    } catch (IOException e) {\n+      Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+          e.getMessage().contains(ERR_LEASE_EXPIRED));\n+    }\n+    try {\n+      out.close();\n+      Assert.fail(\"Expected exception on close after lease break\");\n+    } catch (IOException e) {\n+      Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+          e.getMessage().contains(ERR_LEASE_EXPIRED));\n+    }\n+\n+    Assert.assertTrue(((AbfsOutputStream) out.getWrappedStream()).isLeaseFreed());\n+\n+    try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+      out2.write(2);\n+      out2.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = LONG_TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedAfterBreak() throws IOException {\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    fs.mkdirs(testFilePath.getParent());\n+    fs.getAbfsStore().getAbfsConfiguration()\n+        .setAzureSingleWriterDirs(testFilePath.getParent().toString());\n+    fs.getAbfsStore().updateSingleWriterDirs();\n+\n+    FSDataOutputStream out = null;\n+    try {\n+      out = fs.create(testFilePath);\n+      out.write(0);\n+\n+      fs.breakLease(testFilePath);\n+      while (!((AbfsOutputStream) out.getWrappedStream()).isLeaseFreed()) {\n+        try {\n+          Thread.sleep(1000);\n+        } catch (InterruptedException e) {\n+        }\n+      }\n+    } finally {\n+      try {\n+        if (out != null) {\n+          out.close();\n+        }\n+        // exception might or might not occur\n+      } catch (IOException e) {\n+        Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+            e.getMessage().contains(ERR_LEASE_EXPIRED));\n+      }\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb65e714888f104676915e8c54a0c2b00b3168e8"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDgyODQ0OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowMDowN1rOIUbXfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowMDowN1rOIUbXfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5MDgxMw==", "bodyText": "can you pull up to the .thirdparty section and add a newline after. Our guava shading project is confusing IDEs and making backporting/cherrypicking harder", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558290813", "createdAt": "2021-01-15T13:00:07Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "diffHunk": "@@ -29,13 +29,23 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n+import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.hadoop.thirdparty.com.google.common.annotations.VisibleForTesting;\n import org.apache.hadoop.thirdparty.com.google.common.base.Strings;\n import org.apache.hadoop.security.ssl.DelegatingSSLSocketFactory;\n import org.apache.hadoop.fs.azurebfs.constants.AbfsHttpConstants;\n import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n import org.apache.hadoop.fs.azurebfs.constants.HttpQueryParams;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDgzNDg1OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowMTo1OVrOIUbbTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowMTo1OVrOIUbbTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5MTc4OQ==", "bodyText": "Prefer you use HadoopExecutors here.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558291789", "createdAt": "2021-01-15T13:01:59Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "diffHunk": "@@ -106,6 +118,9 @@ private AbfsClient(final URL baseUrl, final SharedKeyCredentials sharedKeyCreden\n     this.userAgent = initializeUserAgent(abfsConfiguration, sslProviderName);\n     this.abfsPerfTracker = abfsClientContext.getAbfsPerfTracker();\n     this.abfsCounters = abfsClientContext.getAbfsCounters();\n+\n+    this.executorService = MoreExecutors.listeningDecorator(\n+        Executors.newScheduledThreadPool(this.abfsConfiguration.getNumLeaseThreads()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDgzNTk1OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowMjoyMFrOIUbb9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowMjoyMFrOIUbb9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5MTk1OQ==", "bodyText": "HadoopExecutors.shutdown has some error handling here", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558291959", "createdAt": "2021-01-15T13:02:20Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "diffHunk": "@@ -129,6 +144,7 @@ public void close() throws IOException {\n     if (tokenProvider instanceof Closeable) {\n       IOUtils.cleanupWithLogger(LOG, (Closeable) tokenProvider);\n     }\n+    executorService.shutdownNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDgzODcyOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowMzoyM1rOIUbduw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNzozNToxNVrOIUlsBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5MjQxMQ==", "bodyText": "if the RestOperation doesn't log anything, add something here. Will help debug locking problems", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558292411", "createdAt": "2021-01-15T13:03:23Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "diffHunk": "@@ -306,6 +322,83 @@ public AbfsRestOperation createPath(final String path, final boolean isFile, fin\n     return op;\n   }\n \n+  public AbfsRestOperation acquireLease(final String path, int duration) throws AzureBlobFileSystemException {\n+    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();\n+\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ACTION, ACQUIRE_LEASE_ACTION));\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_DURATION, Integer.toString(duration)));\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_PROPOSED_LEASE_ID, UUID.randomUUID().toString()));\n+\n+    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();\n+\n+    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());\n+    final AbfsRestOperation op = new AbfsRestOperation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ1OTkwOQ==", "bodyText": "There is some good debug logging when the rest operation is executed, so I think we're okay here.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558459909", "createdAt": "2021-01-15T17:35:15Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "diffHunk": "@@ -306,6 +322,83 @@ public AbfsRestOperation createPath(final String path, final boolean isFile, fin\n     return op;\n   }\n \n+  public AbfsRestOperation acquireLease(final String path, int duration) throws AzureBlobFileSystemException {\n+    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();\n+\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ACTION, ACQUIRE_LEASE_ACTION));\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_DURATION, Integer.toString(duration)));\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_PROPOSED_LEASE_ID, UUID.randomUUID().toString()));\n+\n+    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();\n+\n+    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());\n+    final AbfsRestOperation op = new AbfsRestOperation(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5MjQxMQ=="}, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDg0MDE2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowMzo1MlrOIUbemA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowMzo1MlrOIUbemA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5MjYzMg==", "bodyText": "add a log if needed", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558292632", "createdAt": "2021-01-15T13:03:52Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "diffHunk": "@@ -306,6 +322,83 @@ public AbfsRestOperation createPath(final String path, final boolean isFile, fin\n     return op;\n   }\n \n+  public AbfsRestOperation acquireLease(final String path, int duration) throws AzureBlobFileSystemException {\n+    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();\n+\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ACTION, ACQUIRE_LEASE_ACTION));\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_DURATION, Integer.toString(duration)));\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_PROPOSED_LEASE_ID, UUID.randomUUID().toString()));\n+\n+    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();\n+\n+    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());\n+    final AbfsRestOperation op = new AbfsRestOperation(\n+        AbfsRestOperationType.LeasePath,\n+        this,\n+        HTTP_METHOD_POST,\n+        url,\n+        requestHeaders);\n+    op.execute();\n+    return op;\n+  }\n+\n+  public AbfsRestOperation renewLease(final String path, final String leaseId) throws AzureBlobFileSystemException {\n+    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();\n+\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ACTION, RENEW_LEASE_ACTION));\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ID, leaseId));\n+\n+    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();\n+\n+    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());\n+    final AbfsRestOperation op = new AbfsRestOperation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDg0MDQ1OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowMzo1OVrOIUbe2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowMzo1OVrOIUbe2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5MjY5Nw==", "bodyText": "+log", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558292697", "createdAt": "2021-01-15T13:03:59Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "diffHunk": "@@ -306,6 +322,83 @@ public AbfsRestOperation createPath(final String path, final boolean isFile, fin\n     return op;\n   }\n \n+  public AbfsRestOperation acquireLease(final String path, int duration) throws AzureBlobFileSystemException {\n+    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();\n+\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ACTION, ACQUIRE_LEASE_ACTION));\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_DURATION, Integer.toString(duration)));\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_PROPOSED_LEASE_ID, UUID.randomUUID().toString()));\n+\n+    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();\n+\n+    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());\n+    final AbfsRestOperation op = new AbfsRestOperation(\n+        AbfsRestOperationType.LeasePath,\n+        this,\n+        HTTP_METHOD_POST,\n+        url,\n+        requestHeaders);\n+    op.execute();\n+    return op;\n+  }\n+\n+  public AbfsRestOperation renewLease(final String path, final String leaseId) throws AzureBlobFileSystemException {\n+    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();\n+\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ACTION, RENEW_LEASE_ACTION));\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ID, leaseId));\n+\n+    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();\n+\n+    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());\n+    final AbfsRestOperation op = new AbfsRestOperation(\n+        AbfsRestOperationType.LeasePath,\n+        this,\n+        HTTP_METHOD_POST,\n+        url,\n+        requestHeaders);\n+    op.execute();\n+    return op;\n+  }\n+\n+  public AbfsRestOperation releaseLease(final String path, final String leaseId) throws AzureBlobFileSystemException {\n+    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();\n+\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ACTION, RELEASE_LEASE_ACTION));\n+    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ID, leaseId));\n+\n+    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();\n+\n+    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());\n+    final AbfsRestOperation op = new AbfsRestOperation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDg0NjU2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowNTo1MVrOIUbigw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowNTo1MVrOIUbigw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5MzYzNQ==", "bodyText": "this should go into the AbfsOutputStreamContext, its where we are adding more state for a stream constructor", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558293635", "createdAt": "2021-01-15T13:05:51Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java", "diffHunk": "@@ -113,7 +120,8 @@ public AbfsOutputStream(\n           final Statistics statistics,\n           final String path,\n           final long position,\n-          AbfsOutputStreamContext abfsOutputStreamContext) {\n+          final Map<SelfRenewingLease, Object> leaseRefs,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDg1MTU0OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowNzoxNlrOIUbldQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowNzoxNlrOIUbldQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5NDM4OQ==", "bodyText": "is isLeaseFreed()", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558294389", "createdAt": "2021-01-15T13:07:16Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java", "diffHunk": "@@ -209,6 +226,10 @@ public synchronized void write(final byte[] data, final int off, final int lengt\n       throw new IndexOutOfBoundsException();\n     }\n \n+    if (lease != null && lease.isFreed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDg1MjA0OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowNzoyOVrOIUblxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzowNzoyOVrOIUblxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5NDQ3MQ==", "bodyText": "use hasLease()", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558294471", "createdAt": "2021-01-15T13:07:29Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsOutputStream.java", "diffHunk": "@@ -312,6 +333,10 @@ public synchronized void close() throws IOException {\n       // See HADOOP-16785\n       throw wrapException(path, e.getMessage(), e);\n     } finally {\n+      if (lease != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDg3NzQxOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoxNDo0OFrOIUb08Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoxNDo0OFrOIUb08Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5ODM1Mw==", "bodyText": "import ordering. should be java.* javax.* \\n non-asf-and-hadoop.thirdparty \\n o.a.a", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558298353", "createdAt": "2021-01-15T13:14:48Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import org.apache.hadoop.fs.Path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDg4MDA1OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoxNTozOFrOIUb2sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoxNTozOFrOIUb2sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5ODgwMQ==", "bodyText": "keep t's stack trace by passing up to superclass or in initCause()", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558298801", "createdAt": "2021-01-15T13:15:38Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AbfsRestOperationException;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+import org.apache.hadoop.thirdparty.com.google.common.base.Preconditions;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.net.HttpURLConnection.HTTP_INTERNAL_ERROR;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely by scheduling lease\n+ * operations through the ABFS client. Use it to prevent writes to the blob by other processes\n+ * that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, the lease will time out since it\n+ * won't be renewed.\n+ */\n+public final class SelfRenewingLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(SelfRenewingLease.class);\n+\n+  static final int LEASE_DURATION = 60; // Lease duration in seconds\n+  static final int LEASE_RENEWAL_PERIOD = 40; // Lease renewal interval in seconds\n+\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 10; // Retry interval for acquiring lease in secs\n+  static final int LEASE_ACQUIRE_MAX_RETRIES = 7; // Number of retries for acquiring lease\n+\n+  private final AbfsClient client;\n+  private final String path;\n+\n+  // Lease status variables\n+  private volatile boolean leaseFreed;\n+  private volatile String leaseID = null;\n+  private volatile Throwable exception = null;\n+  private volatile ListenableScheduledFuture<AbfsRestOperation> future = null;\n+\n+  public static class LeaseException extends AzureBlobFileSystemException {\n+    public LeaseException(Throwable t) {\n+      super(ERR_ACQUIRING_LEASE + \": \" + t.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDg4NDAzOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoxNjo0OFrOIUb5HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoxNjo0OFrOIUb5HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI5OTQyMQ==", "bodyText": "move to lower group", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558299421", "createdAt": "2021-01-15T13:16:48Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java", "diffHunk": "@@ -39,6 +39,7 @@\n \n import org.apache.hadoop.thirdparty.com.google.common.annotations.VisibleForTesting;\n import org.apache.hadoop.thirdparty.com.google.common.base.Preconditions;\n+import org.apache.hadoop.util.DurationInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDg4ODM2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoxNzo1OVrOIUb7vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xN1QyMDoxODoxMFrOIVU3HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwMDA5NA==", "bodyText": "do we need to worry about running out of workers here, timeouts etc?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558300094", "createdAt": "2021-01-15T13:17:59Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java", "diffHunk": "@@ -243,7 +255,24 @@ public String getPrimaryGroup() {\n \n   @Override\n   public void close() throws IOException {\n-    IOUtils.cleanupWithLogger(LOG, client);\n+    List<ListenableFuture<?>> futures = new ArrayList<>();\n+    for (SelfRenewingLease lease : leaseRefs.keySet()) {\n+      if (lease == null) {\n+        continue;\n+      }\n+      ListenableFuture<?> future = client.submit(() -> lease.free());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIzMjc5Nw==", "bodyText": "I am not sure. This is kind of a failsafe; I would not expect code to close the filesystem without closing output streams first, so ideally this loop will only be double checking that free() has already been called on these lease instances without actually performing REST ops. If the output streams opened for this FS instance (for designated single writer directories) have not been closed before the filesystem is closed, this would perform a REST op for each one.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r559232797", "createdAt": "2021-01-17T20:18:10Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java", "diffHunk": "@@ -243,7 +255,24 @@ public String getPrimaryGroup() {\n \n   @Override\n   public void close() throws IOException {\n-    IOUtils.cleanupWithLogger(LOG, client);\n+    List<ListenableFuture<?>> futures = new ArrayList<>();\n+    for (SelfRenewingLease lease : leaseRefs.keySet()) {\n+      if (lease == null) {\n+        continue;\n+      }\n+      ListenableFuture<?> future = client.submit(() -> lease.free());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwMDA5NA=="}, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDg5NDEzOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoxOTo0M1rOIUb_Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoxOTo0M1rOIUb_Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwMTAxNA==", "bodyText": "usual comment about import ordering.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558301014", "createdAt": "2021-01-15T13:19:43Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs;\n+\n+import org.apache.hadoop.conf.Configuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDkwNjU2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoyMzoxNFrOIUcGwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoyMzoxNFrOIUcGwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwMjkxNA==", "bodyText": "use LambdaTestUtils; return a string with that error message in the closure for it to be used in the exception. Ideally add out.toString() too. eg.\nintercept(ioe, ERR_LEASE_EXPIRED, () -> {\n  out..write(1);\n  out.hsync();\n  return \"expected exception but got \" + out;\n  });", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558302914", "createdAt": "2021-01-15T13:23:14Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.services.AbfsOutputStream;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_SINGLE_WRITER_KEY;\n+import static org.apache.hadoop.fs.azurebfs.constants.TestConfigurationKeys.FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_EXPIRED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_NOT_PRESENT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_ID_SPECIFIED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_PARALLEL_ACCESS_DETECTED;\n+\n+/**\n+ * Test lease operations.\n+ */\n+public class ITestAzureBlobFileSystemLease extends AbstractAbfsIntegrationTest {\n+  private static final int TEST_EXECUTION_TIMEOUT = 30 * 1000;\n+  private static final int LONG_TEST_EXECUTION_TIMEOUT = 90 * 1000;\n+  private static final String TEST_FILE = \"testfile\";\n+  private final boolean isHNSEnabled;\n+\n+  public ITestAzureBlobFileSystemLease() throws Exception {\n+    super();\n+\n+    this.isHNSEnabled = getConfiguration()\n+        .getBoolean(FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT, false);\n+  }\n+\n+  private AzureBlobFileSystem getCustomFileSystem(String singleWriterDirs, int numLeaseThreads)\n+      throws Exception {\n+    Configuration conf = getRawConfiguration();\n+    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", getAbfsScheme()), true);\n+    conf.set(FS_AZURE_SINGLE_WRITER_KEY, singleWriterDirs);\n+    conf.setInt(FS_AZURE_LEASE_THREADS, numLeaseThreads);\n+    return getFileSystem(conf);\n+  }\n+\n+  @Test\n+  public void testNoSingleWriter() throws IOException {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.assertFalse(\"Output stream should not have lease\",\n+          ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testNoLeaseThreads() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 0);\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.fail(\"No failure when lease requested with 0 lease threads\");\n+    } catch (Exception e) {\n+      GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_THREADS, e);\n+    }\n+  }\n+\n+  @Test\n+  public void testOneWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testSubDir() throws Exception {\n+    final Path testFilePath = new Path(new Path(path(methodName.getMethodName()), \"subdir\"),\n+        TEST_FILE);\n+    final AzureBlobFileSystem fs =\n+        getCustomFileSystem(testFilePath.getParent().getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent().getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testTwoCreate() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.create(testFilePath)) {\n+        Assert.fail(\"Second create succeeded\");\n+      } catch (IOException e) {\n+        if (isHNSEnabled) {\n+          GenericTestUtils.assertExceptionContains(ERR_PARALLEL_ACCESS_DETECTED, e);\n+        } else {\n+          GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_ID_SPECIFIED, e);\n+        }\n+      }\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  private void twoWriters(AzureBlobFileSystem fs, Path testFilePath, boolean expectException) throws Exception {\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+        out2.writeInt(2);\n+        out2.hsync();\n+      } catch (IOException e) {\n+        if (expectException) {\n+          Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+              e.getMessage().contains(ERR_ACQUIRING_LEASE));\n+        } else {\n+          Assert.fail(\"Unexpected exception \" + e.getMessage());\n+        }\n+      }\n+      out.writeInt(1);\n+      out.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendNoSingleWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, false);\n+  }\n+\n+  @Test(timeout = LONG_TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendWithSingleWriterEnabled() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, true);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedOnClose() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease after close\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testWriteAfterBreakLease() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    out.hsync();\n+\n+    fs.breakLease(testFilePath);\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDkwNzkwOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoyMzozOVrOIUcHlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxODo1Mzo1N1rOIhxv_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwMzEyNw==", "bodyText": "do we really want a failure in close?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558303127", "createdAt": "2021-01-15T13:23:39Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.services.AbfsOutputStream;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_SINGLE_WRITER_KEY;\n+import static org.apache.hadoop.fs.azurebfs.constants.TestConfigurationKeys.FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_EXPIRED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_NOT_PRESENT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_ID_SPECIFIED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_PARALLEL_ACCESS_DETECTED;\n+\n+/**\n+ * Test lease operations.\n+ */\n+public class ITestAzureBlobFileSystemLease extends AbstractAbfsIntegrationTest {\n+  private static final int TEST_EXECUTION_TIMEOUT = 30 * 1000;\n+  private static final int LONG_TEST_EXECUTION_TIMEOUT = 90 * 1000;\n+  private static final String TEST_FILE = \"testfile\";\n+  private final boolean isHNSEnabled;\n+\n+  public ITestAzureBlobFileSystemLease() throws Exception {\n+    super();\n+\n+    this.isHNSEnabled = getConfiguration()\n+        .getBoolean(FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT, false);\n+  }\n+\n+  private AzureBlobFileSystem getCustomFileSystem(String singleWriterDirs, int numLeaseThreads)\n+      throws Exception {\n+    Configuration conf = getRawConfiguration();\n+    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", getAbfsScheme()), true);\n+    conf.set(FS_AZURE_SINGLE_WRITER_KEY, singleWriterDirs);\n+    conf.setInt(FS_AZURE_LEASE_THREADS, numLeaseThreads);\n+    return getFileSystem(conf);\n+  }\n+\n+  @Test\n+  public void testNoSingleWriter() throws IOException {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.assertFalse(\"Output stream should not have lease\",\n+          ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testNoLeaseThreads() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 0);\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.fail(\"No failure when lease requested with 0 lease threads\");\n+    } catch (Exception e) {\n+      GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_THREADS, e);\n+    }\n+  }\n+\n+  @Test\n+  public void testOneWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testSubDir() throws Exception {\n+    final Path testFilePath = new Path(new Path(path(methodName.getMethodName()), \"subdir\"),\n+        TEST_FILE);\n+    final AzureBlobFileSystem fs =\n+        getCustomFileSystem(testFilePath.getParent().getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent().getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testTwoCreate() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.create(testFilePath)) {\n+        Assert.fail(\"Second create succeeded\");\n+      } catch (IOException e) {\n+        if (isHNSEnabled) {\n+          GenericTestUtils.assertExceptionContains(ERR_PARALLEL_ACCESS_DETECTED, e);\n+        } else {\n+          GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_ID_SPECIFIED, e);\n+        }\n+      }\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  private void twoWriters(AzureBlobFileSystem fs, Path testFilePath, boolean expectException) throws Exception {\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+        out2.writeInt(2);\n+        out2.hsync();\n+      } catch (IOException e) {\n+        if (expectException) {\n+          Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+              e.getMessage().contains(ERR_ACQUIRING_LEASE));\n+        } else {\n+          Assert.fail(\"Unexpected exception \" + e.getMessage());\n+        }\n+      }\n+      out.writeInt(1);\n+      out.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendNoSingleWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, false);\n+  }\n+\n+  @Test(timeout = LONG_TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendWithSingleWriterEnabled() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, true);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedOnClose() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease after close\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testWriteAfterBreakLease() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    out.hsync();\n+\n+    fs.breakLease(testFilePath);\n+    try {\n+      out.write(1);\n+      out.hsync();\n+      Assert.fail(\"Expected exception on write after lease break\");\n+    } catch (IOException e) {\n+      GenericTestUtils.assertExceptionContains(ERR_LEASE_EXPIRED, e);\n+    }\n+    try {\n+      out.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ4MTMxMg==", "bodyText": "I think as you mentioned this is due to flushing buffers on close, so I am not sure we can do much about it. I can check what happens when close is called after the lease has expired or is broken and the buffer is empty, to see if we can avoid an exception in that case.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558481312", "createdAt": "2021-01-15T18:07:12Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.services.AbfsOutputStream;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_SINGLE_WRITER_KEY;\n+import static org.apache.hadoop.fs.azurebfs.constants.TestConfigurationKeys.FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_EXPIRED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_NOT_PRESENT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_ID_SPECIFIED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_PARALLEL_ACCESS_DETECTED;\n+\n+/**\n+ * Test lease operations.\n+ */\n+public class ITestAzureBlobFileSystemLease extends AbstractAbfsIntegrationTest {\n+  private static final int TEST_EXECUTION_TIMEOUT = 30 * 1000;\n+  private static final int LONG_TEST_EXECUTION_TIMEOUT = 90 * 1000;\n+  private static final String TEST_FILE = \"testfile\";\n+  private final boolean isHNSEnabled;\n+\n+  public ITestAzureBlobFileSystemLease() throws Exception {\n+    super();\n+\n+    this.isHNSEnabled = getConfiguration()\n+        .getBoolean(FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT, false);\n+  }\n+\n+  private AzureBlobFileSystem getCustomFileSystem(String singleWriterDirs, int numLeaseThreads)\n+      throws Exception {\n+    Configuration conf = getRawConfiguration();\n+    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", getAbfsScheme()), true);\n+    conf.set(FS_AZURE_SINGLE_WRITER_KEY, singleWriterDirs);\n+    conf.setInt(FS_AZURE_LEASE_THREADS, numLeaseThreads);\n+    return getFileSystem(conf);\n+  }\n+\n+  @Test\n+  public void testNoSingleWriter() throws IOException {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.assertFalse(\"Output stream should not have lease\",\n+          ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testNoLeaseThreads() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 0);\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.fail(\"No failure when lease requested with 0 lease threads\");\n+    } catch (Exception e) {\n+      GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_THREADS, e);\n+    }\n+  }\n+\n+  @Test\n+  public void testOneWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testSubDir() throws Exception {\n+    final Path testFilePath = new Path(new Path(path(methodName.getMethodName()), \"subdir\"),\n+        TEST_FILE);\n+    final AzureBlobFileSystem fs =\n+        getCustomFileSystem(testFilePath.getParent().getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent().getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testTwoCreate() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.create(testFilePath)) {\n+        Assert.fail(\"Second create succeeded\");\n+      } catch (IOException e) {\n+        if (isHNSEnabled) {\n+          GenericTestUtils.assertExceptionContains(ERR_PARALLEL_ACCESS_DETECTED, e);\n+        } else {\n+          GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_ID_SPECIFIED, e);\n+        }\n+      }\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  private void twoWriters(AzureBlobFileSystem fs, Path testFilePath, boolean expectException) throws Exception {\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+        out2.writeInt(2);\n+        out2.hsync();\n+      } catch (IOException e) {\n+        if (expectException) {\n+          Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+              e.getMessage().contains(ERR_ACQUIRING_LEASE));\n+        } else {\n+          Assert.fail(\"Unexpected exception \" + e.getMessage());\n+        }\n+      }\n+      out.writeInt(1);\n+      out.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendNoSingleWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, false);\n+  }\n+\n+  @Test(timeout = LONG_TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendWithSingleWriterEnabled() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, true);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedOnClose() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease after close\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testWriteAfterBreakLease() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    out.hsync();\n+\n+    fs.breakLease(testFilePath);\n+    try {\n+      out.write(1);\n+      out.hsync();\n+      Assert.fail(\"Expected exception on write after lease break\");\n+    } catch (IOException e) {\n+      GenericTestUtils.assertExceptionContains(ERR_LEASE_EXPIRED, e);\n+    }\n+    try {\n+      out.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwMzEyNw=="}, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3ODg5Nw==", "bodyText": "Looks like there is a flush call to the storage API even when the buffer is empty, so it will always throw an exception if the lease is broken.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r558578897", "createdAt": "2021-01-15T20:35:18Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.services.AbfsOutputStream;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_SINGLE_WRITER_KEY;\n+import static org.apache.hadoop.fs.azurebfs.constants.TestConfigurationKeys.FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_EXPIRED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_NOT_PRESENT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_ID_SPECIFIED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_PARALLEL_ACCESS_DETECTED;\n+\n+/**\n+ * Test lease operations.\n+ */\n+public class ITestAzureBlobFileSystemLease extends AbstractAbfsIntegrationTest {\n+  private static final int TEST_EXECUTION_TIMEOUT = 30 * 1000;\n+  private static final int LONG_TEST_EXECUTION_TIMEOUT = 90 * 1000;\n+  private static final String TEST_FILE = \"testfile\";\n+  private final boolean isHNSEnabled;\n+\n+  public ITestAzureBlobFileSystemLease() throws Exception {\n+    super();\n+\n+    this.isHNSEnabled = getConfiguration()\n+        .getBoolean(FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT, false);\n+  }\n+\n+  private AzureBlobFileSystem getCustomFileSystem(String singleWriterDirs, int numLeaseThreads)\n+      throws Exception {\n+    Configuration conf = getRawConfiguration();\n+    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", getAbfsScheme()), true);\n+    conf.set(FS_AZURE_SINGLE_WRITER_KEY, singleWriterDirs);\n+    conf.setInt(FS_AZURE_LEASE_THREADS, numLeaseThreads);\n+    return getFileSystem(conf);\n+  }\n+\n+  @Test\n+  public void testNoSingleWriter() throws IOException {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.assertFalse(\"Output stream should not have lease\",\n+          ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testNoLeaseThreads() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 0);\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.fail(\"No failure when lease requested with 0 lease threads\");\n+    } catch (Exception e) {\n+      GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_THREADS, e);\n+    }\n+  }\n+\n+  @Test\n+  public void testOneWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testSubDir() throws Exception {\n+    final Path testFilePath = new Path(new Path(path(methodName.getMethodName()), \"subdir\"),\n+        TEST_FILE);\n+    final AzureBlobFileSystem fs =\n+        getCustomFileSystem(testFilePath.getParent().getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent().getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testTwoCreate() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.create(testFilePath)) {\n+        Assert.fail(\"Second create succeeded\");\n+      } catch (IOException e) {\n+        if (isHNSEnabled) {\n+          GenericTestUtils.assertExceptionContains(ERR_PARALLEL_ACCESS_DETECTED, e);\n+        } else {\n+          GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_ID_SPECIFIED, e);\n+        }\n+      }\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  private void twoWriters(AzureBlobFileSystem fs, Path testFilePath, boolean expectException) throws Exception {\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+        out2.writeInt(2);\n+        out2.hsync();\n+      } catch (IOException e) {\n+        if (expectException) {\n+          Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+              e.getMessage().contains(ERR_ACQUIRING_LEASE));\n+        } else {\n+          Assert.fail(\"Unexpected exception \" + e.getMessage());\n+        }\n+      }\n+      out.writeInt(1);\n+      out.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendNoSingleWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, false);\n+  }\n+\n+  @Test(timeout = LONG_TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendWithSingleWriterEnabled() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, true);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedOnClose() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease after close\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testWriteAfterBreakLease() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    out.hsync();\n+\n+    fs.breakLease(testFilePath);\n+    try {\n+      out.write(1);\n+      out.hsync();\n+      Assert.fail(\"Expected exception on write after lease break\");\n+    } catch (IOException e) {\n+      GenericTestUtils.assertExceptionContains(ERR_LEASE_EXPIRED, e);\n+    }\n+    try {\n+      out.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwMzEyNw=="}, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzNzU1Nw==", "bodyText": "should it be doing that flush?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r560137557", "createdAt": "2021-01-19T12:21:23Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.services.AbfsOutputStream;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_SINGLE_WRITER_KEY;\n+import static org.apache.hadoop.fs.azurebfs.constants.TestConfigurationKeys.FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_EXPIRED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_NOT_PRESENT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_ID_SPECIFIED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_PARALLEL_ACCESS_DETECTED;\n+\n+/**\n+ * Test lease operations.\n+ */\n+public class ITestAzureBlobFileSystemLease extends AbstractAbfsIntegrationTest {\n+  private static final int TEST_EXECUTION_TIMEOUT = 30 * 1000;\n+  private static final int LONG_TEST_EXECUTION_TIMEOUT = 90 * 1000;\n+  private static final String TEST_FILE = \"testfile\";\n+  private final boolean isHNSEnabled;\n+\n+  public ITestAzureBlobFileSystemLease() throws Exception {\n+    super();\n+\n+    this.isHNSEnabled = getConfiguration()\n+        .getBoolean(FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT, false);\n+  }\n+\n+  private AzureBlobFileSystem getCustomFileSystem(String singleWriterDirs, int numLeaseThreads)\n+      throws Exception {\n+    Configuration conf = getRawConfiguration();\n+    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", getAbfsScheme()), true);\n+    conf.set(FS_AZURE_SINGLE_WRITER_KEY, singleWriterDirs);\n+    conf.setInt(FS_AZURE_LEASE_THREADS, numLeaseThreads);\n+    return getFileSystem(conf);\n+  }\n+\n+  @Test\n+  public void testNoSingleWriter() throws IOException {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.assertFalse(\"Output stream should not have lease\",\n+          ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testNoLeaseThreads() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 0);\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.fail(\"No failure when lease requested with 0 lease threads\");\n+    } catch (Exception e) {\n+      GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_THREADS, e);\n+    }\n+  }\n+\n+  @Test\n+  public void testOneWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testSubDir() throws Exception {\n+    final Path testFilePath = new Path(new Path(path(methodName.getMethodName()), \"subdir\"),\n+        TEST_FILE);\n+    final AzureBlobFileSystem fs =\n+        getCustomFileSystem(testFilePath.getParent().getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent().getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testTwoCreate() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.create(testFilePath)) {\n+        Assert.fail(\"Second create succeeded\");\n+      } catch (IOException e) {\n+        if (isHNSEnabled) {\n+          GenericTestUtils.assertExceptionContains(ERR_PARALLEL_ACCESS_DETECTED, e);\n+        } else {\n+          GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_ID_SPECIFIED, e);\n+        }\n+      }\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  private void twoWriters(AzureBlobFileSystem fs, Path testFilePath, boolean expectException) throws Exception {\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+        out2.writeInt(2);\n+        out2.hsync();\n+      } catch (IOException e) {\n+        if (expectException) {\n+          Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+              e.getMessage().contains(ERR_ACQUIRING_LEASE));\n+        } else {\n+          Assert.fail(\"Unexpected exception \" + e.getMessage());\n+        }\n+      }\n+      out.writeInt(1);\n+      out.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendNoSingleWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, false);\n+  }\n+\n+  @Test(timeout = LONG_TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendWithSingleWriterEnabled() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, true);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedOnClose() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease after close\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testWriteAfterBreakLease() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    out.hsync();\n+\n+    fs.breakLease(testFilePath);\n+    try {\n+      out.write(1);\n+      out.hsync();\n+      Assert.fail(\"Expected exception on write after lease break\");\n+    } catch (IOException e) {\n+      GenericTestUtils.assertExceptionContains(ERR_LEASE_EXPIRED, e);\n+    }\n+    try {\n+      out.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwMzEyNw=="}, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQzOTEzNQ==", "bodyText": "I looked over the API docs and it seems like it is potentially important to perform that operation.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r566439135", "createdAt": "2021-01-28T22:06:02Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.services.AbfsOutputStream;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_SINGLE_WRITER_KEY;\n+import static org.apache.hadoop.fs.azurebfs.constants.TestConfigurationKeys.FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_EXPIRED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_NOT_PRESENT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_ID_SPECIFIED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_PARALLEL_ACCESS_DETECTED;\n+\n+/**\n+ * Test lease operations.\n+ */\n+public class ITestAzureBlobFileSystemLease extends AbstractAbfsIntegrationTest {\n+  private static final int TEST_EXECUTION_TIMEOUT = 30 * 1000;\n+  private static final int LONG_TEST_EXECUTION_TIMEOUT = 90 * 1000;\n+  private static final String TEST_FILE = \"testfile\";\n+  private final boolean isHNSEnabled;\n+\n+  public ITestAzureBlobFileSystemLease() throws Exception {\n+    super();\n+\n+    this.isHNSEnabled = getConfiguration()\n+        .getBoolean(FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT, false);\n+  }\n+\n+  private AzureBlobFileSystem getCustomFileSystem(String singleWriterDirs, int numLeaseThreads)\n+      throws Exception {\n+    Configuration conf = getRawConfiguration();\n+    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", getAbfsScheme()), true);\n+    conf.set(FS_AZURE_SINGLE_WRITER_KEY, singleWriterDirs);\n+    conf.setInt(FS_AZURE_LEASE_THREADS, numLeaseThreads);\n+    return getFileSystem(conf);\n+  }\n+\n+  @Test\n+  public void testNoSingleWriter() throws IOException {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.assertFalse(\"Output stream should not have lease\",\n+          ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testNoLeaseThreads() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 0);\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.fail(\"No failure when lease requested with 0 lease threads\");\n+    } catch (Exception e) {\n+      GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_THREADS, e);\n+    }\n+  }\n+\n+  @Test\n+  public void testOneWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testSubDir() throws Exception {\n+    final Path testFilePath = new Path(new Path(path(methodName.getMethodName()), \"subdir\"),\n+        TEST_FILE);\n+    final AzureBlobFileSystem fs =\n+        getCustomFileSystem(testFilePath.getParent().getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent().getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testTwoCreate() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.create(testFilePath)) {\n+        Assert.fail(\"Second create succeeded\");\n+      } catch (IOException e) {\n+        if (isHNSEnabled) {\n+          GenericTestUtils.assertExceptionContains(ERR_PARALLEL_ACCESS_DETECTED, e);\n+        } else {\n+          GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_ID_SPECIFIED, e);\n+        }\n+      }\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  private void twoWriters(AzureBlobFileSystem fs, Path testFilePath, boolean expectException) throws Exception {\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+        out2.writeInt(2);\n+        out2.hsync();\n+      } catch (IOException e) {\n+        if (expectException) {\n+          Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+              e.getMessage().contains(ERR_ACQUIRING_LEASE));\n+        } else {\n+          Assert.fail(\"Unexpected exception \" + e.getMessage());\n+        }\n+      }\n+      out.writeInt(1);\n+      out.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendNoSingleWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, false);\n+  }\n+\n+  @Test(timeout = LONG_TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendWithSingleWriterEnabled() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, true);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedOnClose() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease after close\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testWriteAfterBreakLease() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    out.hsync();\n+\n+    fs.breakLease(testFilePath);\n+    try {\n+      out.write(1);\n+      out.hsync();\n+      Assert.fail(\"Expected exception on write after lease break\");\n+    } catch (IOException e) {\n+      GenericTestUtils.assertExceptionContains(ERR_LEASE_EXPIRED, e);\n+    }\n+    try {\n+      out.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwMzEyNw=="}, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjI4OTAyMA==", "bodyText": "ok, let's go with the flush", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r572289020", "createdAt": "2021-02-08T18:53:57Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs.azurebfs;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.azurebfs.services.AbfsOutputStream;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.constants.ConfigurationKeys.FS_AZURE_SINGLE_WRITER_KEY;\n+import static org.apache.hadoop.fs.azurebfs.constants.TestConfigurationKeys.FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_EXPIRED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_NOT_PRESENT;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_ID_SPECIFIED;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_PARALLEL_ACCESS_DETECTED;\n+\n+/**\n+ * Test lease operations.\n+ */\n+public class ITestAzureBlobFileSystemLease extends AbstractAbfsIntegrationTest {\n+  private static final int TEST_EXECUTION_TIMEOUT = 30 * 1000;\n+  private static final int LONG_TEST_EXECUTION_TIMEOUT = 90 * 1000;\n+  private static final String TEST_FILE = \"testfile\";\n+  private final boolean isHNSEnabled;\n+\n+  public ITestAzureBlobFileSystemLease() throws Exception {\n+    super();\n+\n+    this.isHNSEnabled = getConfiguration()\n+        .getBoolean(FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT, false);\n+  }\n+\n+  private AzureBlobFileSystem getCustomFileSystem(String singleWriterDirs, int numLeaseThreads)\n+      throws Exception {\n+    Configuration conf = getRawConfiguration();\n+    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", getAbfsScheme()), true);\n+    conf.set(FS_AZURE_SINGLE_WRITER_KEY, singleWriterDirs);\n+    conf.setInt(FS_AZURE_LEASE_THREADS, numLeaseThreads);\n+    return getFileSystem(conf);\n+  }\n+\n+  @Test\n+  public void testNoSingleWriter() throws IOException {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.assertFalse(\"Output stream should not have lease\",\n+          ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testNoLeaseThreads() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 0);\n+    fs.mkdirs(testFilePath.getParent());\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      Assert.fail(\"No failure when lease requested with 0 lease threads\");\n+    } catch (Exception e) {\n+      GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_THREADS, e);\n+    }\n+  }\n+\n+  @Test\n+  public void testOneWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testSubDir() throws Exception {\n+    final Path testFilePath = new Path(new Path(path(methodName.getMethodName()), \"subdir\"),\n+        TEST_FILE);\n+    final AzureBlobFileSystem fs =\n+        getCustomFileSystem(testFilePath.getParent().getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent().getParent());\n+\n+    FSDataOutputStream out = fs.create(testFilePath);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test\n+  public void testTwoCreate() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.create(testFilePath)) {\n+        Assert.fail(\"Second create succeeded\");\n+      } catch (IOException e) {\n+        if (isHNSEnabled) {\n+          GenericTestUtils.assertExceptionContains(ERR_PARALLEL_ACCESS_DETECTED, e);\n+        } else {\n+          GenericTestUtils.assertExceptionContains(ERR_NO_LEASE_ID_SPECIFIED, e);\n+        }\n+      }\n+    }\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  private void twoWriters(AzureBlobFileSystem fs, Path testFilePath, boolean expectException) throws Exception {\n+    try (FSDataOutputStream out = fs.create(testFilePath)) {\n+      try (FSDataOutputStream out2 = fs.append(testFilePath)) {\n+        out2.writeInt(2);\n+        out2.hsync();\n+      } catch (IOException e) {\n+        if (expectException) {\n+          Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n+              e.getMessage().contains(ERR_ACQUIRING_LEASE));\n+        } else {\n+          Assert.fail(\"Unexpected exception \" + e.getMessage());\n+        }\n+      }\n+      out.writeInt(1);\n+      out.hsync();\n+    }\n+\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendNoSingleWriter() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getFileSystem();\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, false);\n+  }\n+\n+  @Test(timeout = LONG_TEST_EXECUTION_TIMEOUT)\n+  public void testTwoWritersCreateAppendWithSingleWriterEnabled() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    twoWriters(fs, testFilePath, true);\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testLeaseFreedOnClose() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    Assert.assertTrue(\"Output stream should have lease\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    out.close();\n+    Assert.assertFalse(\"Output stream should not have lease after close\",\n+        ((AbfsOutputStream) out.getWrappedStream()).hasLease());\n+    Assert.assertTrue(fs.getAbfsStore().areLeasesFreed());\n+  }\n+\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testWriteAfterBreakLease() throws Exception {\n+    final Path testFilePath = new Path(path(methodName.getMethodName()), TEST_FILE);\n+    final AzureBlobFileSystem fs = getCustomFileSystem(testFilePath.getParent().toString(), 1);\n+    fs.mkdirs(testFilePath.getParent());\n+\n+    FSDataOutputStream out;\n+    out = fs.create(testFilePath);\n+    out.write(0);\n+    out.hsync();\n+\n+    fs.breakLease(testFilePath);\n+    try {\n+      out.write(1);\n+      out.hsync();\n+      Assert.fail(\"Expected exception on write after lease break\");\n+    } catch (IOException e) {\n+      GenericTestUtils.assertExceptionContains(ERR_LEASE_EXPIRED, e);\n+    }\n+    try {\n+      out.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwMzEyNw=="}, "originalCommit": {"oid": "c4082f019e25b010c1c36f0688cf0cb676b727d7"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNzA5OTM5OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMjoxNzo0M1rOIWL9QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMjoxNzo0M1rOIWL9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzNTQ4OQ==", "bodyText": "can you make sure this executor marks its threads as daemons. Otherwise processes can hang during shutdown. @bgaborg has encountered this elsewhere", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r560135489", "createdAt": "2021-01-19T12:17:43Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java", "diffHunk": "@@ -120,7 +120,7 @@ private AbfsClient(final URL baseUrl, final SharedKeyCredentials sharedKeyCreden\n     this.abfsCounters = abfsClientContext.getAbfsCounters();\n \n     this.executorService = MoreExecutors.listeningDecorator(\n-        Executors.newScheduledThreadPool(this.abfsConfiguration.getNumLeaseThreads()));\n+        HadoopExecutors.newScheduledThreadPool(this.abfsConfiguration.getNumLeaseThreads()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "978cedb7b63d6a1b09db291511cc87ae53c7cab0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNzEwNjI4OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMjoxOTozMVrOIWMBQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMjoxOTozMVrOIWMBQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzNjUxNA==", "bodyText": "I think I'd keep that t text in the superclass text, in case a deep tree causes the nested cause not to be listed.\nbut: use toString() (implicitly) rather than getMessage, because some exceptions (NPW) have a null message.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r560136514", "createdAt": "2021-01-19T12:19:31Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -71,7 +72,7 @@\n \n   public static class LeaseException extends AzureBlobFileSystemException {\n     public LeaseException(Throwable t) {\n-      super(ERR_ACQUIRING_LEASE + \": \" + t.getMessage());\n+      super(ERR_ACQUIRING_LEASE, t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "978cedb7b63d6a1b09db291511cc87ae53c7cab0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNzExMDU0OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMjoyMDozNlrOIWMD1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMjoyMDozNlrOIWMD1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzNzE3Mg==", "bodyText": "just rethrow it or wrap in an assertion error. we need that full stack trace", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r560137172", "createdAt": "2021-01-19T12:20:36Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemLease.java", "diffHunk": "@@ -146,8 +150,7 @@ private void twoWriters(AzureBlobFileSystem fs, Path testFilePath, boolean expec\n         out2.hsync();\n       } catch (IOException e) {\n         if (expectException) {\n-          Assert.assertTrue(\"Unexpected error message: \" + e.getMessage(),\n-              e.getMessage().contains(ERR_ACQUIRING_LEASE));\n+          GenericTestUtils.assertExceptionContains(ERR_ACQUIRING_LEASE, e);\n         } else {\n           Assert.fail(\"Unexpected exception \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "978cedb7b63d6a1b09db291511cc87ae53c7cab0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNzEyMjkwOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMjoyNDoyMlrOIWMLVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMjoyNDoyMlrOIWMLVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzOTA5Mg==", "bodyText": "little architecture question. Would this be better in the Store than the FS? I don't know, and it is higher level than the Rest API, isn't it? Which implies this is the right place.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r560139092", "createdAt": "2021-01-19T12:24:22Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java", "diffHunk": "@@ -476,6 +476,20 @@ public FileStatus getFileStatus(final Path f) throws IOException {\n     }\n   }\n \n+  /**\n+   * Acquire a lease on an ABFS file for a specified duration. This requires the file to exist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "978cedb7b63d6a1b09db291511cc87ae53c7cab0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwNzE0OTE0OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/site/markdown/abfs.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxODo1ODowN1rOIhx6TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxOTowOTozMlrOIvhpBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjI5MTY2MA==", "bodyText": "good writeup\n\nis there any validation here, that if a path in the local FS is to be leased then the executor count must be >1?\nwhat if I'm working with >1 FS? Will this configuration be per-fs? Or does it take a list of paths which can be full URIs to paths in a store? That's what we ended up doing with s3a authoritative paths0", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r572291660", "createdAt": "2021-02-08T18:58:07Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/abfs.md", "diffHunk": "@@ -877,6 +877,21 @@ enabled for your Azure Storage account.\"\n The directories can be specified as comma separated values. By default the value\n is \"/hbase\"\n \n+### <a name=\"singlewriteroptions\"></a> Single Writer Options\n+`fs.azure.singlewriter.directories`: Directories for single writer support\n+can be specified comma separated in this config. By default, multiple\n+clients will be able to write to the same file simultaneously. When writing\n+to files contained within the directories specified in this config, the\n+client will obtain a lease on the file that will prevent any other clients\n+from writing to the file. The lease will be renewed by the client until the\n+output stream is closed, after which it will be released. To revoke a client's\n+write access for a file, the AzureBlobFilesystem breakLease method may be\n+ called.\n+\n+`fs.azure.lease.threads`: This is the size of the thread pool that will be\n+used for lease operations for single writer directories. By default the value\n+is 0, so it must be set to at least 1 to support single writer directories.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "978cedb7b63d6a1b09db291511cc87ae53c7cab0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDYzMTA0Ng==", "bodyText": "is there any validation here, that if a path in the local FS is to be leased then the executor count must be >1?\n\nYes, in SelfRenewingLease it throws an exception if there are < 1 lease threads.\n\nwhat if I'm working with >1 FS? Will this configuration be per-fs? Or does it take a list of paths which can be full URIs to paths in a store?\n\nI believe the single writer dirs config accepts a list of full URIs -- I will double check -- but they all share the same pool of lease threads.\nI am also looking into whether it makes sense to make the lease duration configurable. This would allow configuration of a finite or infinite lease duration, and in the infinite lease case we could avoid frequent calls to the Azure API to renew the lease. (For an infinite lease, if the client stopped without releasing the lease, the lease would have to be explicitly broken for a different writer to obtain a new lease on the file. It's a tradeoff, and I could imagine both finite and infinite lease options being useful.)", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r574631046", "createdAt": "2021-02-11T16:14:07Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/abfs.md", "diffHunk": "@@ -877,6 +877,21 @@ enabled for your Azure Storage account.\"\n The directories can be specified as comma separated values. By default the value\n is \"/hbase\"\n \n+### <a name=\"singlewriteroptions\"></a> Single Writer Options\n+`fs.azure.singlewriter.directories`: Directories for single writer support\n+can be specified comma separated in this config. By default, multiple\n+clients will be able to write to the same file simultaneously. When writing\n+to files contained within the directories specified in this config, the\n+client will obtain a lease on the file that will prevent any other clients\n+from writing to the file. The lease will be renewed by the client until the\n+output stream is closed, after which it will be released. To revoke a client's\n+write access for a file, the AzureBlobFilesystem breakLease method may be\n+ called.\n+\n+`fs.azure.lease.threads`: This is the size of the thread pool that will be\n+used for lease operations for single writer directories. By default the value\n+is 0, so it must be set to at least 1 to support single writer directories.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjI5MTY2MA=="}, "originalCommit": {"oid": "978cedb7b63d6a1b09db291511cc87ae53c7cab0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjcwNTE1Nw==", "bodyText": "Correction, single writer dirs accepts a list of paths, not URIs.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r586705157", "createdAt": "2021-03-03T19:09:32Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/site/markdown/abfs.md", "diffHunk": "@@ -877,6 +877,21 @@ enabled for your Azure Storage account.\"\n The directories can be specified as comma separated values. By default the value\n is \"/hbase\"\n \n+### <a name=\"singlewriteroptions\"></a> Single Writer Options\n+`fs.azure.singlewriter.directories`: Directories for single writer support\n+can be specified comma separated in this config. By default, multiple\n+clients will be able to write to the same file simultaneously. When writing\n+to files contained within the directories specified in this config, the\n+client will obtain a lease on the file that will prevent any other clients\n+from writing to the file. The lease will be renewed by the client until the\n+output stream is closed, after which it will be released. To revoke a client's\n+write access for a file, the AzureBlobFilesystem breakLease method may be\n+ called.\n+\n+`fs.azure.lease.threads`: This is the size of the thread pool that will be\n+used for lease operations for single writer directories. By default the value\n+is 0, so it must be set to at least 1 to support single writer directories.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjI5MTY2MA=="}, "originalCommit": {"oid": "978cedb7b63d6a1b09db291511cc87ae53c7cab0"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc0OTU1ODI2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xM1QxODoxNzoyMVrOI2RqEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQyMTozMTowN1rOI3JdBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzc4MzMxNQ==", "bodyText": "Background threads that will renew lease every 67% of lease i.e. 10 seconds for 15 second lease and 40 seconds for 60 second lease will add extra cost to customers", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r593783315", "createdAt": "2021-03-13T18:17:21Z", "author": {"login": "snehavarma"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AbfsRestOperationException;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely by scheduling lease\n+ * operations through the ABFS client. Use it to prevent writes to the blob by other processes\n+ * that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, the lease will time out since it\n+ * won't be renewed.\n+ */\n+public final class SelfRenewingLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(SelfRenewingLease.class);\n+\n+  static final float LEASE_RENEWAL_PERCENT_OF_DURATION = 0.67f; // Lease renewal percent of duration\n+\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 10; // Retry interval for acquiring lease in secs\n+  static final int LEASE_ACQUIRE_MAX_RETRIES = 7; // Number of retries for acquiring lease\n+\n+  private final AbfsClient client;\n+  private final String path;\n+  private final int duration;\n+  private final int renewalPeriod;\n+\n+  // Lease status variables\n+  private volatile boolean leaseFreed;\n+  private volatile String leaseID = null;\n+  private volatile Throwable exception = null;\n+  private volatile ListenableScheduledFuture<AbfsRestOperation> future = null;\n+\n+  public static class LeaseException extends AzureBlobFileSystemException {\n+    public LeaseException(Throwable t) {\n+      super(ERR_ACQUIRING_LEASE + \": \" + t, t);\n+    }\n+\n+    public LeaseException(String s) {\n+      super(s);\n+    }\n+  }\n+\n+  public SelfRenewingLease(AbfsClient client, String path, int duration) throws AzureBlobFileSystemException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3ODgxMg==", "bodyText": "Thanks Sneha, I didn't realize the lease renewals would be charged as write ops. It might be a poor experience for a user to have unexpected charges related to this lease configuration.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r594678812", "createdAt": "2021-03-15T20:57:50Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AbfsRestOperationException;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely by scheduling lease\n+ * operations through the ABFS client. Use it to prevent writes to the blob by other processes\n+ * that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, the lease will time out since it\n+ * won't be renewed.\n+ */\n+public final class SelfRenewingLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(SelfRenewingLease.class);\n+\n+  static final float LEASE_RENEWAL_PERCENT_OF_DURATION = 0.67f; // Lease renewal percent of duration\n+\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 10; // Retry interval for acquiring lease in secs\n+  static final int LEASE_ACQUIRE_MAX_RETRIES = 7; // Number of retries for acquiring lease\n+\n+  private final AbfsClient client;\n+  private final String path;\n+  private final int duration;\n+  private final int renewalPeriod;\n+\n+  // Lease status variables\n+  private volatile boolean leaseFreed;\n+  private volatile String leaseID = null;\n+  private volatile Throwable exception = null;\n+  private volatile ListenableScheduledFuture<AbfsRestOperation> future = null;\n+\n+  public static class LeaseException extends AzureBlobFileSystemException {\n+    public LeaseException(Throwable t) {\n+      super(ERR_ACQUIRING_LEASE + \": \" + t, t);\n+    }\n+\n+    public LeaseException(String s) {\n+      super(s);\n+    }\n+  }\n+\n+  public SelfRenewingLease(AbfsClient client, String path, int duration) throws AzureBlobFileSystemException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzc4MzMxNQ=="}, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY5NzQ3Nw==", "bodyText": "Hey Billie just wanted to add that it might not be charged as write ops but instead come under other ops or metadata ops. Either way it will be extra cost just not as high as write transaction charges.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r594697477", "createdAt": "2021-03-15T21:31:07Z", "author": {"login": "snehavarma"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AbfsRestOperationException;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely by scheduling lease\n+ * operations through the ABFS client. Use it to prevent writes to the blob by other processes\n+ * that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, the lease will time out since it\n+ * won't be renewed.\n+ */\n+public final class SelfRenewingLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(SelfRenewingLease.class);\n+\n+  static final float LEASE_RENEWAL_PERCENT_OF_DURATION = 0.67f; // Lease renewal percent of duration\n+\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 10; // Retry interval for acquiring lease in secs\n+  static final int LEASE_ACQUIRE_MAX_RETRIES = 7; // Number of retries for acquiring lease\n+\n+  private final AbfsClient client;\n+  private final String path;\n+  private final int duration;\n+  private final int renewalPeriod;\n+\n+  // Lease status variables\n+  private volatile boolean leaseFreed;\n+  private volatile String leaseID = null;\n+  private volatile Throwable exception = null;\n+  private volatile ListenableScheduledFuture<AbfsRestOperation> future = null;\n+\n+  public static class LeaseException extends AzureBlobFileSystemException {\n+    public LeaseException(Throwable t) {\n+      super(ERR_ACQUIRING_LEASE + \": \" + t, t);\n+    }\n+\n+    public LeaseException(String s) {\n+      super(s);\n+    }\n+  }\n+\n+  public SelfRenewingLease(AbfsClient client, String path, int duration) throws AzureBlobFileSystemException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzc4MzMxNQ=="}, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc0OTU2MTY5OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xM1QxODoyMDoxNFrOI2RrlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQyMjowMzo1OVrOI3KgJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzc4MzcwMQ==", "bodyText": "Please check if infinite lease is sufficient for your use case.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r593783701", "createdAt": "2021-03-13T18:20:14Z", "author": {"login": "snehavarma"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AbfsRestOperationException;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely by scheduling lease\n+ * operations through the ABFS client. Use it to prevent writes to the blob by other processes\n+ * that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, the lease will time out since it\n+ * won't be renewed.\n+ */\n+public final class SelfRenewingLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(SelfRenewingLease.class);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDcwNTIzMQ==", "bodyText": "I think infinite leases are sufficient for my use case. I would be okay with removing lease renewal from this patch and leaving finite leases for future work in HADOOP-17590, but I am not sure what the best way to handle the configuration properties would be. It sounds like you are proposing a boolean fs.azure.write.enforcelease that would control whether lease ops are applied for all files, and all files would have the same finite lease duration, is that right? I am wondering how to make that work together with the fs.azure.singlewriter.directories property in this patch. Would we want to specify a special set of directories that uses infinite leases? Or do we need to figure out a way to specify lease duration for each directory that supports lease ops?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r594705231", "createdAt": "2021-03-15T21:45:41Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AbfsRestOperationException;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely by scheduling lease\n+ * operations through the ABFS client. Use it to prevent writes to the blob by other processes\n+ * that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, the lease will time out since it\n+ * won't be renewed.\n+ */\n+public final class SelfRenewingLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(SelfRenewingLease.class);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzc4MzcwMQ=="}, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDcwNzI4Ng==", "bodyText": "Yes, We should specify a special set of directories that uses infinite leases. By default we would keep 60 seconds as lease duration for all files.\n\n\nOr do we need to figure out a way to specify lease duration for each directory that supports lease ops?\nThis will not scale.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r594707286", "createdAt": "2021-03-15T21:49:26Z", "author": {"login": "snehavarma"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AbfsRestOperationException;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely by scheduling lease\n+ * operations through the ABFS client. Use it to prevent writes to the blob by other processes\n+ * that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, the lease will time out since it\n+ * won't be renewed.\n+ */\n+public final class SelfRenewingLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(SelfRenewingLease.class);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzc4MzcwMQ=="}, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDcxMjkxMQ==", "bodyText": "So, does the property name fs.azure.singlewriter.directories still make sense, or should it be changed to something else such as fs.azure.infinite-lease-directories?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r594712911", "createdAt": "2021-03-15T22:00:16Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AbfsRestOperationException;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely by scheduling lease\n+ * operations through the ABFS client. Use it to prevent writes to the blob by other processes\n+ * that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, the lease will time out since it\n+ * won't be renewed.\n+ */\n+public final class SelfRenewingLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(SelfRenewingLease.class);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzc4MzcwMQ=="}, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDcxNDY2MA==", "bodyText": "Agree,   fs.azure.singlewriter.directories would confuse the users. We can name it something else.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r594714660", "createdAt": "2021-03-15T22:03:59Z", "author": {"login": "snehavarma"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AbfsRestOperationException;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely by scheduling lease\n+ * operations through the ABFS client. Use it to prevent writes to the blob by other processes\n+ * that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, the lease will time out since it\n+ * won't be renewed.\n+ */\n+public final class SelfRenewingLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(SelfRenewingLease.class);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzc4MzcwMQ=="}, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc0OTU2MjUwOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xM1QxODoyMTozNlrOI2Rr9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xM1QxODoyMTozNlrOI2Rr9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzc4Mzc5Nw==", "bodyText": "Error handling for cases when append may take more time than lease expiry needs to be added incase there is a finite lease.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r593783797", "createdAt": "2021-03-13T18:21:36Z", "author": {"login": "snehavarma"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SelfRenewingLease.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AbfsRestOperationException;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * An Azure blob lease that automatically renews itself indefinitely by scheduling lease\n+ * operations through the ABFS client. Use it to prevent writes to the blob by other processes\n+ * that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, the lease will time out since it\n+ * won't be renewed.\n+ */\n+public final class SelfRenewingLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(SelfRenewingLease.class);\n+\n+  static final float LEASE_RENEWAL_PERCENT_OF_DURATION = 0.67f; // Lease renewal percent of duration\n+\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 10; // Retry interval for acquiring lease in secs\n+  static final int LEASE_ACQUIRE_MAX_RETRIES = 7; // Number of retries for acquiring lease\n+\n+  private final AbfsClient client;\n+  private final String path;\n+  private final int duration;\n+  private final int renewalPeriod;\n+\n+  // Lease status variables\n+  private volatile boolean leaseFreed;\n+  private volatile String leaseID = null;\n+  private volatile Throwable exception = null;\n+  private volatile ListenableScheduledFuture<AbfsRestOperation> future = null;\n+\n+  public static class LeaseException extends AzureBlobFileSystemException {\n+    public LeaseException(Throwable t) {\n+      super(ERR_ACQUIRING_LEASE + \": \" + t, t);\n+    }\n+\n+    public LeaseException(String s) {\n+      super(s);\n+    }\n+  }\n+\n+  public SelfRenewingLease(AbfsClient client, String path, int duration) throws AzureBlobFileSystemException {\n+    this.leaseFreed = false;\n+    this.client = client;\n+    this.path = path;\n+    this.duration = duration;\n+    this.renewalPeriod = (int) (LEASE_RENEWAL_PERCENT_OF_DURATION * this.duration);\n+\n+    if (client.getNumLeaseThreads() < 1) {\n+      throw new LeaseException(ERR_NO_LEASE_THREADS);\n+    }\n+\n+    // Try to get the lease a specified number of times, else throw an error\n+    RetryPolicy retryPolicy = RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n+        LEASE_ACQUIRE_MAX_RETRIES, LEASE_ACQUIRE_RETRY_INTERVAL, TimeUnit.SECONDS);\n+    acquireLease(retryPolicy, 0, 0);\n+\n+    while (leaseID == null && exception == null) {\n+    }\n+    if (exception != null) {\n+      LOG.error(\"Failed to acquire lease on {}\", path);\n+      throw new LeaseException(exception);\n+    }\n+\n+    if (duration != INFINITE_LEASE_DURATION) {\n+      renewLease(renewalPeriod);\n+    }\n+\n+    LOG.debug(\"Acquired lease {} on {}\", leaseID, path);\n+  }\n+\n+  private void acquireLease(RetryPolicy retryPolicy, int numRetries, long delay)\n+      throws LeaseException {\n+    LOG.debug(\"Attempting to acquire lease on {}, retry {}\", path, numRetries);\n+    if (future != null && !future.isDone()) {\n+      throw new LeaseException(ERR_LEASE_FUTURE_EXISTS);\n+    }\n+    future = client.schedule(() -> client.acquireLease(path, duration),\n+        delay, TimeUnit.SECONDS);\n+    client.addCallback(future, new FutureCallback<AbfsRestOperation>() {\n+      @Override\n+      public void onSuccess(@Nullable AbfsRestOperation op) {\n+        leaseID = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_LEASE_ID);\n+        LOG.debug(\"Acquired lease {} on {}\", leaseID, path);\n+      }\n+\n+      @Override\n+      public void onFailure(Throwable throwable) {\n+        try {\n+          if (RetryPolicy.RetryAction.RetryDecision.RETRY\n+              == retryPolicy.shouldRetry(null, numRetries, 0, true).action) {\n+            LOG.debug(\"Failed acquire lease on {}, retrying: {}\", path, throwable);\n+            acquireLease(retryPolicy, numRetries + 1, LEASE_ACQUIRE_RETRY_INTERVAL);\n+          } else {\n+            exception = throwable;\n+          }\n+        } catch (Exception e) {\n+          exception = throwable;\n+        }\n+      }\n+    });\n+  }\n+\n+  private void renewLease(long delay) {\n+    LOG.debug(\"Attempting to renew lease on {}, renew lease id {}, delay {}\", path, leaseID, delay);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc1NTk5MTA3OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQyMTo1NjoxN1rOI3KRaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNlQxNjoxODo1M1rOI3v6Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDcxMDg5MQ==", "bodyText": "this code should not be required", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r594710891", "createdAt": "2021-03-15T21:56:17Z", "author": {"login": "snehavarma"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java", "diffHunk": "@@ -702,15 +735,72 @@ public OutputStream openFileForWrite(final Path path, final FileSystem.Statistic\n         isAppendBlob = true;\n       }\n \n+      SelfRenewingLease lease = maybeCreateLease(relativePath);\n+\n       return new AbfsOutputStream(\n           client,\n           statistics,\n           relativePath,\n           offset,\n-          populateAbfsOutputStreamContext(isAppendBlob));\n+          populateAbfsOutputStreamContext(isAppendBlob, lease));\n     }\n   }\n \n+  /**\n+   * Acquire a lease on an ABFS file for a specified duration. This requires the file to exist.\n+   *\n+   * @param path file name\n+   * @param duration time lease will be held before expiring\n+   * @return the acquired lease ID\n+   * @throws AzureBlobFileSystemException on any exception while acquiring the lease\n+   */\n+  public String acquireLease(final Path path, final int duration) throws AzureBlobFileSystemException {\n+    LOG.debug(\"lease path: {}\", path);\n+\n+    final AbfsRestOperation op =\n+        client.acquireLease(getRelativePath(path), duration);\n+\n+    return op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_LEASE_ID);\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI1NTY5Mw==", "bodyText": "I'm not sure what you mean. Do you mean that we shouldn't have an acquireLease method in the store because leases will be acquired automatically?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r595255693", "createdAt": "2021-03-16T15:01:19Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java", "diffHunk": "@@ -702,15 +735,72 @@ public OutputStream openFileForWrite(final Path path, final FileSystem.Statistic\n         isAppendBlob = true;\n       }\n \n+      SelfRenewingLease lease = maybeCreateLease(relativePath);\n+\n       return new AbfsOutputStream(\n           client,\n           statistics,\n           relativePath,\n           offset,\n-          populateAbfsOutputStreamContext(isAppendBlob));\n+          populateAbfsOutputStreamContext(isAppendBlob, lease));\n     }\n   }\n \n+  /**\n+   * Acquire a lease on an ABFS file for a specified duration. This requires the file to exist.\n+   *\n+   * @param path file name\n+   * @param duration time lease will be held before expiring\n+   * @return the acquired lease ID\n+   * @throws AzureBlobFileSystemException on any exception while acquiring the lease\n+   */\n+  public String acquireLease(final Path path, final int duration) throws AzureBlobFileSystemException {\n+    LOG.debug(\"lease path: {}\", path);\n+\n+    final AbfsRestOperation op =\n+        client.acquireLease(getRelativePath(path), duration);\n+\n+    return op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_LEASE_ID);\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDcxMDg5MQ=="}, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTMyNzU2Ng==", "bodyText": "Yes if the file is being created then infinite lease can be automatically taken, for other cases yes you may need the acquire lease code till we integrate bundling of lease with append.\nRenewLease code might be something you can completely get rid of", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r595327566", "createdAt": "2021-03-16T16:18:53Z", "author": {"login": "snehavarma"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java", "diffHunk": "@@ -702,15 +735,72 @@ public OutputStream openFileForWrite(final Path path, final FileSystem.Statistic\n         isAppendBlob = true;\n       }\n \n+      SelfRenewingLease lease = maybeCreateLease(relativePath);\n+\n       return new AbfsOutputStream(\n           client,\n           statistics,\n           relativePath,\n           offset,\n-          populateAbfsOutputStreamContext(isAppendBlob));\n+          populateAbfsOutputStreamContext(isAppendBlob, lease));\n     }\n   }\n \n+  /**\n+   * Acquire a lease on an ABFS file for a specified duration. This requires the file to exist.\n+   *\n+   * @param path file name\n+   * @param duration time lease will be held before expiring\n+   * @return the acquired lease ID\n+   * @throws AzureBlobFileSystemException on any exception while acquiring the lease\n+   */\n+  public String acquireLease(final Path path, final int duration) throws AzureBlobFileSystemException {\n+    LOG.debug(\"lease path: {}\", path);\n+\n+    final AbfsRestOperation op =\n+        client.acquireLease(getRelativePath(path), duration);\n+\n+    return op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_LEASE_ID);\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDcxMDg5MQ=="}, "originalCommit": {"oid": "e4c7a815ec2f33c9561e2a8446499b46e7004b9e"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2MjU3NDc1OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwNTozODoyN1rOI4INJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QxNjo0NzoyMVrOI4lUXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTcyNTYwNA==", "bodyText": "Do we need these? i.e. Lease threads", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r595725604", "createdAt": "2021-03-17T05:38:27Z", "author": {"login": "snehavarma"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java", "diffHunk": "@@ -208,6 +209,15 @@\n       DefaultValue = DEFAULT_FS_AZURE_APPEND_BLOB_DIRECTORIES)\n   private String azureAppendBlobDirs;\n \n+  @StringConfigurationValidatorAnnotation(ConfigurationKey = FS_AZURE_INFINITE_LEASE_KEY,\n+      DefaultValue = DEFAULT_FS_AZURE_INFINITE_LEASE_DIRECTORIES)\n+  private String azureInfiniteLeaseDirs;\n+\n+  @IntegerConfigurationValidatorAnnotation(ConfigurationKey = FS_AZURE_LEASE_THREADS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc4f08bbf794eab83ffaed74a79e0a4ff4aec22"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjIwMjU5MA==", "bodyText": "I think it will still be useful to issue the acquire and release operations in a thread pool for now. Possibly this could be removed if all acquire and release operations are moved into create and flush-with-close in the future.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r596202590", "createdAt": "2021-03-17T16:47:21Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java", "diffHunk": "@@ -208,6 +209,15 @@\n       DefaultValue = DEFAULT_FS_AZURE_APPEND_BLOB_DIRECTORIES)\n   private String azureAppendBlobDirs;\n \n+  @StringConfigurationValidatorAnnotation(ConfigurationKey = FS_AZURE_INFINITE_LEASE_KEY,\n+      DefaultValue = DEFAULT_FS_AZURE_INFINITE_LEASE_DIRECTORIES)\n+  private String azureInfiniteLeaseDirs;\n+\n+  @IntegerConfigurationValidatorAnnotation(ConfigurationKey = FS_AZURE_LEASE_THREADS,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTcyNTYwNA=="}, "originalCommit": {"oid": "9fc4f08bbf794eab83ffaed74a79e0a4ff4aec22"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2MjYzMjc4OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwNjowMzozNVrOI4IupA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QxNjo0ODozOFrOI4lZCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTczNDE4MA==", "bodyText": "Is the feature for both namespace and flatnamespace enabled accounts?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r595734180", "createdAt": "2021-03-17T06:03:35Z", "author": {"login": "snehavarma"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java", "diffHunk": "@@ -208,6 +209,15 @@\n       DefaultValue = DEFAULT_FS_AZURE_APPEND_BLOB_DIRECTORIES)\n   private String azureAppendBlobDirs;\n \n+  @StringConfigurationValidatorAnnotation(ConfigurationKey = FS_AZURE_INFINITE_LEASE_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc4f08bbf794eab83ffaed74a79e0a4ff4aec22"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjIwMzc4NQ==", "bodyText": "I have run the unit test with HNS and flat namespace storage accounts, so I think it will work. I have not done extensive testing with HNS disabled, however.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r596203785", "createdAt": "2021-03-17T16:48:38Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java", "diffHunk": "@@ -208,6 +209,15 @@\n       DefaultValue = DEFAULT_FS_AZURE_APPEND_BLOB_DIRECTORIES)\n   private String azureAppendBlobDirs;\n \n+  @StringConfigurationValidatorAnnotation(ConfigurationKey = FS_AZURE_INFINITE_LEASE_KEY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTczNDE4MA=="}, "originalCommit": {"oid": "9fc4f08bbf794eab83ffaed74a79e0a4ff4aec22"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc3OTkyMjc3OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsLease.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMVQxODo0NDo1NFrOI6mmZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQxNDozMToxMlrOI7B4-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODMyMDc0MA==", "bodyText": "This looks a CPU-heavy loop. I know it makes for a more responsive app, but it's a busy wait. Any way to replace with some concurrency class?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r598320740", "createdAt": "2021-03-21T18:44:54Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsLease.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * AbfsLease manages an Azure blob lease. It acquires an infinite lease on instantiation and\n+ * releases the lease when free() is called. Use it to prevent writes to the blob by other\n+ * processes that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, AzureBlobFileSystem breakLease\n+ * will need to be called before another client will be able to write to the file.\n+ */\n+public final class AbfsLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(AbfsLease.class);\n+\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 10; // Retry interval for acquiring lease in secs\n+  static final int LEASE_ACQUIRE_MAX_RETRIES = 7; // Number of retries for acquiring lease\n+\n+  private final AbfsClient client;\n+  private final String path;\n+\n+  // Lease status variables\n+  private volatile boolean leaseFreed;\n+  private volatile String leaseID = null;\n+  private volatile Throwable exception = null;\n+  private volatile ListenableScheduledFuture<AbfsRestOperation> future = null;\n+\n+  public static class LeaseException extends AzureBlobFileSystemException {\n+    public LeaseException(Throwable t) {\n+      super(ERR_ACQUIRING_LEASE + \": \" + t, t);\n+    }\n+\n+    public LeaseException(String s) {\n+      super(s);\n+    }\n+  }\n+\n+  public AbfsLease(AbfsClient client, String path) throws AzureBlobFileSystemException {\n+    this.leaseFreed = false;\n+    this.client = client;\n+    this.path = path;\n+\n+    if (client.getNumLeaseThreads() < 1) {\n+      throw new LeaseException(ERR_NO_LEASE_THREADS);\n+    }\n+\n+    // Try to get the lease a specified number of times, else throw an error\n+    RetryPolicy retryPolicy = RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n+        LEASE_ACQUIRE_MAX_RETRIES, LEASE_ACQUIRE_RETRY_INTERVAL, TimeUnit.SECONDS);\n+    acquireLease(retryPolicy, 0, 0);\n+\n+    while (leaseID == null && exception == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc4f08bbf794eab83ffaed74a79e0a4ff4aec22"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODc2NDIxMg==", "bodyText": "Good point. We will have the Future at that point, so we could wait for it to complete.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r598764212", "createdAt": "2021-03-22T14:27:18Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsLease.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * AbfsLease manages an Azure blob lease. It acquires an infinite lease on instantiation and\n+ * releases the lease when free() is called. Use it to prevent writes to the blob by other\n+ * processes that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, AzureBlobFileSystem breakLease\n+ * will need to be called before another client will be able to write to the file.\n+ */\n+public final class AbfsLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(AbfsLease.class);\n+\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 10; // Retry interval for acquiring lease in secs\n+  static final int LEASE_ACQUIRE_MAX_RETRIES = 7; // Number of retries for acquiring lease\n+\n+  private final AbfsClient client;\n+  private final String path;\n+\n+  // Lease status variables\n+  private volatile boolean leaseFreed;\n+  private volatile String leaseID = null;\n+  private volatile Throwable exception = null;\n+  private volatile ListenableScheduledFuture<AbfsRestOperation> future = null;\n+\n+  public static class LeaseException extends AzureBlobFileSystemException {\n+    public LeaseException(Throwable t) {\n+      super(ERR_ACQUIRING_LEASE + \": \" + t, t);\n+    }\n+\n+    public LeaseException(String s) {\n+      super(s);\n+    }\n+  }\n+\n+  public AbfsLease(AbfsClient client, String path) throws AzureBlobFileSystemException {\n+    this.leaseFreed = false;\n+    this.client = client;\n+    this.path = path;\n+\n+    if (client.getNumLeaseThreads() < 1) {\n+      throw new LeaseException(ERR_NO_LEASE_THREADS);\n+    }\n+\n+    // Try to get the lease a specified number of times, else throw an error\n+    RetryPolicy retryPolicy = RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n+        LEASE_ACQUIRE_MAX_RETRIES, LEASE_ACQUIRE_RETRY_INTERVAL, TimeUnit.SECONDS);\n+    acquireLease(retryPolicy, 0, 0);\n+\n+    while (leaseID == null && exception == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODMyMDc0MA=="}, "originalCommit": {"oid": "9fc4f08bbf794eab83ffaed74a79e0a4ff4aec22"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODc2Nzg2Ng==", "bodyText": "I pushed a new change to address this. I am also looking into figuring out if I can mock an acquire lease failure to test this out a bit better.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r598767866", "createdAt": "2021-03-22T14:31:12Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsLease.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * AbfsLease manages an Azure blob lease. It acquires an infinite lease on instantiation and\n+ * releases the lease when free() is called. Use it to prevent writes to the blob by other\n+ * processes that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, AzureBlobFileSystem breakLease\n+ * will need to be called before another client will be able to write to the file.\n+ */\n+public final class AbfsLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(AbfsLease.class);\n+\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 10; // Retry interval for acquiring lease in secs\n+  static final int LEASE_ACQUIRE_MAX_RETRIES = 7; // Number of retries for acquiring lease\n+\n+  private final AbfsClient client;\n+  private final String path;\n+\n+  // Lease status variables\n+  private volatile boolean leaseFreed;\n+  private volatile String leaseID = null;\n+  private volatile Throwable exception = null;\n+  private volatile ListenableScheduledFuture<AbfsRestOperation> future = null;\n+\n+  public static class LeaseException extends AzureBlobFileSystemException {\n+    public LeaseException(Throwable t) {\n+      super(ERR_ACQUIRING_LEASE + \": \" + t, t);\n+    }\n+\n+    public LeaseException(String s) {\n+      super(s);\n+    }\n+  }\n+\n+  public AbfsLease(AbfsClient client, String path) throws AzureBlobFileSystemException {\n+    this.leaseFreed = false;\n+    this.client = client;\n+    this.path = path;\n+\n+    if (client.getNumLeaseThreads() < 1) {\n+      throw new LeaseException(ERR_NO_LEASE_THREADS);\n+    }\n+\n+    // Try to get the lease a specified number of times, else throw an error\n+    RetryPolicy retryPolicy = RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n+        LEASE_ACQUIRE_MAX_RETRIES, LEASE_ACQUIRE_RETRY_INTERVAL, TimeUnit.SECONDS);\n+    acquireLease(retryPolicy, 0, 0);\n+\n+    while (leaseID == null && exception == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODMyMDc0MA=="}, "originalCommit": {"oid": "9fc4f08bbf794eab83ffaed74a79e0a4ff4aec22"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc3OTkyNDEzOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsLease.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMVQxODo0NTozOVrOI6mnAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMVQxODo0NTozOVrOI6mnAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODMyMDg5OQ==", "bodyText": "Failed to", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r598320899", "createdAt": "2021-03-21T18:45:39Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsLease.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.fs.azurebfs.services;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.FutureCallback;\n+import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListenableScheduledFuture;\n+import org.apache.hadoop.thirdparty.org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hadoop.fs.azurebfs.constants.HttpHeaderConfigurations;\n+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.AzureBlobFileSystemException;\n+import org.apache.hadoop.io.retry.RetryPolicies;\n+import org.apache.hadoop.io.retry.RetryPolicy;\n+\n+import static org.apache.hadoop.fs.azurebfs.constants.FileSystemConfigurations.INFINITE_LEASE_DURATION;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_ACQUIRING_LEASE;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_LEASE_FUTURE_EXISTS;\n+import static org.apache.hadoop.fs.azurebfs.services.AbfsErrors.ERR_NO_LEASE_THREADS;\n+\n+/**\n+ * AbfsLease manages an Azure blob lease. It acquires an infinite lease on instantiation and\n+ * releases the lease when free() is called. Use it to prevent writes to the blob by other\n+ * processes that don't have the lease.\n+ *\n+ * Creating a new Lease object blocks the caller until the Azure blob lease is acquired. It will\n+ * retry a fixed number of times before failing if there is a problem acquiring the lease.\n+ *\n+ * Call free() to release the Lease. If the holder process dies, AzureBlobFileSystem breakLease\n+ * will need to be called before another client will be able to write to the file.\n+ */\n+public final class AbfsLease {\n+  private static final Logger LOG = LoggerFactory.getLogger(AbfsLease.class);\n+\n+  static final int LEASE_ACQUIRE_RETRY_INTERVAL = 10; // Retry interval for acquiring lease in secs\n+  static final int LEASE_ACQUIRE_MAX_RETRIES = 7; // Number of retries for acquiring lease\n+\n+  private final AbfsClient client;\n+  private final String path;\n+\n+  // Lease status variables\n+  private volatile boolean leaseFreed;\n+  private volatile String leaseID = null;\n+  private volatile Throwable exception = null;\n+  private volatile ListenableScheduledFuture<AbfsRestOperation> future = null;\n+\n+  public static class LeaseException extends AzureBlobFileSystemException {\n+    public LeaseException(Throwable t) {\n+      super(ERR_ACQUIRING_LEASE + \": \" + t, t);\n+    }\n+\n+    public LeaseException(String s) {\n+      super(s);\n+    }\n+  }\n+\n+  public AbfsLease(AbfsClient client, String path) throws AzureBlobFileSystemException {\n+    this.leaseFreed = false;\n+    this.client = client;\n+    this.path = path;\n+\n+    if (client.getNumLeaseThreads() < 1) {\n+      throw new LeaseException(ERR_NO_LEASE_THREADS);\n+    }\n+\n+    // Try to get the lease a specified number of times, else throw an error\n+    RetryPolicy retryPolicy = RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n+        LEASE_ACQUIRE_MAX_RETRIES, LEASE_ACQUIRE_RETRY_INTERVAL, TimeUnit.SECONDS);\n+    acquireLease(retryPolicy, 0, 0);\n+\n+    while (leaseID == null && exception == null) {\n+    }\n+    if (exception != null) {\n+      LOG.error(\"Failed to acquire lease on {}\", path);\n+      throw new LeaseException(exception);\n+    }\n+\n+    LOG.debug(\"Acquired lease {} on {}\", leaseID, path);\n+  }\n+\n+  private void acquireLease(RetryPolicy retryPolicy, int numRetries, long delay)\n+      throws LeaseException {\n+    LOG.debug(\"Attempting to acquire lease on {}, retry {}\", path, numRetries);\n+    if (future != null && !future.isDone()) {\n+      throw new LeaseException(ERR_LEASE_FUTURE_EXISTS);\n+    }\n+    future = client.schedule(() -> client.acquireLease(path, INFINITE_LEASE_DURATION),\n+        delay, TimeUnit.SECONDS);\n+    client.addCallback(future, new FutureCallback<AbfsRestOperation>() {\n+      @Override\n+      public void onSuccess(@Nullable AbfsRestOperation op) {\n+        leaseID = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_LEASE_ID);\n+        LOG.debug(\"Acquired lease {} on {}\", leaseID, path);\n+      }\n+\n+      @Override\n+      public void onFailure(Throwable throwable) {\n+        try {\n+          if (RetryPolicy.RetryAction.RetryDecision.RETRY\n+              == retryPolicy.shouldRetry(null, numRetries, 0, true).action) {\n+            LOG.debug(\"Failed acquire lease on {}, retrying: {}\", path, throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc4f08bbf794eab83ffaed74a79e0a4ff4aec22"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4OTkxNjQyOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsLease.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QxODo0Mjo1OVrOI8DYIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxODo0MDoxOVrOJHhalw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg0MDgwMg==", "bodyText": "if this raises an exception, is there any way the while loop will exit?", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r599840802", "createdAt": "2021-03-23T18:42:59Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsLease.java", "diffHunk": "@@ -88,6 +88,12 @@ public AbfsLease(AbfsClient client, String path) throws AzureBlobFileSystemExcep\n     acquireLease(retryPolicy, 0, 0);\n \n     while (leaseID == null && exception == null) {\n+      try {\n+        future.get();\n+      } catch (Exception e) {\n+        LOG.debug(\"Got exception waiting for acquire lease future. Checking if lease ID or \"\n+            + \"exception have been set\", e);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6803cfa25040895401bc7b6fdeccc2a96e2da7b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTk5NzU2Nw==", "bodyText": "Yes, in this section it will retry if it is below the max retries and otherwise set the exception variable. So by max retries we should either have a lease ID or an exception set, and the while loop will exit. In the unit test, I mocked two failures followed by a success as well as persistent failure and verified it had the correct behavior.", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r599997567", "createdAt": "2021-03-23T22:22:30Z", "author": {"login": "billierinaldi"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsLease.java", "diffHunk": "@@ -88,6 +88,12 @@ public AbfsLease(AbfsClient client, String path) throws AzureBlobFileSystemExcep\n     acquireLease(retryPolicy, 0, 0);\n \n     while (leaseID == null && exception == null) {\n+      try {\n+        future.get();\n+      } catch (Exception e) {\n+        LOG.debug(\"Got exception waiting for acquire lease future. Checking if lease ID or \"\n+            + \"exception have been set\", e);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg0MDgwMg=="}, "originalCommit": {"oid": "b6803cfa25040895401bc7b6fdeccc2a96e2da7b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTg2NzI4Nw==", "bodyText": "understood", "url": "https://github.com/apache/hadoop/pull/1925#discussion_r611867287", "createdAt": "2021-04-12T18:40:19Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsLease.java", "diffHunk": "@@ -88,6 +88,12 @@ public AbfsLease(AbfsClient client, String path) throws AzureBlobFileSystemExcep\n     acquireLease(retryPolicy, 0, 0);\n \n     while (leaseID == null && exception == null) {\n+      try {\n+        future.get();\n+      } catch (Exception e) {\n+        LOG.debug(\"Got exception waiting for acquire lease future. Checking if lease ID or \"\n+            + \"exception have been set\", e);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg0MDgwMg=="}, "originalCommit": {"oid": "b6803cfa25040895401bc7b6fdeccc2a96e2da7b"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3644, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}