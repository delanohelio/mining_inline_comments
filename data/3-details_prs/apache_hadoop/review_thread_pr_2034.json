{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNDg3MzU1", "number": 2034, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo1ODoyNlrOEABNzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDowMToxMlrOEABRTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDU1MzcyOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo1ODoyNlrOGbCKoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxNDozMVrOGbZhzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwMDIyNA==", "bodyText": "nit: I could see it from the javadocs, still naming it something like authTypeForAccount could improve readability", "url": "https://github.com/apache/hadoop/pull/2034#discussion_r431000224", "createdAt": "2020-05-27T09:58:26Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java", "diffHunk": "@@ -325,31 +325,91 @@ public String getPasswordString(String key) throws IOException {\n   }\n \n   /**\n-   * Returns the account-specific Class if it exists, then looks for an\n-   * account-agnostic value, and finally tries the default value.\n+   * Returns account-specific token provider class if it exists, else checks if\n+   * an account-agnostic setting is present for token provider class if AuthType\n+   * matches with authType passed.\n+   * @param authType AuthType effective on the account\n    * @param name Account-agnostic configuration key\n    * @param defaultValue Class returned if none is configured\n    * @param xface Interface shared by all possible values\n+   * @param <U> Interface class type\n    * @return Highest-precedence Class object that was found\n    */\n-  public <U> Class<? extends U> getClass(String name, Class<? extends U> defaultValue, Class<U> xface) {\n+  public <U> Class<? extends U> getTokenProviderClass(AuthType authType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4775b8965bf90a10412310ef90b99c7afdf8ab0a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxMTU3MQ==", "bodyText": "This method fetches TokenProviderClass instance based on the input AuthType. It is in sync with the naming followed by other methods that resolve account-specific config and in it's absence default to account-agnostic value. Will retain the naming.", "url": "https://github.com/apache/hadoop/pull/2034#discussion_r431011571", "createdAt": "2020-05-27T10:19:18Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java", "diffHunk": "@@ -325,31 +325,91 @@ public String getPasswordString(String key) throws IOException {\n   }\n \n   /**\n-   * Returns the account-specific Class if it exists, then looks for an\n-   * account-agnostic value, and finally tries the default value.\n+   * Returns account-specific token provider class if it exists, else checks if\n+   * an account-agnostic setting is present for token provider class if AuthType\n+   * matches with authType passed.\n+   * @param authType AuthType effective on the account\n    * @param name Account-agnostic configuration key\n    * @param defaultValue Class returned if none is configured\n    * @param xface Interface shared by all possible values\n+   * @param <U> Interface class type\n    * @return Highest-precedence Class object that was found\n    */\n-  public <U> Class<? extends U> getClass(String name, Class<? extends U> defaultValue, Class<U> xface) {\n+  public <U> Class<? extends U> getTokenProviderClass(AuthType authType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwMDIyNA=="}, "originalCommit": {"oid": "4775b8965bf90a10412310ef90b99c7afdf8ab0a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxMzE2NQ==", "bodyText": "I meant for the parameter currently named authType", "url": "https://github.com/apache/hadoop/pull/2034#discussion_r431013165", "createdAt": "2020-05-27T10:22:17Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java", "diffHunk": "@@ -325,31 +325,91 @@ public String getPasswordString(String key) throws IOException {\n   }\n \n   /**\n-   * Returns the account-specific Class if it exists, then looks for an\n-   * account-agnostic value, and finally tries the default value.\n+   * Returns account-specific token provider class if it exists, else checks if\n+   * an account-agnostic setting is present for token provider class if AuthType\n+   * matches with authType passed.\n+   * @param authType AuthType effective on the account\n    * @param name Account-agnostic configuration key\n    * @param defaultValue Class returned if none is configured\n    * @param xface Interface shared by all possible values\n+   * @param <U> Interface class type\n    * @return Highest-precedence Class object that was found\n    */\n-  public <U> Class<? extends U> getClass(String name, Class<? extends U> defaultValue, Class<U> xface) {\n+  public <U> Class<? extends U> getTokenProviderClass(AuthType authType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwMDIyNA=="}, "originalCommit": {"oid": "4775b8965bf90a10412310ef90b99c7afdf8ab0a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4Mjk5MQ==", "bodyText": "Inputs AuthType, name of the relevant TokenProvider config key, xface (interface) are derived by the caller of getTokenProviderClass based on account-specific config settings. As it applies to all the inputs equally and is clear from the calling method's perspective, will retain the naming.", "url": "https://github.com/apache/hadoop/pull/2034#discussion_r431382991", "createdAt": "2020-05-27T19:14:31Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java", "diffHunk": "@@ -325,31 +325,91 @@ public String getPasswordString(String key) throws IOException {\n   }\n \n   /**\n-   * Returns the account-specific Class if it exists, then looks for an\n-   * account-agnostic value, and finally tries the default value.\n+   * Returns account-specific token provider class if it exists, else checks if\n+   * an account-agnostic setting is present for token provider class if AuthType\n+   * matches with authType passed.\n+   * @param authType AuthType effective on the account\n    * @param name Account-agnostic configuration key\n    * @param defaultValue Class returned if none is configured\n    * @param xface Interface shared by all possible values\n+   * @param <U> Interface class type\n    * @return Highest-precedence Class object that was found\n    */\n-  public <U> Class<? extends U> getClass(String name, Class<? extends U> defaultValue, Class<U> xface) {\n+  public <U> Class<? extends U> getTokenProviderClass(AuthType authType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwMDIyNA=="}, "originalCommit": {"oid": "4775b8965bf90a10412310ef90b99c7afdf8ab0a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDU2MjcwOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/TestAccountConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDowMToxMlrOGbCQgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoxNjowMlrOGbCwRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwMTcyOQ==", "bodyText": "Nit: This new line can be removed", "url": "https://github.com/apache/hadoop/pull/2034#discussion_r431001729", "createdAt": "2020-05-27T10:01:12Z", "author": {"login": "bilaharith"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/TestAccountConfiguration.java", "diffHunk": "@@ -20,13 +20,25 @@\n \n import java.io.IOException;\n \n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+\n import org.apache.hadoop.conf.Configuration;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4775b8965bf90a10412310ef90b99c7afdf8ab0a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwOTg2Mw==", "bodyText": "Fixed.", "url": "https://github.com/apache/hadoop/pull/2034#discussion_r431009863", "createdAt": "2020-05-27T10:16:02Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/TestAccountConfiguration.java", "diffHunk": "@@ -20,13 +20,25 @@\n \n import java.io.IOException;\n \n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+\n import org.apache.hadoop.conf.Configuration;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwMTcyOQ=="}, "originalCommit": {"oid": "4775b8965bf90a10412310ef90b99c7afdf8ab0a"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3574, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}