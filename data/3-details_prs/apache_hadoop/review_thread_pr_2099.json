{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MzkwOTU5", "number": 2099, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowMDoyN1rOEIljXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowMDoyN1rOEIljXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDM5MzI2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azure/ITestNativeAzureFileSystemConcurrencyLive.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowMDoyN1rOGoo6hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjozNDo0OVrOGopauA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NjU2Nw==", "bodyText": "Yetus complains here:\nassertEquals(\"The list should always contain 1 file.\",1, fileCount);:62: ',' is not followed by whitespace. [WhitespaceAfter]", "url": "https://github.com/apache/hadoop/pull/2099#discussion_r445266567", "createdAt": "2020-06-25T02:00:27Z", "author": {"login": "DadanielZ"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azure/ITestNativeAzureFileSystemConcurrencyLive.java", "diffHunk": "@@ -130,15 +131,55 @@ public void testConcurrentDeleteFile() throws Exception {\n     }\n   }\n \n+  /**\n+   * Validate the bug fix for HADOOP-17089.  Please note that we were never\n+   * able to reproduce this except during a Spark job that ran for multiple days\n+   * and in a hacked-up azure-storage SDK that added sleep before and after\n+   * the call to factory.setNamespaceAware(true) as shown in the description of\n+   * https://github.com/Azure/azure-storage-java/pull/546.\n+   */\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testConcurrentList() throws Exception {\n+    final Path testDir = new Path(\"/tmp/data-loss/11230174258112/_temporary/0/_temporary/attempt_20200624190514_0006_m_0\");\n+    final Path testFile = new Path(testDir, \"part-00004-15ea87b1-312c-4fdf-1820-95afb3dfc1c3-a010.snappy.parquet\");\n+    fs.create(testFile).close();\n+    List<ListTask> tasks = new ArrayList<>(THREAD_COUNT);\n+\n+    for (int i = 0; i < THREAD_COUNT; i++) {\n+      tasks.add(new ListTask(fs, testDir));\n+    }\n+\n+    ExecutorService es = null;\n+    try {\n+      es = Executors.newFixedThreadPool(THREAD_COUNT);\n+\n+      List<Future<Integer>> futures = es.invokeAll(tasks);\n+\n+      for (Future<Integer> future : futures) {\n+        Assert.assertTrue(future.isDone());\n+\n+        // we are using Callable<V>, so if an exception\n+        // occurred during the operation, it will be thrown\n+        // when we call get\n+        long fileCount = future.get();\n+        assertEquals(\"The list should always contain 1 file.\",1, fileCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d45647620ecc0d3994239beb4f3b6597d58bbdd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI3NDgwOA==", "bodyText": "Thanks for the review Da.  Fixed!", "url": "https://github.com/apache/hadoop/pull/2099#discussion_r445274808", "createdAt": "2020-06-25T02:34:49Z", "author": {"login": "ThomasMarquardt"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azure/ITestNativeAzureFileSystemConcurrencyLive.java", "diffHunk": "@@ -130,15 +131,55 @@ public void testConcurrentDeleteFile() throws Exception {\n     }\n   }\n \n+  /**\n+   * Validate the bug fix for HADOOP-17089.  Please note that we were never\n+   * able to reproduce this except during a Spark job that ran for multiple days\n+   * and in a hacked-up azure-storage SDK that added sleep before and after\n+   * the call to factory.setNamespaceAware(true) as shown in the description of\n+   * https://github.com/Azure/azure-storage-java/pull/546.\n+   */\n+  @Test(timeout = TEST_EXECUTION_TIMEOUT)\n+  public void testConcurrentList() throws Exception {\n+    final Path testDir = new Path(\"/tmp/data-loss/11230174258112/_temporary/0/_temporary/attempt_20200624190514_0006_m_0\");\n+    final Path testFile = new Path(testDir, \"part-00004-15ea87b1-312c-4fdf-1820-95afb3dfc1c3-a010.snappy.parquet\");\n+    fs.create(testFile).close();\n+    List<ListTask> tasks = new ArrayList<>(THREAD_COUNT);\n+\n+    for (int i = 0; i < THREAD_COUNT; i++) {\n+      tasks.add(new ListTask(fs, testDir));\n+    }\n+\n+    ExecutorService es = null;\n+    try {\n+      es = Executors.newFixedThreadPool(THREAD_COUNT);\n+\n+      List<Future<Integer>> futures = es.invokeAll(tasks);\n+\n+      for (Future<Integer> future : futures) {\n+        Assert.assertTrue(future.isDone());\n+\n+        // we are using Callable<V>, so if an exception\n+        // occurred during the operation, it will be thrown\n+        // when we call get\n+        long fileCount = future.get();\n+        assertEquals(\"The list should always contain 1 file.\",1, fileCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NjU2Nw=="}, "originalCommit": {"oid": "1d45647620ecc0d3994239beb4f3b6597d58bbdd"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3465, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}