{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI5NzY1OTgw", "number": 2061, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0MDo1NVrOEDTmlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0MDo1NVrOEDTmlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAyMzU3OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0MDo1NVrOGgPz8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTowNzo0MFrOGhYZ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjY3Mw==", "bodyText": "Here in the FileStatus we have resolved the mount and giving details of the destination. Any idea where the link.getTargetLink() in the FileStatus can be or is used?\nIf we are resolving the mount entry, This is actually the FileStatus of the destination, if the destination itself is a symlink, in that case instead of link.getTargetLink() shouldn't status.getSymlink() be done?\nSince all the other details like permissions and stuff we are having of the destination, the intent seems to resolve it as the destination directory rather than projecting this as a symlink to the end user. else if we see in linux the symlink doesn't shows the destination permission or other details it shows it's own details while listing :\nlrwxrwxrwx  1 ayush ayush    3 Jun  8 04:52 sym_f -> txt\n-rw-rw-r--  1 ayush ayush    0 Jun  8 11:05 txt\n\nIn RBF also for listing on mount points, we don't denote them as symlinks, instead just pass the destination FileStatus with name resolved...\nIs it possible we keep the assertions as it is and change link.getTargetLink() and specify that as per the destination?", "url": "https://github.com/apache/hadoop/pull/2061#discussion_r436466673", "createdAt": "2020-06-08T05:40:55Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1202,19 +1202,18 @@ public FileStatus getFileStatus(Path f) throws IOException {\n           INodeLink<FileSystem> link = (INodeLink<FileSystem>) inode;\n           try {\n             String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            if(\"\".equals(linkedPath)) {\n+            if (\"\".equals(linkedPath)) {\n               linkedPath = \"/\";\n             }\n             FileStatus status =\n-                ((ChRootedFileSystem)link.getTargetFileSystem())\n-                .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+                ((ChRootedFileSystem) link.getTargetFileSystem()).getMyFs()\n+                    .getFileStatus(new Path(linkedPath));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                link.getTargetLink(),\n+                new Path(inode.fullPath).makeQualified(myUri, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f0c7fe440d44364299bfe012c8c332c2726ca7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MDE0Mw==", "bodyText": "@ayushtkn , Thanks for the review!\nHere ViewFS mount points seems to be designed to show them as symlinks. This can be figured out by looking at ViewFsBaseTest.java#testListOnInternalDirsOfMountTable (which was way old test) and also I had discussion with Sanjay on that.\nSo, I don't think it's reasonable to change that assumption/behavior now.\n\nAny idea where the link.getTargetLink() in the FileStatus can be or is used?\nFileStatus has getSymlink API. Also Filestatus path represents link path. and symlink path represents target path. This seems to be correct.\n\nComing to permissions bit I just realized symlink showing its own permissions instead of target in macos also. ( but we just changed the behavior in HADOOP-17029 where we display target dir's permissions and group. cc: @abhishekdas99, as per linux/macos the older behavior seems to be ok, but ViewFS perspective it seems to be good to show target permissions instead of showing some bogus permissions. I think in ViewFS case the in-memory InternalViewFSDirFS was created by fs but we can not really cary who created what mount, we will just configure in xml that link and would not have any info who added that, all should be at admins permission control only ). I assume in linux mount link dir will be created with the permission to the current user who created right? Since we don't have that link creation logic dynamically at ViewFS, I don't think we can behave exactly same as Linux here?\nMy another original question was why we should not have symlink on dir?\nis it because HDFS does not support that? If that because of hdfs, should we move that assert under HdfsNamedFileStatus? I don't know what else will break here", "url": "https://github.com/apache/hadoop/pull/2061#discussion_r436490143", "createdAt": "2020-06-08T06:56:25Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1202,19 +1202,18 @@ public FileStatus getFileStatus(Path f) throws IOException {\n           INodeLink<FileSystem> link = (INodeLink<FileSystem>) inode;\n           try {\n             String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            if(\"\".equals(linkedPath)) {\n+            if (\"\".equals(linkedPath)) {\n               linkedPath = \"/\";\n             }\n             FileStatus status =\n-                ((ChRootedFileSystem)link.getTargetFileSystem())\n-                .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+                ((ChRootedFileSystem) link.getTargetFileSystem()).getMyFs()\n+                    .getFileStatus(new Path(linkedPath));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                link.getTargetLink(),\n+                new Path(inode.fullPath).makeQualified(myUri, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjY3Mw=="}, "originalCommit": {"oid": "32f0c7fe440d44364299bfe012c8c332c2726ca7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUzNjQyOQ==", "bodyText": "I think the intent behind that assertion is little different.\nAn entity can be either a directory, file or a symlink. In linux while listing, directory is denoted as d, link by l and file by -, So there are three categories (Directory/File/Link) not just two (Directory/File)\ndrwxrwxr-x  2 ayush ayush 4096 Jun  8 04:25 dir/\nlrwxrwxrwx  1 ayush ayush    4 Jun  8 04:25 sym_dir -> dir//\n-rw-rw-r--  1 ayush ayush    0 Jun  8 11:05 txt\n\nA symlink can point to both directory and file, but isn't itself a directory or file. It is link, and has its own identity.\nIn Hadoop, to distinguish between the three categories, the logic seems like :\nisDir==true --> It is a Directory\nisDir==false --> Can be a file or Symlink. So to conclude further whether a file or link\nisDir==false and link==null --> it is file\nisDir==false and link!=null --> it is a symlink\nThe assertion message \"A directory can not be a symlink\" also tries to depict this only. Since if isDir is true that means it is a directory so it can't be a symlink, it can be a symlink when it isn't neither directory nor file.\nNow regarding changing it here in ViewFS, allowing isDir to be true and as well as having a link.\nIf someone is having an application code with\nif(sDir==false and link!=null) --> it is a symlink\ndo work considering symlink.\n\nHis code will break, Since this check won't return true post this change. Would this change incompatible?\nNow regarding inconsistency between getFileStatus and listStatus, if we are considering a mount entry as link, so getFileStatus should follow the similar semantics as listStatus, A same entity can not be treated differently. If we want to treat it as link, we can think of makin getFileStatus adapt..\nJust my thoughts, not much idea about the actual discussions what was the intent then..", "url": "https://github.com/apache/hadoop/pull/2061#discussion_r436536429", "createdAt": "2020-06-08T08:34:29Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1202,19 +1202,18 @@ public FileStatus getFileStatus(Path f) throws IOException {\n           INodeLink<FileSystem> link = (INodeLink<FileSystem>) inode;\n           try {\n             String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            if(\"\".equals(linkedPath)) {\n+            if (\"\".equals(linkedPath)) {\n               linkedPath = \"/\";\n             }\n             FileStatus status =\n-                ((ChRootedFileSystem)link.getTargetFileSystem())\n-                .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+                ((ChRootedFileSystem) link.getTargetFileSystem()).getMyFs()\n+                    .getFileStatus(new Path(linkedPath));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                link.getTargetLink(),\n+                new Path(inode.fullPath).makeQualified(myUri, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjY3Mw=="}, "originalCommit": {"oid": "32f0c7fe440d44364299bfe012c8c332c2726ca7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3MDY2Ng==", "bodyText": "isDir==true --> It is a Directory\nisDir==false --> Can be a file or Symlink. So to conclude further whether a file or link\nisDir==false and link==null --> it is file\nisDir==false and link!=null --> it is a symlink\n\nHere nio Files APIs return true for isDirectory API. But here we cannot make that judgement with this information. I saw that 'l' part along with directory. However, native filesystems seems to be capturing the info about target filesystem and return isDir true based on that. It denotes as symlink along with permission bits.\nMy original thought was to change GetFileStatus see comment as you thought here:\nBut after verifying tests on local mac, I realized isDirectory is getting returned tru in that cases, but here we cannot make that decision. in MAC it was showing as folder icon if target is a directory and isDirectory as true.\nYes, they are incompatible changes( either the change done in listStatus/GetFileStatus)( we will mark them), and behavioral corrections in other side.", "url": "https://github.com/apache/hadoop/pull/2061#discussion_r436770666", "createdAt": "2020-06-08T14:53:42Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1202,19 +1202,18 @@ public FileStatus getFileStatus(Path f) throws IOException {\n           INodeLink<FileSystem> link = (INodeLink<FileSystem>) inode;\n           try {\n             String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            if(\"\".equals(linkedPath)) {\n+            if (\"\".equals(linkedPath)) {\n               linkedPath = \"/\";\n             }\n             FileStatus status =\n-                ((ChRootedFileSystem)link.getTargetFileSystem())\n-                .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+                ((ChRootedFileSystem) link.getTargetFileSystem()).getMyFs()\n+                    .getFileStatus(new Path(linkedPath));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                link.getTargetLink(),\n+                new Path(inode.fullPath).makeQualified(myUri, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjY3Mw=="}, "originalCommit": {"oid": "32f0c7fe440d44364299bfe012c8c332c2726ca7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzNzIyOA==", "bodyText": "Well things are different at different places and TBH I don't have a strong opinion on which is the best way to do.\nOn a personal note changing getFileStatus() seems to be little more safe to me, As those assertions and stuffs stays as it is and changes gets restricted to viewFS only and no changes to links interpretations and stuffs. (my assumption, it should be safe, haven't digged in much)\n      return new FileStatus(0, true, 0, 0, creationTime, creationTime,\n          PERMISSION_555, ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n\n          new Path(theInternalDir.fullPath).makeQualified(\n              myUri, ROOT_PATH));\n\ngetFileStatus() is treating it as a link only(but with isDir true), it doesn't shows target file system permissions and times. That also need to be changed similarly to  HADOOP-17029, to resolve permissions and stuff from target file system. FileStatus should be same through both API's? We can make things get in sync by doing that, and get away with inconsistencies b/w these two API's as of now..\nChanges in getListing() apart from making the APIs in sync(That also we need to change in getFileStatus() as well since there 'true' is hardcoded), we seems to change symlink interpretation logics as well to get that in sync with other systems and I think that might break things for people relying on checks like this : if (isDir==false and link!=null)`, May be we can have a follow up JIRA as well, to change link interpretations with bigger audience.\nBut in any case, I don't have oppositions to any of the approach, all up to you whichever way you want to go ahead. :-)", "url": "https://github.com/apache/hadoop/pull/2061#discussion_r436837228", "createdAt": "2020-06-08T16:28:51Z", "author": {"login": "ayushtkn"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1202,19 +1202,18 @@ public FileStatus getFileStatus(Path f) throws IOException {\n           INodeLink<FileSystem> link = (INodeLink<FileSystem>) inode;\n           try {\n             String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            if(\"\".equals(linkedPath)) {\n+            if (\"\".equals(linkedPath)) {\n               linkedPath = \"/\";\n             }\n             FileStatus status =\n-                ((ChRootedFileSystem)link.getTargetFileSystem())\n-                .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+                ((ChRootedFileSystem) link.getTargetFileSystem()).getMyFs()\n+                    .getFileStatus(new Path(linkedPath));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                link.getTargetLink(),\n+                new Path(inode.fullPath).makeQualified(myUri, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjY3Mw=="}, "originalCommit": {"oid": "32f0c7fe440d44364299bfe012c8c332c2726ca7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE5OTg4OQ==", "bodyText": "From ur previous comment:\ndrwxrwxr-x  2 ayush ayush 4096 Jun  8 04:25 dir/\nlrwxrwxrwx  1 ayush ayush    4 Jun  8 04:25 sym_dir -> dir//\n-rw-rw-r--  1 ayush ayush    0 Jun  8 11:05 txt\n\nThis is from permission bits. If you look at our FSPermission class we have a stickybit to denote its a file or not. Unfortunately it's just a boolean, it does not have 3rd option to represent link.\npublic FsPermission(FsAction u, FsAction g, FsAction o, boolean sb) {\n    set(u, g, o, sb);\n  }\n\n(nio) Files.isDirectory returns true for a symlink if target is dir. Where as Hadoop FileStatus class does not allow if symlink represent as dir. Behaviors are confusing :-(\nThat means we don't have enough info captured in Permissions or FileStatus classes to represent symlink properly.\nComing to getFileStatus question:\nIn your above quoted code runs on internal directory, thats not a link. Here internal directory means, if you have link src as /a/b/c, here a, b are internal dirs (here it's always a dir, so we can safely hardcode to true)  and c is a link dir.\nGetFileStatus run in input path, so, when input path is link, it would have resolved and run getFileStatus on targetFileSystem#getFileStatus. Where listStatus gets the FileStatus of immediate childrens. So, listStatus of /a/b , since be is an internal dir, it will go to InetrnalViewFsDir and run listStatus. and one of its child c is a link. so previously treating that children FileStatus object as symlink with isDir is false, irrespective whether target is file/dir. One safe assumption we can keep is, in ViewFS target would always be a directory only. I don't think anyone would configure a file as target link. But we can not leave that case anyway for consistency. Hope this helps. I also don't have very clear opinions here. Symlinks seems to mess around here. :-( .\nBut I like the idea of representing as symlink as that one of fs features. but consistent behavior is what we need to find here. If we wanted to fix getFileStatus(\"/a/b/c\"), we need to make isDir as false, but current it will return true as it runs on targetFileSystem and also give symlink with tagetFs path. Here no way user  know whether the target is file or dir, unless he directly access symlinked path and see.\nLet me catchup Sanjay, if he has some thoughts around.\nBut in any case, I don't have oppositions to any of the approach, all up to you whichever way you want to go ahead. :-)\nThank you. Let's figure out what would be the correct thing to do. I have no plans to move ahead until we find some reasonable solution here.", "url": "https://github.com/apache/hadoop/pull/2061#discussion_r437199889", "createdAt": "2020-06-09T07:40:53Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1202,19 +1202,18 @@ public FileStatus getFileStatus(Path f) throws IOException {\n           INodeLink<FileSystem> link = (INodeLink<FileSystem>) inode;\n           try {\n             String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            if(\"\".equals(linkedPath)) {\n+            if (\"\".equals(linkedPath)) {\n               linkedPath = \"/\";\n             }\n             FileStatus status =\n-                ((ChRootedFileSystem)link.getTargetFileSystem())\n-                .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+                ((ChRootedFileSystem) link.getTargetFileSystem()).getMyFs()\n+                    .getFileStatus(new Path(linkedPath));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                link.getTargetLink(),\n+                new Path(inode.fullPath).makeQualified(myUri, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjY3Mw=="}, "originalCommit": {"oid": "32f0c7fe440d44364299bfe012c8c332c2726ca7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1NjAyMA==", "bodyText": "@ayushtkn\nI have verified symlinks behavior in HDFS.\npublic void testSymlinkOnHDFS() throws Exception {\n    // add ur hdfs uri here: ex hdfs://10.0.1.75:9000\n    URI hdfsURI = dfs.getUri();\n    FileSystem.enableSymlinks();\n    try (FileSystem hdfs = new DistributedFileSystem()) {\n      hdfs.initialize(hdfsURI, new HdfsConfiguration());\n      final Path targetLinkDir = new Path(\"/user\", \"targetRegularDir\");\n      hdfs.mkdirs(targetLinkDir);\n\n      Path symLinkDir = new Path(\"/links/linkDir\");\n      hdfs.createSymlink(targetLinkDir, symLinkDir, true);\n\n      // ListStatus Test\n      FileStatus[] listStatus = hdfs.listStatus(new Path(\"/links\"));\n      FileStatus fsFromLs = listStatus[0]; // FileStatus of /links/linkDir\n      Assert.assertEquals(fsFromLs.isDirectory(), false);\n      Assert.assertEquals(\"/links/linkDir\",\n          Path.getPathWithoutSchemeAndAuthority(fsFromLs.getPath()).toString());\n\n      // GetFileStatus test\n      // FileStatus of /links/linkDir\n      FileStatus fileStatus = hdfs.getFileStatus(symLinkDir);\n      Assert.assertEquals(true, fileStatus.isDirectory());\n      // resolved to FileStatus of /user/targetRegularDir\n      Assert.assertEquals(\"/user/targetRegularDir\", Path\n          .getPathWithoutSchemeAndAuthority(fileStatus.getPath()).toString());\n    }\n  }\n\nIt turns out that the behavior of listStatus  and GetFileStatus are different. They both returning different FileStatus. Same behavior in ViewFS also.\nGetFileStatus(/test), just runs on resolved path directly. So, it will not be represented as symLink.\nListStatus(/) of gets /test as children FileStatus object. But that represents as symLink.\nProbably we should just clarify the behavior in user guide and API docs about the behaviors in symlinks case?  Otherwise fixing this needs to be done all other places and it will be incompatible change across.\nOne advantage I see with the existing behavior is that, with listStatus we can know dir is symlink. If one wants to know targetFs details, then issue GetFileStatus on that path will resolved to targetFS and gets the FileStatus at targetFS.\nI will also check with Sanjay about his opinions on this.", "url": "https://github.com/apache/hadoop/pull/2061#discussion_r437656020", "createdAt": "2020-06-09T19:07:40Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1202,19 +1202,18 @@ public FileStatus getFileStatus(Path f) throws IOException {\n           INodeLink<FileSystem> link = (INodeLink<FileSystem>) inode;\n           try {\n             String linkedPath = link.getTargetFileSystem().getUri().getPath();\n-            if(\"\".equals(linkedPath)) {\n+            if (\"\".equals(linkedPath)) {\n               linkedPath = \"/\";\n             }\n             FileStatus status =\n-                ((ChRootedFileSystem)link.getTargetFileSystem())\n-                .getMyFs().getFileStatus(new Path(linkedPath));\n-            result[i++] = new FileStatus(status.getLen(), false,\n-              status.getReplication(), status.getBlockSize(),\n-              status.getModificationTime(), status.getAccessTime(),\n-              status.getPermission(), status.getOwner(), status.getGroup(),\n-              link.getTargetLink(),\n-              new Path(inode.fullPath).makeQualified(\n-                  myUri, null));\n+                ((ChRootedFileSystem) link.getTargetFileSystem()).getMyFs()\n+                    .getFileStatus(new Path(linkedPath));\n+            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),\n+                status.getReplication(), status.getBlockSize(),\n+                status.getModificationTime(), status.getAccessTime(),\n+                status.getPermission(), status.getOwner(), status.getGroup(),\n+                link.getTargetLink(),\n+                new Path(inode.fullPath).makeQualified(myUri, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjY3Mw=="}, "originalCommit": {"oid": "32f0c7fe440d44364299bfe012c8c332c2726ca7"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3419, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}