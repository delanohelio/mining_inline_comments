{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NTU2MDMy", "number": 2368, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDowNzo1MFrOErocaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoxOToyM1rOE-AzWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTg2ODU5OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDowNzo1MFrOHegZkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoxMjo0NFrOHgWx8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MDE2Mg==", "bodyText": "Can this LOG/validation be moved to AbfsInputStreamContext.build() ?", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r501750162", "createdAt": "2020-10-08T14:07:50Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -89,9 +91,24 @@ public AbfsInputStream(\n     this.tolerateOobAppends = abfsInputStreamContext.isTolerateOobAppends();\n     this.eTag = eTag;\n     this.readAheadEnabled = true;\n+    this.alwaysReadBufferSize\n+        = abfsInputStreamContext.shouldReadBufferSizeAlways();\n     this.cachedSasToken = new CachedSASToken(\n         abfsInputStreamContext.getSasTokenRenewPeriodForStreamsInSeconds());\n     this.streamStatistics = abfsInputStreamContext.getStreamStatistics();\n+    readAheadBlockSize = abfsInputStreamContext.getReadAheadBlockSize();\n+    if (this.bufferSize > readAheadBlockSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTcxMg==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r503689712", "createdAt": "2020-10-13T06:12:44Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -89,9 +91,24 @@ public AbfsInputStream(\n     this.tolerateOobAppends = abfsInputStreamContext.isTolerateOobAppends();\n     this.eTag = eTag;\n     this.readAheadEnabled = true;\n+    this.alwaysReadBufferSize\n+        = abfsInputStreamContext.shouldReadBufferSizeAlways();\n     this.cachedSasToken = new CachedSASToken(\n         abfsInputStreamContext.getSasTokenRenewPeriodForStreamsInSeconds());\n     this.streamStatistics = abfsInputStreamContext.getStreamStatistics();\n+    readAheadBlockSize = abfsInputStreamContext.getReadAheadBlockSize();\n+    if (this.bufferSize > readAheadBlockSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MDE2Mg=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTg3MjY3OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDowODozOFrOHegcCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoxMzowMFrOHgWyRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MDc5Mw==", "bodyText": "nit: typo? initialize it get can set", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r501750793", "createdAt": "2020-10-08T14:08:38Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -89,9 +91,24 @@ public AbfsInputStream(\n     this.tolerateOobAppends = abfsInputStreamContext.isTolerateOobAppends();\n     this.eTag = eTag;\n     this.readAheadEnabled = true;\n+    this.alwaysReadBufferSize\n+        = abfsInputStreamContext.shouldReadBufferSizeAlways();\n     this.cachedSasToken = new CachedSASToken(\n         abfsInputStreamContext.getSasTokenRenewPeriodForStreamsInSeconds());\n     this.streamStatistics = abfsInputStreamContext.getStreamStatistics();\n+    readAheadBlockSize = abfsInputStreamContext.getReadAheadBlockSize();\n+    if (this.bufferSize > readAheadBlockSize) {\n+      LOG.debug(\n+          \"fs.azure.read.request.size[={}] is configured for higher size than \"\n+              + \"fs.azure.read.readahead.blocksize[={}]. Auto-align \"\n+              + \"readAhead block size to be same as readRequestSize.\",\n+          bufferSize, readAheadBlockSize);\n+      readAheadBlockSize = this.bufferSize;\n+    }\n+\n+    // Propagate the config values to ReadBufferManager so that the first instance\n+    // to initialize it get can set the readAheadBlockSize", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTc5OQ==", "bodyText": "Fixed", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r503689799", "createdAt": "2020-10-13T06:13:00Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -89,9 +91,24 @@ public AbfsInputStream(\n     this.tolerateOobAppends = abfsInputStreamContext.isTolerateOobAppends();\n     this.eTag = eTag;\n     this.readAheadEnabled = true;\n+    this.alwaysReadBufferSize\n+        = abfsInputStreamContext.shouldReadBufferSizeAlways();\n     this.cachedSasToken = new CachedSASToken(\n         abfsInputStreamContext.getSasTokenRenewPeriodForStreamsInSeconds());\n     this.streamStatistics = abfsInputStreamContext.getStreamStatistics();\n+    readAheadBlockSize = abfsInputStreamContext.getReadAheadBlockSize();\n+    if (this.bufferSize > readAheadBlockSize) {\n+      LOG.debug(\n+          \"fs.azure.read.request.size[={}] is configured for higher size than \"\n+              + \"fs.azure.read.readahead.blocksize[={}]. Auto-align \"\n+              + \"readAhead block size to be same as readRequestSize.\",\n+          bufferSize, readAheadBlockSize);\n+      readAheadBlockSize = this.bufferSize;\n+    }\n+\n+    // Propagate the config values to ReadBufferManager so that the first instance\n+    // to initialize it get can set the readAheadBlockSize", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MDc5Mw=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTkxMTM0OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/constants/FileSystemConfigurations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoxNjozMVrOHegz1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoxMzoxMFrOHgWyfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1Njg4NQ==", "bodyText": "I think putting these config together with DEFAULT_READ_BUFFER_SIZE would make code more readable. Also use 4 * ONE_MB as used above.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r501756885", "createdAt": "2020-10-08T14:16:31Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/constants/FileSystemConfigurations.java", "diffHunk": "@@ -74,6 +74,9 @@\n   public static final String DEFAULT_FS_AZURE_APPEND_BLOB_DIRECTORIES = \"\";\n \n   public static final int DEFAULT_READ_AHEAD_QUEUE_DEPTH = -1;\n+  public static final boolean DEFAULT_ALWAYS_READ_BUFFER_SIZE = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTg1NQ==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r503689855", "createdAt": "2020-10-13T06:13:10Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/constants/FileSystemConfigurations.java", "diffHunk": "@@ -74,6 +74,9 @@\n   public static final String DEFAULT_FS_AZURE_APPEND_BLOB_DIRECTORIES = \"\";\n \n   public static final int DEFAULT_READ_AHEAD_QUEUE_DEPTH = -1;\n+  public static final boolean DEFAULT_ALWAYS_READ_BUFFER_SIZE = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1Njg4NQ=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTk0MTAwOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoyMjo0MFrOHehGfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoxNzoyOVrOHgW4yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MTY2Mw==", "bodyText": "JIRA and PR description says we are trying to read till bufferSize always rather than just the requested length but as per this line we are enabling the buffer manager readahead as well which is bypassed in random read in gen2 as per line 205 below. PS: I have never seen gen1 code though.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r501761663", "createdAt": "2020-10-08T14:22:40Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -178,11 +195,15 @@ private int readOneBlock(final byte[] b, final int off, final int len) throws IO\n         buffer = new byte[bufferSize];\n       }\n \n-      // Enable readAhead when reading sequentially\n-      if (-1 == fCursorAfterLastRead || fCursorAfterLastRead == fCursor || b.length >= bufferSize) {\n+      if (alwaysReadBufferSize) {\n         bytesRead = readInternal(fCursor, buffer, 0, bufferSize, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5MTQ2Ng==", "bodyText": "AlwaysReadBufferSize helped the IO pattern to match the Gen1 run. But to be performant readAhead had to be enabled. For the customer scenario explained in the JIRA , for the small row groups for an overall small parquet file size, reading whole buffer size along with readAhead bought good performance.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r503691466", "createdAt": "2020-10-13T06:17:29Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -178,11 +195,15 @@ private int readOneBlock(final byte[] b, final int off, final int len) throws IO\n         buffer = new byte[bufferSize];\n       }\n \n-      // Enable readAhead when reading sequentially\n-      if (-1 == fCursorAfterLastRead || fCursorAfterLastRead == fCursor || b.length >= bufferSize) {\n+      if (alwaysReadBufferSize) {\n         bytesRead = readInternal(fCursor, buffer, 0, bufferSize, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MTY2Mw=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTk0NzU2OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoyMzo1NVrOHehKhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDozNTozMFrOH6Lj7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MjY5Mw==", "bodyText": "Would like to understand the reasoning behind this. Thanks.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r501762693", "createdAt": "2020-10-08T14:23:55Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -223,16 +244,19 @@ private int readInternal(final long position, final byte[] b, final int offset,\n \n       // queue read-aheads\n       int numReadAheads = this.readAheadQueueDepth;\n-      long nextSize;\n       long nextOffset = position;\n+      // First read to queue needs to be of readBufferSize and later", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5MzYzNw==", "bodyText": "Couple of things here:\n\nThe earlier code allowed bufferSize to be configurable whereas ReadAhead buffer size was fixed. And each time loop is done, read issued was always for bufferSize which can lead to gaps/holes in the readAhead range done.\nThere is no validation for 4MB as a fixed size for readAhead is optimal for all sequential reads. Having a higher readAhead range for apps like DFSIO which are guaranteed sequential and doing higher readAhead ranges in background can be performant.\nIn this PR, the bug in point 1 is fixed and also a provision to configure readAhead buffer size is provided.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r503693637", "createdAt": "2020-10-13T06:23:22Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -223,16 +244,19 @@ private int readInternal(final long position, final byte[] b, final int offset,\n \n       // queue read-aheads\n       int numReadAheads = this.readAheadQueueDepth;\n-      long nextSize;\n       long nextOffset = position;\n+      // First read to queue needs to be of readBufferSize and later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MjY5Mw=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY0Nzc3NA==", "bodyText": "What do you mean by gaps/holes in the readAhead range done here?\nHave you done any experiments on this readAheadBlockSize config? If so, please share.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r507647774", "createdAt": "2020-10-19T10:43:03Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -223,16 +244,19 @@ private int readInternal(final long position, final byte[] b, final int offset,\n \n       // queue read-aheads\n       int numReadAheads = this.readAheadQueueDepth;\n-      long nextSize;\n       long nextOffset = position;\n+      // First read to queue needs to be of readBufferSize and later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MjY5Mw=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgwMDAxNQ==", "bodyText": "If the buffer gets overwritten by config to 16MB, the readAhead buffer size will still remain to be 4MB as it was a code static. The loop done will start issuing readAheads in 16 MB buffer sizes, the request to readAhead will be:\noffset=0, Length=16MB\noffset=16MB, Length=32MB\nBut the readAhead buffer size is stuck at 4 MB. so it will read only:\noffset=0 Length=4MB\noffset=16MB Length=4MB\nGap being at 4MB to 16MB here.\nThis bug is getting fixed. Tests for all possible combinations here has been added to the tests of this PR.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r510800015", "createdAt": "2020-10-23T10:50:08Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -223,16 +244,19 @@ private int readInternal(final long position, final byte[] b, final int offset,\n \n       // queue read-aheads\n       int numReadAheads = this.readAheadQueueDepth;\n-      long nextSize;\n       long nextOffset = position;\n+      // First read to queue needs to be of readBufferSize and later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MjY5Mw=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4NzkyNQ==", "bodyText": "I don't think there is any bug in the current production code as such. As far as I understand the code the change is introduced becuase new config is introduced.\nNow my question is why not use readAheadBlockSize for the first call as well? The calls would be like\noffset=0 Length=4MB\noffset=4MB Length=4MB\nSorry to say this but honestly speaking, introducing so many configs is making the code complex and confusing.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r522187925", "createdAt": "2020-11-12T15:21:51Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -223,16 +244,19 @@ private int readInternal(final long position, final byte[] b, final int offset,\n \n       // queue read-aheads\n       int numReadAheads = this.readAheadQueueDepth;\n-      long nextSize;\n       long nextOffset = position;\n+      // First read to queue needs to be of readBufferSize and later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MjY5Mw=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2ODcwNA==", "bodyText": "Read buffer size config being available to be modified, fixed read ahead buffer size and issuing read aheads by buffer size is the current prod behaviour and will function as the picture attached. This will need fixing.\nAnd as for deprecating read buffer size config and only use the new read ahead buffer size config. The config has been available since GA, and hence deprecating it would not be feasible. (Also for clients who are disabling readAheads to use readahead buffer size for reads might be confusing too).\nAs for the number of different configs present for read, 1 and 2 configs already were present while this PR is introducing 3 and 4. So total of 4 configs.\n\nfs.azure.read.request.size\nfs.azure.readaheadqueue.depth\nfs.azure.read.alwaysReadBufferSize => For Gen1 migrating customers\nfs.azure.read.readahead.blocksize => Was one that needed fixing long back as there is no validation on 4 MB being the right size for all workloads. Just the way read buffer size can be modified.\n\nAll these changes are being added based on various customer issues and experiences that we are dealing with. Instead of spending our time in providing patches that can enable them to test various combinations, having these options over a config for their testing saves our dev time to improve the service. As you can see in the PR, the defaults introduced by these configs will retain the current prod behavior.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r530768704", "createdAt": "2020-11-26T04:34:47Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -223,16 +244,19 @@ private int readInternal(final long position, final byte[] b, final int offset,\n \n       // queue read-aheads\n       int numReadAheads = this.readAheadQueueDepth;\n-      long nextSize;\n       long nextOffset = position;\n+      // First read to queue needs to be of readBufferSize and later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MjY5Mw=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2ODg3Nw==", "bodyText": "Have synced with @mukund-thakur over mail thread further to clear the understanding.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r530768877", "createdAt": "2020-11-26T04:35:30Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java", "diffHunk": "@@ -223,16 +244,19 @@ private int readInternal(final long position, final byte[] b, final int offset,\n \n       // queue read-aheads\n       int numReadAheads = this.readAheadQueueDepth;\n-      long nextSize;\n       long nextOffset = position;\n+      // First read to queue needs to be of readBufferSize and later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MjY5Mw=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTk1NDQwOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoyNToxM1rOHehO1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoyMzozMVrOHgXBgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2Mzc5Nw==", "bodyText": "nit: use 4 * ONE_MB consistent as everywhere else.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r501763797", "createdAt": "2020-10-08T14:25:13Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java", "diffHunk": "@@ -37,10 +39,10 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(ReadBufferManager.class);\n \n   private static final int NUM_BUFFERS = 16;\n-  private static final int BLOCK_SIZE = 4 * 1024 * 1024;\n   private static final int NUM_THREADS = 8;\n   private static final int DEFAULT_THRESHOLD_AGE_MILLISECONDS = 3000; // have to see if 3 seconds is a good threshold\n \n+  private static int blockSize = 4 * 1024 * 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5MzY5Nw==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r503693697", "createdAt": "2020-10-13T06:23:31Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java", "diffHunk": "@@ -37,10 +39,10 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(ReadBufferManager.class);\n \n   private static final int NUM_BUFFERS = 16;\n-  private static final int BLOCK_SIZE = 4 * 1024 * 1024;\n   private static final int NUM_THREADS = 8;\n   private static final int DEFAULT_THRESHOLD_AGE_MILLISECONDS = 3000; // have to see if 3 seconds is a good threshold\n \n+  private static int blockSize = 4 * 1024 * 1024;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2Mzc5Nw=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjE1MTM3OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTowNToxNFrOHejKoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoxNDoxNlrOH6_1mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NTQ4OA==", "bodyText": "Why all these changes ? Why not just initilize the blockSize in init() ?", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r501795488", "createdAt": "2020-10-08T15:05:14Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java", "diffHunk": "@@ -49,21 +51,37 @@\n   private Queue<ReadBuffer> readAheadQueue = new LinkedList<>(); // queue of requests that are not picked up by any worker thread yet\n   private LinkedList<ReadBuffer> inProgressList = new LinkedList<>(); // requests being processed by worker threads\n   private LinkedList<ReadBuffer> completedReadList = new LinkedList<>(); // buffers available for reading\n-  private static final ReadBufferManager BUFFER_MANAGER; // singleton, initialized in static initialization block\n+  private static ReadBufferManager bufferManager; // singleton, initialized in static initialization block\n+  private static final ReentrantLock LOCK = new ReentrantLock();\n \n-  static {\n-    BUFFER_MANAGER = new ReadBufferManager();\n-    BUFFER_MANAGER.init();\n+  static ReadBufferManager getBufferManager() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NzY1OA==", "bodyText": "For singleton classes its a common practice to lock around the new instance creation within the getInstance() method. Also, didnt want to make any changes to init method.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r504647658", "createdAt": "2020-10-14T12:47:38Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java", "diffHunk": "@@ -49,21 +51,37 @@\n   private Queue<ReadBuffer> readAheadQueue = new LinkedList<>(); // queue of requests that are not picked up by any worker thread yet\n   private LinkedList<ReadBuffer> inProgressList = new LinkedList<>(); // requests being processed by worker threads\n   private LinkedList<ReadBuffer> completedReadList = new LinkedList<>(); // buffers available for reading\n-  private static final ReadBufferManager BUFFER_MANAGER; // singleton, initialized in static initialization block\n+  private static ReadBufferManager bufferManager; // singleton, initialized in static initialization block\n+  private static final ReentrantLock LOCK = new ReentrantLock();\n \n-  static {\n-    BUFFER_MANAGER = new ReadBufferManager();\n-    BUFFER_MANAGER.init();\n+  static ReadBufferManager getBufferManager() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NTQ4OA=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2OTExNg==", "bodyText": "Retaining the change as current change has no functional issues.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r530769116", "createdAt": "2020-11-26T04:36:30Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java", "diffHunk": "@@ -49,21 +51,37 @@\n   private Queue<ReadBuffer> readAheadQueue = new LinkedList<>(); // queue of requests that are not picked up by any worker thread yet\n   private LinkedList<ReadBuffer> inProgressList = new LinkedList<>(); // requests being processed by worker threads\n   private LinkedList<ReadBuffer> completedReadList = new LinkedList<>(); // buffers available for reading\n-  private static final ReadBufferManager BUFFER_MANAGER; // singleton, initialized in static initialization block\n+  private static ReadBufferManager bufferManager; // singleton, initialized in static initialization block\n+  private static final ReentrantLock LOCK = new ReentrantLock();\n \n-  static {\n-    BUFFER_MANAGER = new ReadBufferManager();\n-    BUFFER_MANAGER.init();\n+  static ReadBufferManager getBufferManager() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NTQ4OA=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyNTM3MA==", "bodyText": "FWIW, synchronize on the Class object is a standard pattern here, but the lock is fine, just a bit of extra coding", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r531625370", "createdAt": "2020-11-27T14:14:16Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java", "diffHunk": "@@ -49,21 +51,37 @@\n   private Queue<ReadBuffer> readAheadQueue = new LinkedList<>(); // queue of requests that are not picked up by any worker thread yet\n   private LinkedList<ReadBuffer> inProgressList = new LinkedList<>(); // requests being processed by worker threads\n   private LinkedList<ReadBuffer> completedReadList = new LinkedList<>(); // buffers available for reading\n-  private static final ReadBufferManager BUFFER_MANAGER; // singleton, initialized in static initialization block\n+  private static ReadBufferManager bufferManager; // singleton, initialized in static initialization block\n+  private static final ReentrantLock LOCK = new ReentrantLock();\n \n-  static {\n-    BUFFER_MANAGER = new ReadBufferManager();\n-    BUFFER_MANAGER.init();\n+  static ReadBufferManager getBufferManager() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NTQ4OA=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjE1NzQ1OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTowNjo0MVrOHejOiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoyMzo0MFrOHgXBwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NjQ4OA==", "bodyText": "please add some reasoning/docs around these changes. Thanks.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r501796488", "createdAt": "2020-10-08T15:06:41Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java", "diffHunk": "@@ -464,4 +483,53 @@ int getCompletedReadListSize() {\n   void callTryEvict() {\n     tryEvict();\n   }\n+\n+  @VisibleForTesting\n+  void testResetReadBufferManager() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5Mzc2MQ==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r503693761", "createdAt": "2020-10-13T06:23:40Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java", "diffHunk": "@@ -464,4 +483,53 @@ int getCompletedReadListSize() {\n   void callTryEvict() {\n     tryEvict();\n   }\n+\n+  @VisibleForTesting\n+  void testResetReadBufferManager() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NjQ4OA=="}, "originalCommit": {"oid": "df9359dc9e26a299479b168013949320298596b8"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njk0NzY3OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsInputStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDozMjowM1rOHgp1XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo0ODoxNFrOHhRRqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwMTg4NA==", "bodyText": "AssertJ has rich api's to tackle these kind of assertions. Try that\nexample : Assertions.assertThat(list)\n.hasSameElementsAs(list2)", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r504001884", "createdAt": "2020-10-13T14:32:03Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsInputStream.java", "diffHunk": "@@ -447,4 +490,168 @@ public void testReadAheadManagerForSuccessfulReadAhead() throws Exception {\n     checkEvictedStatus(inputStream, 0, true);\n   }\n \n+  /**\n+   * Test readahead with different config settings for request request size and\n+   * readAhead block size\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testDiffReadRequestSizeAndRAHBlockSize() throws Exception {\n+    // Set requestRequestSize = 4MB and readAheadBufferSize=8MB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FOUR_MB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    testReadAheadConfigs(FOUR_MB, TEST_READAHEAD_DEPTH_4, false, EIGHT_MB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(SIXTEEN_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    AbfsInputStream inputStream = testReadAheadConfigs(SIXTEEN_KB,\n+        TEST_READAHEAD_DEPTH_2, true, SIXTEEN_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, SIXTEEN_KB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=48KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(SIXTEEN_KB, TEST_READAHEAD_DEPTH_2, true,\n+        FORTY_EIGHT_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, FORTY_EIGHT_KB);\n+\n+    // Test for requestRequestSize =48KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(FORTY_EIGHT_KB, TEST_READAHEAD_DEPTH_2,\n+        true,\n+        SIXTEEN_KB);\n+    testReadAheads(inputStream, FORTY_EIGHT_KB, SIXTEEN_KB);\n+  }\n+\n+\n+  private void testReadAheads(AbfsInputStream inputStream,\n+      int readRequestSize,\n+      int readAheadRequestSize)\n+      throws Exception {\n+    if (readRequestSize > readAheadRequestSize) {\n+      readAheadRequestSize = readRequestSize;\n+    }\n+\n+    byte[] firstReadBuffer = new byte[readRequestSize];\n+    byte[] secondReadBuffer = new byte[readAheadRequestSize];\n+\n+    // get the expected bytes to compare\n+    byte[] expectedFirstReadAheadBufferContents = new byte[readRequestSize];\n+    byte[] expectedSecondReadAheadBufferContents = new byte[readAheadRequestSize];\n+    getExpectedBufferData(0, readRequestSize, expectedFirstReadAheadBufferContents);\n+    getExpectedBufferData(readRequestSize, readAheadRequestSize,\n+        expectedSecondReadAheadBufferContents);\n+\n+    assertTrue(\"Read should be of exact requested size\",\n+              inputStream.read(firstReadBuffer, 0, readRequestSize) == readRequestSize);\n+    assertTrue(\"Data mismatch found in RAH1\",\n+        Arrays.equals(firstReadBuffer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8664c3fd203a0d72688de9ca93e765c5c096c67"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0ODEwNA==", "bodyText": "Thanks. Have updated except for the content check assert.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r504648104", "createdAt": "2020-10-14T12:48:14Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsInputStream.java", "diffHunk": "@@ -447,4 +490,168 @@ public void testReadAheadManagerForSuccessfulReadAhead() throws Exception {\n     checkEvictedStatus(inputStream, 0, true);\n   }\n \n+  /**\n+   * Test readahead with different config settings for request request size and\n+   * readAhead block size\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testDiffReadRequestSizeAndRAHBlockSize() throws Exception {\n+    // Set requestRequestSize = 4MB and readAheadBufferSize=8MB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FOUR_MB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    testReadAheadConfigs(FOUR_MB, TEST_READAHEAD_DEPTH_4, false, EIGHT_MB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(SIXTEEN_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    AbfsInputStream inputStream = testReadAheadConfigs(SIXTEEN_KB,\n+        TEST_READAHEAD_DEPTH_2, true, SIXTEEN_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, SIXTEEN_KB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=48KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(SIXTEEN_KB, TEST_READAHEAD_DEPTH_2, true,\n+        FORTY_EIGHT_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, FORTY_EIGHT_KB);\n+\n+    // Test for requestRequestSize =48KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(FORTY_EIGHT_KB, TEST_READAHEAD_DEPTH_2,\n+        true,\n+        SIXTEEN_KB);\n+    testReadAheads(inputStream, FORTY_EIGHT_KB, SIXTEEN_KB);\n+  }\n+\n+\n+  private void testReadAheads(AbfsInputStream inputStream,\n+      int readRequestSize,\n+      int readAheadRequestSize)\n+      throws Exception {\n+    if (readRequestSize > readAheadRequestSize) {\n+      readAheadRequestSize = readRequestSize;\n+    }\n+\n+    byte[] firstReadBuffer = new byte[readRequestSize];\n+    byte[] secondReadBuffer = new byte[readAheadRequestSize];\n+\n+    // get the expected bytes to compare\n+    byte[] expectedFirstReadAheadBufferContents = new byte[readRequestSize];\n+    byte[] expectedSecondReadAheadBufferContents = new byte[readAheadRequestSize];\n+    getExpectedBufferData(0, readRequestSize, expectedFirstReadAheadBufferContents);\n+    getExpectedBufferData(readRequestSize, readAheadRequestSize,\n+        expectedSecondReadAheadBufferContents);\n+\n+    assertTrue(\"Read should be of exact requested size\",\n+              inputStream.read(firstReadBuffer, 0, readRequestSize) == readRequestSize);\n+    assertTrue(\"Data mismatch found in RAH1\",\n+        Arrays.equals(firstReadBuffer,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwMTg4NA=="}, "originalCommit": {"oid": "d8664c3fd203a0d72688de9ca93e765c5c096c67"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njk1MDQyOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsInputStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDozMjo0MFrOHgp3Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo0OTozNFrOHhRVNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwMjMzNA==", "bodyText": "Better to use assert equals here inspite of assertTrue no?", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r504002334", "createdAt": "2020-10-13T14:32:40Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsInputStream.java", "diffHunk": "@@ -447,4 +490,168 @@ public void testReadAheadManagerForSuccessfulReadAhead() throws Exception {\n     checkEvictedStatus(inputStream, 0, true);\n   }\n \n+  /**\n+   * Test readahead with different config settings for request request size and\n+   * readAhead block size\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testDiffReadRequestSizeAndRAHBlockSize() throws Exception {\n+    // Set requestRequestSize = 4MB and readAheadBufferSize=8MB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FOUR_MB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    testReadAheadConfigs(FOUR_MB, TEST_READAHEAD_DEPTH_4, false, EIGHT_MB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(SIXTEEN_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    AbfsInputStream inputStream = testReadAheadConfigs(SIXTEEN_KB,\n+        TEST_READAHEAD_DEPTH_2, true, SIXTEEN_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, SIXTEEN_KB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=48KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(SIXTEEN_KB, TEST_READAHEAD_DEPTH_2, true,\n+        FORTY_EIGHT_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, FORTY_EIGHT_KB);\n+\n+    // Test for requestRequestSize =48KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(FORTY_EIGHT_KB, TEST_READAHEAD_DEPTH_2,\n+        true,\n+        SIXTEEN_KB);\n+    testReadAheads(inputStream, FORTY_EIGHT_KB, SIXTEEN_KB);\n+  }\n+\n+\n+  private void testReadAheads(AbfsInputStream inputStream,\n+      int readRequestSize,\n+      int readAheadRequestSize)\n+      throws Exception {\n+    if (readRequestSize > readAheadRequestSize) {\n+      readAheadRequestSize = readRequestSize;\n+    }\n+\n+    byte[] firstReadBuffer = new byte[readRequestSize];\n+    byte[] secondReadBuffer = new byte[readAheadRequestSize];\n+\n+    // get the expected bytes to compare\n+    byte[] expectedFirstReadAheadBufferContents = new byte[readRequestSize];\n+    byte[] expectedSecondReadAheadBufferContents = new byte[readAheadRequestSize];\n+    getExpectedBufferData(0, readRequestSize, expectedFirstReadAheadBufferContents);\n+    getExpectedBufferData(readRequestSize, readAheadRequestSize,\n+        expectedSecondReadAheadBufferContents);\n+\n+    assertTrue(\"Read should be of exact requested size\",\n+              inputStream.read(firstReadBuffer, 0, readRequestSize) == readRequestSize);\n+    assertTrue(\"Data mismatch found in RAH1\",\n+        Arrays.equals(firstReadBuffer,\n+            expectedFirstReadAheadBufferContents));\n+\n+\n+    assertTrue(\"Read should be of exact requested size\",\n+        inputStream.read(secondReadBuffer, 0, readAheadRequestSize) == readAheadRequestSize);\n+    assertTrue(\"Data mismatch found in RAH2\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8664c3fd203a0d72688de9ca93e765c5c096c67"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0OTAxMg==", "bodyText": ":) Just a force of habit. Will try to use the assertions.\nHave modified in the other test code areas of this PR as well.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r504649012", "createdAt": "2020-10-14T12:49:34Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsInputStream.java", "diffHunk": "@@ -447,4 +490,168 @@ public void testReadAheadManagerForSuccessfulReadAhead() throws Exception {\n     checkEvictedStatus(inputStream, 0, true);\n   }\n \n+  /**\n+   * Test readahead with different config settings for request request size and\n+   * readAhead block size\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testDiffReadRequestSizeAndRAHBlockSize() throws Exception {\n+    // Set requestRequestSize = 4MB and readAheadBufferSize=8MB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FOUR_MB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    testReadAheadConfigs(FOUR_MB, TEST_READAHEAD_DEPTH_4, false, EIGHT_MB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(SIXTEEN_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    AbfsInputStream inputStream = testReadAheadConfigs(SIXTEEN_KB,\n+        TEST_READAHEAD_DEPTH_2, true, SIXTEEN_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, SIXTEEN_KB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=48KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(SIXTEEN_KB, TEST_READAHEAD_DEPTH_2, true,\n+        FORTY_EIGHT_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, FORTY_EIGHT_KB);\n+\n+    // Test for requestRequestSize =48KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(FORTY_EIGHT_KB, TEST_READAHEAD_DEPTH_2,\n+        true,\n+        SIXTEEN_KB);\n+    testReadAheads(inputStream, FORTY_EIGHT_KB, SIXTEEN_KB);\n+  }\n+\n+\n+  private void testReadAheads(AbfsInputStream inputStream,\n+      int readRequestSize,\n+      int readAheadRequestSize)\n+      throws Exception {\n+    if (readRequestSize > readAheadRequestSize) {\n+      readAheadRequestSize = readRequestSize;\n+    }\n+\n+    byte[] firstReadBuffer = new byte[readRequestSize];\n+    byte[] secondReadBuffer = new byte[readAheadRequestSize];\n+\n+    // get the expected bytes to compare\n+    byte[] expectedFirstReadAheadBufferContents = new byte[readRequestSize];\n+    byte[] expectedSecondReadAheadBufferContents = new byte[readAheadRequestSize];\n+    getExpectedBufferData(0, readRequestSize, expectedFirstReadAheadBufferContents);\n+    getExpectedBufferData(readRequestSize, readAheadRequestSize,\n+        expectedSecondReadAheadBufferContents);\n+\n+    assertTrue(\"Read should be of exact requested size\",\n+              inputStream.read(firstReadBuffer, 0, readRequestSize) == readRequestSize);\n+    assertTrue(\"Data mismatch found in RAH1\",\n+        Arrays.equals(firstReadBuffer,\n+            expectedFirstReadAheadBufferContents));\n+\n+\n+    assertTrue(\"Read should be of exact requested size\",\n+        inputStream.read(secondReadBuffer, 0, readAheadRequestSize) == readAheadRequestSize);\n+    assertTrue(\"Data mismatch found in RAH2\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwMjMzNA=="}, "originalCommit": {"oid": "d8664c3fd203a0d72688de9ca93e765c5c096c67"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njk5MjA1OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsInputStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo0MToyNFrOHgqSAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo1MjoxM1rOHhRcVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwOTIxOA==", "bodyText": "See if you can reuse the data generation and new file creation code from ContractTestUtils.dataset() and ContractTestUtils.createFile.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r504009218", "createdAt": "2020-10-13T14:41:24Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsInputStream.java", "diffHunk": "@@ -447,4 +490,168 @@ public void testReadAheadManagerForSuccessfulReadAhead() throws Exception {\n     checkEvictedStatus(inputStream, 0, true);\n   }\n \n+  /**\n+   * Test readahead with different config settings for request request size and\n+   * readAhead block size\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testDiffReadRequestSizeAndRAHBlockSize() throws Exception {\n+    // Set requestRequestSize = 4MB and readAheadBufferSize=8MB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FOUR_MB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    testReadAheadConfigs(FOUR_MB, TEST_READAHEAD_DEPTH_4, false, EIGHT_MB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(SIXTEEN_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    AbfsInputStream inputStream = testReadAheadConfigs(SIXTEEN_KB,\n+        TEST_READAHEAD_DEPTH_2, true, SIXTEEN_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, SIXTEEN_KB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=48KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(SIXTEEN_KB, TEST_READAHEAD_DEPTH_2, true,\n+        FORTY_EIGHT_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, FORTY_EIGHT_KB);\n+\n+    // Test for requestRequestSize =48KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(FORTY_EIGHT_KB, TEST_READAHEAD_DEPTH_2,\n+        true,\n+        SIXTEEN_KB);\n+    testReadAheads(inputStream, FORTY_EIGHT_KB, SIXTEEN_KB);\n+  }\n+\n+\n+  private void testReadAheads(AbfsInputStream inputStream,\n+      int readRequestSize,\n+      int readAheadRequestSize)\n+      throws Exception {\n+    if (readRequestSize > readAheadRequestSize) {\n+      readAheadRequestSize = readRequestSize;\n+    }\n+\n+    byte[] firstReadBuffer = new byte[readRequestSize];\n+    byte[] secondReadBuffer = new byte[readAheadRequestSize];\n+\n+    // get the expected bytes to compare\n+    byte[] expectedFirstReadAheadBufferContents = new byte[readRequestSize];\n+    byte[] expectedSecondReadAheadBufferContents = new byte[readAheadRequestSize];\n+    getExpectedBufferData(0, readRequestSize, expectedFirstReadAheadBufferContents);\n+    getExpectedBufferData(readRequestSize, readAheadRequestSize,\n+        expectedSecondReadAheadBufferContents);\n+\n+    assertTrue(\"Read should be of exact requested size\",\n+              inputStream.read(firstReadBuffer, 0, readRequestSize) == readRequestSize);\n+    assertTrue(\"Data mismatch found in RAH1\",\n+        Arrays.equals(firstReadBuffer,\n+            expectedFirstReadAheadBufferContents));\n+\n+\n+    assertTrue(\"Read should be of exact requested size\",\n+        inputStream.read(secondReadBuffer, 0, readAheadRequestSize) == readAheadRequestSize);\n+    assertTrue(\"Data mismatch found in RAH2\",\n+        Arrays.equals(secondReadBuffer,\n+            expectedSecondReadAheadBufferContents));\n+  }\n+\n+  public AbfsInputStream testReadAheadConfigs(int readRequestSize,\n+      int readAheadQueueDepth,\n+      boolean alwaysReadBufferSizeEnabled,\n+      int readAheadBlockSize) throws Exception {\n+    Configuration\n+        config = new Configuration(\n+        this.getRawConfiguration());\n+    config.set(\"fs.azure.read.request.size\", Integer.toString(readRequestSize));\n+    config.set(\"fs.azure.readaheadqueue.depth\",\n+        Integer.toString(readAheadQueueDepth));\n+    config.set(\"fs.azure.read.alwaysReadBufferSize\",\n+        Boolean.toString(alwaysReadBufferSizeEnabled));\n+    config.set(\"fs.azure.read.readahead.blocksize\",\n+        Integer.toString(readAheadBlockSize));\n+    if (readRequestSize > readAheadBlockSize) {\n+      readAheadBlockSize = readRequestSize;\n+    }\n+\n+    Path testPath = new Path(\n+        \"/testReadAheadConfigs\");\n+    final AzureBlobFileSystem fs = createTestFile(testPath,\n+        ALWAYS_READ_BUFFER_SIZE_TEST_FILE_SIZE, config);\n+    byte[] byteBuffer = new byte[ONE_MB];\n+    AbfsInputStream inputStream = this.getAbfsStore(fs)\n+        .openFileForRead(testPath, null);\n+\n+    assertEquals(\"Unexpected AbfsInputStream buffer size\", readRequestSize,\n+        inputStream.getBufferSize());\n+    assertEquals(\"Unexpected ReadAhead queue depth\", readAheadQueueDepth,\n+        inputStream.getReadAheadQueueDepth());\n+    assertEquals(\"Unexpected AlwaysReadBufferSize settings\",\n+        alwaysReadBufferSizeEnabled,\n+        inputStream.shouldAlwaysReadBufferSize());\n+    assertEquals(\"Unexpected readAhead block size\", readAheadBlockSize,\n+        ReadBufferManager.getBufferManager().getReadAheadBlockSize());\n+\n+    return inputStream;\n+  }\n+\n+  private void getExpectedBufferData(int offset, int length, byte[] b) {\n+    boolean startFillingIn = false;\n+    int indexIntoBuffer = 0;\n+    char character = 'a';\n+\n+    for (int i = 0; i < (offset + length); i++) {\n+      if (i == offset) {\n+        startFillingIn = true;\n+      }\n+\n+      if ((startFillingIn) && (indexIntoBuffer < length)) {\n+        b[indexIntoBuffer] = (byte) character;\n+        indexIntoBuffer++;\n+      }\n+\n+      character = (character == 'z') ? 'a' : (char) ((int) character + 1);\n+    }\n+  }\n+\n+  private AzureBlobFileSystem createTestFile(Path testFilePath, long testFileSize,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8664c3fd203a0d72688de9ca93e765c5c096c67"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1MDgzNw==", "bodyText": "I need the file created to also have a specific pattern of data ingested and have another method which needs to return the expected data content from offset to range. This is being used to cross check with readahead buffer data. Will retain for these tests. But thanks, hadnt observed the other APIs, will default to them where there isnt a specific needs on the file content.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r504650837", "createdAt": "2020-10-14T12:52:13Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsInputStream.java", "diffHunk": "@@ -447,4 +490,168 @@ public void testReadAheadManagerForSuccessfulReadAhead() throws Exception {\n     checkEvictedStatus(inputStream, 0, true);\n   }\n \n+  /**\n+   * Test readahead with different config settings for request request size and\n+   * readAhead block size\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testDiffReadRequestSizeAndRAHBlockSize() throws Exception {\n+    // Set requestRequestSize = 4MB and readAheadBufferSize=8MB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FOUR_MB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    testReadAheadConfigs(FOUR_MB, TEST_READAHEAD_DEPTH_4, false, EIGHT_MB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(SIXTEEN_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    AbfsInputStream inputStream = testReadAheadConfigs(SIXTEEN_KB,\n+        TEST_READAHEAD_DEPTH_2, true, SIXTEEN_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, SIXTEEN_KB);\n+\n+    // Test for requestRequestSize =16KB and readAheadBufferSize=48KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(SIXTEEN_KB, TEST_READAHEAD_DEPTH_2, true,\n+        FORTY_EIGHT_KB);\n+    testReadAheads(inputStream, SIXTEEN_KB, FORTY_EIGHT_KB);\n+\n+    // Test for requestRequestSize =48KB and readAheadBufferSize=16KB\n+    ReadBufferManager.getBufferManager()\n+        .testResetReadBufferManager(FORTY_EIGHT_KB, INCREASED_READ_BUFFER_AGE_THRESHOLD);\n+    inputStream = testReadAheadConfigs(FORTY_EIGHT_KB, TEST_READAHEAD_DEPTH_2,\n+        true,\n+        SIXTEEN_KB);\n+    testReadAheads(inputStream, FORTY_EIGHT_KB, SIXTEEN_KB);\n+  }\n+\n+\n+  private void testReadAheads(AbfsInputStream inputStream,\n+      int readRequestSize,\n+      int readAheadRequestSize)\n+      throws Exception {\n+    if (readRequestSize > readAheadRequestSize) {\n+      readAheadRequestSize = readRequestSize;\n+    }\n+\n+    byte[] firstReadBuffer = new byte[readRequestSize];\n+    byte[] secondReadBuffer = new byte[readAheadRequestSize];\n+\n+    // get the expected bytes to compare\n+    byte[] expectedFirstReadAheadBufferContents = new byte[readRequestSize];\n+    byte[] expectedSecondReadAheadBufferContents = new byte[readAheadRequestSize];\n+    getExpectedBufferData(0, readRequestSize, expectedFirstReadAheadBufferContents);\n+    getExpectedBufferData(readRequestSize, readAheadRequestSize,\n+        expectedSecondReadAheadBufferContents);\n+\n+    assertTrue(\"Read should be of exact requested size\",\n+              inputStream.read(firstReadBuffer, 0, readRequestSize) == readRequestSize);\n+    assertTrue(\"Data mismatch found in RAH1\",\n+        Arrays.equals(firstReadBuffer,\n+            expectedFirstReadAheadBufferContents));\n+\n+\n+    assertTrue(\"Read should be of exact requested size\",\n+        inputStream.read(secondReadBuffer, 0, readAheadRequestSize) == readAheadRequestSize);\n+    assertTrue(\"Data mismatch found in RAH2\",\n+        Arrays.equals(secondReadBuffer,\n+            expectedSecondReadAheadBufferContents));\n+  }\n+\n+  public AbfsInputStream testReadAheadConfigs(int readRequestSize,\n+      int readAheadQueueDepth,\n+      boolean alwaysReadBufferSizeEnabled,\n+      int readAheadBlockSize) throws Exception {\n+    Configuration\n+        config = new Configuration(\n+        this.getRawConfiguration());\n+    config.set(\"fs.azure.read.request.size\", Integer.toString(readRequestSize));\n+    config.set(\"fs.azure.readaheadqueue.depth\",\n+        Integer.toString(readAheadQueueDepth));\n+    config.set(\"fs.azure.read.alwaysReadBufferSize\",\n+        Boolean.toString(alwaysReadBufferSizeEnabled));\n+    config.set(\"fs.azure.read.readahead.blocksize\",\n+        Integer.toString(readAheadBlockSize));\n+    if (readRequestSize > readAheadBlockSize) {\n+      readAheadBlockSize = readRequestSize;\n+    }\n+\n+    Path testPath = new Path(\n+        \"/testReadAheadConfigs\");\n+    final AzureBlobFileSystem fs = createTestFile(testPath,\n+        ALWAYS_READ_BUFFER_SIZE_TEST_FILE_SIZE, config);\n+    byte[] byteBuffer = new byte[ONE_MB];\n+    AbfsInputStream inputStream = this.getAbfsStore(fs)\n+        .openFileForRead(testPath, null);\n+\n+    assertEquals(\"Unexpected AbfsInputStream buffer size\", readRequestSize,\n+        inputStream.getBufferSize());\n+    assertEquals(\"Unexpected ReadAhead queue depth\", readAheadQueueDepth,\n+        inputStream.getReadAheadQueueDepth());\n+    assertEquals(\"Unexpected AlwaysReadBufferSize settings\",\n+        alwaysReadBufferSizeEnabled,\n+        inputStream.shouldAlwaysReadBufferSize());\n+    assertEquals(\"Unexpected readAhead block size\", readAheadBlockSize,\n+        ReadBufferManager.getBufferManager().getReadAheadBlockSize());\n+\n+    return inputStream;\n+  }\n+\n+  private void getExpectedBufferData(int offset, int length, byte[] b) {\n+    boolean startFillingIn = false;\n+    int indexIntoBuffer = 0;\n+    char character = 'a';\n+\n+    for (int i = 0; i < (offset + length); i++) {\n+      if (i == offset) {\n+        startFillingIn = true;\n+      }\n+\n+      if ((startFillingIn) && (indexIntoBuffer < length)) {\n+        b[indexIntoBuffer] = (byte) character;\n+        indexIntoBuffer++;\n+      }\n+\n+      character = (character == 'z') ? 'a' : (char) ((int) character + 1);\n+    }\n+  }\n+\n+  private AzureBlobFileSystem createTestFile(Path testFilePath, long testFileSize,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwOTIxOA=="}, "originalCommit": {"oid": "d8664c3fd203a0d72688de9ca93e765c5c096c67"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzA1MTQ4OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemRandomRead.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo1MzowOFrOHgq3Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0MDozM1rOHhTjJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxODY5MA==", "bodyText": "Why creating a new method here if we are just doing a passthrough?", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r504018690", "createdAt": "2020-10-13T14:53:08Z", "author": {"login": "mukund-thakur"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemRandomRead.java", "diffHunk": "@@ -448,15 +477,119 @@ public void testRandomReadPerformance() throws Exception {\n             ratio < maxAcceptableRatio);\n   }\n \n+  /**\n+   * With this test we should see a full buffer read being triggered in case\n+   * alwaysReadBufferSize is on, else only the requested buffer size.\n+   * Hence a seek done few bytes away from last read position will trigger\n+   * a network read when alwaysReadBufferSize is off, whereas it will return\n+   * from the internal buffer when it is on.\n+   * Reading a full buffer size is the Gen1 behaviour.\n+   * @throws Throwable\n+   */\n+  @Test\n+  public void testAlwaysReadBufferSizeConfig() throws Throwable {\n+    testAlwaysReadBufferSizeConfig(false);\n+    testAlwaysReadBufferSizeConfig(true);\n+  }\n+\n+  private void assertStatistics(AzureBlobFileSystem fs,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8664c3fd203a0d72688de9ca93e765c5c096c67"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4NTM0OQ==", "bodyText": "Redundant method removed.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r504685349", "createdAt": "2020-10-14T13:40:33Z", "author": {"login": "snvijaya"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemRandomRead.java", "diffHunk": "@@ -448,15 +477,119 @@ public void testRandomReadPerformance() throws Exception {\n             ratio < maxAcceptableRatio);\n   }\n \n+  /**\n+   * With this test we should see a full buffer read being triggered in case\n+   * alwaysReadBufferSize is on, else only the requested buffer size.\n+   * Hence a seek done few bytes away from last read position will trigger\n+   * a network read when alwaysReadBufferSize is off, whereas it will return\n+   * from the internal buffer when it is on.\n+   * Reading a full buffer size is the Gen1 behaviour.\n+   * @throws Throwable\n+   */\n+  @Test\n+  public void testAlwaysReadBufferSizeConfig() throws Throwable {\n+    testAlwaysReadBufferSizeConfig(false);\n+    testAlwaysReadBufferSizeConfig(true);\n+  }\n+\n+  private void assertStatistics(AzureBlobFileSystem fs,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxODY5MA=="}, "originalCommit": {"oid": "d8664c3fd203a0d72688de9ca93e765c5c096c67"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDYwMzEzOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemRandomRead.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoxOToyM1rOH7AABw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoxOToyM1rOH7AABw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyODAzOQ==", "bodyText": "FWIW I use a Junit rule to get the method name, then you can hava a path() method which dynamically creates the unique path, including when you use parameterized tests.", "url": "https://github.com/apache/hadoop/pull/2368#discussion_r531628039", "createdAt": "2020-11-27T14:19:23Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/ITestAzureBlobFileSystemRandomRead.java", "diffHunk": "@@ -99,12 +115,14 @@ public void testBasicRead() throws Exception {\n   public void testRandomRead() throws Exception {\n     Assume.assumeFalse(\"This test does not support namespace enabled account\",\n             this.getFileSystem().getIsNamespaceEnabled());\n-    assumeHugeFileExists();\n+    Path testPath = new Path(TEST_FILE_PREFIX + \"_testRandomRead\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc3914fd950322db66fe2b0dc710678699839b1"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3198, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}