{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODEyNTA1", "number": 1977, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoyMDozNlrOD2zXXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoyMToxNFrOD2zYiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzkxMjYxOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoyMDozNlrOGMuswQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoyMDozNlrOGMuswQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwMTIxNw==", "bodyText": "what if user passes in negative numbers as weights? should we add a safe guard against that?", "url": "https://github.com/apache/hadoop/pull/1977#discussion_r416001217", "createdAt": "2020-04-27T17:20:36Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java", "diffHunk": "@@ -101,11 +111,18 @@ public FairCallQueue(int priorityLevels, int capacity, String ns,\n \n     this.queues = new ArrayList<BlockingQueue<E>>(numQueues);\n     this.overflowedCalls = new ArrayList<AtomicLong>(numQueues);\n-    int queueCapacity = capacity / numQueues;\n-    int capacityForFirstQueue = queueCapacity + (capacity % numQueues);\n+    int totalWeights = 0;\n+    for (int i = 0; i < capacityWeights.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f94e468f3751bccac770474ccf70d987217ea7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzkxNDIzOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/site/markdown/FairCallQueue.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoyMDo1N1rOGMutmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoyMDo1N1rOGMutmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwMTQzNQ==", "bodyText": "maybe make it explicit only positive numbers are allowed?", "url": "https://github.com/apache/hadoop/pull/1977#discussion_r416001435", "createdAt": "2020-04-27T17:20:57Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/site/markdown/FairCallQueue.md", "diffHunk": "@@ -126,6 +126,7 @@ omitted.\n |:---- |:---- |:---- |:--- |\n | backoff.enable | General | Whether or not to enable client backoff when a queue is full. | false |\n | callqueue.impl | General | The fully qualified name of a class to use as the implementation of a call queue. Use `org.apache.hadoop.ipc.FairCallQueue` for the Fair Call Queue. | `java.util.concurrent.LinkedBlockingQueue` (FIFO queue) |\n+| callqueue.capacity.weights | General | The capacity allocation weights among all subqueues. A int array whose length is equal to the `scheduler.priority.levels` is expected where each int is the relative weight out of total capacity. i.e. if a queue with capacity weight `w`, its queue capacity is `capacity * w/sum(weights)` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f94e468f3751bccac770474ccf70d987217ea7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzkxNTYxOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallQueueManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoyMToxNFrOGMuuew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoyMToxNFrOGMuuew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwMTY1OQ==", "bodyText": "nit: add a blank line between this and the first parameter line.", "url": "https://github.com/apache/hadoop/pull/1977#discussion_r416001659", "createdAt": "2020-04-27T17:21:14Z", "author": {"login": "sunchao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallQueueManager.java", "diffHunk": "@@ -343,6 +347,36 @@ private static int parseNumLevels(String ns, Configuration conf) {\n     return retval;\n   }\n \n+  /**\n+   * Read the weights of capacity in callqueue and pass the value to\n+   * callqueue constructions.\n+   */\n+  private static int[] parseCapacityWeights(\n+      int priorityLevels, String ns, Configuration conf) {\n+    int[] weights = conf.getInts(ns + \".\" +\n+      CommonConfigurationKeys.IPC_CALLQUEUE_CAPACITY_WEIGHTS_KEY);\n+    if (weights.length == 0) {\n+      weights = getDefaultQueueCapacityWeights(priorityLevels);\n+    } else if (weights.length != priorityLevels) {\n+      throw new IllegalArgumentException(\n+          CommonConfigurationKeys.IPC_CALLQUEUE_CAPACITY_WEIGHTS_KEY + \" must \"\n+              + \"specify \" + priorityLevels + \" capacity weights: one for each \"\n+              + \"priority level\");\n+    }\n+    return weights;\n+  }\n+\n+  /**\n+   * By default, queue capacity is the same for all priority levels.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f94e468f3751bccac770474ccf70d987217ea7"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3531, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}