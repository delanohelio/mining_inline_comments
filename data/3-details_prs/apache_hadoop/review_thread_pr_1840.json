{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczODA0NzQw", "number": 1840, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNjo1MzoyMlrODfEHGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0Mjo0NlrODgz0Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODk5ODAyOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNjo1MzoyM1rOFojYjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzowNzozMFrOFrK4Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2NzA4Nw==", "bodyText": "bytes = readOpenFileAPI(rawFS, testFilePath, length, null); should still fail right? Do you think we can also that in this if clause?", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r378067087", "createdAt": "2020-02-12T06:53:23Z", "author": {"login": "liuml07"}, "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "diffHunk": "@@ -969,16 +970,42 @@ private void deleteFileInListing()\n       deleteFile(rawFS, testFilePath);\n \n       // File status will be still readable from s3guard\n-      FileStatus status = guardedFs.getFileStatus(testFilePath);\n+      S3AFileStatus status = (S3AFileStatus)\n+          guardedFs.getFileStatus(testFilePath);\n       LOG.info(\"authoritative: {} status: {}\", allowAuthoritative, status);\n-      expectExceptionWhenReading(testFilePath, text);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, null);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, status);\n+      if (isVersionedChangeDetection() && status.getVersionId() != null) {\n+        // when the status entry has a version ID, then that may be used\n+        // when opening the file on what is clearly a versioned store.\n+        int length = text.length();\n+        byte[] bytes = readOpenFileAPI(guardedFs, testFilePath, length, null);\n+        Assertions.assertThat(toChar(bytes))\n+            .describedAs(\"openFile(%s)\", testFilePath)\n+            .isEqualTo(text);\n+        // reading the rawFS with status will also work.\n+        bytes = readOpenFileAPI(rawFS, testFilePath, length, status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71b527fb65b842848a0daa98028b100d8f67a368"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMzIxNw==", "bodyText": "bytes = readOpenFileAPI(rawFS, testFilePath, length, null); won't fail (tested). Why should it fail? TheFileStatus is just an additional parameter for theFutureDataInputStreamBuilder.", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r378223217", "createdAt": "2020-02-12T12:34:49Z", "author": {"login": "bgaborg"}, "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "diffHunk": "@@ -969,16 +970,42 @@ private void deleteFileInListing()\n       deleteFile(rawFS, testFilePath);\n \n       // File status will be still readable from s3guard\n-      FileStatus status = guardedFs.getFileStatus(testFilePath);\n+      S3AFileStatus status = (S3AFileStatus)\n+          guardedFs.getFileStatus(testFilePath);\n       LOG.info(\"authoritative: {} status: {}\", allowAuthoritative, status);\n-      expectExceptionWhenReading(testFilePath, text);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, null);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, status);\n+      if (isVersionedChangeDetection() && status.getVersionId() != null) {\n+        // when the status entry has a version ID, then that may be used\n+        // when opening the file on what is clearly a versioned store.\n+        int length = text.length();\n+        byte[] bytes = readOpenFileAPI(guardedFs, testFilePath, length, null);\n+        Assertions.assertThat(toChar(bytes))\n+            .describedAs(\"openFile(%s)\", testFilePath)\n+            .isEqualTo(text);\n+        // reading the rawFS with status will also work.\n+        bytes = readOpenFileAPI(rawFS, testFilePath, length, status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2NzA4Nw=="}, "originalCommit": {"oid": "71b527fb65b842848a0daa98028b100d8f67a368"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMjI2Mg==", "bodyText": "bytes = readOpenFileAPI(rawFS, testFilePath, length, null);\n\nThe file was deleted and I was expecting FNF exception here. I have not tested here with versioned  bucket.", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r378422262", "createdAt": "2020-02-12T18:07:23Z", "author": {"login": "liuml07"}, "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "diffHunk": "@@ -969,16 +970,42 @@ private void deleteFileInListing()\n       deleteFile(rawFS, testFilePath);\n \n       // File status will be still readable from s3guard\n-      FileStatus status = guardedFs.getFileStatus(testFilePath);\n+      S3AFileStatus status = (S3AFileStatus)\n+          guardedFs.getFileStatus(testFilePath);\n       LOG.info(\"authoritative: {} status: {}\", allowAuthoritative, status);\n-      expectExceptionWhenReading(testFilePath, text);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, null);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, status);\n+      if (isVersionedChangeDetection() && status.getVersionId() != null) {\n+        // when the status entry has a version ID, then that may be used\n+        // when opening the file on what is clearly a versioned store.\n+        int length = text.length();\n+        byte[] bytes = readOpenFileAPI(guardedFs, testFilePath, length, null);\n+        Assertions.assertThat(toChar(bytes))\n+            .describedAs(\"openFile(%s)\", testFilePath)\n+            .isEqualTo(text);\n+        // reading the rawFS with status will also work.\n+        bytes = readOpenFileAPI(rawFS, testFilePath, length, status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2NzA4Nw=="}, "originalCommit": {"oid": "71b527fb65b842848a0daa98028b100d8f67a368"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxMTI4Nw==", "bodyText": "bytes = readOpenFileAPI(rawFS, testFilePath, length, null) should fail; no status coming in, will add the check", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r380811287", "createdAt": "2020-02-18T17:07:30Z", "author": {"login": "steveloughran"}, "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "diffHunk": "@@ -969,16 +970,42 @@ private void deleteFileInListing()\n       deleteFile(rawFS, testFilePath);\n \n       // File status will be still readable from s3guard\n-      FileStatus status = guardedFs.getFileStatus(testFilePath);\n+      S3AFileStatus status = (S3AFileStatus)\n+          guardedFs.getFileStatus(testFilePath);\n       LOG.info(\"authoritative: {} status: {}\", allowAuthoritative, status);\n-      expectExceptionWhenReading(testFilePath, text);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, null);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, status);\n+      if (isVersionedChangeDetection() && status.getVersionId() != null) {\n+        // when the status entry has a version ID, then that may be used\n+        // when opening the file on what is clearly a versioned store.\n+        int length = text.length();\n+        byte[] bytes = readOpenFileAPI(guardedFs, testFilePath, length, null);\n+        Assertions.assertThat(toChar(bytes))\n+            .describedAs(\"openFile(%s)\", testFilePath)\n+            .isEqualTo(text);\n+        // reading the rawFS with status will also work.\n+        bytes = readOpenFileAPI(rawFS, testFilePath, length, status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2NzA4Nw=="}, "originalCommit": {"oid": "71b527fb65b842848a0daa98028b100d8f67a368"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDAzMTE1OnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo0MTo1NFrOFotG0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODowNTowOFrOFo4_lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNjM4NA==", "bodyText": "I would rather add this to the test as a new private method.", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r378226384", "createdAt": "2020-02-12T12:41:54Z", "author": {"login": "bgaborg"}, "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "diffHunk": "@@ -969,16 +970,42 @@ private void deleteFileInListing()\n       deleteFile(rawFS, testFilePath);\n \n       // File status will be still readable from s3guard\n-      FileStatus status = guardedFs.getFileStatus(testFilePath);\n+      S3AFileStatus status = (S3AFileStatus)\n+          guardedFs.getFileStatus(testFilePath);\n       LOG.info(\"authoritative: {} status: {}\", allowAuthoritative, status);\n-      expectExceptionWhenReading(testFilePath, text);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, null);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, status);\n+      if (isVersionedChangeDetection() && status.getVersionId() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71b527fb65b842848a0daa98028b100d8f67a368"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMTE0MQ==", "bodyText": "This is very specific to this test, which is not too long to me; and we don't need to pass some parameters to the new helper method. I\u2019m happy it sits here or a new method.", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r378421141", "createdAt": "2020-02-12T18:05:08Z", "author": {"login": "liuml07"}, "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "diffHunk": "@@ -969,16 +970,42 @@ private void deleteFileInListing()\n       deleteFile(rawFS, testFilePath);\n \n       // File status will be still readable from s3guard\n-      FileStatus status = guardedFs.getFileStatus(testFilePath);\n+      S3AFileStatus status = (S3AFileStatus)\n+          guardedFs.getFileStatus(testFilePath);\n       LOG.info(\"authoritative: {} status: {}\", allowAuthoritative, status);\n-      expectExceptionWhenReading(testFilePath, text);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, null);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, status);\n+      if (isVersionedChangeDetection() && status.getVersionId() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNjM4NA=="}, "originalCommit": {"oid": "71b527fb65b842848a0daa98028b100d8f67a368"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMwMDEwOnYy", "diffSide": "RIGHT", "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0Mjo0NlrOFrN_Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0Mjo0NlrOFrN_Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MjI3MQ==", "bodyText": "nit: the , here goes to the end of last line... :)", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r380862271", "createdAt": "2020-02-18T18:42:46Z", "author": {"login": "liuml07"}, "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "diffHunk": "@@ -1032,8 +1034,26 @@ private void expectExceptionWhenReading(Path testFilePath, String text)\n   private void expectExceptionWhenReadingOpenFileAPI(\n       Path testFilePath, String text, FileStatus status)\n       throws Exception {\n+    expectExceptionWhenReadingOpenFileAPI(guardedFs,\n+        testFilePath, text, status);\n+  }\n+\n+  /**\n+   * We expect the read to fail with an FNFE: open will be happy.\n+   * @param fs filesystem\n+   * @param testFilePath path of the test file\n+   * @param text the context in the file.\n+   * @param status optional status for the withFileStatus operation.\n+   * @throws Exception failure other than the FNFE\n+   */\n+  private void expectExceptionWhenReadingOpenFileAPI(\n+      final S3AFileSystem fs,\n+      final Path testFilePath\n+      , final String text,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d2e4500f9ae5d42444eabcdc4341314e045ce2e"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3702, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}