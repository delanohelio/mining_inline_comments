{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDI0MjUx", "number": 2010, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjozMjo0MlrOD744Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMTo0MTo1N1rOD9Hg5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI0NDUxOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjozMjo0MlrOGUfZxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjozMjo0MlrOGUfZxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzOTIwNw==", "bodyText": "Make it private as we don't need to access this out side.\nI think we may not need this at all. You can setConf and getConf.\nAnd look at next comments, we can completely avoid if we use targetFileSystem instead of FileSystem.get(...conf)", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424139207", "createdAt": "2020-05-13T02:32:42Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1107,6 +1107,7 @@ public boolean hasPathCapability(Path path, String capability)\n     final long creationTime; // of the the mount table\n     final UserGroupInformation ugi; // the user/group of user who created mtable\n     final URI myUri;\n+    final Configuration conf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI2MjI5OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjo0NDo0OFrOGUflcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOToxMzo0OFrOGV87rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MjE5NQ==", "bodyText": "Please use theInternalDir.getFallbackLink().targetFileSystem instead of initializing/getting another fs.\nNow conf is not need at all and you dont need above uri also.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424142195", "createdAt": "2020-05-13T02:44:48Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1226,7 +1229,38 @@ public FileStatus getFileStatus(Path f) throws IOException {\n                 myUri, null));\n         }\n       }\n-      return result;\n+      if (fallbackStatuses.length > 0) {\n+        return consolidateFileStatuses(fallbackStatuses, result);\n+      } else {\n+        return result;\n+      }\n+    }\n+\n+    private FileStatus[] consolidateFileStatuses(FileStatus[] fallbackStatuses,\n+        FileStatus[] mountPointStatuses) {\n+      ArrayList<FileStatus> result = new ArrayList<>();\n+      Set<String> pathSet = new HashSet<>();\n+      int i = 0;\n+      for (FileStatus status : mountPointStatuses) {\n+        result.add(status);\n+        pathSet.add(status.getPath().getName());\n+      }\n+      for (FileStatus status : fallbackStatuses) {\n+        if (!pathSet.contains(status.getPath().getName())) {\n+          result.add(status);\n+        }\n+      }\n+      return result.toArray(new FileStatus[0]);\n+    }\n+\n+    private FileStatus[] listStatusForFallbackLink() throws IOException {\n+      if (theInternalDir.isRoot() && theInternalDir.getFallbackLink() != null) {\n+        URI fallBackUri = theInternalDir.getFallbackLink().targetDirLinkList[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1MzAxNA==", "bodyText": "theInternalDir.getFallbackLink().targetFileSystem is going to return ChRootedFileSystem which will wrap the path with fullPath(Path p) method. That was causing error. I have used the underlying filesystem object of the ChRootedFileSystem", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424753014", "createdAt": "2020-05-13T21:53:41Z", "author": {"login": "abhishekdas99"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1226,7 +1229,38 @@ public FileStatus getFileStatus(Path f) throws IOException {\n                 myUri, null));\n         }\n       }\n-      return result;\n+      if (fallbackStatuses.length > 0) {\n+        return consolidateFileStatuses(fallbackStatuses, result);\n+      } else {\n+        return result;\n+      }\n+    }\n+\n+    private FileStatus[] consolidateFileStatuses(FileStatus[] fallbackStatuses,\n+        FileStatus[] mountPointStatuses) {\n+      ArrayList<FileStatus> result = new ArrayList<>();\n+      Set<String> pathSet = new HashSet<>();\n+      int i = 0;\n+      for (FileStatus status : mountPointStatuses) {\n+        result.add(status);\n+        pathSet.add(status.getPath().getName());\n+      }\n+      for (FileStatus status : fallbackStatuses) {\n+        if (!pathSet.contains(status.getPath().getName())) {\n+          result.add(status);\n+        }\n+      }\n+      return result.toArray(new FileStatus[0]);\n+    }\n+\n+    private FileStatus[] listStatusForFallbackLink() throws IOException {\n+      if (theInternalDir.isRoot() && theInternalDir.getFallbackLink() != null) {\n+        URI fallBackUri = theInternalDir.getFallbackLink().targetDirLinkList[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MjE5NQ=="}, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2OTA2Mg==", "bodyText": "Why you might have issue was because you are passing fallBackUri. ChrootedFS already contains /fallBackDir and you are again passing a uri which contains /fallbackDir. SO it will fail with \"FNFE\". If you use chrootedfs, you should just pass relative path by cutting chrooteduri. Since we support only at root, it will be simply \"/\" on chorootedfs.\nI have one another concern that we are returning absolute path with fall back in ls. But with regular mountlinks we will return relative to viewfs scheme ex: [viewfs://default/data, viewfs://default/targetRoot, viewfs://default/danglingLink, [viewfs://default/user2, viewfs://default/user, viewfs://default/internalDir, viewfs://default/linkToAFile]\nSince fallback also part of viewfs and its actually a child fs, should we return fallback paths also relatively constructed with respective to viewfs:// scheme?\nexmaple: your fallback path is hdfs://nn1/fallBackDir and you have a  dir under it. That is /user1\nSo, when you do ls, should it return viewfs://default/user1 ?\nif you use this ls result path to create some directory like viewfs://default/user1/test1, it will/should work ( IMO) and it should create at physical location of hdfs://nn1/fallBackDir/user1/test1\nBecause you did not have any other mount link with /user1, it will fallback to create at fallback link.\nBut with the current behavior, we are returning hdfs://nn1/fallBackDir/user1 and if you use this path to create a dir under it, it will actually go to regular hdfs instance but not via viewfs. This could be a potentially problem in that case overloadScheme impl. There hdfs can go to ViewFSOverloadScheme and try to create path as hdfs://nn1/fallBackDir/user1. Now fallBackDir/user1 will be attempted to create in viewfsOS env, it checks whether we have any link with fallBackDir. Of course we will not have any regular link. So, it will create at fallback link.\nOur fallback link is already hdfs://nn1/fallbackDir and now it will attempt to create /fallbackDir/user1\nSo, it will result to create hdfs://nn1/fallbackDir/fallbackDir/user1. This seems not correct.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r425469062", "createdAt": "2020-05-14T22:37:32Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1226,7 +1229,38 @@ public FileStatus getFileStatus(Path f) throws IOException {\n                 myUri, null));\n         }\n       }\n-      return result;\n+      if (fallbackStatuses.length > 0) {\n+        return consolidateFileStatuses(fallbackStatuses, result);\n+      } else {\n+        return result;\n+      }\n+    }\n+\n+    private FileStatus[] consolidateFileStatuses(FileStatus[] fallbackStatuses,\n+        FileStatus[] mountPointStatuses) {\n+      ArrayList<FileStatus> result = new ArrayList<>();\n+      Set<String> pathSet = new HashSet<>();\n+      int i = 0;\n+      for (FileStatus status : mountPointStatuses) {\n+        result.add(status);\n+        pathSet.add(status.getPath().getName());\n+      }\n+      for (FileStatus status : fallbackStatuses) {\n+        if (!pathSet.contains(status.getPath().getName())) {\n+          result.add(status);\n+        }\n+      }\n+      return result.toArray(new FileStatus[0]);\n+    }\n+\n+    private FileStatus[] listStatusForFallbackLink() throws IOException {\n+      if (theInternalDir.isRoot() && theInternalDir.getFallbackLink() != null) {\n+        URI fallBackUri = theInternalDir.getFallbackLink().targetDirLinkList[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MjE5NQ=="}, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3MTU5Nw==", "bodyText": "I totally agree with your thought. Changed the path back to viewfs. Also in the unit test, verified the creation of directory with the returned path.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r425671597", "createdAt": "2020-05-15T09:13:48Z", "author": {"login": "abhishekdas99"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1226,7 +1229,38 @@ public FileStatus getFileStatus(Path f) throws IOException {\n                 myUri, null));\n         }\n       }\n-      return result;\n+      if (fallbackStatuses.length > 0) {\n+        return consolidateFileStatuses(fallbackStatuses, result);\n+      } else {\n+        return result;\n+      }\n+    }\n+\n+    private FileStatus[] consolidateFileStatuses(FileStatus[] fallbackStatuses,\n+        FileStatus[] mountPointStatuses) {\n+      ArrayList<FileStatus> result = new ArrayList<>();\n+      Set<String> pathSet = new HashSet<>();\n+      int i = 0;\n+      for (FileStatus status : mountPointStatuses) {\n+        result.add(status);\n+        pathSet.add(status.getPath().getName());\n+      }\n+      for (FileStatus status : fallbackStatuses) {\n+        if (!pathSet.contains(status.getPath().getName())) {\n+          result.add(status);\n+        }\n+      }\n+      return result.toArray(new FileStatus[0]);\n+    }\n+\n+    private FileStatus[] listStatusForFallbackLink() throws IOException {\n+      if (theInternalDir.isRoot() && theInternalDir.getFallbackLink() != null) {\n+        URI fallBackUri = theInternalDir.getFallbackLink().targetDirLinkList[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MjE5NQ=="}, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI5MDE5OnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowMjozMFrOGUf2kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMToxNDoyMVrOGWcryQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NjU3OA==", "bodyText": "Can we also add asserts for paths? I would like to see how fallback paths are expected and what we get.\nHow we should display fallback ls paths..\nex: if fallback is : hdfs://nn2/root/ and it has /a /b at root folder\nthen ls on hdfs://nn2/root/ should display /a /b\nBut displaying qualified names makes sense to me to differentiate between mount links and fallback links.\nin another thought it would confuse and if users use that uri path directly, they would directly interact with that fs instead of going via ViewFS.\nexample if you return [hdfs://nn1/root/a, hdfs://nn1/root/b] and when application wants to use this path, they will directly initialize hdfs instead of going through ViewFS.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424146578", "createdAt": "2020-05-13T03:02:30Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "diffHunk": "@@ -261,4 +261,53 @@ public void testConfLinkFallbackWithMountPoint() throws Exception {\n           e.getMessage().contains(expectedErrorMsg));\n     }\n   }\n+\n+  @Test\n+  public void testListingWithFallbackLink() throws Exception {\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/dir1\"));\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/dir2\"));\n+    String clusterName = Constants.CONFIG_VIEWFS_DEFAULT_MOUNT_TABLE;\n+    URI viewFsUri = new URI(FsConstants.VIEWFS_SCHEME, clusterName,\n+        \"/\", null, null);\n+\n+    int itemCount = 0;\n+    try(FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      itemCount = vfs.listStatus(new Path(viewFsUri.toString())).length;\n+    }\n+\n+    ConfigUtil.addLinkFallback(conf, clusterName,\n+        new Path(targetTestRoot, \"fallbackDir\").toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      FileStatus[] statuses = vfs.listStatus(new Path(viewFsUri.toString()));\n+      assertTrue(\"Listing didn't include fallback link\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1Mzk3NQ==", "bodyText": "Added the assert for paths", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424753975", "createdAt": "2020-05-13T21:56:00Z", "author": {"login": "abhishekdas99"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "diffHunk": "@@ -261,4 +261,53 @@ public void testConfLinkFallbackWithMountPoint() throws Exception {\n           e.getMessage().contains(expectedErrorMsg));\n     }\n   }\n+\n+  @Test\n+  public void testListingWithFallbackLink() throws Exception {\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/dir1\"));\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/dir2\"));\n+    String clusterName = Constants.CONFIG_VIEWFS_DEFAULT_MOUNT_TABLE;\n+    URI viewFsUri = new URI(FsConstants.VIEWFS_SCHEME, clusterName,\n+        \"/\", null, null);\n+\n+    int itemCount = 0;\n+    try(FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      itemCount = vfs.listStatus(new Path(viewFsUri.toString())).length;\n+    }\n+\n+    ConfigUtil.addLinkFallback(conf, clusterName,\n+        new Path(targetTestRoot, \"fallbackDir\").toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      FileStatus[] statuses = vfs.listStatus(new Path(viewFsUri.toString()));\n+      assertTrue(\"Listing didn't include fallback link\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NjU3OA=="}, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5MTgxNw==", "bodyText": "Thanks you for addressing. Let me take a look at it.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r426191817", "createdAt": "2020-05-16T21:14:21Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "diffHunk": "@@ -261,4 +261,53 @@ public void testConfLinkFallbackWithMountPoint() throws Exception {\n           e.getMessage().contains(expectedErrorMsg));\n     }\n   }\n+\n+  @Test\n+  public void testListingWithFallbackLink() throws Exception {\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/dir1\"));\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/dir2\"));\n+    String clusterName = Constants.CONFIG_VIEWFS_DEFAULT_MOUNT_TABLE;\n+    URI viewFsUri = new URI(FsConstants.VIEWFS_SCHEME, clusterName,\n+        \"/\", null, null);\n+\n+    int itemCount = 0;\n+    try(FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      itemCount = vfs.listStatus(new Path(viewFsUri.toString())).length;\n+    }\n+\n+    ConfigUtil.addLinkFallback(conf, clusterName,\n+        new Path(targetTestRoot, \"fallbackDir\").toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      FileStatus[] statuses = vfs.listStatus(new Path(viewFsUri.toString()));\n+      assertTrue(\"Listing didn't include fallback link\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NjU3OA=="}, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI5MTMxOnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowMzoxMFrOGUf3QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTo1Mzo0OFrOGVE3nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0Njc1Mw==", "bodyText": "I would like to see small java doc for test what you are doing.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424146753", "createdAt": "2020-05-13T03:03:10Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "diffHunk": "@@ -261,4 +261,53 @@ public void testConfLinkFallbackWithMountPoint() throws Exception {\n           e.getMessage().contains(expectedErrorMsg));\n     }\n   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1MzA1NQ==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424753055", "createdAt": "2020-05-13T21:53:48Z", "author": {"login": "abhishekdas99"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "diffHunk": "@@ -261,4 +261,53 @@ public void testConfLinkFallbackWithMountPoint() throws Exception {\n           e.getMessage().contains(expectedErrorMsg));\n     }\n   }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0Njc1Mw=="}, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI5NjIyOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/InodeTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowNjozMVrOGUf6OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTo1MDowOFrOGVExjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NzUxMw==", "bodyText": "For consistency: could you please change this method name as add* ?\nvar names can be fallBackLink --> fallbackLink\nIn exception message as well.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424147513", "createdAt": "2020-05-13T03:06:31Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/InodeTree.java", "diffHunk": "@@ -149,6 +150,17 @@ boolean isRoot() {\n       return isRoot;\n     }\n \n+    INodeLink<T> getFallbackLink() {\n+      return fallbackLink;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1MTUwMA==", "bodyText": "Done.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424751500", "createdAt": "2020-05-13T21:50:08Z", "author": {"login": "abhishekdas99"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/InodeTree.java", "diffHunk": "@@ -149,6 +150,17 @@ boolean isRoot() {\n       return isRoot;\n     }\n \n+    INodeLink<T> getFallbackLink() {\n+      return fallbackLink;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NzUxMw=="}, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTMwMTkyOnYy", "diffSide": "RIGHT", "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzoxMDozM1rOGUf9sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTo1Njo1MVrOGVE8eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0ODQwMw==", "bodyText": "How do we make sure we are getting mount link path displayed over fallback? Please validate this.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424148403", "createdAt": "2020-05-13T03:10:33Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "diffHunk": "@@ -261,4 +261,53 @@ public void testConfLinkFallbackWithMountPoint() throws Exception {\n           e.getMessage().contains(expectedErrorMsg));\n     }\n   }\n+\n+  @Test\n+  public void testListingWithFallbackLink() throws Exception {\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/dir1\"));\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/dir2\"));\n+    String clusterName = Constants.CONFIG_VIEWFS_DEFAULT_MOUNT_TABLE;\n+    URI viewFsUri = new URI(FsConstants.VIEWFS_SCHEME, clusterName,\n+        \"/\", null, null);\n+\n+    int itemCount = 0;\n+    try(FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      itemCount = vfs.listStatus(new Path(viewFsUri.toString())).length;\n+    }\n+\n+    ConfigUtil.addLinkFallback(conf, clusterName,\n+        new Path(targetTestRoot, \"fallbackDir\").toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      FileStatus[] statuses = vfs.listStatus(new Path(viewFsUri.toString()));\n+      assertTrue(\"Listing didn't include fallback link\",\n+          statuses.length == itemCount + 2);\n+    }\n+  }\n+\n+  @Test\n+  public void testListingWithFallbackLinkWithSameMountDirectories()\n+      throws Exception {\n+    // Creating two directories under the fallback dircetory.\n+    // user directory already exists as configured mount point.\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/user\"));\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/user1\"));\n+    String clusterName = Constants.CONFIG_VIEWFS_DEFAULT_MOUNT_TABLE;\n+    URI viewFsUri = new URI(FsConstants.VIEWFS_SCHEME, clusterName,\n+        \"/\", null, null);\n+\n+    int itemCount = 0;\n+    try(FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      itemCount = vfs.listStatus(new Path(viewFsUri.toString())).length;\n+    }\n+\n+    ConfigUtil.addLinkFallback(conf, clusterName,\n+        new Path(targetTestRoot, \"fallbackDir\").toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      FileStatus[] statuses = vfs.listStatus(new Path(viewFsUri.toString()));\n+      assertTrue(\"The same directory name in fallback link should be shaded\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NDI5Nw==", "bodyText": "Added a check to make sure the fallback path is not the one which has the same name as the mount path.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424754297", "createdAt": "2020-05-13T21:56:51Z", "author": {"login": "abhishekdas99"}, "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemLinkFallback.java", "diffHunk": "@@ -261,4 +261,53 @@ public void testConfLinkFallbackWithMountPoint() throws Exception {\n           e.getMessage().contains(expectedErrorMsg));\n     }\n   }\n+\n+  @Test\n+  public void testListingWithFallbackLink() throws Exception {\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/dir1\"));\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/dir2\"));\n+    String clusterName = Constants.CONFIG_VIEWFS_DEFAULT_MOUNT_TABLE;\n+    URI viewFsUri = new URI(FsConstants.VIEWFS_SCHEME, clusterName,\n+        \"/\", null, null);\n+\n+    int itemCount = 0;\n+    try(FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      itemCount = vfs.listStatus(new Path(viewFsUri.toString())).length;\n+    }\n+\n+    ConfigUtil.addLinkFallback(conf, clusterName,\n+        new Path(targetTestRoot, \"fallbackDir\").toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      FileStatus[] statuses = vfs.listStatus(new Path(viewFsUri.toString()));\n+      assertTrue(\"Listing didn't include fallback link\",\n+          statuses.length == itemCount + 2);\n+    }\n+  }\n+\n+  @Test\n+  public void testListingWithFallbackLinkWithSameMountDirectories()\n+      throws Exception {\n+    // Creating two directories under the fallback dircetory.\n+    // user directory already exists as configured mount point.\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/user\"));\n+    fsTarget.mkdirs(new Path(targetTestRoot, \"fallbackDir/user1\"));\n+    String clusterName = Constants.CONFIG_VIEWFS_DEFAULT_MOUNT_TABLE;\n+    URI viewFsUri = new URI(FsConstants.VIEWFS_SCHEME, clusterName,\n+        \"/\", null, null);\n+\n+    int itemCount = 0;\n+    try(FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      itemCount = vfs.listStatus(new Path(viewFsUri.toString())).length;\n+    }\n+\n+    ConfigUtil.addLinkFallback(conf, clusterName,\n+        new Path(targetTestRoot, \"fallbackDir\").toUri());\n+\n+    try (FileSystem vfs = FileSystem.get(viewFsUri, conf)) {\n+      FileStatus[] statuses = vfs.listStatus(new Path(viewFsUri.toString()));\n+      assertTrue(\"The same directory name in fallback link should be shaded\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0ODQwMw=="}, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk4NjE3OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0NTowNVrOGU6eAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoyMDoyN1rOGVFiRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MjY1Nw==", "bodyText": "You may want to add the similar changes in ViewFs.java  to cover FileContext based fs impl.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424582657", "createdAt": "2020-05-13T16:45:05Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1107,6 +1107,7 @@ public boolean hasPathCapability(Path path, String capability)\n     final long creationTime; // of the the mount table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2Mzk3Mw==", "bodyText": "Added change in ViewFs.java", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r424763973", "createdAt": "2020-05-13T22:20:27Z", "author": {"login": "abhishekdas99"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1107,6 +1107,7 @@ public boolean hasPathCapability(Path path, String capability)\n     final long creationTime; // of the the mount table", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MjY1Nw=="}, "originalCommit": {"oid": "378dead9315892ed8f988e386c7cabd8b63f1be2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTU3NzgzOnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMzozNzoyN1rOGVxsDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOToxMTozNVrOGV82uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ4NzM3NQ==", "bodyText": "Please remove above unused variable.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r425487375", "createdAt": "2020-05-14T23:37:27Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1226,7 +1227,39 @@ public FileStatus getFileStatus(Path f) throws IOException {\n                 myUri, null));\n         }\n       }\n-      return result;\n+      if (fallbackStatuses.length > 0) {\n+        return consolidateFileStatuses(fallbackStatuses, result);\n+      } else {\n+        return result;\n+      }\n+    }\n+\n+    private FileStatus[] consolidateFileStatuses(FileStatus[] fallbackStatuses,\n+        FileStatus[] mountPointStatuses) {\n+      ArrayList<FileStatus> result = new ArrayList<>();\n+      Set<String> pathSet = new HashSet<>();\n+      int i = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17bc407000d842e77c0d907134e54bb8ad82842"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3MDMzMQ==", "bodyText": "Done", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r425670331", "createdAt": "2020-05-15T09:11:35Z", "author": {"login": "abhishekdas99"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1226,7 +1227,39 @@ public FileStatus getFileStatus(Path f) throws IOException {\n                 myUri, null));\n         }\n       }\n-      return result;\n+      if (fallbackStatuses.length > 0) {\n+        return consolidateFileStatuses(fallbackStatuses, result);\n+      } else {\n+        return result;\n+      }\n+    }\n+\n+    private FileStatus[] consolidateFileStatuses(FileStatus[] fallbackStatuses,\n+        FileStatus[] mountPointStatuses) {\n+      ArrayList<FileStatus> result = new ArrayList<>();\n+      Set<String> pathSet = new HashSet<>();\n+      int i = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ4NzM3NQ=="}, "originalCommit": {"oid": "c17bc407000d842e77c0d907134e54bb8ad82842"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDEyODM3OnYy", "diffSide": "RIGHT", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMTo0MTo1N1rOGWcy7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMTo0MTo1N1rOGWcy7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5MzY0NQ==", "bodyText": "Overall looks good to me now.\nHowever, This will be a behavioral change. Users may suddenly see additional dirs listed in ls result. So, I would suggest to update Javadoc for this API? ( do the same thing at ViewFs.java as well)\nEx:\n/**\n   * {@inheritDoc}\n   * \n   * Note: ls on root(\"/\") considers listing from fallbackLink also if\n   * available. Also write about shading part when same dirs in mount link and\n   * fallback dir?\n   */\n  @Override\n  public FileStatus[] listStatus(final Path f) throws AccessControlException, \n\nI will also mark incompatible change at JIRA and can update release notes. What do you say?\nThanks for handling all the feedback. After adding this, I think we should be good to go.", "url": "https://github.com/apache/hadoop/pull/2010#discussion_r426193645", "createdAt": "2020-05-16T21:41:57Z", "author": {"login": "umamaheswararao"}, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java", "diffHunk": "@@ -1204,6 +1204,7 @@ public FileStatus getFileStatus(Path f) throws IOException {\n     public FileStatus[] listStatus(Path f) throws AccessControlException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46988ede0a6935c2a323a42cd8a68ca3ed1279d0"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3558, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}