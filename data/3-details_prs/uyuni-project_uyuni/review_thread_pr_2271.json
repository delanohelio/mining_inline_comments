{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NDg1NTQ4", "number": 2271, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoyODowMlrOEBvnWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoyODowMlrOEBvnWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY0MTU1OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/reactor/test/RegisterMinionActionTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoyODowMlrOGdxj6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzo1MzoyM1rOGeQPQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3Mzg5Ng==", "bodyText": "I would be happy about ideas for better testing it.\nI also have no idea why the first state.apply seems to be \"executed\" and not be anymore in the queue,\nbut the hightstate stay in the queue.", "url": "https://github.com/uyuni-project/uyuni/pull/2271#discussion_r433873896", "createdAt": "2020-06-02T13:28:02Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/reactor/test/RegisterMinionActionTest.java", "diffHunk": "@@ -1905,6 +1911,72 @@ public void testMinionWithUsedReActivationKeyWithStartUpGrains() throws Exceptio\n                 Optional.of(minionStartUpGrains));\n     }\n \n+    public void testRegisterMinionWithActivationKeyAndAddOns() throws Exception {\n+        MessageQueue.registerAction(new ApplyStatesEventMessageAction(),\n+                ApplyStatesEventMessage.class);\n+        MessageQueue.startMessaging();\n+        ChannelFamily channelFamily = createTestChannelFamily();\n+        SUSEProduct product = SUSEProductTestUtils.createTestSUSEProduct(channelFamily);\n+        Channel baseChannelX8664 = setupBaseAndRequiredChannels(channelFamily, product);\n+        HibernateFactory.getSession().flush();\n+        executeTest(\n+                (saltServiceMock, key) -> new Expectations() {{\n+                    allowing(saltServiceMock).getMasterHostname(MINION_ID);\n+                    will(returnValue(Optional.of(MINION_ID)));\n+                    allowing(saltServiceMock).getMachineId(MINION_ID);\n+                    will(returnValue(Optional.of(MACHINE_ID)));\n+                    MinionStartupGrains.SuseManagerGrain suseManagerGrain = new MinionStartupGrains.SuseManagerGrain(Optional.of(key));\n+                    MinionStartupGrains minionStartUpGrains =  new MinionStartupGrains.MinionStartupGrainsBuilder()\n+                            .machineId(MACHINE_ID).saltbootInitrd(false).susemanagerGrain(suseManagerGrain)\n+                            .createMinionStartUpGrains();\n+                    allowing(saltServiceMock).getGrains(with(any(String.class)), with(any(TypeToken.class)),with(any(String[].class)));\n+                    will(returnValue(Optional.of(minionStartUpGrains)));\n+                    allowing(saltServiceMock).syncGrains(with(any(MinionList.class)));\n+                    allowing(saltServiceMock).syncModules(with(any(MinionList.class)));\n+                    allowing(saltServiceMock).getGrains(MINION_ID);\n+                    will(returnValue(getGrains(MINION_ID, null, key)));\n+                }},\n+                (contactMethod) -> {\n+                    ActivationKey key = ActivationKeyTest.createTestActivationKey(user);\n+                    key.setBaseChannel(baseChannelX8664);\n+                    baseChannelX8664.getAccessibleChildrenFor(user)\n+                            .forEach(channel -> key.addChannel(channel));\n+                    key.setOrg(user.getOrg());\n+\n+                    Set<ServerGroupType> entitlementsIn = key.getEntitlements();\n+                    entitlementsIn.add(ServerConstants.getServerGroupTypeContainerBuildHostEntitled());\n+                    key.setEntitlements(entitlementsIn);\n+\n+                    ActivationKeyFactory.save(key);\n+                    return key.getKey();\n+                },\n+                (optMinion, machineId, key) -> {\n+                    assertTrue(optMinion.isPresent());\n+                    MinionServer minion = optMinion.get();\n+                    assertEquals(MINION_ID, minion.getName());\n+\n+                    // only channel associated with Activation Key and child\n+                    // channels associated with it must be present\n+                    assertNotNull(minion.getBaseChannel());\n+                    HashSet<Channel> channels = new HashSet<>();\n+                    channels.add(baseChannelX8664);\n+                    baseChannelX8664.getAccessibleChildrenFor(user)\n+                    .forEach(channel -> channels.add(channel));\n+                    assertEquals(baseChannelX8664, minion.getBaseChannel());\n+                    assertEquals(channels.size(), minion.getChannels().size());\n+                    assertTrue(minion.getChannels().containsAll(channels));\n+\n+                    assertTrue(minion.getFqdns().isEmpty());\n+                    // the first ApplyStatesEvent with channels is executed.\n+                    // the second (highstate) stay in the queue and can be counted\n+                    assertEquals(1, MessageQueue.getMessageCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99af08c7d71c9052e3bd15f6424b279c3346f64d"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1NDQwMQ==", "bodyText": "Hm, although it would be nice to have this tested, testing it this way looks quite dangerous to me. The reason, why we only get 1 message here is that the previous ApplyStatesEvent was processed by another thread (RHN dispatcher thread). The tests run in \"main\" thread, which could potentially bring some race conditions (e.g. if you put Thread.sleep(10000L); in the MessageQueue.popEventMessage on line 144, your test starts failing, as there will be 2 messages in the queue (this simulates the behavior, when the first ApplyStatesEvent \"would take longer\")).\nI think that testability of the MessageQueue is part of a bigger problem, which should be solved separately and properly, therefore I'd suggest removing this test.", "url": "https://github.com/uyuni-project/uyuni/pull/2271#discussion_r434354401", "createdAt": "2020-06-03T07:12:28Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/reactor/test/RegisterMinionActionTest.java", "diffHunk": "@@ -1905,6 +1911,72 @@ public void testMinionWithUsedReActivationKeyWithStartUpGrains() throws Exceptio\n                 Optional.of(minionStartUpGrains));\n     }\n \n+    public void testRegisterMinionWithActivationKeyAndAddOns() throws Exception {\n+        MessageQueue.registerAction(new ApplyStatesEventMessageAction(),\n+                ApplyStatesEventMessage.class);\n+        MessageQueue.startMessaging();\n+        ChannelFamily channelFamily = createTestChannelFamily();\n+        SUSEProduct product = SUSEProductTestUtils.createTestSUSEProduct(channelFamily);\n+        Channel baseChannelX8664 = setupBaseAndRequiredChannels(channelFamily, product);\n+        HibernateFactory.getSession().flush();\n+        executeTest(\n+                (saltServiceMock, key) -> new Expectations() {{\n+                    allowing(saltServiceMock).getMasterHostname(MINION_ID);\n+                    will(returnValue(Optional.of(MINION_ID)));\n+                    allowing(saltServiceMock).getMachineId(MINION_ID);\n+                    will(returnValue(Optional.of(MACHINE_ID)));\n+                    MinionStartupGrains.SuseManagerGrain suseManagerGrain = new MinionStartupGrains.SuseManagerGrain(Optional.of(key));\n+                    MinionStartupGrains minionStartUpGrains =  new MinionStartupGrains.MinionStartupGrainsBuilder()\n+                            .machineId(MACHINE_ID).saltbootInitrd(false).susemanagerGrain(suseManagerGrain)\n+                            .createMinionStartUpGrains();\n+                    allowing(saltServiceMock).getGrains(with(any(String.class)), with(any(TypeToken.class)),with(any(String[].class)));\n+                    will(returnValue(Optional.of(minionStartUpGrains)));\n+                    allowing(saltServiceMock).syncGrains(with(any(MinionList.class)));\n+                    allowing(saltServiceMock).syncModules(with(any(MinionList.class)));\n+                    allowing(saltServiceMock).getGrains(MINION_ID);\n+                    will(returnValue(getGrains(MINION_ID, null, key)));\n+                }},\n+                (contactMethod) -> {\n+                    ActivationKey key = ActivationKeyTest.createTestActivationKey(user);\n+                    key.setBaseChannel(baseChannelX8664);\n+                    baseChannelX8664.getAccessibleChildrenFor(user)\n+                            .forEach(channel -> key.addChannel(channel));\n+                    key.setOrg(user.getOrg());\n+\n+                    Set<ServerGroupType> entitlementsIn = key.getEntitlements();\n+                    entitlementsIn.add(ServerConstants.getServerGroupTypeContainerBuildHostEntitled());\n+                    key.setEntitlements(entitlementsIn);\n+\n+                    ActivationKeyFactory.save(key);\n+                    return key.getKey();\n+                },\n+                (optMinion, machineId, key) -> {\n+                    assertTrue(optMinion.isPresent());\n+                    MinionServer minion = optMinion.get();\n+                    assertEquals(MINION_ID, minion.getName());\n+\n+                    // only channel associated with Activation Key and child\n+                    // channels associated with it must be present\n+                    assertNotNull(minion.getBaseChannel());\n+                    HashSet<Channel> channels = new HashSet<>();\n+                    channels.add(baseChannelX8664);\n+                    baseChannelX8664.getAccessibleChildrenFor(user)\n+                    .forEach(channel -> channels.add(channel));\n+                    assertEquals(baseChannelX8664, minion.getBaseChannel());\n+                    assertEquals(channels.size(), minion.getChannels().size());\n+                    assertTrue(minion.getChannels().containsAll(channels));\n+\n+                    assertTrue(minion.getFqdns().isEmpty());\n+                    // the first ApplyStatesEvent with channels is executed.\n+                    // the second (highstate) stay in the queue and can be counted\n+                    assertEquals(1, MessageQueue.getMessageCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3Mzg5Ng=="}, "originalCommit": {"oid": "99af08c7d71c9052e3bd15f6424b279c3346f64d"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3NjUxMw==", "bodyText": "removed", "url": "https://github.com/uyuni-project/uyuni/pull/2271#discussion_r434376513", "createdAt": "2020-06-03T07:53:23Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/reactor/test/RegisterMinionActionTest.java", "diffHunk": "@@ -1905,6 +1911,72 @@ public void testMinionWithUsedReActivationKeyWithStartUpGrains() throws Exceptio\n                 Optional.of(minionStartUpGrains));\n     }\n \n+    public void testRegisterMinionWithActivationKeyAndAddOns() throws Exception {\n+        MessageQueue.registerAction(new ApplyStatesEventMessageAction(),\n+                ApplyStatesEventMessage.class);\n+        MessageQueue.startMessaging();\n+        ChannelFamily channelFamily = createTestChannelFamily();\n+        SUSEProduct product = SUSEProductTestUtils.createTestSUSEProduct(channelFamily);\n+        Channel baseChannelX8664 = setupBaseAndRequiredChannels(channelFamily, product);\n+        HibernateFactory.getSession().flush();\n+        executeTest(\n+                (saltServiceMock, key) -> new Expectations() {{\n+                    allowing(saltServiceMock).getMasterHostname(MINION_ID);\n+                    will(returnValue(Optional.of(MINION_ID)));\n+                    allowing(saltServiceMock).getMachineId(MINION_ID);\n+                    will(returnValue(Optional.of(MACHINE_ID)));\n+                    MinionStartupGrains.SuseManagerGrain suseManagerGrain = new MinionStartupGrains.SuseManagerGrain(Optional.of(key));\n+                    MinionStartupGrains minionStartUpGrains =  new MinionStartupGrains.MinionStartupGrainsBuilder()\n+                            .machineId(MACHINE_ID).saltbootInitrd(false).susemanagerGrain(suseManagerGrain)\n+                            .createMinionStartUpGrains();\n+                    allowing(saltServiceMock).getGrains(with(any(String.class)), with(any(TypeToken.class)),with(any(String[].class)));\n+                    will(returnValue(Optional.of(minionStartUpGrains)));\n+                    allowing(saltServiceMock).syncGrains(with(any(MinionList.class)));\n+                    allowing(saltServiceMock).syncModules(with(any(MinionList.class)));\n+                    allowing(saltServiceMock).getGrains(MINION_ID);\n+                    will(returnValue(getGrains(MINION_ID, null, key)));\n+                }},\n+                (contactMethod) -> {\n+                    ActivationKey key = ActivationKeyTest.createTestActivationKey(user);\n+                    key.setBaseChannel(baseChannelX8664);\n+                    baseChannelX8664.getAccessibleChildrenFor(user)\n+                            .forEach(channel -> key.addChannel(channel));\n+                    key.setOrg(user.getOrg());\n+\n+                    Set<ServerGroupType> entitlementsIn = key.getEntitlements();\n+                    entitlementsIn.add(ServerConstants.getServerGroupTypeContainerBuildHostEntitled());\n+                    key.setEntitlements(entitlementsIn);\n+\n+                    ActivationKeyFactory.save(key);\n+                    return key.getKey();\n+                },\n+                (optMinion, machineId, key) -> {\n+                    assertTrue(optMinion.isPresent());\n+                    MinionServer minion = optMinion.get();\n+                    assertEquals(MINION_ID, minion.getName());\n+\n+                    // only channel associated with Activation Key and child\n+                    // channels associated with it must be present\n+                    assertNotNull(minion.getBaseChannel());\n+                    HashSet<Channel> channels = new HashSet<>();\n+                    channels.add(baseChannelX8664);\n+                    baseChannelX8664.getAccessibleChildrenFor(user)\n+                    .forEach(channel -> channels.add(channel));\n+                    assertEquals(baseChannelX8664, minion.getBaseChannel());\n+                    assertEquals(channels.size(), minion.getChannels().size());\n+                    assertTrue(minion.getChannels().containsAll(channels));\n+\n+                    assertTrue(minion.getFqdns().isEmpty());\n+                    // the first ApplyStatesEvent with channels is executed.\n+                    // the second (highstate) stay in the queue and can be counted\n+                    assertEquals(1, MessageQueue.getMessageCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3Mzg5Ng=="}, "originalCommit": {"oid": "99af08c7d71c9052e3bd15f6424b279c3346f64d"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4276, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}