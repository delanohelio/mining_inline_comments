{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNzA2NTU0", "number": 2117, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTo1NDoyOFrODxSalg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1MDoyN1rODzxGug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDA4NTM0OnYy", "diffSide": "RIGHT", "path": "rel-eng/uyuni-check-version", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTo1NDoyOFrOGErB8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTo1NDoyOFrOGErB8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1MjQ5OQ==", "bodyText": "IIRC new osc versions have a new path for this file, so maybe we will need to check both.", "url": "https://github.com/uyuni-project/uyuni/pull/2117#discussion_r407552499", "createdAt": "2020-04-13T15:54:28Z", "author": {"login": "juliogonzalez"}, "path": "rel-eng/uyuni-check-version", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/usr/bin/python3\n+\n+from argparse import ArgumentParser\n+from configparser import ConfigParser\n+from itertools import chain\n+from os.path import dirname, expanduser, realpath\n+from re import match\n+from sys import exit\n+import urllib.parse\n+import urllib.request\n+\n+PRJ = 'systemsmanagement:Uyuni:Master'\n+PACKAGES = ['patterns-uyuni', 'uyuni-docs_en',\n+            'release-notes-uyuni', 'release-notes-uyuni-proxy']\n+\n+\n+def webui_version(conf='%s/../web/conf/rhn_web.conf' % dirname(realpath(__file__))):\n+    config = ConfigParser()\n+    with open(conf) as f:\n+        # This is basically a hack, as our .conf file does not have sections\n+        config.read_file(chain(['[section]'], f), source=conf)\n+        return config.get('section', 'web.version.uyuni')\n+\n+\n+def obs_get_package_ver(args, project, package):\n+    url = \"%s/source/%s/%s/%s.spec\" % (args.apiurl, project, package, package)\n+    user = args.user\n+    password = args.password\n+    password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()\n+    password_mgr.add_password(None, url, user, password)\n+    auth_handler = urllib.request.HTTPBasicAuthHandler(password_mgr)\n+    opener = urllib.request.build_opener(auth_handler)\n+    urllib.request.install_opener(opener)\n+    req = urllib.request.Request(url=url, method='GET')\n+    resource = urllib.request.urlopen(req)\n+    charset = resource.headers.get_content_charset()\n+    if charset is None:\n+        charset = 'utf-8'\n+    for line in resource.read().decode(charset).split('\\n'):\n+        version = match('^Version:\\s*(\\S+)$', line)\n+        if version:\n+            return version.group(1)\n+\n+\n+def parse_arguments():\n+    \"\"\" Parse arguments from command line \"\"\"\n+    parser = ArgumentParser(\n+        description=\"Check if Uyuni versions are aligned at all packages before a release\")\n+    parser.add_argument(\"-u\", \"--user\", action=\"store\", dest=\"user\",\n+                        help=\"OBS Username or read from ~/.oscrc\")\n+    parser.add_argument(\"-p\", \"--password\", action=\"store\", dest=\"password\",\n+                        help=\"OBS Password or read from ~/.oscrc\")\n+    parser.add_argument(\"-a\", \"--api-url\", action=\"store\", dest=\"apiurl\",\n+                        default=\"https://api.opensuse.org\",\n+                        help=\"OBS API URL (Default: https://api.opensuse.org\")\n+    args = parser.parse_args()\n+    if not args.user or not args.password:\n+        try:\n+            creds_path = \"%s/.oscrc\" % expanduser('~')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e229b2a68f3cbe867b9c71447d3999fab971eab8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjA4NTA2OnYy", "diffSide": "RIGHT", "path": "rel-eng/uyuni-check-version", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1MDoyN1rOGIYZcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTowMzoyN1rOGIZCXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0MTUyMg==", "bodyText": "I would use a different name for the variable to not overwrite the webui_version function.", "url": "https://github.com/uyuni-project/uyuni/pull/2117#discussion_r411441522", "createdAt": "2020-04-20T14:50:27Z", "author": {"login": "meaksh"}, "path": "rel-eng/uyuni-check-version", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/usr/bin/python3\n+\n+from argparse import ArgumentParser\n+from configparser import ConfigParser\n+from itertools import chain\n+from os.path import dirname, expanduser, realpath\n+from re import match\n+from sys import exit\n+import urllib.parse\n+import urllib.request\n+\n+PRJ = 'systemsmanagement:Uyuni:Master'\n+PACKAGES = ['patterns-uyuni', 'uyuni-docs_en',\n+            'release-notes-uyuni', 'release-notes-uyuni-proxy']\n+\n+\n+def webui_version(conf='%s/../web/conf/rhn_web.conf' % dirname(realpath(__file__))):\n+    config = ConfigParser()\n+    with open(conf) as f:\n+        # This is basically a hack, as our .conf file does not have sections\n+        config.read_file(chain(['[section]'], f), source=conf)\n+        return config.get('section', 'web.version.uyuni')\n+\n+\n+def obs_get_package_ver(args, project, package):\n+    url = \"%s/source/%s/%s/%s.spec\" % (args.apiurl, project, package, package)\n+    user = args.user\n+    password = args.password\n+    password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()\n+    password_mgr.add_password(None, url, user, password)\n+    auth_handler = urllib.request.HTTPBasicAuthHandler(password_mgr)\n+    opener = urllib.request.build_opener(auth_handler)\n+    urllib.request.install_opener(opener)\n+    req = urllib.request.Request(url=url, method='GET')\n+    resource = urllib.request.urlopen(req)\n+    charset = resource.headers.get_content_charset()\n+    if charset is None:\n+        charset = 'utf-8'\n+    for line in resource.read().decode(charset).split('\\n'):\n+        version = match('^Version:\\s*(\\S+)$', line)\n+        if version:\n+            return version.group(1)\n+\n+\n+def parse_arguments():\n+    \"\"\" Parse arguments from command line \"\"\"\n+    parser = ArgumentParser(\n+        description=\"Check if Uyuni versions are aligned at all packages before a release\")\n+    parser.add_argument(\"-u\", \"--user\", action=\"store\", dest=\"user\",\n+                        help=\"OBS Username or read from ~/.oscrc\")\n+    parser.add_argument(\"-p\", \"--password\", action=\"store\", dest=\"password\",\n+                        help=\"OBS Password or read from ~/.oscrc\")\n+    parser.add_argument(\"-a\", \"--api-url\", action=\"store\", dest=\"apiurl\",\n+                        default=\"https://api.opensuse.org\",\n+                        help=\"OBS API URL (Default: https://api.opensuse.org\")\n+    args = parser.parse_args()\n+    if not args.user or not args.password:\n+        try:\n+            creds_path = \"%s/.oscrc\" % expanduser('~')\n+            creds = ConfigParser()\n+            creds.read(creds_path)\n+            args.user = creds.get(args.apiurl, 'user')\n+            args.password = creds.get(args.apiurl, 'pass')\n+        except Exception:\n+            raise RuntimeError(\n+                'Could not find credentials for %s at %s' % (args.apiurl, creds_path))\n+    return args\n+\n+\n+def print_info(msg):\n+    print(\"[\\033[01m\\033[34mINFO \\033[0m] %s\" % msg)\n+\n+\n+def print_ok(msg):\n+    print(\"[\\033[01m\\033[32mOK   \\033[0m] %s\" % msg)\n+\n+\n+def print_error(msg):\n+    print(\"[\\033[01m\\033[31mERROR\\033[0m] %s\" % msg)\n+\n+\n+args = parse_arguments()\n+webui_version = webui_version()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5036803afb20728d2c011c1d08d4c7dc92412863"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1MTk5OA==", "bodyText": "I changed the function to get_webui_version.", "url": "https://github.com/uyuni-project/uyuni/pull/2117#discussion_r411451998", "createdAt": "2020-04-20T15:03:27Z", "author": {"login": "juliogonzalez"}, "path": "rel-eng/uyuni-check-version", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/usr/bin/python3\n+\n+from argparse import ArgumentParser\n+from configparser import ConfigParser\n+from itertools import chain\n+from os.path import dirname, expanduser, realpath\n+from re import match\n+from sys import exit\n+import urllib.parse\n+import urllib.request\n+\n+PRJ = 'systemsmanagement:Uyuni:Master'\n+PACKAGES = ['patterns-uyuni', 'uyuni-docs_en',\n+            'release-notes-uyuni', 'release-notes-uyuni-proxy']\n+\n+\n+def webui_version(conf='%s/../web/conf/rhn_web.conf' % dirname(realpath(__file__))):\n+    config = ConfigParser()\n+    with open(conf) as f:\n+        # This is basically a hack, as our .conf file does not have sections\n+        config.read_file(chain(['[section]'], f), source=conf)\n+        return config.get('section', 'web.version.uyuni')\n+\n+\n+def obs_get_package_ver(args, project, package):\n+    url = \"%s/source/%s/%s/%s.spec\" % (args.apiurl, project, package, package)\n+    user = args.user\n+    password = args.password\n+    password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()\n+    password_mgr.add_password(None, url, user, password)\n+    auth_handler = urllib.request.HTTPBasicAuthHandler(password_mgr)\n+    opener = urllib.request.build_opener(auth_handler)\n+    urllib.request.install_opener(opener)\n+    req = urllib.request.Request(url=url, method='GET')\n+    resource = urllib.request.urlopen(req)\n+    charset = resource.headers.get_content_charset()\n+    if charset is None:\n+        charset = 'utf-8'\n+    for line in resource.read().decode(charset).split('\\n'):\n+        version = match('^Version:\\s*(\\S+)$', line)\n+        if version:\n+            return version.group(1)\n+\n+\n+def parse_arguments():\n+    \"\"\" Parse arguments from command line \"\"\"\n+    parser = ArgumentParser(\n+        description=\"Check if Uyuni versions are aligned at all packages before a release\")\n+    parser.add_argument(\"-u\", \"--user\", action=\"store\", dest=\"user\",\n+                        help=\"OBS Username or read from ~/.oscrc\")\n+    parser.add_argument(\"-p\", \"--password\", action=\"store\", dest=\"password\",\n+                        help=\"OBS Password or read from ~/.oscrc\")\n+    parser.add_argument(\"-a\", \"--api-url\", action=\"store\", dest=\"apiurl\",\n+                        default=\"https://api.opensuse.org\",\n+                        help=\"OBS API URL (Default: https://api.opensuse.org\")\n+    args = parser.parse_args()\n+    if not args.user or not args.password:\n+        try:\n+            creds_path = \"%s/.oscrc\" % expanduser('~')\n+            creds = ConfigParser()\n+            creds.read(creds_path)\n+            args.user = creds.get(args.apiurl, 'user')\n+            args.password = creds.get(args.apiurl, 'pass')\n+        except Exception:\n+            raise RuntimeError(\n+                'Could not find credentials for %s at %s' % (args.apiurl, creds_path))\n+    return args\n+\n+\n+def print_info(msg):\n+    print(\"[\\033[01m\\033[34mINFO \\033[0m] %s\" % msg)\n+\n+\n+def print_ok(msg):\n+    print(\"[\\033[01m\\033[32mOK   \\033[0m] %s\" % msg)\n+\n+\n+def print_error(msg):\n+    print(\"[\\033[01m\\033[31mERROR\\033[0m] %s\" % msg)\n+\n+\n+args = parse_arguments()\n+webui_version = webui_version()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0MTUyMg=="}, "originalCommit": {"oid": "5036803afb20728d2c011c1d08d4c7dc92412863"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4327, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}