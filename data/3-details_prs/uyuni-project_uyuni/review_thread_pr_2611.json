{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3OTU3NTcy", "number": 2611, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNTo1M1rOElrlOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDozOTowMVrOElsTQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQ2ODA4OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/controllers/virtualization/VirtualGuestsController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNTo1M1rOHVSSEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNTo1M1rOHVSSEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MTY4Mg==", "bodyText": "I prefer a ternary operator instead:\ndata.put(\"hypervisor\",\n    hasVirtualizationEntitlement() ? virtManager.getHypervisor(server.getMinionId()) : \"\"\n);", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492081682", "createdAt": "2020-09-21T14:15:53Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/suse/manager/webui/controllers/virtualization/VirtualGuestsController.java", "diffHunk": "@@ -144,6 +144,11 @@ public ModelAndView show(Request request, Response response, User user) {\n         data.put(\"salt_entitled\", server.hasEntitlement(EntitlementManager.SALT));\n         data.put(\"foreign_entitled\", server.hasEntitlement(EntitlementManager.FOREIGN));\n         data.put(\"is_admin\", user.hasRole(RoleFactory.ORG_ADMIN));\n+        String hypervisor = \"\";\n+        if (server.hasVirtualizationEntitlement()) {\n+            hypervisor = virtManager.getHypervisor(server.getMinionId()).orElse(\"\");\n+        }\n+        data.put(\"hypervisor\", hypervisor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQ3MTEwOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/controllers/virtualization/VirtualNetsController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNjoxN1rOHVST9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNjoxN1rOHVST9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MjE2NA==", "bodyText": "Ternary operator same as before", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492082164", "createdAt": "2020-09-21T14:16:17Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/suse/manager/webui/controllers/virtualization/VirtualNetsController.java", "diffHunk": "@@ -86,7 +87,16 @@ public void initRoutes(JadeTemplateEngine jade) {\n      * @return the ModelAndView object to render the page\n      */\n     public ModelAndView show(Request request, Response response, User user) {\n-        return renderPage(request, response, user, \"show\", null);\n+        Server host = getServer(request, user);\n+        return renderPage(request, response, user, \"show\", () -> {\n+            Map<String, Object> extra = new HashMap<>();\n+            String hypervisor = \"\";\n+            if (host.hasVirtualizationEntitlement()) {\n+                hypervisor = virtManager.getHypervisor(host.getMinionId()).orElse(\"\");\n+            }\n+            extra.put(\"hypervisor\", hypervisor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQ3NDI4OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/controllers/virtualization/VirtualPoolsController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNjo0NVrOHVSV5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNjo0NVrOHVSV5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MjY2Mw==", "bodyText": "Ternary operator same as before", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492082663", "createdAt": "2020-09-21T14:16:45Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/suse/manager/webui/controllers/virtualization/VirtualPoolsController.java", "diffHunk": "@@ -120,7 +120,16 @@ public void initRoutes(JadeTemplateEngine jade) {\n      * @return the ModelAndView object to render the page\n      */\n     public ModelAndView show(Request request, Response response, User user) {\n-        return renderPage(request, response, user, \"show\", null);\n+        Server host = getServer(request, user);\n+        return renderPage(request, response, user, \"show\", () -> {\n+            Map<String, Object> extra = new HashMap<>();\n+            String hypervisor = \"\";\n+            if (host.hasVirtualizationEntitlement()) {\n+                hypervisor = virtManager.getHypervisor(host.getMinionId()).orElse(\"\");\n+            }\n+            extra.put(\"hypervisor\", hypervisor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTUwODYyOnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/virtualization/HypervisorCheck.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoyMjo0MFrOHVSryQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoyMjo0MFrOHVSryQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4ODI2NQ==", "bodyText": "Renaming virtWarning to virtError sounds better as long as it used for MessagesUtils.error.", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492088265", "createdAt": "2020-09-21T14:22:40Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/virtualization/HypervisorCheck.js", "diffHunk": "@@ -0,0 +1,33 @@\n+// @flow\n+import * as React from 'react';\n+\n+import { Messages } from 'components/messages';\n+import { Utils as MessagesUtils } from 'components/messages';\n+\n+type Props = {\n+    hypervisor: string,\n+    foreignEntitled: boolean,\n+};\n+\n+export function HypervisorCheck(props: Props) {\n+    if (props.foreignEntitled) {\n+        return null;\n+    }\n+\n+    const virtMissing = props.hypervisor.includes(\"'virt' __virtual__ returned False\");\n+    if (virtMissing) {\n+        const virtWarning = MessagesUtils.error(t(\"Please install libvirt python module.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTUxNjE3OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/virtualization/HypervisorCheck.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoyNDoxN1rOHVSwcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToxMToxMlrOHVVYRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4OTQ1OQ==", "bodyText": "Just to make sure: is this intended to be a warning message AKA the user should be aware of it but still he can continue working with the current situation, or it is more an error message AKA the user should stop and fix it if he wants to continue working?", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492089459", "createdAt": "2020-09-21T14:24:17Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/virtualization/HypervisorCheck.js", "diffHunk": "@@ -0,0 +1,33 @@\n+// @flow\n+import * as React from 'react';\n+\n+import { Messages } from 'components/messages';\n+import { Utils as MessagesUtils } from 'components/messages';\n+\n+type Props = {\n+    hypervisor: string,\n+    foreignEntitled: boolean,\n+};\n+\n+export function HypervisorCheck(props: Props) {\n+    if (props.foreignEntitled) {\n+        return null;\n+    }\n+\n+    const virtMissing = props.hypervisor.includes(\"'virt' __virtual__ returned False\");\n+    if (virtMissing) {\n+        const virtWarning = MessagesUtils.error(t(\"Please install libvirt python module.\"));\n+        return <Messages items={virtWarning}/>;\n+    }\n+\n+    const warning = props.hypervisor === \"\" ?\n+        MessagesUtils.warning(t(\"Neither KVM nor Xen is running. Ensure they are installed and the kernel modules are loaded.\")) :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMjQyMQ==", "bodyText": "in most cases he should fix first... for KVM however it could work in user-mode only though slower", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492132421", "createdAt": "2020-09-21T15:11:12Z", "author": {"login": "cbosdo"}, "path": "web/html/src/manager/virtualization/HypervisorCheck.js", "diffHunk": "@@ -0,0 +1,33 @@\n+// @flow\n+import * as React from 'react';\n+\n+import { Messages } from 'components/messages';\n+import { Utils as MessagesUtils } from 'components/messages';\n+\n+type Props = {\n+    hypervisor: string,\n+    foreignEntitled: boolean,\n+};\n+\n+export function HypervisorCheck(props: Props) {\n+    if (props.foreignEntitled) {\n+        return null;\n+    }\n+\n+    const virtMissing = props.hypervisor.includes(\"'virt' __virtual__ returned False\");\n+    if (virtMissing) {\n+        const virtWarning = MessagesUtils.error(t(\"Please install libvirt python module.\"));\n+        return <Messages items={virtWarning}/>;\n+    }\n+\n+    const warning = props.hypervisor === \"\" ?\n+        MessagesUtils.warning(t(\"Neither KVM nor Xen is running. Ensure they are installed and the kernel modules are loaded.\")) :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4OTQ1OQ=="}, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTU1MTA5OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/virtualization/guests/list/guests-list.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDozMToxOVrOHVTF5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDozMToxOVrOHVTF5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5NDk1MQ==", "bodyText": "This indentation/code-style is driving me crazy sorry \ud83d\ude05\nCould you please rewrite with some empty line between objects, and whenever it is possible without breaking lines? Something like the following:\n...\n\n{state === 'running' && row.name !== 'Domain-0' && createModalButton('suspend', modalsData, row) }\n\n{state !== 'stopped' && row.name !== 'Domain-0' && createModalButton('shutdown', modalsData, row) }\n\n{(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n\n...", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492094951", "createdAt": "2020-09-21T14:31:19Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/virtualization/guests/list/guests-list.js", "diffHunk": "@@ -36,134 +38,137 @@ export function GuestsList(props: Props) {\n   ];\n \n   return (\n-    <ListTab\n-      serverId={props.serverId}\n-      saltEntitled={props.saltEntitled}\n-      pageSize={props.pageSize}\n-      type=\"guest\"\n-      title={t('Hosted Virtual Systems')}\n-      description={t('This is a list of virtual guests which are configured to run on this host.')}\n-      modalsData={modalsData}\n-      isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n-      getCreateActionsKeys={(actions) => {\n-        return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n-      }}\n-      idName=\"uuid\"\n-    >\n-    {\n-      (createModalButton, onAction) => {\n-          const columns = [\n-            <Column\n-              columnKey=\"name\"\n-              comparator={Utils.sortByText}\n-              header={t('Guest')}\n-              cell={row => row.name}\n-            />,\n-            <Column\n-              columnKey=\"serverName\"\n-              comparator={Utils.sortByText}\n-              header={t('System')}\n-              cell={(row) => {\n-                if (row.virtualSystemId == null) {\n-                  return t('Unregistered System');\n-                }\n+    <>\n+      <HypervisorCheck foreignEntitled={props.foreignEntitled} hypervisor={props.hypervisor}/>\n+      <ListTab\n+        serverId={props.serverId}\n+        saltEntitled={props.saltEntitled}\n+        pageSize={props.pageSize}\n+        type=\"guest\"\n+        title={t('Hosted Virtual Systems')}\n+        description={t('This is a list of virtual guests which are configured to run on this host.')}\n+        modalsData={modalsData}\n+        isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n+        getCreateActionsKeys={(actions) => {\n+          return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n+        }}\n+        idName=\"uuid\"\n+      >\n+      {\n+        (createModalButton, onAction) => {\n+            const columns = [\n+              <Column\n+                columnKey=\"name\"\n+                comparator={Utils.sortByText}\n+                header={t('Guest')}\n+                cell={row => row.name}\n+              />,\n+              <Column\n+                columnKey=\"serverName\"\n+                comparator={Utils.sortByText}\n+                header={t('System')}\n+                cell={(row) => {\n+                  if (row.virtualSystemId == null) {\n+                    return t('Unregistered System');\n+                  }\n \n-                if (row.accessible) {\n-                  return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n-                }\n-                return row.serverName;\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"statusType\"\n-              comparator={ListUtils.sortByUpdate}\n-              header={t('Updates')}\n-              cell={(row) => {\n-                if (row.statusType == null) {\n-                  return '-';\n-                }\n-                return Systems.statusDisplay(row, props.isAdmin);\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"stateLabel\"\n-              header={t('State')}\n-              comparator={ListUtils.sortByState}\n-              cell={row => row.stateName}\n-            />,\n-            <Column\n-              columnKey=\"memory\"\n-              comparator={Utils.sortByNumber}\n-              header={t('Current Memory')}\n-              cell={row => `${row.memory / 1024} MiB`}\n-            />,\n-            <Column\n-              columnKey=\"vcpus\"\n-              comparator={Utils.sortByNumber}\n-              header={t('vCPUs')}\n-              cell={row => row.vcpus}\n-            />,\n-            <Column\n-              columnKey=\"channelLabels\"\n-              comparator={Utils.sortByText}\n-              header={t('Base Software Channel')}\n-              cell={(row) => {\n-                if (row.channelId == null) {\n-                  return t('(none)');\n-                }\n-                if (row.subscribable) {\n-                  return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n-                }\n-                return row.channelLabels;\n-              }}\n-            />\n-          ];\n+                  if (row.accessible) {\n+                    return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n+                  }\n+                  return row.serverName;\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"statusType\"\n+                comparator={ListUtils.sortByUpdate}\n+                header={t('Updates')}\n+                cell={(row) => {\n+                  if (row.statusType == null) {\n+                    return '-';\n+                  }\n+                  return Systems.statusDisplay(row, props.isAdmin);\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"stateLabel\"\n+                header={t('State')}\n+                comparator={ListUtils.sortByState}\n+                cell={row => row.stateName}\n+              />,\n+              <Column\n+                columnKey=\"memory\"\n+                comparator={Utils.sortByNumber}\n+                header={t('Current Memory')}\n+                cell={row => `${row.memory / 1024} MiB`}\n+              />,\n+              <Column\n+                columnKey=\"vcpus\"\n+                comparator={Utils.sortByNumber}\n+                header={t('vCPUs')}\n+                cell={row => row.vcpus}\n+              />,\n+              <Column\n+                columnKey=\"channelLabels\"\n+                comparator={Utils.sortByText}\n+                header={t('Base Software Channel')}\n+                cell={(row) => {\n+                  if (row.channelId == null) {\n+                    return t('(none)');\n+                  }\n+                  if (row.subscribable) {\n+                    return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n+                  }\n+                  return row.channelLabels;\n+                }}\n+              />\n+            ];\n \n-          const actionsProvider =\n-            (row) => {\n-              if (props.foreignEntitled) {\n-                return [];\n-              }\n-              const state = row.stateLabel;\n-              return (\n-                <div className=\"btn-group\">\n-                  {state !== 'running' && row.name !== 'Domain-0'\n-                   && (\n-                     <AsyncButton\n-                       defaultType=\"btn-default btn-sm\"\n-                       title={t(state === 'paused' ? 'Resume' : 'Start')}\n-                       icon=\"fa-play\"\n-                       action={() => onAction('start', [row.uuid], {})}\n-                     />) }\n-                  {state === 'running' && row.name !== 'Domain-0'\n-                   && createModalButton('suspend', modalsData, row) }\n-                  {state !== 'stopped' && row.name !== 'Domain-0'\n-                   && createModalButton('shutdown', modalsData, row) }\n-                  {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n-                  {props.saltEntitled && state === 'running' && (\n+            const actionsProvider =\n+              (row) => {\n+                if (props.foreignEntitled) {\n+                  return [];\n+                }\n+                const state = row.stateLabel;\n+                return (\n+                  <div className=\"btn-group\">\n+                    {state !== 'running' && row.name !== 'Domain-0'\n+                     && (\n+                       <AsyncButton\n+                         defaultType=\"btn-default btn-sm\"\n+                         title={t(state === 'paused' ? 'Resume' : 'Start')}\n+                         icon=\"fa-play\"\n+                         action={() => onAction('start', [row.uuid], {})}\n+                       />) }\n+                    {state === 'running' && row.name !== 'Domain-0'\n+                     && createModalButton('suspend', modalsData, row) }\n+                    {state !== 'stopped' && row.name !== 'Domain-0'\n+                     && createModalButton('shutdown', modalsData, row) }\n+                    {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n+                    {props.saltEntitled && state === 'running' && (\n+                      <LinkButton\n+                        title={t('Graphical Console')}\n+                        className=\"btn-default btn-sm\"\n+                        icon=\"fa-desktop\"\n+                        href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/console/${row.uuid}`}\n+                        target=\"_blank\"\n+                      />\n+                    )}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTU4NTkyOnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/virtualization/guests/list/guests-list.js", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDozOTowMVrOHVTcJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODozNTowMlrOHVvsAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEwMDY0Ng==", "bodyText": "Wouldn't it be worth to save the Domain-0 to a variable you can compare against? I see this string occurs many time. I wonder the troubles if at some point it will change to something else. Am I missing something?", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492100646", "createdAt": "2020-09-21T14:39:01Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/virtualization/guests/list/guests-list.js", "diffHunk": "@@ -36,134 +38,137 @@ export function GuestsList(props: Props) {\n   ];\n \n   return (\n-    <ListTab\n-      serverId={props.serverId}\n-      saltEntitled={props.saltEntitled}\n-      pageSize={props.pageSize}\n-      type=\"guest\"\n-      title={t('Hosted Virtual Systems')}\n-      description={t('This is a list of virtual guests which are configured to run on this host.')}\n-      modalsData={modalsData}\n-      isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n-      getCreateActionsKeys={(actions) => {\n-        return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n-      }}\n-      idName=\"uuid\"\n-    >\n-    {\n-      (createModalButton, onAction) => {\n-          const columns = [\n-            <Column\n-              columnKey=\"name\"\n-              comparator={Utils.sortByText}\n-              header={t('Guest')}\n-              cell={row => row.name}\n-            />,\n-            <Column\n-              columnKey=\"serverName\"\n-              comparator={Utils.sortByText}\n-              header={t('System')}\n-              cell={(row) => {\n-                if (row.virtualSystemId == null) {\n-                  return t('Unregistered System');\n-                }\n+    <>\n+      <HypervisorCheck foreignEntitled={props.foreignEntitled} hypervisor={props.hypervisor}/>\n+      <ListTab\n+        serverId={props.serverId}\n+        saltEntitled={props.saltEntitled}\n+        pageSize={props.pageSize}\n+        type=\"guest\"\n+        title={t('Hosted Virtual Systems')}\n+        description={t('This is a list of virtual guests which are configured to run on this host.')}\n+        modalsData={modalsData}\n+        isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n+        getCreateActionsKeys={(actions) => {\n+          return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n+        }}\n+        idName=\"uuid\"\n+      >\n+      {\n+        (createModalButton, onAction) => {\n+            const columns = [\n+              <Column\n+                columnKey=\"name\"\n+                comparator={Utils.sortByText}\n+                header={t('Guest')}\n+                cell={row => row.name}\n+              />,\n+              <Column\n+                columnKey=\"serverName\"\n+                comparator={Utils.sortByText}\n+                header={t('System')}\n+                cell={(row) => {\n+                  if (row.virtualSystemId == null) {\n+                    return t('Unregistered System');\n+                  }\n \n-                if (row.accessible) {\n-                  return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n-                }\n-                return row.serverName;\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"statusType\"\n-              comparator={ListUtils.sortByUpdate}\n-              header={t('Updates')}\n-              cell={(row) => {\n-                if (row.statusType == null) {\n-                  return '-';\n-                }\n-                return Systems.statusDisplay(row, props.isAdmin);\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"stateLabel\"\n-              header={t('State')}\n-              comparator={ListUtils.sortByState}\n-              cell={row => row.stateName}\n-            />,\n-            <Column\n-              columnKey=\"memory\"\n-              comparator={Utils.sortByNumber}\n-              header={t('Current Memory')}\n-              cell={row => `${row.memory / 1024} MiB`}\n-            />,\n-            <Column\n-              columnKey=\"vcpus\"\n-              comparator={Utils.sortByNumber}\n-              header={t('vCPUs')}\n-              cell={row => row.vcpus}\n-            />,\n-            <Column\n-              columnKey=\"channelLabels\"\n-              comparator={Utils.sortByText}\n-              header={t('Base Software Channel')}\n-              cell={(row) => {\n-                if (row.channelId == null) {\n-                  return t('(none)');\n-                }\n-                if (row.subscribable) {\n-                  return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n-                }\n-                return row.channelLabels;\n-              }}\n-            />\n-          ];\n+                  if (row.accessible) {\n+                    return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n+                  }\n+                  return row.serverName;\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"statusType\"\n+                comparator={ListUtils.sortByUpdate}\n+                header={t('Updates')}\n+                cell={(row) => {\n+                  if (row.statusType == null) {\n+                    return '-';\n+                  }\n+                  return Systems.statusDisplay(row, props.isAdmin);\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"stateLabel\"\n+                header={t('State')}\n+                comparator={ListUtils.sortByState}\n+                cell={row => row.stateName}\n+              />,\n+              <Column\n+                columnKey=\"memory\"\n+                comparator={Utils.sortByNumber}\n+                header={t('Current Memory')}\n+                cell={row => `${row.memory / 1024} MiB`}\n+              />,\n+              <Column\n+                columnKey=\"vcpus\"\n+                comparator={Utils.sortByNumber}\n+                header={t('vCPUs')}\n+                cell={row => row.vcpus}\n+              />,\n+              <Column\n+                columnKey=\"channelLabels\"\n+                comparator={Utils.sortByText}\n+                header={t('Base Software Channel')}\n+                cell={(row) => {\n+                  if (row.channelId == null) {\n+                    return t('(none)');\n+                  }\n+                  if (row.subscribable) {\n+                    return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n+                  }\n+                  return row.channelLabels;\n+                }}\n+              />\n+            ];\n \n-          const actionsProvider =\n-            (row) => {\n-              if (props.foreignEntitled) {\n-                return [];\n-              }\n-              const state = row.stateLabel;\n-              return (\n-                <div className=\"btn-group\">\n-                  {state !== 'running' && row.name !== 'Domain-0'\n-                   && (\n-                     <AsyncButton\n-                       defaultType=\"btn-default btn-sm\"\n-                       title={t(state === 'paused' ? 'Resume' : 'Start')}\n-                       icon=\"fa-play\"\n-                       action={() => onAction('start', [row.uuid], {})}\n-                     />) }\n-                  {state === 'running' && row.name !== 'Domain-0'\n-                   && createModalButton('suspend', modalsData, row) }\n-                  {state !== 'stopped' && row.name !== 'Domain-0'\n-                   && createModalButton('shutdown', modalsData, row) }\n-                  {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n-                  {props.saltEntitled && state === 'running' && (\n+            const actionsProvider =\n+              (row) => {\n+                if (props.foreignEntitled) {\n+                  return [];\n+                }\n+                const state = row.stateLabel;\n+                return (\n+                  <div className=\"btn-group\">\n+                    {state !== 'running' && row.name !== 'Domain-0'\n+                     && (\n+                       <AsyncButton\n+                         defaultType=\"btn-default btn-sm\"\n+                         title={t(state === 'paused' ? 'Resume' : 'Start')}\n+                         icon=\"fa-play\"\n+                         action={() => onAction('start', [row.uuid], {})}\n+                       />) }\n+                    {state === 'running' && row.name !== 'Domain-0'\n+                     && createModalButton('suspend', modalsData, row) }\n+                    {state !== 'stopped' && row.name !== 'Domain-0'\n+                     && createModalButton('shutdown', modalsData, row) }\n+                    {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n+                    {props.saltEntitled && state === 'running' && (\n+                      <LinkButton\n+                        title={t('Graphical Console')}\n+                        className=\"btn-default btn-sm\"\n+                        icon=\"fa-desktop\"\n+                        href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/console/${row.uuid}`}\n+                        target=\"_blank\"\n+                      />\n+                    )}\n                     <LinkButton\n-                      title={t('Graphical Console')}\n+                      title={t('Edit')}\n                       className=\"btn-default btn-sm\"\n-                      icon=\"fa-desktop\"\n-                      href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/console/${row.uuid}`}\n-                      target=\"_blank\"\n+                      icon=\"fa-edit\"\n+                      href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/edit/${row.uuid}`}\n                     />\n-                  )}\n-                  <LinkButton\n-                    title={t('Edit')}\n-                    className=\"btn-default btn-sm\"\n-                    icon=\"fa-edit\"\n-                    href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/edit/${row.uuid}`}\n-                  />\n-                  { props.saltEntitled && row.name !== 'Domain-0'\n-                    && createModalButton('delete', modalsData, row) }\n-                </div>\n-              );\n-            }\n+                    { props.saltEntitled && row.name !== 'Domain-0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU2MjkzMA==", "bodyText": "Domain-0 is fairly unlikely to change since this is the name of the physical machine on a Xen virtual host", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492562930", "createdAt": "2020-09-22T08:34:15Z", "author": {"login": "cbosdo"}, "path": "web/html/src/manager/virtualization/guests/list/guests-list.js", "diffHunk": "@@ -36,134 +38,137 @@ export function GuestsList(props: Props) {\n   ];\n \n   return (\n-    <ListTab\n-      serverId={props.serverId}\n-      saltEntitled={props.saltEntitled}\n-      pageSize={props.pageSize}\n-      type=\"guest\"\n-      title={t('Hosted Virtual Systems')}\n-      description={t('This is a list of virtual guests which are configured to run on this host.')}\n-      modalsData={modalsData}\n-      isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n-      getCreateActionsKeys={(actions) => {\n-        return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n-      }}\n-      idName=\"uuid\"\n-    >\n-    {\n-      (createModalButton, onAction) => {\n-          const columns = [\n-            <Column\n-              columnKey=\"name\"\n-              comparator={Utils.sortByText}\n-              header={t('Guest')}\n-              cell={row => row.name}\n-            />,\n-            <Column\n-              columnKey=\"serverName\"\n-              comparator={Utils.sortByText}\n-              header={t('System')}\n-              cell={(row) => {\n-                if (row.virtualSystemId == null) {\n-                  return t('Unregistered System');\n-                }\n+    <>\n+      <HypervisorCheck foreignEntitled={props.foreignEntitled} hypervisor={props.hypervisor}/>\n+      <ListTab\n+        serverId={props.serverId}\n+        saltEntitled={props.saltEntitled}\n+        pageSize={props.pageSize}\n+        type=\"guest\"\n+        title={t('Hosted Virtual Systems')}\n+        description={t('This is a list of virtual guests which are configured to run on this host.')}\n+        modalsData={modalsData}\n+        isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n+        getCreateActionsKeys={(actions) => {\n+          return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n+        }}\n+        idName=\"uuid\"\n+      >\n+      {\n+        (createModalButton, onAction) => {\n+            const columns = [\n+              <Column\n+                columnKey=\"name\"\n+                comparator={Utils.sortByText}\n+                header={t('Guest')}\n+                cell={row => row.name}\n+              />,\n+              <Column\n+                columnKey=\"serverName\"\n+                comparator={Utils.sortByText}\n+                header={t('System')}\n+                cell={(row) => {\n+                  if (row.virtualSystemId == null) {\n+                    return t('Unregistered System');\n+                  }\n \n-                if (row.accessible) {\n-                  return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n-                }\n-                return row.serverName;\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"statusType\"\n-              comparator={ListUtils.sortByUpdate}\n-              header={t('Updates')}\n-              cell={(row) => {\n-                if (row.statusType == null) {\n-                  return '-';\n-                }\n-                return Systems.statusDisplay(row, props.isAdmin);\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"stateLabel\"\n-              header={t('State')}\n-              comparator={ListUtils.sortByState}\n-              cell={row => row.stateName}\n-            />,\n-            <Column\n-              columnKey=\"memory\"\n-              comparator={Utils.sortByNumber}\n-              header={t('Current Memory')}\n-              cell={row => `${row.memory / 1024} MiB`}\n-            />,\n-            <Column\n-              columnKey=\"vcpus\"\n-              comparator={Utils.sortByNumber}\n-              header={t('vCPUs')}\n-              cell={row => row.vcpus}\n-            />,\n-            <Column\n-              columnKey=\"channelLabels\"\n-              comparator={Utils.sortByText}\n-              header={t('Base Software Channel')}\n-              cell={(row) => {\n-                if (row.channelId == null) {\n-                  return t('(none)');\n-                }\n-                if (row.subscribable) {\n-                  return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n-                }\n-                return row.channelLabels;\n-              }}\n-            />\n-          ];\n+                  if (row.accessible) {\n+                    return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n+                  }\n+                  return row.serverName;\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"statusType\"\n+                comparator={ListUtils.sortByUpdate}\n+                header={t('Updates')}\n+                cell={(row) => {\n+                  if (row.statusType == null) {\n+                    return '-';\n+                  }\n+                  return Systems.statusDisplay(row, props.isAdmin);\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"stateLabel\"\n+                header={t('State')}\n+                comparator={ListUtils.sortByState}\n+                cell={row => row.stateName}\n+              />,\n+              <Column\n+                columnKey=\"memory\"\n+                comparator={Utils.sortByNumber}\n+                header={t('Current Memory')}\n+                cell={row => `${row.memory / 1024} MiB`}\n+              />,\n+              <Column\n+                columnKey=\"vcpus\"\n+                comparator={Utils.sortByNumber}\n+                header={t('vCPUs')}\n+                cell={row => row.vcpus}\n+              />,\n+              <Column\n+                columnKey=\"channelLabels\"\n+                comparator={Utils.sortByText}\n+                header={t('Base Software Channel')}\n+                cell={(row) => {\n+                  if (row.channelId == null) {\n+                    return t('(none)');\n+                  }\n+                  if (row.subscribable) {\n+                    return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n+                  }\n+                  return row.channelLabels;\n+                }}\n+              />\n+            ];\n \n-          const actionsProvider =\n-            (row) => {\n-              if (props.foreignEntitled) {\n-                return [];\n-              }\n-              const state = row.stateLabel;\n-              return (\n-                <div className=\"btn-group\">\n-                  {state !== 'running' && row.name !== 'Domain-0'\n-                   && (\n-                     <AsyncButton\n-                       defaultType=\"btn-default btn-sm\"\n-                       title={t(state === 'paused' ? 'Resume' : 'Start')}\n-                       icon=\"fa-play\"\n-                       action={() => onAction('start', [row.uuid], {})}\n-                     />) }\n-                  {state === 'running' && row.name !== 'Domain-0'\n-                   && createModalButton('suspend', modalsData, row) }\n-                  {state !== 'stopped' && row.name !== 'Domain-0'\n-                   && createModalButton('shutdown', modalsData, row) }\n-                  {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n-                  {props.saltEntitled && state === 'running' && (\n+            const actionsProvider =\n+              (row) => {\n+                if (props.foreignEntitled) {\n+                  return [];\n+                }\n+                const state = row.stateLabel;\n+                return (\n+                  <div className=\"btn-group\">\n+                    {state !== 'running' && row.name !== 'Domain-0'\n+                     && (\n+                       <AsyncButton\n+                         defaultType=\"btn-default btn-sm\"\n+                         title={t(state === 'paused' ? 'Resume' : 'Start')}\n+                         icon=\"fa-play\"\n+                         action={() => onAction('start', [row.uuid], {})}\n+                       />) }\n+                    {state === 'running' && row.name !== 'Domain-0'\n+                     && createModalButton('suspend', modalsData, row) }\n+                    {state !== 'stopped' && row.name !== 'Domain-0'\n+                     && createModalButton('shutdown', modalsData, row) }\n+                    {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n+                    {props.saltEntitled && state === 'running' && (\n+                      <LinkButton\n+                        title={t('Graphical Console')}\n+                        className=\"btn-default btn-sm\"\n+                        icon=\"fa-desktop\"\n+                        href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/console/${row.uuid}`}\n+                        target=\"_blank\"\n+                      />\n+                    )}\n                     <LinkButton\n-                      title={t('Graphical Console')}\n+                      title={t('Edit')}\n                       className=\"btn-default btn-sm\"\n-                      icon=\"fa-desktop\"\n-                      href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/console/${row.uuid}`}\n-                      target=\"_blank\"\n+                      icon=\"fa-edit\"\n+                      href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/edit/${row.uuid}`}\n                     />\n-                  )}\n-                  <LinkButton\n-                    title={t('Edit')}\n-                    className=\"btn-default btn-sm\"\n-                    icon=\"fa-edit\"\n-                    href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/edit/${row.uuid}`}\n-                  />\n-                  { props.saltEntitled && row.name !== 'Domain-0'\n-                    && createModalButton('delete', modalsData, row) }\n-                </div>\n-              );\n-            }\n+                    { props.saltEntitled && row.name !== 'Domain-0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEwMDY0Ng=="}, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU2MzQ1Nw==", "bodyText": "and a sed call once every 5-10 years isn't such a big work", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492563457", "createdAt": "2020-09-22T08:35:02Z", "author": {"login": "cbosdo"}, "path": "web/html/src/manager/virtualization/guests/list/guests-list.js", "diffHunk": "@@ -36,134 +38,137 @@ export function GuestsList(props: Props) {\n   ];\n \n   return (\n-    <ListTab\n-      serverId={props.serverId}\n-      saltEntitled={props.saltEntitled}\n-      pageSize={props.pageSize}\n-      type=\"guest\"\n-      title={t('Hosted Virtual Systems')}\n-      description={t('This is a list of virtual guests which are configured to run on this host.')}\n-      modalsData={modalsData}\n-      isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n-      getCreateActionsKeys={(actions) => {\n-        return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n-      }}\n-      idName=\"uuid\"\n-    >\n-    {\n-      (createModalButton, onAction) => {\n-          const columns = [\n-            <Column\n-              columnKey=\"name\"\n-              comparator={Utils.sortByText}\n-              header={t('Guest')}\n-              cell={row => row.name}\n-            />,\n-            <Column\n-              columnKey=\"serverName\"\n-              comparator={Utils.sortByText}\n-              header={t('System')}\n-              cell={(row) => {\n-                if (row.virtualSystemId == null) {\n-                  return t('Unregistered System');\n-                }\n+    <>\n+      <HypervisorCheck foreignEntitled={props.foreignEntitled} hypervisor={props.hypervisor}/>\n+      <ListTab\n+        serverId={props.serverId}\n+        saltEntitled={props.saltEntitled}\n+        pageSize={props.pageSize}\n+        type=\"guest\"\n+        title={t('Hosted Virtual Systems')}\n+        description={t('This is a list of virtual guests which are configured to run on this host.')}\n+        modalsData={modalsData}\n+        isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n+        getCreateActionsKeys={(actions) => {\n+          return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n+        }}\n+        idName=\"uuid\"\n+      >\n+      {\n+        (createModalButton, onAction) => {\n+            const columns = [\n+              <Column\n+                columnKey=\"name\"\n+                comparator={Utils.sortByText}\n+                header={t('Guest')}\n+                cell={row => row.name}\n+              />,\n+              <Column\n+                columnKey=\"serverName\"\n+                comparator={Utils.sortByText}\n+                header={t('System')}\n+                cell={(row) => {\n+                  if (row.virtualSystemId == null) {\n+                    return t('Unregistered System');\n+                  }\n \n-                if (row.accessible) {\n-                  return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n-                }\n-                return row.serverName;\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"statusType\"\n-              comparator={ListUtils.sortByUpdate}\n-              header={t('Updates')}\n-              cell={(row) => {\n-                if (row.statusType == null) {\n-                  return '-';\n-                }\n-                return Systems.statusDisplay(row, props.isAdmin);\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"stateLabel\"\n-              header={t('State')}\n-              comparator={ListUtils.sortByState}\n-              cell={row => row.stateName}\n-            />,\n-            <Column\n-              columnKey=\"memory\"\n-              comparator={Utils.sortByNumber}\n-              header={t('Current Memory')}\n-              cell={row => `${row.memory / 1024} MiB`}\n-            />,\n-            <Column\n-              columnKey=\"vcpus\"\n-              comparator={Utils.sortByNumber}\n-              header={t('vCPUs')}\n-              cell={row => row.vcpus}\n-            />,\n-            <Column\n-              columnKey=\"channelLabels\"\n-              comparator={Utils.sortByText}\n-              header={t('Base Software Channel')}\n-              cell={(row) => {\n-                if (row.channelId == null) {\n-                  return t('(none)');\n-                }\n-                if (row.subscribable) {\n-                  return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n-                }\n-                return row.channelLabels;\n-              }}\n-            />\n-          ];\n+                  if (row.accessible) {\n+                    return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n+                  }\n+                  return row.serverName;\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"statusType\"\n+                comparator={ListUtils.sortByUpdate}\n+                header={t('Updates')}\n+                cell={(row) => {\n+                  if (row.statusType == null) {\n+                    return '-';\n+                  }\n+                  return Systems.statusDisplay(row, props.isAdmin);\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"stateLabel\"\n+                header={t('State')}\n+                comparator={ListUtils.sortByState}\n+                cell={row => row.stateName}\n+              />,\n+              <Column\n+                columnKey=\"memory\"\n+                comparator={Utils.sortByNumber}\n+                header={t('Current Memory')}\n+                cell={row => `${row.memory / 1024} MiB`}\n+              />,\n+              <Column\n+                columnKey=\"vcpus\"\n+                comparator={Utils.sortByNumber}\n+                header={t('vCPUs')}\n+                cell={row => row.vcpus}\n+              />,\n+              <Column\n+                columnKey=\"channelLabels\"\n+                comparator={Utils.sortByText}\n+                header={t('Base Software Channel')}\n+                cell={(row) => {\n+                  if (row.channelId == null) {\n+                    return t('(none)');\n+                  }\n+                  if (row.subscribable) {\n+                    return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n+                  }\n+                  return row.channelLabels;\n+                }}\n+              />\n+            ];\n \n-          const actionsProvider =\n-            (row) => {\n-              if (props.foreignEntitled) {\n-                return [];\n-              }\n-              const state = row.stateLabel;\n-              return (\n-                <div className=\"btn-group\">\n-                  {state !== 'running' && row.name !== 'Domain-0'\n-                   && (\n-                     <AsyncButton\n-                       defaultType=\"btn-default btn-sm\"\n-                       title={t(state === 'paused' ? 'Resume' : 'Start')}\n-                       icon=\"fa-play\"\n-                       action={() => onAction('start', [row.uuid], {})}\n-                     />) }\n-                  {state === 'running' && row.name !== 'Domain-0'\n-                   && createModalButton('suspend', modalsData, row) }\n-                  {state !== 'stopped' && row.name !== 'Domain-0'\n-                   && createModalButton('shutdown', modalsData, row) }\n-                  {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n-                  {props.saltEntitled && state === 'running' && (\n+            const actionsProvider =\n+              (row) => {\n+                if (props.foreignEntitled) {\n+                  return [];\n+                }\n+                const state = row.stateLabel;\n+                return (\n+                  <div className=\"btn-group\">\n+                    {state !== 'running' && row.name !== 'Domain-0'\n+                     && (\n+                       <AsyncButton\n+                         defaultType=\"btn-default btn-sm\"\n+                         title={t(state === 'paused' ? 'Resume' : 'Start')}\n+                         icon=\"fa-play\"\n+                         action={() => onAction('start', [row.uuid], {})}\n+                       />) }\n+                    {state === 'running' && row.name !== 'Domain-0'\n+                     && createModalButton('suspend', modalsData, row) }\n+                    {state !== 'stopped' && row.name !== 'Domain-0'\n+                     && createModalButton('shutdown', modalsData, row) }\n+                    {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n+                    {props.saltEntitled && state === 'running' && (\n+                      <LinkButton\n+                        title={t('Graphical Console')}\n+                        className=\"btn-default btn-sm\"\n+                        icon=\"fa-desktop\"\n+                        href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/console/${row.uuid}`}\n+                        target=\"_blank\"\n+                      />\n+                    )}\n                     <LinkButton\n-                      title={t('Graphical Console')}\n+                      title={t('Edit')}\n                       className=\"btn-default btn-sm\"\n-                      icon=\"fa-desktop\"\n-                      href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/console/${row.uuid}`}\n-                      target=\"_blank\"\n+                      icon=\"fa-edit\"\n+                      href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/edit/${row.uuid}`}\n                     />\n-                  )}\n-                  <LinkButton\n-                    title={t('Edit')}\n-                    className=\"btn-default btn-sm\"\n-                    icon=\"fa-edit\"\n-                    href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/edit/${row.uuid}`}\n-                  />\n-                  { props.saltEntitled && row.name !== 'Domain-0'\n-                    && createModalButton('delete', modalsData, row) }\n-                </div>\n-              );\n-            }\n+                    { props.saltEntitled && row.name !== 'Domain-0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEwMDY0Ng=="}, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 260}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4035, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}