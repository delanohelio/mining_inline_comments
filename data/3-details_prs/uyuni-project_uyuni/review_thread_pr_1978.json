{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNzAyMzg3", "number": 1978, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1MjoxOFrODlejtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NDozMFrODlvSQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjI0NTY2OnYy", "diffSide": "RIGHT", "path": "web/html/src/components/recurring-event-picker.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1MjoxOFrOFyZGxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1MjoxOFrOFyZGxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NDQ1Mg==", "bodyText": "This means every months will have only 28 days right? I'd like to add a note about this, like a tooltip contained in an * or something that explains (maybe syncing with doc guys) that days a limited to 28 in order to have a recurring schedule available for all the months\nNote: this can be improved later btw", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388384452", "createdAt": "2020-03-05T15:52:18Z", "author": {"login": "ncounter"}, "path": "web/html/src/components/recurring-event-picker.js", "diffHunk": "@@ -0,0 +1,380 @@\n+/* eslint-disable */\n+// @flow\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+\n+const {DateTimePicker} = require(\"./datetimepicker\");\n+const {Combobox} = require(\"./combobox\");\n+import type {ComboboxItem} from \"./combobox\";\n+const { Form } = require('components/input/Form');\n+const { Text } = require('components/input/Text');\n+const Functions = require(\"../utils/functions\");\n+\n+type RecurringEventPickerProps = {\n+    timezone: string,\n+    scheduleName: string,\n+    type: string,\n+    cron: string,\n+    cronTimes: Hash<string, string>,\n+    onScheduleNameChanged: (scheduleName: string) => void,\n+    onTypeChanged: (type: string) => void,\n+    onCronTimesChanged: (cronTimes: Hash<string, string>) => void,\n+    onCronChanged: (cron: string) => void\n+};\n+\n+type RecurringEventPickerState = {\n+    scheduleName: string,\n+    type: \"hourly\" | \"daily\" | \"weekly\" | \"monthly\" | \"cron\",\n+    time: Date,\n+    minutes: ComboboxItem,\n+    weekDay: ComboboxItem,\n+    monthDay: ComboboxItem,\n+};\n+\n+class RecurringEventPicker extends React.Component<RecurringEventPickerProps, RecurringEventPickerState> {\n+\n+    minutes = Array.from(Array(60).keys()).map(id => ({id: Number(id), text: (id).toString()}));\n+\n+    weekDays = [{id: Number(1), text: 'Sunday'},\n+        {id: Number(2), text: 'Monday'},\n+        {id: Number(3), text: 'Tuesday'},\n+        {id: Number(4), text: 'Wednesday'},\n+        {id: Number(5), text: 'Thursday'},\n+        {id: Number(6), text: 'Friday'},\n+        {id: Number(7), text: 'Saturday'}];\n+\n+    monthDays = Array.from(Array(28).keys()).map(id => ({id: Number(id + 1), text: (id + 1).toString()}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5dbd762dec81d4642e201621af52967d7816d80"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQyMzc2OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-edit.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNDoyOVrOFya3xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNDoyOVrOFya3xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMzM4MQ==", "bodyText": "We should not merge todo code", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388413381", "createdAt": "2020-03-05T16:34:29Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations\n+                targetId: minions[0].id\n+            });\n+        } else if (search.match(\"\\\\?sgid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"GROUP\",\n+                targetId: groupId\n+            });\n+        } else {\n+            Object.assign(this.state, {\n+                targetType: \"ORG\",\n+                targetId: orgId\n+            });\n+        }\n+    };\n+\n+    isEdit = () => {\n+        return !!this.props.schedule;\n+    };\n+\n+    onEdit = () => {\n+        this.props.onEdit({\n+            targetId: this.state.targetId,\n+            recurringActionId: this.state.recurringActionId,\n+            //minionNames: this.state.minions.map(minion => minion.name), // todo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQyMzkyOnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-edit.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNDoyOVrOFya32Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNDoyOVrOFya32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMzQwMQ==", "bodyText": "We should not merge todo code", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388413401", "createdAt": "2020-03-05T16:34:29Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQyOTMzOnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-details.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNTo1MVrOFya7ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNTo1MVrOFya7ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxNDMxNA==", "bodyText": "We should not merge todo code", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388414314", "createdAt": "2020-03-05T16:35:51Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-details.js", "diffHunk": "@@ -0,0 +1,170 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+const {Messages} = require(\"components/messages\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+\n+class RecurringStatesDetails extends React.Component {\n+\n+    weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            messages: [],\n+            minions: props.minions\n+        };\n+    }\n+\n+    getExecutionText(data) {\n+        if (data.type !== \"cron\") {\n+            return (\n+                <tr>\n+                    <td>{t(\"Execution time\")}:</td>\n+                    {data.type === \"daily\" ?\n+                        <td>\n+                            {\"Every day at \"}\n+                            <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                        </td>\n+                        : data.type === \"weekly\" ?\n+                            <td>\n+                                {\"Every \"}\n+                                <b>{this.weekDays[data.cronTimes.dayOfWeek - 1]}</b>\n+                                {\" at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td> :\n+                            <td>\n+                                {\"Every \"}\n+                                <b>\n+                                    {data.cronTimes.dayOfMonth + (\n+                                        data.cronTimes.dayOfMonth === \"1\" ? \"st \"\n+                                            : data.cronTimes.dayOfMonth === \"2\" ? \"nd \"\n+                                            : data.cronTimes.dayOfMonth === \"3\" ? \"rd \"\n+                                                : \"th \")}\n+                                </b>\n+                                {\"of the month at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td>\n+                    }\n+                </tr>\n+            );\n+        } else {\n+            /* TODO: Get execution text from custom cron string */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQ1NTg3OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-list.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0MjoyM1rOFybMWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0MjoyM1rOFybMWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODY0OQ==", "bodyText": "We should not merge commented code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418649", "createdAt": "2020-03-05T16:42:23Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQ1NjQ1OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-list.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0MjozM1rOFybMwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0MjozM1rOFybMwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODc1Mg==", "bodyText": "We should not merge commented code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418752", "createdAt": "2020-03-05T16:42:33Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQ1Njk0OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-list.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0Mjo0MVrOFybNDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0Mjo0MVrOFybNDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODgzMA==", "bodyText": "We should not merge commented code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418830", "createdAt": "2020-03-05T16:42:41Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {\n+                                        this.props.onSelect(row)\n+                                    }}\n+                                />\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Edit\")}\n+                                    icon=\"fa-edit\"\n+                                    handler={() => {\n+                                        this.props.onEdit(row)\n+                                    }}\n+                                />\n+                                <ModalButton\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Delete\")}\n+                                    icon=\"fa-trash\"\n+                                    target=\"delete-modal\"\n+                                    item={row}\n+                                    onClick={i => this.selectToDelete(i)}\n+                                />\n+                            </div>\n+                        </td>\n+                    </tr>\n+                );\n+            });\n+        }\n+\n+        return (\n+            <tbody className=\"table-content\">\n+            {elements.length > 0 ? elements :\n+                <tr>\n+                    <td colSpan=\"4\">\n+                        <div>{t(\"No schedules created.\" + (this.props.disableCreate ? \"\" : \" Use Create to add a schedule.\"))}</div>\n+                    </td>\n+                </tr>\n+            }\n+            </tbody>\n+        );\n+    };\n+\n+    render() {\n+        const createButton = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    className=\"btn-default\"\n+                    icon=\"fa-plus\"\n+                    text={t(\"Create\")}\n+                    title=\"Schedule a new Recurring States Action\"\n+                    handler={() => {this.props.onActionChanged(\"create\")}}\n+                />\n+            </div>\n+        ];\n+        const targetType = this.props.disableCreate ? <th className=\"text-center\">{t(\"Target Type\")}</th> : null;\n+\n+        return (\n+            <div>\n+                <InnerPanel title={t(\"Recurring States\")} icon=\"spacewalk-icon-salt\" buttons={this.props.disableCreate ? null : createButton}>\n+                    <div className=\"panel panel-default\">\n+                        <div className=\"panel-heading\">\n+                            <div>\n+                                <h3>Schedules</h3>\n+                            </div>\n+                        </div>\n+                        <div className=\"panel-body\">\n+                            <table className=\"table table-striped\">\n+                                <thead>\n+                                <tr>\n+                                    <th>{t(\"Active\")}</th>\n+                                    <th className=\"text-center\">{t(\"Schedule Name\")}</th>\n+                                    <th className=\"text-center\">{t(\"Frequency\")}</th>\n+                                    { /* <th className=\"text-center\">{t(\"Created at\")}</th> */}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQ1NzIzOnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-list.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0Mjo0N1rOFybNRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0Mjo0N1rOFybNRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODg4NQ==", "bodyText": "We should not merge commented code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418885", "createdAt": "2020-03-05T16:42:47Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {\n+                                        this.props.onSelect(row)\n+                                    }}\n+                                />\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Edit\")}\n+                                    icon=\"fa-edit\"\n+                                    handler={() => {\n+                                        this.props.onEdit(row)\n+                                    }}\n+                                />\n+                                <ModalButton\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Delete\")}\n+                                    icon=\"fa-trash\"\n+                                    target=\"delete-modal\"\n+                                    item={row}\n+                                    onClick={i => this.selectToDelete(i)}\n+                                />\n+                            </div>\n+                        </td>\n+                    </tr>\n+                );\n+            });\n+        }\n+\n+        return (\n+            <tbody className=\"table-content\">\n+            {elements.length > 0 ? elements :\n+                <tr>\n+                    <td colSpan=\"4\">\n+                        <div>{t(\"No schedules created.\" + (this.props.disableCreate ? \"\" : \" Use Create to add a schedule.\"))}</div>\n+                    </td>\n+                </tr>\n+            }\n+            </tbody>\n+        );\n+    };\n+\n+    render() {\n+        const createButton = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    className=\"btn-default\"\n+                    icon=\"fa-plus\"\n+                    text={t(\"Create\")}\n+                    title=\"Schedule a new Recurring States Action\"\n+                    handler={() => {this.props.onActionChanged(\"create\")}}\n+                />\n+            </div>\n+        ];\n+        const targetType = this.props.disableCreate ? <th className=\"text-center\">{t(\"Target Type\")}</th> : null;\n+\n+        return (\n+            <div>\n+                <InnerPanel title={t(\"Recurring States\")} icon=\"spacewalk-icon-salt\" buttons={this.props.disableCreate ? null : createButton}>\n+                    <div className=\"panel panel-default\">\n+                        <div className=\"panel-heading\">\n+                            <div>\n+                                <h3>Schedules</h3>\n+                            </div>\n+                        </div>\n+                        <div className=\"panel-body\">\n+                            <table className=\"table table-striped\">\n+                                <thead>\n+                                <tr>\n+                                    <th>{t(\"Active\")}</th>\n+                                    <th className=\"text-center\">{t(\"Schedule Name\")}</th>\n+                                    <th className=\"text-center\">{t(\"Frequency\")}</th>\n+                                    { /* <th className=\"text-center\">{t(\"Created at\")}</th> */}\n+                                    {targetType}\n+                                    { /* <th className=\"text-center\">{t(\"Skip Next\")}</th> */ }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQ2MzY1OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0NDoxOVrOFybRJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0NDoxOVrOFybRJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxOTg3OA==", "bodyText": "We should not merge commented and todo code.\nBtw yes, I don't really like the inferEntityParams() function. It hides too much the endpoint we are going to use. Better to have different and clear call instead. If you want to extract that from here, I'd say the function should return the full URL to use then: in this case I'd be okay with it.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388419878", "createdAt": "2020-03-05T16:44:19Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states.js", "diffHunk": "@@ -0,0 +1,236 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesDetails} = require(\"./recurring-states-details\");\n+const {RecurringStatesList} = require(\"./recurring-states-list\");\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+const Utils = require(\"utils/functions\").Utils;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+// HACK: infer entity type and id based on the globals set\n+function inferEntityParams() {\n+    if (window.groupId !== undefined) {\n+        return \"/GROUP/\" + window.groupId;\n+    } else if (window.orgId !== undefined) {\n+        return \"/ORG/\" + window.orgId;\n+    } else if (minions.length > 0) {\n+        return \"/MINION/\" + minions[0].id;\n+    }\n+    return \"\";\n+}\n+\n+class RecurringStates extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"deleteSchedule\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+        \"onMessageChanged\", \"updateSchedule\", \"toggleActive\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            messages: [],\n+            minionIds: minions.length > 0 && minions[0].id ? minions.map(minion => minion.id) : undefined,\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if ((action === \"edit\" || action === \"details\") && id) {\n+            this.getScheduleDetails(id, action);\n+        } else if (!action) {\n+            this.getRecurringScheduleList();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    isFiltered = () => {\n+        return !!this.state.minionIds;\n+    };\n+\n+    getRecurringScheduleList = () => {\n+        // todo create different endpoints for each use case (\"/rhn/manager/api/recurringactions/group/id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjU0ODQ1OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-edit.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzowNTowNVrOFycFwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzowNTowNVrOFycFwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzMzM0NQ==", "bodyText": "I am worried about this obscure magic \ud83d\ude04\nI understand the reason of the logic, but since it is already extracted in a separate method, I'd really explain more the logic in a different way. I can't imagine debugging or understanding this from a new pair of eyes.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388433345", "createdAt": "2020-03-05T17:05:05Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations\n+                targetId: minions[0].id\n+            });\n+        } else if (search.match(\"\\\\?sgid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"GROUP\",\n+                targetId: groupId\n+            });\n+        } else {\n+            Object.assign(this.state, {\n+                targetType: \"ORG\",\n+                targetId: orgId\n+            });\n+        }\n+    };\n+\n+    isEdit = () => {\n+        return !!this.props.schedule;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjU0OTc1OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-edit.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzowNToyOVrOFycGmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzowNToyOVrOFycGmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzMzU2Mg==", "bodyText": "We should not merge todo code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388433562", "createdAt": "2020-03-05T17:05:29Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations\n+                targetId: minions[0].id\n+            });\n+        } else if (search.match(\"\\\\?sgid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"GROUP\",\n+                targetId: groupId\n+            });\n+        } else {\n+            Object.assign(this.state, {\n+                targetType: \"ORG\",\n+                targetId: orgId\n+            });\n+        }\n+    };\n+\n+    isEdit = () => {\n+        return !!this.props.schedule;\n+    };\n+\n+    onEdit = () => {\n+        this.props.onEdit({\n+            targetId: this.state.targetId,\n+            recurringActionId: this.state.recurringActionId,\n+            //minionNames: this.state.minions.map(minion => minion.name), // todo\n+            scheduleName: this.state.scheduleName,\n+            active: this.state.active,\n+            type: this.state.type,\n+            targetType: this.state.targetType,\n+            cronTimes: this.state.cronTimes,\n+            cron: this.state.cron,\n+            test: this.state.test\n+        });\n+    };\n+\n+    onScheduleNameChanged = (scheduleName) => {\n+        this.setState({scheduleName: scheduleName});\n+    };\n+\n+    onToggleActive = (active) => {\n+        this.setState({active: active});\n+    };\n+\n+    onTypeChanged = (type) => {\n+        this.setState({type: type});\n+    };\n+\n+    onCronTimesChanged = (cronTimes) => {\n+        this.setState({cronTimes: cronTimes});\n+    };\n+\n+    onCustomCronChanged = (cron) => {\n+        this.setState({cron: cron});\n+    };\n+\n+    toggleTestState = () => {\n+        this.setState({test: !this.state.test});\n+    };\n+\n+    resetFields = () => {\n+        /* TODO: Write implementation */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjU2MTMwOnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-list.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzowNzozNlrOFycNkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMToxNzoyN1rOFy1Y-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNTM0Nw==", "bodyText": "Do we really need the { wrapping the function body?\nhandler={() => this.props.onSelect(row)}\nAnd there are others below this", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388435347", "createdAt": "2020-03-05T17:07:36Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0Nzg2Ng==", "bodyText": "Done.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388847866", "createdAt": "2020-03-06T11:17:27Z", "author": {"login": "hustodemon"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNTM0Nw=="}, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjU3MjI4OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxMDoxOFrOFycUZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxMDoxOFrOFycUZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNzA5Mg==", "bodyText": "Same as before", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388437092", "createdAt": "2020-03-05T17:10:18Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states.js", "diffHunk": "@@ -0,0 +1,236 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesDetails} = require(\"./recurring-states-details\");\n+const {RecurringStatesList} = require(\"./recurring-states-list\");\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+const Utils = require(\"utils/functions\").Utils;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+// HACK: infer entity type and id based on the globals set\n+function inferEntityParams() {\n+    if (window.groupId !== undefined) {\n+        return \"/GROUP/\" + window.groupId;\n+    } else if (window.orgId !== undefined) {\n+        return \"/ORG/\" + window.orgId;\n+    } else if (minions.length > 0) {\n+        return \"/MINION/\" + minions[0].id;\n+    }\n+    return \"\";\n+}\n+\n+class RecurringStates extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"deleteSchedule\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+        \"onMessageChanged\", \"updateSchedule\", \"toggleActive\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            messages: [],\n+            minionIds: minions.length > 0 && minions[0].id ? minions.map(minion => minion.id) : undefined,\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if ((action === \"edit\" || action === \"details\") && id) {\n+            this.getScheduleDetails(id, action);\n+        } else if (!action) {\n+            this.getRecurringScheduleList();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    isFiltered = () => {\n+        return !!this.state.minionIds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjU4NDAyOnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxMzozMlrOFycbrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxMzozMlrOFycbrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzODk1Nw==", "bodyText": "Why do we need this check?\nI also believe the checkstyle would complain about it. It should be:\nif (!item) { return false; }", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388438957", "createdAt": "2020-03-05T17:13:32Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states.js", "diffHunk": "@@ -0,0 +1,236 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesDetails} = require(\"./recurring-states-details\");\n+const {RecurringStatesList} = require(\"./recurring-states-list\");\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+const Utils = require(\"utils/functions\").Utils;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+// HACK: infer entity type and id based on the globals set\n+function inferEntityParams() {\n+    if (window.groupId !== undefined) {\n+        return \"/GROUP/\" + window.groupId;\n+    } else if (window.orgId !== undefined) {\n+        return \"/ORG/\" + window.orgId;\n+    } else if (minions.length > 0) {\n+        return \"/MINION/\" + minions[0].id;\n+    }\n+    return \"\";\n+}\n+\n+class RecurringStates extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"deleteSchedule\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+        \"onMessageChanged\", \"updateSchedule\", \"toggleActive\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            messages: [],\n+            minionIds: minions.length > 0 && minions[0].id ? minions.map(minion => minion.id) : undefined,\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if ((action === \"edit\" || action === \"details\") && id) {\n+            this.getScheduleDetails(id, action);\n+        } else if (!action) {\n+            this.getRecurringScheduleList();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    isFiltered = () => {\n+        return !!this.state.minionIds;\n+    };\n+\n+    getRecurringScheduleList = () => {\n+        // todo create different endpoints for each use case (\"/rhn/manager/api/recurringactions/group/id\")\n+        const entityParams = inferEntityParams();\n+        const endpoint = \"/rhn/manager/api/recurringactions\" + entityParams;\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(schedules => {\n+                this.setState({\n+                    action: undefined,\n+                    selected: undefined,\n+                    schedules: schedules.data\n+                });\n+            }).catch(this.handleResponseError);\n+    };\n+\n+    getScheduleDetails(row, action) {\n+        this.setState({selected: row, action: action});\n+    }\n+\n+    handleDetailsAction(row) {\n+        this.getScheduleDetails(row, \"details\");\n+        history.pushState(null, null, \"#/details/\" + row.recurringActionId);\n+    }\n+\n+    handleEditAction(row) {\n+        this.getScheduleDetails(row, \"edit\");\n+        history.pushState(null, null, \"#/edit/\" + row.recurringActionId);\n+    }\n+\n+    toggleActive(schedule) {\n+        Object.assign(schedule, {\n+            active: !(schedule.active)\n+        });\n+        this.updateSchedule(schedule);\n+    }\n+\n+    skipNext(item) {\n+        /* Write implementation to skip next run */\n+        this.handleForwardAction();\n+    }\n+\n+    updateSchedule(schedule) {\n+        return Network.post(\n+            \"/rhn/manager/api/recurringactions/save\",\n+            JSON.stringify(schedule),\n+            \"application/json\"\n+        ).promise.then((data) => {\n+            // HACK: propagate the errors from messages to the UI\n+            let newMsgs = [];\n+            if (data.messages === undefined || data.messages.length === 0) { // no errors from the server\n+                newMsgs = MessagesUtils.info(<span>{t(\"Schedule successully created.\")}</span>);\n+            } else {\n+                const decorator = data.success ? MessagesUtils.info : MessagesUtils.error;\n+                newMsgs = decorator.apply(null, data.messages);\n+            }\n+\n+            const msgs = this.state.messages.concat(newMsgs);\n+\n+            while (msgs.length > messagesCounterLimit) {\n+                msgs.shift();\n+            }\n+\n+            this.onMessageChanged(msgs);\n+            this.setState({\n+                messages: msgs\n+            });\n+\n+            if (data.success) {\n+                this.handleForwardAction();\n+            } else {\n+                this.handleResponseError();\n+            }\n+\n+        }).catch(this.handleResponseError);\n+    }\n+\n+    deleteSchedule(item) {\n+        if (!item) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjU5NTQ0OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-edit.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxNjoyMlrOFycieA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxNjoyMlrOFycieA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MDY5Ng==", "bodyText": "I'd like to have a field or a property populated from the backend instead, relying on a slice of the URL is not really robust from my POV, the URL could also change at any time.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388440696", "createdAt": "2020-03-05T17:16:22Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjU5ODY0OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-details.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxNzoyMFrOFyckeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxNzoyMFrOFyckeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTIwOA==", "bodyText": "We should not merge commented code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388441208", "createdAt": "2020-03-05T17:17:20Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-details.js", "diffHunk": "@@ -0,0 +1,170 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+const {Messages} = require(\"components/messages\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+\n+class RecurringStatesDetails extends React.Component {\n+\n+    weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            messages: [],\n+            minions: props.minions\n+        };\n+    }\n+\n+    getExecutionText(data) {\n+        if (data.type !== \"cron\") {\n+            return (\n+                <tr>\n+                    <td>{t(\"Execution time\")}:</td>\n+                    {data.type === \"daily\" ?\n+                        <td>\n+                            {\"Every day at \"}\n+                            <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                        </td>\n+                        : data.type === \"weekly\" ?\n+                            <td>\n+                                {\"Every \"}\n+                                <b>{this.weekDays[data.cronTimes.dayOfWeek - 1]}</b>\n+                                {\" at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td> :\n+                            <td>\n+                                {\"Every \"}\n+                                <b>\n+                                    {data.cronTimes.dayOfMonth + (\n+                                        data.cronTimes.dayOfMonth === \"1\" ? \"st \"\n+                                            : data.cronTimes.dayOfMonth === \"2\" ? \"nd \"\n+                                            : data.cronTimes.dayOfMonth === \"3\" ? \"rd \"\n+                                                : \"th \")}\n+                                </b>\n+                                {\"of the month at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td>\n+                    }\n+                </tr>\n+            );\n+        } else {\n+            /* TODO: Get execution text from custom cron string */\n+            return (\n+                <tr>\n+                    <td>{\"Type\"}:</td>\n+                    <td>{\"Custom Quartz string\"}</td>\n+                </tr>\n+            );\n+        }\n+\n+    }\n+\n+    showScheduleDetails(data) {\n+        data.cronTimes.hour = data.cronTimes.hour.padStart(2, \"0\");\n+        data.cronTimes.minute = data.cronTimes.minute.padStart(2, \"0\");\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"State:\")}</td>\n+                            <td>{data.active === \"true\" ? t(\"active\") : <b>{t(\"disabled\")}</b>}</td>\n+                        </tr>\n+                        { data.test === \"true\" &&\n+                        <tr>\n+                            <td>{t(\"Test\")}:</td>\n+                            <td>{t(\"True\")}</td>\n+                        </tr>\n+                        }\n+                        <tr>\n+                            <td>{t(\"Target type\")}:</td>\n+                            <td>{data.targetType}</td>\n+                        </tr>\n+                        { data.targetType === \"Group\" &&\n+                        <tr>\n+                            <td>{t(\"Group name\")}:</td>\n+                            <td>{data.groupName}</td>\n+                        </tr>\n+                        }\n+                        { /* data.minionNames.length < 20 &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjYwMjQ4OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/recurring-states-list.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxODoyNVrOFycm8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMToxNjo1NVrOFy1YHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTg0MQ==", "bodyText": "Please, remove the { wrapping the function call", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388441841", "createdAt": "2020-03-05T17:18:25Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {\n+                                        this.props.onSelect(row)\n+                                    }}\n+                                />\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Edit\")}\n+                                    icon=\"fa-edit\"\n+                                    handler={() => {\n+                                        this.props.onEdit(row)\n+                                    }}\n+                                />\n+                                <ModalButton\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Delete\")}\n+                                    icon=\"fa-trash\"\n+                                    target=\"delete-modal\"\n+                                    item={row}\n+                                    onClick={i => this.selectToDelete(i)}\n+                                />\n+                            </div>\n+                        </td>\n+                    </tr>\n+                );\n+            });\n+        }\n+\n+        return (\n+            <tbody className=\"table-content\">\n+            {elements.length > 0 ? elements :\n+                <tr>\n+                    <td colSpan=\"4\">\n+                        <div>{t(\"No schedules created.\" + (this.props.disableCreate ? \"\" : \" Use Create to add a schedule.\"))}</div>\n+                    </td>\n+                </tr>\n+            }\n+            </tbody>\n+        );\n+    };\n+\n+    render() {\n+        const createButton = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    className=\"btn-default\"\n+                    icon=\"fa-plus\"\n+                    text={t(\"Create\")}\n+                    title=\"Schedule a new Recurring States Action\"\n+                    handler={() => {this.props.onActionChanged(\"create\")}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NzY0NQ==", "bodyText": "Done.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388847645", "createdAt": "2020-03-06T11:16:55Z", "author": {"login": "hustodemon"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {\n+                                        this.props.onSelect(row)\n+                                    }}\n+                                />\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Edit\")}\n+                                    icon=\"fa-edit\"\n+                                    handler={() => {\n+                                        this.props.onEdit(row)\n+                                    }}\n+                                />\n+                                <ModalButton\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Delete\")}\n+                                    icon=\"fa-trash\"\n+                                    target=\"delete-modal\"\n+                                    item={row}\n+                                    onClick={i => this.selectToDelete(i)}\n+                                />\n+                            </div>\n+                        </td>\n+                    </tr>\n+                );\n+            });\n+        }\n+\n+        return (\n+            <tbody className=\"table-content\">\n+            {elements.length > 0 ? elements :\n+                <tr>\n+                    <td colSpan=\"4\">\n+                        <div>{t(\"No schedules created.\" + (this.props.disableCreate ? \"\" : \" Use Create to add a schedule.\"))}</div>\n+                    </td>\n+                </tr>\n+            }\n+            </tbody>\n+        );\n+    };\n+\n+    render() {\n+        const createButton = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    className=\"btn-default\"\n+                    icon=\"fa-plus\"\n+                    text={t(\"Create\")}\n+                    title=\"Schedule a new Recurring States Action\"\n+                    handler={() => {this.props.onActionChanged(\"create\")}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTg0MQ=="}, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjYxMTE2OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/highstate/highstate.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyMDo0NVrOFycsNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyMDo0NVrOFycsNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MzE5MA==", "bodyText": "I'd not rely on the URL, better to have a field from the backend", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388443190", "createdAt": "2020-03-05T17:20:45Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/highstate/highstate.js", "diffHunk": "@@ -77,20 +80,50 @@ class Highstate extends React.Component {\n         this.setState({actionChain: actionChain})\n     };\n \n+    onMessageChanged = (message) => {\n+        this.setState({messages: message});\n+    };\n+\n+    handleForwardAction = (action) => {\n+        const loc = window.location;\n+        if(action === \"back\") {\n+            history.pushState(null, null, loc.pathname + loc.search);\n+            this.setState({\n+               action: undefined\n+            });\n+        } else {\n+            const pathname = loc.pathname.replace(\"highstate\", \"states/schedules\");\n+            Functions.Utils.urlBounce(pathname + loc.search);\n+        }\n+    };\n+\n     toggleTestState = () => {\n         this.setState({test: !this.state.test})\n     };\n \n+    isSSM = () => {\n+        return !!window.location.pathname.match(\"/ssm/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16867ab3c979eca3529624035702e12024efc79a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjYxNjEzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/menu/MenuTree.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyMjowNlrOFycvHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyMjowNlrOFycvHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MzkzMw==", "bodyText": "Indentation to be fixed", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388443933", "createdAt": "2020-03-05T17:22:06Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/suse/manager/webui/menu/MenuTree.java", "diffHunk": "@@ -74,6 +74,7 @@\n                     .addChild(new MenuItem(\"Organization Trusts\").withPrimaryUrl(\"/rhn/multiorg/Organizations.do\")\n                         .withAltUrl(\"/rhn/multiorg/OrgTrustDetails.do\").withAltUrl(\"/rhn/multiorg/channels/Consumed.do\")\n                         .withAltUrl(\"/rhn/multiorg/channels/Provided.do\").withVisibility(adminRoles.get(\"org\")))\n+                     .addChild(new MenuItem(\"Recurring States\").withPrimaryUrl(\"/rhn/manager/yourorg/recurring-states\").withVisibility(adminRoles.get(\"org\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a315c69a32cd87fd7a137b348c674200d039e29"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjY0NjQ0OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/highstate.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozMDo0NFrOFydB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDoxNDoxNFrOFyzpqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0ODcyNw==", "bodyText": "So we don't receive any feedback from the server if everything went well? As I see we have a success flag, I'd better check the flag first and depending on it we can look into messages or not.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388448727", "createdAt": "2020-03-05T17:30:44Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/highstate.js", "diffHunk": "@@ -0,0 +1,198 @@\n+/* eslint-disable */\n+'use strict';\n+\n+import {Button} from \"components/buttons\";\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Messages = require(\"components/messages\").Messages;\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const {ActionSchedule} = require(\"components/action-schedule\");\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const Functions = require(\"utils/functions\");\n+const Formats = Functions.Formats;\n+const {ActionLink, ActionChainLink} = require(\"components/links\");\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+\n+const messagesCounterLimit = 3;\n+\n+function msg(severityIn, textIn) {\n+    return {severity: severityIn, text: textIn};\n+}\n+\n+class Highstate extends React.Component {\n+    constructor(props) {\n+        super(props);\n+        var state = {\n+            messages: [],\n+            earliest: Functions.Utils.dateWithTimezone(localTime),\n+            test: false\n+        };\n+        this.state = state;\n+    }\n+\n+    applyHighstate = () => {\n+        const request = Network.post(\n+            \"/rhn/manager/api/states/applyall\",\n+            JSON.stringify({\n+                ids: minions.map(m => m.id),\n+                earliest: Formats.LocalDateTime(this.state.earliest),\n+                actionChain: this.state.actionChain ? this.state.actionChain.text : null,\n+                test: this.state.test\n+            }),\n+            \"application/json\"\n+        ).promise.then(data => {\n+            const msg = MessagesUtils.info(this.state.actionChain ?\n+                    <span>{t(\"Action has been successfully added to the \")}<ActionChainLink id={data}>{this.state.actionChain ? this.state.actionChain.text : \"\"}</ActionChainLink></span> :\n+                    <span>{t(\"Applying the highstate has been \")}<ActionLink id={data}>{t(\"scheduled.\")}</ActionLink></span>);\n+\n+            const msgs = this.state.messages.concat(msg);\n+\n+            // Do not spam UI showing old messages\n+            while (msgs.length > messagesCounterLimit) {\n+              msgs.shift();\n+            }\n+\n+            this.setState({\n+                messages: msgs\n+            });\n+        }).catch(this.handleResponseError);\n+\n+        return request;\n+    };\n+\n+    handleResponseError = (jqXHR) => {\n+      this.setState({\n+           messages: Network.responseErrorMessage(jqXHR)\n+      });\n+    };\n+\n+    onDateTimeChanged = (date) => {\n+        this.setState({\"earliest\": date});\n+    };\n+\n+    onActionChainChanged = (actionChain) => {\n+        this.setState({actionChain: actionChain})\n+    };\n+\n+    onMessageChanged = (message) => {\n+        this.setState({messages: message});\n+    };\n+\n+    handleForwardAction = (action) => {\n+        const loc = window.location;\n+        if(action === \"back\") {\n+            history.pushState(null, null, loc.pathname + loc.search);\n+            this.setState({\n+               action: undefined\n+            });\n+        } else {\n+            const pathname = loc.pathname.replace(\"highstate\", \"states/schedules\");\n+            Functions.Utils.urlBounce(pathname + loc.search);\n+        }\n+    };\n+\n+    toggleTestState = () => {\n+        this.setState({test: !this.state.test})\n+    };\n+\n+    isSSM = () => {\n+        return !!window.location.pathname.match(\"/ssm/\");\n+    };\n+\n+    updateSchedule =(schedule) => {\n+        return Network.post(\n+            \"/rhn/manager/api/recurringactions/save\",\n+            JSON.stringify(schedule),\n+            \"application/json\"\n+        ).promise.then((data) => {\n+            // HACK: propagate the errors from messages to the UI\n+            let newMsgs = [];\n+            if (data.messages === undefined || data.messages.length === 0) { // no errors from the server\n+                newMsgs = MessagesUtils.info(<span>{t(\"Schedule successully created.\")}</span>);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788de161657e4d18ad0c35f745b3e05843b21253"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxOTM2OA==", "bodyText": "Fixed.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388819368", "createdAt": "2020-03-06T10:14:14Z", "author": {"login": "hustodemon"}, "path": "web/html/src/manager/state/highstate.js", "diffHunk": "@@ -0,0 +1,198 @@\n+/* eslint-disable */\n+'use strict';\n+\n+import {Button} from \"components/buttons\";\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Messages = require(\"components/messages\").Messages;\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const {ActionSchedule} = require(\"components/action-schedule\");\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const Functions = require(\"utils/functions\");\n+const Formats = Functions.Formats;\n+const {ActionLink, ActionChainLink} = require(\"components/links\");\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+\n+const messagesCounterLimit = 3;\n+\n+function msg(severityIn, textIn) {\n+    return {severity: severityIn, text: textIn};\n+}\n+\n+class Highstate extends React.Component {\n+    constructor(props) {\n+        super(props);\n+        var state = {\n+            messages: [],\n+            earliest: Functions.Utils.dateWithTimezone(localTime),\n+            test: false\n+        };\n+        this.state = state;\n+    }\n+\n+    applyHighstate = () => {\n+        const request = Network.post(\n+            \"/rhn/manager/api/states/applyall\",\n+            JSON.stringify({\n+                ids: minions.map(m => m.id),\n+                earliest: Formats.LocalDateTime(this.state.earliest),\n+                actionChain: this.state.actionChain ? this.state.actionChain.text : null,\n+                test: this.state.test\n+            }),\n+            \"application/json\"\n+        ).promise.then(data => {\n+            const msg = MessagesUtils.info(this.state.actionChain ?\n+                    <span>{t(\"Action has been successfully added to the \")}<ActionChainLink id={data}>{this.state.actionChain ? this.state.actionChain.text : \"\"}</ActionChainLink></span> :\n+                    <span>{t(\"Applying the highstate has been \")}<ActionLink id={data}>{t(\"scheduled.\")}</ActionLink></span>);\n+\n+            const msgs = this.state.messages.concat(msg);\n+\n+            // Do not spam UI showing old messages\n+            while (msgs.length > messagesCounterLimit) {\n+              msgs.shift();\n+            }\n+\n+            this.setState({\n+                messages: msgs\n+            });\n+        }).catch(this.handleResponseError);\n+\n+        return request;\n+    };\n+\n+    handleResponseError = (jqXHR) => {\n+      this.setState({\n+           messages: Network.responseErrorMessage(jqXHR)\n+      });\n+    };\n+\n+    onDateTimeChanged = (date) => {\n+        this.setState({\"earliest\": date});\n+    };\n+\n+    onActionChainChanged = (actionChain) => {\n+        this.setState({actionChain: actionChain})\n+    };\n+\n+    onMessageChanged = (message) => {\n+        this.setState({messages: message});\n+    };\n+\n+    handleForwardAction = (action) => {\n+        const loc = window.location;\n+        if(action === \"back\") {\n+            history.pushState(null, null, loc.pathname + loc.search);\n+            this.setState({\n+               action: undefined\n+            });\n+        } else {\n+            const pathname = loc.pathname.replace(\"highstate\", \"states/schedules\");\n+            Functions.Utils.urlBounce(pathname + loc.search);\n+        }\n+    };\n+\n+    toggleTestState = () => {\n+        this.setState({test: !this.state.test})\n+    };\n+\n+    isSSM = () => {\n+        return !!window.location.pathname.match(\"/ssm/\");\n+    };\n+\n+    updateSchedule =(schedule) => {\n+        return Network.post(\n+            \"/rhn/manager/api/recurringactions/save\",\n+            JSON.stringify(schedule),\n+            \"application/json\"\n+        ).promise.then((data) => {\n+            // HACK: propagate the errors from messages to the UI\n+            let newMsgs = [];\n+            if (data.messages === undefined || data.messages.length === 0) { // no errors from the server\n+                newMsgs = MessagesUtils.info(<span>{t(\"Schedule successully created.\")}</span>);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0ODcyNw=="}, "originalCommit": {"oid": "788de161657e4d18ad0c35f745b3e05843b21253"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk4NjI3OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/state/highstate.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NDozMFrOFyzB-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NDozMFrOFyzB-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTIxMA==", "bodyText": "(Thou shalt not copypaste)", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388809210", "createdAt": "2020-03-06T09:54:30Z", "author": {"login": "hustodemon"}, "path": "web/html/src/manager/state/highstate.js", "diffHunk": "@@ -105,6 +105,41 @@ class Highstate extends React.Component {\n         return !!window.location.pathname.match(\"/ssm/\");\n     };\n \n+    updateSchedule =(schedule) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788de161657e4d18ad0c35f745b3e05843b21253"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 122, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}