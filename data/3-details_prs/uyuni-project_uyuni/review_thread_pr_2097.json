{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NTg4ODky", "number": 2097, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowNjo1MlrODvk_kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowNjo1MlrODvk_kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjE1NzYzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/manager/distupgrade/DistUpgradeManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowNjo1MlrOGCFRPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoyMDo1NFrOGCF7RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzNjY3MA==", "bodyText": "You can pass the installedProducts directly, not via an optional (the only thing that's done via the optional is get() in this method).", "url": "https://github.com/uyuni-project/uyuni/pull/2097#discussion_r404836670", "createdAt": "2020-04-07T14:06:52Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/manager/distupgrade/DistUpgradeManager.java", "diffHunk": "@@ -695,4 +697,42 @@ public static Long scheduleDistUpgrade(User user, Server server,\n         // Return the ID of the scheduled action\n         return ActionManager.scheduleDistUpgrade(user, server, details, earliest).getId();\n     }\n+\n+    /**\n+     * Remove incompatible migration targets compared to the installed products.\n+     * Write the failed products in the missingSuccesorExtensions set in case it should\n+     * be shown somewhere.\n+     *\n+     * @param installedProducts Optional set of the installed products\n+     * @param allMigrationTargets all calculated migration targets\n+     * @param missingSuccessorExtensions OUT: info about installed extensions missing a successor\n+     * @return list of valid migration targets\n+     */\n+    public static List<SUSEProductSet> removeIncompatibleTargets(Optional<SUSEProductSet> installedProducts,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3165e07be19b810db4d847dbf6caeff87e5d4025"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg0NzQyOQ==", "bodyText": "Right, where we call it we have it as optional value. Somebody refactored in the past the code to have installedProducts as Optional. So I keep compatibility.", "url": "https://github.com/uyuni-project/uyuni/pull/2097#discussion_r404847429", "createdAt": "2020-04-07T14:20:54Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/redhat/rhn/manager/distupgrade/DistUpgradeManager.java", "diffHunk": "@@ -695,4 +697,42 @@ public static Long scheduleDistUpgrade(User user, Server server,\n         // Return the ID of the scheduled action\n         return ActionManager.scheduleDistUpgrade(user, server, details, earliest).getId();\n     }\n+\n+    /**\n+     * Remove incompatible migration targets compared to the installed products.\n+     * Write the failed products in the missingSuccesorExtensions set in case it should\n+     * be shown somewhere.\n+     *\n+     * @param installedProducts Optional set of the installed products\n+     * @param allMigrationTargets all calculated migration targets\n+     * @param missingSuccessorExtensions OUT: info about installed extensions missing a successor\n+     * @return list of valid migration targets\n+     */\n+    public static List<SUSEProductSet> removeIncompatibleTargets(Optional<SUSEProductSet> installedProducts,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzNjY3MA=="}, "originalCommit": {"oid": "3165e07be19b810db4d847dbf6caeff87e5d4025"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 103, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}