{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDM1Mzg1", "number": 2165, "title": "Cucumber test for bootstrapping minion with SSH key", "bodyText": "I also squeezed in a small (but important) fix in this PR.\nWhat does this PR change?\nQA Reviwers: Please review the \"Test part\" and check if it makes sense.\nCode Reviewers: Please review the \"Code part\".\nTest part\nIntroduced a (secondary) feature for testing for bootstrapping SLE minion,\nhighlights:\n\nadded a pre-created ssh key pair\nsetup scenario for adding keys to the authorized_keys file of the minion,\ncleanup scenario for this\none scenario tries bootstrapping minion with the key with wrong passphrase\none scenario tries bootstrapping minion with the key with correct passphrase\nthe rest of the scenario tries to bring the minion back to the original state\nthere are some questions directly in the file marked with todo\n\nCode part\nThis decouples the temporary key file name creation from creating the file\nitself. This allows the clean up code to be executed in more situations\n(previously, when the file creation succeeded, but the mode setting failed, the\ncleanup code was not executed!).\nIntroduced one more small change: don't check for the mode of the tmp key file\nafter changing it via set_mode. The value returned was not reliable (it\nlooks like that some salt versions return \"0600\", some return \"0o600\"). Let's\nrely on the exceptions thrown from salt in this case.\nFinally, an info about the key file lifecycle was added to the UI (see the screenshot).\nGUI diff\nAfter:\n\n\n DONE\n\nDocumentation\n\n\nNo documentation needed: tests + bugfixes\n\n\n DONE\n\n\nTest coverage\n\n\nCucumber tests were added\n\n\n DONE\n\n\nLinks\nTracks SUSE/spacewalk#11114\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"ruby_rubocop\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-04-26T07:30:41Z", "url": "https://github.com/uyuni-project/uyuni/pull/2165", "merged": true, "mergeCommit": {"oid": "7003c98f204f8cf65b86f57fee3e991c30e311db"}, "closed": true, "closedAt": "2020-04-29T07:51:54Z", "author": {"login": "hustodemon"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbaNUZgFqTQwMDUwMTI0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccSQEKABqjMyODMxMzMxMTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTAxMjQx", "url": "https://github.com/uyuni-project/uyuni/pull/2165#pullrequestreview-400501241", "createdAt": "2020-04-26T12:54:07Z", "commit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1NDowN1rOGMEKTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1NDowN1rOGMEKTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNDI2OA==", "bodyText": "I would prefer to have it as part of constants.rb file. But we couldn't arrive at an agreement related to constants in our squad.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415304268", "createdAt": "2020-04-26T12:54:07Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTAxNjM1", "url": "https://github.com/uyuni-project/uyuni/pull/2165#pullrequestreview-400501635", "createdAt": "2020-04-26T12:58:14Z", "commit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1ODoxNFrOGMENfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1ODoxNFrOGMENfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNTA4Nw==", "bodyText": "I personally prefer to don't have calls to endpoints in out steps, I don't remember now the step, but we have another that has the same behavior without having the URI there.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415305087", "createdAt": "2020-04-26T12:58:14Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTAyMjE4", "url": "https://github.com/uyuni-project/uyuni/pull/2165#pullrequestreview-400502218", "createdAt": "2020-04-26T13:03:49Z", "commit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjcyNzQ1", "url": "https://github.com/uyuni-project/uyuni/pull/2165#pullrequestreview-400672745", "createdAt": "2020-04-27T06:58:48Z", "commit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1ODo0OVrOGMTsag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxMjo1OVrOGMUJIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1ODc2Mg==", "bodyText": "This is a separate feature, right ? Then you forgot the declarations in run_sets/*.yml.\nCopyright of 2020 only, maybe", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415558762", "createdAt": "2020-04-27T06:58:49Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1OTE4MQ==", "bodyText": "Remove \"Be able to \".\nAll product features are about being able to do something, so this does not bring information.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415559181", "createdAt": "2020-04-27T06:59:33Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MDUxNw==", "bodyText": "maybe \"before bootstrap with SSH key test\" to make it more obvious what bootstrap test it's about.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415560517", "createdAt": "2020-04-27T07:02:04Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MDkzOQ==", "bodyText": "\"SSH key\", lowercase.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415560939", "createdAt": "2020-04-27T07:03:01Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MTI1Ng==", "bodyText": "Do we have balrogs for our tests? ;-)", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415561256", "createdAt": "2020-04-27T07:03:41Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MTQ0Mw==", "bodyText": "\"key\", lowercase", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415561443", "createdAt": "2020-04-27T07:04:03Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MTYwNg==", "bodyText": "same", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415561606", "createdAt": "2020-04-27T07:04:19Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MjAwOQ==", "bodyText": "100 % agree, we should avoid internals in high-level cucumber text.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415562009", "createdAt": "2020-04-27T07:05:10Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNTA4Nw=="}, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MjM0Mg==", "bodyText": "\"key\", lowercase. I will stop repeating it now, but there are more.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415562342", "createdAt": "2020-04-27T07:05:48Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page\n+    And I wait until I see the name of \"sle_minion\", refreshing the page\n+    And I wait until onboarding is completed for \"sle_minion\"\n+    Then the Salt master can reach \"sle_minion\"\n+\n+  Scenario: Also check contact method of this minion\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    Then I should see a \"Default\" text\n+  \n+  Scenario: Cleanup authorized keys\n+    When I restore the SSH authorized_keys file of host \"sle_minion\"\n+\n+  Scenario: Cleanup: turn the SLES minion into a container build host after bootstrap with SSH Key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MjY5OQ==", "bodyText": "\"And\"", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415562699", "createdAt": "2020-04-27T07:06:24Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page\n+    And I wait until I see the name of \"sle_minion\", refreshing the page\n+    And I wait until onboarding is completed for \"sle_minion\"\n+    Then the Salt master can reach \"sle_minion\"\n+\n+  Scenario: Also check contact method of this minion\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    Then I should see a \"Default\" text\n+  \n+  Scenario: Cleanup authorized keys\n+    When I restore the SSH authorized_keys file of host \"sle_minion\"\n+\n+  Scenario: Cleanup: turn the SLES minion into a container build host after bootstrap with SSH Key\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Details\" in the content area\n+    And I follow \"Properties\" in the content area\n+    And I check \"container_build_host\"\n+    And I click on \"Update Properties\"\n+\n+  Scenario: Cleanup: turn the SLES minion into a OS image build host after bootstrap with SSH Key\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Details\" in the content area\n+    And I follow \"Properties\" in the content area\n+    And I check \"osimage_build_host\"\n+    And I click on \"Update Properties\"\n+    Then I should see a \"OS Image Build Host type has been applied.\" text\n+    And I should see a \"Note: This action will not result in state application\" text\n+    And I should see a \"To apply the state, either use the states page or run state.highstate from the command line.\" text\n+    And I should see a \"System properties changed\" text\n+\n+  Scenario: Cleanup: apply the highstate to build host after bootstrap with SSH Key\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I wait until no Salt job is running on \"sle_minion\"\n+    And I enable repositories before installing Docker\n+    And I apply highstate on \"sle_minion\"\n+    And I wait until \"docker\" service is active on \"sle_minion\"\n+    And I wait until file \"/var/lib/Kiwi/repo/rhn-org-trusted-ssl-cert-osimage-1.0-1.noarch.rpm\" exists on \"sle_minion\"\n+    And I disable repositories after installing Docker\n+\n+  Scenario: Cleanup: check that the minion is now a build host after bootstrap with SSH Key\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    Then I should see a \"[Container Build Host]\" text\n+    Then I should see a \"[OS Image Build Host]\" text", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDIwNw==", "bodyText": "I think these constants should be part of the individual step definitions:\n1 - if they were real global constants, they should start with $\n2 - they are too specific to become really global\nPlease move them into the steps. It's not a big deal if they are repeated a few times.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415564207", "createdAt": "2020-04-27T07:09:24Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNDI2OA=="}, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDUwNQ==", "bodyText": "\"Error\", upper case", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415564505", "createdAt": "2020-04-27T07:09:59Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+\n+When(/^I backup the SSH authorized_keys file of host \"([^\"]*)\"$/) do |host|\n+  target = get_target(host)\n+  _, ret_code = target.run(\"cp #{auth_keys_path} #{auth_keys_sav_path}\")\n+  raise 'error backing up authorized_keys on host' if ret_code.nonzero?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDg5MA==", "bodyText": "or two string interpolations with #{...}(not sure it's a good idea, feel free to ignore)", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415564890", "createdAt": "2020-04-27T07:10:46Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+\n+When(/^I backup the SSH authorized_keys file of host \"([^\"]*)\"$/) do |host|\n+  target = get_target(host)\n+  _, ret_code = target.run(\"cp #{auth_keys_path} #{auth_keys_sav_path}\")\n+  raise 'error backing up authorized_keys on host' if ret_code.nonzero?\n+end\n+\n+And(/^I add pre\\-generated SSH public key to authorized_keys of host \"([^\"]*)\"$/) do |host|\n+  target = get_target(host)\n+  ret_code = file_inject(\n+    target,\n+    File.dirname(__FILE__) + '/../upload_files/ssh_keypair/' + key_filename,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NjExMw==", "bodyText": "\"Cleanup: restore authorized keys\"", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415566113", "createdAt": "2020-04-27T07:12:59Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page\n+    And I wait until I see the name of \"sle_minion\", refreshing the page\n+    And I wait until onboarding is completed for \"sle_minion\"\n+    Then the Salt master can reach \"sle_minion\"\n+\n+  Scenario: Also check contact method of this minion\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    Then I should see a \"Default\" text\n+  \n+  Scenario: Cleanup authorized keys", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODk3NjYz", "url": "https://github.com/uyuni-project/uyuni/pull/2165#pullrequestreview-400897663", "createdAt": "2020-04-27T12:21:54Z", "commit": {"oid": "f1cd4fc677e16aeb68f63fb82702db0ecaa9f954"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoyMTo1NFrOGMgS5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoyMTo1NFrOGMgS5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc2NTIyMA==", "bodyText": "thanks!", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415765220", "createdAt": "2020-04-27T12:21:54Z", "author": {"login": "Bischoff"}, "path": "testsuite/run_sets/secondary.yml", "diffHunk": "@@ -17,6 +17,7 @@\n - features/secondary/trad_centos_client.feature\n - features/secondary/min_ubuntu_salt.feature\n - features/secondary/minssh_bootstrap_xmlrpc.feature\n+- features/secondary/min_bootstrap_ssh_key.feature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cd4fc677e16aeb68f63fb82702db0ecaa9f954"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzA0OTk3", "url": "https://github.com/uyuni-project/uyuni/pull/2165#pullrequestreview-401704997", "createdAt": "2020-04-28T10:30:45Z", "commit": {"oid": "6b008c019ea8bd07563b5b0fe2856626a9cf49bd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeb5f2f83e916f114dea9e8d30848ef2ac4b8406", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/aeb5f2f83e916f114dea9e8d30848ef2ac4b8406", "committedDate": "2020-04-29T06:11:25Z", "message": "Cucumber test: Bootstrapping minions using an SSH private key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21aeff4ff69fd4ce9cd5c81b04e8edad1678d5b5", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/21aeff4ff69fd4ce9cd5c81b04e8edad1678d5b5", "committedDate": "2020-04-29T06:11:25Z", "message": "Bugfix: Separate tmp key filename creation from actual file creating\n\n.. so that the clean up can be done even if the file was created by salt\nand the mode setting failed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eb783ffb65e99e739ef85f42ab92613c60bdbfe", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8eb783ffb65e99e739ef85f42ab92613c60bdbfe", "committedDate": "2020-04-29T06:11:25Z", "message": "Remove unnecessary check for the mode\n\nRely on exception thrown from python in case of errors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04f63d18d184a25a5be5169686337833f7e4fadd", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/04f63d18d184a25a5be5169686337833f7e4fadd", "committedDate": "2020-04-29T06:11:25Z", "message": "Minor UI: Inform the user about the temporary key file lifecycle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26129bfb234b3cd2df597309b27da0e533948e2c", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/26129bfb234b3cd2df597309b27da0e533948e2c", "committedDate": "2020-04-29T06:11:25Z", "message": "Move the constants to the steps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd04c2af99cbd2f402aab16cd6f8c49d8bd61db3", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fd04c2af99cbd2f402aab16cd6f8c49d8bd61db3", "committedDate": "2020-04-29T06:11:25Z", "message": "Copyright & include test in the runsets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b65503b4f87178afd1b77fc596386df41237926c", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b65503b4f87178afd1b77fc596386df41237926c", "committedDate": "2020-04-29T06:11:25Z", "message": "Move the test file to follow the convention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38b11871fb1a0aaa01de8dcbca13bd19109f2d27", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/38b11871fb1a0aaa01de8dcbca13bd19109f2d27", "committedDate": "2020-04-29T06:11:25Z", "message": "Minor fixes in tests (upper/lowercase letters, naming)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5afba060482b8294f0e96dafdc4d40d663c4d56", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a5afba060482b8294f0e96dafdc4d40d663c4d56", "committedDate": "2020-04-29T06:11:25Z", "message": "Make rubocop happy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b008c019ea8bd07563b5b0fe2856626a9cf49bd", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6b008c019ea8bd07563b5b0fe2856626a9cf49bd", "committedDate": "2020-04-27T13:35:59Z", "message": "Make rubocop happy"}, "afterCommit": {"oid": "a5afba060482b8294f0e96dafdc4d40d663c4d56", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a5afba060482b8294f0e96dafdc4d40d663c4d56", "committedDate": "2020-04-29T06:11:25Z", "message": "Make rubocop happy"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1387, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}