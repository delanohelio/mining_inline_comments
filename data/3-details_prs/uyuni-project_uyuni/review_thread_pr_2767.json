{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNDA2OTgw", "number": 2767, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMzoxNDoyM1rOE5KqQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOToyNToyMFrOFGFzEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzc4OTQ0OnYy", "diffSide": "LEFT", "path": "java/code/src/com/suse/manager/utils/test/PackageUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMzoxNDoyM1rOHzfmdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozNzoxMlrOHz0ZwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1NzE3Mg==", "bodyText": "This is not anymore the test for PackageUtils. Should we move these tests to PackageEvrTest?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r523757172", "createdAt": "2020-11-15T13:14:23Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/utils/test/PackageUtilsTest.java", "diffHunk": "@@ -19,23 +19,21 @@\n import com.redhat.rhn.domain.rhnpackage.PackageFactory;\n import com.redhat.rhn.domain.rhnpackage.test.PackageTest;\n import com.redhat.rhn.testing.BaseTestCaseWithUser;\n-import com.suse.manager.utils.PackageUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b2f881efc342d1eea8e5b1862fabfca06411a2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5Nzk4NA==", "bodyText": "would make sense i did not do that the first time since i wanted to keep diff minimal but now we should do it.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r524097984", "createdAt": "2020-11-16T10:37:12Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/utils/test/PackageUtilsTest.java", "diffHunk": "@@ -19,23 +19,21 @@\n import com.redhat.rhn.domain.rhnpackage.PackageFactory;\n import com.redhat.rhn.domain.rhnpackage.test.PackageTest;\n import com.redhat.rhn.testing.BaseTestCaseWithUser;\n-import com.suse.manager.utils.PackageUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1NzE3Mg=="}, "originalCommit": {"oid": "e0b2f881efc342d1eea8e5b1862fabfca06411a2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzc5Njk2OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMzoyMjozNVrOHzfqMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzozMjo0NlrOHz-3pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1ODEzMA==", "bodyText": "Why do we still store epoch, version and release as single values? Could we just change the getters to return packageEvr.getXXX() ?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r523758130", "createdAt": "2020-11-15T13:22:35Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java", "diffHunk": "@@ -89,6 +92,7 @@ public PackageStateJson(String nameIn, PackageEvr evrIn, String archIn) {\n         this.arch = archIn;\n         this.packageStateId = Optional.empty();\n         this.versionConstraintId = Optional.empty();\n+        this.packageEvr = evrIn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b2f881efc342d1eea8e5b1862fabfca06411a2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2OTQ3OA==", "bodyText": "i reworked this again and removed the packageEvr again since i found a place that read PackageStateJson from json which would not have worked.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r524269478", "createdAt": "2020-11-16T13:32:46Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java", "diffHunk": "@@ -89,6 +92,7 @@ public PackageStateJson(String nameIn, PackageEvr evrIn, String archIn) {\n         this.arch = archIn;\n         this.packageStateId = Optional.empty();\n         this.versionConstraintId = Optional.empty();\n+        this.packageEvr = evrIn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1ODEzMA=="}, "originalCommit": {"oid": "e0b2f881efc342d1eea8e5b1862fabfca06411a2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzc5ODk2OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMzoyNDo1OFrOHzfrMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzozMzozN1rOHz-5Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1ODM4NQ==", "bodyText": "Is it sufficient to use packageEvr directly? It might not contain the DB ID when it was just initialized with new.\nDo we need the ID?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r523758385", "createdAt": "2020-11-15T13:24:58Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java", "diffHunk": "@@ -164,8 +168,7 @@ public String getArch() {\n                     VersionConstraints vc = versionConstraint.get();\n                     if (!Arrays.asList(VersionConstraints.LATEST, VersionConstraints.ANY)\n                             .contains(vc)) {\n-                        packageState.setEvr(PackageEvrFactory.lookupOrCreatePackageEvr(\n-                                getEpoch(), getVersion(), getRelease()));\n+                        packageState.setEvr(packageEvr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b2f881efc342d1eea8e5b1862fabfca06411a2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2OTkxOA==", "bodyText": "This is now fixed in the reworked version going back to using the lookup function and taking the evr type as parameter to this function instead.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r524269918", "createdAt": "2020-11-16T13:33:37Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java", "diffHunk": "@@ -164,8 +168,7 @@ public String getArch() {\n                     VersionConstraints vc = versionConstraint.get();\n                     if (!Arrays.asList(VersionConstraints.LATEST, VersionConstraints.ANY)\n                             .contains(vc)) {\n-                        packageState.setEvr(PackageEvrFactory.lookupOrCreatePackageEvr(\n-                                getEpoch(), getVersion(), getRelease()));\n+                        packageState.setEvr(packageEvr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1ODM4NQ=="}, "originalCommit": {"oid": "e0b2f881efc342d1eea8e5b1862fabfca06411a2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MzgxMjgwOnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/postgres/procs/lookup_transaction_package.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMzozOTowMVrOHzfx_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMzozOTowMVrOHzfx_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2MDEyNw==", "bodyText": "When a_in is null, this will create a EVR without type.\nThis function is used in backend with an explicit arch set to None.\nhttps://github.com/uyuni-project/uyuni/blob/debvercmp-uyuni/backend/server/rhnServer/server_kickstart.py#L172-L207", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r523760127", "createdAt": "2020-11-15T13:39:01Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/postgres/procs/lookup_transaction_package.sql", "diffHunk": "@@ -40,13 +41,16 @@ begin\n     end if;\n \n     n_id := lookup_package_name(n_in);\n-    e_id := lookup_evr(e_in, v_in, r_in);\n     p_arch_id := null;\n \n     if a_in is not null then\n         p_arch_id := lookup_package_arch(a_in);\n+        SELECT t.label into type from rhnpackagearch pa join rhnarchtype t\n+         on t.id = pa.arch_type_id where pa.id = p_arch_id;\n     end if;\n \n+    e_id := lookup_evr(e_in, v_in, r_in, type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b2f881efc342d1eea8e5b1862fabfca06411a2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MzgyODI0OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/upgrade/susemanager-schema-4.2.2-to-susemanager-schema-4.2.3/1000-debvercmp.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMzo1NDoyNVrOHzf5kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMzo1NDoyNVrOHzf5kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2MjA2Nw==", "bodyText": "I think this will create a mess when we run it multiple times.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            update rhnpackageevr set evr.type = 'rpm';\n          \n          \n            \n            update rhnpackageevr set evr.type = 'rpm' where evr.type is NULL;", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r523762067", "createdAt": "2020-11-15T13:54:25Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/upgrade/susemanager-schema-4.2.2-to-susemanager-schema-4.2.3/1000-debvercmp.sql", "diffHunk": "@@ -0,0 +1,506 @@\n+DO $$\n+BEGIN\n+    IF NOT EXISTS (\n+        SELECT 1\n+        FROM pg_type t\n+        JOIN pg_class c ON c.oid = t.typrelid\n+        JOIN pg_attribute a ON a.attrelid = c.oid\n+        WHERE t.typname = 'evr_t'\n+        AND a.attname = 'type'\n+        )\n+    THEN\n+        alter type evr_t add attribute type varchar(10);\n+    END IF;\n+END $$;\n+\n+drop index rhn_pe_v_r_e_uq;\n+create unique index rhn_pe_v_r_e_uq\n+    on rhnpackageevr (version, release, epoch, ((evr).type))\n+ where epoch is not null;\n+\n+drop index rhn_pe_v_r_uq;\n+create unique index rhn_pe_v_r_uq\n+    on rhnpackageevr (version, release, ((evr).type))\n+ where epoch is null;\n+\n+create or replace function evr_t(e varchar, v varchar, r varchar, t varchar)\n+returns evr_t as $$\n+select row($1,$2,$3,$4)::evr_t\n+$$ language sql;\n+\n+\n+-- update evr_t comparison function to take type into account.\n+create or replace function evr_t_compare( a evr_t, b evr_t )\n+returns int as $$\n+begin\n+  if a.type = b.type then\n+      if a.type = 'rpm' then\n+        return rpm.vercmp(a.epoch, a.version, a.release, b.epoch, b.version, b.release);\n+      elsif a.type = 'deb' then\n+        return deb.debvercmp(a.epoch, a.version, a.release, b.epoch, b.version, b.release);\n+      else\n+        raise EXCEPTION 'unknown evr type (using rpm) -> %', a.type;\n+      end if;\n+  else\n+     raise NOTICE 'comparing incompatible evr types. Using %', a.type;\n+     if a.type = 'deb' then\n+       return -1;\n+     else\n+       return 1;\n+     end if;\n+  end if;\n+end;\n+$$ language plpgsql immutable strict;\n+\n+\n+create or replace function evr_t_ne( a evr_t, b evr_t )\n+returns boolean as $$\n+begin\n+  return evr_t_compare( a, b ) != 0;\n+end;\n+$$ language plpgsql immutable strict;\n+\n+drop operator if exists <> (evr_t, evr_t);\n+create operator <> (\n+  leftarg = evr_t,\n+  rightarg = evr_t,\n+  procedure = evr_t_ne,\n+  commutator = <>,\n+  negator = =,\n+  restrict = eqsel,\n+  join = eqjoinsel\n+);\n+\n+\n+-- update insert_evr\n+create or replace function\n+insert_evr(e_in in varchar, v_in in varchar, r_in in varchar, t_in in varchar)\n+returns numeric\n+as\n+$$\n+declare\n+    evr_id  numeric;\n+begin\n+    evr_id := nextval('rhn_pkg_evr_seq');\n+\n+    insert into rhnPackageEVR(id, epoch, version, release, evr)\n+        values (evr_id, e_in, v_in, r_in, evr_t(e_in, v_in, r_in, t_in))\n+        on conflict do nothing;\n+\n+    select id\n+        into strict evr_id\n+        from rhnPackageEVR\n+        where ((epoch is null and e_in is null) or (epoch = e_in)) and\n+           version = v_in and release = r_in and (evr).type = t_in;\n+\n+    return evr_id;\n+end;\n+$$ language plpgsql;\n+\n+\n+-- update lookup_evr\n+create or replace function\n+lookup_evr(e_in in varchar, v_in in varchar, r_in in varchar, t_in in varchar)\n+returns numeric\n+as\n+$$\n+declare\n+    evr_id  numeric;\n+begin\n+    select id\n+      into evr_id\n+      from rhnPackageEVR\n+     where ((epoch is null and e_in is null) or (epoch = e_in)) and\n+           version = v_in and\n+           release = r_in and\n+           (evr).type = t_in;\n+\n+    if not found then\n+        -- HACK: insert is isolated in own function in order to be able to declare this function immutable\n+        -- Postgres optimizes immutable functions calls but those are compatible with the contract of lookup_\\*\n+        -- see https://www.postgresql.org/docs/9.6/xfunc-volatility.html\n+        return insert_evr(e_in, v_in, r_in, t_in);\n+    end if;\n+\n+    return evr_id;\n+end;\n+$$ language plpgsql immutable;\n+\n+\n+create or replace function\n+lookup_transaction_package(\n+    o_in in varchar,\n+    n_in in varchar,\n+    e_in in varchar,\n+    v_in in varchar,\n+    r_in in varchar,\n+    a_in in varchar)\n+returns numeric\n+as\n+$$\n+declare\n+    o_id        numeric;\n+    n_id        numeric;\n+    e_id        numeric;\n+    p_arch_id   numeric;\n+    tp_id       numeric;\n+    type        varchar;\n+begin\n+    select id\n+      into o_id\n+      from rhnTransactionOperation\n+     where label = o_in;\n+\n+    if not found then\n+        perform rhn_exception.raise_exception('invalid_transaction_operation');\n+    end if;\n+\n+    n_id := lookup_package_name(n_in);\n+    p_arch_id := null;\n+\n+    if a_in is not null then\n+        p_arch_id := lookup_package_arch(a_in);\n+        SELECT t.label into type from rhnpackagearch pa join rhnarchtype t\n+         on t.id = pa.arch_type_id where pa.id = p_arch_id;\n+    end if;\n+\n+    e_id := lookup_evr(e_in, v_in, r_in, type);\n+\n+    select id\n+      into tp_id\n+      from rhnTransactionPackage\n+     where operation = o_id and\n+           name_id = n_id and\n+           evr_id = e_id and\n+           (package_arch_id = p_arch_id or (p_arch_id is null and package_arch_id is null));\n+\n+    if not found then\n+        -- HACK: insert is isolated in own function in order to be able to declare this function immutable\n+        -- Postgres optimizes immutable functions calls but those are compatible with the contract of lookup_\\*\n+        -- see https://www.postgresql.org/docs/9.6/xfunc-volatility.html\n+        return insert_transaction_package(o_id, n_id, e_id, p_arch_id);\n+    end if;\n+    return tp_id;\n+end;\n+$$ language plpgsql immutable;\n+\n+\n+ALTER TABLE rhnpackageevr DISABLE TRIGGER USER;\n+\n+-- set all existing rhnpackageevr to rpm\n+update rhnpackageevr set evr.type = 'rpm';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b2f881efc342d1eea8e5b1862fabfca06411a2"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MzgzNDM1OnYy", "diffSide": "RIGHT", "path": "schema/util/debian-versioncmp-database-testgenerator.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDowMDozNlrOHzf8aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDowMzo0OFrOH0AF5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2Mjc5Mg==", "bodyText": "Wouldn't it be better to use '{0}', '{1}' .... ?\nI think then you need to specify the variables in format only once.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r523762792", "createdAt": "2020-11-15T14:00:36Z", "author": {"login": "mcalmer"}, "path": "schema/util/debian-versioncmp-database-testgenerator.py", "diffHunk": "@@ -0,0 +1,74 @@\n+#!/usr/bin/python3\n+\n+OUTPUT_SQL_SCRIPT_FILENAME = 'debian_version_database_comparator_tests.sql'\n+\n+preamble = \"\"\"\n+-- launch me with spacewalk-sql -i < {}\n+DO\n+$$\n+declare\n+\tresult NUMERIC := 0;\n+begin\n+\n+\"\"\".format(OUTPUT_SQL_SCRIPT_FILENAME)\n+\n+conclusion = \"\"\"\n+end;\n+$$\n+\"\"\"\n+\n+# source: https://git.dpkg.org/cgit/dpkg/dpkg.git/tree/scripts/t/Dpkg_Version.t\n+tests = \"\"\"1.0-1 2.0-2 -1\n+2.2~rc-4 2.2-1 -1\n+2.2-1 2.2~rc-4 1\n+1.0000-1 1.0-1 0\n+0foo 0foo 0\n+0foo-0 0foo 0\n+0foo 0foo-0 0\n+0foo 0fo 1\n+0foo-0 0foo+ -1\n+0foo~1 0foo -1\n+0foo~foo+Bar 0foo~foo+bar -1\n+0foo~~ 0foo~ -1\n+1~ 1 -1\n+12345+that-really-is-some-ver-0 12345+that-really-is-some-ver-10 -1\n+0foo-0 0foo-01 -1\n+0foo.bar 0foobar 1\n+0foo.bar 0foo1bar 1\n+0foo.bar 0foo0bar 1\n+0foo1bar-1 0foobar-1 -1\n+0foo2.0 0foo2 1\n+0foo2.0.0 0foo2.10.0 -1\n+0foo2.0 0foo2.0.0 -1\n+0foo2.0 0foo2.10 -1\n+0foo2.1 0foo2.10 -1\n+1.09 1.9 0\n+1.0.8+nmu1 1.0.8 1\n+3.11 3.10+nmu1 1\n+0.9j-20080306-4 0.9i-20070324-2 1\n+1.2.0~b7-1 1.2.0~b6-1 1\n+1.011-1 1.06-2 1\n+0.0.9+dfsg1-1 0.0.8+dfsg1-3 1\n+4.6.99+svn6582-1 4.6.99+svn6496-1 1\n+53 52 1\n+0.9.9~pre122-1 0.9.9~pre111-1 1\n+1.0.1+gpl-1 1.0.1-2 1\n+1a 1000a -1\"\"\"\n+\n+with open(OUTPUT_SQL_SCRIPT_FILENAME, 'w') as f:\n+    f.write(preamble)\n+\n+    for test in tests.split('\\n'):\n+        operand1, operand2, expected_result = test.split(' ')\n+        statement = \"\"\"--\n+    select * into result from deb.debstrcmp('{}', '{}');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b2f881efc342d1eea8e5b1862fabfca06411a2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4OTUxMA==", "bodyText": "Yes, you are right. Fixed", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r524289510", "createdAt": "2020-11-16T14:03:48Z", "author": {"login": "mbologna"}, "path": "schema/util/debian-versioncmp-database-testgenerator.py", "diffHunk": "@@ -0,0 +1,74 @@\n+#!/usr/bin/python3\n+\n+OUTPUT_SQL_SCRIPT_FILENAME = 'debian_version_database_comparator_tests.sql'\n+\n+preamble = \"\"\"\n+-- launch me with spacewalk-sql -i < {}\n+DO\n+$$\n+declare\n+\tresult NUMERIC := 0;\n+begin\n+\n+\"\"\".format(OUTPUT_SQL_SCRIPT_FILENAME)\n+\n+conclusion = \"\"\"\n+end;\n+$$\n+\"\"\"\n+\n+# source: https://git.dpkg.org/cgit/dpkg/dpkg.git/tree/scripts/t/Dpkg_Version.t\n+tests = \"\"\"1.0-1 2.0-2 -1\n+2.2~rc-4 2.2-1 -1\n+2.2-1 2.2~rc-4 1\n+1.0000-1 1.0-1 0\n+0foo 0foo 0\n+0foo-0 0foo 0\n+0foo 0foo-0 0\n+0foo 0fo 1\n+0foo-0 0foo+ -1\n+0foo~1 0foo -1\n+0foo~foo+Bar 0foo~foo+bar -1\n+0foo~~ 0foo~ -1\n+1~ 1 -1\n+12345+that-really-is-some-ver-0 12345+that-really-is-some-ver-10 -1\n+0foo-0 0foo-01 -1\n+0foo.bar 0foobar 1\n+0foo.bar 0foo1bar 1\n+0foo.bar 0foo0bar 1\n+0foo1bar-1 0foobar-1 -1\n+0foo2.0 0foo2 1\n+0foo2.0.0 0foo2.10.0 -1\n+0foo2.0 0foo2.0.0 -1\n+0foo2.0 0foo2.10 -1\n+0foo2.1 0foo2.10 -1\n+1.09 1.9 0\n+1.0.8+nmu1 1.0.8 1\n+3.11 3.10+nmu1 1\n+0.9j-20080306-4 0.9i-20070324-2 1\n+1.2.0~b7-1 1.2.0~b6-1 1\n+1.011-1 1.06-2 1\n+0.0.9+dfsg1-1 0.0.8+dfsg1-3 1\n+4.6.99+svn6582-1 4.6.99+svn6496-1 1\n+53 52 1\n+0.9.9~pre122-1 0.9.9~pre111-1 1\n+1.0.1+gpl-1 1.0.1-2 1\n+1a 1000a -1\"\"\"\n+\n+with open(OUTPUT_SQL_SCRIPT_FILENAME, 'w') as f:\n+    f.write(preamble)\n+\n+    for test in tests.split('\\n'):\n+        operand1, operand2, expected_result = test.split(' ')\n+        statement = \"\"\"--\n+    select * into result from deb.debstrcmp('{}', '{}');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2Mjc5Mg=="}, "originalCommit": {"oid": "e0b2f881efc342d1eea8e5b1862fabfca06411a2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTYxODQyOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODo1OTozNlrOH4yasw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODo1OTozNlrOH4yasw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMwODMzOQ==", "bodyText": "Likely a C&P comment.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r529308339", "createdAt": "2020-11-24T08:59:36Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.common.util;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * DebVersionComparatorTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "933085fab8e348b5583cfef1d2ba155a0a0d7632"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTY3MTU3OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/PackageEvr.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTowNzowNFrOH4y91Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTowNzowNFrOH4y91Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMxNzMzMw==", "bodyText": "Nit (here and below): unsupported/unknown would be more fitting, IMHO. When we implement a new type, but forget to change this method, we will \"reach the unreachable\" in the log \ud83d\ude09", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r529317333", "createdAt": "2020-11-24T09:07:04Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/PackageEvr.java", "diffHunk": "@@ -221,4 +293,100 @@ public String toUniversalEvrString() {\n \n         return builder.toString();\n     }\n+\n+    /**\n+     * Parses a Debian package version string to create a {@link PackageEvr} object.\n+     *\n+     * Debian package versioning policy format: [epoch:]upstream_version[-debian_revision]\n+     * Additional ':' and '-' characters are allowed in 'upstream_version'\n+     * https://www.debian.org/doc/debian-policy/ch-controlfields.html#version\n+     *\n+     * @param version the package version string\n+     * @return the package EVR\n+     */\n+    public static PackageEvr parseDebian(String version) {\n+\n+        // repo-sync replaces empty releases with 'X'. We copy the same behavior.\n+        String release = \"X\";\n+        String epoch = null;\n+\n+        int epochIndex = version.indexOf(':');\n+        if (epochIndex > 0) {\n+            // Strip away optional 'epoch'\n+            epoch = version.substring(0, epochIndex);\n+            version = version.substring(epochIndex + 1);\n+        }\n+\n+        int releaseIndex = version.lastIndexOf('-');\n+        if (releaseIndex > 0) {\n+            // Strip away optional 'release'\n+            release = version.substring(releaseIndex + 1);\n+            version = version.substring(0, releaseIndex);\n+        }\n+\n+        return new PackageEvr(epoch, version, release, \"deb\");\n+    }\n+\n+    /**\n+     * Parses a RPM package version string to create a {@link PackageEvr} object.\n+     *\n+     * RPM package version policy format: [epoch:]version[-release]\n+     *\n+     * @param version the package version string\n+     * @return the package EVR\n+     */\n+    public static PackageEvr parseRpm(String version) {\n+        String release = \"\";\n+        String epoch = null;\n+\n+        int epochIndex = version.indexOf(':');\n+        if (epochIndex > 0) {\n+            // Strip away optional 'epoch'\n+            epoch = version.substring(0, epochIndex);\n+            version = version.substring(epochIndex + 1);\n+        }\n+\n+        int releaseIndex = version.lastIndexOf('-');\n+        if (releaseIndex > 0) {\n+            // Strip away optional 'release'\n+            release = version.substring(releaseIndex + 1);\n+            version = version.substring(0, releaseIndex);\n+        }\n+\n+        return new PackageEvr(epoch, version, release, \"rpm\");\n+    }\n+\n+    /**\n+     * @return package type\n+     */\n+    public PackageType getPackageType() {\n+        if (type.equals(PackageType.DEB.getDbString())) {\n+            return PackageType.DEB;\n+        }\n+        else if (type.equals(PackageType.RPM.getDbString())) {\n+            return PackageType.RPM;\n+        }\n+        else {\n+            throw new RuntimeException(\"unreachable\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "933085fab8e348b5583cfef1d2ba155a0a0d7632"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTY5MDg0OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/test/PackageEvrComparableTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTowOTozN1rOH4zKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoyMTo0NFrOH6QO6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMyMDQ4NA==", "bodyText": "Is there a reason for modifying existing tests instead of just writing new? Don't we support comparing evr in format 0-0-0 anymore?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r529320484", "createdAt": "2020-11-24T09:09:37Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/test/PackageEvrComparableTest.java", "diffHunk": "@@ -24,42 +24,51 @@\n \n /**\n  * Test the compare() method in PackageEvr\n- * @version $Rev$\n  */\n public class PackageEvrComparableTest extends RhnBaseTestCase {\n \n     public void testEquality() {\n-        compare(0, \"0-0-0\", \"0-0-0\");\n-        compare(0, \"null-0-0\", \"0-0-0\");\n-        compare(0, \"null-0-0\", \"null-0-0\");\n+        compare(0, \"0:0-0\", \"0:0-0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "933085fab8e348b5583cfef1d2ba155a0a0d7632"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4NTU1OA==", "bodyText": "This format was only used for the tests here. It had a special parser only used here.\nI think it is much better if we use the official format and the official parser.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r530285558", "createdAt": "2020-11-25T10:59:49Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/test/PackageEvrComparableTest.java", "diffHunk": "@@ -24,42 +24,51 @@\n \n /**\n  * Test the compare() method in PackageEvr\n- * @version $Rev$\n  */\n public class PackageEvrComparableTest extends RhnBaseTestCase {\n \n     public void testEquality() {\n-        compare(0, \"0-0-0\", \"0-0-0\");\n-        compare(0, \"null-0-0\", \"0-0-0\");\n-        compare(0, \"null-0-0\", \"null-0-0\");\n+        compare(0, \"0:0-0\", \"0:0-0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMyMDQ4NA=="}, "originalCommit": {"oid": "933085fab8e348b5583cfef1d2ba155a0a0d7632"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0NTQxOA==", "bodyText": "ok!", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r530845418", "createdAt": "2020-11-26T08:21:44Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/test/PackageEvrComparableTest.java", "diffHunk": "@@ -24,42 +24,51 @@\n \n /**\n  * Test the compare() method in PackageEvr\n- * @version $Rev$\n  */\n public class PackageEvrComparableTest extends RhnBaseTestCase {\n \n     public void testEquality() {\n-        compare(0, \"0-0-0\", \"0-0-0\");\n-        compare(0, \"null-0-0\", \"0-0-0\");\n-        compare(0, \"null-0-0\", \"null-0-0\");\n+        compare(0, \"0:0-0\", \"0:0-0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMyMDQ4NA=="}, "originalCommit": {"oid": "933085fab8e348b5583cfef1d2ba155a0a0d7632"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTI1MDg4OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/common/tables/rhnPackageEVR.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODo0Nzo0MFrOH5otVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjozNDo1MVrOH8qneQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5Nzg0Nw==", "bodyText": "Nice approach! IIUC, the type column is:\n\nread only\ngenerated on every insert\nre-generated on every evr update,\n\nwhich should make the data in the table consistent.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r530197847", "createdAt": "2020-11-25T08:47:40Z", "author": {"login": "hustodemon"}, "path": "schema/spacewalk/common/tables/rhnPackageEVR.sql", "diffHunk": "@@ -21,7 +21,8 @@ CREATE TABLE rhnPackageEVR\n     epoch    VARCHAR(16),\n     version  VARCHAR(512) NOT NULL,\n     release  VARCHAR(512) NOT NULL,\n-    evr      EVR_T NOT NULL\n+    evr      EVR_T NOT NULL,\n+    type varchar(10) generated always as ((evr).type) stored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "933085fab8e348b5583cfef1d2ba155a0a0d7632"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM3NDg0MQ==", "bodyText": "yes in addition the whole table is insert only anyway. The idea was also to try not to use any extra space but it seems currently this is only available with the stored keyword which takes up space.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r533374841", "createdAt": "2020-12-01T12:34:51Z", "author": {"login": "lucidd"}, "path": "schema/spacewalk/common/tables/rhnPackageEVR.sql", "diffHunk": "@@ -21,7 +21,8 @@ CREATE TABLE rhnPackageEVR\n     epoch    VARCHAR(16),\n     version  VARCHAR(512) NOT NULL,\n     release  VARCHAR(512) NOT NULL,\n-    evr      EVR_T NOT NULL\n+    evr      EVR_T NOT NULL,\n+    type varchar(10) generated always as ((evr).type) stored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5Nzg0Nw=="}, "originalCommit": {"oid": "933085fab8e348b5583cfef1d2ba155a0a0d7632"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTU0MjQ5OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/utils/SaltUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1NToxMFrOH5rfOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1NToxMFrOH5rfOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0MzM4NA==", "bodyText": "Please either fix this right away or create a github issue.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r530243384", "createdAt": "2020-11-25T09:55:10Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/utils/SaltUtils.java", "diffHunk": "@@ -1593,7 +1594,10 @@ public static String packageToKey(String name, Pkg.Info info) {\n                 new PackageEvr(\n                         info.getEpoch().orElse(null),\n                         info.getVersion().get(),\n-                        info.getRelease().orElse(\"X\")\n+                        info.getRelease().orElse(\"X\"),\n+                        //TODO: this is not correct but does not effect toUniversalEvrString.\n+                        // we should still do this differently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "933085fab8e348b5583cfef1d2ba155a0a0d7632"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTU0NjI2OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/controllers/StatesAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1NjowMlrOH5rhnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1NjowMlrOH5rhnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0Mzk5OQ==", "bodyText": "Same as above.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r530243999", "createdAt": "2020-11-25T09:56:02Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/webui/controllers/StatesAPI.java", "diffHunk": "@@ -585,7 +588,8 @@ private Date getScheduleDate(ServerApplyHighstateJson json) {\n             new PackageStateJson(\n                     state.getName().getName(),\n                     Optional.ofNullable(state.getEvr())\n-                            .orElse(new PackageEvr(\"\", \"\", \"\")),\n+                            //TODO: this should probably be rather null instead of a dummy value\n+                            .orElse(new PackageEvr(\"\", \"\", \"\", PackageType.RPM)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "933085fab8e348b5583cfef1d2ba155a0a0d7632"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTU2MDk1OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/domain/server/Server.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1OToxNVrOH5rqbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1OToxNVrOH5rqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NjI1Mw==", "bodyText": "Please do it now or create a new issue. Piling up TODOs in the code is not good.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r530246253", "createdAt": "2020-11-25T09:59:15Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/server/Server.java", "diffHunk": "@@ -2192,4 +2193,9 @@ public String getChannelHost() {\n         return this.getFirstServerPath().map(p -> p.getHostname())\n                 .orElseGet(() -> ConfigDefaults.get().getCobblerHost());\n     }\n+\n+    public PackageType getPackageType() {\n+        //TODO: consider moving this to getOs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "933085fab8e348b5583cfef1d2ba155a0a0d7632"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzM5MTU5OnYy", "diffSide": "RIGHT", "path": "backend/satellite_tools/reposync.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTozMzozN1rOH_M-Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTozMzozN1rOH_M-Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNDg1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                               AND p.evr_id = LOOKUP_EVR(:epoch, :version, :release, (select at.label from rhnArchType at join rhnPackageArch pa ON pa.arch_type_id = at.id where pa.id = p.package_arch_id))\n          \n          \n            \n                               AND p.evr_id = LOOKUP_EVR(:epoch, :version, :release, (SELECT at.label FROM rhnArchType at JOIN rhnPackageArch pa ON pa.arch_type_id = at.id WHERE pa.id = p.package_arch_id))\n          \n      \n    \n    \n  \n\nNitpick: keep casing coherent with rest of query", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536034851", "createdAt": "2020-12-04T11:33:37Z", "author": {"login": "moio"}, "path": "backend/satellite_tools/reposync.py", "diffHunk": "@@ -2105,7 +2105,7 @@ def import_susedata(self, repo):\n                   JOIN rhnChecksumView c ON p.checksum_id = c.id\n                   JOIN rhnChannelPackage cp ON p.id = cp.package_id\n                  WHERE pn.name = :name\n-                   AND p.evr_id = LOOKUP_EVR(:epoch, :version, :release)\n+                   AND p.evr_id = LOOKUP_EVR(:epoch, :version, :release, (select at.label from rhnArchType at join rhnPackageArch pa ON pa.arch_type_id = at.id where pa.id = p.package_arch_id))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzM5ODYzOnYy", "diffSide": "LEFT", "path": "backend/satellite_tools/reposync.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTozNToyMlrOH_NCCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo0Nzo1M1rOIGVOcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNTg1MQ==", "bodyText": "Question: can repo.get_susedata() return any package on non-RPM repos? When does that happen?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536035851", "createdAt": "2020-12-04T11:35:22Z", "author": {"login": "moio"}, "path": "backend/satellite_tools/reposync.py", "diffHunk": "@@ -2105,7 +2105,7 @@ def import_susedata(self, repo):\n                   JOIN rhnChecksumView c ON p.checksum_id = c.id\n                   JOIN rhnChannelPackage cp ON p.id = cp.package_id\n                  WHERE pn.name = :name\n-                   AND p.evr_id = LOOKUP_EVR(:epoch, :version, :release)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM3MDk5Nw==", "bodyText": "No as \"susedata\" exists only for SUSE systems and all of them are RPM based.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537370997", "createdAt": "2020-12-07T09:53:50Z", "author": {"login": "mcalmer"}, "path": "backend/satellite_tools/reposync.py", "diffHunk": "@@ -2105,7 +2105,7 @@ def import_susedata(self, repo):\n                   JOIN rhnChecksumView c ON p.checksum_id = c.id\n                   JOIN rhnChannelPackage cp ON p.id = cp.package_id\n                  WHERE pn.name = :name\n-                   AND p.evr_id = LOOKUP_EVR(:epoch, :version, :release)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNTg1MQ=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4ODgxNA==", "bodyText": "No as \"susedata\" exists only for SUSE systems and all of them are RPM based.\n\nIn that case shouldn't we rather hardcode the RPM type in the line below?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543288814", "createdAt": "2020-12-15T12:08:54Z", "author": {"login": "moio"}, "path": "backend/satellite_tools/reposync.py", "diffHunk": "@@ -2105,7 +2105,7 @@ def import_susedata(self, repo):\n                   JOIN rhnChecksumView c ON p.checksum_id = c.id\n                   JOIN rhnChannelPackage cp ON p.id = cp.package_id\n                  WHERE pn.name = :name\n-                   AND p.evr_id = LOOKUP_EVR(:epoch, :version, :release)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNTg1MQ=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMDEyOA==", "bodyText": "changed", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543510128", "createdAt": "2020-12-15T16:47:53Z", "author": {"login": "mcalmer"}, "path": "backend/satellite_tools/reposync.py", "diffHunk": "@@ -2105,7 +2105,7 @@ def import_susedata(self, repo):\n                   JOIN rhnChecksumView c ON p.checksum_id = c.id\n                   JOIN rhnChannelPackage cp ON p.id = cp.package_id\n                  WHERE pn.name = :name\n-                   AND p.evr_id = LOOKUP_EVR(:epoch, :version, :release)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNTg1MQ=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzQyNTE1OnYy", "diffSide": "RIGHT", "path": "backend/satellite_tools/satsync.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTo0MjozN1rOH_NQ8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTozMDozOFrOIAsZSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzOTY2Nw==", "bodyText": "I wonder whether running a subquery for each chunk (with a result for each package) is the right approach here.\nBy the time we hit this _diff_packages_process, satsync.py should know if we are talking about an rpm or a deb repo here - woudn't it be better if we just passed it as a parameter along with :epoch, :version and :release at this point?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536039667", "createdAt": "2020-12-04T11:42:37Z", "author": {"login": "moio"}, "path": "backend/satellite_tools/satsync.py", "diffHunk": "@@ -920,7 +920,7 @@ def processShortPackages(self):\n                TO_CHAR(p.last_modified, 'YYYYMMDDHH24MISS') last_modified\n           from rhnPackage p, rhnChecksumView c\n          where p.name_id = lookup_package_name(:name)\n-           and p.evr_id = lookup_evr(:epoch, :version, :release)\n+           and p.evr_id = lookup_evr(:epoch, :version, :release, (select at.label from rhnArchType at join rhnPackageArch pa ON pa.arch_type_id = at.id where pa.id = p.package_arch_id))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5ODI4Mw==", "bodyText": "changed", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537598283", "createdAt": "2020-12-07T15:30:38Z", "author": {"login": "mcalmer"}, "path": "backend/satellite_tools/satsync.py", "diffHunk": "@@ -920,7 +920,7 @@ def processShortPackages(self):\n                TO_CHAR(p.last_modified, 'YYYYMMDDHH24MISS') last_modified\n           from rhnPackage p, rhnChecksumView c\n          where p.name_id = lookup_package_name(:name)\n-           and p.evr_id = lookup_evr(:epoch, :version, :release)\n+           and p.evr_id = lookup_evr(:epoch, :version, :release, (select at.label from rhnArchType at join rhnPackageArch pa ON pa.arch_type_id = at.id where pa.id = p.package_arch_id))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzOTY2Nw=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzQ0ODY2OnYy", "diffSide": "RIGHT", "path": "backend/satellite_exporter/handlers/non_auth_dumper.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTo0OTowMFrOH_NeWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTozMTo0MVrOIAsckg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0MzA5Nw==", "bodyText": "I wonder whether running a subquery for each package is the right approach here.\nInput to this query comes from rhnLib.parseRPMFilename, which actually is a very bad function name as it can parse both RPM and DEB file names.\nI think it would be better to have that function return the package type as well, and to pipe it into the query along with :epoch, :version and :release.\nWe should also probably take the occasion and rename it to parsePackageFilename or similar.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536043097", "createdAt": "2020-12-04T11:49:00Z", "author": {"login": "moio"}, "path": "backend/satellite_exporter/handlers/non_auth_dumper.py", "diffHunk": "@@ -537,7 +537,7 @@ def _send_package_stream(self, package, channel, checksum):\n                and cp.channel_id = c.id\n                and cp.package_id = p.id\n                and p.name_id = LOOKUP_PACKAGE_NAME(:name)\n-               and p.evr_id = LOOKUP_EVR(:epoch, :version, :release)\n+               and p.evr_id = LOOKUP_EVR(:epoch, :version, :release, (select at.label from rhnArchType at where at.id = pa.arch_type_id))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5OTEyMg==", "bodyText": "changed to provide type as parameter. I did not rename the function as ISS is not really working with debian packages anyway.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537599122", "createdAt": "2020-12-07T15:31:41Z", "author": {"login": "mcalmer"}, "path": "backend/satellite_exporter/handlers/non_auth_dumper.py", "diffHunk": "@@ -537,7 +537,7 @@ def _send_package_stream(self, package, channel, checksum):\n                and cp.channel_id = c.id\n                and cp.package_id = p.id\n                and p.name_id = LOOKUP_PACKAGE_NAME(:name)\n-               and p.evr_id = LOOKUP_EVR(:epoch, :version, :release)\n+               and p.evr_id = LOOKUP_EVR(:epoch, :version, :release, (select at.label from rhnArchType at where at.id = pa.arch_type_id))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0MzA5Nw=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mzk3MTg5OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/postgres/procs/lookup_transaction_package.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDowMDowMVrOH_SHFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTozMjowNFrOIAsduA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExOTA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SELECT t.label into type from rhnpackagearch pa join rhnarchtype t\n          \n          \n            \n                    select t.label into type from rhnpackagearch pa join rhnarchtype t\n          \n      \n    \n    \n  \n\nNitpick: stay coherent with surroundings", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536119060", "createdAt": "2020-12-04T14:00:01Z", "author": {"login": "moio"}, "path": "schema/spacewalk/postgres/procs/lookup_transaction_package.sql", "diffHunk": "@@ -40,13 +41,19 @@ begin\n     end if;\n \n     n_id := lookup_package_name(n_in);\n-    e_id := lookup_evr(e_in, v_in, r_in);\n     p_arch_id := null;\n \n     if a_in is not null then\n         p_arch_id := lookup_package_arch(a_in);\n+        SELECT t.label into type from rhnpackagearch pa join rhnarchtype t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5OTQxNg==", "bodyText": "changed", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537599416", "createdAt": "2020-12-07T15:32:04Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/postgres/procs/lookup_transaction_package.sql", "diffHunk": "@@ -40,13 +41,19 @@ begin\n     end if;\n \n     n_id := lookup_package_name(n_in);\n-    e_id := lookup_evr(e_in, v_in, r_in);\n     p_arch_id := null;\n \n     if a_in is not null then\n         p_arch_id := lookup_package_arch(a_in);\n+        SELECT t.label into type from rhnpackagearch pa join rhnarchtype t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExOTA2MA=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDAwMjU5OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/PackageType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDowNzoxMVrOH_SZbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDozMToxNVrOIDCWwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyMzc1OA==", "bodyText": "Noob question: is there any particular reason to prefer an ad-hoc method name to toString here?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536123758", "createdAt": "2020-12-04T14:07:11Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/PackageType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.domain.rhnpackage;\n+\n+public enum PackageType {\n+    RPM(\"rpm\"),\n+    DEB(\"deb\");\n+\n+    private final String dbString;\n+\n+    PackageType(String dbStringIn) {\n+        dbString = dbStringIn;\n+    }\n+\n+    public String getDbString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA1NTIzMg==", "bodyText": "Its a left over from when i made the db representation only 1 character to safe space. I dropped the idea later in favor of maybe going the posrgres enum route at a later point. In short the difference between normal toString and the dbString is that the former should be human readable for showing logs/debugging while the latter can be a more obscure encoding for efficiency reasons. In the current implementation they are very similar so its not obvious.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r540055232", "createdAt": "2020-12-10T10:31:15Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/PackageType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.domain.rhnpackage;\n+\n+public enum PackageType {\n+    RPM(\"rpm\"),\n+    DEB(\"deb\");\n+\n+    private final String dbString;\n+\n+    PackageType(String dbStringIn) {\n+        dbString = dbStringIn;\n+    }\n+\n+    public String getDbString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyMzc1OA=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDExODk1OnYy", "diffSide": "RIGHT", "path": "backend/server/importlib/errataImport.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDozMjo0NVrOH_TdOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyMjo0MlrOIGIPHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0MTExMg==", "bodyText": "It'd be nice to have a test over ISS, ideally with a deb channel. Do we have a plan to at least try it out manually?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536141112", "createdAt": "2020-12-04T14:32:45Z", "author": {"login": "moio"}, "path": "backend/server/importlib/errataImport.py", "diffHunk": "@@ -117,13 +119,16 @@ def fix(self):\n                 if eft not in self.file_types:\n                     raise Exception(\"Unknown file type %s\" % eft)\n                 ef['type'] = self.file_types[eft]\n+        for label, aid in self.package_arches.items():\n+            self.package_type = self.backend.lookupPackageArchType(aid)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0NzU0OQ==", "bodyText": "ISS and debian is not working. This is known. So we cannot test it.\nA normal ISS test was planned, but I have touble with my test hardware.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537547549", "createdAt": "2020-12-07T14:26:35Z", "author": {"login": "mcalmer"}, "path": "backend/server/importlib/errataImport.py", "diffHunk": "@@ -117,13 +119,16 @@ def fix(self):\n                 if eft not in self.file_types:\n                     raise Exception(\"Unknown file type %s\" % eft)\n                 ef['type'] = self.file_types[eft]\n+        for label, aid in self.package_arches.items():\n+            self.package_type = self.backend.lookupPackageArchType(aid)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0MTExMg=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5NzMxMQ==", "bodyText": "Update: test passed. Resolving conversation", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543297311", "createdAt": "2020-12-15T12:22:42Z", "author": {"login": "moio"}, "path": "backend/server/importlib/errataImport.py", "diffHunk": "@@ -117,13 +119,16 @@ def fix(self):\n                 if eft not in self.file_types:\n                     raise Exception(\"Unknown file type %s\" % eft)\n                 ef['type'] = self.file_types[eft]\n+        for label, aid in self.package_arches.items():\n+            self.package_type = self.backend.lookupPackageArchType(aid)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0MTExMg=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDI4MzExOnYy", "diffSide": "RIGHT", "path": "backend/spacewalk-backend.changes", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTowODo0OVrOH_U_pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTowODo0OVrOH_U_pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NjMxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Feat: Debian package comparator\n          \n          \n            \n            - Fix Debian package version comparison\n          \n      \n    \n    \n  \n\nI feel a text like the above reflects the change better from a user's perspective. Maybe we should even have a bug number? Surely it can't be presented as a feature, as the PR description says,  \"this is targeting the internal version comparator. Transparent for the final user\"", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536166310", "createdAt": "2020-12-04T15:08:49Z", "author": {"login": "moio"}, "path": "backend/spacewalk-backend.changes", "diffHunk": "@@ -1,3 +1,4 @@\n+- Feat: Debian package comparator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDI4Njk3OnYy", "diffSide": "RIGHT", "path": "java/spacewalk-java.changes", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTowOTozOFrOH_VCDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTozMjoyNFrOIAsezQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NjkyNQ==", "bodyText": "See comment in backend/spacewalk-backend.changes", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536166925", "createdAt": "2020-12-04T15:09:38Z", "author": {"login": "moio"}, "path": "java/spacewalk-java.changes", "diffHunk": "@@ -1,3 +1,4 @@\n+- Feat: Debian package comparator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5OTY5Mw==", "bodyText": "changed", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537599693", "createdAt": "2020-12-07T15:32:24Z", "author": {"login": "mcalmer"}, "path": "java/spacewalk-java.changes", "diffHunk": "@@ -1,3 +1,4 @@\n+- Feat: Debian package comparator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NjkyNQ=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDI4NzQ4OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/susemanager-schema.changes", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTowOTo0N1rOH_VCaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTozMjozMVrOIAsfTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NzAxNw==", "bodyText": "See comment in backend/spacewalk-backend.changes", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536167017", "createdAt": "2020-12-04T15:09:47Z", "author": {"login": "moio"}, "path": "schema/spacewalk/susemanager-schema.changes", "diffHunk": "@@ -1,3 +1,4 @@\n+- Feat: Debian package comparator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5OTgyMQ==", "bodyText": "changed", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537599821", "createdAt": "2020-12-07T15:32:31Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/susemanager-schema.changes", "diffHunk": "@@ -1,3 +1,4 @@\n+- Feat: Debian package comparator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NzAxNw=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDMwODI5OnYy", "diffSide": "RIGHT", "path": "schema/util/debian-versioncmp-database-testgenerator.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToxNDowOVrOH_VOjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoyNjoxOFrOIGXCyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3MDEyNA==", "bodyText": "Can we have this (very useful IMO!) script running as part of our Python unit testsuite?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536170124", "createdAt": "2020-12-04T15:14:09Z", "author": {"login": "moio"}, "path": "schema/util/debian-versioncmp-database-testgenerator.py", "diffHunk": "@@ -0,0 +1,74 @@\n+#!/usr/bin/python3\n+\n+OUTPUT_SQL_SCRIPT_FILENAME = 'debian_version_database_comparator_tests.sql'\n+\n+preamble = \"\"\"\n+-- launch me with spacewalk-sql -i < {}\n+DO\n+$$\n+declare\n+\tresult NUMERIC := 0;\n+begin\n+\n+\"\"\".format(OUTPUT_SQL_SCRIPT_FILENAME)\n+\n+conclusion = \"\"\"\n+end;\n+$$\n+\"\"\"\n+\n+# source: https://git.dpkg.org/cgit/dpkg/dpkg.git/tree/scripts/t/Dpkg_Version.t\n+tests = \"\"\"1.0-1 2.0-2 -1\n+2.2~rc-4 2.2-1 -1\n+2.2-1 2.2~rc-4 1\n+1.0000-1 1.0-1 0\n+0foo 0foo 0\n+0foo-0 0foo 0\n+0foo 0foo-0 0\n+0foo 0fo 1\n+0foo-0 0foo+ -1\n+0foo~1 0foo -1\n+0foo~foo+Bar 0foo~foo+bar -1\n+0foo~~ 0foo~ -1\n+1~ 1 -1\n+12345+that-really-is-some-ver-0 12345+that-really-is-some-ver-10 -1\n+0foo-0 0foo-01 -1\n+0foo.bar 0foobar 1\n+0foo.bar 0foo1bar 1\n+0foo.bar 0foo0bar 1\n+0foo1bar-1 0foobar-1 -1\n+0foo2.0 0foo2 1\n+0foo2.0.0 0foo2.10.0 -1\n+0foo2.0 0foo2.0.0 -1\n+0foo2.0 0foo2.10 -1\n+0foo2.1 0foo2.10 -1\n+1.09 1.9 0\n+1.0.8+nmu1 1.0.8 1\n+3.11 3.10+nmu1 1\n+0.9j-20080306-4 0.9i-20070324-2 1\n+1.2.0~b7-1 1.2.0~b6-1 1\n+1.011-1 1.06-2 1\n+0.0.9+dfsg1-1 0.0.8+dfsg1-3 1\n+4.6.99+svn6582-1 4.6.99+svn6496-1 1\n+53 52 1\n+0.9.9~pre122-1 0.9.9~pre111-1 1\n+1.0.1+gpl-1 1.0.1-2 1\n+1a 1000a -1\"\"\"\n+\n+with open(OUTPUT_SQL_SCRIPT_FILENAME, 'w') as f:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyOTc1Ng==", "bodyText": "I think it would be a good idea: let's drag @juliogonzalez in the conversation.\nJulio, we want to create a Jenkins job that executes this script and checks for failures. Should we create a card?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r539529756", "createdAt": "2020-12-09T18:05:10Z", "author": {"login": "mbologna"}, "path": "schema/util/debian-versioncmp-database-testgenerator.py", "diffHunk": "@@ -0,0 +1,74 @@\n+#!/usr/bin/python3\n+\n+OUTPUT_SQL_SCRIPT_FILENAME = 'debian_version_database_comparator_tests.sql'\n+\n+preamble = \"\"\"\n+-- launch me with spacewalk-sql -i < {}\n+DO\n+$$\n+declare\n+\tresult NUMERIC := 0;\n+begin\n+\n+\"\"\".format(OUTPUT_SQL_SCRIPT_FILENAME)\n+\n+conclusion = \"\"\"\n+end;\n+$$\n+\"\"\"\n+\n+# source: https://git.dpkg.org/cgit/dpkg/dpkg.git/tree/scripts/t/Dpkg_Version.t\n+tests = \"\"\"1.0-1 2.0-2 -1\n+2.2~rc-4 2.2-1 -1\n+2.2-1 2.2~rc-4 1\n+1.0000-1 1.0-1 0\n+0foo 0foo 0\n+0foo-0 0foo 0\n+0foo 0foo-0 0\n+0foo 0fo 1\n+0foo-0 0foo+ -1\n+0foo~1 0foo -1\n+0foo~foo+Bar 0foo~foo+bar -1\n+0foo~~ 0foo~ -1\n+1~ 1 -1\n+12345+that-really-is-some-ver-0 12345+that-really-is-some-ver-10 -1\n+0foo-0 0foo-01 -1\n+0foo.bar 0foobar 1\n+0foo.bar 0foo1bar 1\n+0foo.bar 0foo0bar 1\n+0foo1bar-1 0foobar-1 -1\n+0foo2.0 0foo2 1\n+0foo2.0.0 0foo2.10.0 -1\n+0foo2.0 0foo2.0.0 -1\n+0foo2.0 0foo2.10 -1\n+0foo2.1 0foo2.10 -1\n+1.09 1.9 0\n+1.0.8+nmu1 1.0.8 1\n+3.11 3.10+nmu1 1\n+0.9j-20080306-4 0.9i-20070324-2 1\n+1.2.0~b7-1 1.2.0~b6-1 1\n+1.011-1 1.06-2 1\n+0.0.9+dfsg1-1 0.0.8+dfsg1-3 1\n+4.6.99+svn6582-1 4.6.99+svn6496-1 1\n+53 52 1\n+0.9.9~pre122-1 0.9.9~pre111-1 1\n+1.0.1+gpl-1 1.0.1-2 1\n+1a 1000a -1\"\"\"\n+\n+with open(OUTPUT_SQL_SCRIPT_FILENAME, 'w') as f:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3MDEyNA=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5ODgyNA==", "bodyText": "I was suggesting to just add this to the current Python tests, without a new job.\nCan it be done in the context of this PR?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543298824", "createdAt": "2020-12-15T12:25:15Z", "author": {"login": "moio"}, "path": "schema/util/debian-versioncmp-database-testgenerator.py", "diffHunk": "@@ -0,0 +1,74 @@\n+#!/usr/bin/python3\n+\n+OUTPUT_SQL_SCRIPT_FILENAME = 'debian_version_database_comparator_tests.sql'\n+\n+preamble = \"\"\"\n+-- launch me with spacewalk-sql -i < {}\n+DO\n+$$\n+declare\n+\tresult NUMERIC := 0;\n+begin\n+\n+\"\"\".format(OUTPUT_SQL_SCRIPT_FILENAME)\n+\n+conclusion = \"\"\"\n+end;\n+$$\n+\"\"\"\n+\n+# source: https://git.dpkg.org/cgit/dpkg/dpkg.git/tree/scripts/t/Dpkg_Version.t\n+tests = \"\"\"1.0-1 2.0-2 -1\n+2.2~rc-4 2.2-1 -1\n+2.2-1 2.2~rc-4 1\n+1.0000-1 1.0-1 0\n+0foo 0foo 0\n+0foo-0 0foo 0\n+0foo 0foo-0 0\n+0foo 0fo 1\n+0foo-0 0foo+ -1\n+0foo~1 0foo -1\n+0foo~foo+Bar 0foo~foo+bar -1\n+0foo~~ 0foo~ -1\n+1~ 1 -1\n+12345+that-really-is-some-ver-0 12345+that-really-is-some-ver-10 -1\n+0foo-0 0foo-01 -1\n+0foo.bar 0foobar 1\n+0foo.bar 0foo1bar 1\n+0foo.bar 0foo0bar 1\n+0foo1bar-1 0foobar-1 -1\n+0foo2.0 0foo2 1\n+0foo2.0.0 0foo2.10.0 -1\n+0foo2.0 0foo2.0.0 -1\n+0foo2.0 0foo2.10 -1\n+0foo2.1 0foo2.10 -1\n+1.09 1.9 0\n+1.0.8+nmu1 1.0.8 1\n+3.11 3.10+nmu1 1\n+0.9j-20080306-4 0.9i-20070324-2 1\n+1.2.0~b7-1 1.2.0~b6-1 1\n+1.011-1 1.06-2 1\n+0.0.9+dfsg1-1 0.0.8+dfsg1-3 1\n+4.6.99+svn6582-1 4.6.99+svn6496-1 1\n+53 52 1\n+0.9.9~pre122-1 0.9.9~pre111-1 1\n+1.0.1+gpl-1 1.0.1-2 1\n+1a 1000a -1\"\"\"\n+\n+with open(OUTPUT_SQL_SCRIPT_FILENAME, 'w') as f:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3MDEyNA=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzOTkxNA==", "bodyText": "This file has been removed because the test has been moved to JUnit (see below)", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543539914", "createdAt": "2020-12-15T17:26:18Z", "author": {"login": "mbologna"}, "path": "schema/util/debian-versioncmp-database-testgenerator.py", "diffHunk": "@@ -0,0 +1,74 @@\n+#!/usr/bin/python3\n+\n+OUTPUT_SQL_SCRIPT_FILENAME = 'debian_version_database_comparator_tests.sql'\n+\n+preamble = \"\"\"\n+-- launch me with spacewalk-sql -i < {}\n+DO\n+$$\n+declare\n+\tresult NUMERIC := 0;\n+begin\n+\n+\"\"\".format(OUTPUT_SQL_SCRIPT_FILENAME)\n+\n+conclusion = \"\"\"\n+end;\n+$$\n+\"\"\"\n+\n+# source: https://git.dpkg.org/cgit/dpkg/dpkg.git/tree/scripts/t/Dpkg_Version.t\n+tests = \"\"\"1.0-1 2.0-2 -1\n+2.2~rc-4 2.2-1 -1\n+2.2-1 2.2~rc-4 1\n+1.0000-1 1.0-1 0\n+0foo 0foo 0\n+0foo-0 0foo 0\n+0foo 0foo-0 0\n+0foo 0fo 1\n+0foo-0 0foo+ -1\n+0foo~1 0foo -1\n+0foo~foo+Bar 0foo~foo+bar -1\n+0foo~~ 0foo~ -1\n+1~ 1 -1\n+12345+that-really-is-some-ver-0 12345+that-really-is-some-ver-10 -1\n+0foo-0 0foo-01 -1\n+0foo.bar 0foobar 1\n+0foo.bar 0foo1bar 1\n+0foo.bar 0foo0bar 1\n+0foo1bar-1 0foobar-1 -1\n+0foo2.0 0foo2 1\n+0foo2.0.0 0foo2.10.0 -1\n+0foo2.0 0foo2.0.0 -1\n+0foo2.0 0foo2.10 -1\n+0foo2.1 0foo2.10 -1\n+1.09 1.9 0\n+1.0.8+nmu1 1.0.8 1\n+3.11 3.10+nmu1 1\n+0.9j-20080306-4 0.9i-20070324-2 1\n+1.2.0~b7-1 1.2.0~b6-1 1\n+1.011-1 1.06-2 1\n+0.0.9+dfsg1-1 0.0.8+dfsg1-3 1\n+4.6.99+svn6582-1 4.6.99+svn6496-1 1\n+53 52 1\n+0.9.9~pre122-1 0.9.9~pre111-1 1\n+1.0.1+gpl-1 1.0.1-2 1\n+1a 1000a -1\"\"\"\n+\n+with open(OUTPUT_SQL_SCRIPT_FILENAME, 'w') as f:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3MDEyNA=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDM3NDU5OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/postgres/tables/rhnPackageEVR_index.sql", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToyNzo0M1rOH_V1cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzowNDo0MlrOIHEUng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4MDA4Mw==", "bodyText": "Hmmm, I'm unsure about this one.\nAre you sure no queries remain that look for rows in this table by version+release only, or by version+release+epoch only?\nIf the answer is yes, then we might consider adding an index instead of changing existing indexes.\nOr we could use partial indexes.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536180083", "createdAt": "2020-12-04T15:27:43Z", "author": {"login": "moio"}, "path": "schema/spacewalk/postgres/tables/rhnPackageEVR_index.sql", "diffHunk": "@@ -14,9 +14,9 @@\n --\n \n create unique index rhn_pe_v_r_e_uq\n-    on rhnpackageevr (version, release, epoch)\n+    on rhnpackageevr (version, release, epoch, ((evr).type))\n  where epoch is not null;\n \n create unique index rhn_pe_v_r_uq\n-    on rhnpackageevr (version, release)\n+    on rhnpackageevr (version, release, ((evr).type))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5MTE2OA==", "bodyText": "Well, we talk about an unique index here. The index is only unique with the type.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537591168", "createdAt": "2020-12-07T15:21:43Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/postgres/tables/rhnPackageEVR_index.sql", "diffHunk": "@@ -14,9 +14,9 @@\n --\n \n create unique index rhn_pe_v_r_e_uq\n-    on rhnpackageevr (version, release, epoch)\n+    on rhnpackageevr (version, release, epoch, ((evr).type))\n  where epoch is not null;\n \n create unique index rhn_pe_v_r_uq\n-    on rhnpackageevr (version, release)\n+    on rhnpackageevr (version, release, ((evr).type))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4MDA4Mw=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwMTA1NQ==", "bodyText": "Well, we talk about an unique index here. The index is only unique with the type.\n\nI am OK from the constraint perspective.\nStill the question remains: do we have any remaining query that addresses V+R or E+V+R without any type? How many of them are left, if any? In which contexts?\nReason is that this index will not help these queries any longer, so if any remain, they might see slowdowns.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543301055", "createdAt": "2020-12-15T12:29:03Z", "author": {"login": "moio"}, "path": "schema/spacewalk/postgres/tables/rhnPackageEVR_index.sql", "diffHunk": "@@ -14,9 +14,9 @@\n --\n \n create unique index rhn_pe_v_r_e_uq\n-    on rhnpackageevr (version, release, epoch)\n+    on rhnpackageevr (version, release, epoch, ((evr).type))\n  where epoch is not null;\n \n create unique index rhn_pe_v_r_uq\n-    on rhnpackageevr (version, release)\n+    on rhnpackageevr (version, release, ((evr).type))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4MDA4Mw=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNjM1Ng==", "bodyText": "I think we have no queries which just ask for only version and/or release.\nAll are going to the full EVR type which has now also type.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543516356", "createdAt": "2020-12-15T16:55:35Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/postgres/tables/rhnPackageEVR_index.sql", "diffHunk": "@@ -14,9 +14,9 @@\n --\n \n create unique index rhn_pe_v_r_e_uq\n-    on rhnpackageevr (version, release, epoch)\n+    on rhnpackageevr (version, release, epoch, ((evr).type))\n  where epoch is not null;\n \n create unique index rhn_pe_v_r_uq\n-    on rhnpackageevr (version, release)\n+    on rhnpackageevr (version, release, ((evr).type))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4MDA4Mw=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI4MTc1OA==", "bodyText": "Then we should be fine", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r544281758", "createdAt": "2020-12-16T13:04:42Z", "author": {"login": "moio"}, "path": "schema/spacewalk/postgres/tables/rhnPackageEVR_index.sql", "diffHunk": "@@ -14,9 +14,9 @@\n --\n \n create unique index rhn_pe_v_r_e_uq\n-    on rhnpackageevr (version, release, epoch)\n+    on rhnpackageevr (version, release, epoch, ((evr).type))\n  where epoch is not null;\n \n create unique index rhn_pe_v_r_uq\n-    on rhnpackageevr (version, release)\n+    on rhnpackageevr (version, release, ((evr).type))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4MDA4Mw=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQwMjA0OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/postgres/procs/lookup_evr.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTozMzo0MlrOH_WFzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToyMzozOVrOIAsDQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4NDI2OQ==", "bodyText": "I am probably missing something, what does (evr). mean here?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536184269", "createdAt": "2020-12-04T15:33:42Z", "author": {"login": "moio"}, "path": "schema/spacewalk/postgres/procs/lookup_evr.sql", "diffHunk": "@@ -25,13 +25,14 @@ begin\n       from rhnPackageEVR\n      where ((epoch is null and e_in is null) or (epoch = e_in)) and\n            version = v_in and\n-           release = r_in;\n+           release = r_in and\n+           (evr).type = t_in;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5MjY0MA==", "bodyText": "\"evr\" is the column of type evt_t . In the first iterations we added type only in this type and not as extra column.\nLater we found out that hibernate is not working with the type only. So we had to add a column there as well.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537592640", "createdAt": "2020-12-07T15:23:39Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/postgres/procs/lookup_evr.sql", "diffHunk": "@@ -25,13 +25,14 @@ begin\n       from rhnPackageEVR\n      where ((epoch is null and e_in is null) or (epoch = e_in)) and\n            version = v_in and\n-           release = r_in;\n+           release = r_in and\n+           (evr).type = t_in;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4NDI2OQ=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQwNTMwOnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/postgres/procs/insert_evr.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTozNDoyNVrOH_WHtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToyNDowM1rOIAsEhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4NDc1OA==", "bodyText": "I am probably missing something, what does (evr). mean here?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536184758", "createdAt": "2020-12-04T15:34:25Z", "author": {"login": "moio"}, "path": "schema/spacewalk/postgres/procs/insert_evr.sql", "diffHunk": "@@ -10,14 +10,14 @@ begin\n     evr_id := nextval('rhn_pkg_evr_seq');\n \n     insert into rhnPackageEVR(id, epoch, version, release, evr)\n-        values (evr_id, e_in, v_in, r_in, evr_t(e_in, v_in, r_in))\n+        values (evr_id, e_in, v_in, r_in, evr_t(e_in, v_in, r_in, t_in))\n         on conflict do nothing;\n \n     select id\n         into strict evr_id\n         from rhnPackageEVR\n         where ((epoch is null and e_in is null) or (epoch = e_in)) and\n-           version = v_in and release = r_in;\n+           version = v_in and release = r_in and (evr).type = t_in;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5Mjk2Nw==", "bodyText": "it is just another column", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537592967", "createdAt": "2020-12-07T15:24:03Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/postgres/procs/insert_evr.sql", "diffHunk": "@@ -10,14 +10,14 @@ begin\n     evr_id := nextval('rhn_pkg_evr_seq');\n \n     insert into rhnPackageEVR(id, epoch, version, release, evr)\n-        values (evr_id, e_in, v_in, r_in, evr_t(e_in, v_in, r_in))\n+        values (evr_id, e_in, v_in, r_in, evr_t(e_in, v_in, r_in, t_in))\n         on conflict do nothing;\n \n     select id\n         into strict evr_id\n         from rhnPackageEVR\n         where ((epoch is null and e_in is null) or (epoch = e_in)) and\n-           version = v_in and release = r_in;\n+           version = v_in and release = r_in and (evr).type = t_in;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4NDc1OA=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQ2MTk2OnYy", "diffSide": "LEFT", "path": "schema/spacewalk/postgres/packages/rpm.pkb", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo0Njo1MFrOH_WpRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozNTozN1rOIGItJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5MzM1MA==", "bodyText": "More code below refers to the ~ character which to my understanding is Debian only.\nhttps://fedoraproject.org/wiki/Archive:Tools/RPM/VersionComparison\nhttps://www.debian.org/doc/debian-policy/ch-controlfields.html#version\nI guess those should be fixed as well?\nI also see references to the caret symbol ^ and I cannot find docs about it anywhere. Please double check.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536193350", "createdAt": "2020-12-04T15:46:50Z", "author": {"login": "moio"}, "path": "schema/spacewalk/postgres/packages/rpm.pkb", "diffHunk": "@@ -69,38 +65,6 @@ $$ language 'plpgsql';\n         then\n             return 0;\n         end if;\n-        if POSITION('+' in str1) <> 0 AND POSITION('+' in str2) <> 0 AND POSITION('~' in str1) = 0 AND POSITION('~' in str2) = 0 AND POSITION('.module' in str1) = 0 AND POSITION('.module' in str2) = 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5MzgwNg==", "bodyText": "I think not. ~ and ^ are also used in rpm. In fact RPM stole them from debian.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537593806", "createdAt": "2020-12-07T15:25:13Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/postgres/packages/rpm.pkb", "diffHunk": "@@ -69,38 +65,6 @@ $$ language 'plpgsql';\n         then\n             return 0;\n         end if;\n-        if POSITION('+' in str1) <> 0 AND POSITION('+' in str2) <> 0 AND POSITION('~' in str1) = 0 AND POSITION('~' in str2) = 0 AND POSITION('.module' in str1) = 0 AND POSITION('.module' in str2) = 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5MzM1MA=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MDc3NQ==", "bodyText": "'~' is allowed in package version for rpm:\nsusemanager=# select distinct(ch.name) from rhnpackage p inner join rhnpackageevr evr on p.evr_id = evr.id inner join rhnpackagename name on p.name_id = name.id inner join rhnchannelpackage c on p.id = c.package_id inner join rhnchannel ch on c.channel_id = ch.id where evr.version like '%~%' and ch.name like 'SLE%Server%';\n                            name                             \n-------------------------------------------------------------\n SLE-Module-Server-Applications15-SP1-Pool for x86_64\n SLE-Module-Server-Applications15-SP1-Pool for x86_64 SAP\n SLE-Module-Server-Applications15-SP1-Updates for x86_64\n SLE-Module-Server-Applications15-SP1-Updates for x86_64 SAP\n SLE-Module-Server-Applications15-SP2-Pool for x86_64\n SLE-Module-Server-Applications15-SP2-Updates for x86_64\n SLE-Module-Server-Applications15-Updates for x86_64\n(7 rows)", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r539540775", "createdAt": "2020-12-09T18:21:52Z", "author": {"login": "mbologna"}, "path": "schema/spacewalk/postgres/packages/rpm.pkb", "diffHunk": "@@ -69,38 +65,6 @@ $$ language 'plpgsql';\n         then\n             return 0;\n         end if;\n-        if POSITION('+' in str1) <> 0 AND POSITION('+' in str2) <> 0 AND POSITION('~' in str1) = 0 AND POSITION('~' in str2) = 0 AND POSITION('.module' in str1) = 0 AND POSITION('.module' in str2) = 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5MzM1MA=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2NzcyMg==", "bodyText": "Both ~ and ^ are valid in rpm versions and have special meaning for sorting. I know at least ~ is used but ^ was new to me and since my version parser checks for valid chars and i have not encountered any error on suse repos so far i guess that means its not widely used.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r540167722", "createdAt": "2020-12-10T13:28:11Z", "author": {"login": "lucidd"}, "path": "schema/spacewalk/postgres/packages/rpm.pkb", "diffHunk": "@@ -69,38 +65,6 @@ $$ language 'plpgsql';\n         then\n             return 0;\n         end if;\n-        if POSITION('+' in str1) <> 0 AND POSITION('+' in str2) <> 0 AND POSITION('~' in str1) = 0 AND POSITION('~' in str2) = 0 AND POSITION('.module' in str1) = 0 AND POSITION('.module' in str2) = 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5MzM1MA=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNDk5OQ==", "bodyText": "OK, I learnt something new again.\n@lucidd you might be aware of this data set: it contains a huge amount of versions in the correct order. It can be used to check a version comparison algorithm for correctness. HTH", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543304999", "createdAt": "2020-12-15T12:35:37Z", "author": {"login": "moio"}, "path": "schema/spacewalk/postgres/packages/rpm.pkb", "diffHunk": "@@ -69,38 +65,6 @@ $$ language 'plpgsql';\n         then\n             return 0;\n         end if;\n-        if POSITION('+' in str1) <> 0 AND POSITION('+' in str2) <> 0 AND POSITION('~' in str1) = 0 AND POSITION('~' in str2) = 0 AND POSITION('.module' in str1) = 0 AND POSITION('.module' in str2) = 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5MzM1MA=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQ3MDM2OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/postgres/packages/deb.pkb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo0ODo0MlrOH_WuZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyOTo0N1rOICjS4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NDY2MA==", "bodyText": "It would be nice to add comments pointing to URLs defining the standard and/or existing implementations of the algorithm to check against.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536194660", "createdAt": "2020-12-04T15:48:42Z", "author": {"login": "moio"}, "path": "schema/spacewalk/postgres/packages/deb.pkb", "diffHunk": "@@ -0,0 +1,185 @@\n+-- oracle equivalent source sha1 539cb03eb177b7e87992701071488bbb32bb0624\n+create schema deb;\n+\n+--update pg_setting\n+update pg_settings set setting = 'deb,' || setting where name = 'search_path';\n+\n+CREATE OR REPLACE FUNCTION lastIndexOf(needle text, haystack text)\n+RETURNS integer AS $$\n+    DECLARE\n+        rc INTEGER;\n+    BEGIN\n+     rc := length(haystack) - position(needle in reverse(haystack));\n+     if rc = length(haystack) then rc = -1; end if;\n+     return rc;\n+    END;\n+$$ language 'plpgsql';\n+\n+create or replace function isdigit(ch CHAR)\n+    RETURNS BOOLEAN as $$\n+    BEGIN\n+        if ascii(ch) between ascii('0') and ascii('9')\n+        then\n+            return TRUE;\n+        end if;\n+        return FALSE;\n+    END ;\n+$$ language 'plpgsql';\n+\n+\n+create or replace FUNCTION isalpha(ch CHAR)\n+    RETURNS BOOLEAN as $$\n+    BEGIN\n+        if ascii(ch) between ascii('a') and ascii('z') or\n+            ascii(ch) between ascii('A') and ascii('Z')\n+        then\n+            return TRUE;\n+        end if;\n+        return FALSE;\n+    END;\n+$$ language 'plpgsql';\n+\n+create or replace FUNCTION charAt(str IN VARCHAR, pos IN INTEGER)\n+    RETURNS CHARACTER as $$\n+    BEGIN\n+        return SUBSTR(str, pos + 1, 1);\n+    END;\n+$$ language 'plpgsql';\n+\n+create or replace function deborder(c INTEGER)\n+    RETURNS INTEGER as $$\n+    BEGIN\n+        if deb.isdigit(chr(c)) then return 0; end if;\n+        if deb.isalpha(chr(c)) then return c; end if;\n+        if c = ascii('~') then return -1; end if;\n+        if c != 0 then return c + 256; end if;\n+        return 0;\n+    END ;\n+$$ language 'plpgsql';\n+\n+create or replace FUNCTION verrevcmp(a1 IN VARCHAR, b1 IN VARCHAR)\n+    RETURNS INTEGER as $$\n+    DECLARE\n+        a VARCHAR;\n+        b VARCHAR;\n+        i INTEGER := 0;\n+        j INTEGER := 0;\n+    BEGIN\n+        IF a1 IS NULL then a := ''; end if;\n+        IF b1 IS NULL then b := ''; end if;\n+        a := a1;\n+        b := b1;\n+        WHILE (i < LENGTH(a)) or (j < LENGTH(b))\n+        LOOP\n+            DECLARE\n+                firstDiff INTEGER := 0;\n+            BEGIN\n+                while ((i < LENGTH(a)) and not deb.isdigit(deb.charAt(a,i))) or ((j < LENGTH(b)) and not deb.isdigit(deb.charAt(b,j)))\n+                LOOP\n+                DECLARE\n+                    ac INTEGER;\n+                    bc INTEGER;\n+                BEGIN\n+                    if i >= length(a)\n+                    then\n+                        ac := 0;\n+                    else\n+                        ac := deb.deborder(ascii(deb.charAt(a, i)));\n+                    end if;\n+                    if j >= length(b)\n+                    then\n+                        bc := 0;\n+                    else\n+                        bc := deb.deborder(ascii(deb.charAt(b, j)));\n+                    end if;\n+                    if ac != bc then return ac-bc; end if;\n+                    i := i + 1;\n+                    j := j + 1;\n+                END;\n+                END LOOP;\n+                while (i < length(a)) and (deb.charAt(a, i) = '0')\n+                LOOP\n+                    i := i + 1;\n+                END LOOP;\n+                while (j < length(b)) and (deb.charAt(b, j) = '0')\n+                LOOP\n+                    j := j + 1;\n+                END LOOP;\n+                WHILE (i < LENGTH(a)) and (j < LENGTH(b)) and (deb.isdigit(deb.charAt(a,i))) and (deb.isdigit(deb.charAt(b, j)))\n+                LOOP\n+                    if firstDiff = 0 then firstDiff := ascii(deb.charAt(a, i)) - ascii(deb.charAt(b, j)); end if;\n+                    i := i + 1;\n+                    j := j + 1;\n+                END LOOP;\n+                IF (i < LENGTH(a)) and (deb.isdigit(deb.charAt(a,i))) then return 1; end if;\n+                IF (j < LENGTH(b)) and (deb.isdigit(deb.charAt(b,j))) then return -1; end if;\n+                IF firstDiff != 0 then return firstDiff; end if;\n+            END;\n+        END LOOP;\n+        RETURN 0;\n+    END;\n+$$ language 'plpgsql';\n+\n+create or replace FUNCTION debstrcmp (o1 IN VARCHAR, o2 IN VARCHAR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0NjMzNg==", "bodyText": "Fixed", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r539546336", "createdAt": "2020-12-09T18:29:47Z", "author": {"login": "mbologna"}, "path": "schema/spacewalk/postgres/packages/deb.pkb", "diffHunk": "@@ -0,0 +1,185 @@\n+-- oracle equivalent source sha1 539cb03eb177b7e87992701071488bbb32bb0624\n+create schema deb;\n+\n+--update pg_setting\n+update pg_settings set setting = 'deb,' || setting where name = 'search_path';\n+\n+CREATE OR REPLACE FUNCTION lastIndexOf(needle text, haystack text)\n+RETURNS integer AS $$\n+    DECLARE\n+        rc INTEGER;\n+    BEGIN\n+     rc := length(haystack) - position(needle in reverse(haystack));\n+     if rc = length(haystack) then rc = -1; end if;\n+     return rc;\n+    END;\n+$$ language 'plpgsql';\n+\n+create or replace function isdigit(ch CHAR)\n+    RETURNS BOOLEAN as $$\n+    BEGIN\n+        if ascii(ch) between ascii('0') and ascii('9')\n+        then\n+            return TRUE;\n+        end if;\n+        return FALSE;\n+    END ;\n+$$ language 'plpgsql';\n+\n+\n+create or replace FUNCTION isalpha(ch CHAR)\n+    RETURNS BOOLEAN as $$\n+    BEGIN\n+        if ascii(ch) between ascii('a') and ascii('z') or\n+            ascii(ch) between ascii('A') and ascii('Z')\n+        then\n+            return TRUE;\n+        end if;\n+        return FALSE;\n+    END;\n+$$ language 'plpgsql';\n+\n+create or replace FUNCTION charAt(str IN VARCHAR, pos IN INTEGER)\n+    RETURNS CHARACTER as $$\n+    BEGIN\n+        return SUBSTR(str, pos + 1, 1);\n+    END;\n+$$ language 'plpgsql';\n+\n+create or replace function deborder(c INTEGER)\n+    RETURNS INTEGER as $$\n+    BEGIN\n+        if deb.isdigit(chr(c)) then return 0; end if;\n+        if deb.isalpha(chr(c)) then return c; end if;\n+        if c = ascii('~') then return -1; end if;\n+        if c != 0 then return c + 256; end if;\n+        return 0;\n+    END ;\n+$$ language 'plpgsql';\n+\n+create or replace FUNCTION verrevcmp(a1 IN VARCHAR, b1 IN VARCHAR)\n+    RETURNS INTEGER as $$\n+    DECLARE\n+        a VARCHAR;\n+        b VARCHAR;\n+        i INTEGER := 0;\n+        j INTEGER := 0;\n+    BEGIN\n+        IF a1 IS NULL then a := ''; end if;\n+        IF b1 IS NULL then b := ''; end if;\n+        a := a1;\n+        b := b1;\n+        WHILE (i < LENGTH(a)) or (j < LENGTH(b))\n+        LOOP\n+            DECLARE\n+                firstDiff INTEGER := 0;\n+            BEGIN\n+                while ((i < LENGTH(a)) and not deb.isdigit(deb.charAt(a,i))) or ((j < LENGTH(b)) and not deb.isdigit(deb.charAt(b,j)))\n+                LOOP\n+                DECLARE\n+                    ac INTEGER;\n+                    bc INTEGER;\n+                BEGIN\n+                    if i >= length(a)\n+                    then\n+                        ac := 0;\n+                    else\n+                        ac := deb.deborder(ascii(deb.charAt(a, i)));\n+                    end if;\n+                    if j >= length(b)\n+                    then\n+                        bc := 0;\n+                    else\n+                        bc := deb.deborder(ascii(deb.charAt(b, j)));\n+                    end if;\n+                    if ac != bc then return ac-bc; end if;\n+                    i := i + 1;\n+                    j := j + 1;\n+                END;\n+                END LOOP;\n+                while (i < length(a)) and (deb.charAt(a, i) = '0')\n+                LOOP\n+                    i := i + 1;\n+                END LOOP;\n+                while (j < length(b)) and (deb.charAt(b, j) = '0')\n+                LOOP\n+                    j := j + 1;\n+                END LOOP;\n+                WHILE (i < LENGTH(a)) and (j < LENGTH(b)) and (deb.isdigit(deb.charAt(a,i))) and (deb.isdigit(deb.charAt(b, j)))\n+                LOOP\n+                    if firstDiff = 0 then firstDiff := ascii(deb.charAt(a, i)) - ascii(deb.charAt(b, j)); end if;\n+                    i := i + 1;\n+                    j := j + 1;\n+                END LOOP;\n+                IF (i < LENGTH(a)) and (deb.isdigit(deb.charAt(a,i))) then return 1; end if;\n+                IF (j < LENGTH(b)) and (deb.isdigit(deb.charAt(b,j))) then return -1; end if;\n+                IF firstDiff != 0 then return firstDiff; end if;\n+            END;\n+        END LOOP;\n+        RETURN 0;\n+    END;\n+$$ language 'plpgsql';\n+\n+create or replace FUNCTION debstrcmp (o1 IN VARCHAR, o2 IN VARCHAR)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NDY2MA=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQ3NjE0OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/postgres/class/evr_t.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo0OTo1M1rOH_Wxxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToyNzoxOVrOIAsOnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NTUyNg==", "bodyText": "What would be pros/cons of using EXCEPTION here?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536195526", "createdAt": "2020-12-04T15:49:53Z", "author": {"login": "moio"}, "path": "schema/spacewalk/postgres/class/evr_t.sql", "diffHunk": "@@ -7,27 +7,43 @@\n -- FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n -- along with this software; if not, see\n -- http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n--- \n+--\n -- Red Hat trademarks are not licensed under GPLv2. No permission is\n -- granted to use or replicate Red Hat trademarks that are incorporated\n--- in this software or its documentation. \n+-- in this software or its documentation.\n --\n \n create type evr_t as (\n         epoch           varchar(16),\n         version         varchar(512),\n-        release         varchar(512)\n+        release         varchar(512),\n+        type            varchar(10)\n );\n \n-create or replace function evr_t(e varchar, v varchar, r varchar)\n+create or replace function evr_t(e varchar, v varchar, r varchar, t varchar)\n returns evr_t as $$\n-select row($1,$2,$3)::evr_t\n+select row($1,$2,$3,$4)::evr_t\n $$ language sql;\n \n create or replace function evr_t_compare( a evr_t, b evr_t )\n returns int as $$\n begin\n-  return rpm.vercmp(a.epoch, a.version, a.release, b.epoch, b.version, b.release);\n+  if a.type = b.type then\n+      if a.type = 'rpm' then\n+        return rpm.vercmp(a.epoch, a.version, a.release, b.epoch, b.version, b.release);\n+      elsif a.type = 'deb' then\n+        return deb.debvercmp(a.epoch, a.version, a.release, b.epoch, b.version, b.release);\n+      else\n+        raise EXCEPTION 'unknown evr type (using rpm) -> %', a.type;\n+      end if;\n+  else\n+     raise NOTICE 'comparing incompatible evr types. Using %', a.type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NTU0OA==", "bodyText": "We tried with an exception, but when the DB run ANALYSE it calls the comperator with all rows in the table.\nThe result was, that ANALYSE failed as there were exceptions thrown.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537595548", "createdAt": "2020-12-07T15:27:19Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/postgres/class/evr_t.sql", "diffHunk": "@@ -7,27 +7,43 @@\n -- FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n -- along with this software; if not, see\n -- http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n--- \n+--\n -- Red Hat trademarks are not licensed under GPLv2. No permission is\n -- granted to use or replicate Red Hat trademarks that are incorporated\n--- in this software or its documentation. \n+-- in this software or its documentation.\n --\n \n create type evr_t as (\n         epoch           varchar(16),\n         version         varchar(512),\n-        release         varchar(512)\n+        release         varchar(512),\n+        type            varchar(10)\n );\n \n-create or replace function evr_t(e varchar, v varchar, r varchar)\n+create or replace function evr_t(e varchar, v varchar, r varchar, t varchar)\n returns evr_t as $$\n-select row($1,$2,$3)::evr_t\n+select row($1,$2,$3,$4)::evr_t\n $$ language sql;\n \n create or replace function evr_t_compare( a evr_t, b evr_t )\n returns int as $$\n begin\n-  return rpm.vercmp(a.epoch, a.version, a.release, b.epoch, b.version, b.release);\n+  if a.type = b.type then\n+      if a.type = 'rpm' then\n+        return rpm.vercmp(a.epoch, a.version, a.release, b.epoch, b.version, b.release);\n+      elsif a.type = 'deb' then\n+        return deb.debvercmp(a.epoch, a.version, a.release, b.epoch, b.version, b.release);\n+      else\n+        raise EXCEPTION 'unknown evr type (using rpm) -> %', a.type;\n+      end if;\n+  else\n+     raise NOTICE 'comparing incompatible evr types. Using %', a.type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NTUyNg=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQ4NjY1OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/common/tables/rhnPackageEVR.sql", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1MjowNlrOH_W4Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0MDozNFrOIGI5YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzE3OQ==", "bodyText": "What would be the pros/cons of not having this generated column?", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536197179", "createdAt": "2020-12-04T15:52:06Z", "author": {"login": "moio"}, "path": "schema/spacewalk/common/tables/rhnPackageEVR.sql", "diffHunk": "@@ -21,7 +21,8 @@ CREATE TABLE rhnPackageEVR\n     epoch    VARCHAR(16),\n     version  VARCHAR(512) NOT NULL,\n     release  VARCHAR(512) NOT NULL,\n-    evr      EVR_T NOT NULL\n+    evr      EVR_T NOT NULL,\n+    type     varchar(10) generated always as ((evr).type) stored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NjgzMw==", "bodyText": "evr is required to write compare operators for the database.\nHibernate cannot work with self created types. For this we need them as plain columns.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r537596833", "createdAt": "2020-12-07T15:28:52Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/common/tables/rhnPackageEVR.sql", "diffHunk": "@@ -21,7 +21,8 @@ CREATE TABLE rhnPackageEVR\n     epoch    VARCHAR(16),\n     version  VARCHAR(512) NOT NULL,\n     release  VARCHAR(512) NOT NULL,\n-    evr      EVR_T NOT NULL\n+    evr      EVR_T NOT NULL,\n+    type     varchar(10) generated always as ((evr).type) stored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzE3OQ=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwODEyOA==", "bodyText": "I always wonder whether creating a custom type was actually ever worth the trouble.\nIn any case, no discussion to be made now.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543308128", "createdAt": "2020-12-15T12:40:34Z", "author": {"login": "moio"}, "path": "schema/spacewalk/common/tables/rhnPackageEVR.sql", "diffHunk": "@@ -21,7 +21,8 @@ CREATE TABLE rhnPackageEVR\n     epoch    VARCHAR(16),\n     version  VARCHAR(512) NOT NULL,\n     release  VARCHAR(512) NOT NULL,\n-    evr      EVR_T NOT NULL\n+    evr      EVR_T NOT NULL,\n+    type     varchar(10) generated always as ((evr).type) stored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzE3OQ=="}, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQ5NjcwOnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/postgres/packages/deb.pkb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1NDowOFrOH_W-PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1NDowOFrOH_W-PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5ODcxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            create schema deb;\n          \n          \n            \n            create schema if not exists deb;\n          \n      \n    \n    \n  \n\nNitpick: does not hurt to have this file identical to schema/spacewalk/upgrade/susemanager-schema-4.2.2-to-susemanager-schema-4.2.3/701-rpm.pkb.sql", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536198717", "createdAt": "2020-12-04T15:54:08Z", "author": {"login": "moio"}, "path": "schema/spacewalk/postgres/packages/deb.pkb", "diffHunk": "@@ -0,0 +1,185 @@\n+-- oracle equivalent source sha1 539cb03eb177b7e87992701071488bbb32bb0624\n+create schema deb;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d561e27e22e40a522e5b4838903a28e909f03d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzk0MjY0OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowODo0OVrOIGKCQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo0ODo0MFrOIGVQlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyNjc4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @version $Rev$", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543326785", "createdAt": "2020-12-15T13:08:49Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.common.util;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * DebVersionComparator\n+ * @version $Rev$", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cd0b4bbc31863ec140305581e3f75643c2e7055"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMDY3Nw==", "bodyText": "changed", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543510677", "createdAt": "2020-12-15T16:48:40Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.common.util;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * DebVersionComparator\n+ * @version $Rev$", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyNjc4NQ=="}, "originalCommit": {"oid": "7cd0b4bbc31863ec140305581e3f75643c2e7055"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzk2NjU2OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/util/test/DebVersionComparatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoxNDowNVrOIGKQJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoyODo1OFrOIGXKTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMDM0Mw==", "bodyText": "Could we re-use data in this method to also check the stored procedure implementation of the algorithm?\nOne way to do it could be to create a List of those versions and then sorting it with the Comparator, and inspecting the sorted result.", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543330343", "createdAt": "2020-12-15T13:14:05Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/common/util/test/DebVersionComparatorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.common.util.test;\n+\n+import com.redhat.rhn.common.util.DebVersionComparator;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * DebVersionComparatorTest\n+ */\n+public class DebVersionComparatorTest extends TestCase {\n+\n+    private DebVersionComparator cmp;\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        cmp = new DebVersionComparator();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        cmp = null;\n+        super.tearDown();\n+    }\n+\n+    public void testDpkgTestCases() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cd0b4bbc31863ec140305581e3f75643c2e7055"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MTgzOQ==", "bodyText": "This made me think and with your suggestions we moved the database tests into JUnit!\nSo we have now one single point to test the versions: Java (for Debian, and for RPM - as a bonus track - too!)", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543541839", "createdAt": "2020-12-15T17:28:58Z", "author": {"login": "mbologna"}, "path": "java/code/src/com/redhat/rhn/common/util/test/DebVersionComparatorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.common.util.test;\n+\n+import com.redhat.rhn.common.util.DebVersionComparator;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * DebVersionComparatorTest\n+ */\n+public class DebVersionComparatorTest extends TestCase {\n+\n+    private DebVersionComparator cmp;\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        cmp = new DebVersionComparator();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        cmp = null;\n+        super.tearDown();\n+    }\n+\n+    public void testDpkgTestCases() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMDM0Mw=="}, "originalCommit": {"oid": "7cd0b4bbc31863ec140305581e3f75643c2e7055"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTMwNzcxOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/db/datasource/xml/PackageEvr_queries.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOToyNToyMFrOIG7sSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo1MzoyNVrOIG86kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE0MDM2MA==", "bodyText": "Nitpick: if these queries are only used for testing, they could be added to the test_queries.xml file", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r544140360", "createdAt": "2020-12-16T09:25:20Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/common/db/datasource/xml/PackageEvr_queries.xml", "diffHunk": "@@ -0,0 +1,13 @@\n+<datasource_modes>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845cf71d2929f388f0b007a13025e1603d422080"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MDQwMw==", "bodyText": "Fixed", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r544160403", "createdAt": "2020-12-16T09:53:25Z", "author": {"login": "mbologna"}, "path": "java/code/src/com/redhat/rhn/common/db/datasource/xml/PackageEvr_queries.xml", "diffHunk": "@@ -0,0 +1,13 @@\n+<datasource_modes>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE0MDM2MA=="}, "originalCommit": {"oid": "845cf71d2929f388f0b007a13025e1603d422080"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3991, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}