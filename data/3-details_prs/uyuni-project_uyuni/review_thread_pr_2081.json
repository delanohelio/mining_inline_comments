{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MzUzOTYw", "number": 2081, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozNjoxMlrODv88_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1MjozM1rODv-nrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjA4MzE3OnYy", "diffSide": "LEFT", "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozNjoxMlrOGCrI2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzo0ODo0NFrOGNU8uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzExNA==", "bodyText": "this line seems to be removed but not added anywhere else again. Was this on purpose?", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r405457114", "createdAt": "2020-04-08T11:36:12Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -72,28 +63,6 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n         else {\n             unentitleServer(server, ent);\n         }\n-\n-        server.asMinionServer().ifPresent(s -> {\n-            ServerGroupManager.getInstance().updatePillarAfterGroupUpdateForServers(Arrays.asList(s));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd82c5204a5791ad67791c9fa85d06f532acef8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMTYwOA==", "bodyText": "Good catch! I removed it on purpose as I wanted to understand if it is really needed and also in which situation exactly. Will do more testing and investigation and re-add the pillar update if I find that it breaks something.", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r406131608", "createdAt": "2020-04-09T11:13:45Z", "author": {"login": "renner"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -72,28 +63,6 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n         else {\n             unentitleServer(server, ent);\n         }\n-\n-        server.asMinionServer().ifPresent(s -> {\n-            ServerGroupManager.getInstance().updatePillarAfterGroupUpdateForServers(Arrays.asList(s));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzExNA=="}, "originalCommit": {"oid": "edd82c5204a5791ad67791c9fa85d06f532acef8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyNzg5Nw==", "bodyText": "With my testing so far I could not find a regression from removing this line (pillar data regeneration). After @chiaradiamarcelo's latest refactoring the method name (updatePillarAfterGroupUpdateForServers()) also does no longer match this situation. I will do one more test before merging this patch, maybe this affects monitoring enablement during registration.", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r416627897", "createdAt": "2020-04-28T13:48:44Z", "author": {"login": "renner"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -72,28 +63,6 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n         else {\n             unentitleServer(server, ent);\n         }\n-\n-        server.asMinionServer().ifPresent(s -> {\n-            ServerGroupManager.getInstance().updatePillarAfterGroupUpdateForServers(Arrays.asList(s));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzExNA=="}, "originalCommit": {"oid": "edd82c5204a5791ad67791c9fa85d06f532acef8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjMzNDM1OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0Njo1OFrOGCtjcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0Njo1OFrOGCtjcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5NjY5MQ==", "bodyText": "i think the logging is fine here until we maybe tackle more consistent error handling overall.", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r405496691", "createdAt": "2020-04-08T12:46:58Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -342,4 +342,48 @@ public void enableFormula(String minionId, String formulaName) throws IOExceptio\n             FormulaFactory.saveServerFormulas(minionId, enabledFormulas);\n         }\n     }\n+\n+    /**\n+     * Configure system for monitoring when the entitlement is added.\n+     * @param minion the MinionServer to be configured for monitoring\n+     */\n+    public void enableMonitoringOnEntitlementAdd(MinionServer minion) {\n+        try {\n+            // Assign the monitoring formula to the system unless it belongs to a group having monitoring enabled\n+            if (!FormulaFactory.isMemberOfGroupHavingMonitoring(minion)) {\n+                List<String> formulas = FormulaFactory.getFormulasByMinionId(minion.getMinionId());\n+                if (!formulas.contains(FormulaFactory.PROMETHEUS_EXPORTERS)) {\n+                    formulas.add(FormulaFactory.PROMETHEUS_EXPORTERS);\n+                    FormulaFactory.saveServerFormulas(minion.getMinionId(), formulas);\n+                }\n+            }\n+        }\n+        catch (UnsupportedOperationException | IOException e) {\n+            // FIXME: error handling\n+            // LOG.error(\"Error assigning formula: \" + e.getMessage(), e);\n+            // result.addError(new ValidatorError(\"system.entitle.formula_error\"));\n+        }\n+    }\n+\n+    /**\n+     * Configure the monitoring formula for cleanup (disable exporters) if needed.\n+     * @param minion the MinionServer to be configured for monitoring cleanup\n+     */\n+    public void disableMonitoringOnEntitlementRemoval(MinionServer minion) {\n+        if (this.isMonitoringCleanupNeeded(minion)) {\n+            try {\n+                // Get the current data and set all exporters to disabled\n+                String minionId = minion.getMinionId();\n+                Map<String, Object> data = FormulaFactory\n+                        .getFormulaValuesByNameAndMinionId(PROMETHEUS_EXPORTERS, minionId)\n+                        .orElse(FormulaFactory.getPillarExample(PROMETHEUS_EXPORTERS));\n+                FormulaFactory.saveServerFormulaData(\n+                        FormulaFactory.disableMonitoring(data), minionId, PROMETHEUS_EXPORTERS);\n+            }\n+            catch (UnsupportedOperationException | IOException e) {\n+                // FIXME: error handling\n+                // LOG.warn(\"Exception on saving formula data: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd82c5204a5791ad67791c9fa85d06f532acef8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjM1NjI5OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1MjozM1rOGCtxIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxMDo0NFrOGJH3XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMDE5NA==", "bodyText": "i think to be consistent with the previous code this would need to return the ValidatorError and the places using it would need to merge the this ValidatorError with the one returned by addEntitlementToServer.", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r405500194", "createdAt": "2020-04-08T12:52:33Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -342,4 +342,48 @@ public void enableFormula(String minionId, String formulaName) throws IOExceptio\n             FormulaFactory.saveServerFormulas(minionId, enabledFormulas);\n         }\n     }\n+\n+    /**\n+     * Configure system for monitoring when the entitlement is added.\n+     * @param minion the MinionServer to be configured for monitoring\n+     */\n+    public void enableMonitoringOnEntitlementAdd(MinionServer minion) {\n+        try {\n+            // Assign the monitoring formula to the system unless it belongs to a group having monitoring enabled\n+            if (!FormulaFactory.isMemberOfGroupHavingMonitoring(minion)) {\n+                List<String> formulas = FormulaFactory.getFormulasByMinionId(minion.getMinionId());\n+                if (!formulas.contains(FormulaFactory.PROMETHEUS_EXPORTERS)) {\n+                    formulas.add(FormulaFactory.PROMETHEUS_EXPORTERS);\n+                    FormulaFactory.saveServerFormulas(minion.getMinionId(), formulas);\n+                }\n+            }\n+        }\n+        catch (UnsupportedOperationException | IOException e) {\n+            // FIXME: error handling\n+            // LOG.error(\"Error assigning formula: \" + e.getMessage(), e);\n+            // result.addError(new ValidatorError(\"system.entitle.formula_error\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd82c5204a5791ad67791c9fa85d06f532acef8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyODg5Mw==", "bodyText": "Right, thanks for the input, I will work on it.", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r406128893", "createdAt": "2020-04-09T11:08:01Z", "author": {"login": "renner"}, "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -342,4 +342,48 @@ public void enableFormula(String minionId, String formulaName) throws IOExceptio\n             FormulaFactory.saveServerFormulas(minionId, enabledFormulas);\n         }\n     }\n+\n+    /**\n+     * Configure system for monitoring when the entitlement is added.\n+     * @param minion the MinionServer to be configured for monitoring\n+     */\n+    public void enableMonitoringOnEntitlementAdd(MinionServer minion) {\n+        try {\n+            // Assign the monitoring formula to the system unless it belongs to a group having monitoring enabled\n+            if (!FormulaFactory.isMemberOfGroupHavingMonitoring(minion)) {\n+                List<String> formulas = FormulaFactory.getFormulasByMinionId(minion.getMinionId());\n+                if (!formulas.contains(FormulaFactory.PROMETHEUS_EXPORTERS)) {\n+                    formulas.add(FormulaFactory.PROMETHEUS_EXPORTERS);\n+                    FormulaFactory.saveServerFormulas(minion.getMinionId(), formulas);\n+                }\n+            }\n+        }\n+        catch (UnsupportedOperationException | IOException e) {\n+            // FIXME: error handling\n+            // LOG.error(\"Error assigning formula: \" + e.getMessage(), e);\n+            // result.addError(new ValidatorError(\"system.entitle.formula_error\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMDE5NA=="}, "originalCommit": {"oid": "edd82c5204a5791ad67791c9fa85d06f532acef8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxOTIyOQ==", "bodyText": "@lucidd Eventually I ended up doing some more consistent error handling: while the UnsupportedOperationException seems to be obsolete here meanwhile I am now throwing the IOException so it can be handled in the calling code appropriately. When the call comes from the UI there will be a message displayed, otherwise the error will be written to the logs.", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r412219229", "createdAt": "2020-04-21T14:10:44Z", "author": {"login": "renner"}, "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -342,4 +342,48 @@ public void enableFormula(String minionId, String formulaName) throws IOExceptio\n             FormulaFactory.saveServerFormulas(minionId, enabledFormulas);\n         }\n     }\n+\n+    /**\n+     * Configure system for monitoring when the entitlement is added.\n+     * @param minion the MinionServer to be configured for monitoring\n+     */\n+    public void enableMonitoringOnEntitlementAdd(MinionServer minion) {\n+        try {\n+            // Assign the monitoring formula to the system unless it belongs to a group having monitoring enabled\n+            if (!FormulaFactory.isMemberOfGroupHavingMonitoring(minion)) {\n+                List<String> formulas = FormulaFactory.getFormulasByMinionId(minion.getMinionId());\n+                if (!formulas.contains(FormulaFactory.PROMETHEUS_EXPORTERS)) {\n+                    formulas.add(FormulaFactory.PROMETHEUS_EXPORTERS);\n+                    FormulaFactory.saveServerFormulas(minion.getMinionId(), formulas);\n+                }\n+            }\n+        }\n+        catch (UnsupportedOperationException | IOException e) {\n+            // FIXME: error handling\n+            // LOG.error(\"Error assigning formula: \" + e.getMessage(), e);\n+            // result.addError(new ValidatorError(\"system.entitle.formula_error\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMDE5NA=="}, "originalCommit": {"oid": "edd82c5204a5791ad67791c9fa85d06f532acef8"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 84, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}