{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MDU0NjI2", "number": 2532, "title": "Server side pagination with maintenance schedule system list page", "bodyText": "Adds ApiDataEndpoint JS module and Java backend helper classes to make paginated data requests from the server. The module is used by a new table component called AsyncTable.\nAsyncTable is used to redesign the maintenance schedule system list page to improve the UX:\n\nPaginate and sort data at the server\nAdd a search field for server-side filtering\nShow both assigned and non-assigned systems in the table\nAdd a column to show currently assigned schedule labels\n\nGUI diff\nBefore:\n\nAfter:\n\nDocumentation\n\nNo documentation needed: Functionality unchanged\n\nTest coverage\n\nUnit tests were added\n\nLinks\nFixes SUSE/spacewalk#11895\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-08-26T17:35:50Z", "url": "https://github.com/uyuni-project/uyuni/pull/2532", "merged": true, "mergeCommit": {"oid": "ff47ee6d8481fc5deea5ef85e504900b91ba8e39"}, "closed": true, "closedAt": "2020-09-22T22:16:34Z", "author": {"login": "cbbayburt"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCwIcagBqjM2OTYwOTUyMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLeOlWgBqjM3OTUxMTczMzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de3f246ccf27e9a7da06459b62cf40fa9f17b97d", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/de3f246ccf27e9a7da06459b62cf40fa9f17b97d", "committedDate": "2020-08-26T17:21:58Z", "message": "Redesign maintenance schedule systems table to use paginated data from server"}, "afterCommit": {"oid": "bede2040d96496875186b3a57a97612727378901", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/bede2040d96496875186b3a57a97612727378901", "committedDate": "2020-08-26T18:25:51Z", "message": "Redesign maintenance schedule systems table to use paginated data from server"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bede2040d96496875186b3a57a97612727378901", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/bede2040d96496875186b3a57a97612727378901", "committedDate": "2020-08-26T18:25:51Z", "message": "Redesign maintenance schedule systems table to use paginated data from server"}, "afterCommit": {"oid": "979851c98d51bc714280b61eda8b5de2d6121c4a", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/979851c98d51bc714280b61eda8b5de2d6121c4a", "committedDate": "2020-08-27T10:53:30Z", "message": "Redesign maintenance schedule systems table to use paginated data from server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTcwOTA4", "url": "https://github.com/uyuni-project/uyuni/pull/2532#pullrequestreview-477570908", "createdAt": "2020-08-28T09:11:53Z", "commit": {"oid": "c956da08dc6f2fdd8cef9c1cdbdf6a4dd38d0689"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwOToxMTo1M1rOHIzlfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo0ODoxOFrOHJDUCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk5NTgzNg==", "bodyText": "would be better to not use the global. New pages tend to get it as a parameter of the renderer. I would leave that variable in the top levels components to ease removal of it in the future.", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r478995836", "createdAt": "2020-08-28T09:11:53Z", "author": {"login": "cbosdo"}, "path": "web/html/src/utils/data-endpoint.js", "diffHunk": "@@ -0,0 +1,131 @@\n+// @flow\n+\n+import {debounce} from 'lodash';\n+import {get} from './network';\n+\n+import type {Cancelable} from \"../utils/functions\";\n+\n+declare var userPrefPageSize: number;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c956da08dc6f2fdd8cef9c1cdbdf6a4dd38d0689"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxNTkxOA==", "bodyText": "Not sure that is of any use here, but usually REST paginated APIs embed an URL to the next and/or previous pages and the page number.", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r479015918", "createdAt": "2020-08-28T09:25:16Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/utils/gson/PagedDataResultJson.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.utils.gson;\n+\n+import com.redhat.rhn.common.db.datasource.DataResult;\n+\n+import java.util.List;\n+\n+/**\n+ * JSON wrapper class to hold paginated data\n+ *\n+ * @param <T> the type of the data items\n+ */\n+public class PagedDataResultJson<T> {\n+\n+    private List<T> items;\n+    private long total;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60cc5fba0b1d2f5cc8f0b7e66b61bb544fb62a7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MDQzNQ==", "bodyText": "I know it's a copy/paste from TableDataHandler but would be nice to get rid of the UNSAFE_* functions in that code", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r479250435", "createdAt": "2020-08-28T12:44:43Z", "author": {"login": "cbosdo"}, "path": "web/html/src/components/table/AsyncDataHandler.js", "diffHunk": "@@ -0,0 +1,318 @@\n+// @flow\n+import * as React from 'react';\n+\n+import {Utils} from \"utils/functions\";\n+import {ApiDataEndpoint, PageControl} from '../../utils/data-endpoint';\n+import { StatePersistedContext } from '../utils/StatePersistedContext';\n+\n+import { ItemsPerPageSelector } from '../pagination';\n+import { PaginationBlock } from '../pagination';\n+import { SearchPanel } from './SearchPanel';\n+import { SearchField } from './SearchField';\n+import { Header } from './Header';\n+\n+type ChildrenArgsProps = {\n+  currItems: Array<any>,\n+  headers: React.Node,\n+  handleSelect: Function,\n+  selectable: boolean,\n+  selectedItems: Array<any>,\n+  criteria?: string,\n+}\n+\n+type Props = {\n+  columns: Array<React.ElementRef<any>>,\n+  /** the async resource endpoint to retrieve the paged data from */\n+  resource: string,\n+  /** Function extracting the unique key of the row from the data object */\n+  identifier: Function,\n+  /** the column key name of the initial sorted column */\n+  initialSortColumnKey?: string,\n+  /** 1 for ascending, -1 for descending */\n+  initialSortDirection?: number,\n+  /** the React Object that contains the filter search field */\n+  searchField?: React.Element<typeof SearchField>,\n+  /** the initial number of how many row-per-page to show. If it's 0 table header and footer are hidden */\n+  initialItemsPerPage?: number,\n+  /** enables item selection */\n+  selectable: boolean,\n+  /** the handler to call when the table selection is updated. If not provided, the select boxes won't be rendered */\n+  onSelect?: (items: Array<any>) => void,\n+  /** the identifiers for selected items */\n+  selectedItems?: Array<any>,\n+  /** The message which is shown when there are no rows to display */\n+  emptyText?: string,\n+  /** The message which is shown when the data is loading */\n+  loadingText?: string,\n+  /** Children node in the table */\n+  children: (args: ChildrenArgsProps) => React.Node,\n+};\n+\n+type State = {\n+  data: Array<any>,\n+  currentPage: number,\n+  itemsPerPage: number,\n+  totalItems: number,\n+  criteria?: string,\n+  sortColumnKey: string | null,\n+  sortDirection: number,\n+  selectedItems: Array<any>,\n+  selectable: boolean,\n+  loading: boolean,\n+  endpoint: ApiDataEndpoint\n+};\n+\n+export class AsyncDataHandler extends React.Component<Props, State> {\n+  static defaultProps = {\n+    selectable: false,\n+    columns: [],\n+  };\n+\n+  static contextType = StatePersistedContext;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      data: [],\n+      currentPage: 1,\n+      itemsPerPage: this.props.initialItemsPerPage || 15,\n+      totalItems: 0,\n+      criteria: undefined,\n+      sortColumnKey: this.props.initialSortColumnKey || null,\n+      sortDirection: this.props.initialSortDirection || 1,\n+      selectedItems: this.props.selectedItems || [],\n+      selectable: this.props.selectable,\n+      loading: false,\n+      endpoint: new ApiDataEndpoint(new URL(this.props.resource, window.location.origin))\n+    };\n+  };\n+\n+  getData() {\n+    const currPage = (this.state.currentPage - 1) * this.state.itemsPerPage + 1;\n+    const pageControl = new PageControl(currPage, this.state.itemsPerPage,\n+      this.state.criteria, this.state.sortColumnKey, this.state.sortDirection);\n+\n+    this.setState({loading: true}, () => {\n+      this.state.endpoint.get(promise => {\n+        promise.then(data => this.updateData(data))\n+          .finally(() => this.setState({loading: false}));\n+        }, pageControl);\n+    });\n+  }\n+\n+  updateData({items, total}: {items: Array<any>, total: number}) {\n+    this.setState({data: items, totalItems: total}, () => {\n+      const lastPage = this.getLastPage();\n+      if (this.state.currentPage > lastPage) {\n+        this.setState({currentPage: lastPage});\n+      }\n+    });\n+  }\n+\n+  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n+    this.setState({\n+        selectedItems: nextProps.selectedItems || [],\n+        selectable: Boolean(nextProps.selectable)\n+    });\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2463a2c170835a1d203b815c58086d222cb35044"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MzUxMg==", "bodyText": "Most of these are common with TableDataHandler. I would rather see the TableDataHandler code refactored to accept something like a dataProvider property pointing to another component responsible for getting the data either asynchronously with your code or using preprovided data as we already have.", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r479253512", "createdAt": "2020-08-28T12:48:18Z", "author": {"login": "cbosdo"}, "path": "web/html/src/components/table/AsyncDataHandler.js", "diffHunk": "@@ -0,0 +1,318 @@\n+// @flow\n+import * as React from 'react';\n+\n+import {Utils} from \"utils/functions\";\n+import {ApiDataEndpoint, PageControl} from '../../utils/data-endpoint';\n+import { StatePersistedContext } from '../utils/StatePersistedContext';\n+\n+import { ItemsPerPageSelector } from '../pagination';\n+import { PaginationBlock } from '../pagination';\n+import { SearchPanel } from './SearchPanel';\n+import { SearchField } from './SearchField';\n+import { Header } from './Header';\n+\n+type ChildrenArgsProps = {\n+  currItems: Array<any>,\n+  headers: React.Node,\n+  handleSelect: Function,\n+  selectable: boolean,\n+  selectedItems: Array<any>,\n+  criteria?: string,\n+}\n+\n+type Props = {\n+  columns: Array<React.ElementRef<any>>,\n+  /** the async resource endpoint to retrieve the paged data from */\n+  resource: string,\n+  /** Function extracting the unique key of the row from the data object */\n+  identifier: Function,\n+  /** the column key name of the initial sorted column */\n+  initialSortColumnKey?: string,\n+  /** 1 for ascending, -1 for descending */\n+  initialSortDirection?: number,\n+  /** the React Object that contains the filter search field */\n+  searchField?: React.Element<typeof SearchField>,\n+  /** the initial number of how many row-per-page to show. If it's 0 table header and footer are hidden */\n+  initialItemsPerPage?: number,\n+  /** enables item selection */\n+  selectable: boolean,\n+  /** the handler to call when the table selection is updated. If not provided, the select boxes won't be rendered */\n+  onSelect?: (items: Array<any>) => void,\n+  /** the identifiers for selected items */\n+  selectedItems?: Array<any>,\n+  /** The message which is shown when there are no rows to display */\n+  emptyText?: string,\n+  /** The message which is shown when the data is loading */\n+  loadingText?: string,\n+  /** Children node in the table */\n+  children: (args: ChildrenArgsProps) => React.Node,\n+};\n+\n+type State = {\n+  data: Array<any>,\n+  currentPage: number,\n+  itemsPerPage: number,\n+  totalItems: number,\n+  criteria?: string,\n+  sortColumnKey: string | null,\n+  sortDirection: number,\n+  selectedItems: Array<any>,\n+  selectable: boolean,\n+  loading: boolean,\n+  endpoint: ApiDataEndpoint\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2463a2c170835a1d203b815c58086d222cb35044"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTExOTUy", "url": "https://github.com/uyuni-project/uyuni/pull/2532#pullrequestreview-477511952", "createdAt": "2020-08-28T08:30:29Z", "commit": {"oid": "c956da08dc6f2fdd8cef9c1cdbdf6a4dd38d0689"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODozMDozMFrOHIwRAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODozMDozMFrOHIwRAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0MTQ0MQ==", "bodyText": "Awesome. Thanks for adding tests. We need more of these \ud83d\ude04", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r478941441", "createdAt": "2020-08-28T08:30:30Z", "author": {"login": "parlt91"}, "path": "web/html/src/utils/data-endpoint.test.js", "diffHunk": "@@ -0,0 +1,148 @@\n+// Fix for node 8. Can be removed on node 10 or later\n+import \"@babel/polyfill\";\n+\n+import {ApiDataEndpoint, PageControl} from './data-endpoint';\n+import {Utils} from './functions';\n+import * as Network from './network';\n+\n+jest.mock('./network');\n+\n+const PATH = \"/my/test/url\";\n+const ORIGIN = \"https://my.domain\";\n+\n+test(\"Page control initialization\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c956da08dc6f2fdd8cef9c1cdbdf6a4dd38d0689"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NDUwNTM2", "url": "https://github.com/uyuni-project/uyuni/pull/2532#pullrequestreview-478450536", "createdAt": "2020-08-31T09:18:48Z", "commit": {"oid": "979851c98d51bc714280b61eda8b5de2d6121c4a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "979851c98d51bc714280b61eda8b5de2d6121c4a", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/979851c98d51bc714280b61eda8b5de2d6121c4a", "committedDate": "2020-08-27T10:53:30Z", "message": "Redesign maintenance schedule systems table to use paginated data from server"}, "afterCommit": {"oid": "703fb9b168a659d1bc16df18215282f52de67f67", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/703fb9b168a659d1bc16df18215282f52de67f67", "committedDate": "2020-09-04T13:47:08Z", "message": "Merge table implementations using data providers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "703fb9b168a659d1bc16df18215282f52de67f67", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/703fb9b168a659d1bc16df18215282f52de67f67", "committedDate": "2020-09-04T13:47:08Z", "message": "Merge table implementations using data providers"}, "afterCommit": {"oid": "e61a30f3009a829d19e3e036d7c5cf220030dff9", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e61a30f3009a829d19e3e036d7c5cf220030dff9", "committedDate": "2020-09-04T15:18:14Z", "message": "Merge table implementations using data providers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e61a30f3009a829d19e3e036d7c5cf220030dff9", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e61a30f3009a829d19e3e036d7c5cf220030dff9", "committedDate": "2020-09-04T15:18:14Z", "message": "Merge table implementations using data providers"}, "afterCommit": {"oid": "2b95382e86828712ccc46d2842cab1c5f30458e2", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2b95382e86828712ccc46d2842cab1c5f30458e2", "committedDate": "2020-09-09T12:43:26Z", "message": "Merge table implementations using data providers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b95382e86828712ccc46d2842cab1c5f30458e2", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2b95382e86828712ccc46d2842cab1c5f30458e2", "committedDate": "2020-09-09T12:43:26Z", "message": "Merge table implementations using data providers"}, "afterCommit": {"oid": "cf15ccf9ba2f7a5a9a008f149920f01a1761732d", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cf15ccf9ba2f7a5a9a008f149920f01a1761732d", "committedDate": "2020-09-09T12:45:29Z", "message": "Merge table implementations using data providers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NjQzNDUz", "url": "https://github.com/uyuni-project/uyuni/pull/2532#pullrequestreview-485643453", "createdAt": "2020-09-10T07:14:32Z", "commit": {"oid": "1416a5759e326688434bc9f7b8d156ccc1a17b83"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzoxNDozMlrOHPmLTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzowMjoxMFrOHQQz5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNjE3Mw==", "bodyText": "Shouldn't the 2nd page only contain one item? 2 items on the 1st page, 1 item on the 2nd one.", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r486116173", "createdAt": "2020-09-10T07:14:32Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/webui/utils/test/PageControlHelperTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+package com.suse.manager.webui.utils.test;\n+\n+import com.redhat.rhn.common.db.datasource.DataResult;\n+import com.redhat.rhn.frontend.listview.PageControl;\n+import com.suse.manager.webui.utils.PageControlHelper;\n+import com.suse.manager.webui.utils.SparkTestUtils;\n+import junit.framework.TestCase;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PageControlHelperTest extends TestCase {\n+\n+    private static final String REQUEST_URL = \"https://pagecontrol.test\";\n+\n+    public void testRequestWithNoParams() {\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequest(REQUEST_URL));\n+\n+        assertEquals(1, helper.getStart());\n+        assertEquals(0, helper.getPageSize());\n+        assertNull(helper.getQuery());\n+        assertNull(helper.getQueryColumn());\n+        assertNull(helper.getSortDirection());\n+        assertNull(helper.getSortColumn());\n+        assertNull(helper.getFunction());\n+    }\n+\n+    public void testRequestWithPageParams() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams),\"mydefaultproperty\");\n+\n+        assertEquals(5, helper.getStart());\n+        assertEquals(10, helper.getPageSize());\n+        assertNull(helper.getQuery());\n+        assertNull(helper.getQueryColumn());\n+        assertNull(helper.getSortDirection());\n+        assertNull(helper.getSortColumn());\n+        assertNull(helper.getFunction());\n+    }\n+\n+    public void testRequestWithFilterParams() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+        // Filter string and column\n+        queryParams.put(\"q\", \"mystring\");\n+        queryParams.put(\"qc\", \"myproperty\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        assertEquals(5, helper.getStart());\n+        assertEquals(10, helper.getPageSize());\n+        assertEquals(\"mystring\", helper.getQuery());\n+        assertEquals(\"myproperty\", helper.getQueryColumn());\n+        assertNull(helper.getSortDirection());\n+        assertNull(helper.getSortColumn());\n+        assertNull(helper.getFunction());\n+    }\n+\n+    public void testRequestWithSortParams() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+        // Sort direction and column\n+        queryParams.put(\"s\", \"1\");\n+        queryParams.put(\"sc\", \"mysortproperty\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        assertEquals(5, helper.getStart());\n+        assertEquals(10, helper.getPageSize());\n+        assertNull(helper.getQuery());\n+        assertNull(helper.getQueryColumn());\n+        assertEquals(\"1\", helper.getSortDirection());\n+        assertEquals(\"mysortproperty\", helper.getSortColumn());\n+        assertNull(helper.getFunction());\n+    }\n+\n+    public void testRequestWithFunctionParam() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Function\n+        queryParams.put(\"f\", \"myfunction\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        assertEquals(1, helper.getStart());\n+        assertEquals(0, helper.getPageSize());\n+        assertNull(helper.getQuery());\n+        assertNull(helper.getQueryColumn());\n+        assertNull(helper.getSortDirection());\n+        assertNull(helper.getSortColumn());\n+        assertEquals(\"myfunction\", helper.getFunction());\n+    }\n+\n+    public void testRequestWithDefaultFilterColumn() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+        // Filter string\n+        queryParams.put(\"q\", \"mystring\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        assertEquals(5, helper.getStart());\n+        assertEquals(10, helper.getPageSize());\n+        assertEquals(\"mystring\", helper.getQuery());\n+        assertEquals(\"mydefaultproperty\", helper.getQueryColumn());\n+    }\n+\n+    public void testPageControlWithNoParams() {\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequest(REQUEST_URL));\n+        PageControl pc = helper.getPageControl();\n+\n+        assertEquals(1, pc.getStart());\n+        assertEquals(0, pc.getEnd());\n+        assertFalse(pc.hasFilter());\n+        assertNull(pc.getFilterData());\n+        assertNull(pc.getFilterColumn());\n+    }\n+\n+    public void testPageControlWithPageParams() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams),\"mydefaultproperty\");\n+        PageControl pc = helper.getPageControl();\n+\n+        assertEquals(5, pc.getStart());\n+        assertEquals(14, pc.getEnd());\n+        assertFalse(pc.hasFilter());\n+        assertNull(pc.getFilterData());\n+        assertNull(pc.getFilterColumn());\n+    }\n+\n+    public void testPageControlWithFilterParams() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+        // Filter string and column\n+        queryParams.put(\"q\", \"mystring\");\n+        queryParams.put(\"qc\", \"myproperty\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+        PageControl pc = helper.getPageControl();\n+\n+        assertEquals(5, pc.getStart());\n+        assertEquals(14, pc.getEnd());\n+        assertTrue(pc.hasFilter());\n+        assertEquals(\"mystring\", pc.getFilterData());\n+        assertEquals(\"myproperty\", pc.getFilterColumn());\n+    }\n+\n+    public class PagedDataItem {\n+        private int firstProperty;\n+        private String secondProperty;\n+\n+        PagedDataItem(int firstProperty, String secondProperty) {\n+            this.firstProperty = firstProperty;\n+            this.secondProperty = secondProperty;\n+        }\n+\n+        public int getFirstProperty() {\n+            return firstProperty;\n+        }\n+\n+        public String getSecondProperty() {\n+            return secondProperty;\n+        }\n+    }\n+\n+    public void testApplySort() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        List<PagedDataItem> unsortedList = Arrays.asList(\n+                new PagedDataItem(2, \"two\"),\n+                new PagedDataItem(1, \"one\"),\n+                new PagedDataItem(3, \"three\"));\n+\n+        List<PagedDataItem> listToSort = new ArrayList<>(unsortedList);\n+        helper.applySort(listToSort);\n+\n+        // No sorting should be performed unless the sort column is specified\n+        assertEquals(unsortedList, listToSort);\n+\n+        // Sort column (number)\n+        queryParams.put(\"sc\", \"firstProperty\");\n+        helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL, queryParams),\n+                \"mydefaultproperty\");\n+        helper.applySort(listToSort);\n+\n+        // Should be sorted in ascending order by default\n+        assertEquals(1, listToSort.get(0).firstProperty);\n+        assertEquals(2, listToSort.get(1).firstProperty);\n+        assertEquals(3, listToSort.get(2).firstProperty);\n+\n+        // Sort direction (descending) and column (alpha)\n+        queryParams.put(\"s\", \"-1\");\n+        queryParams.put(\"sc\", \"secondProperty\");\n+        helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL, queryParams),\n+                \"mydefaultproperty\");\n+        listToSort = new ArrayList<>(unsortedList);\n+        helper.applySort(listToSort);\n+\n+        assertEquals(\"two\", listToSort.get(0).secondProperty);\n+        assertEquals(\"three\", listToSort.get(1).secondProperty);\n+        assertEquals(\"one\", listToSort.get(2).secondProperty);\n+    }\n+\n+    public void testProcessPageControl() {\n+        DataResult<PagedDataItem> testData = new DataResult<>(Arrays.asList(\n+                new PagedDataItem(1, \"angel\"),\n+                new PagedDataItem(2, \"apple\"),\n+                new PagedDataItem(3, \"orange\"),\n+                new PagedDataItem(4, \"ranger\")\n+        ));\n+\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"2\");\n+        queryParams.put(\"ps\", \"2\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        DataResult<PagedDataItem> result = helper.processPageControl(testData);\n+\n+        assertEquals(2, result.size());\n+        assertEquals(4, result.getTotalSize());\n+        assertEquals(2, result.getStart());\n+        assertEquals(3, result.getEnd());\n+        assertEquals(\"apple\", result.get(0).secondProperty);\n+        assertEquals(\"orange\", result.get(1).secondProperty);\n+    }\n+\n+    public void testProcessPageControlFiltered() {\n+        DataResult<PagedDataItem> testData = new DataResult<>(Arrays.asList(\n+                new PagedDataItem(1, \"angel\"),\n+                new PagedDataItem(2, \"apple\"),\n+                new PagedDataItem(3, \"orange\"),\n+                new PagedDataItem(4, \"ranger\")\n+        ));\n+\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"2\");\n+        queryParams.put(\"ps\", \"2\");\n+        // Filter string and column\n+        queryParams.put(\"q\", \"ang\");\n+        queryParams.put(\"qc\", \"secondProperty\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        DataResult<PagedDataItem> result = helper.processPageControl(testData);\n+\n+        assertEquals(2, result.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1416a5759e326688434bc9f7b8d156ccc1a17b83"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEyNzY3OA==", "bodyText": "Yeah, kudos to that! I hope this is going to become a standard for all front-end contributions soon!", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r486127678", "createdAt": "2020-09-10T07:35:37Z", "author": {"login": "hustodemon"}, "path": "web/html/src/utils/data-endpoint.test.js", "diffHunk": "@@ -0,0 +1,148 @@\n+// Fix for node 8. Can be removed on node 10 or later\n+import \"@babel/polyfill\";\n+\n+import {ApiDataEndpoint, PageControl} from './data-endpoint';\n+import {Utils} from './functions';\n+import * as Network from './network';\n+\n+jest.mock('./network');\n+\n+const PATH = \"/my/test/url\";\n+const ORIGIN = \"https://my.domain\";\n+\n+test(\"Page control initialization\", () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0MTQ0MQ=="}, "originalCommit": {"oid": "c956da08dc6f2fdd8cef9c1cdbdf6a4dd38d0689"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxNDY5NA==", "bodyText": "Would it make sense to make the applySort part of processPageControl (and even make it private (or \"public for testing only\"))?", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r486814694", "createdAt": "2020-09-11T07:02:10Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "diffHunk": "@@ -255,11 +266,112 @@ public static String delete(Request request, Response response, User user) {\n         return json(response, ResultJson.success());\n     }\n \n+    /**\n+     * Returns a list of system IDs assigned to a specified maintenance schedule\n+     *\n+     * @param request the Spark request\n+     * @param response the Spark response\n+     * @param user the authorized user\n+     * @return the JSON list of system IDs\n+     */\n+    public static String assignedSystems(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        List<Long> systemIds = new ArrayList<>();\n+        MM.lookupScheduleByUserAndId(user, scheduleId).ifPresentOrElse(\n+                schedule -> {\n+                    List<EssentialServerDto> systems = SystemManager.systemsInSchedule(user, schedule, null);\n+                    systemIds.addAll(systems.stream().map(EssentialServerDto::getId).collect(Collectors.toList()));\n+                },\n+                () -> Spark.halt(HttpStatus.SC_NOT_FOUND)\n+        );\n+        return json(response, systemIds);\n+    }\n+\n+    /**\n+     * Returns a paged list of systems visible to a user and their assigned schedules\n+     *\n+     * @param request the Spark request\n+     * @param response the Spark response\n+     * @param user the authorized user\n+     * @return the JSON response\n+     */\n+    public static String systemSchedules(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        PageControlHelper pageHelper = new PageControlHelper(request, \"name\");\n+\n+        DataResult<SystemScheduleDto> systems = SystemManager.systemListWithSchedules(user, null);\n+\n+        if (\"id\".equals(pageHelper.getFunction())) {\n+            // Return only IDs for \"select all\" function\n+            return json(response, systems.stream().map(SystemScheduleDto::getId).collect(Collectors.toList()));\n+        }\n+\n+        pageHelper.applySort(systems);\n+        systems = pageHelper.processPageControl(systems, new HashMap<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf15ccf9ba2f7a5a9a008f149920f01a1761732d"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MDA4NzU4", "url": "https://github.com/uyuni-project/uyuni/pull/2532#pullrequestreview-487008758", "createdAt": "2020-09-11T17:54:12Z", "commit": {"oid": "cf15ccf9ba2f7a5a9a008f149920f01a1761732d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTg1NzYw", "url": "https://github.com/uyuni-project/uyuni/pull/2532#pullrequestreview-489585760", "createdAt": "2020-09-16T12:45:54Z", "commit": {"oid": "8cf47291563e4f91a5611cf64208ba4e8b2b48ac"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0NTo1NFrOHSvFmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo1ODo1N1rOHSvmfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNzg5Nw==", "bodyText": "Again the ugly global... \ud83e\udd22", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r489407897", "createdAt": "2020-09-16T12:45:54Z", "author": {"login": "cbosdo"}, "path": "web/html/src/utils/data-providers/page-control.js", "diffHunk": "@@ -0,0 +1,29 @@\n+// @flow\n+\n+declare var userPrefPageSize: number;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf47291563e4f91a5611cf64208ba4e8b2b48ac"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwOTg3OA==", "bodyText": "Would be easier to read with a ComparatorType. And that type would be reused further down too", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r489409878", "createdAt": "2020-09-16T12:49:09Z", "author": {"login": "cbosdo"}, "path": "web/html/src/utils/data-providers/simple-data-provider.js", "diffHunk": "@@ -0,0 +1,59 @@\n+// @flow\n+\n+import PageControl from './page-control';\n+\n+type PagedData = {\n+  items: Array<any>,\n+  total: number\n+};\n+\n+export default class SimpleDataProvider {\n+  data: Array<any>;\n+  identifier: (row: any) => any;\n+  filter: ?(row: any, criteria: string) => boolean;\n+  comparators: ?{column: (a: any, b: any, key: string, direction: number) => number};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf47291563e4f91a5611cf64208ba4e8b2b48ac"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxNjMxNw==", "bodyText": "I like that approach. Thanks for the hard work on it \ud83d\udc4f", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r489416317", "createdAt": "2020-09-16T12:58:57Z", "author": {"login": "cbosdo"}, "path": "web/html/src/components/table/TableDataHandler.js", "diffHunk": "@@ -18,16 +21,27 @@ type ChildrenArgsProps = {\n \n type Props = {\n   columns: Array<React.ElementRef<any>>,\n-  /** any type of data in an array, where each element is a row data */\n-  data: Array<any>,\n+  /**\n+   * Either an array of data items of any type where each element is a row data,\n+   * or a URI string to a resource endpoint that returns a paged list of data items.\n+   *\n+   * The data returned from the endpoint must be in paginated form as the following:\n+   * ```\n+   * {\n+   *    items: [..],\n+   *    total: TOTAL_ITEMS\n+   * }\n+   * ```\n+   *\n+   * See: utils/data-providers/paged-data-endpoint.js for async usage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf15ccf9ba2f7a5a9a008f149920f01a1761732d"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf15ccf9ba2f7a5a9a008f149920f01a1761732d", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cf15ccf9ba2f7a5a9a008f149920f01a1761732d", "committedDate": "2020-09-09T12:45:29Z", "message": "Merge table implementations using data providers"}, "afterCommit": {"oid": "ece622fced5ade987b5ffaaa7d4e09ee36aef755", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ece622fced5ade987b5ffaaa7d4e09ee36aef755", "committedDate": "2020-09-22T14:46:23Z", "message": "Reuse types from 'data-providers' module"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ece622fced5ade987b5ffaaa7d4e09ee36aef755", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ece622fced5ade987b5ffaaa7d4e09ee36aef755", "committedDate": "2020-09-22T14:46:23Z", "message": "Reuse types from 'data-providers' module"}, "afterCommit": {"oid": "e9fb413ba40f53475f993b0b861afc7d8c3ab2dc", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e9fb413ba40f53475f993b0b861afc7d8c3ab2dc", "committedDate": "2020-09-22T15:28:24Z", "message": "Reuse types from 'data-providers' module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc0c3007846892d18495734e327ad913cf18c45f", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/bc0c3007846892d18495734e327ad913cf18c45f", "committedDate": "2020-09-22T20:42:35Z", "message": "Implement ApiDataEndpoint JS module to make paginated data requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "474a683052954cc6cf1a11576d9fea459a997b7b", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/474a683052954cc6cf1a11576d9fea459a997b7b", "committedDate": "2020-09-22T20:42:39Z", "message": "Add Java backend helpers for ApiDataEndpoint module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9856119719d25c20e2498b6629cc1f2c185763ed", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9856119719d25c20e2498b6629cc1f2c185763ed", "committedDate": "2020-09-22T20:42:39Z", "message": "Implement AsyncTable component using ApiDataEndpoint for server-side pagination\n\nMost logic for AsyncTable.js and AsyncDataHandler.js was duplicated from\nTable.js and TableDataHandler.js"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "901b87a9213335fad4688945356eec8440265c17", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/901b87a9213335fad4688945356eec8440265c17", "committedDate": "2020-09-22T20:43:15Z", "message": "Redesign maintenance schedule systems table to use paginated data from server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1492cf7a17152d31941f7ce9b7c80ed17f3787ff", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1492cf7a17152d31941f7ce9b7c80ed17f3787ff", "committedDate": "2020-09-22T20:43:16Z", "message": "Implement 'data-providers' module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "becb0234330fa55ca2730da273e0bfa0d7d0fe9d", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/becb0234330fa55ca2730da273e0bfa0d7d0fe9d", "committedDate": "2020-09-22T20:43:16Z", "message": "Merge table implementations using data providers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e66b23c02e67734e0536e518d510e213abc38632", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e66b23c02e67734e0536e518d510e213abc38632", "committedDate": "2020-09-22T20:43:16Z", "message": "Use 'userPreferences' jade mixin for default page size in tables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd06fadcda0a0d8974727ee578c0bae16db60010", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cd06fadcda0a0d8974727ee578c0bae16db60010", "committedDate": "2020-09-22T20:43:17Z", "message": "Reuse types from 'data-providers' module"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9fb413ba40f53475f993b0b861afc7d8c3ab2dc", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e9fb413ba40f53475f993b0b861afc7d8c3ab2dc", "committedDate": "2020-09-22T15:28:24Z", "message": "Reuse types from 'data-providers' module"}, "afterCommit": {"oid": "cd06fadcda0a0d8974727ee578c0bae16db60010", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cd06fadcda0a0d8974727ee578c0bae16db60010", "committedDate": "2020-09-22T20:43:17Z", "message": "Reuse types from 'data-providers' module"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1117, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}