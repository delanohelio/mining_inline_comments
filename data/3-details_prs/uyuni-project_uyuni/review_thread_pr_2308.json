{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMjYxNTM4", "number": 2308, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzoxMjowNVrOEsIhMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozMTo0M1rOEsI6dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzEyMzcwOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/domain/errata/ErrataFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzoxMjowNVrOHfSOLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODowMjozNlrOHfzU9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NjQ0NQ==", "bodyText": "should the documentation be change? Now it will not publish an unpublish errata.\nThe same comment can be applied to the next methods.", "url": "https://github.com/uyuni-project/uyuni/pull/2308#discussion_r502566445", "createdAt": "2020-10-09T17:12:05Z", "author": {"login": "rjmateus"}, "path": "java/code/src/com/redhat/rhn/domain/errata/ErrataFactory.java", "diffHunk": "@@ -197,50 +191,6 @@ else if (identifier.length() > 4) {\n         return retval;\n     }\n \n-    /**\n-     * publish takes an unpublished errata and copies its contents into a Published Errata\n-     * object (and then returns this object). This method also handles removing the old\n-     * Unpublished Errata object and child elements from the db.\n-     * @param unpublished The Errata to publish\n-     * @return Returns a published errata.\n-     */\n-    public static Errata publish(Errata unpublished) {\n-        //Make sure the errata we're publishing is unpublished\n-        if (unpublished.isPublished()) {\n-            return unpublished; //there is nothing we can do here\n-        }\n-        //Create a published errata using unpublished\n-\n-        Errata published;\n-\n-        if (unpublished.isCloned()) {\n-            published = new PublishedClonedErrata();\n-            ((PublishedClonedErrata)published).setOriginal(\n-                    ((UnpublishedClonedErrata)unpublished).getOriginal());\n-        }\n-        else {\n-            published = ErrataFactory.createPublishedErrata();\n-        }\n-\n-        copyDetails(published, unpublished, false);\n-\n-        //Save the published Errata\n-        save(published);\n-\n-        //Remove the unpublished Errata from db\n-        try {\n-            Session session = HibernateFactory.getSession();\n-            session.delete(unpublished);\n-        }\n-        catch (HibernateException e) {\n-            throw new HibernateRuntimeException(\n-                    \"Errors occurred while publishing errata\", e);\n-        }\n-\n-        //return the published errata\n-        return published;\n-    }\n-\n     /**\n      * Takes a published or unpublished errata and publishes to a channel, creating", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3bb877a3dc4beae6e3f3f540c4fc61339d61b18"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwODg1NQ==", "bodyText": "Yes, and it is indeed correct - just in a later commit :-/ sorry", "url": "https://github.com/uyuni-project/uyuni/pull/2308#discussion_r503108855", "createdAt": "2020-10-12T08:02:36Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/domain/errata/ErrataFactory.java", "diffHunk": "@@ -197,50 +191,6 @@ else if (identifier.length() > 4) {\n         return retval;\n     }\n \n-    /**\n-     * publish takes an unpublished errata and copies its contents into a Published Errata\n-     * object (and then returns this object). This method also handles removing the old\n-     * Unpublished Errata object and child elements from the db.\n-     * @param unpublished The Errata to publish\n-     * @return Returns a published errata.\n-     */\n-    public static Errata publish(Errata unpublished) {\n-        //Make sure the errata we're publishing is unpublished\n-        if (unpublished.isPublished()) {\n-            return unpublished; //there is nothing we can do here\n-        }\n-        //Create a published errata using unpublished\n-\n-        Errata published;\n-\n-        if (unpublished.isCloned()) {\n-            published = new PublishedClonedErrata();\n-            ((PublishedClonedErrata)published).setOriginal(\n-                    ((UnpublishedClonedErrata)unpublished).getOriginal());\n-        }\n-        else {\n-            published = ErrataFactory.createPublishedErrata();\n-        }\n-\n-        copyDetails(published, unpublished, false);\n-\n-        //Save the published Errata\n-        save(published);\n-\n-        //Remove the unpublished Errata from db\n-        try {\n-            Session session = HibernateFactory.getSession();\n-            session.delete(unpublished);\n-        }\n-        catch (HibernateException e) {\n-            throw new HibernateRuntimeException(\n-                    \"Errors occurred while publishing errata\", e);\n-        }\n-\n-        //return the published errata\n-        return published;\n-    }\n-\n     /**\n      * Takes a published or unpublished errata and publishes to a channel, creating", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NjQ0NQ=="}, "originalCommit": {"oid": "e3bb877a3dc4beae6e3f3f540c4fc61339d61b18"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzEzMzg0OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/domain/errata/ErrataFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzoxNTozM1rOHfSUdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODowNjo0NlrOHfzdxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2ODA1Mw==", "bodyText": "I'm confused with this one. The goal is to remove unpublished errata, but here we keep the code of the unpublished bugs and remove the code block for the published ones.", "url": "https://github.com/uyuni-project/uyuni/pull/2308#discussion_r502568053", "createdAt": "2020-10-09T17:15:33Z", "author": {"login": "rjmateus"}, "path": "java/code/src/com/redhat/rhn/domain/errata/ErrataFactory.java", "diffHunk": "@@ -494,17 +419,9 @@ private static void copyDetails(Errata copy, Errata original, boolean clone) {\n         Iterator bugsItr = IteratorUtils.getIterator(original.getBugs());\n         while (bugsItr.hasNext()) {\n             Bug bugIn = (Bug) bugsItr.next();\n-            Bug cloneB;\n-            if (copy.isPublished()) { //we want published bugs\n-                cloneB = ErrataManager.createNewPublishedBug(bugIn.getId(),\n-                        bugIn.getSummary(),\n-                        bugIn.getUrl());\n-            }\n-            else { //we want unpublished bugs\n-                cloneB = ErrataManager.createNewUnpublishedBug(bugIn.getId(),\n+            Bug cloneB = ErrataManager.createNewPublishedBug(bugIn.getId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3bb877a3dc4beae6e3f3f540c4fc61339d61b18"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTEwOQ==", "bodyText": "I think the change is correct.\nOriginal code said: if (copy.isPublished()) ... createNewPublishedBug ... else ... createNewUnpublishedBug\nNew code says: createNewPublishedBug\n(assumption is it can't be unpublished, so it's always published)", "url": "https://github.com/uyuni-project/uyuni/pull/2308#discussion_r503111109", "createdAt": "2020-10-12T08:06:46Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/domain/errata/ErrataFactory.java", "diffHunk": "@@ -494,17 +419,9 @@ private static void copyDetails(Errata copy, Errata original, boolean clone) {\n         Iterator bugsItr = IteratorUtils.getIterator(original.getBugs());\n         while (bugsItr.hasNext()) {\n             Bug bugIn = (Bug) bugsItr.next();\n-            Bug cloneB;\n-            if (copy.isPublished()) { //we want published bugs\n-                cloneB = ErrataManager.createNewPublishedBug(bugIn.getId(),\n-                        bugIn.getSummary(),\n-                        bugIn.getUrl());\n-            }\n-            else { //we want unpublished bugs\n-                cloneB = ErrataManager.createNewUnpublishedBug(bugIn.getId(),\n+            Bug cloneB = ErrataManager.createNewPublishedBug(bugIn.getId(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2ODA1Mw=="}, "originalCommit": {"oid": "e3bb877a3dc4beae6e3f3f540c4fc61339d61b18"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzE0MTk4OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/domain/errata/ErrataFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzoxODoxMlrOHfSZfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzoxODoxMlrOHfSZfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2OTM0MA==", "bodyText": "I think we can return the value directly in here.", "url": "https://github.com/uyuni-project/uyuni/pull/2308#discussion_r502569340", "createdAt": "2020-10-09T17:18:12Z", "author": {"login": "rjmateus"}, "path": "java/code/src/com/redhat/rhn/domain/errata/ErrataFactory.java", "diffHunk": "@@ -736,14 +623,6 @@ public static Errata lookupPublishedErrataById(Long id) {\n                 .setParameter(\"advisory\", advisory)\n                 .setParameter(\"org\", org)\n                 .getResultList();\n-\n-        //if nothing was found, check the unpublished errata table\n-        if (retval.isEmpty()) {\n-            retval = session.getNamedQuery(\"UnpublishedErrata.findVendorAnUserErrataByAdvisoryNameAndOrg\")\n-                    .setParameter(\"advisory\", advisory)\n-                    .setParameter(\"org\", org)\n-                    .getResultList();\n-        }\n         return retval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3bb877a3dc4beae6e3f3f540c4fc61339d61b18"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzE3MDIwOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/manager/errata/ErrataManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzoyNjo1OFrOHfSqwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxMDoyNVrOHfzloQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3Mzc2MQ==", "bodyText": "Method documentation needs re-writing", "url": "https://github.com/uyuni-project/uyuni/pull/2308#discussion_r502573761", "createdAt": "2020-10-09T17:26:58Z", "author": {"login": "rjmateus"}, "path": "java/code/src/com/redhat/rhn/manager/errata/ErrataManager.java", "diffHunk": "@@ -337,18 +318,7 @@ public static void truncateErrata(Set<Errata> srcErrata, Channel tgtChannel, Use\n      * @return Returns a fresh errata\n      */\n     public static Errata createNewErrata() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3bb877a3dc4beae6e3f3f540c4fc61339d61b18"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMzEyMQ==", "bodyText": "It's actually inlined in a later commit", "url": "https://github.com/uyuni-project/uyuni/pull/2308#discussion_r503113121", "createdAt": "2020-10-12T08:10:25Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/manager/errata/ErrataManager.java", "diffHunk": "@@ -337,18 +318,7 @@ public static void truncateErrata(Set<Errata> srcErrata, Channel tgtChannel, Use\n      * @return Returns a fresh errata\n      */\n     public static Errata createNewErrata() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3Mzc2MQ=="}, "originalCommit": {"oid": "e3bb877a3dc4beae6e3f3f540c4fc61339d61b18"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzE4ODM3OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/errata/ErrataHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozMTo0M1rOHfS1yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxMjo0M1rOHfzq9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NjU4NQ==", "bodyText": "I know it's out of scope, but this is a super strange code. Create a list with one element, and then from the method returned list get the first element and call it again...", "url": "https://github.com/uyuni-project/uyuni/pull/2308#discussion_r502576585", "createdAt": "2020-10-09T17:31:43Z", "author": {"login": "rjmateus"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/errata/ErrataHandler.java", "diffHunk": "@@ -1436,15 +1436,10 @@ public Errata publishAsOriginal(User loggedInUser, String advisory,\n      */\n     private Errata publish(Errata errata, List<Channel> channels, User user,\n             boolean inheritPackages) {\n-        Errata published = ErrataFactory.publish(errata);\n         for (Channel chan : channels) {\n-            List<Errata> list = new ArrayList<Errata>();\n-            list.add(published);\n-            published = ErrataFactory.publishToChannel(list, chan, user,\n-                    inheritPackages).get(0);\n-\n+            errata = ErrataFactory.publishToChannel(List.of(errata), chan, user, inheritPackages).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3bb877a3dc4beae6e3f3f540c4fc61339d61b18"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExNDQ4NQ==", "bodyText": "I agree, but would leave that for future PRs.", "url": "https://github.com/uyuni-project/uyuni/pull/2308#discussion_r503114485", "createdAt": "2020-10-12T08:12:43Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/errata/ErrataHandler.java", "diffHunk": "@@ -1436,15 +1436,10 @@ public Errata publishAsOriginal(User loggedInUser, String advisory,\n      */\n     private Errata publish(Errata errata, List<Channel> channels, User user,\n             boolean inheritPackages) {\n-        Errata published = ErrataFactory.publish(errata);\n         for (Channel chan : channels) {\n-            List<Errata> list = new ArrayList<Errata>();\n-            list.add(published);\n-            published = ErrataFactory.publishToChannel(list, chan, user,\n-                    inheritPackages).get(0);\n-\n+            errata = ErrataFactory.publishToChannel(List.of(errata), chan, user, inheritPackages).get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NjU4NQ=="}, "originalCommit": {"oid": "e3bb877a3dc4beae6e3f3f540c4fc61339d61b18"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4301, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}