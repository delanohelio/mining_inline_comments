{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3OTU3NTcy", "number": 2611, "title": "Warn user about missing hypervisor or libvirt binding", "bodyText": "What does this PR change?\nThe user could add the virtualization entitlement and have none or part\nof the dependencies set up on the virtualization host. A message will\nindicate that the libvirt python binding (and thus the salt virt module)\nis missing.\nAlso warn the user if the KVM or Xen modules are not loaded. This could\nmean that they have been installed but the system still needs a reboot.\nGUI diff\nScreenshot if there is no libvirt python binding:\n\nScreenshot if no running hypervisor can be found:\n\n\n DONE\n\nDocumentation\n\n\nNo documentation needed: only error display\n\n\n DONE\n\n\nTest coverage\n\n\nNo tests:  costly to cover automatically. These warning may also help debugging some of the testsuite issues related to nested KVM.\n\n\n DONE\n\n\nLinks\nFixes SUSE/spacewalk#11997\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-09-16T12:35:16Z", "url": "https://github.com/uyuni-project/uyuni/pull/2611", "merged": true, "mergeCommit": {"oid": "9def400cb7bee937a4a4a9a8d946ac4f5e14a23d"}, "closed": true, "closedAt": "2020-09-23T06:46:50Z", "author": {"login": "cbosdo"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJcjqfgBqjM3NzMyNTIxNzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLmdykABqjM3OTY0MjgxMTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5deac80733a93a486460145e0b4ef43baf55c6f8", "author": {"user": {"login": "cbosdo", "name": "Cedric Bosdonnat"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5deac80733a93a486460145e0b4ef43baf55c6f8", "committedDate": "2020-09-16T12:30:34Z", "message": "Warn user about missing hypervisor or libvirt binding\n\nThe user could add the virtualization entitlement and have none or part\nof the dependencies set up on the virtualization host. A message will\nindicate that the libvirt python binding (and thus the salt virt module)\nis missing.\n\nAlso warn the user if the KVM or Xen modules are not loaded. This could\nmean that they have been installed but the system still needs a reboot."}, "afterCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759", "author": {"user": {"login": "cbosdo", "name": "Cedric Bosdonnat"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e195d34e49c632bc7781280ab6c8c9aa83cb0759", "committedDate": "2020-09-16T13:38:36Z", "message": "Warn user about missing hypervisor or libvirt binding\n\nThe user could add the virtualization entitlement and have none or part\nof the dependencies set up on the virtualization host. A message will\nindicate that the libvirt python binding (and thus the salt virt module)\nis missing.\n\nAlso warn the user if the KVM or Xen modules are not loaded. This could\nmean that they have been installed but the system still needs a reboot."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNjQ5MjA3", "url": "https://github.com/uyuni-project/uyuni/pull/2611#pullrequestreview-492649207", "createdAt": "2020-09-21T14:15:53Z", "commit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNTo1M1rOHVSSEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDozOTowMVrOHVTcJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MTY4Mg==", "bodyText": "I prefer a ternary operator instead:\ndata.put(\"hypervisor\",\n    hasVirtualizationEntitlement() ? virtManager.getHypervisor(server.getMinionId()) : \"\"\n);", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492081682", "createdAt": "2020-09-21T14:15:53Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/suse/manager/webui/controllers/virtualization/VirtualGuestsController.java", "diffHunk": "@@ -144,6 +144,11 @@ public ModelAndView show(Request request, Response response, User user) {\n         data.put(\"salt_entitled\", server.hasEntitlement(EntitlementManager.SALT));\n         data.put(\"foreign_entitled\", server.hasEntitlement(EntitlementManager.FOREIGN));\n         data.put(\"is_admin\", user.hasRole(RoleFactory.ORG_ADMIN));\n+        String hypervisor = \"\";\n+        if (server.hasVirtualizationEntitlement()) {\n+            hypervisor = virtManager.getHypervisor(server.getMinionId()).orElse(\"\");\n+        }\n+        data.put(\"hypervisor\", hypervisor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MjE2NA==", "bodyText": "Ternary operator same as before", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492082164", "createdAt": "2020-09-21T14:16:17Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/suse/manager/webui/controllers/virtualization/VirtualNetsController.java", "diffHunk": "@@ -86,7 +87,16 @@ public void initRoutes(JadeTemplateEngine jade) {\n      * @return the ModelAndView object to render the page\n      */\n     public ModelAndView show(Request request, Response response, User user) {\n-        return renderPage(request, response, user, \"show\", null);\n+        Server host = getServer(request, user);\n+        return renderPage(request, response, user, \"show\", () -> {\n+            Map<String, Object> extra = new HashMap<>();\n+            String hypervisor = \"\";\n+            if (host.hasVirtualizationEntitlement()) {\n+                hypervisor = virtManager.getHypervisor(host.getMinionId()).orElse(\"\");\n+            }\n+            extra.put(\"hypervisor\", hypervisor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MjY2Mw==", "bodyText": "Ternary operator same as before", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492082663", "createdAt": "2020-09-21T14:16:45Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/suse/manager/webui/controllers/virtualization/VirtualPoolsController.java", "diffHunk": "@@ -120,7 +120,16 @@ public void initRoutes(JadeTemplateEngine jade) {\n      * @return the ModelAndView object to render the page\n      */\n     public ModelAndView show(Request request, Response response, User user) {\n-        return renderPage(request, response, user, \"show\", null);\n+        Server host = getServer(request, user);\n+        return renderPage(request, response, user, \"show\", () -> {\n+            Map<String, Object> extra = new HashMap<>();\n+            String hypervisor = \"\";\n+            if (host.hasVirtualizationEntitlement()) {\n+                hypervisor = virtManager.getHypervisor(host.getMinionId()).orElse(\"\");\n+            }\n+            extra.put(\"hypervisor\", hypervisor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4ODI2NQ==", "bodyText": "Renaming virtWarning to virtError sounds better as long as it used for MessagesUtils.error.", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492088265", "createdAt": "2020-09-21T14:22:40Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/virtualization/HypervisorCheck.js", "diffHunk": "@@ -0,0 +1,33 @@\n+// @flow\n+import * as React from 'react';\n+\n+import { Messages } from 'components/messages';\n+import { Utils as MessagesUtils } from 'components/messages';\n+\n+type Props = {\n+    hypervisor: string,\n+    foreignEntitled: boolean,\n+};\n+\n+export function HypervisorCheck(props: Props) {\n+    if (props.foreignEntitled) {\n+        return null;\n+    }\n+\n+    const virtMissing = props.hypervisor.includes(\"'virt' __virtual__ returned False\");\n+    if (virtMissing) {\n+        const virtWarning = MessagesUtils.error(t(\"Please install libvirt python module.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4OTQ1OQ==", "bodyText": "Just to make sure: is this intended to be a warning message AKA the user should be aware of it but still he can continue working with the current situation, or it is more an error message AKA the user should stop and fix it if he wants to continue working?", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492089459", "createdAt": "2020-09-21T14:24:17Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/virtualization/HypervisorCheck.js", "diffHunk": "@@ -0,0 +1,33 @@\n+// @flow\n+import * as React from 'react';\n+\n+import { Messages } from 'components/messages';\n+import { Utils as MessagesUtils } from 'components/messages';\n+\n+type Props = {\n+    hypervisor: string,\n+    foreignEntitled: boolean,\n+};\n+\n+export function HypervisorCheck(props: Props) {\n+    if (props.foreignEntitled) {\n+        return null;\n+    }\n+\n+    const virtMissing = props.hypervisor.includes(\"'virt' __virtual__ returned False\");\n+    if (virtMissing) {\n+        const virtWarning = MessagesUtils.error(t(\"Please install libvirt python module.\"));\n+        return <Messages items={virtWarning}/>;\n+    }\n+\n+    const warning = props.hypervisor === \"\" ?\n+        MessagesUtils.warning(t(\"Neither KVM nor Xen is running. Ensure they are installed and the kernel modules are loaded.\")) :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5NDk1MQ==", "bodyText": "This indentation/code-style is driving me crazy sorry \ud83d\ude05\nCould you please rewrite with some empty line between objects, and whenever it is possible without breaking lines? Something like the following:\n...\n\n{state === 'running' && row.name !== 'Domain-0' && createModalButton('suspend', modalsData, row) }\n\n{state !== 'stopped' && row.name !== 'Domain-0' && createModalButton('shutdown', modalsData, row) }\n\n{(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n\n...", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492094951", "createdAt": "2020-09-21T14:31:19Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/virtualization/guests/list/guests-list.js", "diffHunk": "@@ -36,134 +38,137 @@ export function GuestsList(props: Props) {\n   ];\n \n   return (\n-    <ListTab\n-      serverId={props.serverId}\n-      saltEntitled={props.saltEntitled}\n-      pageSize={props.pageSize}\n-      type=\"guest\"\n-      title={t('Hosted Virtual Systems')}\n-      description={t('This is a list of virtual guests which are configured to run on this host.')}\n-      modalsData={modalsData}\n-      isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n-      getCreateActionsKeys={(actions) => {\n-        return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n-      }}\n-      idName=\"uuid\"\n-    >\n-    {\n-      (createModalButton, onAction) => {\n-          const columns = [\n-            <Column\n-              columnKey=\"name\"\n-              comparator={Utils.sortByText}\n-              header={t('Guest')}\n-              cell={row => row.name}\n-            />,\n-            <Column\n-              columnKey=\"serverName\"\n-              comparator={Utils.sortByText}\n-              header={t('System')}\n-              cell={(row) => {\n-                if (row.virtualSystemId == null) {\n-                  return t('Unregistered System');\n-                }\n+    <>\n+      <HypervisorCheck foreignEntitled={props.foreignEntitled} hypervisor={props.hypervisor}/>\n+      <ListTab\n+        serverId={props.serverId}\n+        saltEntitled={props.saltEntitled}\n+        pageSize={props.pageSize}\n+        type=\"guest\"\n+        title={t('Hosted Virtual Systems')}\n+        description={t('This is a list of virtual guests which are configured to run on this host.')}\n+        modalsData={modalsData}\n+        isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n+        getCreateActionsKeys={(actions) => {\n+          return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n+        }}\n+        idName=\"uuid\"\n+      >\n+      {\n+        (createModalButton, onAction) => {\n+            const columns = [\n+              <Column\n+                columnKey=\"name\"\n+                comparator={Utils.sortByText}\n+                header={t('Guest')}\n+                cell={row => row.name}\n+              />,\n+              <Column\n+                columnKey=\"serverName\"\n+                comparator={Utils.sortByText}\n+                header={t('System')}\n+                cell={(row) => {\n+                  if (row.virtualSystemId == null) {\n+                    return t('Unregistered System');\n+                  }\n \n-                if (row.accessible) {\n-                  return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n-                }\n-                return row.serverName;\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"statusType\"\n-              comparator={ListUtils.sortByUpdate}\n-              header={t('Updates')}\n-              cell={(row) => {\n-                if (row.statusType == null) {\n-                  return '-';\n-                }\n-                return Systems.statusDisplay(row, props.isAdmin);\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"stateLabel\"\n-              header={t('State')}\n-              comparator={ListUtils.sortByState}\n-              cell={row => row.stateName}\n-            />,\n-            <Column\n-              columnKey=\"memory\"\n-              comparator={Utils.sortByNumber}\n-              header={t('Current Memory')}\n-              cell={row => `${row.memory / 1024} MiB`}\n-            />,\n-            <Column\n-              columnKey=\"vcpus\"\n-              comparator={Utils.sortByNumber}\n-              header={t('vCPUs')}\n-              cell={row => row.vcpus}\n-            />,\n-            <Column\n-              columnKey=\"channelLabels\"\n-              comparator={Utils.sortByText}\n-              header={t('Base Software Channel')}\n-              cell={(row) => {\n-                if (row.channelId == null) {\n-                  return t('(none)');\n-                }\n-                if (row.subscribable) {\n-                  return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n-                }\n-                return row.channelLabels;\n-              }}\n-            />\n-          ];\n+                  if (row.accessible) {\n+                    return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n+                  }\n+                  return row.serverName;\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"statusType\"\n+                comparator={ListUtils.sortByUpdate}\n+                header={t('Updates')}\n+                cell={(row) => {\n+                  if (row.statusType == null) {\n+                    return '-';\n+                  }\n+                  return Systems.statusDisplay(row, props.isAdmin);\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"stateLabel\"\n+                header={t('State')}\n+                comparator={ListUtils.sortByState}\n+                cell={row => row.stateName}\n+              />,\n+              <Column\n+                columnKey=\"memory\"\n+                comparator={Utils.sortByNumber}\n+                header={t('Current Memory')}\n+                cell={row => `${row.memory / 1024} MiB`}\n+              />,\n+              <Column\n+                columnKey=\"vcpus\"\n+                comparator={Utils.sortByNumber}\n+                header={t('vCPUs')}\n+                cell={row => row.vcpus}\n+              />,\n+              <Column\n+                columnKey=\"channelLabels\"\n+                comparator={Utils.sortByText}\n+                header={t('Base Software Channel')}\n+                cell={(row) => {\n+                  if (row.channelId == null) {\n+                    return t('(none)');\n+                  }\n+                  if (row.subscribable) {\n+                    return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n+                  }\n+                  return row.channelLabels;\n+                }}\n+              />\n+            ];\n \n-          const actionsProvider =\n-            (row) => {\n-              if (props.foreignEntitled) {\n-                return [];\n-              }\n-              const state = row.stateLabel;\n-              return (\n-                <div className=\"btn-group\">\n-                  {state !== 'running' && row.name !== 'Domain-0'\n-                   && (\n-                     <AsyncButton\n-                       defaultType=\"btn-default btn-sm\"\n-                       title={t(state === 'paused' ? 'Resume' : 'Start')}\n-                       icon=\"fa-play\"\n-                       action={() => onAction('start', [row.uuid], {})}\n-                     />) }\n-                  {state === 'running' && row.name !== 'Domain-0'\n-                   && createModalButton('suspend', modalsData, row) }\n-                  {state !== 'stopped' && row.name !== 'Domain-0'\n-                   && createModalButton('shutdown', modalsData, row) }\n-                  {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n-                  {props.saltEntitled && state === 'running' && (\n+            const actionsProvider =\n+              (row) => {\n+                if (props.foreignEntitled) {\n+                  return [];\n+                }\n+                const state = row.stateLabel;\n+                return (\n+                  <div className=\"btn-group\">\n+                    {state !== 'running' && row.name !== 'Domain-0'\n+                     && (\n+                       <AsyncButton\n+                         defaultType=\"btn-default btn-sm\"\n+                         title={t(state === 'paused' ? 'Resume' : 'Start')}\n+                         icon=\"fa-play\"\n+                         action={() => onAction('start', [row.uuid], {})}\n+                       />) }\n+                    {state === 'running' && row.name !== 'Domain-0'\n+                     && createModalButton('suspend', modalsData, row) }\n+                    {state !== 'stopped' && row.name !== 'Domain-0'\n+                     && createModalButton('shutdown', modalsData, row) }\n+                    {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n+                    {props.saltEntitled && state === 'running' && (\n+                      <LinkButton\n+                        title={t('Graphical Console')}\n+                        className=\"btn-default btn-sm\"\n+                        icon=\"fa-desktop\"\n+                        href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/console/${row.uuid}`}\n+                        target=\"_blank\"\n+                      />\n+                    )}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEwMDY0Ng==", "bodyText": "Wouldn't it be worth to save the Domain-0 to a variable you can compare against? I see this string occurs many time. I wonder the troubles if at some point it will change to something else. Am I missing something?", "url": "https://github.com/uyuni-project/uyuni/pull/2611#discussion_r492100646", "createdAt": "2020-09-21T14:39:01Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/virtualization/guests/list/guests-list.js", "diffHunk": "@@ -36,134 +38,137 @@ export function GuestsList(props: Props) {\n   ];\n \n   return (\n-    <ListTab\n-      serverId={props.serverId}\n-      saltEntitled={props.saltEntitled}\n-      pageSize={props.pageSize}\n-      type=\"guest\"\n-      title={t('Hosted Virtual Systems')}\n-      description={t('This is a list of virtual guests which are configured to run on this host.')}\n-      modalsData={modalsData}\n-      isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n-      getCreateActionsKeys={(actions) => {\n-        return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n-      }}\n-      idName=\"uuid\"\n-    >\n-    {\n-      (createModalButton, onAction) => {\n-          const columns = [\n-            <Column\n-              columnKey=\"name\"\n-              comparator={Utils.sortByText}\n-              header={t('Guest')}\n-              cell={row => row.name}\n-            />,\n-            <Column\n-              columnKey=\"serverName\"\n-              comparator={Utils.sortByText}\n-              header={t('System')}\n-              cell={(row) => {\n-                if (row.virtualSystemId == null) {\n-                  return t('Unregistered System');\n-                }\n+    <>\n+      <HypervisorCheck foreignEntitled={props.foreignEntitled} hypervisor={props.hypervisor}/>\n+      <ListTab\n+        serverId={props.serverId}\n+        saltEntitled={props.saltEntitled}\n+        pageSize={props.pageSize}\n+        type=\"guest\"\n+        title={t('Hosted Virtual Systems')}\n+        description={t('This is a list of virtual guests which are configured to run on this host.')}\n+        modalsData={modalsData}\n+        isActionVisible={(action) => !props.foreignEntitled && (action.type !== 'delete' || props.saltEntitled)}\n+        getCreateActionsKeys={(actions) => {\n+          return Object.keys(actions).filter(key => key.startsWith(\"new-\") && actions[key].type === \"virt.create\")\n+        }}\n+        idName=\"uuid\"\n+      >\n+      {\n+        (createModalButton, onAction) => {\n+            const columns = [\n+              <Column\n+                columnKey=\"name\"\n+                comparator={Utils.sortByText}\n+                header={t('Guest')}\n+                cell={row => row.name}\n+              />,\n+              <Column\n+                columnKey=\"serverName\"\n+                comparator={Utils.sortByText}\n+                header={t('System')}\n+                cell={(row) => {\n+                  if (row.virtualSystemId == null) {\n+                    return t('Unregistered System');\n+                  }\n \n-                if (row.accessible) {\n-                  return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n-                }\n-                return row.serverName;\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"statusType\"\n-              comparator={ListUtils.sortByUpdate}\n-              header={t('Updates')}\n-              cell={(row) => {\n-                if (row.statusType == null) {\n-                  return '-';\n-                }\n-                return Systems.statusDisplay(row, props.isAdmin);\n-              }}\n-            />,\n-            <Column\n-              columnKey=\"stateLabel\"\n-              header={t('State')}\n-              comparator={ListUtils.sortByState}\n-              cell={row => row.stateName}\n-            />,\n-            <Column\n-              columnKey=\"memory\"\n-              comparator={Utils.sortByNumber}\n-              header={t('Current Memory')}\n-              cell={row => `${row.memory / 1024} MiB`}\n-            />,\n-            <Column\n-              columnKey=\"vcpus\"\n-              comparator={Utils.sortByNumber}\n-              header={t('vCPUs')}\n-              cell={row => row.vcpus}\n-            />,\n-            <Column\n-              columnKey=\"channelLabels\"\n-              comparator={Utils.sortByText}\n-              header={t('Base Software Channel')}\n-              cell={(row) => {\n-                if (row.channelId == null) {\n-                  return t('(none)');\n-                }\n-                if (row.subscribable) {\n-                  return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n-                }\n-                return row.channelLabels;\n-              }}\n-            />\n-          ];\n+                  if (row.accessible) {\n+                    return <a href={`/rhn/systems/details/Overview.do?sid=${row.virtualSystemId}`}>{row.serverName}</a>;\n+                  }\n+                  return row.serverName;\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"statusType\"\n+                comparator={ListUtils.sortByUpdate}\n+                header={t('Updates')}\n+                cell={(row) => {\n+                  if (row.statusType == null) {\n+                    return '-';\n+                  }\n+                  return Systems.statusDisplay(row, props.isAdmin);\n+                }}\n+              />,\n+              <Column\n+                columnKey=\"stateLabel\"\n+                header={t('State')}\n+                comparator={ListUtils.sortByState}\n+                cell={row => row.stateName}\n+              />,\n+              <Column\n+                columnKey=\"memory\"\n+                comparator={Utils.sortByNumber}\n+                header={t('Current Memory')}\n+                cell={row => `${row.memory / 1024} MiB`}\n+              />,\n+              <Column\n+                columnKey=\"vcpus\"\n+                comparator={Utils.sortByNumber}\n+                header={t('vCPUs')}\n+                cell={row => row.vcpus}\n+              />,\n+              <Column\n+                columnKey=\"channelLabels\"\n+                comparator={Utils.sortByText}\n+                header={t('Base Software Channel')}\n+                cell={(row) => {\n+                  if (row.channelId == null) {\n+                    return t('(none)');\n+                  }\n+                  if (row.subscribable) {\n+                    return <a href={`/rhn/channels/ChannelDetail.do?cid=${row.channelId}`}>{row.channelLabels}</a>;\n+                  }\n+                  return row.channelLabels;\n+                }}\n+              />\n+            ];\n \n-          const actionsProvider =\n-            (row) => {\n-              if (props.foreignEntitled) {\n-                return [];\n-              }\n-              const state = row.stateLabel;\n-              return (\n-                <div className=\"btn-group\">\n-                  {state !== 'running' && row.name !== 'Domain-0'\n-                   && (\n-                     <AsyncButton\n-                       defaultType=\"btn-default btn-sm\"\n-                       title={t(state === 'paused' ? 'Resume' : 'Start')}\n-                       icon=\"fa-play\"\n-                       action={() => onAction('start', [row.uuid], {})}\n-                     />) }\n-                  {state === 'running' && row.name !== 'Domain-0'\n-                   && createModalButton('suspend', modalsData, row) }\n-                  {state !== 'stopped' && row.name !== 'Domain-0'\n-                   && createModalButton('shutdown', modalsData, row) }\n-                  {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n-                  {props.saltEntitled && state === 'running' && (\n+            const actionsProvider =\n+              (row) => {\n+                if (props.foreignEntitled) {\n+                  return [];\n+                }\n+                const state = row.stateLabel;\n+                return (\n+                  <div className=\"btn-group\">\n+                    {state !== 'running' && row.name !== 'Domain-0'\n+                     && (\n+                       <AsyncButton\n+                         defaultType=\"btn-default btn-sm\"\n+                         title={t(state === 'paused' ? 'Resume' : 'Start')}\n+                         icon=\"fa-play\"\n+                         action={() => onAction('start', [row.uuid], {})}\n+                       />) }\n+                    {state === 'running' && row.name !== 'Domain-0'\n+                     && createModalButton('suspend', modalsData, row) }\n+                    {state !== 'stopped' && row.name !== 'Domain-0'\n+                     && createModalButton('shutdown', modalsData, row) }\n+                    {(state === 'paused' || state === 'running') && createModalButton('restart', modalsData, row) }\n+                    {props.saltEntitled && state === 'running' && (\n+                      <LinkButton\n+                        title={t('Graphical Console')}\n+                        className=\"btn-default btn-sm\"\n+                        icon=\"fa-desktop\"\n+                        href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/console/${row.uuid}`}\n+                        target=\"_blank\"\n+                      />\n+                    )}\n                     <LinkButton\n-                      title={t('Graphical Console')}\n+                      title={t('Edit')}\n                       className=\"btn-default btn-sm\"\n-                      icon=\"fa-desktop\"\n-                      href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/console/${row.uuid}`}\n-                      target=\"_blank\"\n+                      icon=\"fa-edit\"\n+                      href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/edit/${row.uuid}`}\n                     />\n-                  )}\n-                  <LinkButton\n-                    title={t('Edit')}\n-                    className=\"btn-default btn-sm\"\n-                    icon=\"fa-edit\"\n-                    href={`/rhn/manager/systems/details/virtualization/guests/${props.serverId}/edit/${row.uuid}`}\n-                  />\n-                  { props.saltEntitled && row.name !== 'Domain-0'\n-                    && createModalButton('delete', modalsData, row) }\n-                </div>\n-              );\n-            }\n+                    { props.saltEntitled && row.name !== 'Domain-0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759"}, "originalPosition": 260}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e195d34e49c632bc7781280ab6c8c9aa83cb0759", "author": {"user": {"login": "cbosdo", "name": "Cedric Bosdonnat"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e195d34e49c632bc7781280ab6c8c9aa83cb0759", "committedDate": "2020-09-16T13:38:36Z", "message": "Warn user about missing hypervisor or libvirt binding\n\nThe user could add the virtualization entitlement and have none or part\nof the dependencies set up on the virtualization host. A message will\nindicate that the libvirt python binding (and thus the salt virt module)\nis missing.\n\nAlso warn the user if the KVM or Xen modules are not loaded. This could\nmean that they have been installed but the system still needs a reboot."}, "afterCommit": {"oid": "4a503bf1c9716293b265f870c569875432bc3c2e", "author": {"user": {"login": "cbosdo", "name": "Cedric Bosdonnat"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4a503bf1c9716293b265f870c569875432bc3c2e", "committedDate": "2020-09-22T08:35:17Z", "message": "Warn user about missing hypervisor or libvirt binding\n\nThe user could add the virtualization entitlement and have none or part\nof the dependencies set up on the virtualization host. A message will\nindicate that the libvirt python binding (and thus the salt virt module)\nis missing.\n\nAlso warn the user if the KVM or Xen modules are not loaded. This could\nmean that they have been installed but the system still needs a reboot."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a503bf1c9716293b265f870c569875432bc3c2e", "author": {"user": {"login": "cbosdo", "name": "Cedric Bosdonnat"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4a503bf1c9716293b265f870c569875432bc3c2e", "committedDate": "2020-09-22T08:35:17Z", "message": "Warn user about missing hypervisor or libvirt binding\n\nThe user could add the virtualization entitlement and have none or part\nof the dependencies set up on the virtualization host. A message will\nindicate that the libvirt python binding (and thus the salt virt module)\nis missing.\n\nAlso warn the user if the KVM or Xen modules are not loaded. This could\nmean that they have been installed but the system still needs a reboot."}, "afterCommit": {"oid": "db58c64e38b237f947ab5ada96c6e794e37da24b", "author": {"user": {"login": "cbosdo", "name": "Cedric Bosdonnat"}}, "url": "https://github.com/uyuni-project/uyuni/commit/db58c64e38b237f947ab5ada96c6e794e37da24b", "committedDate": "2020-09-22T08:36:52Z", "message": "Warn user about missing hypervisor or libvirt binding\n\nThe user could add the virtualization entitlement and have none or part\nof the dependencies set up on the virtualization host. A message will\nindicate that the libvirt python binding (and thus the salt virt module)\nis missing.\n\nAlso warn the user if the KVM or Xen modules are not loaded. This could\nmean that they have been installed but the system still needs a reboot."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03e458704d22bcae292e3793286471642b1bc4a4", "author": {"user": {"login": "cbosdo", "name": "Cedric Bosdonnat"}}, "url": "https://github.com/uyuni-project/uyuni/commit/03e458704d22bcae292e3793286471642b1bc4a4", "committedDate": "2020-09-23T06:18:53Z", "message": "Warn user about missing hypervisor or libvirt binding\n\nThe user could add the virtualization entitlement and have none or part\nof the dependencies set up on the virtualization host. A message will\nindicate that the libvirt python binding (and thus the salt virt module)\nis missing.\n\nAlso warn the user if the KVM or Xen modules are not loaded. This could\nmean that they have been installed but the system still needs a reboot."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db58c64e38b237f947ab5ada96c6e794e37da24b", "author": {"user": {"login": "cbosdo", "name": "Cedric Bosdonnat"}}, "url": "https://github.com/uyuni-project/uyuni/commit/db58c64e38b237f947ab5ada96c6e794e37da24b", "committedDate": "2020-09-22T08:36:52Z", "message": "Warn user about missing hypervisor or libvirt binding\n\nThe user could add the virtualization entitlement and have none or part\nof the dependencies set up on the virtualization host. A message will\nindicate that the libvirt python binding (and thus the salt virt module)\nis missing.\n\nAlso warn the user if the KVM or Xen modules are not loaded. This could\nmean that they have been installed but the system still needs a reboot."}, "afterCommit": {"oid": "03e458704d22bcae292e3793286471642b1bc4a4", "author": {"user": {"login": "cbosdo", "name": "Cedric Bosdonnat"}}, "url": "https://github.com/uyuni-project/uyuni/commit/03e458704d22bcae292e3793286471642b1bc4a4", "committedDate": "2020-09-23T06:18:53Z", "message": "Warn user about missing hypervisor or libvirt binding\n\nThe user could add the virtualization entitlement and have none or part\nof the dependencies set up on the virtualization host. A message will\nindicate that the libvirt python binding (and thus the salt virt module)\nis missing.\n\nAlso warn the user if the KVM or Xen modules are not loaded. This could\nmean that they have been installed but the system still needs a reboot."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 987, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}