{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNTQwNzQx", "number": 2185, "title": "XMLRPC: Assign/retract mantenance schedules to/from systems  ", "bodyText": "What does this PR change?\n$subj\nThe assignment/retracting is implemented as a bulk operation for performance reasons.\nImplemented operations so far:\n\nlist systems with given schedule\nassign schedule to systems\nretract schedule from systems\n\nWhen user does not have permissions to involved systems -> an exception is thrown.\nReview commit-by-commit.\nTODO\n\n Perf tests on high number of systems (see below)\n Check the permissions checking again\n use faults in xmlrpc\n more tests\n\nPerf tests\nTested for 10k systems.\nCurrent implementation (bulk JPQL operations):\n\nassign/retract/list: 4s (all three operations together))\n\n1-by-1 naive implementation (loop)\nJust assign schedule takes ~20 seconds.\n// naive assignment via loop (takes ~20 seconds)\nlongIds.stream()\n    .map(id -> ServerFactory.lookupById(id))\n    .forEach(s -> s.setMaintenanceSchedule(schedule));\nGUI diff\nNo difference.\n\n DONE\n\nDocumentation\nCovered in API docs.\n\n DONE\n\nTest coverage\n\n\nUnit tests were added\n\n\n DONE\n\n\nLinks\nTracks SUSE/spacewalk#11273\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"ruby_rubocop\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-05-05T14:09:51Z", "url": "https://github.com/uyuni-project/uyuni/pull/2185", "merged": true, "mergeCommit": {"oid": "1847062730edfb510d5b5d3923cdeeed7db97a29"}, "closed": true, "closedAt": "2020-05-06T14:21:08Z", "author": {"login": "hustodemon"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcej82SgBqjMzMDczMTAzOTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcemmDZABqjMzMDc5Njg5OTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1b5c7364174116124d2c2ecb97d1e58bea7ed0e", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b1b5c7364174116124d2c2ecb97d1e58bea7ed0e", "committedDate": "2020-05-05T14:10:33Z", "message": "Changelog"}, "afterCommit": {"oid": "3cb7359afc7a9b0ec08eb90d5c6d51b06582cdc5", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3cb7359afc7a9b0ec08eb90d5c6d51b06582cdc5", "committedDate": "2020-05-06T07:56:45Z", "message": "Changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDUxNTI4", "url": "https://github.com/uyuni-project/uyuni/pull/2185#pullrequestreview-406451528", "createdAt": "2020-05-06T09:39:07Z", "commit": {"oid": "ee8371147299e2cc3d1de993c83bd5bad5fade0c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTozOTowN1rOGRLSbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTozOTowN1rOGRLSbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2MzkxNg==", "bodyText": "Hmm, shouldn't we better filter the systems which are not accessible for the user instead of throwing an exception? AFAIK we discussed it now in mumble.", "url": "https://github.com/uyuni-project/uyuni/pull/2185#discussion_r420663916", "createdAt": "2020-05-06T09:39:07Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -301,4 +309,103 @@ protected void manageAffectedScheduledActions(User user, MaintenanceSchedule sch\n             List<String> scheduleStrategy) {\n         // TODO: implement it\n     }\n+\n+    /**\n+     * Assign {@link MaintenanceSchedule} to given set of {@link Server}s.\n+     *\n+     * @param user the user\n+     * @param schedule the {@link MaintenanceSchedule}\n+     * @param systemIds the set of {@link Server} IDs\n+     * @throws PermissionException if the user does not have access to given servers\n+     * @throws IllegalArgumentException if systems have pending maintenance-only actions\n+     * @return the number of involved {@link Server}s\n+     */\n+    public int assignScheduleToSystems(User user, MaintenanceSchedule schedule, Set<Long> systemIds) {\n+        ensureOrgAdmin(user);\n+        ensureSystemsAccessible(user, systemIds);\n+        ensureScheduleAccessible(user, schedule);\n+\n+        Set<Long> withMaintenanceActions = ServerFactory.filterSystemsWithPendingMaintOnlyActions(systemIds);\n+        if (!withMaintenanceActions.isEmpty()) {\n+            throw new IllegalArgumentException(\"Systems have pending maintenance-only actions:\" +\n+                    withMaintenanceActions);\n+        }\n+\n+        return ServerFactory.setMaintenanceScheduleToSystems(schedule, systemIds);\n+    }\n+\n+    /**\n+     * Retract {@link MaintenanceSchedule} from given set of {@link Server}s.\n+     *\n+     * @param user the user\n+     * @param systemIds the set of {@link Server} IDs\n+     * @throws PermissionException if the user does not have access to given servers\n+     * @return the number of involved {@link Server}s\n+     */\n+    public int retractScheduleFromSystems(User user, Set<Long> systemIds) {\n+        ensureOrgAdmin(user);\n+        ensureSystemsAccessible(user, systemIds);\n+\n+        return ServerFactory.setMaintenanceScheduleToSystems(null, systemIds);\n+    }\n+\n+    /**\n+     * List {@link Server} IDs with given schedule\n+     *\n+     * @param user the user\n+     * @param schedule the schedule\n+     * @return the {@link Server} IDS with given schedule\n+     */\n+    public List<Long> listSystemIdsWithSchedule(User user, MaintenanceSchedule schedule) {\n+        ensureOrgAdmin(user);\n+        ensureScheduleAccessible(user, schedule);\n+\n+        List systemIds = getSession().createQuery(\n+                \"SELECT s.id from Server s \" +\n+                        \"WHERE s.maintenanceSchedule = :schedule\")\n+                .setParameter(\"schedule\", schedule)\n+                .list();\n+\n+        ensureSystemsAccessible(user, systemIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8371147299e2cc3d1de993c83bd5bad5fade0c"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "838ac39c85b4d1ad1c632b1263f94acfce247249", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/838ac39c85b4d1ad1c632b1263f94acfce247249", "committedDate": "2020-05-06T11:00:58Z", "message": "HibernateFactory.reload - no more need for unnecessary client casting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b66d891886c64fd7c6c28bab0197158b80b2e752", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b66d891886c64fd7c6c28bab0197158b80b2e752", "committedDate": "2020-05-06T11:00:58Z", "message": "Misc: Fix naming of existing method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6912cadf0b197d2f7c7771d84e7c9efafcdf5015", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6912cadf0b197d2f7c7771d84e7c9efafcdf5015", "committedDate": "2020-05-06T11:00:58Z", "message": "Misc: No need for public modifier in interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "682bb54c390fbced84cce091a15afc8032055c36", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/682bb54c390fbced84cce091a15afc8032055c36", "committedDate": "2020-05-06T11:00:58Z", "message": "Misc: Fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfbbf1d75096d45c620fbeea598ee8784ec21878", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/bfbbf1d75096d45c620fbeea598ee8784ec21878", "committedDate": "2020-05-06T11:00:58Z", "message": "Factory: Assigning/retracting maintenance schedules to/from systems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a660d118ae4828cab9212222e1c91ab1512f3a2b", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a660d118ae4828cab9212222e1c91ab1512f3a2b", "committedDate": "2020-05-06T11:00:58Z", "message": "Manager: Assigning/retracting maintenance schedules to/from systems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "191fc9210fc3afdb0e9834d452834b2300609a12", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/191fc9210fc3afdb0e9834d452834b2300609a12", "committedDate": "2020-05-06T11:00:58Z", "message": "XMLRPC: Assigning/retracting maintenance schedules to/from systems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9e2d9dafc27020de30f6f7a517e77b56686dffb", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b9e2d9dafc27020de30f6f7a517e77b56686dffb", "committedDate": "2020-05-06T11:01:17Z", "message": "Changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3cb7359afc7a9b0ec08eb90d5c6d51b06582cdc5", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3cb7359afc7a9b0ec08eb90d5c6d51b06582cdc5", "committedDate": "2020-05-06T07:56:45Z", "message": "Changelog"}, "afterCommit": {"oid": "b9e2d9dafc27020de30f6f7a517e77b56686dffb", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b9e2d9dafc27020de30f6f7a517e77b56686dffb", "committedDate": "2020-05-06T11:01:17Z", "message": "Changelog"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1417, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}