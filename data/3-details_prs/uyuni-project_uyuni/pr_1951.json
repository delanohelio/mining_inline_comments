{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDE3MDIw", "number": 1951, "title": "Recurring action hibernate entity", "bodyText": "What does this PR change?\nThe original PR was storing the data about recurring actions directly in rhnTaskoSchedule table. This had some serious drawbacks (the data is saved in form of serialized java objects and an effective querying is not possible).\nThis PR moves the data about the recurring action (everything except the cron string) to a separate hibernate entity.\nGUI diff\nNo difference.\n\n DONE\n\nDocumentation\n\n\nNo documentation needed: add explanation. This can't be used if there is a GUI diff\n\n\ndoc-susemanager PR or issue was created (GitHub automatic link expected below)\n\n\n DONE\n\n\nTest coverage\n\n\nUnit tests were added\n\n\n DONE\n\n\nLinks\nTracks SUSE/spacewalk#10793\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"ruby_rubocop\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-02-25T07:45:36Z", "url": "https://github.com/uyuni-project/uyuni/pull/1951", "merged": true, "mergeCommit": {"oid": "568f34f2bd943ab9f0e8808dc78f734594f991c8"}, "closed": true, "closedAt": "2020-03-04T16:55:09Z", "author": {"login": "parlt91"}, "timelineItems": {"totalCount": 80, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHtPXmABqjMwNjgzMDQ0MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKZa-egH2gAyMzc5NDE3MDIwOjNjZGY5ZmYwYzBlMDAyZmY2MWZiMzIzZjdiNzEzZmQ1YmUzNGMyNzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd60fe6e66de841021e5385876b2bdb367517e31", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/bd60fe6e66de841021e5385876b2bdb367517e31", "committedDate": "2020-02-24T16:29:15Z", "message": "[WIP] Add more JUnit tests\n\n`testListGroupRecurringAction` still failing\nNeed to catch LookupException.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "43657ca77bbbd6a9bb51711e939453aa3c671ed9", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/43657ca77bbbd6a9bb51711e939453aa3c671ed9", "committedDate": "2020-02-25T07:34:34Z", "message": "[WIP] Add more JUnit tests\n\n`testListGroupRecurringAction` still failing\nNeed to catch LookupException.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bf53b578d7db35cbbc354d2a51c076df9b51cfc", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4bf53b578d7db35cbbc354d2a51c076df9b51cfc", "committedDate": "2020-02-25T07:50:14Z", "message": "Create hibernate entity\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d39f807f0155fb17aeae497be2cef7786bd855b", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1d39f807f0155fb17aeae497be2cef7786bd855b", "committedDate": "2020-02-25T07:50:14Z", "message": "Add javadocs and create entity for groups/orgs\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43657ca77bbbd6a9bb51711e939453aa3c671ed9", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/43657ca77bbbd6a9bb51711e939453aa3c671ed9", "committedDate": "2020-02-25T07:34:34Z", "message": "[WIP] Add more JUnit tests\n\n`testListGroupRecurringAction` still failing\nNeed to catch LookupException.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "a8d0642fabf68c3f35dc41105506dfd8d9d0f5b7", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a8d0642fabf68c3f35dc41105506dfd8d9d0f5b7", "committedDate": "2020-02-25T07:50:14Z", "message": "[WIP] Add more JUnit tests\n\n`testListGroupRecurringAction` still failing\nNeed to catch LookupException.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTM1MDU2", "url": "https://github.com/uyuni-project/uyuni/pull/1951#pullrequestreview-363935056", "createdAt": "2020-02-25T08:07:50Z", "commit": {"oid": "a8d0642fabf68c3f35dc41105506dfd8d9d0f5b7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODowNzo1MFrOFt7_8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODowNzo1MFrOFt7_8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxMzI2Nw==", "bodyText": "postgresql syntax please.", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383713267", "createdAt": "2020-02-25T08:07:50Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/common/tables/suseRecurringAction.sql", "diffHunk": "@@ -0,0 +1,24 @@\n+CREATE TABLE suseRecurringAction\n+(\n+  id                number NOT NULL\n+                    CONSTRAINT suse_recurring_action_id_pk PRIMARY KEY,\n+  target_type        VARCHAR2(32) NOT NULL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d0642fabf68c3f35dc41105506dfd8d9d0f5b7"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8d0642fabf68c3f35dc41105506dfd8d9d0f5b7", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a8d0642fabf68c3f35dc41105506dfd8d9d0f5b7", "committedDate": "2020-02-25T07:50:14Z", "message": "[WIP] Add more JUnit tests\n\n`testListGroupRecurringAction` still failing\nNeed to catch LookupException.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8fb55f8d79b8b2bb580836a6968d9dd99a940933", "committedDate": "2020-02-25T09:06:43Z", "message": "Add JUnit tests\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDA3NjE4", "url": "https://github.com/uyuni-project/uyuni/pull/1951#pullrequestreview-364007618", "createdAt": "2020-02-25T09:56:42Z", "commit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo1Njo0MlrOFt_mww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoxMzoxOVrOFuALWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MjM1NQ==", "bodyText": "Nit: I'd suggest a clearer phrasing here. When I see Recurring Action group, then I think about groups of recurring actions, not about a recurring action for group. I'd be more for \"Recurring Action for server group implementation\", or similar.", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383772355", "createdAt": "2020-02-25T09:56:42Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/recurringactions/GroupRecurringAction.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.recurringactions;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.ServerGroup;\n+import com.redhat.rhn.domain.server.ServerGroupFactory;\n+\n+import com.suse.manager.utils.MinionServerUtils;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+\n+/**\n+ * Recurring Action group implementation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3Mjc0Mg==", "bodyText": "This could be simplified by using ServerGroupTestUtils.createManaged(user) to create a group.", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383772742", "createdAt": "2020-02-25T09:57:19Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/recurringactions/test/RecurringActionFactoryTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.redhat.rhn.domain.recurringactions.test;\n+\n+import com.redhat.rhn.domain.org.OrgFactory;\n+import com.redhat.rhn.domain.recurringactions.GroupRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.MinionRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.OrgRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.server.ServerGroupFactory;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+import com.redhat.rhn.testing.ServerGroupTestUtils;\n+import com.redhat.rhn.testing.TestUtils;\n+\n+import java.util.List;\n+\n+public class RecurringActionFactoryTest extends BaseTestCaseWithUser {\n+\n+    public void testListMinionRecurringAction() throws Exception {\n+        var action = new MinionRecurringAction();\n+        var minion = MinionServerFactoryTest.createTestMinionServer(user);\n+        action.setMinion(minion);\n+        RecurringActionFactory.save(action);\n+\n+        assertEquals(List.of(action), RecurringActionFactory.listMinionRecurringActions(minion.getId()));\n+    }\n+\n+    public void testListGroupRecurringAction() {\n+        var action = new GroupRecurringAction();\n+        var group = ServerGroupFactory.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MzU4MA==", "bodyText": "Small nitpick: using INSTANCE for singletons seems to be more frequent in the code. Consider using it too.", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383773580", "createdAt": "2020-02-25T09:58:45Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/manager/recurringactions/RecurringActionManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.manager.recurringactions;\n+\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.domain.recurringactions.GroupRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.MinionRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.OrgRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.MinionServerFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+import com.redhat.rhn.manager.system.ServerGroupManager;\n+import com.redhat.rhn.manager.system.SystemManager;\n+import com.redhat.rhn.taskomatic.TaskomaticApi;\n+import com.redhat.rhn.taskomatic.TaskomaticApiException;\n+\n+import java.util.List;\n+\n+/**\n+ * RecurringActionManager\n+ * @version $Rev$\n+ */\n+public class RecurringActionManager {\n+\n+    private static  TaskomaticApi taskomaticApi = new TaskomaticApi();\n+    private static final RecurringActionManager MANAGER = new RecurringActionManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MzkzNA==", "bodyText": "Nit: plural.", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383773934", "createdAt": "2020-02-25T09:59:17Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/recurringactions/test/RecurringActionFactoryTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.redhat.rhn.domain.recurringactions.test;\n+\n+import com.redhat.rhn.domain.org.OrgFactory;\n+import com.redhat.rhn.domain.recurringactions.GroupRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.MinionRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.OrgRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.server.ServerGroupFactory;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+import com.redhat.rhn.testing.ServerGroupTestUtils;\n+import com.redhat.rhn.testing.TestUtils;\n+\n+import java.util.List;\n+\n+public class RecurringActionFactoryTest extends BaseTestCaseWithUser {\n+\n+    public void testListMinionRecurringAction() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3NDQ5MA==", "bodyText": "Please use the plural in the name (as we do in the Factory class, after all): listMinionRecurringActions. The same goes for the rest of the list* methods in this class.", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383774490", "createdAt": "2020-02-25T10:00:12Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/manager/recurringactions/RecurringActionManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.manager.recurringactions;\n+\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.domain.recurringactions.GroupRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.MinionRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.OrgRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.MinionServerFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+import com.redhat.rhn.manager.system.ServerGroupManager;\n+import com.redhat.rhn.manager.system.SystemManager;\n+import com.redhat.rhn.taskomatic.TaskomaticApi;\n+import com.redhat.rhn.taskomatic.TaskomaticApiException;\n+\n+import java.util.List;\n+\n+/**\n+ * RecurringActionManager\n+ * @version $Rev$\n+ */\n+public class RecurringActionManager {\n+\n+    private static  TaskomaticApi taskomaticApi = new TaskomaticApi();\n+    private static final RecurringActionManager MANAGER = new RecurringActionManager();\n+\n+    /**\n+     * Set the {@link TaskomaticApi} instance to use. Only needed for unit tests.\n+     * @param taskomaticApiIn the {@link TaskomaticApi}\n+     */\n+    public static void setTaskomaticApi(TaskomaticApi taskomaticApiIn) {\n+        taskomaticApi = taskomaticApiIn;\n+    }\n+    /**\n+     * Singleton Instance to get manager object\n+     * @return an instance of the manager\n+     */\n+    public static RecurringActionManager getInstance() {\n+        return MANAGER;\n+    }\n+\n+    /**\n+     * Private constructor.\n+     */\n+    private RecurringActionManager() {\n+    }\n+\n+    /**\n+     * Create a new minion recurring action\n+     *\n+     * @param minionId id of the minion\n+     * @param cron the cron expression\n+     * @param testMode if test mode\n+     * @param active is is active\n+     * @param user the user\n+     * @throws TaskomaticApiException if TaskoSchedule creation fails\n+     */\n+    public static void createMinionRecurringAction(long minionId, String cron, boolean testMode,\n+                                                   boolean active, User user) throws TaskomaticApiException {\n+        if (!SystemManager.isAvailableToUser(user, minionId)) {\n+            throw new PermissionException(\"Minion not accessible to user\");\n+        }\n+        MinionServer minion = MinionServerFactory.lookupById(minionId)\n+                .orElseThrow(() -> new EntityNotExistsException(MinionServer.class, minionId));\n+        MinionRecurringAction action = new MinionRecurringAction(testMode, active, minion);\n+        RecurringActionFactory.save(action);\n+\n+        taskomaticApi.scheduleSatBunch(user, action.computeTaskoScheduleName(), \"recurring-state-apply-bunch\", cron);\n+    }\n+\n+    /**\n+     * List minion recurring action with minion id\n+     *\n+     * @param minionId id of the minion\n+     * @param user the user\n+     * @return list of minion recurring actions\n+     */\n+    public static List<MinionRecurringAction> listMinionRecurringAction(long minionId, User user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3NDc4OA==", "bodyText": "Please use plural here too.", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383774788", "createdAt": "2020-02-25T10:00:42Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/manager/recurringactions/test/RecurringActionManagerTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.redhat.rhn.manager.recurringactions.test;\n+\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.domain.org.Org;\n+import com.redhat.rhn.domain.recurringactions.GroupRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.MinionRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.OrgRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.domain.server.ManagedServerGroup;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+import com.redhat.rhn.manager.system.ServerGroupManager;\n+import com.redhat.rhn.taskomatic.TaskomaticApi;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+import com.redhat.rhn.testing.ServerGroupTestUtils;\n+import com.redhat.rhn.testing.UserTestUtils;\n+\n+import org.jmock.Expectations;\n+import org.jmock.Mockery;\n+import org.jmock.integration.junit3.JUnit3Mockery;\n+import org.jmock.lib.concurrent.Synchroniser;\n+import org.jmock.lib.legacy.ClassImposteriser;\n+\n+import java.util.List;\n+\n+public class RecurringActionManagerTest extends BaseTestCaseWithUser {\n+\n+    private static final Mockery CONTEXT = new JUnit3Mockery() {{\n+        setThreadingPolicy(new Synchroniser());\n+    }};\n+\n+    private Org anotherOrg;\n+    private User anotherUser;\n+\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        user.addPermanentRole(RoleFactory.ORG_ADMIN);\n+        anotherOrg = UserTestUtils.createNewOrgFull(\"anotherOrg\");\n+        anotherUser = UserTestUtils.createUser(\"anotherUser\", anotherOrg.getId());\n+    }\n+\n+    public void testCreateMinionRecurringAction() throws Exception {\n+        CONTEXT.setImposteriser(ClassImposteriser.INSTANCE);\n+        TaskomaticApi taskomaticMock = CONTEXT.mock(TaskomaticApi.class);\n+        RecurringActionManager.setTaskomaticApi(taskomaticMock);\n+\n+        var minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        CONTEXT.checking(new Expectations() { {\n+            allowing(taskomaticMock).scheduleSatBunch(with(any(User.class)), with(any(String.class)), with(any(String.class)), with(any(String.class)));\n+        } });\n+\n+        try {\n+            RecurringActionManager.createMinionRecurringAction(minion.getId(), \"\", false, false, anotherUser);\n+            fail(\"User shouldn't have access\");\n+        }\n+        catch (PermissionException e) {\n+            // no-op\n+        }\n+\n+        RecurringActionManager.createMinionRecurringAction(minion.getId(), \"\", false, false, user);\n+        assertNotEmpty(RecurringActionFactory.listMinionRecurringActions(minion.getId()));\n+    }\n+\n+    public void testListMinionRecurringAction() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3NjM3Nw==", "bodyText": "You could pass the cause exception to the newly created PermissionException as follows:\nPermissionException(\"User does not have access to group\", e);", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383776377", "createdAt": "2020-02-25T10:03:33Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/manager/recurringactions/RecurringActionManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.manager.recurringactions;\n+\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.domain.recurringactions.GroupRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.MinionRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.OrgRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.MinionServerFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+import com.redhat.rhn.manager.system.ServerGroupManager;\n+import com.redhat.rhn.manager.system.SystemManager;\n+import com.redhat.rhn.taskomatic.TaskomaticApi;\n+import com.redhat.rhn.taskomatic.TaskomaticApiException;\n+\n+import java.util.List;\n+\n+/**\n+ * RecurringActionManager\n+ * @version $Rev$\n+ */\n+public class RecurringActionManager {\n+\n+    private static  TaskomaticApi taskomaticApi = new TaskomaticApi();\n+    private static final RecurringActionManager MANAGER = new RecurringActionManager();\n+\n+    /**\n+     * Set the {@link TaskomaticApi} instance to use. Only needed for unit tests.\n+     * @param taskomaticApiIn the {@link TaskomaticApi}\n+     */\n+    public static void setTaskomaticApi(TaskomaticApi taskomaticApiIn) {\n+        taskomaticApi = taskomaticApiIn;\n+    }\n+    /**\n+     * Singleton Instance to get manager object\n+     * @return an instance of the manager\n+     */\n+    public static RecurringActionManager getInstance() {\n+        return MANAGER;\n+    }\n+\n+    /**\n+     * Private constructor.\n+     */\n+    private RecurringActionManager() {\n+    }\n+\n+    /**\n+     * Create a new minion recurring action\n+     *\n+     * @param minionId id of the minion\n+     * @param cron the cron expression\n+     * @param testMode if test mode\n+     * @param active is is active\n+     * @param user the user\n+     * @throws TaskomaticApiException if TaskoSchedule creation fails\n+     */\n+    public static void createMinionRecurringAction(long minionId, String cron, boolean testMode,\n+                                                   boolean active, User user) throws TaskomaticApiException {\n+        if (!SystemManager.isAvailableToUser(user, minionId)) {\n+            throw new PermissionException(\"Minion not accessible to user\");\n+        }\n+        MinionServer minion = MinionServerFactory.lookupById(minionId)\n+                .orElseThrow(() -> new EntityNotExistsException(MinionServer.class, minionId));\n+        MinionRecurringAction action = new MinionRecurringAction(testMode, active, minion);\n+        RecurringActionFactory.save(action);\n+\n+        taskomaticApi.scheduleSatBunch(user, action.computeTaskoScheduleName(), \"recurring-state-apply-bunch\", cron);\n+    }\n+\n+    /**\n+     * List minion recurring action with minion id\n+     *\n+     * @param minionId id of the minion\n+     * @param user the user\n+     * @return list of minion recurring actions\n+     */\n+    public static List<MinionRecurringAction> listMinionRecurringAction(long minionId, User user) {\n+        if (!SystemManager.isAvailableToUser(user, minionId)) {\n+            throw new PermissionException(\"Minion not accessible to user\");\n+        }\n+        return RecurringActionFactory.listMinionRecurringActions(minionId);\n+    }\n+\n+    /**\n+     * List group recurring action with group id\n+     *\n+     * @param groupId id of the group\n+     * @param user the user\n+     * @return list of group recurring actions\n+     */\n+    public static List<GroupRecurringAction> listGroupRecurringAction(long groupId, User user) {\n+        ServerGroupManager groupManager = ServerGroupManager.getInstance();\n+        if (!user.hasRole(RoleFactory.SYSTEM_GROUP_ADMIN)) {\n+            throw new PermissionException(\"User does not have access to group\");\n+        }\n+        try {\n+            groupManager.lookup(groupId, user);\n+            return RecurringActionFactory.listGroupRecurringActions(groupId);\n+        }\n+        catch (LookupException e) {\n+            throw new PermissionException(\"User does not have access to group\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3OTY1Nw==", "bodyText": "Hmm, I think the presence lookup could confuse the readers a bit. Could you add here an explicit comment, that we're doing it for permission checking?", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383779657", "createdAt": "2020-02-25T10:09:26Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/manager/recurringactions/RecurringActionManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.manager.recurringactions;\n+\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.domain.recurringactions.GroupRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.MinionRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.OrgRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.MinionServerFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+import com.redhat.rhn.manager.system.ServerGroupManager;\n+import com.redhat.rhn.manager.system.SystemManager;\n+import com.redhat.rhn.taskomatic.TaskomaticApi;\n+import com.redhat.rhn.taskomatic.TaskomaticApiException;\n+\n+import java.util.List;\n+\n+/**\n+ * RecurringActionManager\n+ * @version $Rev$\n+ */\n+public class RecurringActionManager {\n+\n+    private static  TaskomaticApi taskomaticApi = new TaskomaticApi();\n+    private static final RecurringActionManager MANAGER = new RecurringActionManager();\n+\n+    /**\n+     * Set the {@link TaskomaticApi} instance to use. Only needed for unit tests.\n+     * @param taskomaticApiIn the {@link TaskomaticApi}\n+     */\n+    public static void setTaskomaticApi(TaskomaticApi taskomaticApiIn) {\n+        taskomaticApi = taskomaticApiIn;\n+    }\n+    /**\n+     * Singleton Instance to get manager object\n+     * @return an instance of the manager\n+     */\n+    public static RecurringActionManager getInstance() {\n+        return MANAGER;\n+    }\n+\n+    /**\n+     * Private constructor.\n+     */\n+    private RecurringActionManager() {\n+    }\n+\n+    /**\n+     * Create a new minion recurring action\n+     *\n+     * @param minionId id of the minion\n+     * @param cron the cron expression\n+     * @param testMode if test mode\n+     * @param active is is active\n+     * @param user the user\n+     * @throws TaskomaticApiException if TaskoSchedule creation fails\n+     */\n+    public static void createMinionRecurringAction(long minionId, String cron, boolean testMode,\n+                                                   boolean active, User user) throws TaskomaticApiException {\n+        if (!SystemManager.isAvailableToUser(user, minionId)) {\n+            throw new PermissionException(\"Minion not accessible to user\");\n+        }\n+        MinionServer minion = MinionServerFactory.lookupById(minionId)\n+                .orElseThrow(() -> new EntityNotExistsException(MinionServer.class, minionId));\n+        MinionRecurringAction action = new MinionRecurringAction(testMode, active, minion);\n+        RecurringActionFactory.save(action);\n+\n+        taskomaticApi.scheduleSatBunch(user, action.computeTaskoScheduleName(), \"recurring-state-apply-bunch\", cron);\n+    }\n+\n+    /**\n+     * List minion recurring action with minion id\n+     *\n+     * @param minionId id of the minion\n+     * @param user the user\n+     * @return list of minion recurring actions\n+     */\n+    public static List<MinionRecurringAction> listMinionRecurringAction(long minionId, User user) {\n+        if (!SystemManager.isAvailableToUser(user, minionId)) {\n+            throw new PermissionException(\"Minion not accessible to user\");\n+        }\n+        return RecurringActionFactory.listMinionRecurringActions(minionId);\n+    }\n+\n+    /**\n+     * List group recurring action with group id\n+     *\n+     * @param groupId id of the group\n+     * @param user the user\n+     * @return list of group recurring actions\n+     */\n+    public static List<GroupRecurringAction> listGroupRecurringAction(long groupId, User user) {\n+        ServerGroupManager groupManager = ServerGroupManager.getInstance();\n+        if (!user.hasRole(RoleFactory.SYSTEM_GROUP_ADMIN)) {\n+            throw new PermissionException(\"User does not have access to group\");\n+        }\n+        try {\n+            groupManager.lookup(groupId, user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4MDM4MA==", "bodyText": "Suggestion: instead of isAvailableUser, we could use ensureAvailableToUser. With this we'll get a more detailed exception info:\n        try {\n            SystemManager.ensureAvailableToUser(user, minionId);\n        }\n        catch (LookupException e) {\n            throw new PermissionException(\"Minion not accessible to user\", e);\n        }", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383780380", "createdAt": "2020-02-25T10:10:49Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/manager/recurringactions/RecurringActionManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.manager.recurringactions;\n+\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.domain.recurringactions.GroupRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.MinionRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.OrgRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.MinionServerFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+import com.redhat.rhn.manager.system.ServerGroupManager;\n+import com.redhat.rhn.manager.system.SystemManager;\n+import com.redhat.rhn.taskomatic.TaskomaticApi;\n+import com.redhat.rhn.taskomatic.TaskomaticApiException;\n+\n+import java.util.List;\n+\n+/**\n+ * RecurringActionManager\n+ * @version $Rev$\n+ */\n+public class RecurringActionManager {\n+\n+    private static  TaskomaticApi taskomaticApi = new TaskomaticApi();\n+    private static final RecurringActionManager MANAGER = new RecurringActionManager();\n+\n+    /**\n+     * Set the {@link TaskomaticApi} instance to use. Only needed for unit tests.\n+     * @param taskomaticApiIn the {@link TaskomaticApi}\n+     */\n+    public static void setTaskomaticApi(TaskomaticApi taskomaticApiIn) {\n+        taskomaticApi = taskomaticApiIn;\n+    }\n+    /**\n+     * Singleton Instance to get manager object\n+     * @return an instance of the manager\n+     */\n+    public static RecurringActionManager getInstance() {\n+        return MANAGER;\n+    }\n+\n+    /**\n+     * Private constructor.\n+     */\n+    private RecurringActionManager() {\n+    }\n+\n+    /**\n+     * Create a new minion recurring action\n+     *\n+     * @param minionId id of the minion\n+     * @param cron the cron expression\n+     * @param testMode if test mode\n+     * @param active is is active\n+     * @param user the user\n+     * @throws TaskomaticApiException if TaskoSchedule creation fails\n+     */\n+    public static void createMinionRecurringAction(long minionId, String cron, boolean testMode,\n+                                                   boolean active, User user) throws TaskomaticApiException {\n+        if (!SystemManager.isAvailableToUser(user, minionId)) {\n+            throw new PermissionException(\"Minion not accessible to user\");\n+        }\n+        MinionServer minion = MinionServerFactory.lookupById(minionId)\n+                .orElseThrow(() -> new EntityNotExistsException(MinionServer.class, minionId));\n+        MinionRecurringAction action = new MinionRecurringAction(testMode, active, minion);\n+        RecurringActionFactory.save(action);\n+\n+        taskomaticApi.scheduleSatBunch(user, action.computeTaskoScheduleName(), \"recurring-state-apply-bunch\", cron);\n+    }\n+\n+    /**\n+     * List minion recurring action with minion id\n+     *\n+     * @param minionId id of the minion\n+     * @param user the user\n+     * @return list of minion recurring actions\n+     */\n+    public static List<MinionRecurringAction> listMinionRecurringAction(long minionId, User user) {\n+        if (!SystemManager.isAvailableToUser(user, minionId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4MTcyMA==", "bodyText": "This doesn't seem to be needed, as it's done in setUp already.", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383781720", "createdAt": "2020-02-25T10:13:19Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/manager/recurringactions/test/RecurringActionManagerTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.redhat.rhn.manager.recurringactions.test;\n+\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.domain.org.Org;\n+import com.redhat.rhn.domain.recurringactions.GroupRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.MinionRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.OrgRecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.domain.server.ManagedServerGroup;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+import com.redhat.rhn.manager.system.ServerGroupManager;\n+import com.redhat.rhn.taskomatic.TaskomaticApi;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+import com.redhat.rhn.testing.ServerGroupTestUtils;\n+import com.redhat.rhn.testing.UserTestUtils;\n+\n+import org.jmock.Expectations;\n+import org.jmock.Mockery;\n+import org.jmock.integration.junit3.JUnit3Mockery;\n+import org.jmock.lib.concurrent.Synchroniser;\n+import org.jmock.lib.legacy.ClassImposteriser;\n+\n+import java.util.List;\n+\n+public class RecurringActionManagerTest extends BaseTestCaseWithUser {\n+\n+    private static final Mockery CONTEXT = new JUnit3Mockery() {{\n+        setThreadingPolicy(new Synchroniser());\n+    }};\n+\n+    private Org anotherOrg;\n+    private User anotherUser;\n+\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        user.addPermanentRole(RoleFactory.ORG_ADMIN);\n+        anotherOrg = UserTestUtils.createNewOrgFull(\"anotherOrg\");\n+        anotherUser = UserTestUtils.createUser(\"anotherUser\", anotherOrg.getId());\n+    }\n+\n+    public void testCreateMinionRecurringAction() throws Exception {\n+        CONTEXT.setImposteriser(ClassImposteriser.INSTANCE);\n+        TaskomaticApi taskomaticMock = CONTEXT.mock(TaskomaticApi.class);\n+        RecurringActionManager.setTaskomaticApi(taskomaticMock);\n+\n+        var minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        CONTEXT.checking(new Expectations() { {\n+            allowing(taskomaticMock).scheduleSatBunch(with(any(User.class)), with(any(String.class)), with(any(String.class)), with(any(String.class)));\n+        } });\n+\n+        try {\n+            RecurringActionManager.createMinionRecurringAction(minion.getId(), \"\", false, false, anotherUser);\n+            fail(\"User shouldn't have access\");\n+        }\n+        catch (PermissionException e) {\n+            // no-op\n+        }\n+\n+        RecurringActionManager.createMinionRecurringAction(minion.getId(), \"\", false, false, user);\n+        assertNotEmpty(RecurringActionFactory.listMinionRecurringActions(minion.getId()));\n+    }\n+\n+    public void testListMinionRecurringAction() throws Exception {\n+        var minion = MinionServerFactoryTest.createTestMinionServer(user);\n+        var action = new MinionRecurringAction();\n+        action.setMinion(minion);\n+        RecurringActionFactory.save(action);\n+\n+        assertEquals(List.of(action), RecurringActionManager.listMinionRecurringAction(minion.getId(), user));\n+\n+        try{\n+            RecurringActionManager.listMinionRecurringAction(minion.getId(), anotherUser);\n+            fail(\"User shouldn't have access\");\n+        }\n+        catch (PermissionException e) {\n+            // no-op\n+        }\n+    }\n+\n+    public void testListGroupRecurringAction() throws Exception {\n+        ServerGroupManager manager = ServerGroupManager.getInstance();\n+        ManagedServerGroup group = ServerGroupTestUtils.createManaged(user);\n+\n+        var action = new GroupRecurringAction();\n+        action.setGroup(group);\n+        RecurringActionFactory.save(action);\n+\n+        assertTrue(manager.canAccess(user, group));\n+        assertEquals(List.of(action), RecurringActionManager.listGroupRecurringAction(group.getId(), user));\n+\n+        try{\n+            RecurringActionManager.listGroupRecurringAction(group.getId(), anotherUser);\n+            fail(\"User shouldn't have access\");\n+        }\n+        catch (PermissionException e) {\n+            // no-op\n+        }\n+    }\n+\n+    public void testListOrgRecurringAction() throws Exception {\n+        var action = new OrgRecurringAction();\n+        action.setOrg(user.getOrg());\n+        RecurringActionFactory.save(action);\n+\n+        UserTestUtils.addUserRole(user, RoleFactory.ORG_ADMIN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9b58fe8426dca58cada5bbd4e1b13489cd6a496", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a9b58fe8426dca58cada5bbd4e1b13489cd6a496", "committedDate": "2020-02-25T11:04:21Z", "message": "Add JUnit tests\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fb55f8d79b8b2bb580836a6968d9dd99a940933", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8fb55f8d79b8b2bb580836a6968d9dd99a940933", "committedDate": "2020-02-25T09:06:43Z", "message": "Add JUnit tests\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "a9b58fe8426dca58cada5bbd4e1b13489cd6a496", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a9b58fe8426dca58cada5bbd4e1b13489cd6a496", "committedDate": "2020-02-25T11:04:21Z", "message": "Add JUnit tests\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a000330c33dd3be1c7be8cf9ac114a81a316024a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a000330c33dd3be1c7be8cf9ac114a81a316024a", "committedDate": "2020-02-25T11:50:37Z", "message": "Use boxed Long for RecurringAction entity ID"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTI2MTY4", "url": "https://github.com/uyuni-project/uyuni/pull/1951#pullrequestreview-364126168", "createdAt": "2020-02-25T13:09:36Z", "commit": {"oid": "e0ce6a9cec53c6e1fbbe797ee859444cbd3d1ab6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzowOTozN1rOFuFaKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzowOTozN1rOFuFaKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2NzQzMg==", "bodyText": "There is two testListMinionRecurringActions tests. We should alter the existing one", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r383867432", "createdAt": "2020-02-25T13:09:37Z", "author": {"login": "parlt91"}, "path": "java/code/src/com/redhat/rhn/domain/recurringactions/test/RecurringActionFactoryTest.java", "diffHunk": "@@ -23,7 +23,43 @@ public void testListMinionRecurringActions() throws Exception {\n         assertEquals(List.of(action), RecurringActionFactory.listMinionRecurringActions(minion.getId()));\n     }\n \n-    public void testListGroupRecurringActions() {\n+    public void testListMinionRecurringActions() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ce6a9cec53c6e1fbbe797ee859444cbd3d1ab6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a03e06be1b98f6b340319cbc8dedbe702813404e", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a03e06be1b98f6b340319cbc8dedbe702813404e", "committedDate": "2020-02-25T14:01:47Z", "message": "Implement generating the taskomatic schedule label for recurring actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24e9672b1851b3f81478fd72c5fa962358f38575", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/24e9672b1851b3f81478fd72c5fa962358f38575", "committedDate": "2020-02-25T14:01:48Z", "message": "Add creator User to RecurringAction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06dcfa8ff5316d19a6d271ccb567ceaaed178d70", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/06dcfa8ff5316d19a6d271ccb567ceaaed178d70", "committedDate": "2020-02-25T14:01:48Z", "message": "Migration for suseRecurringAction table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bede395de648bee8dc106d8fdceb9f0fc0a2323", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3bede395de648bee8dc106d8fdceb9f0fc0a2323", "committedDate": "2020-02-25T14:01:48Z", "message": "Recurring actions execution in taskomatic using hibernate entity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3d7758da1aa53469e56312c5492f1e1ec5ff642", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d3d7758da1aa53469e56312c5492f1e1ec5ff642", "committedDate": "2020-02-25T14:01:49Z", "message": "Postgres syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90a8f4f066de6fb0ab7033cee8e9170081a5dd55", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/90a8f4f066de6fb0ab7033cee8e9170081a5dd55", "committedDate": "2020-02-25T12:15:12Z", "message": "Postgres syntax"}, "afterCommit": {"oid": "d3d7758da1aa53469e56312c5492f1e1ec5ff642", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d3d7758da1aa53469e56312c5492f1e1ec5ff642", "committedDate": "2020-02-25T14:01:49Z", "message": "Postgres syntax"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d1367eb580509cbf5187bf915ff78d7ff3b4d6", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/41d1367eb580509cbf5187bf915ff78d7ff3b4d6", "committedDate": "2020-02-25T14:05:11Z", "message": "Add name attribute to RecurringAction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efe9d2e88b51c35af4f8d0c5683db9dcb90bbd4d", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/efe9d2e88b51c35af4f8d0c5683db9dcb90bbd4d", "committedDate": "2020-02-25T14:21:13Z", "message": "Create unique index for Recurring Action names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c526f984f307dd8db1b1b885c040d88d4eca7c8a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c526f984f307dd8db1b1b885c040d88d4eca7c8a", "committedDate": "2020-02-25T14:35:05Z", "message": "Implement toString for RecurringAction implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2760252bf0e6bbf8a259bf3d25bf7d500c48d0dc", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2760252bf0e6bbf8a259bf3d25bf7d500c48d0dc", "committedDate": "2020-02-25T14:59:39Z", "message": "Move recurring action related code to its own controller\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a526958c884e89633cb62c0c552cf4571a0f9f1", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2a526958c884e89633cb62c0c552cf4571a0f9f1", "committedDate": "2020-02-26T09:31:55Z", "message": "Use own API endpoint for recurring actions\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60d8380a81f75a6885da65c6a6372ccf4dcebd71", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/60d8380a81f75a6885da65c6a6372ccf4dcebd71", "committedDate": "2020-02-26T11:16:13Z", "message": "Make hibernate manager class non singleton\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6357aadf7767994d095f3b4ebac3bfed54bd0fc2", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6357aadf7767994d095f3b4ebac3bfed54bd0fc2", "committedDate": "2020-02-26T15:32:54Z", "message": "wip: hook the hibernate entities with the frontend controller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4694ccd820c8a890c47de49b3bb61e180a4e830", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a4694ccd820c8a890c47de49b3bb61e180a4e830", "committedDate": "2020-02-27T12:26:53Z", "message": "wip: hook the hibernate entities with the frontend controller\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49bd5c249d68e9325f7986739aff9cbc464d612c", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/49bd5c249d68e9325f7986739aff9cbc464d612c", "committedDate": "2020-02-27T11:50:59Z", "message": "wip: hook the hibernate entities with the frontend controller\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "a4694ccd820c8a890c47de49b3bb61e180a4e830", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a4694ccd820c8a890c47de49b3bb61e180a4e830", "committedDate": "2020-02-27T12:26:53Z", "message": "wip: hook the hibernate entities with the frontend controller\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34d3c45f72b176a7316f2a96c82322ed1535fa5e", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/34d3c45f72b176a7316f2a96c82322ed1535fa5e", "committedDate": "2020-02-27T16:50:58Z", "message": "Rename RecurringAction.TYPE enum to Type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68e3f47e66e37f99048c9b575c2913d59103bca8", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/68e3f47e66e37f99048c9b575c2913d59103bca8", "committedDate": "2020-02-27T16:50:58Z", "message": "[wip] Make the recurring schedule work for minions again\n\n(still some todos to be addressed)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9046f9f842b53d5caec7bc76d90d2987b6aebe0", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b9046f9f842b53d5caec7bc76d90d2987b6aebe0", "committedDate": "2020-02-27T16:50:58Z", "message": "Add cron expression to RecurringAction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae212165c7214f971ed96a365c2b7db1fdeabcb0", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ae212165c7214f971ed96a365c2b7db1fdeabcb0", "committedDate": "2020-02-27T16:50:58Z", "message": "Utilize the cronExpr from RecurringAction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb73ccacf5d215dce8821a9a96351a130b18eee", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4fb73ccacf5d215dce8821a9a96351a130b18eee", "committedDate": "2020-02-27T16:50:58Z", "message": "RecurringAction extends BaseDomainHelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "675a7cfb1d330449cea9dfb337a5fb06566582c6", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/675a7cfb1d330449cea9dfb337a5fb06566582c6", "committedDate": "2020-02-27T16:50:59Z", "message": "Recurring Action name can't be null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f36af294b25eff28778fd1d548c688b06984d233", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f36af294b25eff28778fd1d548c688b06984d233", "committedDate": "2020-02-27T16:50:59Z", "message": "Implement RecurringAction.getEntityId() to get the entity id for the frontend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "495bf94303b03736275e034e7980228e6c423f6b", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/495bf94303b03736275e034e7980228e6c423f6b", "committedDate": "2020-02-27T16:50:59Z", "message": "Make the Recurring Action create,read and update operations work for the Org and Server Group too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13f4e44e350a240e819ebe6119d31858ac4a6c59", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/13f4e44e350a240e819ebe6119d31858ac4a6c59", "committedDate": "2020-02-28T08:56:40Z", "message": "Revert the TaskomaticApi changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fb8c995ac37081546288f006023b5ec48616984", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8fb8c995ac37081546288f006023b5ec48616984", "committedDate": "2020-02-28T09:40:59Z", "message": "Implement permission checking for scheduling Recurring Actions via Taskomatic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1db2dc9a52473b497fc7d057a43436dc545f1436", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1db2dc9a52473b497fc7d057a43436dc545f1436", "committedDate": "2020-02-28T09:41:22Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d66067e49a87c83f29d75da4feadfe5fd75ebc92", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d66067e49a87c83f29d75da4feadfe5fd75ebc92", "committedDate": "2020-02-28T11:41:20Z", "message": "Add delete action to Factory\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93156b78302872027e6cc73d36f3bf91b57933cb", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/93156b78302872027e6cc73d36f3bf91b57933cb", "committedDate": "2020-02-28T11:41:26Z", "message": "Add permission checking for unscheduling recurring actions to taskomatic\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "645c11e4caaf3f7d97ac50f72901c04075387e4e", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/645c11e4caaf3f7d97ac50f72901c04075387e4e", "committedDate": "2020-02-28T11:41:26Z", "message": "Add function to unschedule/delete recurring actions\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adaaaf0d48db1abb48b6a78196c6f9e108010eba", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/adaaaf0d48db1abb48b6a78196c6f9e108010eba", "committedDate": "2020-02-28T14:47:12Z", "message": "Implement delete operation\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "585260706cdda3a9c18f16e76ebd8aace1f1c27a", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/585260706cdda3a9c18f16e76ebd8aace1f1c27a", "committedDate": "2020-02-28T13:03:45Z", "message": "Implement delete operation\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "adaaaf0d48db1abb48b6a78196c6f9e108010eba", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/adaaaf0d48db1abb48b6a78196c6f9e108010eba", "committedDate": "2020-02-28T14:47:12Z", "message": "Implement delete operation\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e863a71666505906b863709dec8ea531e4d756a", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1e863a71666505906b863709dec8ea531e4d756a", "committedDate": "2020-02-28T15:13:40Z", "message": "Display schedule creation date in schedule details page\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8669a19ea16523207ba9725dc8d61ff780cf2d4f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8669a19ea16523207ba9725dc8d61ff780cf2d4f", "committedDate": "2020-02-28T16:05:06Z", "message": "Implement hashCode & equals for RecurringAction subclasses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f74f0a4e4379b03513a34e4eef75e88066a3ae9", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0f74f0a4e4379b03513a34e4eef75e88066a3ae9", "committedDate": "2020-03-02T14:11:09Z", "message": "Implement lookup RecurringAction based on other entity attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a47492c3db3ce124a809199aa454b56e49b55bb", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7a47492c3db3ce124a809199aa454b56e49b55bb", "committedDate": "2020-03-02T14:11:44Z", "message": "Implement getType for RecurringAction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36045c9a390e80a32f6bcf53ce39675c49ce6715", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/36045c9a390e80a32f6bcf53ce39675c49ce6715", "committedDate": "2020-03-02T14:12:17Z", "message": "RecurringStateApplyJob: log with debug level, when action was skipped (previously info level was used)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2d26c2869e49c2a977cd38927c64fef39ca23a1", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c2d26c2869e49c2a977cd38927c64fef39ca23a1", "committedDate": "2020-03-02T14:16:01Z", "message": "HACK: Allow displaying messages from backend\n\nThis should be written in a clearer way."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "659044e36dd49310c639bb892f09ae5f7f78c6cb", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/659044e36dd49310c639bb892f09ae5f7f78c6cb", "committedDate": "2020-02-28T16:06:45Z", "message": "wip: Validate recurring action name uniqueness"}, "afterCommit": {"oid": "c2d26c2869e49c2a977cd38927c64fef39ca23a1", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c2d26c2869e49c2a977cd38927c64fef39ca23a1", "committedDate": "2020-03-02T14:16:01Z", "message": "HACK: Allow displaying messages from backend\n\nThis should be written in a clearer way."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3243daf43ded914d7796a2d4ab786e273bcb6ec8", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3243daf43ded914d7796a2d4ab786e273bcb6ec8", "committedDate": "2020-03-02T14:39:45Z", "message": "DB index on suseRecurringAction.target_type column"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5463bd9639913661fcde1f85b05f043a39258d58", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5463bd9639913661fcde1f85b05f043a39258d58", "committedDate": "2020-03-02T14:53:30Z", "message": "Clean up controller code\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ab20613869a762b873163d4f1fc955d2f40ec6c", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3ab20613869a762b873163d4f1fc955d2f40ec6c", "committedDate": "2020-03-02T15:48:44Z", "message": "Remove unused frontend code\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b471b9bc90905548fd5c03f599704fa2355b84aa", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b471b9bc90905548fd5c03f599704fa2355b84aa", "committedDate": "2020-03-03T07:37:01Z", "message": "Initialize recurring-event-picker\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b54dc64ca1f38a7a30af58513d09aa8c3df71087", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b54dc64ca1f38a7a30af58513d09aa8c3df71087", "committedDate": "2020-03-02T16:23:48Z", "message": "Initialize recurring-event-picker\n\nMake sure the picker has default values in case the user\ndirectly presses the submit button.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "b471b9bc90905548fd5c03f599704fa2355b84aa", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b471b9bc90905548fd5c03f599704fa2355b84aa", "committedDate": "2020-03-03T07:37:01Z", "message": "Initialize recurring-event-picker\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "419c4b6d5b34294faf6797a331be9b9e903ca5dc", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/419c4b6d5b34294faf6797a331be9b9e903ca5dc", "committedDate": "2020-03-03T08:59:15Z", "message": "Fix first Custom Quartz format char not being able to be deleted\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dba49d34a656978e528bee3c633dbc8cc2a642ac", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/dba49d34a656978e528bee3c633dbc8cc2a642ac", "committedDate": "2020-03-03T09:59:04Z", "message": "Add Recurring States translation strings\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4e4737629023f2aad6f2c854f1b281efbb8a362", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a4e4737629023f2aad6f2c854f1b281efbb8a362", "committedDate": "2020-03-03T10:12:01Z", "message": "Minor: extract create/lookup action to a standalone method for better readability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "219743ec5eb25db2bd8c7b23bb0e715740629fd8", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/219743ec5eb25db2bd8c7b23bb0e715740629fd8", "committedDate": "2020-03-03T10:12:01Z", "message": "Drop SSM support for Recurring Actions for now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecd73b9183fc5b7b648c80d333e652962cf1e6ae", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ecd73b9183fc5b7b648c80d333e652962cf1e6ae", "committedDate": "2020-03-03T10:18:47Z", "message": "Address TODOs\n\nMany TODOs were just no-op."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9445aa0cd9d3137c8daa510bbdf1b4573c18ba7c", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9445aa0cd9d3137c8daa510bbdf1b4573c18ba7c", "committedDate": "2020-03-03T10:23:38Z", "message": "Fix test: Previously we expected an ordered list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f9df5a5a02b3697cbe8d3b185a7760a22d7ac1", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/18f9df5a5a02b3697cbe8d3b185a7760a22d7ac1", "committedDate": "2020-03-03T10:24:09Z", "message": "Minor: address most annoying checkstyle issues in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d68a1557e20f093516fae84d2fa73300e544a2", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f6d68a1557e20f093516fae84d2fa73300e544a2", "committedDate": "2020-03-03T11:50:31Z", "message": "Add UI warning that picked times are in server timezone\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3638e48484d57c9a51ed751df9b330380d391aeb", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3638e48484d57c9a51ed751df9b330380d391aeb", "committedDate": "2020-03-03T12:40:03Z", "message": "Refactor recurring-event-picker\n\nRemove the active slider\nMake input fields half size\nMake hourly picker up/down instead of dropdown\nAdd example placeholder for custom cron string\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c89a4ae5696585cbe471fe888b1bdeceba8c5fe7", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c89a4ae5696585cbe471fe888b1bdeceba8c5fe7", "committedDate": "2020-03-03T14:03:55Z", "message": "Mark scheduleName as mandatory in the UI\n\nMake use of the Form component\nPossibly expand usage to other fields in future?\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "600145eb736d3f640e4243e3734bcfe3d923f570", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/600145eb736d3f640e4243e3734bcfe3d923f570", "committedDate": "2020-03-03T16:30:42Z", "message": "Fix: List actions in the same order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "788a7dff759217adacbfe498b3dc9f7f0e83d5c0", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/788a7dff759217adacbfe498b3dc9f7f0e83d5c0", "committedDate": "2020-03-03T16:30:42Z", "message": "Implement listing of all Recurring Actions visible to user"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a856a999d2d4cac4efcc9069cd5e8bc50aad1330", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a856a999d2d4cac4efcc9069cd5e8bc50aad1330", "committedDate": "2020-03-04T09:22:42Z", "message": "More descriptive exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "163e7120edf6d9a3d848369f5328f8712087f451", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/163e7120edf6d9a3d848369f5328f8712087f451", "committedDate": "2020-03-04T09:55:36Z", "message": "Fix the permission check for OrgRecurringAction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33060d096861e22415dac2d07d2233ccc5bf7ea5", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/33060d096861e22415dac2d07d2233ccc5bf7ea5", "committedDate": "2020-03-04T10:03:01Z", "message": "Fix: Edit schedules in list of all schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c86ccf35086a5919d094fb165e9b50457748a07", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2c86ccf35086a5919d094fb165e9b50457748a07", "committedDate": "2020-03-04T10:09:08Z", "message": "Make `InnerPanel` buttonsLeft prop optional\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd7453b9b5327e092a1a272a0415e971b73c16e4", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fd7453b9b5327e092a1a272a0415e971b73c16e4", "committedDate": "2020-03-04T10:35:41Z", "message": "Hide recurring schedule create button for SSM\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6003577e55e14d6dd15d65702e2178c938edf22e", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6003577e55e14d6dd15d65702e2178c938edf22e", "committedDate": "2020-03-04T11:34:35Z", "message": "Fix: Admin>Organizations breadcrumb not showing for recurring states\n\nCleanup unneeded imports in MenuTree.java\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzI5MTAw", "url": "https://github.com/uyuni-project/uyuni/pull/1951#pullrequestreview-368729100", "createdAt": "2020-03-04T12:16:25Z", "commit": {"oid": "6003577e55e14d6dd15d65702e2178c938edf22e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjoxNjoyNVrOFxq-dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjoxNjoyNVrOFxq-dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYyODY2Mg==", "bodyText": "please update the Year", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r387628662", "createdAt": "2020-03-04T12:16:25Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/webui/controllers/RecurringActionController.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright (c) 2015 SUSE LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6003577e55e14d6dd15d65702e2178c938edf22e"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzMyNDUw", "url": "https://github.com/uyuni-project/uyuni/pull/1951#pullrequestreview-368732450", "createdAt": "2020-03-04T12:22:06Z", "commit": {"oid": "6003577e55e14d6dd15d65702e2178c938edf22e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjoyMjowNlrOFxrIpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjoyMjowNlrOFxrIpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMTI3MQ==", "bodyText": "AFAIK minion_id, group_id or org_id can be NULL. Postgresql unique indexes do not work well with NULL columns.\nThis requires special handling.\nExample: schema/spacewalk/postgres/tables/rhnContentSourceSsl_index.sql", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r387631271", "createdAt": "2020-03-04T12:22:06Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/common/tables/suseRecurringAction.sql", "diffHunk": "@@ -0,0 +1,47 @@\n+CREATE TABLE suseRecurringAction\n+(\n+  id                NUMERIC NOT NULL\n+                    CONSTRAINT suse_recurring_action_id_pk PRIMARY KEY,\n+  target_type       VARCHAR(32) NOT NULL,\n+  name              VARCHAR(256) NOT NULL,\n+  cron_expr         VARCHAR(32) NOT NULL,\n+  minion_id         NUMERIC\n+                    CONSTRAINT suse_rec_action_minion_fk\n+                      REFERENCES suseMinionInfo(server_id)\n+                      ON DELETE CASCADE,\n+  group_id          NUMERIC\n+                    CONSTRAINT suse_rec_action_group_fk\n+                      REFERENCES rhnServerGroup(id)\n+                      ON DELETE CASCADE,\n+  org_id            NUMERIC\n+                    CONSTRAINT suse_rec_action_org_fk\n+                      REFERENCES web_customer(id)\n+                      ON DELETE CASCADE,\n+  creator_id        NUMERIC\n+                    CONSTRAINT suse_rec_action_creator_fk\n+                      REFERENCES web_contact(id)\n+                      ON DELETE CASCADE,\n+  active            CHAR(1) DEFAULT ('Y') NOT NULL,\n+  test_mode         CHAR(1) DEFAULT ('Y') NOT NULL,\n+  created           TIMESTAMP WITH TIME ZONE\n+                      DEFAULT (current_timestamp)\n+                      NOT NULL,\n+  modified          TIMESTAMP WITH TIME ZONE\n+                      DEFAULT (current_timestamp)\n+                      NOT NULL\n+);\n+\n+CREATE SEQUENCE suse_recurring_action_id_seq;\n+\n+CREATE INDEX suse_rec_action_type\n+    ON suseRecurringAction(target_type);\n+\n+CREATE UNIQUE INDEX suse_rec_action_name_minion_uq\n+    ON suseRecurringAction(name, minion_id);\n+\n+CREATE UNIQUE INDEX suse_rec_action_name_grp_uq\n+    ON suseRecurringAction(name, group_id);\n+\n+CREATE UNIQUE INDEX suse_rec_action_name_org_uq\n+    ON suseRecurringAction(name, org_id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6003577e55e14d6dd15d65702e2178c938edf22e"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c7dcb8ddae354595d5f9fe3a65731926ade0997", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6c7dcb8ddae354595d5f9fe3a65731926ade0997", "committedDate": "2020-03-04T13:03:41Z", "message": "Update Year in controller\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6a4b28dede03e0312626ed58b3c72ad2ad16f2c", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a6a4b28dede03e0312626ed58b3c72ad2ad16f2c", "committedDate": "2020-03-04T13:04:30Z", "message": "Add null value handling for indices\n\nMove index creation to `schema/spacewalk/postgres/tables`.\nUpdate table dependencies.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db881898e721936a3c7303dbcd17284272c0b563", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/db881898e721936a3c7303dbcd17284272c0b563", "committedDate": "2020-03-04T13:41:04Z", "message": "Idempotent db migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e72e001f134b48561b698d36f17c9754c67f9db0", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e72e001f134b48561b698d36f17c9754c67f9db0", "committedDate": "2020-03-04T13:57:57Z", "message": "Fix: Use Create to add a schedule on listing all schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODQ1OTM2", "url": "https://github.com/uyuni-project/uyuni/pull/1951#pullrequestreview-368845936", "createdAt": "2020-03-04T14:55:54Z", "commit": {"oid": "e72e001f134b48561b698d36f17c9754c67f9db0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1NTo1NVrOFxwfLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1ODoyN1rOFxwl8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxODk1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                WHERE group_id IS NULL AND org_id IS NULL;\n          \n          \n            \n                WHERE group_id IS NULL AND org_id IS NULL AND minion_id IS NOT NULL;", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r387718959", "createdAt": "2020-03-04T14:55:55Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/postgres/tables/suseRecurringAction_index.sql", "diffHunk": "@@ -0,0 +1,28 @@\n+-- oracle equivalent source none\n+--\n+-- Copyright (c) 2020 SUSE LLC\n+--\n+-- This software is licensed to you under the GNU General Public License,\n+-- version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+-- implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+-- FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+-- along with this software; if not, see\n+-- http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+--\n+-- Red Hat trademarks are not licensed under GPLv2. No permission is\n+-- granted to use or replicate Red Hat trademarks that are incorporated\n+-- in this software or its documentation.\n+--\n+\n+CREATE UNIQUE INDEX suse_rec_action_name_minion_uq\n+    ON suseRecurringAction(name, minion_id)\n+    WHERE group_id IS NULL AND org_id IS NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72e001f134b48561b698d36f17c9754c67f9db0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxOTg2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                WHERE minion_id IS NULL AND org_id IS NULL;\n          \n          \n            \n                WHERE minion_id IS NULL AND org_id IS NULL AND group_id IS NOT NULL;", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r387719862", "createdAt": "2020-03-04T14:57:19Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/postgres/tables/suseRecurringAction_index.sql", "diffHunk": "@@ -0,0 +1,28 @@\n+-- oracle equivalent source none\n+--\n+-- Copyright (c) 2020 SUSE LLC\n+--\n+-- This software is licensed to you under the GNU General Public License,\n+-- version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+-- implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+-- FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+-- along with this software; if not, see\n+-- http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+--\n+-- Red Hat trademarks are not licensed under GPLv2. No permission is\n+-- granted to use or replicate Red Hat trademarks that are incorporated\n+-- in this software or its documentation.\n+--\n+\n+CREATE UNIQUE INDEX suse_rec_action_name_minion_uq\n+    ON suseRecurringAction(name, minion_id)\n+    WHERE group_id IS NULL AND org_id IS NULL;\n+\n+CREATE UNIQUE INDEX suse_rec_action_name_grp_uq\n+    ON suseRecurringAction(name, group_id)\n+    WHERE minion_id IS NULL AND org_id IS NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72e001f134b48561b698d36f17c9754c67f9db0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyMDA1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                WHERE minion_id IS NULL AND group_id IS NULL;\n          \n          \n            \n                WHERE minion_id IS NULL AND group_id IS NULL AND org_id IS NOT NULL;", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r387720056", "createdAt": "2020-03-04T14:57:34Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/postgres/tables/suseRecurringAction_index.sql", "diffHunk": "@@ -0,0 +1,28 @@\n+-- oracle equivalent source none\n+--\n+-- Copyright (c) 2020 SUSE LLC\n+--\n+-- This software is licensed to you under the GNU General Public License,\n+-- version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+-- implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+-- FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+-- along with this software; if not, see\n+-- http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+--\n+-- Red Hat trademarks are not licensed under GPLv2. No permission is\n+-- granted to use or replicate Red Hat trademarks that are incorporated\n+-- in this software or its documentation.\n+--\n+\n+CREATE UNIQUE INDEX suse_rec_action_name_minion_uq\n+    ON suseRecurringAction(name, minion_id)\n+    WHERE group_id IS NULL AND org_id IS NULL;\n+\n+CREATE UNIQUE INDEX suse_rec_action_name_grp_uq\n+    ON suseRecurringAction(name, group_id)\n+    WHERE minion_id IS NULL AND org_id IS NULL;\n+\n+CREATE UNIQUE INDEX suse_rec_action_name_org_uq\n+    ON suseRecurringAction(name, org_id)\n+    WHERE minion_id IS NULL AND group_id IS NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72e001f134b48561b698d36f17c9754c67f9db0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyMDY5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            CREATE UNIQUE INDEX IF NOT EXISTS suse_rec_action_name_minion_uq\n          \n          \n            \n                ON suseRecurringAction(name, minion_id)\n          \n          \n            \n                WHERE group_id IS NULL AND org_id IS NULL;\n          \n          \n            \n            \n          \n          \n            \n            CREATE UNIQUE INDEX IF NOT EXISTS suse_rec_action_name_grp_uq\n          \n          \n            \n                ON suseRecurringAction(name, group_id)\n          \n          \n            \n                WHERE minion_id IS NULL AND org_id IS NULL;\n          \n          \n            \n            \n          \n          \n            \n            CREATE UNIQUE INDEX IF NOT EXISTS suse_rec_action_name_org_uq\n          \n          \n            \n                ON suseRecurringAction(name, org_id)\n          \n          \n            \n                WHERE minion_id IS NULL AND group_id IS NULL;\n          \n          \n            \n            CREATE UNIQUE INDEX IF NOT EXISTS suse_rec_action_name_minion_uq\n          \n          \n            \n                ON suseRecurringAction(name, minion_id)\n          \n          \n            \n                WHERE group_id IS NULL AND org_id IS NULL AND minion_id IS NOT NULL;\n          \n          \n            \n            \n          \n          \n            \n            CREATE UNIQUE INDEX IF NOT EXISTS suse_rec_action_name_grp_uq\n          \n          \n            \n                ON suseRecurringAction(name, group_id)\n          \n          \n            \n                WHERE minion_id IS NULL AND org_id IS NULL AND group_id IS NOT NULL;\n          \n          \n            \n            \n          \n          \n            \n            CREATE UNIQUE INDEX IF NOT EXISTS suse_rec_action_name_org_uq\n          \n          \n            \n                ON suseRecurringAction(name, org_id)\n          \n          \n            \n                WHERE minion_id IS NULL AND group_id IS NULL AND org_id IS NOT NULL;", "url": "https://github.com/uyuni-project/uyuni/pull/1951#discussion_r387720691", "createdAt": "2020-03-04T14:58:27Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/upgrade/susemanager-schema-4.1.3-to-susemanager-schema-4.1.4/010-schedule-recurring-actions.sql", "diffHunk": "@@ -9,3 +9,54 @@ WHERE NOT EXISTS ( SELECT 1 FROM rhnTaskoTask WHERE name = 'recurring-state-appl\n INSERT INTO rhnTaskoTemplate (id, bunch_id, task_id, ordering, start_if)\n SELECT sequence_nextval('rhn_tasko_template_id_seq'), ( SELECT id FROM rhnTaskoBunch WHERE name = 'recurring-state-apply-bunch' ), ( SELECT id FROM rhnTaskoTask WHERE name = 'recurring-state-apply' ), 0, null\n WHERE NOT EXISTS ( SELECT 1 FROM rhnTaskoTemplate WHERE bunch_id = ( SELECT id FROM rhnTaskoBunch WHERE name = 'recurring-state-apply-bunch' ) );\n+\n+CREATE TABLE IF NOT EXISTS suseRecurringAction\n+(\n+  id                NUMERIC NOT NULL\n+                    CONSTRAINT suse_recurring_action_id_pk PRIMARY KEY,\n+  target_type       VARCHAR(32) NOT NULL,\n+  name              VARCHAR(256) NOT NULL,\n+  cron_expr         VARCHAR(32) NOT NULL,\n+  minion_id         NUMERIC\n+                    CONSTRAINT suse_rec_action_minion_fk\n+                      REFERENCES suseMinionInfo(server_id)\n+                      ON DELETE CASCADE,\n+  group_id          NUMERIC\n+                    CONSTRAINT suse_rec_action_group_fk\n+                      REFERENCES rhnServerGroup(id)\n+                      ON DELETE CASCADE,\n+  org_id            NUMERIC\n+                    CONSTRAINT suse_rec_action_org_fk\n+                      REFERENCES web_customer(id)\n+                      ON DELETE CASCADE,\n+  creator_id        NUMERIC\n+                    CONSTRAINT suse_rec_action_creator_fk\n+                      REFERENCES web_contact(id)\n+                      ON DELETE CASCADE,\n+  active            CHAR(1) DEFAULT ('Y') NOT NULL,\n+  test_mode         CHAR(1) DEFAULT ('Y') NOT NULL,\n+  created           TIMESTAMP WITH TIME ZONE\n+                      DEFAULT (current_timestamp)\n+                      NOT NULL,\n+  modified          TIMESTAMP WITH TIME ZONE\n+                      DEFAULT (current_timestamp)\n+                      NOT NULL\n+);\n+\n+CREATE SEQUENCE IF NOT EXISTS suse_recurring_action_id_seq;\n+\n+CREATE INDEX IF NOT EXISTS suse_rec_action_type\n+    ON suseRecurringAction(target_type);\n+\n+CREATE UNIQUE INDEX IF NOT EXISTS suse_rec_action_name_minion_uq\n+    ON suseRecurringAction(name, minion_id)\n+    WHERE group_id IS NULL AND org_id IS NULL;\n+\n+CREATE UNIQUE INDEX IF NOT EXISTS suse_rec_action_name_grp_uq\n+    ON suseRecurringAction(name, group_id)\n+    WHERE minion_id IS NULL AND org_id IS NULL;\n+\n+CREATE UNIQUE INDEX IF NOT EXISTS suse_rec_action_name_org_uq\n+    ON suseRecurringAction(name, org_id)\n+    WHERE minion_id IS NULL AND group_id IS NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72e001f134b48561b698d36f17c9754c67f9db0"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cdf9ff0c0e002ff61fb323f7b713fd5be34c270", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3cdf9ff0c0e002ff61fb323f7b713fd5be34c270", "committedDate": "2020-03-04T16:22:25Z", "message": "Add not null values to schema indices\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1693, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}