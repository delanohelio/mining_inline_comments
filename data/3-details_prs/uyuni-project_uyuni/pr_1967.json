{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMzM1NTY1", "number": 1967, "title": "Auto generate bootstrap repositories", "bodyText": "What does this PR change?\nBootstrap repos are nearly always needed. So we want to generate them automatcially.\nTo achieve this an automtic mode was added to mgr-create-bootstrap-repo which is used when calling it from spacewalk-repo-sync.\nGUI diff\nNo difference.\n\n DONE\n\nDocumentation\n\n\nSUSE/spacewalk#10899\n\n\n DONE\n\n\nTest coverage\n\n\nNo tests: to test we would need to really sync channels - taking too long\n\n\n DONE\n\n\nLinks\nFixes SUSE/spacewalk#5876 SUSE/spacewalk#10804\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"ruby_rubocop\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-02-28T11:12:07Z", "url": "https://github.com/uyuni-project/uyuni/pull/1967", "merged": true, "mergeCommit": {"oid": "895220a5ab7c3443cd4ac1ea65c18ee338883852"}, "closed": true, "closedAt": "2020-03-04T11:09:29Z", "author": {"login": "mcalmer"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKCI0XABqjMwOTIwOTk0MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKU3cRgBqjMwOTYwMDA2NjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "723ed615ab47bee9a867f5f9a2404335ff32adfd", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/723ed615ab47bee9a867f5f9a2404335ff32adfd", "committedDate": "2020-03-03T12:34:25Z", "message": "fixup! make re-generation of bootstrap repo more atomic"}, "afterCommit": {"oid": "4a9c662b48fc42462cdf6a453f8eb6de9bdda19f", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4a9c662b48fc42462cdf6a453f8eb6de9bdda19f", "committedDate": "2020-03-03T13:14:01Z", "message": "unittest: mock subprocess call to mgr-create-bootstrap-repo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDYxNzcw", "url": "https://github.com/uyuni-project/uyuni/pull/1967#pullrequestreview-368061770", "createdAt": "2020-03-03T15:12:13Z", "commit": {"oid": "4a9c662b48fc42462cdf6a453f8eb6de9bdda19f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxMjoxM1rOFxJ21w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMDo0MVrOFxKN1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NjAzOQ==", "bodyText": "In the end this is to generate the repo first, replace the old then. Or am I missing anything?", "url": "https://github.com/uyuni-project/uyuni/pull/1967#discussion_r387086039", "createdAt": "2020-03-03T15:12:13Z", "author": {"login": "juliogonzalez"}, "path": "susemanager/src/mgr-create-bootstrap-repo", "diffHunk": "@@ -301,104 +433,158 @@ def create_repo(label, flush, additional=[]):\n             codename=\"bootstrap\"\n             reprepro_conf = reprepro_conf_tmpl.substitute(origin=\"mgr\",\n                     label=\"mgr\", codename=codename, arches=\"amd64 i386\", comps=\"main\", desc=\"Bootstrap repo\")\n-            reprepro_conf_dir = os.path.join(destdir, \"conf\")\n+            reprepro_conf_dir = os.path.join(destdirtmp, \"conf\")\n             if not os.path.exists(reprepro_conf_dir):\n                 os.makedirs(reprepro_conf_dir)\n             with open(os.path.join(reprepro_conf_dir, \"distributions\"), \"w\") as conf_file:\n                 conf_file.write(reprepro_conf)\n-            logging.debug(\"Created reprepro config file in {0}\".format(os.path.join(destdir, \"distributions\")))\n+            log(\"Created reprepro config file in {0}\".format(os.path.join(destdirtmp, \"distributions\")), 2)\n             debs = [os.path.join(debs_dir, f) for f in os.listdir(debs_dir)]\n             try:\n-                subprocess.run([\"/usr/bin/reprepro\", \"-b\", destdir, \"includedeb\", codename] + debs, check=True)\n-                logging.debug(\"Removing directory {0}\".format(debs_dir))\n+                subprocess.run([\"/usr/bin/reprepro\", \"-b\", destdirtmp, \"includedeb\", codename] + debs, check=True)\n+                log(\"Removing directory {0}\".format(debs_dir), 2)\n                 shutil.rmtree(debs_dir, ignore_errors=True)\n             except subprocess.CalledProcessError as err:\n-                print(\"Error creating bootstrap repo.\")\n-                logging.debug(err)\n-                sys.exit(1)\n-        else:    \n-            os.system(\"createrepo -s sha %s\" % destdir)\n+                log_error(\"Error creating bootstrap repo.\")\n+                log(err, 2)\n+                return 1\n+        else:\n+            os.system(\"createrepo -s sha %s\" % destdirtmp)\n+        # move tmp dir to final location", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a9c662b48fc42462cdf6a453f8eb6de9bdda19f"}, "originalPosition": 556}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NzE4Mw==", "bodyText": "It seems to me we need another entry to mention the support for Beta channels, no?", "url": "https://github.com/uyuni-project/uyuni/pull/1967#discussion_r387087183", "createdAt": "2020-03-03T15:13:54Z", "author": {"login": "juliogonzalez"}, "path": "susemanager/susemanager.changes", "diffHunk": "@@ -1,3 +1,4 @@\n+- add automatic mode to mgr-create-bootstrap-repo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a9c662b48fc42462cdf6a453f8eb6de9bdda19f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NzkxOA==", "bodyText": "Is this because we plan to support more data files :-?", "url": "https://github.com/uyuni-project/uyuni/pull/1967#discussion_r387087918", "createdAt": "2020-03-03T15:15:01Z", "author": {"login": "juliogonzalez"}, "path": "susemanager/rhn-conf/rhn_server_susemanager.conf", "diffHunk": "@@ -28,3 +28,9 @@ temp_token_lifetime = 60\n token_lifetime = 525600\n # automatically deploy tokens once they are refreshed\n token_refresh_auto_deploy = true\n+\n+# when re-generating bootstrap repos remove old content first\n+bootstrap_repo_flush = 1\n+\n+# data module used for mgr-create-bootstrap-repo\n+bootstrap_repo_datamodule = mgr_bootstrap_data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a9c662b48fc42462cdf6a453f8eb6de9bdda19f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4ODg5Mw==", "bodyText": "As far as I can see, this log is now always generated.\nIIUC, then I strongly suggest we add this info to the help of this script.", "url": "https://github.com/uyuni-project/uyuni/pull/1967#discussion_r387088893", "createdAt": "2020-03-03T15:16:18Z", "author": {"login": "juliogonzalez"}, "path": "susemanager/src/mgr-create-bootstrap-repo", "diffHunk": "@@ -1,41 +1,58 @@\n #!/usr/bin/python3\n-from __future__ import print_function\n+\n import sys\n import os\n import shutil\n-import logging\n import subprocess\n+import time\n+import traceback\n+from optparse import OptionParser\n+from rhn import rhnLockfile\n from spacewalk.server import rhnSQL\n-from uyuni.common import usix\n+from spacewalk.common.rhnLog import initLOG, log_time, log_clean\n from spacewalk.common.rhnConfig import CFG, initCFG\n-from optparse import OptionParser\n-import textwrap\n from string import Template\n-\n-try:\n-   input = raw_input\n-except NameError:\n-   pass\n-\n-msg_wrapper = textwrap.TextWrapper()\n-msg_wrapper.initial_indent = '- '\n-msg_wrapper.width = 75\n-msg_wrapper.subsequent_indent = '  '\n+from uyuni.common import usix, rhnLib\n \n sys.path.append(\"/usr/share/susemanager\")\n \n initCFG('server.susemanager')\n rhnSQL.initDB()\n \n basepath = CFG.MOUNT_POINT or '/var/spacewalk'\n+logfile = '/var/log/rhn/mgr-create-bootstrap-repo.log'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a9c662b48fc42462cdf6a453f8eb6de9bdda19f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MDY2MQ==", "bodyText": "Can you refresh my mind? What was the idea here, changing this manually when we are not doing SUSE Manager betas anymore?", "url": "https://github.com/uyuni-project/uyuni/pull/1967#discussion_r387090661", "createdAt": "2020-03-03T15:18:47Z", "author": {"login": "juliogonzalez"}, "path": "java/spacewalk-java.spec", "diffHunk": "@@ -500,9 +500,9 @@ install -m 644 conf/rhn_java_sso.conf $RPM_BUILD_ROOT%{_prefix}/share/rhn/config\n \n # Adjust product tree tag\n %if 0%{?sle_version} && !0%{?is_opensuse}\n-sed -i -e 's/^java.product_tree.tag =.*$/java.product_tree.tag = Beta/' $RPM_BUILD_ROOT%{_prefix}/share/rhn/config-defaults/rhn_java.conf\n+sed -i -e 's/^java.product_tree_tag =.*$/java.product_tree_tag = Beta/' $RPM_BUILD_ROOT%{_prefix}/share/rhn/config-defaults/rhn_java.conf", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a9c662b48fc42462cdf6a453f8eb6de9bdda19f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MTkyNw==", "bodyText": "Shouldn't we release the lock as well?", "url": "https://github.com/uyuni-project/uyuni/pull/1967#discussion_r387091927", "createdAt": "2020-03-03T15:20:41Z", "author": {"login": "juliogonzalez"}, "path": "susemanager/src/mgr-create-bootstrap-repo", "diffHunk": "@@ -301,104 +433,158 @@ def create_repo(label, flush, additional=[]):\n             codename=\"bootstrap\"\n             reprepro_conf = reprepro_conf_tmpl.substitute(origin=\"mgr\",\n                     label=\"mgr\", codename=codename, arches=\"amd64 i386\", comps=\"main\", desc=\"Bootstrap repo\")\n-            reprepro_conf_dir = os.path.join(destdir, \"conf\")\n+            reprepro_conf_dir = os.path.join(destdirtmp, \"conf\")\n             if not os.path.exists(reprepro_conf_dir):\n                 os.makedirs(reprepro_conf_dir)\n             with open(os.path.join(reprepro_conf_dir, \"distributions\"), \"w\") as conf_file:\n                 conf_file.write(reprepro_conf)\n-            logging.debug(\"Created reprepro config file in {0}\".format(os.path.join(destdir, \"distributions\")))\n+            log(\"Created reprepro config file in {0}\".format(os.path.join(destdirtmp, \"distributions\")), 2)\n             debs = [os.path.join(debs_dir, f) for f in os.listdir(debs_dir)]\n             try:\n-                subprocess.run([\"/usr/bin/reprepro\", \"-b\", destdir, \"includedeb\", codename] + debs, check=True)\n-                logging.debug(\"Removing directory {0}\".format(debs_dir))\n+                subprocess.run([\"/usr/bin/reprepro\", \"-b\", destdirtmp, \"includedeb\", codename] + debs, check=True)\n+                log(\"Removing directory {0}\".format(debs_dir), 2)\n                 shutil.rmtree(debs_dir, ignore_errors=True)\n             except subprocess.CalledProcessError as err:\n-                print(\"Error creating bootstrap repo.\")\n-                logging.debug(err)\n-                sys.exit(1)\n-        else:    \n-            os.system(\"createrepo -s sha %s\" % destdir)\n+                log_error(\"Error creating bootstrap repo.\")\n+                log(err, 2)\n+                return 1\n+        else:\n+            os.system(\"createrepo -s sha %s\" % destdirtmp)\n+        # move tmp dir to final location\n+        os.rename(destdir, destdirold)\n+        os.rename(destdirtmp, destdir)\n+        cleanup_dir(destdirold)\n+\n     if errors:\n         for m in messages:\n-            print(m)\n+            log_error(m)\n         if (label.startswith('RES') or label.startswith('RHEL') or label.lower().startswith('ubuntu'))  and not options.usecustomchannels:\n-            print(\"If the installation media was imported into a custom channel, try to run again with --with-custom-channels option\")\n+            log_error(\"If the installation media was imported into a custom channel, try to run again with --with-custom-channels option\")\n         suggestions = list([_f for _f in list(suggestions.values()) if _f])\n         if suggestions:\n-            print(\"\\nSuggestions:\")\n+            log_error(\"\\nSuggestions:\")\n             for suggestion in suggestions:\n-                print(msg_wrapper.fill(suggestion) + \"\\n\")\n-        sys.exit(1)\n+                log_error(suggestion)\n+        return 1\n+    return 0\n \n-usage = \"usage: %prog [options] [additional_pkg1 additional_pkg2 ...]\"\n-parser = OptionParser(usage=usage)\n-parser.add_option('-n', '--dryrun', action='store_true', dest='dryrun',\n-                  help='Dry run. Show only changes - do not execute them')\n-parser.add_option('-i', '--interactive', action='store_true', dest='interactive',\n-                  help='Interactive mode (default)')\n-parser.add_option('-l', '--list', action='store_true', dest='list',\n-                  help='list available distributions')\n-parser.add_option('-c', '--create', action='store', dest='create',\n-                  help='create bootstrap repo for given distribution label')\n-parser.add_option('-f', '--flush', action='store_true', dest='flush',\n-                  help='when used in conjuction with --create, deletes the target repository before creating it')\n-parser.add_option('', '--datamodule', action=\"store\", dest='datamodule',\n-                  help='Use an own datamodule (Default: mgr_bootstrap_data)')\n-parser.add_option('', '--with-custom-channels', action='store_true', dest='usecustomchannels',\n-                  help='Take custom channels into account when searching for newest package versions')\n-parser.add_option('', '--with-parent-channel', action=\"store\", dest='parentchannel',\n-                  help='use child channels below this parent')\n-parser.add_option('-d', '--debug', action='store_true', dest='debug',\n-                  help='Enable debug mode')\n-\n-(options, args) = parser.parse_args()\n-\n-if options.debug:\n-    logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)\n-\n-modulename = \"mgr_bootstrap_data\"\n-if options.datamodule and options.datamodule != '':\n-    modulename = options.datamodule\n-\n-try:\n-    mgr_bootstrap_data = __import__(modulename)\n-    for label in mgr_bootstrap_data.DATA:\n-        if 'PDID' in mgr_bootstrap_data.DATA[label]:\n-            if not isinstance(mgr_bootstrap_data.DATA[label]['PDID'], usix.ListType):\n-                mgr_bootstrap_data.DATA[label]['PDID'] = list(map(str, [int(mgr_bootstrap_data.DATA[label]['PDID'])]))\n+def generate_all(options, mgr_bootstrap_data, additional=[]):\n+    repos = {}\n+    errors = 0\n+\n+    for dist in sorted(list_labels(mgr_bootstrap_data, do_print=False).values()):\n+        if mgr_bootstrap_data.DATA[dist]['DEST'] in repos:\n+            continue\n+        repos[mgr_bootstrap_data.DATA[dist]['DEST']] = mgr_bootstrap_data.DATA[dist]\n+        repos[mgr_bootstrap_data.DATA[dist]['DEST']]['DIST'] = dist\n+\n+    for dest, repo in repos.items():\n+        destfile = os.path.join(dest, 'repodata', 'repomd.xml')\n+        if 'TYPE' in repo and repo['TYPE'] == 'deb':\n+            destfile = os.path.join(dest, 'dists', 'bootstrap', 'Release')\n+\n+        filemodtime = 0\n+        if os.path.exists(destfile):\n+            filemodtime = os.path.getmtime(destfile)\n+\n+        log(\"{0} modified: {1}\".format(destfile, filemodtime), 2)\n+        if 'PDID' in repo:\n+            pdids = ', '.join(repo['PDID'])\n+            h = rhnSQL.prepare(rhnSQL.Statement(_find_mand_modified_repos % (pdids)))\n+            h.execute(filemod=time.strftime('%Y-%m-%d %H:%M:%S %z', time.localtime(filemodtime)))\n+        if 'BASECHANNEL' in repo:\n+            h = rhnSQL.prepare(rhnSQL.Statement(_find_modified_repos_by_basechannel))\n+            h.execute(filemod=time.strftime('%Y-%m-%d %H:%M:%S %z', time.localtime(filemodtime)), basechannel=repo['BASECHANNEL'])\n+\n+        res = h.fetchall_dict() or []\n+        if not res:\n+            continue\n+        regen = True\n+        oneNewerTimestamp = 0\n+        #import pdb; pdb.set_trace()\n+        for channelinfo in res:\n+            if channelinfo['newer'] == 1:\n+                log(\"{0} modified after last bootstrap generation\".format(channelinfo['label']), 2)\n+                regen = regen and True\n+                if channelinfo['last_synced'] and channelinfo['last_synced'].timestamp() > oneNewerTimestamp:\n+                    oneNewerTimestamp = channelinfo['last_synced'].timestamp()\n             else:\n-                mgr_bootstrap_data.DATA[label]['PDID'] = list(map(str, [int(pdid) for pdid in mgr_bootstrap_data.DATA[label]['PDID']]))\n+                log(\"{0} not modified\".format(channelinfo['label']), 2)\n+                regen = regen and False\n+        if not regen and oneNewerTimestamp > 0 and time.time() - oneNewerTimestamp > 4 * 60 * 60:\n+            log(\"latest channel sync at: {0}. Grace period over. Regenarate bootstrap repo.\".format(oneNewerTimestamp), 2)\n+            regen = True\n+        if regen:\n+            errors += create_repo(repo['DIST'], options, mgr_bootstrap_data, additional=additional)\n \n-except ImportError as e:\n-    sys.stderr.write(\"Unable to load module '%s'\\n\" % modulename)\n-    sys.stderr.write(str(e) + \"\\n\")\n-    sys.exit(1)\n+    return errors\n \n-dryrun = options.dryrun\n \n-if not options.list and not options.create:\n-    options.interactive = True\n \n-if options.interactive:\n-    label_map = list_labels()\n+#################################################################################\n+### main\n+#################################################################################\n \n-    elabel = None\n-    while True:\n-        try:\n-            elabel = label_map.get(int(input(\"Enter a number of a product label: \")), '')\n-            break\n-        except Exception:\n-            print(\"Please enter a number.\")\n-\n-    if elabel not in mgr_bootstrap_data.DATA:\n-        print(\"'%s' not found\" % elabel)\n+def main():\n+    # quick check to see if you are a super-user.\n+    if os.getuid() != 0:\n+        sys.stderr.write('ERROR: must be root to execute.\\n')\n         sys.exit(1)\n \n-    create_repo(elabel, options.flush, additional=args)\n-elif options.list:\n-    list_labels()\n-elif options.create:\n-    if options.create not in mgr_bootstrap_data.DATA:\n-        print(\"'%s' not found\" % options.create)\n+    global LOCK\n+    try:\n+        LOCK = rhnLockfile.Lockfile('/var/run/mgr-create-bootstrap-repo.pid')\n+    except rhnLockfile.LockfileLockedException:\n+        sys.stderr.write(\"ERROR: attempting to run more than one instance of \"\n+                         \"mgr-create-bootstrap-repo Exiting.\\n\")\n         sys.exit(1)\n-    create_repo(options.create, options.flush, additional=args)\n+\n+    global BETA\n+\n+    opts, args, mgr_bootstrap_data = cli()\n+    r = 0\n+\n+    if opts.auto:\n+        r = generate_all(opts, mgr_bootstrap_data, additional=args)\n+    elif opts.interactive:\n+        label_map = list_labels(mgr_bootstrap_data)\n+        if not label_map:\n+            log(\"No products available\")\n+            sys.exit(0)\n+\n+        elabel = None\n+        while True:\n+            try:\n+                elabel = label_map.get(int(input(\"Enter a number of a product label: \")), '')\n+                break\n+            except Exception:\n+                print(\"Please enter a number.\")\n+\n+        if elabel not in mgr_bootstrap_data.DATA:\n+            log_error(\"'%s' not found\" % elabel)\n+            sys.exit(1)\n+\n+        r = create_repo(elabel, opts, mgr_bootstrap_data, additional=args)\n+    elif opts.list:\n+        list_labels(mgr_bootstrap_data)\n+    elif opts.create:\n+        if opts.create not in mgr_bootstrap_data.DATA:\n+            log_error(\"'%s' not found\" % opts.create)\n+            sys.exit(1)\n+        r = create_repo(opts.create, opts, mgr_bootstrap_data, additional=args)\n+    releaseLOCK()\n+    return r\n+\n+if __name__ == '__main__':\n+    try:\n+        sys.exit(abs(main() or 0))\n+    except KeyboardInterrupt:\n+        sys.stderr.write(\"\\nProcess has been interrupted.\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a9c662b48fc42462cdf6a453f8eb6de9bdda19f"}, "originalPosition": 753}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTgxNzAw", "url": "https://github.com/uyuni-project/uyuni/pull/1967#pullrequestreview-368581700", "createdAt": "2020-03-04T08:29:52Z", "commit": {"oid": "a8b53d3930f3b9af935ad71222a81817afe0588e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NjcxMzUz", "url": "https://github.com/uyuni-project/uyuni/pull/1967#pullrequestreview-368671353", "createdAt": "2020-03-04T10:40:38Z", "commit": {"oid": "63cd4b41be9bcd07be15040e24ce78c9d3f2436d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8442f907478970a0043e06d791f83385eee979b", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b8442f907478970a0043e06d791f83385eee979b", "committedDate": "2020-03-04T11:03:34Z", "message": "add automatic mode to create bootstrap repo script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c07eb5a2d0d9e6ad9f86f39e497b006fc47ad269", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c07eb5a2d0d9e6ad9f86f39e497b006fc47ad269", "committedDate": "2020-03-04T11:03:34Z", "message": "rename product_tree.tag to product_tree_tag to work with python config parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce14754ddf032cfd1c876aa3eb929e40cfc13857", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ce14754ddf032cfd1c876aa3eb929e40cfc13857", "committedDate": "2020-03-04T11:03:34Z", "message": "call mgr-create-bootstrap-repo in auto mode after reposync finished"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c7e3eddb06fed80748d53e6308bd1b11e0be189", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9c7e3eddb06fed80748d53e6308bd1b11e0be189", "committedDate": "2020-03-04T11:03:34Z", "message": "update changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2728024c09b90f42d156430ab82b4edfc0dc7bb", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b2728024c09b90f42d156430ab82b4edfc0dc7bb", "committedDate": "2020-03-04T11:03:34Z", "message": "make flush and datamodule configurable via rhn.conf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab9a1bc78d85324238725b852433d9f3431b0f99", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ab9a1bc78d85324238725b852433d9f3431b0f99", "committedDate": "2020-03-04T11:03:34Z", "message": "make re-generation of bootstrap repo more atomic\n\nuse a tmpdir and after everything is prepared, rename the directories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a3b86f4e3b329123f2e20dc4e7e6ee612524f5d", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2a3b86f4e3b329123f2e20dc4e7e6ee612524f5d", "committedDate": "2020-03-04T11:03:34Z", "message": "unittest: mock subprocess call to mgr-create-bootstrap-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91a81e817672ec18d412d929cafcc148a9141b06", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/91a81e817672ec18d412d929cafcc148a9141b06", "committedDate": "2020-03-04T11:03:34Z", "message": "improve logfile handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cb0f69f215f8e61548540529b38ed724d88b4e7", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9cb0f69f215f8e61548540529b38ed724d88b4e7", "committedDate": "2020-03-04T11:03:34Z", "message": "mention beta tools repo usage in changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1da7313fe5b39a53027950168368a6453d4e9dbb", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1da7313fe5b39a53027950168368a6453d4e9dbb", "committedDate": "2020-03-04T11:03:34Z", "message": "add possibility to turn off auto generation of bootstrap repos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b45a5879b7d745e7da45289aee639c2e8c6b375", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0b45a5879b7d745e7da45289aee639c2e8c6b375", "committedDate": "2020-03-04T11:03:34Z", "message": "fix unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63cd4b41be9bcd07be15040e24ce78c9d3f2436d", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/63cd4b41be9bcd07be15040e24ce78c9d3f2436d", "committedDate": "2020-03-04T10:38:07Z", "message": "fix unit tests"}, "afterCommit": {"oid": "0b45a5879b7d745e7da45289aee639c2e8c6b375", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0b45a5879b7d745e7da45289aee639c2e8c6b375", "committedDate": "2020-03-04T11:03:34Z", "message": "fix unit tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1702, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}