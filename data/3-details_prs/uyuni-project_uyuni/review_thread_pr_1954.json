{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NjMwMDc3", "number": 1954, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo1NjoyNFrODkvGGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNzoyMDoyMlrODoIRZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODQ2OTM4OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo1NjoyNFrOFxOTog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowNzoyNFrOFyZx1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1ODk0Ng==", "bodyText": "As SystemQuery is defining an interface, should it really reside in the impl package? Could we maybe come up with a better package structure right from the beginning, or was it done on purpose?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r387158946", "createdAt": "2020-03-03T16:56:24Z", "author": {"login": "renner"}, "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2016 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efbf8623750c492415037e31914d25643648293"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NTc1MA==", "bodyText": "yeah its not the right place i just did not move it yet since i created the file. I would actually even like to move it out of webui since there is already so much stuff in there that does not belong there. You have an idea where it would fit because i currently don't see any place that makes direct sense.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r387655750", "createdAt": "2020-03-04T13:11:17Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2016 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1ODk0Ng=="}, "originalCommit": {"oid": "8efbf8623750c492415037e31914d25643648293"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NzAzNw==", "bodyText": "How would you imagine the package structure to look like eventually, or if we started from scratch? I guess it should reflect the architecture somehow, which is currently more true for the com.redhat packages as for the com.suse ones. There is the manager subpackage, but SystemQuery is a service interface. What exactly is the difference between a *Manager class and a *Service? Will we need both services and manager classes in the future?\nWe won't answer these questions here, but we should start thinking about concrete next steps to move towards a better overall structure. For now what about creating a services.iface subpackage and move it there? Then with another PR we could move the whole services package out of webui. This is just a suggestion, other ideas are welcome of course.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r387797037", "createdAt": "2020-03-04T16:49:39Z", "author": {"login": "renner"}, "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2016 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1ODk0Ng=="}, "originalCommit": {"oid": "8efbf8623750c492415037e31914d25643648293"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NTQ3Nw==", "bodyText": "i moved it to  services.iface for now. i guess the package structure has to be its own topic once we decide to tackle it.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r388395477", "createdAt": "2020-03-05T16:07:24Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2016 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1ODk0Ng=="}, "originalCommit": {"oid": "8efbf8623750c492415037e31914d25643648293"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODQ5MzA4OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzowMjoxNVrOFxOidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzowMjoxNVrOFxOidA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2Mjc0MA==", "bodyText": "We are at 2020 meanwhile.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r387162740", "createdAt": "2020-03-03T17:02:15Z", "author": {"login": "renner"}, "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2016 SUSE LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efbf8623750c492415037e31914d25643648293"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTAzMzEzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/SaltServerActionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDowMDo1NVrOFxm1zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTowMzo1MFrOFxwz0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MDkwOQ==", "bodyText": "Here (and in other parts of this patch) you suggest to keep the old variable name (saltService). Is this just for simplicity in terms of less changes? Should it eventually be systemQuery everywhere?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r387560909", "createdAt": "2020-03-04T10:00:55Z", "author": {"login": "renner"}, "path": "java/code/src/com/suse/manager/webui/services/SaltServerActionService.java", "diffHunk": "@@ -201,11 +201,15 @@\n     private SaltActionChainGeneratorService saltActionChainGeneratorService =\n             SaltActionChainGeneratorService.INSTANCE;\n \n-    private SaltService saltService = SaltService.INSTANCE;\n+    private SystemQuery saltService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efbf8623750c492415037e31914d25643648293"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyNDI0MQ==", "bodyText": "i left it out to get the more important stuff done first. In the end it should have a name in line with the interface name which means it may actually change again or multiple times when spiting further or deciding on final names interface naming. I will change it for now anyway.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r387724241", "createdAt": "2020-03-04T15:03:50Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/webui/services/SaltServerActionService.java", "diffHunk": "@@ -201,11 +201,15 @@\n     private SaltActionChainGeneratorService saltActionChainGeneratorService =\n             SaltActionChainGeneratorService.INSTANCE;\n \n-    private SaltService saltService = SaltService.INSTANCE;\n+    private SystemQuery saltService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MDkwOQ=="}, "originalCommit": {"oid": "8efbf8623750c492415037e31914d25643648293"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTMwNDEwOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToyMjo0MVrOFxpfPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjo0MjoxNlrOFxrutg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwNDI4Ng==", "bodyText": "Is SystemQuery actually the most appropriate name we can find for this new interface? I find the name suitable for most of the functionality, but for some of the methods it doesn't really fit, like generateSSHKey() or the ones related to key management on the master. I don't currently have a better name for suggestion, just wanted to raise it for discussion. Maybe there could even be a separate interface for things that just operate locally on another iteration, is that what you mean with \"split up further\"?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r387604286", "createdAt": "2020-03-04T11:22:41Z", "author": {"login": "renner"}, "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2016 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.impl;\n+\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.JsonElement;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.suse.manager.reactor.SaltReactor;\n+import com.suse.manager.virtualization.GuestDefinition;\n+import com.suse.manager.webui.services.impl.runner.MgrK8sRunner;\n+import com.suse.manager.webui.services.impl.runner.MgrUtilRunner;\n+import com.suse.manager.webui.utils.gson.BootstrapParameters;\n+import com.suse.manager.webui.utils.salt.custom.ScheduleMetadata;\n+import com.suse.salt.netapi.calls.LocalAsyncResult;\n+import com.suse.salt.netapi.calls.LocalCall;\n+import com.suse.salt.netapi.calls.modules.SaltUtil;\n+import com.suse.salt.netapi.calls.modules.State;\n+import com.suse.salt.netapi.calls.modules.Zypper;\n+import com.suse.salt.netapi.calls.runner.Jobs;\n+import com.suse.salt.netapi.calls.wheel.Key;\n+import com.suse.salt.netapi.datatypes.target.MinionList;\n+import com.suse.salt.netapi.datatypes.target.Target;\n+import com.suse.salt.netapi.errors.GenericError;\n+import com.suse.salt.netapi.event.EventStream;\n+import com.suse.salt.netapi.exception.SaltException;\n+import com.suse.salt.netapi.results.Result;\n+import com.suse.salt.netapi.results.SSHResult;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * Interface containing methods for directly interacting and getting information from\n+ * a system.\n+ * Note: This interface should be split up further at some point.\n+ */\n+public interface SystemQuery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cbafa49fa3348ea923b52991e78ec4d8e844d9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY0MTAxNA==", "bodyText": "Yes that was the intention of splitting it further. Currently it contains all the methods we are using from SaltService but there is definitely different topics here that should go in their own interface. So far i'm thinking about splitting methods for general system information, salt specific methods like salt key handling etc, virtualization and a minimal low level salt interface for the salt backed implementations of those interfaces.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r387641014", "createdAt": "2020-03-04T12:42:16Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2016 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.impl;\n+\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.JsonElement;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.suse.manager.reactor.SaltReactor;\n+import com.suse.manager.virtualization.GuestDefinition;\n+import com.suse.manager.webui.services.impl.runner.MgrK8sRunner;\n+import com.suse.manager.webui.services.impl.runner.MgrUtilRunner;\n+import com.suse.manager.webui.utils.gson.BootstrapParameters;\n+import com.suse.manager.webui.utils.salt.custom.ScheduleMetadata;\n+import com.suse.salt.netapi.calls.LocalAsyncResult;\n+import com.suse.salt.netapi.calls.LocalCall;\n+import com.suse.salt.netapi.calls.modules.SaltUtil;\n+import com.suse.salt.netapi.calls.modules.State;\n+import com.suse.salt.netapi.calls.modules.Zypper;\n+import com.suse.salt.netapi.calls.runner.Jobs;\n+import com.suse.salt.netapi.calls.wheel.Key;\n+import com.suse.salt.netapi.datatypes.target.MinionList;\n+import com.suse.salt.netapi.datatypes.target.Target;\n+import com.suse.salt.netapi.errors.GenericError;\n+import com.suse.salt.netapi.event.EventStream;\n+import com.suse.salt.netapi.exception.SaltException;\n+import com.suse.salt.netapi.results.Result;\n+import com.suse.salt.netapi.results.SSHResult;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * Interface containing methods for directly interacting and getting information from\n+ * a system.\n+ * Note: This interface should be split up further at some point.\n+ */\n+public interface SystemQuery {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwNDI4Ng=="}, "originalCommit": {"oid": "c8cbafa49fa3348ea923b52991e78ec4d8e844d9"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTMwOTQ1OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToyNDo0NVrOFxpilQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToyNDo0NVrOFxpilQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwNTE0MQ==", "bodyText": "The max line length is currently set to 120 characters (for checkstyle), so this should actually fit on a single line?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r387605141", "createdAt": "2020-03-04T11:24:45Z", "author": {"login": "renner"}, "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2016 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.impl;\n+\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.JsonElement;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.suse.manager.reactor.SaltReactor;\n+import com.suse.manager.virtualization.GuestDefinition;\n+import com.suse.manager.webui.services.impl.runner.MgrK8sRunner;\n+import com.suse.manager.webui.services.impl.runner.MgrUtilRunner;\n+import com.suse.manager.webui.utils.gson.BootstrapParameters;\n+import com.suse.manager.webui.utils.salt.custom.ScheduleMetadata;\n+import com.suse.salt.netapi.calls.LocalAsyncResult;\n+import com.suse.salt.netapi.calls.LocalCall;\n+import com.suse.salt.netapi.calls.modules.SaltUtil;\n+import com.suse.salt.netapi.calls.modules.State;\n+import com.suse.salt.netapi.calls.modules.Zypper;\n+import com.suse.salt.netapi.calls.runner.Jobs;\n+import com.suse.salt.netapi.calls.wheel.Key;\n+import com.suse.salt.netapi.datatypes.target.MinionList;\n+import com.suse.salt.netapi.datatypes.target.Target;\n+import com.suse.salt.netapi.errors.GenericError;\n+import com.suse.salt.netapi.event.EventStream;\n+import com.suse.salt.netapi.exception.SaltException;\n+import com.suse.salt.netapi.results.Result;\n+import com.suse.salt.netapi.results.SSHResult;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * Interface containing methods for directly interacting and getting information from\n+ * a system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cbafa49fa3348ea923b52991e78ec4d8e844d9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTMzNjc1OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTozMzozOVrOFxpy4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTozMzozOVrOFxpy4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwOTMxNA==", "bodyText": "This is really not important, but I would prefer if we would use a unified way of doing indentation. In this new interface we already use 3 different ways of indenting the arguments: 8 spaces after the method name (my least preferred one), 8 spaces starting from the beginning of the line and 4 spaces from the beginning of the line one argument per line. It would be a good opportunity now to use just one of those ways, at least throughout this new interface.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r387609314", "createdAt": "2020-03-04T11:33:39Z", "author": {"login": "renner"}, "path": "java/code/src/com/suse/manager/webui/services/impl/SystemQuery.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2016 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.impl;\n+\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.JsonElement;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.suse.manager.reactor.SaltReactor;\n+import com.suse.manager.virtualization.GuestDefinition;\n+import com.suse.manager.webui.services.impl.runner.MgrK8sRunner;\n+import com.suse.manager.webui.services.impl.runner.MgrUtilRunner;\n+import com.suse.manager.webui.utils.gson.BootstrapParameters;\n+import com.suse.manager.webui.utils.salt.custom.ScheduleMetadata;\n+import com.suse.salt.netapi.calls.LocalAsyncResult;\n+import com.suse.salt.netapi.calls.LocalCall;\n+import com.suse.salt.netapi.calls.modules.SaltUtil;\n+import com.suse.salt.netapi.calls.modules.State;\n+import com.suse.salt.netapi.calls.modules.Zypper;\n+import com.suse.salt.netapi.calls.runner.Jobs;\n+import com.suse.salt.netapi.calls.wheel.Key;\n+import com.suse.salt.netapi.datatypes.target.MinionList;\n+import com.suse.salt.netapi.datatypes.target.Target;\n+import com.suse.salt.netapi.errors.GenericError;\n+import com.suse.salt.netapi.event.EventStream;\n+import com.suse.salt.netapi.exception.SaltException;\n+import com.suse.salt.netapi.results.Result;\n+import com.suse.salt.netapi.results.SSHResult;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * Interface containing methods for directly interacting and getting information from\n+ * a system.\n+ * Note: This interface should be split up further at some point.\n+ */\n+public interface SystemQuery {\n+\n+    /**\n+     * Query virtual host and domains capabilities.\n+     *\n+     * @param minionId the salt minion virtual host to ask about\n+     * @return the output of the salt virt.all_capabilities call in JSON\n+     */\n+    Optional<Map<String, JsonElement>> getCapabilities(String minionId);\n+\n+    /**\n+     * Query the list of virtual networks defined on a salt minion.\n+     *\n+     * @param minionId the minion to ask about\n+     * @return a list of the network names\n+     */\n+    Map<String, JsonElement> getNetworks(String minionId);\n+\n+    /**\n+     * Query virtual machine definition\n+     *\n+     * @param minionId the host minion ID\n+     * @param domainName the domain name to look for\n+     * @return the XML definition or an empty Optional\n+     */\n+    Optional<GuestDefinition> getGuestDefinition(String minionId, String domainName);\n+\n+    /**\n+     * call salt test.ping\n+     * @param minionId id of the target minion\n+     * @return true\n+     */\n+    Optional<Boolean> ping(String minionId);\n+\n+    /**\n+     * Get the minion keys from salt with their respective status.\n+     *\n+     * @return the keys with their respective status as returned from salt\n+     */\n+    Key.Names getKeys();\n+\n+    /**\n+     * For a given minion id check if there is a key in any of the given status. If no status is given as parameter,\n+     * all the available status are considered.\n+     *\n+     * @param id the id to check for\n+     * @param statusIn array of key status to consider\n+     * @return true if there is a key with the given id, false otherwise\n+     */\n+    boolean keyExists(String id, SaltService.KeyStatus... statusIn);\n+\n+    /**\n+     * Get the minion keys from salt with their respective status and fingerprint.\n+     *\n+     * @return the keys with their respective status and fingerprint as returned from salt\n+     */\n+    Key.Fingerprints getFingerprints();\n+\n+    /**\n+     * Generate a key pair for the given id and accept the public key.\n+     *\n+     * @param id the id to use\n+     * @param force set true to overwrite an already existing key\n+     * @return the generated key pair\n+     */\n+    Key.Pair generateKeysAndAccept(String id, boolean force);\n+\n+    /**\n+     * Get the machine id for a given minion.\n+     *\n+     * @param minionId id of the target minion\n+     * @return the machine id as a string\n+     */\n+    Optional<String> getMachineId(String minionId);\n+\n+    /**\n+     * Delete a given minion's key.\n+     *\n+     * @param minionId id of the minion\n+     */\n+    void deleteKey(String minionId);\n+\n+    /**\n+     * Accept all keys matching the given pattern\n+     *\n+     * @param match a pattern for minion ids\n+     */\n+    void acceptKey(String match);\n+\n+    /**\n+     * Reject a given minion's key.\n+     *\n+     * @param minionId id of the minion\n+     */\n+    void rejectKey(String minionId);\n+\n+    /**\n+     * Delete a Salt key from the \"Rejected Keys\" category using the mgrutil runner.\n+     *\n+     * @param minionId the minionId to look for in \"Rejected Keys\"\n+     * @return the result of the runner call as a map\n+     */\n+    Optional<MgrUtilRunner.ExecResult> deleteRejectedKey(String minionId);\n+\n+    /**\n+     * Return the stream of events happening in salt.\n+     *\n+     * @return the event stream\n+     * @throws SaltException exception occured during connection (if any)\n+     */\n+    EventStream getEventStream() throws SaltException;\n+\n+    /**\n+     * Run a remote command on a given minion.\n+     *\n+     * @param target the target\n+     * @param cmd the command\n+     * @return the output of the command\n+     */\n+    Map<String, Result<String>> runRemoteCommand(MinionList target, String cmd);\n+\n+    /**\n+     * Run a remote command on a given minion asynchronously.\n+     * @param target the target\n+     * @param cmd the command to execute\n+     * @param cancel a future used to cancel waiting on return events\n+     * @return a map holding a {@link CompletionStage}s for each minion\n+     */\n+    Map<String, CompletionStage<Result<String>>> runRemoteCommandAsync(\n+            MinionList target, String cmd, CompletableFuture<GenericError> cancel);\n+\n+    /**\n+     * Query the list of virtual storage pools defined on a salt minion.\n+     *\n+     * @param minionId the minion to ask about\n+     * @return a map associating pool names with their informations as Json elements\n+     */\n+    Map<String, JsonElement> getPools(String minionId);\n+\n+    /**\n+     * Query the list of virtual storage volumes defined on a salt minion.\n+     *\n+     * @param minionId the minion to ask about\n+     * @return a map associating pool names with the list of volumes it contains mapped by their names\n+     */\n+    Map<String, Map<String, JsonElement>> getVolumes(String minionId);\n+\n+    /**\n+     * Returns the currently running jobs on the target\n+     *\n+     * @param target the target\n+     * @return list of running jobs\n+     */\n+    Map<String, Result<List<SaltUtil.RunningInfo>>> running(MinionList target);\n+\n+    /**\n+     * Return the result for a jobId\n+     *\n+     * @param jid the job id\n+     * @return map from minion to result\n+     */\n+    Optional<Jobs.Info> listJob(String jid);\n+\n+    /**\n+     * Match the given target expression asynchronously.\n+     * @param target the target expression\n+     * @param cancel  a future used to cancel waiting on return events\n+     * @return a map holding a {@link CompletionStage}s for each minion\n+     */\n+    Map<String, CompletionStage<Result<Boolean>>> matchAsync(\n+            String target, CompletableFuture<GenericError> cancel);\n+\n+    /**\n+     * Executes match.glob in another thread and returns a {@link CompletionStage}.\n+     * @param target the target to pass to match.glob\n+     * @param cancel a future used to cancel waiting\n+     * @return a future or Optional.empty if there's no ssh-push minion in the db\n+     */\n+    Optional<CompletionStage<Map<String, Result<Boolean>>>> matchAsyncSSH(\n+            String target, CompletableFuture<GenericError> cancel);\n+\n+    /**\n+     * Call 'saltutil.refresh_pillar' to sync the grains to the target minion(s).\n+     * @param minionList minion list\n+     */\n+    void refreshPillar(MinionList minionList);\n+\n+    /**\n+     * Call 'saltutil.sync_grains' to sync the grains to the target minion(s).\n+     * @param minionList minion list\n+     */\n+    void syncGrains(MinionList minionList);\n+\n+    /**\n+     * Call 'saltutil.sync_modules' to sync the grains to the target minion(s).\n+     * @param minionList minion list\n+     */\n+    void syncModules(MinionList minionList);\n+\n+    /**\n+     * Call 'saltutil.sync_all' to sync everything to the target minion(s).\n+     * @param minionList minion list\n+     */\n+    void syncAll(MinionList minionList);\n+\n+    /**\n+     * Performs an test.echo on a target set of minions for checkIn purpose.\n+     * @param targetIn the target\n+     * @return the LocalAsyncResult of the test.echo call\n+     * @throws SaltException if we get a failure from Salt\n+     */\n+    Optional<LocalAsyncResult<String>> checkIn(MinionList targetIn) throws SaltException;\n+\n+    /**\n+     * Apply util.systeminfo state on the specified minion list\n+     * @param minionTarget minion list\n+     */\n+    void updateSystemInfo(MinionList minionTarget);\n+\n+    /**\n+     * Gets a minion's master hostname.\n+     *\n+     * @param minionId the minion id\n+     * @return the master hostname\n+     */\n+    Optional<String> getMasterHostname(String minionId);\n+\n+    /**\n+     * Bootstrap a system using salt-ssh.\n+     *\n+     * @param parameters - bootstrap parameters\n+     * @param bootstrapMods - state modules to be applied during the bootstrap\n+     * @param pillarData - pillar data used salt-ssh call\n+     * @throws SaltException if something goes wrong during command execution or\n+     * during manipulation the salt-ssh roster\n+     * @return the result of the underlying ssh call for given host\n+     */\n+    Result<SSHResult<Map<String, State.ApplyResult>>> bootstrapMinion(\n+            BootstrapParameters parameters, List<String> bootstrapMods,\n+            Map<String, Object> pillarData) throws SaltException;\n+\n+    /**\n+     * Store the files uploaded by a minion to the SCAP storage directory.\n+     * @param minion the minion\n+     * @param uploadDir the uploadDir\n+     * @param actionId the action id\n+     * @return a map with one element: @{code true} -> scap store path,\n+     * {@code false} -> err message\n+     *\n+     */\n+    Map<Boolean, String> storeMinionScapFiles(\n+            MinionServer minion, String uploadDir, Long actionId);\n+\n+    /**\n+     * Call the custom mgrutil.ssh_keygen runner if the key files are not present.\n+     *\n+     * @param path of the key files\n+     * @return the result of the runner call as a map\n+     */\n+    Optional<MgrUtilRunner.ExecResult> generateSSHKey(String path);\n+\n+    /**\n+     * Chain ssh calls over one or more hops to run a command on the last host in the chain.\n+     * This calls the mgrutil.chain_ssh_command runner.\n+     *\n+     * @param hosts a list of hosts, where the last one is where\n+     *              the command will be executed\n+     * @param clientKey the ssh key to use to connect to the first host\n+     * @param proxyKey the ssh key path to use for the rest of the hosts\n+     * @param user the user\n+     * @param options ssh options\n+     * @param command the command to execute\n+     * @param outputfile the file to which to dump the command stdout\n+     * @return the execution result\n+     */\n+    Optional<MgrUtilRunner.ExecResult> chainSSHCommand(List<String> hosts,\n+        String clientKey,\n+        String proxyKey,\n+        String user,\n+        Map<String, String> options,\n+        String command,\n+        String outputfile);\n+\n+    /**\n+     * Get information about all containers running in a Kubernetes cluster.\n+     * @param kubeconfig path to the kubeconfig file\n+     * @param context kubeconfig context to use\n+     * @return a list of containers\n+     */\n+    Optional<List<MgrK8sRunner.Container>> getAllContainers(String kubeconfig, String context);\n+\n+    /**\n+     * Remove SUSE Manager specific configuration from a Salt minion.\n+     *\n+     * @param minion the minion.\n+     * @param timeout operation timeout\n+     * @return list of error messages or empty if no error\n+     */\n+    Optional<List<String>> cleanupMinion(MinionServer minion, int timeout);\n+\n+    /**\n+     * Send notification about a system id to be generated.\n+     * @param minion target minion.\n+     * @throws InstantiationException if signature generation fails\n+     * @throws SaltException if anything goes wrong.\n+     */\n+    void notifySystemIdGenerated(MinionServer minion) throws InstantiationException, SaltException;\n+\n+    /**\n+     * Get pending resume information.\n+     * @param minionIds to target.\n+     * @return pending resume information.\n+     * @throws SaltException if anything goes wrong.\n+     */\n+    Map<String, Result<Map<String, String>>> getPendingResume(List<String> minionIds) throws SaltException;\n+\n+    /**\n+     * Return show highstate result.\n+     * @param minionId of the target minion.\n+     * @return show highstate result.\n+     * @throws SaltException if anything goes wrong.\n+     */\n+    Map<String, Result<Object>> showHighstate(String minionId) throws SaltException;\n+\n+    /**\n+     * Query product information.\n+     * @param minionId of the target minion.\n+     * @return product information\n+     */\n+    Optional<List<Zypper.ProductInfo>> getProducts(String minionId);\n+\n+    /**\n+     * Execute a LocalCall asynchronously on the default Salt client.\n+     *\n+     * @deprecated this function is too general and should be replaced by more specific functionality.\n+     * @param <T> the return type of the call\n+     * @param callIn the call to execute\n+     * @param target minions targeted by the call\n+     * @param metadataIn the metadata to be passed in the call\n+     * @return the LocalAsyncResult of the call\n+     * @throws SaltException in case of an error executing the job with Salt\n+     */\n+    @Deprecated\n+    <T> Optional<LocalAsyncResult<T>> callAsync(LocalCall<T> callIn, Target<?> target,\n+                                                       Optional<ScheduleMetadata> metadataIn) throws SaltException;\n+\n+    /**\n+     * Sync the channels of a list of minions\n+     * @param minionIds of the targets.\n+     * @throws SaltException if anything goes wrong.\n+     */\n+    void deployChannels(List<String> minionIds) throws SaltException;\n+\n+    /**\n+     * Upload built Kiwi image to SUSE Manager\n+     *\n+     * @param minion     the minion\n+     * @param filepath   the filepath of the image to upload, in the build host\n+     * @param imageStore the image store location\n+     * @return the execution result\n+     */\n+    Optional<MgrUtilRunner.ExecResult> collectKiwiImage(MinionServer minion, String filepath,\n+                                                               String imageStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cbafa49fa3348ea923b52991e78ec4d8e844d9"}, "originalPosition": 415}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjY5MTI1OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/messaging/MessageQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTo1ODozNVrOF0z98A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjowMDo0MFrOF09sCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyMTcxMg==", "bodyText": "I assume we will use this systemQuery later in some other PR, right?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r390921712", "createdAt": "2020-03-11T11:58:35Z", "author": {"login": "admd"}, "path": "java/code/src/com/redhat/rhn/common/messaging/MessageQueue.java", "diffHunk": "@@ -267,9 +268,9 @@ public static boolean isMessaging() {\n     /**\n      * Configures defaut messaging actions needed by RHN\n      * This method should be called directly after <code>startMessaging</code>.\n-     *\n+     * @param systemQuery instance for gathering data from a system.\n      */\n-    public static void configureDefaultActions() {\n+    public static void configureDefaultActions(SystemQuery systemQuery) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MDk2OA==", "bodyText": "not sure it was used until last rebase when the only *Action class that needed it was removed completely. I will remove it for now.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r391080968", "createdAt": "2020-03-11T16:00:40Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/common/messaging/MessageQueue.java", "diffHunk": "@@ -267,9 +268,9 @@ public static boolean isMessaging() {\n     /**\n      * Configures defaut messaging actions needed by RHN\n      * This method should be called directly after <code>startMessaging</code>.\n-     *\n+     * @param systemQuery instance for gathering data from a system.\n      */\n-    public static void configureDefaultActions() {\n+    public static void configureDefaultActions(SystemQuery systemQuery) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyMTcxMg=="}, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjY5NTYwOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/messaging/MessageQueue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTo1OTo1OVrOF00ApA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTo1OTo1OVrOF00ApA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyMjQwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Configures defaut messaging actions needed by RHN\n          \n          \n            \n                 * Configures default messaging actions needed by RHN", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r390922404", "createdAt": "2020-03-11T11:59:59Z", "author": {"login": "admd"}, "path": "java/code/src/com/redhat/rhn/common/messaging/MessageQueue.java", "diffHunk": "@@ -267,9 +268,9 @@ public static boolean isMessaging() {\n     /**\n      * Configures defaut messaging actions needed by RHN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjc3NDUzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/HandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjoyNzowN1rOF00xqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjoyNzowN1rOF00xqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzNDk1NA==", "bodyText": "Nice to have this constructor but do we need it?  If not, let's add it when we need it.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r390934954", "createdAt": "2020-03-11T12:27:07Z", "author": {"login": "admd"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/HandlerFactory.java", "diffHunk": "@@ -28,16 +82,103 @@\n  */\n \n public class HandlerFactory {\n-    private ManifestFactory factory;\n-    private static final String PKG_NAME = \"com.redhat.rhn.frontend.xmlrpc\";\n+    private final Map<String, BaseHandler> handlers;\n \n-    /** private constructor */\n+    /**\n+     *  Creates an empty HandlerFactory.\n+     */\n     public HandlerFactory() {\n-        this(new ClassBuilder(PKG_NAME, \"handler-manifest.xml\"));\n+        this.handlers = new HashMap<>();\n+    }\n+\n+    /**\n+     * Creates a HandlerFactory prepopulated with handlers.\n+     * @param handlersIn to add to the handler factory.\n+     */\n+    public HandlerFactory(Map<String, BaseHandler> handlersIn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjkwNjAzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/api/ApiHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowNzoxNFrOF02Cvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoxODo0MlrOF0-dzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1NTcxMA==", "bodyText": "Haven't tested it but wouldn't handlers.getHandler(namespace).getClass() always return java.util.Optional  class here?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r390955710", "createdAt": "2020-03-11T13:07:14Z", "author": {"login": "admd"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/api/ApiHandler.java", "diffHunk": "@@ -83,17 +88,12 @@ private Collection getNamespaces() {\n      *        #prop_desc(\"string\", \"handler\", \"API Handler\")\n      *   #struct_end()\n      */\n-    public Map getApiNamespaces(User loggedInUser) {\n-        Map namespacesHash = new HashMap();\n-        HandlerFactory hf = new HandlerFactory();\n-\n-        Iterator i = getNamespaces().iterator();\n-        while (i.hasNext()) {\n-                String namespace = (String)i.next();\n-                namespacesHash.put(namespace, StringUtil.getClassNameNoPackage(\n-                                                hf.getHandler(namespace).getClass()));\n-        }\n-        return namespacesHash;\n+    public Map<String, String> getApiNamespaces(User loggedInUser) {\n+        return handlers.getKeys().stream().collect(Collectors.toMap(\n+           namespace -> namespace,\n+           namespace -> StringUtil.getClassNameNoPackage(\n+                       handlers.getHandler(namespace).getClass())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5MzcwOA==", "bodyText": "good catch thanks \ud83d\udc4d", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r391093708", "createdAt": "2020-03-11T16:18:42Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/api/ApiHandler.java", "diffHunk": "@@ -83,17 +88,12 @@ private Collection getNamespaces() {\n      *        #prop_desc(\"string\", \"handler\", \"API Handler\")\n      *   #struct_end()\n      */\n-    public Map getApiNamespaces(User loggedInUser) {\n-        Map namespacesHash = new HashMap();\n-        HandlerFactory hf = new HandlerFactory();\n-\n-        Iterator i = getNamespaces().iterator();\n-        while (i.hasNext()) {\n-                String namespace = (String)i.next();\n-                namespacesHash.put(namespace, StringUtil.getClassNameNoPackage(\n-                                                hf.getHandler(namespace).getClass()));\n-        }\n-        return namespacesHash;\n+    public Map<String, String> getApiNamespaces(User loggedInUser) {\n+        return handlers.getKeys().stream().collect(Collectors.toMap(\n+           namespace -> namespace,\n+           namespace -> StringUtil.getClassNameNoPackage(\n+                       handlers.getHandler(namespace).getClass())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1NTcxMA=="}, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjk1MTY1OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzoxOTowOVrOF02e0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoyMDowNFrOF0-hiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2Mjg5OQ==", "bodyText": "We will be removing all of such methods, right?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r390962899", "createdAt": "2020-03-11T13:19:09Z", "author": {"login": "admd"}, "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -64,10 +65,10 @@ public static synchronized FormulaManager getInstance() {\n \n     /**\n      * This method is only for testing purpose.\n-     * @param saltServiceIn to set\n+     * @param systemQueryIn to set\n      */\n-    public void setSaltService(SaltService saltServiceIn) {\n-        this.saltService = saltServiceIn;\n+    public void setSystemQuery(SaltService systemQueryIn) {\n+        this.systemQuery = systemQueryIn;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5NDY2NA==", "bodyText": "yes that's the long term plan.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r391094664", "createdAt": "2020-03-11T16:20:04Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -64,10 +65,10 @@ public static synchronized FormulaManager getInstance() {\n \n     /**\n      * This method is only for testing purpose.\n-     * @param saltServiceIn to set\n+     * @param systemQueryIn to set\n      */\n-    public void setSaltService(SaltService saltServiceIn) {\n-        this.saltService = saltServiceIn;\n+    public void setSystemQuery(SaltService systemQueryIn) {\n+        this.systemQuery = systemQueryIn;\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2Mjg5OQ=="}, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzM3NzcwOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/reactor/messaging/MinionStartEventMessageAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1NTo0N1rOF06rWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1NTo0N1rOF06rWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMTY0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param systemQueryIn the system to use\n          \n          \n            \n                 * @param systemQueryIn systemQuery instance for gathering data from a system.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r391031642", "createdAt": "2020-03-11T14:55:47Z", "author": {"login": "admd"}, "path": "java/code/src/com/suse/manager/reactor/messaging/MinionStartEventMessageAction.java", "diffHunk": "@@ -32,22 +32,15 @@\n     private static final Logger LOG = Logger.getLogger(MinionStartEventMessageAction.class);\n \n     // Reference to the SaltService instance\n-    private final SaltService SALT_SERVICE;\n+    private final SystemQuery systemQuery;\n \n     /**\n-     * Default constructor.\n-     */\n-    public MinionStartEventMessageAction() {\n-        this(SaltService.INSTANCE);\n-    }\n-\n-    /**\n-     * Constructor taking a {@link SaltService} instance.\n+     * Constructor taking a {@link SystemQuery} instance.\n      *\n-     * @param saltService the salt service to use\n+     * @param systemQueryIn the system to use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzM4MjQzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/reactor/messaging/RegisterMinionEventMessageAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1Njo0NlrOF06uWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1Njo0NlrOF06uWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMjQxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param systemQueryIn the salt service to use\n          \n          \n            \n                 * @param systemQueryIn systemQuery instance for gathering data from a system.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r391032410", "createdAt": "2020-03-11T14:56:46Z", "author": {"login": "admd"}, "path": "java/code/src/com/suse/manager/reactor/messaging/RegisterMinionEventMessageAction.java", "diffHunk": "@@ -93,25 +93,18 @@\n             RegisterMinionEventMessageAction.class);\n \n     // Reference to the SaltService instance\n-    private final SaltService SALT_SERVICE;\n+    private final SystemQuery systemQuery;\n \n     private static final String FQDN = \"fqdn\";\n     private static final String TERMINALS_GROUP_NAME = \"TERMINALS\";\n \n     /**\n-     * Default constructor.\n-     */\n-    public RegisterMinionEventMessageAction() {\n-        this(SaltService.INSTANCE);\n-    }\n-\n-    /**\n-     * Constructor taking a {@link SaltService} instance.\n+     * Constructor taking a {@link SystemQuery} instance.\n      *\n-     * @param saltService the salt service to use\n+     * @param systemQueryIn the salt service to use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzUyMTcyOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/iface/SystemQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNToyNzoyNVrOF08H2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoxNjowMVrOF0-WcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1NTMyMA==", "bodyText": "iface? Out of curiosity, what does it represent?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r391055320", "createdAt": "2020-03-11T15:27:25Z", "author": {"login": "admd"}, "path": "java/code/src/com/suse/manager/webui/services/iface/SystemQuery.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.iface;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5MTgyNA==", "bodyText": "I suggested iface as I found it commonly used for interfaces as opposed to impl for their implementations.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r391091824", "createdAt": "2020-03-11T16:16:01Z", "author": {"login": "renner"}, "path": "java/code/src/com/suse/manager/webui/services/iface/SystemQuery.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.iface;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1NTMyMA=="}, "originalCommit": {"oid": "b1922b23994b09fe2cf427769d93c833ff122f3f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzk4MjIwOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/HandlerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNToyNTozNFrOF2fitg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDowOTowNlrOF3VgkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NDIxNA==", "bodyText": "Nitpicks:\n\nmethod name: as this returns a Factory (rather than a Collection of Handlers), shouldn't these be named something like getTestHandlerFactory/getDefaultHandlerFactory instead of mockHandlers/defaultHandlers?\nshouldn't mockHandlers ideally live in unit test code only? Are there cons with that?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392684214", "createdAt": "2020-03-15T15:25:34Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/HandlerFactory.java", "diffHunk": "@@ -28,16 +82,95 @@\n  */\n \n public class HandlerFactory {\n-    private ManifestFactory factory;\n-    private static final String PKG_NAME = \"com.redhat.rhn.frontend.xmlrpc\";\n+    private final Map<String, BaseHandler> handlers;\n \n-    /** private constructor */\n+    /**\n+     *  Creates an empty HandlerFactory.\n+     */\n     public HandlerFactory() {\n-        this(new ClassBuilder(PKG_NAME, \"handler-manifest.xml\"));\n+        this.handlers = new HashMap<>();\n+    }\n+\n+    /**\n+     * HandlerFactory prepopulated with unit test handlers.\n+     * @return HandlerFactory for unit tests.\n+     */\n+    public static HandlerFactory mockHandlers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2ODQwMA==", "bodyText": "I'm not really happy with the naming overall here after the refactoring but i did not want to make too many changes in this PR. I adopted the names you suggest for now but i guess a follow up PR can just focus on finding more fitting names for those classes.\nAlso moved the mocking to a test utils class.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r393568400", "createdAt": "2020-03-17T10:09:06Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/HandlerFactory.java", "diffHunk": "@@ -28,16 +82,95 @@\n  */\n \n public class HandlerFactory {\n-    private ManifestFactory factory;\n-    private static final String PKG_NAME = \"com.redhat.rhn.frontend.xmlrpc\";\n+    private final Map<String, BaseHandler> handlers;\n \n-    /** private constructor */\n+    /**\n+     *  Creates an empty HandlerFactory.\n+     */\n     public HandlerFactory() {\n-        this(new ClassBuilder(PKG_NAME, \"handler-manifest.xml\"));\n+        this.handlers = new HashMap<>();\n+    }\n+\n+    /**\n+     * HandlerFactory prepopulated with unit test handlers.\n+     * @return HandlerFactory for unit tests.\n+     */\n+    public static HandlerFactory mockHandlers() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NDIxNA=="}, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzk5MjA3OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/HandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNTozOTo1MVrOF2foEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNTozOTo1MVrOF2foEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NTU4Ng==", "bodyText": "Code does not agree with comment any longer", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392685586", "createdAt": "2020-03-15T15:39:51Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/HandlerFactory.java", "diffHunk": "@@ -28,16 +82,95 @@\n  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAwMTQ1OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/test/SystemHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNTo1NDowN1rOF2ftKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNTo1NDowN1rOF2ftKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4Njg5MA==", "bodyText": "I wonder if we should allow using the non-mocked SaltService in test code (I understand this was the case even before this PR). What is your opinion?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392686890", "createdAt": "2020-03-15T15:54:07Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/test/SystemHandlerTest.java", "diffHunk": "@@ -1859,7 +1860,11 @@ public void testSetDetailsBaseEntitlementAsNonOrgAdmin() throws Exception {\n     }\n \n     public void testAddEntitlements() throws Exception {\n-        Server server = ServerTestUtils.createVirtHostWithGuests(admin, 0);\n+        SystemEntitlementManager systemEntitlementManager = new SystemEntitlementManager(\n+                new SystemUnentitler(),\n+                new SystemEntitler(SaltService.INSTANCE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAwNzMxOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/HandlerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowMzoyMlrOF2fwTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDowNjo1M1rOF3Vb9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzY5NA==", "bodyText": "I wonder if returning Optional is the right choice here, as I see that basically all call sites immediately use get() on the result.\nHow about instead throwing an unchecked, descriptive Exception here that will result in something like \"handlerName not found\" in logs, instead of NPE, whenever handlers.get yields null - thereby avoiding the Optional wrapping?\nWhat do you think, what would be pros and cons?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392687694", "createdAt": "2020-03-15T16:03:22Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/HandlerFactory.java", "diffHunk": "@@ -46,15 +179,15 @@ protected HandlerFactory(ClassBuilder builder) {\n      * @param handlerName the name of the handler\n      * @return Object of the handler in question.\n      */\n-    public BaseHandler getHandler(String handlerName) {\n-        return (BaseHandler)factory.getObject(handlerName);\n+    public Optional<BaseHandler> getHandler(String handlerName) {\n+        return Optional.ofNullable(handlers.get(handlerName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NzIyMg==", "bodyText": "looking at the invocations there is really only 1 place that looks up a handler by user input. I added a orElseThrow there with a descriptive message. All the other invocations are either in tests or by using only values from getKeys. Optimally we should probably change this method to return a Set<Tuple2<String, BaseHandler>> so there is no need for an unsafe get.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r393567222", "createdAt": "2020-03-17T10:06:53Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/HandlerFactory.java", "diffHunk": "@@ -46,15 +179,15 @@ protected HandlerFactory(ClassBuilder builder) {\n      * @param handlerName the name of the handler\n      * @return Object of the handler in question.\n      */\n-    public BaseHandler getHandler(String handlerName) {\n-        return (BaseHandler)factory.getObject(handlerName);\n+    public Optional<BaseHandler> getHandler(String handlerName) {\n+        return Optional.ofNullable(handlers.get(handlerName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzY5NA=="}, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAxOTM0OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/iface/SystemQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjoyMzoxMFrOF2f3CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjoxNjoyMlrOF2xQeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4OTQxNg==", "bodyText": "Should we move this outside the webui package? This sounds to me as not tied to the UI at all.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392689416", "createdAt": "2020-03-15T16:23:10Z", "author": {"login": "moio"}, "path": "java/code/src/com/suse/manager/webui/services/iface/SystemQuery.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.iface;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk3NDQ1Nw==", "bodyText": "see #1954 (comment).", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392974457", "createdAt": "2020-03-16T12:16:22Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/webui/services/iface/SystemQuery.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.iface;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4OTQxNg=="}, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAyODkzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/iface/SystemQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjozODo0NFrOF2f8NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjozODo0NFrOF2f8NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MDc0MA==", "bodyText": "I have to say I felt a bit confused with the name of this interface. My sense of confusion comes from two aspects.\nFirst: in English, \"query\" by and large means \"question\" (see wiktionary), which is not really what we have here. Classes implementing this interface sound more to me like a \"query acceptors\", \"query processors\", \"system information retrievers\" - if we exclude ping, acceptKey/rejectKey and similar methods which are not really \"read-only\".\n\"Querier\" sounds a bit strange but would fit at least for me, at least for the \"read-only\" methods. \"Writing\" methods could be given an \"Actuator\" name or something similar, with SaltService implementing both. How does that feel to you?\nSecond problem, is that at least now I see this as quite coupled with Salt (acceptKey, getFingerprints, refreshPillar...), so I am not sure we want to give it an overgeneral name at least for now. How about using Minion or SaltClient as the prefix instead of System?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392690740", "createdAt": "2020-03-15T16:38:44Z", "author": {"login": "moio"}, "path": "java/code/src/com/suse/manager/webui/services/iface/SystemQuery.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.iface;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.JsonElement;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.suse.manager.reactor.SaltReactor;\n+import com.suse.manager.virtualization.GuestDefinition;\n+import com.suse.manager.virtualization.PoolCapabilitiesJson;\n+import com.suse.manager.virtualization.PoolDefinition;\n+import com.suse.manager.webui.services.impl.SaltSSHService;\n+import com.suse.manager.webui.services.impl.SaltService;\n+import com.suse.manager.webui.services.impl.runner.MgrK8sRunner;\n+import com.suse.manager.webui.services.impl.runner.MgrUtilRunner;\n+import com.suse.manager.webui.utils.gson.BootstrapParameters;\n+import com.suse.manager.webui.utils.salt.custom.ScheduleMetadata;\n+import com.suse.salt.netapi.calls.LocalAsyncResult;\n+import com.suse.salt.netapi.calls.LocalCall;\n+import com.suse.salt.netapi.calls.modules.SaltUtil;\n+import com.suse.salt.netapi.calls.modules.State;\n+import com.suse.salt.netapi.calls.modules.Zypper;\n+import com.suse.salt.netapi.calls.runner.Jobs;\n+import com.suse.salt.netapi.calls.wheel.Key;\n+import com.suse.salt.netapi.datatypes.target.MinionList;\n+import com.suse.salt.netapi.datatypes.target.Target;\n+import com.suse.salt.netapi.errors.GenericError;\n+import com.suse.salt.netapi.event.EventStream;\n+import com.suse.salt.netapi.exception.SaltException;\n+import com.suse.salt.netapi.results.Result;\n+import com.suse.salt.netapi.results.SSHResult;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * Interface containing methods for directly interacting and getting information from a system.\n+ * Note: This interface should be split up further at some point.\n+ */\n+public interface SystemQuery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzMjEzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemEntitler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo0NTowMlrOF2f-HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo0NTowMlrOF2f-HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MTIyOA==", "bodyText": "This seems to be dead code now (as it should be!)\nConsider removing.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392691228", "createdAt": "2020-03-15T16:45:02Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemEntitler.java", "diffHunk": "@@ -330,6 +330,6 @@ else if (toolsChannel == null) {\n      * @param saltServiceIn The SaltService\n      */\n     public void setSaltService(SaltService saltServiceIn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzNzU0OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/matcher/test/MatcherJsonIOTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1NToyMVrOF2gBHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjowNToxOFrOF3HStw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MTk5Ng==", "bodyText": "Isn't this pattern more brittle to future changes that require more functionality from SaltService?\nBefore: one only whitelists methods available from mocked class. If an unexpected method is called, it fails immediately\nAfter: one uses the real class, but overwrites some methods. New calls might go undetected, or it might be more difficult to see why they fail\nAm I missing something? Do you see other pros I am currently not seeing?", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392691996", "createdAt": "2020-03-15T16:55:21Z", "author": {"login": "moio"}, "path": "java/code/src/com/suse/manager/matcher/test/MatcherJsonIOTest.java", "diffHunk": "@@ -65,19 +68,22 @@\n     private static final String AMD64_ARCH = \"amd64\";\n     private static final String S390_ARCH = \"s390\";\n     private static final String PPC64LE_ARCH = \"ppc64le\";\n+    private SystemEntitlementManager systemEntitlementManager;\n \n     @Override\n     public void setUp() throws Exception {\n         super.setUp();\n         setImposteriser(ClassImposteriser.INSTANCE);\n \n-        SaltService saltServiceMock = context().mock(SaltService.class);\n-        context().checking(new Expectations() {{\n-            allowing(saltServiceMock).callSync(\n-                    with(any(LocalCall.class)),\n-                    with(any(String.class)));\n-        }});\n-        SystemEntitler.INSTANCE.setSaltService(saltServiceMock);\n+        SaltService saltServiceMock = new SaltService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1ODQ4MQ==", "bodyText": "The primary reason for getting rid of the mocking framework is to make tests easier to understand/write since everybody knows basic inheritance and overriding methods.\nAnother minor benefit is failure at compile time rather then runtime when changing return types of methods.\nI don't worry about calls going undetected since that would mean the test passing. It could be more difficult to see why something fails in some case in most it will probably lead to an exception with a stacktrace since most methods are mocking things that are not available in the test environment. We could retain this behavior by having a test implementation of each interface that throws an not implemented exception for every method that is not overridden.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r393258481", "createdAt": "2020-03-16T19:19:23Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/matcher/test/MatcherJsonIOTest.java", "diffHunk": "@@ -65,19 +68,22 @@\n     private static final String AMD64_ARCH = \"amd64\";\n     private static final String S390_ARCH = \"s390\";\n     private static final String PPC64LE_ARCH = \"ppc64le\";\n+    private SystemEntitlementManager systemEntitlementManager;\n \n     @Override\n     public void setUp() throws Exception {\n         super.setUp();\n         setImposteriser(ClassImposteriser.INSTANCE);\n \n-        SaltService saltServiceMock = context().mock(SaltService.class);\n-        context().checking(new Expectations() {{\n-            allowing(saltServiceMock).callSync(\n-                    with(any(LocalCall.class)),\n-                    with(any(String.class)));\n-        }});\n-        SystemEntitler.INSTANCE.setSaltService(saltServiceMock);\n+        SaltService saltServiceMock = new SaltService() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MTk5Ng=="}, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzNTQ3OQ==", "bodyText": "I agree with this perspective and leave it up to you to decide if and when such a test implementation makes sense. Thanks", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r393335479", "createdAt": "2020-03-16T22:05:18Z", "author": {"login": "moio"}, "path": "java/code/src/com/suse/manager/matcher/test/MatcherJsonIOTest.java", "diffHunk": "@@ -65,19 +68,22 @@\n     private static final String AMD64_ARCH = \"amd64\";\n     private static final String S390_ARCH = \"s390\";\n     private static final String PPC64LE_ARCH = \"ppc64le\";\n+    private SystemEntitlementManager systemEntitlementManager;\n \n     @Override\n     public void setUp() throws Exception {\n         super.setUp();\n         setImposteriser(ClassImposteriser.INSTANCE);\n \n-        SaltService saltServiceMock = context().mock(SaltService.class);\n-        context().checking(new Expectations() {{\n-            allowing(saltServiceMock).callSync(\n-                    with(any(LocalCall.class)),\n-                    with(any(String.class)));\n-        }});\n-        SystemEntitler.INSTANCE.setSaltService(saltServiceMock);\n+        SaltService saltServiceMock = new SaltService() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MTk5Ng=="}, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzODg2OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/virtualization/VirtManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1NzowMFrOF2gBwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjowNTo1MFrOF3HTeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjE2MQ==", "bodyText": "Do we even need this class now? All functionality is completely delegated to SystemQuery at this point.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392692161", "createdAt": "2020-03-15T16:57:00Z", "author": {"login": "moio"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManager.java", "diffHunk": "@@ -16,24 +16,25 @@\n \n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n-import com.google.gson.reflect.TypeToken;\n-import com.suse.manager.webui.services.impl.SaltService;\n-import com.suse.salt.netapi.calls.LocalCall;\n+import com.suse.manager.webui.services.iface.SystemQuery;\n \n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n \n /**\n  * Service providing utility functions to handle virtual machines.\n  */\n public class VirtManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1OTkwOQ==", "bodyText": "All those methods are just temporarily in SystemQuery but will be split up into additional interfaces in a future PR. VirtManager is probably on of the most logical ones the become its own interface.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392959909", "createdAt": "2020-03-16T11:47:01Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManager.java", "diffHunk": "@@ -16,24 +16,25 @@\n \n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n-import com.google.gson.reflect.TypeToken;\n-import com.suse.manager.webui.services.impl.SaltService;\n-import com.suse.salt.netapi.calls.LocalCall;\n+import com.suse.manager.webui.services.iface.SystemQuery;\n \n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n \n /**\n  * Service providing utility functions to handle virtual machines.\n  */\n public class VirtManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjE2MQ=="}, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzNTY3NA==", "bodyText": "OK in the assumption this goes into the next PR of this series", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r393335674", "createdAt": "2020-03-16T22:05:50Z", "author": {"login": "moio"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManager.java", "diffHunk": "@@ -16,24 +16,25 @@\n \n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n-import com.google.gson.reflect.TypeToken;\n-import com.suse.manager.webui.services.impl.SaltService;\n-import com.suse.salt.netapi.calls.LocalCall;\n+import com.suse.manager.webui.services.iface.SystemQuery;\n \n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n \n /**\n  * Service providing utility functions to handle virtual machines.\n  */\n public class VirtManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjE2MQ=="}, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDA0OTI0OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/FutureUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNzoxNTo0N1rOF2gHMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTozMzo0N1rOF3DA8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MzU1NQ==", "bodyText": "What motivated the choice of using one thread here, given original code allocated 5?\nhttps://github.com/uyuni-project/uyuni/blob/4.1-alpha1/java/code/src/com/suse/manager/webui/services/impl/SaltService.java#L155\nUnrelated note: SaltService.scheduledExecutorService seems to be dead code now.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392693555", "createdAt": "2020-03-15T17:15:47Z", "author": {"login": "moio"}, "path": "java/code/src/com/suse/manager/webui/services/FutureUtils.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * Class providing utility methods for futures.\n+ */\n+public class FutureUtils {\n+\n+    private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE =\n+            Executors.newScheduledThreadPool(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2NTM5Mw==", "bodyText": "reasoning was that this thread pool is not used for heavy long running computation but only to set a future to failed so 1 thread should be enough for that.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r393265393", "createdAt": "2020-03-16T19:33:47Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/webui/services/FutureUtils.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * Class providing utility methods for futures.\n+ */\n+public class FutureUtils {\n+\n+    private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE =\n+            Executors.newScheduledThreadPool(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MzU1NQ=="}, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDA1MTU4OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/impl/SaltService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNzoyMDoyMlrOF2gIig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNzoyMDoyMlrOF2gIig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5Mzg5OA==", "bodyText": "Nitpick: I'd suggest to either have this tag on all public methods or just remove it everywhere.", "url": "https://github.com/uyuni-project/uyuni/pull/1954#discussion_r392693898", "createdAt": "2020-03-15T17:20:22Z", "author": {"login": "moio"}, "path": "java/code/src/com/suse/manager/webui/services/impl/SaltService.java", "diffHunk": "@@ -226,6 +239,72 @@ public void setReactor(SaltReactor reactorIn) {\n         }\n     }\n \n+    @Override\n+    public Optional<Map<String, JsonElement>> getCapabilities(String minionId) {\n+        LocalCall<Map<String, JsonElement>> call =\n+                new LocalCall<>(\"virt.all_capabilities\", Optional.empty(), Optional.empty(),\n+                        new TypeToken<Map<String, JsonElement>>() { });\n+\n+        return callSync(call, minionId);\n+    }\n+\n+    @Override\n+    public Map<String, JsonObject> getNetworks(String minionId) {\n+        Map<String, Object> args = new LinkedHashMap<>();\n+        LocalCall<Map<String, JsonElement>> call =\n+                new LocalCall<>(\"virt.network_info\", Optional.empty(), Optional.of(args),\n+                        new TypeToken<Map<String, JsonElement>>() { });\n+\n+        Optional<Map<String, JsonElement>> nets = callSync(call, minionId);\n+        Map<String, JsonElement> result = nets.orElse(new HashMap<String, JsonElement>());\n+\n+        // Workaround: Filter out the entries that don't match since we may get a retcode=0 one.\n+        return result.entrySet().stream()\n+                .filter(entry -> entry.getValue().isJsonObject())\n+                .collect(Collectors.toMap(entry -> entry.getKey(), entry -> entry.getValue().getAsJsonObject()));\n+    }\n+\n+    /**\n+     * {@inheritDoc}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f6343ef5635bb1b4cf255d7113108be5a9ac9"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 191, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}