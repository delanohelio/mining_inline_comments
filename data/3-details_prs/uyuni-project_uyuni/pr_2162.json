{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODk5MzY1", "number": 2162, "title": "Reposync speedup part 3", "bodyText": "What does this PR change?\nIt replaces the existing mechanism in spacewalk-repo-sync to insert \"non-special\" per-package table rows (anything other than capabilities, changelogs and checksums) with a more efficient one.\nTotal speedup is ~140%, individual contributions from relevant commits as measured in my setup (syncing sles11-sp4-updates-x86_64 from a local mirror, robustly transferable to other channels) follow:\n\n\n\nCommit\nSpeedup\n\n\n\n\nreposync speedup: use execute_values for INSERTS of generic tables\n77.58%\n\n\nreposync speedup: use fast execution helper in executemany\n64.02%\n\n\n\nChange details\nInsert batches before this patch used the executemany method from psycopg2, which is notoriously slow, and this PR refactors code to use the faster execute_values and execute_batch instead. Per the library documentation:\n\nThe current implementation of executemany() is (using an extremely charitable understatement) not particularly performing. [The alternative execute_values and execute_batch methods] can be used to speed up the repeated execution of a statement against a set of parameters. By reducing the number of server roundtrips the performance can be orders of magnitude better than using executemany().\"\n\nSource: https://www.psycopg.org/docs/extras.html#fast-execution-helpers\nDependencies\nThis change requires the latest psycopg2 library in order to work, and builds on top of #2157 for this reason.\nGUI diff\nNo difference.\n\n DONE\n\nDocumentation\n\nNo documentation needed: internal change only\n DONE\n\nTest coverage\n\n\nNo tests: Cucumber tests to be implemented after reposync is fast enough\n\n\n DONE\n\n\nLinks\nFixes partially SUSE/spacewalk#9275\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"ruby_rubocop\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-04-25T12:16:06Z", "url": "https://github.com/uyuni-project/uyuni/pull/2162", "merged": true, "mergeCommit": {"oid": "229b6fd784c0f8095b79456b42340ed0448290d8"}, "closed": true, "closedAt": "2020-04-25T13:08:33Z", "author": {"login": "moio"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbFO1dAH2gAyNDA4ODk5MzY1OmExMzhlMDc5ODBjMmNkMTJjMWJmZWExNzkzMTcyODlmNjAxNWY1YWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbFuAkgFqTQwMDM5MTcxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a138e07980c2cd12c1bfea179317289f6015f5aa", "author": {"user": {"login": "moio", "name": "Silvio Moioli"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a138e07980c2cd12c1bfea179317289f6015f5aa", "committedDate": "2020-04-25T12:27:46Z", "message": "refactoring: avoid returning and using counts from executemany\n\npsycopg2.extras.execute_batch does not guarantee rowcount is correct,\nand we do nothing but logging those anyway."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01d321c377ecb56532802ea31bf4efd66a76c3d3", "author": {"user": {"login": "moio", "name": "Silvio Moioli"}}, "url": "https://github.com/uyuni-project/uyuni/commit/01d321c377ecb56532802ea31bf4efd66a76c3d3", "committedDate": "2020-04-25T12:27:46Z", "message": "reposync speedup: use fast execution helper in executemany\n\n\"The current implementation of executemany() is (using an extremely\ncharitable understatement) not particularly performing. These functions\ncan be used to speed up the repeated execution of a statement against a\nset of parameters. By reducing the number of server roundtrips the\nperformance can be orders of magnitude better than using executemany().\"\n\nhttps://www.psycopg.org/docs/extras.html#fast-exec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bb6b88cf846d49810428245fa54f17044a396d9", "author": {"user": {"login": "moio", "name": "Silvio Moioli"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1bb6b88cf846d49810428245fa54f17044a396d9", "committedDate": "2020-04-25T12:27:46Z", "message": "reposync speedup: use execute_values for INSERTS of generic tables\n\nexecutemany() is replaced with a fast execution helper, in particular\nexecute_values() which benchmarks better than execute_batch when it\nis applicable.\n\n\"The current implementation of executemany() is (using an extremely\ncharitable understatement) not particularly performing. These functions\ncan be used to speed up the repeated execution of a statement against a\nset of parameters. By reducing the number of server roundtrips the\nperformance can be orders of magnitude better than using executemany().\"\n\nhttps://www.psycopg.org/docs/extras.html#fast-exec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3774a4ab160e01fa44bad9614b3fa6e86e48140", "author": {"user": {"login": "moio", "name": "Silvio Moioli"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e3774a4ab160e01fa44bad9614b3fa6e86e48140", "committedDate": "2020-04-25T12:27:46Z", "message": "refactoring: avoid chunking in executeStatement\n\nexecutemany implements that already via psycopg2's execute_batch."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e4251a81a7d7c69f15774a133891ccc00f0f641", "author": {"user": {"login": "moio", "name": "Silvio Moioli"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9e4251a81a7d7c69f15774a133891ccc00f0f641", "committedDate": "2020-04-25T12:27:46Z", "message": "refactoring: kill execute_bulk\n\nexecutemany implements chunking already via psycopg2's execute_batch."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c97eec842c13df140e1deff5ce338bddbd73af1", "author": {"user": {"login": "moio", "name": "Silvio Moioli"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4c97eec842c13df140e1deff5ce338bddbd73af1", "committedDate": "2020-04-24T14:15:34Z", "message": "refactoring: kill execute_bulk\n\nexecutemany implements chunking already via psycopg2's execute_batch."}, "afterCommit": {"oid": "9e4251a81a7d7c69f15774a133891ccc00f0f641", "author": {"user": {"login": "moio", "name": "Silvio Moioli"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9e4251a81a7d7c69f15774a133891ccc00f0f641", "committedDate": "2020-04-25T12:27:46Z", "message": "refactoring: kill execute_bulk\n\nexecutemany implements chunking already via psycopg2's execute_batch."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d702cd75cd1759abaeadce38e4820d1d95de2be", "author": {"user": {"login": "moio", "name": "Silvio Moioli"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0d702cd75cd1759abaeadce38e4820d1d95de2be", "committedDate": "2020-04-25T12:51:24Z", "message": "backend: require newer psycopg2\n\nRequirement comes from the new fetch_result parameter added to\nexecute_values:\n\nhttps://github.com/psycopg/psycopg2/commit/9a8d7d5a6ad5f24e1cbc529e98dd61ad9424b9ed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzkwNzA2", "url": "https://github.com/uyuni-project/uyuni/pull/2162#pullrequestreview-400390706", "createdAt": "2020-04-25T12:49:32Z", "commit": {"oid": "1bb6b88cf846d49810428245fa54f17044a396d9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjo0OTozMlrOGL1Cpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjo0OTozMlrOGL1Cpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjU1MQ==", "bodyText": "Is the _ underscore in the page_size value a typo?", "url": "https://github.com/uyuni-project/uyuni/pull/2162#discussion_r415056551", "createdAt": "2020-04-25T12:49:32Z", "author": {"login": "mcalmer"}, "path": "backend/server/importlib/backendLib.py", "diffHunk": "@@ -432,31 +432,27 @@ class TableInsert(TableUpdate):\n \n     def __init__(self, table, dbmodule):\n         TableUpdate.__init__(self, table, dbmodule)\n-        self.queryTemplate = \"insert into %s (%s) values (%s)\"\n-        self.count = 1000\n+        self.queryTemplate = \"insert into %s (%s) values %%s\"\n \n         self.insert_fields = self.pks + self.otherfields + self.blob_fields\n-        self.insert_values = [':%s' % x for x in self.pks + self.otherfields + self.blob_fields]\n \n     def _buildQuery(self, key):\n-        q = self.queryTemplate % (self.table.name,\n-                                  ', '.join(self.insert_fields),\n-                                  ', '.join(self.insert_values))\n+        q = self.queryTemplate % (self.table.name, ', '.join(self.insert_fields))\n         return q\n \n     def query(self, values):\n         if self.blob_fields:\n-            chunksize = 1\n             blob_map = {}\n             for f in self.blob_fields:\n                 blob_map[f] = f\n         else:\n-            chunksize = self.count\n             blob_map = None\n \n         # Do the insert\n         statement = self._getCachedQuery(None, blob_map=blob_map)\n-        executeStatement(statement, values, chunksize)\n+        l = len(values[self.insert_fields[0]])\n+        value_list = [[values[f][i] for f in self.insert_fields] for i in range(l)]\n+        statement.execute_values(self._buildQuery(None), value_list, fetch=False, page_size=10_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb6b88cf846d49810428245fa54f17044a396d9"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzkxNzE3", "url": "https://github.com/uyuni-project/uyuni/pull/2162#pullrequestreview-400391717", "createdAt": "2020-04-25T13:01:49Z", "commit": {"oid": "0d702cd75cd1759abaeadce38e4820d1d95de2be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1384, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}