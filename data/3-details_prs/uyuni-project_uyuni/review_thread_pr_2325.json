{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MDQxOTUw", "number": 2325, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDozMjo1NVrOEF4SPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoxMzowN1rOEGV_GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjAwNTA4OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDozMjo1NVrOGkVUkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxMjo1NFrOGkgMUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1MTI0OA==", "bodyText": "Shouldn't this be called \"SaltVirtManager\" ?", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440751248", "createdAt": "2020-06-16T10:32:55Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "diffHunk": "@@ -38,6 +44,8 @@\n public class VirtManagerSalt implements VirtManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MTU0OQ==", "bodyText": "Well, that class has been named like this by @lucidd during the refactoring.", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440781549", "createdAt": "2020-06-16T11:32:51Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "diffHunk": "@@ -38,6 +44,8 @@\n public class VirtManagerSalt implements VirtManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1MTI0OA=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwOTcwMQ==", "bodyText": "ok, maybe for a next PR then.", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440809701", "createdAt": "2020-06-16T12:27:06Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "diffHunk": "@@ -38,6 +44,8 @@\n public class VirtManagerSalt implements VirtManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1MTI0OA=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyOTM2MA==", "bodyText": "I think we don't really have a written rule or a scheme for the naming of interfaces and implementations yet? For instance I recently created MonitoringManager (interface) and FormulaMonitoringManager (implementation) and did the naming the other way around. I would have been fine though to align with another scheme, so I guess we could maybe agree on a scheme and write it down?", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440929360", "createdAt": "2020-06-16T15:12:54Z", "author": {"login": "renner"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "diffHunk": "@@ -38,6 +44,8 @@\n public class VirtManagerSalt implements VirtManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1MTI0OA=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjEwMDE1OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTowMTo1OVrOGkWQIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowNjozMlrOGlE0mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NjQ5OA==", "bodyText": "why is this needed?", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440766498", "createdAt": "2020-06-16T11:01:59Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "diffHunk": "@@ -166,6 +174,14 @@ public void updateLibvirtEngine(MinionServer minion) {\n         pillar.put(\"virt_entitled\", minion.hasVirtualizationEntitlement());\n         saltApi.callSync(State.apply(Collections.singletonList(\"virt.engine-events\"),\n                 Optional.of(pillar)), minion.getMinionId());\n+\n+        if (minion.hasVirtualizationEntitlement()) {\n+            minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+        }\n+        else {\n+            minionVirtualizationPillarFileManager.removePillarFile(minion.getMinionId());\n+        }\n+        SaltService.INSTANCE.refreshPillar(new MinionList(minion.getMinionId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MjY3NA==", "bodyText": "Without the refreshPillar() the pillar file is generated and the results can be seen in salt  pillar.items but the change isn't reflected on the minion itself. Maybe there is a better place for this call, but without it the virtpoller is configured but not enabled on the minion", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440782674", "createdAt": "2020-06-16T11:35:04Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "diffHunk": "@@ -166,6 +174,14 @@ public void updateLibvirtEngine(MinionServer minion) {\n         pillar.put(\"virt_entitled\", minion.hasVirtualizationEntitlement());\n         saltApi.callSync(State.apply(Collections.singletonList(\"virt.engine-events\"),\n                 Optional.of(pillar)), minion.getMinionId());\n+\n+        if (minion.hasVirtualizationEntitlement()) {\n+            minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+        }\n+        else {\n+            minionVirtualizationPillarFileManager.removePillarFile(minion.getMinionId());\n+        }\n+        SaltService.INSTANCE.refreshPillar(new MinionList(minion.getMinionId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NjQ5OA=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwOTc4Mg==", "bodyText": "I see", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440809782", "createdAt": "2020-06-16T12:27:16Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "diffHunk": "@@ -166,6 +174,14 @@ public void updateLibvirtEngine(MinionServer minion) {\n         pillar.put(\"virt_entitled\", minion.hasVirtualizationEntitlement());\n         saltApi.callSync(State.apply(Collections.singletonList(\"virt.engine-events\"),\n                 Optional.of(pillar)), minion.getMinionId());\n+\n+        if (minion.hasVirtualizationEntitlement()) {\n+            minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+        }\n+        else {\n+            minionVirtualizationPillarFileManager.removePillarFile(minion.getMinionId());\n+        }\n+        SaltService.INSTANCE.refreshPillar(new MinionList(minion.getMinionId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NjQ5OA=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNzY0OA==", "bodyText": "As I understood all Salt calls should go through SystemQuery now,  so do we really want to make an exception for refreshPillar() and call it directly on the SaltService instance? Shouldn't we rather move refreshPillar() to the SystemQuery interface?", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440937648", "createdAt": "2020-06-16T15:22:05Z", "author": {"login": "renner"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "diffHunk": "@@ -166,6 +174,14 @@ public void updateLibvirtEngine(MinionServer minion) {\n         pillar.put(\"virt_entitled\", minion.hasVirtualizationEntitlement());\n         saltApi.callSync(State.apply(Collections.singletonList(\"virt.engine-events\"),\n                 Optional.of(pillar)), minion.getMinionId());\n+\n+        if (minion.hasVirtualizationEntitlement()) {\n+            minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+        }\n+        else {\n+            minionVirtualizationPillarFileManager.removePillarFile(minion.getMinionId());\n+        }\n+        SaltService.INSTANCE.refreshPillar(new MinionList(minion.getMinionId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NjQ5OA=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyOTQ5OA==", "bodyText": "Done!", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441529498", "createdAt": "2020-06-17T13:06:32Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "diffHunk": "@@ -166,6 +174,14 @@ public void updateLibvirtEngine(MinionServer minion) {\n         pillar.put(\"virt_entitled\", minion.hasVirtualizationEntitlement());\n         saltApi.callSync(State.apply(Collections.singletonList(\"virt.engine-events\"),\n                 Optional.of(pillar)), minion.getMinionId());\n+\n+        if (minion.hasVirtualizationEntitlement()) {\n+            minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+        }\n+        else {\n+            minionVirtualizationPillarFileManager.removePillarFile(minion.getMinionId());\n+        }\n+        SaltService.INSTANCE.refreshPillar(new MinionList(minion.getMinionId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NjQ5OA=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjEwNzA3OnYy", "diffSide": "RIGHT", "path": "susemanager-utils/susemanager-sls/modules/pillar/suma_minion.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTowNDoyOFrOGkWU6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTozNzowMVrOGkXSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NzcyMw==", "bodyText": "why is this needed here?", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440767723", "createdAt": "2020-06-16T11:04:28Z", "author": {"login": "chiaradiamarcelo"}, "path": "susemanager-utils/susemanager-sls/modules/pillar/suma_minion.py", "diffHunk": "@@ -100,7 +100,10 @@ def ext_pillar(minion_id, *args):\n         data_filename = os.path.join(MANAGER_PILLAR_DATA_PATH, minion_pillar_filename_prefix + suffix)\n         if os.path.exists(data_filename):\n             try:\n-                ret.update(yaml.load(open(data_filename).read(), Loader=yaml.FullLoader))\n+                ret = salt.utils.dictupdate.merge(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MzU1Mg==", "bodyText": "There may be multiple beacons configured in different files and we don't want one to kill the other. Typically here I had:\n- beacons:\n    pkgset:\n      cookie: /var/cache/salt/minion/rpmdb.cookie\n      interval: 5\nThat was kicked out by the virtpoller config", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440783552", "createdAt": "2020-06-16T11:37:01Z", "author": {"login": "cbosdo"}, "path": "susemanager-utils/susemanager-sls/modules/pillar/suma_minion.py", "diffHunk": "@@ -100,7 +100,10 @@ def ext_pillar(minion_id, *args):\n         data_filename = os.path.join(MANAGER_PILLAR_DATA_PATH, minion_pillar_filename_prefix + suffix)\n         if os.path.exists(data_filename):\n             try:\n-                ret.update(yaml.load(open(data_filename).read(), Loader=yaml.FullLoader))\n+                ret = salt.utils.dictupdate.merge(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NzcyMw=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjExMjg1OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/pillar/MinionVirtualizationPillarGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTowNjoxOVrOGkWYiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowNjo1M1rOGlE1dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2ODY0OQ==", "bodyText": "We should probably make a test for this", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440768649", "createdAt": "2020-06-16T11:06:19Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/suse/manager/webui/services/pillar/MinionVirtualizationPillarGenerator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.common.conf.Config;\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.domain.server.MinionServer;\n+\n+import com.suse.manager.webui.utils.SaltPillar;\n+\n+import org.apache.log4j.Logger;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Class for generating pillar data for the virtual hosts\n+ */\n+public class MinionVirtualizationPillarGenerator implements MinionPillarGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4NTU1Nw==", "bodyText": "sure, though that's not the most interesting test to have here. Covering the whole thing with a cucumber step would be better, though harder", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440785557", "createdAt": "2020-06-16T11:41:11Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/services/pillar/MinionVirtualizationPillarGenerator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.common.conf.Config;\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.domain.server.MinionServer;\n+\n+import com.suse.manager.webui.utils.SaltPillar;\n+\n+import org.apache.log4j.Logger;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Class for generating pillar data for the virtual hosts\n+ */\n+public class MinionVirtualizationPillarGenerator implements MinionPillarGenerator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2ODY0OQ=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyOTcxNg==", "bodyText": "Made that test and a cucumber one!", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441529716", "createdAt": "2020-06-17T13:06:53Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/services/pillar/MinionVirtualizationPillarGenerator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.common.conf.Config;\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.domain.server.MinionServer;\n+\n+import com.suse.manager.webui.utils.SaltPillar;\n+\n+import org.apache.log4j.Logger;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Class for generating pillar data for the virtual hosts\n+ */\n+public class MinionVirtualizationPillarGenerator implements MinionPillarGenerator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2ODY0OQ=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjE4Mjk5OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTozMDoxMFrOGkXF4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo1MjoyNVrOGlERPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MDI1Nw==", "bodyText": "while you are at it, maybe you can fix this part https://github.com/uyuni-project/uyuni/pull/2325/files?file-filters%5B%5D=.java#diff-8cc725b56315ba8fd87da99a53fb4fcdL76-R88\nThe conditions here should be inverted, as in https://github.com/uyuni-project/uyuni/blob/master/java/code/src/com/redhat/rhn/manager/system/entitling/SystemEntitler.java#L128-L134", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440780257", "createdAt": "2020-06-16T11:30:10Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -85,6 +95,10 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n                 }\n             });\n         }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4NjMyNw==", "bodyText": "not sure I really understood where you want that change, but I'll try to find it", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440786327", "createdAt": "2020-06-16T11:42:42Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -85,6 +95,10 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n                 }\n             });\n         }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MDI1Nw=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwOTI1NA==", "bodyText": "https://github.com/uyuni-project/uyuni/blob/master/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java#L76-L78\nThis is wrong, and was introduced in 0d8fe90\nThe right way is to do it as in https://github.com/uyuni-project/uyuni/blob/master/java/code/src/com/redhat/rhn/manager/system/entitling/SystemEntitler.java#L128-L134 , meaning check if the server is a minion, ,then update the groups pillar, and then the specific features like mointoring or virtualization", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440809254", "createdAt": "2020-06-16T12:26:17Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -85,6 +95,10 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n                 }\n             });\n         }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MDI1Nw=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTE4OQ==", "bodyText": "Thanks for pointing it out, and sorry as it was my mistake!", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440945189", "createdAt": "2020-06-16T15:32:16Z", "author": {"login": "renner"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -85,6 +95,10 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n                 }\n             });\n         }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MDI1Nw=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyMDQ0NQ==", "bodyText": "haha no worries!", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441520445", "createdAt": "2020-06-17T12:52:25Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -85,6 +95,10 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n                 }\n             });\n         }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MDI1Nw=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzIyNTA3OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozNjowNVrOGkhVaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowNzoxMVrOGlE2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0ODA3Mw==", "bodyText": "Thanks for setting monitoringManager here in the constructor now, maybe we no longer need to initialize it above?", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440948073", "createdAt": "2020-06-16T15:36:05Z", "author": {"login": "renner"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -40,8 +41,17 @@\n \n     private static final Logger LOG = Logger.getLogger(SystemUnentitler.class);\n \n-    public static final SystemUnentitler INSTANCE = new SystemUnentitler();\n     private MonitoringManager monitoringManager = new FormulaMonitoringManager();\n+    private VirtManager virtManager;\n+\n+    /**\n+     * @param virtManagerIn instance for managing virtual machines.\n+     * @param monitoringManagerIn instance for handling monitoring configuration.\n+     */\n+    public SystemUnentitler(VirtManager virtManagerIn, MonitoringManager monitoringManagerIn) {\n+        this.virtManager = virtManagerIn;\n+        this.monitoringManager = monitoringManagerIn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1ODc0Nw==", "bodyText": "right", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441358747", "createdAt": "2020-06-17T08:05:08Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -40,8 +41,17 @@\n \n     private static final Logger LOG = Logger.getLogger(SystemUnentitler.class);\n \n-    public static final SystemUnentitler INSTANCE = new SystemUnentitler();\n     private MonitoringManager monitoringManager = new FormulaMonitoringManager();\n+    private VirtManager virtManager;\n+\n+    /**\n+     * @param virtManagerIn instance for managing virtual machines.\n+     * @param monitoringManagerIn instance for handling monitoring configuration.\n+     */\n+    public SystemUnentitler(VirtManager virtManagerIn, MonitoringManager monitoringManagerIn) {\n+        this.virtManager = virtManagerIn;\n+        this.monitoringManager = monitoringManagerIn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0ODA3Mw=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyOTkwNQ==", "bodyText": "done", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441529905", "createdAt": "2020-06-17T13:07:11Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -40,8 +41,17 @@\n \n     private static final Logger LOG = Logger.getLogger(SystemUnentitler.class);\n \n-    public static final SystemUnentitler INSTANCE = new SystemUnentitler();\n     private MonitoringManager monitoringManager = new FormulaMonitoringManager();\n+    private VirtManager virtManager;\n+\n+    /**\n+     * @param virtManagerIn instance for managing virtual machines.\n+     * @param monitoringManagerIn instance for handling monitoring configuration.\n+     */\n+    public SystemUnentitler(VirtManager virtManagerIn, MonitoringManager monitoringManagerIn) {\n+        this.virtManager = virtManagerIn;\n+        this.monitoringManager = monitoringManagerIn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0ODA3Mw=="}, "originalCommit": {"oid": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDgyODQzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowMjowMlrOGlEpPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoxMTo1M1rOGlFCGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNjU5MA==", "bodyText": "line 87 ServerGroupManager.getInstance().updatePillarAfterGroupUpdateForServers(Arrays.asList(s));\nshould be executed despite the minion has a monitoring entitlement or not. So it should be outside this 'if' statement", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441526590", "createdAt": "2020-06-17T13:02:02Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -73,8 +82,8 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n             unentitleServer(server, ent);\n         }\n \n-        if (EntitlementManager.MONITORING.equals(ent)) {\n-            server.asMinionServer().ifPresent(s -> {\n+        server.asMinionServer().ifPresent(s -> {\n+            if (EntitlementManager.MONITORING.equals(ent)) {\n                 ServerGroupManager.getInstance().updatePillarAfterGroupUpdateForServers(Arrays.asList(s));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1248130d03910ba2dab4dd91530fe3e9635b9fe5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjk1NQ==", "bodyText": "Fixed", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441532955", "createdAt": "2020-06-17T13:11:53Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -73,8 +82,8 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n             unentitleServer(server, ent);\n         }\n \n-        if (EntitlementManager.MONITORING.equals(ent)) {\n-            server.asMinionServer().ifPresent(s -> {\n+        server.asMinionServer().ifPresent(s -> {\n+            if (EntitlementManager.MONITORING.equals(ent)) {\n                 ServerGroupManager.getInstance().updatePillarAfterGroupUpdateForServers(Arrays.asList(s));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNjU5MA=="}, "originalCommit": {"oid": "1248130d03910ba2dab4dd91530fe3e9635b9fe5"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDg1NDUyOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowODo1NFrOGlE6Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoxMTo0MVrOGlFBmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMDk1OQ==", "bodyText": "I guess you missed the \"asserts\" here", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441530959", "createdAt": "2020-06-17T13:08:54Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        virtpoller.containsKey(\"cache_file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1248130d03910ba2dab4dd91530fe3e9635b9fe5"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjgyNw==", "bodyText": "Fixed", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441532827", "createdAt": "2020-06-17T13:11:41Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        virtpoller.containsKey(\"cache_file\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMDk1OQ=="}, "originalCommit": {"oid": "1248130d03910ba2dab4dd91530fe3e9635b9fe5"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDg1NTYzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowOToxM1rOGlE7AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoxMTozM1rOGlFBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTEzNg==", "bodyText": "same", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441531136", "createdAt": "2020-06-17T13:09:13Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        virtpoller.containsKey(\"cache_file\");\n+        virtpoller.containsKey(\"expire_time\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1248130d03910ba2dab4dd91530fe3e9635b9fe5"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjczNg==", "bodyText": "fixed too", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441532736", "createdAt": "2020-06-17T13:11:33Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        virtpoller.containsKey(\"cache_file\");\n+        virtpoller.containsKey(\"expire_time\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTEzNg=="}, "originalCommit": {"oid": "1248130d03910ba2dab4dd91530fe3e9635b9fe5"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDg1NjAxOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowOToyMFrOGlE7Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoxMToyNVrOGlFA6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTIxNA==", "bodyText": "same", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441531214", "createdAt": "2020-06-17T13:09:20Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        virtpoller.containsKey(\"cache_file\");\n+        virtpoller.containsKey(\"expire_time\");\n+        virtpoller.containsKey(\"interval\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1248130d03910ba2dab4dd91530fe3e9635b9fe5"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjY1MQ==", "bodyText": "oops! Fixed now", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441532651", "createdAt": "2020-06-17T13:11:25Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        virtpoller.containsKey(\"cache_file\");\n+        virtpoller.containsKey(\"expire_time\");\n+        virtpoller.containsKey(\"interval\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTIxNA=="}, "originalCommit": {"oid": "1248130d03910ba2dab4dd91530fe3e9635b9fe5"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDg3MTI5OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoxMzowN1rOGlFFOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoxNDowOVrOGlFHsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMzc1Mw==", "bodyText": "I guess you missed the asserts here", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441533753", "createdAt": "2020-06-17T13:13:07Z", "author": {"login": "chiaradiamarcelo"}, "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        assertTrue(virtpoller.containsKey(\"cache_file\"));\n+        assertTrue(virtpoller.containsKey(\"expire_time\"));\n+        assertTrue(virtpoller.containsKey(\"interval\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3f92b016e387cef103c9ab1ead5645930f0c68"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzNDM4NA==", "bodyText": "Yes, but it's fixed now, isn't it?", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441534384", "createdAt": "2020-06-17T13:14:09Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        assertTrue(virtpoller.containsKey(\"cache_file\"));\n+        assertTrue(virtpoller.containsKey(\"expire_time\"));\n+        assertTrue(virtpoller.containsKey(\"interval\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMzc1Mw=="}, "originalCommit": {"oid": "7b3f92b016e387cef103c9ab1ead5645930f0c68"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4314, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}