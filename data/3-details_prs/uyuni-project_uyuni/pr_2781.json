{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyOTQ3NzA2", "number": 2781, "title": "QA: Make sure we stop salt-minion service on clean-up", "bodyText": "What does this PR change?\nRecently we updated our step definition to clean up minion's content, once we deleted the system from SUSE Manager.\nWe simplified it by using the systemctl command to stop the salt-minion service in all kinds of minions, while before we were using a different command for SLE minions. This change, cause a problem in our tests, as sometimes on SLE clients we stopped the service at the same time that SUMA was acting on it. In order to fix it, I changed the run command to another command that retries several times until it gives a successful result. Also, this step only removes the information from the cache, so it needs a rename to don't cause confusion. By the way, I use the verb \"clean up\" instead of the noun \"cleanup\" as it was before.\nIn addition, I would like to keep (commented) a TODO which explains better the reason why we are only cleaning the cache of the minion (so it doesn't try to connect to master again) instead of perform a full clean-up where we can uninstall the salt and salt-minion packages. I'm offering in the TODO description the step definition that we can use in case we unblock the reason why we can't use it ;)\nGUI diff\nNo difference.\n\n DONE\n\nDocumentation\n\n\nNo documentation needed\n\n\n DONE\n\n\nTest coverage\n\n\nCucumber tests were changed\n\n\n DONE\n\n\nLinks\nPorts:\n\n\nManager-4.1 SUSE/spacewalk#12953\n\n\nManager-4.0 SUSE/spacewalk#12954\n\n\n DONE\n\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-10-30T11:59:38Z", "url": "https://github.com/uyuni-project/uyuni/pull/2781", "merged": true, "mergeCommit": {"oid": "01398f2ddb304bc7148b76506fdfc83f2d8c1dd1"}, "closed": true, "closedAt": "2020-10-30T13:02:41Z", "author": {"login": "srbarrios"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXljV3gFqTUyMDYwMzc4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXl2EHAFqTUyMDYxNjAwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNjAzNzgy", "url": "https://github.com/uyuni-project/uyuni/pull/2781#pullrequestreview-520603782", "createdAt": "2020-10-30T12:02:35Z", "commit": {"oid": "4b67258042cc383900460fd1d827ccb2592fdbfa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72adffacfa6dda77ace7358b0aec110e000aabad", "author": {"user": {"login": "srbarrios", "name": "Oscar Barrios"}}, "url": "https://github.com/uyuni-project/uyuni/commit/72adffacfa6dda77ace7358b0aec110e000aabad", "committedDate": "2020-10-30T12:03:11Z", "message": "QA: Make sure we stop salt-minion service on clean-up"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b67258042cc383900460fd1d827ccb2592fdbfa", "author": {"user": {"login": "srbarrios", "name": "Oscar Barrios"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4b67258042cc383900460fd1d827ccb2592fdbfa", "committedDate": "2020-10-30T10:28:25Z", "message": "QA: Make sure we stop salt-minion service on clean-up"}, "afterCommit": {"oid": "72adffacfa6dda77ace7358b0aec110e000aabad", "author": {"user": {"login": "srbarrios", "name": "Oscar Barrios"}}, "url": "https://github.com/uyuni-project/uyuni/commit/72adffacfa6dda77ace7358b0aec110e000aabad", "committedDate": "2020-10-30T12:03:11Z", "message": "QA: Make sure we stop salt-minion service on clean-up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNjE2MDAw", "url": "https://github.com/uyuni-project/uyuni/pull/2781#pullrequestreview-520616000", "createdAt": "2020-10-30T12:21:16Z", "commit": {"oid": "72adffacfa6dda77ace7358b0aec110e000aabad"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjoyMToxNlrOHrMttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjoyMjozM1rOHrMwlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA1OTEyNQ==", "bodyText": "\"salt-minion\"\nIn theory, we could re-enable original system repositories while we reinstall the packages... but... complicated, error-prone.", "url": "https://github.com/uyuni-project/uyuni/pull/2781#discussion_r515059125", "createdAt": "2020-10-30T12:21:16Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/step_definitions/salt_steps.rb", "diffHunk": "@@ -719,11 +719,28 @@ def pillar_get(key, minion)\n   step %(I enter \"#{ENV['VIRTHOST_XEN_PASSWORD']}\" as \"password\") if host == \"xen_server\"\n end\n \n-And(/^I cleanup minion \"([^\"]*)\"$/) do |minion|\n+And(/^I clean up the minion's cache on \"([^\"]*)\"$/) do |minion|\n   raise \"#{minion} is not a salt minion\" unless minion.include? 'minion'\n   node = get_target(minion)\n-  node.run('systemctl stop salt-minion')\n+  node.run_until_ok('systemctl stop salt-minion')\n   node.run('rm -Rf /var/cache/salt/minion')\n+  # TODO: Ideally we should remove /etc/salt/* /var/run/salt/* /var/log/salt/* and salt and salt-minion packages\n+  #       But we can't do that as we don't have products synced, so it will fail installing salt and sal-minion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72adffacfa6dda77ace7358b0aec110e000aabad"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA1OTg2MA==", "bodyText": "Maybe we could keep this snippet outside of this file, instead of a big comment.\nBut I don't mind too much either.", "url": "https://github.com/uyuni-project/uyuni/pull/2781#discussion_r515059860", "createdAt": "2020-10-30T12:22:33Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/step_definitions/salt_steps.rb", "diffHunk": "@@ -719,11 +719,28 @@ def pillar_get(key, minion)\n   step %(I enter \"#{ENV['VIRTHOST_XEN_PASSWORD']}\" as \"password\") if host == \"xen_server\"\n end\n \n-And(/^I cleanup minion \"([^\"]*)\"$/) do |minion|\n+And(/^I clean up the minion's cache on \"([^\"]*)\"$/) do |minion|\n   raise \"#{minion} is not a salt minion\" unless minion.include? 'minion'\n   node = get_target(minion)\n-  node.run('systemctl stop salt-minion')\n+  node.run_until_ok('systemctl stop salt-minion')\n   node.run('rm -Rf /var/cache/salt/minion')\n+  # TODO: Ideally we should remove /etc/salt/* /var/run/salt/* /var/log/salt/* and salt and salt-minion packages\n+  #       But we can't do that as we don't have products synced, so it will fail installing salt and sal-minion\n+  #       Instead we inject those packages when deploying through sumaform and we can't remove them.\n+  #       If someday we have synced products, we can proceed to run a full cleanup:\n+  #\n+  # And(/^I perform a full salt minion cleanup on \"([^\"]*)\"$/) do |minion|\n+  #   raise \"#{minion} is not a salt minion\" unless minion.include? 'minion'\n+  #   node = get_target(minion)\n+  #   if minion.include? 'ceos'\n+  #     node.run('yum -y remove salt salt-minion')\n+  #   elsif minion.include? 'ubuntu'\n+  #     node.run('apt-get --assume-yes remove salt salt-minion')\n+  #   else\n+  #     node.run('zypper --non-interactive remove -y salt salt-minion')\n+  #   end\n+  #   node.run('rm -Rf /var/cache/salt/minion /var/run/salt /var/log/salt /etc/salt')\n+  # end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72adffacfa6dda77ace7358b0aec110e000aabad"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 955, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}