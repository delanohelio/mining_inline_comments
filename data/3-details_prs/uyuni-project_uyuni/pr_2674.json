{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTgwNDgx", "number": 2674, "title": "powermanagement xmlrpc api", "bodyText": "What does this PR change?\nImplement XMLRPC interface for Power Management.\nThere are 2 use cases:\n\nwe have an existing registered system\nwe just created a cobbler system record for an initial installation (system.createSystemRecord(...))\n\nGUI diff\nNo difference.\n\n DONE\n\nDocumentation\n\n\nXMLRPC docs are autogenerated\n\n\n DONE\n\n\nTest coverage\n\n\nCucumber tests were added\n\n\n DONE\n\n\nLinks\nFixes SUSE/spacewalk#9860\nTracks SUSE/spacewalk#12676\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-09-30T15:07:15Z", "url": "https://github.com/uyuni-project/uyuni/pull/2674", "merged": true, "mergeCommit": {"oid": "bc7ceec97a1d6bea411eb23b471252cb34bcef49"}, "closed": true, "closedAt": "2020-10-07T12:16:38Z", "author": {"login": "mcalmer"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOSWhcAFqTUwMDQwNDQyOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQK3XggBqjM4NDk5MTAzNjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDA0NDI5", "url": "https://github.com/uyuni-project/uyuni/pull/2674#pullrequestreview-500404429", "createdAt": "2020-10-01T14:25:31Z", "commit": {"oid": "58300e734188dfc8374dba7c67ac032e4de62161"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoyNTozMVrOHbM-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozMzowOVrOHbNVgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4NjIzOQ==", "bodyText": "like discussed in the chat i think its a good idea to split it up into multiple functions each doing one thing", "url": "https://github.com/uyuni-project/uyuni/pull/2674#discussion_r498286239", "createdAt": "2020-10-01T14:25:31Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/provisioning/powermanagement/PowerManagementHandler.java", "diffHunk": "@@ -0,0 +1,403 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.frontend.xmlrpc.system.provisioning.powermanagement;\n+\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.validator.ValidatorError;\n+import com.redhat.rhn.domain.server.Server;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.action.kickstart.PowerManagementAction;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidParameterException;\n+import com.redhat.rhn.frontend.xmlrpc.NoSuchSystemException;\n+import com.redhat.rhn.frontend.xmlrpc.PowerManagementOperationFailedException;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerUnregisteredPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerXMLRPCHelper;\n+import com.redhat.rhn.manager.system.SystemManager;\n+\n+import org.apache.log4j.Logger;\n+import org.cobbler.SystemRecord;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * PowerManagementHandler\n+ * @xmlrpc.namespace system.provisioning.powermanagement\n+ * @xmlrpc.doc Provides methods to access and modify power management for systems.\n+ * Some functions exist in 2 variants. Either with server id or with a name.\n+ * The function with server id is useful when a system exists with a full profile.\n+ * Everybody allowed to manage that system can execute these functions.\n+ * The variant with name expects a cobbler system name prefix. These functions\n+ * enhance the name by adding the org id of the user to limit access to systems\n+ * from the own organization. Additionally Org Admin permissions are required to\n+ * call these functions.\n+ */\n+public class PowerManagementHandler extends BaseHandler {\n+    private static Logger log = Logger.getLogger(PowerManagementHandler.class);\n+\n+    /**\n+     * Return a list of available power management types\n+     *\n+     * @param loggedInUser the user\n+     * @return a list of available power management types\n+     *\n+     * @xmlrpc.doc Return a list of available power management types\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management types\")\n+     */\n+    public List<String> listTypes(User loggedInUser) {\n+        String typeString = ConfigDefaults.get().getCobblerPowerTypes();\n+        if (typeString != null) {\n+            return Arrays.asList(typeString.split(\" *, *\"));\n+        }\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, Integer serverId) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        SystemRecord record = SystemRecord.lookupById(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), server.getCobblerId());\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, String nameIn) {\n+        ensureOrgAdmin(loggedInUser);\n+        SystemRecord record = lookupExistingCobblerRecord(loggedInUser, nameIn);\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    private Map<String, String> getDetails(User loggedInUser, SystemRecord record) {\n+        Map<String, String> result = new HashMap<>();\n+        List<String> types = listTypes(loggedInUser);\n+        if (record == null) {\n+            result.put(PowerManagementAction.POWER_TYPE, types.get(0));\n+        }\n+        else {\n+            result.put(PowerManagementAction.POWER_TYPE, record.getPowerType());\n+            result.put(PowerManagementAction.POWER_ADDRESS, record.getPowerAddress());\n+            result.put(PowerManagementAction.POWER_USERNAME, record.getPowerUsername());\n+            result.put(PowerManagementAction.POWER_PASSWORD, record.getPowerPassword());\n+            result.put(PowerManagementAction.POWER_ID, record.getPowerId());\n+        }\n+        return result;\n+    }\n+\n+    private SystemRecord lookupExistingCobblerRecord(User loggedInUser, String label) {\n+        String sep = ConfigDefaults.get().getCobblerNameSeparator();\n+        label = label.replace(' ', '_').replaceAll(\"[^a-zA-Z0-9_\\\\-\\\\.]\", \"\");\n+        String name = label + sep + loggedInUser.getOrg().getId();\n+        SystemRecord rec = SystemRecord.lookupByName(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), name);\n+        if (rec == null) {\n+            log.error(\"System with cobbler name \" + name + \"not found.\");\n+        }\n+        return rec;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, Integer serverId, Map<String, String> data) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        CobblerPowerSettingsUpdateCommand cmd = new CobblerPowerSettingsUpdateCommand(\n+                loggedInUser, server,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, String nameIn, Map<String, String> data) {\n+        ensureOrgAdmin(loggedInUser);\n+        CobblerUnregisteredPowerSettingsUpdateCommand cmd =\n+                new CobblerUnregisteredPowerSettingsUpdateCommand(\n+                loggedInUser, nameIn,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Return a list of available power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @return list of action strings\n+     *\n+     * @xmlrpc.doc Return a list of available power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management actions\")\n+     */\n+    public List<String> listActions(User loggedInUser) {\n+        List<String> result = new ArrayList<>();\n+        result.add(\"PowerOn\");\n+        result.add(\"PowerOff\");\n+        result.add(\"Reboot\");\n+        return result;\n+    }\n+\n+    /**\n+     * Execute power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param action the action to execute\n+     * @return 1 on success\n+     *\n+     * @xmlrpc.doc Execute power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param #param(\"string\", \"action\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    // FIXME: and idea of a better name? executeAction(), ...\n+    public int doPowerManagement(User loggedInUser, Integer serverId, String action) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        ValidatorError error = null;\n+        switch (action) {\n+        case \"PowerOn\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"PowerOff\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"Reboot\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+\n+        default:\n+            log.error(\"Invalid power management action: \" + action);\n+            throw new InvalidArgsException(\"Invalid power management action: \" + action);\n+        }\n+        if (error != null) {\n+            log.error(\"Power management action \" + action + \"failed\");\n+            throw new PowerManagementOperationFailedException(error.getMessage());\n+        }\n+        log.info(\"Power management action \" + action + \"succeeded\");\n+        return 1;\n+    }\n+\n+    /**\n+     * Execute power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param action the action to execute\n+     * @return 1 on success\n+     *\n+     * @xmlrpc.doc Execute power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param #param(\"string\", \"action\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    // FIXME: and idea of a better name? executeAction(), ...\n+    public int doPowerManagement(User loggedInUser, String nameIn, String action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58300e734188dfc8374dba7c67ac032e4de62161"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTc1Mw==", "bodyText": "in case doPowerManagement is split up this function would not be needed i guess.", "url": "https://github.com/uyuni-project/uyuni/pull/2674#discussion_r498289753", "createdAt": "2020-10-01T14:30:05Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/provisioning/powermanagement/PowerManagementHandler.java", "diffHunk": "@@ -0,0 +1,403 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.frontend.xmlrpc.system.provisioning.powermanagement;\n+\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.validator.ValidatorError;\n+import com.redhat.rhn.domain.server.Server;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.action.kickstart.PowerManagementAction;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidParameterException;\n+import com.redhat.rhn.frontend.xmlrpc.NoSuchSystemException;\n+import com.redhat.rhn.frontend.xmlrpc.PowerManagementOperationFailedException;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerUnregisteredPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerXMLRPCHelper;\n+import com.redhat.rhn.manager.system.SystemManager;\n+\n+import org.apache.log4j.Logger;\n+import org.cobbler.SystemRecord;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * PowerManagementHandler\n+ * @xmlrpc.namespace system.provisioning.powermanagement\n+ * @xmlrpc.doc Provides methods to access and modify power management for systems.\n+ * Some functions exist in 2 variants. Either with server id or with a name.\n+ * The function with server id is useful when a system exists with a full profile.\n+ * Everybody allowed to manage that system can execute these functions.\n+ * The variant with name expects a cobbler system name prefix. These functions\n+ * enhance the name by adding the org id of the user to limit access to systems\n+ * from the own organization. Additionally Org Admin permissions are required to\n+ * call these functions.\n+ */\n+public class PowerManagementHandler extends BaseHandler {\n+    private static Logger log = Logger.getLogger(PowerManagementHandler.class);\n+\n+    /**\n+     * Return a list of available power management types\n+     *\n+     * @param loggedInUser the user\n+     * @return a list of available power management types\n+     *\n+     * @xmlrpc.doc Return a list of available power management types\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management types\")\n+     */\n+    public List<String> listTypes(User loggedInUser) {\n+        String typeString = ConfigDefaults.get().getCobblerPowerTypes();\n+        if (typeString != null) {\n+            return Arrays.asList(typeString.split(\" *, *\"));\n+        }\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, Integer serverId) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        SystemRecord record = SystemRecord.lookupById(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), server.getCobblerId());\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, String nameIn) {\n+        ensureOrgAdmin(loggedInUser);\n+        SystemRecord record = lookupExistingCobblerRecord(loggedInUser, nameIn);\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    private Map<String, String> getDetails(User loggedInUser, SystemRecord record) {\n+        Map<String, String> result = new HashMap<>();\n+        List<String> types = listTypes(loggedInUser);\n+        if (record == null) {\n+            result.put(PowerManagementAction.POWER_TYPE, types.get(0));\n+        }\n+        else {\n+            result.put(PowerManagementAction.POWER_TYPE, record.getPowerType());\n+            result.put(PowerManagementAction.POWER_ADDRESS, record.getPowerAddress());\n+            result.put(PowerManagementAction.POWER_USERNAME, record.getPowerUsername());\n+            result.put(PowerManagementAction.POWER_PASSWORD, record.getPowerPassword());\n+            result.put(PowerManagementAction.POWER_ID, record.getPowerId());\n+        }\n+        return result;\n+    }\n+\n+    private SystemRecord lookupExistingCobblerRecord(User loggedInUser, String label) {\n+        String sep = ConfigDefaults.get().getCobblerNameSeparator();\n+        label = label.replace(' ', '_').replaceAll(\"[^a-zA-Z0-9_\\\\-\\\\.]\", \"\");\n+        String name = label + sep + loggedInUser.getOrg().getId();\n+        SystemRecord rec = SystemRecord.lookupByName(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), name);\n+        if (rec == null) {\n+            log.error(\"System with cobbler name \" + name + \"not found.\");\n+        }\n+        return rec;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, Integer serverId, Map<String, String> data) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        CobblerPowerSettingsUpdateCommand cmd = new CobblerPowerSettingsUpdateCommand(\n+                loggedInUser, server,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, String nameIn, Map<String, String> data) {\n+        ensureOrgAdmin(loggedInUser);\n+        CobblerUnregisteredPowerSettingsUpdateCommand cmd =\n+                new CobblerUnregisteredPowerSettingsUpdateCommand(\n+                loggedInUser, nameIn,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Return a list of available power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @return list of action strings\n+     *\n+     * @xmlrpc.doc Return a list of available power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management actions\")\n+     */\n+    public List<String> listActions(User loggedInUser) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58300e734188dfc8374dba7c67ac032e4de62161"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MjA5Nw==", "bodyText": "its using PowerOn in all 3 cases right now. Same as above.", "url": "https://github.com/uyuni-project/uyuni/pull/2674#discussion_r498292097", "createdAt": "2020-10-01T14:33:09Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/provisioning/powermanagement/PowerManagementHandler.java", "diffHunk": "@@ -0,0 +1,403 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.frontend.xmlrpc.system.provisioning.powermanagement;\n+\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.validator.ValidatorError;\n+import com.redhat.rhn.domain.server.Server;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.action.kickstart.PowerManagementAction;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidParameterException;\n+import com.redhat.rhn.frontend.xmlrpc.NoSuchSystemException;\n+import com.redhat.rhn.frontend.xmlrpc.PowerManagementOperationFailedException;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerUnregisteredPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerXMLRPCHelper;\n+import com.redhat.rhn.manager.system.SystemManager;\n+\n+import org.apache.log4j.Logger;\n+import org.cobbler.SystemRecord;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * PowerManagementHandler\n+ * @xmlrpc.namespace system.provisioning.powermanagement\n+ * @xmlrpc.doc Provides methods to access and modify power management for systems.\n+ * Some functions exist in 2 variants. Either with server id or with a name.\n+ * The function with server id is useful when a system exists with a full profile.\n+ * Everybody allowed to manage that system can execute these functions.\n+ * The variant with name expects a cobbler system name prefix. These functions\n+ * enhance the name by adding the org id of the user to limit access to systems\n+ * from the own organization. Additionally Org Admin permissions are required to\n+ * call these functions.\n+ */\n+public class PowerManagementHandler extends BaseHandler {\n+    private static Logger log = Logger.getLogger(PowerManagementHandler.class);\n+\n+    /**\n+     * Return a list of available power management types\n+     *\n+     * @param loggedInUser the user\n+     * @return a list of available power management types\n+     *\n+     * @xmlrpc.doc Return a list of available power management types\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management types\")\n+     */\n+    public List<String> listTypes(User loggedInUser) {\n+        String typeString = ConfigDefaults.get().getCobblerPowerTypes();\n+        if (typeString != null) {\n+            return Arrays.asList(typeString.split(\" *, *\"));\n+        }\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, Integer serverId) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        SystemRecord record = SystemRecord.lookupById(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), server.getCobblerId());\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, String nameIn) {\n+        ensureOrgAdmin(loggedInUser);\n+        SystemRecord record = lookupExistingCobblerRecord(loggedInUser, nameIn);\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    private Map<String, String> getDetails(User loggedInUser, SystemRecord record) {\n+        Map<String, String> result = new HashMap<>();\n+        List<String> types = listTypes(loggedInUser);\n+        if (record == null) {\n+            result.put(PowerManagementAction.POWER_TYPE, types.get(0));\n+        }\n+        else {\n+            result.put(PowerManagementAction.POWER_TYPE, record.getPowerType());\n+            result.put(PowerManagementAction.POWER_ADDRESS, record.getPowerAddress());\n+            result.put(PowerManagementAction.POWER_USERNAME, record.getPowerUsername());\n+            result.put(PowerManagementAction.POWER_PASSWORD, record.getPowerPassword());\n+            result.put(PowerManagementAction.POWER_ID, record.getPowerId());\n+        }\n+        return result;\n+    }\n+\n+    private SystemRecord lookupExistingCobblerRecord(User loggedInUser, String label) {\n+        String sep = ConfigDefaults.get().getCobblerNameSeparator();\n+        label = label.replace(' ', '_').replaceAll(\"[^a-zA-Z0-9_\\\\-\\\\.]\", \"\");\n+        String name = label + sep + loggedInUser.getOrg().getId();\n+        SystemRecord rec = SystemRecord.lookupByName(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), name);\n+        if (rec == null) {\n+            log.error(\"System with cobbler name \" + name + \"not found.\");\n+        }\n+        return rec;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, Integer serverId, Map<String, String> data) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        CobblerPowerSettingsUpdateCommand cmd = new CobblerPowerSettingsUpdateCommand(\n+                loggedInUser, server,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, String nameIn, Map<String, String> data) {\n+        ensureOrgAdmin(loggedInUser);\n+        CobblerUnregisteredPowerSettingsUpdateCommand cmd =\n+                new CobblerUnregisteredPowerSettingsUpdateCommand(\n+                loggedInUser, nameIn,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Return a list of available power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @return list of action strings\n+     *\n+     * @xmlrpc.doc Return a list of available power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management actions\")\n+     */\n+    public List<String> listActions(User loggedInUser) {\n+        List<String> result = new ArrayList<>();\n+        result.add(\"PowerOn\");\n+        result.add(\"PowerOff\");\n+        result.add(\"Reboot\");\n+        return result;\n+    }\n+\n+    /**\n+     * Execute power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param action the action to execute\n+     * @return 1 on success\n+     *\n+     * @xmlrpc.doc Execute power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param #param(\"string\", \"action\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    // FIXME: and idea of a better name? executeAction(), ...\n+    public int doPowerManagement(User loggedInUser, Integer serverId, String action) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        ValidatorError error = null;\n+        switch (action) {\n+        case \"PowerOn\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"PowerOff\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"Reboot\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+\n+        default:\n+            log.error(\"Invalid power management action: \" + action);\n+            throw new InvalidArgsException(\"Invalid power management action: \" + action);\n+        }\n+        if (error != null) {\n+            log.error(\"Power management action \" + action + \"failed\");\n+            throw new PowerManagementOperationFailedException(error.getMessage());\n+        }\n+        log.info(\"Power management action \" + action + \"succeeded\");\n+        return 1;\n+    }\n+\n+    /**\n+     * Execute power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param action the action to execute\n+     * @return 1 on success\n+     *\n+     * @xmlrpc.doc Execute power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param #param(\"string\", \"action\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    // FIXME: and idea of a better name? executeAction(), ...\n+    public int doPowerManagement(User loggedInUser, String nameIn, String action) {\n+        ensureOrgAdmin(loggedInUser);\n+        ValidatorError error = null;\n+        switch (action) {\n+        case \"PowerOn\":\n+            error = new CobblerPowerCommand(loggedInUser, nameIn,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"PowerOff\":\n+            error = new CobblerPowerCommand(loggedInUser, nameIn,\n+                    CobblerPowerCommand.Operation.PowerOn).store();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58300e734188dfc8374dba7c67ac032e4de62161"}, "originalPosition": 337}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDc1MTEz", "url": "https://github.com/uyuni-project/uyuni/pull/2674#pullrequestreview-500475113", "createdAt": "2020-10-01T15:35:51Z", "commit": {"oid": "c41ca2f1779b065a4be5f11e50dc36d9748d83e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozNTo1MVrOHbQMAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozNTo1MVrOHbQMAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzODgxOA==", "bodyText": "executePowerManagementAction?", "url": "https://github.com/uyuni-project/uyuni/pull/2674#discussion_r498338818", "createdAt": "2020-10-01T15:35:51Z", "author": {"login": "mbologna"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/provisioning/powermanagement/PowerManagementHandler.java", "diffHunk": "@@ -0,0 +1,403 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.frontend.xmlrpc.system.provisioning.powermanagement;\n+\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.validator.ValidatorError;\n+import com.redhat.rhn.domain.server.Server;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.action.kickstart.PowerManagementAction;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidParameterException;\n+import com.redhat.rhn.frontend.xmlrpc.NoSuchSystemException;\n+import com.redhat.rhn.frontend.xmlrpc.PowerManagementOperationFailedException;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerUnregisteredPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerXMLRPCHelper;\n+import com.redhat.rhn.manager.system.SystemManager;\n+\n+import org.apache.log4j.Logger;\n+import org.cobbler.SystemRecord;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * PowerManagementHandler\n+ * @xmlrpc.namespace system.provisioning.powermanagement\n+ * @xmlrpc.doc Provides methods to access and modify power management for systems.\n+ * Some functions exist in 2 variants. Either with server id or with a name.\n+ * The function with server id is useful when a system exists with a full profile.\n+ * Everybody allowed to manage that system can execute these functions.\n+ * The variant with name expects a cobbler system name prefix. These functions\n+ * enhance the name by adding the org id of the user to limit access to systems\n+ * from the own organization. Additionally Org Admin permissions are required to\n+ * call these functions.\n+ */\n+public class PowerManagementHandler extends BaseHandler {\n+    private static Logger log = Logger.getLogger(PowerManagementHandler.class);\n+\n+    /**\n+     * Return a list of available power management types\n+     *\n+     * @param loggedInUser the user\n+     * @return a list of available power management types\n+     *\n+     * @xmlrpc.doc Return a list of available power management types\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management types\")\n+     */\n+    public List<String> listTypes(User loggedInUser) {\n+        String typeString = ConfigDefaults.get().getCobblerPowerTypes();\n+        if (typeString != null) {\n+            return Arrays.asList(typeString.split(\" *, *\"));\n+        }\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, Integer serverId) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        SystemRecord record = SystemRecord.lookupById(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), server.getCobblerId());\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, String nameIn) {\n+        ensureOrgAdmin(loggedInUser);\n+        SystemRecord record = lookupExistingCobblerRecord(loggedInUser, nameIn);\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    private Map<String, String> getDetails(User loggedInUser, SystemRecord record) {\n+        Map<String, String> result = new HashMap<>();\n+        List<String> types = listTypes(loggedInUser);\n+        if (record == null) {\n+            result.put(PowerManagementAction.POWER_TYPE, types.get(0));\n+        }\n+        else {\n+            result.put(PowerManagementAction.POWER_TYPE, record.getPowerType());\n+            result.put(PowerManagementAction.POWER_ADDRESS, record.getPowerAddress());\n+            result.put(PowerManagementAction.POWER_USERNAME, record.getPowerUsername());\n+            result.put(PowerManagementAction.POWER_PASSWORD, record.getPowerPassword());\n+            result.put(PowerManagementAction.POWER_ID, record.getPowerId());\n+        }\n+        return result;\n+    }\n+\n+    private SystemRecord lookupExistingCobblerRecord(User loggedInUser, String label) {\n+        String sep = ConfigDefaults.get().getCobblerNameSeparator();\n+        label = label.replace(' ', '_').replaceAll(\"[^a-zA-Z0-9_\\\\-\\\\.]\", \"\");\n+        String name = label + sep + loggedInUser.getOrg().getId();\n+        SystemRecord rec = SystemRecord.lookupByName(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), name);\n+        if (rec == null) {\n+            log.error(\"System with cobbler name \" + name + \"not found.\");\n+        }\n+        return rec;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, Integer serverId, Map<String, String> data) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        CobblerPowerSettingsUpdateCommand cmd = new CobblerPowerSettingsUpdateCommand(\n+                loggedInUser, server,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, String nameIn, Map<String, String> data) {\n+        ensureOrgAdmin(loggedInUser);\n+        CobblerUnregisteredPowerSettingsUpdateCommand cmd =\n+                new CobblerUnregisteredPowerSettingsUpdateCommand(\n+                loggedInUser, nameIn,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Return a list of available power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @return list of action strings\n+     *\n+     * @xmlrpc.doc Return a list of available power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management actions\")\n+     */\n+    public List<String> listActions(User loggedInUser) {\n+        List<String> result = new ArrayList<>();\n+        result.add(\"PowerOn\");\n+        result.add(\"PowerOff\");\n+        result.add(\"Reboot\");\n+        return result;\n+    }\n+\n+    /**\n+     * Execute power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param action the action to execute\n+     * @return 1 on success\n+     *\n+     * @xmlrpc.doc Execute power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param #param(\"string\", \"action\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    // FIXME: and idea of a better name? executeAction(), ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c41ca2f1779b065a4be5f11e50dc36d9748d83e6"}, "originalPosition": 276}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDc3MzI2", "url": "https://github.com/uyuni-project/uyuni/pull/2674#pullrequestreview-500477326", "createdAt": "2020-10-01T15:38:10Z", "commit": {"oid": "c41ca2f1779b065a4be5f11e50dc36d9748d83e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozODoxMFrOHbQSbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozODoxMFrOHbQSbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0MDQ2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"Power management action \" + action + \"failed\");\n          \n          \n            \n                        log.error(\"Power management action \" + action + \" failed\");", "url": "https://github.com/uyuni-project/uyuni/pull/2674#discussion_r498340461", "createdAt": "2020-10-01T15:38:10Z", "author": {"login": "mbologna"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/provisioning/powermanagement/PowerManagementHandler.java", "diffHunk": "@@ -0,0 +1,403 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.frontend.xmlrpc.system.provisioning.powermanagement;\n+\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.validator.ValidatorError;\n+import com.redhat.rhn.domain.server.Server;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.action.kickstart.PowerManagementAction;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidParameterException;\n+import com.redhat.rhn.frontend.xmlrpc.NoSuchSystemException;\n+import com.redhat.rhn.frontend.xmlrpc.PowerManagementOperationFailedException;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerUnregisteredPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerXMLRPCHelper;\n+import com.redhat.rhn.manager.system.SystemManager;\n+\n+import org.apache.log4j.Logger;\n+import org.cobbler.SystemRecord;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * PowerManagementHandler\n+ * @xmlrpc.namespace system.provisioning.powermanagement\n+ * @xmlrpc.doc Provides methods to access and modify power management for systems.\n+ * Some functions exist in 2 variants. Either with server id or with a name.\n+ * The function with server id is useful when a system exists with a full profile.\n+ * Everybody allowed to manage that system can execute these functions.\n+ * The variant with name expects a cobbler system name prefix. These functions\n+ * enhance the name by adding the org id of the user to limit access to systems\n+ * from the own organization. Additionally Org Admin permissions are required to\n+ * call these functions.\n+ */\n+public class PowerManagementHandler extends BaseHandler {\n+    private static Logger log = Logger.getLogger(PowerManagementHandler.class);\n+\n+    /**\n+     * Return a list of available power management types\n+     *\n+     * @param loggedInUser the user\n+     * @return a list of available power management types\n+     *\n+     * @xmlrpc.doc Return a list of available power management types\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management types\")\n+     */\n+    public List<String> listTypes(User loggedInUser) {\n+        String typeString = ConfigDefaults.get().getCobblerPowerTypes();\n+        if (typeString != null) {\n+            return Arrays.asList(typeString.split(\" *, *\"));\n+        }\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, Integer serverId) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        SystemRecord record = SystemRecord.lookupById(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), server.getCobblerId());\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, String nameIn) {\n+        ensureOrgAdmin(loggedInUser);\n+        SystemRecord record = lookupExistingCobblerRecord(loggedInUser, nameIn);\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    private Map<String, String> getDetails(User loggedInUser, SystemRecord record) {\n+        Map<String, String> result = new HashMap<>();\n+        List<String> types = listTypes(loggedInUser);\n+        if (record == null) {\n+            result.put(PowerManagementAction.POWER_TYPE, types.get(0));\n+        }\n+        else {\n+            result.put(PowerManagementAction.POWER_TYPE, record.getPowerType());\n+            result.put(PowerManagementAction.POWER_ADDRESS, record.getPowerAddress());\n+            result.put(PowerManagementAction.POWER_USERNAME, record.getPowerUsername());\n+            result.put(PowerManagementAction.POWER_PASSWORD, record.getPowerPassword());\n+            result.put(PowerManagementAction.POWER_ID, record.getPowerId());\n+        }\n+        return result;\n+    }\n+\n+    private SystemRecord lookupExistingCobblerRecord(User loggedInUser, String label) {\n+        String sep = ConfigDefaults.get().getCobblerNameSeparator();\n+        label = label.replace(' ', '_').replaceAll(\"[^a-zA-Z0-9_\\\\-\\\\.]\", \"\");\n+        String name = label + sep + loggedInUser.getOrg().getId();\n+        SystemRecord rec = SystemRecord.lookupByName(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), name);\n+        if (rec == null) {\n+            log.error(\"System with cobbler name \" + name + \"not found.\");\n+        }\n+        return rec;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, Integer serverId, Map<String, String> data) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        CobblerPowerSettingsUpdateCommand cmd = new CobblerPowerSettingsUpdateCommand(\n+                loggedInUser, server,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, String nameIn, Map<String, String> data) {\n+        ensureOrgAdmin(loggedInUser);\n+        CobblerUnregisteredPowerSettingsUpdateCommand cmd =\n+                new CobblerUnregisteredPowerSettingsUpdateCommand(\n+                loggedInUser, nameIn,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Return a list of available power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @return list of action strings\n+     *\n+     * @xmlrpc.doc Return a list of available power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management actions\")\n+     */\n+    public List<String> listActions(User loggedInUser) {\n+        List<String> result = new ArrayList<>();\n+        result.add(\"PowerOn\");\n+        result.add(\"PowerOff\");\n+        result.add(\"Reboot\");\n+        return result;\n+    }\n+\n+    /**\n+     * Execute power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param action the action to execute\n+     * @return 1 on success\n+     *\n+     * @xmlrpc.doc Execute power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param #param(\"string\", \"action\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    // FIXME: and idea of a better name? executeAction(), ...\n+    public int doPowerManagement(User loggedInUser, Integer serverId, String action) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        ValidatorError error = null;\n+        switch (action) {\n+        case \"PowerOn\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"PowerOff\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOff).store();\n+            break;\n+        case \"Reboot\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.Reboot).store();\n+            break;\n+\n+        default:\n+            log.error(\"Invalid power management action: \" + action);\n+            throw new InvalidArgsException(\"Invalid power management action: \" + action);\n+        }\n+        if (error != null) {\n+            log.error(\"Power management action \" + action + \"failed\");\n+            throw new PowerManagementOperationFailedException(error.getMessage());\n+        }\n+        log.info(\"Power management action \" + action + \"succeeded\");\n+        return 1;\n+    }\n+\n+    /**\n+     * Execute power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param action the action to execute\n+     * @return 1 on success\n+     *\n+     * @xmlrpc.doc Execute power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param #param(\"string\", \"action\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    // FIXME: and idea of a better name? executeAction(), ...\n+    public int doPowerManagement(User loggedInUser, String nameIn, String action) {\n+        ensureOrgAdmin(loggedInUser);\n+        ValidatorError error = null;\n+        switch (action) {\n+        case \"PowerOn\":\n+            error = new CobblerPowerCommand(loggedInUser, nameIn,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"PowerOff\":\n+            error = new CobblerPowerCommand(loggedInUser, nameIn,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"Reboot\":\n+            error = new CobblerPowerCommand(loggedInUser, nameIn,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+\n+        default:\n+            log.error(\"Invalid power management action: \" + action);\n+            throw new InvalidArgsException(\"Invalid power management action: \" + action);\n+        }\n+        if (error != null) {\n+            log.error(\"Power management action \" + action + \"failed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c41ca2f1779b065a4be5f11e50dc36d9748d83e6"}, "originalPosition": 349}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDc3NTQw", "url": "https://github.com/uyuni-project/uyuni/pull/2674#pullrequestreview-500477540", "createdAt": "2020-10-01T15:38:23Z", "commit": {"oid": "c41ca2f1779b065a4be5f11e50dc36d9748d83e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozODoyM1rOHbQTFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozODoyM1rOHbQTFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0MDYyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.info(\"Power management action \" + action + \"succeeded\");\n          \n          \n            \n                    log.info(\"Power management action \" + action + \" succeeded\");", "url": "https://github.com/uyuni-project/uyuni/pull/2674#discussion_r498340629", "createdAt": "2020-10-01T15:38:23Z", "author": {"login": "mbologna"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/provisioning/powermanagement/PowerManagementHandler.java", "diffHunk": "@@ -0,0 +1,403 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.frontend.xmlrpc.system.provisioning.powermanagement;\n+\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.validator.ValidatorError;\n+import com.redhat.rhn.domain.server.Server;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.action.kickstart.PowerManagementAction;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidParameterException;\n+import com.redhat.rhn.frontend.xmlrpc.NoSuchSystemException;\n+import com.redhat.rhn.frontend.xmlrpc.PowerManagementOperationFailedException;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerUnregisteredPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerXMLRPCHelper;\n+import com.redhat.rhn.manager.system.SystemManager;\n+\n+import org.apache.log4j.Logger;\n+import org.cobbler.SystemRecord;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * PowerManagementHandler\n+ * @xmlrpc.namespace system.provisioning.powermanagement\n+ * @xmlrpc.doc Provides methods to access and modify power management for systems.\n+ * Some functions exist in 2 variants. Either with server id or with a name.\n+ * The function with server id is useful when a system exists with a full profile.\n+ * Everybody allowed to manage that system can execute these functions.\n+ * The variant with name expects a cobbler system name prefix. These functions\n+ * enhance the name by adding the org id of the user to limit access to systems\n+ * from the own organization. Additionally Org Admin permissions are required to\n+ * call these functions.\n+ */\n+public class PowerManagementHandler extends BaseHandler {\n+    private static Logger log = Logger.getLogger(PowerManagementHandler.class);\n+\n+    /**\n+     * Return a list of available power management types\n+     *\n+     * @param loggedInUser the user\n+     * @return a list of available power management types\n+     *\n+     * @xmlrpc.doc Return a list of available power management types\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management types\")\n+     */\n+    public List<String> listTypes(User loggedInUser) {\n+        String typeString = ConfigDefaults.get().getCobblerPowerTypes();\n+        if (typeString != null) {\n+            return Arrays.asList(typeString.split(\" *, *\"));\n+        }\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, Integer serverId) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        SystemRecord record = SystemRecord.lookupById(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), server.getCobblerId());\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, String nameIn) {\n+        ensureOrgAdmin(loggedInUser);\n+        SystemRecord record = lookupExistingCobblerRecord(loggedInUser, nameIn);\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    private Map<String, String> getDetails(User loggedInUser, SystemRecord record) {\n+        Map<String, String> result = new HashMap<>();\n+        List<String> types = listTypes(loggedInUser);\n+        if (record == null) {\n+            result.put(PowerManagementAction.POWER_TYPE, types.get(0));\n+        }\n+        else {\n+            result.put(PowerManagementAction.POWER_TYPE, record.getPowerType());\n+            result.put(PowerManagementAction.POWER_ADDRESS, record.getPowerAddress());\n+            result.put(PowerManagementAction.POWER_USERNAME, record.getPowerUsername());\n+            result.put(PowerManagementAction.POWER_PASSWORD, record.getPowerPassword());\n+            result.put(PowerManagementAction.POWER_ID, record.getPowerId());\n+        }\n+        return result;\n+    }\n+\n+    private SystemRecord lookupExistingCobblerRecord(User loggedInUser, String label) {\n+        String sep = ConfigDefaults.get().getCobblerNameSeparator();\n+        label = label.replace(' ', '_').replaceAll(\"[^a-zA-Z0-9_\\\\-\\\\.]\", \"\");\n+        String name = label + sep + loggedInUser.getOrg().getId();\n+        SystemRecord rec = SystemRecord.lookupByName(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), name);\n+        if (rec == null) {\n+            log.error(\"System with cobbler name \" + name + \"not found.\");\n+        }\n+        return rec;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, Integer serverId, Map<String, String> data) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        CobblerPowerSettingsUpdateCommand cmd = new CobblerPowerSettingsUpdateCommand(\n+                loggedInUser, server,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, String nameIn, Map<String, String> data) {\n+        ensureOrgAdmin(loggedInUser);\n+        CobblerUnregisteredPowerSettingsUpdateCommand cmd =\n+                new CobblerUnregisteredPowerSettingsUpdateCommand(\n+                loggedInUser, nameIn,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Return a list of available power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @return list of action strings\n+     *\n+     * @xmlrpc.doc Return a list of available power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management actions\")\n+     */\n+    public List<String> listActions(User loggedInUser) {\n+        List<String> result = new ArrayList<>();\n+        result.add(\"PowerOn\");\n+        result.add(\"PowerOff\");\n+        result.add(\"Reboot\");\n+        return result;\n+    }\n+\n+    /**\n+     * Execute power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param action the action to execute\n+     * @return 1 on success\n+     *\n+     * @xmlrpc.doc Execute power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param #param(\"string\", \"action\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    // FIXME: and idea of a better name? executeAction(), ...\n+    public int doPowerManagement(User loggedInUser, Integer serverId, String action) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        ValidatorError error = null;\n+        switch (action) {\n+        case \"PowerOn\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"PowerOff\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOff).store();\n+            break;\n+        case \"Reboot\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.Reboot).store();\n+            break;\n+\n+        default:\n+            log.error(\"Invalid power management action: \" + action);\n+            throw new InvalidArgsException(\"Invalid power management action: \" + action);\n+        }\n+        if (error != null) {\n+            log.error(\"Power management action \" + action + \"failed\");\n+            throw new PowerManagementOperationFailedException(error.getMessage());\n+        }\n+        log.info(\"Power management action \" + action + \"succeeded\");\n+        return 1;\n+    }\n+\n+    /**\n+     * Execute power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param action the action to execute\n+     * @return 1 on success\n+     *\n+     * @xmlrpc.doc Execute power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param #param(\"string\", \"action\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    // FIXME: and idea of a better name? executeAction(), ...\n+    public int doPowerManagement(User loggedInUser, String nameIn, String action) {\n+        ensureOrgAdmin(loggedInUser);\n+        ValidatorError error = null;\n+        switch (action) {\n+        case \"PowerOn\":\n+            error = new CobblerPowerCommand(loggedInUser, nameIn,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"PowerOff\":\n+            error = new CobblerPowerCommand(loggedInUser, nameIn,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"Reboot\":\n+            error = new CobblerPowerCommand(loggedInUser, nameIn,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+\n+        default:\n+            log.error(\"Invalid power management action: \" + action);\n+            throw new InvalidArgsException(\"Invalid power management action: \" + action);\n+        }\n+        if (error != null) {\n+            log.error(\"Power management action \" + action + \"failed\");\n+            throw new PowerManagementOperationFailedException(error.getMessage());\n+        }\n+        log.info(\"Power management action \" + action + \"succeeded\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c41ca2f1779b065a4be5f11e50dc36d9748d83e6"}, "originalPosition": 352}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDc3ODQ3", "url": "https://github.com/uyuni-project/uyuni/pull/2674#pullrequestreview-500477847", "createdAt": "2020-10-01T15:38:41Z", "commit": {"oid": "c41ca2f1779b065a4be5f11e50dc36d9748d83e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozODo0MVrOHbQUBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozODo0MVrOHbQUBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0MDg2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"Power management action \" + action + \"failed\");\n          \n          \n            \n                        log.error(\"Power management action \" + action + \" failed\");", "url": "https://github.com/uyuni-project/uyuni/pull/2674#discussion_r498340868", "createdAt": "2020-10-01T15:38:41Z", "author": {"login": "mbologna"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/provisioning/powermanagement/PowerManagementHandler.java", "diffHunk": "@@ -0,0 +1,403 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.frontend.xmlrpc.system.provisioning.powermanagement;\n+\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.validator.ValidatorError;\n+import com.redhat.rhn.domain.server.Server;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.action.kickstart.PowerManagementAction;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidParameterException;\n+import com.redhat.rhn.frontend.xmlrpc.NoSuchSystemException;\n+import com.redhat.rhn.frontend.xmlrpc.PowerManagementOperationFailedException;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerUnregisteredPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerXMLRPCHelper;\n+import com.redhat.rhn.manager.system.SystemManager;\n+\n+import org.apache.log4j.Logger;\n+import org.cobbler.SystemRecord;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * PowerManagementHandler\n+ * @xmlrpc.namespace system.provisioning.powermanagement\n+ * @xmlrpc.doc Provides methods to access and modify power management for systems.\n+ * Some functions exist in 2 variants. Either with server id or with a name.\n+ * The function with server id is useful when a system exists with a full profile.\n+ * Everybody allowed to manage that system can execute these functions.\n+ * The variant with name expects a cobbler system name prefix. These functions\n+ * enhance the name by adding the org id of the user to limit access to systems\n+ * from the own organization. Additionally Org Admin permissions are required to\n+ * call these functions.\n+ */\n+public class PowerManagementHandler extends BaseHandler {\n+    private static Logger log = Logger.getLogger(PowerManagementHandler.class);\n+\n+    /**\n+     * Return a list of available power management types\n+     *\n+     * @param loggedInUser the user\n+     * @return a list of available power management types\n+     *\n+     * @xmlrpc.doc Return a list of available power management types\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management types\")\n+     */\n+    public List<String> listTypes(User loggedInUser) {\n+        String typeString = ConfigDefaults.get().getCobblerPowerTypes();\n+        if (typeString != null) {\n+            return Arrays.asList(typeString.split(\" *, *\"));\n+        }\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, Integer serverId) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        SystemRecord record = SystemRecord.lookupById(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), server.getCobblerId());\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, String nameIn) {\n+        ensureOrgAdmin(loggedInUser);\n+        SystemRecord record = lookupExistingCobblerRecord(loggedInUser, nameIn);\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    private Map<String, String> getDetails(User loggedInUser, SystemRecord record) {\n+        Map<String, String> result = new HashMap<>();\n+        List<String> types = listTypes(loggedInUser);\n+        if (record == null) {\n+            result.put(PowerManagementAction.POWER_TYPE, types.get(0));\n+        }\n+        else {\n+            result.put(PowerManagementAction.POWER_TYPE, record.getPowerType());\n+            result.put(PowerManagementAction.POWER_ADDRESS, record.getPowerAddress());\n+            result.put(PowerManagementAction.POWER_USERNAME, record.getPowerUsername());\n+            result.put(PowerManagementAction.POWER_PASSWORD, record.getPowerPassword());\n+            result.put(PowerManagementAction.POWER_ID, record.getPowerId());\n+        }\n+        return result;\n+    }\n+\n+    private SystemRecord lookupExistingCobblerRecord(User loggedInUser, String label) {\n+        String sep = ConfigDefaults.get().getCobblerNameSeparator();\n+        label = label.replace(' ', '_').replaceAll(\"[^a-zA-Z0-9_\\\\-\\\\.]\", \"\");\n+        String name = label + sep + loggedInUser.getOrg().getId();\n+        SystemRecord rec = SystemRecord.lookupByName(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), name);\n+        if (rec == null) {\n+            log.error(\"System with cobbler name \" + name + \"not found.\");\n+        }\n+        return rec;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, Integer serverId, Map<String, String> data) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        CobblerPowerSettingsUpdateCommand cmd = new CobblerPowerSettingsUpdateCommand(\n+                loggedInUser, server,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, String nameIn, Map<String, String> data) {\n+        ensureOrgAdmin(loggedInUser);\n+        CobblerUnregisteredPowerSettingsUpdateCommand cmd =\n+                new CobblerUnregisteredPowerSettingsUpdateCommand(\n+                loggedInUser, nameIn,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Return a list of available power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @return list of action strings\n+     *\n+     * @xmlrpc.doc Return a list of available power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management actions\")\n+     */\n+    public List<String> listActions(User loggedInUser) {\n+        List<String> result = new ArrayList<>();\n+        result.add(\"PowerOn\");\n+        result.add(\"PowerOff\");\n+        result.add(\"Reboot\");\n+        return result;\n+    }\n+\n+    /**\n+     * Execute power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param action the action to execute\n+     * @return 1 on success\n+     *\n+     * @xmlrpc.doc Execute power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param #param(\"string\", \"action\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    // FIXME: and idea of a better name? executeAction(), ...\n+    public int doPowerManagement(User loggedInUser, Integer serverId, String action) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        ValidatorError error = null;\n+        switch (action) {\n+        case \"PowerOn\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"PowerOff\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOff).store();\n+            break;\n+        case \"Reboot\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.Reboot).store();\n+            break;\n+\n+        default:\n+            log.error(\"Invalid power management action: \" + action);\n+            throw new InvalidArgsException(\"Invalid power management action: \" + action);\n+        }\n+        if (error != null) {\n+            log.error(\"Power management action \" + action + \"failed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c41ca2f1779b065a4be5f11e50dc36d9748d83e6"}, "originalPosition": 305}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDc4MDc2", "url": "https://github.com/uyuni-project/uyuni/pull/2674#pullrequestreview-500478076", "createdAt": "2020-10-01T15:38:56Z", "commit": {"oid": "c41ca2f1779b065a4be5f11e50dc36d9748d83e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozODo1NlrOHbQUqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozODo1NlrOHbQUqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0MTAzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.info(\"Power management action \" + action + \"succeeded\");\n          \n          \n            \n                    log.info(\"Power management action \" + action + \" succeeded\");", "url": "https://github.com/uyuni-project/uyuni/pull/2674#discussion_r498341033", "createdAt": "2020-10-01T15:38:56Z", "author": {"login": "mbologna"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/provisioning/powermanagement/PowerManagementHandler.java", "diffHunk": "@@ -0,0 +1,403 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.frontend.xmlrpc.system.provisioning.powermanagement;\n+\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.common.hibernate.LookupException;\n+import com.redhat.rhn.common.validator.ValidatorError;\n+import com.redhat.rhn.domain.server.Server;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.action.kickstart.PowerManagementAction;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidParameterException;\n+import com.redhat.rhn.frontend.xmlrpc.NoSuchSystemException;\n+import com.redhat.rhn.frontend.xmlrpc.PowerManagementOperationFailedException;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerUnregisteredPowerSettingsUpdateCommand;\n+import com.redhat.rhn.manager.kickstart.cobbler.CobblerXMLRPCHelper;\n+import com.redhat.rhn.manager.system.SystemManager;\n+\n+import org.apache.log4j.Logger;\n+import org.cobbler.SystemRecord;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * PowerManagementHandler\n+ * @xmlrpc.namespace system.provisioning.powermanagement\n+ * @xmlrpc.doc Provides methods to access and modify power management for systems.\n+ * Some functions exist in 2 variants. Either with server id or with a name.\n+ * The function with server id is useful when a system exists with a full profile.\n+ * Everybody allowed to manage that system can execute these functions.\n+ * The variant with name expects a cobbler system name prefix. These functions\n+ * enhance the name by adding the org id of the user to limit access to systems\n+ * from the own organization. Additionally Org Admin permissions are required to\n+ * call these functions.\n+ */\n+public class PowerManagementHandler extends BaseHandler {\n+    private static Logger log = Logger.getLogger(PowerManagementHandler.class);\n+\n+    /**\n+     * Return a list of available power management types\n+     *\n+     * @param loggedInUser the user\n+     * @return a list of available power management types\n+     *\n+     * @xmlrpc.doc Return a list of available power management types\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management types\")\n+     */\n+    public List<String> listTypes(User loggedInUser) {\n+        String typeString = ConfigDefaults.get().getCobblerPowerTypes();\n+        if (typeString != null) {\n+            return Arrays.asList(typeString.split(\" *, *\"));\n+        }\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, Integer serverId) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        SystemRecord record = SystemRecord.lookupById(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), server.getCobblerId());\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    /**\n+     * Get current power management settings of the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.returntype\n+     *  #struct_begin(\"powerManagementParameters\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     */\n+    public Map<String, String> getDetails(User loggedInUser, String nameIn) {\n+        ensureOrgAdmin(loggedInUser);\n+        SystemRecord record = lookupExistingCobblerRecord(loggedInUser, nameIn);\n+        return getDetails(loggedInUser, record);\n+    }\n+\n+    private Map<String, String> getDetails(User loggedInUser, SystemRecord record) {\n+        Map<String, String> result = new HashMap<>();\n+        List<String> types = listTypes(loggedInUser);\n+        if (record == null) {\n+            result.put(PowerManagementAction.POWER_TYPE, types.get(0));\n+        }\n+        else {\n+            result.put(PowerManagementAction.POWER_TYPE, record.getPowerType());\n+            result.put(PowerManagementAction.POWER_ADDRESS, record.getPowerAddress());\n+            result.put(PowerManagementAction.POWER_USERNAME, record.getPowerUsername());\n+            result.put(PowerManagementAction.POWER_PASSWORD, record.getPowerPassword());\n+            result.put(PowerManagementAction.POWER_ID, record.getPowerId());\n+        }\n+        return result;\n+    }\n+\n+    private SystemRecord lookupExistingCobblerRecord(User loggedInUser, String label) {\n+        String sep = ConfigDefaults.get().getCobblerNameSeparator();\n+        label = label.replace(' ', '_').replaceAll(\"[^a-zA-Z0-9_\\\\-\\\\.]\", \"\");\n+        String name = label + sep + loggedInUser.getOrg().getId();\n+        SystemRecord rec = SystemRecord.lookupByName(\n+                CobblerXMLRPCHelper.getConnection(loggedInUser), name);\n+        if (rec == null) {\n+            log.error(\"System with cobbler name \" + name + \"not found.\");\n+        }\n+        return rec;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, Integer serverId, Map<String, String> data) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        CobblerPowerSettingsUpdateCommand cmd = new CobblerPowerSettingsUpdateCommand(\n+                loggedInUser, server,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Set power management settings for the given system\n+     *\n+     * @param loggedInUser the user\n+     * @param nameIn the cobbler name prefix\n+     * @param data power management parameters\n+     * @return current power management settings when available\n+     *\n+     * @xmlrpc.doc Get current power management settings of the given system\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"string\", \"name\")\n+     * @xmlrpc.param\n+     *  #struct_begin(\"data\")\n+     *    #prop_desc(\"string\", \"powerType\", \"Power management type\")\n+     *    #prop_desc(\"string\", \"powerAddress\", \"IP address for power management\")\n+     *    #prop_desc(\"string\", \"powerUsername\", \"The Username\")\n+     *    #prop_desc(\"string\", \"powerPassword\", \"The Password\")\n+     *    #prop_desc(\"string\", \"powerId\", \"Identifier\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int setDetails(User loggedInUser, String nameIn, Map<String, String> data) {\n+        ensureOrgAdmin(loggedInUser);\n+        CobblerUnregisteredPowerSettingsUpdateCommand cmd =\n+                new CobblerUnregisteredPowerSettingsUpdateCommand(\n+                loggedInUser, nameIn,\n+                data.get(PowerManagementAction.POWER_TYPE),\n+                data.get(PowerManagementAction.POWER_ADDRESS),\n+                data.get(PowerManagementAction.POWER_USERNAME),\n+                data.get(PowerManagementAction.POWER_PASSWORD),\n+                data.get(PowerManagementAction.POWER_ID));\n+        ValidatorError error = cmd.store();\n+        if (error != null) {\n+            throw new InvalidParameterException(error.getMessage());\n+        }\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * Return a list of available power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @return list of action strings\n+     *\n+     * @xmlrpc.doc Return a list of available power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.returntype #array_single(\"string\", \"power management actions\")\n+     */\n+    public List<String> listActions(User loggedInUser) {\n+        List<String> result = new ArrayList<>();\n+        result.add(\"PowerOn\");\n+        result.add(\"PowerOff\");\n+        result.add(\"Reboot\");\n+        return result;\n+    }\n+\n+    /**\n+     * Execute power management actions\n+     *\n+     * @param loggedInUser the user\n+     * @param serverId the requested server id\n+     * @param action the action to execute\n+     * @return 1 on success\n+     *\n+     * @xmlrpc.doc Execute power management actions\n+     * @xmlrpc.param #param(\"string\", \"sessionKey\")\n+     * @xmlrpc.param #param(\"int\", \"serverId\")\n+     * @xmlrpc.param #param(\"string\", \"action\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    // FIXME: and idea of a better name? executeAction(), ...\n+    public int doPowerManagement(User loggedInUser, Integer serverId, String action) {\n+        Server server = null;\n+        try {\n+            server = SystemManager.lookupByIdAndUser(serverId.longValue(), loggedInUser);\n+        }\n+        catch (LookupException e) {\n+            throw new NoSuchSystemException();\n+        }\n+        ValidatorError error = null;\n+        switch (action) {\n+        case \"PowerOn\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOn).store();\n+            break;\n+        case \"PowerOff\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.PowerOff).store();\n+            break;\n+        case \"Reboot\":\n+            error = new CobblerPowerCommand(loggedInUser, server,\n+                    CobblerPowerCommand.Operation.Reboot).store();\n+            break;\n+\n+        default:\n+            log.error(\"Invalid power management action: \" + action);\n+            throw new InvalidArgsException(\"Invalid power management action: \" + action);\n+        }\n+        if (error != null) {\n+            log.error(\"Power management action \" + action + \"failed\");\n+            throw new PowerManagementOperationFailedException(error.getMessage());\n+        }\n+        log.info(\"Power management action \" + action + \"succeeded\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c41ca2f1779b065a4be5f11e50dc36d9748d83e6"}, "originalPosition": 308}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "072a6318caded04ff82660671d71fe0c853b6180", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/072a6318caded04ff82660671d71fe0c853b6180", "committedDate": "2020-10-05T16:11:22Z", "message": "fixup! cucumber tests for power management XMLRPC API"}, "afterCommit": {"oid": "77103ff5160f409852ca97547d1ecdd7a1a18b48", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/77103ff5160f409852ca97547d1ecdd7a1a18b48", "committedDate": "2020-10-05T16:12:57Z", "message": "cucumber tests for power management XMLRPC API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ae5921e635c7d28762db5fcf17ab0dce2f12df1", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3ae5921e635c7d28762db5fcf17ab0dce2f12df1", "committedDate": "2020-10-06T11:09:30Z", "message": "remove duplicate step"}, "afterCommit": {"oid": "f0bab06992df8614da48b83b665a45b245c4b3c5", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f0bab06992df8614da48b83b665a45b245c4b3c5", "committedDate": "2020-10-06T11:41:43Z", "message": "cucumber tests for power management XMLRPC API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyOTE4Nzc0", "url": "https://github.com/uyuni-project/uyuni/pull/2674#pullrequestreview-502918774", "createdAt": "2020-10-06T13:05:42Z", "commit": {"oid": "f0bab06992df8614da48b83b665a45b245c4b3c5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzowNTo0M1rOHdFY2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzowNTo0M1rOHdFY2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI1OTAzNA==", "bodyText": "Just a little nitpick. Can you make scenario name unique, please? Apart of this LGTM.", "url": "https://github.com/uyuni-project/uyuni/pull/2674#discussion_r500259034", "createdAt": "2020-10-06T13:05:43Z", "author": {"login": "lkotek"}, "path": "testsuite/features/secondary/srv_power_management.feature", "diffHunk": "@@ -82,6 +82,17 @@ Feature: Power management\n     And I should see a \"Power Off\" button\n     And I should see a \"Reboot\" button\n \n+  Scenario: Cleanup: reset IPMI values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0bab06992df8614da48b83b665a45b245c4b3c5"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMDAzNDgz", "url": "https://github.com/uyuni-project/uyuni/pull/2674#pullrequestreview-503003483", "createdAt": "2020-10-06T14:07:44Z", "commit": {"oid": "f0bab06992df8614da48b83b665a45b245c4b3c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMDI2OTQz", "url": "https://github.com/uyuni-project/uyuni/pull/2674#pullrequestreview-503026943", "createdAt": "2020-10-06T14:28:31Z", "commit": {"oid": "ef46887e4ad24b18a30b920b128c0a5700664ba9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNzA1MjY3", "url": "https://github.com/uyuni-project/uyuni/pull/2674#pullrequestreview-503705267", "createdAt": "2020-10-07T09:45:20Z", "commit": {"oid": "ef46887e4ad24b18a30b920b128c0a5700664ba9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOTo0NToyMFrOHdrRHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOTo0NToyMFrOHdrRHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg3OTY0NA==", "bodyText": "nitpick: stray line", "url": "https://github.com/uyuni-project/uyuni/pull/2674#discussion_r500879644", "createdAt": "2020-10-07T09:45:20Z", "author": {"login": "mbologna"}, "path": "java/code/src/com/redhat/rhn/manager/kickstart/cobbler/CobblerPowerCommand.java", "diffHunk": "@@ -68,59 +72,92 @@ public CobblerPowerCommand(User userIn, Server serverIn, Operation operationIn)\n     }\n \n     /**\n-     * Attempts to power on, off or reboot the server.\n-     * @return any errors\n+     * Instantiates a new Cobbler power management command.\n+     * @param userIn the user running this command\n+     * @param nameIn the cobbler system name (prefix) to power on or off\n+     * @param operationIn the operation to run\n      */\n-    @Override\n-    public ValidatorError store() {\n+    public CobblerPowerCommand(User userIn, String nameIn, Operation operationIn) {\n+        super(userIn);\n+        operation = operationIn;\n+        String sep = ConfigDefaults.get().getCobblerNameSeparator();\n+        nameIn = nameIn.replace(' ', '_').replaceAll(\"[^a-zA-Z0-9_\\\\-\\\\.]\", \"\");\n+        name = nameIn + sep + user.getOrg().getId();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef46887e4ad24b18a30b920b128c0a5700664ba9"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNzA2MzI5", "url": "https://github.com/uyuni-project/uyuni/pull/2674#pullrequestreview-503706329", "createdAt": "2020-10-07T09:46:42Z", "commit": {"oid": "ef46887e4ad24b18a30b920b128c0a5700664ba9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "865b3f141e01f83e8ea3fee3570367e51cbd81e1", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/865b3f141e01f83e8ea3fee3570367e51cbd81e1", "committedDate": "2020-10-07T10:59:20Z", "message": "powermanagement xmlrpc api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628f0226d83cd3ef026cd533c450c3691f902259", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/628f0226d83cd3ef026cd533c450c3691f902259", "committedDate": "2020-10-07T10:59:20Z", "message": "update changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ca2885a525c4857313d9fbc391cbf0e519d1ba4", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3ca2885a525c4857313d9fbc391cbf0e519d1ba4", "committedDate": "2020-10-07T10:59:20Z", "message": "cucumber tests for power management XMLRPC API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef46887e4ad24b18a30b920b128c0a5700664ba9", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ef46887e4ad24b18a30b920b128c0a5700664ba9", "committedDate": "2020-10-06T14:13:35Z", "message": "unique names for scenarios"}, "afterCommit": {"oid": "3ca2885a525c4857313d9fbc391cbf0e519d1ba4", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3ca2885a525c4857313d9fbc391cbf0e519d1ba4", "committedDate": "2020-10-07T10:59:20Z", "message": "cucumber tests for power management XMLRPC API"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1032, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}