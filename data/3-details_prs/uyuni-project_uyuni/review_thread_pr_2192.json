{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0OTQ5OTQ4", "number": 2192, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzowMzo0NFrOD6ofrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODoxNToxOFrOD7imNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODA3NDY4OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/controllers/contentmanagement/handlers/AppStreamsApiController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzowMzo0NFrOGSkymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODowODozN1rOGT6-rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMDMzMQ==", "bodyText": "Nit: is the return needed? AFAIK, Spark.halt throws an exception.", "url": "https://github.com/uyuni-project/uyuni/pull/2192#discussion_r422130331", "createdAt": "2020-05-08T13:03:44Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/webui/controllers/contentmanagement/handlers/AppStreamsApiController.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2019 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.controllers.contentmanagement.handlers;\n+\n+import com.redhat.rhn.domain.channel.Channel;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModulemdApi;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.channel.ChannelManager;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static spark.Spark.get;\n+\n+/**\n+ * Spark controller ContentManagement AppStreams API\n+ */\n+public class AppStreamsApiController {\n+\n+    private static ModulemdApi api = new ModulemdApi();\n+\n+    private AppStreamsApiController() { }\n+\n+    /** Init routes for ContentManagement AppStreams Api.*/\n+    public static void initRoutes() {\n+        get(\"/manager/api/contentmanagement/appstreams/:channelId\",\n+                withUser(AppStreamsApiController::getModulesInChannel));\n+    }\n+\n+    /**\n+     * Return the JSON with all the available module streams for a specified modular channel\n+     *\n+     * @param req the http request\n+     * @param res the http response\n+     * @param user the current user\n+     * @return the JSON data\n+     */\n+    public static String getModulesInChannel(Request req, Response res, User user) {\n+        try {\n+            Channel channel = ChannelManager.lookupByIdAndUser(Long.parseLong(req.params(\"channelId\")), user);\n+            return json(res, ResultJson.success(api.getAllModulesInChannel(channel)));\n+        }\n+        catch (NumberFormatException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4337f2be7c5b0d5ebf4504110c2e32e80b3b291a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0MjQ0NQ==", "bodyText": "Agreed, this is not needed", "url": "https://github.com/uyuni-project/uyuni/pull/2192#discussion_r423542445", "createdAt": "2020-05-12T08:08:37Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/controllers/contentmanagement/handlers/AppStreamsApiController.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2019 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.controllers.contentmanagement.handlers;\n+\n+import com.redhat.rhn.domain.channel.Channel;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModulemdApi;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.channel.ChannelManager;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static spark.Spark.get;\n+\n+/**\n+ * Spark controller ContentManagement AppStreams API\n+ */\n+public class AppStreamsApiController {\n+\n+    private static ModulemdApi api = new ModulemdApi();\n+\n+    private AppStreamsApiController() { }\n+\n+    /** Init routes for ContentManagement AppStreams Api.*/\n+    public static void initRoutes() {\n+        get(\"/manager/api/contentmanagement/appstreams/:channelId\",\n+                withUser(AppStreamsApiController::getModulesInChannel));\n+    }\n+\n+    /**\n+     * Return the JSON with all the available module streams for a specified modular channel\n+     *\n+     * @param req the http request\n+     * @param res the http response\n+     * @param user the current user\n+     * @return the JSON data\n+     */\n+    public static String getModulesInChannel(Request req, Response res, User user) {\n+        try {\n+            Channel channel = ChannelManager.lookupByIdAndUser(Long.parseLong(req.params(\"channelId\")), user);\n+            return json(res, ResultJson.success(api.getAllModulesInChannel(channel)));\n+        }\n+        catch (NumberFormatException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMDMzMQ=="}, "originalCommit": {"oid": "4337f2be7c5b0d5ebf4504110c2e32e80b3b291a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzU3Mjc0OnYy", "diffSide": "RIGHT", "path": "java/spacewalk-java.changes", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODowOTozNVrOGT7A_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowOToxN1rOGULbDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0MzAzNw==", "bodyText": "is CLM an acronym the customers know of? I would rather have it expanded even if that make a long line.", "url": "https://github.com/uyuni-project/uyuni/pull/2192#discussion_r423543037", "createdAt": "2020-05-12T08:09:35Z", "author": {"login": "cbosdo"}, "path": "java/spacewalk-java.changes", "diffHunk": "@@ -1,3 +1,4 @@\n+- Implement module picker controls for CLM AppStream filters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4337f2be7c5b0d5ebf4504110c2e32e80b3b291a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMTg1NQ==", "bodyText": "Yes, \"CLM\" acronym is also mentioned in the docs, so I'd say it's safe to use it here as well", "url": "https://github.com/uyuni-project/uyuni/pull/2192#discussion_r423811855", "createdAt": "2020-05-12T15:09:17Z", "author": {"login": "cbbayburt"}, "path": "java/spacewalk-java.changes", "diffHunk": "@@ -1,3 +1,4 @@\n+- Implement module picker controls for CLM AppStream filters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0MzAzNw=="}, "originalCommit": {"oid": "4337f2be7c5b0d5ebf4504110c2e32e80b3b291a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzU5NDE1OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/content-management/list-filters/appstreams/appstreams.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODoxNToxOFrOGT7OoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODoxNToxOFrOGT7OoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0NjUyOQ==", "bodyText": "You can replace <React.Fragment></React.Fragment> by this short version <></>", "url": "https://github.com/uyuni-project/uyuni/pull/2192#discussion_r423546529", "createdAt": "2020-05-12T08:15:18Z", "author": {"login": "cbosdo"}, "path": "web/html/src/manager/content-management/list-filters/appstreams/appstreams.js", "diffHunk": "@@ -0,0 +1,39 @@\n+// @flow\n+\n+import React, {useState} from 'react';\n+import {showErrorToastr} from 'components/toastr/toastr';\n+import TextInput from './text-input';\n+import SelectInput from './select-input';\n+import Network from 'utils/network';\n+\n+export default function AppStreams() {\n+  const [channels, setChannels] = useState([]);\n+  const [isBrowse, setBrowse] = useState(false);\n+  const [isLoading, setLoading] = useState(false);\n+\n+  const enableBrowse = () => {\n+    setLoading(true);\n+    Network.get(\"/rhn/manager/api/channels/modular\", \"application/json\").promise\n+      .then((channels) => {\n+        setChannels(channels.data);\n+        setLoading(false);\n+        setBrowse(true);\n+      }).catch(xhr => showErrorToastr(Network.responseErrorMessage(xhr)));\n+  }\n+\n+  return (\n+    isBrowse ?\n+      <SelectInput channels={channels}/>\n+    :\n+      <React.Fragment>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4337f2be7c5b0d5ebf4504110c2e32e80b3b291a"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4375, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}