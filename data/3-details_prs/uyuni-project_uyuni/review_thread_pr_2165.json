{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDM1Mzg1", "number": 2165, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1NDowN1rOD2UeuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoyMTo1NFrOD2pwZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mjg1MjQxOnYy", "diffSide": "RIGHT", "path": "testsuite/features/step_definitions/common_steps.rb", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1NDowN1rOGMEKTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo0NjowMlrOGMcvWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNDI2OA==", "bodyText": "I would prefer to have it as part of constants.rb file. But we couldn't arrive at an agreement related to constants in our squad.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415304268", "createdAt": "2020-04-26T12:54:07Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDIwNw==", "bodyText": "I think these constants should be part of the individual step definitions:\n1 - if they were real global constants, they should start with $\n2 - they are too specific to become really global\nPlease move them into the steps. It's not a big deal if they are repeated a few times.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415564207", "createdAt": "2020-04-27T07:09:24Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNDI2OA=="}, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwNjk2OA==", "bodyText": "Moving to steps.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415706968", "createdAt": "2020-04-27T10:46:02Z", "author": {"login": "hustodemon"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNDI2OA=="}, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mjg1OTIzOnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1ODoxNFrOGMENfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo1NjowOVrOGMdIdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNTA4Nw==", "bodyText": "I personally prefer to don't have calls to endpoints in out steps, I don't remember now the step, but we have another that has the same behavior without having the URI there.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415305087", "createdAt": "2020-04-26T12:58:14Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MjAwOQ==", "bodyText": "100 % agree, we should avoid internals in high-level cucumber text.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415562009", "createdAt": "2020-04-27T07:05:10Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNTA4Nw=="}, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMzM5OA==", "bodyText": "Looking at the test codebase, it even seems this seems to be the way to navigate to a \"general\" page. You are right, that there is another way - it's used in docker building feature (and it's tighly related to it), but the problem is, we'd need to write extra step for each navigation target. Btw, my code was a c&p from an existing bootstrapping test. And while I also don't like having rhn/blabla/bar in the steps that much, this seems like this should be done separately as a refactoring that targets all occurences of this step: When I navigate to \"rhn/systems/Overview.do\" page.\ngit grep 'I navigate to' | grep  \"\\.do\" | wc -l\n> 22\n\ngit grep 'I navigate to' | grep -v \"\\.do\" | wc -l\n> 11", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415713398", "createdAt": "2020-04-27T10:56:09Z", "author": {"login": "hustodemon"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNTA4Nw=="}, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDkzNjAxOnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1ODo0OVrOGMTsag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1ODo0OVrOGMTsag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1ODc2Mg==", "bodyText": "This is a separate feature, right ? Then you forgot the declarations in run_sets/*.yml.\nCopyright of 2020 only, maybe", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415558762", "createdAt": "2020-04-27T06:58:49Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDkzODg3OnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1OTozM1rOGMTuDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1OTozM1rOGMTuDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1OTE4MQ==", "bodyText": "Remove \"Be able to \".\nAll product features are about being able to do something, so this does not bring information.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415559181", "createdAt": "2020-04-27T06:59:33Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk0Nzk1OnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowMjowNFrOGMTzRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowMjowNFrOGMTzRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MDUxNw==", "bodyText": "maybe \"before bootstrap with SSH key test\" to make it more obvious what bootstrap test it's about.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415560517", "createdAt": "2020-04-27T07:02:04Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk1MDgxOnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowMzowMVrOGMT06w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowMzowMVrOGMT06w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MDkzOQ==", "bodyText": "\"SSH key\", lowercase.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415560939", "createdAt": "2020-04-27T07:03:01Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk1MzA3OnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowMzo0MVrOGMT2KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTowMTozMVrOGMdUyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MTI1Ng==", "bodyText": "Do we have balrogs for our tests? ;-)", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415561256", "createdAt": "2020-04-27T07:03:41Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNjU1NA==", "bodyText": "Yes, and we need to make sure they don't pass ;)", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415716554", "createdAt": "2020-04-27T11:01:31Z", "author": {"login": "hustodemon"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MTI1Ng=="}, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk1NDQ1OnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowNDowM1rOGMT24w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowNDowM1rOGMT24w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MTQ0Mw==", "bodyText": "\"key\", lowercase", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415561443", "createdAt": "2020-04-27T07:04:03Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk1NTY0OnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowNDoxOVrOGMT3hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowNDoxOVrOGMT3hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MTYwNg==", "bodyText": "same", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415561606", "createdAt": "2020-04-27T07:04:19Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk2MDU0OnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowNTo0OFrOGMT6Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTowMjowNVrOGMdV9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MjM0Mg==", "bodyText": "\"key\", lowercase. I will stop repeating it now, but there are more.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415562342", "createdAt": "2020-04-27T07:05:48Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page\n+    And I wait until I see the name of \"sle_minion\", refreshing the page\n+    And I wait until onboarding is completed for \"sle_minion\"\n+    Then the Salt master can reach \"sle_minion\"\n+\n+  Scenario: Also check contact method of this minion\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    Then I should see a \"Default\" text\n+  \n+  Scenario: Cleanup authorized keys\n+    When I restore the SSH authorized_keys file of host \"sle_minion\"\n+\n+  Scenario: Cleanup: turn the SLES minion into a container build host after bootstrap with SSH Key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNjg1Mg==", "bodyText": "I substituted all of them using Vim's %s.", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415716852", "createdAt": "2020-04-27T11:02:05Z", "author": {"login": "hustodemon"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page\n+    And I wait until I see the name of \"sle_minion\", refreshing the page\n+    And I wait until onboarding is completed for \"sle_minion\"\n+    Then the Salt master can reach \"sle_minion\"\n+\n+  Scenario: Also check contact method of this minion\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    Then I should see a \"Default\" text\n+  \n+  Scenario: Cleanup authorized keys\n+    When I restore the SSH authorized_keys file of host \"sle_minion\"\n+\n+  Scenario: Cleanup: turn the SLES minion into a container build host after bootstrap with SSH Key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MjM0Mg=="}, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk2MzI1OnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowNjoyNFrOGMT7yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowNjoyNFrOGMT7yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MjY5OQ==", "bodyText": "\"And\"", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415562699", "createdAt": "2020-04-27T07:06:24Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page\n+    And I wait until I see the name of \"sle_minion\", refreshing the page\n+    And I wait until onboarding is completed for \"sle_minion\"\n+    Then the Salt master can reach \"sle_minion\"\n+\n+  Scenario: Also check contact method of this minion\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    Then I should see a \"Default\" text\n+  \n+  Scenario: Cleanup authorized keys\n+    When I restore the SSH authorized_keys file of host \"sle_minion\"\n+\n+  Scenario: Cleanup: turn the SLES minion into a container build host after bootstrap with SSH Key\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Details\" in the content area\n+    And I follow \"Properties\" in the content area\n+    And I check \"container_build_host\"\n+    And I click on \"Update Properties\"\n+\n+  Scenario: Cleanup: turn the SLES minion into a OS image build host after bootstrap with SSH Key\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Details\" in the content area\n+    And I follow \"Properties\" in the content area\n+    And I check \"osimage_build_host\"\n+    And I click on \"Update Properties\"\n+    Then I should see a \"OS Image Build Host type has been applied.\" text\n+    And I should see a \"Note: This action will not result in state application\" text\n+    And I should see a \"To apply the state, either use the states page or run state.highstate from the command line.\" text\n+    And I should see a \"System properties changed\" text\n+\n+  Scenario: Cleanup: apply the highstate to build host after bootstrap with SSH Key\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I wait until no Salt job is running on \"sle_minion\"\n+    And I enable repositories before installing Docker\n+    And I apply highstate on \"sle_minion\"\n+    And I wait until \"docker\" service is active on \"sle_minion\"\n+    And I wait until file \"/var/lib/Kiwi/repo/rhn-org-trusted-ssl-cert-osimage-1.0-1.noarch.rpm\" exists on \"sle_minion\"\n+    And I disable repositories after installing Docker\n+\n+  Scenario: Cleanup: check that the minion is now a build host after bootstrap with SSH Key\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    Then I should see a \"[Container Build Host]\" text\n+    Then I should see a \"[OS Image Build Host]\" text", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk3NTY5OnYy", "diffSide": "RIGHT", "path": "testsuite/features/step_definitions/common_steps.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowOTo1OVrOGMUC2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTowNToyM1rOGMddYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDUwNQ==", "bodyText": "\"Error\", upper case", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415564505", "createdAt": "2020-04-27T07:09:59Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+\n+When(/^I backup the SSH authorized_keys file of host \"([^\"]*)\"$/) do |host|\n+  target = get_target(host)\n+  _, ret_code = target.run(\"cp #{auth_keys_path} #{auth_keys_sav_path}\")\n+  raise 'error backing up authorized_keys on host' if ret_code.nonzero?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxODc1NQ==", "bodyText": "Ok (although it seems the upper/lowercase convention is rather random in that file :) ).", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415718755", "createdAt": "2020-04-27T11:05:23Z", "author": {"login": "hustodemon"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+\n+When(/^I backup the SSH authorized_keys file of host \"([^\"]*)\"$/) do |host|\n+  target = get_target(host)\n+  _, ret_code = target.run(\"cp #{auth_keys_path} #{auth_keys_sav_path}\")\n+  raise 'error backing up authorized_keys on host' if ret_code.nonzero?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDUwNQ=="}, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk3ODAxOnYy", "diffSide": "RIGHT", "path": "testsuite/features/step_definitions/common_steps.rb", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxMDo0NlrOGMUEWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoyMToyMVrOGMgRXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDg5MA==", "bodyText": "or two string interpolations with #{...}(not sure it's a good idea, feel free to ignore)", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415564890", "createdAt": "2020-04-27T07:10:46Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+\n+When(/^I backup the SSH authorized_keys file of host \"([^\"]*)\"$/) do |host|\n+  target = get_target(host)\n+  _, ret_code = target.run(\"cp #{auth_keys_path} #{auth_keys_sav_path}\")\n+  raise 'error backing up authorized_keys on host' if ret_code.nonzero?\n+end\n+\n+And(/^I add pre\\-generated SSH public key to authorized_keys of host \"([^\"]*)\"$/) do |host|\n+  target = get_target(host)\n+  ret_code = file_inject(\n+    target,\n+    File.dirname(__FILE__) + '/../upload_files/ssh_keypair/' + key_filename,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyMDgzMQ==", "bodyText": "common_steps contain every possible way to combine path now, so I'll leave this for now since it works ;) (best way would probably be File.join(File.dirname(__FILE__), 'something'), but I don't want to break already working code).", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415720831", "createdAt": "2020-04-27T11:08:54Z", "author": {"login": "hustodemon"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+\n+When(/^I backup the SSH authorized_keys file of host \"([^\"]*)\"$/) do |host|\n+  target = get_target(host)\n+  _, ret_code = target.run(\"cp #{auth_keys_path} #{auth_keys_sav_path}\")\n+  raise 'error backing up authorized_keys on host' if ret_code.nonzero?\n+end\n+\n+And(/^I add pre\\-generated SSH public key to authorized_keys of host \"([^\"]*)\"$/) do |host|\n+  target = get_target(host)\n+  ret_code = file_inject(\n+    target,\n+    File.dirname(__FILE__) + '/../upload_files/ssh_keypair/' + key_filename,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDg5MA=="}, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc2NDgyOQ==", "bodyText": "yes, it might be we have been creative here... \ud83d\ude0a", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415764829", "createdAt": "2020-04-27T12:21:21Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -1161,3 +1161,35 @@ def server_secret\n   xpath = \"//td[contains(text(), '#{action_name}')]/ancestor::tr[contains(@class, 'list-row-even')]/td/div/button/#{button}\"\n   raise \"xpath: #{xpath} not found\" unless find(:xpath, xpath).click\n end\n+\n+\n+# todo is this the right place?\n+# common constants for SSH bootstrap with SSH key auth test\n+key_filename = 'id_rsa_bootstrap-passphrase_linux.pub'\n+## authorized_keys paths on the client\n+auth_keys_path = '/root/.ssh/authorized_keys'\n+auth_keys_sav_path = '/root/.ssh/authorized_keys.sav'\n+\n+When(/^I backup the SSH authorized_keys file of host \"([^\"]*)\"$/) do |host|\n+  target = get_target(host)\n+  _, ret_code = target.run(\"cp #{auth_keys_path} #{auth_keys_sav_path}\")\n+  raise 'error backing up authorized_keys on host' if ret_code.nonzero?\n+end\n+\n+And(/^I add pre\\-generated SSH public key to authorized_keys of host \"([^\"]*)\"$/) do |host|\n+  target = get_target(host)\n+  ret_code = file_inject(\n+    target,\n+    File.dirname(__FILE__) + '/../upload_files/ssh_keypair/' + key_filename,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDg5MA=="}, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk4NjY0OnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxMjo1OVrOGMUJIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxMjo1OVrOGMUJIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NjExMw==", "bodyText": "\"Cleanup: restore authorized keys\"", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415566113", "createdAt": "2020-04-27T07:12:59Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/sle_minion_bootstrap_ssh_key.feature", "diffHunk": "@@ -0,0 +1,92 @@\n+# Copyright (c) 2016-2020 SUSE LLC\n+# Licensed under the terms of the MIT license.\n+\n+Feature: Be able to bootstrap a Salt minion via the GUI using SSH key\n+\n+  Scenario: Delete SLES minion system profile before bootstrap test\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    When I follow \"Delete System\"\n+    Then I should see a \"Confirm System Profile Deletion\" text\n+    When I click on \"Delete Profile\"\n+    And I wait until I see \"has been deleted\" text\n+    And I cleanup minion \"sle_minion\"\n+    Then \"sle_minion\" should not be registered\n+\n+  Scenario: Prepare the minion for SSH key authentication\n+    When I backup the SSH authorized_keys file of host \"sle_minion\"\n+    And I add pre-generated SSH public key to authorized_keys of host \"sle_minion\"\n+  \n+  Scenario: Bootstrap a SLES minion using SSH Key with wrong passphrase\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"you-shall-not-pass\" as \"privKeyPwd\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Permission denied, no authentication information\" text\n+\n+  Scenario: Bootstrap a SLES minion using SSH Key\n+    Given I am authorized\n+    When I go to the bootstrapping page\n+    Then I should see a \"Bootstrap Minions\" text\n+    When I enter the hostname of \"sle_minion\" as \"hostname\"\n+    And I enter \"22\" as \"port\"\n+    And I enter \"root\" as \"user\"\n+    And I check radio button \"SSH Private Key\"\n+    And I attach the file \"ssh_keypair/id_rsa_bootstrap-passphrase_linux\" to \"privKeyFile\"\n+    And I enter \"linux\" as \"privKeyPwd\"\n+    And I select the hostname of \"proxy\" from \"proxies\"\n+    And I click on \"Bootstrap\"\n+    And I wait until I see \"Successfully bootstrapped host!\" text\n+\n+  Scenario: Check new minion bootstrapped with SSH Key in System Overview page\n+    Given I am authorized\n+    When I go to the minion onboarding page\n+    Then I should see a \"accepted\" text\n+    When I navigate to \"rhn/systems/Overview.do\" page\n+    And I wait until I see the name of \"sle_minion\", refreshing the page\n+    And I wait until onboarding is completed for \"sle_minion\"\n+    Then the Salt master can reach \"sle_minion\"\n+\n+  Scenario: Also check contact method of this minion\n+    Given I am on the Systems overview page of this \"sle_minion\"\n+    Then I should see a \"Default\" text\n+  \n+  Scenario: Cleanup authorized keys", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375acc5dc17a300dc0d249d2e6495c8894c5f20f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjMzODMwOnYy", "diffSide": "RIGHT", "path": "testsuite/run_sets/secondary.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoyMTo1NFrOGMgS5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoyMTo1NFrOGMgS5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc2NTIyMA==", "bodyText": "thanks!", "url": "https://github.com/uyuni-project/uyuni/pull/2165#discussion_r415765220", "createdAt": "2020-04-27T12:21:54Z", "author": {"login": "Bischoff"}, "path": "testsuite/run_sets/secondary.yml", "diffHunk": "@@ -17,6 +17,7 @@\n - features/secondary/trad_centos_client.feature\n - features/secondary/min_ubuntu_salt.feature\n - features/secondary/minssh_bootstrap_xmlrpc.feature\n+- features/secondary/min_bootstrap_ssh_key.feature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cd4fc677e16aeb68f63fb82702db0ecaa9f954"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4347, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}