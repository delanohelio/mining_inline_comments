{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMzU0ODI5", "number": 2309, "title": "Add checks for maintenance windows during recurring actions", "bodyText": "What does this PR change?\nThis PR adds a check for recurring actions to make sure the minion is in maintenance mode, if not, skip the action. If debug is enabled it will log the skipped minion ids.\nGUI diff\nNo difference.\n\n DONE\n\nDocumentation\n\n\nNo documentation needed: expected behavior\n\n\n DONE\n\n\nTest coverage\n\n\nUnit tests were added\n\n\n DONE\n\n\nLinks\nTracks SUSE/spacewalk#11231\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"ruby_rubocop\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-06-08T19:37:50Z", "url": "https://github.com/uyuni-project/uyuni/pull/2309", "merged": true, "mergeCommit": {"oid": "563ffc0052f5d71a0490466a9cbd52d81ea6a7f4"}, "closed": true, "closedAt": "2020-06-30T14:16:38Z", "author": {"login": "mseidl"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpV06tgBqjM0MjE3MjI4MDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwWDHtAFqTQ0MDA0MDEwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f189b0b43a03b562bf4c18196c6b544a7504f97", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8f189b0b43a03b562bf4c18196c6b544a7504f97", "committedDate": "2020-06-05T09:29:20Z", "message": "fixed stuff"}, "afterCommit": {"oid": "45fb65ce60b2bff6cb285d85f6f37e120fd9362a", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/45fb65ce60b2bff6cb285d85f6f37e120fd9362a", "committedDate": "2020-06-08T19:40:55Z", "message": "fixed stuff"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45fb65ce60b2bff6cb285d85f6f37e120fd9362a", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/45fb65ce60b2bff6cb285d85f6f37e120fd9362a", "committedDate": "2020-06-08T19:40:55Z", "message": "fixed stuff"}, "afterCommit": {"oid": "89183d3ddaaf848ff78a04860de0a1c6f1645b02", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/89183d3ddaaf848ff78a04860de0a1c6f1645b02", "committedDate": "2020-06-08T20:01:08Z", "message": "test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89183d3ddaaf848ff78a04860de0a1c6f1645b02", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/89183d3ddaaf848ff78a04860de0a1c6f1645b02", "committedDate": "2020-06-08T20:01:08Z", "message": "test"}, "afterCommit": {"oid": "3c2c56466ab9f17ae0c2fd62bbf402903d85143c", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3c2c56466ab9f17ae0c2fd62bbf402903d85143c", "committedDate": "2020-06-08T20:51:32Z", "message": "test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2ODc5ODAx", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-426879801", "createdAt": "2020-06-09T07:57:23Z", "commit": {"oid": "c925039ff9de5b37abce686a5d32b7211f1e8249"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo1NzoyM1rOGg9KcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODowMzoyOFrOGg9YEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwOTcxMw==", "bodyText": "This must return true. A System which does not have a schedule is allways in maintenance mode. This is the current behavior, you can schedule things at any time.\n(The final return false in Line 2205 is correct. When a client has a schedule but no calendar, this client is 'never' in maintenance mode.", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r437209713", "createdAt": "2020-06-09T07:57:23Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/redhat/rhn/domain/server/Server.java", "diffHunk": "@@ -2183,4 +2187,21 @@ public String getChannelHost() {\n         return this.getFirstServerPath().map(p -> p.getHostname())\n                 .orElseGet(() -> ConfigDefaults.get().getCobblerHost());\n     }\n+\n+    public boolean checkIfInMaintenanceMode() {\n+        if (maintenanceSchedule == null) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c925039ff9de5b37abce686a5d32b7211f1e8249"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxMzIwMQ==", "bodyText": "Here we need to be careful with the performance. When this one action has 10000 clients this gets slow.\nWhile having checkIfInMaintenanceMode() for a single client is required, we should also have a function which does a mass checking.\nMaybe something like this:\nList<Long> systemIdsMaintenanceMode(List<MinionServer> minions)\n\nCould be implemented in MaintenanceManager.java", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r437213201", "createdAt": "2020-06-09T08:03:28Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/redhat/rhn/taskomatic/task/RecurringStateApplyJob.java", "diffHunk": "@@ -57,9 +60,14 @@ public void execute(JobExecutionContext context) throws JobExecutionException {\n     }\n \n     private void scheduleAction(JobExecutionContext context, RecurringAction action) {\n-        List<Long> minionIds = action.computeMinions().stream()\n-                .map(m -> m.getId())\n-                .collect(Collectors.toList());\n+        Map<Boolean, List<MinionServer>> sepList = action.computeMinions().stream()\n+              .collect(Collectors.partitioningBy(m -> m.checkIfInMaintenanceMode()));\n+        sepList.get(true).stream()\n+                       .forEach(m -> Log.info(m.getMinionId() + \" is in Maintenance mode, skipping recurring action.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c925039ff9de5b37abce686a5d32b7211f1e8249"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDQ0OTAx", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-427044901", "createdAt": "2020-06-09T11:29:04Z", "commit": {"oid": "f351186bc4a7f3ad575d730fb153ebe3a20385f0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMToyOTowNVrOGhE7PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMToyOTowNVrOGhE7PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzNjg5Mg==", "bodyText": "Move the whole logic  to MaintenanceManager (create a new method boolean isServerInMaintenanceMode(server) and call it with this). This will be clearer. There is no reason the Server class should do anything with CalendarComponent.\nAs for the implementation of the method itself:\n\nfix the formatting\nthis\n\n            if (cc.isEmpty()) {\n              return false;\n            }\n            else {\n                return true;\n            }\n\ncan be replaced with\nreturn !cc.isEmpty();", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r437336892", "createdAt": "2020-06-09T11:29:05Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/server/Server.java", "diffHunk": "@@ -2183,4 +2187,21 @@ public String getChannelHost() {\n         return this.getFirstServerPath().map(p -> p.getHostname())\n                 .orElseGet(() -> ConfigDefaults.get().getCobblerHost());\n     }\n+\n+    public boolean checkIfInMaintenanceMode() {\n+        if (maintenanceSchedule == null) {\n+            return true;\n+        }\n+        if (!maintenanceSchedule.getCalendarOpt().isEmpty()) {\n+            MaintenanceManager mm = MaintenanceManager.instance();\n+            Collection<CalendarComponent> cc = mm.getDateFromSchedule(this.maintenanceSchedule);\n+            if (cc.isEmpty()) {\n+              return false;\n+            }\n+            else {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f351186bc4a7f3ad575d730fb153ebe3a20385f0"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9b5b66e6c0b5b91fc8257473df2f23e0f681aef", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f9b5b66e6c0b5b91fc8257473df2f23e0f681aef", "committedDate": "2020-06-15T20:08:04Z", "message": "remove unused import"}, "afterCommit": {"oid": "f8d6c4076a5d1a86f2ed2ab8eaac4c726426a1c3", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f8d6c4076a5d1a86f2ed2ab8eaac4c726426a1c3", "committedDate": "2020-06-16T08:40:49Z", "message": "remove unused import"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8d6c4076a5d1a86f2ed2ab8eaac4c726426a1c3", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f8d6c4076a5d1a86f2ed2ab8eaac4c726426a1c3", "committedDate": "2020-06-16T08:40:49Z", "message": "remove unused import"}, "afterCommit": {"oid": "1b20930410051ecdf6bf6f4b97e995e73fa9d955", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1b20930410051ecdf6bf6f4b97e995e73fa9d955", "committedDate": "2020-06-16T09:12:01Z", "message": "remove unused import"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b20930410051ecdf6bf6f4b97e995e73fa9d955", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1b20930410051ecdf6bf6f4b97e995e73fa9d955", "committedDate": "2020-06-16T09:12:01Z", "message": "remove unused import"}, "afterCommit": {"oid": "df33bad8d71c624f2819db85e9c780b783b66bd0", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/df33bad8d71c624f2819db85e9c780b783b66bd0", "committedDate": "2020-06-17T07:25:34Z", "message": "update changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df33bad8d71c624f2819db85e9c780b783b66bd0", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/df33bad8d71c624f2819db85e9c780b783b66bd0", "committedDate": "2020-06-17T07:25:34Z", "message": "update changelog"}, "afterCommit": {"oid": "8de8cad9d89a25805f0e33603ad5da9928236023", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8de8cad9d89a25805f0e33603ad5da9928236023", "committedDate": "2020-06-17T07:30:31Z", "message": "update changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8de8cad9d89a25805f0e33603ad5da9928236023", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8de8cad9d89a25805f0e33603ad5da9928236023", "committedDate": "2020-06-17T07:30:31Z", "message": "update changelog"}, "afterCommit": {"oid": "c6d98795057285acb4e23515385eef31f1595151", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c6d98795057285acb4e23515385eef31f1595151", "committedDate": "2020-06-17T08:17:28Z", "message": "update changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjE3Nzgz", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-432217783", "createdAt": "2020-06-17T09:22:55Z", "commit": {"oid": "c6d98795057285acb4e23515385eef31f1595151"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOToyMjo1NVrOGk9WcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOToyMjo1NVrOGk9WcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQwNzA4OA==", "bodyText": "I think this is incomplete. Just a variable without setter and getter does not make sense.\nFor now I would remove the changes for this class", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r441407088", "createdAt": "2020-06-17T09:22:55Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/redhat/rhn/domain/server/Server.java", "diffHunk": "@@ -128,6 +129,7 @@\n     private String hostname;\n     private boolean payg;\n     private MaintenanceSchedule maintenanceSchedule;\n+    private boolean inMaintenanceMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d98795057285acb4e23515385eef31f1595151"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzUyMzI2", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-432352326", "createdAt": "2020-06-17T12:33:09Z", "commit": {"oid": "c6d98795057285acb4e23515385eef31f1595151"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjozMzowOVrOGlDkTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjozMzowOVrOGlDkTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwODk0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     Map<Boolean, List<MinionServer>> sepList = minions.stream()\n          \n          \n            \n                          .collect(Collectors.partitioningBy(m -> MaintenanceManager.checkIfInMaintenanceMode(m)));\n          \n          \n            \n                    Map<Optional<MaintenanceSchedule>, List<MinionServer>> minionsBySchedule = minions\n          \n          \n            \n                            .stream().collect(Collectors.groupingBy(m -> m.getMaintenanceScheduleOpt()));\n          \n          \n            \n            \n          \n          \n            \n                    Map<Boolean, List<MinionServer>> sepList = minionsBySchedule.entrySet()\n          \n          \n            \n                            .stream().collect(Collectors.partitioningBy(mapEntry -> {\n          \n          \n            \n                                Optional<MaintenanceSchedule> optSchedule = mapEntry.getKey();\n          \n          \n            \n                                if (optSchedule.isEmpty()) {\n          \n          \n            \n                                    return true;\n          \n          \n            \n                                }\n          \n          \n            \n            \n          \n          \n            \n                                MaintenanceManager mm = MaintenanceManager.instance();\n          \n          \n            \n                                return !mm.getDateFromSchedule(optSchedule.get()).isEmpty();\n          \n          \n            \n                                }, Collectors.flatMapping(e -> e.getValue().stream(), Collectors.toList())));\n          \n      \n    \n    \n  \n\nLooks funny, but it should speedup things a lot as we do not check every single minion, but group them by maintenance schedules first and than perform the check only for every schedule.\nThe method checkIfMaintenanceMode is now unused. But it could be used in the Server object to perform this check for a single system.", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r441508941", "createdAt": "2020-06-17T12:33:09Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -695,6 +696,57 @@ public boolean isActionInMaintenanceWindow(Action action, MaintenanceSchedule sc\n         return false;\n     }\n \n+    private Collection<CalendarComponent> getDateFromSchedule(MaintenanceSchedule ms) {\n+        return getScheduleEventsAtDate(new Date(), ms, parseCalendar(ms.getCalendarOpt().get()));\n+    }\n+\n+    /**\n+     * Check if system is in maintenance mode\n+     *\n+     * @param server the server to check\n+     * @return true when the action is inside of a maintenance window, otherwise false\n+     */\n+    public static boolean checkIfInMaintenanceMode(MinionServer server) {\n+        if (server.getMaintenanceScheduleOpt().isEmpty()) {\n+            return true;\n+        }\n+        else {\n+            MaintenanceManager mm = MaintenanceManager.instance();\n+            Collection<CalendarComponent> cc = mm.getDateFromSchedule(server.getMaintenanceScheduleOpt().get());\n+            return cc.isEmpty();\n+        }\n+    }\n+\n+    /**\n+     * Log the number of servers skipped and if debugging is enabled list the server names\n+     *\n+     * @param servers the list of servers to log\n+     */\n+    public static void logSkippedMinions(List<MinionServer> servers) {\n+       log.warn(\"Skipping action for \" + servers.size() + \" minions.\");\n+       if (log.isDebugEnabled()) {\n+          String serverNames = servers.stream()\n+          .map(m -> m.getName())\n+          .collect(Collectors.joining(\",\"));\n+          log.debug(\"Skipped minion ids: \" + serverNames);\n+       }\n+    }\n+\n+    /**\n+     * Given a list of minions, sorts by maintenance mode status, logs skipped minions\n+     *\n+     * @param minions servers to check\n+     * @return List of minions in maintenance mode\n+     */\n+    public static List<Long> systemIdsMaintenanceMode(List<MinionServer> minions) {\n+         Map<Boolean, List<MinionServer>> sepList = minions.stream()\n+              .collect(Collectors.partitioningBy(m -> MaintenanceManager.checkIfInMaintenanceMode(m)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d98795057285acb4e23515385eef31f1595151"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzYwMTI5", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-432360129", "createdAt": "2020-06-17T12:42:55Z", "commit": {"oid": "c6d98795057285acb4e23515385eef31f1595151"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0Mjo1NVrOGlD6uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0Mjo1NVrOGlD6uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNDY4MA==", "bodyText": "ms.getCalendarOpt().get() is a potential NullPointerException", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r441514680", "createdAt": "2020-06-17T12:42:55Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -695,6 +696,57 @@ public boolean isActionInMaintenanceWindow(Action action, MaintenanceSchedule sc\n         return false;\n     }\n \n+    private Collection<CalendarComponent> getDateFromSchedule(MaintenanceSchedule ms) {\n+        return getScheduleEventsAtDate(new Date(), ms, parseCalendar(ms.getCalendarOpt().get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d98795057285acb4e23515385eef31f1595151"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzYyMTY3", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-432362167", "createdAt": "2020-06-17T12:45:21Z", "commit": {"oid": "c6d98795057285acb4e23515385eef31f1595151"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0NToyMVrOGlEAdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0NToyMVrOGlEAdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNjE0OQ==", "bodyText": "I think we need to return !cc.isEmpty().\nCalendarComponents are mtching maintenance windows. So when we find something we are in maintenance mode,\notherwise - when empty - we are not.", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r441516149", "createdAt": "2020-06-17T12:45:21Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -695,6 +696,57 @@ public boolean isActionInMaintenanceWindow(Action action, MaintenanceSchedule sc\n         return false;\n     }\n \n+    private Collection<CalendarComponent> getDateFromSchedule(MaintenanceSchedule ms) {\n+        return getScheduleEventsAtDate(new Date(), ms, parseCalendar(ms.getCalendarOpt().get()));\n+    }\n+\n+    /**\n+     * Check if system is in maintenance mode\n+     *\n+     * @param server the server to check\n+     * @return true when the action is inside of a maintenance window, otherwise false\n+     */\n+    public static boolean checkIfInMaintenanceMode(MinionServer server) {\n+        if (server.getMaintenanceScheduleOpt().isEmpty()) {\n+            return true;\n+        }\n+        else {\n+            MaintenanceManager mm = MaintenanceManager.instance();\n+            Collection<CalendarComponent> cc = mm.getDateFromSchedule(server.getMaintenanceScheduleOpt().get());\n+            return cc.isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d98795057285acb4e23515385eef31f1595151"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6d98795057285acb4e23515385eef31f1595151", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c6d98795057285acb4e23515385eef31f1595151", "committedDate": "2020-06-17T08:17:28Z", "message": "update changelog"}, "afterCommit": {"oid": "86dd19584f4a8452c7e14d9b5bfca3a05dd9156d", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/86dd19584f4a8452c7e14d9b5bfca3a05dd9156d", "committedDate": "2020-06-19T07:36:11Z", "message": "update changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86dd19584f4a8452c7e14d9b5bfca3a05dd9156d", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/86dd19584f4a8452c7e14d9b5bfca3a05dd9156d", "committedDate": "2020-06-19T07:36:11Z", "message": "update changelog"}, "afterCommit": {"oid": "8bd52ec2cd06a162c04a66221b9506b9c619db57", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8bd52ec2cd06a162c04a66221b9506b9c619db57", "committedDate": "2020-06-22T12:21:28Z", "message": "update changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bd52ec2cd06a162c04a66221b9506b9c619db57", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8bd52ec2cd06a162c04a66221b9506b9c619db57", "committedDate": "2020-06-22T12:21:28Z", "message": "update changelog"}, "afterCommit": {"oid": "7ccc8a642085d5c07cf5ec0d0ee3b39c3023a3c1", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7ccc8a642085d5c07cf5ec0d0ee3b39c3023a3c1", "committedDate": "2020-06-23T07:18:44Z", "message": "update changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjAwMzI0", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-435600324", "createdAt": "2020-06-23T09:22:13Z", "commit": {"oid": "7ccc8a642085d5c07cf5ec0d0ee3b39c3023a3c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToyMjoxM1rOGng0rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToyMjoxM1rOGng0rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4NTQyMA==", "bodyText": "The stream -> collect is not necessary. You can feed action.computeMinions() directly to systemidsMaintenanceMode.", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r444085420", "createdAt": "2020-06-23T09:22:13Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/taskomatic/task/RecurringStateApplyJob.java", "diffHunk": "@@ -57,9 +58,9 @@ public void execute(JobExecutionContext context) throws JobExecutionException {\n     }\n \n     private void scheduleAction(JobExecutionContext context, RecurringAction action) {\n-        List<Long> minionIds = action.computeMinions().stream()\n-                .map(m -> m.getId())\n-                .collect(Collectors.toList());\n+        List<Long> minionIds = MaintenanceManager.systemIdsMaintenanceMode(action.computeMinions().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ccc8a642085d5c07cf5ec0d0ee3b39c3023a3c1"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ccc8a642085d5c07cf5ec0d0ee3b39c3023a3c1", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7ccc8a642085d5c07cf5ec0d0ee3b39c3023a3c1", "committedDate": "2020-06-23T07:18:44Z", "message": "update changelog"}, "afterCommit": {"oid": "884cb7e4ef694f50a70660e79d6a5559036aa95e", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/884cb7e4ef694f50a70660e79d6a5559036aa95e", "committedDate": "2020-06-23T09:30:46Z", "message": "update changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "884cb7e4ef694f50a70660e79d6a5559036aa95e", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/884cb7e4ef694f50a70660e79d6a5559036aa95e", "committedDate": "2020-06-23T09:30:46Z", "message": "update changelog"}, "afterCommit": {"oid": "19fe2fd44f69b7653cf364ac5d8708369d39cee8", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/19fe2fd44f69b7653cf364ac5d8708369d39cee8", "committedDate": "2020-06-24T06:53:48Z", "message": "update changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDU4NDkw", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-436458490", "createdAt": "2020-06-24T09:02:00Z", "commit": {"oid": "19fe2fd44f69b7653cf364ac5d8708369d39cee8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTowMjowMVrOGoJY8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToxNjozOVrOGoJ6oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1MDA2Ng==", "bodyText": "The body of the method looks incorrectly formatted. Please reformat in your IDE or use the following snippet.\n        MaintenanceManager mm = MaintenanceManager.instance();\n        Set<MaintenanceSchedule> schedulesInMaintMode = minions.stream()\n                .flatMap(minion -> minion.getMaintenanceScheduleOpt().stream())\n                .distinct()\n                .filter(sched -> !mm.getCalendarForNow(sched).isEmpty())\n                .collect(Collectors.toSet());\n\n        List<Long> minionsInMaintMode = minions.stream()\n                .filter(minion -> minion.getMaintenanceScheduleOpt()\n                        .map(sched -> schedulesInMaintMode.contains(sched)) // keep minions that have maintenance mode\n                        .orElse(true)) // or that have no maintenance schedule whatsoever\n                .map(minion -> minion.getId())\n                .collect(toList());\n\n        List<MinionServer> logList = minions.stream()\n                .filter(m -> !minionsInMaintMode.contains(m))\n                .collect(Collectors.toList());\n        logSkippedMinions(logList);\n\n        return minionsInMaintMode;", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r444750066", "createdAt": "2020-06-24T09:02:01Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -695,6 +696,71 @@ public boolean isActionInMaintenanceWindow(Action action, MaintenanceSchedule sc\n         return false;\n     }\n \n+    private Collection<CalendarComponent> getCalendarForNow(MaintenanceSchedule ms) {\n+        return getScheduleEventsAtDate(new Date(), ms, parseCalendar(ms.getCalendarOpt().get()));\n+    }\n+\n+    /**\n+     * Check if system is in maintenance mode\n+     *\n+     * @param server the server to check\n+     * @return true when the action is inside of a maintenance window, otherwise falsegg\n+     */\n+    public static boolean checkIfInMaintenanceMode(MinionServer server) {\n+        if (server.getMaintenanceScheduleOpt().isEmpty()) {\n+            return true;\n+        }\n+        else {\n+            MaintenanceManager mm = MaintenanceManager.instance();\n+            Collection<CalendarComponent> cc = mm.getCalendarForNow(server.getMaintenanceScheduleOpt().get());\n+            return !cc.isEmpty();\n+        }\n+    }\n+\n+    /**\n+     * Log the number of servers skipped and if debugging is enabled list the server names\n+     *\n+     * @param servers the list of servers to log\n+     */\n+    public static void logSkippedMinions(List<MinionServer> servers) {\n+       log.warn(\"Skipping action for \" + servers.size() + \" minions.\");\n+       if (log.isDebugEnabled()) {\n+          String serverNames = servers.stream()\n+          .map(m -> m.getName())\n+          .collect(Collectors.joining(\",\"));\n+          log.debug(\"Skipped minion ids: \" + serverNames);\n+       }\n+    }\n+\n+    /**\n+     * Given a list of minions, sorts by maintenance mode status, logs skipped minions\n+     *\n+     * @param minions servers to check\n+     * @return List of minions in maintenance mode\n+     */\n+    public static List<Long> systemIdsMaintenanceMode(List<MinionServer> minions) {\n+        MaintenanceManager mm = MaintenanceManager.instance();\n+        Set<MaintenanceSchedule> schedulesInMaintMode = minions.stream()\n+            .flatMap(minion -> minion.getMaintenanceScheduleOpt().stream())\n+            .distinct()\n+            .filter(sched -> !mm.getCalendarForNow(sched).isEmpty())\n+            .collect(Collectors.toSet());\n+\n+        List<Long> minionsInMaintMode = minions.stream()\n+            .filter(minion -> minion.getMaintenanceScheduleOpt()\n+            .map(sched -> schedulesInMaintMode.contains(sched)) // keep minions that have maintenance mode\n+            .orElse(true)) // or that have no maintenance schedule whatsoever\n+            .map(minion -> minion.getId())\n+            .collect(toList());\n+\n+         List<MinionServer> logList = minions.stream()\n+                 .filter(m -> !minionsInMaintMode.contains(m))\n+                 .collect(Collectors.toList());\n+         logSkippedMinions(logList);\n+\n+         return minionsInMaintMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe2fd44f69b7653cf364ac5d8708369d39cee8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1MjQ1MA==", "bodyText": "Collectors are not used anymore. Remove the import please.", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r444752450", "createdAt": "2020-06-24T09:06:07Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/taskomatic/task/RecurringStateApplyJob.java", "diffHunk": "@@ -57,9 +58,8 @@ public void execute(JobExecutionContext context) throws JobExecutionException {\n     }\n \n     private void scheduleAction(JobExecutionContext context, RecurringAction action) {\n-        List<Long> minionIds = action.computeMinions().stream()\n-                .map(m -> m.getId())\n-                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe2fd44f69b7653cf364ac5d8708369d39cee8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1MzYzMw==", "bodyText": "There is still the problem with the potential NPEx. If the schedule does not have a calendar, it's the same as if it had a calendar with no events, the code should check for something like that:\n        return ms.getCalendarOpt()\n                .map(cal -> getScheduleEventsAtDate(new Date(), ms, parseCalendar(cal)))\n                .orElse(Collections.emptyList());", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r444753633", "createdAt": "2020-06-24T09:08:04Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -695,6 +696,57 @@ public boolean isActionInMaintenanceWindow(Action action, MaintenanceSchedule sc\n         return false;\n     }\n \n+    private Collection<CalendarComponent> getDateFromSchedule(MaintenanceSchedule ms) {\n+        return getScheduleEventsAtDate(new Date(), ms, parseCalendar(ms.getCalendarOpt().get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNDY4MA=="}, "originalCommit": {"oid": "c6d98795057285acb4e23515385eef31f1595151"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NTcwNg==", "bodyText": "Do you want to log names or ids? The message says ids, but you're logging names.", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r444755706", "createdAt": "2020-06-24T09:11:35Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -695,6 +696,71 @@ public boolean isActionInMaintenanceWindow(Action action, MaintenanceSchedule sc\n         return false;\n     }\n \n+    private Collection<CalendarComponent> getCalendarForNow(MaintenanceSchedule ms) {\n+        return getScheduleEventsAtDate(new Date(), ms, parseCalendar(ms.getCalendarOpt().get()));\n+    }\n+\n+    /**\n+     * Check if system is in maintenance mode\n+     *\n+     * @param server the server to check\n+     * @return true when the action is inside of a maintenance window, otherwise falsegg\n+     */\n+    public static boolean checkIfInMaintenanceMode(MinionServer server) {\n+        if (server.getMaintenanceScheduleOpt().isEmpty()) {\n+            return true;\n+        }\n+        else {\n+            MaintenanceManager mm = MaintenanceManager.instance();\n+            Collection<CalendarComponent> cc = mm.getCalendarForNow(server.getMaintenanceScheduleOpt().get());\n+            return !cc.isEmpty();\n+        }\n+    }\n+\n+    /**\n+     * Log the number of servers skipped and if debugging is enabled list the server names\n+     *\n+     * @param servers the list of servers to log\n+     */\n+    public static void logSkippedMinions(List<MinionServer> servers) {\n+       log.warn(\"Skipping action for \" + servers.size() + \" minions.\");\n+       if (log.isDebugEnabled()) {\n+          String serverNames = servers.stream()\n+          .map(m -> m.getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe2fd44f69b7653cf364ac5d8708369d39cee8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1ODY4OA==", "bodyText": "A proper way of doing this would be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (server.getMaintenanceScheduleOpt().isEmpty()) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        MaintenanceManager mm = MaintenanceManager.instance();\n          \n          \n            \n                        Collection<CalendarComponent> cc = mm.getCalendarForNow(server.getMaintenanceScheduleOpt().get());\n          \n          \n            \n                        return !cc.isEmpty();\n          \n          \n            \n                    }\n          \n          \n            \n                    return server.getMaintenanceScheduleOpt()\n          \n          \n            \n                            .map(sched -> !mm.getCalendarForNow(sched).isEmpty())\n          \n          \n            \n                            .orElse(true);", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r444758688", "createdAt": "2020-06-24T09:16:39Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -695,6 +696,71 @@ public boolean isActionInMaintenanceWindow(Action action, MaintenanceSchedule sc\n         return false;\n     }\n \n+    private Collection<CalendarComponent> getCalendarForNow(MaintenanceSchedule ms) {\n+        return getScheduleEventsAtDate(new Date(), ms, parseCalendar(ms.getCalendarOpt().get()));\n+    }\n+\n+    /**\n+     * Check if system is in maintenance mode\n+     *\n+     * @param server the server to check\n+     * @return true when the action is inside of a maintenance window, otherwise falsegg\n+     */\n+    public static boolean checkIfInMaintenanceMode(MinionServer server) {\n+        if (server.getMaintenanceScheduleOpt().isEmpty()) {\n+            return true;\n+        }\n+        else {\n+            MaintenanceManager mm = MaintenanceManager.instance();\n+            Collection<CalendarComponent> cc = mm.getCalendarForNow(server.getMaintenanceScheduleOpt().get());\n+            return !cc.isEmpty();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe2fd44f69b7653cf364ac5d8708369d39cee8"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19fe2fd44f69b7653cf364ac5d8708369d39cee8", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/19fe2fd44f69b7653cf364ac5d8708369d39cee8", "committedDate": "2020-06-24T06:53:48Z", "message": "update changelog"}, "afterCommit": {"oid": "b365b6ec7e2de9516e66a420ae3694b673df4df6", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b365b6ec7e2de9516e66a420ae3694b673df4df6", "committedDate": "2020-06-24T23:07:00Z", "message": "update changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b365b6ec7e2de9516e66a420ae3694b673df4df6", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b365b6ec7e2de9516e66a420ae3694b673df4df6", "committedDate": "2020-06-24T23:07:00Z", "message": "update changelog"}, "afterCommit": {"oid": "cb2f76506dddeffa69f5b686f4d3c540344643eb", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cb2f76506dddeffa69f5b686f4d3c540344643eb", "committedDate": "2020-06-24T23:21:17Z", "message": "update changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Mjc4MTQx", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-437278141", "createdAt": "2020-06-25T08:29:35Z", "commit": {"oid": "cb2f76506dddeffa69f5b686f4d3c540344643eb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODoyOTozNVrOGowr9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODoyOTozNVrOGowr9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5MzkxMQ==", "bodyText": "As mc and me said: there is a high risk of NPEx (schedule can exist without calendar, so the risk is pretty high). You can fix this using the code I pasted in my latest comment.", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r445393911", "createdAt": "2020-06-25T08:29:35Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -695,6 +696,57 @@ public boolean isActionInMaintenanceWindow(Action action, MaintenanceSchedule sc\n         return false;\n     }\n \n+    private Collection<CalendarComponent> getDateFromSchedule(MaintenanceSchedule ms) {\n+        return getScheduleEventsAtDate(new Date(), ms, parseCalendar(ms.getCalendarOpt().get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNDY4MA=="}, "originalCommit": {"oid": "c6d98795057285acb4e23515385eef31f1595151"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb2f76506dddeffa69f5b686f4d3c540344643eb", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cb2f76506dddeffa69f5b686f4d3c540344643eb", "committedDate": "2020-06-24T23:21:17Z", "message": "update changelog"}, "afterCommit": {"oid": "fbf32a9270949713e3b25bf2c3654f92ce284cdd", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fbf32a9270949713e3b25bf2c3654f92ce284cdd", "committedDate": "2020-06-26T06:41:46Z", "message": "update changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c085d601f11e4b47301fce0c3b3d6c80aaad006e", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c085d601f11e4b47301fce0c3b3d6c80aaad006e", "committedDate": "2020-06-29T09:14:55Z", "message": "foo"}, "afterCommit": {"oid": "7446c53afcf360c274ebd9f6352c546a572e45af", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7446c53afcf360c274ebd9f6352c546a572e45af", "committedDate": "2020-06-29T09:13:38Z", "message": "update changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODMyNjUx", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-439832651", "createdAt": "2020-06-30T09:22:39Z", "commit": {"oid": "7446c53afcf360c274ebd9f6352c546a572e45af"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToyMjozOVrOGqzvCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToyMjozOVrOGqzvCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0MTAwMQ==", "bodyText": "This should check the id presence, not the whole entity.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                             .filter(m -> !minionsInMaintMode.contains(m))\n          \n          \n            \n                             .filter(m -> !minionsInMaintMode.contains(m.getId()))", "url": "https://github.com/uyuni-project/uyuni/pull/2309#discussion_r447541001", "createdAt": "2020-06-30T09:22:39Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -777,6 +778,70 @@ public boolean isActionInMaintenanceWindow(Action action, MaintenanceSchedule sc\n         return false;\n     }\n \n+    private Collection<CalendarComponent> getCalendarForNow(MaintenanceSchedule ms) {\n+        return ms.getCalendarOpt()\n+                .map(cal -> getScheduleEventsAtDate(new Date(), ms, parseCalendar(cal)))\n+                .orElse(Collections.emptyList());\n+    }\n+\n+    /**\n+     * Check if system is in maintenance mode\n+     *\n+     * @param server the server to check\n+     * @return true when the action is inside of a maintenance window, otherwise falsegg\n+     */\n+    public static boolean checkIfInMaintenanceMode(MinionServer server) {\n+        MaintenanceManager mm = MaintenanceManager.instance();\n+        return server.getMaintenanceScheduleOpt()\n+                .map(schedule -> !mm.getCalendarForNow(schedule)\n+                .isEmpty())\n+                .orElse(true);\n+    }\n+\n+    /**\n+     * Log the number of servers skipped and if debugging is enabled list the server ids\n+     *\n+     * @param servers the list of servers to log\n+     */\n+    public static void logSkippedMinions(List<MinionServer> servers) {\n+       log.warn(\"Skipping action for \" + servers.size() + \" minions.\");\n+       if (log.isDebugEnabled()) {\n+          String serverNames = servers.stream()\n+          .map(m -> m.getId().toString())\n+          .collect(Collectors.joining(\",\"));\n+          log.debug(\"Skipped minion ids: \" + serverNames);\n+       }\n+    }\n+\n+    /**\n+     * Given a list of minions, sorts by maintenance mode status, logs skipped minions\n+     *\n+     * @param minions servers to check\n+     * @return List of minions in maintenance mode\n+     */\n+    public static List<Long> systemIdsMaintenanceMode(List<MinionServer> minions) {\n+        MaintenanceManager mm = MaintenanceManager.instance();\n+        Set<MaintenanceSchedule> schedulesInMaintMode = minions.stream()\n+                .flatMap(minion -> minion.getMaintenanceScheduleOpt().stream())\n+                .distinct()\n+                .filter(sched -> !mm.getCalendarForNow(sched).isEmpty())\n+                .collect(Collectors.toSet());\n+\n+        List<Long> minionsInMaintMode = minions.stream()\n+                .filter(minion -> minion.getMaintenanceScheduleOpt()\n+                .map(sched -> schedulesInMaintMode.contains(sched)) // keep minions that have maintenance mode\n+                .orElse(true)) // or that have no maintenance schedule whatsoever\n+                .map(minion -> minion.getId())\n+                .collect(toList());\n+\n+         List<MinionServer> logList = minions.stream()\n+                 .filter(m -> !minionsInMaintMode.contains(m))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7446c53afcf360c274ebd9f6352c546a572e45af"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bcd18a7f89d1ce2a7c78b90490d8a344e220181", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4bcd18a7f89d1ce2a7c78b90490d8a344e220181", "committedDate": "2020-06-30T09:40:00Z", "message": "Check if minion is in maintenance mode when running recurring actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2129ea8605dd61eba7b91377c16ecdbf8d32855", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b2129ea8605dd61eba7b91377c16ecdbf8d32855", "committedDate": "2020-06-30T09:40:00Z", "message": "update changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7446c53afcf360c274ebd9f6352c546a572e45af", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7446c53afcf360c274ebd9f6352c546a572e45af", "committedDate": "2020-06-29T09:13:38Z", "message": "update changelog"}, "afterCommit": {"oid": "b2129ea8605dd61eba7b91377c16ecdbf8d32855", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b2129ea8605dd61eba7b91377c16ecdbf8d32855", "committedDate": "2020-06-30T09:40:00Z", "message": "update changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODY1MDU4", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-439865058", "createdAt": "2020-06-30T10:03:37Z", "commit": {"oid": "b2129ea8605dd61eba7b91377c16ecdbf8d32855"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDQwMTA2", "url": "https://github.com/uyuni-project/uyuni/pull/2309#pullrequestreview-440040106", "createdAt": "2020-06-30T13:55:46Z", "commit": {"oid": "b2129ea8605dd61eba7b91377c16ecdbf8d32855"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1316, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}