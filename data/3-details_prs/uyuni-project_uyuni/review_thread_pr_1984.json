{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjkwNzMw", "number": 1984, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMjo1MlrODmTqhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDowNzowOFrODnZwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk0NjYzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/domain/action/virtualization/BaseVirtualizationPoolAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMjo1MlrOFzpkaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTo0NjoxNVrOFzuOqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMjc2MA==", "bodyText": "We have 2020 :-)", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r389702760", "createdAt": "2020-03-09T14:02:52Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/redhat/rhn/domain/action/virtualization/BaseVirtualizationPoolAction.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2019 SUSE LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738e045fd8af0832d8f44f15c85a69e112d820f6"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3OTExNA==", "bodyText": "oh right... old commit only now submitted for review. I'll fix them", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r389779114", "createdAt": "2020-03-09T15:46:15Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/action/virtualization/BaseVirtualizationPoolAction.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2019 SUSE LLC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMjc2MA=="}, "originalCommit": {"oid": "738e045fd8af0832d8f44f15c85a69e112d820f6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk0Nzg4OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/domain/action/virtualization/VirtualizationPoolRefreshAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMzowNFrOFzplPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMzowNFrOFzplPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMjk3NQ==", "bodyText": "2020", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r389702975", "createdAt": "2020-03-09T14:03:04Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/redhat/rhn/domain/action/virtualization/VirtualizationPoolRefreshAction.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Copyright (c) 2019 SUSE LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738e045fd8af0832d8f44f15c85a69e112d820f6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTM4NTc2OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/utils/gson/VirtualPoolBaseActionJson.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozNjozOFrOFzt1TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozNjozOFrOFzt1TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MjYyMA==", "bodyText": "2020", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r389772620", "createdAt": "2020-03-09T15:36:38Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/webui/utils/gson/VirtualPoolBaseActionJson.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2019 SUSE LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738e045fd8af0832d8f44f15c85a69e112d820f6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTM4ODk1OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/common/tables/rhnActionVirtPoolRefresh.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozNzoyOFrOFzt3dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTo0NjozNVrOFzuPng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MzE3Mg==", "bodyText": "2020 please :-)", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r389773172", "createdAt": "2020-03-09T15:37:28Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/common/tables/rhnActionVirtPoolRefresh.sql", "diffHunk": "@@ -0,0 +1,30 @@\n+--\n+-- Copyright (c) 2018 SUSE LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738e045fd8af0832d8f44f15c85a69e112d820f6"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3OTM1OA==", "bodyText": "that one is copy-paste... my bad", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r389779358", "createdAt": "2020-03-09T15:46:35Z", "author": {"login": "cbosdo"}, "path": "schema/spacewalk/common/tables/rhnActionVirtPoolRefresh.sql", "diffHunk": "@@ -0,0 +1,30 @@\n+--\n+-- Copyright (c) 2018 SUSE LLC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MzE3Mg=="}, "originalCommit": {"oid": "738e045fd8af0832d8f44f15c85a69e112d820f6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTM5MDY4OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/upgrade/susemanager-schema-4.1.3-to-susemanager-schema-4.1.4/006-rhnActionVirtPoolRefresh.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozNzo1OFrOFzt4oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozNzo1OFrOFzt4oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MzQ3Mg==", "bodyText": "2020", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r389773472", "createdAt": "2020-03-09T15:37:58Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/upgrade/susemanager-schema-4.1.3-to-susemanager-schema-4.1.4/006-rhnActionVirtPoolRefresh.sql", "diffHunk": "@@ -0,0 +1,29 @@\n+-- Copyright (c) 2019 SUSE LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738e045fd8af0832d8f44f15c85a69e112d820f6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTM5NDc2OnYy", "diffSide": "RIGHT", "path": "schema/spacewalk/upgrade/susemanager-schema-4.1.3-to-susemanager-schema-4.1.4/007-add_virt_pool_actions_rhnActionType.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozODo1NFrOFzt7IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozODo1NFrOFzt7IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3NDExMg==", "bodyText": "2020", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r389774112", "createdAt": "2020-03-09T15:38:54Z", "author": {"login": "mcalmer"}, "path": "schema/spacewalk/upgrade/susemanager-schema-4.1.3-to-susemanager-schema-4.1.4/007-add_virt_pool_actions_rhnActionType.sql", "diffHunk": "@@ -0,0 +1,19 @@\n+-- Copyright (c) 2019 SUSE LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738e045fd8af0832d8f44f15c85a69e112d820f6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjMwNzk0OnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/minkvm_guests.feature", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDowNDo1MFrOF0wTcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDowNDo1MFrOF0wTcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MTY4MA==", "bodyText": "Could be \"And\"", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r390861680", "createdAt": "2020-03-11T10:04:50Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/secondary/minkvm_guests.feature", "diffHunk": "@@ -194,6 +194,13 @@ Feature: Be able to manage KVM virtual machines via the GUI\n     And I click on \"Delete\" in \"Delete Guest\" modal\n     Then I should not see a \"test-vm2\" virtual machine on \"kvm_server\"\n \n+@virthost_kvm\n+  Scenario: Refresh a virtual storage pool for KVM\n+    Given I am on the \"Virtualization\" page of this \"kvm_server\"\n+    When I follow \"Storage\"\n+    And I click on \"Refresh\" in tree item \"test-pool0\"\n+    Then I wait until the tree item \"test-pool0\" has no sub-list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d2f629d96acccab7ef9ba360bf43a2846e9b91"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzI3Nzg2OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/domain/action/Action_legacyUser.hbm.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDozNDoxNVrOF05rmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDoyOTozNFrOF1Y-rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNTMyMw==", "bodyText": "I'm missing something: why are changes in this file needed?", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391015323", "createdAt": "2020-03-11T14:34:15Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/action/Action_legacyUser.hbm.xml", "diffHunk": "@@ -502,7 +510,8 @@ select {ra.*}\n             NULL as arch,\n             NULL as graphics_type,\n             NULL as remove_disks,\n-            NULL as remove_interfaces from dual) ra_11_\n+            NULL as remove_interfaces from dual) ra_11_,\n+    (select NULL as name from dual) ra_12_", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc9c2d38a1f45f20a01db24c9f5672a26fd71d12"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyODEwOQ==", "bodyText": "since it's adding a new Table and a new action object, we need those to map the two. Unless I have overlooked something since the beginning ;)", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391528109", "createdAt": "2020-03-12T10:29:34Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/action/Action_legacyUser.hbm.xml", "diffHunk": "@@ -502,7 +510,8 @@ select {ra.*}\n             NULL as arch,\n             NULL as graphics_type,\n             NULL as remove_disks,\n-            NULL as remove_interfaces from dual) ra_11_\n+            NULL as remove_interfaces from dual) ra_11_,\n+    (select NULL as name from dual) ra_12_", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNTMyMw=="}, "originalCommit": {"oid": "cc9c2d38a1f45f20a01db24c9f5672a26fd71d12"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjE5MDE3OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/virtualization/pools/list/pools-list.js", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODo1Njo0NVrOF1V4iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoyODowMlrOF1cixg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3NzM4NQ==", "bodyText": "Nitpick: Is there a reason for function definition syntax (const fn-name vs. function fn-name)?", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391477385", "createdAt": "2020-03-12T08:56:45Z", "author": {"login": "hustodemon"}, "path": "web/html/src/manager/virtualization/pools/list/pools-list.js", "diffHunk": "@@ -93,9 +97,42 @@ function FilteredTree(props: FilteredTreeProps) {\n }\n \n export function PoolsList(props: Props) {\n+  const [errors, setErrors] = React.useState([]);\n+\n+  const [actionsResults, setActionsResults] = useVirtNotification(errors, setErrors,\n+                                                                  props.serverId);\n+\n+  const actionCallback = (results: Object) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39232ff63117d0c6b4bfac87e3d1782b386dec4a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyOTg0MQ==", "bodyText": "nesting functions in functions seems weird, that's why I went the lambda way. I guess this is just cosmetic at this level.", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391529841", "createdAt": "2020-03-12T10:32:56Z", "author": {"login": "cbosdo"}, "path": "web/html/src/manager/virtualization/pools/list/pools-list.js", "diffHunk": "@@ -93,9 +97,42 @@ function FilteredTree(props: FilteredTreeProps) {\n }\n \n export function PoolsList(props: Props) {\n+  const [errors, setErrors] = React.useState([]);\n+\n+  const [actionsResults, setActionsResults] = useVirtNotification(errors, setErrors,\n+                                                                  props.serverId);\n+\n+  const actionCallback = (results: Object) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3NzM4NQ=="}, "originalCommit": {"oid": "39232ff63117d0c6b4bfac87e3d1782b386dec4a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4NjUwMg==", "bodyText": "Sure thing, it's only cosmetic. I was just curious :)", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391586502", "createdAt": "2020-03-12T12:28:02Z", "author": {"login": "hustodemon"}, "path": "web/html/src/manager/virtualization/pools/list/pools-list.js", "diffHunk": "@@ -93,9 +97,42 @@ function FilteredTree(props: FilteredTreeProps) {\n }\n \n export function PoolsList(props: Props) {\n+  const [errors, setErrors] = React.useState([]);\n+\n+  const [actionsResults, setActionsResults] = useVirtNotification(errors, setErrors,\n+                                                                  props.serverId);\n+\n+  const actionCallback = (results: Object) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3NzM4NQ=="}, "originalCommit": {"oid": "39232ff63117d0c6b4bfac87e3d1782b386dec4a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjI1NTk3OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOToxNzowNFrOF1WhQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDozMzozMlrOF1ZGuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4NzgwOA==", "bodyText": "Please also use the ./scripts/translation/fixmissingstrings.py script to add missing translations - just run it in the java/code/src/com/redhat/rhn/frontend/strings dir. Put the changes in a separate commit please. If you encounter issues with trailing spaces after having used that script, contact me :)", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391487808", "createdAt": "2020-03-12T09:17:04Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml", "diffHunk": "@@ -7076,6 +7076,12 @@ Follow this url to see the full list of inactive systems:\n           <context context-type=\"sourcefile\">com.redhat.rhn.domain.action.ActionFormatter.getActionType</context>\n         </context-group>\n       </trans-unit>\n+      <trans-unit id=\"virt.pool_refresh\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59b989cf6c63d985d544b25cd67d2e63c20bfda"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzMDE3MQ==", "bodyText": "oh, I didn't know about that. I'll do that then", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391530171", "createdAt": "2020-03-12T10:33:32Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml", "diffHunk": "@@ -7076,6 +7076,12 @@ Follow this url to see the full list of inactive systems:\n           <context context-type=\"sourcefile\">com.redhat.rhn.domain.action.ActionFormatter.getActionType</context>\n         </context-group>\n       </trans-unit>\n+      <trans-unit id=\"virt.pool_refresh\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4NzgwOA=="}, "originalCommit": {"oid": "b59b989cf6c63d985d544b25cd67d2e63c20bfda"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjMwNTgxOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/utils/SaltUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTozMjoxM1rOF1XAdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDozNjowNFrOF1ZLpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5NTc5OQ==", "bodyText": "How big is typically the job result (in case of both success and error)? (I suppose it's pretty small.)", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391495799", "createdAt": "2020-03-12T09:32:13Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/utils/SaltUtils.java", "diffHunk": "@@ -659,6 +660,12 @@ else if (action instanceof BaseVirtualizationAction) {\n             String key = result.keySet().iterator().next();\n             serverAction.setResultMsg(result.get(key).getAsJsonObject().get(\"comment\").getAsString());\n         }\n+        else if (action instanceof BaseVirtualizationPoolAction) {\n+            // Tell VirtNotifications that we got a pool action change, passing action\n+            VirtNotifications.spreadActionUpdate(action);\n+            // Intentionally don't get only the comment since the changes value could be interesting\n+            serverAction.setResultMsg(getJsonResultWithPrettyPrint(jsonResult));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166923f5bec17e34f96ca240b4018e12049e55d3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzMTQzMA==", "bodyText": "It's rather small here.", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391531430", "createdAt": "2020-03-12T10:36:04Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/utils/SaltUtils.java", "diffHunk": "@@ -659,6 +660,12 @@ else if (action instanceof BaseVirtualizationAction) {\n             String key = result.keySet().iterator().next();\n             serverAction.setResultMsg(result.get(key).getAsJsonObject().get(\"comment\").getAsString());\n         }\n+        else if (action instanceof BaseVirtualizationPoolAction) {\n+            // Tell VirtNotifications that we got a pool action change, passing action\n+            VirtNotifications.spreadActionUpdate(action);\n+            // Intentionally don't get only the comment since the changes value could be interesting\n+            serverAction.setResultMsg(getJsonResultWithPrettyPrint(jsonResult));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5NTc5OQ=="}, "originalCommit": {"oid": "166923f5bec17e34f96ca240b4018e12049e55d3"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjMzMjc4OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/virtualization/pools/list/pools-list.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo0MDowMlrOF1XRVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDozODozNVrOF1ZQzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwMDExOA==", "bodyText": "IIRC, the backing data for statuses is delivered by the hook (which it turn gets it from the websocket). I can see, that only the data about pool is \"spread\" to the websocket, nothing about volume. How is the backing data for volumes provided?", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391500118", "createdAt": "2020-03-12T09:40:02Z", "author": {"login": "hustodemon"}, "path": "web/html/src/manager/virtualization/pools/list/pools-list.js", "diffHunk": "@@ -174,6 +214,9 @@ export function PoolsList(props: Props) {\n                       <span>{t(\"Unknown\")}</span>\n                     }\n                   </CustomDiv>,\n+                  <CustomDiv key=\"actionStatus\" className=\"col\" width=\"calc(100% + 3em) * 0.05\" um=\"\">\n+                    {renderActionStatus('volume', volume.name)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39232ff63117d0c6b4bfac87e3d1782b386dec4a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzMjc1MA==", "bodyText": "Well, I'm handling that in the PR that adds the first pool action ;) But these are the same backing data, just the action ID in the actionResults is different.", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391532750", "createdAt": "2020-03-12T10:38:35Z", "author": {"login": "cbosdo"}, "path": "web/html/src/manager/virtualization/pools/list/pools-list.js", "diffHunk": "@@ -174,6 +214,9 @@ export function PoolsList(props: Props) {\n                       <span>{t(\"Unknown\")}</span>\n                     }\n                   </CustomDiv>,\n+                  <CustomDiv key=\"actionStatus\" className=\"col\" width=\"calc(100% + 3em) * 0.05\" um=\"\">\n+                    {renderActionStatus('volume', volume.name)}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwMDExOA=="}, "originalCommit": {"oid": "39232ff63117d0c6b4bfac87e3d1782b386dec4a"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjQzMTUxOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/controllers/VirtualPoolsController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDowNzowOFrOF1YOeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjozMzoxOFrOF1ctQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNTc3MA==", "bodyText": "I wonder about the behavior of the pool-refreshed.sls (and in turn of the virt.pool_refresh execution module as well) if the pool name is null. Does it refresh all pools/the default one/...?", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391515770", "createdAt": "2020-03-12T10:07:08Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/webui/controllers/VirtualPoolsController.java", "diffHunk": "@@ -220,4 +269,68 @@ private static ModelAndView renderPage(Request request, Response response, User\n \n         return new ModelAndView(data, String.format(\"templates/virtualization/pools/%s.jade\", template));\n     }\n+\n+    private static String poolAction(Request request, Response response, User user,\n+            Function<VirtualPoolBaseActionJson, BaseVirtualizationPoolAction> actionCreator) {\n+        return poolAction(request, response, user, actionCreator, VirtualPoolBaseActionJson.class);\n+    }\n+\n+    private static String poolAction(Request request, Response response, User user,\n+            Function<VirtualPoolBaseActionJson, BaseVirtualizationPoolAction> actionCreator,\n+            Class<? extends VirtualPoolBaseActionJson> jsonClass) {\n+        Long serverId;\n+\n+        try {\n+            serverId = Long.parseLong(request.params(\"sid\"));\n+        }\n+        catch (NumberFormatException e) {\n+            throw new NotFoundException();\n+        }\n+        Server host = SystemManager.lookupByIdAndUser(serverId, user);\n+\n+        VirtualPoolBaseActionJson data;\n+        try {\n+            data = GSON.fromJson(request.body(), jsonClass);\n+        }\n+        catch (JsonParseException e) {\n+            throw Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+        }\n+\n+        if (!data.getPoolNames().isEmpty()) {\n+            Map<String, String> actionsResults = data.getPoolNames().stream().collect(\n+                    Collectors.toMap(Function.identity(),\n+                poolName -> {\n+                    return scheduleAction(poolName, user, host, actionCreator, data);\n+                }\n+            ));\n+            return json(response, actionsResults);\n+        }\n+\n+        String result = scheduleAction(null, user, host, actionCreator, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bade3e08fc622c6f2e3829cb48ac5817617c4c02"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNjkyMg==", "bodyText": "That should not happen since the UI prevents that. But if that really happens, salt will happily pass it to libvirt which in turn will raise an exception.", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391536922", "createdAt": "2020-03-12T10:46:04Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/controllers/VirtualPoolsController.java", "diffHunk": "@@ -220,4 +269,68 @@ private static ModelAndView renderPage(Request request, Response response, User\n \n         return new ModelAndView(data, String.format(\"templates/virtualization/pools/%s.jade\", template));\n     }\n+\n+    private static String poolAction(Request request, Response response, User user,\n+            Function<VirtualPoolBaseActionJson, BaseVirtualizationPoolAction> actionCreator) {\n+        return poolAction(request, response, user, actionCreator, VirtualPoolBaseActionJson.class);\n+    }\n+\n+    private static String poolAction(Request request, Response response, User user,\n+            Function<VirtualPoolBaseActionJson, BaseVirtualizationPoolAction> actionCreator,\n+            Class<? extends VirtualPoolBaseActionJson> jsonClass) {\n+        Long serverId;\n+\n+        try {\n+            serverId = Long.parseLong(request.params(\"sid\"));\n+        }\n+        catch (NumberFormatException e) {\n+            throw new NotFoundException();\n+        }\n+        Server host = SystemManager.lookupByIdAndUser(serverId, user);\n+\n+        VirtualPoolBaseActionJson data;\n+        try {\n+            data = GSON.fromJson(request.body(), jsonClass);\n+        }\n+        catch (JsonParseException e) {\n+            throw Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+        }\n+\n+        if (!data.getPoolNames().isEmpty()) {\n+            Map<String, String> actionsResults = data.getPoolNames().stream().collect(\n+                    Collectors.toMap(Function.identity(),\n+                poolName -> {\n+                    return scheduleAction(poolName, user, host, actionCreator, data);\n+                }\n+            ));\n+            return json(response, actionsResults);\n+        }\n+\n+        String result = scheduleAction(null, user, host, actionCreator, data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNTc3MA=="}, "originalCommit": {"oid": "bade3e08fc622c6f2e3829cb48ac5817617c4c02"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4ODA0MA==", "bodyText": "In this case, why do we need this code here? Is this for other types of pool actions (in other PRs)?", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391588040", "createdAt": "2020-03-12T12:31:03Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/webui/controllers/VirtualPoolsController.java", "diffHunk": "@@ -220,4 +269,68 @@ private static ModelAndView renderPage(Request request, Response response, User\n \n         return new ModelAndView(data, String.format(\"templates/virtualization/pools/%s.jade\", template));\n     }\n+\n+    private static String poolAction(Request request, Response response, User user,\n+            Function<VirtualPoolBaseActionJson, BaseVirtualizationPoolAction> actionCreator) {\n+        return poolAction(request, response, user, actionCreator, VirtualPoolBaseActionJson.class);\n+    }\n+\n+    private static String poolAction(Request request, Response response, User user,\n+            Function<VirtualPoolBaseActionJson, BaseVirtualizationPoolAction> actionCreator,\n+            Class<? extends VirtualPoolBaseActionJson> jsonClass) {\n+        Long serverId;\n+\n+        try {\n+            serverId = Long.parseLong(request.params(\"sid\"));\n+        }\n+        catch (NumberFormatException e) {\n+            throw new NotFoundException();\n+        }\n+        Server host = SystemManager.lookupByIdAndUser(serverId, user);\n+\n+        VirtualPoolBaseActionJson data;\n+        try {\n+            data = GSON.fromJson(request.body(), jsonClass);\n+        }\n+        catch (JsonParseException e) {\n+            throw Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+        }\n+\n+        if (!data.getPoolNames().isEmpty()) {\n+            Map<String, String> actionsResults = data.getPoolNames().stream().collect(\n+                    Collectors.toMap(Function.identity(),\n+                poolName -> {\n+                    return scheduleAction(poolName, user, host, actionCreator, data);\n+                }\n+            ));\n+            return json(response, actionsResults);\n+        }\n+\n+        String result = scheduleAction(null, user, host, actionCreator, data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNTc3MA=="}, "originalCommit": {"oid": "bade3e08fc622c6f2e3829cb48ac5817617c4c02"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4OTE4Ng==", "bodyText": "yes it's for the other types of pool actions", "url": "https://github.com/uyuni-project/uyuni/pull/1984#discussion_r391589186", "createdAt": "2020-03-12T12:33:18Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/controllers/VirtualPoolsController.java", "diffHunk": "@@ -220,4 +269,68 @@ private static ModelAndView renderPage(Request request, Response response, User\n \n         return new ModelAndView(data, String.format(\"templates/virtualization/pools/%s.jade\", template));\n     }\n+\n+    private static String poolAction(Request request, Response response, User user,\n+            Function<VirtualPoolBaseActionJson, BaseVirtualizationPoolAction> actionCreator) {\n+        return poolAction(request, response, user, actionCreator, VirtualPoolBaseActionJson.class);\n+    }\n+\n+    private static String poolAction(Request request, Response response, User user,\n+            Function<VirtualPoolBaseActionJson, BaseVirtualizationPoolAction> actionCreator,\n+            Class<? extends VirtualPoolBaseActionJson> jsonClass) {\n+        Long serverId;\n+\n+        try {\n+            serverId = Long.parseLong(request.params(\"sid\"));\n+        }\n+        catch (NumberFormatException e) {\n+            throw new NotFoundException();\n+        }\n+        Server host = SystemManager.lookupByIdAndUser(serverId, user);\n+\n+        VirtualPoolBaseActionJson data;\n+        try {\n+            data = GSON.fromJson(request.body(), jsonClass);\n+        }\n+        catch (JsonParseException e) {\n+            throw Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+        }\n+\n+        if (!data.getPoolNames().isEmpty()) {\n+            Map<String, String> actionsResults = data.getPoolNames().stream().collect(\n+                    Collectors.toMap(Function.identity(),\n+                poolName -> {\n+                    return scheduleAction(poolName, user, host, actionCreator, data);\n+                }\n+            ));\n+            return json(response, actionsResults);\n+        }\n+\n+        String result = scheduleAction(null, user, host, actionCreator, data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNTc3MA=="}, "originalCommit": {"oid": "bade3e08fc622c6f2e3829cb48ac5817617c4c02"}, "originalPosition": 147}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 131, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}