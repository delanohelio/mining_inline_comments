{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNTI0MjMx", "number": 3048, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDozOToyOFrOFLTkkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo1NjoyMlrOFOo6IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzk5MzEzOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDozOToyOFrOIOZuWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNjozNjoxMlrOIPzbiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk3MjQ0Mw==", "bodyText": "Another nitpick:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Map.Entry<String, List<ValidatorError>> entry : result.getFieldErrors().entrySet()) {\n          \n          \n            \n                        String field = entry.getKey();\n          \n          \n            \n                        if (!getFieldErrors().containsKey(field)) {\n          \n          \n            \n                            getFieldErrors().put(field, new LinkedList());\n          \n          \n            \n                        }\n          \n          \n            \n                        getFieldErrors().get(field).addAll(entry.getValue());\n          \n          \n            \n                    }\n          \n          \n            \n                    result.getFieldErrors().forEach((field, valueList) ->\n          \n          \n            \n                            fieldValidationErrors.putIfAbsent(field, new LinkedList<>()).addAll(valueList));", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r551972443", "createdAt": "2021-01-05T14:39:28Z", "author": {"login": "cbbayburt"}, "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "diffHunk": "@@ -95,6 +130,13 @@ public void addWarning(String key, Object... args) {\n     public void append(ValidatorResult result) {\n         getErrors().addAll(result.getErrors());\n         getWarnings().addAll(result.getWarnings());\n+        for (Map.Entry<String, List<ValidatorError>> entry : result.getFieldErrors().entrySet()) {\n+            String field = entry.getKey();\n+            if (!getFieldErrors().containsKey(field)) {\n+                getFieldErrors().put(field, new LinkedList());\n+            }\n+            getFieldErrors().get(field).addAll(entry.getValue());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bd79ed5fce592a5b180813259261227e9813ad8"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ0MjE4NQ==", "bodyText": "Done", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r553442185", "createdAt": "2021-01-07T16:36:12Z", "author": {"login": "ricardoasmarques"}, "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "diffHunk": "@@ -95,6 +130,13 @@ public void addWarning(String key, Object... args) {\n     public void append(ValidatorResult result) {\n         getErrors().addAll(result.getErrors());\n         getWarnings().addAll(result.getWarnings());\n+        for (Map.Entry<String, List<ValidatorError>> entry : result.getFieldErrors().entrySet()) {\n+            String field = entry.getKey();\n+            if (!getFieldErrors().containsKey(field)) {\n+                getFieldErrors().put(field, new LinkedList());\n+            }\n+            getFieldErrors().get(field).addAll(entry.getValue());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk3MjQ0Mw=="}, "originalCommit": {"oid": "1bd79ed5fce592a5b180813259261227e9813ad8"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzk5Mzc3OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDozOTozNlrOIOZuuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNjo1NzoyNFrOIP0NsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk3MjUzNw==", "bodyText": "Just a nitpick:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!fieldValidationErrors.containsKey(field)) {\n          \n          \n            \n                        fieldValidationErrors.put(field, new LinkedList());\n          \n          \n            \n                    }\n          \n          \n            \n                    fieldValidationErrors.get(field).add(error);\n          \n          \n            \n                    fieldValidationErrors.putIfAbsent(field, new LinkedList()).add(error);", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r551972537", "createdAt": "2021-01-05T14:39:36Z", "author": {"login": "cbbayburt"}, "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "diffHunk": "@@ -50,6 +51,31 @@ public void addError(String key, Object... args) {\n         addError(new ValidatorError(key, args));\n     }\n \n+    /**\n+     * Add a ValidatorError to the list of field errors.\n+     *\n+     * @param field Field where the ValidatorError should be added.\n+     * @param error ValidatorError to be added.\n+     */\n+    public void addFieldError(String field, ValidatorError error) {\n+        if (!fieldValidationErrors.containsKey(field)) {\n+            fieldValidationErrors.put(field, new LinkedList());\n+        }\n+        fieldValidationErrors.get(field).add(error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bd79ed5fce592a5b180813259261227e9813ad8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ0MjA4Ng==", "bodyText": "Note that putIfAbsent will return null if the key does not exist yet.\nFrom Map docs:\n\nIf the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.\n\nFinal solution is a mix of original implementation and you proposal:\nfieldValidationErrors.putIfAbsent(field, new LinkedList());\nfieldValidationErrors.get(field).add(error);\n\nThanks", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r553442086", "createdAt": "2021-01-07T16:36:05Z", "author": {"login": "ricardoasmarques"}, "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "diffHunk": "@@ -50,6 +51,31 @@ public void addError(String key, Object... args) {\n         addError(new ValidatorError(key, args));\n     }\n \n+    /**\n+     * Add a ValidatorError to the list of field errors.\n+     *\n+     * @param field Field where the ValidatorError should be added.\n+     * @param error ValidatorError to be added.\n+     */\n+    public void addFieldError(String field, ValidatorError error) {\n+        if (!fieldValidationErrors.containsKey(field)) {\n+            fieldValidationErrors.put(field, new LinkedList());\n+        }\n+        fieldValidationErrors.get(field).add(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk3MjUzNw=="}, "originalCommit": {"oid": "1bd79ed5fce592a5b180813259261227e9813ad8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ1NTAyNA==", "bodyText": "Oh right, I overlooked that, good catch, thanks!", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r553455024", "createdAt": "2021-01-07T16:57:24Z", "author": {"login": "cbbayburt"}, "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "diffHunk": "@@ -50,6 +51,31 @@ public void addError(String key, Object... args) {\n         addError(new ValidatorError(key, args));\n     }\n \n+    /**\n+     * Add a ValidatorError to the list of field errors.\n+     *\n+     * @param field Field where the ValidatorError should be added.\n+     * @param error ValidatorError to be added.\n+     */\n+    public void addFieldError(String field, ValidatorError error) {\n+        if (!fieldValidationErrors.containsKey(field)) {\n+            fieldValidationErrors.put(field, new LinkedList());\n+        }\n+        fieldValidationErrors.get(field).add(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk3MjUzNw=="}, "originalCommit": {"oid": "1bd79ed5fce592a5b180813259261227e9813ad8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDAwMTk3OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDo0MTo1MVrOIOZ0Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNjozNjo1N1rOIPzdiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk3MzkyMg==", "bodyText": "You can also use: fieldValidationErrors.forEach((key, value) -> { ... }) here for simplicity", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r551973922", "createdAt": "2021-01-05T14:41:51Z", "author": {"login": "cbbayburt"}, "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "diffHunk": "@@ -110,6 +152,15 @@ public String getMessage() {\n             }\n \n         }\n+        if (!fieldValidationErrors.isEmpty()) {\n+            str.append(\"FIELD_ERRORS:\\n\");\n+            for (Map.Entry<String, List<ValidatorError>> entry : fieldValidationErrors.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bd79ed5fce592a5b180813259261227e9813ad8"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ0MjY5Ng==", "bodyText": "Done", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r553442696", "createdAt": "2021-01-07T16:36:57Z", "author": {"login": "ricardoasmarques"}, "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "diffHunk": "@@ -110,6 +152,15 @@ public String getMessage() {\n             }\n \n         }\n+        if (!fieldValidationErrors.isEmpty()) {\n+            str.append(\"FIELD_ERRORS:\\n\");\n+            for (Map.Entry<String, List<ValidatorError>> entry : fieldValidationErrors.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk3MzkyMg=="}, "originalCommit": {"oid": "1bd79ed5fce592a5b180813259261227e9813ad8"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODgyNjcyOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMToyMDo0NFrOITgViw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNTo1MzozNVrOIUh6WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMyMzY1OQ==", "bodyText": "IIUC getErrors().isEmpty() && getFieldErrors().isEmpty() is supposed to return the same check result of hasErrors(), then I'd reuse it instead.", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r557323659", "createdAt": "2021-01-14T11:20:44Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "diffHunk": "@@ -124,13 +169,13 @@ public String getMessage() {\n      * @return true if there are no errors or warnings..\n      */\n     public boolean isEmpty() {\n-        return getWarnings().isEmpty() && getErrors().isEmpty();\n+        return getWarnings().isEmpty() && getErrors().isEmpty() && getFieldErrors().isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9666f41adcb1d9b916bef9f4a6dc5125d911907d"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM5ODA0MA==", "bodyText": "Done", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r558398040", "createdAt": "2021-01-15T15:53:35Z", "author": {"login": "ricardoasmarques"}, "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "diffHunk": "@@ -124,13 +169,13 @@ public String getMessage() {\n      * @return true if there are no errors or warnings..\n      */\n     public boolean isEmpty() {\n-        return getWarnings().isEmpty() && getErrors().isEmpty();\n+        return getWarnings().isEmpty() && getErrors().isEmpty() && getFieldErrors().isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMyMzY1OQ=="}, "originalCommit": {"oid": "9666f41adcb1d9b916bef9f4a6dc5125d911907d"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODgyOTE3OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMToyMTozMVrOITgXJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNTo1Mzo1MlrOIUh7Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMyNDA3MA==", "bodyText": "Just for the sake of the logic and computation, feel free to use any of the alternatives or drop them:\na. return (getErrors().size() + getFieldErrors().size()) > 0\nb. return !getErrors().isEmpty() || !getFieldErrors().isEmpty()", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r557324070", "createdAt": "2021-01-14T11:21:31Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "diffHunk": "@@ -124,13 +169,13 @@ public String getMessage() {\n      * @return true if there are no errors or warnings..\n      */\n     public boolean isEmpty() {\n-        return getWarnings().isEmpty() && getErrors().isEmpty();\n+        return getWarnings().isEmpty() && getErrors().isEmpty() && getFieldErrors().isEmpty();\n     }\n \n     /**\n      * @return true if errors exist in this result.\n      */\n     public boolean hasErrors() {\n-        return getErrors().size() > 0;\n+        return getErrors().size() > 0 || getFieldErrors().size() > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9666f41adcb1d9b916bef9f4a6dc5125d911907d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM5ODIzMA==", "bodyText": "Done", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r558398230", "createdAt": "2021-01-15T15:53:52Z", "author": {"login": "ricardoasmarques"}, "path": "java/code/src/com/redhat/rhn/common/validator/ValidatorResult.java", "diffHunk": "@@ -124,13 +169,13 @@ public String getMessage() {\n      * @return true if there are no errors or warnings..\n      */\n     public boolean isEmpty() {\n-        return getWarnings().isEmpty() && getErrors().isEmpty();\n+        return getWarnings().isEmpty() && getErrors().isEmpty() && getFieldErrors().isEmpty();\n     }\n \n     /**\n      * @return true if errors exist in this result.\n      */\n     public boolean hasErrors() {\n-        return getErrors().size() > 0;\n+        return getErrors().size() > 0 || getFieldErrors().size() > 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMyNDA3MA=="}, "originalCommit": {"oid": "9666f41adcb1d9b916bef9f4a6dc5125d911907d"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODg2NTcwOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/controllers/contentmanagement/handlers/FilterApiController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTozMjozMlrOITgtsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNTo1NDowNVrOIUh7iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMyOTg0MA==", "bodyText": "Could it be you are missing the Java checkstyle configuration in your IDE? IIRC, for instance, static imports should stay on top of everything, I see your PR is changing the order in different files.\nIntelliJ configuration\nEclipse configuration", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r557329840", "createdAt": "2021-01-14T11:32:32Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/suse/manager/webui/controllers/contentmanagement/handlers/FilterApiController.java", "diffHunk": "@@ -30,23 +24,28 @@\n import com.redhat.rhn.domain.user.User;\n import com.redhat.rhn.manager.EntityExistsException;\n import com.redhat.rhn.manager.contentmgmt.ContentManager;\n-\n import com.suse.manager.webui.controllers.contentmanagement.request.FilterRequest;\n import com.suse.manager.webui.controllers.contentmanagement.request.ProjectFiltersUpdateRequest;\n import com.suse.manager.webui.utils.FlashScopeHelper;\n import com.suse.manager.webui.utils.gson.ResultJson;\n-\n-import com.google.gson.Gson;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.http.HttpStatus;\n+import spark.Request;\n+import spark.Response;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n-import spark.Request;\n-import spark.Response;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9666f41adcb1d9b916bef9f4a6dc5125d911907d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM5ODM0NA==", "bodyText": "Done", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r558398344", "createdAt": "2021-01-15T15:54:05Z", "author": {"login": "ricardoasmarques"}, "path": "java/code/src/com/suse/manager/webui/controllers/contentmanagement/handlers/FilterApiController.java", "diffHunk": "@@ -30,23 +24,28 @@\n import com.redhat.rhn.domain.user.User;\n import com.redhat.rhn.manager.EntityExistsException;\n import com.redhat.rhn.manager.contentmgmt.ContentManager;\n-\n import com.suse.manager.webui.controllers.contentmanagement.request.FilterRequest;\n import com.suse.manager.webui.controllers.contentmanagement.request.ProjectFiltersUpdateRequest;\n import com.suse.manager.webui.utils.FlashScopeHelper;\n import com.suse.manager.webui.utils.gson.ResultJson;\n-\n-import com.google.gson.Gson;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.http.HttpStatus;\n+import spark.Request;\n+import spark.Response;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n-import spark.Request;\n-import spark.Response;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMyOTg0MA=="}, "originalCommit": {"oid": "9666f41adcb1d9b916bef9f4a6dc5125d911907d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODk0NjI0OnYy", "diffSide": "RIGHT", "path": "web/html/src/components/input/InputBase.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo1NjoyMlrOITheew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNzowOTowMlrOIUkwzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0MjMzMQ==", "bodyText": "Does errors[0] mean we pick and show only the first of the validation errors for each field? It would be nicer to show all the related field validation issues at once, otherwise the user will attempt many times fixing one error at a time. Or am I missing something here?", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r557342331", "createdAt": "2021-01-14T11:56:22Z", "author": {"login": "ncounter"}, "path": "web/html/src/components/input/InputBase.js", "diffHunk": "@@ -110,10 +115,15 @@ export class InputBase extends React.Component<Props, State> {\n     return this.state.isValid;\n   }\n \n-  validate (value: string): void {\n+  validate (value: string, errors: Array<string>): void {\n     const results = [];\n     let isValid = true;\n \n+    const error = errors && errors.length > 0 ? errors[0] : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9666f41adcb1d9b916bef9f4a6dc5125d911907d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ0NDc0OA==", "bodyText": "@ncounter I've now pushed one commit that adds support for displaying multiple server-side errors per input field, please review it, thanks.", "url": "https://github.com/uyuni-project/uyuni/pull/3048#discussion_r558444748", "createdAt": "2021-01-15T17:09:02Z", "author": {"login": "ricardoasmarques"}, "path": "web/html/src/components/input/InputBase.js", "diffHunk": "@@ -110,10 +115,15 @@ export class InputBase extends React.Component<Props, State> {\n     return this.state.isValid;\n   }\n \n-  validate (value: string): void {\n+  validate (value: string, errors: Array<string>): void {\n     const results = [];\n     let isValid = true;\n \n+    const error = errors && errors.length > 0 ? errors[0] : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0MjMzMQ=="}, "originalCommit": {"oid": "9666f41adcb1d9b916bef9f4a6dc5125d911907d"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3824, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}