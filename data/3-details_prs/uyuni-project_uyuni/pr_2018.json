{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MTU3NDg5", "number": 2018, "title": "Recurring Actions XMLRPC API", "bodyText": "What does this PR change?\nAdd Recurring Action functionality to the XMLRPC API\nGUI diff\nNo difference.\n\n DONE\n\nDocumentation\n\n\nNo documentation needed: xmlrpc doc strings added\n\n\n DONE\n\n\nTest coverage\n\n\nUnit tests were added\n\n\n DONE\n\n\nLinks\nTracks SUSE/spacewalk#8260\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"ruby_rubocop\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-03-16T11:08:14Z", "url": "https://github.com/uyuni-project/uyuni/pull/2018", "merged": true, "mergeCommit": {"oid": "d8a07f1469269e05e679d2180d6a9cf7523a779d"}, "closed": true, "closedAt": "2020-03-24T09:59:51Z", "author": {"login": "parlt91"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOPDCdgBqjMxMzM0NjY2NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQvlqogBqjMxNTg4MTczMDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8aa4107473677ef7316c838c602da48b2453db1b", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8aa4107473677ef7316c838c602da48b2453db1b", "committedDate": "2020-03-16T10:59:59Z", "message": "Add support for listing recurring actions\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "995f300b919f3e5067383d9fad41d3760901cc2c", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/995f300b919f3e5067383d9fad41d3760901cc2c", "committedDate": "2020-03-16T14:32:20Z", "message": "Add recurring action creation\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MjgwMzc1", "url": "https://github.com/uyuni-project/uyuni/pull/2018#pullrequestreview-375280375", "createdAt": "2020-03-16T14:39:16Z", "commit": {"oid": "13219bc31e2e31d9a348de017c584af84612e529"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDozOToxNlrOF23XHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo0NjozOVrOF23sSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3NDQ2Mg==", "bodyText": "It's a good practice to throw a FaultException from the handlers. The FaultExceptions have an errorCode attribute, which can make it easier for the API consumers to reason about the error. For some well-known backend exceptions we even have their Fault counterparts. In case of listing recurring actions, it'd be good to catch the PermissionException and rethrow a PermissionCheckFailureException with correctly set cause.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r393074462", "createdAt": "2020-03-16T14:39:16Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/org/OrgHandler.java", "diffHunk": "@@ -868,4 +870,23 @@ public Integer setContentStaging(User loggedInUser, Integer orgId,\n \n         return 1;\n     }\n+\n+    /**\n+     * Return a list of recurring actions for the given organization.\n+     *\n+     * @param loggedInUser The current user\n+     * @param orgId id of the organization\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for the given organization.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param(\"int\", \"orgId\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<OrgRecurringAction> listRecurringActions(User loggedInUser, Integer orgId) {\n+        return RecurringActionManager.listOrgRecurringActions(orgId, loggedInUser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13219bc31e2e31d9a348de017c584af84612e529"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3ODQ0Ng==", "bodyText": "I think that displaying user login would be enough in this case (action.getCreator().getLogin()) as there is no need to display the whole user data (enabled flag, uppercase version of the login.). Displaying login only would also be consistent with other API endpoints.\nPlease change also the @xmlrpc.doc tag above.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r393078446", "createdAt": "2020-03-16T14:44:43Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/serializer/RecurringActionSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.serializer;\n+\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.frontend.xmlrpc.serializer.util.SerializerHelper;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+import redstone.xmlrpc.XmlRpcException;\n+import redstone.xmlrpc.XmlRpcSerializer;\n+\n+/**\n+ * Serializer for {@link com.redhat.rhn.domain.recurringactions.RecurringAction} class and subclasses\n+ *\n+ * @xmlrpc.doc\n+ * #struct(\"Recurring Action information\")\n+ *   #prop(\"string\", \"name\")\n+ *   #prop(\"int\", \"entityId\")\n+ *   #prop(\"string\", \"type\")\n+ *   #prop(\"string\", \"frequency\")\n+ *   #prop(\"string\", \"created\")\n+ *   #prop(\"UserImpl\", \"creator\")\n+ *   #prop(\"boolean\", \"testMode\")\n+ *   #prop(\"boolean\", \"active\")\n+ * #struct_end()\n+ */\n+public class RecurringActionSerializer extends RhnXmlRpcCustomSerializer {\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Class getSupportedClass() {\n+        return RecurringAction.class;\n+    }\n+\n+    @Override\n+    protected void doSerialize(Object obj, Writer writer, XmlRpcSerializer serializer)\n+            throws XmlRpcException, IOException {\n+        RecurringAction action = (RecurringAction) obj;\n+        SerializerHelper helper = new SerializerHelper(serializer);\n+\n+        helper.add(\"name\", action.getName());\n+        helper.add(\"entityId\", action.getEntityId());\n+        helper.add(\"type\", action.getType().toString());\n+        helper.add(\"frequency\", action.getCronExpr());\n+        helper.add(\"created\", action.getCreated());\n+        helper.add(\"creator\", action.getCreator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13219bc31e2e31d9a348de017c584af84612e529"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3OTUwMg==", "bodyText": "Same as in the OrgHandler.listRecurringActions.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r393079502", "createdAt": "2020-03-16T14:46:07Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/SystemHandler.java", "diffHunk": "@@ -7066,4 +7068,23 @@ public Long scheduleApplyHighstate(User loggedInUser, Integer sid, Date earliest\n     public TaskomaticApi getTaskomaticApi() {\n         return taskomaticApi;\n     }\n+\n+    /**\n+     * Return a list of recurring actions for a given system.\n+     *\n+     * @param loggedInUser The current user\n+     * @param sid the id of the system\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given system.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param(\"int\", \"server_id)\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<MinionRecurringAction> listRecurringActions(User loggedInUser, Integer sid) {\n+        return RecurringActionManager.listMinionRecurringActions(sid, loggedInUser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13219bc31e2e31d9a348de017c584af84612e529"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3OTY3NA==", "bodyText": "Same as in the OrgHandler.listRecurringActions.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r393079674", "createdAt": "2020-03-16T14:46:22Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/systemgroup/ServerGroupHandler.java", "diffHunk": "@@ -513,4 +515,23 @@ private ServerGroup lookup(Integer id, User user) {\n             throw new TaskomaticApiException(e.getMessage());\n         }\n     }\n+\n+    /**\n+     * Return a list of recurring actions for a given system group.\n+     *\n+     * @param loggedInUser The current user\n+     * @param systemGroupId the id of the system group\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given system group.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param(\"int\", \"systemGroupId\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<GroupRecurringAction> listRecurringActions(User loggedInUser, Integer systemGroupId) {\n+        return RecurringActionManager.listGroupRecurringActions(systemGroupId, loggedInUser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13219bc31e2e31d9a348de017c584af84612e529"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3OTg4Mw==", "bodyText": "Should be \"sid\".\nMoreover, if you want this to be a bit more user friendly, you can:\n\neither rename sid to something more auto-descriptive (serverId),\nor provide a description via param_desc (instead of the param): #param_desc(\"int\", \"sid\", \"Server ID\")", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r393079883", "createdAt": "2020-03-16T14:46:39Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/SystemHandler.java", "diffHunk": "@@ -7066,4 +7068,23 @@ public Long scheduleApplyHighstate(User loggedInUser, Integer sid, Date earliest\n     public TaskomaticApi getTaskomaticApi() {\n         return taskomaticApi;\n     }\n+\n+    /**\n+     * Return a list of recurring actions for a given system.\n+     *\n+     * @param loggedInUser The current user\n+     * @param sid the id of the system\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given system.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param(\"int\", \"server_id)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13219bc31e2e31d9a348de017c584af84612e529"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "995f300b919f3e5067383d9fad41d3760901cc2c", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/995f300b919f3e5067383d9fad41d3760901cc2c", "committedDate": "2020-03-16T14:32:20Z", "message": "Add recurring action creation\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "114e0fe781f85a64e040d787bbd77fe439971cc2", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/114e0fe781f85a64e040d787bbd77fe439971cc2", "committedDate": "2020-03-17T16:12:05Z", "message": "Add list recurring action by id\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "114e0fe781f85a64e040d787bbd77fe439971cc2", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/114e0fe781f85a64e040d787bbd77fe439971cc2", "committedDate": "2020-03-17T16:12:05Z", "message": "Add list recurring action by id\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "b9c72e360b9034172a71e8cde45cc668a34b8c48", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b9c72e360b9034172a71e8cde45cc668a34b8c48", "committedDate": "2020-03-17T17:33:14Z", "message": "Support deleting of actions\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a6db8581a02bc47813615041416e401ff06197f", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3a6db8581a02bc47813615041416e401ff06197f", "committedDate": "2020-03-18T07:13:05Z", "message": "Extract save method from create/update\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4ea16e3ebcee00b06fa4fc6027756690ce2b14ef", "committedDate": "2020-03-18T07:59:43Z", "message": "Extract save method from create/update\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NjgwODI2", "url": "https://github.com/uyuni-project/uyuni/pull/2018#pullrequestreview-376680826", "createdAt": "2020-03-18T09:15:30Z", "commit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxNTozMFrOF38GVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOTo0NDo0NFrOF39KyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMDY2Mg==", "bodyText": "It would be nice to mention the possible values MINION, GROUP, ORG. The docs are the only place where the user can see these values.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394200662", "createdAt": "2020-03-18T09:15:30Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNDgzNw==", "bodyText": "You can return the result here (and in the GROUP and ORG case) directly. This way you can get rid of breaks and the schedules variable.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394204837", "createdAt": "2020-03-18T09:22:37Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNTA5Ng==", "bodyText": "This looks like a C&P error.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394205096", "createdAt": "2020-03-18T09:23:05Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwODIzNQ==", "bodyText": "Nitpick: this should be actionId.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394208235", "createdAt": "2020-03-18T09:28:14Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxMDkwNg==", "bodyText": "This looks like improper use of Optional (accessing it and checking for NoSuchElementException).\nInstead of that, something like this could replace the whole method body:\nRecurringActionFactory.lookupById(actionId)\n    .filter(a -> a.canAccess(loggedInUser))\n    .orElseThrow(() -> new EntityNotExistsFaultException(\"Action blabla doesnt exist or is not accessible\"));", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394210906", "createdAt": "2020-03-18T09:32:25Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxMjIwMQ==", "bodyText": "entity_id should be passed as \"int\". This'd be better since the serializer returns the entity IDs as numbers (so that data returned from the list/lookup can be reused for creating/updating actions.).", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394212201", "createdAt": "2020-03-18T09:34:36Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {\n+            RecurringAction action = RecurringActionFactory.lookupById(actionId).orElseThrow();\n+            if (action.canAccess(loggedInUser)) {\n+                return action;\n+            }\n+        }\n+        catch (NoSuchElementException e) {\n+            throw new EntityNotExistsFaultException(\"Action with id: \" + actionId + \" does not exist\");\n+        }\n+        throw new PermissionCheckFailureException(\"Action not accessible to user: \" + loggedInUser);\n+    }\n+\n+    /**\n+     * Create a new recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing action properties\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Create a new recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"entity_type\", \"The type of the target entity\")\n+     *      #prop_desc(\"string\", \"entity_id\", \"The id of the target entity\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxMjM4MQ==", "bodyText": "Please also mention this that this field is optional.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394212381", "createdAt": "2020-03-18T09:34:54Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {\n+            RecurringAction action = RecurringActionFactory.lookupById(actionId).orElseThrow();\n+            if (action.canAccess(loggedInUser)) {\n+                return action;\n+            }\n+        }\n+        catch (NoSuchElementException e) {\n+            throw new EntityNotExistsFaultException(\"Action with id: \" + actionId + \" does not exist\");\n+        }\n+        throw new PermissionCheckFailureException(\"Action not accessible to user: \" + loggedInUser);\n+    }\n+\n+    /**\n+     * Create a new recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing action properties\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Create a new recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"entity_type\", \"The type of the target entity\")\n+     *      #prop_desc(\"string\", \"entity_id\", \"The id of the target entity\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxMjY2NA==", "bodyText": "The declaration could be moved to the initialization below.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394212664", "createdAt": "2020-03-18T09:35:25Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {\n+            RecurringAction action = RecurringActionFactory.lookupById(actionId).orElseThrow();\n+            if (action.canAccess(loggedInUser)) {\n+                return action;\n+            }\n+        }\n+        catch (NoSuchElementException e) {\n+            throw new EntityNotExistsFaultException(\"Action with id: \" + actionId + \" does not exist\");\n+        }\n+        throw new PermissionCheckFailureException(\"Action not accessible to user: \" + loggedInUser);\n+    }\n+\n+    /**\n+     * Create a new recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing action properties\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Create a new recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"entity_type\", \"The type of the target entity\")\n+     *      #prop_desc(\"string\", \"entity_id\", \"The id of the target entity\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_id - The action id of the recurring action\n+     */\n+    public Long create(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = createAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private RecurringAction createAction(Map<String, Object> actionProps, User user) {\n+        RecurringAction action;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxMzU5Ng==", "bodyText": "There is already a method for validating such props maps: validateMap. It's even inherited from the BaseHandler.\nI think it does precisely this, so you could simply write:\nvalidateMap(Set.of(\"id\", \"entity_type\", \"entity_id\", ...), actionProps);", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394213596", "createdAt": "2020-03-18T09:36:58Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {\n+            RecurringAction action = RecurringActionFactory.lookupById(actionId).orElseThrow();\n+            if (action.canAccess(loggedInUser)) {\n+                return action;\n+            }\n+        }\n+        catch (NoSuchElementException e) {\n+            throw new EntityNotExistsFaultException(\"Action with id: \" + actionId + \" does not exist\");\n+        }\n+        throw new PermissionCheckFailureException(\"Action not accessible to user: \" + loggedInUser);\n+    }\n+\n+    /**\n+     * Create a new recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing action properties\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Create a new recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"entity_type\", \"The type of the target entity\")\n+     *      #prop_desc(\"string\", \"entity_id\", \"The id of the target entity\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_id - The action id of the recurring action\n+     */\n+    public Long create(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = createAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private RecurringAction createAction(Map<String, Object> actionProps, User user) {\n+        RecurringAction action;\n+        if (actionProps.containsKey(\"id\") || !actionProps.containsKey(\"entity_type\") ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNDcyNQ==", "bodyText": "It'd be nice to catch the EntityNotExistsException here and translate it to its Fault counterpart.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394214725", "createdAt": "2020-03-18T09:38:55Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {\n+            RecurringAction action = RecurringActionFactory.lookupById(actionId).orElseThrow();\n+            if (action.canAccess(loggedInUser)) {\n+                return action;\n+            }\n+        }\n+        catch (NoSuchElementException e) {\n+            throw new EntityNotExistsFaultException(\"Action with id: \" + actionId + \" does not exist\");\n+        }\n+        throw new PermissionCheckFailureException(\"Action not accessible to user: \" + loggedInUser);\n+    }\n+\n+    /**\n+     * Create a new recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing action properties\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Create a new recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"entity_type\", \"The type of the target entity\")\n+     *      #prop_desc(\"string\", \"entity_id\", \"The id of the target entity\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_id - The action id of the recurring action\n+     */\n+    public Long create(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = createAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private RecurringAction createAction(Map<String, Object> actionProps, User user) {\n+        RecurringAction action;\n+        if (actionProps.containsKey(\"id\") || !actionProps.containsKey(\"entity_type\") ||\n+                !actionProps.containsKey(\"entity_id\") || !actionProps.containsKey(\"cron_expr\") ||\n+                !actionProps.containsKey(\"name\")) {\n+            throw new InvalidArgsException(\"Incomplete action props\");\n+        }\n+        action = RecurringActionManager.createRecurringAction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNTMwMA==", "bodyText": "If you pass the entity_id as \"int\" (see above), you can just do something like this ((Integer) actionProps.get(\"entity_id\")).longValue().", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394215300", "createdAt": "2020-03-18T09:39:59Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {\n+            RecurringAction action = RecurringActionFactory.lookupById(actionId).orElseThrow();\n+            if (action.canAccess(loggedInUser)) {\n+                return action;\n+            }\n+        }\n+        catch (NoSuchElementException e) {\n+            throw new EntityNotExistsFaultException(\"Action with id: \" + actionId + \" does not exist\");\n+        }\n+        throw new PermissionCheckFailureException(\"Action not accessible to user: \" + loggedInUser);\n+    }\n+\n+    /**\n+     * Create a new recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing action properties\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Create a new recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"entity_type\", \"The type of the target entity\")\n+     *      #prop_desc(\"string\", \"entity_id\", \"The id of the target entity\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_id - The action id of the recurring action\n+     */\n+    public Long create(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = createAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private RecurringAction createAction(Map<String, Object> actionProps, User user) {\n+        RecurringAction action;\n+        if (actionProps.containsKey(\"id\") || !actionProps.containsKey(\"entity_type\") ||\n+                !actionProps.containsKey(\"entity_id\") || !actionProps.containsKey(\"cron_expr\") ||\n+                !actionProps.containsKey(\"name\")) {\n+            throw new InvalidArgsException(\"Incomplete action props\");\n+        }\n+        action = RecurringActionManager.createRecurringAction(\n+                getEntityType((String) actionProps.get(\"entity_type\")),\n+                Long.parseLong((String) actionProps.get(\"entity_id\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNTYyMQ==", "bodyText": "Similar case as the entity_id: this should be \"int\".", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394215621", "createdAt": "2020-03-18T09:40:31Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {\n+            RecurringAction action = RecurringActionFactory.lookupById(actionId).orElseThrow();\n+            if (action.canAccess(loggedInUser)) {\n+                return action;\n+            }\n+        }\n+        catch (NoSuchElementException e) {\n+            throw new EntityNotExistsFaultException(\"Action with id: \" + actionId + \" does not exist\");\n+        }\n+        throw new PermissionCheckFailureException(\"Action not accessible to user: \" + loggedInUser);\n+    }\n+\n+    /**\n+     * Create a new recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing action properties\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Create a new recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"entity_type\", \"The type of the target entity\")\n+     *      #prop_desc(\"string\", \"entity_id\", \"The id of the target entity\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_id - The action id of the recurring action\n+     */\n+    public Long create(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = createAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private RecurringAction createAction(Map<String, Object> actionProps, User user) {\n+        RecurringAction action;\n+        if (actionProps.containsKey(\"id\") || !actionProps.containsKey(\"entity_type\") ||\n+                !actionProps.containsKey(\"entity_id\") || !actionProps.containsKey(\"cron_expr\") ||\n+                !actionProps.containsKey(\"name\")) {\n+            throw new InvalidArgsException(\"Incomplete action props\");\n+        }\n+        action = RecurringActionManager.createRecurringAction(\n+                getEntityType((String) actionProps.get(\"entity_type\")),\n+                Long.parseLong((String) actionProps.get(\"entity_id\")),\n+                user\n+        );\n+        action.setName((String) actionProps.get(\"name\"));\n+        action.setCronExpr((String) actionProps.get(\"cron_expr\"));\n+        if (actionProps.containsKey(\"test\")) {\n+            action.setTestMode(Boolean.parseBoolean(actionProps.get(\"test\").toString()));\n+        }\n+        return action;\n+    }\n+\n+    /**\n+     * Update a recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing properties to update\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Update a recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"id\", \"The id of the action to update\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNjc5Ng==", "bodyText": "The action_Id looks a bit weird. But anyway: neither type, nor name is needed here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @xmlrpc.returntype int action_Id - The action id of the recurring action\n          \n          \n            \n                 * @xmlrpc.returntype The id of the recurring action", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394216796", "createdAt": "2020-03-18T09:42:26Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {\n+            RecurringAction action = RecurringActionFactory.lookupById(actionId).orElseThrow();\n+            if (action.canAccess(loggedInUser)) {\n+                return action;\n+            }\n+        }\n+        catch (NoSuchElementException e) {\n+            throw new EntityNotExistsFaultException(\"Action with id: \" + actionId + \" does not exist\");\n+        }\n+        throw new PermissionCheckFailureException(\"Action not accessible to user: \" + loggedInUser);\n+    }\n+\n+    /**\n+     * Create a new recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing action properties\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Create a new recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"entity_type\", \"The type of the target entity\")\n+     *      #prop_desc(\"string\", \"entity_id\", \"The id of the target entity\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_id - The action id of the recurring action\n+     */\n+    public Long create(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = createAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private RecurringAction createAction(Map<String, Object> actionProps, User user) {\n+        RecurringAction action;\n+        if (actionProps.containsKey(\"id\") || !actionProps.containsKey(\"entity_type\") ||\n+                !actionProps.containsKey(\"entity_id\") || !actionProps.containsKey(\"cron_expr\") ||\n+                !actionProps.containsKey(\"name\")) {\n+            throw new InvalidArgsException(\"Incomplete action props\");\n+        }\n+        action = RecurringActionManager.createRecurringAction(\n+                getEntityType((String) actionProps.get(\"entity_type\")),\n+                Long.parseLong((String) actionProps.get(\"entity_id\")),\n+                user\n+        );\n+        action.setName((String) actionProps.get(\"name\"));\n+        action.setCronExpr((String) actionProps.get(\"cron_expr\"));\n+        if (actionProps.containsKey(\"test\")) {\n+            action.setTestMode(Boolean.parseBoolean(actionProps.get(\"test\").toString()));\n+        }\n+        return action;\n+    }\n+\n+    /**\n+     * Update a recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing properties to update\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Update a recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"id\", \"The id of the action to update\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action (optional)\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action (optional)\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode (optional)\")\n+     *      #prop_desc(\"boolean\", \"active\", \"Whether the action should be active (optional)\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_Id - The action id of the recurring action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNzIzMg==", "bodyText": "Similar as entity_id, this could be typecast as Integer.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394217232", "createdAt": "2020-03-18T09:43:09Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {\n+            RecurringAction action = RecurringActionFactory.lookupById(actionId).orElseThrow();\n+            if (action.canAccess(loggedInUser)) {\n+                return action;\n+            }\n+        }\n+        catch (NoSuchElementException e) {\n+            throw new EntityNotExistsFaultException(\"Action with id: \" + actionId + \" does not exist\");\n+        }\n+        throw new PermissionCheckFailureException(\"Action not accessible to user: \" + loggedInUser);\n+    }\n+\n+    /**\n+     * Create a new recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing action properties\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Create a new recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"entity_type\", \"The type of the target entity\")\n+     *      #prop_desc(\"string\", \"entity_id\", \"The id of the target entity\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_id - The action id of the recurring action\n+     */\n+    public Long create(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = createAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private RecurringAction createAction(Map<String, Object> actionProps, User user) {\n+        RecurringAction action;\n+        if (actionProps.containsKey(\"id\") || !actionProps.containsKey(\"entity_type\") ||\n+                !actionProps.containsKey(\"entity_id\") || !actionProps.containsKey(\"cron_expr\") ||\n+                !actionProps.containsKey(\"name\")) {\n+            throw new InvalidArgsException(\"Incomplete action props\");\n+        }\n+        action = RecurringActionManager.createRecurringAction(\n+                getEntityType((String) actionProps.get(\"entity_type\")),\n+                Long.parseLong((String) actionProps.get(\"entity_id\")),\n+                user\n+        );\n+        action.setName((String) actionProps.get(\"name\"));\n+        action.setCronExpr((String) actionProps.get(\"cron_expr\"));\n+        if (actionProps.containsKey(\"test\")) {\n+            action.setTestMode(Boolean.parseBoolean(actionProps.get(\"test\").toString()));\n+        }\n+        return action;\n+    }\n+\n+    /**\n+     * Update a recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing properties to update\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Update a recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"id\", \"The id of the action to update\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action (optional)\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action (optional)\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode (optional)\")\n+     *      #prop_desc(\"boolean\", \"active\", \"Whether the action should be active (optional)\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_Id - The action id of the recurring action\n+     */\n+    public Long update(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = updateAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private  RecurringAction updateAction(Map<String, Object> actionProps, User user) {\n+        if (!actionProps.containsKey(\"id\")) {\n+            throw new InvalidArgsException(\"No action id provided\");\n+        }\n+        Integer id = Integer.parseInt((String) actionProps.get(\"id\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODA4MQ==", "bodyText": "I've just checked and it seems that this line is not needed. The XMLRPC backend seems not to swallow certain exceptions (the UI does it, apparently), so if we just rethrow the exception on the line below, the transaction will be rolled back automatically :)", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394218081", "createdAt": "2020-03-18T09:44:33Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {\n+            RecurringAction action = RecurringActionFactory.lookupById(actionId).orElseThrow();\n+            if (action.canAccess(loggedInUser)) {\n+                return action;\n+            }\n+        }\n+        catch (NoSuchElementException e) {\n+            throw new EntityNotExistsFaultException(\"Action with id: \" + actionId + \" does not exist\");\n+        }\n+        throw new PermissionCheckFailureException(\"Action not accessible to user: \" + loggedInUser);\n+    }\n+\n+    /**\n+     * Create a new recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing action properties\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Create a new recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"entity_type\", \"The type of the target entity\")\n+     *      #prop_desc(\"string\", \"entity_id\", \"The id of the target entity\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_id - The action id of the recurring action\n+     */\n+    public Long create(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = createAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private RecurringAction createAction(Map<String, Object> actionProps, User user) {\n+        RecurringAction action;\n+        if (actionProps.containsKey(\"id\") || !actionProps.containsKey(\"entity_type\") ||\n+                !actionProps.containsKey(\"entity_id\") || !actionProps.containsKey(\"cron_expr\") ||\n+                !actionProps.containsKey(\"name\")) {\n+            throw new InvalidArgsException(\"Incomplete action props\");\n+        }\n+        action = RecurringActionManager.createRecurringAction(\n+                getEntityType((String) actionProps.get(\"entity_type\")),\n+                Long.parseLong((String) actionProps.get(\"entity_id\")),\n+                user\n+        );\n+        action.setName((String) actionProps.get(\"name\"));\n+        action.setCronExpr((String) actionProps.get(\"cron_expr\"));\n+        if (actionProps.containsKey(\"test\")) {\n+            action.setTestMode(Boolean.parseBoolean(actionProps.get(\"test\").toString()));\n+        }\n+        return action;\n+    }\n+\n+    /**\n+     * Update a recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing properties to update\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Update a recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"id\", \"The id of the action to update\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action (optional)\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action (optional)\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode (optional)\")\n+     *      #prop_desc(\"boolean\", \"active\", \"Whether the action should be active (optional)\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_Id - The action id of the recurring action\n+     */\n+    public Long update(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = updateAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private  RecurringAction updateAction(Map<String, Object> actionProps, User user) {\n+        if (!actionProps.containsKey(\"id\")) {\n+            throw new InvalidArgsException(\"No action id provided\");\n+        }\n+        Integer id = Integer.parseInt((String) actionProps.get(\"id\"));\n+        RecurringAction action = lookupById(user, id);\n+\n+        if (actionProps.containsKey(\"name\")) {\n+            action.setName((String) actionProps.get(\"name\"));\n+        }\n+        if (actionProps.containsKey(\"cron_expr\")) {\n+            action.setCronExpr((String) actionProps.get(\"cron_expr\"));\n+        }\n+        if (actionProps.containsKey(\"test\")) {\n+            action.setTestMode(Boolean.parseBoolean(actionProps.get(\"test\").toString()));\n+        }\n+        if (actionProps.containsKey(\"active\")) {\n+            action.setActive(Boolean.parseBoolean(actionProps.get(\"active\").toString()));\n+        }\n+        return action;\n+    }\n+\n+    /* Helper method */\n+    private Long save(User loggedInUser, RecurringAction action) {\n+        try {\n+            RecurringActionManager.saveAndSchedule(action, loggedInUser);\n+        }\n+        catch (ValidatorException e) {\n+            throw new ValidationException(e.getMessage());\n+        }\n+        catch (com.redhat.rhn.taskomatic.TaskomaticApiException e) {\n+            HibernateFactory.rollbackTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODE4NQ==", "bodyText": "Same as above ^^^.", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r394218185", "createdAt": "2020-03-18T09:44:44Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/recurringaction/RecurringActionHandler.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.recurringaction;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.common.security.PermissionException;\n+import com.redhat.rhn.common.validator.ValidatorException;\n+import com.redhat.rhn.domain.recurringactions.RecurringAction;\n+import com.redhat.rhn.domain.recurringactions.RecurringActionFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+import com.redhat.rhn.frontend.xmlrpc.InvalidArgsException;\n+import com.redhat.rhn.frontend.xmlrpc.PermissionCheckFailureException;\n+import com.redhat.rhn.frontend.xmlrpc.TaskomaticApiException;\n+import com.redhat.rhn.frontend.xmlrpc.ValidationException;\n+import com.redhat.rhn.manager.recurringactions.RecurringActionManager;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+public class RecurringActionHandler extends BaseHandler {\n+\n+    /* helper method */\n+    private RecurringAction.Type getEntityType(String entityType) {\n+        try {\n+            return RecurringAction.Type.valueOf(entityType.toUpperCase());\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new InvalidArgsException(\"Type \\\"\" + entityType + \"\\\" does not exist\");\n+        }\n+    }\n+\n+    /**\n+     * Return a list of recurring actions for a given entity.\n+     *\n+     * @param loggedInUser The current user\n+     * @param entityId the id of the entity\n+     * @param entityType type of the entity\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return a list of recurring actions for a given entity.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"entityType\", \"Type of the target entity\")\n+     * @xmlrpc.param #param_desc(\"int\", \"entityId\", \"Id of the target entity\")\n+     * @xmlrpc.returntype\n+     *      #array()\n+     *          $RecurringActionSerializer\n+     *      #array_end()\n+     */\n+    public List<? extends RecurringAction> listByEntity(User loggedInUser, String entityType, Integer entityId) {\n+        List<? extends RecurringAction> schedules;\n+        try {\n+            switch (getEntityType(entityType)) {\n+                case MINION:\n+                    schedules = RecurringActionManager.listMinionRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case GROUP:\n+                    schedules = RecurringActionManager.listGroupRecurringActions(entityId, loggedInUser);\n+                    break;\n+                case ORG:\n+                    schedules = RecurringActionManager.listOrgRecurringActions(entityId, loggedInUser);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unsupported type \" + entityType);\n+            }\n+            return schedules;\n+        }\n+        catch (PermissionException e) {\n+            throw new PermissionCheckFailureException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Return recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return the list of recurring actions\n+     *\n+     * @xmlrpc.doc Return recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype $RecurringActionSerializer\n+     */\n+    public RecurringAction lookupById(User loggedInUser, Integer actionId) {\n+        try {\n+            RecurringAction action = RecurringActionFactory.lookupById(actionId).orElseThrow();\n+            if (action.canAccess(loggedInUser)) {\n+                return action;\n+            }\n+        }\n+        catch (NoSuchElementException e) {\n+            throw new EntityNotExistsFaultException(\"Action with id: \" + actionId + \" does not exist\");\n+        }\n+        throw new PermissionCheckFailureException(\"Action not accessible to user: \" + loggedInUser);\n+    }\n+\n+    /**\n+     * Create a new recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing action properties\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Create a new recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"entity_type\", \"The type of the target entity\")\n+     *      #prop_desc(\"string\", \"entity_id\", \"The id of the target entity\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_id - The action id of the recurring action\n+     */\n+    public Long create(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = createAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private RecurringAction createAction(Map<String, Object> actionProps, User user) {\n+        RecurringAction action;\n+        if (actionProps.containsKey(\"id\") || !actionProps.containsKey(\"entity_type\") ||\n+                !actionProps.containsKey(\"entity_id\") || !actionProps.containsKey(\"cron_expr\") ||\n+                !actionProps.containsKey(\"name\")) {\n+            throw new InvalidArgsException(\"Incomplete action props\");\n+        }\n+        action = RecurringActionManager.createRecurringAction(\n+                getEntityType((String) actionProps.get(\"entity_type\")),\n+                Long.parseLong((String) actionProps.get(\"entity_id\")),\n+                user\n+        );\n+        action.setName((String) actionProps.get(\"name\"));\n+        action.setCronExpr((String) actionProps.get(\"cron_expr\"));\n+        if (actionProps.containsKey(\"test\")) {\n+            action.setTestMode(Boolean.parseBoolean(actionProps.get(\"test\").toString()));\n+        }\n+        return action;\n+    }\n+\n+    /**\n+     * Update a recurring action.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionProps Map containing properties to update\n+     * @return action id or exception thrown otherwise\n+     *\n+     * @xmlrpc.doc Update a recurring action.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param\n+     *  #struct(\"actionProps\")\n+     *      #prop_desc(\"string\", \"id\", \"The id of the action to update\")\n+     *      #prop_desc(\"string\", \"name\", \"The name of the action (optional)\")\n+     *      #prop_desc(\"string\", \"cron_expr\", \"The execution frequency of the action (optional)\")\n+     *      #prop_desc(\"boolean\", \"test\", \"Whether the action should be executed in test mode (optional)\")\n+     *      #prop_desc(\"boolean\", \"active\", \"Whether the action should be active (optional)\")\n+     *  #struct_end()\n+     * @xmlrpc.returntype int action_Id - The action id of the recurring action\n+     */\n+    public Long update(User loggedInUser, Map<String, Object> actionProps) {\n+        RecurringAction action = updateAction(actionProps, loggedInUser);\n+        return save(loggedInUser, action);\n+    }\n+\n+    /* Helper method */\n+    private  RecurringAction updateAction(Map<String, Object> actionProps, User user) {\n+        if (!actionProps.containsKey(\"id\")) {\n+            throw new InvalidArgsException(\"No action id provided\");\n+        }\n+        Integer id = Integer.parseInt((String) actionProps.get(\"id\"));\n+        RecurringAction action = lookupById(user, id);\n+\n+        if (actionProps.containsKey(\"name\")) {\n+            action.setName((String) actionProps.get(\"name\"));\n+        }\n+        if (actionProps.containsKey(\"cron_expr\")) {\n+            action.setCronExpr((String) actionProps.get(\"cron_expr\"));\n+        }\n+        if (actionProps.containsKey(\"test\")) {\n+            action.setTestMode(Boolean.parseBoolean(actionProps.get(\"test\").toString()));\n+        }\n+        if (actionProps.containsKey(\"active\")) {\n+            action.setActive(Boolean.parseBoolean(actionProps.get(\"active\").toString()));\n+        }\n+        return action;\n+    }\n+\n+    /* Helper method */\n+    private Long save(User loggedInUser, RecurringAction action) {\n+        try {\n+            RecurringActionManager.saveAndSchedule(action, loggedInUser);\n+        }\n+        catch (ValidatorException e) {\n+            throw new ValidationException(e.getMessage());\n+        }\n+        catch (com.redhat.rhn.taskomatic.TaskomaticApiException e) {\n+            HibernateFactory.rollbackTransaction();\n+            throw new TaskomaticApiException(e.getMessage());\n+        }\n+        return action.getId();\n+    }\n+\n+    /**\n+     * Delete recurring action with given action id.\n+     *\n+     * @param loggedInUser The current user\n+     * @param actionId id of the action\n+     * @return id of deleted action otherwise exception thrown\n+     *\n+     * @xmlrpc.doc Delete recurring action with given action id.\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"int\", \"action_id\", \"Id of the action\")\n+     * @xmlrpc.returntype int action_id - The action id of the recurring action\n+     */\n+    public Long delete(User loggedInUser, Integer actionId) {\n+        RecurringAction action = lookupById(loggedInUser, actionId);\n+        try {\n+            RecurringActionManager.deleteAndUnschedule(action, loggedInUser);\n+        }\n+        catch (com.redhat.rhn.taskomatic.TaskomaticApiException e) {\n+            HibernateFactory.rollbackTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea16e3ebcee00b06fa4fc6027756690ce2b14ef"}, "originalPosition": 238}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6792a94cac6ae9c138cf19b230a4567477702be4", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6792a94cac6ae9c138cf19b230a4567477702be4", "committedDate": "2020-03-18T12:00:30Z", "message": "Add requested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "7a80860ecd6c852580233c9a46101511319cb544", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7a80860ecd6c852580233c9a46101511319cb544", "committedDate": "2020-03-18T12:03:19Z", "message": "Add requested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef6ffeb187adc0685d519283e24579840b0eb451", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ef6ffeb187adc0685d519283e24579840b0eb451", "committedDate": "2020-03-19T09:40:51Z", "message": "Recurring Actions: Test for XMLRPC handler and Web controller"}, "afterCommit": {"oid": "dff197fd073d2f9ba6312fc398092e2d77d96f17", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/dff197fd073d2f9ba6312fc398092e2d77d96f17", "committedDate": "2020-03-19T09:42:47Z", "message": "Recurring Actions: Test for XMLRPC handler and Web controller"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzAwMjgy", "url": "https://github.com/uyuni-project/uyuni/pull/2018#pullrequestreview-377700282", "createdAt": "2020-03-19T13:08:07Z", "commit": {"oid": "01ecc69454c749ccb766958b14374f9654a6f0db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowODowN1rOF4tkGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowODowN1rOF4tkGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMTA5OA==", "bodyText": "I really like this approach a lot more \ud83d\udc4d", "url": "https://github.com/uyuni-project/uyuni/pull/2018#discussion_r395011098", "createdAt": "2020-03-19T13:08:07Z", "author": {"login": "parlt91"}, "path": "java/code/src/com/suse/manager/webui/controllers/RecurringActionController.java", "diffHunk": "@@ -193,8 +193,8 @@ public static String save(Request request, Response response, User user) {\n         RecurringStateScheduleJson json = GSON.fromJson(request.body(), RecurringStateScheduleJson.class);\n \n         try {\n-            validate(json, user);\n             RecurringAction action = createOrGetAction(user, json);\n+            RecurringActionFactory.getSession().evict(action); // entity -> detached, prevent hibernate flushes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ecc69454c749ccb766958b14374f9654a6f0db"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7445ca3ea5883f6692d9f15cca2d15ad263480f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d7445ca3ea5883f6692d9f15cca2d15ad263480f", "committedDate": "2020-03-19T09:46:08Z", "message": "Fix checkstyle"}, "afterCommit": {"oid": "f93373422dda35d746c6973957ccfd9244df13e4", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f93373422dda35d746c6973957ccfd9244df13e4", "committedDate": "2020-03-20T07:52:11Z", "message": "Fix checkstyle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f93373422dda35d746c6973957ccfd9244df13e4", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f93373422dda35d746c6973957ccfd9244df13e4", "committedDate": "2020-03-20T07:52:11Z", "message": "Fix checkstyle"}, "afterCommit": {"oid": "e32bd0e8595ed60fdf10a16e5cc4bb370e1abfb2", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e32bd0e8595ed60fdf10a16e5cc4bb370e1abfb2", "committedDate": "2020-03-23T10:16:55Z", "message": "Fix checkstyle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbbe48217f548cc2b5c48fe2e981dcad9fb8da81", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/dbbe48217f548cc2b5c48fe2e981dcad9fb8da81", "committedDate": "2020-03-23T14:31:02Z", "message": "Add changelog\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "a95563bf4224512e26129ae139c0fbd72f909601", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a95563bf4224512e26129ae139c0fbd72f909601", "committedDate": "2020-03-23T14:33:36Z", "message": "Add changelog\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTA0MTQ1", "url": "https://github.com/uyuni-project/uyuni/pull/2018#pullrequestreview-379504145", "createdAt": "2020-03-23T14:51:13Z", "commit": {"oid": "a95563bf4224512e26129ae139c0fbd72f909601"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a95563bf4224512e26129ae139c0fbd72f909601", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a95563bf4224512e26129ae139c0fbd72f909601", "committedDate": "2020-03-23T14:33:36Z", "message": "Add changelog\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "b55438dbd1e7a1a5752958c4f713d55c83d22a2a", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b55438dbd1e7a1a5752958c4f713d55c83d22a2a", "committedDate": "2020-03-23T14:51:37Z", "message": "Add changelog\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4035ec10ff71837a1ad05c55b826b6a6083cac6d", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4035ec10ff71837a1ad05c55b826b6a6083cac6d", "committedDate": "2020-03-24T09:34:57Z", "message": "Add RecurringActionSerializer\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d807d2f3e1b727c40f90517c1d1d1f7b0a65c3a2", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d807d2f3e1b727c40f90517c1d1d1f7b0a65c3a2", "committedDate": "2020-03-24T09:34:57Z", "message": "Add RecurringActionHandler\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca7f7e0fc6a1a6e05564fe7a571e53a04b453f6c", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ca7f7e0fc6a1a6e05564fe7a571e53a04b453f6c", "committedDate": "2020-03-24T09:34:57Z", "message": "Add listing actions by entity\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33f308b9b0f4677a25d267bef212243d20556f49", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/33f308b9b0f4677a25d267bef212243d20556f49", "committedDate": "2020-03-24T09:34:57Z", "message": "Create new action for given entity\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4be8d41265be6f1167b543fa5537b3da91fe494", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c4be8d41265be6f1167b543fa5537b3da91fe494", "committedDate": "2020-03-24T09:34:57Z", "message": "Updating recurring actions\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a4e48d8e8efe01c49f5bc16b935bbbb753e7511", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8a4e48d8e8efe01c49f5bc16b935bbbb753e7511", "committedDate": "2020-03-24T09:34:57Z", "message": "Add list recurring action by id\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f61cf5d8c2e3555ccdbe659eb9d2e3783035b10b", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f61cf5d8c2e3555ccdbe659eb9d2e3783035b10b", "committedDate": "2020-03-24T09:34:57Z", "message": "Support deleting of actions\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be08bd41516e67d9322f362fad5758b9b80d5b80", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/be08bd41516e67d9322f362fad5758b9b80d5b80", "committedDate": "2020-03-24T09:34:57Z", "message": "Extract save method from create/update\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86bea541f12f529b84aeae78b9009e14918f705f", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/86bea541f12f529b84aeae78b9009e14918f705f", "committedDate": "2020-03-24T09:34:57Z", "message": "Add requested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5e3e53529ed70f0811e4e4022dbc6ed27bb9ccc", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b5e3e53529ed70f0811e4e4022dbc6ed27bb9ccc", "committedDate": "2020-03-24T09:34:57Z", "message": "Minor fix: check for null when looking up for Org"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61e74c0ef8565b9e87cd6c0babed2c074a00920a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/61e74c0ef8565b9e87cd6c0babed2c074a00920a", "committedDate": "2020-03-24T09:34:57Z", "message": "Recurring Actions XMLRPC: Small improvement in the docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5e63b1b47d8719395d35745c2dd564ff8bfd381", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b5e63b1b47d8719395d35745c2dd564ff8bfd381", "committedDate": "2020-03-24T09:34:57Z", "message": "Recurring Actions: Forbid blank cron expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fab991184f323b7498f9ce2d289c1c09e2ddf22e", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fab991184f323b7498f9ce2d289c1c09e2ddf22e", "committedDate": "2020-03-24T09:34:57Z", "message": "Recurring Actions XMLRPC: Return int instead of long as action identifier\n\nPreviously, on out-of-int-range values, the silent overflow happened.\nNow an exception is thrown on backend."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8770b0ad09c3a3645290d8ed6b144fa9cf1edc23", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8770b0ad09c3a3645290d8ed6b144fa9cf1edc23", "committedDate": "2020-03-24T09:34:57Z", "message": "Recurring Actions: Improve validation mechanism\n\nPreviously on validating updated recurring actions in the web UI, a\ntransient entity was created to check the updated values.\n\nNow the same entity (which is turned to the detached state beforehand)\nis used for the validation. This approach is now uniform for both the\nweb UI and XMLRPC API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5091bbc80e3da91024348ca4c32512403b5d5322", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5091bbc80e3da91024348ca4c32512403b5d5322", "committedDate": "2020-03-24T09:34:57Z", "message": "Recurring Actions: Test for XMLRPC handler and Web controller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a6f19749bdf566fb2fd0cc6394c058e82d29fb5", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9a6f19749bdf566fb2fd0cc6394c058e82d29fb5", "committedDate": "2020-03-24T09:34:57Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fae407a3c62634d7c2866c0581ba7c81ec3e9e0", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0fae407a3c62634d7c2866c0581ba7c81ec3e9e0", "committedDate": "2020-03-24T09:34:57Z", "message": "Fix RecurringActionHandler XMLRPC doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d203eda0eba29234d948ef7e58238f24fd2c569", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3d203eda0eba29234d948ef7e58238f24fd2c569", "committedDate": "2020-03-24T09:34:57Z", "message": "Add changelog\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b55438dbd1e7a1a5752958c4f713d55c83d22a2a", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b55438dbd1e7a1a5752958c4f713d55c83d22a2a", "committedDate": "2020-03-23T14:51:37Z", "message": "Add changelog\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "3d203eda0eba29234d948ef7e58238f24fd2c569", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3d203eda0eba29234d948ef7e58238f24fd2c569", "committedDate": "2020-03-24T09:34:57Z", "message": "Add changelog\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1495, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}