{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjQ3NDU0", "number": 2372, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0Njo0M1rOEMzRLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTozNjowNFrOEO37iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODU4MzQ5OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0Njo0M1rOGvHqmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0Njo0M1rOGvHqmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MTg1MA==", "bodyText": "Instead of propagating the error message directly, I would prefer to have a custom message that can be translated (I just realized I need to adapt this in one place as well)", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452061850", "createdAt": "2020-07-09T08:46:43Z", "author": {"login": "parlt91"}, "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "diffHunk": "@@ -233,6 +240,59 @@ public static String deleteSchedule(Request request, Response response, User use\n         return json(response, ResultJson.success());\n     }\n \n+    private class SystemAssignmentRequest {\n+        private List<Long> systemIds;\n+        private boolean cancelActions;\n+    }\n+\n+    /**\n+     * Assign a schedule to systems\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String assignSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        SystemAssignmentRequest reqData = GSON.fromJson(request.body(), SystemAssignmentRequest.class);\n+        List<Long> systemIds = reqData.systemIds;\n+\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MM.lookupScheduleByUserAndId(user, scheduleId).ifPresentOrElse(\n+                schedule -> {\n+                    try {\n+                        MM.assignScheduleToSystems(user, schedule, new HashSet<>(systemIds), reqData.cancelActions);\n+                    }\n+                    catch (LookupException | IllegalArgumentException e) {\n+                        Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(e.getMessage())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5baf9023bb2b48acdc8d6ffa1d8f60b2c6e731a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODU4NDU0OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0Njo1OFrOGvHrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0Njo1OFrOGvHrPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MjAxNQ==", "bodyText": "Same here", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452062015", "createdAt": "2020-07-09T08:46:58Z", "author": {"login": "parlt91"}, "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "diffHunk": "@@ -233,6 +240,59 @@ public static String deleteSchedule(Request request, Response response, User use\n         return json(response, ResultJson.success());\n     }\n \n+    private class SystemAssignmentRequest {\n+        private List<Long> systemIds;\n+        private boolean cancelActions;\n+    }\n+\n+    /**\n+     * Assign a schedule to systems\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String assignSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        SystemAssignmentRequest reqData = GSON.fromJson(request.body(), SystemAssignmentRequest.class);\n+        List<Long> systemIds = reqData.systemIds;\n+\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MM.lookupScheduleByUserAndId(user, scheduleId).ifPresentOrElse(\n+                schedule -> {\n+                    try {\n+                        MM.assignScheduleToSystems(user, schedule, new HashSet<>(systemIds), reqData.cancelActions);\n+                    }\n+                    catch (LookupException | IllegalArgumentException e) {\n+                        Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(e.getMessage())));\n+                    }\n+                },\n+                () -> Spark.halt(HttpStatus.SC_NOT_FOUND)\n+        );\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Unassign a schedule from systems\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String unassignSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        List<Long> systemIds = Arrays.asList(GSON.fromJson(request.body(), Long[].class));\n+        try {\n+            MM.retractScheduleFromSystems(user, new HashSet<>(systemIds));\n+        }\n+        catch (LookupException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(e.getMessage())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5baf9023bb2b48acdc8d6ffa1d8f60b2c6e731a"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTQ5Mjc4OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoxMDo0OVrOGvQabw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo0NTo0NVrOGyldcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNTE2Nw==", "bodyText": "I wonder whether we should move this one to the SsmController instead. At least that's where I would expect this to be found.", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452205167", "createdAt": "2020-07-09T13:10:49Z", "author": {"login": "parlt91"}, "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "diffHunk": "@@ -115,6 +118,22 @@ public static ModelAndView maintenanceSchedules(Request request, Response respon\n         return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n     }\n \n+    /**\n+     * Handler for the SSM schedule assignment page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView ssmSchedules(Request request, Response response, User user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5NTcyOQ==", "bodyText": "SSM is generally structured as a collection of operations from various domains and every domain adds it's own functionality from it's own namespace. For example: ssm/highstate is served from MinionController.", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455695729", "createdAt": "2020-07-16T10:45:45Z", "author": {"login": "cbbayburt"}, "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "diffHunk": "@@ -115,6 +118,22 @@ public static ModelAndView maintenanceSchedules(Request request, Response respon\n         return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n     }\n \n+    /**\n+     * Handler for the SSM schedule assignment page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView ssmSchedules(Request request, Response response, User user) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNTE2Nw=="}, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTUyMzY5OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/maintenance/ssm/schedule-picker.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoxODowMFrOGvQs6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoxODowMFrOGvQs6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwOTg5Nw==", "bodyText": "Same thought here maybe move the code in maintenance/ssm to systems/ssm? On the other hand I am not against having everything maintenance window related in maintenance/. I'd like to hear some of your opinions about this.", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452209897", "createdAt": "2020-07-09T13:18:00Z", "author": {"login": "parlt91"}, "path": "web/html/src/manager/maintenance/ssm/schedule-picker.js", "diffHunk": "@@ -0,0 +1,148 @@\n+// @flow\n+\n+import React, {useState, useEffect, useContext} from \"react\";\n+\n+import {AsyncButton} from \"components/buttons\";\n+import {ModalButton} from \"components/dialog/ModalButton\";\n+import {Form, FormContext} from \"components/input/Form\";\n+import {Select} from \"components/input/Select\";\n+import {Check} from \"components/input/Check\";\n+import {Utils as MessagesUtils} from \"components/messages\";\n+\n+import CancelActionsDialog from \"../shared/cancel-actions-dialog\";\n+\n+import type {Node} from 'react';\n+import type {MessageType} from \"components/messages\";\n+\n+const Network = require(\"utils/network\");\n+\n+type ScheduleType = {\n+  scheduleId: number,\n+  scheduleName: string\n+};\n+\n+type WithMaintenanceSchedulesProps = {\n+  systems: string[],\n+  onMessage: (messages: MessageType[]) => void,\n+  children: (\n+    schedules: ScheduleType[],\n+    onAssign: (scheduleId: number, cancelActions: boolean) => Promise<any>\n+  ) => Node\n+};\n+\n+export function WithMaintenanceSchedules(props: WithMaintenanceSchedulesProps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzM1MTY2OnYy", "diffSide": "RIGHT", "path": "web/html/src/components/buttons.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyNTo1NVrOGv1XdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxNDowMFrOGxFoCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDYxMg==", "bodyText": "Does this not affect existing usages in a bad way?", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452810612", "createdAt": "2020-07-10T12:25:55Z", "author": {"login": "hustodemon"}, "path": "web/html/src/components/buttons.js", "diffHunk": "@@ -65,7 +65,7 @@ export class AsyncButton extends _ButtonBase {\n     let style = \"btn \";\n     switch (this.state.value) {\n         case \"failure\": style += \"btn-danger\"; break;\n-        case \"waiting\": style += \"btn-default\"; break;\n+        case \"waiting\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NzMzMQ==", "bodyText": "If any, it'd fix more cases.\nInitially, this was used only with \"default\" style buttons so we didn't hit the bug.", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452967331", "createdAt": "2020-07-10T17:07:50Z", "author": {"login": "cbbayburt"}, "path": "web/html/src/components/buttons.js", "diffHunk": "@@ -65,7 +65,7 @@ export class AsyncButton extends _ButtonBase {\n     let style = \"btn \";\n     switch (this.state.value) {\n         case \"failure\": style += \"btn-danger\"; break;\n-        case \"waiting\": style += \"btn-default\"; break;\n+        case \"waiting\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDYxMg=="}, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNTU3Nw==", "bodyText": "ah, good! \ud83d\ude04", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r454125577", "createdAt": "2020-07-14T06:14:00Z", "author": {"login": "hustodemon"}, "path": "web/html/src/components/buttons.js", "diffHunk": "@@ -65,7 +65,7 @@ export class AsyncButton extends _ButtonBase {\n     let style = \"btn \";\n     switch (this.state.value) {\n         case \"failure\": style += \"btn-danger\"; break;\n-        case \"waiting\": style += \"btn-default\"; break;\n+        case \"waiting\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDYxMg=="}, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzM1NTAxOnYy", "diffSide": "RIGHT", "path": "web/html/src/components/dialog/DangerDialog.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyNzowMlrOGv1Zcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxNDo1MVrOGxFpPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTEyMg==", "bodyText": "The line 15 suggests, that this prop is optional. Shouldn't this be reflected in the props as well?", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452811122", "createdAt": "2020-07-10T12:27:02Z", "author": {"login": "hustodemon"}, "path": "web/html/src/components/dialog/DangerDialog.js", "diffHunk": "@@ -72,4 +73,5 @@ DangerDialog.propTypes = {\n     onConfirmAsync: PropTypes.func,\n     submitText: PropTypes.string,\n     submitIcon: PropTypes.string,\n+    btnClass: PropTypes.string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NjAwMA==", "bodyText": "All these declarations are optional. With PropTypes, required ones are declared like:\nbtnClass: PropTypes.string.isRequired\n\nI know, weird \ud83d\ude1c\nThese older components need a Flow refactoring still.", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452966000", "createdAt": "2020-07-10T17:05:08Z", "author": {"login": "cbbayburt"}, "path": "web/html/src/components/dialog/DangerDialog.js", "diffHunk": "@@ -72,4 +73,5 @@ DangerDialog.propTypes = {\n     onConfirmAsync: PropTypes.func,\n     submitText: PropTypes.string,\n     submitIcon: PropTypes.string,\n+    btnClass: PropTypes.string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTEyMg=="}, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNTg4NQ==", "bodyText": "I see. I should study react a bit. Thanks for explaining.", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r454125885", "createdAt": "2020-07-14T06:14:51Z", "author": {"login": "hustodemon"}, "path": "web/html/src/components/dialog/DangerDialog.js", "diffHunk": "@@ -72,4 +73,5 @@ DangerDialog.propTypes = {\n     onConfirmAsync: PropTypes.func,\n     submitText: PropTypes.string,\n     submitIcon: PropTypes.string,\n+    btnClass: PropTypes.string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTEyMg=="}, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzYyMTg3OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/sdc/SystemDetailsEditAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo0NDo0NFrOGv376g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo0NDo0NFrOGv376g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MjcxNA==", "bodyText": "Nit: Maybe debug would be more fitting in these 3 scenarios?", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452852714", "createdAt": "2020-07-10T13:44:44Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/frontend/action/systems/sdc/SystemDetailsEditAction.java", "diffHunk": "@@ -167,6 +175,31 @@ else if (selectedEnt.equals(UNENTITLE)) {\n         s.getLocation().setRoom(daForm.getString(ROOM));\n         s.getLocation().setRack(daForm.getString(RACK));\n \n+        // Assign maintenance schedule\n+        Long scheduleId = (Long) daForm.get(MAINTENANCE_SCHEDULE);\n+\n+        if (scheduleId != null && scheduleId != 0) {\n+            // Assign schedule\n+            MaintenanceSchedule schedule = maintenanceManager.lookupScheduleByUserAndId(user, scheduleId).get();\n+            boolean cancelAffected = Boolean.TRUE.equals(daForm.get(MAINTENANCE_CANCEL_AFFECTED));\n+            try {\n+                maintenanceManager.assignScheduleToSystems(user, schedule, Collections.singleton(s.getId()),\n+                        cancelAffected);\n+                log.info(String.format(\"System %s assigned to schedule %s.\", s.getId(), schedule.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfe79d976f4f18e851329a28f21e6aea08fc28ab"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDI1ODUyOnYy", "diffSide": "RIGHT", "path": "java/code/webapp/WEB-INF/pages/ssm/ssmindex.jsp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToyMjowMFrOGyQ8EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTowNDoyNlrOGyh31w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM1OTUwNQ==", "bodyText": "Just  to make sure: no restriction for all the type of user right?", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455359505", "createdAt": "2020-07-15T21:22:00Z", "author": {"login": "ncounter"}, "path": "java/code/webapp/WEB-INF/pages/ssm/ssmindex.jsp", "diffHunk": "@@ -173,6 +173,7 @@\n                         <rhn:require acl=\"all_systems_in_set_have_feature(ftr_package_refresh)\">\n                             <li><bean:message key=\"ssm.overview.misc.packageprofiles\"/></li>\n                         </rhn:require>\n+                        <li><bean:message key=\"ssm.overview.schedule.assign\"/></li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzNjk1MQ==", "bodyText": "IIUC, yes. But as the authors of the RFC, maybe @mcalmer or @hustodemon have some other opinion?", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455636951", "createdAt": "2020-07-16T09:04:26Z", "author": {"login": "cbbayburt"}, "path": "java/code/webapp/WEB-INF/pages/ssm/ssmindex.jsp", "diffHunk": "@@ -173,6 +173,7 @@\n                         <rhn:require acl=\"all_systems_in_set_have_feature(ftr_package_refresh)\">\n                             <li><bean:message key=\"ssm.overview.misc.packageprofiles\"/></li>\n                         </rhn:require>\n+                        <li><bean:message key=\"ssm.overview.schedule.assign\"/></li>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM1OTUwNQ=="}, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDI2MzI3OnYy", "diffSide": "RIGHT", "path": "web/html/src/core/spa/spa-renderer.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToyMzo0M1rOGyQ_HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0OTozOFrOGyjkFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDI4NQ==", "bodyText": "Woah, sounds new to me. What's the scenario did you experienced it?", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455360285", "createdAt": "2020-07-15T21:23:43Z", "author": {"login": "ncounter"}, "path": "web/html/src/core/spa/spa-renderer.js", "diffHunk": "@@ -26,7 +26,10 @@ function hasReactApp() {\n   return window.pageRenderers.spa.reactAppsName.length > 0;\n }\n \n-function renderGlobalReact(element: ReactElement<any>, container: Element) {\n+function renderGlobalReact(element: ReactElement<any>, container: ?Element) {\n+  if (container == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzOTY3MA==", "bodyText": "We don't hit that case in real-life, but theoretically, this is usually called with document.getElementById(). getElementById can return null if the id does not exist and Flow knows about this. So basically, this is to satisfy Flow. I made the check in a single place here so we won't have to check wherever we call getElementById.", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455639670", "createdAt": "2020-07-16T09:08:37Z", "author": {"login": "cbbayburt"}, "path": "web/html/src/core/spa/spa-renderer.js", "diffHunk": "@@ -26,7 +26,10 @@ function hasReactApp() {\n   return window.pageRenderers.spa.reactAppsName.length > 0;\n }\n \n-function renderGlobalReact(element: ReactElement<any>, container: Element) {\n+function renderGlobalReact(element: ReactElement<any>, container: ?Element) {\n+  if (container == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDI4NQ=="}, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDY2MA==", "bodyText": "Awesome, thanks for the explanation.", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455664660", "createdAt": "2020-07-16T09:49:38Z", "author": {"login": "ncounter"}, "path": "web/html/src/core/spa/spa-renderer.js", "diffHunk": "@@ -26,7 +26,10 @@ function hasReactApp() {\n   return window.pageRenderers.spa.reactAppsName.length > 0;\n }\n \n-function renderGlobalReact(element: ReactElement<any>, container: Element) {\n+function renderGlobalReact(element: ReactElement<any>, container: ?Element) {\n+  if (container == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDI4NQ=="}, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDI3OTc2OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/maintenance/ssm/schedule-picker.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToyODozM1rOGyRIhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToyODozM1rOGyRIhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MjY5Mg==", "bodyText": "Checkstyle: else should go to a new line", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455362692", "createdAt": "2020-07-15T21:28:33Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/maintenance/ssm/schedule-picker.js", "diffHunk": "@@ -0,0 +1,148 @@\n+// @flow\n+\n+import React, {useState, useEffect, useContext} from \"react\";\n+\n+import {AsyncButton} from \"components/buttons\";\n+import {ModalButton} from \"components/dialog/ModalButton\";\n+import {Form, FormContext} from \"components/input/Form\";\n+import {Select} from \"components/input/Select\";\n+import {Check} from \"components/input/Check\";\n+import {Utils as MessagesUtils} from \"components/messages\";\n+\n+import CancelActionsDialog from \"../shared/cancel-actions-dialog\";\n+\n+import type {Node} from 'react';\n+import type {MessageType} from \"components/messages\";\n+\n+const Network = require(\"utils/network\");\n+\n+type ScheduleType = {\n+  scheduleId: number,\n+  scheduleName: string\n+};\n+\n+type WithMaintenanceSchedulesProps = {\n+  systems: string[],\n+  onMessage: (messages: MessageType[]) => void,\n+  children: (\n+    schedules: ScheduleType[],\n+    onAssign: (scheduleId: number, cancelActions: boolean) => Promise<any>\n+  ) => Node\n+};\n+\n+export function WithMaintenanceSchedules(props: WithMaintenanceSchedulesProps) {\n+  const [schedules, setSchedules] = useState([]);\n+\n+  const onAssign = (scheduleId: number, cancelActions: boolean): Promise<any> => {\n+    let uri;\n+    let data;\n+    let successMsg;\n+    if (scheduleId === 0) {\n+      uri = \"/rhn/manager/api/maintenance/schedule/unassign\";\n+      successMsg = t(\"Maintenance schedule has been cleared\");\n+      data = props.systems;\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDI5MDYwOnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/maintenance/ssm/system-assignment.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTozMTowMVrOGyRPVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOToxODo0MVrOGyiaMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2NDQzNg==", "bodyText": "Is the TODO still something missing? I'd either address it or drop it.", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455364436", "createdAt": "2020-07-15T21:31:01Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/maintenance/ssm/system-assignment.js", "diffHunk": "@@ -0,0 +1,40 @@\n+// @flow\n+\n+import React, {useState} from \"react\";\n+import SpaRenderer from \"core/spa/spa-renderer\";\n+\n+import {Messages} from \"components/messages\";\n+import {BootstrapPanel} from \"components/panels/BootstrapPanel\";\n+\n+import {SchedulePickerForm, WithMaintenanceSchedules} from \"./schedule-picker\";\n+\n+function SystemAssignment(props: {systems: string[]}) {\n+  // TODO: Add proper info text", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0NTc0NQ==", "bodyText": "Yes, I need some fancy text to put in here :) I'll take care of it before merging. Suggestions welcome (check out the panel header in the Assignment from SSM screenshot)", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455645745", "createdAt": "2020-07-16T09:18:41Z", "author": {"login": "cbbayburt"}, "path": "web/html/src/manager/maintenance/ssm/system-assignment.js", "diffHunk": "@@ -0,0 +1,40 @@\n+// @flow\n+\n+import React, {useState} from \"react\";\n+import SpaRenderer from \"core/spa/spa-renderer\";\n+\n+import {Messages} from \"components/messages\";\n+import {BootstrapPanel} from \"components/panels/BootstrapPanel\";\n+\n+import {SchedulePickerForm, WithMaintenanceSchedules} from \"./schedule-picker\";\n+\n+function SystemAssignment(props: {systems: string[]}) {\n+  // TODO: Add proper info text", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2NDQzNg=="}, "originalCommit": {"oid": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDMxODgxOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/common/db/datasource/xml/System_queries.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTozNjowNFrOGyRiEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTozNjowNFrOGyRiEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2OTIzMw==", "bodyText": "Maybe better to check first if it is null and then by comparing by schedule_id just for the sake of performance?", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455369233", "createdAt": "2020-07-15T21:36:04Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/redhat/rhn/common/db/datasource/xml/System_queries.xml", "diffHunk": "@@ -2419,6 +2419,17 @@ ORDER BY UPPER(COALESCE(X.SERVER_NAME, '(none)')), X.ID\n   <elaborator name=\"entitlements\" />\n </mode>\n \n+<mode name=\"target_systems_for_maintenance_schedule\" class=\"com.redhat.rhn.frontend.dto.EssentialServerDto\">\n+    <query params=\"user_id, schedule_id\">\n+        SELECT s.id, s.name\n+        FROM rhnServer s JOIN rhnUserServerPerms usp on s.id = usp.server_id\n+        WHERE usp.user_id = :user_id\n+            AND (s.maintenance_schedule_id != :schedule_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd053988f6b0387b7f4798426b6dbf5a927566a"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4227, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}