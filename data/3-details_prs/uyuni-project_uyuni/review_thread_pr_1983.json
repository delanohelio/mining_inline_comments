{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjI4MDIx", "number": 1983, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjoxMDo1MlrODlfEOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjoyMDozMFrODlfTHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjMyODg5OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/virtualization/pools/virtualization-pool-definition-api.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjoxMDo1MlrOFyZ7PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0NTo0OFrOFybU0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5Nzg4NA==", "bodyText": "Nitpick: This code seems to repeat across your PRs. Maybe you can extract it to utility function after the PRs with similar code are merged.", "url": "https://github.com/uyuni-project/uyuni/pull/1983#discussion_r388397884", "createdAt": "2020-03-05T16:10:52Z", "author": {"login": "mateiw"}, "path": "web/html/src/manager/virtualization/pools/virtualization-pool-definition-api.js", "diffHunk": "@@ -0,0 +1,39 @@\n+// @flow\n+import * as React from 'react';\n+import Network from 'utils/network';\n+import * as Messages from 'components/messages';\n+\n+type Props = {\n+  /** Virtual host server ID */\n+  hostid: string,\n+  /** Name of the pool for which to get the defintion*/\n+  poolName: string,\n+  /** Children function rendering the content depending on the request result */\n+  children: ({definition: Object, messages: React.Node}) => React.Node,\n+};\n+\n+/** Component calling the Uyuni REST API to get the XML definition of a virtual storage pool */\n+export function VirtualizationPoolDefinitionApi(props: Props) {\n+  const [messages, setMessages] = React.useState([]);\n+  const [definition, setDefinition] = React.useState(null);\n+\n+  React.useEffect(() => {\n+    Network.get(`/rhn/manager/api/systems/details/virtualization/pools/${props.hostid}/pool/${props.poolName}`,\n+      'application/json').promise\n+      .then((response) => {\n+        setDefinition(response);\n+      }, (xhr) => {\n+        const errMessages = xhr.status === 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ab21686e58ed1ac6c29dd081d535c195853473"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyMDgxOA==", "bodyText": "yes, I'll try to do that after the PRs are merged", "url": "https://github.com/uyuni-project/uyuni/pull/1983#discussion_r388420818", "createdAt": "2020-03-05T16:45:48Z", "author": {"login": "cbosdo"}, "path": "web/html/src/manager/virtualization/pools/virtualization-pool-definition-api.js", "diffHunk": "@@ -0,0 +1,39 @@\n+// @flow\n+import * as React from 'react';\n+import Network from 'utils/network';\n+import * as Messages from 'components/messages';\n+\n+type Props = {\n+  /** Virtual host server ID */\n+  hostid: string,\n+  /** Name of the pool for which to get the defintion*/\n+  poolName: string,\n+  /** Children function rendering the content depending on the request result */\n+  children: ({definition: Object, messages: React.Node}) => React.Node,\n+};\n+\n+/** Component calling the Uyuni REST API to get the XML definition of a virtual storage pool */\n+export function VirtualizationPoolDefinitionApi(props: Props) {\n+  const [messages, setMessages] = React.useState([]);\n+  const [definition, setDefinition] = React.useState(null);\n+\n+  React.useEffect(() => {\n+    Network.get(`/rhn/manager/api/systems/details/virtualization/pools/${props.hostid}/pool/${props.poolName}`,\n+      'application/json').promise\n+      .then((response) => {\n+        setDefinition(response);\n+      }, (xhr) => {\n+        const errMessages = xhr.status === 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5Nzg4NA=="}, "originalCommit": {"oid": "49ab21686e58ed1ac6c29dd081d535c195853473"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjM2NzAwOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/virtualization/VirtManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjoyMDozMFrOFyaTyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyMjoyNlrOFycvxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwNDE2OQ==", "bodyText": "I think this can throw a NullPointerException if for some reason the parsing fails and pool is null.", "url": "https://github.com/uyuni-project/uyuni/pull/1983#discussion_r388404169", "createdAt": "2020-03-05T16:20:30Z", "author": {"login": "mateiw"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManager.java", "diffHunk": "@@ -80,6 +80,29 @@\n         return saltService.callSync(call, minionId);\n     }\n \n+    /**\n+     * Query virtual storage pool definition\n+     *\n+     * @param minionId the host minion ID\n+     * @param poolName the domain name to look for\n+     * @return the XML definition or an empty Optional\n+     */\n+    public static Optional<PoolDefinition> getPoolDefinition(String minionId, String poolName) {\n+        Map<String, JsonObject> infos = getPools(minionId);\n+\n+        Map<String, Object> args = new LinkedHashMap<>();\n+        args.put(\"name\", poolName);\n+        LocalCall<String> call =\n+                new LocalCall<>(\"virt.pool_get_xml\", Optional.empty(), Optional.of(args), new TypeToken<String>() { });\n+\n+        Optional<String> result = saltService.callSync(call, minionId);\n+        return result.filter(s -> !s.startsWith(\"ERROR\")).map(xml -> {\n+            PoolDefinition pool = PoolDefinition.parse(xml);\n+            pool.setAutostart(infos.get(poolName).get(\"autostart\").getAsInt() == 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ddf597601fe17c8ef0256b001bcb327824470bb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NDEwMg==", "bodyText": "handled", "url": "https://github.com/uyuni-project/uyuni/pull/1983#discussion_r388444102", "createdAt": "2020-03-05T17:22:26Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/virtualization/VirtManager.java", "diffHunk": "@@ -80,6 +80,29 @@\n         return saltService.callSync(call, minionId);\n     }\n \n+    /**\n+     * Query virtual storage pool definition\n+     *\n+     * @param minionId the host minion ID\n+     * @param poolName the domain name to look for\n+     * @return the XML definition or an empty Optional\n+     */\n+    public static Optional<PoolDefinition> getPoolDefinition(String minionId, String poolName) {\n+        Map<String, JsonObject> infos = getPools(minionId);\n+\n+        Map<String, Object> args = new LinkedHashMap<>();\n+        args.put(\"name\", poolName);\n+        LocalCall<String> call =\n+                new LocalCall<>(\"virt.pool_get_xml\", Optional.empty(), Optional.of(args), new TypeToken<String>() { });\n+\n+        Optional<String> result = saltService.callSync(call, minionId);\n+        return result.filter(s -> !s.startsWith(\"ERROR\")).map(xml -> {\n+            PoolDefinition pool = PoolDefinition.parse(xml);\n+            pool.setAutostart(infos.get(poolName).get(\"autostart\").getAsInt() == 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwNDE2OQ=="}, "originalCommit": {"oid": "3ddf597601fe17c8ef0256b001bcb327824470bb"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 128, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}