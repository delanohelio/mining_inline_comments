{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNjQ2MTcz", "number": 2761, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo1MzoyNVrOEyVjpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowOTo1MVrOE07IFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjE3NDQ0OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/reactor/messaging/ImageSyncedEventMessageAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo1MzoyNVrOHo6qLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTozOTozMlrOHsmq3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2NjE1Ng==", "bodyText": "Nitpick: Nothing wrong with this but instead of using isPresent and then get method, better use ifPresent like here. It's more concise and more compatible with functional style.", "url": "https://github.com/uyuni-project/uyuni/pull/2761#discussion_r512666156", "createdAt": "2020-10-27T12:53:25Z", "author": {"login": "admd"}, "path": "java/code/src/com/suse/manager/reactor/messaging/ImageSyncedEventMessageAction.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.reactor.messaging;\n+\n+import com.redhat.rhn.common.messaging.EventMessage;\n+import com.redhat.rhn.common.messaging.MessageAction;\n+import com.redhat.rhn.domain.server.ServerFactory;\n+import com.redhat.rhn.domain.server.ServerGroupFactory;\n+import com.redhat.rhn.domain.server.ManagedServerGroup;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.MinionServerFactory;\n+import com.suse.manager.webui.services.SaltStateGeneratorService;\n+import com.suse.manager.webui.utils.salt.custom.ImageSyncedEvent;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Logic responsible for reacting to 'image deployed' event.\n+ */\n+public class ImageSyncedEventMessageAction implements MessageAction {\n+\n+    private static final Logger LOG = Logger.getLogger(ImageSyncedEventMessageAction.class);\n+\n+\n+    @Override\n+    public void execute(EventMessage msg) {\n+        ImageSyncedEvent imageSyncedEvent = ((ImageSyncedEventMessage) msg).getImageSyncedEvent();\n+\n+        String minionId = imageSyncedEvent.getMinionId();\n+\n+        Optional<MinionServer> minionOpt = MinionServerFactory.findByMinionId(minionId);\n+        if (minionOpt.isPresent()) {\n+            MinionServer minion = minionOpt.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83a8f0ce3c88ad7c78c2da544c26d512dcf7f06"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzMjk1OQ==", "bodyText": "fixed", "url": "https://github.com/uyuni-project/uyuni/pull/2761#discussion_r516532959", "createdAt": "2020-11-03T09:39:32Z", "author": {"login": "nadvornik"}, "path": "java/code/src/com/suse/manager/reactor/messaging/ImageSyncedEventMessageAction.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.reactor.messaging;\n+\n+import com.redhat.rhn.common.messaging.EventMessage;\n+import com.redhat.rhn.common.messaging.MessageAction;\n+import com.redhat.rhn.domain.server.ServerFactory;\n+import com.redhat.rhn.domain.server.ServerGroupFactory;\n+import com.redhat.rhn.domain.server.ManagedServerGroup;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.MinionServerFactory;\n+import com.suse.manager.webui.services.SaltStateGeneratorService;\n+import com.suse.manager.webui.utils.salt.custom.ImageSyncedEvent;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Logic responsible for reacting to 'image deployed' event.\n+ */\n+public class ImageSyncedEventMessageAction implements MessageAction {\n+\n+    private static final Logger LOG = Logger.getLogger(ImageSyncedEventMessageAction.class);\n+\n+\n+    @Override\n+    public void execute(EventMessage msg) {\n+        ImageSyncedEvent imageSyncedEvent = ((ImageSyncedEventMessage) msg).getImageSyncedEvent();\n+\n+        String minionId = imageSyncedEvent.getMinionId();\n+\n+        Optional<MinionServer> minionOpt = MinionServerFactory.findByMinionId(minionId);\n+        if (minionOpt.isPresent()) {\n+            MinionServer minion = minionOpt.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2NjE1Ng=="}, "originalCommit": {"oid": "f83a8f0ce3c88ad7c78c2da544c26d512dcf7f06"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjIxMTU3OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/SaltStateGeneratorService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzowMjoxN1rOHo7BOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTozOTo0NlrOHsmrZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3MjA1OA==", "bodyText": "Any particular reason to use TreeMap instead of HashMap? Do you need to maintain order? Moreover, if a map is going to have only one entry, may be better user collections's singletonMap method like here", "url": "https://github.com/uyuni-project/uyuni/pull/2761#discussion_r512672058", "createdAt": "2020-10-27T13:02:17Z", "author": {"login": "admd"}, "path": "java/code/src/com/suse/manager/webui/services/SaltStateGeneratorService.java", "diffHunk": "@@ -193,6 +193,58 @@ private String getImagePillarFileName(OSImageInspectSlsResult.Bundle bundle) {\n                 bundle.getId().replace('.', '-') + \".\" + PILLAR_IMAGE_DATA_FILE_EXT;\n     }\n \n+    public void createImageSyncedPillar(ServerGroup branch, String name, String version) {\n+\n+        try {\n+            SaltPillar pillar = new SaltPillar();\n+            Map<String, Object> imagePillar = new TreeMap<String, Object>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83a8f0ce3c88ad7c78c2da544c26d512dcf7f06"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzMzA5NQ==", "bodyText": "fixed", "url": "https://github.com/uyuni-project/uyuni/pull/2761#discussion_r516533095", "createdAt": "2020-11-03T09:39:46Z", "author": {"login": "nadvornik"}, "path": "java/code/src/com/suse/manager/webui/services/SaltStateGeneratorService.java", "diffHunk": "@@ -193,6 +193,58 @@ private String getImagePillarFileName(OSImageInspectSlsResult.Bundle bundle) {\n                 bundle.getId().replace('.', '-') + \".\" + PILLAR_IMAGE_DATA_FILE_EXT;\n     }\n \n+    public void createImageSyncedPillar(ServerGroup branch, String name, String version) {\n+\n+        try {\n+            SaltPillar pillar = new SaltPillar();\n+            Map<String, Object> imagePillar = new TreeMap<String, Object>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3MjA1OA=="}, "originalCommit": {"oid": "f83a8f0ce3c88ad7c78c2da544c26d512dcf7f06"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTMwMTMyOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/reactor/messaging/ImageSyncedEventMessageAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowOTo1MVrOHs6yGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTozNDozMFrOHtP9cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg2MjQ5MQ==", "bodyText": "Nitpic, is the warning enough? Shouldn't this be an error?", "url": "https://github.com/uyuni-project/uyuni/pull/2761#discussion_r516862491", "createdAt": "2020-11-03T18:09:51Z", "author": {"login": "aaannz"}, "path": "java/code/src/com/suse/manager/reactor/messaging/ImageSyncedEventMessageAction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.reactor.messaging;\n+\n+import com.redhat.rhn.common.messaging.EventMessage;\n+import com.redhat.rhn.common.messaging.MessageAction;\n+import com.redhat.rhn.domain.server.ServerGroupFactory;\n+import com.redhat.rhn.domain.server.ManagedServerGroup;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.MinionServerFactory;\n+import com.suse.manager.webui.services.SaltStateGeneratorService;\n+import com.suse.manager.webui.utils.salt.custom.ImageSyncedEvent;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Logic responsible for reacting to 'image synced' event.\n+ */\n+public class ImageSyncedEventMessageAction implements MessageAction {\n+\n+    private static final Logger LOG = Logger.getLogger(ImageSyncedEventMessageAction.class);\n+\n+\n+    @Override\n+    public void execute(EventMessage msg) {\n+        ImageSyncedEvent imageSyncedEvent = ((ImageSyncedEventMessage) msg).getImageSyncedEvent();\n+\n+        String minionId = imageSyncedEvent.getMinionId();\n+\n+        Optional<MinionServer> minionOpt = MinionServerFactory.findByMinionId(minionId);\n+        minionOpt.ifPresent(minion -> {\n+            ManagedServerGroup branchGroup = ServerGroupFactory.lookupByNameAndOrg(imageSyncedEvent.getBranch(),\n+                minion.getOrg());\n+\n+            if (!minion.getGroups().contains(branchGroup)) {\n+                LOG.warn(\"Branch server \" + minionId + \" is not in group \" + imageSyncedEvent.getBranch());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55a55201446fca7ce9da66cbbd23e84c0eae433b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIwOTQ1Ng==", "bodyText": "You are right, fixed.", "url": "https://github.com/uyuni-project/uyuni/pull/2761#discussion_r517209456", "createdAt": "2020-11-04T09:34:30Z", "author": {"login": "nadvornik"}, "path": "java/code/src/com/suse/manager/reactor/messaging/ImageSyncedEventMessageAction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.reactor.messaging;\n+\n+import com.redhat.rhn.common.messaging.EventMessage;\n+import com.redhat.rhn.common.messaging.MessageAction;\n+import com.redhat.rhn.domain.server.ServerGroupFactory;\n+import com.redhat.rhn.domain.server.ManagedServerGroup;\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.MinionServerFactory;\n+import com.suse.manager.webui.services.SaltStateGeneratorService;\n+import com.suse.manager.webui.utils.salt.custom.ImageSyncedEvent;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Logic responsible for reacting to 'image synced' event.\n+ */\n+public class ImageSyncedEventMessageAction implements MessageAction {\n+\n+    private static final Logger LOG = Logger.getLogger(ImageSyncedEventMessageAction.class);\n+\n+\n+    @Override\n+    public void execute(EventMessage msg) {\n+        ImageSyncedEvent imageSyncedEvent = ((ImageSyncedEventMessage) msg).getImageSyncedEvent();\n+\n+        String minionId = imageSyncedEvent.getMinionId();\n+\n+        Optional<MinionServer> minionOpt = MinionServerFactory.findByMinionId(minionId);\n+        minionOpt.ifPresent(minion -> {\n+            ManagedServerGroup branchGroup = ServerGroupFactory.lookupByNameAndOrg(imageSyncedEvent.getBranch(),\n+                minion.getOrg());\n+\n+            if (!minion.getGroups().contains(branchGroup)) {\n+                LOG.warn(\"Branch server \" + minionId + \" is not in group \" + imageSyncedEvent.getBranch());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg2MjQ5MQ=="}, "originalCommit": {"oid": "55a55201446fca7ce9da66cbbd23e84c0eae433b"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3976, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}