{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MjA5ODUz", "number": 2665, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNToxMlrOEqv_7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo1NTo0M1rOEvpXMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjYyMDYxOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/services/SaltServerActionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNToxMlrOHdIhVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMToyODozOVrOHmdJ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMDM1OA==", "bodyText": "I wonder if we should make these names more general as they are now also used for installing a new instance.\nBut maybe not in this PR.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r500310358", "createdAt": "2020-10-06T14:05:12Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/webui/services/SaltServerActionService.java", "diffHunk": "@@ -1715,12 +1731,26 @@ else if (state.equals(\"rebooted\") && ((VirtualizationRebootGuestAction)action).i\n         KickstartableTree tree = KickstartFactory.lookupKickstartTreeByLabel(nameParts.get(0),\n                 OrgFactory.lookupById(Long.valueOf(nameParts.get(1))));\n         tree.createOrUpdateSaltFS();\n-        String kOpts = buildKernelOptions(system, profile, dist, host);\n-        Map<String, Object> pillar = new HashMap<>();\n+        String kOpts = buildKernelOptions(system, profile, dist, kickstartHost);\n+        Map<String, String> pillar = new HashMap<>();\n         pillar.put(\"uyuni-reinstall-kernel\", saltFSKernel);\n         pillar.put(\"uyuni-reinstall-initrd\", saltFSInitrd);\n         pillar.put(\"uyuni-reinstall-kopts\", kOpts);\n+\n+        return pillar;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bf17c0f994fd0312bcb3ffe6bff1684b2156b7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA4NTU4OA==", "bodyText": "it's a quick thing to do. Will add it to this PR", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r510085588", "createdAt": "2020-10-22T11:28:39Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/services/SaltServerActionService.java", "diffHunk": "@@ -1715,12 +1731,26 @@ else if (state.equals(\"rebooted\") && ((VirtualizationRebootGuestAction)action).i\n         KickstartableTree tree = KickstartFactory.lookupKickstartTreeByLabel(nameParts.get(0),\n                 OrgFactory.lookupById(Long.valueOf(nameParts.get(1))));\n         tree.createOrUpdateSaltFS();\n-        String kOpts = buildKernelOptions(system, profile, dist, host);\n-        Map<String, Object> pillar = new HashMap<>();\n+        String kOpts = buildKernelOptions(system, profile, dist, kickstartHost);\n+        Map<String, String> pillar = new HashMap<>();\n         pillar.put(\"uyuni-reinstall-kernel\", saltFSKernel);\n         pillar.put(\"uyuni-reinstall-initrd\", saltFSInitrd);\n         pillar.put(\"uyuni-reinstall-kopts\", kOpts);\n+\n+        return pillar;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMDM1OA=="}, "originalCommit": {"oid": "f5bf17c0f994fd0312bcb3ffe6bff1684b2156b7"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzI3MjI4OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/virtualization/VirtualMachineRestarterSalt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1NzowMFrOHdO16w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToyMToyNlrOHdqWSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMzkzMQ==", "bodyText": "i'm not really sure about this the methods in here seem to only serve this one purpose and its kind of an ugly implementation detail that we have to do this anyway. My suggestion would be to move the tracking into the\nLibvirtEngineDomainLifecycleMessageAction.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r500413931", "createdAt": "2020-10-06T15:57:00Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/virtualization/VirtualMachineRestarterSalt.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.virtualization;\n+\n+import com.suse.manager.webui.services.iface.VirtManager;\n+import com.suse.manager.webui.services.iface.VirtualMachineRestarter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Salt implementation for the VM restart handler\n+ */\n+public class VirtualMachineRestarterSalt implements VirtualMachineRestarter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bf17c0f994fd0312bcb3ffe6bff1684b2156b7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg2NDU4NA==", "bodyText": "I was unsure of where to put it... I'll try it this way.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r500864584", "createdAt": "2020-10-07T09:21:26Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/virtualization/VirtualMachineRestarterSalt.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.virtualization;\n+\n+import com.suse.manager.webui.services.iface.VirtManager;\n+import com.suse.manager.webui.services.iface.VirtualMachineRestarter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Salt implementation for the VM restart handler\n+ */\n+public class VirtualMachineRestarterSalt implements VirtualMachineRestarter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMzkzMQ=="}, "originalCommit": {"oid": "f5bf17c0f994fd0312bcb3ffe6bff1684b2156b7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjEzOTg2OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/virtualization/VirtualMachineRestarterSalt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOTowOToyOFrOHdp4Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToxNjozMFrOHdqKBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1Njg3OA==", "bodyText": "you can just lock use the ArrayList object as lock and don't need a separate object.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r500856878", "createdAt": "2020-10-07T09:09:28Z", "author": {"login": "lucidd"}, "path": "java/code/src/com/suse/manager/virtualization/VirtualMachineRestarterSalt.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.virtualization;\n+\n+import com.suse.manager.webui.services.iface.VirtManager;\n+import com.suse.manager.webui.services.iface.VirtualMachineRestarter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Salt implementation for the VM restart handler\n+ */\n+public class VirtualMachineRestarterSalt implements VirtualMachineRestarter {\n+\n+    private static VirtualMachineRestarterSalt instance;\n+\n+    private final VirtManager virtManager;\n+    private final Object lock = new Object();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bf17c0f994fd0312bcb3ffe6bff1684b2156b7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg2MTQ0Nw==", "bodyText": "Indeed, will change that", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r500861447", "createdAt": "2020-10-07T09:16:30Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/virtualization/VirtualMachineRestarterSalt.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.virtualization;\n+\n+import com.suse.manager.webui.services.iface.VirtManager;\n+import com.suse.manager.webui.services.iface.VirtualMachineRestarter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Salt implementation for the VM restart handler\n+ */\n+public class VirtualMachineRestarterSalt implements VirtualMachineRestarter {\n+\n+    private static VirtualMachineRestarterSalt instance;\n+\n+    private final VirtManager virtManager;\n+    private final Object lock = new Object();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1Njg3OA=="}, "originalCommit": {"oid": "f5bf17c0f994fd0312bcb3ffe6bff1684b2156b7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzg1NjQwOnYy", "diffSide": "RIGHT", "path": "testsuite/features/reposync/srv_sync_products.feature", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzoyODo0N1rOHkuUZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDo1Njo1OVrOHmmCPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTY2OA==", "bodyText": "What makes the difference in this scenario to need the special tag of long_test, comparing with the other scenarios?\nI would say we don't need it here.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508269668", "createdAt": "2020-10-20T07:28:47Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/reposync/srv_sync_products.feature", "diffHunk": "@@ -57,3 +57,21 @@ Feature: Synchronize products in the products page of the Setup Wizard\n     And I click the Add Product button\n     And I wait until I see \"SUSE Linux Enterprise Server 15 x86_64\" product has been added\n     Then the SLE15 products should be added\n+\n+@long_test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMwMDU2NA==", "bodyText": "it's just that we don't need to fully sync that product if we don't run the long tests", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508300564", "createdAt": "2020-10-20T08:17:36Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/reposync/srv_sync_products.feature", "diffHunk": "@@ -57,3 +57,21 @@ Feature: Synchronize products in the products page of the Setup Wizard\n     And I click the Add Product button\n     And I wait until I see \"SUSE Linux Enterprise Server 15 x86_64\" product has been added\n     Then the SLE15 products should be added\n+\n+@long_test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTY2OA=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxMDEyOQ==", "bodyText": "Well, it will also mean that we will not run this scenario if we don't run the long tests, is that what we want? This product will be only necessary when running long tests? Otherwise, I would remove the tag from that one.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508310129", "createdAt": "2020-10-20T08:31:01Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/reposync/srv_sync_products.feature", "diffHunk": "@@ -57,3 +57,21 @@ Feature: Synchronize products in the products page of the Setup Wizard\n     And I click the Add Product button\n     And I wait until I see \"SUSE Linux Enterprise Server 15 x86_64\" product has been added\n     Then the SLE15 products should be added\n+\n+@long_test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTY2OA=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMDg5OQ==", "bodyText": "Ok, as we only need at the same scenarios that we also have the tag, let's keep it here for now.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r510230899", "createdAt": "2020-10-22T14:56:45Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/reposync/srv_sync_products.feature", "diffHunk": "@@ -57,3 +57,21 @@ Feature: Synchronize products in the products page of the Setup Wizard\n     And I click the Add Product button\n     And I wait until I see \"SUSE Linux Enterprise Server 15 x86_64\" product has been added\n     Then the SLE15 products should be added\n+\n+@long_test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTY2OA=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMTEwMA==", "bodyText": "As of today it's not needed anywhere else.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r510231100", "createdAt": "2020-10-22T14:56:59Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/reposync/srv_sync_products.feature", "diffHunk": "@@ -57,3 +57,21 @@ Feature: Synchronize products in the products page of the Setup Wizard\n     And I click the Add Product button\n     And I wait until I see \"SUSE Linux Enterprise Server 15 x86_64\" product has been added\n     Then the SLE15 products should be added\n+\n+@long_test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTY2OA=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzg2NzMyOnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/minkvm_guests.feature", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzozMTo0MVrOHkubSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoyODo1M1rOHmkqAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MTQzNA==", "bodyText": "If we need it, it might be interesting to have a step here waiting for that channel to be fully synched \ud83e\udd14\nBetter than just guess than it had enough time to synch.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508271434", "createdAt": "2020-10-20T07:31:41Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/secondary/minkvm_guests.feature", "diffHunk": "@@ -342,6 +342,95 @@ Feature: Be able to manage KVM virtual machines via the GUI\n     Then I wait until I do not see \"test-net1\" text\n     And I should not see a \"test-net1\" virtual network on \"kvm_server\"\n \n+# Start provisioning scenarios\n+\n+# This scenario needs the 15-SP2 base system channel to be synchronized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMwMTEwOQ==", "bodyText": "We already wait for the channel sync in the step killing (or not) the repo syncs", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508301109", "createdAt": "2020-10-20T08:18:26Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/secondary/minkvm_guests.feature", "diffHunk": "@@ -342,6 +342,95 @@ Feature: Be able to manage KVM virtual machines via the GUI\n     Then I wait until I do not see \"test-net1\" text\n     And I should not see a \"test-net1\" virtual network on \"kvm_server\"\n \n+# Start provisioning scenarios\n+\n+# This scenario needs the 15-SP2 base system channel to be synchronized", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MTQzNA=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxMTQ0Ng==", "bodyText": "Which is in another feature file right? :)\nBetter to add an extra pre-condition than to have dependencies with other feature files.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508311446", "createdAt": "2020-10-20T08:32:57Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/secondary/minkvm_guests.feature", "diffHunk": "@@ -342,6 +342,95 @@ Feature: Be able to manage KVM virtual machines via the GUI\n     Then I wait until I do not see \"test-net1\" text\n     And I should not see a \"test-net1\" virtual network on \"kvm_server\"\n \n+# Start provisioning scenarios\n+\n+# This scenario needs the 15-SP2 base system channel to be synchronized", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MTQzNA=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIwODUxMg==", "bodyText": "Added", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r510208512", "createdAt": "2020-10-22T14:28:53Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/secondary/minkvm_guests.feature", "diffHunk": "@@ -342,6 +342,95 @@ Feature: Be able to manage KVM virtual machines via the GUI\n     Then I wait until I do not see \"test-net1\" text\n     And I should not see a \"test-net1\" virtual network on \"kvm_server\"\n \n+# Start provisioning scenarios\n+\n+# This scenario needs the 15-SP2 base system channel to be synchronized", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MTQzNA=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzg3MTU0OnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/minkvm_guests.feature", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzozMjo0NFrOHkud4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoyOTowOFrOHmkqyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MjA5Nw==", "bodyText": "I'm not sure we need this step Given I am on the Systems page to navigate to Distributions.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508272097", "createdAt": "2020-10-20T07:32:44Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/secondary/minkvm_guests.feature", "diffHunk": "@@ -342,6 +342,95 @@ Feature: Be able to manage KVM virtual machines via the GUI\n     Then I wait until I do not see \"test-net1\" text\n     And I should not see a \"test-net1\" virtual network on \"kvm_server\"\n \n+# Start provisioning scenarios\n+\n+# This scenario needs the 15-SP2 base system channel to be synchronized\n+@long_test\n+@virthost_kvm\n+@scc_credentials\n+  Scenario: Create auto installation distribution\n+    Given I am on the Systems page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMwMTQxMQ==", "bodyText": "it failed to work without it IIRC", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508301411", "createdAt": "2020-10-20T08:18:55Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/secondary/minkvm_guests.feature", "diffHunk": "@@ -342,6 +342,95 @@ Feature: Be able to manage KVM virtual machines via the GUI\n     Then I wait until I do not see \"test-net1\" text\n     And I should not see a \"test-net1\" virtual network on \"kvm_server\"\n \n+# Start provisioning scenarios\n+\n+# This scenario needs the 15-SP2 base system channel to be synchronized\n+@long_test\n+@virthost_kvm\n+@scc_credentials\n+  Scenario: Create auto installation distribution\n+    Given I am on the Systems page", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MjA5Nw=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMwNzc0OA==", "bodyText": "Probably what you need is something like Given I am authorized as admin admin", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508307748", "createdAt": "2020-10-20T08:27:54Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/secondary/minkvm_guests.feature", "diffHunk": "@@ -342,6 +342,95 @@ Feature: Be able to manage KVM virtual machines via the GUI\n     Then I wait until I do not see \"test-net1\" text\n     And I should not see a \"test-net1\" virtual network on \"kvm_server\"\n \n+# Start provisioning scenarios\n+\n+# This scenario needs the 15-SP2 base system channel to be synchronized\n+@long_test\n+@virthost_kvm\n+@scc_credentials\n+  Scenario: Create auto installation distribution\n+    Given I am on the Systems page", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MjA5Nw=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIwODcxNQ==", "bodyText": "Worked, changed", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r510208715", "createdAt": "2020-10-22T14:29:08Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/secondary/minkvm_guests.feature", "diffHunk": "@@ -342,6 +342,95 @@ Feature: Be able to manage KVM virtual machines via the GUI\n     Then I wait until I do not see \"test-net1\" text\n     And I should not see a \"test-net1\" virtual network on \"kvm_server\"\n \n+# Start provisioning scenarios\n+\n+# This scenario needs the 15-SP2 base system channel to be synchronized\n+@long_test\n+@virthost_kvm\n+@scc_credentials\n+  Scenario: Create auto installation distribution\n+    Given I am on the Systems page", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MjA5Nw=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzg4MDgwOnYy", "diffSide": "RIGHT", "path": "testsuite/features/secondary/minkvm_guests.feature", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzozNToyMFrOHkujtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODoxOTo0MlrOHkwSdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MzU4OA==", "bodyText": "Instead of a comment, if we really want to advise about what it's doing here, I would prefer a new Scenario, with a title of \"Test the VM boot params\"", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508273588", "createdAt": "2020-10-20T07:35:20Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/secondary/minkvm_guests.feature", "diffHunk": "@@ -342,6 +342,95 @@ Feature: Be able to manage KVM virtual machines via the GUI\n     Then I wait until I do not see \"test-net1\" text\n     And I should not see a \"test-net1\" virtual network on \"kvm_server\"\n \n+# Start provisioning scenarios\n+\n+# This scenario needs the 15-SP2 base system channel to be synchronized\n+@long_test\n+@virthost_kvm\n+@scc_credentials\n+  Scenario: Create auto installation distribution\n+    Given I am on the Systems page\n+    When I follow the left menu \"Systems > Autoinstallation > Distributions\"\n+    And I follow \"Create Distribution\"\n+    And I enter \"SLE-15-SP2-TFTP\" as \"label\"\n+    And I enter \"/usr/share/tftpboot-installation/SLE-15-SP2-x86_64\" as \"basepath\"\n+    And I select \"SLE-Product-SLES15-SP2-Pool for x86_64\" from \"channelid\"\n+    And I select \"SUSE Linux Enterprise 15\" from \"installtype\"\n+    And I enter \"useonlinerepo insecure=1\" as \"kernelopts\"\n+    And I click on \"Create Autoinstallable Distribution\"\n+    Then I should see a \"Autoinstallable Distributions\" text\n+    And I should see a \"SLE-15-SP2-TFTP\" link\n+\n+@long_test\n+@virthost_kvm\n+@scc_credentials\n+  Scenario: Create auto installation profile\n+    Given I am on the Systems page\n+    And I follow the left menu \"Systems > Autoinstallation > Profiles\"\n+    And I follow \"Upload Kickstart/Autoyast File\"\n+    When I enter \"15-sp2-kvm\" as \"kickstartLabel\"\n+    And I select \"SLE-15-SP2-TFTP\" from \"kstreeId\"\n+    And I select \"KVM Virtualized Guest\" from \"virtualizationTypeLabel\"\n+    And I attach the file \"/sle-15-sp2-autoyast.xml\" to \"fileUpload\"\n+    And I click on \"Create\"\n+    Then I should see a \"Autoinstallation: 15-sp2-kvm\" text\n+    And I should see a \"Autoinstallation Details\" text\n+    When I enter \"self_update=0\" as \"kernel_options\"\n+    And I click on \"Update\"\n+    And I follow \"Variables\"\n+    And I enter \"distrotree=SLE-15-SP2-TFTP\\nregistration_key=1-SUSE-PKG-x86_64\" as \"variables\" text area\n+    And I click on \"Update Variables\"\n+    And I follow \"Autoinstallation File\"\n+    Then I should see a \"SLE-15-SP2-TFTP\" text\n+\n+@long_test\n+@virthost_kvm\n+@scc_credentials\n+  Scenario: Create an auto installing KVM virtual machine\n+    Given I am on the \"Virtualization\" page of this \"kvm_server\"\n+    When I follow \"Create Guest\"\n+    And I wait until I see \"General\" text\n+    And I enter \"test-vm2\" as \"name\"\n+    And I select \"15-sp2-kvm\" from \"cobbler_profile\"\n+    And I click on \"Create\"\n+    Then I should see a \"Hosted Virtual Systems\" text\n+    When I wait until I see \"test-vm2\" text\n+    And I wait until table row for \"test-vm2\" contains button \"Stop\"\n+    # Test the VM boot params", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMwMTk0Mw==", "bodyText": "yeah right, but that doesn't tell the reader what we expect", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508301943", "createdAt": "2020-10-20T08:19:42Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/secondary/minkvm_guests.feature", "diffHunk": "@@ -342,6 +342,95 @@ Feature: Be able to manage KVM virtual machines via the GUI\n     Then I wait until I do not see \"test-net1\" text\n     And I should not see a \"test-net1\" virtual network on \"kvm_server\"\n \n+# Start provisioning scenarios\n+\n+# This scenario needs the 15-SP2 base system channel to be synchronized\n+@long_test\n+@virthost_kvm\n+@scc_credentials\n+  Scenario: Create auto installation distribution\n+    Given I am on the Systems page\n+    When I follow the left menu \"Systems > Autoinstallation > Distributions\"\n+    And I follow \"Create Distribution\"\n+    And I enter \"SLE-15-SP2-TFTP\" as \"label\"\n+    And I enter \"/usr/share/tftpboot-installation/SLE-15-SP2-x86_64\" as \"basepath\"\n+    And I select \"SLE-Product-SLES15-SP2-Pool for x86_64\" from \"channelid\"\n+    And I select \"SUSE Linux Enterprise 15\" from \"installtype\"\n+    And I enter \"useonlinerepo insecure=1\" as \"kernelopts\"\n+    And I click on \"Create Autoinstallable Distribution\"\n+    Then I should see a \"Autoinstallable Distributions\" text\n+    And I should see a \"SLE-15-SP2-TFTP\" link\n+\n+@long_test\n+@virthost_kvm\n+@scc_credentials\n+  Scenario: Create auto installation profile\n+    Given I am on the Systems page\n+    And I follow the left menu \"Systems > Autoinstallation > Profiles\"\n+    And I follow \"Upload Kickstart/Autoyast File\"\n+    When I enter \"15-sp2-kvm\" as \"kickstartLabel\"\n+    And I select \"SLE-15-SP2-TFTP\" from \"kstreeId\"\n+    And I select \"KVM Virtualized Guest\" from \"virtualizationTypeLabel\"\n+    And I attach the file \"/sle-15-sp2-autoyast.xml\" to \"fileUpload\"\n+    And I click on \"Create\"\n+    Then I should see a \"Autoinstallation: 15-sp2-kvm\" text\n+    And I should see a \"Autoinstallation Details\" text\n+    When I enter \"self_update=0\" as \"kernel_options\"\n+    And I click on \"Update\"\n+    And I follow \"Variables\"\n+    And I enter \"distrotree=SLE-15-SP2-TFTP\\nregistration_key=1-SUSE-PKG-x86_64\" as \"variables\" text area\n+    And I click on \"Update Variables\"\n+    And I follow \"Autoinstallation File\"\n+    Then I should see a \"SLE-15-SP2-TFTP\" text\n+\n+@long_test\n+@virthost_kvm\n+@scc_credentials\n+  Scenario: Create an auto installing KVM virtual machine\n+    Given I am on the \"Virtualization\" page of this \"kvm_server\"\n+    When I follow \"Create Guest\"\n+    And I wait until I see \"General\" text\n+    And I enter \"test-vm2\" as \"name\"\n+    And I select \"15-sp2-kvm\" from \"cobbler_profile\"\n+    And I click on \"Create\"\n+    Then I should see a \"Hosted Virtual Systems\" text\n+    When I wait until I see \"test-vm2\" text\n+    And I wait until table row for \"test-vm2\" contains button \"Stop\"\n+    # Test the VM boot params", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MzU4OA=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzg4ODI2OnYy", "diffSide": "RIGHT", "path": "testsuite/features/step_definitions/command_steps.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzozNzoyM1rOHkuoPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODoyMDowM1rOHkwTfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NDc0OA==", "bodyText": "Well... as you have the info already... why not offer the valures of those booleans into the raised message?", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508274748", "createdAt": "2020-10-20T07:37:23Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/step_definitions/command_steps.rb", "diffHunk": "@@ -1201,6 +1201,38 @@\n   end\n end\n \n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should boot using autoyast$/) do |vm, host|\n+  node = get_target(host)\n+  output, _code = node.run(\"virsh dumpxml #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  has_kernel = tree.xpath(\"//os/kernel\").size == 1\n+  has_initrd = tree.xpath(\"//os/initrd\").size == 1\n+  has_autoyast = tree.xpath(\"//os/cmdline\")[0].to_s.include? ' autoyast='\n+  raise 'Wrong kernel/initrd/cmdline configuration' unless has_kernel && \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMwMjIwNQ==", "bodyText": "good point", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508302205", "createdAt": "2020-10-20T08:20:03Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/step_definitions/command_steps.rb", "diffHunk": "@@ -1201,6 +1201,38 @@\n   end\n end\n \n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should boot using autoyast$/) do |vm, host|\n+  node = get_target(host)\n+  output, _code = node.run(\"virsh dumpxml #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  has_kernel = tree.xpath(\"//os/kernel\").size == 1\n+  has_initrd = tree.xpath(\"//os/initrd\").size == 1\n+  has_autoyast = tree.xpath(\"//os/cmdline\")[0].to_s.include? ' autoyast='\n+  raise 'Wrong kernel/initrd/cmdline configuration' unless has_kernel && \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NDc0OA=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzg5MTgyOnYy", "diffSide": "RIGHT", "path": "testsuite/features/step_definitions/command_steps.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzozODoyMlrOHkuqcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNToyMToyNlrOHmnKag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NTMxNA==", "bodyText": "Use single quotes if there is nothing to escape or a variable involved.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508275314", "createdAt": "2020-10-20T07:38:22Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/step_definitions/command_steps.rb", "diffHunk": "@@ -1201,6 +1201,38 @@\n   end\n end\n \n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should boot using autoyast$/) do |vm, host|\n+  node = get_target(host)\n+  output, _code = node.run(\"virsh dumpxml #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  has_kernel = tree.xpath(\"//os/kernel\").size == 1\n+  has_initrd = tree.xpath(\"//os/initrd\").size == 1\n+  has_autoyast = tree.xpath(\"//os/cmdline\")[0].to_s.include? ' autoyast='\n+  raise 'Wrong kernel/initrd/cmdline configuration' unless has_kernel && \\\n+                                                           has_initrd && has_autoyast\n+end\n+\n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should boot on hard disk at next start$/) do |vm, host|\n+  node = get_target(host)\n+  output, _code = node.run(\"virsh dumpxml --inactive #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  has_kernel = tree.xpath(\"//os/kernel\").size == 1\n+  has_initrd = tree.xpath(\"//os/initrd\").size == 1\n+  has_cmdline = tree.xpath(\"//os/cmdline\").size == 1\n+  raise 'Virtual machine will not boot on hard disk at next start' unless !has_kernel && \\\n+                                                                          !has_initrd && !has_cmdline\n+end\n+\n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should (not stop|stop) on reboot((?: at next start)?)$/) do |vm, host, stop, next_start|\n+  node = get_target(host)\n+  inactive = next_start == \" at next start\" ? \"--inactive\" : \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0OTU3OA==", "bodyText": "fixed", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r510249578", "createdAt": "2020-10-22T15:21:26Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/step_definitions/command_steps.rb", "diffHunk": "@@ -1201,6 +1201,38 @@\n   end\n end\n \n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should boot using autoyast$/) do |vm, host|\n+  node = get_target(host)\n+  output, _code = node.run(\"virsh dumpxml #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  has_kernel = tree.xpath(\"//os/kernel\").size == 1\n+  has_initrd = tree.xpath(\"//os/initrd\").size == 1\n+  has_autoyast = tree.xpath(\"//os/cmdline\")[0].to_s.include? ' autoyast='\n+  raise 'Wrong kernel/initrd/cmdline configuration' unless has_kernel && \\\n+                                                           has_initrd && has_autoyast\n+end\n+\n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should boot on hard disk at next start$/) do |vm, host|\n+  node = get_target(host)\n+  output, _code = node.run(\"virsh dumpxml --inactive #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  has_kernel = tree.xpath(\"//os/kernel\").size == 1\n+  has_initrd = tree.xpath(\"//os/initrd\").size == 1\n+  has_cmdline = tree.xpath(\"//os/cmdline\").size == 1\n+  raise 'Virtual machine will not boot on hard disk at next start' unless !has_kernel && \\\n+                                                                          !has_initrd && !has_cmdline\n+end\n+\n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should (not stop|stop) on reboot((?: at next start)?)$/) do |vm, host, stop, next_start|\n+  node = get_target(host)\n+  inactive = next_start == \" at next start\" ? \"--inactive\" : \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NTMxNA=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzg5ODQwOnYy", "diffSide": "RIGHT", "path": "testsuite/features/step_definitions/command_steps.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo0MDoxMFrOHkuueg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNToyMTozNFrOHmnK6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NjM0Ng==", "bodyText": "Same here, we have information to provide the users to better understand why we raised that error, let's offer on_reboot value.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508276346", "createdAt": "2020-10-20T07:40:10Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/step_definitions/command_steps.rb", "diffHunk": "@@ -1201,6 +1201,38 @@\n   end\n end\n \n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should boot using autoyast$/) do |vm, host|\n+  node = get_target(host)\n+  output, _code = node.run(\"virsh dumpxml #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  has_kernel = tree.xpath(\"//os/kernel\").size == 1\n+  has_initrd = tree.xpath(\"//os/initrd\").size == 1\n+  has_autoyast = tree.xpath(\"//os/cmdline\")[0].to_s.include? ' autoyast='\n+  raise 'Wrong kernel/initrd/cmdline configuration' unless has_kernel && \\\n+                                                           has_initrd && has_autoyast\n+end\n+\n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should boot on hard disk at next start$/) do |vm, host|\n+  node = get_target(host)\n+  output, _code = node.run(\"virsh dumpxml --inactive #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  has_kernel = tree.xpath(\"//os/kernel\").size == 1\n+  has_initrd = tree.xpath(\"//os/initrd\").size == 1\n+  has_cmdline = tree.xpath(\"//os/cmdline\").size == 1\n+  raise 'Virtual machine will not boot on hard disk at next start' unless !has_kernel && \\\n+                                                                          !has_initrd && !has_cmdline\n+end\n+\n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should (not stop|stop) on reboot((?: at next start)?)$/) do |vm, host, stop, next_start|\n+  node = get_target(host)\n+  inactive = next_start == \" at next start\" ? \"--inactive\" : \"\"\n+  output, _code = node.run(\"virsh dumpxml #{inactive} #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  on_reboot = tree.xpath(\"//on_reboot\")[0].to_s\n+  raise \"Invalid reboot configuration #{next_start}\" unless />destroy</.match(on_reboot) && stop == \"stop\" || \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0OTcwNg==", "bodyText": "fixed", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r510249706", "createdAt": "2020-10-22T15:21:34Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/step_definitions/command_steps.rb", "diffHunk": "@@ -1201,6 +1201,38 @@\n   end\n end\n \n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should boot using autoyast$/) do |vm, host|\n+  node = get_target(host)\n+  output, _code = node.run(\"virsh dumpxml #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  has_kernel = tree.xpath(\"//os/kernel\").size == 1\n+  has_initrd = tree.xpath(\"//os/initrd\").size == 1\n+  has_autoyast = tree.xpath(\"//os/cmdline\")[0].to_s.include? ' autoyast='\n+  raise 'Wrong kernel/initrd/cmdline configuration' unless has_kernel && \\\n+                                                           has_initrd && has_autoyast\n+end\n+\n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should boot on hard disk at next start$/) do |vm, host|\n+  node = get_target(host)\n+  output, _code = node.run(\"virsh dumpxml --inactive #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  has_kernel = tree.xpath(\"//os/kernel\").size == 1\n+  has_initrd = tree.xpath(\"//os/initrd\").size == 1\n+  has_cmdline = tree.xpath(\"//os/cmdline\").size == 1\n+  raise 'Virtual machine will not boot on hard disk at next start' unless !has_kernel && \\\n+                                                                          !has_initrd && !has_cmdline\n+end\n+\n+Then(/^\"([^\"]*)\" virtual machine on \"([^\"]*)\" should (not stop|stop) on reboot((?: at next start)?)$/) do |vm, host, stop, next_start|\n+  node = get_target(host)\n+  inactive = next_start == \" at next start\" ? \"--inactive\" : \"\"\n+  output, _code = node.run(\"virsh dumpxml #{inactive} #{vm}\")\n+  tree = Nokogiri::XML(output)\n+  on_reboot = tree.xpath(\"//on_reboot\")[0].to_s\n+  raise \"Invalid reboot configuration #{next_start}\" unless />destroy</.match(on_reboot) && stop == \"stop\" || \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NjM0Ng=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzkwMDIxOnYy", "diffSide": "RIGHT", "path": "testsuite/features/step_definitions/common_steps.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo0MDozOVrOHkuvmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo0MDozOVrOHkuvmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NjYzNQ==", "bodyText": "very nice thanks :)", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508276635", "createdAt": "2020-10-20T07:40:39Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -456,10 +456,10 @@\n   find(css).set(PACKAGE_BY_CLIENT[client])\n end\n \n-When(/^I select \"([^\\\"]*)\" as a product$/) do |product|\n+When(/^I (deselect|select) \"([^\\\"]*)\" as a product$/) do |select, product|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzkyMjUyOnYy", "diffSide": "RIGHT", "path": "testsuite/features/step_definitions/common_steps.rb", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo0NjowNlrOHku9Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTowMjoxM1rOHmmSMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4MDA2Ng==", "bodyText": "I'm not very happy with this way of checking added channels, but... not for this PR.\nI would instead have a unique step definition, with a product name variable, then a map, where the product is the key and the list of channels are the value, and we just iterate on them.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508280066", "createdAt": "2020-10-20T07:46:06Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -546,6 +546,14 @@\n   raise unless output[:stdout].include? '[I] SLE-Module-Server-Applications15-Pool for x86_64 Server Applications Module 15 x86_64 [sle-module-server-applications15-pool-x86_64]'\n end\n \n+Then(/^the SLE15SP2 base products should be added$/) do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIwOTA2Mg==", "bodyText": "I'll let you implement that change later then \ud83d\ude09", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r510209062", "createdAt": "2020-10-22T14:29:29Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -546,6 +546,14 @@\n   raise unless output[:stdout].include? '[I] SLE-Module-Server-Applications15-Pool for x86_64 Server Applications Module 15 x86_64 [sle-module-server-applications15-pool-x86_64]'\n end\n \n+Then(/^the SLE15SP2 base products should be added$/) do", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4MDA2Ng=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzNTE4Nw==", "bodyText": "SUSE/spacewalk#12837", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r510235187", "createdAt": "2020-10-22T15:02:13Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -546,6 +546,14 @@\n   raise unless output[:stdout].include? '[I] SLE-Module-Server-Applications15-Pool for x86_64 Server Applications Module 15 x86_64 [sle-module-server-applications15-pool-x86_64]'\n end\n \n+Then(/^the SLE15SP2 base products should be added$/) do", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4MDA2Ng=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzkzNzA4OnYy", "diffSide": "RIGHT", "path": "testsuite/features/step_definitions/navigation_steps.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo0OTo0MFrOHkvFqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODoyMToyMVrOHkwXSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4MjI4Mg==", "bodyText": "Take into account it will the default timeout on this find. Probably good, but just saying.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508282282", "createdAt": "2020-10-20T07:49:40Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/step_definitions/navigation_steps.rb", "diffHunk": "@@ -112,12 +112,23 @@\n \n Then(/^I wait until I see the (VNC|spice) graphical console$/) do |type|\n   repeat_until_timeout(message: \"The #{type} graphical console didn't load\") do\n-    break unless has_xpath?('.//canvas')\n+    break if find(:xpath, '//canvas')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMwMzE3Nw==", "bodyText": "that should give the time for the connection to be prepared and the canvas to appear", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508303177", "createdAt": "2020-10-20T08:21:21Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/step_definitions/navigation_steps.rb", "diffHunk": "@@ -112,12 +112,23 @@\n \n Then(/^I wait until I see the (VNC|spice) graphical console$/) do |type|\n   repeat_until_timeout(message: \"The #{type} graphical console didn't load\") do\n-    break unless has_xpath?('.//canvas')\n+    break if find(:xpath, '//canvas')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4MjI4Mg=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzk0Mzk3OnYy", "diffSide": "RIGHT", "path": "testsuite/features/step_definitions/navigation_steps.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo1MToxN1rOHkvJtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODoyMjowMlrOHkwY_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4MzMxOA==", "bodyText": "#{Failed to connect} very strange. What's that? A variable?", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508283318", "createdAt": "2020-10-20T07:51:17Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/step_definitions/navigation_steps.rb", "diffHunk": "@@ -112,12 +112,23 @@\n \n Then(/^I wait until I see the (VNC|spice) graphical console$/) do |type|\n   repeat_until_timeout(message: \"The #{type} graphical console didn't load\") do\n-    break unless has_xpath?('.//canvas')\n+    break if find(:xpath, '//canvas')\n+\n+    # If the connection failed try reloading since the VM may not have been ready\n+    if find(:xpath, \"//*[contains(@class, \\\"modal-title\\\") and text() = '#{Failed to connect}']\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMwMzYxNA==", "bodyText": "arf, no... it's a reminder of a previous step iteration: I'll make it a real string", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508303614", "createdAt": "2020-10-20T08:22:02Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/step_definitions/navigation_steps.rb", "diffHunk": "@@ -112,12 +112,23 @@\n \n Then(/^I wait until I see the (VNC|spice) graphical console$/) do |type|\n   repeat_until_timeout(message: \"The #{type} graphical console didn't load\") do\n-    break unless has_xpath?('.//canvas')\n+    break if find(:xpath, '//canvas')\n+\n+    # If the connection failed try reloading since the VM may not have been ready\n+    if find(:xpath, \"//*[contains(@class, \\\"modal-title\\\") and text() = '#{Failed to connect}']\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4MzMxOA=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzk1NTMyOnYy", "diffSide": "RIGHT", "path": "testsuite/features/step_definitions/navigation_steps.rb", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo1Mzo1OVrOHkvQtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTo0OTowMVrOHmd1Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4NTEwOQ==", "bodyText": "I discourage the use of direct URI, if there is a way to navigate through the menus, better use it, if not then fine.", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508285109", "createdAt": "2020-10-20T07:53:59Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/step_definitions/navigation_steps.rb", "diffHunk": "@@ -549,6 +564,10 @@\n   visit(\"https://#{$server.full_hostname}/rhn/kickstart/KickstartOverview.do\")\n end\n \n+When(/^I am on Autoinstallation Distributions page$/) do\n+  visit(\"https://#{$server.full_hostname}/rhn/kickstart/ViewTrees.do\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMwMzkxMQ==", "bodyText": "Just copy pasted from another test :)", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508303911", "createdAt": "2020-10-20T08:22:28Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/step_definitions/navigation_steps.rb", "diffHunk": "@@ -549,6 +564,10 @@\n   visit(\"https://#{$server.full_hostname}/rhn/kickstart/KickstartOverview.do\")\n end\n \n+When(/^I am on Autoinstallation Distributions page$/) do\n+  visit(\"https://#{$server.full_hostname}/rhn/kickstart/ViewTrees.do\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4NTEwOQ=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA5NjcyNg==", "bodyText": "This is a remnant from a previous attempt, will remove the step as it's no longer used", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r510096726", "createdAt": "2020-10-22T11:49:01Z", "author": {"login": "cbosdo"}, "path": "testsuite/features/step_definitions/navigation_steps.rb", "diffHunk": "@@ -549,6 +564,10 @@\n   visit(\"https://#{$server.full_hostname}/rhn/kickstart/KickstartOverview.do\")\n end\n \n+When(/^I am on Autoinstallation Distributions page$/) do\n+  visit(\"https://#{$server.full_hostname}/rhn/kickstart/ViewTrees.do\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4NTEwOQ=="}, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzk2MjExOnYy", "diffSide": "RIGHT", "path": "testsuite/features/support/twopence_init.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo1NTo0M1rOHkvU3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo1NTo0M1rOHkvU3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4NjE3Mg==", "bodyText": "Many thanks! :)", "url": "https://github.com/uyuni-project/uyuni/pull/2665#discussion_r508286172", "createdAt": "2020-10-20T07:55:43Z", "author": {"login": "srbarrios"}, "path": "testsuite/features/support/twopence_init.rb", "diffHunk": "@@ -129,6 +129,9 @@ def get_target(host)\n # * for the PXE booted clients, it is derived from the branch name, the hardware type,\n #   and a fingerprint, e.g. example.Intel-Genuine-None-d6df84cca6f478cdafe824e35bbb6e3b\n def get_system_name(host)\n+  # If the system is not known, just return the parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa3f09f073239840386a3410631a43dcbee9043"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4065, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}