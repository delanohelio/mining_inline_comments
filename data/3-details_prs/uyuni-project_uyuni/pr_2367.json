{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNDAzNDcw", "number": 2367, "title": "Refactoring of the code related to maintenance windows", "bodyText": "What does this PR change?\nThe goal of this PR is mainly to split the MaintenanceManager class.\n\nmove the hibernate-related code to ScheduleFactory and CalendarFactory\nswitch from singleton/static classes to explicit instance controljk\nrenaming methods, so that the names make more sense (getting rid of smurf\ncode (listMaintenanceSchedules -> listSchedules etc.)\nextract the computation to a separate IcalUtils class (questionable)\nimprove creating RescheduleStrategy instances from string\nre-arrange code in the MaintenanceManager\nmove the rescheduling code to a separate package (we have quite some\nclasses/interfaces that deal with rescheduling)\n\nHow to review\n\n\ndo not panic: the high number of the lines is more-or-less caused by moving code around\n\n\nfirst check-out the whole thing and take a look at the new structure of the\ncom.suse.manager.maintenance package in your IDE. I'd be interested in your\nhigh-level feedback about the structure.\n\n\nthen proceed with review commit-by-commit\n\n\nplease ignore the Protected -> private in MaintenanceManager commit. It is\nreverted later, but removing these commits from the history produces\nconflicts and at this point I'm too lazy to solve them :)\n\n\nignore the Check if minion is in maintenance mode when running recurring actions commit: this is not yet merged, but I wanted to base my work on top\nof that\n\n\nGUI diff\nNo difference.\n\n DONE\n\nDocumentation\nRefactoring: no docs.\n\n DONE\n\nTest coverage\n\n\nNo tests: Refactoring\n\n\n DONE\n\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"ruby_rubocop\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-06-29T13:10:10Z", "url": "https://github.com/uyuni-project/uyuni/pull/2367", "merged": true, "mergeCommit": {"oid": "070c7639bcd123935cab09d6ae719d0d4913a4bf"}, "closed": true, "closedAt": "2020-06-30T14:47:25Z", "author": {"login": "hustodemon"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwAzPegBqjM0OTI2MzIzMTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwWZnKABqjM0OTgwMTM1OTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f604a73f19e8ee097c8f3e860d918428a05dd32d", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f604a73f19e8ee097c8f3e860d918428a05dd32d", "committedDate": "2020-06-29T12:58:52Z", "message": "Refactor: Better naming for methods"}, "afterCommit": {"oid": "cb4ed69f2c762e7470262f983b06f04c879fce4f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cb4ed69f2c762e7470262f983b06f04c879fce4f", "committedDate": "2020-06-29T13:08:52Z", "message": "Refactor: Better naming for methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb4ed69f2c762e7470262f983b06f04c879fce4f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cb4ed69f2c762e7470262f983b06f04c879fce4f", "committedDate": "2020-06-29T13:08:52Z", "message": "Refactor: Better naming for methods"}, "afterCommit": {"oid": "1513e323237fdb02e30a377ae8020619534b2623", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1513e323237fdb02e30a377ae8020619534b2623", "committedDate": "2020-06-29T13:23:39Z", "message": "Refactor: Better naming for methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1513e323237fdb02e30a377ae8020619534b2623", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1513e323237fdb02e30a377ae8020619534b2623", "committedDate": "2020-06-29T13:23:39Z", "message": "Refactor: Better naming for methods"}, "afterCommit": {"oid": "5f140721f0fb0a206aef2024b4810af89856ce19", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5f140721f0fb0a206aef2024b4810af89856ce19", "committedDate": "2020-06-29T13:33:13Z", "message": "Refactor: Better naming for methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MjYxMzEx", "url": "https://github.com/uyuni-project/uyuni/pull/2367#pullrequestreview-439261311", "createdAt": "2020-06-29T15:30:04Z", "commit": {"oid": "976bc3c49ee295ebc03c5ad6ed4042fe6ac39995"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozMDowNFrOGqWXKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozMDowNFrOGqWXKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1OTc1Mw==", "bodyText": "This give a warning in eclipse as \"m\" is a full minion object and we check a List<Long>.contains(Minion)", "url": "https://github.com/uyuni-project/uyuni/pull/2367#discussion_r447059753", "createdAt": "2020-06-29T15:30:04Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -777,90 +640,67 @@ public boolean isActionInMaintenanceWindow(Action action, MaintenanceSchedule sc\n         return false;\n     }\n \n-    private Collection<CalendarComponent> getScheduleEventsAtDate(\n-            Date date, MaintenanceSchedule schedule, Optional<Calendar> calendarOpt) {\n-        if (calendarOpt.isEmpty()) {\n-            return emptySet();\n-        }\n-\n-        Period p = new Period(new DateTime(date), java.time.Duration.ofSeconds(1));\n-        ArrayList<Predicate<Component>> rules = new ArrayList<>();\n-        rules.add(new PeriodRule<>(p));\n-\n-        if (schedule.getScheduleType().equals(ScheduleType.MULTI)) {\n-            Summary summary = new Summary(schedule.getName());\n-            HasPropertyRule<Component> propertyRule = new HasPropertyRule<>(summary);\n-            rules.add(propertyRule);\n-        }\n-        @SuppressWarnings(\"unchecked\")\n-        Predicate<CalendarComponent>[] comArr = new Predicate[rules.size()];\n-        comArr = rules.toArray(comArr);\n-\n-        Filter<CalendarComponent> filter = new Filter<>(comArr, Filter.MATCH_ALL);\n-\n-        return filter.filter(calendarOpt.get().getComponents(Component.VEVENT));\n+    private Collection<CalendarComponent> getCalendarForNow(MaintenanceSchedule ms) {\n+        return ms.getCalendarOpt()\n+                .map(cal -> icalUtils.getCalendarEventsAtDate(\n+                        new Date(), icalUtils.parseCalendar(cal),\n+                        getScheduleNameForMulti(ms)))\n+                .orElse(Collections.emptyList());\n     }\n \n     /**\n-     * Assign {@link MaintenanceSchedule} to given set of {@link Server}s.\n+     * Check if system is in maintenance mode\n      *\n-     * @param user the user\n-     * @param schedule the {@link MaintenanceSchedule}\n-     * @param systemIds the set of {@link Server} IDs\n-     * @throws PermissionException if the user does not have access to given servers\n-     * @throws IllegalArgumentException if systems have pending maintenance-only actions\n-     * @return the number of involved {@link Server}s\n+     * @param server the server to check\n+     * @return true when the action is inside of a maintenance window, otherwise falsegg\n      */\n-    public int assignScheduleToSystems(User user, MaintenanceSchedule schedule, Set<Long> systemIds) {\n-        ensureOrgAdmin(user);\n-        ensureSystemsAccessible(user, systemIds);\n-        ensureScheduleAccessible(user, schedule);\n-\n-        Set<Long> withMaintenanceActions = ServerFactory.filterSystemsWithPendingMaintOnlyActions(systemIds);\n-        if (!withMaintenanceActions.isEmpty()) {\n-            throw new IllegalArgumentException(\"Systems have pending maintenance-only actions:\" +\n-                    withMaintenanceActions);\n-        }\n-\n-        return ServerFactory.setMaintenanceScheduleToSystems(schedule, systemIds);\n+    public boolean isSystemInMaintenanceMode(MinionServer server) {\n+        return server.getMaintenanceScheduleOpt()\n+                .map(schedule -> !getCalendarForNow(schedule).isEmpty())\n+                .orElse(true);\n     }\n \n     /**\n-     * Retract {@link MaintenanceSchedule} from given set of {@link Server}s.\n+     * Given a list of minions, sorts by maintenance mode status, logs skipped minions\n      *\n-     * @param user the user\n-     * @param systemIds the set of {@link Server} IDs\n-     * @throws PermissionException if the user does not have access to given servers\n-     * @return the number of involved {@link Server}s\n-     */\n-    public int retractScheduleFromSystems(User user, Set<Long> systemIds) {\n-        ensureOrgAdmin(user);\n-        ensureSystemsAccessible(user, systemIds);\n+     * @param minions servers to check\n+     * @return List of minions in maintenance mode\n+     */\n+    public List<Long> systemIdsMaintenanceMode(List<MinionServer> minions) {\n+        Set<MaintenanceSchedule> schedulesInMaintMode = minions.stream()\n+                .flatMap(minion -> minion.getMaintenanceScheduleOpt().stream())\n+                .distinct()\n+                .filter(sched -> !getCalendarForNow(sched).isEmpty())\n+                .collect(Collectors.toSet());\n+\n+        List<Long> minionsInMaintMode = minions.stream()\n+                .filter(minion -> minion.getMaintenanceScheduleOpt()\n+                .map(sched -> schedulesInMaintMode.contains(sched)) // keep minions that have maintenance mode\n+                .orElse(true)) // or that have no maintenance schedule whatsoever\n+                .map(minion -> minion.getId())\n+                .collect(toList());\n \n-        return ServerFactory.setMaintenanceScheduleToSystems(null, systemIds);\n+         List<MinionServer> logList = minions.stream()\n+                 .filter(m -> !minionsInMaintMode.contains(m))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "976bc3c49ee295ebc03c5ad6ed4042fe6ac39995"}, "originalPosition": 963}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MjYzMjYx", "url": "https://github.com/uyuni-project/uyuni/pull/2367#pullrequestreview-439263261", "createdAt": "2020-06-29T15:32:10Z", "commit": {"oid": "976bc3c49ee295ebc03c5ad6ed4042fe6ac39995"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozMjoxMFrOGqWdEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozMjoxMFrOGqWdEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2MTI2Nw==", "bodyText": "As this is now in CalendarFactory why is \"Calendar\" in the method name? I think this can refactored as well.", "url": "https://github.com/uyuni-project/uyuni/pull/2367#discussion_r447061267", "createdAt": "2020-06-29T15:32:10Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/maintenance/factory/CalendarFactory.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.maintenance.factory;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.domain.user.User;\n+\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * {@link HibernateFactory} for {@link MaintenanceCalendar}\n+ */\n+public class CalendarFactory extends HibernateFactory {\n+\n+    private static Logger log = Logger.getLogger(CalendarFactory.class);\n+\n+    /**\n+     * Save a MaintenanceCalendar\n+     * @param calendar the calendar\n+     */\n+    public void save(MaintenanceCalendar calendar) {\n+        getSession().save(calendar);\n+    }\n+\n+    /**\n+     * Remove a {@link MaintenanceCalendar}\n+     * @param calendar to remove\n+     */\n+    public void remove(MaintenanceCalendar calendar) {\n+        removeObject(calendar);\n+    }\n+\n+    /**\n+     * List Maintenance Calendar Labels belonging to the given User\n+     * @param user the user\n+     * @return a list of Calendar labels\n+     */\n+    public List<String> listCalendarLabelsByUser(User user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "976bc3c49ee295ebc03c5ad6ed4042fe6ac39995"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MjY0MDE2", "url": "https://github.com/uyuni-project/uyuni/pull/2367#pullrequestreview-439264016", "createdAt": "2020-06-29T15:32:56Z", "commit": {"oid": "976bc3c49ee295ebc03c5ad6ed4042fe6ac39995"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozMjo1N1rOGqWfNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozMjo1N1rOGqWfNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2MTgxNA==", "bodyText": "Same as in CalendarFactory: as we are in ScheduleFactory, we do not need the word Schedule in the method name.", "url": "https://github.com/uyuni-project/uyuni/pull/2367#discussion_r447061814", "createdAt": "2020-06-29T15:32:57Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/maintenance/factory/ScheduleFactory.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.maintenance.factory;\n+\n+import static java.util.Collections.emptySet;\n+import static java.util.stream.Collectors.toSet;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.domain.user.User;\n+\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * {@link HibernateFactory} for Maintenance Windows-related objects.\n+ */\n+public class ScheduleFactory extends HibernateFactory {\n+\n+    private static Logger log = Logger.getLogger(ScheduleFactory.class);\n+\n+    /**\n+     * Save a MaintenanceSchedule\n+     * @param schedule the schedule\n+     */\n+    public void save(MaintenanceSchedule schedule) {\n+        saveObject(schedule);\n+    }\n+\n+    /**\n+     * Remove a {@link MaintenanceSchedule}\n+     * @param schedule to remove\n+     */\n+    public void remove(MaintenanceSchedule schedule) {\n+        removeObject(schedule);\n+    }\n+\n+    /**\n+     * List schedules by User and Calendar\n+     * @param user the User\n+     * @param calendar the Calendar\n+     * @return the list of Schedules\n+     */\n+    public List<MaintenanceSchedule> listSchedulesByUserAndCalendar(User user, MaintenanceCalendar calendar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "976bc3c49ee295ebc03c5ad6ed4042fe6ac39995"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzU4NTU4", "url": "https://github.com/uyuni-project/uyuni/pull/2367#pullrequestreview-439758558", "createdAt": "2020-06-30T07:52:26Z", "commit": {"oid": "85bd9b7329f088d7de572ed1023cea57bced63aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1MjoyNlrOGqwMhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1MjoyNlrOGqwMhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MzAxMg==", "bodyText": "I guess that one slipped through the net ;)", "url": "https://github.com/uyuni-project/uyuni/pull/2367#discussion_r447483012", "createdAt": "2020-06-30T07:52:26Z", "author": {"login": "parlt91"}, "path": "java/code/src/com/suse/manager/maintenance/IcalUtils.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.maintenance;\n+\n+import static java.util.Collections.emptySet;\n+import static java.util.Optional.empty;\n+import static java.util.Optional.of;\n+import static java.util.Optional.ofNullable;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import net.fortuna.ical4j.data.CalendarBuilder;\n+import net.fortuna.ical4j.data.ParserException;\n+import net.fortuna.ical4j.filter.Filter;\n+import net.fortuna.ical4j.filter.HasPropertyRule;\n+import net.fortuna.ical4j.filter.PeriodRule;\n+import net.fortuna.ical4j.model.Calendar;\n+import net.fortuna.ical4j.model.Component;\n+import net.fortuna.ical4j.model.ComponentList;\n+import net.fortuna.ical4j.model.DateTime;\n+import net.fortuna.ical4j.model.Period;\n+import net.fortuna.ical4j.model.PeriodList;\n+import net.fortuna.ical4j.model.component.CalendarComponent;\n+import net.fortuna.ical4j.model.property.Summary;\n+\n+/**\n+ * Computation related to the ICalendar objects\n+ */\n+public class IcalUtils {\n+\n+    private static Logger log = Logger.getLogger(IcalUtils.class);\n+\n+    /**\n+     * Given MaintenanceSchedule calculate upcoming maintenance windows\n+     *\n+     * The windows are returned as a list of triples consisting of:\n+     * - window start date as a human-readable string\n+     * - window end date as a human-readable string\n+     * - start date as number of milliseconds since the epoch\n+     *\n+     * The formatting is done by {@link LocalizationService}.\n+     *\n+     * The upper limit of returned maintenance windows is currently hardcoded to 10.\n+     *\n+     * @param schedule the given MaintenanceSchedule\n+     * @return the optional upcoming maintenance windows\n+     */\n+    public Optional<List<MaintenanceWindowData>> calculateUpcomingMaintenanceWindows(MaintenanceSchedule schedule) {\n+        Optional<String> multiScheduleName = getScheduleNameForMulti(schedule);\n+\n+        Stream<Pair<Instant, Instant>> periodStream = schedule.getCalendarOpt()\n+                .flatMap(c -> parseCalendar(c))\n+                .map(c -> calculateUpcomingPeriods(c, multiScheduleName, Instant.now(), 10))\n+                .orElseGet(Stream::empty);\n+\n+        List<MaintenanceWindowData> result = periodStream\n+                .map(p -> new MaintenanceWindowData(p.getLeft(), p.getRight()))\n+                .collect(toList());\n+        return of(result);\n+    }\n+\n+    /**\n+     * Convenience method: return schedule name if the schedule type is MULTI, return empty otherwise\n+     * @param schedule the schedule\n+     * @return optional of schedule name\n+     */\n+    private static Optional<String> getScheduleNameForMulti(MaintenanceSchedule schedule) {\n+        if (schedule.getScheduleType() == MaintenanceSchedule.ScheduleType.MULTI) {\n+            return of(schedule.getName());\n+        }\n+        return empty();\n+    }\n+\n+    /**\n+     * THIS IS ONLY PUBLIC FOR TESTING.\n+     *\n+     * Calculate upcoming maintenance windows starting from given date based on calendar and optional filter name\n+     * (in case we're dealing with MULTI calendar and want to filter only events we're interested in).\n+     *\n+     * The algorithm only checks maintenance windows within roughly a year and a month since the startDate.\n+     *\n+     * @param calendar the {@link Calendar}\n+     * @param eventName for MULTI calendars: only deal with events with this name, filter out the rest\n+     * @param startDate the start date\n+     * @param limit upper limit of maintenance windows to return\n+     * @return the list of upcoming maintenance windows\n+     */\n+    public Stream<Pair<Instant, Instant>> calculateUpcomingPeriods(Calendar calendar, Optional<String> eventName,\n+            Instant startDate, int limit) {\n+        ComponentList<CalendarComponent> allEvents = calendar.getComponents(Component.VEVENT);\n+\n+        Collection<CalendarComponent> filteredEvents = eventName.map(name -> {\n+            Predicate<CalendarComponent> summary = c -> c.getProperty(\"SUMMARY\").equals(name);\n+            Predicate<CalendarComponent>[] ps = new Predicate[]{summary};\n+            Filter<CalendarComponent> filter = new Filter<>(ps, Filter.MATCH_ALL);\n+            return filter.filter(allEvents);\n+        }).orElse(allEvents);\n+\n+        // we will look a year and month to the future\n+        Period period = new Period(new DateTime(startDate.toEpochMilli()), Duration.ofDays(365 + 31));\n+\n+        List<PeriodList> periodLists = filteredEvents.stream()\n+                .map(c -> c.calculateRecurrenceSet(period))\n+                .filter(l -> !l.isEmpty())\n+                .collect(toList());\n+\n+        Stream<Pair<Instant, Instant>> sortedLimited = periodLists.stream()\n+                .map(pl -> pl.stream())\n+                .reduce(Stream.empty(), Stream::concat)\n+                .sorted()\n+                .limit(limit)\n+                .map(p -> Pair.of(p.getStart().toInstant(), p.getRangeEnd().toInstant()));\n+\n+        return sortedLimited;\n+    }\n+\n+    /**\n+     * Get all schedules of given calendar at given date.\n+     * Filter results by summary, if the summary parameter is passed.\n+     *\n+     * @param date the date\n+     * @param calendar the calendar\n+     * @param summary event summary\n+     * @return the collection of calendars components matching given date (and optionally summary)\n+     */\n+    public Collection<CalendarComponent> getCalendarEventsAtDate(Date date, Optional<Calendar> calendar,\n+            Optional<String> summary) {\n+        if (calendar.isEmpty()) {\n+            return emptySet();\n+        }\n+\n+        Period p = new Period(new DateTime(date), java.time.Duration.ofSeconds(1));\n+        ArrayList<Predicate<Component>> rules = new ArrayList<>();\n+        rules.add(new PeriodRule<>(p));\n+\n+        summary.ifPresent(s -> {\n+            Summary filterSummary = new Summary(s);\n+            HasPropertyRule<Component> propertyRule = new HasPropertyRule<>(filterSummary);\n+            rules.add(propertyRule);\n+        });\n+\n+        @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85bd9b7329f088d7de572ed1023cea57bced63aa"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTE5MzU4", "url": "https://github.com/uyuni-project/uyuni/pull/2367#pullrequestreview-439919358", "createdAt": "2020-06-30T11:23:47Z", "commit": {"oid": "195e22cc1952543800bfdcb905317791b270920e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDA5MzE1", "url": "https://github.com/uyuni-project/uyuni/pull/2367#pullrequestreview-440009315", "createdAt": "2020-06-30T13:24:27Z", "commit": {"oid": "195e22cc1952543800bfdcb905317791b270920e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoyNDoyN1rOGq8I6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoyNjoxOFrOGq8Obg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3ODY5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<String> listCalendarLabelsByUser(User user) {\n          \n          \n            \n                public List<String> listLabelsByUser(User user) {\n          \n      \n    \n    \n  \n\nOr was Calendar left here for a reason?", "url": "https://github.com/uyuni-project/uyuni/pull/2367#discussion_r447678697", "createdAt": "2020-06-30T13:24:27Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/model/maintenance/CalendarFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.model.maintenance;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.domain.user.User;\n+\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * {@link HibernateFactory} for {@link MaintenanceCalendar}\n+ */\n+public class CalendarFactory extends HibernateFactory {\n+\n+    private static Logger log = Logger.getLogger(CalendarFactory.class);\n+\n+    /**\n+     * Save a MaintenanceCalendar\n+     * @param calendar the calendar\n+     */\n+    public void save(MaintenanceCalendar calendar) {\n+        getSession().save(calendar);\n+    }\n+\n+    /**\n+     * Remove a {@link MaintenanceCalendar}\n+     * @param calendar to remove\n+     */\n+    public void remove(MaintenanceCalendar calendar) {\n+        removeObject(calendar);\n+    }\n+\n+    /**\n+     * List Maintenance Calendar Labels belonging to the given User\n+     * @param user the user\n+     * @return a list of Calendar labels\n+     */\n+    public List<String> listCalendarLabelsByUser(User user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "195e22cc1952543800bfdcb905317791b270920e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4MDExMA==", "bodyText": "Is Schedule still here for a reason?", "url": "https://github.com/uyuni-project/uyuni/pull/2367#discussion_r447680110", "createdAt": "2020-06-30T13:26:18Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/model/maintenance/ScheduleFactory.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.model.maintenance;\n+\n+import static java.util.Collections.emptySet;\n+import static java.util.stream.Collectors.toSet;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.domain.user.User;\n+\n+import org.apache.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * {@link HibernateFactory} for Maintenance Windows-related objects.\n+ */\n+public class ScheduleFactory extends HibernateFactory {\n+\n+    private static Logger log = Logger.getLogger(ScheduleFactory.class);\n+\n+    /**\n+     * Save a MaintenanceSchedule\n+     * @param schedule the schedule\n+     */\n+    public void save(MaintenanceSchedule schedule) {\n+        saveObject(schedule);\n+    }\n+\n+    /**\n+     * Remove a {@link MaintenanceSchedule}\n+     * @param schedule to remove\n+     */\n+    public void remove(MaintenanceSchedule schedule) {\n+        removeObject(schedule);\n+    }\n+\n+    /**\n+     * List schedules by User and Calendar\n+     * @param user the User\n+     * @param calendar the Calendar\n+     * @return the list of Schedules\n+     */\n+    public List<MaintenanceSchedule> listByUserAndCalendar(User user, MaintenanceCalendar calendar) {\n+        return getSession()\n+                .createQuery(\"FROM MaintenanceSchedule \" +\n+                        \"WHERE org = :org and calendar = :calendar \" +\n+                        \"ORDER BY name ASC\")\n+                .setParameter(\"org\", user.getOrg())\n+                .setParameter(\"calendar\", calendar).getResultList();\n+    }\n+\n+    /**\n+     * List Maintenance Schedule Names belong to the given User\n+     * @param user the user\n+     * @return a list of Schedule names\n+     */\n+    public List<String> listScheduleNamesByUser(User user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "195e22cc1952543800bfdcb905317791b270920e"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a0b80b648bb8ba72d5a72df463f3652965b8723", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3a0b80b648bb8ba72d5a72df463f3652965b8723", "committedDate": "2020-06-30T14:19:38Z", "message": "Turn methods to static ones for consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8035ac5e02266bfcc903851b115ab3db2babaf25", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8035ac5e02266bfcc903851b115ab3db2babaf25", "committedDate": "2020-06-30T14:19:38Z", "message": "Refactor: Extract hibernate code from MaintenanceManager to MaintenanceFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d90b952f8098cbf7e6ee6e936249b87490db12", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/95d90b952f8098cbf7e6ee6e936249b87490db12", "committedDate": "2020-06-30T14:19:38Z", "message": "Protected -> private in MaintenanceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "472e78b786ccd3404fa3b3e0a979a9015463c1d2", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/472e78b786ccd3404fa3b3e0a979a9015463c1d2", "committedDate": "2020-06-30T14:19:38Z", "message": "Refactor: Move more hibernate-related methods to the MaintenanceFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77b1db53abb174f54fadd2923400e897a4ed7728", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/77b1db53abb174f54fadd2923400e897a4ed7728", "committedDate": "2020-06-30T14:19:39Z", "message": "Refactor: Get rid of 'Maintenance' in the method names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f1a844be32190de55d7d1924075971f77af6135", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8f1a844be32190de55d7d1924075971f77af6135", "committedDate": "2020-06-30T14:19:39Z", "message": "Refactor: Split the MaintenanceFactory to ScheduleFactory and CalendarFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "416929aad4969c3efaa8469fc171478ea941d8e2", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/416929aad4969c3efaa8469fc171478ea941d8e2", "committedDate": "2020-06-30T14:19:39Z", "message": "Revert: Protected -> private in MaintenanceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f0efe09ba67fcba4f6e82494bd86bed98e6e94a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8f0efe09ba67fcba4f6e82494bd86bed98e6e94a", "committedDate": "2020-06-30T14:19:39Z", "message": "Refactor: Also get rid of the useless 'Maintenance' word in the MaintenanceManager methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4de30d1b8e772bfea17e5774813b910acddc887f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4de30d1b8e772bfea17e5774813b910acddc887f", "committedDate": "2020-06-30T14:19:39Z", "message": "Refactor: Extract Ical-related methods to a separate class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfc230efeff3e98f67b536107749f2c2a8af397b", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/dfc230efeff3e98f67b536107749f2c2a8af397b", "committedDate": "2020-06-30T14:19:39Z", "message": "Refactor: Move the rescheduling-related code to a separate package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03bfe8b10b4bc8a00ba2e0b3150085d7fcca6929", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/03bfe8b10b4bc8a00ba2e0b3150085d7fcca6929", "committedDate": "2020-06-30T14:19:39Z", "message": "Adjust comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ca5ffc56c6d76576b69261c7663c0743fbc1e98", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5ca5ffc56c6d76576b69261c7663c0743fbc1e98", "committedDate": "2020-06-30T14:19:40Z", "message": "Refactor: Turn getScheduleEventsAtDate into getCalendarEventsAtDate\n\nThis slightly simplifies the intent of the method: previously, we passed\nboth schedule and calendar as params. Now we just pass calendar (and\noptionally name for filtering)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e489ab70a9941ee6b36918308b9b5990658c5d5", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8e489ab70a9941ee6b36918308b9b5990658c5d5", "committedDate": "2020-06-30T14:19:40Z", "message": "Remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "004548c1aac717f3bf3f05aefa472cc337a36c54", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/004548c1aac717f3bf3f05aefa472cc337a36c54", "committedDate": "2020-06-30T14:19:40Z", "message": "RescheduleStrategyType class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a180653b0d5b328fda34cab9610ac403615b3274", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a180653b0d5b328fda34cab9610ac403615b3274", "committedDate": "2020-06-30T14:19:40Z", "message": "Refactor: Improve the mapping of string to RescheduleStrategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce81166b0ad30c344ec4645e1dc1264347551bd3", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ce81166b0ad30c344ec4645e1dc1264347551bd3", "committedDate": "2020-06-30T14:19:40Z", "message": "Refactor: Explicitly control the lifecycle of MaintenanceManager instances"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d2db6135889c6fd2f4953f8c5213924c849e052", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1d2db6135889c6fd2f4953f8c5213924c849e052", "committedDate": "2020-06-30T14:19:40Z", "message": "Refactor: Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7a39d82abef1aa9b31d329ee9ae859f76d5ee2f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b7a39d82abef1aa9b31d329ee9ae859f76d5ee2f", "committedDate": "2020-06-30T14:19:40Z", "message": "Refactor: Re-arrange the MaintenanceManager methods\n\nThe new order:\n- the CRUD methods for schedule\n- the CRUD methods for calendar\n- rest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a5867a72b3ecf5e789a2626dac8a8aa282667d3", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8a5867a72b3ecf5e789a2626dac8a8aa282667d3", "committedDate": "2020-06-30T14:19:40Z", "message": "Correct indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "578fb0250105a418b7dfb614f258e498999244ef", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/578fb0250105a418b7dfb614f258e498999244ef", "committedDate": "2020-06-30T14:19:40Z", "message": "Refactor: Better naming for methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "912921ca2fe0b85393e2558a24e5668cae79cdd1", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/912921ca2fe0b85393e2558a24e5668cae79cdd1", "committedDate": "2020-06-30T14:19:40Z", "message": "Fix the javadoc, remove dangling comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "594c0aa72c9b27360c24833332d9406580670e87", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/594c0aa72c9b27360c24833332d9406580670e87", "committedDate": "2020-06-30T14:19:40Z", "message": "Get rid of smurf code in CalendarFactory and ScheduleFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adba0207a87421c7a5be6d5eac8aee44d5473108", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/adba0207a87421c7a5be6d5eac8aee44d5473108", "committedDate": "2020-06-30T14:19:40Z", "message": "Remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdf2b54be34df3bf491da8a4494a628ef96a4fc8", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cdf2b54be34df3bf491da8a4494a628ef96a4fc8", "committedDate": "2020-06-30T14:19:40Z", "message": "Move the maintenance factories to model package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa17acecc121934782f8ae9061cd995fa4c86e52", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fa17acecc121934782f8ae9061cd995fa4c86e52", "committedDate": "2020-06-30T14:19:40Z", "message": "Initialize static field properly"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "195e22cc1952543800bfdcb905317791b270920e", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/195e22cc1952543800bfdcb905317791b270920e", "committedDate": "2020-06-30T11:17:44Z", "message": "Initialize static field properly"}, "afterCommit": {"oid": "fa17acecc121934782f8ae9061cd995fa4c86e52", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fa17acecc121934782f8ae9061cd995fa4c86e52", "committedDate": "2020-06-30T14:19:40Z", "message": "Initialize static field properly"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1183, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}