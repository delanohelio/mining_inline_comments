{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NzQ5MDQ2", "number": 1819, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo1MTo0MVrODZxQzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo1MTo0MVrODZxQzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzQ4MTEwOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/webui/Router.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo1MTo0MVrOFgWFDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODoyMzoxM1rOFg11xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MDQ5NQ==", "bodyText": "How about organizing the removed code by route i.e. groups, systems, etc by adding new methods and calling them inside MinionsAPI.initRoutes() or calling them directly from here.", "url": "https://github.com/uyuni-project/uyuni/pull/1819#discussion_r369460495", "createdAt": "2020-01-22T09:51:41Z", "author": {"login": "mateiw"}, "path": "java/code/src/com/suse/manager/webui/Router.java", "diffHunk": "@@ -117,204 +106,49 @@ public void init() {\n         AdminApiController.initRoutes();\n \n         // Minions\n-        get(\"/manager/systems/keys\",\n-                withUserPreferences(withCsrfToken(withUser(MinionController::list))),\n-                jade);\n-        get(\"/manager/systems/bootstrap\",\n-                withCsrfToken(withOrgAdmin(MinionController::bootstrap)),\n-                jade);\n-        get(\"/manager/systems/cmd\",\n-                withCsrfToken(MinionController::cmd),\n-                jade);\n-        get(\"/manager/systems/:id\",\n-                MinionController::show);\n+        MinionController.initRoutes(jade);\n \n         // Minions API\n-        post(\"/manager/api/systems/bootstrap\", withOrgAdmin(MinionsAPI::bootstrap));\n-        post(\"/manager/api/systems/bootstrap-ssh\", withOrgAdmin(MinionsAPI::bootstrapSSH));\n-        get(\"/manager/api/systems/keys\", withUser(MinionsAPI::listKeys));\n-        post(\"/manager/api/systems/keys/:target/accept\", withOrgAdmin(MinionsAPI::accept));\n-        post(\"/manager/api/systems/keys/:target/reject\", withOrgAdmin(MinionsAPI::reject));\n-        post(\"/manager/api/systems/keys/:target/delete\", withOrgAdmin(MinionsAPI::delete));\n-\n-        // States\n-        get(\"/manager/systems/details/packages\",\n-                withCsrfToken(MinionController::packageStates),\n-                jade);\n-        get(\"/manager/systems/details/custom\",\n-                withCsrfToken(MinionController::minionCustomStates),\n-                jade);\n-        get(\"/manager/systems/details/highstate\",\n-                withCsrfToken(withUser(MinionController::highstate)),\n-                jade);\n-        get(\"/manager/multiorg/details/custom\",\n-                withCsrfToken(MinionController::orgCustomStates),\n-                jade);\n-        get(\"/manager/yourorg/custom\",\n-                withCsrfToken(withUser(MinionController::yourOrgConfigChannels)),\n-                jade);\n-        get(\"/manager/groups/details/custom\",\n-                withCsrfToken(withUser(MinionController::serverGroupConfigChannels)),\n-                jade);\n-        get(\"/manager/groups/details/highstate\",\n-                withCsrfToken(withUser(MinionController::serverGroupHighstate)), jade);\n-\n-        // SSM API\n-        get(\"/manager/systems/ssm/highstate\",\n-                withCsrfToken(withUser(MinionController::ssmHighstate)), jade);\n-        get(\"/manager/systems/ssm/channels/bases\",\n-                withUser(SsmController::getBaseChannels));\n-        post(\"/manager/systems/ssm/channels/allowed-changes\",\n-                withUser(SsmController::computeAllowedChannelChanges));\n-        post(\"/manager/systems/ssm/channels\",\n-                withUser(SsmController::changeChannels));\n+        MinionsAPI.initRoutes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b2511596a9f963fb06cb612fe668d9128f69f2"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4MDg3MQ==", "bodyText": "Split that one into private functions", "url": "https://github.com/uyuni-project/uyuni/pull/1819#discussion_r369980871", "createdAt": "2020-01-23T08:23:13Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/Router.java", "diffHunk": "@@ -117,204 +106,49 @@ public void init() {\n         AdminApiController.initRoutes();\n \n         // Minions\n-        get(\"/manager/systems/keys\",\n-                withUserPreferences(withCsrfToken(withUser(MinionController::list))),\n-                jade);\n-        get(\"/manager/systems/bootstrap\",\n-                withCsrfToken(withOrgAdmin(MinionController::bootstrap)),\n-                jade);\n-        get(\"/manager/systems/cmd\",\n-                withCsrfToken(MinionController::cmd),\n-                jade);\n-        get(\"/manager/systems/:id\",\n-                MinionController::show);\n+        MinionController.initRoutes(jade);\n \n         // Minions API\n-        post(\"/manager/api/systems/bootstrap\", withOrgAdmin(MinionsAPI::bootstrap));\n-        post(\"/manager/api/systems/bootstrap-ssh\", withOrgAdmin(MinionsAPI::bootstrapSSH));\n-        get(\"/manager/api/systems/keys\", withUser(MinionsAPI::listKeys));\n-        post(\"/manager/api/systems/keys/:target/accept\", withOrgAdmin(MinionsAPI::accept));\n-        post(\"/manager/api/systems/keys/:target/reject\", withOrgAdmin(MinionsAPI::reject));\n-        post(\"/manager/api/systems/keys/:target/delete\", withOrgAdmin(MinionsAPI::delete));\n-\n-        // States\n-        get(\"/manager/systems/details/packages\",\n-                withCsrfToken(MinionController::packageStates),\n-                jade);\n-        get(\"/manager/systems/details/custom\",\n-                withCsrfToken(MinionController::minionCustomStates),\n-                jade);\n-        get(\"/manager/systems/details/highstate\",\n-                withCsrfToken(withUser(MinionController::highstate)),\n-                jade);\n-        get(\"/manager/multiorg/details/custom\",\n-                withCsrfToken(MinionController::orgCustomStates),\n-                jade);\n-        get(\"/manager/yourorg/custom\",\n-                withCsrfToken(withUser(MinionController::yourOrgConfigChannels)),\n-                jade);\n-        get(\"/manager/groups/details/custom\",\n-                withCsrfToken(withUser(MinionController::serverGroupConfigChannels)),\n-                jade);\n-        get(\"/manager/groups/details/highstate\",\n-                withCsrfToken(withUser(MinionController::serverGroupHighstate)), jade);\n-\n-        // SSM API\n-        get(\"/manager/systems/ssm/highstate\",\n-                withCsrfToken(withUser(MinionController::ssmHighstate)), jade);\n-        get(\"/manager/systems/ssm/channels/bases\",\n-                withUser(SsmController::getBaseChannels));\n-        post(\"/manager/systems/ssm/channels/allowed-changes\",\n-                withUser(SsmController::computeAllowedChannelChanges));\n-        post(\"/manager/systems/ssm/channels\",\n-                withUser(SsmController::changeChannels));\n+        MinionsAPI.initRoutes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MDQ5NQ=="}, "originalCommit": {"oid": "15b2511596a9f963fb06cb612fe668d9128f69f2"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 220, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}