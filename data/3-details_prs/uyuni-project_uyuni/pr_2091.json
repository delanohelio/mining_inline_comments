{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NTQyMzkw", "number": 2091, "title": "CLM feedback and validation interface", "bodyText": "Add validation and feedback UI to content lifecycle projects.\nImportant\n\nThis PR is still a WIP in terms of mgr-libmod related code, but the UI and the Java structure should be final.\nIt is best reviewed on the last commit. Earlier commits are in an intermediary state with a different UI design (will be squashed with merge).\n\nGUI diff\n\n\n\n\n\nDocumentation\n\nNo documentation needed: Already documented\n\nTest coverage\n\nUnit tests were added\nCucumber tests: SUSE/spacewalk#11082\n\nLinks\n\nfixes SUSE/spacewalk#10099\nmgr-libmod changes: #2058\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"ruby_rubocop\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-04-02T12:18:54Z", "url": "https://github.com/uyuni-project/uyuni/pull/2091", "merged": true, "mergeCommit": {"oid": "c12a19e8060f980ae097108cddd0ccf08e0ce5e5"}, "closed": true, "closedAt": "2020-04-14T13:42:03Z", "author": {"login": "cbbayburt"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTrbkAABqjMxOTE5NTY1MzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXjtEtgFqTM5MjkzODE0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a37f64edeecca88ed394edeef54a309ad5c8f02c", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a37f64edeecca88ed394edeef54a309ad5c8f02c", "committedDate": "2020-04-02T12:16:04Z", "message": "Move validation messages into component panels"}, "afterCommit": {"oid": "2b38974ff920b66e97c7f6973cefc70191799d83", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2b38974ff920b66e97c7f6973cefc70191799d83", "committedDate": "2020-04-02T12:26:23Z", "message": "Move validation messages into component panels"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b38974ff920b66e97c7f6973cefc70191799d83", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2b38974ff920b66e97c7f6973cefc70191799d83", "committedDate": "2020-04-02T12:26:23Z", "message": "Move validation messages into component panels"}, "afterCommit": {"oid": "ff636cd0f5ca61249e3696d7f6ac0d8ae355c311", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ff636cd0f5ca61249e3696d7f6ac0d8ae355c311", "committedDate": "2020-04-02T12:59:49Z", "message": "Move validation messages into component panels"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e8f98e72e1663eb8068fb77a60fc840f0d45f2c", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8e8f98e72e1663eb8068fb77a60fc840f0d45f2c", "committedDate": "2020-04-02T15:41:12Z", "message": "Add content validation unit tests"}, "afterCommit": {"oid": "68175c74e5c171108c7dc6071b80249f7c389ac5", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/68175c74e5c171108c7dc6071b80249f7c389ac5", "committedDate": "2020-04-02T16:06:55Z", "message": "Add content validation unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68175c74e5c171108c7dc6071b80249f7c389ac5", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/68175c74e5c171108c7dc6071b80249f7c389ac5", "committedDate": "2020-04-02T16:06:55Z", "message": "Add content validation unit tests"}, "afterCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0ab2d46c0519c85ed0817b13833a87b79f2d599b", "committedDate": "2020-04-02T16:50:44Z", "message": "Add content validation unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTcwNTkw", "url": "https://github.com/uyuni-project/uyuni/pull/2091#pullrequestreview-386970590", "createdAt": "2020-04-03T06:41:41Z", "commit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjo0MTo0MVrOGAG6OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowNToxOVrOGAHeQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NjM5Mw==", "bodyText": "Is that TODO still valid? may be this should be addressed before merging or simply removed if no longer valid.", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402766393", "createdAt": "2020-04-03T06:41:41Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java", "diffHunk": "@@ -80,6 +81,19 @@ public ModulePackagesResponse getPackagesForModules(List<Channel> sources, List<\n             throws ConflictingStreamsException, ModuleNotFoundException {\n         List<String> mdPaths = getMetadataPaths(sources);\n \n+        // TODO: TEST CODE, REMOVE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2ODgzNw==", "bodyText": "Missing a Javadoc comment explaining what the validator does", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402768837", "createdAt": "2020-04-03T06:48:28Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.contentmgmt.ContentProject;\n+import com.redhat.rhn.domain.contentmgmt.ProjectSource;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ConflictingStreamsException;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.Module;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModuleNotFoundException;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModulemdApi;\n+import com.redhat.rhn.manager.contentmgmt.DependencyResolutionException;\n+import com.redhat.rhn.manager.contentmgmt.DependencyResolver;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.redhat.rhn.domain.contentmgmt.validation.ContentValidationMessage.TYPE_ERROR;\n+\n+public class ModularDependencyValidator implements ContentValidator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2OTYxNg==", "bodyText": "Same here, a Javadoc explaining what the validator does would be appreciated", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402769616", "createdAt": "2020-04-03T06:50:36Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularSourcesValidator.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.contentmgmt.ContentProject;\n+import com.redhat.rhn.domain.contentmgmt.ProjectSource;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class ModularSourcesValidator implements ContentValidator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MDA1Nw==", "bodyText": "This test class contains no test and thus makes the Junit test suite red", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402770057", "createdAt": "2020-04-03T06:51:52Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.redhat.rhn.domain.contentmgmt.validation.test;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.channel.Channel;\n+import com.redhat.rhn.domain.contentmgmt.ContentFilter;\n+import com.redhat.rhn.domain.contentmgmt.ContentProject;\n+import com.redhat.rhn.domain.contentmgmt.ContentProjectFactory;\n+import com.redhat.rhn.domain.contentmgmt.FilterCriteria;\n+import com.redhat.rhn.domain.contentmgmt.validation.ContentValidationMessage;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.manager.contentmgmt.ContentManager;\n+import com.redhat.rhn.manager.contentmgmt.test.MockModulemdApi;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+import com.redhat.rhn.testing.ChannelTestUtils;\n+import com.redhat.rhn.testing.TestUtils;\n+\n+import java.util.List;\n+\n+import static com.redhat.rhn.domain.contentmgmt.ContentFilter.EntityType.MODULE;\n+import static com.redhat.rhn.domain.contentmgmt.ContentFilter.EntityType.PACKAGE;\n+import static com.redhat.rhn.domain.contentmgmt.ContentFilter.Rule.DENY;\n+import static com.redhat.rhn.domain.contentmgmt.FilterCriteria.Matcher.CONTAINS;\n+import static com.redhat.rhn.domain.contentmgmt.FilterCriteria.Matcher.EQUALS;\n+import static com.redhat.rhn.domain.contentmgmt.ProjectSource.Type.SW_CHANNEL;\n+import static java.util.Optional.empty;\n+\n+public abstract class ContentValidatorTest extends BaseTestCaseWithUser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MDk2Ng==", "bodyText": "2020", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402770966", "createdAt": "2020-04-03T06:54:07Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/suse/manager/webui/controllers/contentmanagement/response/ProjectMessageResponse.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2019 SUSE LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MTc1NA==", "bodyText": "Replace CLM by Content Lifecycle Management since that would be more explicit for customers and maintenance", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402771754", "createdAt": "2020-04-03T06:56:04Z", "author": {"login": "cbosdo"}, "path": "java/spacewalk-java.changes", "diffHunk": "@@ -1,3 +1,4 @@\n+- Add CLM project validation interface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MjY4Mw==", "bodyText": "While you're at revamping that module, please add some documentation to it and update the stories to the new format to ensure it displays the doc in the storybook", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402772683", "createdAt": "2020-04-03T06:58:12Z", "author": {"login": "cbosdo"}, "path": "web/html/src/components/messages.js", "diffHunk": "@@ -1,38 +1,47 @@\n /* eslint-disable */\n import React  from \"react\";\n \n-export class Messages extends React.Component {\n-    _classNames = {\n+type Severity = \"info\" | \"success\" | \"warning\" | \"error\";\n+\n+export type MessageType = {\n+  severity: Severity,\n+  text: React.Node\n+}\n+\n+type Props = {\n+  items: Array<MessageType>\n+}\n+\n+export const Messages = (props: Props) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MzA2Ng==", "bodyText": "These functions should be documented too since those are the ones that are supposed to be used in the end. Would be nice to see those listed in the storybook", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402773066", "createdAt": "2020-04-03T06:59:00Z", "author": {"login": "cbosdo"}, "path": "web/html/src/components/messages.js", "diffHunk": "@@ -1,38 +1,47 @@\n /* eslint-disable */\n import React  from \"react\";\n \n-export class Messages extends React.Component {\n-    _classNames = {\n+type Severity = \"info\" | \"success\" | \"warning\" | \"error\";\n+\n+export type MessageType = {\n+  severity: Severity,\n+  text: React.Node\n+}\n+\n+type Props = {\n+  items: Array<MessageType>\n+}\n+\n+export const Messages = (props: Props) => {\n+    const _classNames = {\n         \"error\": \"danger\",\n         \"success\": \"success\",\n         \"info\": \"info\",\n         \"warning\": \"warning\",\n     }\n \n-    render() {\n-        var msgs = this.props.items.map(function(item, index) {\n-            return (<div key={\"msg\" + index} className={'alert alert-' + this._classNames[item.severity]}>{item.text}</div>);\n-        }.bind(this));\n-        return (<div key={\"messages-pop-up\"}>{msgs}</div>);\n-    }\n+    var msgs = props.items.map(function(item, index) {\n+        return (<div key={\"msg\" + index} className={'alert alert-' + _classNames[item.severity]}>{item.text}</div>);\n+    }.bind(this));\n \n+    return (<div key={\"messages-pop-up\"}>{msgs}</div>);\n }\n \n-function msg(severityIn, ...textIn) {\n+function msg(severityIn: Severity, ...textIn: Array<React.Node>) {\n     return textIn.map(function(txt) {return {severity: severityIn, text: textIn}});\n }\n \n export const Utils = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NTYxOQ==", "bodyText": "Like in the other change log, expand CLM for better readability by users", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402775619", "createdAt": "2020-04-03T07:05:19Z", "author": {"login": "cbosdo"}, "path": "web/spacewalk-web.changes", "diffHunk": "@@ -1,3 +1,4 @@\n+- Add CLM project validation interface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ba564761044b1b21113705e0227ba78970b7a89", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4ba564761044b1b21113705e0227ba78970b7a89", "committedDate": "2020-04-03T10:59:09Z", "message": "fixup! Add content validation unit tests"}, "afterCommit": {"oid": "55a29d339747ef8abd8698ce2d8206de2c39b479", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/55a29d339747ef8abd8698ce2d8206de2c39b479", "committedDate": "2020-04-06T14:56:56Z", "message": "fixup! Add content validation unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55a29d339747ef8abd8698ce2d8206de2c39b479", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/55a29d339747ef8abd8698ce2d8206de2c39b479", "committedDate": "2020-04-06T14:56:56Z", "message": "fixup! Add content validation unit tests"}, "afterCommit": {"oid": "e39f364a442657816320842b75f7896a5659d7d5", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e39f364a442657816320842b75f7896a5659d7d5", "committedDate": "2020-04-06T15:02:25Z", "message": "fixup! Add content validation unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDYzOTYz", "url": "https://github.com/uyuni-project/uyuni/pull/2091#pullrequestreview-388063963", "createdAt": "2020-04-06T09:09:23Z", "commit": {"oid": "4ba564761044b1b21113705e0227ba78970b7a89"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOTowOToyNFrOGBOgjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxNjoxMFrOGB2ARA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzOTQ2OA==", "bodyText": "Has this been addressed?", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r403939468", "createdAt": "2020-04-06T09:09:24Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java", "diffHunk": "@@ -15,11 +15,16 @@\n \n package com.redhat.rhn.domain.contentmgmt.modulemd;\n \n+import com.google.gson.annotations.SerializedName;\n+\n /**\n  * modulemd API response wrapper class\n  */\n public class ModulemdApiResponse {\n+    //TODO: Add error codes as statics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba564761044b1b21113705e0227ba78970b7a89"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxODQ5Nw==", "bodyText": "What is the reason for the alternate attributes? Has the modulemd api changed in the meantime?", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404018497", "createdAt": "2020-04-06T11:27:51Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java", "diffHunk": "@@ -15,11 +15,16 @@\n \n package com.redhat.rhn.domain.contentmgmt.modulemd;\n \n+import com.google.gson.annotations.SerializedName;\n+\n /**\n  * modulemd API response wrapper class\n  */\n public class ModulemdApiResponse {\n+    //TODO: Add error codes as statics\n+    @SerializedName(value = \"return_code\", alternate = {\"error_code\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba564761044b1b21113705e0227ba78970b7a89"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyNDM2OQ==", "bodyText": "Nitpick: you can get rid of isPresent() && get(), if you want. (Here and in the other validator.)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean hasModularSources = project.getActiveSources().stream()\n          \n          \n            \n                            .map(ProjectSource::asSoftwareSource)\n          \n          \n            \n                            .anyMatch(s -> s.isPresent() && s.get().getChannel().isModular());\n          \n          \n            \n                    boolean hasModularSources = project.getActiveSources().stream()\n          \n          \n            \n                            .flatMap(s -> s.asSoftwareSource().stream())\n          \n          \n            \n                            .map(s -> s.getChannel())\n          \n          \n            \n                            .anyMatch(c -> c.isModular());", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404024369", "createdAt": "2020-04-06T11:39:23Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.contentmgmt.ContentProject;\n+import com.redhat.rhn.domain.contentmgmt.ProjectSource;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ConflictingStreamsException;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.Module;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModuleNotFoundException;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModulemdApi;\n+import com.redhat.rhn.manager.contentmgmt.DependencyResolutionException;\n+import com.redhat.rhn.manager.contentmgmt.DependencyResolver;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.redhat.rhn.domain.contentmgmt.validation.ContentValidationMessage.TYPE_ERROR;\n+\n+/**\n+ * Validates resolution of modular dependencies in a content project\n+ */\n+public class ModularDependencyValidator implements ContentValidator {\n+\n+    private ModulemdApi modulemdApi;\n+    private LocalizationService loc = LocalizationService.getInstance();\n+\n+    /**\n+     * Initialize a modular dependency validator with {@link ModulemdApi} as the default modulemd API\n+     */\n+    public ModularDependencyValidator() {\n+        this.modulemdApi = new ModulemdApi();\n+    }\n+\n+    /**\n+     * Initialzie a modular dependency validator with a modulemd API instance\n+     *\n+     * @param modulemdApiIn the modulemd API instance\n+     */\n+    public ModularDependencyValidator(ModulemdApi modulemdApiIn) {\n+        this.modulemdApi = modulemdApiIn;\n+    }\n+\n+    @Override\n+    public List<ContentValidationMessage> validate(ContentProject project) {\n+        boolean hasModularSources = project.getActiveSources().stream()\n+                .map(ProjectSource::asSoftwareSource)\n+                .anyMatch(s -> s.isPresent() && s.get().getChannel().isModular());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba564761044b1b21113705e0227ba78970b7a89"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzODE5Nw==", "bodyText": "Is this still relevant?", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404038197", "createdAt": "2020-04-06T12:04:53Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java", "diffHunk": "@@ -90,6 +104,11 @@ public ModulePackagesResponse getPackagesForModules(List<Channel> sources, List<\n         ModulemdApiResponse res =\n                 callSync(ModulemdApiRequest.modulePackagesRequest(mdPaths, selectedModules));\n \n+        if (res.isError()) {\n+            //TODO: Handle code types + data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba564761044b1b21113705e0227ba78970b7a89"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzODU3MQ==", "bodyText": "Is this correct? How do we know, that the first module was not found, if the method supports passing multiple modules?", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404038571", "createdAt": "2020-04-06T12:05:38Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java", "diffHunk": "@@ -90,6 +104,11 @@ public ModulePackagesResponse getPackagesForModules(List<Channel> sources, List<\n         ModulemdApiResponse res =\n                 callSync(ModulemdApiRequest.modulePackagesRequest(mdPaths, selectedModules));\n \n+        if (res.isError()) {\n+            //TODO: Handle code types + data\n+            throw new ModuleNotFoundException(selectedModules.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba564761044b1b21113705e0227ba78970b7a89"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1NzI0OQ==", "bodyText": "About the \"dependency resolution failure\" scenario: is this something that happens on regular basis, something on the user can react (or should be at least informed in a sane way), or does it only happen in exceptional cases (bug in modulemd)?\nIf I understand it correctly, it should be safe: the filters validation runs also in the ContentProjectValidator in earlier phase, preventing the user to even start the build.", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404057249", "createdAt": "2020-04-06T12:38:16Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/manager/contentmgmt/ContentManager.java", "diffHunk": "@@ -695,14 +694,8 @@ private void alignEnvironment(ContentEnvironment env, Channel baseChannel, Strea\n                     alignEnvironmentTarget(srcTgt.getLeft(), srcTgt.getRight(), resolvedFilters, async, user));\n         }\n         catch (DependencyResolutionException e) {\n-            if (e.getCause() instanceof ModuleNotFoundException) {\n-                ModuleNotFoundException cause = (ModuleNotFoundException) e.getCause();\n-                LOG.info(String.format(\"Module '%s:%s' not found.\", cause.getModule().getName(),\n-                        cause.getModule().getStream()));\n-            }\n-            else {\n-                throw new RuntimeException(e);\n-            }\n+            // Build shouldn't be allowed if dependency resolution fails\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba564761044b1b21113705e0227ba78970b7a89"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4MTQ2Ng==", "bodyText": "Do we still need bind here?", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404581466", "createdAt": "2020-04-07T07:06:34Z", "author": {"login": "hustodemon"}, "path": "web/html/src/components/messages.js", "diffHunk": "@@ -1,38 +1,84 @@\n /* eslint-disable */\n import React  from \"react\";\n \n-export class Messages extends React.Component {\n-    _classNames = {\n+type Severity = \"info\" | \"success\" | \"warning\" | \"error\";\n+\n+export type MessageType = {\n+  severity: Severity,\n+  text: React.Node\n+}\n+\n+type Props = {\n+  /** Message objects to display */\n+  items: Array<MessageType>\n+}\n+\n+/**\n+ * Component to render multiple alert messages.\n+ *\n+ * It takes the list of messages in the `items` array.\n+ * The message objects must be in the following form:\n+ *\n+ * ```\n+ * items = [\n+ *   {\n+ *     severity: 'error' | 'warning' | 'success' | 'info',\n+ *     text: \"The message text to display.\"\n+ *   },\n+ *   ...\n+ * ]\n+ * ```\n+ * The `Messages` module additionally offers the `Utils` object that contains\n+ * helper methods to create a single message object of a specific severity:\n+ *\n+ *  - `Utils.info(msg)`\n+ *  - `Utils.success(msg)`\n+ *  - `Utils.warning(msg)`\n+ *  - `Utils.error(msg)`\n+ *\n+ * The return value of these methods can be directly fed into the `items` property\n+ * of the component:\n+ *\n+ * ```\n+ * <Messages items={Utils.info(\"My info message.\")}/>\n+ * ```\n+ */\n+export const Messages = (props: Props) => {\n+    const _classNames = {\n         \"error\": \"danger\",\n         \"success\": \"success\",\n         \"info\": \"info\",\n         \"warning\": \"warning\",\n     }\n \n-    render() {\n-        var msgs = this.props.items.map(function(item, index) {\n-            return (<div key={\"msg\" + index} className={'alert alert-' + this._classNames[item.severity]}>{item.text}</div>);\n-        }.bind(this));\n-        return (<div key={\"messages-pop-up\"}>{msgs}</div>);\n-    }\n+    var msgs = props.items.map(function(item, index) {\n+        return (<div key={\"msg\" + index} className={'alert alert-' + _classNames[item.severity]}>{item.text}</div>);\n+    }.bind(this));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39f364a442657816320842b75f7896a5659d7d5"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NDU1OA==", "bodyText": "I don't see any usage of this, only getRenderedMessages. A typo?", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404584558", "createdAt": "2020-04-07T07:12:23Z", "author": {"login": "hustodemon"}, "path": "web/html/src/manager/content-management/shared/components/messages/messages.js", "diffHunk": "@@ -0,0 +1,51 @@\n+// @flow\n+import * as React from 'react';\n+import _isEmpty from \"lodash/isEmpty\";\n+\n+import {Messages} from 'components/messages';\n+import type {ProjectMessageType} from '../../type/project.type';\n+\n+type ValidationMessagesType = {\n+  panelClass: string,\n+  messages: ?React.Element<'ul'>\n+}\n+\n+const msgClassMap = {\n+  'warning': {\n+    text: 'text-warning',\n+    panel: 'panel-warning'\n+  },\n+  'error': {\n+    text: 'text-danger',\n+    panel: 'panel-danger'\n+  },\n+  'info': {\n+    text: 'text-default',\n+    panel: 'panel-default'\n+  }\n+}\n+\n+const sortMessages = (messages: Array<ProjectMessageType>) => {\n+  const msgPriorities = {'error': 0, 'warning': 1, 'info': 2};\n+  return messages.slice().sort((a, b) => msgPriorities[a.type] - msgPriorities[b.type]);\n+}\n+\n+const getMessages = (messages: Array<ProjectMessageType>): ValidationMessagesType => {\n+  if (_isEmpty(messages)) {\n+    return {\n+      panelClass: 'panel-default',\n+      messages: null\n+    }\n+  }\n+\n+  const sortedMsgs = sortMessages(messages);\n+  return {\n+    panelClass: msgClassMap[sortedMsgs[0].type].panel,\n+    messages: (\n+      <Messages items={sortedMsgs.map(m => ({severity: m.type, text: m.text}))}/>\n+    )\n+  }\n+}\n+\n+export default getMessages;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39f364a442657816320842b75f7896a5659d7d5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NjU2NA==", "bodyText": "2nd thing: to me it looks like this is CLM specific. Wouldn't it make sense to move this somewhere \"closer\" to the CLM code (shared/components/messages), if there is a better directory for that?", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404586564", "createdAt": "2020-04-07T07:16:10Z", "author": {"login": "hustodemon"}, "path": "web/html/src/manager/content-management/shared/components/messages/messages.js", "diffHunk": "@@ -0,0 +1,51 @@\n+// @flow\n+import * as React from 'react';\n+import _isEmpty from \"lodash/isEmpty\";\n+\n+import {Messages} from 'components/messages';\n+import type {ProjectMessageType} from '../../type/project.type';\n+\n+type ValidationMessagesType = {\n+  panelClass: string,\n+  messages: ?React.Element<'ul'>\n+}\n+\n+const msgClassMap = {\n+  'warning': {\n+    text: 'text-warning',\n+    panel: 'panel-warning'\n+  },\n+  'error': {\n+    text: 'text-danger',\n+    panel: 'panel-danger'\n+  },\n+  'info': {\n+    text: 'text-default',\n+    panel: 'panel-default'\n+  }\n+}\n+\n+const sortMessages = (messages: Array<ProjectMessageType>) => {\n+  const msgPriorities = {'error': 0, 'warning': 1, 'info': 2};\n+  return messages.slice().sort((a, b) => msgPriorities[a.type] - msgPriorities[b.type]);\n+}\n+\n+const getMessages = (messages: Array<ProjectMessageType>): ValidationMessagesType => {\n+  if (_isEmpty(messages)) {\n+    return {\n+      panelClass: 'panel-default',\n+      messages: null\n+    }\n+  }\n+\n+  const sortedMsgs = sortMessages(messages);\n+  return {\n+    panelClass: msgClassMap[sortedMsgs[0].type].panel,\n+    messages: (\n+      <Messages items={sortedMsgs.map(m => ({severity: m.type, text: m.text}))}/>\n+    )\n+  }\n+}\n+\n+export default getMessages;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39f364a442657816320842b75f7896a5659d7d5"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzI0ODkx", "url": "https://github.com/uyuni-project/uyuni/pull/2091#pullrequestreview-390724891", "createdAt": "2020-04-09T11:54:13Z", "commit": {"oid": "7a27a12552ee591aea4fb479aed38ef3087485e6"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTo1NDoxM1rOGDVfVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjowNTo0M1rOGDV08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDk5Nw==", "bodyText": "OK", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406150997", "createdAt": "2020-04-09T11:54:13Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java", "diffHunk": "@@ -80,6 +81,19 @@ public ModulePackagesResponse getPackagesForModules(List<Channel> sources, List<\n             throws ConflictingStreamsException, ModuleNotFoundException {\n         List<String> mdPaths = getMetadataPaths(sources);\n \n+        // TODO: TEST CODE, REMOVE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NjM5Mw=="}, "originalCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MTU3NQ==", "bodyText": "No javadoc comment here... I'ld bet this breaks a Checkstyle rule", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406151575", "createdAt": "2020-04-09T11:55:22Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentProjectValidator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;\n+\n+import com.redhat.rhn.domain.contentmgmt.ContentProject;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class ContentProjectValidator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a27a12552ee591aea4fb479aed38ef3087485e6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MjAwMg==", "bodyText": "Javadoc here too", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406152002", "createdAt": "2020-04-09T11:56:20Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a27a12552ee591aea4fb479aed38ef3087485e6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MjMwMg==", "bodyText": "Javadoc is needed on public functions too", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406152302", "createdAt": "2020-04-09T11:56:51Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;\n+\n+public class ContentValidationMessage {\n+\n+    public static final String TYPE_INFO = \"info\";\n+    public static final String TYPE_WARN = \"warning\";\n+    public static final String TYPE_ERROR = \"error\";\n+\n+    private static final String ENTITY_PROPERTIES = \"properties\";\n+    private static final String ENTITY_SOURCES = \"softwareSources\";\n+    private static final String ENTITY_FILTERS = \"filters\";\n+    private static final String ENTITY_ENVIRONMENTS = \"environments\";\n+\n+    private String message;\n+    private String type;\n+    private String entity;\n+\n+    private ContentValidationMessage(String messageIn, String typeIn, String entityIn) {\n+        this.message = messageIn;\n+        this.type = typeIn;\n+        this.entity = entityIn;\n+    }\n+\n+    /**\n+     * Create a new validation message for content properties\n+     *\n+     * @param message the message text\n+     * @param type the message type\n+     * @return the validation message\n+     */\n+    public static ContentValidationMessage contentPropertiesMessage(String message, String type) {\n+        return new ContentValidationMessage(message, type, ENTITY_PROPERTIES);\n+    }\n+\n+    /**\n+     * Create a new validation message for software sources\n+     *\n+     * @param message the message text\n+     * @param type the message type\n+     * @return the validation message\n+     */\n+    public static ContentValidationMessage softwareSourcesMessage(String message, String type) {\n+        return new ContentValidationMessage(message, type, ENTITY_SOURCES);\n+    }\n+\n+    /**\n+     * Create a new validation message for content filters\n+     *\n+     * @param message the message text\n+     * @param type the message type\n+     * @return the validation message\n+     */\n+    public static ContentValidationMessage contentFiltersMessage(String message, String type) {\n+        return new ContentValidationMessage(message, type, ENTITY_FILTERS);\n+    }\n+\n+    /**\n+     * Create a new validation message for project environments\n+     *\n+     * @param message the message text\n+     * @param type the message type\n+     * @return the validation message\n+     */\n+    public static ContentValidationMessage projectEnvironmentsMessage(String message, String type) {\n+        return new ContentValidationMessage(message, type, ENTITY_ENVIRONMENTS);\n+    }\n+\n+    public String getMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a27a12552ee591aea4fb479aed38ef3087485e6"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MjkwMg==", "bodyText": "No license header", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406152902", "createdAt": "2020-04-09T11:58:04Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTestBase.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.redhat.rhn.domain.contentmgmt.validation.test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a27a12552ee591aea4fb479aed38ef3087485e6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MzAwNA==", "bodyText": "no license header too", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406153004", "createdAt": "2020-04-09T11:58:17Z", "author": {"login": "cbosdo"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ModularDependencyValidatorTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.redhat.rhn.domain.contentmgmt.validation.test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a27a12552ee591aea4fb479aed38ef3087485e6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NTM0MQ==", "bodyText": "Thanks", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406155341", "createdAt": "2020-04-09T12:03:14Z", "author": {"login": "cbosdo"}, "path": "web/html/src/components/messages.js", "diffHunk": "@@ -1,38 +1,47 @@\n /* eslint-disable */\n import React  from \"react\";\n \n-export class Messages extends React.Component {\n-    _classNames = {\n+type Severity = \"info\" | \"success\" | \"warning\" | \"error\";\n+\n+export type MessageType = {\n+  severity: Severity,\n+  text: React.Node\n+}\n+\n+type Props = {\n+  items: Array<MessageType>\n+}\n+\n+export const Messages = (props: Props) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MjY4Mw=="}, "originalCommit": {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NjUzMA==", "bodyText": "I prefer having one line per type imported... but that is cosmetic", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406156530", "createdAt": "2020-04-09T12:05:43Z", "author": {"login": "cbosdo"}, "path": "web/html/src/manager/content-management/shared/components/panels/environment-lifecycle/environment-lifecycle.js", "diffHunk": "@@ -8,17 +8,20 @@ import Promote from \"../promote/promote\";\n import {showErrorToastr, showSuccessToastr} from \"components/toastr/toastr\";\n import {mapAddEnvironmentRequest, mapUpdateEnvironmentRequest} from './environment.utils';\n \n-import type {ProjectEnvironmentType} from '../../../type/project.type.js';\n-import type {ProjectHistoryEntry} from \"../../../type/project.type\";\n import useRoles from \"core/auth/use-roles\";\n import {isOrgAdmin} from \"core/auth/auth.utils\";\n import useLifecycleActionsApi from \"../../../api/use-lifecycle-actions-api\";\n+import getRenderedMessages from \"../../messages/messages\";\n+\n+import type {ProjectEnvironmentType, ProjectHistoryEntry, ProjectMessageType}\n+  from \"../../../type/project.type\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a27a12552ee591aea4fb479aed38ef3087485e6"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a27a12552ee591aea4fb479aed38ef3087485e6", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7a27a12552ee591aea4fb479aed38ef3087485e6", "committedDate": "2020-04-07T11:16:42Z", "message": "fixup! Move validation messages into component panels"}, "afterCommit": {"oid": "14630c580ecb181cfe3087942827c6564abf1100", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/14630c580ecb181cfe3087942827c6564abf1100", "committedDate": "2020-04-09T12:34:09Z", "message": "Add content validation unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDU1MDI2", "url": "https://github.com/uyuni-project/uyuni/pull/2091#pullrequestreview-391055026", "createdAt": "2020-04-09T19:02:03Z", "commit": {"oid": "14630c580ecb181cfe3087942827c6564abf1100"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMjowNFrOGDllSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMjowNFrOGDllSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNDY2Nw==", "bodyText": "I think the single quote ' is not needed for the Map key parameter, but only for the value. What about cleaning it up through the whole file? I think we never use quotes for the key.", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406414667", "createdAt": "2020-04-09T19:02:04Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/content-management/shared/components/messages/messages.js", "diffHunk": "@@ -0,0 +1,51 @@\n+// @flow\n+import * as React from 'react';\n+import _isEmpty from \"lodash/isEmpty\";\n+\n+import {Messages} from 'components/messages';\n+import type {ProjectMessageType} from '../../type/project.type';\n+\n+type ValidationMessagesType = {\n+  panelClass: string,\n+  messages: ?React.Element<'ul'>\n+}\n+\n+const msgClassMap = {\n+  'warning': {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14630c580ecb181cfe3087942827c6564abf1100"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14630c580ecb181cfe3087942827c6564abf1100", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/14630c580ecb181cfe3087942827c6564abf1100", "committedDate": "2020-04-09T12:34:09Z", "message": "Add content validation unit tests"}, "afterCommit": {"oid": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4b8829d978234a20e135cf7a0d9e960d8af1d978", "committedDate": "2020-04-09T22:42:48Z", "message": "Add content validation unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNDk4MzAy", "url": "https://github.com/uyuni-project/uyuni/pull/2091#pullrequestreview-391498302", "createdAt": "2020-04-10T15:18:38Z", "commit": {"oid": "4b8829d978234a20e135cf7a0d9e960d8af1d978"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1739617c8cb1c03300caf87b8b7b13b1c53c0d9c", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1739617c8cb1c03300caf87b8b7b13b1c53c0d9c", "committedDate": "2020-04-14T13:04:35Z", "message": "Add CLM project validation messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e1edb1ceb835c7a0c345d7a2ef2c7540670d77a", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9e1edb1ceb835c7a0c345d7a2ef2c7540670d77a", "committedDate": "2020-04-14T13:04:40Z", "message": "Move validation messages into component panels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a95344576bcf8d74a9d85c805e271b10b6ecce6d", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a95344576bcf8d74a9d85c805e271b10b6ecce6d", "committedDate": "2020-04-14T13:04:40Z", "message": "Add content validation unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4b8829d978234a20e135cf7a0d9e960d8af1d978", "committedDate": "2020-04-09T22:42:48Z", "message": "Add content validation unit tests"}, "afterCommit": {"oid": "a95344576bcf8d74a9d85c805e271b10b6ecce6d", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a95344576bcf8d74a9d85c805e271b10b6ecce6d", "committedDate": "2020-04-14T13:04:40Z", "message": "Add content validation unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTM4MTQ4", "url": "https://github.com/uyuni-project/uyuni/pull/2091#pullrequestreview-392938148", "createdAt": "2020-04-14T13:42:15Z", "commit": {"oid": "a95344576bcf8d74a9d85c805e271b10b6ecce6d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1576, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}