{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzU3NDA0", "number": 2391, "title": "Enhance spacecmd with Service Pack migration operations", "bodyText": "What does this PR change?\nSP migration is not exposed in spacecmd. The only way for a user to schedule it\nis via the api namespace, but doing so, they can't specify schedule date (the\napi namespace only supports passing basic string/number/bool arguments).\nGUI diff\nnothing\n\n DONE\n\nDocumentation\n\n\nNo documentation needed: just adjusted the help strings of spacecmd\n\n\n DONE\n\n\nTest coverage\n\n\nNo tests: no tests for spacecmd\n\n\n DONE\n\n\nLinks\nTracks SUSE/spacewalk#11856\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-07-06T12:57:11Z", "url": "https://github.com/uyuni-project/uyuni/pull/2391", "merged": true, "mergeCommit": {"oid": "7c040b6886d7c61cc8bb05f3629a186ca151a19b"}, "closed": true, "closedAt": "2020-08-18T12:57:20Z", "author": {"login": "hustodemon"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyQ0nlgBqjM1MTU3OTY1OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAE2NaABqjM2NjU3NzI3NTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4d527ce26914f3c40976962414a982859235781", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a4d527ce26914f3c40976962414a982859235781", "committedDate": "2020-07-06T12:52:25Z", "message": "Fix typo"}, "afterCommit": {"oid": "d10f5f3d8d7df6082f257b3f890d85f9a6e5d5f8", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d10f5f3d8d7df6082f257b3f890d85f9a6e5d5f8", "committedDate": "2020-07-06T12:58:00Z", "message": "Fix a typo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d10f5f3d8d7df6082f257b3f890d85f9a6e5d5f8", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d10f5f3d8d7df6082f257b3f890d85f9a6e5d5f8", "committedDate": "2020-07-06T12:58:00Z", "message": "Fix a typo"}, "afterCommit": {"oid": "981b97c417d4255166e2a52060942d26cb554ae9", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/981b97c417d4255166e2a52060942d26cb554ae9", "committedDate": "2020-07-06T13:05:28Z", "message": "Fix a typo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "981b97c417d4255166e2a52060942d26cb554ae9", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/981b97c417d4255166e2a52060942d26cb554ae9", "committedDate": "2020-07-06T13:05:28Z", "message": "Fix a typo"}, "afterCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/14319ac1d0a43d4c9de6a0b132df575b5e54e191", "committedDate": "2020-07-06T13:06:59Z", "message": "Fix a typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNTYzNDI2", "url": "https://github.com/uyuni-project/uyuni/pull/2391#pullrequestreview-443563426", "createdAt": "2020-07-07T05:01:54Z", "commit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNTowMTo1NFrOGtvK8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxODowMlrOGtvbhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMTk1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        print('    IDs: ' + tgt['ident'])\n          \n          \n            \n                        print('    ID: ' + tgt['ident'])", "url": "https://github.com/uyuni-project/uyuni/pull/2391#discussion_r450611953", "createdAt": "2020-07-07T05:01:54Z", "author": {"login": "mcalmer"}, "path": "spacecmd/src/spacecmd/system.py", "diffHunk": "@@ -4238,3 +4238,123 @@ def do_system_scheduleapplyconfigchannels(self, args):\n     return 0\n \n ####################\n+\n+\n+def help_system_listmigrationtargets(self):\n+    print('system_listmigrationtargets: List possible migration targets for given systems.')\n+    print('usage: system_listmigrationtargets <SYSTEMS>')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_listmigrationtargets(self, args):\n+    arg_parser = get_argument_parser()\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) != 1:\n+        self.help_system_listmigrationtargets()\n+        return\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            print('WARN: Cannot find system ' + str(system))\n+            continue\n+\n+        print('System ' + str(system))\n+        tgts = self.client.system.listMigrationTargets(self.session, system_id)\n+\n+        if not tgts:\n+            print('  No migration targets')\n+\n+        for num, tgt in enumerate(tgts, start=1):\n+            print('  Target #' + str(num) + \":\")\n+            print('    IDs: ' + tgt['ident'])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNDI1Ng==", "bodyText": "why is migration target a option and dryrun an argument?\nIt is not easy to understand how to provide it. Especially as dryrun is a bool and it is not explained how to provide it.\nWhat about to turn it around? Migration Target as mandatory argument and dryrun as optional option?", "url": "https://github.com/uyuni-project/uyuni/pull/2391#discussion_r450614256", "createdAt": "2020-07-07T05:10:54Z", "author": {"login": "mcalmer"}, "path": "spacecmd/src/spacecmd/system.py", "diffHunk": "@@ -4238,3 +4238,123 @@ def do_system_scheduleapplyconfigchannels(self, args):\n     return 0\n \n ####################\n+\n+\n+def help_system_listmigrationtargets(self):\n+    print('system_listmigrationtargets: List possible migration targets for given systems.')\n+    print('usage: system_listmigrationtargets <SYSTEMS>')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_listmigrationtargets(self, args):\n+    arg_parser = get_argument_parser()\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) != 1:\n+        self.help_system_listmigrationtargets()\n+        return\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            print('WARN: Cannot find system ' + str(system))\n+            continue\n+\n+        print('System ' + str(system))\n+        tgts = self.client.system.listMigrationTargets(self.session, system_id)\n+\n+        if not tgts:\n+            print('  No migration targets')\n+\n+        for num, tgt in enumerate(tgts, start=1):\n+            print('  Target #' + str(num) + \":\")\n+            print('    IDs: ' + tgt['ident'])\n+            print('    Friendly names: ' + tgt['friendly'])\n+\n+####################\n+\n+\n+def help_system_schedulespmigration(self):\n+    print('system_schedulespmigration: Schedule a Service Pack migration for systems.')\n+    print('usage: system_listmigrationtargets <SYSTEM> <DRY_RUN?> <BASE_CHANNEL_LABEL> [options] \\\n+\\n    options: \\\n+\\n        -s START_TIME \\\n+\\n        -t MIGRATION_TARGET_ID (see system_listmigrationtargets) \\\n+\\n        -c CHILD_CHANNELS (comma-separated child channels labels)')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNTQzMg==", "bodyText": "We iterate over multiple systems, but the requirement is, that all can be migrated to the same target.\nIt seems you catch exceptions when the target does not match.\nIs it wanted to support multiple systems?\nIf yes, you should change the way how to call this function and put systemid as final argument and let it be an array.", "url": "https://github.com/uyuni-project/uyuni/pull/2391#discussion_r450615432", "createdAt": "2020-07-07T05:15:14Z", "author": {"login": "mcalmer"}, "path": "spacecmd/src/spacecmd/system.py", "diffHunk": "@@ -4238,3 +4238,123 @@ def do_system_scheduleapplyconfigchannels(self, args):\n     return 0\n \n ####################\n+\n+\n+def help_system_listmigrationtargets(self):\n+    print('system_listmigrationtargets: List possible migration targets for given systems.')\n+    print('usage: system_listmigrationtargets <SYSTEMS>')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_listmigrationtargets(self, args):\n+    arg_parser = get_argument_parser()\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) != 1:\n+        self.help_system_listmigrationtargets()\n+        return\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            print('WARN: Cannot find system ' + str(system))\n+            continue\n+\n+        print('System ' + str(system))\n+        tgts = self.client.system.listMigrationTargets(self.session, system_id)\n+\n+        if not tgts:\n+            print('  No migration targets')\n+\n+        for num, tgt in enumerate(tgts, start=1):\n+            print('  Target #' + str(num) + \":\")\n+            print('    IDs: ' + tgt['ident'])\n+            print('    Friendly names: ' + tgt['friendly'])\n+\n+####################\n+\n+\n+def help_system_schedulespmigration(self):\n+    print('system_schedulespmigration: Schedule a Service Pack migration for systems.')\n+    print('usage: system_listmigrationtargets <SYSTEM> <DRY_RUN?> <BASE_CHANNEL_LABEL> [options] \\\n+\\n    options: \\\n+\\n        -s START_TIME \\\n+\\n        -t MIGRATION_TARGET_ID (see system_listmigrationtargets) \\\n+\\n        -c CHILD_CHANNELS (comma-separated child channels labels)')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_schedulespmigration(self, args):\n+    arg_parser = get_argument_parser()\n+    arg_parser.add_argument('-s', '--start-time')\n+    arg_parser.add_argument('-t', '--migration-target')\n+    arg_parser.add_argument('-c', '--child-channels')\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) < 3:\n+        self.help_system_schedulespmigration()\n+        return\n+\n+    # POSITIONAL ARGS\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    dry_run = string_to_bool(args[1])\n+    base_channel_label = args[2]\n+\n+    # OPTIONAL NAMED ARGS\n+    if options.start_time:\n+        options.start_time = parse_time_input(options.start_time)\n+    else:\n+        options.start_time = parse_time_input('now')\n+\n+    child_channels = []\n+    if options.child_channels:\n+        child_channels = [cnl.strip() for cnl in options.child_channels.split(',')]\n+\n+    for system in sorted(systems):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNjE5OA==", "bodyText": "Not sure if we should support this way to call the function. AFAIK we still have it because of some backwards-compatiblety reason.", "url": "https://github.com/uyuni-project/uyuni/pull/2391#discussion_r450616198", "createdAt": "2020-07-07T05:18:02Z", "author": {"login": "mcalmer"}, "path": "spacecmd/src/spacecmd/system.py", "diffHunk": "@@ -4238,3 +4238,123 @@ def do_system_scheduleapplyconfigchannels(self, args):\n     return 0\n \n ####################\n+\n+\n+def help_system_listmigrationtargets(self):\n+    print('system_listmigrationtargets: List possible migration targets for given systems.')\n+    print('usage: system_listmigrationtargets <SYSTEMS>')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_listmigrationtargets(self, args):\n+    arg_parser = get_argument_parser()\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) != 1:\n+        self.help_system_listmigrationtargets()\n+        return\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            print('WARN: Cannot find system ' + str(system))\n+            continue\n+\n+        print('System ' + str(system))\n+        tgts = self.client.system.listMigrationTargets(self.session, system_id)\n+\n+        if not tgts:\n+            print('  No migration targets')\n+\n+        for num, tgt in enumerate(tgts, start=1):\n+            print('  Target #' + str(num) + \":\")\n+            print('    IDs: ' + tgt['ident'])\n+            print('    Friendly names: ' + tgt['friendly'])\n+\n+####################\n+\n+\n+def help_system_schedulespmigration(self):\n+    print('system_schedulespmigration: Schedule a Service Pack migration for systems.')\n+    print('usage: system_listmigrationtargets <SYSTEM> <DRY_RUN?> <BASE_CHANNEL_LABEL> [options] \\\n+\\n    options: \\\n+\\n        -s START_TIME \\\n+\\n        -t MIGRATION_TARGET_ID (see system_listmigrationtargets) \\\n+\\n        -c CHILD_CHANNELS (comma-separated child channels labels)')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_schedulespmigration(self, args):\n+    arg_parser = get_argument_parser()\n+    arg_parser.add_argument('-s', '--start-time')\n+    arg_parser.add_argument('-t', '--migration-target')\n+    arg_parser.add_argument('-c', '--child-channels')\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) < 3:\n+        self.help_system_schedulespmigration()\n+        return\n+\n+    # POSITIONAL ARGS\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    dry_run = string_to_bool(args[1])\n+    base_channel_label = args[2]\n+\n+    # OPTIONAL NAMED ARGS\n+    if options.start_time:\n+        options.start_time = parse_time_input(options.start_time)\n+    else:\n+        options.start_time = parse_time_input('now')\n+\n+    child_channels = []\n+    if options.child_channels:\n+        child_channels = [cnl.strip() for cnl in options.child_channels.split(',')]\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            logging.warning('Cannot find system ' + str(system) + '. Skipping it.')\n+            continue\n+\n+        print('Scheduling Service Pack migration for system ' + str(system))\n+        result = None\n+        try:\n+            if options.migration_target:\n+                result = self.client.system.scheduleSPMigration(self.session,\n+                        system_id, options.migration_target, base_channel_label,\n+                        child_channels, dry_run, options.start_time)\n+            else:\n+                result = self.client.system.scheduleSPMigration(self.session,\n+                        system_id, base_channel_label, child_channels,\n+                        dry_run, options.start_time)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "originalPosition": 116}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "901023d46b8da5d01783bb84716b97c6e3a55500", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/901023d46b8da5d01783bb84716b97c6e3a55500", "committedDate": "2020-07-07T08:12:43Z", "message": "Better output for the product ID in spacecmd\n\nCo-authored-by: Michael Calmer <Michael.Calmer@suse.de>"}, "afterCommit": {"oid": "1e9f1a6be5818e34b94297a3d3ce774bbf057685", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1e9f1a6be5818e34b94297a3d3ce774bbf057685", "committedDate": "2020-08-05T13:34:03Z", "message": "Address review suggestions\n\n- dry run is now an optional flag\n- target indentifier is now a required param"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MzcwMjgw", "url": "https://github.com/uyuni-project/uyuni/pull/2391#pullrequestreview-468370280", "createdAt": "2020-08-17T11:07:56Z", "commit": {"oid": "1e9f1a6be5818e34b94297a3d3ce774bbf057685"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e71f9f9df656b9d304cd581f611f8ac0b0599ee", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0e71f9f9df656b9d304cd581f611f8ac0b0599ee", "committedDate": "2020-08-18T10:55:49Z", "message": "Enhance spacecmd with Service Pack migration operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd26f32551e617cbebf54216bf4c2b39ea58358e", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/bd26f32551e617cbebf54216bf4c2b39ea58358e", "committedDate": "2020-08-18T10:55:49Z", "message": "Fix a typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bd865941b81d4d9fc9a26d6f26ef353e65ce69a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7bd865941b81d4d9fc9a26d6f26ef353e65ce69a", "committedDate": "2020-08-18T10:55:49Z", "message": "Address review suggestions\n\n- dry run is now an optional flag\n- target indentifier is now a required param"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e9f1a6be5818e34b94297a3d3ce774bbf057685", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1e9f1a6be5818e34b94297a3d3ce774bbf057685", "committedDate": "2020-08-05T13:34:03Z", "message": "Address review suggestions\n\n- dry run is now an optional flag\n- target indentifier is now a required param"}, "afterCommit": {"oid": "7bd865941b81d4d9fc9a26d6f26ef353e65ce69a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7bd865941b81d4d9fc9a26d6f26ef353e65ce69a", "committedDate": "2020-08-18T10:55:49Z", "message": "Address review suggestions\n\n- dry run is now an optional flag\n- target indentifier is now a required param"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1210, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}