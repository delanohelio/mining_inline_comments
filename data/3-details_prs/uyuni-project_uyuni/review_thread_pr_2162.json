{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODk5MzY1", "number": 2162, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjo0OTozMlrOD2HEEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjo0OTozMlrOD2HEEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDY1NDI3OnYy", "diffSide": "RIGHT", "path": "backend/server/importlib/backendLib.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjo0OTozMlrOGL1Cpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzowMTozM1rOGL1K6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjU1MQ==", "bodyText": "Is the _ underscore in the page_size value a typo?", "url": "https://github.com/uyuni-project/uyuni/pull/2162#discussion_r415056551", "createdAt": "2020-04-25T12:49:32Z", "author": {"login": "mcalmer"}, "path": "backend/server/importlib/backendLib.py", "diffHunk": "@@ -432,31 +432,27 @@ class TableInsert(TableUpdate):\n \n     def __init__(self, table, dbmodule):\n         TableUpdate.__init__(self, table, dbmodule)\n-        self.queryTemplate = \"insert into %s (%s) values (%s)\"\n-        self.count = 1000\n+        self.queryTemplate = \"insert into %s (%s) values %%s\"\n \n         self.insert_fields = self.pks + self.otherfields + self.blob_fields\n-        self.insert_values = [':%s' % x for x in self.pks + self.otherfields + self.blob_fields]\n \n     def _buildQuery(self, key):\n-        q = self.queryTemplate % (self.table.name,\n-                                  ', '.join(self.insert_fields),\n-                                  ', '.join(self.insert_values))\n+        q = self.queryTemplate % (self.table.name, ', '.join(self.insert_fields))\n         return q\n \n     def query(self, values):\n         if self.blob_fields:\n-            chunksize = 1\n             blob_map = {}\n             for f in self.blob_fields:\n                 blob_map[f] = f\n         else:\n-            chunksize = self.count\n             blob_map = None\n \n         # Do the insert\n         statement = self._getCachedQuery(None, blob_map=blob_map)\n-        executeStatement(statement, values, chunksize)\n+        l = len(values[self.insert_fields[0]])\n+        value_list = [[values[f][i] for f in self.insert_fields] for i in range(l)]\n+        statement.execute_values(self._buildQuery(None), value_list, fetch=False, page_size=10_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb6b88cf846d49810428245fa54f17044a396d9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NzMxOQ==", "bodyText": "No, it's just a Python big-number legibility facility:\nhttps://www.python.org/dev/peps/pep-0515/", "url": "https://github.com/uyuni-project/uyuni/pull/2162#discussion_r415057319", "createdAt": "2020-04-25T12:53:51Z", "author": {"login": "moio"}, "path": "backend/server/importlib/backendLib.py", "diffHunk": "@@ -432,31 +432,27 @@ class TableInsert(TableUpdate):\n \n     def __init__(self, table, dbmodule):\n         TableUpdate.__init__(self, table, dbmodule)\n-        self.queryTemplate = \"insert into %s (%s) values (%s)\"\n-        self.count = 1000\n+        self.queryTemplate = \"insert into %s (%s) values %%s\"\n \n         self.insert_fields = self.pks + self.otherfields + self.blob_fields\n-        self.insert_values = [':%s' % x for x in self.pks + self.otherfields + self.blob_fields]\n \n     def _buildQuery(self, key):\n-        q = self.queryTemplate % (self.table.name,\n-                                  ', '.join(self.insert_fields),\n-                                  ', '.join(self.insert_values))\n+        q = self.queryTemplate % (self.table.name, ', '.join(self.insert_fields))\n         return q\n \n     def query(self, values):\n         if self.blob_fields:\n-            chunksize = 1\n             blob_map = {}\n             for f in self.blob_fields:\n                 blob_map[f] = f\n         else:\n-            chunksize = self.count\n             blob_map = None\n \n         # Do the insert\n         statement = self._getCachedQuery(None, blob_map=blob_map)\n-        executeStatement(statement, values, chunksize)\n+        l = len(values[self.insert_fields[0]])\n+        value_list = [[values[f][i] for f in self.insert_fields] for i in range(l)]\n+        statement.execute_values(self._buildQuery(None), value_list, fetch=False, page_size=10_000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjU1MQ=="}, "originalCommit": {"oid": "1bb6b88cf846d49810428245fa54f17044a396d9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1ODY2NA==", "bodyText": "oh :-)", "url": "https://github.com/uyuni-project/uyuni/pull/2162#discussion_r415058664", "createdAt": "2020-04-25T13:01:33Z", "author": {"login": "mcalmer"}, "path": "backend/server/importlib/backendLib.py", "diffHunk": "@@ -432,31 +432,27 @@ class TableInsert(TableUpdate):\n \n     def __init__(self, table, dbmodule):\n         TableUpdate.__init__(self, table, dbmodule)\n-        self.queryTemplate = \"insert into %s (%s) values (%s)\"\n-        self.count = 1000\n+        self.queryTemplate = \"insert into %s (%s) values %%s\"\n \n         self.insert_fields = self.pks + self.otherfields + self.blob_fields\n-        self.insert_values = [':%s' % x for x in self.pks + self.otherfields + self.blob_fields]\n \n     def _buildQuery(self, key):\n-        q = self.queryTemplate % (self.table.name,\n-                                  ', '.join(self.insert_fields),\n-                                  ', '.join(self.insert_values))\n+        q = self.queryTemplate % (self.table.name, ', '.join(self.insert_fields))\n         return q\n \n     def query(self, values):\n         if self.blob_fields:\n-            chunksize = 1\n             blob_map = {}\n             for f in self.blob_fields:\n                 blob_map[f] = f\n         else:\n-            chunksize = self.count\n             blob_map = None\n \n         # Do the insert\n         statement = self._getCachedQuery(None, blob_map=blob_map)\n-        executeStatement(statement, values, chunksize)\n+        l = len(values[self.insert_fields[0]])\n+        value_list = [[values[f][i] for f in self.insert_fields] for i in range(l)]\n+        statement.execute_values(self._buildQuery(None), value_list, fetch=False, page_size=10_000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjU1MQ=="}, "originalCommit": {"oid": "1bb6b88cf846d49810428245fa54f17044a396d9"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4343, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}