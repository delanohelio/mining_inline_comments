{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MTY3MjAx", "number": 1929, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToyMTo0M1rODjf0tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjo0NToyM1rODjzRDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTQ4MTUwOnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/content-management/project/project.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToyMTo0M1rOFvVlIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoxOToyM1rOF0E6Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4MDk2Mw==", "bodyText": "IIUC those two conditions stand for:\n\nif the first environment is building from sources, I will not be able to Build because if I do that it would overwrite the current building\nif the second environment is building, I will not be able to Build because if I do that the current building from the  first environment to the second will be overwritten\n\nAre these correct? I'd say let's add one line comment for each, what do you think?", "url": "https://github.com/uyuni-project/uyuni/pull/1929#discussion_r385180963", "createdAt": "2020-02-27T15:21:43Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/content-management/project/project.js", "diffHunk": "@@ -73,7 +73,11 @@ const Project = (props: Props) => {\n   }\n \n   const isProjectEdited = changesToBuild.length > 0;\n-  const isBuildDisabled = !hasEditingPermissions || _isEmpty(project.environments) || _isEmpty(project.softwareSources);\n+  const isBuildDisabled = !hasEditingPermissions\n+        || _isEmpty(project.environments)\n+        || _isEmpty(project.softwareSources)\n+        || project.environments[0].status === \"building\"\n+        || (project.environments[1] || {}).status === \"building\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a954334cccbb0285042d0206ab9f0b30d88cc0dd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MDcwNg==", "bodyText": "Just to elaborate on the 2nd point:\nIf the 2nd environment is building (in other words promotion from 1st to 2nd env is going on), channels are cloned from the 1st environment to the 2nd one. We want to prevent build, as it would change channels in the 1st environment, which are used by the ongoing promotion.\nAn example:\nInitial configuration (source + 2 environments):\nS -> 1 -> 2\n\nLets promote 1 to 2\nS -> [ 1 -> 2 ]\n\nLets  build the source at the same time! \nWait, we can't, since it's target (1) is already used as a source for promoting.\n[S -> [ 1 ]-> 2 ]\n\nI'll add some comments, that'd make sense.", "url": "https://github.com/uyuni-project/uyuni/pull/1929#discussion_r390150706", "createdAt": "2020-03-10T08:19:23Z", "author": {"login": "hustodemon"}, "path": "web/html/src/manager/content-management/project/project.js", "diffHunk": "@@ -73,7 +73,11 @@ const Project = (props: Props) => {\n   }\n \n   const isProjectEdited = changesToBuild.length > 0;\n-  const isBuildDisabled = !hasEditingPermissions || _isEmpty(project.environments) || _isEmpty(project.softwareSources);\n+  const isBuildDisabled = !hasEditingPermissions\n+        || _isEmpty(project.environments)\n+        || _isEmpty(project.softwareSources)\n+        || project.environments[0].status === \"building\"\n+        || (project.environments[1] || {}).status === \"building\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4MDk2Mw=="}, "originalCommit": {"oid": "a954334cccbb0285042d0206ab9f0b30d88cc0dd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTUxMjM5OnYy", "diffSide": "RIGHT", "path": "web/html/src/manager/content-management/shared/components/panels/promote/promote.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToyODoxM1rOFvV3Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToyODoxM1rOFvV3Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4NTYzOQ==", "bodyText": "Good idea, I like the fact we give a hint in the UI, I'd also suggest to add a clear note in the documentation about the entire behavior. \ud83d\udc4d", "url": "https://github.com/uyuni-project/uyuni/pull/1929#discussion_r385185639", "createdAt": "2020-02-27T15:28:13Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/content-management/shared/components/panels/promote/promote.js", "diffHunk": "@@ -37,13 +38,18 @@ const Promote = (props: Props) => {\n   }, [open]);\n \n   const modalNameId = `${props.environmentPromote.label}-cm-promote-env-modal`;\n+\n   const disabled =\n     !hasEditingPermissions\n     || !props.environmentPromote.version\n-    || props.environmentPromote.version <= props.environmentTarget.version;\n+    || props.environmentPromote.version <= props.environmentTarget.version\n+    || props.environmentPromote.status === \"building\"\n+    || props.environmentTarget.status === \"building\"\n+    || (props.environmentNextTarget || {}).status === \"building\";\n+\n   return (\n     <div\n-      {...(disabled ? {title: t(\"No version to promote\")} : {})}\n+      {...(disabled ? {title: t(\"No version to promote or colliding environment build in progress\")} : {})}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a954334cccbb0285042d0206ab9f0b30d88cc0dd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODY2Mzg1OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/ContentProjectFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjo0NDoyM1rOFvzxDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjo0ODoyMFrOFvz3vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3NTUzNQ==", "bodyText": "How many of these objects to we expect in worst case?\nIf it is more than, say, 100, I would suggest an UPDATE query instead of SELECTing, hydrating, updating and saving back (I would imagine at a later point in time).", "url": "https://github.com/uyuni-project/uyuni/pull/1929#discussion_r385675535", "createdAt": "2020-02-28T12:44:23Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/ContentProjectFactory.java", "diffHunk": "@@ -567,6 +567,22 @@ public static void remove(ContentProjectFilter filter) {\n         INSTANCE.removeObject(filter);\n     }\n \n+    /**\n+     * Set all BUILDING {@link EnvironmentTarget}s to FAILED state.\n+     *\n+     * @return the number of updated targets\n+     */\n+    public static int failStaleTargets() {\n+        List<EnvironmentTarget> targets = HibernateFactory.getSession()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf85e0a658c36cb2625284ab7683f4314061e50"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3NzI0Ng==", "bodyText": "In typical scenarios, it shouldn't be more than tens of objects.\nBut your suggestion sounds like a most natural approach and I like it. Let me change it.", "url": "https://github.com/uyuni-project/uyuni/pull/1929#discussion_r385677246", "createdAt": "2020-02-28T12:48:20Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/ContentProjectFactory.java", "diffHunk": "@@ -567,6 +567,22 @@ public static void remove(ContentProjectFilter filter) {\n         INSTANCE.removeObject(filter);\n     }\n \n+    /**\n+     * Set all BUILDING {@link EnvironmentTarget}s to FAILED state.\n+     *\n+     * @return the number of updated targets\n+     */\n+    public static int failStaleTargets() {\n+        List<EnvironmentTarget> targets = HibernateFactory.getSession()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3NTUzNQ=="}, "originalCommit": {"oid": "2bf85e0a658c36cb2625284ab7683f4314061e50"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODY2NzAxOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/redhat/rhn/manager/satellite/StartupTasksCommand.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjo0NToyM1rOFvzy0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzowODo1NVrOFv0YlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3NTk4Nw==", "bodyText": "Most cleanups of this kind currently take place in Taskomatic. What would be the pros and cons in this specific case?", "url": "https://github.com/uyuni-project/uyuni/pull/1929#discussion_r385675987", "createdAt": "2020-02-28T12:45:23Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/manager/satellite/StartupTasksCommand.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.manager.satellite;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.domain.contentmgmt.ContentProjectFactory;\n+import com.redhat.rhn.manager.BaseTransactionCommand;\n+\n+import org.apache.log4j.Logger;\n+\n+/**\n+ * Tasks to be performed on the application startup\n+ */\n+public class StartupTasksCommand extends BaseTransactionCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f28e61e97077774a7f9d8205dc443dddc2c8e3"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4MDU5Nw==", "bodyText": "Handling the problem in Tasko:\nPros: staying consistent with the most cleanup tasks ;)\nCons: Taskomatic doesn't know which tasks are stale, so it' impossible to flag those as failed: The tasks are run as asynchronous actions in tomcat. Each task has an attribute status (BUILDING, FAILED, COMPLETED,...). When the CLM build logic runs (in tomcat), the status is set based on the progress of the build. Taskomatic has no way to figure out if a task in BUILDING state is still doing something or if it's stale. OTOH, on Tomcat startup, we can safely say that all BUILDING tasks are stale.", "url": "https://github.com/uyuni-project/uyuni/pull/1929#discussion_r385680597", "createdAt": "2020-02-28T12:56:36Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/manager/satellite/StartupTasksCommand.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.manager.satellite;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.domain.contentmgmt.ContentProjectFactory;\n+import com.redhat.rhn.manager.BaseTransactionCommand;\n+\n+import org.apache.log4j.Logger;\n+\n+/**\n+ * Tasks to be performed on the application startup\n+ */\n+public class StartupTasksCommand extends BaseTransactionCommand {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3NTk4Nw=="}, "originalCommit": {"oid": "74f28e61e97077774a7f9d8205dc443dddc2c8e3"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4NTY1Mw==", "bodyText": "Then I understand that a Taskomatic based approach has no chance.\nYou have my blessing for the approach.", "url": "https://github.com/uyuni-project/uyuni/pull/1929#discussion_r385685653", "createdAt": "2020-02-28T13:08:55Z", "author": {"login": "moio"}, "path": "java/code/src/com/redhat/rhn/manager/satellite/StartupTasksCommand.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.manager.satellite;\n+\n+import com.redhat.rhn.common.hibernate.HibernateFactory;\n+import com.redhat.rhn.domain.contentmgmt.ContentProjectFactory;\n+import com.redhat.rhn.manager.BaseTransactionCommand;\n+\n+import org.apache.log4j.Logger;\n+\n+/**\n+ * Tasks to be performed on the application startup\n+ */\n+public class StartupTasksCommand extends BaseTransactionCommand {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3NTk4Nw=="}, "originalCommit": {"oid": "74f28e61e97077774a7f9d8205dc443dddc2c8e3"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 173, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}