{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNTQwNzQx", "number": 2185, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTozOTowN1rOD5vZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTozOTowN1rOD5vZHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODcxOTAxOnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTozOTowN1rOGRLSbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTozOTowN1rOGRLSbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2MzkxNg==", "bodyText": "Hmm, shouldn't we better filter the systems which are not accessible for the user instead of throwing an exception? AFAIK we discussed it now in mumble.", "url": "https://github.com/uyuni-project/uyuni/pull/2185#discussion_r420663916", "createdAt": "2020-05-06T09:39:07Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -301,4 +309,103 @@ protected void manageAffectedScheduledActions(User user, MaintenanceSchedule sch\n             List<String> scheduleStrategy) {\n         // TODO: implement it\n     }\n+\n+    /**\n+     * Assign {@link MaintenanceSchedule} to given set of {@link Server}s.\n+     *\n+     * @param user the user\n+     * @param schedule the {@link MaintenanceSchedule}\n+     * @param systemIds the set of {@link Server} IDs\n+     * @throws PermissionException if the user does not have access to given servers\n+     * @throws IllegalArgumentException if systems have pending maintenance-only actions\n+     * @return the number of involved {@link Server}s\n+     */\n+    public int assignScheduleToSystems(User user, MaintenanceSchedule schedule, Set<Long> systemIds) {\n+        ensureOrgAdmin(user);\n+        ensureSystemsAccessible(user, systemIds);\n+        ensureScheduleAccessible(user, schedule);\n+\n+        Set<Long> withMaintenanceActions = ServerFactory.filterSystemsWithPendingMaintOnlyActions(systemIds);\n+        if (!withMaintenanceActions.isEmpty()) {\n+            throw new IllegalArgumentException(\"Systems have pending maintenance-only actions:\" +\n+                    withMaintenanceActions);\n+        }\n+\n+        return ServerFactory.setMaintenanceScheduleToSystems(schedule, systemIds);\n+    }\n+\n+    /**\n+     * Retract {@link MaintenanceSchedule} from given set of {@link Server}s.\n+     *\n+     * @param user the user\n+     * @param systemIds the set of {@link Server} IDs\n+     * @throws PermissionException if the user does not have access to given servers\n+     * @return the number of involved {@link Server}s\n+     */\n+    public int retractScheduleFromSystems(User user, Set<Long> systemIds) {\n+        ensureOrgAdmin(user);\n+        ensureSystemsAccessible(user, systemIds);\n+\n+        return ServerFactory.setMaintenanceScheduleToSystems(null, systemIds);\n+    }\n+\n+    /**\n+     * List {@link Server} IDs with given schedule\n+     *\n+     * @param user the user\n+     * @param schedule the schedule\n+     * @return the {@link Server} IDS with given schedule\n+     */\n+    public List<Long> listSystemIdsWithSchedule(User user, MaintenanceSchedule schedule) {\n+        ensureOrgAdmin(user);\n+        ensureScheduleAccessible(user, schedule);\n+\n+        List systemIds = getSession().createQuery(\n+                \"SELECT s.id from Server s \" +\n+                        \"WHERE s.maintenanceSchedule = :schedule\")\n+                .setParameter(\"schedule\", schedule)\n+                .list();\n+\n+        ensureSystemsAccessible(user, systemIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8371147299e2cc3d1de993c83bd5bad5fade0c"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4371, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}