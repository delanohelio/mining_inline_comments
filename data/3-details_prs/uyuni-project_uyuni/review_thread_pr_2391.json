{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzU3NDA0", "number": 2391, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNTowMTo1NFrOEL7PhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxODowMlrOEL7aiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTQwNDIwOnYy", "diffSide": "RIGHT", "path": "spacecmd/src/spacecmd/system.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNTowMTo1NFrOGtvK8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNTowMTo1NFrOGtvK8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMTk1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        print('    IDs: ' + tgt['ident'])\n          \n          \n            \n                        print('    ID: ' + tgt['ident'])", "url": "https://github.com/uyuni-project/uyuni/pull/2391#discussion_r450611953", "createdAt": "2020-07-07T05:01:54Z", "author": {"login": "mcalmer"}, "path": "spacecmd/src/spacecmd/system.py", "diffHunk": "@@ -4238,3 +4238,123 @@ def do_system_scheduleapplyconfigchannels(self, args):\n     return 0\n \n ####################\n+\n+\n+def help_system_listmigrationtargets(self):\n+    print('system_listmigrationtargets: List possible migration targets for given systems.')\n+    print('usage: system_listmigrationtargets <SYSTEMS>')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_listmigrationtargets(self, args):\n+    arg_parser = get_argument_parser()\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) != 1:\n+        self.help_system_listmigrationtargets()\n+        return\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            print('WARN: Cannot find system ' + str(system))\n+            continue\n+\n+        print('System ' + str(system))\n+        tgts = self.client.system.listMigrationTargets(self.session, system_id)\n+\n+        if not tgts:\n+            print('  No migration targets')\n+\n+        for num, tgt in enumerate(tgts, start=1):\n+            print('  Target #' + str(num) + \":\")\n+            print('    IDs: ' + tgt['ident'])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTQxOTY0OnYy", "diffSide": "RIGHT", "path": "spacecmd/src/spacecmd/system.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxMDo1NFrOGtvT8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODoxMTo1N1rOGtzrhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNDI1Ng==", "bodyText": "why is migration target a option and dryrun an argument?\nIt is not easy to understand how to provide it. Especially as dryrun is a bool and it is not explained how to provide it.\nWhat about to turn it around? Migration Target as mandatory argument and dryrun as optional option?", "url": "https://github.com/uyuni-project/uyuni/pull/2391#discussion_r450614256", "createdAt": "2020-07-07T05:10:54Z", "author": {"login": "mcalmer"}, "path": "spacecmd/src/spacecmd/system.py", "diffHunk": "@@ -4238,3 +4238,123 @@ def do_system_scheduleapplyconfigchannels(self, args):\n     return 0\n \n ####################\n+\n+\n+def help_system_listmigrationtargets(self):\n+    print('system_listmigrationtargets: List possible migration targets for given systems.')\n+    print('usage: system_listmigrationtargets <SYSTEMS>')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_listmigrationtargets(self, args):\n+    arg_parser = get_argument_parser()\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) != 1:\n+        self.help_system_listmigrationtargets()\n+        return\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            print('WARN: Cannot find system ' + str(system))\n+            continue\n+\n+        print('System ' + str(system))\n+        tgts = self.client.system.listMigrationTargets(self.session, system_id)\n+\n+        if not tgts:\n+            print('  No migration targets')\n+\n+        for num, tgt in enumerate(tgts, start=1):\n+            print('  Target #' + str(num) + \":\")\n+            print('    IDs: ' + tgt['ident'])\n+            print('    Friendly names: ' + tgt['friendly'])\n+\n+####################\n+\n+\n+def help_system_schedulespmigration(self):\n+    print('system_schedulespmigration: Schedule a Service Pack migration for systems.')\n+    print('usage: system_listmigrationtargets <SYSTEM> <DRY_RUN?> <BASE_CHANNEL_LABEL> [options] \\\n+\\n    options: \\\n+\\n        -s START_TIME \\\n+\\n        -t MIGRATION_TARGET_ID (see system_listmigrationtargets) \\\n+\\n        -c CHILD_CHANNELS (comma-separated child channels labels)')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4NTgzMA==", "bodyText": "In the Uyuni API, the dry run is mandatory parameter, and migration target is optional (there are 2 scheduleSPMigration methods: one accepts the targetIdent, one does not). So I think that migration target should stay optional.\nAbout dry run: I could make it optional as well (maybe using a -d flag?). When user does not provide it, it would default to false. What do you think?", "url": "https://github.com/uyuni-project/uyuni/pull/2391#discussion_r450685830", "createdAt": "2020-07-07T08:11:57Z", "author": {"login": "hustodemon"}, "path": "spacecmd/src/spacecmd/system.py", "diffHunk": "@@ -4238,3 +4238,123 @@ def do_system_scheduleapplyconfigchannels(self, args):\n     return 0\n \n ####################\n+\n+\n+def help_system_listmigrationtargets(self):\n+    print('system_listmigrationtargets: List possible migration targets for given systems.')\n+    print('usage: system_listmigrationtargets <SYSTEMS>')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_listmigrationtargets(self, args):\n+    arg_parser = get_argument_parser()\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) != 1:\n+        self.help_system_listmigrationtargets()\n+        return\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            print('WARN: Cannot find system ' + str(system))\n+            continue\n+\n+        print('System ' + str(system))\n+        tgts = self.client.system.listMigrationTargets(self.session, system_id)\n+\n+        if not tgts:\n+            print('  No migration targets')\n+\n+        for num, tgt in enumerate(tgts, start=1):\n+            print('  Target #' + str(num) + \":\")\n+            print('    IDs: ' + tgt['ident'])\n+            print('    Friendly names: ' + tgt['friendly'])\n+\n+####################\n+\n+\n+def help_system_schedulespmigration(self):\n+    print('system_schedulespmigration: Schedule a Service Pack migration for systems.')\n+    print('usage: system_listmigrationtargets <SYSTEM> <DRY_RUN?> <BASE_CHANNEL_LABEL> [options] \\\n+\\n    options: \\\n+\\n        -s START_TIME \\\n+\\n        -t MIGRATION_TARGET_ID (see system_listmigrationtargets) \\\n+\\n        -c CHILD_CHANNELS (comma-separated child channels labels)')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNDI1Ng=="}, "originalCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTQyNzI2OnYy", "diffSide": "RIGHT", "path": "spacecmd/src/spacecmd/system.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxNToxNFrOGtvYiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODoyMzo0NFrOGt0FEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNTQzMg==", "bodyText": "We iterate over multiple systems, but the requirement is, that all can be migrated to the same target.\nIt seems you catch exceptions when the target does not match.\nIs it wanted to support multiple systems?\nIf yes, you should change the way how to call this function and put systemid as final argument and let it be an array.", "url": "https://github.com/uyuni-project/uyuni/pull/2391#discussion_r450615432", "createdAt": "2020-07-07T05:15:14Z", "author": {"login": "mcalmer"}, "path": "spacecmd/src/spacecmd/system.py", "diffHunk": "@@ -4238,3 +4238,123 @@ def do_system_scheduleapplyconfigchannels(self, args):\n     return 0\n \n ####################\n+\n+\n+def help_system_listmigrationtargets(self):\n+    print('system_listmigrationtargets: List possible migration targets for given systems.')\n+    print('usage: system_listmigrationtargets <SYSTEMS>')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_listmigrationtargets(self, args):\n+    arg_parser = get_argument_parser()\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) != 1:\n+        self.help_system_listmigrationtargets()\n+        return\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            print('WARN: Cannot find system ' + str(system))\n+            continue\n+\n+        print('System ' + str(system))\n+        tgts = self.client.system.listMigrationTargets(self.session, system_id)\n+\n+        if not tgts:\n+            print('  No migration targets')\n+\n+        for num, tgt in enumerate(tgts, start=1):\n+            print('  Target #' + str(num) + \":\")\n+            print('    IDs: ' + tgt['ident'])\n+            print('    Friendly names: ' + tgt['friendly'])\n+\n+####################\n+\n+\n+def help_system_schedulespmigration(self):\n+    print('system_schedulespmigration: Schedule a Service Pack migration for systems.')\n+    print('usage: system_listmigrationtargets <SYSTEM> <DRY_RUN?> <BASE_CHANNEL_LABEL> [options] \\\n+\\n    options: \\\n+\\n        -s START_TIME \\\n+\\n        -t MIGRATION_TARGET_ID (see system_listmigrationtargets) \\\n+\\n        -c CHILD_CHANNELS (comma-separated child channels labels)')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_schedulespmigration(self, args):\n+    arg_parser = get_argument_parser()\n+    arg_parser.add_argument('-s', '--start-time')\n+    arg_parser.add_argument('-t', '--migration-target')\n+    arg_parser.add_argument('-c', '--child-channels')\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) < 3:\n+        self.help_system_schedulespmigration()\n+        return\n+\n+    # POSITIONAL ARGS\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    dry_run = string_to_bool(args[1])\n+    base_channel_label = args[2]\n+\n+    # OPTIONAL NAMED ARGS\n+    if options.start_time:\n+        options.start_time = parse_time_input(options.start_time)\n+    else:\n+        options.start_time = parse_time_input('now')\n+\n+    child_channels = []\n+    if options.child_channels:\n+        child_channels = [cnl.strip() for cnl in options.child_channels.split(',')]\n+\n+    for system in sorted(systems):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5MjM2OQ==", "bodyText": "I don't think I understand it. Yes, I wanted to support multiple systems: every now and then, there are some users asking, how to migrate multiple systems and this is not possible (without additional scripting). I was thinking that it would be useful to provide a spacecmd method that would support migrating multiple systems (it supports the extended syntax like group:ci-servers or ssm) to the same migration target. The current behavior is, that it tries to migrate them one-by-one and it any of these fails (either system is not found, or the scheduleSPMigration gives back an exception), it'll just get logged and spacecmd would continue with the next system.", "url": "https://github.com/uyuni-project/uyuni/pull/2391#discussion_r450692369", "createdAt": "2020-07-07T08:23:44Z", "author": {"login": "hustodemon"}, "path": "spacecmd/src/spacecmd/system.py", "diffHunk": "@@ -4238,3 +4238,123 @@ def do_system_scheduleapplyconfigchannels(self, args):\n     return 0\n \n ####################\n+\n+\n+def help_system_listmigrationtargets(self):\n+    print('system_listmigrationtargets: List possible migration targets for given systems.')\n+    print('usage: system_listmigrationtargets <SYSTEMS>')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_listmigrationtargets(self, args):\n+    arg_parser = get_argument_parser()\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) != 1:\n+        self.help_system_listmigrationtargets()\n+        return\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            print('WARN: Cannot find system ' + str(system))\n+            continue\n+\n+        print('System ' + str(system))\n+        tgts = self.client.system.listMigrationTargets(self.session, system_id)\n+\n+        if not tgts:\n+            print('  No migration targets')\n+\n+        for num, tgt in enumerate(tgts, start=1):\n+            print('  Target #' + str(num) + \":\")\n+            print('    IDs: ' + tgt['ident'])\n+            print('    Friendly names: ' + tgt['friendly'])\n+\n+####################\n+\n+\n+def help_system_schedulespmigration(self):\n+    print('system_schedulespmigration: Schedule a Service Pack migration for systems.')\n+    print('usage: system_listmigrationtargets <SYSTEM> <DRY_RUN?> <BASE_CHANNEL_LABEL> [options] \\\n+\\n    options: \\\n+\\n        -s START_TIME \\\n+\\n        -t MIGRATION_TARGET_ID (see system_listmigrationtargets) \\\n+\\n        -c CHILD_CHANNELS (comma-separated child channels labels)')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_schedulespmigration(self, args):\n+    arg_parser = get_argument_parser()\n+    arg_parser.add_argument('-s', '--start-time')\n+    arg_parser.add_argument('-t', '--migration-target')\n+    arg_parser.add_argument('-c', '--child-channels')\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) < 3:\n+        self.help_system_schedulespmigration()\n+        return\n+\n+    # POSITIONAL ARGS\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    dry_run = string_to_bool(args[1])\n+    base_channel_label = args[2]\n+\n+    # OPTIONAL NAMED ARGS\n+    if options.start_time:\n+        options.start_time = parse_time_input(options.start_time)\n+    else:\n+        options.start_time = parse_time_input('now')\n+\n+    child_channels = []\n+    if options.child_channels:\n+        child_channels = [cnl.strip() for cnl in options.child_channels.split(',')]\n+\n+    for system in sorted(systems):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNTQzMg=="}, "originalCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTQzMjQzOnYy", "diffSide": "RIGHT", "path": "spacecmd/src/spacecmd/system.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxODowMlrOGtvbhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODoxNTowNlrOGtzyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNjE5OA==", "bodyText": "Not sure if we should support this way to call the function. AFAIK we still have it because of some backwards-compatiblety reason.", "url": "https://github.com/uyuni-project/uyuni/pull/2391#discussion_r450616198", "createdAt": "2020-07-07T05:18:02Z", "author": {"login": "mcalmer"}, "path": "spacecmd/src/spacecmd/system.py", "diffHunk": "@@ -4238,3 +4238,123 @@ def do_system_scheduleapplyconfigchannels(self, args):\n     return 0\n \n ####################\n+\n+\n+def help_system_listmigrationtargets(self):\n+    print('system_listmigrationtargets: List possible migration targets for given systems.')\n+    print('usage: system_listmigrationtargets <SYSTEMS>')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_listmigrationtargets(self, args):\n+    arg_parser = get_argument_parser()\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) != 1:\n+        self.help_system_listmigrationtargets()\n+        return\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            print('WARN: Cannot find system ' + str(system))\n+            continue\n+\n+        print('System ' + str(system))\n+        tgts = self.client.system.listMigrationTargets(self.session, system_id)\n+\n+        if not tgts:\n+            print('  No migration targets')\n+\n+        for num, tgt in enumerate(tgts, start=1):\n+            print('  Target #' + str(num) + \":\")\n+            print('    IDs: ' + tgt['ident'])\n+            print('    Friendly names: ' + tgt['friendly'])\n+\n+####################\n+\n+\n+def help_system_schedulespmigration(self):\n+    print('system_schedulespmigration: Schedule a Service Pack migration for systems.')\n+    print('usage: system_listmigrationtargets <SYSTEM> <DRY_RUN?> <BASE_CHANNEL_LABEL> [options] \\\n+\\n    options: \\\n+\\n        -s START_TIME \\\n+\\n        -t MIGRATION_TARGET_ID (see system_listmigrationtargets) \\\n+\\n        -c CHILD_CHANNELS (comma-separated child channels labels)')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_schedulespmigration(self, args):\n+    arg_parser = get_argument_parser()\n+    arg_parser.add_argument('-s', '--start-time')\n+    arg_parser.add_argument('-t', '--migration-target')\n+    arg_parser.add_argument('-c', '--child-channels')\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) < 3:\n+        self.help_system_schedulespmigration()\n+        return\n+\n+    # POSITIONAL ARGS\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    dry_run = string_to_bool(args[1])\n+    base_channel_label = args[2]\n+\n+    # OPTIONAL NAMED ARGS\n+    if options.start_time:\n+        options.start_time = parse_time_input(options.start_time)\n+    else:\n+        options.start_time = parse_time_input('now')\n+\n+    child_channels = []\n+    if options.child_channels:\n+        child_channels = [cnl.strip() for cnl in options.child_channels.split(',')]\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            logging.warning('Cannot find system ' + str(system) + '. Skipping it.')\n+            continue\n+\n+        print('Scheduling Service Pack migration for system ' + str(system))\n+        result = None\n+        try:\n+            if options.migration_target:\n+                result = self.client.system.scheduleSPMigration(self.session,\n+                        system_id, options.migration_target, base_channel_label,\n+                        child_channels, dry_run, options.start_time)\n+            else:\n+                result = self.client.system.scheduleSPMigration(self.session,\n+                        system_id, base_channel_label, child_channels,\n+                        dry_run, options.start_time)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4NzUzNg==", "bodyText": "I see, I didn't know that. Then this would change the reasoning in my first comment.", "url": "https://github.com/uyuni-project/uyuni/pull/2391#discussion_r450687536", "createdAt": "2020-07-07T08:15:06Z", "author": {"login": "hustodemon"}, "path": "spacecmd/src/spacecmd/system.py", "diffHunk": "@@ -4238,3 +4238,123 @@ def do_system_scheduleapplyconfigchannels(self, args):\n     return 0\n \n ####################\n+\n+\n+def help_system_listmigrationtargets(self):\n+    print('system_listmigrationtargets: List possible migration targets for given systems.')\n+    print('usage: system_listmigrationtargets <SYSTEMS>')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_listmigrationtargets(self, args):\n+    arg_parser = get_argument_parser()\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) != 1:\n+        self.help_system_listmigrationtargets()\n+        return\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            print('WARN: Cannot find system ' + str(system))\n+            continue\n+\n+        print('System ' + str(system))\n+        tgts = self.client.system.listMigrationTargets(self.session, system_id)\n+\n+        if not tgts:\n+            print('  No migration targets')\n+\n+        for num, tgt in enumerate(tgts, start=1):\n+            print('  Target #' + str(num) + \":\")\n+            print('    IDs: ' + tgt['ident'])\n+            print('    Friendly names: ' + tgt['friendly'])\n+\n+####################\n+\n+\n+def help_system_schedulespmigration(self):\n+    print('system_schedulespmigration: Schedule a Service Pack migration for systems.')\n+    print('usage: system_listmigrationtargets <SYSTEM> <DRY_RUN?> <BASE_CHANNEL_LABEL> [options] \\\n+\\n    options: \\\n+\\n        -s START_TIME \\\n+\\n        -t MIGRATION_TARGET_ID (see system_listmigrationtargets) \\\n+\\n        -c CHILD_CHANNELS (comma-separated child channels labels)')\n+    print('')\n+    print(self.HELP_SYSTEM_OPTS)\n+\n+\n+def do_system_schedulespmigration(self, args):\n+    arg_parser = get_argument_parser()\n+    arg_parser.add_argument('-s', '--start-time')\n+    arg_parser.add_argument('-t', '--migration-target')\n+    arg_parser.add_argument('-c', '--child-channels')\n+\n+    (args, options) = parse_command_arguments(args, arg_parser)\n+\n+    if len(args) < 3:\n+        self.help_system_schedulespmigration()\n+        return\n+\n+    # POSITIONAL ARGS\n+\n+    # use the systems listed in the SSM\n+    if re.match('ssm', args[0], re.I):\n+        systems = self.ssm.keys()\n+    else:\n+        systems = self.expand_systems(args[0])\n+\n+    if not systems:\n+        print('No systems found')\n+        return\n+\n+    dry_run = string_to_bool(args[1])\n+    base_channel_label = args[2]\n+\n+    # OPTIONAL NAMED ARGS\n+    if options.start_time:\n+        options.start_time = parse_time_input(options.start_time)\n+    else:\n+        options.start_time = parse_time_input('now')\n+\n+    child_channels = []\n+    if options.child_channels:\n+        child_channels = [cnl.strip() for cnl in options.child_channels.split(',')]\n+\n+    for system in sorted(systems):\n+        system_id = self.get_system_id(system)\n+        if not system_id:\n+            logging.warning('Cannot find system ' + str(system) + '. Skipping it.')\n+            continue\n+\n+        print('Scheduling Service Pack migration for system ' + str(system))\n+        result = None\n+        try:\n+            if options.migration_target:\n+                result = self.client.system.scheduleSPMigration(self.session,\n+                        system_id, options.migration_target, base_channel_label,\n+                        child_channels, dry_run, options.start_time)\n+            else:\n+                result = self.client.system.scheduleSPMigration(self.session,\n+                        system_id, base_channel_label, child_channels,\n+                        dry_run, options.start_time)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNjE5OA=="}, "originalCommit": {"oid": "14319ac1d0a43d4c9de6a0b132df575b5e54e191"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4236, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}