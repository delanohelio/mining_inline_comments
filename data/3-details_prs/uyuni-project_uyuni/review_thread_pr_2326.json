{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MjAwOTA3", "number": 2326, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxNDozOVrOEGXolQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyOToyMVrOEK6-nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTE0MTMzOnYy", "diffSide": "RIGHT", "path": "susemanager-utils/susemanager-sls/salt/bootstrap/susemanager.conf", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxNDozOVrOGlHz2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1NjozNlrOGlJxAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3ODQ1OA==", "bodyText": "As it should now work with both, old and new syntax we should not enforce it.\nA customer who has own written state files and did not port it yet to use the compat module will hard fail for new clients.\nAnd as this config file is managed by SUSE Manager he cannot change it.", "url": "https://github.com/uyuni-project/uyuni/pull/2326#discussion_r441578458", "createdAt": "2020-06-17T14:14:39Z", "author": {"login": "mcalmer"}, "path": "susemanager-utils/susemanager-sls/salt/bootstrap/susemanager.conf", "diffHunk": "@@ -12,3 +12,5 @@ start_event_grains:\n   - machine_id\n   - saltboot_initrd\n   - susemanager\n+use_superseded:\n+  - module.run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "440617a698440880694fa5ff183ce631ac506afa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3ODg1NA==", "bodyText": "We should do this in the testsuite, so we can be sure that it works.", "url": "https://github.com/uyuni-project/uyuni/pull/2326#discussion_r441578854", "createdAt": "2020-06-17T14:15:11Z", "author": {"login": "mcalmer"}, "path": "susemanager-utils/susemanager-sls/salt/bootstrap/susemanager.conf", "diffHunk": "@@ -12,3 +12,5 @@ start_event_grains:\n   - machine_id\n   - saltboot_initrd\n   - susemanager\n+use_superseded:\n+  - module.run", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3ODQ1OA=="}, "originalCommit": {"oid": "440617a698440880694fa5ff183ce631ac506afa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxMDQ5Nw==", "bodyText": "That's true. We should not enable this by default.", "url": "https://github.com/uyuni-project/uyuni/pull/2326#discussion_r441610497", "createdAt": "2020-06-17T14:56:36Z", "author": {"login": "meaksh"}, "path": "susemanager-utils/susemanager-sls/salt/bootstrap/susemanager.conf", "diffHunk": "@@ -12,3 +12,5 @@ start_event_grains:\n   - machine_id\n   - saltboot_initrd\n   - susemanager\n+use_superseded:\n+  - module.run", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3ODQ1OA=="}, "originalCommit": {"oid": "440617a698440880694fa5ff183ce631ac506afa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDc5NjgzOnYy", "diffSide": "RIGHT", "path": "susemanager-utils/susemanager-sls/susemanager-sls.spec", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowMDoyNVrOGqJCqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxNDo1OFrOGqJhFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MTUxMg==", "bodyText": "I think using module.run is now \"forbidden\". Would it make sense to do a simple test to check that nobody uses it when pushing changes in future?\nMaybe simply a\ngrep \"module.run\" %{buildroot}/usr/share/susemanager/salt || exit 1\n\nin %check section or something similar in the unit tests which can run also on PRs.", "url": "https://github.com/uyuni-project/uyuni/pull/2326#discussion_r446841512", "createdAt": "2020-06-29T08:00:25Z", "author": {"login": "mcalmer"}, "path": "susemanager-utils/susemanager-sls/susemanager-sls.spec", "diffHunk": "@@ -91,6 +91,7 @@ cp src/modules/mgrclusters.py %{buildroot}/usr/share/susemanager/salt/_modules\n cp src/modules/mgr_caasp_manager.py %{buildroot}/usr/share/susemanager/salt/_modules\n cp src/modules/ssh_agent.py %{buildroot}/usr/share/susemanager/salt/_modules\n cp src/states/product.py %{buildroot}/usr/share/susemanager/salt/_states\n+cp src/states/mgrcompat.py %{buildroot}/usr/share/susemanager/salt/_states", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43df46dd00eebda4725196097e2bd85eb80ef301"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0OTMwMQ==", "bodyText": "Yeah, we should forbid the usage of module.run in our SLS files from now on. So, those RPM checks or unit tests you propose sound perfect.\nI'll push also those checks into this PR.", "url": "https://github.com/uyuni-project/uyuni/pull/2326#discussion_r446849301", "createdAt": "2020-06-29T08:14:58Z", "author": {"login": "meaksh"}, "path": "susemanager-utils/susemanager-sls/susemanager-sls.spec", "diffHunk": "@@ -91,6 +91,7 @@ cp src/modules/mgrclusters.py %{buildroot}/usr/share/susemanager/salt/_modules\n cp src/modules/mgr_caasp_manager.py %{buildroot}/usr/share/susemanager/salt/_modules\n cp src/modules/ssh_agent.py %{buildroot}/usr/share/susemanager/salt/_modules\n cp src/states/product.py %{buildroot}/usr/share/susemanager/salt/_states\n+cp src/states/mgrcompat.py %{buildroot}/usr/share/susemanager/salt/_states", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MTUxMg=="}, "originalCommit": {"oid": "43df46dd00eebda4725196097e2bd85eb80ef301"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODgwNTQ3OnYy", "diffSide": "RIGHT", "path": ".github/workflows/salt-sls-files-checks.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoxMzo1MVrOGsOxcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoxMzo1MVrOGsOxcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMjU2Mw==", "bodyText": "You probably don't want this workflow to run on edited, as it would be triggered whenever the PR description is changed! The remaining event types should be just fine and this is actually the default for pull_request, i.e. you can completely omit the types. Instead you probably want to add a paths filter, see my updated version of the rubocop workflow.", "url": "https://github.com/uyuni-project/uyuni/pull/2326#discussion_r449032563", "createdAt": "2020-07-02T14:13:51Z", "author": {"login": "renner"}, "path": ".github/workflows/salt-sls-files-checks.yml", "diffHunk": "@@ -0,0 +1,21 @@\n+name: Check the content of Salt SLS files\n+\n+on:\n+  pull_request:\n+    types: [opened, edited, synchronize, reopened]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c731331546e5cfeecc27c87f38f471741620c22"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODgyOTgyOnYy", "diffSide": "RIGHT", "path": ".github/workflows/salt-sls-files-checks.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoxOTozMVrOGsPAtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoxOTozMVrOGsPAtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNjQ3MA==", "bodyText": "There is newer version (v2) of actions/checkout, it uses fetch-depth: 1 per default (so it can be omitted here) and apparently contains some other improvements. See again the rubocop workflow for an example.", "url": "https://github.com/uyuni-project/uyuni/pull/2326#discussion_r449036470", "createdAt": "2020-07-02T14:19:31Z", "author": {"login": "renner"}, "path": ".github/workflows/salt-sls-files-checks.yml", "diffHunk": "@@ -0,0 +1,21 @@\n+name: Check the content of Salt SLS files\n+\n+on:\n+  pull_request:\n+    types: [opened, edited, synchronize, reopened]\n+\n+jobs:\n+  salt_sls_files_checks:\n+\n+    runs-on: ubuntu-latest\n+    \n+    steps:\n+    - uses: actions/checkout@v1\n+      with:\n+        fetch-depth: 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c731331546e5cfeecc27c87f38f471741620c22"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODg3NTE5OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/reactor/messaging/RegisterMinionEventMessageAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyOToyMVrOGsPczQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDoyODozMlrOGuh14w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MzY2MQ==", "bodyText": "Isn't this doing a synchronous Salt call reaching out to that minion? Someone who is an expert on the registration code and it's scalability should probably approve this at least, I remember that previously we tried to avoid doing synchronous calls to Salt during the registration as there is a risk of blocking a thread in case the minion is not responding. If there is any option to run this asynchronously it would definitely be preferable from my perspective.", "url": "https://github.com/uyuni-project/uyuni/pull/2326#discussion_r449043661", "createdAt": "2020-07-02T14:29:21Z", "author": {"login": "renner"}, "path": "java/code/src/com/suse/manager/reactor/messaging/RegisterMinionEventMessageAction.java", "diffHunk": "@@ -403,6 +403,8 @@ else if (!minion.getOrg().equals(org)) {\n                 return;\n             }\n \n+            MinionList minionTarget = new MinionList(minionId);\n+            systemQuery.syncAll(minionTarget);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c731331546e5cfeecc27c87f38f471741620c22"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1Njg2Mg==", "bodyText": "Hmmm, yeah, this would be a callSync execution in the end. I'll think how we could make this asynchronous \ud83d\udc4d", "url": "https://github.com/uyuni-project/uyuni/pull/2326#discussion_r449456862", "createdAt": "2020-07-03T08:40:48Z", "author": {"login": "meaksh"}, "path": "java/code/src/com/suse/manager/reactor/messaging/RegisterMinionEventMessageAction.java", "diffHunk": "@@ -403,6 +403,8 @@ else if (!minion.getOrg().equals(org)) {\n                 return;\n             }\n \n+            MinionList minionTarget = new MinionList(minionId);\n+            systemQuery.syncAll(minionTarget);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MzY2MQ=="}, "originalCommit": {"oid": "9c731331546e5cfeecc27c87f38f471741620c22"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MjE0Nw==", "bodyText": "As discussed, I've removed this call during minion registration. After latest SLS refactoring, the custom mgrcompat state module should be automatically deployed while applying any SLS that requires it, particularly, the \"Hardware Refresh\" action triggered at the beginning of registration will also sync the states.", "url": "https://github.com/uyuni-project/uyuni/pull/2326#discussion_r451442147", "createdAt": "2020-07-08T10:28:32Z", "author": {"login": "meaksh"}, "path": "java/code/src/com/suse/manager/reactor/messaging/RegisterMinionEventMessageAction.java", "diffHunk": "@@ -403,6 +403,8 @@ else if (!minion.getOrg().equals(org)) {\n                 return;\n             }\n \n+            MinionList minionTarget = new MinionList(minionId);\n+            systemQuery.syncAll(minionTarget);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MzY2MQ=="}, "originalCommit": {"oid": "9c731331546e5cfeecc27c87f38f471741620c22"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4315, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}