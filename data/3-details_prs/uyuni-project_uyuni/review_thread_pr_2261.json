{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzODgyNTg4", "number": 2261, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1OToyN1rOEAhT_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1OToyN1rOEAhT_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTgxMjQ2OnYy", "diffSide": "RIGHT", "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1OToyN1rOGb2c6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOToyNzoyOFrOGdpjaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1Njg3Mg==", "bodyText": "Nit: For an immutable collection of fixed-size elements, you can use neater way: List.of(<varargs>) (analogous: Set.of(...), Map.of(...)).", "url": "https://github.com/uyuni-project/uyuni/pull/2261#discussion_r431856872", "createdAt": "2020-05-28T13:59:27Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -112,8 +114,17 @@ public void checkMaintenanceWindows(Set<Long> systemIds, Action action) {\n         Date scheduleDate = action.getEarliestAction();\n \n         // we only take maintenance-mode-only actions and actions that don't have prerequisite\n-        // (first actions in action choins) into account\n+        // (first actions in action chains) into account\n         if (action.getActionType().isMaintenancemodeOnly() && action.getPrerequisite() == null) {\n+            // Special Case: we want to allow channel changing but it calls a state.apply\n+            if (action.getActionType().equals(ActionFactory.TYPE_APPLY_STATES)) {\n+                ApplyStatesAction applyStatesAction = (ApplyStatesAction) HibernateFactory.unproxy(action);\n+                if (applyStatesAction.getDetails() != null &&\n+                        applyStatesAction.getDetails().getMods().equals(\n+                            Collections.singletonList(ApplyStatesEventMessage.CHANNELS))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bb1b218ae55214aef93796dedbba4dedf3c29"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0MjY5OQ==", "bodyText": "good to know. Changed and rebased.", "url": "https://github.com/uyuni-project/uyuni/pull/2261#discussion_r433742699", "createdAt": "2020-06-02T09:27:28Z", "author": {"login": "mcalmer"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -112,8 +114,17 @@ public void checkMaintenanceWindows(Set<Long> systemIds, Action action) {\n         Date scheduleDate = action.getEarliestAction();\n \n         // we only take maintenance-mode-only actions and actions that don't have prerequisite\n-        // (first actions in action choins) into account\n+        // (first actions in action chains) into account\n         if (action.getActionType().isMaintenancemodeOnly() && action.getPrerequisite() == null) {\n+            // Special Case: we want to allow channel changing but it calls a state.apply\n+            if (action.getActionType().equals(ActionFactory.TYPE_APPLY_STATES)) {\n+                ApplyStatesAction applyStatesAction = (ApplyStatesAction) HibernateFactory.unproxy(action);\n+                if (applyStatesAction.getDetails() != null &&\n+                        applyStatesAction.getDetails().getMods().equals(\n+                            Collections.singletonList(ApplyStatesEventMessage.CHANNELS))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1Njg3Mg=="}, "originalCommit": {"oid": "5d7bb1b218ae55214aef93796dedbba4dedf3c29"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4263, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}