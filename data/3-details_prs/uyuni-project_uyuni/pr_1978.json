{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNzAyMzg3", "number": 1978, "title": "Recurring Actions feature", "bodyText": "What does this PR change?\nThis PR contains the whole \"Recurring Actions\" feature (RFC). The PR consists of the following parts:\n\nRecurringAction entity with all data about the action\na hibernate Factory class for lower-level CRUD operations on that entity\na Manager class for higher-level operations (with permission checking) on that entity, including a method for scheduling/unscheduling a recurring action\ndb schema for all of the above\na Taskomatic job executing the recurring actions\nfrontend: bunch of new components:\n\nRecurringEventPicker: component that allows user to define recurring interval in a friendly way (they can specify hourly/daily/monthly interval, or a raw cron string)\nbunch of components for recurring actions CRUD (these use the RecurringEventPicker internally). In some views, these components also display the list of minions affected by the recurring schedule, with the possibility of displaying their highstate.\nintegration of these components in the Uyuni UI (see the screenshots below):\n\nMinion details -> States -> Recurring States - per-minion recurring states\nSystem -> System groups -> <select a group> -> States -> Recurring States - per-group recurring states\nMy Organization -> Recurring States - per-org recurring states\nAdmin -> Organizations -> <select an org> -> States -> Recurring States - per-org recurring states\nSchedule -> Recurring Actions - list of all recurring states visible to the user\n\n\n\n\n\nThe commits are structured according to Uyuni component, so review commit-by-commit would be the best.\nTODO\n\n Check if the rebase hasn't break the highstate.js and related\n\nGUI diff\nAfter:\nAdded Create Recurring button for highstates:\n\nListing of Minions:\n\nListing of Groups:\n\nListing of My Organization:\n\nListing of Admin Organization:\n\nListing of All Schedules:\n\nEditing/Creating of Schedules:\n\nSchedule Detail View:\n\nDeleting of Schedules:\n\n\n DONE\n\nDocumentation\n\n\nuyuni-project/uyuni-docs#116\n\n\n DONE\n\n\nTest coverage\n\n\nUnit tests were added\n\n\n DONE\n\n\nLinks\nSUSE/spacewalk#8265\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\"\n Re-run test \"ruby_rubocop\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-03-04T16:58:21Z", "url": "https://github.com/uyuni-project/uyuni/pull/1978", "merged": true, "mergeCommit": {"oid": "99f658093352727050320d38907ae3ed04707900"}, "closed": true, "closedAt": "2020-03-06T12:43:56Z", "author": {"login": "hustodemon"}, "timelineItems": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKZ-f6gBqjMwOTc0OTY0MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcK_IH4gBqjMxMDUxNDAyMTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "495b17c12a73c4d3dff46d608af8e8f62c105314", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/495b17c12a73c4d3dff46d608af8e8f62c105314", "committedDate": "2020-03-04T16:53:24Z", "message": "Changelog"}, "afterCommit": {"oid": "48de17956aac652ab1b1bb6145c4c3efb271a015", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/48de17956aac652ab1b1bb6145c4c3efb271a015", "committedDate": "2020-03-04T17:00:57Z", "message": "Changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48de17956aac652ab1b1bb6145c4c3efb271a015", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/48de17956aac652ab1b1bb6145c4c3efb271a015", "committedDate": "2020-03-04T17:00:57Z", "message": "Changelog"}, "afterCommit": {"oid": "644c34355523ca146fb085ce2d609f7ada63e4ad", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/644c34355523ca146fb085ce2d609f7ada63e4ad", "committedDate": "2020-03-05T11:44:45Z", "message": "Changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Njg3NzY1", "url": "https://github.com/uyuni-project/uyuni/pull/1978#pullrequestreview-369687765", "createdAt": "2020-03-05T15:52:17Z", "commit": {"oid": "d5dbd762dec81d4642e201621af52967d7816d80"}, "state": "COMMENTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1MjoxOFrOFyZGxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyMjowNlrOFycvHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NDQ1Mg==", "bodyText": "This means every months will have only 28 days right? I'd like to add a note about this, like a tooltip contained in an * or something that explains (maybe syncing with doc guys) that days a limited to 28 in order to have a recurring schedule available for all the months\nNote: this can be improved later btw", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388384452", "createdAt": "2020-03-05T15:52:18Z", "author": {"login": "ncounter"}, "path": "web/html/src/components/recurring-event-picker.js", "diffHunk": "@@ -0,0 +1,380 @@\n+/* eslint-disable */\n+// @flow\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+\n+const {DateTimePicker} = require(\"./datetimepicker\");\n+const {Combobox} = require(\"./combobox\");\n+import type {ComboboxItem} from \"./combobox\";\n+const { Form } = require('components/input/Form');\n+const { Text } = require('components/input/Text');\n+const Functions = require(\"../utils/functions\");\n+\n+type RecurringEventPickerProps = {\n+    timezone: string,\n+    scheduleName: string,\n+    type: string,\n+    cron: string,\n+    cronTimes: Hash<string, string>,\n+    onScheduleNameChanged: (scheduleName: string) => void,\n+    onTypeChanged: (type: string) => void,\n+    onCronTimesChanged: (cronTimes: Hash<string, string>) => void,\n+    onCronChanged: (cron: string) => void\n+};\n+\n+type RecurringEventPickerState = {\n+    scheduleName: string,\n+    type: \"hourly\" | \"daily\" | \"weekly\" | \"monthly\" | \"cron\",\n+    time: Date,\n+    minutes: ComboboxItem,\n+    weekDay: ComboboxItem,\n+    monthDay: ComboboxItem,\n+};\n+\n+class RecurringEventPicker extends React.Component<RecurringEventPickerProps, RecurringEventPickerState> {\n+\n+    minutes = Array.from(Array(60).keys()).map(id => ({id: Number(id), text: (id).toString()}));\n+\n+    weekDays = [{id: Number(1), text: 'Sunday'},\n+        {id: Number(2), text: 'Monday'},\n+        {id: Number(3), text: 'Tuesday'},\n+        {id: Number(4), text: 'Wednesday'},\n+        {id: Number(5), text: 'Thursday'},\n+        {id: Number(6), text: 'Friday'},\n+        {id: Number(7), text: 'Saturday'}];\n+\n+    monthDays = Array.from(Array(28).keys()).map(id => ({id: Number(id + 1), text: (id + 1).toString()}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5dbd762dec81d4642e201621af52967d7816d80"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMzM4MQ==", "bodyText": "We should not merge todo code", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388413381", "createdAt": "2020-03-05T16:34:29Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations\n+                targetId: minions[0].id\n+            });\n+        } else if (search.match(\"\\\\?sgid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"GROUP\",\n+                targetId: groupId\n+            });\n+        } else {\n+            Object.assign(this.state, {\n+                targetType: \"ORG\",\n+                targetId: orgId\n+            });\n+        }\n+    };\n+\n+    isEdit = () => {\n+        return !!this.props.schedule;\n+    };\n+\n+    onEdit = () => {\n+        this.props.onEdit({\n+            targetId: this.state.targetId,\n+            recurringActionId: this.state.recurringActionId,\n+            //minionNames: this.state.minions.map(minion => minion.name), // todo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMzQwMQ==", "bodyText": "We should not merge todo code", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388413401", "createdAt": "2020-03-05T16:34:29Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxNDMxNA==", "bodyText": "We should not merge todo code", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388414314", "createdAt": "2020-03-05T16:35:51Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-details.js", "diffHunk": "@@ -0,0 +1,170 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+const {Messages} = require(\"components/messages\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+\n+class RecurringStatesDetails extends React.Component {\n+\n+    weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            messages: [],\n+            minions: props.minions\n+        };\n+    }\n+\n+    getExecutionText(data) {\n+        if (data.type !== \"cron\") {\n+            return (\n+                <tr>\n+                    <td>{t(\"Execution time\")}:</td>\n+                    {data.type === \"daily\" ?\n+                        <td>\n+                            {\"Every day at \"}\n+                            <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                        </td>\n+                        : data.type === \"weekly\" ?\n+                            <td>\n+                                {\"Every \"}\n+                                <b>{this.weekDays[data.cronTimes.dayOfWeek - 1]}</b>\n+                                {\" at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td> :\n+                            <td>\n+                                {\"Every \"}\n+                                <b>\n+                                    {data.cronTimes.dayOfMonth + (\n+                                        data.cronTimes.dayOfMonth === \"1\" ? \"st \"\n+                                            : data.cronTimes.dayOfMonth === \"2\" ? \"nd \"\n+                                            : data.cronTimes.dayOfMonth === \"3\" ? \"rd \"\n+                                                : \"th \")}\n+                                </b>\n+                                {\"of the month at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td>\n+                    }\n+                </tr>\n+            );\n+        } else {\n+            /* TODO: Get execution text from custom cron string */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODY0OQ==", "bodyText": "We should not merge commented code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418649", "createdAt": "2020-03-05T16:42:23Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODc1Mg==", "bodyText": "We should not merge commented code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418752", "createdAt": "2020-03-05T16:42:33Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODgzMA==", "bodyText": "We should not merge commented code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418830", "createdAt": "2020-03-05T16:42:41Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {\n+                                        this.props.onSelect(row)\n+                                    }}\n+                                />\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Edit\")}\n+                                    icon=\"fa-edit\"\n+                                    handler={() => {\n+                                        this.props.onEdit(row)\n+                                    }}\n+                                />\n+                                <ModalButton\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Delete\")}\n+                                    icon=\"fa-trash\"\n+                                    target=\"delete-modal\"\n+                                    item={row}\n+                                    onClick={i => this.selectToDelete(i)}\n+                                />\n+                            </div>\n+                        </td>\n+                    </tr>\n+                );\n+            });\n+        }\n+\n+        return (\n+            <tbody className=\"table-content\">\n+            {elements.length > 0 ? elements :\n+                <tr>\n+                    <td colSpan=\"4\">\n+                        <div>{t(\"No schedules created.\" + (this.props.disableCreate ? \"\" : \" Use Create to add a schedule.\"))}</div>\n+                    </td>\n+                </tr>\n+            }\n+            </tbody>\n+        );\n+    };\n+\n+    render() {\n+        const createButton = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    className=\"btn-default\"\n+                    icon=\"fa-plus\"\n+                    text={t(\"Create\")}\n+                    title=\"Schedule a new Recurring States Action\"\n+                    handler={() => {this.props.onActionChanged(\"create\")}}\n+                />\n+            </div>\n+        ];\n+        const targetType = this.props.disableCreate ? <th className=\"text-center\">{t(\"Target Type\")}</th> : null;\n+\n+        return (\n+            <div>\n+                <InnerPanel title={t(\"Recurring States\")} icon=\"spacewalk-icon-salt\" buttons={this.props.disableCreate ? null : createButton}>\n+                    <div className=\"panel panel-default\">\n+                        <div className=\"panel-heading\">\n+                            <div>\n+                                <h3>Schedules</h3>\n+                            </div>\n+                        </div>\n+                        <div className=\"panel-body\">\n+                            <table className=\"table table-striped\">\n+                                <thead>\n+                                <tr>\n+                                    <th>{t(\"Active\")}</th>\n+                                    <th className=\"text-center\">{t(\"Schedule Name\")}</th>\n+                                    <th className=\"text-center\">{t(\"Frequency\")}</th>\n+                                    { /* <th className=\"text-center\">{t(\"Created at\")}</th> */}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODg4NQ==", "bodyText": "We should not merge commented code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418885", "createdAt": "2020-03-05T16:42:47Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {\n+                                        this.props.onSelect(row)\n+                                    }}\n+                                />\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Edit\")}\n+                                    icon=\"fa-edit\"\n+                                    handler={() => {\n+                                        this.props.onEdit(row)\n+                                    }}\n+                                />\n+                                <ModalButton\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Delete\")}\n+                                    icon=\"fa-trash\"\n+                                    target=\"delete-modal\"\n+                                    item={row}\n+                                    onClick={i => this.selectToDelete(i)}\n+                                />\n+                            </div>\n+                        </td>\n+                    </tr>\n+                );\n+            });\n+        }\n+\n+        return (\n+            <tbody className=\"table-content\">\n+            {elements.length > 0 ? elements :\n+                <tr>\n+                    <td colSpan=\"4\">\n+                        <div>{t(\"No schedules created.\" + (this.props.disableCreate ? \"\" : \" Use Create to add a schedule.\"))}</div>\n+                    </td>\n+                </tr>\n+            }\n+            </tbody>\n+        );\n+    };\n+\n+    render() {\n+        const createButton = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    className=\"btn-default\"\n+                    icon=\"fa-plus\"\n+                    text={t(\"Create\")}\n+                    title=\"Schedule a new Recurring States Action\"\n+                    handler={() => {this.props.onActionChanged(\"create\")}}\n+                />\n+            </div>\n+        ];\n+        const targetType = this.props.disableCreate ? <th className=\"text-center\">{t(\"Target Type\")}</th> : null;\n+\n+        return (\n+            <div>\n+                <InnerPanel title={t(\"Recurring States\")} icon=\"spacewalk-icon-salt\" buttons={this.props.disableCreate ? null : createButton}>\n+                    <div className=\"panel panel-default\">\n+                        <div className=\"panel-heading\">\n+                            <div>\n+                                <h3>Schedules</h3>\n+                            </div>\n+                        </div>\n+                        <div className=\"panel-body\">\n+                            <table className=\"table table-striped\">\n+                                <thead>\n+                                <tr>\n+                                    <th>{t(\"Active\")}</th>\n+                                    <th className=\"text-center\">{t(\"Schedule Name\")}</th>\n+                                    <th className=\"text-center\">{t(\"Frequency\")}</th>\n+                                    { /* <th className=\"text-center\">{t(\"Created at\")}</th> */}\n+                                    {targetType}\n+                                    { /* <th className=\"text-center\">{t(\"Skip Next\")}</th> */ }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxOTg3OA==", "bodyText": "We should not merge commented and todo code.\nBtw yes, I don't really like the inferEntityParams() function. It hides too much the endpoint we are going to use. Better to have different and clear call instead. If you want to extract that from here, I'd say the function should return the full URL to use then: in this case I'd be okay with it.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388419878", "createdAt": "2020-03-05T16:44:19Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states.js", "diffHunk": "@@ -0,0 +1,236 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesDetails} = require(\"./recurring-states-details\");\n+const {RecurringStatesList} = require(\"./recurring-states-list\");\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+const Utils = require(\"utils/functions\").Utils;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+// HACK: infer entity type and id based on the globals set\n+function inferEntityParams() {\n+    if (window.groupId !== undefined) {\n+        return \"/GROUP/\" + window.groupId;\n+    } else if (window.orgId !== undefined) {\n+        return \"/ORG/\" + window.orgId;\n+    } else if (minions.length > 0) {\n+        return \"/MINION/\" + minions[0].id;\n+    }\n+    return \"\";\n+}\n+\n+class RecurringStates extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"deleteSchedule\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+        \"onMessageChanged\", \"updateSchedule\", \"toggleActive\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            messages: [],\n+            minionIds: minions.length > 0 && minions[0].id ? minions.map(minion => minion.id) : undefined,\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if ((action === \"edit\" || action === \"details\") && id) {\n+            this.getScheduleDetails(id, action);\n+        } else if (!action) {\n+            this.getRecurringScheduleList();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    isFiltered = () => {\n+        return !!this.state.minionIds;\n+    };\n+\n+    getRecurringScheduleList = () => {\n+        // todo create different endpoints for each use case (\"/rhn/manager/api/recurringactions/group/id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzMzM0NQ==", "bodyText": "I am worried about this obscure magic \ud83d\ude04\nI understand the reason of the logic, but since it is already extracted in a separate method, I'd really explain more the logic in a different way. I can't imagine debugging or understanding this from a new pair of eyes.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388433345", "createdAt": "2020-03-05T17:05:05Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations\n+                targetId: minions[0].id\n+            });\n+        } else if (search.match(\"\\\\?sgid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"GROUP\",\n+                targetId: groupId\n+            });\n+        } else {\n+            Object.assign(this.state, {\n+                targetType: \"ORG\",\n+                targetId: orgId\n+            });\n+        }\n+    };\n+\n+    isEdit = () => {\n+        return !!this.props.schedule;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzMzU2Mg==", "bodyText": "We should not merge todo code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388433562", "createdAt": "2020-03-05T17:05:29Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations\n+                targetId: minions[0].id\n+            });\n+        } else if (search.match(\"\\\\?sgid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"GROUP\",\n+                targetId: groupId\n+            });\n+        } else {\n+            Object.assign(this.state, {\n+                targetType: \"ORG\",\n+                targetId: orgId\n+            });\n+        }\n+    };\n+\n+    isEdit = () => {\n+        return !!this.props.schedule;\n+    };\n+\n+    onEdit = () => {\n+        this.props.onEdit({\n+            targetId: this.state.targetId,\n+            recurringActionId: this.state.recurringActionId,\n+            //minionNames: this.state.minions.map(minion => minion.name), // todo\n+            scheduleName: this.state.scheduleName,\n+            active: this.state.active,\n+            type: this.state.type,\n+            targetType: this.state.targetType,\n+            cronTimes: this.state.cronTimes,\n+            cron: this.state.cron,\n+            test: this.state.test\n+        });\n+    };\n+\n+    onScheduleNameChanged = (scheduleName) => {\n+        this.setState({scheduleName: scheduleName});\n+    };\n+\n+    onToggleActive = (active) => {\n+        this.setState({active: active});\n+    };\n+\n+    onTypeChanged = (type) => {\n+        this.setState({type: type});\n+    };\n+\n+    onCronTimesChanged = (cronTimes) => {\n+        this.setState({cronTimes: cronTimes});\n+    };\n+\n+    onCustomCronChanged = (cron) => {\n+        this.setState({cron: cron});\n+    };\n+\n+    toggleTestState = () => {\n+        this.setState({test: !this.state.test});\n+    };\n+\n+    resetFields = () => {\n+        /* TODO: Write implementation */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNTM0Nw==", "bodyText": "Do we really need the { wrapping the function body?\nhandler={() => this.props.onSelect(row)}\nAnd there are others below this", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388435347", "createdAt": "2020-03-05T17:07:36Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNzA5Mg==", "bodyText": "Same as before", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388437092", "createdAt": "2020-03-05T17:10:18Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states.js", "diffHunk": "@@ -0,0 +1,236 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesDetails} = require(\"./recurring-states-details\");\n+const {RecurringStatesList} = require(\"./recurring-states-list\");\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+const Utils = require(\"utils/functions\").Utils;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+// HACK: infer entity type and id based on the globals set\n+function inferEntityParams() {\n+    if (window.groupId !== undefined) {\n+        return \"/GROUP/\" + window.groupId;\n+    } else if (window.orgId !== undefined) {\n+        return \"/ORG/\" + window.orgId;\n+    } else if (minions.length > 0) {\n+        return \"/MINION/\" + minions[0].id;\n+    }\n+    return \"\";\n+}\n+\n+class RecurringStates extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"deleteSchedule\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+        \"onMessageChanged\", \"updateSchedule\", \"toggleActive\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            messages: [],\n+            minionIds: minions.length > 0 && minions[0].id ? minions.map(minion => minion.id) : undefined,\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if ((action === \"edit\" || action === \"details\") && id) {\n+            this.getScheduleDetails(id, action);\n+        } else if (!action) {\n+            this.getRecurringScheduleList();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    isFiltered = () => {\n+        return !!this.state.minionIds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzODk1Nw==", "bodyText": "Why do we need this check?\nI also believe the checkstyle would complain about it. It should be:\nif (!item) { return false; }", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388438957", "createdAt": "2020-03-05T17:13:32Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states.js", "diffHunk": "@@ -0,0 +1,236 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesDetails} = require(\"./recurring-states-details\");\n+const {RecurringStatesList} = require(\"./recurring-states-list\");\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+const Utils = require(\"utils/functions\").Utils;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+// HACK: infer entity type and id based on the globals set\n+function inferEntityParams() {\n+    if (window.groupId !== undefined) {\n+        return \"/GROUP/\" + window.groupId;\n+    } else if (window.orgId !== undefined) {\n+        return \"/ORG/\" + window.orgId;\n+    } else if (minions.length > 0) {\n+        return \"/MINION/\" + minions[0].id;\n+    }\n+    return \"\";\n+}\n+\n+class RecurringStates extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"deleteSchedule\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+        \"onMessageChanged\", \"updateSchedule\", \"toggleActive\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            messages: [],\n+            minionIds: minions.length > 0 && minions[0].id ? minions.map(minion => minion.id) : undefined,\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if ((action === \"edit\" || action === \"details\") && id) {\n+            this.getScheduleDetails(id, action);\n+        } else if (!action) {\n+            this.getRecurringScheduleList();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    isFiltered = () => {\n+        return !!this.state.minionIds;\n+    };\n+\n+    getRecurringScheduleList = () => {\n+        // todo create different endpoints for each use case (\"/rhn/manager/api/recurringactions/group/id\")\n+        const entityParams = inferEntityParams();\n+        const endpoint = \"/rhn/manager/api/recurringactions\" + entityParams;\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(schedules => {\n+                this.setState({\n+                    action: undefined,\n+                    selected: undefined,\n+                    schedules: schedules.data\n+                });\n+            }).catch(this.handleResponseError);\n+    };\n+\n+    getScheduleDetails(row, action) {\n+        this.setState({selected: row, action: action});\n+    }\n+\n+    handleDetailsAction(row) {\n+        this.getScheduleDetails(row, \"details\");\n+        history.pushState(null, null, \"#/details/\" + row.recurringActionId);\n+    }\n+\n+    handleEditAction(row) {\n+        this.getScheduleDetails(row, \"edit\");\n+        history.pushState(null, null, \"#/edit/\" + row.recurringActionId);\n+    }\n+\n+    toggleActive(schedule) {\n+        Object.assign(schedule, {\n+            active: !(schedule.active)\n+        });\n+        this.updateSchedule(schedule);\n+    }\n+\n+    skipNext(item) {\n+        /* Write implementation to skip next run */\n+        this.handleForwardAction();\n+    }\n+\n+    updateSchedule(schedule) {\n+        return Network.post(\n+            \"/rhn/manager/api/recurringactions/save\",\n+            JSON.stringify(schedule),\n+            \"application/json\"\n+        ).promise.then((data) => {\n+            // HACK: propagate the errors from messages to the UI\n+            let newMsgs = [];\n+            if (data.messages === undefined || data.messages.length === 0) { // no errors from the server\n+                newMsgs = MessagesUtils.info(<span>{t(\"Schedule successully created.\")}</span>);\n+            } else {\n+                const decorator = data.success ? MessagesUtils.info : MessagesUtils.error;\n+                newMsgs = decorator.apply(null, data.messages);\n+            }\n+\n+            const msgs = this.state.messages.concat(newMsgs);\n+\n+            while (msgs.length > messagesCounterLimit) {\n+                msgs.shift();\n+            }\n+\n+            this.onMessageChanged(msgs);\n+            this.setState({\n+                messages: msgs\n+            });\n+\n+            if (data.success) {\n+                this.handleForwardAction();\n+            } else {\n+                this.handleResponseError();\n+            }\n+\n+        }).catch(this.handleResponseError);\n+    }\n+\n+    deleteSchedule(item) {\n+        if (!item) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MDY5Ng==", "bodyText": "I'd like to have a field or a property populated from the backend instead, relying on a slice of the URL is not really robust from my POV, the URL could also change at any time.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388440696", "createdAt": "2020-03-05T17:16:22Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTIwOA==", "bodyText": "We should not merge commented code.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388441208", "createdAt": "2020-03-05T17:17:20Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-details.js", "diffHunk": "@@ -0,0 +1,170 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+const {Messages} = require(\"components/messages\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+\n+class RecurringStatesDetails extends React.Component {\n+\n+    weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            messages: [],\n+            minions: props.minions\n+        };\n+    }\n+\n+    getExecutionText(data) {\n+        if (data.type !== \"cron\") {\n+            return (\n+                <tr>\n+                    <td>{t(\"Execution time\")}:</td>\n+                    {data.type === \"daily\" ?\n+                        <td>\n+                            {\"Every day at \"}\n+                            <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                        </td>\n+                        : data.type === \"weekly\" ?\n+                            <td>\n+                                {\"Every \"}\n+                                <b>{this.weekDays[data.cronTimes.dayOfWeek - 1]}</b>\n+                                {\" at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td> :\n+                            <td>\n+                                {\"Every \"}\n+                                <b>\n+                                    {data.cronTimes.dayOfMonth + (\n+                                        data.cronTimes.dayOfMonth === \"1\" ? \"st \"\n+                                            : data.cronTimes.dayOfMonth === \"2\" ? \"nd \"\n+                                            : data.cronTimes.dayOfMonth === \"3\" ? \"rd \"\n+                                                : \"th \")}\n+                                </b>\n+                                {\"of the month at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td>\n+                    }\n+                </tr>\n+            );\n+        } else {\n+            /* TODO: Get execution text from custom cron string */\n+            return (\n+                <tr>\n+                    <td>{\"Type\"}:</td>\n+                    <td>{\"Custom Quartz string\"}</td>\n+                </tr>\n+            );\n+        }\n+\n+    }\n+\n+    showScheduleDetails(data) {\n+        data.cronTimes.hour = data.cronTimes.hour.padStart(2, \"0\");\n+        data.cronTimes.minute = data.cronTimes.minute.padStart(2, \"0\");\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"State:\")}</td>\n+                            <td>{data.active === \"true\" ? t(\"active\") : <b>{t(\"disabled\")}</b>}</td>\n+                        </tr>\n+                        { data.test === \"true\" &&\n+                        <tr>\n+                            <td>{t(\"Test\")}:</td>\n+                            <td>{t(\"True\")}</td>\n+                        </tr>\n+                        }\n+                        <tr>\n+                            <td>{t(\"Target type\")}:</td>\n+                            <td>{data.targetType}</td>\n+                        </tr>\n+                        { data.targetType === \"Group\" &&\n+                        <tr>\n+                            <td>{t(\"Group name\")}:</td>\n+                            <td>{data.groupName}</td>\n+                        </tr>\n+                        }\n+                        { /* data.minionNames.length < 20 &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTg0MQ==", "bodyText": "Please, remove the { wrapping the function call", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388441841", "createdAt": "2020-03-05T17:18:25Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {\n+                                        this.props.onSelect(row)\n+                                    }}\n+                                />\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Edit\")}\n+                                    icon=\"fa-edit\"\n+                                    handler={() => {\n+                                        this.props.onEdit(row)\n+                                    }}\n+                                />\n+                                <ModalButton\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Delete\")}\n+                                    icon=\"fa-trash\"\n+                                    target=\"delete-modal\"\n+                                    item={row}\n+                                    onClick={i => this.selectToDelete(i)}\n+                                />\n+                            </div>\n+                        </td>\n+                    </tr>\n+                );\n+            });\n+        }\n+\n+        return (\n+            <tbody className=\"table-content\">\n+            {elements.length > 0 ? elements :\n+                <tr>\n+                    <td colSpan=\"4\">\n+                        <div>{t(\"No schedules created.\" + (this.props.disableCreate ? \"\" : \" Use Create to add a schedule.\"))}</div>\n+                    </td>\n+                </tr>\n+            }\n+            </tbody>\n+        );\n+    };\n+\n+    render() {\n+        const createButton = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    className=\"btn-default\"\n+                    icon=\"fa-plus\"\n+                    text={t(\"Create\")}\n+                    title=\"Schedule a new Recurring States Action\"\n+                    handler={() => {this.props.onActionChanged(\"create\")}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c28644c262d213ca203a2b35605096d3e6099df"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MzE5MA==", "bodyText": "I'd not rely on the URL, better to have a field from the backend", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388443190", "createdAt": "2020-03-05T17:20:45Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/highstate/highstate.js", "diffHunk": "@@ -77,20 +80,50 @@ class Highstate extends React.Component {\n         this.setState({actionChain: actionChain})\n     };\n \n+    onMessageChanged = (message) => {\n+        this.setState({messages: message});\n+    };\n+\n+    handleForwardAction = (action) => {\n+        const loc = window.location;\n+        if(action === \"back\") {\n+            history.pushState(null, null, loc.pathname + loc.search);\n+            this.setState({\n+               action: undefined\n+            });\n+        } else {\n+            const pathname = loc.pathname.replace(\"highstate\", \"states/schedules\");\n+            Functions.Utils.urlBounce(pathname + loc.search);\n+        }\n+    };\n+\n     toggleTestState = () => {\n         this.setState({test: !this.state.test})\n     };\n \n+    isSSM = () => {\n+        return !!window.location.pathname.match(\"/ssm/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16867ab3c979eca3529624035702e12024efc79a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MzkzMw==", "bodyText": "Indentation to be fixed", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388443933", "createdAt": "2020-03-05T17:22:06Z", "author": {"login": "ncounter"}, "path": "java/code/src/com/suse/manager/webui/menu/MenuTree.java", "diffHunk": "@@ -74,6 +74,7 @@\n                     .addChild(new MenuItem(\"Organization Trusts\").withPrimaryUrl(\"/rhn/multiorg/Organizations.do\")\n                         .withAltUrl(\"/rhn/multiorg/OrgTrustDetails.do\").withAltUrl(\"/rhn/multiorg/channels/Consumed.do\")\n                         .withAltUrl(\"/rhn/multiorg/channels/Provided.do\").withVisibility(adminRoles.get(\"org\")))\n+                     .addChild(new MenuItem(\"Recurring States\").withPrimaryUrl(\"/rhn/manager/yourorg/recurring-states\").withVisibility(adminRoles.get(\"org\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a315c69a32cd87fd7a137b348c674200d039e29"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NzcxMTIw", "url": "https://github.com/uyuni-project/uyuni/pull/1978#pullrequestreview-369771120", "createdAt": "2020-03-05T17:30:43Z", "commit": {"oid": "788de161657e4d18ad0c35f745b3e05843b21253"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozMDo0NFrOFydB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozMDo0NFrOFydB1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0ODcyNw==", "bodyText": "So we don't receive any feedback from the server if everything went well? As I see we have a success flag, I'd better check the flag first and depending on it we can look into messages or not.", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388448727", "createdAt": "2020-03-05T17:30:44Z", "author": {"login": "ncounter"}, "path": "web/html/src/manager/state/highstate.js", "diffHunk": "@@ -0,0 +1,198 @@\n+/* eslint-disable */\n+'use strict';\n+\n+import {Button} from \"components/buttons\";\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Messages = require(\"components/messages\").Messages;\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const {ActionSchedule} = require(\"components/action-schedule\");\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const Functions = require(\"utils/functions\");\n+const Formats = Functions.Formats;\n+const {ActionLink, ActionChainLink} = require(\"components/links\");\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+\n+const messagesCounterLimit = 3;\n+\n+function msg(severityIn, textIn) {\n+    return {severity: severityIn, text: textIn};\n+}\n+\n+class Highstate extends React.Component {\n+    constructor(props) {\n+        super(props);\n+        var state = {\n+            messages: [],\n+            earliest: Functions.Utils.dateWithTimezone(localTime),\n+            test: false\n+        };\n+        this.state = state;\n+    }\n+\n+    applyHighstate = () => {\n+        const request = Network.post(\n+            \"/rhn/manager/api/states/applyall\",\n+            JSON.stringify({\n+                ids: minions.map(m => m.id),\n+                earliest: Formats.LocalDateTime(this.state.earliest),\n+                actionChain: this.state.actionChain ? this.state.actionChain.text : null,\n+                test: this.state.test\n+            }),\n+            \"application/json\"\n+        ).promise.then(data => {\n+            const msg = MessagesUtils.info(this.state.actionChain ?\n+                    <span>{t(\"Action has been successfully added to the \")}<ActionChainLink id={data}>{this.state.actionChain ? this.state.actionChain.text : \"\"}</ActionChainLink></span> :\n+                    <span>{t(\"Applying the highstate has been \")}<ActionLink id={data}>{t(\"scheduled.\")}</ActionLink></span>);\n+\n+            const msgs = this.state.messages.concat(msg);\n+\n+            // Do not spam UI showing old messages\n+            while (msgs.length > messagesCounterLimit) {\n+              msgs.shift();\n+            }\n+\n+            this.setState({\n+                messages: msgs\n+            });\n+        }).catch(this.handleResponseError);\n+\n+        return request;\n+    };\n+\n+    handleResponseError = (jqXHR) => {\n+      this.setState({\n+           messages: Network.responseErrorMessage(jqXHR)\n+      });\n+    };\n+\n+    onDateTimeChanged = (date) => {\n+        this.setState({\"earliest\": date});\n+    };\n+\n+    onActionChainChanged = (actionChain) => {\n+        this.setState({actionChain: actionChain})\n+    };\n+\n+    onMessageChanged = (message) => {\n+        this.setState({messages: message});\n+    };\n+\n+    handleForwardAction = (action) => {\n+        const loc = window.location;\n+        if(action === \"back\") {\n+            history.pushState(null, null, loc.pathname + loc.search);\n+            this.setState({\n+               action: undefined\n+            });\n+        } else {\n+            const pathname = loc.pathname.replace(\"highstate\", \"states/schedules\");\n+            Functions.Utils.urlBounce(pathname + loc.search);\n+        }\n+    };\n+\n+    toggleTestState = () => {\n+        this.setState({test: !this.state.test})\n+    };\n+\n+    isSSM = () => {\n+        return !!window.location.pathname.match(\"/ssm/\");\n+    };\n+\n+    updateSchedule =(schedule) => {\n+        return Network.post(\n+            \"/rhn/manager/api/recurringactions/save\",\n+            JSON.stringify(schedule),\n+            \"application/json\"\n+        ).promise.then((data) => {\n+            // HACK: propagate the errors from messages to the UI\n+            let newMsgs = [];\n+            if (data.messages === undefined || data.messages.length === 0) { // no errors from the server\n+                newMsgs = MessagesUtils.info(<span>{t(\"Schedule successully created.\")}</span>);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788de161657e4d18ad0c35f745b3e05843b21253"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjAxNzk1", "url": "https://github.com/uyuni-project/uyuni/pull/1978#pullrequestreview-370201795", "createdAt": "2020-03-06T09:54:29Z", "commit": {"oid": "788de161657e4d18ad0c35f745b3e05843b21253"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NDozMFrOFyzB-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NDozMFrOFyzB-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTIxMA==", "bodyText": "(Thou shalt not copypaste)", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388809210", "createdAt": "2020-03-06T09:54:30Z", "author": {"login": "hustodemon"}, "path": "web/html/src/manager/state/highstate.js", "diffHunk": "@@ -105,6 +105,41 @@ class Highstate extends React.Component {\n         return !!window.location.pathname.match(\"/ssm/\");\n     };\n \n+    updateSchedule =(schedule) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788de161657e4d18ad0c35f745b3e05843b21253"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9195a9abe9354f44ab11fdd1bb3bae145636a04d", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9195a9abe9354f44ab11fdd1bb3bae145636a04d", "committedDate": "2020-03-06T10:39:04Z", "message": "Fixed text and shows correctly if action is active/inactive"}, "afterCommit": {"oid": "86bdf9c1b070570e490f19a20b37b39326742adb", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/86bdf9c1b070570e490f19a20b37b39326742adb", "committedDate": "2020-03-06T10:46:48Z", "message": "Fix text when updating/disabling state"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a67c5feb3be615af975b130bf9b114328fb4f01", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4a67c5feb3be615af975b130bf9b114328fb4f01", "committedDate": "2020-03-06T11:40:23Z", "message": "Remove unnecessary check in deleteSchedule"}, "afterCommit": {"oid": "a57da63e5fbd14c6ab6521430b65bae86031e648", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a57da63e5fbd14c6ab6521430b65bae86031e648", "committedDate": "2020-03-06T11:43:18Z", "message": "Remove unnecessary check in deleteSchedule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3076b93bf6a284aea39aeb86a303cf5da97f3f75", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3076b93bf6a284aea39aeb86a303cf5da97f3f75", "committedDate": "2020-03-06T12:17:09Z", "message": "Schema: Taskomatic job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dab847ec97ee63fe26b76deba09127538584468b", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/dab847ec97ee63fe26b76deba09127538584468b", "committedDate": "2020-03-06T12:17:09Z", "message": "Schema: Hibernate entity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "171c8a21934ae128f05bd983b1408dba1470fb3c", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/171c8a21934ae128f05bd983b1408dba1470fb3c", "committedDate": "2020-03-06T12:17:09Z", "message": "Schema: Migrations + Changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db4fc28a9af7b46d7edc3632b5b794dcec8b9884", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/db4fc28a9af7b46d7edc3632b5b794dcec8b9884", "committedDate": "2020-03-06T12:17:09Z", "message": "Backend: Hibernate entity + Factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88958634c00b014cc5ef0546c37a679a6a93d675", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/88958634c00b014cc5ef0546c37a679a6a93d675", "committedDate": "2020-03-06T12:17:10Z", "message": "Backend: Factory test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "499b41d1d58f4750c581889d6355ae1b3a919aa2", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/499b41d1d58f4750c581889d6355ae1b3a919aa2", "committedDate": "2020-03-06T12:17:10Z", "message": "Backend: Manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8c848049e0bced301492f8afe97651ee56f15d7", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d8c848049e0bced301492f8afe97651ee56f15d7", "committedDate": "2020-03-06T12:17:10Z", "message": "Backend: Manager test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e54d13c2e6feaa6789a5033d43fdc330b9033e", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b1e54d13c2e6feaa6789a5033d43fdc330b9033e", "committedDate": "2020-03-06T12:17:10Z", "message": "Taskomatic: Job for executing Recurring Actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acedd9879dac67ad037dd029d2ead0aa19deb504", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/acedd9879dac67ad037dd029d2ead0aa19deb504", "committedDate": "2020-03-06T12:17:10Z", "message": "Backend: Adjust picker component\n\n- add the \"hourly\" option\n- make it possible for the picker to be prepopulated with a map\n  containing picker configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d723c590ff6cc9e9970260d8206cb9fb71dffb74", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d723c590ff6cc9e9970260d8206cb9fb71dffb74", "committedDate": "2020-03-06T12:17:10Z", "message": "Backend: Spark controller for Recurring Actions API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b41238ccbbd879f58bd3f1513919d727738ef7da", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b41238ccbbd879f58bd3f1513919d727738ef7da", "committedDate": "2020-03-06T12:17:10Z", "message": "Frontend + Backend: Static pages + their endpoints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815bb74535a1c5e8943502ab0fde14efed2cbae7", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/815bb74535a1c5e8943502ab0fde14efed2cbae7", "committedDate": "2020-03-06T12:17:11Z", "message": "Frontend: String resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25378e70551980568c6564b6f0476d20ed27366d", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/25378e70551980568c6564b6f0476d20ed27366d", "committedDate": "2020-03-06T12:17:11Z", "message": "Frontend: Allow hiding date/time in the datetimepicker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2e77461e4ad86e09419b214c320a70049408444", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b2e77461e4ad86e09419b214c320a70049408444", "committedDate": "2020-03-06T12:17:11Z", "message": "Frontend: Allow buttons on the left side of the InnerPanel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ab63c8414979d5d126ccefa3f96b5fa3c21ca9b", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9ab63c8414979d5d126ccefa3f96b5fa3c21ca9b", "committedDate": "2020-03-06T12:17:11Z", "message": "Frontend: Cron-expression picker for Recurring Actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26d9a897212c8369d3212c3cc49a83cdc8250833", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/26d9a897212c8369d3212c3cc49a83cdc8250833", "committedDate": "2020-03-06T12:17:11Z", "message": "Frontend: Components for Recurring Actions scheduling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4da37672706277e30cee57e57ca0b9a10b5ab526", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4da37672706277e30cee57e57ca0b9a10b5ab526", "committedDate": "2020-03-06T12:17:11Z", "message": "Frontend: Extract a component for displaying highstate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2136839c40cedd8e4d3a97aa1f730a6936ba5f4", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f2136839c40cedd8e4d3a97aa1f730a6936ba5f4", "committedDate": "2020-03-06T12:17:12Z", "message": "Frontend: Integrate the Recurring State component in the Highstate component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61284cf7cd3bb24c716bee9adacd5cb6add6c032", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/61284cf7cd3bb24c716bee9adacd5cb6add6c032", "committedDate": "2020-03-06T12:17:12Z", "message": "Frontend: Fix the components paths"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b0608a19c508a9b666fdcb25315b601e4e545c2", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6b0608a19c508a9b666fdcb25315b601e4e545c2", "committedDate": "2020-03-06T12:17:12Z", "message": "Frontend: Attach Recurring Actions pages to SUMA pages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83f1eb5a27f14aa098a753ab5d82fb800fcdf117", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/83f1eb5a27f14aa098a753ab5d82fb800fcdf117", "committedDate": "2020-03-06T12:17:12Z", "message": "Changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac9f61a73a3a15c75ec20e75f7150a6684b3c89", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fac9f61a73a3a15c75ec20e75f7150a6684b3c89", "committedDate": "2020-03-06T12:17:12Z", "message": "Remove 'Reset fields' button\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73a9c65e72db8ba5e4c864fa4722ad5e0e0edc75", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/73a9c65e72db8ba5e4c864fa4722ad5e0e0edc75", "committedDate": "2020-03-06T12:17:12Z", "message": "Fix: When editing an action data is lost on reload\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45be3a1af79be0840b55b2b14ae97e0239347ad7", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/45be3a1af79be0840b55b2b14ae97e0239347ad7", "committedDate": "2020-03-06T12:17:12Z", "message": "Fix: 'Create' button does not show on empty group/org\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3c2c3ae95c2671abe61613b80e386adaae24c5c", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d3c2c3ae95c2671abe61613b80e386adaae24c5c", "committedDate": "2020-03-06T12:17:12Z", "message": "Fix: schedule Creation in highstate not working\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73bcdf9e70e6c424bb5c0420c4327743b4b4e251", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/73bcdf9e70e6c424bb5c0420c4327743b4b4e251", "committedDate": "2020-03-06T12:17:12Z", "message": "Add hourly cron translation to the details\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6e2d22f27c533cb370f75391214b1f9d0c9b3a7", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b6e2d22f27c533cb370f75391214b1f9d0c9b3a7", "committedDate": "2020-03-06T12:17:13Z", "message": "Remove skip Next todos and commented code\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07980bdf2bf4152323412904f1cdca81ba956948", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/07980bdf2bf4152323412904f1cdca81ba956948", "committedDate": "2020-03-06T12:17:13Z", "message": "Inject entityType instead of relying on the URLs\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3489732e582414cb91fc59356e04dca9afd86b3b", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3489732e582414cb91fc59356e04dca9afd86b3b", "committedDate": "2020-03-06T12:17:13Z", "message": "Frontend: Use the 'success' flag of the backend response in the user action feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b21c8c02b526fccc2d513bd7e49e53333ba9ec89", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b21c8c02b526fccc2d513bd7e49e53333ba9ec89", "committedDate": "2020-03-06T12:17:13Z", "message": "Some cosmetic fixes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43c9a03f6b32beabb20a9e183fd89395c1151cea", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/43c9a03f6b32beabb20a9e183fd89395c1151cea", "committedDate": "2020-03-06T12:17:13Z", "message": "Fix: List of all schedules only fetching data on reload\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ddd4ecbd4d3e15e16ab38b8c827a7fed877a6c0", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7ddd4ecbd4d3e15e16ab38b8c827a7fed877a6c0", "committedDate": "2020-03-06T12:17:13Z", "message": "Frontend: Human representation of MINION/GROUP/ORG in Recurring Actions list and details"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da8db6e541bd9edd2e5ed9d0136b15ac6f0e34f9", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/da8db6e541bd9edd2e5ed9d0136b15ac6f0e34f9", "committedDate": "2020-03-06T12:17:13Z", "message": "Fixed text and shows correctly if action is active/inactive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a49cc3ca9d9b56877ee40d0c6535f08d2432fd7", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2a49cc3ca9d9b56877ee40d0c6535f08d2432fd7", "committedDate": "2020-03-06T12:17:13Z", "message": "Fix wording on recurring state page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc815e72f8f96fe6fc0bd499e81c71f665833dae", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cc815e72f8f96fe6fc0bd499e81c71f665833dae", "committedDate": "2020-03-06T12:17:13Z", "message": "Fix text when updating/disabling state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "232375c6e00a3d29c6a915649dbd78f76f726ad7", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/232375c6e00a3d29c6a915649dbd78f76f726ad7", "committedDate": "2020-03-06T12:17:14Z", "message": "Remove unrelated comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "345871eddbf8d994690c455b3bc36530e52966aa", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/345871eddbf8d994690c455b3bc36530e52966aa", "committedDate": "2020-03-06T12:17:14Z", "message": "Reduce the number of curly braces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94ee7e1383f9a86caa08ebecc6a9c8d85f6fb7a7", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/94ee7e1383f9a86caa08ebecc6a9c8d85f6fb7a7", "committedDate": "2020-03-06T12:17:14Z", "message": "Add tooltip to the monthly picker that days are limited to 28\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "451aadc07e3a88d792f5d5a4e4543f5428fd319b", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/451aadc07e3a88d792f5d5a4e4543f5428fd319b", "committedDate": "2020-03-06T12:17:14Z", "message": "Removed addressed todo\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e740da302349cb888b03ab60a51268c658be03e5", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e740da302349cb888b03ab60a51268c658be03e5", "committedDate": "2020-03-06T12:17:14Z", "message": "Remove unnecessary check in deleteSchedule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4649bf2aacca47e43f6f4236be6c89ab1a24383", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a4649bf2aacca47e43f6f4236be6c89ab1a24383", "committedDate": "2020-03-06T12:17:14Z", "message": "Add tooltip to the monthly picker that days are limited to 28\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9d5703063a5ec01be5147ac55336750dfd80a29", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a9d5703063a5ec01be5147ac55336750dfd80a29", "committedDate": "2020-03-06T11:53:12Z", "message": "Add tooltip to the monthly picker that days are limited to 28\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "a4649bf2aacca47e43f6f4236be6c89ab1a24383", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a4649bf2aacca47e43f6f4236be6c89ab1a24383", "committedDate": "2020-03-06T12:17:14Z", "message": "Add tooltip to the monthly picker that days are limited to 28\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1609, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}