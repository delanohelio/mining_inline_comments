{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzQwODU0", "number": 2144, "title": "Maintenance windows", "bodyText": "What does this PR change?\nImplementation of Maintenance Windows RFC\nGUI diff\nNo difference.\nBefore:\nAfter:\n\n DONE\n\nDocumentation\n\n\nNo documentation needed: add explanation. This can't be used if there is a GUI diff\n\n\nDocumentation issue was created: Link for SUSE Manager contributors, Link for community contributors.\n\n\n(OPTIONAL) Documentation PR\n\n\n DONE\n\n\nTest coverage\n\n\nNo tests: add explanation\n\n\nUnit tests were added\n\n\nCucumber tests were added\n\n\n DONE\n\n\nLinks\nFixes #\nTracks # add downstream PR, if any\n\n DONE\n\nChangelogs\nIf you don't need a changelog check, please mark this checkbox:\n\n No changelog needed\n\nIf you uncheck the checkbox after the PR is created, you will need to re-run changelog_test (see below)\nRe-run a test\nIf you need to re-run a test, please mark the related checkbox, it will be unchecked automatically once it has re-run:\n\n Re-run test \"changelog_test\"\n Re-run test \"backend_unittests_pgsql\"\n Re-run test \"java_lint_checkstyle\"\n Re-run test \"java_pgsql_tests\" (Test skipped, there are no changes to test)\n Re-run test \"ruby_rubocop\"\n Re-run test \"schema_migration_test_oracle\"\n Re-run test \"schema_migration_test_pgsql\"\n Re-run test \"susemanager_unittests\"\n Re-run test \"javascript_lint\"\n Re-run test \"spacecmd_unittests\"", "createdAt": "2020-04-21T15:15:27Z", "url": "https://github.com/uyuni-project/uyuni/pull/2144", "merged": true, "mergeCommit": {"oid": "0a779effef00e4fb5f8f1e71635d58b360f23871"}, "closed": true, "closedAt": "2020-08-07T08:35:49Z", "author": {"login": "mcalmer"}, "timelineItems": {"totalCount": 268, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8NpvpAH2gAyNDA2NzQwODU0OmU5ZGMxNzQxM2VlODg0NzBkZGMxZWI5ZjgxMDg0ZTliOWRlYWIwZjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8gMsfAFqTQxMjQ5MTE2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e9dc17413ee88470ddc1eb9f81084e9b9deab0f2", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e9dc17413ee88470ddc1eb9f81084e9b9deab0f2", "committedDate": "2020-08-06T10:55:54Z", "message": "Refactor: Explicitly control the lifecycle of MaintenanceManager instances"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d28a04eea6818e02a336839f59ead292706df31", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6d28a04eea6818e02a336839f59ead292706df31", "committedDate": "2020-08-06T10:55:55Z", "message": "Remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcadcd61433fae6244e2ead1b74105c503dec007", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/bcadcd61433fae6244e2ead1b74105c503dec007", "committedDate": "2020-08-06T10:55:55Z", "message": "Move the maintenance factories to model package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "336cc04bc64e654a32134c2d017af01b1d4cccb2", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/336cc04bc64e654a32134c2d017af01b1d4cccb2", "committedDate": "2020-08-06T10:55:55Z", "message": "Initialize static field properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b140111c30562df9fa98c1fa3a71f6c65e93acc5", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b140111c30562df9fa98c1fa3a71f6c65e93acc5", "committedDate": "2020-08-06T10:55:55Z", "message": "Specify the result type of the JPQL queries to get rid of warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d971c7afc0a5176216103f883477650eab28b329", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d971c7afc0a5176216103f883477650eab28b329", "committedDate": "2020-08-06T10:55:55Z", "message": "Display maintenance schedules used by systems in action chains"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e974360597271d3ba32b5f73f1725917b4277046", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e974360597271d3ba32b5f73f1725917b4277046", "committedDate": "2020-08-06T10:55:55Z", "message": "Use schedule icon for maintence windows\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e57cd65526fdb073116b2d0b5a3c4dc0a4c8ee4f", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e57cd65526fdb073116b2d0b5a3c4dc0a4c8ee4f", "committedDate": "2020-08-06T10:55:55Z", "message": "Adapt Table component to skip rendering the header if none provided\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c866d497a528effc13d4e1a84ab68fd1ff40665", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8c866d497a528effc13d4e1a84ab68fd1ff40665", "committedDate": "2020-08-06T10:55:56Z", "message": "Move MaintenanceController related code to its own package\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efb4b56f348629fab8ec5cad8e3a4373380c623d", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/efb4b56f348629fab8ec5cad8e3a4373380c623d", "committedDate": "2020-08-06T10:55:56Z", "message": "Split MaintenanceController into multiple Controller classes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fda46f147c8285963e0ac71b05b54ac2155dbfd", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8fda46f147c8285963e0ac71b05b54ac2155dbfd", "committedDate": "2020-08-06T10:55:56Z", "message": "Split MaintenanceWindowJson into multiple objects\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58e4746b95056025226d88d48945bdb9c89a09b0", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/58e4746b95056025226d88d48945bdb9c89a09b0", "committedDate": "2020-08-06T10:55:56Z", "message": "Add loading indicator if calendar refresh in progress\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f0a7fe1815298e5a5ffb9c5db30327612a45b05", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8f0a7fe1815298e5a5ffb9c5db30327612a45b05", "committedDate": "2020-08-06T10:55:56Z", "message": "Move handleRescheduleResult to the base controller\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f66243936f11e620bbfd8093b54c2d015294d783", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f66243936f11e620bbfd8093b54c2d015294d783", "committedDate": "2020-08-06T10:55:56Z", "message": "Split details component into schedule and calendar details\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61d717f8b6d1114e1ac3655a6d56a79fbd903477", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/61d717f8b6d1114e1ac3655a6d56a79fbd903477", "committedDate": "2020-08-06T10:55:56Z", "message": "Split list component into schedule and calendar list\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "221e7d135656ada52e982215a380a69952e22fa3", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/221e7d135656ada52e982215a380a69952e22fa3", "committedDate": "2020-08-06T10:55:56Z", "message": "Split edit component into schedule and calendar edit\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a73463e61aeae0ba9b5c74351337ba8e367c3600", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a73463e61aeae0ba9b5c74351337ba8e367c3600", "committedDate": "2020-08-06T10:55:57Z", "message": "Move list, edit and details related code to their own directories\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8947bf015eee618b31ce5b86453d067fc78e6244", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8947bf015eee618b31ce5b86453d067fc78e6244", "committedDate": "2020-08-06T10:55:57Z", "message": "Move styling to susemanager-theme\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ac1e837408bb730dd07f1bf465459907d4cf881", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8ac1e837408bb730dd07f1bf465459907d4cf881", "committedDate": "2020-08-06T10:55:57Z", "message": "Move api to api directory\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b932c154ab33715694b23c9f966ecaa201159ed1", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b932c154ab33715694b23c9f966ecaa201159ed1", "committedDate": "2020-08-06T10:55:57Z", "message": "Cleanup MaintenanceWindows component\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d539d86e5c24733d60386e369cc9d16d40e0619", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0d539d86e5c24733d60386e369cc9d16d40e0619", "committedDate": "2020-08-06T10:55:57Z", "message": "Refactor MaintenanceWindows to use react hooks\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1904d36c3d0f73175b373a01e7c56c83ad84a705", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1904d36c3d0f73175b373a01e7c56c83ad84a705", "committedDate": "2020-08-06T10:55:57Z", "message": "Apply styling to uyuni\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "179e1dc4ec75626b88317a8535f7ace758e906ed", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/179e1dc4ec75626b88317a8535f7ace758e906ed", "committedDate": "2020-08-06T10:55:58Z", "message": "Add basic url validation to the webUI\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44f2b78b3a8989c1a8e6f799f072af72ad28adad", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/44f2b78b3a8989c1a8e6f799f072af72ad28adad", "committedDate": "2020-08-06T10:55:58Z", "message": "Avoid n+1 queries when getting calendars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb8964fc6616b98db2137cb1643bf3e0c79f690a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fb8964fc6616b98db2137cb1643bf3e0c79f690a", "committedDate": "2020-08-06T10:55:58Z", "message": "Use a POJO projection instead of a tuple in getting calendar assignments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3971697ecc1dd1c92ee5b17853a67705f61b5a8", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e3971697ecc1dd1c92ee5b17853a67705f61b5a8", "committedDate": "2020-08-06T10:55:58Z", "message": "Fix translation strings\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66740d38e9b5cc3d0512bf5102d9806046049c52", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/66740d38e9b5cc3d0512bf5102d9806046049c52", "committedDate": "2020-08-06T10:55:58Z", "message": "Use model as a state\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f68a06658d3367c7c51e375df41d8ef5105aac19", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f68a06658d3367c7c51e375df41d8ef5105aac19", "committedDate": "2020-08-06T10:55:58Z", "message": "Add prop types to components\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf1653b57604b7a47a1ce5dd7c57499338dbdc2", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5cf1653b57604b7a47a1ce5dd7c57499338dbdc2", "committedDate": "2020-08-06T10:55:58Z", "message": "Minor: Create list of calendar assignments directly, remove useless comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a380fa634835dbd5b5fa689891934a2ea7a0cdc", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5a380fa634835dbd5b5fa689891934a2ea7a0cdc", "committedDate": "2020-08-06T10:55:59Z", "message": "Omit schedule/calendar prefixes in names where possible\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cca8a4f46759fce3a437d36e858cceb610fd4e2", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6cca8a4f46759fce3a437d36e858cceb610fd4e2", "committedDate": "2020-08-06T10:55:59Z", "message": "Move route initiation of schedule/calendar controller to the Router\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e88b7fac0bb02f8e2ee15e01927fbded50fc59a0", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e88b7fac0bb02f8e2ee15e01927fbded50fc59a0", "committedDate": "2020-08-06T10:55:59Z", "message": "Make translation strings static, update code formating\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8701c5cac4551e545ef0dc5784b49a98ce46d55", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d8701c5cac4551e545ef0dc5784b49a98ce46d55", "committedDate": "2020-08-06T10:55:59Z", "message": "Change execution order in the 'assignScheduleToSystemWithPendingActions' test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22f3e62dfa7a48f4bc6b63f1fd78f03a01dbf02b", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/22f3e62dfa7a48f4bc6b63f1fd78f03a01dbf02b", "committedDate": "2020-08-06T10:55:59Z", "message": "Add option to cancel affected actions when assigning schedules to systems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93189244b865c7bd41d765321e1e363a52474d6d", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/93189244b865c7bd41d765321e1e363a52474d6d", "committedDate": "2020-08-06T10:55:59Z", "message": "Add reschedule strategy parameter to the system assignment XMLRPC endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea3d50c33348bf2cf0e8c47430bca33f85c1093f", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ea3d50c33348bf2cf0e8c47430bca33f85c1093f", "committedDate": "2020-08-06T10:55:59Z", "message": "API endpoints for assigning maintenance schedules to systems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0260b0115100b1b332d942118e65380270fae1fd", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0260b0115100b1b332d942118e65380270fae1fd", "committedDate": "2020-08-06T10:55:59Z", "message": "Add maintenance schedule assignment page under 'Misc' tab to SSM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39e7ecce01a9fa4af0cb329ac30c21ffd7e2fa9e", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/39e7ecce01a9fa4af0cb329ac30c21ffd7e2fa9e", "committedDate": "2020-08-06T10:56:00Z", "message": "Show currently assigned maintenance schedule in system properties panel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0be50a15b4eb238ce2a01d620a2e9f4448b0d8f4", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0be50a15b4eb238ce2a01d620a2e9f4448b0d8f4", "committedDate": "2020-08-06T10:56:00Z", "message": "Add maintenance schedule form controls to system properties edit page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a697675f79eaf8146e4edc86bf118420e55e411", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1a697675f79eaf8146e4edc86bf118420e55e411", "committedDate": "2020-08-06T10:56:00Z", "message": "Add system assignment tab to maintenance schedule details page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dac15f99f5b3b050281035600d4d7089f236d6a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4dac15f99f5b3b050281035600d4d7089f236d6a", "committedDate": "2020-08-06T10:56:00Z", "message": "Bugfix: Do not render maintenance windows, when they are empty and display warning instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a47e0c0a1462fcbf67d08d78b3aefbe5571ac87a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a47e0c0a1462fcbf67d08d78b3aefbe5571ac87a", "committedDate": "2020-08-06T10:56:00Z", "message": "Bugfix: Pre-select action chains radio, when maintenance windows are empty\n\nIn this case, the action chain picker is the only picker visible on the\npage, so it must be preselected.\n\nBoth the React and the Struts picker are affected."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c7ce4c8d75ee3788563a0bf98cfe4c7ffcfd74e", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2c7ce4c8d75ee3788563a0bf98cfe4c7ffcfd74e", "committedDate": "2020-08-06T10:56:00Z", "message": "update changelogs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfcf96e7a14597a3b6a7427aef1631f617d7a408", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/bfcf96e7a14597a3b6a7427aef1631f617d7a408", "committedDate": "2020-08-06T10:56:01Z", "message": "Fix the event filtering in MULTI Schedules\n\nPreviously, the equals was called on the SUMMARY object, not on its\nvalue."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7d84af3937bf0579fcb38e90b15ea059dc5f9d1", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f7d84af3937bf0579fcb38e90b15ea059dc5f9d1", "committedDate": "2020-08-06T10:56:01Z", "message": "Revert calling saveMessages unconditionally\n\nWe want `saveMessages` to only be called if an error occurred.\nOtherwise all info messages but the most recent are discarded in case of\nsuccess.\nIn particular this causes messages like: \"OS Image Build Host type has\nbeen applied.\" to not be displayed when updating `System Properties`.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d258993318b397c1a316585d26de6a8dddb19147", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d258993318b397c1a316585d26de6a8dddb19147", "committedDate": "2020-08-06T10:56:01Z", "message": "Move maintenance window related code to the end of the function\n\nIf `Fail` is selected as the reschedule strategy and there is actions\ninside of the maintenance windows of selected schedule, changing the\nschedule fails and a db rollback occurs.\nThis rollback also affect querying the `BaseEntitlement` of the system\nwhich causes an internal server error.\nMoving the maintenance window related code to the end of the\n`processSubmission` call ensures that the rollback occurs after any\nother db interactions.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ea3583a21ede8ec50f9a3ba557ec7857e21de48", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4ea3583a21ede8ec50f9a3ba557ec7857e21de48", "committedDate": "2020-08-06T10:56:01Z", "message": "Don't fail rescheduling if list of affected actions is empty\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e297a7a72ca675ca6937576ce9ad04d96582f89b", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e297a7a72ca675ca6937576ce9ad04d96582f89b", "committedDate": "2020-08-06T10:56:01Z", "message": "Set default strategy to `Fail` if none is given\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c033c47b3a9cf3b6e930e0d2f167f5a0e9cee2c6", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c033c47b3a9cf3b6e930e0d2f167f5a0e9cee2c6", "committedDate": "2020-08-06T10:56:01Z", "message": "Correctly pass error message from backend\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2188ec4ae40b8d83868754c1cbce5eb4fed0dc4", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d2188ec4ae40b8d83868754c1cbce5eb4fed0dc4", "committedDate": "2020-08-06T10:56:01Z", "message": "Adapt test to assign schedules to systems to use actual data\n\nUsing the 'FAIL' strategy:\nMaintenance window affected actions scheduled outside a maintenance\nwindow should cause the reschedule to fail.\nActions scheduled inside should allow assigning the schedule.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5fb9749267dc2d1f34a416fdf6f7704884b19f7", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d5fb9749267dc2d1f34a416fdf6f7704884b19f7", "committedDate": "2020-08-06T10:56:02Z", "message": "Set earliest to first maintenanceWindow item instead of Time.now()\n\nOnly if the system has a maintenance schedule assigned.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5498fe37faab536f809ff1a465da94b6a0a58b49", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5498fe37faab536f809ff1a465da94b6a0a58b49", "committedDate": "2020-08-06T10:56:02Z", "message": "remove schema migration directory (too early)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079d1436a4e4c5f28903503b9dac0d66e58ae9f7", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/079d1436a4e4c5f28903503b9dac0d66e58ae9f7", "committedDate": "2020-08-06T10:56:02Z", "message": "start with idempotency test at the same version we initialize the DB with"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df15678339265d6e427e42af5831f720345db4b", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7df15678339265d6e427e42af5831f720345db4b", "committedDate": "2020-08-06T10:56:02Z", "message": "Check that we are really on that page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "913d720c0bc38defda245ba2a200ef66fe67fd0e", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/913d720c0bc38defda245ba2a200ef66fe67fd0e", "committedDate": "2020-08-06T10:56:02Z", "message": "Only save url if ical fetch is successful\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0e878a041bc642206a215bfe583050fd0ce6298", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e0e878a041bc642206a215bfe583050fd0ce6298", "committedDate": "2020-08-06T10:56:02Z", "message": "Add id and name to calendar data input field\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa1e499b74b7f241b437102ce792e70d134336b2", "author": {"user": {"login": "cbbayburt", "name": "Can Bulut Bayburt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/aa1e499b74b7f241b437102ce792e70d134336b2", "committedDate": "2020-08-06T10:56:02Z", "message": "Fix property names in SSM maintenance windows form"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff3010028a6b5eda9172b77ed2dd10f50632fa7", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fff3010028a6b5eda9172b77ed2dd10f50632fa7", "committedDate": "2020-08-06T10:56:02Z", "message": "example calendars for maintenance windows test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36a2c5323355382e0d2b34042e96e1837a69e4e7", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/36a2c5323355382e0d2b34042e96e1837a69e4e7", "committedDate": "2020-08-06T10:56:03Z", "message": "Tests for Maintenance Windows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a5817527415e3b507f6b45ed71bea313d434c25", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9a5817527415e3b507f6b45ed71bea313d434c25", "committedDate": "2020-08-06T10:56:03Z", "message": "add maintenance windows test to runset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd981c1418d27c8d395ac881bc15354fc9635d06", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cd981c1418d27c8d395ac881bc15354fc9635d06", "committedDate": "2020-08-06T10:56:03Z", "message": "fix cleanup resources in HTTP Helper and improve logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9abe9cca764efea622a2d4dc07b59de69b41431", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a9abe9cca764efea622a2d4dc07b59de69b41431", "committedDate": "2020-08-06T10:56:03Z", "message": "Finish: Tests for Maintenance Windows\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72268ff8b3a7e0e872a904b944212518c93c2aa0", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/72268ff8b3a7e0e872a904b944212518c93c2aa0", "committedDate": "2020-08-06T10:56:03Z", "message": "Make step to click item details/edit/delete button recurring action\nindependent\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1df1554e89017e8c36ee163cc7e946058a08e686", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1df1554e89017e8c36ee163cc7e946058a08e686", "committedDate": "2020-08-04T08:52:11Z", "message": "Make step to click item details/edit/delete button recurring action\nindependent\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "72268ff8b3a7e0e872a904b944212518c93c2aa0", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/72268ff8b3a7e0e872a904b944212518c93c2aa0", "committedDate": "2020-08-06T10:56:03Z", "message": "Make step to click item details/edit/delete button recurring action\nindependent\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c37cb171172f04f9c01c6192a129133d36fe6a93", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c37cb171172f04f9c01c6192a129133d36fe6a93", "committedDate": "2020-08-07T05:52:37Z", "message": "Log exceptions with 'log.info' in controllers, log status code when calendar download fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93b0c6b18c4b39c7df844e5f7b47c4e459d76694", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/93b0c6b18c4b39c7df844e5f7b47c4e459d76694", "committedDate": "2020-08-07T06:16:48Z", "message": "Fix a typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "577594f16cc1ee641ac32d736acdfe22fa8885ad", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/577594f16cc1ee641ac32d736acdfe22fa8885ad", "committedDate": "2020-08-07T06:42:45Z", "message": "Use serverid instead of server object in maintenance windows checking in ServerAction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDkxMTYz", "url": "https://github.com/uyuni-project/uyuni/pull/2144#pullrequestreview-412491163", "createdAt": "2020-05-15T09:29:48Z", "commit": {"oid": "caeab8443513101a4c51dbcb823d7596921aed6d"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOToyOTo0OFrOGV9fPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODo1NToyOVrOGWtsUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4MDcwMQ==", "bodyText": "In this case, the permissions are done in the callers of this method. Would it be possible to move them here, as in the remove case?", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r425680701", "createdAt": "2020-05-15T09:29:48Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -74,31 +74,35 @@ public static MaintenanceManager instance() {\n      * Save a MaintenanceSchedule\n      * @param schedule the schedule\n      */\n-    public void save(MaintenanceSchedule schedule) {\n+    protected void save(MaintenanceSchedule schedule) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caeab8443513101a4c51dbcb823d7596921aed6d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4MDc2MQ==", "bodyText": "Same as above.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r425680761", "createdAt": "2020-05-15T09:29:54Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -74,31 +74,35 @@ public static MaintenanceManager instance() {\n      * Save a MaintenanceSchedule\n      * @param schedule the schedule\n      */\n-    public void save(MaintenanceSchedule schedule) {\n+    protected void save(MaintenanceSchedule schedule) {\n         getSession().save(schedule);\n     }\n \n     /**\n      * Remove a MaintenanceSchedule\n      * @param schedule the schedule\n      */\n-    public void remove(MaintenanceSchedule schedule) {\n+    public void remove(User user, MaintenanceSchedule schedule) {\n+        ensureOrgAdmin(user);\n+        ensureScheduleAccessible(user, schedule);\n         getSession().remove(schedule);\n     }\n \n     /**\n      * Save a MaintenanceCalendar\n      * @param calendar the calendar\n      */\n-    public void save(MaintenanceCalendar calendar) {\n+    protected void save(MaintenanceCalendar calendar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caeab8443513101a4c51dbcb823d7596921aed6d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4NTQzMw==", "bodyText": "My IDE does not complain if I remove all of these suppressions (same for ActionFactory), do you have the compiler in the IDE set correctly (I have the code level set to Java 11)?", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r425685433", "createdAt": "2020-05-15T09:38:27Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -181,6 +187,7 @@ public MaintenanceSchedule updateMaintenanceSchedule(User user, String name, Map\n      * @param user the user\n      * @return a list of Calendar labels\n      */\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caeab8443513101a4c51dbcb823d7596921aed6d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0Njc5Mg==", "bodyText": "Franky question: tasko invoked per action? Maybe we need to invoke it in bulk (think of exception handling in that case... otoh: in which cases can taskomatic fail on unscheduling, except of being down?).", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r425746792", "createdAt": "2020-05-15T11:46:07Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/CancelRescheduleStrategy.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.maintenance;\n+\n+import com.redhat.rhn.domain.action.Action;\n+import com.redhat.rhn.domain.server.Server;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.action.ActionManager;\n+import com.redhat.rhn.taskomatic.TaskomaticApiException;\n+\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+\n+import org.apache.log4j.Logger;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * CancelRescheduleStrategy - Cancel the action for the system\n+ */\n+public class CancelRescheduleStrategy implements RescheduleStrategy {\n+    private static final Logger LOG = Logger.getLogger(CancelRescheduleStrategy.class);\n+\n+    @Override\n+    public RescheduleResult reschedule(User user, Map<Action, List<Server>> actionsServers,\n+            MaintenanceSchedule schedule) throws RescheduleException {\n+        RescheduleResult result = new RescheduleResult(getType(), actionsServers);\n+        try {\n+            for (Action action: actionsServers.keySet()) {\n+                List<Long> serverIds = actionsServers.get(action).stream()\n+                        .map(s -> s.getId())\n+                        .collect(Collectors.toList());\n+                ActionManager.cancelActions(user, Collections.singletonList(action), Optional.of(serverIds));\n+                LOG.info(String.format(\"Cancel action '%s' for servers '%s'\",\n+                        action.toString(), serverIds.toString()));\n+            }\n+        }\n+        catch (TaskomaticApiException | RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b144ffac21af51737104f7305c39a8585828d744"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2NTE5Mw==", "bodyText": "Franky: as discussed on the mtg, maybe we don't need to specify a separate \"fail\" strategy, since it should be always the last step.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r425765193", "createdAt": "2020-05-15T12:24:49Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -382,20 +400,37 @@ protected boolean manageAffectedScheduledActions(User user, MaintenanceSchedule\n             .collect(Collectors.groupingBy(ServerAction::getParentAction,\n                     Collectors.mapping(ServerAction::getServer, Collectors.toList())));\n \n-        for (RescheduleStrategy s : scheduleStrategy) {\n-            if (s.reschedule(user, actionsForServerToReschedule, schedule)) {\n-                return true;\n+        try {\n+            for (RescheduleStrategy s : scheduleStrategy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8a02a9ecfeacc67bdb7a58d457ae513f1928f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2NzIyNA==", "bodyText": "Franky: when the tasko unscheduling doesn't work, then it's kind of fine and we could ignore: in the worst case the action will be executed by tasko, but no action will be found.\nWorse thing is the re-scheduling of actions. Maybe we need to have schedule all-or-nothing on taskomatic side.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r425767224", "createdAt": "2020-05-15T12:28:36Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -382,20 +400,37 @@ protected boolean manageAffectedScheduledActions(User user, MaintenanceSchedule\n             .collect(Collectors.groupingBy(ServerAction::getParentAction,\n                     Collectors.mapping(ServerAction::getServer, Collectors.toList())));\n \n-        for (RescheduleStrategy s : scheduleStrategy) {\n-            if (s.reschedule(user, actionsForServerToReschedule, schedule)) {\n-                return true;\n+        try {\n+            for (RescheduleStrategy s : scheduleStrategy) {\n+                RescheduleResult result = s.reschedule(user, actionsForServerToReschedule, schedule);\n+                if (result.isSuccess()) {\n+                    return true;\n+                }\n             }\n         }\n+        catch (RescheduleException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8a02a9ecfeacc67bdb7a58d457ae513f1928f"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3MDQ4MA==", "bodyText": "Franky: would be nice to have some test description for the ics files.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r426470480", "createdAt": "2020-05-18T08:55:29Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/common/hibernate/HibernateFactory.java", "diffHunk": "@@ -452,7 +453,7 @@ public static Object reload(Object obj) throws HibernateException {\n          * session.get is set to not return the proxy class, so that is what we'll use.\n          */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1e59716228dcc091654e879e22c4c2a8e27937"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20d6e70ce1aefed5235eece1582c7f11e60a1beb", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/20d6e70ce1aefed5235eece1582c7f11e60a1beb", "committedDate": "2020-08-06T10:55:41Z", "message": "allow channel change event to apply the new channel state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d60bfe9181f585cca0a0a639f4e7ae607f051f57", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d60bfe9181f585cca0a0a639f4e7ae607f051f57", "committedDate": "2020-08-06T10:55:41Z", "message": "fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "303a3b9fd7f333f523207eb320c68355842e60ca", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/303a3b9fd7f333f523207eb320c68355842e60ca", "committedDate": "2020-08-06T10:55:41Z", "message": "unit test: schedule state.apply with just channels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9b665fb62456c99da259176d3c059390edb00fd", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e9b665fb62456c99da259176d3c059390edb00fd", "committedDate": "2020-08-06T10:55:41Z", "message": "Backend: Method for calculating upcoming maintenance windows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36cddf1f1ddaeaa8412e49c27146fe89cf65415a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/36cddf1f1ddaeaa8412e49c27146fe89cf65415a", "committedDate": "2020-08-06T10:55:41Z", "message": "Test computing upcoming windows from a calendar with multiple timezones"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f04bcfc484e4927d81fa95e31181776eb1016fd9", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f04bcfc484e4927d81fa95e31181776eb1016fd9", "committedDate": "2020-08-06T10:55:41Z", "message": "Struts: Refactor: USE_DATE -> SCHEDULE_TYPE field in the form\n\nThis will allow support of multiple action schedule selectors (not just\ndate picker and action chains)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f4cd174814498acae3e3a2f106aa1bd7e811f51", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9f4cd174814498acae3e3a2f106aa1bd7e811f51", "committedDate": "2020-08-06T10:55:42Z", "message": "JSP: Support for greying out date picker # Bitte geben Sie eine Commit-Beschreibung f\u00fcr Ihre \u00c4nderungen ein. Zeilen,"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "060bcf66cfc39bc47000e96c4cdda8823b1bd996", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/060bcf66cfc39bc47000e96c4cdda8823b1bd996", "committedDate": "2020-08-06T10:55:42Z", "message": "JSP: Implement maintenance window picker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e06606a234261fce88931adce1745555f984a7a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9e06606a234261fce88931adce1745555f984a7a", "committedDate": "2020-08-06T10:55:42Z", "message": "Struts: Support reading maint. window date from the dynaForm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da8f966d52a8291ba9c1f3c9ac62a0c6234f156a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/da8f966d52a8291ba9c1f3c9ac62a0c6234f156a", "committedDate": "2020-08-06T10:55:42Z", "message": "Struts: Support maintenance windows in Actions [1/2]: Populate the maintenance window picker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8acccadd1e32801b33368ac8ef7f3f81f2ecee6b", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8acccadd1e32801b33368ac8ef7f3f81f2ecee6b", "committedDate": "2020-08-06T10:55:42Z", "message": "Struts: Support maintenance windows in Actions [2/2]: Read schedule date from maintenance window picker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ea96a63afc4cd41235010bee0be98d28f4041d7", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9ea96a63afc4cd41235010bee0be98d28f4041d7", "committedDate": "2020-08-06T10:55:42Z", "message": "Struts: Support maintenance windows for action chains"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a053b56cdae364520d4b37e52e87347ead1d5067", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a053b56cdae364520d4b37e52e87347ead1d5067", "committedDate": "2020-08-06T10:55:43Z", "message": "Localization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f90a531d06d09dfe2466e16bacc5504363de62b3", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f90a531d06d09dfe2466e16bacc5504363de62b3", "committedDate": "2020-08-06T10:55:43Z", "message": "Create the ServerAction after setting its parameters\n\nThis is because of the date check in the ServerAction assignment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24260214459635790026e045320035270f5b945f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/24260214459635790026e045320035270f5b945f", "committedDate": "2020-08-06T10:55:43Z", "message": "Changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "283af0733926a48e1d62a4845aacab26059b9ec3", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/283af0733926a48e1d62a4845aacab26059b9ec3", "committedDate": "2020-08-06T10:55:43Z", "message": "Fix checkstyle violations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "961469a608ca938c3d75f170b3b6c3b401e609ef", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/961469a608ca938c3d75f170b3b6c3b401e609ef", "committedDate": "2020-08-06T10:55:43Z", "message": "Use review suggestion for formatting instant\n\nCo-authored-by: Michael Calmer <Michael.Calmer@suse.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b9d3de63d8a6c1260c1ab3fc0893e663fc76dba", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4b9d3de63d8a6c1260c1ab3fc0893e663fc76dba", "committedDate": "2020-08-06T10:55:43Z", "message": "Fix typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59e1da5f8fe8530ef600d6cddd0105c0dc8107b1", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/59e1da5f8fe8530ef600d6cddd0105c0dc8107b1", "committedDate": "2020-08-06T10:55:43Z", "message": "Reload action chain editor, when dealing with maintenance windows\n\nWe want to display either date picker/maintenance windows picker/warning\nbased on the systems and scheduled actions. When the systems change\n(user clicks delete system or delete action), we want to reload the\npage, so that the picker gets refreshed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e72a008fefd14d0f197f9678a90e4745a4f27d5f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e72a008fefd14d0f197f9678a90e4745a4f27d5f", "committedDate": "2020-08-06T10:55:44Z", "message": "Prevent scheduling actions when there are empty maintenance windows\n\nIn this case, display a warning to the user and hide the scheduling UI.\n\nThe maintenance-window-picker.jsp could be simplified: it's displayed,\nonly if the maintenance windows are non-empty (therefore the check in it\nwas unneeded)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c402e07910dc2d5573c62d8bab6e5ff0e196c37", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5c402e07910dc2d5573c62d8bab6e5ff0e196c37", "committedDate": "2020-08-06T10:55:44Z", "message": "Minor improvement: Maint. window caption in action chains scheduler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "734a2fb0338518658a37e90021f77c344239722f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/734a2fb0338518658a37e90021f77c344239722f", "committedDate": "2020-08-06T10:55:44Z", "message": "Minor: Pre-check the maint. windows radio button when displaying the maint. windows picker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b1dddbd679f46b274af64ec527409fc768f922a", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0b1dddbd679f46b274af64ec527409fc768f922a", "committedDate": "2020-08-06T10:55:44Z", "message": "Add controller class\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "259f1edfbd7a2d7bf8d8daa11a26949f8a2187a8", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/259f1edfbd7a2d7bf8d8daa11a26949f8a2187a8", "committedDate": "2020-08-06T10:55:44Z", "message": "Add controller to the Router\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69d9696b1695ed97db7c31ec0a594f1c88fec839", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/69d9696b1695ed97db7c31ec0a594f1c88fec839", "committedDate": "2020-08-06T10:55:44Z", "message": "Add jade file\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5a9515d0f7ed1b662ed7ed1acbc2a61244c6a73", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b5a9515d0f7ed1b662ed7ed1acbc2a61244c6a73", "committedDate": "2020-08-06T10:55:44Z", "message": "Add Json class for maintenance schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98f8487a04f66aaf970afb3fde132c12f6931809", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/98f8487a04f66aaf970afb3fde132c12f6931809", "committedDate": "2020-08-06T10:55:45Z", "message": "Create MenuTree item\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65c6b14de58c34d6918bb4cd3b24e97df6725d1d", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/65c6b14de58c34d6918bb4cd3b24e97df6725d1d", "committedDate": "2020-08-06T10:55:45Z", "message": "Add maintenance schedules index\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eddbbb1513b81d9e3f60a4db7792cacd8a7b72a8", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/eddbbb1513b81d9e3f60a4db7792cacd8a7b72a8", "committedDate": "2020-08-06T10:55:45Z", "message": "Add maintenance schedule base class\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83bf0ccff6c257ab0cf00dcdc73ecab0d5178a87", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/83bf0ccff6c257ab0cf00dcdc73ecab0d5178a87", "committedDate": "2020-08-06T10:55:45Z", "message": "Add ui for listing maintenance schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd1379873450c0d2f269a4d150dd748bd755c485", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cd1379873450c0d2f269a4d150dd748bd755c485", "committedDate": "2020-08-06T10:55:45Z", "message": "Add ui page for creating/editing schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d2af469a2242a90b7f7acabe888d579c7c8e3e5", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3d2af469a2242a90b7f7acabe888d579c7c8e3e5", "committedDate": "2020-08-06T10:55:45Z", "message": "Add details view for schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3fca79420774dcd4a5f70dd403905004e5e8b91", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c3fca79420774dcd4a5f70dd403905004e5e8b91", "committedDate": "2020-08-06T10:55:45Z", "message": "Controller save method\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a853127d624ace70388bac4868ba14b718d3eb2", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1a853127d624ace70388bac4868ba14b718d3eb2", "committedDate": "2020-08-06T10:55:45Z", "message": "Make 'Add Calendar' button instead of checkbox\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "662f0a249cee11123f2410cfba3485cfa1264582", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/662f0a249cee11123f2410cfba3485cfa1264582", "committedDate": "2020-08-06T10:55:46Z", "message": "Add Calendar column in schedule list\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbeecfa35a4115211d40a6f76128e56287254448", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cbeecfa35a4115211d40a6f76128e56287254448", "committedDate": "2020-08-06T10:55:46Z", "message": "Fix details view not rendering\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295d1d8857e9ae984ecf962514d2c01dc95f697c", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/295d1d8857e9ae984ecf962514d2c01dc95f697c", "committedDate": "2020-08-06T10:55:46Z", "message": "Add deleting of schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abb1a88dee1efd1c141736f39c4cff33efba39ab", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/abb1a88dee1efd1c141736f39c4cff33efba39ab", "committedDate": "2020-08-06T10:55:46Z", "message": "Get detailed schedule info\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ce2e5650b8d57ad2ed66231e0b4cb5b37815ad9", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2ce2e5650b8d57ad2ed66231e0b4cb5b37815ad9", "committedDate": "2020-08-06T10:55:46Z", "message": "Rename maintenance-schedules.jade -> maintenance-windows.jade\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dbcf4c4554e2883fefb06d5da37b755093d6d66", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4dbcf4c4554e2883fefb06d5da37b755093d6d66", "committedDate": "2020-08-06T10:55:46Z", "message": "Update MenuTree, add translation strings\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6cfc7f1c4f0f6e3f98facd8521c69df4c812d2c", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c6cfc7f1c4f0f6e3f98facd8521c69df4c812d2c", "committedDate": "2020-08-06T10:55:46Z", "message": "Add type to distinguish between calendar and schedule in UI\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27e17c7af923b2dd7d71e085f55618f3cf82a797", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/27e17c7af923b2dd7d71e085f55618f3cf82a797", "committedDate": "2020-08-06T10:55:47Z", "message": "Rename maintenance-schedules -> maintenance-windows\n\nSince these components will handle both schedules and calendar\nmaintenance-windows seems to be a more adequate name.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "562051fe66abc79181c1771be5eeb9a4178acbac", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/562051fe66abc79181c1771be5eeb9a4178acbac", "committedDate": "2020-08-06T10:55:47Z", "message": "Rename MaintenanceScheduleJson -> MaintenanceWindowJson\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9add7ce08484da4baacc8d8b38ef20c001a1932", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a9add7ce08484da4baacc8d8b38ef20c001a1932", "committedDate": "2020-08-06T10:55:47Z", "message": "Adapt controller class to handle schedules/calendars individually\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bddf812978729555cf3da543348e1d7c221bbf6", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0bddf812978729555cf3da543348e1d7c221bbf6", "committedDate": "2020-08-06T10:55:47Z", "message": "Change webui to reflect controller changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3118b36e64e9ab1b9ed42025dc7c62edf11c9b2", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d3118b36e64e9ab1b9ed42025dc7c62edf11c9b2", "committedDate": "2020-08-06T10:55:47Z", "message": "Add missing javadoc, fix checkstyle\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d51baf278c206d20866bf62ab1dfb6dfbea5bdf6", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d51baf278c206d20866bf62ab1dfb6dfbea5bdf6", "committedDate": "2020-08-06T10:55:47Z", "message": "Display ical file in details, distinguish between schedule/calendar\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c25a8522c1c09e277db50ffde0b3ff7f99f394a", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5c25a8522c1c09e277db50ffde0b3ff7f99f394a", "committedDate": "2020-08-06T10:55:47Z", "message": "Handle reschedule strategy\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d83596ca884f9a71e342353abfc17f768f50b8a", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3d83596ca884f9a71e342353abfc17f768f50b8a", "committedDate": "2020-08-06T10:55:48Z", "message": "Support refreshing calendars from url\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd830c3795dfab77606cd9ffc4efa6ad741dc012", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fd830c3795dfab77606cd9ffc4efa6ad741dc012", "committedDate": "2020-08-06T10:55:48Z", "message": "Create links to calendar/schedule details in list\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48a4fed216b6c6063eac5643fc6098518a784d1c", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/48a4fed216b6c6063eac5643fc6098518a784d1c", "committedDate": "2020-08-06T10:55:48Z", "message": "Add queries to get schedule/calendar objects\n\nRename listScheduleNamesByCalendar -> listMaintenanceSchedulesByCalendar\nto clarify the behavior.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcc6764fbddc780cf42b5c18f098aebcd5e512c0", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fcc6764fbddc780cf42b5c18f098aebcd5e512c0", "committedDate": "2020-08-06T10:55:48Z", "message": "Add localization to the controller\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f77f704c978dbf6b12fff364c14caccb42f25fb", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4f77f704c978dbf6b12fff364c14caccb42f25fb", "committedDate": "2020-08-06T10:55:48Z", "message": "Fix calendar data refresh\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dbcf9312b60aacf50b3539015bc81cf47635823", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8dbcf9312b60aacf50b3539015bc81cf47635823", "committedDate": "2020-08-06T10:55:48Z", "message": "Move styling to its own css file\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8258e0f1193018d902b751e9b86ac007a6262b4a", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8258e0f1193018d902b751e9b86ac007a6262b4a", "committedDate": "2020-08-06T10:55:49Z", "message": "Add requested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6de61bb3f992809d2429a8b78342800acb2981c", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a6de61bb3f992809d2429a8b78342800acb2981c", "committedDate": "2020-08-06T10:55:49Z", "message": "Display upcoming maintenance windows in schedule details view\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3dce76fe4893964310c288aeadcbb746843a1d6", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e3dce76fe4893964310c288aeadcbb746843a1d6", "committedDate": "2020-08-06T10:55:49Z", "message": "Fix: Remove empty box displayed in schedule list if no calendar assigned\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "428126f4e71d16a7bd7df4eca6b2e35600a5b0c1", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/428126f4e71d16a7bd7df4eca6b2e35600a5b0c1", "committedDate": "2020-08-06T10:55:49Z", "message": "Use the Table component for the details view\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a515dccd42c785ed05040f44c18512cb526c7f8", "author": {"user": {"login": "ncounter", "name": "Dario Leidi"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1a515dccd42c785ed05040f44c18512cb526c7f8", "committedDate": "2020-08-06T10:55:49Z", "message": "ActionSchedule React component for MaintenanceWindows\n\nThe patch consists of the following parts:\n- Add endpoint to fetch maintenance windows data\n- Fetch maintenance windows from the backend\n- Use maintenance windows in highstate action scheduler\n- Use maintenance windows in single system subscribe channel action scheduler\n- [WIP] Use maintenance windows in ssm subscribe channel action scheduler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59d09a08918881c6403dd890e7dbe1a2d5930a82", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/59d09a08918881c6403dd890e7dbe1a2d5930a82", "committedDate": "2020-08-06T10:55:49Z", "message": "Use POJO for passing parameters from frontend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5033958c1402a7bc78406e7730c33c1c9f6c019b", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5033958c1402a7bc78406e7730c33c1c9f6c019b", "committedDate": "2020-08-06T10:55:49Z", "message": "Refactor: Create a POJO for passing maintenance window data to frontend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e159437842adcc8c576a184b6cc576c63c622fb", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3e159437842adcc8c576a184b6cc576c63c622fb", "committedDate": "2020-08-06T10:55:49Z", "message": "Adjustments in the JS scheduler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39b132f433aec1b776eaccd43fe2e1ab21f0e333", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/39b132f433aec1b776eaccd43fe2e1ab21f0e333", "committedDate": "2020-08-06T10:55:50Z", "message": "Fix system id computation in SSM channel assignment UI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e29255680fce732c855fd426fa7c31c617a7daea", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e29255680fce732c855fd426fa7c31c617a7daea", "committedDate": "2020-08-06T10:55:50Z", "message": "Make image build UI maintenance-windows aware"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ca3c43038dada60b808583bcff9bb940b65800d", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1ca3c43038dada60b808583bcff9bb940b65800d", "committedDate": "2020-08-06T10:55:50Z", "message": "Make cluster UI maintenance-windows aware"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5413980a1580c1313aeffbdc397afa40b253c378", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/5413980a1580c1313aeffbdc397afa40b253c378", "committedDate": "2020-08-06T10:55:50Z", "message": "Slighly improve the state assignment; Make the maint. window picker wider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a83fec2019f4d0c2401a8ca54922cf4bd649390", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4a83fec2019f4d0c2401a8ca54922cf4bd649390", "committedDate": "2020-08-06T10:55:50Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0364e0477cfa6db7194adcb329a220464c8875df", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0364e0477cfa6db7194adcb329a220464c8875df", "committedDate": "2020-08-06T10:55:50Z", "message": "Revert \"JSP: Support for greying out date picker\"\n\nThis reverts commit 612c78fef76237c5038f91c92ab84b344c3be9a3.\n\nThis is to be consintent with the React schedule component, that _hides_\nthe date picker in case maint. windows are defined."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce6c8426e6ace7df331ee6f399953a4bd37e932", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fce6c8426e6ace7df331ee6f399953a4bd37e932", "committedDate": "2020-08-06T10:55:50Z", "message": "Refactor: Extract rendering action scheduler fragments to separate functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "218189bd842cc2d8d8b1a8a24f26bc3b20c7d2f0", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/218189bd842cc2d8d8b1a8a24f26bc3b20c7d2f0", "committedDate": "2020-08-06T10:55:50Z", "message": "Add UI warning when dealing with multiple maintenance schedules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db700b5e214cac170dd29101d8041718c3800c1d", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/db700b5e214cac170dd29101d8041718c3800c1d", "committedDate": "2020-08-06T10:55:50Z", "message": "Remove unnecessary check from action chains renderer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "896f51349c3560d34740b442bbf3ce677e12a014", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/896f51349c3560d34740b442bbf3ce677e12a014", "committedDate": "2020-08-06T10:55:51Z", "message": "Fix JS lint error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3be92f299443215f2d43fb164ccd8a194125e962", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3be92f299443215f2d43fb164ccd8a194125e962", "committedDate": "2020-08-06T10:55:51Z", "message": "Adjust the Maint. controller to use POJO instead of Triple for maint. windows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5c73d14cde6f934c9e037646b3d0d06e4b5963a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f5c73d14cde6f934c9e037646b3d0d06e4b5963a", "committedDate": "2020-08-06T10:55:51Z", "message": "Unify the Maintenance windows controllers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33791e267c0037999f799e8aacc0e989929cd9dc", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/33791e267c0037999f799e8aacc0e989929cd9dc", "committedDate": "2020-08-06T10:55:51Z", "message": "Set state using setState in the React component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4db5b2fdef131441c1aeffb98b102d2dffc8a57f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4db5b2fdef131441c1aeffb98b102d2dffc8a57f", "committedDate": "2020-08-06T10:55:51Z", "message": "Forgotten adjustments after reverting grey-out support for the scheduling options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2d1839626ed8d861aa0a5c27fd3fbb635185b17", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f2d1839626ed8d861aa0a5c27fd3fbb635185b17", "committedDate": "2020-08-06T10:55:51Z", "message": "Revert \"Set state using setState in the React component\"\n\nThis reverts commit 1770b4eaa34be824234bd87b2b363ee3899c472c."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44b021c9b90dcce07b782cb434d7d36f5003163f", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/44b021c9b90dcce07b782cb434d7d36f5003163f", "committedDate": "2020-08-06T10:55:51Z", "message": "Check if minion is in maintenance mode when running recurring actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ed2c817b71dafe653e0fa87b6b338d6e14f894e", "author": {"user": {"login": "mseidl", "name": "Martin Seidl"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8ed2c817b71dafe653e0fa87b6b338d6e14f894e", "committedDate": "2020-08-06T10:55:52Z", "message": "update changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb6b0f26535de535ebb9fe783780783c7c6a1d05", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fb6b0f26535de535ebb9fe783780783c7c6a1d05", "committedDate": "2020-08-06T10:55:52Z", "message": "Turn methods to static ones for consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bbdbc10aa4ce2c8e473cacc4f14af3a2e9f7e95", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6bbdbc10aa4ce2c8e473cacc4f14af3a2e9f7e95", "committedDate": "2020-08-06T10:55:52Z", "message": "Refactor: Extract hibernate code from MaintenanceManager to MaintenanceFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d992410727b92cb9d63acec474294ebfc370808", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1d992410727b92cb9d63acec474294ebfc370808", "committedDate": "2020-08-06T10:55:52Z", "message": "Protected -> private in MaintenanceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf4b1ad3869f5534471168c5a97dbb0b6ee14584", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/bf4b1ad3869f5534471168c5a97dbb0b6ee14584", "committedDate": "2020-08-06T10:55:52Z", "message": "Refactor: Move more hibernate-related methods to the MaintenanceFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd3c28b2153365f8f1c589ae6bcaa55add75bc22", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cd3c28b2153365f8f1c589ae6bcaa55add75bc22", "committedDate": "2020-08-06T10:55:52Z", "message": "Refactor: Get rid of 'Maintenance' in the method names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c340c837f899524f53a729101ca099318ea178d", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6c340c837f899524f53a729101ca099318ea178d", "committedDate": "2020-08-06T10:55:52Z", "message": "Refactor: Split the MaintenanceFactory to ScheduleFactory and CalendarFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68ed56f5d95646be2ab98cf412a41a37cb638ac4", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/68ed56f5d95646be2ab98cf412a41a37cb638ac4", "committedDate": "2020-08-06T10:55:53Z", "message": "Revert: Protected -> private in MaintenanceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc7a6e92cd8652cf6238a1a34bc6dc359c2bde43", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/dc7a6e92cd8652cf6238a1a34bc6dc359c2bde43", "committedDate": "2020-08-06T10:55:53Z", "message": "Refactor: Also get rid of the useless 'Maintenance' word in the MaintenanceManager methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b0a7100caf92d44c11fce5317af9e6b33d3f995", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8b0a7100caf92d44c11fce5317af9e6b33d3f995", "committedDate": "2020-08-06T10:55:53Z", "message": "Refactor: Extract Ical-related methods to a separate class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "600e00dbd8516edc46fd207e3de919cde24a5415", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/600e00dbd8516edc46fd207e3de919cde24a5415", "committedDate": "2020-08-06T10:55:53Z", "message": "Refactor: Move the rescheduling-related code to a separate package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3303db514a3f5f84d2bf07c8ed5859fd56d1a72f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3303db514a3f5f84d2bf07c8ed5859fd56d1a72f", "committedDate": "2020-08-06T10:55:53Z", "message": "Adjust comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afd012fbf570a29176aadc1705286641e51afe7e", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/afd012fbf570a29176aadc1705286641e51afe7e", "committedDate": "2020-08-06T10:55:53Z", "message": "Refactor: Turn getScheduleEventsAtDate into getCalendarEventsAtDate\n\nThis slightly simplifies the intent of the method: previously, we passed\nboth schedule and calendar as params. Now we just pass calendar (and\noptionally name for filtering)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c09f818a885d8df567e0eabafa7a53630311658", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8c09f818a885d8df567e0eabafa7a53630311658", "committedDate": "2020-08-06T10:55:53Z", "message": "Remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e60418cf428a738d74d3f5d0b84cb3a777ecbd4", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7e60418cf428a738d74d3f5d0b84cb3a777ecbd4", "committedDate": "2020-08-06T10:55:53Z", "message": "RescheduleStrategyType class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d01156b3008654bc334f87b1dfbab7b7dff56b67", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d01156b3008654bc334f87b1dfbab7b7dff56b67", "committedDate": "2020-08-06T10:55:53Z", "message": "Refactor: Improve the mapping of string to RescheduleStrategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9dc17413ee88470ddc1eb9f81084e9b9deab0f2", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e9dc17413ee88470ddc1eb9f81084e9b9deab0f2", "committedDate": "2020-08-06T10:55:54Z", "message": "Refactor: Explicitly control the lifecycle of MaintenanceManager instances"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52335fadae4092f9bc067258ead59c9c5d913b72", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/52335fadae4092f9bc067258ead59c9c5d913b72", "committedDate": "2020-08-06T10:55:54Z", "message": "Refactor: Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cfb465fe4b01e2a17c47326c4cf9a1716ed4a89", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6cfb465fe4b01e2a17c47326c4cf9a1716ed4a89", "committedDate": "2020-08-06T10:55:54Z", "message": "Refactor: Re-arrange the MaintenanceManager methods\n\nThe new order:\n- the CRUD methods for schedule\n- the CRUD methods for calendar\n- rest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30b7a8216e51a6a7eae01f798b165b7cf11ce988", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/30b7a8216e51a6a7eae01f798b165b7cf11ce988", "committedDate": "2020-08-06T10:55:54Z", "message": "Correct indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c380d35aff5b282b453b2a9f8d7caf08b71ff72", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1c380d35aff5b282b453b2a9f8d7caf08b71ff72", "committedDate": "2020-08-06T10:55:54Z", "message": "Refactor: Better naming for methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa2b48827a80baf72f72b3a23e89d908c74b930e", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/aa2b48827a80baf72f72b3a23e89d908c74b930e", "committedDate": "2020-08-06T10:55:54Z", "message": "Fix the javadoc, remove dangling comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef4a7a50169a80b926c33de523c825ed3f2b87c1", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ef4a7a50169a80b926c33de523c825ed3f2b87c1", "committedDate": "2020-04-21T15:30:15Z", "message": "fixup! schema upgrade: add maintenance_mode_only column to rhnActionType"}, "afterCommit": {"oid": "e9a333f1b2835a4444a1d576dfdf351149ae2c2a", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e9a333f1b2835a4444a1d576dfdf351149ae2c2a", "committedDate": "2020-04-22T13:10:20Z", "message": "schema upgrade: reference maintenance schedule from server"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "478cf794b2fdefd4a04c7174ae643c5e76770e26", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/478cf794b2fdefd4a04c7174ae643c5e76770e26", "committedDate": "2020-04-24T15:53:27Z", "message": "unit tests: MaintenanceManager"}, "afterCommit": {"oid": "218eea7a0b9abe38b9b186736dfca4acbc554f57", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/218eea7a0b9abe38b9b186736dfca4acbc554f57", "committedDate": "2020-04-27T14:27:05Z", "message": "fixup! MaintenanceManager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "218eea7a0b9abe38b9b186736dfca4acbc554f57", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/218eea7a0b9abe38b9b186736dfca4acbc554f57", "committedDate": "2020-04-27T14:27:05Z", "message": "fixup! MaintenanceManager"}, "afterCommit": {"oid": "7ccb13b8dcd60eea3f7f33d96d25a05c37af1ed3", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7ccb13b8dcd60eea3f7f33d96d25a05c37af1ed3", "committedDate": "2020-04-27T14:30:21Z", "message": "unit tests: MaintenanceManager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3282af84bfe9282c1ed96bb5784d4c818756a2fb", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3282af84bfe9282c1ed96bb5784d4c818756a2fb", "committedDate": "2020-05-04T16:10:22Z", "message": "Implement Cancel and Fail Reschedule Strategy"}, "afterCommit": {"oid": "87bdbc6ec0a6cd55005244234c409d362bbc1f87", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/87bdbc6ec0a6cd55005244234c409d362bbc1f87", "committedDate": "2020-05-06T10:18:40Z", "message": "Implement Cancel and Fail Reschedule Strategy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMzQxNTg3", "url": "https://github.com/uyuni-project/uyuni/pull/2144#pullrequestreview-403341587", "createdAt": "2020-04-30T09:13:36Z", "commit": {"oid": "c6893cea05627b65168e9b59e9de43e97bbbda58"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOToxMzozNlrOGOgt5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowMDoyM1rOGRUfGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg2OTI4NQ==", "bodyText": "I wonderif the triggers for this and the other table are not necessarily needed. We always modify the entities using hibernate, the @UpdateTimestamp in BaseDomainHelper should do the trick.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r417869285", "createdAt": "2020-04-30T09:13:36Z", "author": {"login": "hustodemon"}, "path": "schema/spacewalk/postgres/triggers/suseMaintenanceCalendar.sql", "diffHunk": "@@ -0,0 +1,25 @@\n+--\n+-- Copyright (c) 2020 SUSE LLC\n+--\n+-- This software is licensed to you under the GNU General Public License,\n+-- version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+-- implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+-- FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+-- along with this software; if not, see\n+-- http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+--\n+-- triggers for suseMaintenanceCalendar\n+\n+create or replace function suse_mtcal_mod_trig_fun() returns trigger as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6893cea05627b65168e9b59e9de43e97bbbda58"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3MDM0OQ==", "bodyText": "I'd suggest using camelCase (even though that the other attributes don't use it (which is ugly :) )).", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r417870349", "createdAt": "2020-04-30T09:15:24Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/domain/action/ActionType.java", "diffHunk": "@@ -30,6 +30,7 @@\n     private String name;\n     private Character triggersnapshot;\n     private Character unlockedonly;\n+    private boolean maintenancemodeonly;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6893cea05627b65168e9b59e9de43e97bbbda58"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3NzM4OQ==", "bodyText": "I'd be careful with the lazy fetching here. The org attribute is part of hashCode, equals and toString, meaning that any operation using these (like putting a MaintenanceCalendar into a set, or printing it to the log) can fire a SELECT. I'd stick to the default here (when you don't specify the fetch strategy on @ManyToOne, then \"eager\" strategy is used). Being eager here shouldn't really have big performance impact. It also shouldn't pollute the session with a lot of object, since mostly we will deal with a lot of maintenance schedules from the same org.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420777389", "createdAt": "2020-05-06T13:11:07Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/model/maintenance/MaintenanceCalendar.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.model.maintenance;\n+\n+import com.redhat.rhn.domain.BaseDomainHelper;\n+import com.redhat.rhn.domain.org.Org;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n+import java.util.Optional;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+@Entity\n+@Table(name = \"suseMaintenanceCalendar\")\n+@NamedQueries\n+({\n+    @NamedQuery(name = \"MaintenanceCalendar.lookupByUserAndName\",\n+        query = \"from com.suse.manager.model.maintenance.MaintenanceCalendar c \" +\n+                \"where c.org.id = :orgId and c.label = :label\")\n+})\n+public class MaintenanceCalendar extends BaseDomainHelper {\n+    private Long id;\n+    private Org org;\n+    private String label;\n+    private String url;\n+    private String ical;\n+\n+    /**\n+     * @return the id\n+     */\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"mtcal_seq\")\n+    @SequenceGenerator(name = \"mtcal_seq\", sequenceName = \"suse_mtcal_id_seq\", allocationSize = 1)\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * @return the organization\n+     */\n+    @ManyToOne(fetch = FetchType.LAZY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10e17c10a6249dc794ae6367fcb537a1ccf5159"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDEzMg==", "bodyText": "Same here.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420780132", "createdAt": "2020-05-06T13:15:04Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/model/maintenance/MaintenanceSchedule.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.model.maintenance;\n+\n+import com.redhat.rhn.domain.BaseDomainHelper;\n+import com.redhat.rhn.domain.org.Org;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n+import java.util.Optional;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+/**\n+ * MaintenanceSchedule - store maintenance schedule objects\n+ */\n+@Entity\n+@Table(name = \"suseMaintenanceSchedule\")\n+@NamedQueries\n+({\n+    @NamedQuery(name = \"MaintenanceSchedule.lookupByUserAndName\",\n+        query = \"from com.suse.manager.model.maintenance.MaintenanceSchedule s \" +\n+                \"where s.org.id = :orgId and s.name = :name\")\n+})\n+public class MaintenanceSchedule extends BaseDomainHelper {\n+    private Long id;\n+    private Org org;\n+    private String name;\n+    private ScheduleType scheduleType;\n+    private MaintenanceCalendar calendar;\n+\n+    public enum ScheduleType {\n+        SINGLE(\"single\"),\n+        MULTI(\"multi\");\n+\n+        private String label;\n+\n+        ScheduleType(String labelIn) {\n+            this.label = labelIn;\n+        }\n+\n+        /**\n+         * Gets the label.\n+         *\n+         * @return label\n+         */\n+        public String getLabel() {\n+            return label;\n+        }\n+\n+        /**\n+         * Looks up ScheduleType by label\n+         *\n+         * @param label the label\n+         * @throws java.lang.IllegalArgumentException if no matching schedule type is found\n+         * @return the matching schedule type\n+         */\n+        public static ScheduleType lookupByLabel(String label) {\n+            for (ScheduleType value : values()) {\n+                if (value.label.equals(label)) {\n+                    return value;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unsupported label: \" + label);\n+        }\n+    }\n+\n+    /**\n+     * @return the maintenance schedule id\n+     */\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"mtsched_seq\")\n+    @SequenceGenerator(name = \"mtsched_seq\", sequenceName = \"suse_mtsched_id_seq\", allocationSize = 1)\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * @return the organization\n+     */\n+    @ManyToOne(fetch = FetchType.LAZY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10e17c10a6249dc794ae6367fcb537a1ccf5159"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MTg0Nw==", "bodyText": "Now I remember our discussion about optional attributes on hibernate entities. If you want to use getCalendar, that return optional, you can move the annotations from the getter to the calendar field. But that's a subtle detail, feel free to keep it this way!", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420781847", "createdAt": "2020-05-06T13:17:37Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/model/maintenance/MaintenanceSchedule.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.model.maintenance;\n+\n+import com.redhat.rhn.domain.BaseDomainHelper;\n+import com.redhat.rhn.domain.org.Org;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n+import java.util.Optional;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+/**\n+ * MaintenanceSchedule - store maintenance schedule objects\n+ */\n+@Entity\n+@Table(name = \"suseMaintenanceSchedule\")\n+@NamedQueries\n+({\n+    @NamedQuery(name = \"MaintenanceSchedule.lookupByUserAndName\",\n+        query = \"from com.suse.manager.model.maintenance.MaintenanceSchedule s \" +\n+                \"where s.org.id = :orgId and s.name = :name\")\n+})\n+public class MaintenanceSchedule extends BaseDomainHelper {\n+    private Long id;\n+    private Org org;\n+    private String name;\n+    private ScheduleType scheduleType;\n+    private MaintenanceCalendar calendar;\n+\n+    public enum ScheduleType {\n+        SINGLE(\"single\"),\n+        MULTI(\"multi\");\n+\n+        private String label;\n+\n+        ScheduleType(String labelIn) {\n+            this.label = labelIn;\n+        }\n+\n+        /**\n+         * Gets the label.\n+         *\n+         * @return label\n+         */\n+        public String getLabel() {\n+            return label;\n+        }\n+\n+        /**\n+         * Looks up ScheduleType by label\n+         *\n+         * @param label the label\n+         * @throws java.lang.IllegalArgumentException if no matching schedule type is found\n+         * @return the matching schedule type\n+         */\n+        public static ScheduleType lookupByLabel(String label) {\n+            for (ScheduleType value : values()) {\n+                if (value.label.equals(label)) {\n+                    return value;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unsupported label: \" + label);\n+        }\n+    }\n+\n+    /**\n+     * @return the maintenance schedule id\n+     */\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"mtsched_seq\")\n+    @SequenceGenerator(name = \"mtsched_seq\", sequenceName = \"suse_mtsched_id_seq\", allocationSize = 1)\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * @return the organization\n+     */\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"org_id\", nullable = false)\n+    public Org getOrg() {\n+        return org;\n+    }\n+\n+    /**\n+     * @return the schedule name\n+     */\n+    @Column(name = \"name\")\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @return the schedule type\n+     */\n+    @Column(name = \"sched_type\")\n+    @Enumerated(EnumType.STRING)\n+    public ScheduleType getScheduleType() {\n+        return scheduleType;\n+    }\n+\n+    /**\n+     * @return the calendar\n+     */\n+    @ManyToOne()\n+    @JoinColumn(name = \"ical_id\", nullable = true)\n+    protected MaintenanceCalendar getCalendar() {\n+        return calendar;\n+    }\n+\n+    /**\n+     * @return the calendar as optional\n+     */\n+    @Transient\n+    public Optional<MaintenanceCalendar> getCalendarOpt() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10e17c10a6249dc794ae6367fcb537a1ccf5159"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4NjY1Mw==", "bodyText": "These values will be used also by existing code (SCC client, for instance). Are 5 seconds reasonable for it?", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420786653", "createdAt": "2020-05-06T13:24:25Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/redhat/rhn/common/util/http/HttpClientAdapter.java", "diffHunk": "@@ -113,6 +115,9 @@ public HttpClientAdapter() {\n \n         clientBuilder.setDefaultCredentialsProvider(credentialsProvider);\n         Builder requestConfigBuilder = RequestConfig.custom()\n+                .setConnectionRequestTimeout(5000)\n+                .setConnectTimeout(Config.get().getInt(HTTP_CONNECTION_TIMEOUT, 5000))\n+                .setSocketTimeout(Config.get().getInt(HTTP_SOCKET_TIMEOUT, 5000))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3640b21fd7515c54756d7e5be8b99126d1fe466"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5NTEyMg==", "bodyText": "Nit: You can use directly  list() instead of stream().", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420795122", "createdAt": "2020-05-06T13:36:00Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.maintenance;\n+\n+import static com.redhat.rhn.common.hibernate.HibernateFactory.getSession;\n+\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule.ScheduleType;\n+import com.suse.manager.utils.HttpHelper;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.ParseException;\n+import org.apache.http.StatusLine;\n+\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * MaintenanceManager\n+ */\n+public class MaintenanceManager {\n+\n+    private static volatile MaintenanceManager instance = null;\n+\n+    /**\n+     * Instantiate Maintenance Manager object\n+     *\n+     * @return MaintenanceManager object\n+     */\n+    public static MaintenanceManager instance() {\n+        if (instance == null) {\n+            synchronized (MaintenanceManager.class) {\n+                if (instance == null) {\n+                    instance = new MaintenanceManager();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    /**\n+     * Save a MaintenanceSchedule\n+     * @param schedule the schedule\n+     */\n+    public void save(MaintenanceSchedule schedule) {\n+        getSession().save(schedule);\n+    }\n+\n+    /**\n+     * Remove a MaintenanceSchedule\n+     * @param schedule the schedule\n+     */\n+    public void remove(MaintenanceSchedule schedule) {\n+        getSession().remove(schedule);\n+    }\n+\n+    /**\n+     * Save a MaintenanceCalendar\n+     * @param calendar the calendar\n+     */\n+    public void save(MaintenanceCalendar calendar) {\n+        getSession().save(calendar);\n+    }\n+\n+    /**\n+     * Remove a MaintenanceCalendar\n+     * @param calendar the calendar\n+     */\n+    public void remove(MaintenanceCalendar calendar) {\n+        getSession().remove(calendar);\n+    }\n+\n+    /**\n+     * List Maintenance Schedule Names belong to the given User\n+     * @param user the user\n+     * @return a list of Schedule names\n+     */\n+    public List<String> listScheduleNamesByUser(User user) {\n+        @SuppressWarnings(\"unchecked\")\n+        Stream<String> names = getSession()\n+            .createQuery(\"SELECT name FROM MaintenanceSchedule WHERE org = :org\")\n+            .setParameter(\"org\", user.getOrg())\n+            .stream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32775b7518c9ddf2a0f9531fc4eed4a85b6df559"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5NTY4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Create a Maintenance Scheudle\n          \n          \n            \n                 * Create a Maintenance Schedule", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420795687", "createdAt": "2020-05-06T13:36:44Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.maintenance;\n+\n+import static com.redhat.rhn.common.hibernate.HibernateFactory.getSession;\n+\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule.ScheduleType;\n+import com.suse.manager.utils.HttpHelper;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.ParseException;\n+import org.apache.http.StatusLine;\n+\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * MaintenanceManager\n+ */\n+public class MaintenanceManager {\n+\n+    private static volatile MaintenanceManager instance = null;\n+\n+    /**\n+     * Instantiate Maintenance Manager object\n+     *\n+     * @return MaintenanceManager object\n+     */\n+    public static MaintenanceManager instance() {\n+        if (instance == null) {\n+            synchronized (MaintenanceManager.class) {\n+                if (instance == null) {\n+                    instance = new MaintenanceManager();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    /**\n+     * Save a MaintenanceSchedule\n+     * @param schedule the schedule\n+     */\n+    public void save(MaintenanceSchedule schedule) {\n+        getSession().save(schedule);\n+    }\n+\n+    /**\n+     * Remove a MaintenanceSchedule\n+     * @param schedule the schedule\n+     */\n+    public void remove(MaintenanceSchedule schedule) {\n+        getSession().remove(schedule);\n+    }\n+\n+    /**\n+     * Save a MaintenanceCalendar\n+     * @param calendar the calendar\n+     */\n+    public void save(MaintenanceCalendar calendar) {\n+        getSession().save(calendar);\n+    }\n+\n+    /**\n+     * Remove a MaintenanceCalendar\n+     * @param calendar the calendar\n+     */\n+    public void remove(MaintenanceCalendar calendar) {\n+        getSession().remove(calendar);\n+    }\n+\n+    /**\n+     * List Maintenance Schedule Names belong to the given User\n+     * @param user the user\n+     * @return a list of Schedule names\n+     */\n+    public List<String> listScheduleNamesByUser(User user) {\n+        @SuppressWarnings(\"unchecked\")\n+        Stream<String> names = getSession()\n+            .createQuery(\"SELECT name FROM MaintenanceSchedule WHERE org = :org\")\n+            .setParameter(\"org\", user.getOrg())\n+            .stream();\n+        return names.collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Lookup a MaintenanceSchedule by user and name\n+     * @param user the user\n+     * @param name the schedule name\n+     * @return Optional Maintenance Schedule\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public Optional<MaintenanceSchedule> lookupMaintenanceScheduleByUserAndName(User user, String name) {\n+        return getSession().createNamedQuery(\"MaintenanceSchedule.lookupByUserAndName\")\n+            .setParameter(\"orgId\", user.getOrg().getId())\n+            .setParameter(\"name\", name)\n+            .uniqueResultOptional();\n+    }\n+\n+    /**\n+     * Create a Maintenance Scheudle", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32775b7518c9ddf2a0f9531fc4eed4a85b6df559"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5Njg2Mg==", "bodyText": "Same here: list can be used directly on that query.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420796862", "createdAt": "2020-05-06T13:38:20Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.maintenance;\n+\n+import static com.redhat.rhn.common.hibernate.HibernateFactory.getSession;\n+\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule.ScheduleType;\n+import com.suse.manager.utils.HttpHelper;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.ParseException;\n+import org.apache.http.StatusLine;\n+\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * MaintenanceManager\n+ */\n+public class MaintenanceManager {\n+\n+    private static volatile MaintenanceManager instance = null;\n+\n+    /**\n+     * Instantiate Maintenance Manager object\n+     *\n+     * @return MaintenanceManager object\n+     */\n+    public static MaintenanceManager instance() {\n+        if (instance == null) {\n+            synchronized (MaintenanceManager.class) {\n+                if (instance == null) {\n+                    instance = new MaintenanceManager();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    /**\n+     * Save a MaintenanceSchedule\n+     * @param schedule the schedule\n+     */\n+    public void save(MaintenanceSchedule schedule) {\n+        getSession().save(schedule);\n+    }\n+\n+    /**\n+     * Remove a MaintenanceSchedule\n+     * @param schedule the schedule\n+     */\n+    public void remove(MaintenanceSchedule schedule) {\n+        getSession().remove(schedule);\n+    }\n+\n+    /**\n+     * Save a MaintenanceCalendar\n+     * @param calendar the calendar\n+     */\n+    public void save(MaintenanceCalendar calendar) {\n+        getSession().save(calendar);\n+    }\n+\n+    /**\n+     * Remove a MaintenanceCalendar\n+     * @param calendar the calendar\n+     */\n+    public void remove(MaintenanceCalendar calendar) {\n+        getSession().remove(calendar);\n+    }\n+\n+    /**\n+     * List Maintenance Schedule Names belong to the given User\n+     * @param user the user\n+     * @return a list of Schedule names\n+     */\n+    public List<String> listScheduleNamesByUser(User user) {\n+        @SuppressWarnings(\"unchecked\")\n+        Stream<String> names = getSession()\n+            .createQuery(\"SELECT name FROM MaintenanceSchedule WHERE org = :org\")\n+            .setParameter(\"org\", user.getOrg())\n+            .stream();\n+        return names.collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Lookup a MaintenanceSchedule by user and name\n+     * @param user the user\n+     * @param name the schedule name\n+     * @return Optional Maintenance Schedule\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public Optional<MaintenanceSchedule> lookupMaintenanceScheduleByUserAndName(User user, String name) {\n+        return getSession().createNamedQuery(\"MaintenanceSchedule.lookupByUserAndName\")\n+            .setParameter(\"orgId\", user.getOrg().getId())\n+            .setParameter(\"name\", name)\n+            .uniqueResultOptional();\n+    }\n+\n+    /**\n+     * Create a Maintenance Scheudle\n+     * @param user the creator\n+     * @param name the schedule name\n+     * @param type the schedule type\n+     * @param calendar and optional Maintenance Calendar\n+     * @return the created Maintenance Schedule\n+     */\n+    public MaintenanceSchedule createMaintenanceSchedule(User user, String name, ScheduleType type,\n+            Optional<MaintenanceCalendar> calendar) {\n+        MaintenanceSchedule ms = new MaintenanceSchedule();\n+        ms.setOrg(user.getOrg());\n+        ms.setName(name);\n+        ms.setScheduleType(type);\n+        calendar.ifPresent(ms::setCalendar);\n+        save(ms);\n+        return ms;\n+    }\n+\n+    /**\n+     * Update a MaintenanceSchedule\n+     * @param user the user\n+     * @param name the schedule name\n+     * @param details values which should be changed (name, type, calendar)\n+     * @return the updated MaintenanceSchedule\n+     */\n+    public MaintenanceSchedule updateMaintenanceSchedule(User user, String name, Map<String, String> details) {\n+        MaintenanceSchedule schedule = lookupMaintenanceScheduleByUserAndName(user, name)\n+                .orElseThrow(() -> new EntityNotExistsException(name));\n+        if (details.containsKey(\"name\")) {\n+            // TODO: should the identifier really be changeable?\n+            schedule.setName(details.get(\"name\"));\n+        }\n+        if (details.containsKey(\"type\")) {\n+            schedule.setScheduleType(ScheduleType.lookupByLabel(details.get(\"type\")));\n+        }\n+        if (details.containsKey(\"calendar\")) {\n+            MaintenanceCalendar calendar = lookupCalendarByUserAndLabel(user, details.get(\"calendar\"))\n+                .orElseThrow(() -> new EntityNotExistsException(details.get(\"calendar\")));\n+\n+            schedule.setCalendar(calendar);\n+        }\n+        save(schedule);\n+        manageAffectedScheduledActions(user, schedule, Collections.EMPTY_LIST);\n+        return schedule;\n+    }\n+\n+    /**\n+     * List Maintenance Calendar Labels belonging to the given User\n+     * @param user the user\n+     * @return a list of Calendar labels\n+     */\n+    public List<String> listCalendarLabelsByUser(User user) {\n+        Stream<String> labels = getSession()\n+                .createQuery(\"SELECT label FROM MaintenanceCalendar WHERE org = :org\")\n+                .setParameter(\"org\", user.getOrg())\n+                .stream();\n+        return labels.collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32775b7518c9ddf2a0f9531fc4eed4a85b6df559"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNDE5Mg==", "bodyText": "We should also make sure that if the entity already exists, we throw a reasonable exception. A check could be added in MaintenanceManager.createMaintenanceSchedule() that throws EntityExistsException, that would be turned into a fault here.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420804192", "createdAt": "2020-05-06T13:47:43Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/xmlrpc/maintenance/MaintenanceHandler.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.xmlrpc.maintenance;\n+\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule.ScheduleType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Maintenance Schedule XMLRPC Handler\n+ *\n+ * @xmlrpc.namespace maintenance\n+ * @xmlrpc.doc Provides methods to access and modify Maintenance Schedules related entities\n+ */\n+public class MaintenanceHandler extends BaseHandler {\n+\n+    private final MaintenanceManager mm = MaintenanceManager.instance();\n+\n+    /**\n+     * List Schedule Names visible to user\n+     *\n+     * @param loggedInUser the user\n+     * @return list of schedule names\n+     *\n+     * @xmlrpc.doc List Schedule Names visible to user\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.returntype #array_single(\"string\", \"maintenance schedule names\")\n+     */\n+    public List<String> listScheduleNames(User loggedInUser) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.listScheduleNamesByUser(loggedInUser);\n+    }\n+\n+    /**\n+     * Lookup a specific Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @throws EntityNotExistsFaultException when Maintenance Schedule does not exist\n+     * @return the Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Lookup a specific Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule getScheduleDetails(User loggedInUser, String name) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.lookupMaintenanceScheduleByUserAndName(loggedInUser, name)\n+                .orElseThrow(() -> new EntityNotExistsFaultException(name));\n+    }\n+\n+    /**\n+     * Create a new Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @param type schedule type\n+     * @return the new Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.param #param_desc(\"string\", \"type\", \"Schedule type: single, multi\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule createSchedule(User loggedInUser, String name, String type) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceSchedule(loggedInUser, name, ScheduleType.lookupByLabel(type),\n+                Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a66aac3640c669ef40f59a31827f51ee5673502"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNDk4Ng==", "bodyText": "Typo: a EntityNotExistsException instance should be caught.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420804986", "createdAt": "2020-05-06T13:48:43Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/xmlrpc/maintenance/MaintenanceHandler.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.xmlrpc.maintenance;\n+\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule.ScheduleType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Maintenance Schedule XMLRPC Handler\n+ *\n+ * @xmlrpc.namespace maintenance\n+ * @xmlrpc.doc Provides methods to access and modify Maintenance Schedules related entities\n+ */\n+public class MaintenanceHandler extends BaseHandler {\n+\n+    private final MaintenanceManager mm = MaintenanceManager.instance();\n+\n+    /**\n+     * List Schedule Names visible to user\n+     *\n+     * @param loggedInUser the user\n+     * @return list of schedule names\n+     *\n+     * @xmlrpc.doc List Schedule Names visible to user\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.returntype #array_single(\"string\", \"maintenance schedule names\")\n+     */\n+    public List<String> listScheduleNames(User loggedInUser) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.listScheduleNamesByUser(loggedInUser);\n+    }\n+\n+    /**\n+     * Lookup a specific Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @throws EntityNotExistsFaultException when Maintenance Schedule does not exist\n+     * @return the Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Lookup a specific Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule getScheduleDetails(User loggedInUser, String name) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.lookupMaintenanceScheduleByUserAndName(loggedInUser, name)\n+                .orElseThrow(() -> new EntityNotExistsFaultException(name));\n+    }\n+\n+    /**\n+     * Create a new Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @param type schedule type\n+     * @return the new Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.param #param_desc(\"string\", \"type\", \"Schedule type: single, multi\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule createSchedule(User loggedInUser, String name, String type) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceSchedule(loggedInUser, name, ScheduleType.lookupByLabel(type),\n+                Optional.empty());\n+    }\n+\n+    /**\n+     * Update a Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @param details values to update\n+     * @return the changed Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Update a Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.param\n+     *     #struct_begin(\"Maintenance Schedule Details\")\n+     *         #prop_desc(\"string\", \"name\", \"new Schedule Name\")\n+     *         #prop_desc(\"string\", \"type\", \"new Schedule Type\")\n+     *           #options()\n+     *               #item(\"single\")\n+     *               #item(\"multi\"\")\n+     *           #options_end()\n+     *         #prop_desc(\"string\", \"calendar\", \"new calendar label\")\n+     *     #struct_end()\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule updateSchedule(User loggedInUser, String name, Map<String, String> details) {\n+        ensureOrgAdmin(loggedInUser);\n+\n+        // confirm that the user only provided valid keys in the map\n+        Set<String> validKeys = new HashSet<String>();\n+        validKeys.add(\"name\");\n+        validKeys.add(\"type\");\n+        validKeys.add(\"calendar\");\n+        validateMap(validKeys, details);\n+\n+        try {\n+            return mm.updateMaintenanceSchedule(loggedInUser, name, details);\n+        }\n+        catch (EntityNotExistsFaultException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a66aac3640c669ef40f59a31827f51ee5673502"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNjE5NQ==", "bodyText": "Same thing as with createSchedule - an existence check would be cool.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420806195", "createdAt": "2020-05-06T13:50:11Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/xmlrpc/maintenance/MaintenanceHandler.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.xmlrpc.maintenance;\n+\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule.ScheduleType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Maintenance Schedule XMLRPC Handler\n+ *\n+ * @xmlrpc.namespace maintenance\n+ * @xmlrpc.doc Provides methods to access and modify Maintenance Schedules related entities\n+ */\n+public class MaintenanceHandler extends BaseHandler {\n+\n+    private final MaintenanceManager mm = MaintenanceManager.instance();\n+\n+    /**\n+     * List Schedule Names visible to user\n+     *\n+     * @param loggedInUser the user\n+     * @return list of schedule names\n+     *\n+     * @xmlrpc.doc List Schedule Names visible to user\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.returntype #array_single(\"string\", \"maintenance schedule names\")\n+     */\n+    public List<String> listScheduleNames(User loggedInUser) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.listScheduleNamesByUser(loggedInUser);\n+    }\n+\n+    /**\n+     * Lookup a specific Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @throws EntityNotExistsFaultException when Maintenance Schedule does not exist\n+     * @return the Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Lookup a specific Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule getScheduleDetails(User loggedInUser, String name) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.lookupMaintenanceScheduleByUserAndName(loggedInUser, name)\n+                .orElseThrow(() -> new EntityNotExistsFaultException(name));\n+    }\n+\n+    /**\n+     * Create a new Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @param type schedule type\n+     * @return the new Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.param #param_desc(\"string\", \"type\", \"Schedule type: single, multi\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule createSchedule(User loggedInUser, String name, String type) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceSchedule(loggedInUser, name, ScheduleType.lookupByLabel(type),\n+                Optional.empty());\n+    }\n+\n+    /**\n+     * Update a Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @param details values to update\n+     * @return the changed Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Update a Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.param\n+     *     #struct_begin(\"Maintenance Schedule Details\")\n+     *         #prop_desc(\"string\", \"name\", \"new Schedule Name\")\n+     *         #prop_desc(\"string\", \"type\", \"new Schedule Type\")\n+     *           #options()\n+     *               #item(\"single\")\n+     *               #item(\"multi\"\")\n+     *           #options_end()\n+     *         #prop_desc(\"string\", \"calendar\", \"new calendar label\")\n+     *     #struct_end()\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule updateSchedule(User loggedInUser, String name, Map<String, String> details) {\n+        ensureOrgAdmin(loggedInUser);\n+\n+        // confirm that the user only provided valid keys in the map\n+        Set<String> validKeys = new HashSet<String>();\n+        validKeys.add(\"name\");\n+        validKeys.add(\"type\");\n+        validKeys.add(\"calendar\");\n+        validateMap(validKeys, details);\n+\n+        try {\n+            return mm.updateMaintenanceSchedule(loggedInUser, name, details);\n+        }\n+        catch (EntityNotExistsFaultException e) {\n+            throw new EntityNotExistsFaultException(e);\n+        }\n+    }\n+\n+    /**\n+     * Delete a Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @throws EntityNotExistsFaultException when Maintenance Schedule does not exist\n+     * @return number of removed objects\n+     *\n+     * @xmlrpc.doc Remove a Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int deleteSchedule(User loggedInUser, String name) {\n+        ensureOrgAdmin(loggedInUser);\n+        Optional<MaintenanceSchedule> schedule = mm.lookupMaintenanceScheduleByUserAndName(loggedInUser, name);\n+        mm.remove(schedule.orElseThrow(() -> new EntityNotExistsFaultException(name)));\n+        return 1;\n+    }\n+\n+\n+    /**\n+     * List Calendar Labels visible to user\n+     *\n+     * @param loggedInUser the user\n+     * @return list of calendar labels\n+     *\n+     * @xmlrpc.doc List Schedule Names visible to user\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.returntype #array_single(\"string\", \"maintenance calendar labels\")\n+     */\n+    public List<String> listCalendarLabels(User loggedInUser) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.listCalendarLabelsByUser(loggedInUser);\n+    }\n+\n+    /**\n+     * Lookup a specific Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @throws EntityNotExistsFaultException when Maintenance Calendar does not exist\n+     * @return the Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Lookup a specific Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar getCalendarDetails(User loggedInUser, String label) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.lookupCalendarByUserAndLabel(loggedInUser, label)\n+                .orElseThrow(() -> new EntityNotExistsFaultException(label));\n+    }\n+\n+    /**\n+     * Create a new Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @param ical calendar ical data\n+     * @return the new Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Calendar\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.param #param_desc(\"string\", \"ical\", \"ICal Calendar Data\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar createCalendar(User loggedInUser, String label, String ical) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceCalendar(loggedInUser, label, ical);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a66aac3640c669ef40f59a31827f51ee5673502"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNjUzMw==", "bodyText": "Same as create*.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420806533", "createdAt": "2020-05-06T13:50:39Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/xmlrpc/maintenance/MaintenanceHandler.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.xmlrpc.maintenance;\n+\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule.ScheduleType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Maintenance Schedule XMLRPC Handler\n+ *\n+ * @xmlrpc.namespace maintenance\n+ * @xmlrpc.doc Provides methods to access and modify Maintenance Schedules related entities\n+ */\n+public class MaintenanceHandler extends BaseHandler {\n+\n+    private final MaintenanceManager mm = MaintenanceManager.instance();\n+\n+    /**\n+     * List Schedule Names visible to user\n+     *\n+     * @param loggedInUser the user\n+     * @return list of schedule names\n+     *\n+     * @xmlrpc.doc List Schedule Names visible to user\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.returntype #array_single(\"string\", \"maintenance schedule names\")\n+     */\n+    public List<String> listScheduleNames(User loggedInUser) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.listScheduleNamesByUser(loggedInUser);\n+    }\n+\n+    /**\n+     * Lookup a specific Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @throws EntityNotExistsFaultException when Maintenance Schedule does not exist\n+     * @return the Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Lookup a specific Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule getScheduleDetails(User loggedInUser, String name) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.lookupMaintenanceScheduleByUserAndName(loggedInUser, name)\n+                .orElseThrow(() -> new EntityNotExistsFaultException(name));\n+    }\n+\n+    /**\n+     * Create a new Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @param type schedule type\n+     * @return the new Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.param #param_desc(\"string\", \"type\", \"Schedule type: single, multi\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule createSchedule(User loggedInUser, String name, String type) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceSchedule(loggedInUser, name, ScheduleType.lookupByLabel(type),\n+                Optional.empty());\n+    }\n+\n+    /**\n+     * Update a Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @param details values to update\n+     * @return the changed Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Update a Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.param\n+     *     #struct_begin(\"Maintenance Schedule Details\")\n+     *         #prop_desc(\"string\", \"name\", \"new Schedule Name\")\n+     *         #prop_desc(\"string\", \"type\", \"new Schedule Type\")\n+     *           #options()\n+     *               #item(\"single\")\n+     *               #item(\"multi\"\")\n+     *           #options_end()\n+     *         #prop_desc(\"string\", \"calendar\", \"new calendar label\")\n+     *     #struct_end()\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule updateSchedule(User loggedInUser, String name, Map<String, String> details) {\n+        ensureOrgAdmin(loggedInUser);\n+\n+        // confirm that the user only provided valid keys in the map\n+        Set<String> validKeys = new HashSet<String>();\n+        validKeys.add(\"name\");\n+        validKeys.add(\"type\");\n+        validKeys.add(\"calendar\");\n+        validateMap(validKeys, details);\n+\n+        try {\n+            return mm.updateMaintenanceSchedule(loggedInUser, name, details);\n+        }\n+        catch (EntityNotExistsFaultException e) {\n+            throw new EntityNotExistsFaultException(e);\n+        }\n+    }\n+\n+    /**\n+     * Delete a Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @throws EntityNotExistsFaultException when Maintenance Schedule does not exist\n+     * @return number of removed objects\n+     *\n+     * @xmlrpc.doc Remove a Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int deleteSchedule(User loggedInUser, String name) {\n+        ensureOrgAdmin(loggedInUser);\n+        Optional<MaintenanceSchedule> schedule = mm.lookupMaintenanceScheduleByUserAndName(loggedInUser, name);\n+        mm.remove(schedule.orElseThrow(() -> new EntityNotExistsFaultException(name)));\n+        return 1;\n+    }\n+\n+\n+    /**\n+     * List Calendar Labels visible to user\n+     *\n+     * @param loggedInUser the user\n+     * @return list of calendar labels\n+     *\n+     * @xmlrpc.doc List Schedule Names visible to user\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.returntype #array_single(\"string\", \"maintenance calendar labels\")\n+     */\n+    public List<String> listCalendarLabels(User loggedInUser) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.listCalendarLabelsByUser(loggedInUser);\n+    }\n+\n+    /**\n+     * Lookup a specific Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @throws EntityNotExistsFaultException when Maintenance Calendar does not exist\n+     * @return the Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Lookup a specific Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar getCalendarDetails(User loggedInUser, String label) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.lookupCalendarByUserAndLabel(loggedInUser, label)\n+                .orElseThrow(() -> new EntityNotExistsFaultException(label));\n+    }\n+\n+    /**\n+     * Create a new Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @param ical calendar ical data\n+     * @return the new Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Calendar\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.param #param_desc(\"string\", \"ical\", \"ICal Calendar Data\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar createCalendar(User loggedInUser, String label, String ical) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceCalendar(loggedInUser, label, ical);\n+    }\n+\n+    /**\n+     * Create a new Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @param url calendar url\n+     * @return the new Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Calendar\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.param #param_desc(\"string\", \"url\", \"download URL for ICal Calendar Data\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar createCalendarWithUrl(User loggedInUser, String label, String url) {\n+        ensureOrgAdmin(loggedInUser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a66aac3640c669ef40f59a31827f51ee5673502"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNjg1Mw==", "bodyText": "Typo (should be EntityNotExistsException).", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420806853", "createdAt": "2020-05-06T13:51:04Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/xmlrpc/maintenance/MaintenanceHandler.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.xmlrpc.maintenance;\n+\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule.ScheduleType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Maintenance Schedule XMLRPC Handler\n+ *\n+ * @xmlrpc.namespace maintenance\n+ * @xmlrpc.doc Provides methods to access and modify Maintenance Schedules related entities\n+ */\n+public class MaintenanceHandler extends BaseHandler {\n+\n+    private final MaintenanceManager mm = MaintenanceManager.instance();\n+\n+    /**\n+     * List Schedule Names visible to user\n+     *\n+     * @param loggedInUser the user\n+     * @return list of schedule names\n+     *\n+     * @xmlrpc.doc List Schedule Names visible to user\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.returntype #array_single(\"string\", \"maintenance schedule names\")\n+     */\n+    public List<String> listScheduleNames(User loggedInUser) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.listScheduleNamesByUser(loggedInUser);\n+    }\n+\n+    /**\n+     * Lookup a specific Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @throws EntityNotExistsFaultException when Maintenance Schedule does not exist\n+     * @return the Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Lookup a specific Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule getScheduleDetails(User loggedInUser, String name) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.lookupMaintenanceScheduleByUserAndName(loggedInUser, name)\n+                .orElseThrow(() -> new EntityNotExistsFaultException(name));\n+    }\n+\n+    /**\n+     * Create a new Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @param type schedule type\n+     * @return the new Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.param #param_desc(\"string\", \"type\", \"Schedule type: single, multi\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule createSchedule(User loggedInUser, String name, String type) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceSchedule(loggedInUser, name, ScheduleType.lookupByLabel(type),\n+                Optional.empty());\n+    }\n+\n+    /**\n+     * Update a Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @param details values to update\n+     * @return the changed Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Update a Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.param\n+     *     #struct_begin(\"Maintenance Schedule Details\")\n+     *         #prop_desc(\"string\", \"name\", \"new Schedule Name\")\n+     *         #prop_desc(\"string\", \"type\", \"new Schedule Type\")\n+     *           #options()\n+     *               #item(\"single\")\n+     *               #item(\"multi\"\")\n+     *           #options_end()\n+     *         #prop_desc(\"string\", \"calendar\", \"new calendar label\")\n+     *     #struct_end()\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule updateSchedule(User loggedInUser, String name, Map<String, String> details) {\n+        ensureOrgAdmin(loggedInUser);\n+\n+        // confirm that the user only provided valid keys in the map\n+        Set<String> validKeys = new HashSet<String>();\n+        validKeys.add(\"name\");\n+        validKeys.add(\"type\");\n+        validKeys.add(\"calendar\");\n+        validateMap(validKeys, details);\n+\n+        try {\n+            return mm.updateMaintenanceSchedule(loggedInUser, name, details);\n+        }\n+        catch (EntityNotExistsFaultException e) {\n+            throw new EntityNotExistsFaultException(e);\n+        }\n+    }\n+\n+    /**\n+     * Delete a Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @throws EntityNotExistsFaultException when Maintenance Schedule does not exist\n+     * @return number of removed objects\n+     *\n+     * @xmlrpc.doc Remove a Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int deleteSchedule(User loggedInUser, String name) {\n+        ensureOrgAdmin(loggedInUser);\n+        Optional<MaintenanceSchedule> schedule = mm.lookupMaintenanceScheduleByUserAndName(loggedInUser, name);\n+        mm.remove(schedule.orElseThrow(() -> new EntityNotExistsFaultException(name)));\n+        return 1;\n+    }\n+\n+\n+    /**\n+     * List Calendar Labels visible to user\n+     *\n+     * @param loggedInUser the user\n+     * @return list of calendar labels\n+     *\n+     * @xmlrpc.doc List Schedule Names visible to user\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.returntype #array_single(\"string\", \"maintenance calendar labels\")\n+     */\n+    public List<String> listCalendarLabels(User loggedInUser) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.listCalendarLabelsByUser(loggedInUser);\n+    }\n+\n+    /**\n+     * Lookup a specific Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @throws EntityNotExistsFaultException when Maintenance Calendar does not exist\n+     * @return the Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Lookup a specific Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar getCalendarDetails(User loggedInUser, String label) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.lookupCalendarByUserAndLabel(loggedInUser, label)\n+                .orElseThrow(() -> new EntityNotExistsFaultException(label));\n+    }\n+\n+    /**\n+     * Create a new Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @param ical calendar ical data\n+     * @return the new Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Calendar\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.param #param_desc(\"string\", \"ical\", \"ICal Calendar Data\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar createCalendar(User loggedInUser, String label, String ical) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceCalendar(loggedInUser, label, ical);\n+    }\n+\n+    /**\n+     * Create a new Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @param url calendar url\n+     * @return the new Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Calendar\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.param #param_desc(\"string\", \"url\", \"download URL for ICal Calendar Data\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar createCalendarWithUrl(User loggedInUser, String label, String url) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceCalendarWithUrl(loggedInUser, label, url);\n+    }\n+\n+    /**\n+     * Update a Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @param details values which should be updated\n+     * @return the changed Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Update a Maintenance Calendar\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.param\n+     *     #struct_begin(\"Maintenance Calendar Details\")\n+     *         #prop_desc(\"string\", \"label\", \"new Calendar Label\")\n+     *         #prop_desc(\"string\", \"ical\", \"new ical Calendar data\")\n+     *     #struct_end()\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar updateCalendar(User loggedInUser, String label, Map<String, String> details) {\n+        ensureOrgAdmin(loggedInUser);\n+\n+        // confirm that the user only provided valid keys in the map\n+        Set<String> validKeys = new HashSet<String>();\n+        validKeys.add(\"label\");\n+        validKeys.add(\"ical\");\n+        validateMap(validKeys, details);\n+\n+        try {\n+            return mm.updateCalendar(loggedInUser, label, details);\n+        }\n+        catch (EntityNotExistsFaultException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a66aac3640c669ef40f59a31827f51ee5673502"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNzQ2MA==", "bodyText": "Same.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420807460", "createdAt": "2020-05-06T13:51:50Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/xmlrpc/maintenance/MaintenanceHandler.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.xmlrpc.maintenance;\n+\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.frontend.xmlrpc.EntityNotExistsFaultException;\n+\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule.ScheduleType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Maintenance Schedule XMLRPC Handler\n+ *\n+ * @xmlrpc.namespace maintenance\n+ * @xmlrpc.doc Provides methods to access and modify Maintenance Schedules related entities\n+ */\n+public class MaintenanceHandler extends BaseHandler {\n+\n+    private final MaintenanceManager mm = MaintenanceManager.instance();\n+\n+    /**\n+     * List Schedule Names visible to user\n+     *\n+     * @param loggedInUser the user\n+     * @return list of schedule names\n+     *\n+     * @xmlrpc.doc List Schedule Names visible to user\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.returntype #array_single(\"string\", \"maintenance schedule names\")\n+     */\n+    public List<String> listScheduleNames(User loggedInUser) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.listScheduleNamesByUser(loggedInUser);\n+    }\n+\n+    /**\n+     * Lookup a specific Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @throws EntityNotExistsFaultException when Maintenance Schedule does not exist\n+     * @return the Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Lookup a specific Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule getScheduleDetails(User loggedInUser, String name) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.lookupMaintenanceScheduleByUserAndName(loggedInUser, name)\n+                .orElseThrow(() -> new EntityNotExistsFaultException(name));\n+    }\n+\n+    /**\n+     * Create a new Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @param type schedule type\n+     * @return the new Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.param #param_desc(\"string\", \"type\", \"Schedule type: single, multi\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule createSchedule(User loggedInUser, String name, String type) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceSchedule(loggedInUser, name, ScheduleType.lookupByLabel(type),\n+                Optional.empty());\n+    }\n+\n+    /**\n+     * Update a Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @param details values to update\n+     * @return the changed Maintenance Schedule\n+     *\n+     * @xmlrpc.doc Update a Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.param\n+     *     #struct_begin(\"Maintenance Schedule Details\")\n+     *         #prop_desc(\"string\", \"name\", \"new Schedule Name\")\n+     *         #prop_desc(\"string\", \"type\", \"new Schedule Type\")\n+     *           #options()\n+     *               #item(\"single\")\n+     *               #item(\"multi\"\")\n+     *           #options_end()\n+     *         #prop_desc(\"string\", \"calendar\", \"new calendar label\")\n+     *     #struct_end()\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceScheduleSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceSchedule updateSchedule(User loggedInUser, String name, Map<String, String> details) {\n+        ensureOrgAdmin(loggedInUser);\n+\n+        // confirm that the user only provided valid keys in the map\n+        Set<String> validKeys = new HashSet<String>();\n+        validKeys.add(\"name\");\n+        validKeys.add(\"type\");\n+        validKeys.add(\"calendar\");\n+        validateMap(validKeys, details);\n+\n+        try {\n+            return mm.updateMaintenanceSchedule(loggedInUser, name, details);\n+        }\n+        catch (EntityNotExistsFaultException e) {\n+            throw new EntityNotExistsFaultException(e);\n+        }\n+    }\n+\n+    /**\n+     * Delete a Maintenance Schedule\n+     *\n+     * @param loggedInUser the user\n+     * @param name schedule name\n+     * @throws EntityNotExistsFaultException when Maintenance Schedule does not exist\n+     * @return number of removed objects\n+     *\n+     * @xmlrpc.doc Remove a Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"name\", \"Maintenance Schedule Name\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int deleteSchedule(User loggedInUser, String name) {\n+        ensureOrgAdmin(loggedInUser);\n+        Optional<MaintenanceSchedule> schedule = mm.lookupMaintenanceScheduleByUserAndName(loggedInUser, name);\n+        mm.remove(schedule.orElseThrow(() -> new EntityNotExistsFaultException(name)));\n+        return 1;\n+    }\n+\n+\n+    /**\n+     * List Calendar Labels visible to user\n+     *\n+     * @param loggedInUser the user\n+     * @return list of calendar labels\n+     *\n+     * @xmlrpc.doc List Schedule Names visible to user\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.returntype #array_single(\"string\", \"maintenance calendar labels\")\n+     */\n+    public List<String> listCalendarLabels(User loggedInUser) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.listCalendarLabelsByUser(loggedInUser);\n+    }\n+\n+    /**\n+     * Lookup a specific Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @throws EntityNotExistsFaultException when Maintenance Calendar does not exist\n+     * @return the Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Lookup a specific Maintenance Schedule\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar getCalendarDetails(User loggedInUser, String label) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.lookupCalendarByUserAndLabel(loggedInUser, label)\n+                .orElseThrow(() -> new EntityNotExistsFaultException(label));\n+    }\n+\n+    /**\n+     * Create a new Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @param ical calendar ical data\n+     * @return the new Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Calendar\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.param #param_desc(\"string\", \"ical\", \"ICal Calendar Data\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar createCalendar(User loggedInUser, String label, String ical) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceCalendar(loggedInUser, label, ical);\n+    }\n+\n+    /**\n+     * Create a new Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @param url calendar url\n+     * @return the new Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Create a new Maintenance Calendar\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.param #param_desc(\"string\", \"url\", \"download URL for ICal Calendar Data\")\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar createCalendarWithUrl(User loggedInUser, String label, String url) {\n+        ensureOrgAdmin(loggedInUser);\n+        return mm.createMaintenanceCalendarWithUrl(loggedInUser, label, url);\n+    }\n+\n+    /**\n+     * Update a Maintenance Calendar\n+     *\n+     * @param loggedInUser the user\n+     * @param label calendar label\n+     * @param details values which should be updated\n+     * @return the changed Maintenance Calendar\n+     *\n+     * @xmlrpc.doc Update a Maintenance Calendar\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.param\n+     *     #struct_begin(\"Maintenance Calendar Details\")\n+     *         #prop_desc(\"string\", \"label\", \"new Calendar Label\")\n+     *         #prop_desc(\"string\", \"ical\", \"new ical Calendar data\")\n+     *     #struct_end()\n+     * @xmlrpc.returntype\n+     * #array_begin()\n+     * $MaintenanceCalendarSerializer\n+     * #array_end()\n+     */\n+    public MaintenanceCalendar updateCalendar(User loggedInUser, String label, Map<String, String> details) {\n+        ensureOrgAdmin(loggedInUser);\n+\n+        // confirm that the user only provided valid keys in the map\n+        Set<String> validKeys = new HashSet<String>();\n+        validKeys.add(\"label\");\n+        validKeys.add(\"ical\");\n+        validateMap(validKeys, details);\n+\n+        try {\n+            return mm.updateCalendar(loggedInUser, label, details);\n+        }\n+        catch (EntityNotExistsFaultException e) {\n+            throw new EntityNotExistsFaultException(e);\n+        }\n+    }\n+\n+    /**\n+     * Refresh the calendar data using the configured URL\n+     * @param loggedInUser user\n+     * @param label the calendar label\n+     *\n+     * @xmlrpc.doc Refresh Maintenance Calendar Data using the configured URL\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #param_desc(\"string\", \"label\", \"Maintenance Calendar Label\")\n+     * @xmlrpc.returntype #return_int_success()\n+     */\n+    public int refreshCalendar(User loggedInUser, String label) {\n+        ensureOrgAdmin(loggedInUser);\n+        try {\n+            mm.refreshCalendar(loggedInUser, label);\n+            return 1;\n+        }\n+        catch (EntityNotExistsFaultException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a66aac3640c669ef40f59a31827f51ee5673502"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwODA2Mg==", "bodyText": "I think this should be label.", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420808062", "createdAt": "2020-05-06T13:52:34Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/xmlrpc/serializer/MaintenanceCalendarSerializer.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.xmlrpc.serializer;\n+\n+import com.redhat.rhn.frontend.xmlrpc.serializer.RhnXmlRpcCustomSerializer;\n+import com.redhat.rhn.frontend.xmlrpc.serializer.util.SerializerHelper;\n+\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+import redstone.xmlrpc.XmlRpcException;\n+import redstone.xmlrpc.XmlRpcSerializer;\n+\n+/**\n+ * Serializer for {@link com.suse.manager.model.maintenance.MaintenanceCalendar}\n+ *\n+ * @xmlrpc.doc\n+ * #struct_begin(\"Maintenance Calendar information\")\n+ *   #prop(\"int\", \"id\")\n+ *   #prop(\"int\", \"orgId\")\n+ *   #prop(\"string\", \"name\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a66aac3640c669ef40f59a31827f51ee5673502"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxNDYxOA==", "bodyText": "General nitpick:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertNull(dbSchedule.getCalendarOpt().orElse(null));\n          \n          \n            \n                    assertTrue(dbSchedule.getCalendarOpt().isEmpty());", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r420814618", "createdAt": "2020-05-06T14:00:23Z", "author": {"login": "hustodemon"}, "path": "java/code/src/com/suse/manager/maintenance/test/MaintenanceManagerTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.maintenance.test;\n+\n+import com.redhat.rhn.common.util.FileUtils;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+import com.redhat.rhn.testing.TestUtils;\n+\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule.ScheduleType;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+\n+public class MaintenanceManagerTest extends BaseTestCaseWithUser {\n+\n+    private static final String TESTDATAPATH = \"/com/suse/manager/maintenance/test/testdata\";\n+    private static final String KDE_ICS = \"maintenance-windows-kde.ics\";\n+    private static final String EXCHANGE_ICS = \"maintenance-windows-exchange.ics\";\n+\n+    public void testCreateSchedule() throws Exception {\n+        MaintenanceManager mm = MaintenanceManager.instance();\n+        mm.createMaintenanceSchedule(user, \"test server\", ScheduleType.SINGLE, Optional.empty());\n+\n+        List<String> names = mm.listScheduleNamesByUser(user);\n+        assertEquals(1, names.size());\n+        assertContains(names, \"test server\");\n+\n+        Optional<MaintenanceSchedule> dbScheduleOpt = mm.lookupMaintenanceScheduleByUserAndName(user, \"test server\");\n+        assertNotNull(dbScheduleOpt.orElse(null));\n+        MaintenanceSchedule dbSchedule = dbScheduleOpt.get();\n+\n+        assertEquals(user.getOrg(), dbSchedule.getOrg());\n+        assertEquals(\"test server\", dbSchedule.getName());\n+        assertEquals(ScheduleType.SINGLE, dbSchedule.getScheduleType());\n+        assertNull(dbSchedule.getCalendarOpt().orElse(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24ed1ecb19bccddc3f500ed1453e72281dcd7d26"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4de900e4817ecd76e20c6cba1285b25cb43890ec", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/4de900e4817ecd76e20c6cba1285b25cb43890ec", "committedDate": "2020-05-07T13:39:54Z", "message": "fixup! unit tests: MaintenanceManager\n\nCo-authored-by: Frantisek Kobzik <fkobzik@suse.de>"}, "afterCommit": {"oid": "47a09fdfacafa94dab3e3218d978d72d29c07459", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/47a09fdfacafa94dab3e3218d978d72d29c07459", "committedDate": "2020-05-07T13:42:44Z", "message": "ensure that entities do not exists when we want to create them new"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfb43fd141db74948e69746c30bd3ece377691c6", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/dfb43fd141db74948e69746c30bd3ece377691c6", "committedDate": "2020-05-08T14:28:18Z", "message": "handle action chains"}, "afterCommit": {"oid": "572384e5b0e720e9f3b9812319623c0913baacc3", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/572384e5b0e720e9f3b9812319623c0913baacc3", "committedDate": "2020-05-09T21:31:59Z", "message": "handle action chains"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "572384e5b0e720e9f3b9812319623c0913baacc3", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/572384e5b0e720e9f3b9812319623c0913baacc3", "committedDate": "2020-05-09T21:31:59Z", "message": "handle action chains"}, "afterCommit": {"oid": "762c11e460bd839741c8e8694645027edd4a8619", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/762c11e460bd839741c8e8694645027edd4a8619", "committedDate": "2020-05-09T21:32:50Z", "message": "handle action chains"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc24bd1526f1663489aea5052e271774f8caab3d", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/dc24bd1526f1663489aea5052e271774f8caab3d", "committedDate": "2020-05-10T12:18:12Z", "message": "fixup! Make Timeouts configurable for HTTP Connections"}, "afterCommit": {"oid": "41947d1939da4a9f104812c9343bd3251426363e", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/41947d1939da4a9f104812c9343bd3251426363e", "committedDate": "2020-05-10T12:22:12Z", "message": "fixup! Make Timeouts configurable for HTTP Connections"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48a0ec6a9481f1d6bc32c43831d040bc71b97182", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/48a0ec6a9481f1d6bc32c43831d040bc71b97182", "committedDate": "2020-05-10T12:32:28Z", "message": "fixup! Make Timeouts configurable for HTTP Connections"}, "afterCommit": {"oid": "a5f1d7de0096f531509a4db90e43d6939baf17d0", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a5f1d7de0096f531509a4db90e43d6939baf17d0", "committedDate": "2020-05-10T13:48:09Z", "message": "configure api doc for new destination"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af60b127851aceef0cad4b486bf3f9dc3cd3426e", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/af60b127851aceef0cad4b486bf3f9dc3cd3426e", "committedDate": "2020-05-11T07:59:48Z", "message": "fixup! test centos boot fix"}, "afterCommit": {"oid": "ebd20e60fe83cb7590fe16940743d13126582555", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ebd20e60fe83cb7590fe16940743d13126582555", "committedDate": "2020-05-11T08:16:10Z", "message": "test centos boot fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4OTY1NjE2", "url": "https://github.com/uyuni-project/uyuni/pull/2144#pullrequestreview-408965616", "createdAt": "2020-05-11T08:30:07Z", "commit": {"oid": "ebd20e60fe83cb7590fe16940743d13126582555"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODozMDowN1rOGTSDYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODozMDowN1rOGTSDYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg3MTkwNg==", "bodyText": "Please tag with # WORKAROUND fix CentOS random boot failures\nI suggest to move that commit to a separate PR if it works\nI asked Ricardo whether we should not do that at images level, rather\nPlease tell me when I need to re-enable CentOS reboots \ud83d\ude38", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r422871906", "createdAt": "2020-05-11T08:30:07Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/init_clients/centos_ssh_minion.feature", "diffHunk": "@@ -64,3 +64,7 @@ Feature: Bootstrap a SSH-managed CentOS minion and do some basic operations on i\n   Scenario: Check events history for failures on SSH-managed CentOS minion\n     Given I am on the Systems overview page of this \"ceos_ssh_minion\"\n     Then I check for failed events on history event page\n+\n+@centos_minion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebd20e60fe83cb7590fe16940743d13126582555"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42731aa3cc1b6d4ae5677e47b56910719ccafc77", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/42731aa3cc1b6d4ae5677e47b56910719ccafc77", "committedDate": "2020-05-14T10:41:34Z", "message": "fixup! handle reschedule strategy in xmlrpc functions"}, "afterCommit": {"oid": "32b3449f2cc2a6ad6cd5851e4494c05e42d60c60", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/32b3449f2cc2a6ad6cd5851e4494c05e42d60c60", "committedDate": "2020-05-14T13:10:44Z", "message": "unit test: test action chains"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbb6d9d3fdebb1864bbeaeea1fd91c248b2eea65", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/dbb6d9d3fdebb1864bbeaeea1fd91c248b2eea65", "committedDate": "2020-05-16T14:31:14Z", "message": "fixup! Handle reschedule case \"Fail\" and return detailed reschedule informations"}, "afterCommit": {"oid": "2b1e59716228dcc091654e879e22c4c2a8e27937", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2b1e59716228dcc091654e879e22c4c2a8e27937", "committedDate": "2020-05-16T14:33:18Z", "message": "Handle reschedule case \"Fail\" and return detailed reschedule informations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "569770f4e89d4a9b5d4de33d327718937d88569f", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/569770f4e89d4a9b5d4de33d327718937d88569f", "committedDate": "2020-06-02T11:18:35Z", "message": "Merge pull request #2261 from mcalmer/maintenance-windows-u2\n\nallow channel change event to apply the new channel state"}, "afterCommit": {"oid": "1d1652a6890893b943d6add86597d9c929bf0a4f", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1d1652a6890893b943d6add86597d9c929bf0a4f", "committedDate": "2020-06-05T13:01:08Z", "message": "unit test: schedule state.apply with just channels"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15a7a6ff0d4a4e90881db07cec19923c6c3cf9bb", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/15a7a6ff0d4a4e90881db07cec19923c6c3cf9bb", "committedDate": "2020-06-15T05:48:35Z", "message": "Merge pull request #2265 from hustodemon/maintenance-windows-scheduling\n\nImplement selecting maintenance windows in Struts actions"}, "afterCommit": {"oid": "7d522425f3d5729e0c27b0ce5d15efc8b16ea169", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7d522425f3d5729e0c27b0ce5d15efc8b16ea169", "committedDate": "2020-06-15T11:46:57Z", "message": "Minor: Pre-check the maint. windows radio button when displaying the maint. windows picker"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "193e86d6ade7aa090baab840457adfb0bb4fb39e", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/193e86d6ade7aa090baab840457adfb0bb4fb39e", "committedDate": "2020-07-02T06:04:52Z", "message": "Merge pull request #2376 from hustodemon/maintenance-windows-result-types-hibernate\n\nSpecify the result type of the JPQL queries to get rid of warnings"}, "afterCommit": {"oid": "7cc1a7953b75236cba5a99eff647fc74e546442c", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7cc1a7953b75236cba5a99eff647fc74e546442c", "committedDate": "2020-07-02T10:44:51Z", "message": "Display maintenance schedules used by systems in action chains"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7cc1a7953b75236cba5a99eff647fc74e546442c", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7cc1a7953b75236cba5a99eff647fc74e546442c", "committedDate": "2020-07-02T10:44:51Z", "message": "Display maintenance schedules used by systems in action chains"}, "afterCommit": {"oid": "8f518f2be8c4e9a8ae151703e8ec7131feece782", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8f518f2be8c4e9a8ae151703e8ec7131feece782", "committedDate": "2020-07-03T13:33:41Z", "message": "Display maintenance schedules used by systems in action chains"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f518f2be8c4e9a8ae151703e8ec7131feece782", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8f518f2be8c4e9a8ae151703e8ec7131feece782", "committedDate": "2020-07-03T13:33:41Z", "message": "Display maintenance schedules used by systems in action chains"}, "afterCommit": {"oid": "9a49234f978a5666175751fd813fea383814ffb0", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9a49234f978a5666175751fd813fea383814ffb0", "committedDate": "2020-07-06T13:28:56Z", "message": "Display maintenance schedules used by systems in action chains"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "717e19bae2a3e029b6e4db61c67d5f59b514e869", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/717e19bae2a3e029b6e4db61c67d5f59b514e869", "committedDate": "2020-07-17T08:15:51Z", "message": "Merge pull request #2396 from hustodemon/maintenance-windows-picker-fixes\n\nBugfixes related to the maintenance windows picker"}, "afterCommit": {"oid": "2897cc008a4c726480d6948c95b499e0112253ad", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2897cc008a4c726480d6948c95b499e0112253ad", "committedDate": "2020-07-17T11:14:24Z", "message": "Bugfix: Pre-select action chains radio, when maintenance windows are empty\n\nIn this case, the action chain picker is the only picker visible on the\npage, so it must be preselected.\n\nBoth the React and the Struts picker are affected."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2897cc008a4c726480d6948c95b499e0112253ad", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2897cc008a4c726480d6948c95b499e0112253ad", "committedDate": "2020-07-17T11:14:24Z", "message": "Bugfix: Pre-select action chains radio, when maintenance windows are empty\n\nIn this case, the action chain picker is the only picker visible on the\npage, so it must be preselected.\n\nBoth the React and the Struts picker are affected."}, "afterCommit": {"oid": "387220fa5ff34764f3e74072314f50f512abaeec", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/387220fa5ff34764f3e74072314f50f512abaeec", "committedDate": "2020-07-18T12:01:24Z", "message": "Bugfix: Pre-select action chains radio, when maintenance windows are empty\n\nIn this case, the action chain picker is the only picker visible on the\npage, so it must be preselected.\n\nBoth the React and the Struts picker are affected."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3d74b5fb290f28207db558887c4b4ceafab62c4", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e3d74b5fb290f28207db558887c4b4ceafab62c4", "committedDate": "2020-07-22T12:32:00Z", "message": "Merge pull request #2426 from hustodemon/maintenance-windows-multi-fix\n\nFix the event filtering in MULTI Schedules"}, "afterCommit": {"oid": "cdb6b966c026387f5dcdb0f351bd6f490e909cfb", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cdb6b966c026387f5dcdb0f351bd6f490e909cfb", "committedDate": "2020-07-23T08:37:49Z", "message": "Fix the event filtering in MULTI Schedules\n\nPreviously, the equals was called on the SUMMARY object, not on its\nvalue."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67f040a17fa4e0895dcd9400e6dfae26c7964227", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/67f040a17fa4e0895dcd9400e6dfae26c7964227", "committedDate": "2020-07-24T08:24:26Z", "message": "try to fix test by waiting for text to appear"}, "afterCommit": {"oid": "1c64bdf4f6cce0631a876207d9372f653649a3bb", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1c64bdf4f6cce0631a876207d9372f653649a3bb", "committedDate": "2020-07-24T11:06:29Z", "message": "Revert calling saveMessages unconditionally\n\nWe want `saveMessages` to only be called if an error occurred.\nOtherwise all info messages but the most recent are discarded in case of\nsuccess.\nIn particular this causes messages like: \"OS Image Build Host type has\nbeen applied.\" to not be displayed when updating `System Properties`.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c64bdf4f6cce0631a876207d9372f653649a3bb", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1c64bdf4f6cce0631a876207d9372f653649a3bb", "committedDate": "2020-07-24T11:06:29Z", "message": "Revert calling saveMessages unconditionally\n\nWe want `saveMessages` to only be called if an error occurred.\nOtherwise all info messages but the most recent are discarded in case of\nsuccess.\nIn particular this causes messages like: \"OS Image Build Host type has\nbeen applied.\" to not be displayed when updating `System Properties`.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "461b65ca0f772295f46f7997e4aa2f44f56403d7", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/461b65ca0f772295f46f7997e4aa2f44f56403d7", "committedDate": "2020-07-25T13:35:47Z", "message": "Revert calling saveMessages unconditionally\n\nWe want `saveMessages` to only be called if an error occurred.\nOtherwise all info messages but the most recent are discarded in case of\nsuccess.\nIn particular this causes messages like: \"OS Image Build Host type has\nbeen applied.\" to not be displayed when updating `System Properties`.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "461b65ca0f772295f46f7997e4aa2f44f56403d7", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/461b65ca0f772295f46f7997e4aa2f44f56403d7", "committedDate": "2020-07-25T13:35:47Z", "message": "Revert calling saveMessages unconditionally\n\nWe want `saveMessages` to only be called if an error occurred.\nOtherwise all info messages but the most recent are discarded in case of\nsuccess.\nIn particular this causes messages like: \"OS Image Build Host type has\nbeen applied.\" to not be displayed when updating `System Properties`.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "6fc773de9e0347e6ee1393cfa3431a9c52cb3da1", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6fc773de9e0347e6ee1393cfa3431a9c52cb3da1", "committedDate": "2020-07-25T13:41:56Z", "message": "Revert calling saveMessages unconditionally\n\nWe want `saveMessages` to only be called if an error occurred.\nOtherwise all info messages but the most recent are discarded in case of\nsuccess.\nIn particular this causes messages like: \"OS Image Build Host type has\nbeen applied.\" to not be displayed when updating `System Properties`.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7f2d1e67dc50fa56610fa1efcada5f94e8a6bd3", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b7f2d1e67dc50fa56610fa1efcada5f94e8a6bd3", "committedDate": "2020-07-28T10:28:02Z", "message": "Set earliest to first maintenanceWindow item instead of Time.now()\n\nOnly if the system has a maintenance schedule assigned.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "6f95bb1272b00f1c869fa4d306dfad2e19c0626a", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6f95bb1272b00f1c869fa4d306dfad2e19c0626a", "committedDate": "2020-07-28T11:00:06Z", "message": "Set earliest to first maintenanceWindow item instead of Time.now()\n\nOnly if the system has a maintenance schedule assigned.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f95bb1272b00f1c869fa4d306dfad2e19c0626a", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6f95bb1272b00f1c869fa4d306dfad2e19c0626a", "committedDate": "2020-07-28T11:00:06Z", "message": "Set earliest to first maintenanceWindow item instead of Time.now()\n\nOnly if the system has a maintenance schedule assigned.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "f7535acfd5f764e755de022df4ac89362e5e6f19", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/f7535acfd5f764e755de022df4ac89362e5e6f19", "committedDate": "2020-07-28T11:11:43Z", "message": "Set earliest to first maintenanceWindow item instead of Time.now()\n\nOnly if the system has a maintenance schedule assigned.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "792d2356ff86f85f3a0f097f611632e126aa4be6", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/792d2356ff86f85f3a0f097f611632e126aa4be6", "committedDate": "2020-07-28T13:30:12Z", "message": "start with idempotency test at the same version we initialize the DB with"}, "afterCommit": {"oid": "bd7c7437d57e8c204b5a6606b0e511804cc4263e", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/bd7c7437d57e8c204b5a6606b0e511804cc4263e", "committedDate": "2020-07-28T14:01:15Z", "message": "start with idempotency test at the same version we initialize the DB with"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzA0OTMz", "url": "https://github.com/uyuni-project/uyuni/pull/2144#pullrequestreview-456704933", "createdAt": "2020-07-28T14:41:04Z", "commit": {"oid": "bd7c7437d57e8c204b5a6606b0e511804cc4263e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDY3Nzg2", "url": "https://github.com/uyuni-project/uyuni/pull/2144#pullrequestreview-457467786", "createdAt": "2020-07-29T12:24:06Z", "commit": {"oid": "4db097ca4618a4c06ce272ad1682f7c4fe259d2e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyNToyOVrOG42Aww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyNToyOVrOG42Aww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1ODM3MQ==", "bodyText": "And please (and also on previous line)", "url": "https://github.com/uyuni-project/uyuni/pull/2144#discussion_r462258371", "createdAt": "2020-07-29T12:25:29Z", "author": {"login": "Bischoff"}, "path": "testsuite/features/step_definitions/common_steps.rb", "diffHunk": "@@ -206,6 +206,7 @@\n   steps %(\n     When I am authorized as \"admin\" with password \"admin\"\n     When I follow the left menu \"Systems > Overview\"\n+    When I wait until I see \"System Overview\" text", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db097ca4618a4c06ce272ad1682f7c4fe259d2e"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a9929a8ae18ab76acc8eb783430166f04b4579d", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3a9929a8ae18ab76acc8eb783430166f04b4579d", "committedDate": "2020-07-31T12:15:29Z", "message": "Merge pull request #2462 from mcalmer/cucumber-tests-maintenance-windows\n\nCucumber tests maintenance windows"}, "afterCommit": {"oid": "3dbfa2b4f39f54c9c99a8cd8b696725fab185e7f", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3dbfa2b4f39f54c9c99a8cd8b696725fab185e7f", "committedDate": "2020-08-03T10:33:09Z", "message": "fix cleanup resources in HTTP Helper and improve logging"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "576180525c4453b52e2520362f17c4dab917279f", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/576180525c4453b52e2520362f17c4dab917279f", "committedDate": "2020-08-03T16:40:25Z", "message": "Make step to click item details/edit/delete button recurring action\nindependent\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "0ef4e6592eca5d55d575c50190dcef44068e617b", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0ef4e6592eca5d55d575c50190dcef44068e617b", "committedDate": "2020-08-03T16:58:31Z", "message": "Make step to click item details/edit/delete button recurring action\nindependent\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ef4e6592eca5d55d575c50190dcef44068e617b", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0ef4e6592eca5d55d575c50190dcef44068e617b", "committedDate": "2020-08-03T16:58:31Z", "message": "Make step to click item details/edit/delete button recurring action\nindependent\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "a43cda0bdb1921100c4611670a95026798a2d9bb", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a43cda0bdb1921100c4611670a95026798a2d9bb", "committedDate": "2020-08-04T08:09:59Z", "message": "Make step to click item details/edit/delete button recurring action\nindependent\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a43cda0bdb1921100c4611670a95026798a2d9bb", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a43cda0bdb1921100c4611670a95026798a2d9bb", "committedDate": "2020-08-04T08:09:59Z", "message": "Make step to click item details/edit/delete button recurring action\nindependent\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}, "afterCommit": {"oid": "1df1554e89017e8c36ee163cc7e946058a08e686", "author": {"user": {"login": "parlt91", "name": "Pascal Arlt"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1df1554e89017e8c36ee163cc7e946058a08e686", "committedDate": "2020-08-04T08:52:11Z", "message": "Make step to click item details/edit/delete button recurring action\nindependent\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6ccea5ccb3a7c20e283df0c71c4580dd0570803", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e6ccea5ccb3a7c20e283df0c71c4580dd0570803", "committedDate": "2020-08-06T10:55:31Z", "message": "introduce maintenance_mode_only flag in rhnActionType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d8a39c5f8c4b72151c40dbb9a60ea4039768713", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2d8a39c5f8c4b72151c40dbb9a60ea4039768713", "committedDate": "2020-08-06T10:55:31Z", "message": "schema upgrade: add maintenance_mode_only column to rhnActionType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d03de5fa3a8f1575ce03fdf2952bb0b50447cc21", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d03de5fa3a8f1575ce03fdf2952bb0b50447cc21", "committedDate": "2020-08-06T10:55:31Z", "message": "define suseMaintenanceSchedule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8019e8a9d19a252f97f9650ebf77520a6822a107", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8019e8a9d19a252f97f9650ebf77520a6822a107", "committedDate": "2020-08-06T10:55:31Z", "message": "schema upgrade: define suseMaintenanceSchedule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d8dbf08401b858fdee3325428e45df31ab5779c", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1d8dbf08401b858fdee3325428e45df31ab5779c", "committedDate": "2020-08-06T10:55:31Z", "message": "reference maintenance schedule from server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9558b897f3e86d6f38ff233a4854ab89e7f2b476", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/9558b897f3e86d6f38ff233a4854ab89e7f2b476", "committedDate": "2020-08-06T10:55:32Z", "message": "schema upgrade: reference maintenance schedule from server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44f740915db35b89d6ce54d5a8d35d8e3cc09bc0", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/44f740915db35b89d6ce54d5a8d35d8e3cc09bc0", "committedDate": "2020-08-06T10:55:32Z", "message": "Hibernate mapping for Maintenance Schedule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24ada34bba819eeccf66949b2da6224bb5536128", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/24ada34bba819eeccf66949b2da6224bb5536128", "committedDate": "2020-08-06T10:55:32Z", "message": "update Hibernate Schema for rhnActionType to add maintenance_mode_only flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30d185d914ea5d488779a2e0f142d0f67b0b9c3d", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/30d185d914ea5d488779a2e0f142d0f67b0b9c3d", "committedDate": "2020-08-06T10:55:32Z", "message": "register new hibernate schema classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba53a68745b490d2c52627c1893eff752f3f80ef", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ba53a68745b490d2c52627c1893eff752f3f80ef", "committedDate": "2020-08-06T10:55:32Z", "message": "MaintenanceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c27a02e85631735f8804d1e0ae2cbbad3a4ea98a", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c27a02e85631735f8804d1e0ae2cbbad3a4ea98a", "committedDate": "2020-08-06T10:55:32Z", "message": "MaintenanceSchedule XMLRPC functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a973f04e3238e8e7a1c4bbc40b935336302ee7e3", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a973f04e3238e8e7a1c4bbc40b935336302ee7e3", "committedDate": "2020-08-06T10:55:33Z", "message": "unit tests: MaintenanceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1baad4bab716f575614e581cd820a69207ed339e", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1baad4bab716f575614e581cd820a69207ed339e", "committedDate": "2020-08-06T10:55:33Z", "message": "Helper Class for HTTP operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "436d758339dc7f8b8cb2036a936ebe66e43207c5", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/436d758339dc7f8b8cb2036a936ebe66e43207c5", "committedDate": "2020-08-06T10:55:33Z", "message": "add ical4j to ivy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035c84c471f34e584a3fb72db9a57f6f6af57cd5", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/035c84c471f34e584a3fb72db9a57f6f6af57cd5", "committedDate": "2020-08-06T10:55:33Z", "message": "Implement Cancel and Fail Reschedule Strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc3de0907d156e9b972016faa1db6cc18df1688f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fc3de0907d156e9b972016faa1db6cc18df1688f", "committedDate": "2020-08-06T10:55:33Z", "message": "HibernateFactory.reload - no more need for unnecessary client casting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45b62186ecdd4d806387f85266abd7cd6c00a450", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/45b62186ecdd4d806387f85266abd7cd6c00a450", "committedDate": "2020-08-06T10:55:33Z", "message": "Misc: Fix naming of existing method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44e05f9d4c6eac6bde08217ca63b324d1bc0722c", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/44e05f9d4c6eac6bde08217ca63b324d1bc0722c", "committedDate": "2020-08-06T10:55:33Z", "message": "Misc: Fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93285f3bb0a6d417413ff421406d28916bf2c294", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/93285f3bb0a6d417413ff421406d28916bf2c294", "committedDate": "2020-08-06T10:55:34Z", "message": "Factory: Assigning/retracting maintenance schedules to/from systems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b47553304f52dd2be7218fbd85d554cfb81c4777", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b47553304f52dd2be7218fbd85d554cfb81c4777", "committedDate": "2020-08-06T10:55:34Z", "message": "Manager: Assigning/retracting maintenance schedules to/from systems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b0773e188866d6c00c77974a8f20b05f81ea11c", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6b0773e188866d6c00c77974a8f20b05f81ea11c", "committedDate": "2020-08-06T10:55:34Z", "message": "XMLRPC: Assigning/retracting maintenance schedules to/from systems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38fa1dda59ea53e5ddb0400ee8518dc904005b4a", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/38fa1dda59ea53e5ddb0400ee8518dc904005b4a", "committedDate": "2020-08-06T10:55:34Z", "message": "Changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a3835b5bfc9bb2b32410859879bda23b59e6984", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7a3835b5bfc9bb2b32410859879bda23b59e6984", "committedDate": "2020-08-06T10:55:34Z", "message": "Let normal user list and lookup Maintenance Schedules and Calendar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40ab0909681c66d9b84dec52817ba66a520c0aa9", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/40ab0909681c66d9b84dec52817ba66a520c0aa9", "committedDate": "2020-08-06T10:55:34Z", "message": "check permissions in Manager class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "550daa0d938918ff94b45636fa177184e398a81c", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/550daa0d938918ff94b45636fa177184e398a81c", "committedDate": "2020-08-06T10:55:34Z", "message": "implement rescheduling strategy for actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0569e67a403cb09b3aefda6d9a90c70f3b471fe6", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0569e67a403cb09b3aefda6d9a90c70f3b471fe6", "committedDate": "2020-08-06T10:55:34Z", "message": "ensure that entities do not exists when we want to create them new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b73a9f216e9233f789cbe2210195fc28610577f6", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b73a9f216e9233f789cbe2210195fc28610577f6", "committedDate": "2020-08-06T10:55:35Z", "message": "handle reschedule strategy in xmlrpc functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76b1d9eb87115f66d99052ccf6a8d7ab52f1cccf", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/76b1d9eb87115f66d99052ccf6a8d7ab52f1cccf", "committedDate": "2020-08-06T10:55:35Z", "message": "rename maintenancemodeOnly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e99a69109bf67cea78ddb2237dffbdcceac1969", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/6e99a69109bf67cea78ddb2237dffbdcceac1969", "committedDate": "2020-08-06T10:55:35Z", "message": "unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bef4e617163f01d9b86412d11f25090fbd8d90d", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/0bef4e617163f01d9b86412d11f25090fbd8d90d", "committedDate": "2020-08-06T10:55:35Z", "message": "ical4j.properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e2ec0a63172e4f22897fd1e85c14c7d5c7c5fa4", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/3e2ec0a63172e4f22897fd1e85c14c7d5c7c5fa4", "committedDate": "2020-08-06T10:55:35Z", "message": "unit test for multi schedule change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b48293e978488e23b26959d26da7fe40e044a71a", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/b48293e978488e23b26959d26da7fe40e044a71a", "committedDate": "2020-08-06T10:55:35Z", "message": "handle action chains"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38f04ef4216decf0adbaa2485576978c14433231", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/38f04ef4216decf0adbaa2485576978c14433231", "committedDate": "2020-08-06T10:55:35Z", "message": "install ical4j"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d30a0e1cb112f3ca81e29c25e36fd5b8ed5fab66", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/d30a0e1cb112f3ca81e29c25e36fd5b8ed5fab66", "committedDate": "2020-08-06T10:55:36Z", "message": "configure api doc for new destination"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ebe29619c2863fc1857856c6b5a1ee7850e10aa", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/1ebe29619c2863fc1857856c6b5a1ee7850e10aa", "committedDate": "2020-08-06T10:55:36Z", "message": "createSchedule with maintenance calendar label"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e16a8abf679352bdc5b767061149875ee7df932a", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/e16a8abf679352bdc5b767061149875ee7df932a", "committedDate": "2020-08-06T10:55:36Z", "message": "handle empty system id sets\n\ncause SQL syntax errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d99e13248a5e0cf4b93f80dbf5338e2a986cd1d", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8d99e13248a5e0cf4b93f80dbf5338e2a986cd1d", "committedDate": "2020-08-06T10:55:36Z", "message": "use full return type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "794e47caed4688beb8c7a6a591d256b666f15665", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/794e47caed4688beb8c7a6a591d256b666f15665", "committedDate": "2020-08-06T10:55:36Z", "message": "remove not wanted single date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d85f5d360acfaceb9cf02636dcb94c0b865b9d1", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8d85f5d360acfaceb9cf02636dcb94c0b865b9d1", "committedDate": "2020-08-06T10:55:36Z", "message": "fix timezone for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "027e63f92fae955fdd76532eb03ec9ec6e659b87", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/027e63f92fae955fdd76532eb03ec9ec6e659b87", "committedDate": "2020-08-06T10:55:37Z", "message": "unit test: test action chains"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e538119290ec121b854c6eee9b1db7141658141", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/7e538119290ec121b854c6eee9b1db7141658141", "committedDate": "2020-08-06T10:55:37Z", "message": "Always rollback when no strategy succeeded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30d94a25e279022a97f8b84f2c323dd1af66bdc8", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/30d94a25e279022a97f8b84f2c323dd1af66bdc8", "committedDate": "2020-08-06T10:55:37Z", "message": "Handle reschedule case \"Fail\" and return detailed reschedule informations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f740ba3253365f89884b351074730f7d8194b03", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8f740ba3253365f89884b351074730f7d8194b03", "committedDate": "2020-08-06T10:55:37Z", "message": "Fix Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54c525eb92afdd2b959d41f045025bc6dc148430", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/54c525eb92afdd2b959d41f045025bc6dc148430", "committedDate": "2020-08-06T10:55:37Z", "message": "Extract function for getting events at given time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c67eaf222d81d052b55b5fbe4ce6d9a844336a9f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c67eaf222d81d052b55b5fbe4ce6d9a844336a9f", "committedDate": "2020-08-06T10:55:37Z", "message": "Extract function for parsing calendar from string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "161afca89311dbce69496dc3ab44fb09139755d0", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/161afca89311dbce69496dc3ab44fb09139755d0", "committedDate": "2020-08-06T10:55:37Z", "message": "Support checking for maintenance windows when scheduling actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f6caf883ecdefbba4d402422a9a36710fa6053f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/2f6caf883ecdefbba4d402422a9a36710fa6053f", "committedDate": "2020-08-06T10:55:38Z", "message": "Check for maintenance windows when scheduling actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "222aed37b4dec6f8b0bb0884a7abe6db06b74ada", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/222aed37b4dec6f8b0bb0884a7abe6db06b74ada", "committedDate": "2020-08-06T10:55:38Z", "message": "Test checking for maintenance windows when scheduling actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "387559eff2113c2e449cef4edcca2765a1d3855f", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/387559eff2113c2e449cef4edcca2765a1d3855f", "committedDate": "2020-08-06T10:55:38Z", "message": "Minor: Rename function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb632e0f25cc0f7aeaa957500cf07a31e69a5a7", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/acb632e0f25cc0f7aeaa957500cf07a31e69a5a7", "committedDate": "2020-08-06T10:55:38Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "691f0122f2e88227bb729f1ef39676a2008ca5d4", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/691f0122f2e88227bb729f1ef39676a2008ca5d4", "committedDate": "2020-08-06T10:55:38Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f27266ade71b22d9ce15286e566b10c86df6b8", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/57f27266ade71b22d9ce15286e566b10c86df6b8", "committedDate": "2020-08-06T10:55:38Z", "message": "Don't make backend dependant on XMLRPC, handle the exception translation on XMLRPC side"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5feec4edcfc262ae2d10d7cadff684f0122090c", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/c5feec4edcfc262ae2d10d7cadff684f0122090c", "committedDate": "2020-08-06T10:55:38Z", "message": "Refactor: Extract exception-to-fault translation to a separate class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd76f7b788c8fc16982b511f1b886223a2d97858", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/fd76f7b788c8fc16982b511f1b886223a2d97858", "committedDate": "2020-08-06T10:55:39Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66c85c4d9b773b7482a3bda852324ad98c722734", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/66c85c4d9b773b7482a3bda852324ad98c722734", "committedDate": "2020-08-06T10:55:39Z", "message": "Only check actions with no pre-requisites when checking for maintenance mode\n\n(i.e. don't check dependent actions in action chains)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "015eb5075eef2153ab458c442bb9595692acd015", "author": {"user": {"login": "hustodemon", "name": "Frantisek Kobzik"}}, "url": "https://github.com/uyuni-project/uyuni/commit/015eb5075eef2153ab458c442bb9595692acd015", "committedDate": "2020-08-06T10:55:39Z", "message": "Fix tests\n\nThe ServerActionTest was failing because the \"mocked\" actions weren't\nsufficiently populated for maintenance windows checking."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "794c598ff76338abebf7cf4d0b3ded88da76aabf", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/794c598ff76338abebf7cf4d0b3ded88da76aabf", "committedDate": "2020-08-06T10:55:39Z", "message": "extract createActionForServerAt into utils class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "270d57239d52b751467245e41d17d92c4882fb2f", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/270d57239d52b751467245e41d17d92c4882fb2f", "committedDate": "2020-08-06T10:55:39Z", "message": "remove calendar needs possibility to cancel affected actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cebf7f7ffc17123a5f8e5aa22fc7d1f5baa56f78", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/cebf7f7ffc17123a5f8e5aa22fc7d1f5baa56f78", "committedDate": "2020-08-06T10:55:39Z", "message": "fix returning reschedule results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "622c1d4f5d60041ba1ad4669fb04940fcf55409a", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/622c1d4f5d60041ba1ad4669fb04940fcf55409a", "committedDate": "2020-08-06T10:55:39Z", "message": "test remove calendar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a962660abe509e5ecfff229464c72fd7aabad01a", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/a962660abe509e5ecfff229464c72fd7aabad01a", "committedDate": "2020-08-06T10:55:40Z", "message": "Use special method for maintenance window check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "323a0e3a254071fc6ed1cf4a03bccca42847bf8a", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/323a0e3a254071fc6ed1cf4a03bccca42847bf8a", "committedDate": "2020-08-06T10:55:40Z", "message": "forbid to change the unique identifier\n\nwe could not verify that this cause problems, but we have a bad feeling\nabout it so we better forbid it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70dbfc1103339bfdfc3fa42dc2acbca675f749d1", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/70dbfc1103339bfdfc3fa42dc2acbca675f749d1", "committedDate": "2020-08-06T10:55:40Z", "message": "throw new DownloadFaultException when calendar download failed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc37d9dc60c8cc01bc2a864559d409cdd528a405", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/bc37d9dc60c8cc01bc2a864559d409cdd528a405", "committedDate": "2020-08-06T10:55:40Z", "message": "fix unit test: non-deterministic order at remove schedules solved"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a80e3b0fea4070d64b50f07f2f645384a42270a", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/8a80e3b0fea4070d64b50f07f2f645384a42270a", "committedDate": "2020-08-06T10:55:40Z", "message": "Allow to remove a calender from a schedule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca254f1fa2a5a7ac92988f4f2f499aada99f308b", "author": {"user": {"login": "mcalmer", "name": "Michael Calmer"}}, "url": "https://github.com/uyuni-project/uyuni/commit/ca254f1fa2a5a7ac92988f4f2f499aada99f308b", "committedDate": "2020-08-06T10:55:40Z", "message": "Mock taskomatic called for scheduling actions in unit tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1367, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}