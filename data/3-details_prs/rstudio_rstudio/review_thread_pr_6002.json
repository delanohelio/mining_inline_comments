{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxOTA2MjM0", "number": 6002, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwODoyNzoyMlrODXccvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwODoyNzoyMlrODXccvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTA5OTQ4OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/core/client/widget/AriaLiveStatusWidget.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwODoyNzoyMlrOFcvicQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODoyOToxMlrOFdAUtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4MzMxMw==", "bodyText": "This seems to just be an extension of what's already there but I always get a little nervous when multiple timers start being about. This looks sound but I always ask in this situation \"are there any funny conditions we could get in?\"\nThere are some hardcoded times (like the 4000ms on line 71) as well that, at least in the next revision, might want to get pulled out to at least class constants. Not a big deal for this scope but probably something to think about as these things continue to grow in complexity.\nIf we end up with a handful of timers in flight in the future it may be worth offloading some of these status changes to an event bus system.", "url": "https://github.com/rstudio/rstudio/pull/6002#discussion_r365683313", "createdAt": "2020-01-13T08:27:22Z", "author": {"login": "adamconroy"}, "path": "src/gwt/src/org/rstudio/core/client/widget/AriaLiveStatusWidget.java", "diffHunk": "@@ -63,8 +66,23 @@ public void clearMessage()\n       public void run()\n       {\n          getElement().setInnerText(resultsMessage_);\n+         if (clearReaderTimer_.isRunning())\n+            clearReaderTimer_.cancel();\n+         clearReaderTimer_.schedule(4000);\n       }\n    };\n \n+   /**\n+    * Timer for clearing the previous message if nothing new arrives\n+    */\n+   private Timer clearReaderTimer_ = new Timer()\n+   {\n+     @Override\n+     public void run()\n+     {\n+        getElement().setInnerText(\"\");\n+     }\n+   };\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a254ad5279eebb3ebc88645b6dae01e79a240c9e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1ODMyNQ==", "bodyText": "All fair points. I hate when I add (or see) timers in the code, but if you look, we have dozens of them, and most have hardcoded values. That doesn't make it a \"good thing\".\nIn this case, there are definitely \"funny conditions we could get in\", and they are unknowable without testing combinations of screen readers, browsers, user controlled settings for screen reader speech rate, and length of the messages being injected. Our code has no idea how long it will take for a given message to be read, or if a screen reader will read the message even after the text has been cleared.\nTwo reasons I'm doing this clear after a delay:\n\n\nThe text in a live-alert region, although invisible to sighted users, is visible to screen readers so if the user is navigating through the UI with the screen reader cursor, they will come across it and it is weird to get whatever the last announcement was (which might have happened hours / days ago) read again. So I want to clear it after a while to reduce the chances of that.\n\n\nIf you use the new command I added that reads the current editor status (row, column, etc), it is quite reasonable that a user might issue that command again while on the same line (missed details the first time). A screen reader will not read the same announcement twice in a row, so clearing it increases the chances of them hearing it the second time (but only if they wait 4 seconds, so far from perfect). Another strategy would be to have two live regions, and have the code alternate between them with each announcement, clearing the other one when updating the current one. Would still want the timer to clear each region after some amount of time, but would be more robust in general, I'll open a task to look into that in the future.", "url": "https://github.com/rstudio/rstudio/pull/6002#discussion_r365958325", "createdAt": "2020-01-13T18:29:12Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/core/client/widget/AriaLiveStatusWidget.java", "diffHunk": "@@ -63,8 +66,23 @@ public void clearMessage()\n       public void run()\n       {\n          getElement().setInnerText(resultsMessage_);\n+         if (clearReaderTimer_.isRunning())\n+            clearReaderTimer_.cancel();\n+         clearReaderTimer_.schedule(4000);\n       }\n    };\n \n+   /**\n+    * Timer for clearing the previous message if nothing new arrives\n+    */\n+   private Timer clearReaderTimer_ = new Timer()\n+   {\n+     @Override\n+     public void run()\n+     {\n+        getElement().setInnerText(\"\");\n+     }\n+   };\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4MzMxMw=="}, "originalCommit": {"oid": "a254ad5279eebb3ebc88645b6dae01e79a240c9e"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4096, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}