{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExODE3MDU2", "number": 6785, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoyMzoyNFrOD4OjsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo0MToxOFrOD4Zsvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjg1MzYxOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/resources/grid/datatables/js/jquery.dataTables.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoyMzoyNFrOGO8ZOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoyMzoyNFrOGO8ZOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMjc0NQ==", "bodyText": "Found that if you made the window small enough such that it was AJAXing data in constantly the row number would be off here as iRow doesn't encapsulate the data pagination.", "url": "https://github.com/rstudio/rstudio/pull/6785#discussion_r418322745", "createdAt": "2020-04-30T22:23:24Z", "author": {"login": "adamconroy"}, "path": "src/cpp/session/resources/grid/datatables/js/jquery.dataTables.js", "diffHunk": "@@ -1636,7 +1636,7 @@\n     if ( row.nTr === null )\n     {\n       nTr = nTrIn || document.createElement('tr');\n-      nTr.setAttribute(\"data-row\", iRow);\n+      nTr.setAttribute(\"data-row\", iRow + oSettings._iDisplayStart);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426406439659f8faacd3804a26834fa45a8d8c14"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDY3NDYwOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionDataViewer.R", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTozOTo0NVrOGPNKFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo0MzozMVrOGPNRAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5NzM5Nw==", "bodyText": "Because of R's wonky comparison semantics, use identical(x, y) to compare strings instead of == (for pretty much the same reasons === is generally preferred over == in JS)", "url": "https://github.com/rstudio/rstudio/pull/6785#discussion_r418597397", "createdAt": "2020-05-01T15:39:45Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionDataViewer.R", "diffHunk": "@@ -414,22 +414,28 @@\n   }\n \n   # apply sort\n-  if (col > 0 && length(x[[col]]) > 0)\n+  if (length(cols) > 0)\n   {\n-    if (is.list(x[[col]][[1]]) || length(x[[col]][[1]]) > 1)\n+    vals <- list()\n+    for (i in length(cols))\n     {\n-      # extract the first value from each cell for ordering (handle\n-      # vector-valued columns gracefully)\n-      x <- as.data.frame(x[order(vapply(x[[col]], `[`, 0, 1), \n-                                 decreasing = identical(dir, \"desc\")), ,\n-                           drop = FALSE])\n+      idx <- cols[[i]]\n+      if (length(x[[idx]]) > 0)\n+      {\n+        if (dirs[[i]] == \"asc\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426406439659f8faacd3804a26834fa45a8d8c14"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5OTE2OA==", "bodyText": "The most famous example:\n> x <- NULL\n> y <- \"foo\"\n> if (x == y) message(\"Equality achieved\")\nError in if (x == y) message(\"Equality achieved\") : \n  argument is of length zero", "url": "https://github.com/rstudio/rstudio/pull/6785#discussion_r418599168", "createdAt": "2020-05-01T15:43:31Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionDataViewer.R", "diffHunk": "@@ -414,22 +414,28 @@\n   }\n \n   # apply sort\n-  if (col > 0 && length(x[[col]]) > 0)\n+  if (length(cols) > 0)\n   {\n-    if (is.list(x[[col]][[1]]) || length(x[[col]][[1]]) > 1)\n+    vals <- list()\n+    for (i in length(cols))\n     {\n-      # extract the first value from each cell for ordering (handle\n-      # vector-valued columns gracefully)\n-      x <- as.data.frame(x[order(vapply(x[[col]], `[`, 0, 1), \n-                                 decreasing = identical(dir, \"desc\")), ,\n-                           drop = FALSE])\n+      idx <- cols[[i]]\n+      if (length(x[[idx]]) > 0)\n+      {\n+        if (dirs[[i]] == \"asc\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5NzM5Nw=="}, "originalCommit": {"oid": "426406439659f8faacd3804a26834fa45a8d8c14"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDY3OTAyOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/data/DataViewer.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo0MToxOFrOGPNM7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo0MToxOFrOGPNM7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5ODEyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  orderdir = http::util::fieldValue<std::string>(fields,  orderdirstr, \"asc\");\n          \n          \n            \n                  orderdir = http::util::fieldValue<std::string>(fields, orderdirstr, \"asc\");", "url": "https://github.com/rstudio/rstudio/pull/6785#discussion_r418598125", "createdAt": "2020-05-01T15:41:18Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/data/DataViewer.cpp", "diffHunk": "@@ -483,15 +483,33 @@ json::Value getData(SEXP dataSEXP, const http::Fields& fields)\n    int draw = http::util::fieldValue<int>(fields, \"draw\", 0);\n    int start = http::util::fieldValue<int>(fields, \"start\", 0);\n    int length = http::util::fieldValue<int>(fields, \"length\", 0);\n-   int ordercol = http::util::fieldValue<int>(fields, \"order[0][column]\", \n-         -1);\n-   std::string orderdir = http::util::fieldValue<std::string>(fields, \n-         \"order[0][dir]\", \"asc\");\n    std::string search = http::util::urlDecode(\n          http::util::fieldValue<std::string>(fields, \"search[value]\", \"\"));\n    std::string cacheKey = http::util::urlDecode(\n          http::util::fieldValue<std::string>(fields, \"cache_key\", \"\"));\n \n+   // loop through sort columns\n+   std::vector<int> ordercols;\n+   std::vector<std::string> orderdirs;\n+   int orderIdx = 0;\n+   int ordercol = -1;\n+   std::string orderdir;\n+   do\n+   {\n+      std::string ordercolstr = \"order[\" + std::to_string(orderIdx) + \"][column]\";\n+      std::string orderdirstr = \"order[\" + std::to_string(orderIdx) + \"][dir]\";\n+      ordercol = http::util::fieldValue<int>(fields, ordercolstr,  -1);\n+      orderdir = http::util::fieldValue<std::string>(fields,  orderdirstr, \"asc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426406439659f8faacd3804a26834fa45a8d8c14"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3936, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}