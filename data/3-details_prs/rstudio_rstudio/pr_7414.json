{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NzcwMDg2", "number": 7414, "title": "Improve performance of visual mode with many Ace instances", "bodyText": "This change significantly increases the performance of the visual editor when it contains many code chunks, both when initially opening the editor and when switching tabs to an existing editor.\nThe primary technique is to replace the per-editor FontMetrics object with a single FontMetrics objects shared among all editors in a document (see here for some rationale: ajaxorg/ace#2153).\nHowever, doing this has a bunch of downstream side effects that are complicated to mitigate. The worst of these is that it turns out that the FontMetrics object is responsible for triggering the editor to redraw itself when the size of its container changes. Hoisting FontMetrics out of the editor requires us to reimplement this trigger.\nIt also just takes more time to render many dozens of Ace instances than we'd like; even when we are only redrawing them when necessary, the redraw of > 100 editors can make the UI hang for several seconds. So we also need to defer redraws so that the UI is responsive while we the work happens. Luckily, most of these redraws are offscreen, so we use a sorted priority queue to ensure that the Ace instances that are onscreen get rendered first.", "createdAt": "2020-07-21T22:02:31Z", "url": "https://github.com/rstudio/rstudio/pull/7414", "merged": true, "mergeCommit": {"oid": "78fe0193df643cc0f1cfaae773f09be11b6d1bf4"}, "closed": true, "closedAt": "2020-07-22T01:12:04Z", "author": {"login": "jmcphers"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2A9JhgH2gAyNDU0NzcwMDg2OmRlMDRiMzhmNmE1YjdkMjg0NTRkNWU5OTkzNmI2ZGI2ODE3MjMwZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3QZj3gFqTQ1MjkzMTExNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "de04b38f6a5b7d28454d5e99936b6db6817230fb", "author": {"user": {"login": "jmcphers", "name": "Jonathan"}}, "url": "https://github.com/rstudio/rstudio/commit/de04b38f6a5b7d28454d5e99936b6db6817230fb", "committedDate": "2020-07-18T04:44:47Z", "message": "fix for performance issue with many Ace chunks (WIP)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0638d80fc15d9468f3e00a472b1bcf8ff65849fe", "author": {"user": {"login": "jmcphers", "name": "Jonathan"}}, "url": "https://github.com/rstudio/rstudio/commit/0638d80fc15d9468f3e00a472b1bcf8ff65849fe", "committedDate": "2020-07-20T21:23:02Z", "message": "Merge remote-tracking branch 'origin/master' into bugfix/ace-visual-load-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0a4b1fa3a4e9bb98d145d54a10fba9a280d3953", "author": {"user": {"login": "jmcphers", "name": "Jonathan"}}, "url": "https://github.com/rstudio/rstudio/commit/d0a4b1fa3a4e9bb98d145d54a10fba9a280d3953", "committedDate": "2020-07-20T23:26:57Z", "message": "sort render queue by position; use singleton font measurer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa677d4737540e4ae4e02602f86e257c1c8b9dff", "author": {"user": {"login": "jmcphers", "name": "Jonathan"}}, "url": "https://github.com/rstudio/rstudio/commit/fa677d4737540e4ae4e02602f86e257c1c8b9dff", "committedDate": "2020-07-21T21:48:40Z", "message": "use one measurer per outer editor; avoid resizeobserver loop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a245e88f47f4e4138107257ea0e1e395ba35d8f", "author": {"user": {"login": "jmcphers", "name": "Jonathan"}}, "url": "https://github.com/rstudio/rstudio/commit/3a245e88f47f4e4138107257ea0e1e395ba35d8f", "committedDate": "2020-07-21T21:53:19Z", "message": "clarify comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "074bf6dfadc35bcdbea99ad7fdf7f4296c8037d2", "author": {"user": {"login": "jmcphers", "name": "Jonathan"}}, "url": "https://github.com/rstudio/rstudio/commit/074bf6dfadc35bcdbea99ad7fdf7f4296c8037d2", "committedDate": "2020-07-21T22:05:33Z", "message": "clean up commented code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyOTMxMTE0", "url": "https://github.com/rstudio/rstudio/pull/7414#pullrequestreview-452931114", "createdAt": "2020-07-22T01:18:11Z", "commit": {"oid": "074bf6dfadc35bcdbea99ad7fdf7f4296c8037d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMToxODoxMVrOG1PQZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMToxODoxMVrOG1PQZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3NzY3MA==", "bodyText": "Are these APIs available on IE11? (Do we need to worry about IE11 for visual mode, or will we drop support for that in time for the 1.4 release?)", "url": "https://github.com/rstudio/rstudio/pull/7414#discussion_r458477670", "createdAt": "2020-07-22T01:18:11Z", "author": {"login": "kevinushey"}, "path": "src/gwt/acesupport/loader.js", "diffHunk": "@@ -253,33 +254,192 @@ oop.inherits(RStudioUndoManager, UndoManager);\n }).call(RStudioUndoManager.prototype);\n \n \n+// RStudioFontMetrics ----\n+\n+// This class is intended to provide font metrics to multiple Ace editor\n+// instances. This is useful because otherwise each editor does its own font\n+// metrics measurement, which can be expensive when there are many editors on\n+// the same page.\n+//\n+// See https://github.com/ajaxorg/ace/issues/2153 for more background on this\n+// issue.\n+\n+var RStudioFontMetrics = function(parentEl) {\n+    FontMetrics.call(this, parentEl);\n+};\n+oop.inherits(RStudioFontMetrics, FontMetrics);\n+\n+(function() {\n+\n+   this.checkForSizeChanges = function(size) {\n+      // compute size if we weren't given the size\n+      if (typeof(size) === \"undefined\") {\n+         size = this.$measureSizes();\n+      }\n+\n+      // don't attempt to recompute when container is hidden\n+      if (size && (size.height === 0 || size.width === 0)) {\n+         return;\n+      }\n+\n+      // update cached size and perform check for size\n+      this.$cachedSize = size;\n+      FontMetrics.prototype.checkForSizeChanges.call(this, size);\n+   };\n+\n+}).call(RStudioFontMetrics.prototype);\n \n // RStudioRenderer ----\n \n-var RStudioRenderer = function(container, theme) {\n+// queue of virtual renderers that need to be resized (redrawn)\n+var ResizeQueue = [];\n+\n+// method called on a timer to redraw all renderers that need it\n+var ProcessResizeQueue = function() {\n+   // sort the resize queue so that elements closer to the top get priority. if\n+   // we ever need to support opening a document with the viewport positioned\n+   // somewhere other than the top by default, this would need to take\n+   // scrollTop and friends into consideration\n+   ResizeQueue.sort(function(a, b) {\n+      return a.pos - b.pos;\n+   });\n+\n+   // walk the resize queue and schedule the actual work of resizing each\n+   // element; we do this on a zero timer so that it doesn't block the UI if\n+   // e.g. 200 resizes need to get processed at once\n+   for (var idx = 0; idx < ResizeQueue.length; idx++) {\n+      window.setTimeout(function(renderer, args) {\n+         // call base class resize method\n+         Renderer.prototype.onResize.apply(renderer, args);\n+      }, 0, ResizeQueue[idx].renderer, ResizeQueue[idx].args);\n+   }\n+\n+   // clear queue\n+   ResizeQueue = [];\n+   ResizeQueueTimer = 0;\n+};\n+\n+// id of window timer to process resize queue\n+var ResizeQueueTimer = 0;\n+\n+var RStudioRenderer = function(container, theme, fontMetrics) {\n    Renderer.call(this, container, theme);\n+\n+   // use caller-supplied font metrics when specified\n+   if (fontMetrics) {\n+      var self = this;\n+\n+      // destroy original font metrics object (so we don't have a dangling observer)\n+      if (self.$fontMetrics) {\n+         self.$fontMetrics.destroy();\n+      }\n+\n+      // replace with caller-supplied object\n+      self.$fontMetrics = fontMetrics;\n+      self.$textLayer.$setFontMetrics(fontMetrics);\n+\n+      // typically the font metrics change is what triggers a redraw when the\n+      // size becomes nonzero; this is needed so that e.g. an editor that was\n+      // initially rendered in an unselected tab can re-render itself with the\n+      // correct metrics when it becomes visible.\n+      //\n+      // without font the font metrics system, we need another way to trigger\n+      // that redraw, so we implement a direct resize observer here.\n+      self.$cachedHeight = 0;\n+      self.$resizeObserver = new window.ResizeObserver(function(e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074bf6dfadc35bcdbea99ad7fdf7f4296c8037d2"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 140, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}