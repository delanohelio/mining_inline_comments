{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0Mzk2MTg1", "number": 7899, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoyOTo0NlrOEoTkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoyOTo0NlrOEoTkOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk5MDY0OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/ui/PaneManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoyOTo0NlrOHZUNSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzozMDozNVrOHZtQFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNzUyOQ==", "bodyText": "Is this empty method needed?", "url": "https://github.com/rstudio/rstudio/pull/7899#discussion_r496307529", "createdAt": "2020-09-29T00:29:46Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/ui/PaneManager.java", "diffHunk": "@@ -925,128 +928,37 @@ else if (window.equals(getConsoleLogicalWindow()))\n          onActivation = () -> commands_.activateHelp().execute();\n       }\n \n-      resizeHorizontally(initialSize, targetSize, leftStart, leftEnd, onActivation);\n+      resizeHorizontally(rightTargetSize, leftTargets, onActivation);\n    }\n \n-   private void resizeHorizontally(final double rightStart,\n-                                   final double rightEnd,\n-                                   final ArrayList<Double> leftStart,\n-                                   final ArrayList<Double> leftEnd)\n+   private void resizeHorizontally(final double rightTarget,\n+                                   final ArrayList<Double> leftTargets)\n    {\n-      resizeHorizontally(rightStart, rightEnd, leftStart, leftEnd, null);\n+      resizeHorizontally(rightTarget, leftTargets, null);\n    }\n-\n-   private void resizeHorizontally(final double rightStart,\n-                                   final double rightEnd,\n-                                   final ArrayList<Double> leftStart,\n-                                   final ArrayList<Double> leftEnd,\n+   \n+   private void resizeHorizontally(final double rightTarget,\n+                                   final ArrayList<Double> leftTargets,\n                                    final Command afterComplete)\n    {\n-      int duration = (userPrefs_.reducedMotion().getValue() ? 0 : 300);\n-      horizontalResizeAnimation(rightStart, rightEnd, leftStart, leftEnd,\n-         afterComplete).run(duration);\n-   }\n+      panel_.setWidgetSize(right_, rightTarget);\n+      for (int i = 0; i < leftList_.size(); i++)\n+         panel_.setWidgetSize(leftList_.get(i), leftTargets.get(i));\n \n-   // If we allow multiple right columns, the first two variables will need to become lists\n-   private Animation horizontalResizeAnimation(final double rightStart,\n-                                               final double rightEnd,\n-                                               final ArrayList<Double> leftStart,\n-                                               final ArrayList<Double> leftEnd,\n-                                               final Command afterComplete)\n-   {\n-      final double leftStartSum = leftStart.stream().mapToDouble(Double::doubleValue).sum();\n-      final double leftEndSum = leftEnd.stream().mapToDouble(Double::doubleValue).sum();\n-      return new Animation()\n+      int duration = (userPrefs_.reducedMotion().getValue() ? 0 : 300);\n+      panel_.animate(duration, new AnimationCallback()\n       {\n-         @Override\n-         protected void onUpdate(double progress)\n+         public void onAnimationComplete()\n          {\n-            double size = (1 - progress) * rightStart +\n-               progress * rightEnd;\n-            panel_.setWidgetSize(right_, size);\n-\n-            // If the user isn't using additional columns, we're done.\n-            if (leftStartSum == 0 &&\n-                leftEndSum == 0)\n-               return;\n-\n-            // The logic here is more complex than for the right panel because there may be\n-            // multiple widgets and the animation needs to occur across all the widgets rather\n-            // than in each specified widget.\n-            size = (1 - progress) * leftStartSum +\n-               progress * leftEndSum;\n-\n-            final double currentSize = panel_.getLeftSize();\n-            if (currentSize > size) // we are shrinking\n-            {\n-               double difference = currentSize - size;\n-               for (int i = 0; i < leftStart.size(); i++)\n-               {\n-                  double widgetSize = panel_.getWidgetSize(leftList_.get(i));\n-                  if (widgetSize > 0)\n-                  {\n-                     if (widgetSize > difference)\n-                     {\n-                        panel_.setWidgetSize(leftList_.get(i), widgetSize - difference);\n-                        break;\n-                     }\n-                     else\n-                     {\n-                        panel_.setWidgetSize(leftList_.get(i), 0.0);\n-                        difference -= widgetSize;\n-                        if (difference <= 0.0)\n-                           break;\n-                     }\n-                  }\n-               }\n-            }\n-            else if (currentSize < size)// we are growing\n-            {\n-               // iterate backwards so the left most widget is shown first\n-               for (int i = leftStart.size() - 1; i >= 0; i--)\n-               {\n-                  final double widgetSize = panel_.getWidgetSize(leftList_.get(i));\n-                  // If the widget is bigger than the size, calculate the size of the display\n-                  if (widgetSize < leftEnd.get(i))\n-                  {\n-                     if (size > leftEnd.get(i))\n-                     {\n-                        panel_.setWidgetSize(leftList_.get(i), leftEnd.get(i));\n-                        size -= leftEnd.get(i);\n-                     }\n-                     else\n-                     {\n-                        panel_.setWidgetSize(leftList_.get(i), size);\n-                        break;\n-                     }\n-                  }\n-                  else\n-                  {\n-                     size -= widgetSize;\n-                     if (size <= 0.0)\n-                        break;\n-                  }\n-               }\n-            }\n-         }\n-\n-         @Override\n-         protected void onStart()\n-         {\n-            isAnimating_ = true;\n-            super.onStart();\n-         }\n-\n-         @Override\n-         protected void onComplete()\n-         {\n-            isAnimating_ = false;\n             panel_.onSplitterResized(new SplitterResizedEvent());\n-            super.onComplete();\n             if (afterComplete != null)\n                afterComplete.execute();\n          }\n-      };\n+         \n+         public void onLayout(Layer layer, double progress)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dff11bd7966ccee8eb2a3b7836b579bcd2e6c667"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNzg0NQ==", "bodyText": "Yes because it's part of the AnimationCallback interface. It gets called at each step of animation but we don't need to do anything special for that here.", "url": "https://github.com/rstudio/rstudio/pull/7899#discussion_r496717845", "createdAt": "2020-09-29T13:30:35Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/ui/PaneManager.java", "diffHunk": "@@ -925,128 +928,37 @@ else if (window.equals(getConsoleLogicalWindow()))\n          onActivation = () -> commands_.activateHelp().execute();\n       }\n \n-      resizeHorizontally(initialSize, targetSize, leftStart, leftEnd, onActivation);\n+      resizeHorizontally(rightTargetSize, leftTargets, onActivation);\n    }\n \n-   private void resizeHorizontally(final double rightStart,\n-                                   final double rightEnd,\n-                                   final ArrayList<Double> leftStart,\n-                                   final ArrayList<Double> leftEnd)\n+   private void resizeHorizontally(final double rightTarget,\n+                                   final ArrayList<Double> leftTargets)\n    {\n-      resizeHorizontally(rightStart, rightEnd, leftStart, leftEnd, null);\n+      resizeHorizontally(rightTarget, leftTargets, null);\n    }\n-\n-   private void resizeHorizontally(final double rightStart,\n-                                   final double rightEnd,\n-                                   final ArrayList<Double> leftStart,\n-                                   final ArrayList<Double> leftEnd,\n+   \n+   private void resizeHorizontally(final double rightTarget,\n+                                   final ArrayList<Double> leftTargets,\n                                    final Command afterComplete)\n    {\n-      int duration = (userPrefs_.reducedMotion().getValue() ? 0 : 300);\n-      horizontalResizeAnimation(rightStart, rightEnd, leftStart, leftEnd,\n-         afterComplete).run(duration);\n-   }\n+      panel_.setWidgetSize(right_, rightTarget);\n+      for (int i = 0; i < leftList_.size(); i++)\n+         panel_.setWidgetSize(leftList_.get(i), leftTargets.get(i));\n \n-   // If we allow multiple right columns, the first two variables will need to become lists\n-   private Animation horizontalResizeAnimation(final double rightStart,\n-                                               final double rightEnd,\n-                                               final ArrayList<Double> leftStart,\n-                                               final ArrayList<Double> leftEnd,\n-                                               final Command afterComplete)\n-   {\n-      final double leftStartSum = leftStart.stream().mapToDouble(Double::doubleValue).sum();\n-      final double leftEndSum = leftEnd.stream().mapToDouble(Double::doubleValue).sum();\n-      return new Animation()\n+      int duration = (userPrefs_.reducedMotion().getValue() ? 0 : 300);\n+      panel_.animate(duration, new AnimationCallback()\n       {\n-         @Override\n-         protected void onUpdate(double progress)\n+         public void onAnimationComplete()\n          {\n-            double size = (1 - progress) * rightStart +\n-               progress * rightEnd;\n-            panel_.setWidgetSize(right_, size);\n-\n-            // If the user isn't using additional columns, we're done.\n-            if (leftStartSum == 0 &&\n-                leftEndSum == 0)\n-               return;\n-\n-            // The logic here is more complex than for the right panel because there may be\n-            // multiple widgets and the animation needs to occur across all the widgets rather\n-            // than in each specified widget.\n-            size = (1 - progress) * leftStartSum +\n-               progress * leftEndSum;\n-\n-            final double currentSize = panel_.getLeftSize();\n-            if (currentSize > size) // we are shrinking\n-            {\n-               double difference = currentSize - size;\n-               for (int i = 0; i < leftStart.size(); i++)\n-               {\n-                  double widgetSize = panel_.getWidgetSize(leftList_.get(i));\n-                  if (widgetSize > 0)\n-                  {\n-                     if (widgetSize > difference)\n-                     {\n-                        panel_.setWidgetSize(leftList_.get(i), widgetSize - difference);\n-                        break;\n-                     }\n-                     else\n-                     {\n-                        panel_.setWidgetSize(leftList_.get(i), 0.0);\n-                        difference -= widgetSize;\n-                        if (difference <= 0.0)\n-                           break;\n-                     }\n-                  }\n-               }\n-            }\n-            else if (currentSize < size)// we are growing\n-            {\n-               // iterate backwards so the left most widget is shown first\n-               for (int i = leftStart.size() - 1; i >= 0; i--)\n-               {\n-                  final double widgetSize = panel_.getWidgetSize(leftList_.get(i));\n-                  // If the widget is bigger than the size, calculate the size of the display\n-                  if (widgetSize < leftEnd.get(i))\n-                  {\n-                     if (size > leftEnd.get(i))\n-                     {\n-                        panel_.setWidgetSize(leftList_.get(i), leftEnd.get(i));\n-                        size -= leftEnd.get(i);\n-                     }\n-                     else\n-                     {\n-                        panel_.setWidgetSize(leftList_.get(i), size);\n-                        break;\n-                     }\n-                  }\n-                  else\n-                  {\n-                     size -= widgetSize;\n-                     if (size <= 0.0)\n-                        break;\n-                  }\n-               }\n-            }\n-         }\n-\n-         @Override\n-         protected void onStart()\n-         {\n-            isAnimating_ = true;\n-            super.onStart();\n-         }\n-\n-         @Override\n-         protected void onComplete()\n-         {\n-            isAnimating_ = false;\n             panel_.onSplitterResized(new SplitterResizedEvent());\n-            super.onComplete();\n             if (afterComplete != null)\n                afterComplete.execute();\n          }\n-      };\n+         \n+         public void onLayout(Layer layer, double progress)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNzUyOQ=="}, "originalCommit": {"oid": "dff11bd7966ccee8eb2a3b7836b579bcd2e6c667"}, "originalPosition": 288}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4212, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}