{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODQ4Mjcw", "number": 5954, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxOToxNDo0M1rODVuxng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDozMTowNlrODYofCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTEzMDU0OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxOToxNDo0M1rOFaHT1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxODowNVrOFaJllQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNzA2MA==", "bodyText": "Would it be simpler to use boost::algorithm::replace_all here?", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362927060", "createdAt": "2020-01-03T19:14:43Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -975,20 +977,44 @@ struct ReplaceOptions\n       replacePattern(\"\")\n    {}\n \n-   ReplaceOptions(std::string replace, bool useGitIgnore) :\n+   ReplaceOptions(std::string replace) :\n       empty(false),\n       preview(false),\n-      useGitIgnore(useGitIgnore),\n       replacePattern(replace)\n    {}\n \n    bool empty;\n    bool preview;\n-   bool useGitIgnore;\n \n    const std::string replacePattern;\n };\n \n+core::Error createGitExclusionString(const FilePath& dirPath, std::string* pResultString)\n+{\n+   shell_utils::ShellCommand cmd(\"git\");\n+   cmd << \"-C\";\n+   cmd << string_utils::utf8ToSystem(dirPath.getAbsolutePath());\n+   cmd << \"ls-files\";\n+   cmd << \"-i\";\n+   cmd << \"--exclude-standard\";\n+\n+   core::system::ProcessResult result;\n+   core::system::ProcessOptions options;\n+\n+   core::Error error = runCommand(cmd,\n+                                  options,\n+                                  &result);\n+   if (error)\n+      return error;\n+\n+   *pResultString = result.stdOut;\n+   size_t splitAt;\n+   while ((splitAt = pResultString->find('\\n')) != pResultString->npos)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2291853c9ee7574532f861ebe862a4e05e207a20"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NDM3Mw==", "bodyText": "Yes, thank you!", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362964373", "createdAt": "2020-01-03T21:18:05Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -975,20 +977,44 @@ struct ReplaceOptions\n       replacePattern(\"\")\n    {}\n \n-   ReplaceOptions(std::string replace, bool useGitIgnore) :\n+   ReplaceOptions(std::string replace) :\n       empty(false),\n       preview(false),\n-      useGitIgnore(useGitIgnore),\n       replacePattern(replace)\n    {}\n \n    bool empty;\n    bool preview;\n-   bool useGitIgnore;\n \n    const std::string replacePattern;\n };\n \n+core::Error createGitExclusionString(const FilePath& dirPath, std::string* pResultString)\n+{\n+   shell_utils::ShellCommand cmd(\"git\");\n+   cmd << \"-C\";\n+   cmd << string_utils::utf8ToSystem(dirPath.getAbsolutePath());\n+   cmd << \"ls-files\";\n+   cmd << \"-i\";\n+   cmd << \"--exclude-standard\";\n+\n+   core::system::ProcessResult result;\n+   core::system::ProcessOptions options;\n+\n+   core::Error error = runCommand(cmd,\n+                                  options,\n+                                  &result);\n+   if (error)\n+      return error;\n+\n+   *pResultString = result.stdOut;\n+   size_t splitAt;\n+   while ((splitAt = pResultString->find('\\n')) != pResultString->npos)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNzA2MA=="}, "originalCommit": {"oid": "2291853c9ee7574532f861ebe862a4e05e207a20"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTEzNjY3OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxOToxNzoxM1rOFaHXSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxODoyMFrOFaJl0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNzk0Nw==", "bodyText": "getString() can throw when the Value is not a string, so for safety would recommend testing and skipping non-string values in the array (realize this is unlikely but the consequence of an exception here is a full session crash!)", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362927947", "createdAt": "2020-01-03T19:17:13Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1060,12 +1086,33 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n       cmd << \"--include=\" + filePattern.getString();\n    }\n \n-   cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n-\n-\n    // Filepaths received from the client will be UTF-8 encoded;\n    // convert to system encoding here.\n    FilePath dirPath = module_context::resolveAliasedPath(grepOptions.directory);\n+   for (json::Value filePattern : grepOptions.excludeFilePatterns)\n+   {\n+      // to retrieve the git exclusions, we run a git command and parse the output\n+      if (filePattern.getString().compare(\"gitExclusions\") == 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2291853c9ee7574532f861ebe862a4e05e207a20"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NDQzNA==", "bodyText": "Fixed", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362964434", "createdAt": "2020-01-03T21:18:20Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1060,12 +1086,33 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n       cmd << \"--include=\" + filePattern.getString();\n    }\n \n-   cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n-\n-\n    // Filepaths received from the client will be UTF-8 encoded;\n    // convert to system encoding here.\n    FilePath dirPath = module_context::resolveAliasedPath(grepOptions.directory);\n+   for (json::Value filePattern : grepOptions.excludeFilePatterns)\n+   {\n+      // to retrieve the git exclusions, we run a git command and parse the output\n+      if (filePattern.getString().compare(\"gitExclusions\") == 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNzk0Nw=="}, "originalCommit": {"oid": "2291853c9ee7574532f861ebe862a4e05e207a20"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTE0MDc5OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxOToxODo1OVrOFaHZwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxODoyOVrOFaJmEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyODU3OA==", "bodyText": "Should this be [] since the function returns an array?", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362928578", "createdAt": "2020-01-03T19:18:59Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "diffHunk": "@@ -104,6 +100,18 @@ private native JsArrayString getFilePatternsNative() /*-{\n          return this.filePatterns;\n       }-*/;\n \n+      public final String[] getExcludeFilePatterns()\n+      {\n+         return JsUtil.toStringArray(getExcludeFilePatternsNative());\n+      }\n+\n+      private native JsArrayString getExcludeFilePatternsNative() /*-{\n+\n+         if (!this.excludeFilePatterns)\n+            this.excludeFilePatterns=\"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2291853c9ee7574532f861ebe862a4e05e207a20"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NDQ5Ng==", "bodyText": "Fixed", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362964496", "createdAt": "2020-01-03T21:18:29Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "diffHunk": "@@ -104,6 +100,18 @@ private native JsArrayString getFilePatternsNative() /*-{\n          return this.filePatterns;\n       }-*/;\n \n+      public final String[] getExcludeFilePatterns()\n+      {\n+         return JsUtil.toStringArray(getExcludeFilePatternsNative());\n+      }\n+\n+      private native JsArrayString getExcludeFilePatternsNative() /*-{\n+\n+         if (!this.excludeFilePatterns)\n+            this.excludeFilePatterns=\"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyODU3OA=="}, "originalCommit": {"oid": "2291853c9ee7574532f861ebe862a4e05e207a20"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTE0MjkzOnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxOToyMDowN1rOFaHbHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxODozN1rOFaJmMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyODkyNg==", "bodyText": "Nit: for very complicated reasons, we prefer StringUtil.equals (GWT has actually changed the way string comparison works between releases!)", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362928926", "createdAt": "2020-01-03T19:20:07Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "diffHunk": "@@ -203,12 +225,26 @@ protected State collectInput()\n             list.add(trimmedPattern);\n       }\n \n+      String excludeFilePatterns =\n+         listPresetExcludeFilePatterns_.getValue(\n+               listPresetExcludeFilePatterns_.getSelectedIndex());\n+      if (excludeFilePatterns == \"custom\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2291853c9ee7574532f861ebe862a4e05e207a20"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NDUzMA==", "bodyText": "Fixed", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362964530", "createdAt": "2020-01-03T21:18:37Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "diffHunk": "@@ -203,12 +225,26 @@ protected State collectInput()\n             list.add(trimmedPattern);\n       }\n \n+      String excludeFilePatterns =\n+         listPresetExcludeFilePatterns_.getValue(\n+               listPresetExcludeFilePatterns_.getSelectedIndex());\n+      if (excludeFilePatterns == \"custom\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyODkyNg=="}, "originalCommit": {"oid": "2291853c9ee7574532f861ebe862a4e05e207a20"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTE2NDc0OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxOTozMDo1MlrOFaHoow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMDozNjowOFrOFcHcYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzMjM4Nw==", "bodyText": "ls-files can return an unbounded amount of output, but most operating systems have a pretty small bound on the size of a shell command, which is a recipe for trouble here since we're trying to add every line to the command. This could cause us to fail when there are a lot of ignored files with long paths.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362932387", "createdAt": "2020-01-03T19:30:52Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1060,12 +1086,33 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n       cmd << \"--include=\" + filePattern.getString();\n    }\n \n-   cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n-\n-\n    // Filepaths received from the client will be UTF-8 encoded;\n    // convert to system encoding here.\n    FilePath dirPath = module_context::resolveAliasedPath(grepOptions.directory);\n+   for (json::Value filePattern : grepOptions.excludeFilePatterns)\n+   {\n+      // to retrieve the git exclusions, we run a git command and parse the output\n+      if (filePattern.getString().compare(\"gitExclusions\") == 0)\n+      {\n+         std::string excludeGitExclusion;\n+         error = createGitExclusionString(dirPath, &excludeGitExclusion);\n+         if (error)\n+            return error;\n+\n+         std::istringstream stream(excludeGitExclusion);\n+         std::vector<std::string> results((std::istream_iterator<std::string>(stream)),\n+            std::istream_iterator<std::string>());\n+         for (std::string filePattern : results)\n+         {\n+            filePattern.insert(0, dirPath.getAbsolutePath() + \"/\");\n+            cmd << \"--exclude=\" + filePattern;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2291853c9ee7574532f861ebe862a4e05e207a20"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyNjQwMg==", "bodyText": "I remove the ls-files code and rewrote grep with git grep", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r365026402", "createdAt": "2020-01-10T00:36:08Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1060,12 +1086,33 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n       cmd << \"--include=\" + filePattern.getString();\n    }\n \n-   cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n-\n-\n    // Filepaths received from the client will be UTF-8 encoded;\n    // convert to system encoding here.\n    FilePath dirPath = module_context::resolveAliasedPath(grepOptions.directory);\n+   for (json::Value filePattern : grepOptions.excludeFilePatterns)\n+   {\n+      // to retrieve the git exclusions, we run a git command and parse the output\n+      if (filePattern.getString().compare(\"gitExclusions\") == 0)\n+      {\n+         std::string excludeGitExclusion;\n+         error = createGitExclusionString(dirPath, &excludeGitExclusion);\n+         if (error)\n+            return error;\n+\n+         std::istringstream stream(excludeGitExclusion);\n+         std::vector<std::string> results((std::istream_iterator<std::string>(stream)),\n+            std::istream_iterator<std::string>());\n+         for (std::string filePattern : results)\n+         {\n+            filePattern.insert(0, dirPath.getAbsolutePath() + \"/\");\n+            cmd << \"--exclude=\" + filePattern;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzMjM4Nw=="}, "originalCommit": {"oid": "2291853c9ee7574532f861ebe862a4e05e207a20"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njg0MzE3OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODowNDoxNFrOFcbzdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoxNjoyN1rOFchbwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1OTk4OA==", "bodyText": "Naming: retrieve usually implies \"fetch from somewhere\" -- would suggest getFileLine... or just fileLine...", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r365359988", "createdAt": "2020-01-10T18:04:14Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1257,6 +1344,26 @@ core::Error initialize()\n    return initBlock.execute();\n }\n \n+boost::regex retrieveFileLineNumberLineRegex(bool gitFlag)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "becfd6961fc5f344369c4320e560952ca4a82cae"}, "originalPosition": 394}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1MjIyNQ==", "bodyText": "Fixed in latest commit", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r365452225", "createdAt": "2020-01-10T22:16:27Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1257,6 +1344,26 @@ core::Error initialize()\n    return initBlock.execute();\n }\n \n+boost::regex retrieveFileLineNumberLineRegex(bool gitFlag)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1OTk4OA=="}, "originalCommit": {"oid": "becfd6961fc5f344369c4320e560952ca4a82cae"}, "originalPosition": 394}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njg1ODk5OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.ui.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODoxMDoxOVrOFcb86A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjo0NzozN1rOFdHJuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MjQwOA==", "bodyText": "Because we now require git to make this work, selecting this option is always going to result in an error if (a) git is not installed, or (b) the directory to search is not a git repo. How do you feel about hiding or disabling it up front in these cases? (Both are pretty easy to deduce, and (a) is part of SessionInfo so would be an easy change)", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r365362408", "createdAt": "2020-01-10T18:10:19Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.ui.xml", "diffHunk": "@@ -56,6 +55,20 @@\n             <span ui:field=\"spanPatternExample_\" class=\"{style.example}\">Example: *.R, *.r, *.csv. Separate multiple types with commas.</span>\n          </div>\n       </p>\n+\n+      <p><rw:FormLabel ui:field=\"labelExcludeFilePatterns_\" text=\"Exclude these files:\"/>\n+         <g:ListBox ui:field=\"listPresetExcludeFilePatterns_\"\n+                    styleName=\"{style.presetFilePatterns}\">\n+            <g:item value=\"\">None</g:item>\n+            <g:item value=\"gitExclusions\">Standard Git exclusions</g:item>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "becfd6961fc5f344369c4320e560952ca4a82cae"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQwNTk1MQ==", "bodyText": "I like the idea of enabling or disabling the option up front and locally implemented the check for if git is installed. Is it possible to determine if a directory is a git repo without a server call? (I think I figured this out TBD...)\nRight now I just have it implemented so the back end will alert the user when it starts processing the find request.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r365405951", "createdAt": "2020-01-10T19:56:51Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.ui.xml", "diffHunk": "@@ -56,6 +55,20 @@\n             <span ui:field=\"spanPatternExample_\" class=\"{style.example}\">Example: *.R, *.r, *.csv. Separate multiple types with commas.</span>\n          </div>\n       </p>\n+\n+      <p><rw:FormLabel ui:field=\"labelExcludeFilePatterns_\" text=\"Exclude these files:\"/>\n+         <g:ListBox ui:field=\"listPresetExcludeFilePatterns_\"\n+                    styleName=\"{style.presetFilePatterns}\">\n+            <g:item value=\"\">None</g:item>\n+            <g:item value=\"gitExclusions\">Standard Git exclusions</g:item>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MjQwOA=="}, "originalCommit": {"oid": "becfd6961fc5f344369c4320e560952ca4a82cae"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3MDIwMw==", "bodyText": "I added a isGitDirectory RPC to Files Server and call this when the directory changes to check if it's a git repo or not - then enable/disable the git option accordingly. This is ready for another review.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366070203", "createdAt": "2020-01-13T22:47:37Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.ui.xml", "diffHunk": "@@ -56,6 +55,20 @@\n             <span ui:field=\"spanPatternExample_\" class=\"{style.example}\">Example: *.R, *.r, *.csv. Separate multiple types with commas.</span>\n          </div>\n       </p>\n+\n+      <p><rw:FormLabel ui:field=\"labelExcludeFilePatterns_\" text=\"Exclude these files:\"/>\n+         <g:ListBox ui:field=\"listPresetExcludeFilePatterns_\"\n+                    styleName=\"{style.presetFilePatterns}\">\n+            <g:item value=\"\">None</g:item>\n+            <g:item value=\"gitExclusions\">Standard Git exclusions</g:item>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MjQwOA=="}, "originalCommit": {"oid": "becfd6961fc5f344369c4320e560952ca4a82cae"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTY2MTI2OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindOutputPresenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzoyMjoxOFrOFdH2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDoxNjo0NVrOFdIxSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MTU5NA==", "bodyText": "Nit: GWT has automatic unboxing so this could be simplified to dialog.setGitStatus(isGitDirectory)", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366081594", "createdAt": "2020-01-13T23:22:18Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindOutputPresenter.java", "diffHunk": "@@ -509,6 +525,33 @@ public void onResponseReceived(String handle)\n          }\n       });\n \n+      dialog.getDirectoryChooser().addValueChangeHandler(new ValueChangeHandler<String>() {\n+         @Override\n+         public void onValueChange(ValueChangeEvent<String> event)\n+         {\n+            fileServer_.isGitDirectory(dialog.getDirectory(),\n+                                   new ServerRequestCallback<Boolean>() {\n+               @Override\n+               public void onResponseReceived(Boolean isGitDirectory)\n+               {\n+                  if (isGitDirectory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395ca23a264350cade327bbb2f6896f33bab06c7"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5NjcxMg==", "bodyText": "Fixed", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366096712", "createdAt": "2020-01-14T00:16:45Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindOutputPresenter.java", "diffHunk": "@@ -509,6 +525,33 @@ public void onResponseReceived(String handle)\n          }\n       });\n \n+      dialog.getDirectoryChooser().addValueChangeHandler(new ValueChangeHandler<String>() {\n+         @Override\n+         public void onValueChange(ValueChangeEvent<String> event)\n+         {\n+            fileServer_.isGitDirectory(dialog.getDirectory(),\n+                                   new ServerRequestCallback<Boolean>() {\n+               @Override\n+               public void onResponseReceived(Boolean isGitDirectory)\n+               {\n+                  if (isGitDirectory)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MTU5NA=="}, "originalCommit": {"oid": "395ca23a264350cade327bbb2f6896f33bab06c7"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTY2NTg1OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindOutputPresenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzoyNDo0MlrOFdH5FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDoxNjozN1rOFdIxIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MjMyNA==", "bodyText": "Maybe we should only add this value change handler when session_.getSessionInfo().isVcsAvailable is true? (otherwise there's no point as we'd never show git options)", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366082324", "createdAt": "2020-01-13T23:24:42Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindOutputPresenter.java", "diffHunk": "@@ -509,6 +525,33 @@ public void onResponseReceived(String handle)\n          }\n       });\n \n+      dialog.getDirectoryChooser().addValueChangeHandler(new ValueChangeHandler<String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395ca23a264350cade327bbb2f6896f33bab06c7"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5NjY3NQ==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366096675", "createdAt": "2020-01-14T00:16:37Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindOutputPresenter.java", "diffHunk": "@@ -509,6 +525,33 @@ public void onResponseReceived(String handle)\n          }\n       });\n \n+      dialog.getDirectoryChooser().addValueChangeHandler(new ValueChangeHandler<String>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MjMyNA=="}, "originalCommit": {"oid": "395ca23a264350cade327bbb2f6896f33bab06c7"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY1OTQ2OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoxMzowMVrOFdkbdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTozNjowNFrOFdmjpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0OTg3Nw==", "bodyText": "Does gitFlag_ only mean find in files excluding standard git exclusions, or does it have other implications?", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366549877", "createdAt": "2020-01-14T20:13:01Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -195,13 +205,15 @@ class FindInFilesState : public boost::noncopyable\n                     const std::string& input,\n                     const std::string& path,\n                     bool asRegex,\n-                    bool ignoreCase)\n+                    bool ignoreCase,\n+                    bool gitFlag)\n    {\n       handle_ = handle;\n       input_ = input;\n       path_ = path;\n       regex_ = asRegex;\n       ignoreCase_ = ignoreCase;\n+      gitFlag_ = gitFlag;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4NDc0MA==", "bodyText": "Yes, which requires use of git's grep command and corresponding parameters", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366584740", "createdAt": "2020-01-14T21:36:04Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -195,13 +205,15 @@ class FindInFilesState : public boost::noncopyable\n                     const std::string& input,\n                     const std::string& path,\n                     bool asRegex,\n-                    bool ignoreCase)\n+                    bool ignoreCase,\n+                    bool gitFlag)\n    {\n       handle_ = handle;\n       input_ = input;\n       path_ = path;\n       regex_ = asRegex;\n       ignoreCase_ = ignoreCase;\n+      gitFlag_ = gitFlag;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0OTg3Nw=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY2MzE0OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoxNDozOFrOFdkd_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTozNzozMlrOFdmmKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MDUyNg==", "bodyText": "Why do things which can be paused need to be tracked via JSON and things which don't don't?", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366550526", "createdAt": "2020-01-14T20:14:38Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -327,9 +348,12 @@ class FindInFilesState : public boost::noncopyable\n    bool running_;\n    bool replace_;\n    bool preview_;\n+   bool gitFlag_;\n    std::string replacePattern_;\n    json::Array replaceMatchOns_;\n-   json::Array replaceMatchOffs_;\n+   json::Array replaceMatchOffs_; \n+   // this is not tracked via json because it exclusively applies to replaces (not previews)\n+   // which can not currently be paused", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4NTM4Nw==", "bodyText": "the json only gets read from the onResume function - the json is used to preserve the state during a pause.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366585387", "createdAt": "2020-01-14T21:37:32Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -327,9 +348,12 @@ class FindInFilesState : public boost::noncopyable\n    bool running_;\n    bool replace_;\n    bool preview_;\n+   bool gitFlag_;\n    std::string replacePattern_;\n    json::Array replaceMatchOns_;\n-   json::Array replaceMatchOffs_;\n+   json::Array replaceMatchOffs_; \n+   // this is not tracked via json because it exclusively applies to replaces (not previews)\n+   // which can not currently be paused", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MDUyNg=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY4MDkzOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyMTowOVrOFdko0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoxMzo0MFrOFdni6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MzI5Nw==", "bodyText": "I think there should be a check here to ensure that there are at least 3 match values. If there aren't this line will cause a crash.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366553297", "createdAt": "2020-01-14T20:21:09Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -535,7 +559,8 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n          nUtf8CharactersProcessed += charSize;\n \n          // update the match state\n-         if (match[1] == \"01\")\n+         if ((match[2] == \"1\" && findResults().gitFlag()) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMDkzNw==", "bodyText": "Good catch! This wasn't an issue with the previous regex, but could be with the new one added for git grep. Fixed.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366600937", "createdAt": "2020-01-14T22:13:40Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -535,7 +559,8 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n          nUtf8CharactersProcessed += charSize;\n \n          // update the match state\n-         if (match[1] == \"01\")\n+         if ((match[2] == \"1\" && findResults().gitFlag()) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MzI5Nw=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY4OTEzOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyNDoxMlrOFdkuBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDo1MTozNVrOFdqdxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDYyOA==", "bodyText": "Do we need to check that match.size() > 1 here, or are we guaranteed that there are at least two entries if regex_utils::match returns true?", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366554628", "createdAt": "2020-01-14T20:24:12Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -786,10 +811,16 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n          errorMessage.clear();\n          boost::smatch match;\n-         if (regex_utils::match(line, match, boost::regex(\"^((?:[a-zA-Z]:)?[^:]+):(\\\\d+):(.*)\")))\n+         if (regex_utils::match(\n+               line, match, getFileLineNumberLineRegex(findResults().gitFlag())))\n          {\n             std::string file = module_context::createAliasedPath(\n                   FilePath(string_utils::systemToUtf8(match[1])));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MDYzMw==", "bodyText": "There are three capture groups in both regexes so there will always be three entries.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366590633", "createdAt": "2020-01-14T21:49:51Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -786,10 +811,16 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n          errorMessage.clear();\n          boost::smatch match;\n-         if (regex_utils::match(line, match, boost::regex(\"^((?:[a-zA-Z]:)?[^:]+):(\\\\d+):(.*)\")))\n+         if (regex_utils::match(\n+               line, match, getFileLineNumberLineRegex(findResults().gitFlag())))\n          {\n             std::string file = module_context::createAliasedPath(\n                   FilePath(string_utils::systemToUtf8(match[1])));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDYyOA=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzQ3NQ==", "bodyText": "The paranoid part of me still thinks a check is a good idea. What if boost lies to us and then the whole IDE crashes?", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366643475", "createdAt": "2020-01-15T00:30:02Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -786,10 +811,16 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n          errorMessage.clear();\n          boost::smatch match;\n-         if (regex_utils::match(line, match, boost::regex(\"^((?:[a-zA-Z]:)?[^:]+):(\\\\d+):(.*)\")))\n+         if (regex_utils::match(\n+               line, match, getFileLineNumberLineRegex(findResults().gitFlag())))\n          {\n             std::string file = module_context::createAliasedPath(\n                   FilePath(string_utils::systemToUtf8(match[1])));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDYyOA=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0ODc3Mg==", "bodyText": "Ok - added \ud83d\ude38", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366648772", "createdAt": "2020-01-15T00:51:35Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -786,10 +811,16 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n          errorMessage.clear();\n          boost::smatch match;\n-         if (regex_utils::match(line, match, boost::regex(\"^((?:[a-zA-Z]:)?[^:]+):(\\\\d+):(.*)\")))\n+         if (regex_utils::match(\n+               line, match, getFileLineNumberLineRegex(findResults().gitFlag())))\n          {\n             std::string file = module_context::createAliasedPath(\n                   FilePath(string_utils::systemToUtf8(match[1])));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDYyOA=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY5MDcwOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyNDo1NFrOFdkvGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDoyODozNlrOFdqHbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDkwNA==", "bodyText": "What is the purpose of this block?", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366554904", "createdAt": "2020-01-14T20:24:54Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -786,10 +811,16 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n          errorMessage.clear();\n          boost::smatch match;\n-         if (regex_utils::match(line, match, boost::regex(\"^((?:[a-zA-Z]:)?[^:]+):(\\\\d+):(.*)\")))\n+         if (regex_utils::match(\n+               line, match, getFileLineNumberLineRegex(findResults().gitFlag())))\n          {\n             std::string file = module_context::createAliasedPath(\n                   FilePath(string_utils::systemToUtf8(match[1])));\n+            if (findResults().gitFlag())\n+            {\n+               file.insert(0, \"/\");\n+               file.insert(0, findResults().path());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MjMyNA==", "bodyText": "Git grep returns the directory path in terms of the repository, but to read the file we need to know the file's location in terms of the computer - this is stored in where the original search was done. I added a comment explaining this", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366592324", "createdAt": "2020-01-14T21:53:38Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -786,10 +811,16 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n          errorMessage.clear();\n          boost::smatch match;\n-         if (regex_utils::match(line, match, boost::regex(\"^((?:[a-zA-Z]:)?[^:]+):(\\\\d+):(.*)\")))\n+         if (regex_utils::match(\n+               line, match, getFileLineNumberLineRegex(findResults().gitFlag())))\n          {\n             std::string file = module_context::createAliasedPath(\n                   FilePath(string_utils::systemToUtf8(match[1])));\n+            if (findResults().gitFlag())\n+            {\n+               file.insert(0, \"/\");\n+               file.insert(0, findResults().path());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDkwNA=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzA1Mw==", "bodyText": "Ah, makes sense - thanks!", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366643053", "createdAt": "2020-01-15T00:28:36Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -786,10 +811,16 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n          errorMessage.clear();\n          boost::smatch match;\n-         if (regex_utils::match(line, match, boost::regex(\"^((?:[a-zA-Z]:)?[^:]+):(\\\\d+):(.*)\")))\n+         if (regex_utils::match(\n+               line, match, getFileLineNumberLineRegex(findResults().gitFlag())))\n          {\n             std::string file = module_context::createAliasedPath(\n                   FilePath(string_utils::systemToUtf8(match[1])));\n+            if (findResults().gitFlag())\n+            {\n+               file.insert(0, \"/\");\n+               file.insert(0, findResults().path());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDkwNA=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDcyMjE4OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDozNzoyMVrOFdlCmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzowNTo0OVrOFdosqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1OTg5Ng==", "bodyText": "I know there are some shared options between  git and regular grep, but I think this might be cleaner if there was a section that set up cmd completely for git grep and a separate section that set up cmd completely for regular grep. You could put the shared options into named variables so that if they need to be changed later you still only have to update them in one place.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366559896", "createdAt": "2020-01-14T20:37:21Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1055,18 +1130,25 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n    if (!grepOptions.asRegex)\n       cmd << \"-F\";\n \n-   for (json::Value filePattern : grepOptions.filePatterns)\n+   if (!gitFlag)\n    {\n-      cmd << \"--include=\" + filePattern.getString();\n+      for (json::Value filePattern : grepOptions.filePatterns)\n+      {\n+         cmd << \"--include=\" + filePattern.getString();\n+      }\n+      for (std::string arg : excludeArgs)\n+         cmd << arg;\n+      cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n+      cmd << string_utils::utf8ToSystem(dirPath.getAbsolutePath());\n+   }\n+   else\n+   {\n+      for (json::Value filePattern : grepOptions.filePatterns)\n+      {\n+         cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n+         cmd << filePattern.getString();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxOTgxNg==", "bodyText": "Done! I left the constructor as is since we need to initialize it to something and in most cases I don't think we'll be using git grep.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366619816", "createdAt": "2020-01-14T23:05:49Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1055,18 +1130,25 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n    if (!grepOptions.asRegex)\n       cmd << \"-F\";\n \n-   for (json::Value filePattern : grepOptions.filePatterns)\n+   if (!gitFlag)\n    {\n-      cmd << \"--include=\" + filePattern.getString();\n+      for (json::Value filePattern : grepOptions.filePatterns)\n+      {\n+         cmd << \"--include=\" + filePattern.getString();\n+      }\n+      for (std::string arg : excludeArgs)\n+         cmd << arg;\n+      cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n+      cmd << string_utils::utf8ToSystem(dirPath.getAbsolutePath());\n+   }\n+   else\n+   {\n+      for (json::Value filePattern : grepOptions.filePatterns)\n+      {\n+         cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n+         cmd << filePattern.getString();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1OTg5Ng=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc1NDM1OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo0OToxMFrOFdlWgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDoyNTozN1rOFemecA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg==", "bodyText": "Would it make sense for gitFlag to belong to the GrepOptions struct?", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366564992", "createdAt": "2020-01-14T20:49:10Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1081,7 +1163,8 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n                              grepOptions.searchPattern,\n                              grepOptions.directory,\n                              grepOptions.asRegex,\n-                             grepOptions.ignoreCase);\n+                             grepOptions.ignoreCase,\n+                             gitFlag);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NzA1MA==", "bodyText": "The issue I see with this is that all of the GrepOptions are set when we received the initial RPC - we won't know the value of gitFlag until we parse these options from grepOptions.filePatterns. For clarity's sake I don't like the idea of having all of the data set on initialization except for one variable.\nIf we move that parsing to happen earlier, we'd also need to store the other filePattern information in the struct which I don't really think is necessary.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366597050", "createdAt": "2020-01-14T22:04:38Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1081,7 +1163,8 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n                              grepOptions.searchPattern,\n                              grepOptions.directory,\n                              grepOptions.asRegex,\n-                             grepOptions.ignoreCase);\n+                             grepOptions.ignoreCase,\n+                             gitFlag);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NDE2NA==", "bodyText": "Which other filePattern information?", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366644164", "createdAt": "2020-01-15T00:32:40Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1081,7 +1163,8 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n                              grepOptions.searchPattern,\n                              grepOptions.directory,\n                              grepOptions.asRegex,\n-                             grepOptions.ignoreCase);\n+                             grepOptions.ignoreCase,\n+                             gitFlag);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NzExOQ==", "bodyText": "excludeFilePatterns stores other data that gets added to the --exclude argument in the grep command, which is currently handled in processExcludeFilePatterns. We could pretty easily just call this function before initializing GrepOptions since it needs to be called at some point, but it seems a little weird because it is building actual arguments for the command, not just setting up general arguments.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366647119", "createdAt": "2020-01-15T00:44:45Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1081,7 +1163,8 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n                              grepOptions.searchPattern,\n                              grepOptions.directory,\n                              grepOptions.asRegex,\n-                             grepOptions.ignoreCase);\n+                             grepOptions.ignoreCase,\n+                             gitFlag);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU5OTgyNA==", "bodyText": "Looking at processExcludeFilePatterns, I do think those would make sense to be part of GrepOptions since all of those fields both change the grep options that will be used and impact nothing else, unless I'm misunderstanding and there isn't a unique GrepOptions per search (and optionally replace) request.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r367599824", "createdAt": "2020-01-16T19:13:09Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1081,7 +1163,8 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n                              grepOptions.searchPattern,\n                              grepOptions.directory,\n                              grepOptions.asRegex,\n-                             grepOptions.ignoreCase);\n+                             grepOptions.ignoreCase,\n+                             gitFlag);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzMTk4NA==", "bodyText": "Done \ud83c\udf89", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r367631984", "createdAt": "2020-01-16T20:25:37Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1081,7 +1163,8 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n                              grepOptions.searchPattern,\n                              grepOptions.directory,\n                              grepOptions.asRegex,\n-                             grepOptions.ignoreCase);\n+                             grepOptions.ignoreCase,\n+                             gitFlag);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc1ODQwOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo1MDo1MlrOFdlZDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDo1MTo1MFrOFdqd8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTY0NQ==", "bodyText": "Is there ever a case where we construct a LocalProgress with a different update frequency? If not, what do you think about making kUpdatePercent a static const member of LocalProgress?", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366565645", "createdAt": "2020-01-14T20:50:52Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1181,16 +1267,17 @@ core::Error completeReplace(const json::JsonRpcRequest& request,\n                                   &ignoreCase,\n                                   &directory,\n                                   &filePatterns,\n+                                  &excludeFilePatterns,\n                                   &originalFindCount,\n-                                  &replacePattern,\n-                                  &useGitIgnore);\n+                                  &replacePattern);\n    if (error)\n       return error;\n \n    static const int kUpdatePercent = 5;\n    LocalProgress* pProgress = new LocalProgress(originalFindCount, kUpdatePercent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMTk2Ng==", "bodyText": "There aren't any cases where we use a different frequency but there's no reason this has to be 5 which is why I didn't include it in the class. I don't want there to be any future confusion if that changes and we want to vary it for some reason or if someone wants to use this as a code reference.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366601966", "createdAt": "2020-01-14T22:16:24Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1181,16 +1267,17 @@ core::Error completeReplace(const json::JsonRpcRequest& request,\n                                   &ignoreCase,\n                                   &directory,\n                                   &filePatterns,\n+                                  &excludeFilePatterns,\n                                   &originalFindCount,\n-                                  &replacePattern,\n-                                  &useGitIgnore);\n+                                  &replacePattern);\n    if (error)\n       return error;\n \n    static const int kUpdatePercent = 5;\n    LocalProgress* pProgress = new LocalProgress(originalFindCount, kUpdatePercent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTY0NQ=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NDYyMw==", "bodyText": "Sure. I think either way a comment would clear it up, since 5 was chosen somewhat arbitrarily (presumably because it seemed to have the best balance of feeling responsive but not being overly frequent?). If you did any testing that led to the choice of 5%, I think it would be good to note it in the code! :)", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366644623", "createdAt": "2020-01-15T00:34:34Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1181,16 +1267,17 @@ core::Error completeReplace(const json::JsonRpcRequest& request,\n                                   &ignoreCase,\n                                   &directory,\n                                   &filePatterns,\n+                                  &excludeFilePatterns,\n                                   &originalFindCount,\n-                                  &replacePattern,\n-                                  &useGitIgnore);\n+                                  &replacePattern);\n    if (error)\n       return error;\n \n    static const int kUpdatePercent = 5;\n    LocalProgress* pProgress = new LocalProgress(originalFindCount, kUpdatePercent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTY0NQ=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0ODgxOQ==", "bodyText": "Ok added a comment", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366648819", "createdAt": "2020-01-15T00:51:50Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1181,16 +1267,17 @@ core::Error completeReplace(const json::JsonRpcRequest& request,\n                                   &ignoreCase,\n                                   &directory,\n                                   &filePatterns,\n+                                  &excludeFilePatterns,\n                                   &originalFindCount,\n-                                  &replacePattern,\n-                                  &useGitIgnore);\n+                                  &replacePattern);\n    if (error)\n       return error;\n \n    static const int kUpdatePercent = 5;\n    LocalProgress* pProgress = new LocalProgress(originalFindCount, kUpdatePercent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTY0NQ=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 381}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDgyMjMwOnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToxNTo0M1rOFdmBDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoxMTozNVrOFdnfnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3NTg4Nw==", "bodyText": "Nit: could you rename this includeFilePatterns to mirror excludeFilePatterns, as well as other occurrences? I think that would make it a bit clearer when just glancing over the code.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366575887", "createdAt": "2020-01-14T21:15:43Z", "author": {"login": "MariaSemple"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "diffHunk": "@@ -58,15 +62,15 @@ public static native State createState(String query,\n                                              String path,\n                                              boolean regex,\n                                              boolean caseSensitive,\n-                                             boolean gitIgnore,\n-                                             JsArrayString filePatterns) /*-{\n+                                             JsArrayString filePatterns,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMDA5Mg==", "bodyText": "Done", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366600092", "createdAt": "2020-01-14T22:11:35Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "diffHunk": "@@ -58,15 +62,15 @@ public static native State createState(String query,\n                                              String path,\n                                              boolean regex,\n                                              boolean caseSensitive,\n-                                             boolean gitIgnore,\n-                                             JsArrayString filePatterns) /*-{\n+                                             JsArrayString filePatterns,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3NTg4Nw=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDg1NzI3OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToyODoyMFrOFdmWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjowNzozNFrOFdnYwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MTM3MQ==", "bodyText": "We discussed on slack renaming this to getGrepOutputRegex.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366581371", "createdAt": "2020-01-14T21:28:20Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.hpp", "diffHunk": "@@ -31,6 +31,10 @@ core::json::Object findInFilesStateAsJson();\n \n core::Error initialize();\n \n+boost::regex getFileLineNumberLineRegex(bool gitFlag);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5ODMzNw==", "bodyText": "Fixed \ud83d\udc4d", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366598337", "createdAt": "2020-01-14T22:07:34Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.hpp", "diffHunk": "@@ -31,6 +31,10 @@ core::json::Object findInFilesStateAsJson();\n \n core::Error initialize();\n \n+boost::regex getFileLineNumberLineRegex(bool gitFlag);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MTM3MQ=="}, "originalCommit": {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTU1NzIwOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionFind.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDozMTowNlrOFemnhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDozNzo1NFrOFem0Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzNDMwOQ==", "bodyText": "Nit: no need to return a const bool since you're returning by-value rather than by-reference.", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r367634309", "createdAt": "2020-01-16T20:31:06Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -987,26 +987,93 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n } // namespace\n \n-struct GrepOptions\n+class GrepOptions : public boost::noncopyable\n {\n+public:\n+\n    GrepOptions(std::string search, std::string directory,\n       json::Array includeFilePatterns, json::Array excludeFilePatterns,\n       bool asRegex, bool ignoreCase) :\n-      asRegex(asRegex),\n-      ignoreCase(ignoreCase),\n-      searchPattern(search),\n-      directory(directory),\n-      includeFilePatterns(includeFilePatterns),\n-      excludeFilePatterns(excludeFilePatterns)\n-   {}\n+      asRegex_(asRegex),\n+      ignoreCase_(ignoreCase),\n+      searchPattern_(search),\n+      directory_(directory),\n+      includeFilePatterns_(includeFilePatterns),\n+      excludeFilePatterns_(excludeFilePatterns)\n+   {\n+      processExcludeFilePatterns();\n+   }\n+\n+   const bool asRegex() const\n+   {\n+      return asRegex_;\n+   }\n \n-   bool asRegex;\n-   bool ignoreCase;\n+   const bool ignoreCase() const\n+   {\n+      return ignoreCase_;\n+   }\n+\n+   const std::string& searchPattern() const\n+   {\n+      return searchPattern_;\n+   }\n+\n+   const std::string& directory() const\n+   {\n+      return directory_;\n+   }\n+\n+   const json::Array& includeFilePatterns() const\n+   {\n+      return includeFilePatterns_;\n+   }\n+\n+   const json::Array& excludeFilePatterns() const\n+   {\n+      return excludeFilePatterns_;\n+   }\n+\n+   const bool gitFlag() const", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0beef751656ddf7e66329446c1e499f2c8ef8090"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzNzU1MA==", "bodyText": "fixed", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r367637550", "createdAt": "2020-01-16T20:37:54Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -987,26 +987,93 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n } // namespace\n \n-struct GrepOptions\n+class GrepOptions : public boost::noncopyable\n {\n+public:\n+\n    GrepOptions(std::string search, std::string directory,\n       json::Array includeFilePatterns, json::Array excludeFilePatterns,\n       bool asRegex, bool ignoreCase) :\n-      asRegex(asRegex),\n-      ignoreCase(ignoreCase),\n-      searchPattern(search),\n-      directory(directory),\n-      includeFilePatterns(includeFilePatterns),\n-      excludeFilePatterns(excludeFilePatterns)\n-   {}\n+      asRegex_(asRegex),\n+      ignoreCase_(ignoreCase),\n+      searchPattern_(search),\n+      directory_(directory),\n+      includeFilePatterns_(includeFilePatterns),\n+      excludeFilePatterns_(excludeFilePatterns)\n+   {\n+      processExcludeFilePatterns();\n+   }\n+\n+   const bool asRegex() const\n+   {\n+      return asRegex_;\n+   }\n \n-   bool asRegex;\n-   bool ignoreCase;\n+   const bool ignoreCase() const\n+   {\n+      return ignoreCase_;\n+   }\n+\n+   const std::string& searchPattern() const\n+   {\n+      return searchPattern_;\n+   }\n+\n+   const std::string& directory() const\n+   {\n+      return directory_;\n+   }\n+\n+   const json::Array& includeFilePatterns() const\n+   {\n+      return includeFilePatterns_;\n+   }\n+\n+   const json::Array& excludeFilePatterns() const\n+   {\n+      return excludeFilePatterns_;\n+   }\n+\n+   const bool gitFlag() const", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzNDMwOQ=="}, "originalCommit": {"oid": "0beef751656ddf7e66329446c1e499f2c8ef8090"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4082, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}