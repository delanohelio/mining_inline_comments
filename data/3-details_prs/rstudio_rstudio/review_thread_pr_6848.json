{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MjE0MzY2", "number": 6848, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjozNDoyNFrOD72SrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoyOTo0N1rOD73BSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDgyMDkzOnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/core/client/SafeHtmlUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjozNDoyNFrOGUbT3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo1ODozOVrOGUd8jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3MjE1Ng==", "bodyText": "Putting the highlights into a separate span (for visual highlighting) can cause a slight pause in awkward locations during screen-reader output, e.g. type \"Mar\" then when reading \"markdown\" it will say \"mar...kdown\". To fix we could consider constructing a separate aria-label of the raw text, perhaps only if screen reader support is enabled. That is probably overkill probably best to wait until we've got actual feedback saying it's a real issue.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424072156", "createdAt": "2020-05-12T22:34:24Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/core/client/SafeHtmlUtil.java", "diffHunk": "@@ -165,5 +168,120 @@ public static void highlightSearchMatch(SafeHtmlBuilder sb, String haystack,\n       if (!hasMatch)\n          sb.appendEscaped(haystack);\n    }\n+\n+   /**\n+    * Appends text to a SafeHtmlBuilder with multiple search matches highlighted.\n+    * \n+    * @param sb The SafeHtmlBuilder to append the search match to\n+    * @param haystack The text to append. \n+    * @param needles The strings to search for and highlight.\n+    * @param matchClass The CSS class to assign to matches.\n+    */\n+   public static void highlightSearchMatch(SafeHtmlBuilder sb, String haystack, \n+                                           String[] needles, String matchClass)\n+   {\n+      // Do nothing if we weren't given a string\n+      if (StringUtil.isNullOrEmpty(haystack))\n+         return;\n+      \n+      // Inner class representing a search match found in the haystack\n+      class SearchMatch\n+      {\n+         public SearchMatch(int indexIn, int lengthIn)\n+         {\n+            index = indexIn;\n+            length = lengthIn;\n+         }\n+         public Integer index;\n+         public Integer length;\n+      };\n+      \n+      // Store matches in a tree set ordered by the index at which the match was\n+      // found.\n+      Set<SearchMatch> matches = new TreeSet<SearchMatch>(\n+            (SearchMatch o1, SearchMatch o2) -> {\n+                  return o1.index.compareTo(o2.index);\n+            });\n+\n+      // Find all the matches and add them to the result set.\n+      for (int i = 0; i < needles.length; i++)\n+      {\n+         int idx = haystack.toLowerCase().indexOf(needles[i]);\n+         if (idx >= 0)\n+         {\n+            int endIdx = idx + needles[i].length();\n+\n+            // Check the existing set of matches; if this overlaps with an\n+            // existing match we don't want to create overlapping match results.\n+            boolean overlaps = false;\n+            for (SearchMatch match: matches)\n+            {\n+               if (match.index >= endIdx)\n+               {\n+                  // Performance optimization: neither this match nor any\n+                  // following can overlap since it starts after this match ends\n+                  // (and matches are sorted by start index.)\n+                  break;\n+               }\n+\n+               // If this match overlaps an existing match, merge it into that\n+               // match instead of creating a new match.\n+               int overlap = Math.min(endIdx, match.index + match.length) -\n+                             Math.max(idx, match.index);\n+               if (overlap > 0)\n+               {\n+                  // The match starts at the earlier of the indices\n+                  match.index = Math.min(match.index, idx);\n+                  \n+                  // The match's new length is the distance to its new endpoint\n+                  // (the greater of the two matches we're merging)\n+                  match.length = Math.max(endIdx,  match.index + match.length) - \n+                        match.index;\n+                        \n+                  overlaps = true;\n+                  break;\n+               }\n+            }\n+\n+            // If this match does not overlap any existing matches, add it as a\n+            // new match.\n+            if (!overlaps)\n+            {\n+               matches.add(new SearchMatch(idx, needles[i].length()));\n+            }\n+         }\n+      }\n+      \n+      // Build the HTML from the input string and the found matches.\n+      if (matches.size() > 0)\n+      {\n+         int idx = 0;\n+         for (SearchMatch match: matches)\n+         {\n+            // Emit all the text from the last index to the beginning of this\n+            // match. \n+            sb.appendEscaped(haystack.substring(idx, match.index));\n+            \n+            // Emit the match itself.\n+            idx = match.index;\n+            sb.appendHtmlConstant(\n+                  \"<span class=\\\"\" + matchClass + \"\\\">\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTA3Mg==", "bodyText": "How would you feel about just skipping the highlighting if we have screen reader support on? (Feels like that'd be a 1 line change)", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424095072", "createdAt": "2020-05-12T23:43:07Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/core/client/SafeHtmlUtil.java", "diffHunk": "@@ -165,5 +168,120 @@ public static void highlightSearchMatch(SafeHtmlBuilder sb, String haystack,\n       if (!hasMatch)\n          sb.appendEscaped(haystack);\n    }\n+\n+   /**\n+    * Appends text to a SafeHtmlBuilder with multiple search matches highlighted.\n+    * \n+    * @param sb The SafeHtmlBuilder to append the search match to\n+    * @param haystack The text to append. \n+    * @param needles The strings to search for and highlight.\n+    * @param matchClass The CSS class to assign to matches.\n+    */\n+   public static void highlightSearchMatch(SafeHtmlBuilder sb, String haystack, \n+                                           String[] needles, String matchClass)\n+   {\n+      // Do nothing if we weren't given a string\n+      if (StringUtil.isNullOrEmpty(haystack))\n+         return;\n+      \n+      // Inner class representing a search match found in the haystack\n+      class SearchMatch\n+      {\n+         public SearchMatch(int indexIn, int lengthIn)\n+         {\n+            index = indexIn;\n+            length = lengthIn;\n+         }\n+         public Integer index;\n+         public Integer length;\n+      };\n+      \n+      // Store matches in a tree set ordered by the index at which the match was\n+      // found.\n+      Set<SearchMatch> matches = new TreeSet<SearchMatch>(\n+            (SearchMatch o1, SearchMatch o2) -> {\n+                  return o1.index.compareTo(o2.index);\n+            });\n+\n+      // Find all the matches and add them to the result set.\n+      for (int i = 0; i < needles.length; i++)\n+      {\n+         int idx = haystack.toLowerCase().indexOf(needles[i]);\n+         if (idx >= 0)\n+         {\n+            int endIdx = idx + needles[i].length();\n+\n+            // Check the existing set of matches; if this overlaps with an\n+            // existing match we don't want to create overlapping match results.\n+            boolean overlaps = false;\n+            for (SearchMatch match: matches)\n+            {\n+               if (match.index >= endIdx)\n+               {\n+                  // Performance optimization: neither this match nor any\n+                  // following can overlap since it starts after this match ends\n+                  // (and matches are sorted by start index.)\n+                  break;\n+               }\n+\n+               // If this match overlaps an existing match, merge it into that\n+               // match instead of creating a new match.\n+               int overlap = Math.min(endIdx, match.index + match.length) -\n+                             Math.max(idx, match.index);\n+               if (overlap > 0)\n+               {\n+                  // The match starts at the earlier of the indices\n+                  match.index = Math.min(match.index, idx);\n+                  \n+                  // The match's new length is the distance to its new endpoint\n+                  // (the greater of the two matches we're merging)\n+                  match.length = Math.max(endIdx,  match.index + match.length) - \n+                        match.index;\n+                        \n+                  overlaps = true;\n+                  break;\n+               }\n+            }\n+\n+            // If this match does not overlap any existing matches, add it as a\n+            // new match.\n+            if (!overlaps)\n+            {\n+               matches.add(new SearchMatch(idx, needles[i].length()));\n+            }\n+         }\n+      }\n+      \n+      // Build the HTML from the input string and the found matches.\n+      if (matches.size() > 0)\n+      {\n+         int idx = 0;\n+         for (SearchMatch match: matches)\n+         {\n+            // Emit all the text from the last index to the beginning of this\n+            // match. \n+            sb.appendEscaped(haystack.substring(idx, match.index));\n+            \n+            // Emit the match itself.\n+            idx = match.index;\n+            sb.appendHtmlConstant(\n+                  \"<span class=\\\"\" + matchClass + \"\\\">\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3MjE1Ng=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExNTM0Mw==", "bodyText": "I think we could keep that in our back pocket and would be a good solution if it turns out to be an actual issue.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424115343", "createdAt": "2020-05-13T00:58:39Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/core/client/SafeHtmlUtil.java", "diffHunk": "@@ -165,5 +168,120 @@ public static void highlightSearchMatch(SafeHtmlBuilder sb, String haystack,\n       if (!hasMatch)\n          sb.appendEscaped(haystack);\n    }\n+\n+   /**\n+    * Appends text to a SafeHtmlBuilder with multiple search matches highlighted.\n+    * \n+    * @param sb The SafeHtmlBuilder to append the search match to\n+    * @param haystack The text to append. \n+    * @param needles The strings to search for and highlight.\n+    * @param matchClass The CSS class to assign to matches.\n+    */\n+   public static void highlightSearchMatch(SafeHtmlBuilder sb, String haystack, \n+                                           String[] needles, String matchClass)\n+   {\n+      // Do nothing if we weren't given a string\n+      if (StringUtil.isNullOrEmpty(haystack))\n+         return;\n+      \n+      // Inner class representing a search match found in the haystack\n+      class SearchMatch\n+      {\n+         public SearchMatch(int indexIn, int lengthIn)\n+         {\n+            index = indexIn;\n+            length = lengthIn;\n+         }\n+         public Integer index;\n+         public Integer length;\n+      };\n+      \n+      // Store matches in a tree set ordered by the index at which the match was\n+      // found.\n+      Set<SearchMatch> matches = new TreeSet<SearchMatch>(\n+            (SearchMatch o1, SearchMatch o2) -> {\n+                  return o1.index.compareTo(o2.index);\n+            });\n+\n+      // Find all the matches and add them to the result set.\n+      for (int i = 0; i < needles.length; i++)\n+      {\n+         int idx = haystack.toLowerCase().indexOf(needles[i]);\n+         if (idx >= 0)\n+         {\n+            int endIdx = idx + needles[i].length();\n+\n+            // Check the existing set of matches; if this overlaps with an\n+            // existing match we don't want to create overlapping match results.\n+            boolean overlaps = false;\n+            for (SearchMatch match: matches)\n+            {\n+               if (match.index >= endIdx)\n+               {\n+                  // Performance optimization: neither this match nor any\n+                  // following can overlap since it starts after this match ends\n+                  // (and matches are sorted by start index.)\n+                  break;\n+               }\n+\n+               // If this match overlaps an existing match, merge it into that\n+               // match instead of creating a new match.\n+               int overlap = Math.min(endIdx, match.index + match.length) -\n+                             Math.max(idx, match.index);\n+               if (overlap > 0)\n+               {\n+                  // The match starts at the earlier of the indices\n+                  match.index = Math.min(match.index, idx);\n+                  \n+                  // The match's new length is the distance to its new endpoint\n+                  // (the greater of the two matches we're merging)\n+                  match.length = Math.max(endIdx,  match.index + match.length) - \n+                        match.index;\n+                        \n+                  overlaps = true;\n+                  break;\n+               }\n+            }\n+\n+            // If this match does not overlap any existing matches, add it as a\n+            // new match.\n+            if (!overlaps)\n+            {\n+               matches.add(new SearchMatch(idx, needles[i].length()));\n+            }\n+         }\n+      }\n+      \n+      // Build the HTML from the input string and the found matches.\n+      if (matches.size() > 0)\n+      {\n+         int idx = 0;\n+         for (SearchMatch match: matches)\n+         {\n+            // Emit all the text from the last index to the beginning of this\n+            // match. \n+            sb.appendEscaped(haystack.substring(idx, match.index));\n+            \n+            // Emit the match itself.\n+            idx = match.index;\n+            sb.appendHtmlConstant(\n+                  \"<span class=\\\"\" + matchClass + \"\\\">\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3MjE1Ng=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg1MDkzOnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/core/client/a11y/A11y.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo0Nzo0MlrOGUbmeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1Nzo0M1rOGUc-Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NjkyMA==", "bodyText": "I don't think you are using setARIALabel that you added?", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424076920", "createdAt": "2020-05-12T22:47:42Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/core/client/a11y/A11y.java", "diffHunk": "@@ -146,4 +146,24 @@ public static void setInert(Element el, boolean inert)\n          el.removeAttribute(\"inert\");\n       }\n    }\n+   \n+   public static void setARIALabel(Element el, String text)\n+   {\n+      el.setAttribute(\"aria-label\", text);\n+   }\n+   \n+   public static void setARIALabel(Widget widget, String text)\n+   {\n+      setARIALabel(widget.getElement(), text);\n+   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5OTQxMQ==", "bodyText": "You're right, of course. I'll remove it.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424099411", "createdAt": "2020-05-12T23:57:43Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/core/client/a11y/A11y.java", "diffHunk": "@@ -146,4 +146,24 @@ public static void setInert(Element el, boolean inert)\n          el.removeAttribute(\"inert\");\n       }\n    }\n+   \n+   public static void setARIALabel(Element el, String text)\n+   {\n+      el.setAttribute(\"aria-label\", text);\n+   }\n+   \n+   public static void setARIALabel(Widget widget, String text)\n+   {\n+      setARIALabel(widget.getElement(), text);\n+   }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NjkyMA=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg2NDM3OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/application/ui/AppCommandPaletteEntry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1MzozMFrOGUbuvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo1Nzo0N1rOGUd7wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTAzNw==", "bodyText": "I'm not convinced that showing the context (Workbench, etc.) is particularly meaningful to most end-users and adds a lot of visual \"stuff\" that in most cases you'll train your brain to ignore?\nPlus when using a screen reader it causes that context to be read at the start of every command as you scroll through the list, significantly slowing down the time and cognitive load.\nAt the very least, maybe an option to turn it off both visually and audibly?\nOr maybe it has more value than I realize.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424079037", "createdAt": "2020-05-12T22:53:30Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/AppCommandPaletteEntry.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * AppCommandPaletteEntry.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.List;\n+\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeySequence;\n+\n+/**\n+ * AppCommandPaletteEntry is a widget that represents an AppCommand in RStudio's\n+ * command palette.\n+ */\n+public class AppCommandPaletteEntry extends CommandPaletteEntry\n+{\n+   public AppCommandPaletteEntry(AppCommand command, List<KeySequence> keys)\n+   {\n+      super(keys);\n+      label_ = command.getLabel();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = command.getButtonLabel();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = command.getDesc();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = command.getMenuLabel(false);\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = \"\";\n+      command_ = command;\n+      initialize();\n+   }\n+   \n+   public String getLabel()\n+   {\n+      return label_;\n+   }\n+   \n+   public void invoke()\n+   {\n+      command_.execute();\n+   }\n+   \n+   public String getId()\n+   {\n+      return command_.getId();\n+   }\n+\n+   @Override\n+   public String getContext()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NjczNg==", "bodyText": "It is pretty much essential. For example, would you know what this command does without context?\n\nOr could you pick between these two without context?\n\nI can add an option to turn it off but I think it needs to be on by default.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424096736", "createdAt": "2020-05-12T23:48:17Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/AppCommandPaletteEntry.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * AppCommandPaletteEntry.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.List;\n+\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeySequence;\n+\n+/**\n+ * AppCommandPaletteEntry is a widget that represents an AppCommand in RStudio's\n+ * command palette.\n+ */\n+public class AppCommandPaletteEntry extends CommandPaletteEntry\n+{\n+   public AppCommandPaletteEntry(AppCommand command, List<KeySequence> keys)\n+   {\n+      super(keys);\n+      label_ = command.getLabel();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = command.getButtonLabel();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = command.getDesc();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = command.getMenuLabel(false);\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = \"\";\n+      command_ = command;\n+      initialize();\n+   }\n+   \n+   public String getLabel()\n+   {\n+      return label_;\n+   }\n+   \n+   public void invoke()\n+   {\n+      command_.execute();\n+   }\n+   \n+   public String getId()\n+   {\n+      return command_.getId();\n+   }\n+\n+   @Override\n+   public String getContext()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTAzNw=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExNTEzOA==", "bodyText": "No, point made, I think it's fine as-is.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424115138", "createdAt": "2020-05-13T00:57:47Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/AppCommandPaletteEntry.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * AppCommandPaletteEntry.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.List;\n+\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeySequence;\n+\n+/**\n+ * AppCommandPaletteEntry is a widget that represents an AppCommand in RStudio's\n+ * command palette.\n+ */\n+public class AppCommandPaletteEntry extends CommandPaletteEntry\n+{\n+   public AppCommandPaletteEntry(AppCommand command, List<KeySequence> keys)\n+   {\n+      super(keys);\n+      label_ = command.getLabel();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = command.getButtonLabel();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = command.getDesc();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = command.getMenuLabel(false);\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = \"\";\n+      command_ = command;\n+      initialize();\n+   }\n+   \n+   public String getLabel()\n+   {\n+      return label_;\n+   }\n+   \n+   public void invoke()\n+   {\n+      command_.execute();\n+   }\n+   \n+   public String getId()\n+   {\n+      return command_.getId();\n+   }\n+\n+   @Override\n+   public String getContext()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTAzNw=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkxMzk1OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxNjoxM1rOGUcMqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoyMTozN1rOGUdWzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NjY5Nw==", "bodyText": "Be nice if you can use AriaLiveStatusWidget here instead of rolling your own; not essential (and might be more trouble than it's worth) but makes these easier to track down later if I try to do a desktop workaround for Qt's lack of live region support.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424086697", "createdAt": "2020-05-12T23:16:13Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();\n+   }\n+   \n+   public interface Styles extends CssResource\n+   {\n+      String popup();\n+      String searchBox();\n+      String commandList();\n+      String commandPanel();\n+   }\n+\n+   public CommandPalette(Commands commands, RAddins addins, ShortcutManager shortcuts, Host host)\n+   {\n+      initWidget(uiBinder.createAndBindUi(this));\n+\n+      entries_ = new ArrayList<CommandPaletteEntry>();\n+      host_ = host;\n+      shortcuts_ = shortcuts;\n+      selected_ = -1;\n+      addins_ = addins;\n+      commands_ = commands;\n+      styles_.ensureInjected();\n+      \n+      Element searchBox = searchBox_.getElement();\n+      searchBox.setAttribute(\"placeholder\", \"Search and run commands\");\n+      searchBox.setAttribute(\"spellcheck\", \"false\");\n+\n+      // Accessibility attributes: list box\n+      Element commandList = commandList_.getElement();\n+      ElementIds.assignElementId(commandList, ElementIds.COMMAND_PALETTE_LIST);\n+      Roles.getListboxRole().set(commandList);\n+      Roles.getListboxRole().setAriaLabelProperty(commandList, \"Matching commands\");\n+\n+      // Accessibility attributes: search box\n+      ElementIds.assignElementId(searchBox_, ElementIds.COMMAND_PALETTE_SEARCH);\n+      Roles.getComboboxRole().setAriaOwnsProperty(searchBox, Id.of(commandList_.getElement()));\n+      Roles.getComboboxRole().set(searchBox);\n+      Roles.getComboboxRole().setAriaLabelProperty(searchBox, \"Search for and run a command\");\n+      Roles.getComboboxRole().setAriaExpandedState(searchBox, ExpandedValue.TRUE);\n+      A11y.setARIAAutocomplete(searchBox_, \"list\");\n+      \n+      // Accessibility attributes: announcement region; we want this to be read\n+      // when filter updates are complete\n+      A11y.setVisuallyHidden(resultsCount_);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNTY3Ng==", "bodyText": "Didn't realize that existed! Just switched to it, big fan of reusing this kind of code since we can update later if e.g. we discover new best practices around live regions.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424105676", "createdAt": "2020-05-13T00:21:37Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();\n+   }\n+   \n+   public interface Styles extends CssResource\n+   {\n+      String popup();\n+      String searchBox();\n+      String commandList();\n+      String commandPanel();\n+   }\n+\n+   public CommandPalette(Commands commands, RAddins addins, ShortcutManager shortcuts, Host host)\n+   {\n+      initWidget(uiBinder.createAndBindUi(this));\n+\n+      entries_ = new ArrayList<CommandPaletteEntry>();\n+      host_ = host;\n+      shortcuts_ = shortcuts;\n+      selected_ = -1;\n+      addins_ = addins;\n+      commands_ = commands;\n+      styles_.ensureInjected();\n+      \n+      Element searchBox = searchBox_.getElement();\n+      searchBox.setAttribute(\"placeholder\", \"Search and run commands\");\n+      searchBox.setAttribute(\"spellcheck\", \"false\");\n+\n+      // Accessibility attributes: list box\n+      Element commandList = commandList_.getElement();\n+      ElementIds.assignElementId(commandList, ElementIds.COMMAND_PALETTE_LIST);\n+      Roles.getListboxRole().set(commandList);\n+      Roles.getListboxRole().setAriaLabelProperty(commandList, \"Matching commands\");\n+\n+      // Accessibility attributes: search box\n+      ElementIds.assignElementId(searchBox_, ElementIds.COMMAND_PALETTE_SEARCH);\n+      Roles.getComboboxRole().setAriaOwnsProperty(searchBox, Id.of(commandList_.getElement()));\n+      Roles.getComboboxRole().set(searchBox);\n+      Roles.getComboboxRole().setAriaLabelProperty(searchBox, \"Search for and run a command\");\n+      Roles.getComboboxRole().setAriaExpandedState(searchBox, ExpandedValue.TRUE);\n+      A11y.setARIAAutocomplete(searchBox_, \"list\");\n+      \n+      // Accessibility attributes: announcement region; we want this to be read\n+      // when filter updates are complete\n+      A11y.setVisuallyHidden(resultsCount_);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NjY5Nw=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkxNDQ4OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxNjozMVrOGUcNAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoyMjoyN1rOGUdXlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Njc4Ng==", "bodyText": "We have a user pref for this value: typingStatusDelayMs()", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424086786", "createdAt": "2020-05-12T23:16:31Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();\n+   }\n+   \n+   public interface Styles extends CssResource\n+   {\n+      String popup();\n+      String searchBox();\n+      String commandList();\n+      String commandPanel();\n+   }\n+\n+   public CommandPalette(Commands commands, RAddins addins, ShortcutManager shortcuts, Host host)\n+   {\n+      initWidget(uiBinder.createAndBindUi(this));\n+\n+      entries_ = new ArrayList<CommandPaletteEntry>();\n+      host_ = host;\n+      shortcuts_ = shortcuts;\n+      selected_ = -1;\n+      addins_ = addins;\n+      commands_ = commands;\n+      styles_.ensureInjected();\n+      \n+      Element searchBox = searchBox_.getElement();\n+      searchBox.setAttribute(\"placeholder\", \"Search and run commands\");\n+      searchBox.setAttribute(\"spellcheck\", \"false\");\n+\n+      // Accessibility attributes: list box\n+      Element commandList = commandList_.getElement();\n+      ElementIds.assignElementId(commandList, ElementIds.COMMAND_PALETTE_LIST);\n+      Roles.getListboxRole().set(commandList);\n+      Roles.getListboxRole().setAriaLabelProperty(commandList, \"Matching commands\");\n+\n+      // Accessibility attributes: search box\n+      ElementIds.assignElementId(searchBox_, ElementIds.COMMAND_PALETTE_SEARCH);\n+      Roles.getComboboxRole().setAriaOwnsProperty(searchBox, Id.of(commandList_.getElement()));\n+      Roles.getComboboxRole().set(searchBox);\n+      Roles.getComboboxRole().setAriaLabelProperty(searchBox, \"Search for and run a command\");\n+      Roles.getComboboxRole().setAriaExpandedState(searchBox, ExpandedValue.TRUE);\n+      A11y.setARIAAutocomplete(searchBox_, \"list\");\n+      \n+      // Accessibility attributes: announcement region; we want this to be read\n+      // when filter updates are complete\n+      A11y.setVisuallyHidden(resultsCount_);\n+      Roles.getAlertRole().setAriaLiveProperty(resultsCount_.getElement(), LiveValue.ASSERTIVE);\n+\n+      // Populate the palette on a deferred callback so that it appears immediately\n+      Scheduler.get().scheduleDeferred(() ->\n+      {\n+         populate();\n+      });\n+      \n+      // Debounced update of the result count for screen readers; we debounce\n+      // this so that every keystroke doesn't trigger an announcement.\n+      updateResultsCount_ = new DebouncedCommand(1000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNTg3OQ==", "bodyText": "Thanks, this is now respected!", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424105879", "createdAt": "2020-05-13T00:22:27Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();\n+   }\n+   \n+   public interface Styles extends CssResource\n+   {\n+      String popup();\n+      String searchBox();\n+      String commandList();\n+      String commandPanel();\n+   }\n+\n+   public CommandPalette(Commands commands, RAddins addins, ShortcutManager shortcuts, Host host)\n+   {\n+      initWidget(uiBinder.createAndBindUi(this));\n+\n+      entries_ = new ArrayList<CommandPaletteEntry>();\n+      host_ = host;\n+      shortcuts_ = shortcuts;\n+      selected_ = -1;\n+      addins_ = addins;\n+      commands_ = commands;\n+      styles_.ensureInjected();\n+      \n+      Element searchBox = searchBox_.getElement();\n+      searchBox.setAttribute(\"placeholder\", \"Search and run commands\");\n+      searchBox.setAttribute(\"spellcheck\", \"false\");\n+\n+      // Accessibility attributes: list box\n+      Element commandList = commandList_.getElement();\n+      ElementIds.assignElementId(commandList, ElementIds.COMMAND_PALETTE_LIST);\n+      Roles.getListboxRole().set(commandList);\n+      Roles.getListboxRole().setAriaLabelProperty(commandList, \"Matching commands\");\n+\n+      // Accessibility attributes: search box\n+      ElementIds.assignElementId(searchBox_, ElementIds.COMMAND_PALETTE_SEARCH);\n+      Roles.getComboboxRole().setAriaOwnsProperty(searchBox, Id.of(commandList_.getElement()));\n+      Roles.getComboboxRole().set(searchBox);\n+      Roles.getComboboxRole().setAriaLabelProperty(searchBox, \"Search for and run a command\");\n+      Roles.getComboboxRole().setAriaExpandedState(searchBox, ExpandedValue.TRUE);\n+      A11y.setARIAAutocomplete(searchBox_, \"list\");\n+      \n+      // Accessibility attributes: announcement region; we want this to be read\n+      // when filter updates are complete\n+      A11y.setVisuallyHidden(resultsCount_);\n+      Roles.getAlertRole().setAriaLiveProperty(resultsCount_.getElement(), LiveValue.ASSERTIVE);\n+\n+      // Populate the palette on a deferred callback so that it appears immediately\n+      Scheduler.get().scheduleDeferred(() ->\n+      {\n+         populate();\n+      });\n+      \n+      // Debounced update of the result count for screen readers; we debounce\n+      // this so that every keystroke doesn't trigger an announcement.\n+      updateResultsCount_ = new DebouncedCommand(1000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Njc4Ng=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkxODI0OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxODozOVrOGUcPeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoyNTo1M1rOGUdbGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NzQxNg==", "bodyText": "IntelliJ nit: \"public\" is redundant on interface methods", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424087416", "createdAt": "2020-05-12T23:18:39Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNjc3OQ==", "bodyText": "Updated.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424106779", "createdAt": "2020-05-13T00:25:53Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NzQxNg=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkyMDMwOnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxOTo0OFrOGUcQ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoyNjowNFrOGUdbRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Nzc2Mw==", "bodyText": "IntelliJ nit: could use for (String needle : needles)", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424087763", "createdAt": "2020-05-12T23:19:48Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();\n+   }\n+   \n+   public interface Styles extends CssResource\n+   {\n+      String popup();\n+      String searchBox();\n+      String commandList();\n+      String commandPanel();\n+   }\n+\n+   public CommandPalette(Commands commands, RAddins addins, ShortcutManager shortcuts, Host host)\n+   {\n+      initWidget(uiBinder.createAndBindUi(this));\n+\n+      entries_ = new ArrayList<CommandPaletteEntry>();\n+      host_ = host;\n+      shortcuts_ = shortcuts;\n+      selected_ = -1;\n+      addins_ = addins;\n+      commands_ = commands;\n+      styles_.ensureInjected();\n+      \n+      Element searchBox = searchBox_.getElement();\n+      searchBox.setAttribute(\"placeholder\", \"Search and run commands\");\n+      searchBox.setAttribute(\"spellcheck\", \"false\");\n+\n+      // Accessibility attributes: list box\n+      Element commandList = commandList_.getElement();\n+      ElementIds.assignElementId(commandList, ElementIds.COMMAND_PALETTE_LIST);\n+      Roles.getListboxRole().set(commandList);\n+      Roles.getListboxRole().setAriaLabelProperty(commandList, \"Matching commands\");\n+\n+      // Accessibility attributes: search box\n+      ElementIds.assignElementId(searchBox_, ElementIds.COMMAND_PALETTE_SEARCH);\n+      Roles.getComboboxRole().setAriaOwnsProperty(searchBox, Id.of(commandList_.getElement()));\n+      Roles.getComboboxRole().set(searchBox);\n+      Roles.getComboboxRole().setAriaLabelProperty(searchBox, \"Search for and run a command\");\n+      Roles.getComboboxRole().setAriaExpandedState(searchBox, ExpandedValue.TRUE);\n+      A11y.setARIAAutocomplete(searchBox_, \"list\");\n+      \n+      // Accessibility attributes: announcement region; we want this to be read\n+      // when filter updates are complete\n+      A11y.setVisuallyHidden(resultsCount_);\n+      Roles.getAlertRole().setAriaLiveProperty(resultsCount_.getElement(), LiveValue.ASSERTIVE);\n+\n+      // Populate the palette on a deferred callback so that it appears immediately\n+      Scheduler.get().scheduleDeferred(() ->\n+      {\n+         populate();\n+      });\n+      \n+      // Debounced update of the result count for screen readers; we debounce\n+      // this so that every keystroke doesn't trigger an announcement.\n+      updateResultsCount_ = new DebouncedCommand(1000)\n+      {\n+         @Override\n+         protected void execute()\n+         {\n+            int count = 0;\n+            for (CommandPaletteEntry entry: entries_)\n+            {\n+               if (entry.isVisible())\n+                  count++;\n+            }\n+            resultsCount_.getElement().setInnerText(count + \" \" +\n+                  \"commands found, press up and down to navigate\");\n+         }\n+      };\n+   }\n+   \n+   /**\n+    * Performs a one-time population of the palette with all available commands.\n+    */\n+   private void populate()\n+   {\n+      // Add all of the application commands\n+      KeyMap map = shortcuts_.getKeyMap(KeyMapType.APPLICATION);\n+      Map<String, AppCommand> allCommands = commands_.getCommands();\n+      for (String command: allCommands.keySet())\n+      {\n+         if (command.contains(\"Mru\") || command.startsWith(\"mru\") || \n+               command.contains(\"Dummy\"))\n+         {\n+            // MRU entries and dummy commands should not appear in the palette\n+            continue;\n+         }\n+         \n+         // Ensure the command can be used. It'd be nice to show all commands in\n+         // the palette for the purposes of examining key bindings, discovery,\n+         // etc., but there's no good user experience if a user attempts to\n+         // invoke one of those commands.\n+         AppCommand appCommand = allCommands.get(command);\n+         if (!appCommand.isEnabled() || !appCommand.isVisible())\n+         {\n+            continue;\n+         }\n+\n+         // Look up the key binding for this command\n+         List<KeySequence> keys = map.getBindings(command);\n+         \n+         // Create an application command entry\n+         CommandPaletteEntry entry = new AppCommandPaletteEntry(appCommand, keys);\n+         if (StringUtil.isNullOrEmpty(entry.getLabel()))\n+         {\n+            // Ignore app commands which have no label\n+            continue;\n+         }\n+         entries_.add(entry);\n+      }\n+      \n+      // Add all of the R addin commands\n+      map = shortcuts_.getKeyMap(KeyMapType.ADDIN);\n+      AddinExecutor executor = new AddinExecutor();\n+      for (String addin: JsUtil.asIterable(addins_.keys()))\n+      {\n+         RAddin rAddin = addins_.get(addin);\n+         \n+         // Look up the key binding for this addin\n+         List<KeySequence> keys = map.getBindings(rAddin.getId());\n+         CommandPaletteEntry entry = new RAddinCommandPaletteEntry(rAddin, executor, keys);\n+         if (StringUtil.isNullOrEmpty(entry.getLabel()))\n+         {\n+            // Ignore addin commands which have no label\n+            continue;\n+         }\n+         entries_.add(entry);\n+      }\n+      \n+      // Invoke commands when they're clicked on\n+      for (CommandPaletteEntry entry: entries_)\n+      {\n+         entry.sinkEvents(Event.ONCLICK);\n+         entry.addHandler((evt) -> {\n+            host_.dismiss();\n+            entry.invoke();\n+         }, ClickEvent.getType());\n+         commandList_.add(entry);\n+      }\n+\n+      \n+      // Handle most keystrokes on KeyUp so that the contents of the text box\n+      // have already been changed\n+      searchBox_.addKeyUpHandler((evt) ->\n+      {\n+         if (evt.getNativeKeyCode() == KeyCode.ESC)\n+         {\n+            // Pressing ESC dismisses the host (removing the palette popup)\n+            host_.dismiss();\n+         }\n+         else if (evt.getNativeKeyCode() == KeyCode.ENTER)\n+         {\n+            // Enter runs the selected command\n+            invokeSelection();\n+         }\n+         else\n+         {\n+            // Just update the filter if the text has changed\n+            String searchText = searchBox_.getText();\n+            if (!StringUtil.equals(searchText_, searchText))\n+            {\n+               searchText_ = searchText;\n+               applyFilter();\n+            }\n+         }\n+      });\n+\n+      // Up and Down arrows need to be handled on KeyDown to account for\n+      // repetition (a held arrow key will generate multiple KeyDown events and\n+      // then a single KeyUp when released)\n+      searchBox_.addKeyDownHandler((evt) -> \n+      {\n+         // Ignore the Tab key so we don't lose focus accidentally (there is\n+         // only one focusable element in the palette and we don't want Tab to\n+         // dismiss it)\n+         if (evt.getNativeKeyCode() == KeyCode.TAB)\n+         {\n+            evt.stopPropagation();\n+            evt.preventDefault();\n+            return;\n+         }\n+\n+         // Ignore modified arrows so that e.g. Shift Up/Down to select the\n+         // contents of the textbox work as expected\n+         if (evt.isAnyModifierKeyDown())\n+            return;\n+         \n+         if (evt.getNativeKeyCode() == KeyCode.UP)\n+         {\n+            // Directional keys often trigger behavior in textboxes (e.g. moving\n+            // the cursor to the beginning/end of text) but we're hijacking them\n+            // to do navigation in the results list, so disable that.\n+            evt.stopPropagation();\n+            evt.preventDefault();\n+            moveSelection(-1);\n+         }\n+         else if (evt.getNativeKeyCode() == KeyCode.DOWN)\n+         {\n+            evt.stopPropagation();\n+            evt.preventDefault();\n+            moveSelection(1);\n+         }\n+      });\n+   }\n+   \n+   /**\n+    * Filter the commands by the current contents of the search box\n+    */\n+   private void applyFilter()\n+   {\n+      int matches = 0;\n+\n+      // Split the search text into a series of lowercase words. This provides a\n+      // kind of partial fuzzy matching, so that e.g., \"new py\" matches the command\n+      // \"Create a new Python script\".\n+      String[] needles = searchBox_.getText().toLowerCase().split(\"\\\\s+\");\n+      \n+      for (CommandPaletteEntry entry: entries_)\n+      {\n+         String hay = entry.getLabel().toLowerCase();\n+         boolean matched = true;\n+         for (int i = 0; i < needles.length; i++)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNjgyMA==", "bodyText": "Updated.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424106820", "createdAt": "2020-05-13T00:26:04Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();\n+   }\n+   \n+   public interface Styles extends CssResource\n+   {\n+      String popup();\n+      String searchBox();\n+      String commandList();\n+      String commandPanel();\n+   }\n+\n+   public CommandPalette(Commands commands, RAddins addins, ShortcutManager shortcuts, Host host)\n+   {\n+      initWidget(uiBinder.createAndBindUi(this));\n+\n+      entries_ = new ArrayList<CommandPaletteEntry>();\n+      host_ = host;\n+      shortcuts_ = shortcuts;\n+      selected_ = -1;\n+      addins_ = addins;\n+      commands_ = commands;\n+      styles_.ensureInjected();\n+      \n+      Element searchBox = searchBox_.getElement();\n+      searchBox.setAttribute(\"placeholder\", \"Search and run commands\");\n+      searchBox.setAttribute(\"spellcheck\", \"false\");\n+\n+      // Accessibility attributes: list box\n+      Element commandList = commandList_.getElement();\n+      ElementIds.assignElementId(commandList, ElementIds.COMMAND_PALETTE_LIST);\n+      Roles.getListboxRole().set(commandList);\n+      Roles.getListboxRole().setAriaLabelProperty(commandList, \"Matching commands\");\n+\n+      // Accessibility attributes: search box\n+      ElementIds.assignElementId(searchBox_, ElementIds.COMMAND_PALETTE_SEARCH);\n+      Roles.getComboboxRole().setAriaOwnsProperty(searchBox, Id.of(commandList_.getElement()));\n+      Roles.getComboboxRole().set(searchBox);\n+      Roles.getComboboxRole().setAriaLabelProperty(searchBox, \"Search for and run a command\");\n+      Roles.getComboboxRole().setAriaExpandedState(searchBox, ExpandedValue.TRUE);\n+      A11y.setARIAAutocomplete(searchBox_, \"list\");\n+      \n+      // Accessibility attributes: announcement region; we want this to be read\n+      // when filter updates are complete\n+      A11y.setVisuallyHidden(resultsCount_);\n+      Roles.getAlertRole().setAriaLiveProperty(resultsCount_.getElement(), LiveValue.ASSERTIVE);\n+\n+      // Populate the palette on a deferred callback so that it appears immediately\n+      Scheduler.get().scheduleDeferred(() ->\n+      {\n+         populate();\n+      });\n+      \n+      // Debounced update of the result count for screen readers; we debounce\n+      // this so that every keystroke doesn't trigger an announcement.\n+      updateResultsCount_ = new DebouncedCommand(1000)\n+      {\n+         @Override\n+         protected void execute()\n+         {\n+            int count = 0;\n+            for (CommandPaletteEntry entry: entries_)\n+            {\n+               if (entry.isVisible())\n+                  count++;\n+            }\n+            resultsCount_.getElement().setInnerText(count + \" \" +\n+                  \"commands found, press up and down to navigate\");\n+         }\n+      };\n+   }\n+   \n+   /**\n+    * Performs a one-time population of the palette with all available commands.\n+    */\n+   private void populate()\n+   {\n+      // Add all of the application commands\n+      KeyMap map = shortcuts_.getKeyMap(KeyMapType.APPLICATION);\n+      Map<String, AppCommand> allCommands = commands_.getCommands();\n+      for (String command: allCommands.keySet())\n+      {\n+         if (command.contains(\"Mru\") || command.startsWith(\"mru\") || \n+               command.contains(\"Dummy\"))\n+         {\n+            // MRU entries and dummy commands should not appear in the palette\n+            continue;\n+         }\n+         \n+         // Ensure the command can be used. It'd be nice to show all commands in\n+         // the palette for the purposes of examining key bindings, discovery,\n+         // etc., but there's no good user experience if a user attempts to\n+         // invoke one of those commands.\n+         AppCommand appCommand = allCommands.get(command);\n+         if (!appCommand.isEnabled() || !appCommand.isVisible())\n+         {\n+            continue;\n+         }\n+\n+         // Look up the key binding for this command\n+         List<KeySequence> keys = map.getBindings(command);\n+         \n+         // Create an application command entry\n+         CommandPaletteEntry entry = new AppCommandPaletteEntry(appCommand, keys);\n+         if (StringUtil.isNullOrEmpty(entry.getLabel()))\n+         {\n+            // Ignore app commands which have no label\n+            continue;\n+         }\n+         entries_.add(entry);\n+      }\n+      \n+      // Add all of the R addin commands\n+      map = shortcuts_.getKeyMap(KeyMapType.ADDIN);\n+      AddinExecutor executor = new AddinExecutor();\n+      for (String addin: JsUtil.asIterable(addins_.keys()))\n+      {\n+         RAddin rAddin = addins_.get(addin);\n+         \n+         // Look up the key binding for this addin\n+         List<KeySequence> keys = map.getBindings(rAddin.getId());\n+         CommandPaletteEntry entry = new RAddinCommandPaletteEntry(rAddin, executor, keys);\n+         if (StringUtil.isNullOrEmpty(entry.getLabel()))\n+         {\n+            // Ignore addin commands which have no label\n+            continue;\n+         }\n+         entries_.add(entry);\n+      }\n+      \n+      // Invoke commands when they're clicked on\n+      for (CommandPaletteEntry entry: entries_)\n+      {\n+         entry.sinkEvents(Event.ONCLICK);\n+         entry.addHandler((evt) -> {\n+            host_.dismiss();\n+            entry.invoke();\n+         }, ClickEvent.getType());\n+         commandList_.add(entry);\n+      }\n+\n+      \n+      // Handle most keystrokes on KeyUp so that the contents of the text box\n+      // have already been changed\n+      searchBox_.addKeyUpHandler((evt) ->\n+      {\n+         if (evt.getNativeKeyCode() == KeyCode.ESC)\n+         {\n+            // Pressing ESC dismisses the host (removing the palette popup)\n+            host_.dismiss();\n+         }\n+         else if (evt.getNativeKeyCode() == KeyCode.ENTER)\n+         {\n+            // Enter runs the selected command\n+            invokeSelection();\n+         }\n+         else\n+         {\n+            // Just update the filter if the text has changed\n+            String searchText = searchBox_.getText();\n+            if (!StringUtil.equals(searchText_, searchText))\n+            {\n+               searchText_ = searchText;\n+               applyFilter();\n+            }\n+         }\n+      });\n+\n+      // Up and Down arrows need to be handled on KeyDown to account for\n+      // repetition (a held arrow key will generate multiple KeyDown events and\n+      // then a single KeyUp when released)\n+      searchBox_.addKeyDownHandler((evt) -> \n+      {\n+         // Ignore the Tab key so we don't lose focus accidentally (there is\n+         // only one focusable element in the palette and we don't want Tab to\n+         // dismiss it)\n+         if (evt.getNativeKeyCode() == KeyCode.TAB)\n+         {\n+            evt.stopPropagation();\n+            evt.preventDefault();\n+            return;\n+         }\n+\n+         // Ignore modified arrows so that e.g. Shift Up/Down to select the\n+         // contents of the textbox work as expected\n+         if (evt.isAnyModifierKeyDown())\n+            return;\n+         \n+         if (evt.getNativeKeyCode() == KeyCode.UP)\n+         {\n+            // Directional keys often trigger behavior in textboxes (e.g. moving\n+            // the cursor to the beginning/end of text) but we're hijacking them\n+            // to do navigation in the results list, so disable that.\n+            evt.stopPropagation();\n+            evt.preventDefault();\n+            moveSelection(-1);\n+         }\n+         else if (evt.getNativeKeyCode() == KeyCode.DOWN)\n+         {\n+            evt.stopPropagation();\n+            evt.preventDefault();\n+            moveSelection(1);\n+         }\n+      });\n+   }\n+   \n+   /**\n+    * Filter the commands by the current contents of the search box\n+    */\n+   private void applyFilter()\n+   {\n+      int matches = 0;\n+\n+      // Split the search text into a series of lowercase words. This provides a\n+      // kind of partial fuzzy matching, so that e.g., \"new py\" matches the command\n+      // \"Create a new Python script\".\n+      String[] needles = searchBox_.getText().toLowerCase().split(\"\\\\s+\");\n+      \n+      for (CommandPaletteEntry entry: entries_)\n+      {\n+         String hay = entry.getLabel().toLowerCase();\n+         boolean matched = true;\n+         for (int i = 0; i < needles.length; i++)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Nzc2Mw=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 297}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkyMjc1OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoyMDo1NFrOGUcSUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoyNjoxM1rOGUdbYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4ODE0Nw==", "bodyText": "IntelliJ nit: could just have new ArrayList<>();", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424088147", "createdAt": "2020-05-12T23:20:54Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();\n+   }\n+   \n+   public interface Styles extends CssResource\n+   {\n+      String popup();\n+      String searchBox();\n+      String commandList();\n+      String commandPanel();\n+   }\n+\n+   public CommandPalette(Commands commands, RAddins addins, ShortcutManager shortcuts, Host host)\n+   {\n+      initWidget(uiBinder.createAndBindUi(this));\n+\n+      entries_ = new ArrayList<CommandPaletteEntry>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNjg0OA==", "bodyText": "Updated.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424106848", "createdAt": "2020-05-13T00:26:13Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();\n+   }\n+   \n+   public interface Styles extends CssResource\n+   {\n+      String popup();\n+      String searchBox();\n+      String commandList();\n+      String commandPanel();\n+   }\n+\n+   public CommandPalette(Commands commands, RAddins addins, ShortcutManager shortcuts, Host host)\n+   {\n+      initWidget(uiBinder.createAndBindUi(this));\n+\n+      entries_ = new ArrayList<CommandPaletteEntry>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4ODE0Nw=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkzMzUwOnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/application/ui/RAddinCommandPaletteEntry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoyNjoyNFrOGUcZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoyNjozN1rOGUdbtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4OTg2Nw==", "bodyText": "I can where \"add-in\" context is important (contradicting my general uncertainty about context).", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424089867", "createdAt": "2020-05-12T23:26:24Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/RAddinCommandPaletteEntry.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * RAddinCommandPaletteEntry.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.List;\n+\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+\n+/**\n+ * RAddinCommandPaletteEntry is a widget that represents a command furnished by\n+ * an RStudio Addin in RStudio's command palette.\n+ */\n+public class RAddinCommandPaletteEntry extends CommandPaletteEntry\n+{\n+   public RAddinCommandPaletteEntry(RAddin addin, AddinExecutor executor, \n+                                    List<KeySequence> keys)\n+   {\n+      super(keys);\n+      addin_ = addin;\n+      executor_ = executor;\n+      label_ = addin_.getName();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = addin_.getTitle();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = addin_.getDescription();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = \"\";\n+\n+      initialize();\n+   }\n+   \n+   @Override\n+   public String getLabel()\n+   {\n+      return label_;\n+   }\n+\n+   @Override\n+   public void invoke()\n+   {\n+      executor_.execute(addin_);\n+   }\n+\n+   @Override\n+   public String getId()\n+   {\n+      return addin_.getId();\n+   }\n+\n+   @Override\n+   public String getContext()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNjkzNA==", "bodyText": "Yes, this one is really vital!", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424106934", "createdAt": "2020-05-13T00:26:37Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/RAddinCommandPaletteEntry.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * RAddinCommandPaletteEntry.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.List;\n+\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+\n+/**\n+ * RAddinCommandPaletteEntry is a widget that represents a command furnished by\n+ * an RStudio Addin in RStudio's command palette.\n+ */\n+public class RAddinCommandPaletteEntry extends CommandPaletteEntry\n+{\n+   public RAddinCommandPaletteEntry(RAddin addin, AddinExecutor executor, \n+                                    List<KeySequence> keys)\n+   {\n+      super(keys);\n+      addin_ = addin;\n+      executor_ = executor;\n+      label_ = addin_.getName();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = addin_.getTitle();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = addin_.getDescription();\n+      if (StringUtil.isNullOrEmpty(label_))\n+         label_ = \"\";\n+\n+      initialize();\n+   }\n+   \n+   @Override\n+   public String getLabel()\n+   {\n+      return label_;\n+   }\n+\n+   @Override\n+   public void invoke()\n+   {\n+      executor_.execute(addin_);\n+   }\n+\n+   @Override\n+   public String getId()\n+   {\n+      return addin_.getId();\n+   }\n+\n+   @Override\n+   public String getContext()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4OTg2Nw=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkzNzY2OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/commands/Commands.cmd.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoyODoyNVrOGUcbew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoyODoyNVrOGUcbew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MDQ5MQ==", "bodyText": "FireFox on Windows launches a new Private Browsing window with this shortcut. Worked on everything else I tried (well, I didn't try Linux desktop browsers, and IE11 is very slow with this feature but whatcha expect).", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424090491", "createdAt": "2020-05-12T23:28:25Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/commands/Commands.cmd.xml", "diffHunk": "@@ -839,6 +837,7 @@ well as menu structures (for main menu and popup menus).\n          <shortcut refid=\"helpSearch\" value=\"Ctrl+Alt+F1\"/>\n          <shortcut refid=\"helpBack\" value=\"Shift+Alt+F2\"/>\n          <shortcut refid=\"helpForward\" value=\"Shift+Alt+F3\"/>\n+         <shortcut refid=\"showCommandPalette\" value=\"Ctrl+Shift+P\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDk0MDI2OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoyOTo0N1rOGUcdEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NDoyN1rOGUc6vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MDg5OA==", "bodyText": "As mentioned elsewhere, support for PgUp and PgDown keys would be really nice here, too.", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424090898", "createdAt": "2020-05-12T23:29:47Z", "author": {"login": "gtritchie"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();\n+   }\n+   \n+   public interface Styles extends CssResource\n+   {\n+      String popup();\n+      String searchBox();\n+      String commandList();\n+      String commandPanel();\n+   }\n+\n+   public CommandPalette(Commands commands, RAddins addins, ShortcutManager shortcuts, Host host)\n+   {\n+      initWidget(uiBinder.createAndBindUi(this));\n+\n+      entries_ = new ArrayList<CommandPaletteEntry>();\n+      host_ = host;\n+      shortcuts_ = shortcuts;\n+      selected_ = -1;\n+      addins_ = addins;\n+      commands_ = commands;\n+      styles_.ensureInjected();\n+      \n+      Element searchBox = searchBox_.getElement();\n+      searchBox.setAttribute(\"placeholder\", \"Search and run commands\");\n+      searchBox.setAttribute(\"spellcheck\", \"false\");\n+\n+      // Accessibility attributes: list box\n+      Element commandList = commandList_.getElement();\n+      ElementIds.assignElementId(commandList, ElementIds.COMMAND_PALETTE_LIST);\n+      Roles.getListboxRole().set(commandList);\n+      Roles.getListboxRole().setAriaLabelProperty(commandList, \"Matching commands\");\n+\n+      // Accessibility attributes: search box\n+      ElementIds.assignElementId(searchBox_, ElementIds.COMMAND_PALETTE_SEARCH);\n+      Roles.getComboboxRole().setAriaOwnsProperty(searchBox, Id.of(commandList_.getElement()));\n+      Roles.getComboboxRole().set(searchBox);\n+      Roles.getComboboxRole().setAriaLabelProperty(searchBox, \"Search for and run a command\");\n+      Roles.getComboboxRole().setAriaExpandedState(searchBox, ExpandedValue.TRUE);\n+      A11y.setARIAAutocomplete(searchBox_, \"list\");\n+      \n+      // Accessibility attributes: announcement region; we want this to be read\n+      // when filter updates are complete\n+      A11y.setVisuallyHidden(resultsCount_);\n+      Roles.getAlertRole().setAriaLiveProperty(resultsCount_.getElement(), LiveValue.ASSERTIVE);\n+\n+      // Populate the palette on a deferred callback so that it appears immediately\n+      Scheduler.get().scheduleDeferred(() ->\n+      {\n+         populate();\n+      });\n+      \n+      // Debounced update of the result count for screen readers; we debounce\n+      // this so that every keystroke doesn't trigger an announcement.\n+      updateResultsCount_ = new DebouncedCommand(1000)\n+      {\n+         @Override\n+         protected void execute()\n+         {\n+            int count = 0;\n+            for (CommandPaletteEntry entry: entries_)\n+            {\n+               if (entry.isVisible())\n+                  count++;\n+            }\n+            resultsCount_.getElement().setInnerText(count + \" \" +\n+                  \"commands found, press up and down to navigate\");\n+         }\n+      };\n+   }\n+   \n+   /**\n+    * Performs a one-time population of the palette with all available commands.\n+    */\n+   private void populate()\n+   {\n+      // Add all of the application commands\n+      KeyMap map = shortcuts_.getKeyMap(KeyMapType.APPLICATION);\n+      Map<String, AppCommand> allCommands = commands_.getCommands();\n+      for (String command: allCommands.keySet())\n+      {\n+         if (command.contains(\"Mru\") || command.startsWith(\"mru\") || \n+               command.contains(\"Dummy\"))\n+         {\n+            // MRU entries and dummy commands should not appear in the palette\n+            continue;\n+         }\n+         \n+         // Ensure the command can be used. It'd be nice to show all commands in\n+         // the palette for the purposes of examining key bindings, discovery,\n+         // etc., but there's no good user experience if a user attempts to\n+         // invoke one of those commands.\n+         AppCommand appCommand = allCommands.get(command);\n+         if (!appCommand.isEnabled() || !appCommand.isVisible())\n+         {\n+            continue;\n+         }\n+\n+         // Look up the key binding for this command\n+         List<KeySequence> keys = map.getBindings(command);\n+         \n+         // Create an application command entry\n+         CommandPaletteEntry entry = new AppCommandPaletteEntry(appCommand, keys);\n+         if (StringUtil.isNullOrEmpty(entry.getLabel()))\n+         {\n+            // Ignore app commands which have no label\n+            continue;\n+         }\n+         entries_.add(entry);\n+      }\n+      \n+      // Add all of the R addin commands\n+      map = shortcuts_.getKeyMap(KeyMapType.ADDIN);\n+      AddinExecutor executor = new AddinExecutor();\n+      for (String addin: JsUtil.asIterable(addins_.keys()))\n+      {\n+         RAddin rAddin = addins_.get(addin);\n+         \n+         // Look up the key binding for this addin\n+         List<KeySequence> keys = map.getBindings(rAddin.getId());\n+         CommandPaletteEntry entry = new RAddinCommandPaletteEntry(rAddin, executor, keys);\n+         if (StringUtil.isNullOrEmpty(entry.getLabel()))\n+         {\n+            // Ignore addin commands which have no label\n+            continue;\n+         }\n+         entries_.add(entry);\n+      }\n+      \n+      // Invoke commands when they're clicked on\n+      for (CommandPaletteEntry entry: entries_)\n+      {\n+         entry.sinkEvents(Event.ONCLICK);\n+         entry.addHandler((evt) -> {\n+            host_.dismiss();\n+            entry.invoke();\n+         }, ClickEvent.getType());\n+         commandList_.add(entry);\n+      }\n+\n+      \n+      // Handle most keystrokes on KeyUp so that the contents of the text box\n+      // have already been changed\n+      searchBox_.addKeyUpHandler((evt) ->\n+      {\n+         if (evt.getNativeKeyCode() == KeyCode.ESC)\n+         {\n+            // Pressing ESC dismisses the host (removing the palette popup)\n+            host_.dismiss();\n+         }\n+         else if (evt.getNativeKeyCode() == KeyCode.ENTER)\n+         {\n+            // Enter runs the selected command\n+            invokeSelection();\n+         }\n+         else\n+         {\n+            // Just update the filter if the text has changed\n+            String searchText = searchBox_.getText();\n+            if (!StringUtil.equals(searchText_, searchText))\n+            {\n+               searchText_ = searchText;\n+               applyFilter();\n+            }\n+         }\n+      });\n+\n+      // Up and Down arrows need to be handled on KeyDown to account for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5ODQ5NA==", "bodyText": "Wish granted! \ud83e\uddde", "url": "https://github.com/rstudio/rstudio/pull/6848#discussion_r424098494", "createdAt": "2020-05-12T23:54:27Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/application/ui/CommandPalette.java", "diffHunk": "@@ -0,0 +1,442 @@\n+/*\n+ * CommandPalette.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+package org.rstudio.studio.client.application.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.rstudio.core.client.DebouncedCommand;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.a11y.A11y;\n+import org.rstudio.core.client.command.AppCommand;\n+import org.rstudio.core.client.command.KeyMap;\n+import org.rstudio.core.client.command.KeySequence;\n+import org.rstudio.core.client.command.ShortcutManager;\n+import org.rstudio.core.client.command.KeyMap.KeyMapType;\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.studio.client.workbench.addins.Addins.AddinExecutor;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddin;\n+import org.rstudio.studio.client.workbench.addins.Addins.RAddins;\n+import org.rstudio.studio.client.workbench.commands.Commands;\n+\n+import com.google.gwt.aria.client.ExpandedValue;\n+import com.google.gwt.aria.client.Id;\n+import com.google.gwt.aria.client.LiveValue;\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.dom.client.Element;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.user.client.Event;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.HTMLPanel;\n+import com.google.gwt.user.client.ui.ScrollPanel;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+import elemental.events.KeyboardEvent.KeyCode;\n+\n+/**\n+ * CommandPalette is a widget that displays all available RStudio commands in a\n+ * searchable list.\n+ */\n+public class CommandPalette extends Composite\n+{\n+   private static CommandPaletteUiBinder uiBinder = GWT.create(CommandPaletteUiBinder.class);\n+\n+   interface CommandPaletteUiBinder extends UiBinder<Widget, CommandPalette>\n+   {\n+   }\n+   \n+   /**\n+    * The host interface represents the class hosting the widget (not a widget\n+    * itself), which is currently the CommandPaletteLauncher.\n+    */\n+   public interface Host\n+   {\n+      public void dismiss();\n+   }\n+   \n+   public interface Styles extends CssResource\n+   {\n+      String popup();\n+      String searchBox();\n+      String commandList();\n+      String commandPanel();\n+   }\n+\n+   public CommandPalette(Commands commands, RAddins addins, ShortcutManager shortcuts, Host host)\n+   {\n+      initWidget(uiBinder.createAndBindUi(this));\n+\n+      entries_ = new ArrayList<CommandPaletteEntry>();\n+      host_ = host;\n+      shortcuts_ = shortcuts;\n+      selected_ = -1;\n+      addins_ = addins;\n+      commands_ = commands;\n+      styles_.ensureInjected();\n+      \n+      Element searchBox = searchBox_.getElement();\n+      searchBox.setAttribute(\"placeholder\", \"Search and run commands\");\n+      searchBox.setAttribute(\"spellcheck\", \"false\");\n+\n+      // Accessibility attributes: list box\n+      Element commandList = commandList_.getElement();\n+      ElementIds.assignElementId(commandList, ElementIds.COMMAND_PALETTE_LIST);\n+      Roles.getListboxRole().set(commandList);\n+      Roles.getListboxRole().setAriaLabelProperty(commandList, \"Matching commands\");\n+\n+      // Accessibility attributes: search box\n+      ElementIds.assignElementId(searchBox_, ElementIds.COMMAND_PALETTE_SEARCH);\n+      Roles.getComboboxRole().setAriaOwnsProperty(searchBox, Id.of(commandList_.getElement()));\n+      Roles.getComboboxRole().set(searchBox);\n+      Roles.getComboboxRole().setAriaLabelProperty(searchBox, \"Search for and run a command\");\n+      Roles.getComboboxRole().setAriaExpandedState(searchBox, ExpandedValue.TRUE);\n+      A11y.setARIAAutocomplete(searchBox_, \"list\");\n+      \n+      // Accessibility attributes: announcement region; we want this to be read\n+      // when filter updates are complete\n+      A11y.setVisuallyHidden(resultsCount_);\n+      Roles.getAlertRole().setAriaLiveProperty(resultsCount_.getElement(), LiveValue.ASSERTIVE);\n+\n+      // Populate the palette on a deferred callback so that it appears immediately\n+      Scheduler.get().scheduleDeferred(() ->\n+      {\n+         populate();\n+      });\n+      \n+      // Debounced update of the result count for screen readers; we debounce\n+      // this so that every keystroke doesn't trigger an announcement.\n+      updateResultsCount_ = new DebouncedCommand(1000)\n+      {\n+         @Override\n+         protected void execute()\n+         {\n+            int count = 0;\n+            for (CommandPaletteEntry entry: entries_)\n+            {\n+               if (entry.isVisible())\n+                  count++;\n+            }\n+            resultsCount_.getElement().setInnerText(count + \" \" +\n+                  \"commands found, press up and down to navigate\");\n+         }\n+      };\n+   }\n+   \n+   /**\n+    * Performs a one-time population of the palette with all available commands.\n+    */\n+   private void populate()\n+   {\n+      // Add all of the application commands\n+      KeyMap map = shortcuts_.getKeyMap(KeyMapType.APPLICATION);\n+      Map<String, AppCommand> allCommands = commands_.getCommands();\n+      for (String command: allCommands.keySet())\n+      {\n+         if (command.contains(\"Mru\") || command.startsWith(\"mru\") || \n+               command.contains(\"Dummy\"))\n+         {\n+            // MRU entries and dummy commands should not appear in the palette\n+            continue;\n+         }\n+         \n+         // Ensure the command can be used. It'd be nice to show all commands in\n+         // the palette for the purposes of examining key bindings, discovery,\n+         // etc., but there's no good user experience if a user attempts to\n+         // invoke one of those commands.\n+         AppCommand appCommand = allCommands.get(command);\n+         if (!appCommand.isEnabled() || !appCommand.isVisible())\n+         {\n+            continue;\n+         }\n+\n+         // Look up the key binding for this command\n+         List<KeySequence> keys = map.getBindings(command);\n+         \n+         // Create an application command entry\n+         CommandPaletteEntry entry = new AppCommandPaletteEntry(appCommand, keys);\n+         if (StringUtil.isNullOrEmpty(entry.getLabel()))\n+         {\n+            // Ignore app commands which have no label\n+            continue;\n+         }\n+         entries_.add(entry);\n+      }\n+      \n+      // Add all of the R addin commands\n+      map = shortcuts_.getKeyMap(KeyMapType.ADDIN);\n+      AddinExecutor executor = new AddinExecutor();\n+      for (String addin: JsUtil.asIterable(addins_.keys()))\n+      {\n+         RAddin rAddin = addins_.get(addin);\n+         \n+         // Look up the key binding for this addin\n+         List<KeySequence> keys = map.getBindings(rAddin.getId());\n+         CommandPaletteEntry entry = new RAddinCommandPaletteEntry(rAddin, executor, keys);\n+         if (StringUtil.isNullOrEmpty(entry.getLabel()))\n+         {\n+            // Ignore addin commands which have no label\n+            continue;\n+         }\n+         entries_.add(entry);\n+      }\n+      \n+      // Invoke commands when they're clicked on\n+      for (CommandPaletteEntry entry: entries_)\n+      {\n+         entry.sinkEvents(Event.ONCLICK);\n+         entry.addHandler((evt) -> {\n+            host_.dismiss();\n+            entry.invoke();\n+         }, ClickEvent.getType());\n+         commandList_.add(entry);\n+      }\n+\n+      \n+      // Handle most keystrokes on KeyUp so that the contents of the text box\n+      // have already been changed\n+      searchBox_.addKeyUpHandler((evt) ->\n+      {\n+         if (evt.getNativeKeyCode() == KeyCode.ESC)\n+         {\n+            // Pressing ESC dismisses the host (removing the palette popup)\n+            host_.dismiss();\n+         }\n+         else if (evt.getNativeKeyCode() == KeyCode.ENTER)\n+         {\n+            // Enter runs the selected command\n+            invokeSelection();\n+         }\n+         else\n+         {\n+            // Just update the filter if the text has changed\n+            String searchText = searchBox_.getText();\n+            if (!StringUtil.equals(searchText_, searchText))\n+            {\n+               searchText_ = searchText;\n+               applyFilter();\n+            }\n+         }\n+      });\n+\n+      // Up and Down arrows need to be handled on KeyDown to account for", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MDg5OA=="}, "originalCommit": {"oid": "94806c66908573644384e7082e71036c6c49f936"}, "originalPosition": 243}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3953, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}