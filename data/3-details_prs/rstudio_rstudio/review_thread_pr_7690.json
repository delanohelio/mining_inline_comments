{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NDkwNzI4", "number": 7690, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOToyNzozNlrOEecSEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxMDoxNFrOEeeU7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzU2MTEzOnYy", "diffSide": "LEFT", "path": "src/cpp/shared_core/json/Json.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOToyNzozNlrOHKGIpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTowNjo1NFrOHKJPtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0ODMyNA==", "bodyText": "This method returns a pointer to stack-allocated memory (moral equivalent of return std::string().c_str()); given that it's unsafe I've decided to remove it. This didn't affect anything in open source; if something is effected in pro then I think we need to change those usages to be safer.", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480348324", "createdAt": "2020-08-31T19:27:36Z", "author": {"login": "kevinushey"}, "path": "src/cpp/shared_core/json/Json.cpp", "diffHunk": "@@ -586,12 +586,6 @@ Object Value::getValue<Object>() const\n    return copy;\n }\n \n-template<>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTI4NQ==", "bodyText": "I agree - I don't see a reason why the caller couldn't get the string value and call c_str() themselves.", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480399285", "createdAt": "2020-08-31T21:06:54Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/shared_core/json/Json.cpp", "diffHunk": "@@ -586,12 +586,6 @@ Object Value::getValue<Object>() const\n    return copy;\n }\n \n-template<>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0ODMyNA=="}, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzg4OTg3OnYy", "diffSide": "RIGHT", "path": "src/cpp/shared_core/include/shared_core/json/Json.hpp", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTowODoxMFrOHKJR0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzowMzowOVrOHKM0Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTgyNA==", "bodyText": "This compiles? The parameter is a const &, so I think we should use const & here to ensure that we won't accidentally gut something we shouldn't.", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480399824", "createdAt": "2020-08-31T21:08:10Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/shared_core/include/shared_core/json/Json.hpp", "diffHunk": "@@ -1790,7 +1790,7 @@ template <typename T>\n inline Value toJsonValue(const std::vector<T>& in_vector)\n {\n    Array results;\n-   for (const T& val : in_vector)\n+   for (auto&& val : in_vector)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMTY4MQ==", "bodyText": "It does -- this actually does deduce as const T& for a regular const std::vector<T>&. This is because it basically uses the result of decltype(*val.begin()), and for const vectors this will return a const interator which will yield a const T& when dereferenced. See e.g.\nhttps://godbolt.org/z/Ej973W\nIn other words, auto&& preserves the const-ness here because the container itself handles const-ness in its iterators.", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480431681", "createdAt": "2020-08-31T22:22:54Z", "author": {"login": "kevinushey"}, "path": "src/cpp/shared_core/include/shared_core/json/Json.hpp", "diffHunk": "@@ -1790,7 +1790,7 @@ template <typename T>\n inline Value toJsonValue(const std::vector<T>& in_vector)\n {\n    Array results;\n-   for (const T& val : in_vector)\n+   for (auto&& val : in_vector)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTgyNA=="}, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NjE4NA==", "bodyText": "In that case, why change this away from const T& val to auto&& when we use const auto& in other places? I also think both const auto& and const T& are more obvious in their meaning to the reader.", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480456184", "createdAt": "2020-08-31T23:00:35Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/shared_core/include/shared_core/json/Json.hpp", "diffHunk": "@@ -1790,7 +1790,7 @@ template <typename T>\n inline Value toJsonValue(const std::vector<T>& in_vector)\n {\n    Array results;\n-   for (const T& val : in_vector)\n+   for (auto&& val : in_vector)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTgyNA=="}, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1Nzc4Nw==", "bodyText": "Oh -  I see in the approach section it's because of the potential weirdness with std::vector<bool>", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480457787", "createdAt": "2020-08-31T23:03:09Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/shared_core/include/shared_core/json/Json.hpp", "diffHunk": "@@ -1790,7 +1790,7 @@ template <typename T>\n inline Value toJsonValue(const std::vector<T>& in_vector)\n {\n    Array results;\n-   for (const T& val : in_vector)\n+   for (auto&& val : in_vector)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTgyNA=="}, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzg5MjMxOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/SessionMain.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTowODo1OVrOHKJTXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjoyNTozMlrOHKLSlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDIyMA==", "bodyText": "Is const & incorrect here?", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480400220", "createdAt": "2020-08-31T21:08:59Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/SessionMain.cpp", "diffHunk": "@@ -650,7 +650,8 @@ Error rInit(const rstudio::r::session::RInitInfo& rInitInfo)\n    error = rstudio::r::json::getRpcMethods(&rMethods);\n    if (error)\n       return error;\n-   for (const json::JsonRpcMethod& method : rMethods)\n+   \n+   for (json::JsonRpcMethod method : rMethods)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMjc5MQ==", "bodyText": "It seems to be; at least, -Wrange-loop-analysis indicates that doing this avoids copies. I don't quite understand why but this makes the compiler happy.", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480432791", "createdAt": "2020-08-31T22:25:32Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/SessionMain.cpp", "diffHunk": "@@ -650,7 +650,8 @@ Error rInit(const rstudio::r::session::RInitInfo& rInitInfo)\n    error = rstudio::r::json::getRpcMethods(&rMethods);\n    if (error)\n       return error;\n-   for (const json::JsonRpcMethod& method : rMethods)\n+   \n+   for (json::JsonRpcMethod method : rMethods)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDIyMA=="}, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzg5NjEzOnYy", "diffSide": "RIGHT", "path": "src/cpp/core/ConfigProfile.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxMDoxNFrOHKJVpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjoyNTo0MVrOHKLTDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDgwNw==", "bodyText": "This is a copy instead of a reference because it's an enum type (and therefore just as fast/memory efficient to copy as to copy the reference of it)?", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480400807", "createdAt": "2020-08-31T21:10:14Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/core/ConfigProfile.cpp", "diffHunk": "@@ -88,7 +88,7 @@ Error ConfigProfile::parseString(const std::string& profileStr)\n    for (const ptree::value_type& child : profileTree)\n    {\n       boost::optional<Level> matchingLevel;\n-      for (const Level& level : sections_)\n+      for (Level level : sections_)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMjkxMQ==", "bodyText": "Right, exactly.", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480432911", "createdAt": "2020-08-31T22:25:41Z", "author": {"login": "kevinushey"}, "path": "src/cpp/core/ConfigProfile.cpp", "diffHunk": "@@ -88,7 +88,7 @@ Error ConfigProfile::parseString(const std::string& profileStr)\n    for (const ptree::value_type& child : profileTree)\n    {\n       boost::optional<Level> matchingLevel;\n-      for (const Level& level : sections_)\n+      for (Level level : sections_)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDgwNw=="}, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4276, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}