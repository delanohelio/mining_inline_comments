{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTU4ODM5", "number": 7021, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozMToxNVrOEB01uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxNzowMlrOEB4zUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzQ5NzUzOnYy", "diffSide": "RIGHT", "path": "src/gwt/panmirror/src/editor/package.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozMToxNVrOGd6ITg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozNTozNlrOGd6TPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxNDI4Ng==", "bodyText": "The easiest way I know to do this is with ts-node.\nyarn add --dev ts-node\n\nThen change the command to:\nts-node -T tools/generate-symbols.ts\n\nts-node approximates \"a node interpreter that understands typescript\", sometimes the seams show through but most of the time it works pretty nicely.\nThe -T is necessary because generate-symbols.ts doesn't seem to pass type check, the @types/node-fetch is missing and even after I added that I got some compiler errors. If you add --strict to your tsc invocation, you'll see those same errors; fix them and you can drop -T.", "url": "https://github.com/rstudio/rstudio/pull/7021#discussion_r434014286", "createdAt": "2020-06-02T16:31:15Z", "author": {"login": "jcheng5"}, "path": "src/gwt/panmirror/src/editor/package.json", "diffHunk": "@@ -46,23 +49,30 @@\n     \"prosemirror-view\": \"^1.14.9\",\n     \"react\": \"^16.13.1\",\n     \"react-dom\": \"^16.13.1\",\n+    \"react-window\": \"^1.8.5\",\n     \"tlite\": \"^0.1.9\",\n     \"typescript\": \"3.8.3\",\n     \"zenscroll\": \"^4.0.2\"\n   },\n   \"scripts\": {\n     \"format\": \"prettier --write \\\"src/**/*.ts\\\" \\\"src/**/*.tsx\\\"\",\n     \"lint\": \"tslint -c tslint.json 'src/**/*.{ts,tsx}'\",\n-    \"watch\": \"tsc --watch --noEmit --project './tsconfig.json'\"\n+    \"watch\": \"tsc --watch --noEmit --project './tsconfig.json'\",\n+    \"generate-symbols\": \"tsc --types node --lib es2015,dom \\\"tools/generate-symbols.ts\\\";node \\\"tools/generate-symbols.js\\\"; rm -rf \\\"tools/generate-symbols.js\\\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897f88207963f3f9f10aadf1297f0599b1b1b19f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxNzA4Nw==", "bodyText": "Oh, one of the compiler errors is because\nimport * as fetch from 'node-fetch';\n\nshould be\nimport fetch from 'node-fetch';\n\nThen there are a couple of trivial ones related to null checking.", "url": "https://github.com/rstudio/rstudio/pull/7021#discussion_r434017087", "createdAt": "2020-06-02T16:35:36Z", "author": {"login": "jcheng5"}, "path": "src/gwt/panmirror/src/editor/package.json", "diffHunk": "@@ -46,23 +49,30 @@\n     \"prosemirror-view\": \"^1.14.9\",\n     \"react\": \"^16.13.1\",\n     \"react-dom\": \"^16.13.1\",\n+    \"react-window\": \"^1.8.5\",\n     \"tlite\": \"^0.1.9\",\n     \"typescript\": \"3.8.3\",\n     \"zenscroll\": \"^4.0.2\"\n   },\n   \"scripts\": {\n     \"format\": \"prettier --write \\\"src/**/*.ts\\\" \\\"src/**/*.tsx\\\"\",\n     \"lint\": \"tslint -c tslint.json 'src/**/*.{ts,tsx}'\",\n-    \"watch\": \"tsc --watch --noEmit --project './tsconfig.json'\"\n+    \"watch\": \"tsc --watch --noEmit --project './tsconfig.json'\",\n+    \"generate-symbols\": \"tsc --types node --lib es2015,dom \\\"tools/generate-symbols.ts\\\";node \\\"tools/generate-symbols.js\\\"; rm -rf \\\"tools/generate-symbols.js\\\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxNDI4Ng=="}, "originalCommit": {"oid": "897f88207963f3f9f10aadf1297f0599b1b1b19f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzUyNjY1OnYy", "diffSide": "RIGHT", "path": "src/gwt/panmirror/src/editor/tools/generate-symbols.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozODoyOFrOGd6aow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozODoyOFrOGd6aow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxODk3OQ==", "bodyText": "I think process.exit(1) would be appropriate after this line", "url": "https://github.com/rstudio/rstudio/pull/7021#discussion_r434018979", "createdAt": "2020-06-02T16:38:28Z", "author": {"login": "jcheng5"}, "path": "src/gwt/panmirror/src/editor/tools/generate-symbols.ts", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * generate-symbols.ts\n+ *\n+ * Copyright (C) 2019-20 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+import * as fetch from 'node-fetch';\n+import * as fs from 'fs';\n+import * as os from 'os';\n+import * as unzip from 'unzip';\n+import * as parser from 'fast-xml-parser';\n+\n+// This will enforce the 'age' of the unicode characters and only allow characters\n+// with an age less than or equal to this age.\n+const maxUnicodeAge = 6.0;\n+\n+// The file that should be generated holding the symbol data\n+const outputFile = './src/behaviors/insert_symbol/symbols.json';\n+\n+// The names of blocks of unicode characters to be scan for characters to include.\n+// Blocks will only be included if characters from that block are selected (e.g. characters)\n+// might not meet the maxUnicodeVersion requirement, may be depcrecated or so on).\n+const groupToBlockMapping = [\n+  {\n+    alias: 'Miscellaneous',\n+    blocks: ['Latin-1 Supplement', 'Enclosed Alphanumerics', 'Dingbats', 'Miscellaneous Symbols', 'Letterlike Symbols'],\n+  },\n+  {\n+    alias: 'Mathematical',\n+    blocks: [\n+      'Mathematical Operators',\n+      'Miscellaneous Mathematical Symbols-A',\n+      'Miscellaneous Mathematical Symbols-B',\n+      'Supplemental Mathematical Operators',\n+      'Mathematical Alphanumeric Symbols',\n+    ],\n+  },\n+  {\n+    alias: 'Punctuation',\n+    blocks: ['Supplemental Punctuation'],\n+  },\n+  {\n+    alias: 'Technical',\n+    blocks: ['Miscellaneous Technical'],\n+  },\n+  {\n+    alias: 'Arrows',\n+    blocks: ['Miscellaneous Symbols and Arrows', 'Supplemental Arrows-A', 'Supplemental Arrows-B'],\n+  },\n+  {\n+    alias: 'Ancient',\n+    blocks: ['Ancient Symbols', 'Ancient Greek Numbers'],\n+  },\n+  {\n+    alias: 'Braille',\n+    blocks: ['Braille Patterns'],\n+  },\n+  {\n+    alias: 'Currency',\n+    blocks: ['Currency Symbols'],\n+  },\n+  {\n+    alias: 'Game Symbols',\n+    blocks: ['Mahjong Tiles', 'Domino Tiles', 'Playing Cards', 'Chess Symbols'],\n+  },\n+  {\n+    alias: 'Music',\n+    blocks: ['Musical Symbols'],\n+  },\n+  {\n+    alias: 'Geometric Shapes',\n+    blocks: ['Geometric Shapes', 'Geometric Shapes Extended'],\n+  },\n+  {\n+    alias: 'Ideographic',\n+    blocks: ['Ideographic Description Characters', 'Ideographic Symbols and Punctuation'],\n+  }\n+];\n+\n+// These characters are excluded because they don't render properly in the default font. \n+// Consider re-enabling them as address font issues with unicode.\n+const excludedChars = [\n+  160, // no-break space\n+  65860,65861,65910,65911,65912,65923,65927,65928,65929,65931,65932,65933,65934, // Ancient Characters\n+  11094,11095,11096,11097, // Arrows\n+  10190,10191,120778,120779, // Mathematical\n+  9885,9886,9887,9907,9908,9909,9910,9911,9912,9913,9914,9915,9916,9919,9920,9921,\n+  9922,9923,9926,9927,9929,9930,9932,9933,9936,9938,9941,9942,9943,9944,9945,9946,\n+  9947,9948,9949,9950,9951,9952,9953,9955,9956,9957,9958,9959,9960,9963,9964,9965,\n+  9966,9967,9974,9979,9980,9982,9983,10079,10080, // Miscellaneous\n+  9192, // technical\n+  11801, // punctuation\n+  119049,119050,119051,119052,119053,119054,119055,119059,119060,119061,119062,119063,\n+  119064,119065,119066,119067,119068,119069,119071,119072,119075,119076,119077,119078,\n+  119081,119084,119085,119086,119087,119088,119089,119090,119091,119092,119093,119094,\n+  119095,119096,119097,119098,119099,119100,119101,119102,119103,119104,119105,119106,\n+  119107,119108,119109,119110,119111,119112,119113,119114,119115,119116,119117,119118,\n+  119119,119120,119121,119122,119123,119124,119125,119126,119127,119128,119129,119130,\n+  119131,119132,119133,119134,119135,119136,119137,119138,119139,119140,119141,119142,\n+  119143,119144,119145,119146,119147,119148,119149,119150,119151,119152,119153,119154,\n+  119163,119164,119165,119166,119167,119168,119169,119170,119171,119172,119173,119174,\n+  119175,119176,119177,119178,119179,119180,119181,119182,119183,119184,119185,119188,\n+  119189,119190,119191,119192,119193,119194,119195,119196,119197,119198,119199,119200,\n+  119201,119202,119203,119204,119205,119209,119210,119211,119212,119213,119214,\n+  119215,119216,119217,119218,119219,119220,119221,119222,119223,119224,119225,119226,\n+  119227,119228,119229,119230,119231,119232,119233,119234,119235,119236,119237,119238,\n+  119247,119248,119249,119250,119251,119252,119253,119254,119255,119256,119257,119258,\n+  119259,119260,119261, // musical symbols\n+\n+\n+];\n+\n+// Basic file paths to use when downloading and generating the file. These files will be cleaned up\n+// upon completion.\n+const workingDirectory = os.tmpdir();\n+const targetFileName = 'ucd.nounihan.flat';\n+const targetZipFile = `${workingDirectory}/${targetFileName}.zip`;\n+const targetXmlFile = `${workingDirectory}/${targetFileName}.xml`;\n+\n+// The path that will be used to download the unicode file. This is currently\n+// set to always downlod the latest. The maxUnicodeVersion attribute of each\n+// character is used to decide which characters to include rather than the unicode database\n+// version\n+const unicodeDownloadPath = `https://www.unicode.org/Public/UCD/latest/ucdxml/${targetFileName}.zip`;\n+\n+// Remove any orphaned intermediary files\n+cleanupFiles([targetXmlFile, targetZipFile], true);\n+\n+fetch(unicodeDownloadPath, {method: 'GET'})\n+.then((res) => {\n+  // Download the file\n+  return new Promise<string>((resolve, reject) => {\n+    const file = fs.createWriteStream(targetZipFile);\n+    res.body.on('finish', () => resolve(targetZipFile));\n+    res.body.pipe(file);\n+    file.on('error', reject);\n+  });\n+})\n+.then(() => {\n+  // Unzip the file\n+  return new Promise((resolve, reject) => {\n+    info('Unzipping File', targetZipFile);\n+    const readStream = fs.createReadStream(targetZipFile);\n+    const writeStream = unzip.Extract({ path: workingDirectory });\n+    writeStream.on('error', reject);\n+    writeStream.on('close', () => {\n+      info('Done unzipping', '');\n+      resolve(outputFile);     \n+    });\n+    readStream.pipe(writeStream);\n+  });    \n+})\n+.then(() => {\n+  // Parse XML -> Json\n+  info('Parsing', targetXmlFile);\n+  const fileContents = fs.readFileSync(targetXmlFile, 'utf8');\n+  const options = {\n+    ignoreAttributes: false,\n+    arrayMode: false,\n+  };\n+  const tObj = parser.getTraversalObj(fileContents, options);\n+  const jsonResult = parser.convertToJson(tObj, options);\n+  info('Done Parsing', '');\n+  return jsonResult;\n+})\n+.then((jsonResult) => {\n+  // Read the block from the XML file and generate typed data\n+  info('Reading Raw Data'); \n+  const allIncludedBlocks: Block[] = parseBlocks(jsonResult.ucd.blocks.block);\n+  const allValidSymbols: Character[] = parseSymbols(jsonResult.ucd.repertoire.char);\n+  info(' Blocks ' + allIncludedBlocks.length);\n+  info(' Chars ' + allValidSymbols.length);\n+  info('');\n+\n+  info('Generating Output Data');\n+  const symbolGroups: Group[] = new Array<Group>();\n+  groupToBlockMapping.forEach(mapping => {\n+    const groupName = mapping.alias;\n+    const groupSymbols = allValidSymbols.filter(symbol => {\n+        // Find the child blocks for this Group and use the codepoint to determine\n+        // whether this symbol should be included in this group\n+        const matchingBlockName = mapping.blocks.find(blockName => {\n+          const matchingBlock = allIncludedBlocks.find(block => block.name === blockName);\n+          return symbol.codepoint >= matchingBlock.codepointFirst && symbol.codepoint <= matchingBlock.codepointLast;\n+        });\n+\n+        return matchingBlockName != null;\n+    });\n+    info('Group ' + groupName + ' -> ' + groupSymbols.length + ' symbols');   \n+    symbolGroups.push({ name: groupName, symbols: groupSymbols });\n+  });\n+  info('');\n+  return symbolGroups;\n+})\n+.then((symbolGroups) => {\n+  // Filter out any groups with no valid characters\n+  return symbolGroups.filter(blockGroup => blockGroup.symbols.length > 0);\n+})\n+.then((symbolGroups) => {\n+  // Write the output file\n+  info('Writing output', outputFile);\n+  cleanupFiles([outputFile], false);\n+  const finalJson = JSON.stringify(symbolGroups, null, 2);\n+  fs.writeFileSync(outputFile, finalJson);\n+\n+\n+  const countSymbols = symbolGroups.reduce((count, symbolGroup) => {\n+    return count + symbolGroup.symbols.length;\n+  }, 0);\n+  info(countSymbols + \" total symbols generated\");\n+  info('Done', '');\n+})\n+.catch((message: any) => {\n+  error(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897f88207963f3f9f10aadf1297f0599b1b1b19f"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzU2MTYzOnYy", "diffSide": "RIGHT", "path": "src/gwt/panmirror/src/editor/src/api/widgets/text.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjo0Nzo1OVrOGd6xjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0ODo0MlrOGecsuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNDg0NQ==", "bodyText": "I'm surprised to see any in the type signature here, does HTMLInputElement not work?", "url": "https://github.com/rstudio/rstudio/pull/7021#discussion_r434024845", "createdAt": "2020-06-02T16:47:59Z", "author": {"login": "jcheng5"}, "path": "src/gwt/panmirror/src/editor/src/api/widgets/text.tsx", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * text.tsx\n+ *\n+ * Copyright (C) 2019-20 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+import React, { ChangeEventHandler, KeyboardEventHandler } from 'react';\n+\n+import { WidgetProps } from './react';\n+\n+import './text.css';\n+\n+export interface TextInputProps extends WidgetProps {\n+  widthChars: number;\n+  tabIndex?: number;\n+  className?: string;\n+  placeholder?: string;\n+  iconAdornment? : string;\n+  onChange?: ChangeEventHandler;\n+  onKeyDown?: KeyboardEventHandler<HTMLInputElement>;\n+  onKeyUp?: KeyboardEventHandler<HTMLInputElement>;\n+}\n+\n+export const TextInput = React.forwardRef<any, TextInputProps>((props, ref) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897f88207963f3f9f10aadf1297f0599b1b1b19f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MDY2NA==", "bodyText": "Nope just an error on my part (similar error in select.tsx as well). Resolved thx for catching!", "url": "https://github.com/rstudio/rstudio/pull/7021#discussion_r434580664", "createdAt": "2020-06-03T13:48:42Z", "author": {"login": "dragonstyle"}, "path": "src/gwt/panmirror/src/editor/src/api/widgets/text.tsx", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * text.tsx\n+ *\n+ * Copyright (C) 2019-20 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+import React, { ChangeEventHandler, KeyboardEventHandler } from 'react';\n+\n+import { WidgetProps } from './react';\n+\n+import './text.css';\n+\n+export interface TextInputProps extends WidgetProps {\n+  widthChars: number;\n+  tabIndex?: number;\n+  className?: string;\n+  placeholder?: string;\n+  iconAdornment? : string;\n+  onChange?: ChangeEventHandler;\n+  onKeyDown?: KeyboardEventHandler<HTMLInputElement>;\n+  onKeyUp?: KeyboardEventHandler<HTMLInputElement>;\n+}\n+\n+export const TextInput = React.forwardRef<any, TextInputProps>((props, ref) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNDg0NQ=="}, "originalCommit": {"oid": "897f88207963f3f9f10aadf1297f0599b1b1b19f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzc2MjkyOnYy", "diffSide": "RIGHT", "path": "src/gwt/panmirror/src/editor/src/behaviors/insert_symbol/insert_symbol.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0Mjo0MFrOGd8x_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0Mjo0MFrOGd8x_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1NzcyNw==", "bodyText": "switch to dash not underscore", "url": "https://github.com/rstudio/rstudio/pull/7021#discussion_r434057727", "createdAt": "2020-06-02T17:42:40Z", "author": {"login": "dragonstyle"}, "path": "src/gwt/panmirror/src/editor/src/behaviors/insert_symbol/insert_symbol.tsx", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * insert_symbol.tsx\n+ *\n+ * Copyright (C) 2019-20 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+import { Schema } from 'prosemirror-model';\n+import { EditorState, Transaction, Plugin, PluginKey } from 'prosemirror-state';\n+import { EditorView } from 'prosemirror-view';\n+\n+import React from 'react';\n+import ReactDOM from 'react-dom';\n+\n+import { ProsemirrorCommand, EditorCommandId } from '../../api/command';\n+import { applyStyles } from '../../api/css';\n+import { EditorEvents, EditorEvent } from '../../api/events';\n+import { Extension } from '../../api/extension';\n+import { EditorFormat } from '../../api/format';\n+import { canInsertNode } from '../../api/node';\n+import { EditorOptions } from '../../api/options';\n+import { PandocExtensions } from '../../api/pandoc';\n+import { PandocCapabilities } from '../../api/pandoc_capabilities';\n+import { EditorUI } from '../../api/ui';\n+\n+import { InsertSymbolPopup } from './insert_symbol-popup';\n+\n+const key = new PluginKey<boolean>('insert_symbol');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897f88207963f3f9f10aadf1297f0599b1b1b19f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzg4MTY5OnYy", "diffSide": "RIGHT", "path": "src/gwt/panmirror/src/editor/src/behaviors/insert_symbol/insert_symbol-popup.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODowOTo0MFrOGd98Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODowOTo0MFrOGd98Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA3Njc0Nw==", "bodyText": "forward the classname as well?", "url": "https://github.com/rstudio/rstudio/pull/7021#discussion_r434076747", "createdAt": "2020-06-02T18:09:40Z", "author": {"login": "dragonstyle"}, "path": "src/gwt/panmirror/src/editor/src/behaviors/insert_symbol/insert_symbol-popup.tsx", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * insert_symbol-popup.tsx\n+ *\n+ * Copyright (C) 2019-20 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+import { WidgetProps } from '../../api/widgets/react';\n+import React, { ChangeEvent } from 'react';\n+import SymbolDataManager, { kCategoryAll, SymbolCharacter, SymbolCharacterGroup } from './insert_symbol-data';\n+import { isElementFocused, focusElement } from '../../api/focus';\n+import { Popup } from '../../api/widgets/popup';\n+import { TextInput } from '../../api/widgets/text';\n+import { SelectInput } from '../../api/widgets/select';\n+import SymbolCharacterGrid, { newIndexForKeyboardEvent } from './insert_symbol-grid';\n+\n+import './insert_symbol-styles.css';\n+\n+const symbolDataManager = new SymbolDataManager();\n+\n+interface InsertSymbolPopupProps extends WidgetProps {\n+  enabled: boolean;\n+  size: [number, number];\n+  searchImage?: string;\n+  onInsertText: (text: string) => void;\n+  onClose: VoidFunction;\n+}\n+\n+export const InsertSymbolPopup: React.FC<InsertSymbolPopupProps> = props => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897f88207963f3f9f10aadf1297f0599b1b1b19f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDA4MjEwOnYy", "diffSide": "RIGHT", "path": "src/gwt/panmirror/src/editor/src/behaviors/insert_symbol/insert_symbol-grid.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTowMDowOFrOGd_85A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTowMDowOFrOGd_85A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwOTY2OA==", "bodyText": "Is this redundant to the very similar useEffect a few lines up?", "url": "https://github.com/rstudio/rstudio/pull/7021#discussion_r434109668", "createdAt": "2020-06-02T19:00:08Z", "author": {"login": "jcheng5"}, "path": "src/gwt/panmirror/src/editor/src/behaviors/insert_symbol/insert_symbol-grid.tsx", "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * insert_symbol-grid.tsx\n+ *\n+ * Copyright (C) 2019-20 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+import React from 'react';\n+import { FixedSizeGrid } from 'react-window';\n+\n+import debounce from 'lodash.debounce';\n+\n+import { CharacterGridCellItemData, SymbolCharacterCell } from './insert_symbol-grid-cell';\n+import { SymbolCharacter } from './insert_symbol-data';\n+import { SymbolPreview } from './insert_symbol-grid-preview';\n+import { WidgetProps } from '../../api/widgets/react';\n+\n+import './insert_symbol-grid-styles.css';\n+\n+interface CharacterGridProps extends WidgetProps {\n+  height: number;\n+  width: number;\n+  numberOfColumns: number;\n+  symbolCharacters: SymbolCharacter[];\n+  selectedIndex: number;\n+  onSelectionChanged: (selectedIndex: number) => void;\n+  onSelectionCommitted: VoidFunction;\n+}\n+\n+const kPreviewHeight = 120;\n+const kPreviewWidth = 140;\n+const selectedItemClassName = 'pm-grid-item-selected';\n+\n+\n+\n+const SymbolCharacterGrid = React.forwardRef<any, CharacterGridProps>((props, ref) => {\n+\n+  const columnWidth = Math.floor(props.width / props.numberOfColumns);\n+  const characterCellData: CharacterGridCellItemData = {\n+    symbolCharacters: props.symbolCharacters,\n+    numberOfColumns: props.numberOfColumns,\n+    selectedIndex: props.selectedIndex,\n+    onSelectionChanged: props.onSelectionChanged,\n+    onSelectionCommitted: props.onSelectionCommitted,\n+    selectedItemClassName,\n+  };\n+\n+  const gridRef = React.useRef<FixedSizeGrid>(null);\n+  const handleScroll = debounce(() => {\n+    gridRef.current?.scrollToItem({ rowIndex: Math.floor(props.selectedIndex / props.numberOfColumns) });\n+  }, 5);\n+\n+  React.useEffect(handleScroll, [props.selectedIndex]);\n+\n+  const handleMouseLeave = (event: React.MouseEvent) => {\n+    setMayShowPreview(false);\n+    setShowPreview(false);\n+  };\n+\n+  const handleMouseEnter = (event: React.MouseEvent) => {\n+    setMayShowPreview(true);\n+  };\n+\n+  const handleKeyDown = (event: React.KeyboardEvent) => {\n+    const newIndex = newIndexForKeyboardEvent(\n+      event,\n+      props.selectedIndex,\n+      props.numberOfColumns,\n+      props.symbolCharacters.length,\n+    );\n+    if (newIndex !== undefined) {\n+      props.onSelectionChanged(newIndex);\n+      event.preventDefault();\n+      setMayShowPreview(true);\n+    }\n+  };\n+\n+  const [previewPosition, setPreviewPosition] = React.useState<[number, number]>([0, 0]);\n+  const [showPreview, setShowPreview] = React.useState<boolean>(false);\n+  const [mayShowPreview, setMayShowPreview] = React.useState<boolean>(false);\n+\n+  React.useEffect(() => {\n+    if (mayShowPreview) {\n+      updatePreviewPosition();\n+      maybeShowPreview();\n+    }\n+  }, [props.selectedIndex, mayShowPreview]);\n+\n+  React.useEffect(() => {\n+    if (props.symbolCharacters.length < 1) {\n+      setShowPreview(false);\n+    }\n+  }, [props.symbolCharacters]);\n+  \n+  React.useEffect(() => {\n+    maybeShowPreview();\n+  }, [mayShowPreview]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897f88207963f3f9f10aadf1297f0599b1b1b19f"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDE0NjczOnYy", "diffSide": "RIGHT", "path": "src/gwt/panmirror/src/editor/src/behaviors/insert_symbol/insert_symbol-popup.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxNzowMlrOGeAkKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0Njo0M1rOGecnGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExOTcyMQ==", "bodyText": "I haven't used it before but I think useMemo was designed for this.\nconst symbols = useMemo(\n  () => symbolDataManager.getSymbols(selectedSymbolGroup),\n  [selectedSymbolGroup]\n); \nconst filteredSymbols = useMemo(\n  () => symbolDataManager.filterSymbols(filterText, symbols),\n  [filterText, symbols]\n);\nIt's nice because it makes it clear that the values of symbols and filteredSymbols are purely derived from their inputs, rather than having their own independent statefulness.", "url": "https://github.com/rstudio/rstudio/pull/7021#discussion_r434119721", "createdAt": "2020-06-02T19:17:02Z", "author": {"login": "jcheng5"}, "path": "src/gwt/panmirror/src/editor/src/behaviors/insert_symbol/insert_symbol-popup.tsx", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * insert_symbol-popup.tsx\n+ *\n+ * Copyright (C) 2019-20 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+import { WidgetProps } from '../../api/widgets/react';\n+import React, { ChangeEvent } from 'react';\n+import SymbolDataManager, { kCategoryAll, SymbolCharacter, SymbolCharacterGroup } from './insert_symbol-data';\n+import { isElementFocused, focusElement } from '../../api/focus';\n+import { Popup } from '../../api/widgets/popup';\n+import { TextInput } from '../../api/widgets/text';\n+import { SelectInput } from '../../api/widgets/select';\n+import SymbolCharacterGrid, { newIndexForKeyboardEvent } from './insert_symbol-grid';\n+\n+import './insert_symbol-styles.css';\n+\n+const symbolDataManager = new SymbolDataManager();\n+\n+interface InsertSymbolPopupProps extends WidgetProps {\n+  enabled: boolean;\n+  size: [number, number];\n+  searchImage?: string;\n+  onInsertText: (text: string) => void;\n+  onClose: VoidFunction;\n+}\n+\n+export const InsertSymbolPopup: React.FC<InsertSymbolPopupProps> = props => {\n+  const kPopupChromeHeight = 25;\n+  const popupHeight = props.size[0] - kPopupChromeHeight;\n+  const popupWidth = props.size[1];\n+  const style: React.CSSProperties = {\n+    ...props.style,\n+    height: popupHeight + 'px',\n+    width: popupWidth + 'px',\n+  };\n+\n+  const gridHeight = popupHeight - 48;\n+  const gridWidth = popupWidth;\n+  const kNumberOfcolumns = 12;\n+\n+  const [filterText, setFilterText] = React.useState<string>('');\n+  const [selectedSymbolGroup, setSelectedSymbolGroup] = React.useState<string>(kCategoryAll);\n+  const [selectedSymbolIndex, setSelectedSymbolIndex] = React.useState<number>(0);\n+  const [symbols, setSymbols] = React.useState<SymbolCharacter[]>([]);\n+  const [filteredSymbols, setFilteredSymbols] = React.useState<SymbolCharacter[]>(symbols);\n+\n+  React.useEffect(() => {\n+    const symbolsForGroup: SymbolCharacter[] = symbolDataManager.getSymbols(selectedSymbolGroup);\n+    setSymbols(symbolsForGroup);\n+  }, [selectedSymbolGroup]);\n+\n+  React.useEffect(() => {\n+    setFilteredSymbols(symbolDataManager.filterSymbols(filterText, symbols));\n+  }, [filterText, symbols]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897f88207963f3f9f10aadf1297f0599b1b1b19f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3OTIyNA==", "bodyText": "Great improvement, thank you.", "url": "https://github.com/rstudio/rstudio/pull/7021#discussion_r434579224", "createdAt": "2020-06-03T13:46:43Z", "author": {"login": "dragonstyle"}, "path": "src/gwt/panmirror/src/editor/src/behaviors/insert_symbol/insert_symbol-popup.tsx", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * insert_symbol-popup.tsx\n+ *\n+ * Copyright (C) 2019-20 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+import { WidgetProps } from '../../api/widgets/react';\n+import React, { ChangeEvent } from 'react';\n+import SymbolDataManager, { kCategoryAll, SymbolCharacter, SymbolCharacterGroup } from './insert_symbol-data';\n+import { isElementFocused, focusElement } from '../../api/focus';\n+import { Popup } from '../../api/widgets/popup';\n+import { TextInput } from '../../api/widgets/text';\n+import { SelectInput } from '../../api/widgets/select';\n+import SymbolCharacterGrid, { newIndexForKeyboardEvent } from './insert_symbol-grid';\n+\n+import './insert_symbol-styles.css';\n+\n+const symbolDataManager = new SymbolDataManager();\n+\n+interface InsertSymbolPopupProps extends WidgetProps {\n+  enabled: boolean;\n+  size: [number, number];\n+  searchImage?: string;\n+  onInsertText: (text: string) => void;\n+  onClose: VoidFunction;\n+}\n+\n+export const InsertSymbolPopup: React.FC<InsertSymbolPopupProps> = props => {\n+  const kPopupChromeHeight = 25;\n+  const popupHeight = props.size[0] - kPopupChromeHeight;\n+  const popupWidth = props.size[1];\n+  const style: React.CSSProperties = {\n+    ...props.style,\n+    height: popupHeight + 'px',\n+    width: popupWidth + 'px',\n+  };\n+\n+  const gridHeight = popupHeight - 48;\n+  const gridWidth = popupWidth;\n+  const kNumberOfcolumns = 12;\n+\n+  const [filterText, setFilterText] = React.useState<string>('');\n+  const [selectedSymbolGroup, setSelectedSymbolGroup] = React.useState<string>(kCategoryAll);\n+  const [selectedSymbolIndex, setSelectedSymbolIndex] = React.useState<number>(0);\n+  const [symbols, setSymbols] = React.useState<SymbolCharacter[]>([]);\n+  const [filteredSymbols, setFilteredSymbols] = React.useState<SymbolCharacter[]>(symbols);\n+\n+  React.useEffect(() => {\n+    const symbolsForGroup: SymbolCharacter[] = symbolDataManager.getSymbols(selectedSymbolGroup);\n+    setSymbols(symbolsForGroup);\n+  }, [selectedSymbolGroup]);\n+\n+  React.useEffect(() => {\n+    setFilteredSymbols(symbolDataManager.filterSymbols(filterText, symbols));\n+  }, [filterText, symbols]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExOTcyMQ=="}, "originalCommit": {"oid": "897f88207963f3f9f10aadf1297f0599b1b1b19f"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4363, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}