{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNzU4MDA1", "number": 7522, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzoxNzoyOFrOEVnAjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzoyMDo1MVrOEVnDfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDk0NjcxOnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/core/client/PriorityTaskQueue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzoxNzoyOFrOG8dx_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoxOTo0OFrOG8e5-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1NTY3Ng==", "bodyText": "For nomenclature I'd suggest a different name for this class since a \"priority queue\" is a well known data structure but doesn't have much in common with what's done here. Maybe PreemptiveTaskQueue since the active document can preempt the other queued tasks?", "url": "https://github.com/rstudio/rstudio/pull/7522#discussion_r466055676", "createdAt": "2020-08-05T23:17:28Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/core/client/PriorityTaskQueue.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * PriorityTaskQueue.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+\n+package org.rstudio.core.client;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+\n+import com.google.gwt.user.client.Command;\n+\n+// Task queue that allows tasks to bump themselves up in priority (even after\n+// they have been added to the queue).\n+\n+public class PriorityTaskQueue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "945b9aaa833ff1074435a4b993a4d58bbbb1a0d6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NDEwNQ==", "bodyText": "Good point! Renamed to PreemptiveTaskQueue", "url": "https://github.com/rstudio/rstudio/pull/7522#discussion_r466074105", "createdAt": "2020-08-06T00:19:48Z", "author": {"login": "jjallaire"}, "path": "src/gwt/src/org/rstudio/core/client/PriorityTaskQueue.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * PriorityTaskQueue.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+\n+package org.rstudio.core.client;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+\n+import com.google.gwt.user.client.Command;\n+\n+// Task queue that allows tasks to bump themselves up in priority (even after\n+// they have been added to the queue).\n+\n+public class PriorityTaskQueue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1NTY3Ng=="}, "originalCommit": {"oid": "945b9aaa833ff1074435a4b993a4d58bbbb1a0d6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDk1NDIyOnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/core/client/PriorityTaskQueue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzoyMDo1MVrOG8d2Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoyMDozN1rOG8e6-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1NjcxOQ==", "bodyText": "If the intent here (and elsewhere) is to handle a lot of expensive work, should we defer the processing of the next task so that the browser event loop has a chance to run between tasks?", "url": "https://github.com/rstudio/rstudio/pull/7522#discussion_r466056719", "createdAt": "2020-08-05T23:20:51Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/core/client/PriorityTaskQueue.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * PriorityTaskQueue.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+\n+package org.rstudio.core.client;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+\n+import com.google.gwt.user.client.Command;\n+\n+// Task queue that allows tasks to bump themselves up in priority (even after\n+// they have been added to the queue).\n+\n+public class PriorityTaskQueue\n+{\n+   public interface Task\n+   {\n+      String getLabel(); // used for debug/log output \n+      boolean hasPriority();\n+      void execute(Command done);\n+   }\n+   \n+   public PriorityTaskQueue()\n+   {\n+      this(true, false);\n+   }\n+   \n+   public PriorityTaskQueue(boolean safe)\n+   {\n+      this(safe, false);\n+   }\n+   \n+   public PriorityTaskQueue(boolean safe, boolean log)\n+   {\n+      log_ = log;\n+      safe_ = safe;\n+   }\n+   \n+   public void addTask(Task task)\n+   {\n+      log(\"adding \" + task.getLabel());\n+      taskQueue_.add(task);\n+      processQueue();\n+   }\n+   \n+   private void processQueue()\n+   {\n+      if (processing_)\n+      {\n+         log(\"already running\");\n+         return;\n+      }\n+      \n+      processing_ = true;\n+      processNextTask();\n+   }\n+   \n+   private void processNextTask()\n+   {\n+      log(\"process next task\");\n+      \n+      if (taskQueue_.isEmpty())\n+      {\n+         log(\"done\");\n+         processing_ = false;\n+         return;\n+      }\n+      \n+      // see if any of the tasks have priority\n+      Task nextTask = null;\n+      for (Task task : taskQueue_)\n+      {\n+         if (task.hasPriority())\n+         {\n+            nextTask = task;\n+            log(\"executing \" + nextTask.getLabel() + \" [Priority]\");\n+            break;\n+         }\n+      }\n+      \n+      // if there is no priority task then just remove from the queue\n+      if (nextTask == null)\n+      {\n+         nextTask = taskQueue_.peek();\n+         log(\"executing \" + nextTask.getLabel());  \n+      }\n+      \n+      // remove the task\n+      taskQueue_.remove(nextTask);\n+      \n+      // run the next task and then continue processing. catch any exceptions\n+      // so that we can continue processing if 'safe' was requested\n+      try\n+      {\n+         nextTask.execute(() -> {\n+            log(\"continuation\");\n+            processNextTask(); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "945b9aaa833ff1074435a4b993a4d58bbbb1a0d6"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NDM2Mg==", "bodyText": "In this case I happened to \"know\" that the task would be making an RPC call (so we would be pumping events) but in general this of course won't necessarily be the case. Added a call to scheduledDeferred().", "url": "https://github.com/rstudio/rstudio/pull/7522#discussion_r466074362", "createdAt": "2020-08-06T00:20:37Z", "author": {"login": "jjallaire"}, "path": "src/gwt/src/org/rstudio/core/client/PriorityTaskQueue.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * PriorityTaskQueue.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+\n+package org.rstudio.core.client;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+\n+import com.google.gwt.user.client.Command;\n+\n+// Task queue that allows tasks to bump themselves up in priority (even after\n+// they have been added to the queue).\n+\n+public class PriorityTaskQueue\n+{\n+   public interface Task\n+   {\n+      String getLabel(); // used for debug/log output \n+      boolean hasPriority();\n+      void execute(Command done);\n+   }\n+   \n+   public PriorityTaskQueue()\n+   {\n+      this(true, false);\n+   }\n+   \n+   public PriorityTaskQueue(boolean safe)\n+   {\n+      this(safe, false);\n+   }\n+   \n+   public PriorityTaskQueue(boolean safe, boolean log)\n+   {\n+      log_ = log;\n+      safe_ = safe;\n+   }\n+   \n+   public void addTask(Task task)\n+   {\n+      log(\"adding \" + task.getLabel());\n+      taskQueue_.add(task);\n+      processQueue();\n+   }\n+   \n+   private void processQueue()\n+   {\n+      if (processing_)\n+      {\n+         log(\"already running\");\n+         return;\n+      }\n+      \n+      processing_ = true;\n+      processNextTask();\n+   }\n+   \n+   private void processNextTask()\n+   {\n+      log(\"process next task\");\n+      \n+      if (taskQueue_.isEmpty())\n+      {\n+         log(\"done\");\n+         processing_ = false;\n+         return;\n+      }\n+      \n+      // see if any of the tasks have priority\n+      Task nextTask = null;\n+      for (Task task : taskQueue_)\n+      {\n+         if (task.hasPriority())\n+         {\n+            nextTask = task;\n+            log(\"executing \" + nextTask.getLabel() + \" [Priority]\");\n+            break;\n+         }\n+      }\n+      \n+      // if there is no priority task then just remove from the queue\n+      if (nextTask == null)\n+      {\n+         nextTask = taskQueue_.peek();\n+         log(\"executing \" + nextTask.getLabel());  \n+      }\n+      \n+      // remove the task\n+      taskQueue_.remove(nextTask);\n+      \n+      // run the next task and then continue processing. catch any exceptions\n+      // so that we can continue processing if 'safe' was requested\n+      try\n+      {\n+         nextTask.execute(() -> {\n+            log(\"continuation\");\n+            processNextTask(); ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1NjcxOQ=="}, "originalCommit": {"oid": "945b9aaa833ff1074435a4b993a4d58bbbb1a0d6"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4256, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}