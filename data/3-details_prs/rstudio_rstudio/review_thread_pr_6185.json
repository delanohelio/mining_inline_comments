{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjM3Mzc0", "number": 6185, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozNDoxNFrODeiwUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo1MjoxN1rODejIkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzUzMjk2OnYy", "diffSide": "RIGHT", "path": "src/cpp/core/include/core/FileInfo.hpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozNDoxNFrOFnvGvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODozNDowN1rOFnw-RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMDU1OA==", "bodyText": "Why this change? Isn't it generally risky to return a reference to a class member? Since you then just do c_str(), anyways, why not keep it the same? Performance?", "url": "https://github.com/rstudio/rstudio/pull/6185#discussion_r377210558", "createdAt": "2020-02-10T17:34:14Z", "author": {"login": "gtritchie"}, "path": "src/cpp/core/include/core/FileInfo.hpp", "diffHunk": "@@ -89,7 +89,7 @@ class FileInfo\n    }\n    \n public:\n-   std::string absolutePath() const { return absolutePath_.c_str(); }\n+   const std::string& absolutePath() const { return absolutePath_; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acc19034f87b8d9135deaf26e46a5e3a6fab45"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI0MTE1Nw==", "bodyText": "Right, the old implementation was forcing a copy every time we requested the absolute path of a FileInfo object:\n\nWe call .c_str(), returning a const char*,\nThat's implicitly converted to std::string, constructing a new std::string from that C string,\nThat also implies finding the null terminator when constructing that new std::string.\n\nReturning a const-ref is risky, since it implies someone could store a reference that outlives the parent object. I'll change this back to return a plain std::string -- at least then we're still just creating a std::string from a std::string and the compiler is likely to optimize any copies away anyhow.", "url": "https://github.com/rstudio/rstudio/pull/6185#discussion_r377241157", "createdAt": "2020-02-10T18:34:07Z", "author": {"login": "kevinushey"}, "path": "src/cpp/core/include/core/FileInfo.hpp", "diffHunk": "@@ -89,7 +89,7 @@ class FileInfo\n    }\n    \n public:\n-   std::string absolutePath() const { return absolutePath_.c_str(); }\n+   const std::string& absolutePath() const { return absolutePath_; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMDU1OA=="}, "originalCommit": {"oid": "87acc19034f87b8d9135deaf26e46a5e3a6fab45"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzUzNjcyOnYy", "diffSide": "RIGHT", "path": "src/cpp/core/FileInfo.cpp", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozNTozM1rOFnvJNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODo1NDoyNFrOFnxnlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMTE4OA==", "bodyText": "Out of curiosity, what's resulting in trailing \\0 s?", "url": "https://github.com/rstudio/rstudio/pull/6185#discussion_r377211188", "createdAt": "2020-02-10T17:35:33Z", "author": {"login": "gtritchie"}, "path": "src/cpp/core/FileInfo.cpp", "diffHunk": "@@ -43,6 +43,8 @@ FileInfo::FileInfo(const std::string& absolutePath,\n       lastWriteTime_(0),\n       isSymlink_(isSymlink)\n {\n+   // some file paths might be constructed with trailing nul bytes; remove those here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acc19034f87b8d9135deaf26e46a5e3a6fab45"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI0Mzc2Mg==", "bodyText": "I had this change in my mind (although this should be fixed now):\n1e3bed6\nBut the fact that we were calling .c_str() before made me think we need to be cautious about any other potential strings coming in with trailing null bytes.", "url": "https://github.com/rstudio/rstudio/pull/6185#discussion_r377243762", "createdAt": "2020-02-10T18:39:23Z", "author": {"login": "kevinushey"}, "path": "src/cpp/core/FileInfo.cpp", "diffHunk": "@@ -43,6 +43,8 @@ FileInfo::FileInfo(const std::string& absolutePath,\n       lastWriteTime_(0),\n       isSymlink_(isSymlink)\n {\n+   // some file paths might be constructed with trailing nul bytes; remove those here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMTE4OA=="}, "originalCommit": {"oid": "87acc19034f87b8d9135deaf26e46a5e3a6fab45"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI0OTM2MQ==", "bodyText": "I'm still not clear on this; a std::string initialized from a C string (e.g. char *) always stores the trailing \\0. So I think absolutePath_ = absolutePath_.c_str() is a noop?\nSelf-correction! Only time std::string is required to store \\0 (whether trailing or embedded) is with constructors that take a length argument.", "url": "https://github.com/rstudio/rstudio/pull/6185#discussion_r377249361", "createdAt": "2020-02-10T18:50:12Z", "author": {"login": "gtritchie"}, "path": "src/cpp/core/FileInfo.cpp", "diffHunk": "@@ -43,6 +43,8 @@ FileInfo::FileInfo(const std::string& absolutePath,\n       lastWriteTime_(0),\n       isSymlink_(isSymlink)\n {\n+   // some file paths might be constructed with trailing nul bytes; remove those here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMTE4OA=="}, "originalCommit": {"oid": "87acc19034f87b8d9135deaf26e46a5e3a6fab45"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1MTczNA==", "bodyText": "Right :-) And we were constructing strings with a length in that particular spot, and I recall seeing that this was actually something like a \"size of allocated space for file path\" rather than \"actual length of file path\" in some cases.", "url": "https://github.com/rstudio/rstudio/pull/6185#discussion_r377251734", "createdAt": "2020-02-10T18:54:24Z", "author": {"login": "kevinushey"}, "path": "src/cpp/core/FileInfo.cpp", "diffHunk": "@@ -43,6 +43,8 @@ FileInfo::FileInfo(const std::string& absolutePath,\n       lastWriteTime_(0),\n       isSymlink_(isSymlink)\n {\n+   // some file paths might be constructed with trailing nul bytes; remove those here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMTE4OA=="}, "originalCommit": {"oid": "87acc19034f87b8d9135deaf26e46a5e3a6fab45"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzU5NTA1OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/projects/SessionProjectContext.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo1MjoxN1rOFnvsOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODo0MToxMFrOFnxLxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMDE1Mg==", "bodyText": "What do you think about adding another pref (with no UI) whose value is an array of additional directories to exclude from monitoring? Realize the ideal solution is more along the lines of a .ignore file, but as that's unlikely to land in 1.3 it'd be nice to have an escape hatch for cases where something besides the hardcoded list needs to be excluded.", "url": "https://github.com/rstudio/rstudio/pull/6185#discussion_r377220152", "createdAt": "2020-02-10T17:52:17Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/projects/SessionProjectContext.cpp", "diffHunk": "@@ -477,12 +477,13 @@ void ProjectContext::onDeferredInit(bool newSession)\n                             this, _1);\n    cb.onUnregistered = bind(&ProjectContext::fileMonitorTermination,\n                             this, Success());\n+\n+   bool hideObjectFiles = prefs::userPrefs().hideObjectFiles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acc19034f87b8d9135deaf26e46a5e3a6fab45"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI0NDYxMg==", "bodyText": "That sounds like a good idea to me as well -- it'd be nice to have as an escape hatch.", "url": "https://github.com/rstudio/rstudio/pull/6185#discussion_r377244612", "createdAt": "2020-02-10T18:41:10Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/projects/SessionProjectContext.cpp", "diffHunk": "@@ -477,12 +477,13 @@ void ProjectContext::onDeferredInit(bool newSession)\n                             this, _1);\n    cb.onUnregistered = bind(&ProjectContext::fileMonitorTermination,\n                             this, Success());\n+\n+   bool hideObjectFiles = prefs::userPrefs().hideObjectFiles();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMDE1Mg=="}, "originalCommit": {"oid": "87acc19034f87b8d9135deaf26e46a5e3a6fab45"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4051, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}