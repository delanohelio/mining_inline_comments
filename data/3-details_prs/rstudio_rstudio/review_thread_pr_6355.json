{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMTA4Mjk1", "number": 6355, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjoyNDoyN1rODjrUuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzo0ODo1OVrODjsBjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzM2NTcxOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionDependencies.R", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjoyNDoyN1rOFvnsJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzowMzo0MVrOFwykug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3NzY2OQ==", "bodyText": "Double-checking: if a package is installed, but its dependencies are not installed (or not up-to-date), those dependencies would still get installed. Is that correct?", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r385477669", "createdAt": "2020-02-28T02:24:27Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/modules/SessionDependencies.R", "diffHunk": "@@ -0,0 +1,155 @@\n+#\n+# SessionDependencies.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+# Topographically sorts a list of packages (nodes) by their dependencies (edges). Note that this is\n+# not meant to be a general-purpose topo sort algorithm, and that it returns packages in the correct\n+# installation order, which is the exact reverse of traditional topological order. For example,\n+# given packages with dependencies a -> b -> c, we would want to install packages in the order \"c\",\n+# \"b\", and then \"a\".\n+.rs.addFunction(\"topoSortPackages\", function(nodes, edges) {\n+   # List of sorted packages\n+   sorted <- c()\n+\n+   # All nodes are unvisited to begin with\n+   visited <- c()\n+\n+   # Define recursive descent function for dependencies\n+   visit <- function(node, stack) {\n+      if (node %in% visited) {\n+         return()\n+      }\n+      if (node %in% stack) {\n+         # We visited this node while visiting itself; this is a dependency loop.\n+         stop(\"Package dependency graph is not a directed acyclic graph.\")\n+      }\n+\n+      # Visit all the edges of this node\n+      stack <- c(stack, node)\n+      for (edge in edges) {\n+         if (identical(edge$from, node)) {\n+            visit(edge$to, stack)\n+         }\n+      }\n+\n+      visited <<- c(visited, node)\n+      sorted <<- c(sorted, node)\n+   }\n+\n+   # Keep visiting unvisited nodes until we have visited all of them\n+   while (length(visited) < length(nodes)) {\n+      for (node in nodes) {\n+         if (!(node %in% visited)) {\n+            visit(node, c())\n+            break\n+         }\n+      }\n+   }\n+\n+   # Return topologically sorted list\n+   sorted\n+})\n+\n+.rs.addFunction(\"expandPkgDependencies\", function(dependencies) {\n+   .rs.expandDependencies(available.packages(), installed.packages(), dependencies)\n+})\n+\n+.rs.addFunction(\"expandDependencies\", function(available, installed, dependencies) {\n+   # A list of nodes (package names) to be installed\n+   nodes <- c()\n+\n+   # A list of details for packages to be installed\n+   packages <- dependencies\n+\n+   # A vector of lists, with \"from\" and \"to\" named elements giving the dependencies\n+   edges <- list()\n+\n+   # Get the dependencies of each package\n+   for (dep in dependencies) {\n+      # Add the package itself to the list of nodes\n+      nodes <- c(nodes, dep$name)\n+   }\n+\n+   # Look for dependencies of each package\n+   for (dep in dependencies) {\n+      # Dependencies are discovered from these three fields\n+      fields <- c(\"Depends\", \"Imports\", \"LinkingTo\")\n+      for (field in fields) {\n+         # Read contents for field (ignore if no contents)\n+         contents <- available[dep$name, field]\n+         if (!is.character(contents))\n+            next\n+\n+         # Split into a list of individual package names, using comma/whitespace as a delimiter\n+         prereqs <- strsplit(contents, \"\\\\s*,\\\\s*\")[[1]]\n+\n+         # Parse the package names into groups:\n+         # 1. The package name\n+         # 2. The package's requirements\n+         # 3. The package's version\n+         parsed <- regexec(\"([a-zA-Z0-9._]+)(?:\\\\s*\\\\(([><=]+)\\\\s*([0-9.-]+)\\\\))?\", prereqs)\n+         matches <- regmatches(prereqs, parsed)\n+\n+         # Decompose matches into additional nodes\n+         for (match in matches) {\n+            if (length(match) < 2)\n+               next\n+\n+            # Extract package name from regex result\n+            pkgName <- match[[2]]\n+\n+            # Ignore packages that don't have an entry in the availability list\n+            if (!(pkgName %in% rownames(available)))\n+                next\n+\n+            # Append to node list if we don't know about it already...\n+            if (!pkgName %in% nodes) {\n+               nodes <- c(nodes, pkgName)\n+\n+               # ... and it isn't already installed.\n+               if (!(pkgName %in% rownames(installed)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5Mjg3MQ==", "bodyText": "Also, IIUC this doesn't check whether the installed package is new enough (e.g. pkg 1.0.0 is installed but 1.0.1 is required)", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r385492871", "createdAt": "2020-02-28T03:35:39Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/modules/SessionDependencies.R", "diffHunk": "@@ -0,0 +1,155 @@\n+#\n+# SessionDependencies.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+# Topographically sorts a list of packages (nodes) by their dependencies (edges). Note that this is\n+# not meant to be a general-purpose topo sort algorithm, and that it returns packages in the correct\n+# installation order, which is the exact reverse of traditional topological order. For example,\n+# given packages with dependencies a -> b -> c, we would want to install packages in the order \"c\",\n+# \"b\", and then \"a\".\n+.rs.addFunction(\"topoSortPackages\", function(nodes, edges) {\n+   # List of sorted packages\n+   sorted <- c()\n+\n+   # All nodes are unvisited to begin with\n+   visited <- c()\n+\n+   # Define recursive descent function for dependencies\n+   visit <- function(node, stack) {\n+      if (node %in% visited) {\n+         return()\n+      }\n+      if (node %in% stack) {\n+         # We visited this node while visiting itself; this is a dependency loop.\n+         stop(\"Package dependency graph is not a directed acyclic graph.\")\n+      }\n+\n+      # Visit all the edges of this node\n+      stack <- c(stack, node)\n+      for (edge in edges) {\n+         if (identical(edge$from, node)) {\n+            visit(edge$to, stack)\n+         }\n+      }\n+\n+      visited <<- c(visited, node)\n+      sorted <<- c(sorted, node)\n+   }\n+\n+   # Keep visiting unvisited nodes until we have visited all of them\n+   while (length(visited) < length(nodes)) {\n+      for (node in nodes) {\n+         if (!(node %in% visited)) {\n+            visit(node, c())\n+            break\n+         }\n+      }\n+   }\n+\n+   # Return topologically sorted list\n+   sorted\n+})\n+\n+.rs.addFunction(\"expandPkgDependencies\", function(dependencies) {\n+   .rs.expandDependencies(available.packages(), installed.packages(), dependencies)\n+})\n+\n+.rs.addFunction(\"expandDependencies\", function(available, installed, dependencies) {\n+   # A list of nodes (package names) to be installed\n+   nodes <- c()\n+\n+   # A list of details for packages to be installed\n+   packages <- dependencies\n+\n+   # A vector of lists, with \"from\" and \"to\" named elements giving the dependencies\n+   edges <- list()\n+\n+   # Get the dependencies of each package\n+   for (dep in dependencies) {\n+      # Add the package itself to the list of nodes\n+      nodes <- c(nodes, dep$name)\n+   }\n+\n+   # Look for dependencies of each package\n+   for (dep in dependencies) {\n+      # Dependencies are discovered from these three fields\n+      fields <- c(\"Depends\", \"Imports\", \"LinkingTo\")\n+      for (field in fields) {\n+         # Read contents for field (ignore if no contents)\n+         contents <- available[dep$name, field]\n+         if (!is.character(contents))\n+            next\n+\n+         # Split into a list of individual package names, using comma/whitespace as a delimiter\n+         prereqs <- strsplit(contents, \"\\\\s*,\\\\s*\")[[1]]\n+\n+         # Parse the package names into groups:\n+         # 1. The package name\n+         # 2. The package's requirements\n+         # 3. The package's version\n+         parsed <- regexec(\"([a-zA-Z0-9._]+)(?:\\\\s*\\\\(([><=]+)\\\\s*([0-9.-]+)\\\\))?\", prereqs)\n+         matches <- regmatches(prereqs, parsed)\n+\n+         # Decompose matches into additional nodes\n+         for (match in matches) {\n+            if (length(match) < 2)\n+               next\n+\n+            # Extract package name from regex result\n+            pkgName <- match[[2]]\n+\n+            # Ignore packages that don't have an entry in the availability list\n+            if (!(pkgName %in% rownames(available)))\n+                next\n+\n+            # Append to node list if we don't know about it already...\n+            if (!pkgName %in% nodes) {\n+               nodes <- c(nodes, pkgName)\n+\n+               # ... and it isn't already installed.\n+               if (!(pkgName %in% rownames(installed)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3NzY2OQ=="}, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwNDU3MA==", "bodyText": "if a package is installed, but its dependencies are not installed (or not up-to-date), those dependencies would still get installed. Is that correct?\n\nYep.\n\nthis doesn't check whether the installed package is new enough (e.g. pkg 1.0.0 is installed but 1.0.1 is required)\n\nThat's true. I'll add a test and check for that.", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r386704570", "createdAt": "2020-03-02T23:03:41Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionDependencies.R", "diffHunk": "@@ -0,0 +1,155 @@\n+#\n+# SessionDependencies.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+# Topographically sorts a list of packages (nodes) by their dependencies (edges). Note that this is\n+# not meant to be a general-purpose topo sort algorithm, and that it returns packages in the correct\n+# installation order, which is the exact reverse of traditional topological order. For example,\n+# given packages with dependencies a -> b -> c, we would want to install packages in the order \"c\",\n+# \"b\", and then \"a\".\n+.rs.addFunction(\"topoSortPackages\", function(nodes, edges) {\n+   # List of sorted packages\n+   sorted <- c()\n+\n+   # All nodes are unvisited to begin with\n+   visited <- c()\n+\n+   # Define recursive descent function for dependencies\n+   visit <- function(node, stack) {\n+      if (node %in% visited) {\n+         return()\n+      }\n+      if (node %in% stack) {\n+         # We visited this node while visiting itself; this is a dependency loop.\n+         stop(\"Package dependency graph is not a directed acyclic graph.\")\n+      }\n+\n+      # Visit all the edges of this node\n+      stack <- c(stack, node)\n+      for (edge in edges) {\n+         if (identical(edge$from, node)) {\n+            visit(edge$to, stack)\n+         }\n+      }\n+\n+      visited <<- c(visited, node)\n+      sorted <<- c(sorted, node)\n+   }\n+\n+   # Keep visiting unvisited nodes until we have visited all of them\n+   while (length(visited) < length(nodes)) {\n+      for (node in nodes) {\n+         if (!(node %in% visited)) {\n+            visit(node, c())\n+            break\n+         }\n+      }\n+   }\n+\n+   # Return topologically sorted list\n+   sorted\n+})\n+\n+.rs.addFunction(\"expandPkgDependencies\", function(dependencies) {\n+   .rs.expandDependencies(available.packages(), installed.packages(), dependencies)\n+})\n+\n+.rs.addFunction(\"expandDependencies\", function(available, installed, dependencies) {\n+   # A list of nodes (package names) to be installed\n+   nodes <- c()\n+\n+   # A list of details for packages to be installed\n+   packages <- dependencies\n+\n+   # A vector of lists, with \"from\" and \"to\" named elements giving the dependencies\n+   edges <- list()\n+\n+   # Get the dependencies of each package\n+   for (dep in dependencies) {\n+      # Add the package itself to the list of nodes\n+      nodes <- c(nodes, dep$name)\n+   }\n+\n+   # Look for dependencies of each package\n+   for (dep in dependencies) {\n+      # Dependencies are discovered from these three fields\n+      fields <- c(\"Depends\", \"Imports\", \"LinkingTo\")\n+      for (field in fields) {\n+         # Read contents for field (ignore if no contents)\n+         contents <- available[dep$name, field]\n+         if (!is.character(contents))\n+            next\n+\n+         # Split into a list of individual package names, using comma/whitespace as a delimiter\n+         prereqs <- strsplit(contents, \"\\\\s*,\\\\s*\")[[1]]\n+\n+         # Parse the package names into groups:\n+         # 1. The package name\n+         # 2. The package's requirements\n+         # 3. The package's version\n+         parsed <- regexec(\"([a-zA-Z0-9._]+)(?:\\\\s*\\\\(([><=]+)\\\\s*([0-9.-]+)\\\\))?\", prereqs)\n+         matches <- regmatches(prereqs, parsed)\n+\n+         # Decompose matches into additional nodes\n+         for (match in matches) {\n+            if (length(match) < 2)\n+               next\n+\n+            # Extract package name from regex result\n+            pkgName <- match[[2]]\n+\n+            # Ignore packages that don't have an entry in the availability list\n+            if (!(pkgName %in% rownames(available)))\n+                next\n+\n+            # Append to node list if we don't know about it already...\n+            if (!pkgName %in% nodes) {\n+               nodes <- c(nodes, pkgName)\n+\n+               # ... and it isn't already installed.\n+               if (!(pkgName %in% rownames(installed)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3NzY2OQ=="}, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzM3MTA4OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionDependencies.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjoyODoxNlrOFvnvhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoyMDo1NVrOFw0KXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3ODUzNA==", "bodyText": "Nit: setting this explicitly will fail on Linux and may fail on macOS:\n> install.packages(\"digest\", type = \"both\")\nInstalling package into '/root/R/x86_64-pc-linux-gnu-library/3.4'\n(as 'lib' is unspecified)\nError in install.packages(\"digest\", type = \"both\") :\n  type == \"both\" can only be used on Windows or a CRAN build for macOS\n\nI'd recommend just leaving this unset / to the default value.", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r385478534", "createdAt": "2020-02-28T02:28:16Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/modules/SessionDependencies.cpp", "diffHunk": "@@ -381,6 +463,10 @@ Error installDependencies(const json::JsonRpcRequest& request,\n             {\n                script += \"options(pkgType = 'source'); \";\n             }\n+            else\n+            {\n+               script += \"options(pkgType = 'both'); \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDU5MQ==", "bodyText": "Done!", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r386730591", "createdAt": "2020-03-03T00:20:55Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionDependencies.cpp", "diffHunk": "@@ -381,6 +463,10 @@ Error installDependencies(const json::JsonRpcRequest& request,\n             {\n                script += \"options(pkgType = 'source'); \";\n             }\n+            else\n+            {\n+               script += \"options(pkgType = 'both'); \";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3ODUzNA=="}, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzM3MzY1OnYy", "diffSide": "RIGHT", "path": "src/cpp/tests/testthat/test-dependencies.R", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjozMDoyMVrOFvnxKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoyMTo1OVrOFw0LmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3ODk1Mg==", "bodyText": "Nit: the result of available.packages() is normally a matrix rather than a data frame, and I don't think we explicitly convert the matrix to a data.frame when we use it. Would be worth testing with a matrix just to be sure we're mocking everything as expected.", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r385478952", "createdAt": "2020-02-28T02:30:21Z", "author": {"login": "kevinushey"}, "path": "src/cpp/tests/testthat/test-dependencies.R", "diffHunk": "@@ -0,0 +1,115 @@\n+#\n+# test-dependencies.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+context(\"dependencies\")\n+\n+test_that(\"simple topological sort works\", {\n+   # unsorted nodes\n+   nodes <- c(\"b\", \"a\", \"c\")\n+\n+   # edges a -> b -> c\n+   edges <- list(\n+      list(from = \"a\", to = \"b\"),\n+      list(from = \"b\", to = \"c\"))\n+   \n+   # in this configuration we'd expect to install package c, then package b, then package a\n+   expect_equal(.rs.topoSortPackages(nodes, edges), \n+                c(\"c\", \"b\", \"a\"))\n+})\n+\n+test_that(\"simple expansion and sorting is done correctly\", {\n+   # simulation of available.packages for a simple set of packages, foo -> bar -> baz\n+   available <- data.frame(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDkwNQ==", "bodyText": "I've switched to matrices for the test data.", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r386730905", "createdAt": "2020-03-03T00:21:59Z", "author": {"login": "jmcphers"}, "path": "src/cpp/tests/testthat/test-dependencies.R", "diffHunk": "@@ -0,0 +1,115 @@\n+#\n+# test-dependencies.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+context(\"dependencies\")\n+\n+test_that(\"simple topological sort works\", {\n+   # unsorted nodes\n+   nodes <- c(\"b\", \"a\", \"c\")\n+\n+   # edges a -> b -> c\n+   edges <- list(\n+      list(from = \"a\", to = \"b\"),\n+      list(from = \"b\", to = \"c\"))\n+   \n+   # in this configuration we'd expect to install package c, then package b, then package a\n+   expect_equal(.rs.topoSortPackages(nodes, edges), \n+                c(\"c\", \"b\", \"a\"))\n+})\n+\n+test_that(\"simple expansion and sorting is done correctly\", {\n+   # simulation of available.packages for a simple set of packages, foo -> bar -> baz\n+   available <- data.frame(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3ODk1Mg=="}, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzQ1NTU5OnYy", "diffSide": "RIGHT", "path": "src/cpp/tests/testthat/test-dependencies.R", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzoyODo1M1rOFvoiRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDozMzoyN1rOFw0Y_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5MTUyNA==", "bodyText": "Could we also add a test case where multiple packages depend on the same package?", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r385491524", "createdAt": "2020-02-28T03:28:53Z", "author": {"login": "kevinushey"}, "path": "src/cpp/tests/testthat/test-dependencies.R", "diffHunk": "@@ -0,0 +1,115 @@\n+#\n+# test-dependencies.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+context(\"dependencies\")\n+\n+test_that(\"simple topological sort works\", {\n+   # unsorted nodes\n+   nodes <- c(\"b\", \"a\", \"c\")\n+\n+   # edges a -> b -> c\n+   edges <- list(\n+      list(from = \"a\", to = \"b\"),\n+      list(from = \"b\", to = \"c\"))\n+   \n+   # in this configuration we'd expect to install package c, then package b, then package a\n+   expect_equal(.rs.topoSortPackages(nodes, edges), \n+                c(\"c\", \"b\", \"a\"))\n+})\n+\n+test_that(\"simple expansion and sorting is done correctly\", {\n+   # simulation of available.packages for a simple set of packages, foo -> bar -> baz\n+   available <- data.frame(\n+         Package   = c(\"foo\",                      \"bar\", \"baz\"),\n+         Version   = c(\"1.0\",                      \"1.1\", \"2.0\"),\n+         Depends   = c(\"R (>= 3.2), bar (>= 1.1)\",  NA,    NA),\n+         Imports   = c(NA,                          \"baz\", NA),\n+         LinkingTo = c(NA,                          NA,    NA),\n+         stringsAsFactors = FALSE)\n+   rownames(available) <- available[[1]]\n+\n+   # simulation of the dependencies we want to install; just one package\n+   dependencies <- list(list(\n+         name     = \"foo\",\n+         location = \"cran\",\n+         version  = \"1.0\",\n+         source   = FALSE))\n+\n+   result <- .rs.expandDependencies(available, data.frame(), dependencies)\n+\n+   expect_equal(!!result, list(\n+         list(name     = \"bar\",\n+              location = \"cran\",\n+              version  = \"1.1\",\n+              source   = FALSE),\n+         list(name     = \"foo\",\n+              location = \"cran\",\n+              version  = \"1.0\",\n+              source   = FALSE)))\n+})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNDMzMg==", "bodyText": "Done. (It worked out of the box, thankfully!)", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r386734332", "createdAt": "2020-03-03T00:33:27Z", "author": {"login": "jmcphers"}, "path": "src/cpp/tests/testthat/test-dependencies.R", "diffHunk": "@@ -0,0 +1,115 @@\n+#\n+# test-dependencies.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+context(\"dependencies\")\n+\n+test_that(\"simple topological sort works\", {\n+   # unsorted nodes\n+   nodes <- c(\"b\", \"a\", \"c\")\n+\n+   # edges a -> b -> c\n+   edges <- list(\n+      list(from = \"a\", to = \"b\"),\n+      list(from = \"b\", to = \"c\"))\n+   \n+   # in this configuration we'd expect to install package c, then package b, then package a\n+   expect_equal(.rs.topoSortPackages(nodes, edges), \n+                c(\"c\", \"b\", \"a\"))\n+})\n+\n+test_that(\"simple expansion and sorting is done correctly\", {\n+   # simulation of available.packages for a simple set of packages, foo -> bar -> baz\n+   available <- data.frame(\n+         Package   = c(\"foo\",                      \"bar\", \"baz\"),\n+         Version   = c(\"1.0\",                      \"1.1\", \"2.0\"),\n+         Depends   = c(\"R (>= 3.2), bar (>= 1.1)\",  NA,    NA),\n+         Imports   = c(NA,                          \"baz\", NA),\n+         LinkingTo = c(NA,                          NA,    NA),\n+         stringsAsFactors = FALSE)\n+   rownames(available) <- available[[1]]\n+\n+   # simulation of the dependencies we want to install; just one package\n+   dependencies <- list(list(\n+         name     = \"foo\",\n+         location = \"cran\",\n+         version  = \"1.0\",\n+         source   = FALSE))\n+\n+   result <- .rs.expandDependencies(available, data.frame(), dependencies)\n+\n+   expect_equal(!!result, list(\n+         list(name     = \"bar\",\n+              location = \"cran\",\n+              version  = \"1.1\",\n+              source   = FALSE),\n+         list(name     = \"foo\",\n+              location = \"cran\",\n+              version  = \"1.0\",\n+              source   = FALSE)))\n+})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5MTUyNA=="}, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzQ1NzI3OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionDependencies.R", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzozMDoxM1rOFvojTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDozNTozNlrOFw0bgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5MTc5MQ==", "bodyText": "I think we should test for is.na() here as well (since this could be NA_character_)", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r385491791", "createdAt": "2020-02-28T03:30:13Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/modules/SessionDependencies.R", "diffHunk": "@@ -0,0 +1,155 @@\n+#\n+# SessionDependencies.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+# Topographically sorts a list of packages (nodes) by their dependencies (edges). Note that this is\n+# not meant to be a general-purpose topo sort algorithm, and that it returns packages in the correct\n+# installation order, which is the exact reverse of traditional topological order. For example,\n+# given packages with dependencies a -> b -> c, we would want to install packages in the order \"c\",\n+# \"b\", and then \"a\".\n+.rs.addFunction(\"topoSortPackages\", function(nodes, edges) {\n+   # List of sorted packages\n+   sorted <- c()\n+\n+   # All nodes are unvisited to begin with\n+   visited <- c()\n+\n+   # Define recursive descent function for dependencies\n+   visit <- function(node, stack) {\n+      if (node %in% visited) {\n+         return()\n+      }\n+      if (node %in% stack) {\n+         # We visited this node while visiting itself; this is a dependency loop.\n+         stop(\"Package dependency graph is not a directed acyclic graph.\")\n+      }\n+\n+      # Visit all the edges of this node\n+      stack <- c(stack, node)\n+      for (edge in edges) {\n+         if (identical(edge$from, node)) {\n+            visit(edge$to, stack)\n+         }\n+      }\n+\n+      visited <<- c(visited, node)\n+      sorted <<- c(sorted, node)\n+   }\n+\n+   # Keep visiting unvisited nodes until we have visited all of them\n+   while (length(visited) < length(nodes)) {\n+      for (node in nodes) {\n+         if (!(node %in% visited)) {\n+            visit(node, c())\n+            break\n+         }\n+      }\n+   }\n+\n+   # Return topologically sorted list\n+   sorted\n+})\n+\n+.rs.addFunction(\"expandPkgDependencies\", function(dependencies) {\n+   .rs.expandDependencies(available.packages(), installed.packages(), dependencies)\n+})\n+\n+.rs.addFunction(\"expandDependencies\", function(available, installed, dependencies) {\n+   # A list of nodes (package names) to be installed\n+   nodes <- c()\n+\n+   # A list of details for packages to be installed\n+   packages <- dependencies\n+\n+   # A vector of lists, with \"from\" and \"to\" named elements giving the dependencies\n+   edges <- list()\n+\n+   # Get the dependencies of each package\n+   for (dep in dependencies) {\n+      # Add the package itself to the list of nodes\n+      nodes <- c(nodes, dep$name)\n+   }\n+\n+   # Look for dependencies of each package\n+   for (dep in dependencies) {\n+      # Dependencies are discovered from these three fields\n+      fields <- c(\"Depends\", \"Imports\", \"LinkingTo\")\n+      for (field in fields) {\n+         # Read contents for field (ignore if no contents)\n+         contents <- available[dep$name, field]\n+         if (!is.character(contents))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNDk3OA==", "bodyText": "Done!", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r386734978", "createdAt": "2020-03-03T00:35:36Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionDependencies.R", "diffHunk": "@@ -0,0 +1,155 @@\n+#\n+# SessionDependencies.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+# Topographically sorts a list of packages (nodes) by their dependencies (edges). Note that this is\n+# not meant to be a general-purpose topo sort algorithm, and that it returns packages in the correct\n+# installation order, which is the exact reverse of traditional topological order. For example,\n+# given packages with dependencies a -> b -> c, we would want to install packages in the order \"c\",\n+# \"b\", and then \"a\".\n+.rs.addFunction(\"topoSortPackages\", function(nodes, edges) {\n+   # List of sorted packages\n+   sorted <- c()\n+\n+   # All nodes are unvisited to begin with\n+   visited <- c()\n+\n+   # Define recursive descent function for dependencies\n+   visit <- function(node, stack) {\n+      if (node %in% visited) {\n+         return()\n+      }\n+      if (node %in% stack) {\n+         # We visited this node while visiting itself; this is a dependency loop.\n+         stop(\"Package dependency graph is not a directed acyclic graph.\")\n+      }\n+\n+      # Visit all the edges of this node\n+      stack <- c(stack, node)\n+      for (edge in edges) {\n+         if (identical(edge$from, node)) {\n+            visit(edge$to, stack)\n+         }\n+      }\n+\n+      visited <<- c(visited, node)\n+      sorted <<- c(sorted, node)\n+   }\n+\n+   # Keep visiting unvisited nodes until we have visited all of them\n+   while (length(visited) < length(nodes)) {\n+      for (node in nodes) {\n+         if (!(node %in% visited)) {\n+            visit(node, c())\n+            break\n+         }\n+      }\n+   }\n+\n+   # Return topologically sorted list\n+   sorted\n+})\n+\n+.rs.addFunction(\"expandPkgDependencies\", function(dependencies) {\n+   .rs.expandDependencies(available.packages(), installed.packages(), dependencies)\n+})\n+\n+.rs.addFunction(\"expandDependencies\", function(available, installed, dependencies) {\n+   # A list of nodes (package names) to be installed\n+   nodes <- c()\n+\n+   # A list of details for packages to be installed\n+   packages <- dependencies\n+\n+   # A vector of lists, with \"from\" and \"to\" named elements giving the dependencies\n+   edges <- list()\n+\n+   # Get the dependencies of each package\n+   for (dep in dependencies) {\n+      # Add the package itself to the list of nodes\n+      nodes <- c(nodes, dep$name)\n+   }\n+\n+   # Look for dependencies of each package\n+   for (dep in dependencies) {\n+      # Dependencies are discovered from these three fields\n+      fields <- c(\"Depends\", \"Imports\", \"LinkingTo\")\n+      for (field in fields) {\n+         # Read contents for field (ignore if no contents)\n+         contents <- available[dep$name, field]\n+         if (!is.character(contents))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5MTc5MQ=="}, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzQ2Mjk1OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionDependencies.R", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzozNDoyNVrOFvomsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDozNzo0MlrOFw0eAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5MjY1Ng==", "bodyText": "Nit: do we need to be careful about the type argument here? Since we might want to install some packages from sources, and others from binaries, and the result of available.packages(type = \"source\") versus available.packages(type = \"binary\") could differ.", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r385492656", "createdAt": "2020-02-28T03:34:25Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/modules/SessionDependencies.R", "diffHunk": "@@ -0,0 +1,155 @@\n+#\n+# SessionDependencies.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+# Topographically sorts a list of packages (nodes) by their dependencies (edges). Note that this is\n+# not meant to be a general-purpose topo sort algorithm, and that it returns packages in the correct\n+# installation order, which is the exact reverse of traditional topological order. For example,\n+# given packages with dependencies a -> b -> c, we would want to install packages in the order \"c\",\n+# \"b\", and then \"a\".\n+.rs.addFunction(\"topoSortPackages\", function(nodes, edges) {\n+   # List of sorted packages\n+   sorted <- c()\n+\n+   # All nodes are unvisited to begin with\n+   visited <- c()\n+\n+   # Define recursive descent function for dependencies\n+   visit <- function(node, stack) {\n+      if (node %in% visited) {\n+         return()\n+      }\n+      if (node %in% stack) {\n+         # We visited this node while visiting itself; this is a dependency loop.\n+         stop(\"Package dependency graph is not a directed acyclic graph.\")\n+      }\n+\n+      # Visit all the edges of this node\n+      stack <- c(stack, node)\n+      for (edge in edges) {\n+         if (identical(edge$from, node)) {\n+            visit(edge$to, stack)\n+         }\n+      }\n+\n+      visited <<- c(visited, node)\n+      sorted <<- c(sorted, node)\n+   }\n+\n+   # Keep visiting unvisited nodes until we have visited all of them\n+   while (length(visited) < length(nodes)) {\n+      for (node in nodes) {\n+         if (!(node %in% visited)) {\n+            visit(node, c())\n+            break\n+         }\n+      }\n+   }\n+\n+   # Return topologically sorted list\n+   sorted\n+})\n+\n+.rs.addFunction(\"expandPkgDependencies\", function(dependencies) {\n+   .rs.expandDependencies(available.packages(), installed.packages(), dependencies)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNTYxOA==", "bodyText": "Maybe we can just get away with using both here? Let's discuss realtime.", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r386735618", "createdAt": "2020-03-03T00:37:42Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionDependencies.R", "diffHunk": "@@ -0,0 +1,155 @@\n+#\n+# SessionDependencies.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+# Topographically sorts a list of packages (nodes) by their dependencies (edges). Note that this is\n+# not meant to be a general-purpose topo sort algorithm, and that it returns packages in the correct\n+# installation order, which is the exact reverse of traditional topological order. For example,\n+# given packages with dependencies a -> b -> c, we would want to install packages in the order \"c\",\n+# \"b\", and then \"a\".\n+.rs.addFunction(\"topoSortPackages\", function(nodes, edges) {\n+   # List of sorted packages\n+   sorted <- c()\n+\n+   # All nodes are unvisited to begin with\n+   visited <- c()\n+\n+   # Define recursive descent function for dependencies\n+   visit <- function(node, stack) {\n+      if (node %in% visited) {\n+         return()\n+      }\n+      if (node %in% stack) {\n+         # We visited this node while visiting itself; this is a dependency loop.\n+         stop(\"Package dependency graph is not a directed acyclic graph.\")\n+      }\n+\n+      # Visit all the edges of this node\n+      stack <- c(stack, node)\n+      for (edge in edges) {\n+         if (identical(edge$from, node)) {\n+            visit(edge$to, stack)\n+         }\n+      }\n+\n+      visited <<- c(visited, node)\n+      sorted <<- c(sorted, node)\n+   }\n+\n+   # Keep visiting unvisited nodes until we have visited all of them\n+   while (length(visited) < length(nodes)) {\n+      for (node in nodes) {\n+         if (!(node %in% visited)) {\n+            visit(node, c())\n+            break\n+         }\n+      }\n+   }\n+\n+   # Return topologically sorted list\n+   sorted\n+})\n+\n+.rs.addFunction(\"expandPkgDependencies\", function(dependencies) {\n+   .rs.expandDependencies(available.packages(), installed.packages(), dependencies)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5MjY1Ng=="}, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzQ4MDQ0OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionDependencies.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzo0ODo1OVrOFvoxBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo0MDowN1rOFw0g1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5NTMwMA==", "bodyText": "What happens if a CRAN package depends on a CRAN source package (ie: something installed in the next step)?", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r385495300", "createdAt": "2020-02-28T03:48:59Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/modules/SessionDependencies.cpp", "diffHunk": "@@ -291,67 +326,114 @@ Error unsatisfiedDependencies(const json::JsonRpcRequest& request,\n    return Success();\n }\n \n-Error installDependencies(const json::JsonRpcRequest& request,\n-                          json::JsonRpcResponse* pResponse)\n+// Builds an installation script which will install all the dependencies at once. \n+std::string buildCombinedInstallScript(const std::vector<Dependency>& deps)\n {\n-   // get list of dependencies\n-   json::Array depsJson;\n-   std::string context;\n-   Error error = json::readParams(request.params, &context, &depsJson);\n-   if (error)\n-      return error;\n-   std::vector<Dependency> deps = dependenciesFromJson(depsJson);\n+   bool isRenv = module_context::isRenvActive();\n+   std::vector<std::string> cranPackages;\n+   std::vector<std::string> cranSourcePackages;\n+   std::vector<std::string> embeddedPackages;\n+   std::string cmd;\n+\n+   // Sort the dependencies into CRAN packages installed with defaults, CRAN packages explicitly\n+   // installed as source, and embedded packages.\n+   for (const Dependency& dep: deps)\n+   {\n+      if (dep.location == kCRANPackageDependency)\n+      {\n+         if (dep.source)\n+            cranSourcePackages.push_back(\"'\" + dep.name + \"'\");\n+         else\n+            cranPackages.push_back(\"'\" + dep.name + \"'\");\n+      }\n+      else if (dep.location == kEmbeddedPackageDependency)\n+      {\n+         EmbeddedPackage pkg = embeddedPackageInfo(dep.name);\n+         if (!pkg.empty())\n+            embeddedPackages.push_back(pkg.archivePath);\n+      }\n+   }\n \n-   // Ensure we have a writeable user library\n-   error = r::exec::RFunction(\".rs.ensureWriteableUserLibrary\").call();\n-   if (error)\n-      return error;\n+   // Install the CRAN packages with a single call\n+   if (!cranPackages.empty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjM0MA==", "bodyText": "A good question! That would theoretically be a problem, but this is logic copied wholesale from 1.2 in an attempt to reduce risk, and so my inclination is to leave it undisturbed unless we have evidence it's causing real issues (practically speaking we rarely insist on source packages so I don't think this has happened often, if ever).", "url": "https://github.com/rstudio/rstudio/pull/6355#discussion_r386736340", "createdAt": "2020-03-03T00:40:07Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionDependencies.cpp", "diffHunk": "@@ -291,67 +326,114 @@ Error unsatisfiedDependencies(const json::JsonRpcRequest& request,\n    return Success();\n }\n \n-Error installDependencies(const json::JsonRpcRequest& request,\n-                          json::JsonRpcResponse* pResponse)\n+// Builds an installation script which will install all the dependencies at once. \n+std::string buildCombinedInstallScript(const std::vector<Dependency>& deps)\n {\n-   // get list of dependencies\n-   json::Array depsJson;\n-   std::string context;\n-   Error error = json::readParams(request.params, &context, &depsJson);\n-   if (error)\n-      return error;\n-   std::vector<Dependency> deps = dependenciesFromJson(depsJson);\n+   bool isRenv = module_context::isRenvActive();\n+   std::vector<std::string> cranPackages;\n+   std::vector<std::string> cranSourcePackages;\n+   std::vector<std::string> embeddedPackages;\n+   std::string cmd;\n+\n+   // Sort the dependencies into CRAN packages installed with defaults, CRAN packages explicitly\n+   // installed as source, and embedded packages.\n+   for (const Dependency& dep: deps)\n+   {\n+      if (dep.location == kCRANPackageDependency)\n+      {\n+         if (dep.source)\n+            cranSourcePackages.push_back(\"'\" + dep.name + \"'\");\n+         else\n+            cranPackages.push_back(\"'\" + dep.name + \"'\");\n+      }\n+      else if (dep.location == kEmbeddedPackageDependency)\n+      {\n+         EmbeddedPackage pkg = embeddedPackageInfo(dep.name);\n+         if (!pkg.empty())\n+            embeddedPackages.push_back(pkg.archivePath);\n+      }\n+   }\n \n-   // Ensure we have a writeable user library\n-   error = r::exec::RFunction(\".rs.ensureWriteableUserLibrary\").call();\n-   if (error)\n-      return error;\n+   // Install the CRAN packages with a single call\n+   if (!cranPackages.empty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5NTMwMA=="}, "originalCommit": {"oid": "ec977a7806dc0fd7ca2817c0b84c8d49d180c5b5"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3972, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}