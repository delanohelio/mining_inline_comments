{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NjE3NjA0", "number": 8565, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzo1Mzo0NVrOFCgaAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzo0MTo1OVrOFCpvgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTcyNDE5OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/rmarkdown/NotebookConditions.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzo1Mzo0NVrOIBtTfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzo1Mzo0NVrOIBtTfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2MTc1Nw==", "bodyText": "This is really the heart of the fix; the rest of the PR is just me tidying things up along the way to finding this fix ...", "url": "https://github.com/rstudio/rstudio/pull/8565#discussion_r538661757", "createdAt": "2020-12-08T17:53:45Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/modules/rmarkdown/NotebookConditions.cpp", "diffHunk": "@@ -34,7 +38,7 @@ namespace {\n SEXP rs_signalNotebookCondition(SEXP condition, SEXP message)\n {\n    // extract message (make sure we got one)\n-   std::string msg = r::sexp::safeAsString(message, \"\");\n+   std::string msg = r::sexp::asUtf8String(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e482d5e2fede1b6c7ae0106fe97092e9ee1b97"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzI1Mzc4OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/NotebookConditions.R", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzo0MTo1OVrOIB7cSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzo0MTo1OVrOIB7cSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MzM4NA==", "bodyText": "(1) funcitons => functions\n(2) this is amazing", "url": "https://github.com/rstudio/rstudio/pull/8565#discussion_r538893384", "createdAt": "2020-12-08T23:41:59Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/NotebookConditions.R", "diffHunk": "@@ -0,0 +1,71 @@\n+#\n+# NotebookConditions.R\n+#\n+# Copyright (C) 2020 by RStudio, PBC\n+#\n+# Unless you have received this program directly from RStudio pursuant\n+# to the terms of a commercial license agreement with RStudio, then\n+# this program is licensed to you under the terms of version 3 of the\n+# GNU Affero General Public License. This program is distributed WITHOUT\n+# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+#\n+#\n+\n+.rs.addFunction(\"notebookConditions.onWarning\", function(condition)\n+{\n+   prefix <- gettext(\"Warning:\", domain = \"R\")\n+   message <- paste(condition$message, collapse = \"\\n\")\n+   full <- paste(prefix, message)\n+   .Call(\"rs_signalNotebookCondition\", 1L, full, PACKAGE = \"(embedding)\")\n+   invokeRestart(\"muffleWarning\")\n+})\n+\n+.rs.addFunction(\"notebookConditions.onMessage\", function(condition)\n+{\n+   full <- paste(condition$message, collapse = \"\\n\")\n+   .Call(\"rs_signalNotebookCondition\", 0L, full, PACKAGE = \"(embedding)\")\n+   invokeRestart(\"muffleMessage\")\n+})\n+\n+# NOTE: we need to add condition handlers to the top level, but cannot\n+# actually do so if there is an R function context on the stack.\n+# To circumvent this, we use R funcitons to just provide the call object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e482d5e2fede1b6c7ae0106fe97092e9ee1b97"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4136, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}