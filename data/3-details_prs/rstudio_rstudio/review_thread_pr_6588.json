{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzM0NDEy", "number": 6588, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0Nzo1N1rODump_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjoxMDowMFrODum-KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTk0NDMwOnYy", "diffSide": "RIGHT", "path": "src/cpp/core/StringUtils.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0Nzo1N1rOGAqsHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0Nzo1N1rOGAqsHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MjYwNw==", "bodyText": "Nit: update file copyright", "url": "https://github.com/rstudio/rstudio/pull/6588#discussion_r403352607", "createdAt": "2020-04-03T21:47:57Z", "author": {"login": "gtritchie"}, "path": "src/cpp/core/StringUtils.cpp", "diffHunk": "@@ -774,6 +774,14 @@ bool extractCommentHeader(const std::string& contents,\n    return true;\n }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b01d28cf27040dbb30eba9da89c019751d0a46"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTk0NTQ2OnYy", "diffSide": "RIGHT", "path": "src/cpp/core/include/core/StringUtils.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0ODoyOVrOGAqs0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0ODoyOVrOGAqs0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1Mjc4NQ==", "bodyText": "Nit: file copyright", "url": "https://github.com/rstudio/rstudio/pull/6588#discussion_r403352785", "createdAt": "2020-04-03T21:48:29Z", "author": {"login": "gtritchie"}, "path": "src/cpp/core/include/core/StringUtils.hpp", "diffHunk": "@@ -290,6 +290,8 @@ bool extractCommentHeader(const std::string& contents,\n                           const std::string& reCommentPrefix,\n                           std::string* pHeader);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b01d28cf27040dbb30eba9da89c019751d0a46"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTk0NzA5OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/SessionConsoleInput.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0OTowM1rOGAqtug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0OTowM1rOGAqtug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MzAxOA==", "bodyText": "Nit: file copyright", "url": "https://github.com/rstudio/rstudio/pull/6588#discussion_r403353018", "createdAt": "2020-04-03T21:49:03Z", "author": {"login": "gtritchie"}, "path": "src/cpp/session/SessionConsoleInput.cpp", "diffHunk": "@@ -15,6 +15,8 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b01d28cf27040dbb30eba9da89c019751d0a46"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTk4OTgyOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/SessionConsoleInput.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjowNzoxOVrOGArGTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjowNzoxOVrOGArGTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1OTMwOA==", "bodyText": "Minor, could simplify to if (input.text.find('\\n') == std::string::npos) and eliminate index variable.", "url": "https://github.com/rstudio/rstudio/pull/6588#discussion_r403359308", "createdAt": "2020-04-03T22:07:19Z", "author": {"login": "gtritchie"}, "path": "src/cpp/session/SessionConsoleInput.cpp", "diffHunk": "@@ -156,11 +157,127 @@ void reissueLastConsolePrompt()\n \n void clearConsoleInputBuffer()\n {\n-   // Discard any buffered input\n-   while (!s_consoleInputBuffer.empty())\n-      s_consoleInputBuffer.pop();\n+   s_consoleInputBuffer = {};\n+}\n+\n+namespace {\n+\n+// this function takes the next chunk of (potentially multi-line) pending\n+// console input in the queue, then splits it into separate pieces of console\n+// input with one piece of input for each line.\n+//\n+// we also fix up indentation if we can determine that the\n+// code is going to be sent to the reticulate Python REPL.\n+void fixupPendingConsoleInput()\n+{\n+   // get next input\n+   auto input = s_consoleInputBuffer.front();\n+   \n+   // nothing to do if this is a cancel\n+   if (input.cancel)\n+      return;\n+   \n+   // if this has no newlines, then nothing to do\n+   auto index = input.text.find('\\n');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b01d28cf27040dbb30eba9da89c019751d0a46"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTk5NTkzOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/SessionConsoleInput.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjoxMDowMFrOGArJ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjoxMDowMFrOGArJ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MDIzOA==", "bodyText": "If you're considering it, maybe now is the time? :-)", "url": "https://github.com/rstudio/rstudio/pull/6588#discussion_r403360238", "createdAt": "2020-04-03T22:10:00Z", "author": {"login": "gtritchie"}, "path": "src/cpp/session/SessionConsoleInput.cpp", "diffHunk": "@@ -156,11 +157,127 @@ void reissueLastConsolePrompt()\n \n void clearConsoleInputBuffer()\n {\n-   // Discard any buffered input\n-   while (!s_consoleInputBuffer.empty())\n-      s_consoleInputBuffer.pop();\n+   s_consoleInputBuffer = {};\n+}\n+\n+namespace {\n+\n+// this function takes the next chunk of (potentially multi-line) pending\n+// console input in the queue, then splits it into separate pieces of console\n+// input with one piece of input for each line.\n+//\n+// we also fix up indentation if we can determine that the\n+// code is going to be sent to the reticulate Python REPL.\n+void fixupPendingConsoleInput()\n+{\n+   // get next input\n+   auto input = s_consoleInputBuffer.front();\n+   \n+   // nothing to do if this is a cancel\n+   if (input.cancel)\n+      return;\n+   \n+   // if this has no newlines, then nothing to do\n+   auto index = input.text.find('\\n');\n+   if (index == std::string::npos)\n+      return;\n+   \n+   // if we're about to send code to the Python REPL, then\n+   // we need to fix whitespace in the code before sending\n+   bool pyReplActive = modules::reticulate::isReplActive();\n+   \n+   // pop off current input (we're going to split and re-push now)\n+   s_consoleInputBuffer.pop();\n+   \n+   // does this Python line start an indented block?\n+   // NOTE: should consider using tokenizer here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b01d28cf27040dbb30eba9da89c019751d0a46"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4014, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}