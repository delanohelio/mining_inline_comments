{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTkxNjc1", "number": 7693, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0Mjo1OFrOEhVKgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowNTo0NlrOEjPBZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg1MjE2OnYy", "diffSide": "RIGHT", "path": "src/cpp/r/R/Api.R", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0Mjo1OFrOHOllDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0Mjo1OFrOHOllDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NzgwNQ==", "bodyText": "For robustness you should check if the environment exists specifically in the tools environment.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485057805", "createdAt": "2020-09-08T16:42:58Z", "author": {"login": "jmcphers"}, "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,33 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback = function(chunkName, chunkCode){}) {\n+\n+   if (!is.function(chunkCallback))\n+      stop(\"'chunkCallback' must be a function\")\n+\n+   # if one does not already exist, add an environment which will host registered callbacks\n+   if (!exists(\".rs.notebookChunkCallbacks\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg1OTM2OnYy", "diffSide": "RIGHT", "path": "src/cpp/r/R/Api.R", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0NDo0OVrOHOlpYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0NDo0OVrOHOlpYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1ODkxNA==", "bodyText": "I don't think this should have a default value since you'd never really want to register an no-op function as a callback.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485058914", "createdAt": "2020-09-08T16:44:49Z", "author": {"login": "jmcphers"}, "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,33 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback = function(chunkName, chunkCode){}) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg2NTY3OnYy", "diffSide": "RIGHT", "path": "src/cpp/r/R/Api.R", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0NjozM1rOHOltXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0NjozM1rOHOltXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1OTkzMg==", "bodyText": "I think we should emit a warning here if (a) the environment doesn't exist or (b) the handle wasn't found in the environment.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485059932", "createdAt": "2020-09-08T16:46:33Z", "author": {"login": "jmcphers"}, "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,33 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback = function(chunkName, chunkCode){}) {\n+\n+   if (!is.function(chunkCallback))\n+      stop(\"'chunkCallback' must be a function\")\n+\n+   # if one does not already exist, add an environment which will host registered callbacks\n+   if (!exists(\".rs.notebookChunkCallbacks\"))\n+      assign(\".rs.notebookChunkCallbacks\",\n+             value = new.env(parent = emptyenv()),\n+             envir = .rs.toolsEnv())\n+\n+   data <- chunkCallback\n+   handler <- .Call(\"rs_createUUID\")\n+   assign(handler, value = data, envir = .rs.notebookChunkCallbacks)\n+\n+   return(handler)\n+})\n+\n+# unregister a chunk callback functions\n+.rs.addApiFunction(\"unregisterChunkCallback\", function(handle) {\n+  if (exists(\".rs.notebookChunkCallbacks\") &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg2OTU2OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionRmdNotebook.R", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0NzozNlrOHOlvpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0NzozNlrOHOlvpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MDUxOQ==", "bodyText": "This should be wrapped in a try/catch so we can tolerate failures occurring in the user-supplied chunkCallback function.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485060519", "createdAt": "2020-09-08T16:47:36Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionRmdNotebook.R", "diffHunk": "@@ -1138,6 +1138,21 @@ assign(\".rs.notebookVersion\", envir = .rs.toolsEnv(), \"1.0\")\n    .rs.scalarListFromList(defaultOptions)\n })\n \n+.rs.addFunction(\"executeChunkCallback\", function(chunkName, chunkCode)\n+{\n+  if (exists(\".rs.notebookChunkCallbacks\"))\n+  {\n+     results <- list()\n+     handles <- ls(.rs.notebookChunkCallbacks)\n+     for (handle in handles) {\n+        chunkCallback <- get(handle, envir = .rs.notebookChunkCallbacks)\n+        results <- c(results, chunkCallback(chunkName, chunkCode))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg4MDQxOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/rmarkdown/SessionRmdNotebook.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MDozNFrOHOl2Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDowMDozOFrOHPYNAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MjE4Ng==", "bodyText": "At some point we will also need to pass the results into this R function. Those may be nontrivially expensive to collect, so we might consider asking R whether the chunk callback environment exists first.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485062186", "createdAt": "2020-09-08T16:50:34Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/rmarkdown/SessionRmdNotebook.cpp", "diffHunk": "@@ -172,9 +173,25 @@ bool fixChunkFilename(int, const core::FilePath& path)\n \n void onChunkExecCompleted(const std::string& docId, \n                           const std::string& chunkId,\n+                          const std::string& code,\n+                          const std::string& label,\n                           const std::string& nbCtxId)\n {\n-   emitOutputFinished(docId, chunkId, ExecScopeChunk);\n+   r::sexp::Protect rProtect;\n+   SEXP resultSEXP = R_NilValue;\n+   json::Array results;\n+\n+   r::exec::RFunction func(\".rs.executeChunkCallback\");\n+   func.addParam(label);\n+   func.addParam(code);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4NzIzNA==", "bodyText": "I updated the tools code so that the environment is always created rather than only once it is in use.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485887234", "createdAt": "2020-09-09T20:00:38Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/rmarkdown/SessionRmdNotebook.cpp", "diffHunk": "@@ -172,9 +173,25 @@ bool fixChunkFilename(int, const core::FilePath& path)\n \n void onChunkExecCompleted(const std::string& docId, \n                           const std::string& chunkId,\n+                          const std::string& code,\n+                          const std::string& label,\n                           const std::string& nbCtxId)\n {\n-   emitOutputFinished(docId, chunkId, ExecScopeChunk);\n+   r::sexp::Protect rProtect;\n+   SEXP resultSEXP = R_NilValue;\n+   json::Array results;\n+\n+   r::exec::RFunction func(\".rs.executeChunkCallback\");\n+   func.addParam(label);\n+   func.addParam(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MjE4Ng=="}, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg5OTc2OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/TextEditingTargetNotebook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1NTo0NlrOHOmBrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDowMTo0MFrOHPYQKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NTEzNA==", "bodyText": "Why does this make the document dirty?", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485065134", "createdAt": "2020-09-08T16:55:46Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/TextEditingTargetNotebook.java", "diffHunk": "@@ -793,6 +793,15 @@ else if (data.getType() == RmdChunkOutputFinishedEvent.TYPE_INTERACTIVE &&\n             setDirtyState();\n          }\n       }\n+\n+      if (outputs_.containsKey(data.getChunkId()) &&\n+          !data.getHtmlCallback().isEmpty())\n+      {\n+         ArrayList<String> callbacks = data.getHtmlCallback();\n+         for (String callback : callbacks)\n+            outputs_.get(data.getChunkId()).getOutputWidget().renderHtml(callback);\n+         setDirtyState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4ODA0MQ==", "bodyText": "It shouldn't be, removed!", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485888041", "createdAt": "2020-09-09T20:01:40Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/TextEditingTargetNotebook.java", "diffHunk": "@@ -793,6 +793,15 @@ else if (data.getType() == RmdChunkOutputFinishedEvent.TYPE_INTERACTIVE &&\n             setDirtyState();\n          }\n       }\n+\n+      if (outputs_.containsKey(data.getChunkId()) &&\n+          !data.getHtmlCallback().isEmpty())\n+      {\n+         ArrayList<String> callbacks = data.getHtmlCallback();\n+         for (String callback : callbacks)\n+            outputs_.get(data.getChunkId()).getOutputWidget().renderHtml(callback);\n+         setDirtyState();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NTEzNA=="}, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODg1NjcxOnYy", "diffSide": "RIGHT", "path": "src/cpp/r/R/Api.R", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0NTozMVrOHPVIAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0NjozMVrOHPVJ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNjgwMg==", "bodyText": "nit: use PACKAGE = \"(embedding)\" to make it clear to R that the routine we're trying to call is provided by RStudio as opposed to a separate loaded DLL", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485836802", "createdAt": "2020-09-09T18:45:31Z", "author": {"login": "kevinushey"}, "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,33 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback = function(chunkName, chunkCode){}) {\n+\n+   if (!is.function(chunkCallback))\n+      stop(\"'chunkCallback' must be a function\")\n+\n+   # if one does not already exist, add an environment which will host registered callbacks\n+   if (!exists(\".rs.notebookChunkCallbacks\"))\n+      assign(\".rs.notebookChunkCallbacks\",\n+             value = new.env(parent = emptyenv()),\n+             envir = .rs.toolsEnv())\n+\n+   data <- chunkCallback\n+   handler <- .Call(\"rs_createUUID\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNzI3NQ==", "bodyText": "This is also extra nitpicky but I'd call this a handle as opposed to a handler as it's just an opaque ID you can use as opposed to an object that knows how to \"handle\" things.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485837275", "createdAt": "2020-09-09T18:46:31Z", "author": {"login": "kevinushey"}, "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,33 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback = function(chunkName, chunkCode){}) {\n+\n+   if (!is.function(chunkCallback))\n+      stop(\"'chunkCallback' must be a function\")\n+\n+   # if one does not already exist, add an environment which will host registered callbacks\n+   if (!exists(\".rs.notebookChunkCallbacks\"))\n+      assign(\".rs.notebookChunkCallbacks\",\n+             value = new.env(parent = emptyenv()),\n+             envir = .rs.toolsEnv())\n+\n+   data <- chunkCallback\n+   handler <- .Call(\"rs_createUUID\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNjgwMg=="}, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODg2MjYxOnYy", "diffSide": "RIGHT", "path": "src/cpp/r/R/Api.R", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0NzozMFrOHPVLtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0NzozMFrOHPVLtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNzc1MQ==", "bodyText": "It may also be worth validating that this is a function that accepts (at least) two parameters -- up to you if you think it's worth it. You can use formals(chunkCallback) to see what formals are declared for that function.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485837751", "createdAt": "2020-09-09T18:47:30Z", "author": {"login": "kevinushey"}, "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,33 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback = function(chunkName, chunkCode){}) {\n+\n+   if (!is.function(chunkCallback))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODg5NjkzOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionRmdNotebook.R", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo1NzozNVrOHPVg3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo1NzozNVrOHPVg3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MzE2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 handles <- ls(.rs.notebookChunkCallbacks)\n          \n          \n            \n                 handles <- ls(envir = .rs.notebookChunkCallbacks)", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485843165", "createdAt": "2020-09-09T18:57:35Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/modules/SessionRmdNotebook.R", "diffHunk": "@@ -1138,6 +1138,21 @@ assign(\".rs.notebookVersion\", envir = .rs.toolsEnv(), \"1.0\")\n    .rs.scalarListFromList(defaultOptions)\n })\n \n+.rs.addFunction(\"executeChunkCallback\", function(chunkName, chunkCode)\n+{\n+  if (exists(\".rs.notebookChunkCallbacks\"))\n+  {\n+     results <- list()\n+     handles <- ls(.rs.notebookChunkCallbacks)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODkwNzI4OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowMDoyOVrOHPVnLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDowMjowOFrOHPYRcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NDc4MA==", "bodyText": "nit: feels awkward to have a static import of only this symbol and not the others; could we remove this and just qualify our usage?", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485844780", "createdAt": "2020-09-09T19:00:29Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java", "diffHunk": "@@ -68,6 +68,8 @@\n import com.google.gwt.user.client.ui.SimplePanel;\n import com.google.gwt.user.client.ui.Widget;\n \n+import static org.rstudio.studio.client.rmarkdown.model.RmdChunkOutputUnit.TYPE_HTML;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4ODM3MQ==", "bodyText": "Oops, that was IntelliJ \"helping\". I've removed it.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485888371", "createdAt": "2020-09-09T20:02:08Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java", "diffHunk": "@@ -68,6 +68,8 @@\n import com.google.gwt.user.client.ui.SimplePanel;\n import com.google.gwt.user.client.ui.Widget;\n \n+import static org.rstudio.studio.client.rmarkdown.model.RmdChunkOutputUnit.TYPE_HTML;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NDc4MA=="}, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODkxMjgxOnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowMjoxNVrOHPVqrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowMjoxNVrOHPVqrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NTY3OQ==", "bodyText": "It looks like we create a render timer here but then never use it?", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485845679", "createdAt": "2020-09-09T19:02:15Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java", "diffHunk": "@@ -274,7 +276,15 @@ public HandlerRegistration addExpansionStateChangeHandler(\n    {\n       return expansionState_.addValueChangeHandler(handler);\n    }\n-    \n+\n+   public void renderHtml(String htmlOutput)\n+   {\n+      if (StringUtil.isNullOrEmpty(htmlOutput))\n+         return;\n+      final RenderTimer renderTimer = new RenderTimer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODkyMjQ0OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/rmarkdown/SessionRmdNotebook.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowNToxNlrOHPVwuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowNToxNlrOHPVwuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NzIyNQ==", "bodyText": "Do we need to check for errors here?", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485847225", "createdAt": "2020-09-09T19:05:16Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/modules/rmarkdown/SessionRmdNotebook.cpp", "diffHunk": "@@ -172,9 +173,25 @@ bool fixChunkFilename(int, const core::FilePath& path)\n \n void onChunkExecCompleted(const std::string& docId, \n                           const std::string& chunkId,\n+                          const std::string& code,\n+                          const std::string& label,\n                           const std::string& nbCtxId)\n {\n-   emitOutputFinished(docId, chunkId, ExecScopeChunk);\n+   r::sexp::Protect rProtect;\n+   SEXP resultSEXP = R_NilValue;\n+   json::Array results;\n+\n+   r::exec::RFunction func(\".rs.executeChunkCallback\");\n+   func.addParam(label);\n+   func.addParam(code);\n+\n+   core::Error error = func.call(&resultSEXP, &rProtect);\n+   if (error)\n+      LOG_ERROR(error);\n+   else if (!r::sexp::isNull(resultSEXP))\n+      Error error = r::json::jsonValueFromList(resultSEXP, &results);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzgwMDA5OnYy", "diffSide": "RIGHT", "path": "src/cpp/r/R/Api.R", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowMDo0NFrOHRefiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowMDo0NFrOHRefiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4NzQzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  rm (list = id, envir = .rs.notebookChunkCallbacks)\n          \n          \n            \n                  rm(list = id, envir = .rs.notebookChunkCallbacks)", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488087435", "createdAt": "2020-09-14T17:00:44Z", "author": {"login": "kevinushey"}, "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,38 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback) {\n+\n+   if (length(.rs.notebookChunkCallbacks) != 0)\n+      stop(\"Callback is already registered.\")\n+   if (!is.function(chunkCallback))\n+      stop(\"'chunkCallback' must be a function\")\n+   if (length(formals(chunkCallback)) != 2)\n+      stop(\"'chunkCallback' must contain two parameters: chunkName and chunkCode\")\n+\n+   data <- chunkCallback\n+   handle <- .Call(\"rs_createUUID\",\n+                   PACKAGE = \"(embedding)\")\n+   assign(handle, value = data, envir = .rs.notebookChunkCallbacks)\n+\n+   return(handle)\n+})\n+\n+# unregister a chunk callback functions\n+.rs.addApiFunction(\"unregisterChunkCallback\", function(id = NULL) {\n+   if (length(.rs.notebookChunkCallbacks) == 0)\n+      warning(\"No registered callbacks found\")\n+   else if (!is.null(id) && !exists(id, envir = .rs.notebookChunkCallbacks))\n+      warning(\"Handle not found.\")\n+   else\n+   {\n+      id = ls(.rs.notebookChunkCallbacks)\n+      rm (list = id, envir = .rs.notebookChunkCallbacks)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzgwMTA4OnYy", "diffSide": "RIGHT", "path": "src/cpp/r/R/Api.R", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowMTowMlrOHRegMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowMTowMlrOHRegMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4NzYwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  id = ls(.rs.notebookChunkCallbacks)\n          \n          \n            \n                  id <- ls(envir = .rs.notebookChunkCallbacks)", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488087601", "createdAt": "2020-09-14T17:01:02Z", "author": {"login": "kevinushey"}, "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,38 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback) {\n+\n+   if (length(.rs.notebookChunkCallbacks) != 0)\n+      stop(\"Callback is already registered.\")\n+   if (!is.function(chunkCallback))\n+      stop(\"'chunkCallback' must be a function\")\n+   if (length(formals(chunkCallback)) != 2)\n+      stop(\"'chunkCallback' must contain two parameters: chunkName and chunkCode\")\n+\n+   data <- chunkCallback\n+   handle <- .Call(\"rs_createUUID\",\n+                   PACKAGE = \"(embedding)\")\n+   assign(handle, value = data, envir = .rs.notebookChunkCallbacks)\n+\n+   return(handle)\n+})\n+\n+# unregister a chunk callback functions\n+.rs.addApiFunction(\"unregisterChunkCallback\", function(id = NULL) {\n+   if (length(.rs.notebookChunkCallbacks) == 0)\n+      warning(\"No registered callbacks found\")\n+   else if (!is.null(id) && !exists(id, envir = .rs.notebookChunkCallbacks))\n+      warning(\"Handle not found.\")\n+   else\n+   {\n+      id = ls(.rs.notebookChunkCallbacks)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzgwNjkzOnYy", "diffSide": "RIGHT", "path": "src/cpp/r/R/Tools.R", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowMjo0MlrOHRejyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMToxNzoxMlrOHRm55Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4ODUyMA==", "bodyText": "Is there a reason why you defined this in Tools.R rather than e.g. at the top of Api.R? I think you could use .rs.setVar(\"notebookChunkCallbacks\", new.env(parent = emptyenv()) at the top of Api.R.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488088520", "createdAt": "2020-09-14T17:02:42Z", "author": {"login": "kevinushey"}, "path": "src/cpp/r/R/Tools.R", "diffHunk": "@@ -27,6 +27,9 @@ assign(\".rs.toolsEnv\", function()\n    .rs.Env\n }, envir = .rs.Env)\n \n+# Add enviornment with 'tools:rstudio' to store data for Api.R\n+assign(\".rs.notebookChunkCallbacks\", value = new.env(parent = emptyenv()), envir = .rs.toolsEnv())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExODIyMw==", "bodyText": "From my POV it makes more sense to have it in tools since that is the parent environment and where we assign functions to tools.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488118223", "createdAt": "2020-09-14T17:54:43Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/r/R/Tools.R", "diffHunk": "@@ -27,6 +27,9 @@ assign(\".rs.toolsEnv\", function()\n    .rs.Env\n }, envir = .rs.Env)\n \n+# Add enviornment with 'tools:rstudio' to store data for Api.R\n+assign(\".rs.notebookChunkCallbacks\", value = new.env(parent = emptyenv()), envir = .rs.toolsEnv())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4ODUyMA=="}, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NTU5NQ==", "bodyText": "Maybe I'm misunderstanding your point, but the functions .rs.addFunction() and .rs.setVar()'s main responsibility is to define things in the tools environment. The call you have here is roughly equivalent to:\n.rs.setVar(\"notebookChunkCallbacks\", new.env(parent = emptyenv()))", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488155595", "createdAt": "2020-09-14T19:01:57Z", "author": {"login": "kevinushey"}, "path": "src/cpp/r/R/Tools.R", "diffHunk": "@@ -27,6 +27,9 @@ assign(\".rs.toolsEnv\", function()\n    .rs.Env\n }, envir = .rs.Env)\n \n+# Add enviornment with 'tools:rstudio' to store data for Api.R\n+assign(\".rs.notebookChunkCallbacks\", value = new.env(parent = emptyenv()), envir = .rs.toolsEnv())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4ODUyMA=="}, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyNTI1Mw==", "bodyText": "Ah ok, I misunderstood. Fixed \ud83d\udc4d", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488225253", "createdAt": "2020-09-14T21:17:12Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/r/R/Tools.R", "diffHunk": "@@ -27,6 +27,9 @@ assign(\".rs.toolsEnv\", function()\n    .rs.Env\n }, envir = .rs.Env)\n \n+# Add enviornment with 'tools:rstudio' to store data for Api.R\n+assign(\".rs.notebookChunkCallbacks\", value = new.env(parent = emptyenv()), envir = .rs.toolsEnv())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4ODUyMA=="}, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzgwNzk4OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionRmdNotebook.R", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowMjo1OFrOHRekYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowMjo1OFrOHRekYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4ODY3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              if (exists(\".rs.notebookChunkCallbacks\") &&\n          \n          \n            \n              if (exists(\".rs.notebookChunkCallbacks\", envir = .rs.notebookChunkCallbacks) &&", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488088673", "createdAt": "2020-09-14T17:02:58Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/modules/SessionRmdNotebook.R", "diffHunk": "@@ -1138,6 +1138,20 @@ assign(\".rs.notebookVersion\", envir = .rs.toolsEnv(), \"1.0\")\n    .rs.scalarListFromList(defaultOptions)\n })\n \n+.rs.addFunction(\"executeChunkCallback\", function(chunkName, chunkCode)\n+{\n+  if (exists(\".rs.notebookChunkCallbacks\") &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzgxMTg5OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionRmdNotebook.R", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowNDoxM1rOHRem2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzo1Njo1MVrOHRgcYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4OTMwNw==", "bodyText": "Now that there's only a single callback result, it seems unnecessary to create and then append the result to an R list -- why not just return the result directly?", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488089307", "createdAt": "2020-09-14T17:04:13Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/modules/SessionRmdNotebook.R", "diffHunk": "@@ -1138,6 +1138,20 @@ assign(\".rs.notebookVersion\", envir = .rs.toolsEnv(), \"1.0\")\n    .rs.scalarListFromList(defaultOptions)\n })\n \n+.rs.addFunction(\"executeChunkCallback\", function(chunkName, chunkCode)\n+{\n+  if (exists(\".rs.notebookChunkCallbacks\") &&\n+      length(.rs.notebookChunkCallbacks) != 0)\n+  {\n+     results <- list()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExOTM5NQ==", "bodyText": "Thank you, I've fixed this.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488119395", "createdAt": "2020-09-14T17:56:51Z", "author": {"login": "melissa-barca"}, "path": "src/cpp/session/modules/SessionRmdNotebook.R", "diffHunk": "@@ -1138,6 +1138,20 @@ assign(\".rs.notebookVersion\", envir = .rs.toolsEnv(), \"1.0\")\n    .rs.scalarListFromList(defaultOptions)\n })\n \n+.rs.addFunction(\"executeChunkCallback\", function(chunkName, chunkCode)\n+{\n+  if (exists(\".rs.notebookChunkCallbacks\") &&\n+      length(.rs.notebookChunkCallbacks) != 0)\n+  {\n+     results <- list()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4OTMwNw=="}, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzgxNzM1OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/rmarkdown/events/RmdChunkOutputFinishedEvent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowNTo0NlrOHReqOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMToxODoxMlrOHRm7sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5MDE2OA==", "bodyText": "This feels a bit awkward: can we normalize the return value beforehand so that we don't have to \"guess\" where the HTML array lives?", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488090168", "createdAt": "2020-09-14T17:05:46Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/rmarkdown/events/RmdChunkOutputFinishedEvent.java", "diffHunk": "@@ -52,6 +55,18 @@ public final native int getType() /*-{\n       public final native int getScope() /*-{\n          return this.scope;\n       }-*/;\n+      \n+      public final ArrayList<String> getHtmlCallback() {\n+         JsArray arr = getNativeHtmlCallbacks();\n+         ArrayList<String> results = new ArrayList<>();\n+         for (int i = 0; i < arr.length(); i++)\n+            results.add(arr.get(i).toString());\n+         return results;\n+      }\n+\n+      private native final JsArray getNativeHtmlCallbacks() /*-{\n+         return this[\"html_callback\"][0] || this[\"html_callback\"][\"html\"] || [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0Njg0OA==", "bodyText": "Academy requested the callback function return a list in the original specs so I'm following up with them to see if it can return a string since that would make things simple.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488146848", "createdAt": "2020-09-14T18:46:13Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/rmarkdown/events/RmdChunkOutputFinishedEvent.java", "diffHunk": "@@ -52,6 +55,18 @@ public final native int getType() /*-{\n       public final native int getScope() /*-{\n          return this.scope;\n       }-*/;\n+      \n+      public final ArrayList<String> getHtmlCallback() {\n+         JsArray arr = getNativeHtmlCallbacks();\n+         ArrayList<String> results = new ArrayList<>();\n+         for (int i = 0; i < arr.length(); i++)\n+            results.add(arr.get(i).toString());\n+         return results;\n+      }\n+\n+      private native final JsArray getNativeHtmlCallbacks() /*-{\n+         return this[\"html_callback\"][0] || this[\"html_callback\"][\"html\"] || [];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5MDE2OA=="}, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyNTcxMg==", "bodyText": "The callback function returns a list with 'html' in it now in case we want to add other variables in the future. I moved all the management of that object to the back end code.", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488225712", "createdAt": "2020-09-14T21:18:12Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/rmarkdown/events/RmdChunkOutputFinishedEvent.java", "diffHunk": "@@ -52,6 +55,18 @@ public final native int getType() /*-{\n       public final native int getScope() /*-{\n          return this.scope;\n       }-*/;\n+      \n+      public final ArrayList<String> getHtmlCallback() {\n+         JsArray arr = getNativeHtmlCallbacks();\n+         ArrayList<String> results = new ArrayList<>();\n+         for (int i = 0; i < arr.length(); i++)\n+            results.add(arr.get(i).toString());\n+         return results;\n+      }\n+\n+      private native final JsArray getNativeHtmlCallbacks() /*-{\n+         return this[\"html_callback\"][0] || this[\"html_callback\"][\"html\"] || [];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5MDE2OA=="}, "originalCommit": {"oid": "a85edd618910bb06cb9141b3816a46331864b405"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4284, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}