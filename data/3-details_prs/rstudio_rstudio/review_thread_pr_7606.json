{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5Njc1NDQ1", "number": 7606, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1ODoyNVrOEcPaWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1ODoyNVrOEcPaWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDQ4MDkxOnYy", "diffSide": "RIGHT", "path": "src/cpp/core/r_util/RSourceIndex.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1ODoyNVrOHGpfHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjowNDoyOFrOHGsfAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMzIxMw==", "bodyText": "What happens to this if the nesting is incorrect? e.g. with the code {( }), encountering the first } would seem to pop the ) off the stack even though it doesn't match.", "url": "https://github.com/rstudio/rstudio/pull/7606#discussion_r476733213", "createdAt": "2020-08-25T20:58:25Z", "author": {"login": "jmcphers"}, "path": "src/cpp/core/r_util/RSourceIndex.cpp", "diffHunk": "@@ -219,57 +219,76 @@ bool isMethodOrClassDefinition(const RToken& token)\n \n class IndexStatus\n {\n+   \n public:\n    \n-   IndexStatus()\n-      : braceLevel_(0),\n-        parenLevel_(0),\n-        bracketLevel_(0),\n-        doubleBracketLevel_(0)\n-   {}\n+   IndexStatus(const RTokens& tokens)\n+      : tokens_(tokens)\n+   {\n+   }\n    \n+   // The indexer maintains a vector of indices, recording\n+   // the indices at which brackets were discovered. Tokens\n+   // are popped off the stack as right brackets are discovered.\n    void update(const RTokenCursor& cursor)\n    {\n       switch (cursor.type())\n       {\n       \n-      case RToken::LBRACE: ++braceLevel_; break;\n-      case RToken::LPAREN: ++parenLevel_; break;\n-      case RToken::LBRACKET: ++bracketLevel_; break;\n-      case RToken::LDBRACKET: ++doubleBracketLevel_; break;\n-         \n-      case RToken::RBRACE: --braceLevel_; break;\n-      case RToken::RPAREN: --parenLevel_; break;\n-      case RToken::RBRACKET: --bracketLevel_; break;\n-      case RToken::RDBRACKET: --doubleBracketLevel_; break;\n+      // Left brackets\n+      case RToken::LPAREN:\n+      case RToken::LBRACE:\n+      case RToken::LBRACKET:\n+      case RToken::LDBRACKET:\n+      {\n+         stack_.push_back(cursor.offset());\n+         break;\n+      }\n+      \n+      // Right brackets\n+      case RToken::RBRACE:\n+      case RToken::RPAREN:\n+      case RToken::RBRACKET:\n+      case RToken::RDBRACKET:\n+      {\n+         stack_.pop_back();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f64822186c6041fbf1b7fe2c5fbf258dd74e95"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4MjMzOQ==", "bodyText": "Bad things! I've updated the PR to better handle this -- now, incompatible braces are just dropped. It might not be the best way of handling this (different methods have different tradeoffs) but I think on the balance it's okay to say that:\n\nIf your document is in a parsable state, then these introspections should work without issue;\nIf your document is not in a parsable state, we'll do our best (and definitely not crash) but some features may not work.\n\nAt least, with the default R code diagnostics, one will see little red Xs all over the editor to signal something is wrong (and so hopefully infer that is why some of these features might not be working)", "url": "https://github.com/rstudio/rstudio/pull/7606#discussion_r476782339", "createdAt": "2020-08-25T22:04:28Z", "author": {"login": "kevinushey"}, "path": "src/cpp/core/r_util/RSourceIndex.cpp", "diffHunk": "@@ -219,57 +219,76 @@ bool isMethodOrClassDefinition(const RToken& token)\n \n class IndexStatus\n {\n+   \n public:\n    \n-   IndexStatus()\n-      : braceLevel_(0),\n-        parenLevel_(0),\n-        bracketLevel_(0),\n-        doubleBracketLevel_(0)\n-   {}\n+   IndexStatus(const RTokens& tokens)\n+      : tokens_(tokens)\n+   {\n+   }\n    \n+   // The indexer maintains a vector of indices, recording\n+   // the indices at which brackets were discovered. Tokens\n+   // are popped off the stack as right brackets are discovered.\n    void update(const RTokenCursor& cursor)\n    {\n       switch (cursor.type())\n       {\n       \n-      case RToken::LBRACE: ++braceLevel_; break;\n-      case RToken::LPAREN: ++parenLevel_; break;\n-      case RToken::LBRACKET: ++bracketLevel_; break;\n-      case RToken::LDBRACKET: ++doubleBracketLevel_; break;\n-         \n-      case RToken::RBRACE: --braceLevel_; break;\n-      case RToken::RPAREN: --parenLevel_; break;\n-      case RToken::RBRACKET: --bracketLevel_; break;\n-      case RToken::RDBRACKET: --doubleBracketLevel_; break;\n+      // Left brackets\n+      case RToken::LPAREN:\n+      case RToken::LBRACE:\n+      case RToken::LBRACKET:\n+      case RToken::LDBRACKET:\n+      {\n+         stack_.push_back(cursor.offset());\n+         break;\n+      }\n+      \n+      // Right brackets\n+      case RToken::RBRACE:\n+      case RToken::RPAREN:\n+      case RToken::RBRACKET:\n+      case RToken::RDBRACKET:\n+      {\n+         stack_.pop_back();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMzIxMw=="}, "originalCommit": {"oid": "09f64822186c6041fbf1b7fe2c5fbf258dd74e95"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4270, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}