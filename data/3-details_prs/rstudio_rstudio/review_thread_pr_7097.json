{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzM0OTM1", "number": 7097, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzo1MzozNlrOEEfwkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzo1MzozNlrOEEfwkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTUwMDk3OnYy", "diffSide": "RIGHT", "path": "src/cpp/core/libclang/LibClang.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzo1MzozNlrOGiKAKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODozNToyNVrOGip9Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2ODY0OA==", "bodyText": "Did something change to make it so we now require the do/while(0) idiom for the macro, or just doing as a best practice? Obviously fine to have it just curious.", "url": "https://github.com/rstudio/rstudio/pull/7097#discussion_r438468648", "createdAt": "2020-06-10T23:53:36Z", "author": {"login": "gtritchie"}, "path": "src/cpp/core/libclang/LibClang.cpp", "diffHunk": "@@ -20,22 +20,27 @@\n \n #include <boost/regex.hpp>\n \n-#include <core/Log.hpp>\n #include <shared_core/FilePath.hpp>\n-#include <core/RegexUtils.hpp>\n #include <shared_core/SafeConvert.hpp>\n \n+#include <core/Log.hpp>\n+#include <core/RegexUtils.hpp>\n+#include <core/system/Environment.hpp>\n #include <core/system/LibraryLoader.hpp>\n \n-#define LOAD_CLANG_SYMBOL(name) \\\n-   error = core::system::loadSymbol(pLib_, \"clang_\" #name, (void**)&name); \\\n-   if (error) \\\n-   { \\\n-      Error unloadError = unload(); \\\n-      if (unloadError) \\\n-         LOG_ERROR(unloadError); \\\n-      return error; \\\n-   }\n+#define LOAD_CLANG_SYMBOL(name)                                                \\\n+   do                                                                          \\\n+   {                                                                           \\\n+      Error error =                                                            \\\n+         core::system::loadSymbol(pLib_, \"clang_\" #name, (void**) &name);      \\\n+      if (error)                                                               \\\n+      {                                                                        \\\n+         Error unloadError = unload();                                         \\\n+         if (unloadError)                                                      \\\n+            LOG_ERROR(unloadError);                                            \\\n+         return error;                                                         \\\n+      }                                                                        \\\n+   } while (0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cc5c7e69b0c8b28ab6e0456f1b2124180ea6573"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MjE3OA==", "bodyText": "Nothing changed here -- just clang-format + best practice for hygienic macros.", "url": "https://github.com/rstudio/rstudio/pull/7097#discussion_r438992178", "createdAt": "2020-06-11T18:35:25Z", "author": {"login": "kevinushey"}, "path": "src/cpp/core/libclang/LibClang.cpp", "diffHunk": "@@ -20,22 +20,27 @@\n \n #include <boost/regex.hpp>\n \n-#include <core/Log.hpp>\n #include <shared_core/FilePath.hpp>\n-#include <core/RegexUtils.hpp>\n #include <shared_core/SafeConvert.hpp>\n \n+#include <core/Log.hpp>\n+#include <core/RegexUtils.hpp>\n+#include <core/system/Environment.hpp>\n #include <core/system/LibraryLoader.hpp>\n \n-#define LOAD_CLANG_SYMBOL(name) \\\n-   error = core::system::loadSymbol(pLib_, \"clang_\" #name, (void**)&name); \\\n-   if (error) \\\n-   { \\\n-      Error unloadError = unload(); \\\n-      if (unloadError) \\\n-         LOG_ERROR(unloadError); \\\n-      return error; \\\n-   }\n+#define LOAD_CLANG_SYMBOL(name)                                                \\\n+   do                                                                          \\\n+   {                                                                           \\\n+      Error error =                                                            \\\n+         core::system::loadSymbol(pLib_, \"clang_\" #name, (void**) &name);      \\\n+      if (error)                                                               \\\n+      {                                                                        \\\n+         Error unloadError = unload();                                         \\\n+         if (unloadError)                                                      \\\n+            LOG_ERROR(unloadError);                                            \\\n+         return error;                                                         \\\n+      }                                                                        \\\n+   } while (0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2ODY0OA=="}, "originalCommit": {"oid": "3cc5c7e69b0c8b28ab6e0456f1b2124180ea6573"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4380, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}