{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NzkyMTg0", "number": 6449, "title": "Maintain file permissions while performing replace", "bodyText": "Fixes #6048\nThis PR fixes the global replace functionality so it no longer changes the file permissions where the replace takes place. Since we are using a temporary file to perform the replace, we save the permissions of the original file while initializing the replace, and set these permissions after overwriting the original file with the one containing the replace.", "createdAt": "2020-03-11T16:24:17Z", "url": "https://github.com/rstudio/rstudio/pull/6449", "merged": true, "mergeCommit": {"oid": "47126b659470c0f1e5d9adb49881938063ec7c0e"}, "closed": true, "closedAt": "2020-03-11T23:13:29Z", "author": {"login": "melissa-barca"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMb8wFAH2gAyMzg2NzkyMTg0OjRmMjk0MWY3ZmNjYTI5MGUxYjcwNTQ5M2NmZjNjMWViZDBjZDMyZDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMvfElgH2gAyMzg2NzkyMTg0OmNmYjA2NzhmYzNjMzUyZGI1MzVhNjc3ZGU3NzExYjk3YzJlMTQ3MzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4f2941f7fcca290e1b705493cff3c1ebd0cd32d1", "author": {"user": {"login": "melissa-barca", "name": "Melissa Barca"}}, "url": "https://github.com/rstudio/rstudio/commit/4f2941f7fcca290e1b705493cff3c1ebd0cd32d1", "committedDate": "2020-03-11T00:26:58Z", "message": "maintain file permissions while performing replace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyOTM2MDc5", "url": "https://github.com/rstudio/rstudio/pull/6449#pullrequestreview-372936079", "createdAt": "2020-03-11T16:41:54Z", "commit": {"oid": "4f2941f7fcca290e1b705493cff3c1ebd0cd32d1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjo0MTo1NVrOF0_cOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjo0MTo1NVrOF0_cOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwOTY4OQ==", "bodyText": "When constructing a boost::filesystem::path from a std::string, some extra work is needed on Windows; see: \n  \n    \n      rstudio/src/cpp/shared_core/FilePath.cpp\n    \n    \n        Lines 224 to 246\n      in\n      6a45dc8\n    \n    \n    \n    \n\n        \n          \n           #ifdef _WIN32 \n        \n\n        \n          \n            \n        \n\n        \n          \n           // For Windows only, we need to use the wide character versions of the file \n        \n\n        \n          \n           // APIs in order to deal properly with characters that cannot be represented \n        \n\n        \n          \n           // in the default system encoding. (It would be preferable if UTF-8 were the \n        \n\n        \n          \n           // system encoding, but Windows doesn't support that.) However, we can't give \n        \n\n        \n          \n           // FilePath a wide character API because Mac needs to use narrow characters \n        \n\n        \n          \n           // (see note below). So we use wstring internally, and translate to/from UTF-8 \n        \n\n        \n          \n           // narrow strings that are used in the API. \n        \n\n        \n          \n            \n        \n\n        \n          \n           typedef std::wstring internal_string; \n        \n\n        \n          \n            \n        \n\n        \n          \n           std::string toString(const internal_string& value) \n        \n\n        \n          \n           { \n        \n\n        \n          \n              return string_utils::wideToUtf8(value); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           internal_string fromString(const std::string& value) \n        \n\n        \n          \n           { \n        \n\n        \n          \n              return string_utils::utf8ToWide(value); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           #else \n        \n    \n  \n\n\nThis is one reason that we almost never use raw boost::filesystem::path objects and instead always use our FilePath wrapper. You might consider making these set/get permissions methods part of the FilePath object itself (which stores a boost filesystem path internally).", "url": "https://github.com/rstudio/rstudio/pull/6449#discussion_r391109689", "createdAt": "2020-03-11T16:41:55Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -487,6 +489,42 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n       }\n    }\n \n+   Error setPermissions(const std::string& filePath, boost::filesystem::perms permissions)\n+   {\n+      boost::filesystem::path path(filePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f2941f7fcca290e1b705493cff3c1ebd0cd32d1"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1239d411954bfb3a22f0ea5242a6ee73c62631f", "author": {"user": {"login": "melissa-barca", "name": "Melissa Barca"}}, "url": "https://github.com/rstudio/rstudio/commit/b1239d411954bfb3a22f0ea5242a6ee73c62631f", "committedDate": "2020-03-11T17:28:26Z", "message": "during a replace, only get/set permissions on non-Windows OSs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90d8d676d6e01c67bcb7ec34a23fef85a8edfbc6", "author": {"user": {"login": "melissa-barca", "name": "Melissa Barca"}}, "url": "https://github.com/rstudio/rstudio/commit/90d8d676d6e01c67bcb7ec34a23fef85a8edfbc6", "committedDate": "2020-03-11T19:42:36Z", "message": "disable permissions functions on windows"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMDkyNjgy", "url": "https://github.com/rstudio/rstudio/pull/6449#pullrequestreview-373092682", "createdAt": "2020-03-11T20:13:39Z", "commit": {"oid": "b1239d411954bfb3a22f0ea5242a6ee73c62631f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoxMzozOVrOF1HekQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoxMzozOVrOF1HekQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0MTM2MQ==", "bodyText": "What do you mean by the above check? Does this mean flushing the output stream should happen first? Why is it for efficiency?", "url": "https://github.com/rstudio/rstudio/pull/6449#discussion_r391241361", "createdAt": "2020-03-11T20:13:39Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -586,7 +586,14 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n             outputStream_->flush();\n             inputStream_.reset();\n             outputStream_.reset();\n+\n+            // Unneccesary on Windows because this only sets write permissions which we\n+            // already know are correct if we are writing.\n+            // For efficiency, this should not be combined with the above check as flushing\n+            // outputStream could change the file permissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1239d411954bfb3a22f0ea5242a6ee73c62631f"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63e3e243ff0fb4942bbbe6354d466decebaba89c", "author": {"user": {"login": "melissa-barca", "name": "Melissa Barca"}}, "url": "https://github.com/rstudio/rstudio/commit/63e3e243ff0fb4942bbbe6354d466decebaba89c", "committedDate": "2020-03-11T22:54:10Z", "message": "fix comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTg0MTgz", "url": "https://github.com/rstudio/rstudio/pull/6449#pullrequestreview-373184183", "createdAt": "2020-03-11T23:04:20Z", "commit": {"oid": "63e3e243ff0fb4942bbbe6354d466decebaba89c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowNDoyMVrOF1MOVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowNDoyMVrOF1MOVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxOTEyNw==", "bodyText": "Nit: I think this return should be outside the try block for clarity (as it is in the function above)", "url": "https://github.com/rstudio/rstudio/pull/6449#discussion_r391319127", "createdAt": "2020-03-11T23:04:21Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -487,6 +489,45 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n       }\n    }\n \n+// permissions getter/setter (only applicable to Unix platforms)\n+#ifndef _WIN32\n+   Error setPermissions(const std::string& filePath, boost::filesystem::perms permissions)\n+   {\n+      boost::filesystem::path path(filePath);\n+      try\n+      {\n+         boost::filesystem::permissions(path, permissions);\n+      }\n+      catch (const boost::filesystem::filesystem_error& e)\n+      {\n+         return Error(e.code(), ERROR_LOCATION);\n+      }\n+\n+      return Success();\n+   }\n+\n+   Error getPermissions(const std::string& filePath, boost::filesystem::perms* pPerms)\n+   {\n+      *pPerms = boost::filesystem::no_perms;\n+\n+      boost::filesystem::path path(filePath);\n+      try\n+      {\n+         boost::filesystem::file_status fileStatus = status(path);\n+         *pPerms = fileStatus.permissions();\n+         return Success();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e3e243ff0fb4942bbbe6354d466decebaba89c"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfb0678fc3c352db535a677de7711b97c2e14732", "author": {"user": {"login": "melissa-barca", "name": "Melissa Barca"}}, "url": "https://github.com/rstudio/rstudio/commit/cfb0678fc3c352db535a677de7711b97c2e14732", "committedDate": "2020-03-11T23:12:39Z", "message": "move return outside of try block"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 291, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}