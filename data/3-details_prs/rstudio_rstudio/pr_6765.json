{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDQ0NTU1", "number": 6765, "title": "Callback for rstudioapi::highlightUi", "bodyText": "Closes #6650\nThis PR adds a parameter callback to rstudioapi::highlightUi  to accept a R function. When focus is moved to the highlighted area, the R function is executed.", "createdAt": "2020-04-29T01:45:44Z", "url": "https://github.com/rstudio/rstudio/pull/6765", "merged": true, "mergeCommit": {"oid": "bd83335362c7518a4eadf2a25b72497fc97ca31a"}, "closed": true, "closedAt": "2020-04-29T22:12:38Z", "author": {"login": "melissa-barca"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccOZEigH2gAyNDEwNDQ0NTU1OjhlOTRkYzg2MjZiYjVlOWUzYzgyYzJjYjE2OWY4N2I1YzFhYzNkNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccf_VmAFqTQwMzA3NzE4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70", "author": {"user": {"login": "melissa-barca", "name": "Melissa Barca"}}, "url": "https://github.com/rstudio/rstudio/commit/8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70", "committedDate": "2020-04-29T01:42:01Z", "message": "allow a callback parameter to the highlightUi API call - the contents will be executed as R code\nonce the user has brought focus to the element."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyODY0NjQ4", "url": "https://github.com/rstudio/rstudio/pull/6765#pullrequestreview-402864648", "createdAt": "2020-04-29T17:02:44Z", "commit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjo1MFrOGOIbWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzoxOTowOVrOGOJDUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTMyMw==", "bodyText": "nit: best practice is to use the Java interface type (List) and then instantiate it with the concrete class as required (ArrayList)", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417471323", "createdAt": "2020-04-29T17:02:50Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -295,9 +416,11 @@ private void repositionHighlighters()\n    // Private members ----\n    \n    private JsVector<HighlightQuery> highlightQueries_;\n+   private ArrayList<Boolean> queryCallbackStatuses_;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MzU2Nw==", "bodyText": "nit: you should normally wrap JavaScript functions with $entry(); see e.g.\n\n  \n    \n      rstudio/src/gwt/src/org/rstudio/studio/client/shiny/ShinyApplicationPresenter.java\n    \n    \n        Lines 146 to 151\n      in\n      9ae3c31\n    \n    \n    \n    \n\n        \n          \n                 $wnd.addEventListener( \n        \n\n        \n          \n                       \"beforeunload\", \n        \n\n        \n          \n                       $entry(function() { \n        \n\n        \n          \n                          thiz.@org.rstudio.studio.client.shiny.ShinyApplicationPresenter::onClose()(); \n        \n\n        \n          \n                       }), \n        \n\n        \n          \n                       true); \n        \n    \n  \n\n\nSome documentation on why this is done (primarily to ensure function is executed with an appropriate exception handler for GWT):\nhttp://www.gwtproject.org/doc/latest/DevGuideCodingBasicsJSNI.html", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417473567", "createdAt": "2020-04-29T17:06:22Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))\n+         {\n+            highlighter_.setCallbackProcessed(index_, true);\n+            highlighter_.getServer().executeRCode(callback_, new ServerRequestCallback<String>(){\n+\n+               @Override\n+               public void onResponseReceived(String results)\n+               {\n+                  // Remove listener from this element and all other elements with the same query\n+                  highlighter_.clearEvents();\n+               }\n+\n+               @Override\n+               public void onError(ServerError error)\n+               {\n+                  Debug.logError(error);\n+               }\n+            });\n+         }\n+      }\n+\n+      private HandlerRegistration addListener()\n+      {\n+         final JavaScriptObject functor = addEventListener(callback_, monitoredElement_);\n+\n+         return new HandlerRegistration()\n+         {\n+            public void removeHandler()\n+            {\n+               invokeFunctor(functor);\n+            }\n+         };\n+      }\n+\n+      private native JavaScriptObject addEventListener(String code, Element el)/*-{\n+         var thiz = this;\n+         var callback = function() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NDI2Nw==", "bodyText": "nit: This is really just a plain JavaScript function object rather than a functor.", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417474267", "createdAt": "2020-04-29T17:07:28Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))\n+         {\n+            highlighter_.setCallbackProcessed(index_, true);\n+            highlighter_.getServer().executeRCode(callback_, new ServerRequestCallback<String>(){\n+\n+               @Override\n+               public void onResponseReceived(String results)\n+               {\n+                  // Remove listener from this element and all other elements with the same query\n+                  highlighter_.clearEvents();\n+               }\n+\n+               @Override\n+               public void onError(ServerError error)\n+               {\n+                  Debug.logError(error);\n+               }\n+            });\n+         }\n+      }\n+\n+      private HandlerRegistration addListener()\n+      {\n+         final JavaScriptObject functor = addEventListener(callback_, monitoredElement_);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NTc0MQ==", "bodyText": "Should we also set the handler to null after removing it?", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417475741", "createdAt": "2020-04-29T17:09:44Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NjM5Nw==", "bodyText": "Should we clear highlight on error as well?", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417476397", "createdAt": "2020-04-29T17:10:52Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))\n+         {\n+            highlighter_.setCallbackProcessed(index_, true);\n+            highlighter_.getServer().executeRCode(callback_, new ServerRequestCallback<String>(){\n+\n+               @Override\n+               public void onResponseReceived(String results)\n+               {\n+                  // Remove listener from this element and all other elements with the same query\n+                  highlighter_.clearEvents();\n+               }\n+\n+               @Override\n+               public void onError(ServerError error)\n+               {\n+                  Debug.logError(error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4MTU1Mw==", "bodyText": "Can you elaborate a bit on what happens if you have multiple UI elements highlighted, and the callback associated with one is executed? (What happens to the other highlighted UI elements?)\nMain reason I ask: normally, one will highlight multiple UI elements either because:\n\n\nThere are multiple pieces of UI associated with the same action or command (e.g. multiple buttons for saving a document). In this case, one might want to clear all highlighters after the associated command has been executed (e.g. via click or via shortcut);\n\n\nSome of the highlighted UI might act like \"bread crumbs\"; e.g. highlighting a button + menu item leading to the \"final\" item to be clicked or used. In this case, you normally wouldn't want to clear any highlight until the user has clicked on the highlight associated with the actual command of interest.\n\n\nI'm not sure whether this orchestration should happen on the RStudio side, or if it should be a requirement of the code handling the callback.", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417481553", "createdAt": "2020-04-29T17:19:09Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52fe839d56a3f909bb9d519f47fb2bcf5c700daa", "author": {"user": {"login": "melissa-barca", "name": "Melissa Barca"}}, "url": "https://github.com/rstudio/rstudio/commit/52fe839d56a3f909bb9d519f47fb2bcf5c700daa", "committedDate": "2020-04-29T18:40:29Z", "message": "improve code readability and stability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDA0ODg5", "url": "https://github.com/rstudio/rstudio/pull/6765#pullrequestreview-403004889", "createdAt": "2020-04-29T20:15:52Z", "commit": {"oid": "52fe839d56a3f909bb9d519f47fb2bcf5c700daa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDc3MTg0", "url": "https://github.com/rstudio/rstudio/pull/6765#pullrequestreview-403077184", "createdAt": "2020-04-29T22:12:12Z", "commit": {"oid": "52fe839d56a3f909bb9d519f47fb2bcf5c700daa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 233, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}