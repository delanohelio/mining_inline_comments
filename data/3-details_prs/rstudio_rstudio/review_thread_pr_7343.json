{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Njc1MzU4", "number": 7343, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODoyODo0NlrOEOYT0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzozNDo1N1rOEOeBDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTEzODA5OnYy", "diffSide": "RIGHT", "path": "src/cpp/core/system/file_monitor/Win32FileMonitor.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODoyODo0NlrOGxgEvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODo0OToyMVrOGxgy8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1ODkxMA==", "bodyText": "Why the change from LOG_ERROR to direct logging call? I generally support reducing pre-proc macro usage as a Good Thing, but is there any other reason here?", "url": "https://github.com/rstudio/rstudio/pull/7343#discussion_r454558910", "createdAt": "2020-07-14T18:28:46Z", "author": {"login": "gtritchie"}, "path": "src/cpp/core/system/file_monitor/Win32FileMonitor.cpp", "diffHunk": "@@ -91,7 +93,8 @@ void safeCloseHandle(HANDLE hObject, const ErrorLocation& location)\n    {\n       if (!::CloseHandle(hObject))\n       {\n-         LOG_ERROR(LAST_SYSTEM_ERROR());\n+         auto error = LAST_SYSTEM_ERROR();\n+         core::log::logError(error, location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73b1e98c3095142aeadf03832fa21f538d9119e1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3MDczOQ==", "bodyText": "The main reason was that the old version didn't use the location passed in from the caller.", "url": "https://github.com/rstudio/rstudio/pull/7343#discussion_r454570739", "createdAt": "2020-07-14T18:49:21Z", "author": {"login": "kevinushey"}, "path": "src/cpp/core/system/file_monitor/Win32FileMonitor.cpp", "diffHunk": "@@ -91,7 +93,8 @@ void safeCloseHandle(HANDLE hObject, const ErrorLocation& location)\n    {\n       if (!::CloseHandle(hObject))\n       {\n-         LOG_ERROR(LAST_SYSTEM_ERROR());\n+         auto error = LAST_SYSTEM_ERROR();\n+         core::log::logError(error, location);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1ODkxMA=="}, "originalCommit": {"oid": "73b1e98c3095142aeadf03832fa21f538d9119e1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTE3MjAxOnYy", "diffSide": "RIGHT", "path": "src/cpp/core/system/PosixFileScanner.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozNzo1MVrOGxgZTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODo0ODoyNlrOGxgw9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NDE3NQ==", "bodyText": "What are the expected consequences of this change for the non-Windows cases? Given this delay issue was Windows-specific, would it be safer to leave this part as-is and leave this change (potentially) for 1.4/master?\nThinking specifically of the QA test matrix; if code changes are definitively Windows-only, then (presumably) we can tell them to worry specifically only about Windows desktop with this change, but modifying this here seems to bring testing of Mac and Linux desktops into scope?", "url": "https://github.com/rstudio/rstudio/pull/7343#discussion_r454564175", "createdAt": "2020-07-14T18:37:51Z", "author": {"login": "gtritchie"}, "path": "src/cpp/core/system/PosixFileScanner.cpp", "diffHunk": "@@ -124,6 +124,10 @@ Error scanFiles(const tree<FileInfo>::iterator_base& fromNode,\n    // iterate over the names\n    for (const std::string& name : names)\n    {\n+      // check for interrupt\n+      if (boost::this_thread::interruption_requested())\n+         return core::systemError(boost::system::errc::interrupted, ERROR_LOCATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73b1e98c3095142aeadf03832fa21f538d9119e1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3MDIyOQ==", "bodyText": "I think ultimately other platforms run risking the same issue: the file monitor thread isn't able to clean up in time (because it's stuck in the file scanner), but we try to exit anyways and run into problems trying to shut down while the thread is still active.\nThat said, given that this is just theoretical and (AFAIK) we haven't observed this issue in v1.3 thus far, we could back this part out.", "url": "https://github.com/rstudio/rstudio/pull/7343#discussion_r454570229", "createdAt": "2020-07-14T18:48:26Z", "author": {"login": "kevinushey"}, "path": "src/cpp/core/system/PosixFileScanner.cpp", "diffHunk": "@@ -124,6 +124,10 @@ Error scanFiles(const tree<FileInfo>::iterator_base& fromNode,\n    // iterate over the names\n    for (const std::string& name : names)\n    {\n+      // check for interrupt\n+      if (boost::this_thread::interruption_requested())\n+         return core::systemError(boost::system::errc::interrupted, ERROR_LOCATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NDE3NQ=="}, "originalCommit": {"oid": "73b1e98c3095142aeadf03832fa21f538d9119e1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA3MzA4OnYy", "diffSide": "RIGHT", "path": "src/cpp/core/system/file_monitor/Win32FileMonitor.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzozNDo1N1rOGxo9ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDozMDowMlrOGxt0Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNDQ5MA==", "bodyText": "Do accesses to this registry require mutexes? (noticed they're all bare; haven't looked too closely but I know file monitors run on a thread)", "url": "https://github.com/rstudio/rstudio/pull/7343#discussion_r454704490", "createdAt": "2020-07-14T23:34:57Z", "author": {"login": "jmcphers"}, "path": "src/cpp/core/system/file_monitor/Win32FileMonitor.cpp", "diffHunk": "@@ -41,13 +42,15 @@ namespace {\n // buffer size for notifications (cannot be > 64kb for network drives)\n const std::size_t kBuffSize = 32768;\n \n+// handle registry\n+std::set<Handle> s_handleRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73b1e98c3095142aeadf03832fa21f538d9119e1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4NDA4Mw==", "bodyText": "I think you're right: these actions can be triggered either by the main thread, or by the file monitor thread itself. For example, registerMonitor() is typically called by the main thread, whereas unregisterMonitor() here is being called by the thread itself, but may also be called on the main thread -- e.g. as is done for user preferences.", "url": "https://github.com/rstudio/rstudio/pull/7343#discussion_r454784083", "createdAt": "2020-07-15T04:30:02Z", "author": {"login": "kevinushey"}, "path": "src/cpp/core/system/file_monitor/Win32FileMonitor.cpp", "diffHunk": "@@ -41,13 +42,15 @@ namespace {\n // buffer size for notifications (cannot be > 64kb for network drives)\n const std::size_t kBuffSize = 32768;\n \n+// handle registry\n+std::set<Handle> s_handleRegistry;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNDQ5MA=="}, "originalCommit": {"oid": "73b1e98c3095142aeadf03832fa21f538d9119e1"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4318, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}