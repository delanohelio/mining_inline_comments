{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NDkwNzI4", "number": 7690, "title": "fix range analysis warnings in newest clang", "bodyText": "Intent\nResolve compiler warnings from -Wrange-loop-analysis, introduced in the newest version of Clang.\nApproach\nLook at and respond to compiler warnings. Mostly fixed via adding reference qualifier & or, in some cases, using auto&& (e.g. for std::vector<T> where binding to potential proxies for e.g. std::vector<bool> could be necessary).\nQA Notes\nNo QA notes / testing required.", "createdAt": "2020-08-31T19:19:40Z", "url": "https://github.com/rstudio/rstudio/pull/7690", "merged": true, "mergeCommit": {"oid": "181f2deb4b6681510d6fa82fea2ebe3e40dc0b92"}, "closed": true, "closedAt": "2020-09-02T16:47:27Z", "author": {"login": "kevinushey"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEX0L6gH2gAyNDc2NDkwNzI4OjE2ZTEyY2RiYmEyMjM4NWVjOGQ5N2ZkZWIxOWU2NTFjYmQ3ODk0ZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEZbOpAFqTQ3ODk1NTMyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2", "author": {"user": {"login": "kevinushey", "name": "Kevin Ushey"}}, "url": "https://github.com/rstudio/rstudio/commit/16e12cdbba22385ec8d97fdeb19e651cbd7894e2", "committedDate": "2020-08-31T19:17:45Z", "message": "fix range analysis warnings in newest clang"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4ODkyNjIw", "url": "https://github.com/rstudio/rstudio/pull/7690#pullrequestreview-478892620", "createdAt": "2020-08-31T19:27:36Z", "commit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOToyNzozNlrOHKGIpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOToyNzozNlrOHKGIpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0ODMyNA==", "bodyText": "This method returns a pointer to stack-allocated memory (moral equivalent of return std::string().c_str()); given that it's unsafe I've decided to remove it. This didn't affect anything in open source; if something is effected in pro then I think we need to change those usages to be safer.", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480348324", "createdAt": "2020-08-31T19:27:36Z", "author": {"login": "kevinushey"}, "path": "src/cpp/shared_core/json/Json.cpp", "diffHunk": "@@ -586,12 +586,6 @@ Object Value::getValue<Object>() const\n    return copy;\n }\n \n-template<>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTU1MzI1", "url": "https://github.com/rstudio/rstudio/pull/7690#pullrequestreview-478955325", "createdAt": "2020-08-31T21:06:54Z", "commit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTowNjo1NFrOHKJPtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxMDoxNFrOHKJVpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTI4NQ==", "bodyText": "I agree - I don't see a reason why the caller couldn't get the string value and call c_str() themselves.", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480399285", "createdAt": "2020-08-31T21:06:54Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/shared_core/json/Json.cpp", "diffHunk": "@@ -586,12 +586,6 @@ Object Value::getValue<Object>() const\n    return copy;\n }\n \n-template<>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0ODMyNA=="}, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTgyNA==", "bodyText": "This compiles? The parameter is a const &, so I think we should use const & here to ensure that we won't accidentally gut something we shouldn't.", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480399824", "createdAt": "2020-08-31T21:08:10Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/shared_core/include/shared_core/json/Json.hpp", "diffHunk": "@@ -1790,7 +1790,7 @@ template <typename T>\n inline Value toJsonValue(const std::vector<T>& in_vector)\n {\n    Array results;\n-   for (const T& val : in_vector)\n+   for (auto&& val : in_vector)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDIyMA==", "bodyText": "Is const & incorrect here?", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480400220", "createdAt": "2020-08-31T21:08:59Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/session/SessionMain.cpp", "diffHunk": "@@ -650,7 +650,8 @@ Error rInit(const rstudio::r::session::RInitInfo& rInitInfo)\n    error = rstudio::r::json::getRpcMethods(&rMethods);\n    if (error)\n       return error;\n-   for (const json::JsonRpcMethod& method : rMethods)\n+   \n+   for (json::JsonRpcMethod method : rMethods)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDgwNw==", "bodyText": "This is a copy instead of a reference because it's an enum type (and therefore just as fast/memory efficient to copy as to copy the reference of it)?", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480400807", "createdAt": "2020-08-31T21:10:14Z", "author": {"login": "MariaSemple"}, "path": "src/cpp/core/ConfigProfile.cpp", "diffHunk": "@@ -88,7 +88,7 @@ Error ConfigProfile::parseString(const std::string& profileStr)\n    for (const ptree::value_type& child : profileTree)\n    {\n       boost::optional<Level> matchingLevel;\n-      for (const Level& level : sections_)\n+      for (Level level : sections_)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 65, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}