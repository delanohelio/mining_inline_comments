{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzM0OTM1", "number": 7097, "title": "require system libclang on macOS", "bodyText": "Closes #6977.\nIn theory, we allow the use of an optional installation of LLVM, but in practice that seems to never work (and orchestration of include paths etc. to make that work and compatible with what R does isn't worth the effort when users will normally have macOS command line tools installed anyhow).\nGiven that we're now always binding to the macOS version of libclang, setting up the extra system include paths seems to be no longer necessary.\nCandidate for v1.3 backport.", "createdAt": "2020-06-10T22:29:17Z", "url": "https://github.com/rstudio/rstudio/pull/7097", "merged": true, "mergeCommit": {"oid": "cb435b9953d8740cb5fdea2545589a7f300591ac"}, "closed": true, "closedAt": "2020-06-11T18:35:48Z", "author": {"login": "kevinushey"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqBKpRAH2gAyNDMyNzM0OTM1OjY3YjdkYzVjNDQ2ZjUxNzM2ZDBjNTdjYjhkMTlhZTE5ZDJkODUyOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqCqSXAFqTQyODUwMzg0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "67b7dc5c446f51736d0c57cb8d19ae19d2d85296", "author": {"user": {"login": "kevinushey", "name": "Kevin Ushey"}}, "url": "https://github.com/rstudio/rstudio/commit/67b7dc5c446f51736d0c57cb8d19ae19d2d85296", "committedDate": "2020-06-10T22:12:26Z", "message": "reformat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d11e200aa65ff50938d71f1cb31fc6571cec4ce", "author": {"user": {"login": "kevinushey", "name": "Kevin Ushey"}}, "url": "https://github.com/rstudio/rstudio/commit/6d11e200aa65ff50938d71f1cb31fc6571cec4ce", "committedDate": "2020-06-10T22:13:05Z", "message": "use RSTUDIO_LIBCLANG_PATH to request specific version of libclang"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cc5c7e69b0c8b28ab6e0456f1b2124180ea6573", "author": {"user": {"login": "kevinushey", "name": "Kevin Ushey"}}, "url": "https://github.com/rstudio/rstudio/commit/3cc5c7e69b0c8b28ab6e0456f1b2124180ea6573", "committedDate": "2020-06-10T22:26:37Z", "message": "require command-line-tools version of libclang"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTAzODQz", "url": "https://github.com/rstudio/rstudio/pull/7097#pullrequestreview-428503843", "createdAt": "2020-06-10T23:53:35Z", "commit": {"oid": "3cc5c7e69b0c8b28ab6e0456f1b2124180ea6573"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzo1MzozNlrOGiKAKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzo1MzozNlrOGiKAKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2ODY0OA==", "bodyText": "Did something change to make it so we now require the do/while(0) idiom for the macro, or just doing as a best practice? Obviously fine to have it just curious.", "url": "https://github.com/rstudio/rstudio/pull/7097#discussion_r438468648", "createdAt": "2020-06-10T23:53:36Z", "author": {"login": "gtritchie"}, "path": "src/cpp/core/libclang/LibClang.cpp", "diffHunk": "@@ -20,22 +20,27 @@\n \n #include <boost/regex.hpp>\n \n-#include <core/Log.hpp>\n #include <shared_core/FilePath.hpp>\n-#include <core/RegexUtils.hpp>\n #include <shared_core/SafeConvert.hpp>\n \n+#include <core/Log.hpp>\n+#include <core/RegexUtils.hpp>\n+#include <core/system/Environment.hpp>\n #include <core/system/LibraryLoader.hpp>\n \n-#define LOAD_CLANG_SYMBOL(name) \\\n-   error = core::system::loadSymbol(pLib_, \"clang_\" #name, (void**)&name); \\\n-   if (error) \\\n-   { \\\n-      Error unloadError = unload(); \\\n-      if (unloadError) \\\n-         LOG_ERROR(unloadError); \\\n-      return error; \\\n-   }\n+#define LOAD_CLANG_SYMBOL(name)                                                \\\n+   do                                                                          \\\n+   {                                                                           \\\n+      Error error =                                                            \\\n+         core::system::loadSymbol(pLib_, \"clang_\" #name, (void**) &name);      \\\n+      if (error)                                                               \\\n+      {                                                                        \\\n+         Error unloadError = unload();                                         \\\n+         if (unloadError)                                                      \\\n+            LOG_ERROR(unloadError);                                            \\\n+         return error;                                                         \\\n+      }                                                                        \\\n+   } while (0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cc5c7e69b0c8b28ab6e0456f1b2124180ea6573"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 189, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}