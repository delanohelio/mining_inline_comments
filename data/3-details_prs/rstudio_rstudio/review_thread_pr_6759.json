{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjU3NDU0", "number": 6759, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozNTozMVrOD3TlXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozNjo0MVrOD3Tnjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzE5MTM1OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/prefs/UserStateLayer.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozNTozMVrOGNfXCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo1MToyMVrOGNf_Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5ODQ3NQ==", "bodyText": "One worry: If I understand correctly, some users might lose their old tabs if they had been working with both RStudio Desktop + RStudio Server on the same machine (since previously they \"shared\" the same set of tabs). Is this something worth guarding against?", "url": "https://github.com/rstudio/rstudio/pull/6759#discussion_r416798475", "createdAt": "2020-04-28T17:35:31Z", "author": {"login": "kevinushey"}, "path": "src/cpp/session/prefs/UserStateLayer.cpp", "diffHunk": "@@ -33,18 +33,34 @@ UserStateLayer::UserStateLayer():\n \n core::Error UserStateLayer::readPrefs()\n {\n-   prefsFile_ = core::system::xdg::userDataDir().completePath(\n+   FilePath schemaFile = options().rResourcesPath().completePath(\"schema\").completePath(kUserStateSchemaFile);\n+\n+   // desktop and server versions of RStudio use separate state files so that mixing desktop and server\n+   // on the same machine is possible w/o side effects like sharing a source database\n+   stateFile_ = core::system::xdg::userDataDir().completePath(\n          options().programMode() == kSessionProgramModeDesktop ? \n             kUserStateFileDesktop : \n             kUserStateFileServer);\n \n-   return loadPrefsFromFile(prefsFile_,\n-      options().rResourcesPath().completePath(\"schema\").completePath(kUserStateSchemaFile));\n+   if (!stateFile_.exists())\n+   {\n+      // if there's no state file yet, check for a state file left by an older version of RStudio 1.3\n+      FilePath oldStateFile = core::system::xdg::userDataDir().completePath(\"rstudio-state.json\");\n+      if (oldStateFile.exists())\n+      {\n+          // found an old file; attempt to migrate it\n+          Error error = oldStateFile.move(stateFile_);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd556045141f8c498f2685501ec433ffcafb464d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwODc3MQ==", "bodyText": "There is no practical way to guard against this since they need to use separate sets of tabs (they can't both use your old tab sets; see #6669), so we pick a winner here (whichever you launch first) and the loser gets a new set of tabs.\nThere is an impractical solution here. We could assign new context IDs for desktop and server, remember the old ones, and then whenever we open a project, we clone the source database from the old id to the new one if we find it. However the volume of fragile, one-time-use code involved there is probably not worth it given that running desktop and server against the same account is very rare in the wild.", "url": "https://github.com/rstudio/rstudio/pull/6759#discussion_r416808771", "createdAt": "2020-04-28T17:51:21Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/prefs/UserStateLayer.cpp", "diffHunk": "@@ -33,18 +33,34 @@ UserStateLayer::UserStateLayer():\n \n core::Error UserStateLayer::readPrefs()\n {\n-   prefsFile_ = core::system::xdg::userDataDir().completePath(\n+   FilePath schemaFile = options().rResourcesPath().completePath(\"schema\").completePath(kUserStateSchemaFile);\n+\n+   // desktop and server versions of RStudio use separate state files so that mixing desktop and server\n+   // on the same machine is possible w/o side effects like sharing a source database\n+   stateFile_ = core::system::xdg::userDataDir().completePath(\n          options().programMode() == kSessionProgramModeDesktop ? \n             kUserStateFileDesktop : \n             kUserStateFileServer);\n \n-   return loadPrefsFromFile(prefsFile_,\n-      options().rResourcesPath().completePath(\"schema\").completePath(kUserStateSchemaFile));\n+   if (!stateFile_.exists())\n+   {\n+      // if there's no state file yet, check for a state file left by an older version of RStudio 1.3\n+      FilePath oldStateFile = core::system::xdg::userDataDir().completePath(\"rstudio-state.json\");\n+      if (oldStateFile.exists())\n+      {\n+          // found an old file; attempt to migrate it\n+          Error error = oldStateFile.move(stateFile_);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5ODQ3NQ=="}, "originalCommit": {"oid": "dd556045141f8c498f2685501ec433ffcafb464d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzE5Njk1OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/prefs/UserStateLayer.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozNjo0MVrOGNfaXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo0NTo1MlrOGNfxzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5OTMyNg==", "bodyText": "So in pathological case where (for example) user was last using RStudio Server 1.3 (prior to the separation of desktop vs server state files), then installs updated RStudio Desktop and Server 1.3 and runs desktop, it will take over that previous state, and next time they run Server that state is gone? Maybe nothing can be done about this. What if you, on first time encountering this scenario where the new state filename is missing, copy the legacy state file over both to desktop and server then delete the old one? Maybe that would be worse, I'm not sure of the implications or if would be worth the complexity.", "url": "https://github.com/rstudio/rstudio/pull/6759#discussion_r416799326", "createdAt": "2020-04-28T17:36:41Z", "author": {"login": "gtritchie"}, "path": "src/cpp/session/prefs/UserStateLayer.cpp", "diffHunk": "@@ -33,18 +33,34 @@ UserStateLayer::UserStateLayer():\n \n core::Error UserStateLayer::readPrefs()\n {\n-   prefsFile_ = core::system::xdg::userDataDir().completePath(\n+   FilePath schemaFile = options().rResourcesPath().completePath(\"schema\").completePath(kUserStateSchemaFile);\n+\n+   // desktop and server versions of RStudio use separate state files so that mixing desktop and server\n+   // on the same machine is possible w/o side effects like sharing a source database\n+   stateFile_ = core::system::xdg::userDataDir().completePath(\n          options().programMode() == kSessionProgramModeDesktop ? \n             kUserStateFileDesktop : \n             kUserStateFileServer);\n \n-   return loadPrefsFromFile(prefsFile_,\n-      options().rResourcesPath().completePath(\"schema\").completePath(kUserStateSchemaFile));\n+   if (!stateFile_.exists())\n+   {\n+      // if there's no state file yet, check for a state file left by an older version of RStudio 1.3\n+      FilePath oldStateFile = core::system::xdg::userDataDir().completePath(\"rstudio-state.json\");\n+      if (oldStateFile.exists())\n+      {\n+          // found an old file; attempt to migrate it\n+          Error error = oldStateFile.move(stateFile_);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd556045141f8c498f2685501ec433ffcafb464d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwNTMyNw==", "bodyText": "Your analysis is 100% correct; if you are running both desktop and server then only one of them is going to get your old state. That's unfortunate but one of them has to win since we can't use the same state for both of them:\n\nWhat if you, on first time encountering this scenario where the new state filename is missing, copy the legacy state file over both to desktop and server then delete the old one?\n\nThis would be worse. Copying it to both locations means that desktop and server will both use the old context ID, which means they will share a source database. (see #6669).", "url": "https://github.com/rstudio/rstudio/pull/6759#discussion_r416805327", "createdAt": "2020-04-28T17:45:52Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/prefs/UserStateLayer.cpp", "diffHunk": "@@ -33,18 +33,34 @@ UserStateLayer::UserStateLayer():\n \n core::Error UserStateLayer::readPrefs()\n {\n-   prefsFile_ = core::system::xdg::userDataDir().completePath(\n+   FilePath schemaFile = options().rResourcesPath().completePath(\"schema\").completePath(kUserStateSchemaFile);\n+\n+   // desktop and server versions of RStudio use separate state files so that mixing desktop and server\n+   // on the same machine is possible w/o side effects like sharing a source database\n+   stateFile_ = core::system::xdg::userDataDir().completePath(\n          options().programMode() == kSessionProgramModeDesktop ? \n             kUserStateFileDesktop : \n             kUserStateFileServer);\n \n-   return loadPrefsFromFile(prefsFile_,\n-      options().rResourcesPath().completePath(\"schema\").completePath(kUserStateSchemaFile));\n+   if (!stateFile_.exists())\n+   {\n+      // if there's no state file yet, check for a state file left by an older version of RStudio 1.3\n+      FilePath oldStateFile = core::system::xdg::userDataDir().completePath(\"rstudio-state.json\");\n+      if (oldStateFile.exists())\n+      {\n+          // found an old file; attempt to migrate it\n+          Error error = oldStateFile.move(stateFile_);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5OTMyNg=="}, "originalCommit": {"oid": "dd556045141f8c498f2685501ec433ffcafb464d"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3930, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}