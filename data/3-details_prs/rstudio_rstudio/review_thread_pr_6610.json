{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTUyNzkx", "number": 6610, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDoxMTo1MlrODwNb0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDoxMzoxMlrODwNcqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODc4MzUzOnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionSource.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDoxMTo1MlrOGDFSsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDoxMTo1MlrOGDFSsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg4NTYxOQ==", "bodyText": "If memory serves this isn't exception-safe. Maybe use FilePath::openForRead?", "url": "https://github.com/rstudio/rstudio/pull/6610#discussion_r405885619", "createdAt": "2020-04-09T00:11:52Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionSource.cpp", "diffHunk": "@@ -69,6 +71,52 @@ namespace {\n module_context::WaitForMethodFunction s_waitForRequestDocumentSave;\n module_context::WaitForMethodFunction s_waitForRequestDocumentClose;\n \n+std::string inferDocumentType(const FilePath& documentPath,\n+                              const std::string& defaultType)\n+{\n+   // read first line in document\n+   std::ifstream ifs(documentPath.getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ce0b9f852bf469a0c3042d0a61c85c31db294bf"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODc4NTY4OnYy", "diffSide": "RIGHT", "path": "src/cpp/session/modules/SessionSource.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDoxMzoxMlrOGDFUIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDoxMzoxMlrOGDFUIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg4NTk4NA==", "bodyText": "I think csh and ksh are pretty common, too.", "url": "https://github.com/rstudio/rstudio/pull/6610#discussion_r405885984", "createdAt": "2020-04-09T00:13:12Z", "author": {"login": "jmcphers"}, "path": "src/cpp/session/modules/SessionSource.cpp", "diffHunk": "@@ -69,6 +71,52 @@ namespace {\n module_context::WaitForMethodFunction s_waitForRequestDocumentSave;\n module_context::WaitForMethodFunction s_waitForRequestDocumentClose;\n \n+std::string inferDocumentType(const FilePath& documentPath,\n+                              const std::string& defaultType)\n+{\n+   // read first line in document\n+   std::ifstream ifs(documentPath.getAbsolutePath());\n+   if (!ifs.is_open())\n+      return defaultType;\n+ \n+   // try to read the first line\n+   std::string line;\n+   std::getline(ifs, line);\n+   ifs.close();\n+   \n+   // check for a shebang line\n+   if (!boost::algorithm::starts_with(line, \"#!\"))\n+      return defaultType;\n+   \n+   // use heuristics to guess the file type\n+   boost::regex pattern(\"(?:\\\\s|/)([^\\\\s/]+)(?=\\\\s|$)\");\n+   boost::sregex_token_iterator it(line.begin(), line.end(), pattern, 1);\n+   boost::sregex_token_iterator end;\n+   for (; it != end; ++it)\n+   {\n+      // skip things that look like flags\n+      if (boost::algorithm::starts_with(*it, \"-\"))\n+         continue;\n+      \n+      // check for common shells\n+      for (auto&& shell : {\"sh\", \"bash\", \"fish\", \"zsh\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ce0b9f852bf469a0c3042d0a61c85c31db294bf"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4024, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}