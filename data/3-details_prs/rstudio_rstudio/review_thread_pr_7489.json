{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MzE2MDcx", "number": 7489, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzowOTowMlrOETxOqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzoxNjoxOVrOETxYig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTY0OTY5OnYy", "diffSide": "RIGHT", "path": "src/cpp/core/include/core/http/TcpIpAsyncClientSsl.hpp", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzowOTowMlrOG5sLVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzozMTozM1rOG5s9ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0NTgxNQ==", "bodyText": "Does a null result here indicate an error we need to log? Or is this expected in the normal course of operations?", "url": "https://github.com/rstudio/rstudio/pull/7489#discussion_r463145815", "createdAt": "2020-07-30T17:09:02Z", "author": {"login": "jmcphers"}, "path": "src/cpp/core/include/core/http/TcpIpAsyncClientSsl.hpp", "diffHunk": "@@ -238,14 +278,43 @@ class TcpIpAsyncClientSsl\n    }\n #endif\n \n-private:\n-   boost::asio::ssl::context sslContext_;\n-   boost::scoped_ptr<boost::asio::ssl::stream<boost::asio::ip::tcp::socket> > ptrSslStream_;\n-   std::string address_;\n-   std::string port_;\n-   bool verify_;\n-   std::string certificateAuthority_;\n-   boost::posix_time::time_duration connectionTimeout_;\n+#ifdef __APPLE__\n+   class Keychain : public ICertStore\n+   {\n+   public:\n+      Keychain()\n+      {\n+         // load all certs from the keychain\n+         std::vector<KeychainCertificateData> certs = getKeychainCertificates();\n+         for (const auto& cert : certs)\n+         {\n+            // convert the raw bytes from the keychain into a format that OpenSSL can understand\n+            const unsigned char* bytePtr = cert.data.get();\n+            X509* x509 = d2i_X509(nullptr, &bytePtr, cert.size);\n+            if (x509)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8a29d883b406650d670b802316772c44239431"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1ODQyNQ==", "bodyText": "I think logging this as error would be too heavy handed because if there was an invalid certificate in the store for some reason, then this could cause a lot of spam, especially in RStudio Server. I will log the error at debug level.", "url": "https://github.com/rstudio/rstudio/pull/7489#discussion_r463158425", "createdAt": "2020-07-30T17:31:10Z", "author": {"login": "kfeinauer"}, "path": "src/cpp/core/include/core/http/TcpIpAsyncClientSsl.hpp", "diffHunk": "@@ -238,14 +278,43 @@ class TcpIpAsyncClientSsl\n    }\n #endif\n \n-private:\n-   boost::asio::ssl::context sslContext_;\n-   boost::scoped_ptr<boost::asio::ssl::stream<boost::asio::ip::tcp::socket> > ptrSslStream_;\n-   std::string address_;\n-   std::string port_;\n-   bool verify_;\n-   std::string certificateAuthority_;\n-   boost::posix_time::time_duration connectionTimeout_;\n+#ifdef __APPLE__\n+   class Keychain : public ICertStore\n+   {\n+   public:\n+      Keychain()\n+      {\n+         // load all certs from the keychain\n+         std::vector<KeychainCertificateData> certs = getKeychainCertificates();\n+         for (const auto& cert : certs)\n+         {\n+            // convert the raw bytes from the keychain into a format that OpenSSL can understand\n+            const unsigned char* bytePtr = cert.data.get();\n+            X509* x509 = d2i_X509(nullptr, &bytePtr, cert.size);\n+            if (x509)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0NTgxNQ=="}, "originalCommit": {"oid": "9d8a29d883b406650d670b802316772c44239431"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1ODYyOQ==", "bodyText": "Sounds good!", "url": "https://github.com/rstudio/rstudio/pull/7489#discussion_r463158629", "createdAt": "2020-07-30T17:31:33Z", "author": {"login": "jmcphers"}, "path": "src/cpp/core/include/core/http/TcpIpAsyncClientSsl.hpp", "diffHunk": "@@ -238,14 +278,43 @@ class TcpIpAsyncClientSsl\n    }\n #endif\n \n-private:\n-   boost::asio::ssl::context sslContext_;\n-   boost::scoped_ptr<boost::asio::ssl::stream<boost::asio::ip::tcp::socket> > ptrSslStream_;\n-   std::string address_;\n-   std::string port_;\n-   bool verify_;\n-   std::string certificateAuthority_;\n-   boost::posix_time::time_duration connectionTimeout_;\n+#ifdef __APPLE__\n+   class Keychain : public ICertStore\n+   {\n+   public:\n+      Keychain()\n+      {\n+         // load all certs from the keychain\n+         std::vector<KeychainCertificateData> certs = getKeychainCertificates();\n+         for (const auto& cert : certs)\n+         {\n+            // convert the raw bytes from the keychain into a format that OpenSSL can understand\n+            const unsigned char* bytePtr = cert.data.get();\n+            X509* x509 = d2i_X509(nullptr, &bytePtr, cert.size);\n+            if (x509)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0NTgxNQ=="}, "originalCommit": {"oid": "9d8a29d883b406650d670b802316772c44239431"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTY2OTMyOnYy", "diffSide": "RIGHT", "path": "src/cpp/core/include/core/http/Keychain.hpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzoxNDo0MVrOG5sXcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzozNDo1MVrOG5tEMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0ODkxMg==", "bodyText": "Nit: Idiomatically it's more common for us to use a vector of shared pointers to immutable data structures (and using e.g., std::vector<unsigned char> inside the data structure to create a managed buffer). This reduces copying somewhat but isn't a big deal here so up to you whether you want to change it.", "url": "https://github.com/rstudio/rstudio/pull/7489#discussion_r463148912", "createdAt": "2020-07-30T17:14:41Z", "author": {"login": "jmcphers"}, "path": "src/cpp/core/include/core/http/Keychain.hpp", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Keychain.hpp\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+#ifndef CORE_HTTP_KEYCHAIN_HPP\n+#define CORE_HTTP_KEYCHAIN_HPP\n+\n+#include <vector>\n+\n+#include <boost/shared_ptr.hpp>\n+\n+namespace rstudio {\n+namespace core {\n+namespace http {\n+\n+struct KeychainCertificateData\n+{\n+   long size;\n+   boost::shared_ptr<unsigned char> data;\n+};\n+\n+std::vector<KeychainCertificateData> getKeychainCertificates();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8a29d883b406650d670b802316772c44239431"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2MDM2OQ==", "bodyText": "Considering the important thing to free here is the actual underlying (dynamically allocated) buffer, I wanted to wrap that in a shared_ptr to ensures it is freed with minimum boilerplate (no custom destructor). So, since the copying overhead here is almost negligible (only an extra 8 bytes per entry), I will leave this as-is.", "url": "https://github.com/rstudio/rstudio/pull/7489#discussion_r463160369", "createdAt": "2020-07-30T17:34:51Z", "author": {"login": "kfeinauer"}, "path": "src/cpp/core/include/core/http/Keychain.hpp", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Keychain.hpp\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+\n+#ifndef CORE_HTTP_KEYCHAIN_HPP\n+#define CORE_HTTP_KEYCHAIN_HPP\n+\n+#include <vector>\n+\n+#include <boost/shared_ptr.hpp>\n+\n+namespace rstudio {\n+namespace core {\n+namespace http {\n+\n+struct KeychainCertificateData\n+{\n+   long size;\n+   boost::shared_ptr<unsigned char> data;\n+};\n+\n+std::vector<KeychainCertificateData> getKeychainCertificates();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0ODkxMg=="}, "originalCommit": {"oid": "9d8a29d883b406650d670b802316772c44239431"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTY3NDk4OnYy", "diffSide": "RIGHT", "path": "src/cpp/core/include/core/http/TcpIpAsyncClientSsl.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzoxNjoxOVrOG5sa_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzoxNjoxOVrOG5sa_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0OTgyMA==", "bodyText": "Let's add a comment here making it extra clear that the caller should not free the pointers as they're owned by the cert store.", "url": "https://github.com/rstudio/rstudio/pull/7489#discussion_r463149820", "createdAt": "2020-07-30T17:16:19Z", "author": {"login": "jmcphers"}, "path": "src/cpp/core/include/core/http/TcpIpAsyncClientSsl.hpp", "diffHunk": "@@ -224,12 +258,18 @@ class TcpIpAsyncClientSsl\n          }\n       }\n \n+      std::vector<X509*> getCertificates() const", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8a29d883b406650d670b802316772c44239431"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4249, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}