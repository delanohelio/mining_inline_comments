{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDQ0NTU1", "number": 6765, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjo1MFrOD3uA0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzoxOTowOVrOD3uZXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzUyMTQ0OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjo1MFrOGOIbWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODowNzowNlrOGOK3mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTMyMw==", "bodyText": "nit: best practice is to use the Java interface type (List) and then instantiate it with the concrete class as required (ArrayList)", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417471323", "createdAt": "2020-04-29T17:02:50Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -295,9 +416,11 @@ private void repositionHighlighters()\n    // Private members ----\n    \n    private JsVector<HighlightQuery> highlightQueries_;\n+   private ArrayList<Boolean> queryCallbackStatuses_;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMTMyMg==", "bodyText": "Thanks, fixed!", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417511322", "createdAt": "2020-04-29T18:07:06Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -295,9 +416,11 @@ private void repositionHighlighters()\n    // Private members ----\n    \n    private JsVector<HighlightQuery> highlightQueries_;\n+   private ArrayList<Boolean> queryCallbackStatuses_;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTMyMw=="}, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzUzNTU0OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowNjoyMlrOGOIkHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODowNToyNFrOGOK0BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MzU2Nw==", "bodyText": "nit: you should normally wrap JavaScript functions with $entry(); see e.g.\n\n  \n    \n      rstudio/src/gwt/src/org/rstudio/studio/client/shiny/ShinyApplicationPresenter.java\n    \n    \n        Lines 146 to 151\n      in\n      9ae3c31\n    \n    \n    \n    \n\n        \n          \n                 $wnd.addEventListener( \n        \n\n        \n          \n                       \"beforeunload\", \n        \n\n        \n          \n                       $entry(function() { \n        \n\n        \n          \n                          thiz.@org.rstudio.studio.client.shiny.ShinyApplicationPresenter::onClose()(); \n        \n\n        \n          \n                       }), \n        \n\n        \n          \n                       true); \n        \n    \n  \n\n\nSome documentation on why this is done (primarily to ensure function is executed with an appropriate exception handler for GWT):\nhttp://www.gwtproject.org/doc/latest/DevGuideCodingBasicsJSNI.html", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417473567", "createdAt": "2020-04-29T17:06:22Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))\n+         {\n+            highlighter_.setCallbackProcessed(index_, true);\n+            highlighter_.getServer().executeRCode(callback_, new ServerRequestCallback<String>(){\n+\n+               @Override\n+               public void onResponseReceived(String results)\n+               {\n+                  // Remove listener from this element and all other elements with the same query\n+                  highlighter_.clearEvents();\n+               }\n+\n+               @Override\n+               public void onError(ServerError error)\n+               {\n+                  Debug.logError(error);\n+               }\n+            });\n+         }\n+      }\n+\n+      private HandlerRegistration addListener()\n+      {\n+         final JavaScriptObject functor = addEventListener(callback_, monitoredElement_);\n+\n+         return new HandlerRegistration()\n+         {\n+            public void removeHandler()\n+            {\n+               invokeFunctor(functor);\n+            }\n+         };\n+      }\n+\n+      private native JavaScriptObject addEventListener(String code, Element el)/*-{\n+         var thiz = this;\n+         var callback = function() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMDQwNQ==", "bodyText": "Thanks for including the documentation! Fixed.", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417510405", "createdAt": "2020-04-29T18:05:24Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))\n+         {\n+            highlighter_.setCallbackProcessed(index_, true);\n+            highlighter_.getServer().executeRCode(callback_, new ServerRequestCallback<String>(){\n+\n+               @Override\n+               public void onResponseReceived(String results)\n+               {\n+                  // Remove listener from this element and all other elements with the same query\n+                  highlighter_.clearEvents();\n+               }\n+\n+               @Override\n+               public void onError(ServerError error)\n+               {\n+                  Debug.logError(error);\n+               }\n+            });\n+         }\n+      }\n+\n+      private HandlerRegistration addListener()\n+      {\n+         final JavaScriptObject functor = addEventListener(callback_, monitoredElement_);\n+\n+         return new HandlerRegistration()\n+         {\n+            public void removeHandler()\n+            {\n+               invokeFunctor(functor);\n+            }\n+         };\n+      }\n+\n+      private native JavaScriptObject addEventListener(String code, Element el)/*-{\n+         var thiz = this;\n+         var callback = function() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MzU2Nw=="}, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzUzOTg1OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowNzoyOFrOGOIm2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODowNTowMFrOGOKzTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NDI2Nw==", "bodyText": "nit: This is really just a plain JavaScript function object rather than a functor.", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417474267", "createdAt": "2020-04-29T17:07:28Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))\n+         {\n+            highlighter_.setCallbackProcessed(index_, true);\n+            highlighter_.getServer().executeRCode(callback_, new ServerRequestCallback<String>(){\n+\n+               @Override\n+               public void onResponseReceived(String results)\n+               {\n+                  // Remove listener from this element and all other elements with the same query\n+                  highlighter_.clearEvents();\n+               }\n+\n+               @Override\n+               public void onError(ServerError error)\n+               {\n+                  Debug.logError(error);\n+               }\n+            });\n+         }\n+      }\n+\n+      private HandlerRegistration addListener()\n+      {\n+         final JavaScriptObject functor = addEventListener(callback_, monitoredElement_);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMDIyMg==", "bodyText": "Fixed :)", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417510222", "createdAt": "2020-04-29T18:05:00Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))\n+         {\n+            highlighter_.setCallbackProcessed(index_, true);\n+            highlighter_.getServer().executeRCode(callback_, new ServerRequestCallback<String>(){\n+\n+               @Override\n+               public void onResponseReceived(String results)\n+               {\n+                  // Remove listener from this element and all other elements with the same query\n+                  highlighter_.clearEvents();\n+               }\n+\n+               @Override\n+               public void onError(ServerError error)\n+               {\n+                  Debug.logError(error);\n+               }\n+            });\n+         }\n+      }\n+\n+      private HandlerRegistration addListener()\n+      {\n+         final JavaScriptObject functor = addEventListener(callback_, monitoredElement_);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NDI2Nw=="}, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzU0ODQ5OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowOTo0NFrOGOIsnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoxMToxMlrOGOPK1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NTc0MQ==", "bodyText": "Should we also set the handler to null after removing it?", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417475741", "createdAt": "2020-04-29T17:09:44Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUwOTc0Mg==", "bodyText": "The handler is coded as a final variable so as is I can't reset it,  and removeHandler() is a no-op if called a second time. Do you think there is benefit for setting to null and removing the final keyword?", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417509742", "createdAt": "2020-04-29T18:04:15Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NTc0MQ=="}, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4MTc4Mw==", "bodyText": "Good point! In that case, perhaps not. (I mostly brought that up as it's a common pattern in GWT's own codebase)", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417581783", "createdAt": "2020-04-29T20:11:12Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NTc0MQ=="}, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzU1MjI2OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzoxMDo1MlrOGOIvLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODowNDo1MFrOGOKy5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NjM5Nw==", "bodyText": "Should we clear highlight on error as well?", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417476397", "createdAt": "2020-04-29T17:10:52Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))\n+         {\n+            highlighter_.setCallbackProcessed(index_, true);\n+            highlighter_.getServer().executeRCode(callback_, new ServerRequestCallback<String>(){\n+\n+               @Override\n+               public void onResponseReceived(String results)\n+               {\n+                  // Remove listener from this element and all other elements with the same query\n+                  highlighter_.clearEvents();\n+               }\n+\n+               @Override\n+               public void onError(ServerError error)\n+               {\n+                  Debug.logError(error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMDExNg==", "bodyText": "Good catch, I fixed this.", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417510116", "createdAt": "2020-04-29T18:04:50Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))\n+         {\n+            highlighter_.setCallbackProcessed(index_, true);\n+            highlighter_.getServer().executeRCode(callback_, new ServerRequestCallback<String>(){\n+\n+               @Override\n+               public void onResponseReceived(String results)\n+               {\n+                  // Remove listener from this element and all other elements with the same query\n+                  highlighter_.clearEvents();\n+               }\n+\n+               @Override\n+               public void onError(ServerError error)\n+               {\n+                  Debug.logError(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NjM5Nw=="}, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzU4NDMwOnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzoxOTowOVrOGOJDUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTowNjo1MVrOGORAoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4MTU1Mw==", "bodyText": "Can you elaborate a bit on what happens if you have multiple UI elements highlighted, and the callback associated with one is executed? (What happens to the other highlighted UI elements?)\nMain reason I ask: normally, one will highlight multiple UI elements either because:\n\n\nThere are multiple pieces of UI associated with the same action or command (e.g. multiple buttons for saving a document). In this case, one might want to clear all highlighters after the associated command has been executed (e.g. via click or via shortcut);\n\n\nSome of the highlighted UI might act like \"bread crumbs\"; e.g. highlighting a button + menu item leading to the \"final\" item to be clicked or used. In this case, you normally wouldn't want to clear any highlight until the user has clicked on the highlight associated with the actual command of interest.\n\n\nI'm not sure whether this orchestration should happen on the RStudio side, or if it should be a requirement of the code handling the callback.", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417481553", "createdAt": "2020-04-29T17:19:09Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMDA5Nw==", "bodyText": "Each callback is associated with a single query that may have multiple elements - if any of these elements are selected then the handlers for all the elements per that query are cleared. My understanding is to make case 2 possible the user would need to send a list of queries, so they would only pass the callback with the final query.\nIn case 1 if they are sending multiple queries with the same callback, then the callback will only be executed and removed from the element the user selects. Once the user clears the highlights, the other listeners will be removed as well.\nThis implementation makes intuitive sense to me, but there may be something I'm missing.", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417530097", "createdAt": "2020-04-29T18:39:11Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4MTU1Mw=="}, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4NDE1Mw==", "bodyText": "Got it; I think that makes sense. It sounds like both cases are possible under the existing framework; it just affects how the user submits their highlight request through rstudioapi. Does that sound correct?\nIn each case, it seems like the ultimate goal of the callback would be to call rstudioapi::highlightUi(list()) to clear any existing highlight after the appropriate user interaction had taken place.", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417584153", "createdAt": "2020-04-29T20:15:28Z", "author": {"login": "kevinushey"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4MTU1Mw=="}, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMTkzNw==", "bodyText": "Yes, that's correct! There is a chance if multiple elements have the same callback and the highlights don't get cleared that the callback code would run more than once, but I think that's the reasonable expected outcome.", "url": "https://github.com/rstudio/rstudio/pull/6765#discussion_r417611937", "createdAt": "2020-04-29T21:06:51Z", "author": {"login": "melissa-barca"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/UserInterfaceHighlighter.java", "diffHunk": "@@ -70,19 +91,109 @@ public Element getHighlightElement()\n       {\n          return highlightedElement_;\n       }\n-      \n+\n+      public void clearHandler()\n+      {\n+         if (handler_ != null)\n+            handler_.removeHandler();\n+      }\n+\n+      public void executeCallback()\n+      {\n+         // This method must be called by a single HighlightPair, but because there can be multiple\n+         // pairs per query, we need to check if the callback has already executed before proceeding.\n+         if(!highlighter_.getCallbackProcessed(index_))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4MTU1Mw=="}, "originalCommit": {"oid": "8e94dc8626bb5e9e3c82c2cb169f87b5c1ac3d70"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3933, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}