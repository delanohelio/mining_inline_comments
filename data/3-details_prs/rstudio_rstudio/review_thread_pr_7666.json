{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MzQzOTc5", "number": 7666, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxMzo0NlrOEe0EpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyOTowN1rOEe0anA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ1ODkyOnYy", "diffSide": "LEFT", "path": "src/gwt/panmirror/src/editor/src/editor/editor.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxMzo0NlrOHKtXHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxMzo0NlrOHKtXHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MTAwNA==", "bodyText": "Haven't yet seen the GWT side of this, but the original purpose of this was to leave the selection entirely alone if the user had been editing. This is b/c in this case the selection will already be in the perfect location (b/c we are replaying diffs unrolled to inserts/deletes/etc. into source mode as the user edits). It's possible that we've lost this behavior as a result of this change. Let's discuss before you do anything here though both to explore alternative ways to preserve the behavior as well as to evaluate the priority level of preserving it.", "url": "https://github.com/rstudio/rstudio/pull/7666#discussion_r480991004", "createdAt": "2020-09-01T09:13:46Z", "author": {"login": "jjallaire"}, "path": "src/gwt/panmirror/src/editor/src/editor/editor.ts", "diffHunk": "@@ -257,10 +257,6 @@ export class Editor {\n   private maxContentWidth = 0;\n   private minContentPadding = 0;\n \n-  // keep track of whether the last transaction was selection-only", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f7abecc7f2854c25c6e6700485738f4e457d1b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ2OTQ0OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/core/client/RegexUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxNjo0MlrOHKtdXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjowODoxM1rOHK94xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MjYwNQ==", "bodyText": "Is this intended to capture all valid knitr chunks in a file? If so it may not get indented chunks or chunks inside a blockquote (see knitr regex patterns and/or patterns we use in source capsule detection).", "url": "https://github.com/rstudio/rstudio/pull/7666#discussion_r480992605", "createdAt": "2020-09-01T09:16:42Z", "author": {"login": "jjallaire"}, "path": "src/gwt/src/org/rstudio/core/client/RegexUtil.java", "diffHunk": "@@ -67,6 +67,9 @@ private static final native String makeWordCharacter()\n    public static final Pattern RE_SWEAVE_CHUNK_END =\n          Pattern.create(\"^\\\\s*@\\\\s*$\", \"\");\n    \n+   public static final Pattern RE_EMBEDDED_R_CHUNK_BEGIN =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f7abecc7f2854c25c6e6700485738f4e457d1b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI2MTc2NQ==", "bodyText": "It isn't; it is only used inside the embedded Ace instances (EMBEDDED) where we thankfully don't have to worry about that.", "url": "https://github.com/rstudio/rstudio/pull/7666#discussion_r481261765", "createdAt": "2020-09-01T16:08:13Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/core/client/RegexUtil.java", "diffHunk": "@@ -67,6 +67,9 @@ private static final native String makeWordCharacter()\n    public static final Pattern RE_SWEAVE_CHUNK_END =\n          Pattern.create(\"^\\\\s*@\\\\s*$\", \"\");\n    \n+   public static final Pattern RE_EMBEDDED_R_CHUNK_BEGIN =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MjYwNQ=="}, "originalCommit": {"oid": "93f7abecc7f2854c25c6e6700485738f4e457d1b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzUxNTE2OnYy", "diffSide": "RIGHT", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/visualmode/VisualMode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyOTowN1rOHKt5rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjozODo1OVrOHK_PHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5OTg1Mw==", "bodyText": "You may have some pretty funky merge conflicts here as I took part of this function and wrapped it in a handler that does some prompting the first time visual mode is activated and/or when we may plow over column or sentence based line wrapping. Here's the gist of my change: 0c4edf4#diff-06b7d8ba9d7ace26762c2194678a2fd8", "url": "https://github.com/rstudio/rstudio/pull/7666#discussion_r480999853", "createdAt": "2020-09-01T09:29:07Z", "author": {"login": "jjallaire"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/visualmode/VisualMode.java", "diffHunk": "@@ -292,25 +317,42 @@ public void execute(JsObject obj)\n                {\n                   PanmirrorCode markdown = Js.uncheckedCast(obj);\n                   rv.arrive(() -> {\n-                     if (markdown == null) {\n+                     if (markdown == null)\n+                     {\n                         // note that ready.execute() is never called in the error case\n                         return;\n                      }\n                      \n+                     // we are about to mutate the document, so create a single", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f7abecc7f2854c25c6e6700485738f4e457d1b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mzg2OA==", "bodyText": "Thanks, will attempt to resolve and get your review when complete!", "url": "https://github.com/rstudio/rstudio/pull/7666#discussion_r481283868", "createdAt": "2020-09-01T16:38:59Z", "author": {"login": "jmcphers"}, "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/visualmode/VisualMode.java", "diffHunk": "@@ -292,25 +317,42 @@ public void execute(JsObject obj)\n                {\n                   PanmirrorCode markdown = Js.uncheckedCast(obj);\n                   rv.arrive(() -> {\n-                     if (markdown == null) {\n+                     if (markdown == null)\n+                     {\n                         // note that ready.execute() is never called in the error case\n                         return;\n                      }\n                      \n+                     // we are about to mutate the document, so create a single", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5OTg1Mw=="}, "originalCommit": {"oid": "93f7abecc7f2854c25c6e6700485738f4e457d1b"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4273, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}