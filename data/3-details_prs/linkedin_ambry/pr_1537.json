{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTAxMjY0", "number": 1537, "title": "Leader based replication - data structure updates to cache metadata response", "bodyText": "Data structure changes to cache the metadata response information exchanged during a replication cycle.", "createdAt": "2020-05-27T20:37:50Z", "url": "https://github.com/linkedin/ambry/pull/1537", "merged": true, "mergeCommit": {"oid": "c62264bd5abf3eefb61ea82b92c3a8489012b4d8"}, "closed": true, "closedAt": "2020-06-02T00:27:57Z", "author": {"login": "Arun-LinkedIn"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclcesigH2gAyNDI0MTAxMjY0OjE2NTQ5NGMzZjFjZGQxZmYwMDk4MDRiZTc1NjgzMGJmNzA1NTNhZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnJqr_AFqTQyMjI2NDc4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "165494c3f1cdd1ff009804be756830bf70553aeb", "author": {"user": {"login": "Arun-LinkedIn", "name": "Arun Sai Bhima"}}, "url": "https://github.com/linkedin/ambry/commit/165494c3f1cdd1ff009804be756830bf70553aeb", "committedDate": "2020-05-27T17:12:09Z", "message": "Data struture changes to cache the metadata response information"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9efa9c637e42a98e17047cc4cd80fe75cab29eb", "author": {"user": {"login": "Arun-LinkedIn", "name": "Arun Sai Bhima"}}, "url": "https://github.com/linkedin/ambry/commit/d9efa9c637e42a98e17047cc4cd80fe75cab29eb", "committedDate": "2020-05-27T20:17:44Z", "message": "Store MessageInfo instead of StoreKeys in ExchangeMetadataResponse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d2d23084d0db439062f25abf5330b0d7ccbcf5e", "author": {"user": {"login": "Arun-LinkedIn", "name": "Arun Sai Bhima"}}, "url": "https://github.com/linkedin/ambry/commit/2d2d23084d0db439062f25abf5330b0d7ccbcf5e", "committedDate": "2020-05-27T20:40:25Z", "message": "Changes to format the file and add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjkxMTYx", "url": "https://github.com/linkedin/ambry/pull/1537#pullrequestreview-419691161", "createdAt": "2020-05-28T00:03:27Z", "commit": {"oid": "2d2d23084d0db439062f25abf5330b0d7ccbcf5e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDowMzoyN1rOGbhSGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDowODoyN1rOGbhXQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMDA0MA==", "bodyText": "Minor: the comment looks like super long. There is a line in IDE, usually we don't code or comment after that line.", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r431510040", "createdAt": "2020-05-28T00:03:27Z", "author": {"login": "zzmao"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java", "diffHunk": "@@ -62,6 +62,10 @@\n   private long reEnableReplicationTime = 0;\n   private ReplicaThread replicaThread;\n \n+  // Metadata response information (contains missing blobs, remote token, local lag from remote, etc.) of previous replication cycle.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2d23084d0db439062f25abf5330b0d7ccbcf5e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMDE0OQ==", "bodyText": "don't need to be public.", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r431510149", "createdAt": "2020-05-28T00:03:57Z", "author": {"login": "zzmao"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -1103,24 +1118,37 @@ ReplicationMetrics getReplicationMetrics() {\n   }\n \n   static class ExchangeMetadataResponse {\n-    final Set<StoreKey> missingStoreKeys;\n+    // Set of messages missing in the local store. MessageInfo contains complete information of the blob metadata like Key info, delete, ttl-update and un-delete values.\n+    final Set<MessageInfo> missingStoreMessages;\n     final FindToken remoteToken;\n     final long localLagFromRemoteInBytes;\n     final ServerErrorCode serverErrorCode;\n \n-    ExchangeMetadataResponse(Set<StoreKey> missingStoreKeys, FindToken remoteToken, long localLagFromRemoteInBytes) {\n-      this.missingStoreKeys = missingStoreKeys;\n+    ExchangeMetadataResponse(Set<MessageInfo> missingStoreMessages, FindToken remoteToken,\n+        long localLagFromRemoteInBytes) {\n+      this.missingStoreMessages = missingStoreMessages;\n       this.remoteToken = remoteToken;\n       this.localLagFromRemoteInBytes = localLagFromRemoteInBytes;\n       this.serverErrorCode = ServerErrorCode.No_Error;\n     }\n \n     ExchangeMetadataResponse(ServerErrorCode errorCode) {\n-      missingStoreKeys = null;\n-      remoteToken = null;\n-      localLagFromRemoteInBytes = -1;\n+      this.missingStoreMessages = null;\n+      this.remoteToken = null;\n+      this.localLagFromRemoteInBytes = -1;\n       this.serverErrorCode = errorCode;\n     }\n+\n+    /**\n+     * Utility method to extract store keys from messages\n+     */\n+    public static Set<StoreKey> getStoreKeysFromMessages(Set<MessageInfo> messageInfos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2d23084d0db439062f25abf5330b0d7ccbcf5e"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMDIyMQ==", "bodyText": "Can we make it an individual class?", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r431510221", "createdAt": "2020-05-28T00:04:17Z", "author": {"login": "zzmao"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -1103,24 +1118,37 @@ ReplicationMetrics getReplicationMetrics() {\n   }\n \n   static class ExchangeMetadataResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2d23084d0db439062f25abf5330b0d7ccbcf5e"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMTM2Mw==", "bodyText": "I need a little bit context here: when is the case to setExchangeMetadataResponse ?", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r431511363", "createdAt": "2020-05-28T00:08:27Z", "author": {"login": "zzmao"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java", "diffHunk": "@@ -198,6 +204,24 @@ public boolean equals(Object obj) {\n     return false;\n   }\n \n+  /**\n+   * Gets the cached meta data response information received in the previous replication cycle.\n+   * Replication manager calls this method to check if there are any missing store messages that are now obtained via intra-dc replication.\n+   * @return exchangeMetadataResponse which contains the meta data response information (missing keys, token info, local lag from remote, etc.).\n+   */\n+  synchronized ReplicaThread.ExchangeMetadataResponse getExchangeMetadataResponse() {\n+    return exchangeMetadataResponse;\n+  }\n+\n+  /**\n+   * Stores/caches the meta data response received in the previous replication cycle.\n+   * Replica threads calls this method to store the metadata response for standby replicas.\n+   * @param exchangeMetadataResponse contains the meta data response information (missing keys, token info, local lag from remote, etc.).\n+   */\n+  synchronized void setExchangeMetadataResponse(ReplicaThread.ExchangeMetadataResponse exchangeMetadataResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2d23084d0db439062f25abf5330b0d7ccbcf5e"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aece1f434bb47e62b782f954652ed791904736d4", "author": {"user": {"login": "Arun-LinkedIn", "name": "Arun Sai Bhima"}}, "url": "https://github.com/linkedin/ambry/commit/aece1f434bb47e62b782f954652ed791904736d4", "committedDate": "2020-05-28T03:31:36Z", "message": "Changes to cache the ExchangeMetadataResponse in RemoteReplicaInfo objects.\nCached response information will be used by standby replicas to track the missing keys coming in via intra-dc replication."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "author": {"user": {"login": "Arun-LinkedIn", "name": "Arun Sai Bhima"}}, "url": "https://github.com/linkedin/ambry/commit/bf8291fd6c152f4898e76d039387ecd5de4463c9", "committedDate": "2020-05-29T20:55:05Z", "message": "Change the access modifier from public to package-private and make comments more concise."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDYyNTg5", "url": "https://github.com/linkedin/ambry/pull/1537#pullrequestreview-421462589", "createdAt": "2020-05-31T05:24:01Z", "commit": {"oid": "bf8291fd6c152f4898e76d039387ecd5de4463c9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNToyNDowMlrOGc2y7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNjoyNDoxNVrOGc3ABw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMTA4NQ==", "bodyText": "nit: update the comment at line 641 as well.", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432911085", "createdAt": "2020-05-31T05:24:02Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -617,56 +642,56 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n    * @param replicaMetadataResponseInfo The response that contains the messages from the remote node\n    * @param remoteNode The remote node from which replication needs to happen\n    * @param remoteReplicaInfo The remote replica that contains information about the remote replica id\n-   * @return List of store keys that are missing from the local store\n+   * @return List of store messages that are missing from the local store\n    * @throws StoreException if store error (usually IOError) occurs when getting missing keys.\n    */\n-  private Set<StoreKey> getMissingStoreKeys(ReplicaMetadataResponseInfo replicaMetadataResponseInfo,\n+  private Set<MessageInfo> getMissingStoreMessages(ReplicaMetadataResponseInfo replicaMetadataResponseInfo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8291fd6c152f4898e76d039387ecd5de4463c9"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMjM5Mg==", "bodyText": "nit: update this comment", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432912392", "createdAt": "2020-05-31T05:48:33Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -617,56 +642,56 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n    * @param replicaMetadataResponseInfo The response that contains the messages from the remote node\n    * @param remoteNode The remote node from which replication needs to happen\n    * @param remoteReplicaInfo The remote replica that contains information about the remote replica id\n-   * @return List of store keys that are missing from the local store\n+   * @return List of store messages that are missing from the local store\n    * @throws StoreException if store error (usually IOError) occurs when getting missing keys.\n    */\n-  private Set<StoreKey> getMissingStoreKeys(ReplicaMetadataResponseInfo replicaMetadataResponseInfo,\n+  private Set<MessageInfo> getMissingStoreMessages(ReplicaMetadataResponseInfo replicaMetadataResponseInfo,\n       DataNodeId remoteNode, RemoteReplicaInfo remoteReplicaInfo) throws StoreException {\n     long startTime = SystemTime.getInstance().milliseconds();\n     List<MessageInfo> messageInfoList = replicaMetadataResponseInfo.getMessageInfoList();\n-    Map<StoreKey, StoreKey> remoteToConvertedNonNull = new HashMap<>();\n+    Map<MessageInfo, StoreKey> remoteMessageToConvertedKeyNonNull = new HashMap<>();\n \n     for (MessageInfo messageInfo : messageInfoList) {\n       StoreKey storeKey = messageInfo.getStoreKey();\n       logger.trace(\"Remote node: {} Thread name: {} Remote replica: {} Key from remote: {}\", remoteNode, threadName,\n           remoteReplicaInfo.getReplicaId(), storeKey);\n       StoreKey convertedKey = storeKeyConverter.getConverted(storeKey);\n       if (convertedKey != null) {\n-        remoteToConvertedNonNull.put(storeKey, convertedKey);\n+        remoteMessageToConvertedKeyNonNull.put(messageInfo, convertedKey);\n       }\n     }\n     Set<StoreKey> convertedMissingStoreKeys =\n-        remoteReplicaInfo.getLocalStore().findMissingKeys(new ArrayList<>(remoteToConvertedNonNull.values()));\n-    Set<StoreKey> missingRemoteStoreKeys = new HashSet<>();\n-    remoteToConvertedNonNull.forEach((remoteKey, convertedKey) -> {\n+        remoteReplicaInfo.getLocalStore().findMissingKeys(new ArrayList<>(remoteMessageToConvertedKeyNonNull.values()));\n+    Set<MessageInfo> missingRemoteMessages = new HashSet<>();\n+    remoteMessageToConvertedKeyNonNull.forEach((messageInfo, convertedKey) -> {\n       if (convertedMissingStoreKeys.contains(convertedKey)) {\n         logger.trace(\n             \"Remote node: {} Thread name: {} Remote replica: {} Key missing id (converted): {} Key missing id (remote): {}\",\n-            remoteNode, threadName, remoteReplicaInfo.getReplicaId(), convertedKey, remoteKey);\n-        missingRemoteStoreKeys.add(remoteKey);\n+            remoteNode, threadName, remoteReplicaInfo.getReplicaId(), convertedKey, messageInfo.getStoreKey());\n+        missingRemoteMessages.add(messageInfo);\n       }\n     });\n-    if (messageInfoList.size() != 0 && missingRemoteStoreKeys.size() == 0) {\n+    if (messageInfoList.size() != 0 && missingRemoteMessages.size() == 0) {\n       // Catching up\n       replicationMetrics.allResponsedKeysExist.inc();\n     }\n     replicationMetrics.updateCheckMissingKeysTime(SystemTime.getInstance().milliseconds() - startTime,\n         replicatingFromRemoteColo, datacenterName);\n-    return missingRemoteStoreKeys;\n+    return missingRemoteMessages;\n   }\n \n   /**\n    * Takes the missing keys and the message list from the remote store and identifies messages that are deleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8291fd6c152f4898e76d039387ecd5de4463c9"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMzE3Mg==", "bodyText": "minor: store the metadata exchange response received from ...", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432913172", "createdAt": "2020-05-31T06:03:33Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -480,6 +494,11 @@ public void replicate() {\n               // reason is replicaSyncUpManager may also throw exception and add one more exchangeMetadataResponse\n               // associated with same RemoteReplicaInfo.\n               exchangeMetadataResponseList.add(exchangeMetadataResponse);\n+\n+              // Also, store the metadata exchange received from remote replica in the RemoteReplicaInfo.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8291fd6c152f4898e76d039387ecd5de4463c9"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxNDEzOA==", "bodyText": "According to the usage of this method, looks like it doesn't need to be a static utility method. I think a non-static method like getMissingStoreKeys would be more appropriate. Then the code is something like this:\nreturn missingStoreMessages == null ? Collections.emptySet() : missingStoreMessages.stream().map(MessageInfo::getStoreKey).collect(Collectors.toSet());", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432914138", "createdAt": "2020-05-31T06:20:06Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -1103,24 +1131,37 @@ ReplicationMetrics getReplicationMetrics() {\n   }\n \n   static class ExchangeMetadataResponse {\n-    final Set<StoreKey> missingStoreKeys;\n+    // Set of messages missing in the local store.\n+    final Set<MessageInfo> missingStoreMessages;\n     final FindToken remoteToken;\n     final long localLagFromRemoteInBytes;\n     final ServerErrorCode serverErrorCode;\n \n-    ExchangeMetadataResponse(Set<StoreKey> missingStoreKeys, FindToken remoteToken, long localLagFromRemoteInBytes) {\n-      this.missingStoreKeys = missingStoreKeys;\n+    ExchangeMetadataResponse(Set<MessageInfo> missingStoreMessages, FindToken remoteToken,\n+        long localLagFromRemoteInBytes) {\n+      this.missingStoreMessages = missingStoreMessages;\n       this.remoteToken = remoteToken;\n       this.localLagFromRemoteInBytes = localLagFromRemoteInBytes;\n       this.serverErrorCode = ServerErrorCode.No_Error;\n     }\n \n     ExchangeMetadataResponse(ServerErrorCode errorCode) {\n-      missingStoreKeys = null;\n-      remoteToken = null;\n-      localLagFromRemoteInBytes = -1;\n+      this.missingStoreMessages = null;\n+      this.remoteToken = null;\n+      this.localLagFromRemoteInBytes = -1;\n       this.serverErrorCode = errorCode;\n     }\n+\n+    /**\n+     * Utility method to extract store keys from messages\n+     */\n+    static Set<StoreKey> getStoreKeysFromMessages(Set<MessageInfo> messageInfos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8291fd6c152f4898e76d039387ecd5de4463c9"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxNDQzOQ==", "bodyText": "Add a little more comments here regarding what we need from ExchangeMetadataResponse for leader-based replication.", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432914439", "createdAt": "2020-05-31T06:24:15Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java", "diffHunk": "@@ -62,6 +63,9 @@\n   private long reEnableReplicationTime = 0;\n   private ReplicaThread replicaThread;\n \n+  // Metadata response information received for this replica in the most recent replication cycle.\n+  private ReplicaThread.ExchangeMetadataResponse exchangeMetadataResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8291fd6c152f4898e76d039387ecd5de4463c9"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNTI4NDIy", "url": "https://github.com/linkedin/ambry/pull/1537#pullrequestreview-421528422", "createdAt": "2020-05-31T21:17:15Z", "commit": {"oid": "bf8291fd6c152f4898e76d039387ecd5de4463c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMToxNzoxNlrOGc7UDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMToxNzoxNlrOGc7UDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NTEwMA==", "bodyText": "When you are working on future PR, keep in mind that exchangeMetadataResponse will be updated by multiple threads.", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432985100", "createdAt": "2020-05-31T21:17:16Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java", "diffHunk": "@@ -198,6 +204,23 @@ public boolean equals(Object obj) {\n     return false;\n   }\n \n+  /**\n+   * Get the meta data response information received for this replica in the most recent replication cycle.\n+   * @return exchangeMetadataResponse contains the meta data response (missing keys, token info, local lag from remote, etc.).\n+   */\n+  synchronized ReplicaThread.ExchangeMetadataResponse getExchangeMetadataResponse() {\n+    return exchangeMetadataResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8291fd6c152f4898e76d039387ecd5de4463c9"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b128bbbc9307febc92afb4ed181c664f8ec2914", "author": {"user": {"login": "Arun-LinkedIn", "name": "Arun Sai Bhima"}}, "url": "https://github.com/linkedin/ambry/commit/0b128bbbc9307febc92afb4ed181c664f8ec2914", "committedDate": "2020-06-01T04:31:41Z", "message": "Change method signature in ExchangeMetadataResponse class and update comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDIzOTE3", "url": "https://github.com/linkedin/ambry/pull/1537#pullrequestreview-422023917", "createdAt": "2020-06-01T17:07:34Z", "commit": {"oid": "0b128bbbc9307febc92afb4ed181c664f8ec2914"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjY0NzQ1", "url": "https://github.com/linkedin/ambry/pull/1537#pullrequestreview-422264745", "createdAt": "2020-06-02T00:24:49Z", "commit": {"oid": "0b128bbbc9307febc92afb4ed181c664f8ec2914"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDoyNDo0OVrOGdeMlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDoyNDo0OVrOGdeMlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NjYyOA==", "bodyText": "One minor comment that should be considered in future PR: if it metadata exchange fails (i.e. due to replica unavailable) within current replication cycle, we may allow standby to send metadata request again in next cycles.", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r433556628", "createdAt": "2020-06-02T00:24:49Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -494,19 +514,25 @@ public void replicate() {\n                 // Must have just been stopped, just skip it and move on.\n                 logger.info(\"Local store not started for remote replica: {}\", remoteReplicaInfo.getReplicaId());\n                 exchangeMetadataResponseList.add(new ExchangeMetadataResponse(ServerErrorCode.Temporarily_Disabled));\n+                remoteReplicaInfo.setExchangeMetadataResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b128bbbc9307febc92afb4ed181c664f8ec2914"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjY0Nzgz", "url": "https://github.com/linkedin/ambry/pull/1537#pullrequestreview-422264783", "createdAt": "2020-06-02T00:24:54Z", "commit": {"oid": "0b128bbbc9307febc92afb4ed181c664f8ec2914"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1071, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}