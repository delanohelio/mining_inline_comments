{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTEwNzYw", "number": 1506, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDo1OToyN1rOD7dEvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMTozMjoxMlrOD7dbSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjY4OTI1OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDo1OToyN1rOGTyewg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo0MzozOVrOGUbgsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMzIwMg==", "bodyText": "Is this statement a TODO? We should mark it as such in that case.", "url": "https://github.com/linkedin/ambry/pull/1506#discussion_r423403202", "createdAt": "2020-05-12T00:59:27Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java", "diffHunk": "@@ -124,30 +128,30 @@ public int compactPartitions() {\n     long compactionStartTime = now;\n     long timeToQuit = now + compactionTimeLimitMs;\n     long queryEndTime = now - retentionPeriodMs;\n-    // TODO: we can cache the latest timestamp that we know we have cleared and use that on subsequent calls\n+    // TODO: checkpoint the latest timestamp and use that on subsequent compactions\n     // Starting from beginning of time is too expensive\n     // Order partitions by earliest time at which dead blob exists", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b5edcb847442a763f6a4f859ca58e2dba0cee6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NTQ0Mg==", "bodyText": "I'm removing these comments.  I will file a ticket for the checkpointing enhancement", "url": "https://github.com/linkedin/ambry/pull/1506#discussion_r424075442", "createdAt": "2020-05-12T22:43:39Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java", "diffHunk": "@@ -124,30 +128,30 @@ public int compactPartitions() {\n     long compactionStartTime = now;\n     long timeToQuit = now + compactionTimeLimitMs;\n     long queryEndTime = now - retentionPeriodMs;\n-    // TODO: we can cache the latest timestamp that we know we have cleared and use that on subsequent calls\n+    // TODO: checkpoint the latest timestamp and use that on subsequent compactions\n     // Starting from beginning of time is too expensive\n     // Order partitions by earliest time at which dead blob exists", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMzIwMg=="}, "originalCommit": {"oid": "63b5edcb847442a763f6a4f859ca58e2dba0cee6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjY5NzYxOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMTowNDoyN1rOGTyj3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo0OToyNFrOGUbo2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNDUwOA==", "bodyText": "We should move the logic that actually does the compaction (which is basically everything outside the if statement in line 218), in a separate method of its own, unless we have reason not to do so. Makes code easy to read, keeps methods small and separates out the control part of compaction logic from the actual compaction.", "url": "https://github.com/linkedin/ambry/pull/1506#discussion_r423404508", "createdAt": "2020-05-12T01:04:27Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java", "diffHunk": "@@ -212,6 +214,28 @@ public int compactPartition(String partitionPath, String fieldName, long querySt\n \n     // Iterate until returned list size < limit, time runs out or we get shut down\n     int totalPurged = 0;\n+    long chunkTimeRange = TimeUnit.DAYS.toMillis(queryBucketDays);\n+    if (queryEndTime - queryStartTime > chunkTimeRange) {\n+      logger.debug(\"Dividing compaction query for {} into buckets of {} days\", partitionPath, queryBucketDays);\n+      long chunkedStartTime = queryStartTime;\n+      while (chunkedStartTime < queryEndTime) {\n+        long chunkedEndTime = Math.min(chunkedStartTime + chunkTimeRange, queryEndTime);\n+        int numPurged = compactPartition(partitionPath, fieldName, chunkedStartTime, chunkedEndTime, timeToQuit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b5edcb847442a763f6a4f859ca58e2dba0cee6"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NzUzMA==", "bodyText": "I had it that way initially but then consolidated it into single method.  I can change it back if it helps readability.", "url": "https://github.com/linkedin/ambry/pull/1506#discussion_r424077530", "createdAt": "2020-05-12T22:49:24Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java", "diffHunk": "@@ -212,6 +214,28 @@ public int compactPartition(String partitionPath, String fieldName, long querySt\n \n     // Iterate until returned list size < limit, time runs out or we get shut down\n     int totalPurged = 0;\n+    long chunkTimeRange = TimeUnit.DAYS.toMillis(queryBucketDays);\n+    if (queryEndTime - queryStartTime > chunkTimeRange) {\n+      logger.debug(\"Dividing compaction query for {} into buckets of {} days\", partitionPath, queryBucketDays);\n+      long chunkedStartTime = queryStartTime;\n+      while (chunkedStartTime < queryEndTime) {\n+        long chunkedEndTime = Math.min(chunkedStartTime + chunkTimeRange, queryEndTime);\n+        int numPurged = compactPartition(partitionPath, fieldName, chunkedStartTime, chunkedEndTime, timeToQuit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNDUwOA=="}, "originalCommit": {"oid": "63b5edcb847442a763f6a4f859ca58e2dba0cee6"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjc0Njk5OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMTozMjoxMlrOGTzBPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo0NTozMFrOGUbjRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxMjAyOA==", "bodyText": "Can there be a case where we cannot complete compaction of all partitions in 24 hours?  In that case, it's possible that same that partitions that are at the end of the list of partitions, miss the compaction every time. There are atleast 2 ways we can approach this:\n\nIf instead of draining out each partition in a loop, we do n batches of compactPartittion calls for each partition, before looping through the list of partitions again, it will keep every partition compacted uniformly.\nAnother way we can solve this could be by setting cloudConfig.cloudBlobCompactionIntervalHours large enough so that this scenario can never happen. For this, it might be good to have metrics that can tell us how many times we were able to successfully loop through all partitions, and how many times we couldn't loop through all partitions.", "url": "https://github.com/linkedin/ambry/pull/1506#discussion_r423412028", "createdAt": "2020-05-12T01:32:12Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java", "diffHunk": "@@ -124,30 +128,30 @@ public int compactPartitions() {\n     long compactionStartTime = now;\n     long timeToQuit = now + compactionTimeLimitMs;\n     long queryEndTime = now - retentionPeriodMs;\n-    // TODO: we can cache the latest timestamp that we know we have cleared and use that on subsequent calls\n+    // TODO: checkpoint the latest timestamp and use that on subsequent compactions\n     // Starting from beginning of time is too expensive\n     // Order partitions by earliest time at which dead blob exists\n-    // Can start with retention period and go back additional retention periods until no more found\n-    long queryStartTime = 1;\n+    long queryStartTime = now - TimeUnit.DAYS.toMillis(lookbackDays);\n+    Date queryStartDate = new Date(queryStartTime);\n+    Date queryEndDate = new Date(queryEndTime);\n     int totalBlobsPurged = 0;\n     for (PartitionId partitionId : partitionsSnapshot) {\n       String partitionPath = partitionId.toPathString();\n       if (!partitions.contains(partitionId)) {\n         // Looks like partition was reassigned since the loop started, so skip it\n         continue;\n       }\n-      logger.info(\"Running compaction on partition {}\", partitionPath);\n+      logger.info(\"Compacting partition {} over time range {} - {}\", partitionPath, queryStartDate, queryEndDate);\n       try {\n-        // TODO: before compacting, call getOldestBlob to get queryStartTime\n         int numPurged =\n             compactPartition(partitionPath, CloudBlobMetadata.FIELD_DELETION_TIME, queryStartTime, queryEndTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b5edcb847442a763f6a4f859ca58e2dba0cee6"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NjEwMw==", "bodyText": "I think the first suggestion is a good idea.  I will file a separate ticket to do that in a follow up PR.  We can limit each partition by either number of blobs cleared or number of days scanned.", "url": "https://github.com/linkedin/ambry/pull/1506#discussion_r424076103", "createdAt": "2020-05-12T22:45:30Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java", "diffHunk": "@@ -124,30 +128,30 @@ public int compactPartitions() {\n     long compactionStartTime = now;\n     long timeToQuit = now + compactionTimeLimitMs;\n     long queryEndTime = now - retentionPeriodMs;\n-    // TODO: we can cache the latest timestamp that we know we have cleared and use that on subsequent calls\n+    // TODO: checkpoint the latest timestamp and use that on subsequent compactions\n     // Starting from beginning of time is too expensive\n     // Order partitions by earliest time at which dead blob exists\n-    // Can start with retention period and go back additional retention periods until no more found\n-    long queryStartTime = 1;\n+    long queryStartTime = now - TimeUnit.DAYS.toMillis(lookbackDays);\n+    Date queryStartDate = new Date(queryStartTime);\n+    Date queryEndDate = new Date(queryEndTime);\n     int totalBlobsPurged = 0;\n     for (PartitionId partitionId : partitionsSnapshot) {\n       String partitionPath = partitionId.toPathString();\n       if (!partitions.contains(partitionId)) {\n         // Looks like partition was reassigned since the loop started, so skip it\n         continue;\n       }\n-      logger.info(\"Running compaction on partition {}\", partitionPath);\n+      logger.info(\"Compacting partition {} over time range {} - {}\", partitionPath, queryStartDate, queryEndDate);\n       try {\n-        // TODO: before compacting, call getOldestBlob to get queryStartTime\n         int numPurged =\n             compactPartition(partitionPath, CloudBlobMetadata.FIELD_DELETION_TIME, queryStartTime, queryEndTime,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxMjAyOA=="}, "originalCommit": {"oid": "63b5edcb847442a763f6a4f859ca58e2dba0cee6"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1563, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}