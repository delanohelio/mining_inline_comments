{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NjU4OTU2", "number": 1350, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo0ODoxOVrODXPW0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDozNzo0MVrODYCDzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njk1NDQxOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo0ODoxOVrOFcc4VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoxMzoyM1rOFdkcDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3NzYyMA==", "bodyText": "Should we try using Callable instead of using ThrowingRunnable.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365377620", "createdAt": "2020-01-10T18:48:19Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwNzE0Nw==", "bodyText": "I was trying to unify the logic.  The problem is that Callable cannot return void, that's why I added a second method with ThrowingRunnable.  If you or @cgtz know another way to combine the two methods, I'd be all for it.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366507147", "createdAt": "2020-01-14T18:41:17Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3NzYyMA=="}, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MDAzMA==", "bodyText": "Never mind, Casey showed me the trick to make it work.  This version is gone now.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366550030", "createdAt": "2020-01-14T20:13:23Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3NzYyMA=="}, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njk2NjkwOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1MjoyNFrOFcc_1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo0NDowMFrOFdh5mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3OTU0Mg==", "bodyText": "It might be a good idea to create a RetryUtil in ambry.commons, with the three methods we define here for retying. That way it becomes a common util which can be use somewhere else too if needed. Maybe for a future PR.\nNote: we might need to lambda or someother way to do metrics etc.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365379542", "createdAt": "2020-01-10T18:52:24Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        action.run();\n+        return;\n+      } catch (Throwable e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private Map<String, CloudBlobMetadata> doWithRetries(Callable<Map<String, CloudBlobMetadata>> action,\n+      String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Utility to either throw the input exception or sleep for a specified retry delay.\n+   * @param e the input exception to check.\n+   * @param attempts the number of attempts made so far.\n+   * @throws CloudStorageException\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwODQ0MA==", "bodyText": "The retry logic is currently specific to CloudStorageException so not easy to generalize.  I could add an exception interface like RetryableException and have CloudStorageException implement that, then the logic could move to a utility.  Can we punt that to a future PR?", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366508440", "createdAt": "2020-01-14T18:44:00Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        action.run();\n+        return;\n+      } catch (Throwable e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private Map<String, CloudBlobMetadata> doWithRetries(Callable<Map<String, CloudBlobMetadata>> action,\n+      String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Utility to either throw the input exception or sleep for a specified retry delay.\n+   * @param e the input exception to check.\n+   * @param attempts the number of attempts made so far.\n+   * @throws CloudStorageException\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3OTU0Mg=="}, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njk3NTU5OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1NToyNFrOFcdFDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1NToyNFrOFcdFDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MDg3OA==", "bodyText": "javadocs for return is missing.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365380878", "createdAt": "2020-01-10T18:55:24Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        action.run();\n+        return;\n+      } catch (Throwable e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njk4MjY3OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1NzozM1rOFcdJHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1NzozM1rOFcdJHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MTkxOQ==", "bodyText": "javadocs missing for actionName.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365381919", "createdAt": "2020-01-10T18:57:33Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njk4NDIwOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1ODowMFrOFcdJ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1ODowMFrOFcdJ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MjE0MA==", "bodyText": "javadocs missing for actionName", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365382140", "createdAt": "2020-01-10T18:58:00Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        action.run();\n+        return;\n+      } catch (Throwable e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njk4NDg2OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1ODowOVrOFcdKWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1ODowOVrOFcdKWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MjIzMg==", "bodyText": "javadocs missing for actionName", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365382232", "createdAt": "2020-01-10T18:58:09Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        action.run();\n+        return;\n+      } catch (Throwable e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private Map<String, CloudBlobMetadata> doWithRetries(Callable<Map<String, CloudBlobMetadata>> action,\n+      String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Utility to either throw the input exception or sleep for a specified retry delay.\n+   * @param e the input exception to check.\n+   * @param attempts the number of attempts made so far.\n+   * @throws CloudStorageException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njk5MjMzOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxOTowMTowOFrOFcdPPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo1MDozMlrOFdiF3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MzQ4NQ==", "bodyText": "we can define isRetryable here instead of above.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365383485", "createdAt": "2020-01-10T19:01:08Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -457,6 +458,28 @@ AzureBlobDataAccessor getAzureBlobDataAccessor() {\n     return azureBlobDataAccessor;\n   }\n \n+  /**\n+   * Construct a {@link CloudStorageException} from a root cause exception.\n+   * @param message the exception message.\n+   * @param e the root cause exception.\n+   * @return the {@link CloudStorageException}.\n+   */\n+  private static final CloudStorageException toCloudStorageException(String message, Exception e) {\n+    boolean isRetryable = false;\n+    Long retryDelayMs = null;\n+    int statusCode = -1;\n+    if (e instanceof BlobStorageException) {\n+      statusCode = ((BlobStorageException) e).getStatusCode();\n+    }\n+    else if (e instanceof DocumentClientException) {\n+      statusCode = ((DocumentClientException) e).getStatusCode();\n+      retryDelayMs = ((DocumentClientException) e).getRetryAfterInMilliseconds();\n+    }\n+    // Everything is retryable except NOT_FOUND\n+    isRetryable = (statusCode != HttpConstants.StatusCodes.NOTFOUND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMTU4MQ==", "bodyText": "Good point.  Is it okay to fix this in a follow up PR?  This class has work in progress for another ticket.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366511581", "createdAt": "2020-01-14T18:50:32Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -457,6 +458,28 @@ AzureBlobDataAccessor getAzureBlobDataAccessor() {\n     return azureBlobDataAccessor;\n   }\n \n+  /**\n+   * Construct a {@link CloudStorageException} from a root cause exception.\n+   * @param message the exception message.\n+   * @param e the root cause exception.\n+   * @return the {@link CloudStorageException}.\n+   */\n+  private static final CloudStorageException toCloudStorageException(String message, Exception e) {\n+    boolean isRetryable = false;\n+    Long retryDelayMs = null;\n+    int statusCode = -1;\n+    if (e instanceof BlobStorageException) {\n+      statusCode = ((BlobStorageException) e).getStatusCode();\n+    }\n+    else if (e instanceof DocumentClientException) {\n+      statusCode = ((DocumentClientException) e).getStatusCode();\n+      retryDelayMs = ((DocumentClientException) e).getRetryAfterInMilliseconds();\n+    }\n+    // Everything is retryable except NOT_FOUND\n+    isRetryable = (statusCode != HttpConstants.StatusCodes.NOTFOUND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MzQ4NQ=="}, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTE3NTcyOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzo0Njo0MFrOFdpcDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODozNjoxNVrOFeCWLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzMTk1MA==", "bodyText": "Can you save the last exception encountered and make it the cause of this exception?\n      } catch (Exception e) {\n        attempts++;\n        throwOrDelay(e, actionName, attempts);\n        lastException = e;\n      }\n    }\n    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\", lastException);", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366631950", "createdAt": "2020-01-14T23:46:40Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +530,55 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the {@link Callable} to call.\n+   * @param actionName the name of the action.\n+   * @return the return value of the action.\n+   * @throws CloudStorageException\n+   */\n+  private <T> T doWithRetries(Callable<T> action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MjI5Mw==", "bodyText": "Actually, I guess this code may not be possible to reach with the implementation of throwOrDelay, since the method throws when attempts is exhausted.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366642293", "createdAt": "2020-01-15T00:25:35Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +530,55 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the {@link Callable} to call.\n+   * @param actionName the name of the action.\n+   * @return the return value of the action.\n+   * @throws CloudStorageException\n+   */\n+  private <T> T doWithRetries(Callable<T> action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzMTk1MA=="}, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0MDA0Ng==", "bodyText": "Right.  I will add a comment that the last line shouldn't be reached.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r367040046", "createdAt": "2020-01-15T18:36:15Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +530,55 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the {@link Callable} to call.\n+   * @param actionName the name of the action.\n+   * @return the return value of the action.\n+   * @throws CloudStorageException\n+   */\n+  private <T> T doWithRetries(Callable<T> action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzMTk1MA=="}, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTIzMTcwOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDoxOTo0NlrOFdp-XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODozNjo1M1rOFeCXaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MDczMg==", "bodyText": "why not use the built in logger formatting?\nlogger.error(\"{} failed attempt {}, retrying after {} ms.\", actionName, attempts, delay);", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366640732", "createdAt": "2020-01-15T00:19:46Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +530,55 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the {@link Callable} to call.\n+   * @param actionName the name of the action.\n+   * @return the return value of the action.\n+   * @throws CloudStorageException\n+   */\n+  private <T> T doWithRetries(Callable<T> action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Utility to either throw the input exception or sleep for a specified retry delay.\n+   * @param e the input exception to check.\n+   * @param actionName the name of the action that threw the exception.\n+   * @param attempts the number of attempts made so far.\n+   * @throws CloudStorageException\n+   */\n+  private void throwOrDelay(Throwable e, String actionName, int attempts) throws CloudStorageException {\n+    if (e instanceof CloudStorageException) {\n+      CloudStorageException cse = (CloudStorageException) e;\n+      if (cse.isRetryable() && attempts < maxAttempts) {\n+        long delay = (cse.getRetryDelayMs() > 0) ? cse.getRetryDelayMs() : defaultRetryDelay;\n+        logger.error(String.format(\"%s failed attempt %d, retrying after %d ms.\", actionName, attempts, delay));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0MDM2MA==", "bodyText": "I think I was using the string in an exception but switched to log message.  Will fix.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r367040360", "createdAt": "2020-01-15T18:36:53Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +530,55 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the {@link Callable} to call.\n+   * @param actionName the name of the action.\n+   * @return the return value of the action.\n+   * @throws CloudStorageException\n+   */\n+  private <T> T doWithRetries(Callable<T> action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Utility to either throw the input exception or sleep for a specified retry delay.\n+   * @param e the input exception to check.\n+   * @param actionName the name of the action that threw the exception.\n+   * @param attempts the number of attempts made so far.\n+   * @throws CloudStorageException\n+   */\n+  private void throwOrDelay(Throwable e, String actionName, int attempts) throws CloudStorageException {\n+    if (e instanceof CloudStorageException) {\n+      CloudStorageException cse = (CloudStorageException) e;\n+      if (cse.isRetryable() && attempts < maxAttempts) {\n+        long delay = (cse.getRetryDelayMs() > 0) ? cse.getRetryDelayMs() : defaultRetryDelay;\n+        logger.error(String.format(\"%s failed attempt %d, retrying after %d ms.\", actionName, attempts, delay));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MDczMg=="}, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTI0Nzg3OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDoyOToxNFrOFdqIGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDoyOToxNFrOFdqIGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzIyNA==", "bodyText": "can you reformat this file?", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366643224", "createdAt": "2020-01-15T00:29:14Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -457,6 +458,28 @@ AzureBlobDataAccessor getAzureBlobDataAccessor() {\n     return azureBlobDataAccessor;\n   }\n \n+  /**\n+   * Construct a {@link CloudStorageException} from a root cause exception.\n+   * @param message the exception message.\n+   * @param e the root cause exception.\n+   * @return the {@link CloudStorageException}.\n+   */\n+  private static final CloudStorageException toCloudStorageException(String message, Exception e) {\n+    boolean isRetryable = false;\n+    Long retryDelayMs = null;\n+    int statusCode = -1;\n+    if (e instanceof BlobStorageException) {\n+      statusCode = ((BlobStorageException) e).getStatusCode();\n+    }\n+    else if (e instanceof DocumentClientException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTI2MTU4OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/VcrMetrics.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDozNzo0MVrOFdqQeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTowMjowMFrOFeDD7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NTM2OQ==", "bodyText": "A Timer is actually a combination of a Meter (for rate tracking) and a Histogram of durations. Did you want to monitor specific percentiles of retry wait times, or are you more interested in the total time spent waiting? If it is the latter, you may want to consider either a Counter for this metric if you want a count/second, or a Gauge if you want to record the cumulative time spent waiting for one run of an ambry process.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366645369", "createdAt": "2020-01-15T00:37:41Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/VcrMetrics.java", "diffHunk": "@@ -37,6 +37,11 @@\n   public final Counter addPartitionErrorCount;\n   public final Counter removePartitionErrorCount;\n   public final Counter tokenReloadWarnCount;\n+  // Retry metrics\n+  /** Number of times operation was retried */\n+  public final Counter retryCount;\n+  /** Cumulative time spent waiting before retries */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0Nzk3MQ==", "bodyText": "Good question.  I've used Timers for all the timing metrics but don't care about the histogram in this case, just the amount of time the process spends waiting during call retries, relative to elapsed time.  So maybe Counter is better. Gauge seems less useful if you don't know how long the process has been up.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r367047971", "createdAt": "2020-01-15T18:54:06Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/VcrMetrics.java", "diffHunk": "@@ -37,6 +37,11 @@\n   public final Counter addPartitionErrorCount;\n   public final Counter removePartitionErrorCount;\n   public final Counter tokenReloadWarnCount;\n+  // Retry metrics\n+  /** Number of times operation was retried */\n+  public final Counter retryCount;\n+  /** Cumulative time spent waiting before retries */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NTM2OQ=="}, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1MTc1OA==", "bodyText": "Yeah, I'd probably go with Counter in this case.  IMO, the name Timer is a little misleading for what it is", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r367051758", "createdAt": "2020-01-15T19:02:00Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/VcrMetrics.java", "diffHunk": "@@ -37,6 +37,11 @@\n   public final Counter addPartitionErrorCount;\n   public final Counter removePartitionErrorCount;\n   public final Counter tokenReloadWarnCount;\n+  // Retry metrics\n+  /** Number of times operation was retried */\n+  public final Counter retryCount;\n+  /** Cumulative time spent waiting before retries */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NTM2OQ=="}, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1630, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}