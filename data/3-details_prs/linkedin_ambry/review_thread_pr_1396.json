{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjQ2MTgz", "number": 1396, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMToxNzo0MFrODjqqtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjowODoxOVrODkfeGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzI1ODEyOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMToxNzo0MFrOFvmrlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0Mjo1OVrOFwzbBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MTE0Mw==", "bodyText": "throw an unsupported error?", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r385461143", "createdAt": "2020-02-28T01:17:40Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java", "diffHunk": "@@ -136,6 +143,10 @@ public ServerErrorCode checkLocalPartitionStatus(PartitionId partition, ReplicaI\n     return ServerErrorCode.No_Error;\n   }\n \n+  @Override\n+  public void registerDecommissionCallback(Callback<ReplicaId> callback) {\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMTIzOQ==", "bodyText": "fair point", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386131239", "createdAt": "2020-03-01T18:53:05Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java", "diffHunk": "@@ -136,6 +143,10 @@ public ServerErrorCode checkLocalPartitionStatus(PartitionId partition, ReplicaI\n     return ServerErrorCode.No_Error;\n   }\n \n+  @Override\n+  public void registerDecommissionCallback(Callback<ReplicaId> callback) {\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MTE0Mw=="}, "originalCommit": {"oid": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxODQ2OA==", "bodyText": "I took your suggestion and removed the whole method in the end", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386718468", "createdAt": "2020-03-02T23:42:59Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java", "diffHunk": "@@ -136,6 +143,10 @@ public ServerErrorCode checkLocalPartitionStatus(PartitionId partition, ReplicaI\n     return ServerErrorCode.No_Error;\n   }\n \n+  @Override\n+  public void registerDecommissionCallback(Callback<ReplicaId> callback) {\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MTE0Mw=="}, "originalCommit": {"oid": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzMxODkzOnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryReplicaSyncUpManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTo1MzoyN1rOFvnP5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0MzozM1rOFwzbug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MDQzNw==", "bodyText": "should keep these two method accessible only within the package.", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r385470437", "createdAt": "2020-02-28T01:53:27Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryReplicaSyncUpManager.java", "diffHunk": "@@ -209,6 +209,20 @@ public void onDisconnectionError(ReplicaId replicaId) {\n     countDownLatch(partitionToDisconnectionLatch, replicaId.getPartitionId().toPathString());\n   }\n \n+  /**\n+   * @return the map whose key is partition name and the value is corresponding deactivation latch.\n+   */\n+  public ConcurrentHashMap<String, CountDownLatch> getPartitionToDeactivationLatch() {\n+    return partitionToDeactivationLatch;\n+  }\n+\n+  /**\n+   * @return the map whose key is partition name and the value is corresponding disconnection latch.\n+   */\n+  public ConcurrentHashMap<String, CountDownLatch> getPartitionToDisconnectionLatch() {\n+    return partitionToDisconnectionLatch;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMTE5MQ==", "bodyText": "sure, will change the access modifier", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386131191", "createdAt": "2020-03-01T18:52:08Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryReplicaSyncUpManager.java", "diffHunk": "@@ -209,6 +209,20 @@ public void onDisconnectionError(ReplicaId replicaId) {\n     countDownLatch(partitionToDisconnectionLatch, replicaId.getPartitionId().toPathString());\n   }\n \n+  /**\n+   * @return the map whose key is partition name and the value is corresponding deactivation latch.\n+   */\n+  public ConcurrentHashMap<String, CountDownLatch> getPartitionToDeactivationLatch() {\n+    return partitionToDeactivationLatch;\n+  }\n+\n+  /**\n+   * @return the map whose key is partition name and the value is corresponding disconnection latch.\n+   */\n+  public ConcurrentHashMap<String, CountDownLatch> getPartitionToDisconnectionLatch() {\n+    return partitionToDisconnectionLatch;\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MDQzNw=="}, "originalCommit": {"oid": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxODY1MA==", "bodyText": "Sorry, I double checked its usage and it was indeed called in one of the tests out of the package.", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386718650", "createdAt": "2020-03-02T23:43:33Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryReplicaSyncUpManager.java", "diffHunk": "@@ -209,6 +209,20 @@ public void onDisconnectionError(ReplicaId replicaId) {\n     countDownLatch(partitionToDisconnectionLatch, replicaId.getPartitionId().toPathString());\n   }\n \n+  /**\n+   * @return the map whose key is partition name and the value is corresponding deactivation latch.\n+   */\n+  public ConcurrentHashMap<String, CountDownLatch> getPartitionToDeactivationLatch() {\n+    return partitionToDeactivationLatch;\n+  }\n+\n+  /**\n+   * @return the map whose key is partition name and the value is corresponding disconnection latch.\n+   */\n+  public ConcurrentHashMap<String, CountDownLatch> getPartitionToDisconnectionLatch() {\n+    return partitionToDisconnectionLatch;\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MDQzNw=="}, "originalCommit": {"oid": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTkxNTUxOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/StorageManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTowNDo0MFrOFv_oBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0NDowM1rOFwzcaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2OTgzMQ==", "bodyText": "Can we structure the code so that we don't copy the logic from replication manager and stats manager here?\nWe can probably having a reference of ReplicationManagerListener and StatsManagerListener here and just call\nlistener.becomeInactiveFromStandby and listener.becomeOfflineFromInactive.", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r385869831", "createdAt": "2020-02-28T19:04:40Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/StorageManager.java", "diffHunk": "@@ -376,6 +396,67 @@ int getCompactionThreadCount() {\n     return count;\n   }\n \n+  /**\n+   * This method is called by Offline-To-Dropped transition. Any errors/exceptions will be thrown and converted to\n+   * {@link StateTransitionException}. The error/exception is also recorded in certain metric for alerting purpose.\n+   */\n+  private void resumeDecommission(ReplicaId replica) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMTIyNw==", "bodyText": "Not quite sure if I am able to make it but let me double check the feasibility.", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386131227", "createdAt": "2020-03-01T18:52:46Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/StorageManager.java", "diffHunk": "@@ -376,6 +396,67 @@ int getCompactionThreadCount() {\n     return count;\n   }\n \n+  /**\n+   * This method is called by Offline-To-Dropped transition. Any errors/exceptions will be thrown and converted to\n+   * {@link StateTransitionException}. The error/exception is also recorded in certain metric for alerting purpose.\n+   */\n+  private void resumeDecommission(ReplicaId replica) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2OTgzMQ=="}, "originalCommit": {"oid": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxODgyNA==", "bodyText": "I made it!  The code is now more concise :)", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386718824", "createdAt": "2020-03-02T23:44:03Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/StorageManager.java", "diffHunk": "@@ -376,6 +396,67 @@ int getCompactionThreadCount() {\n     return count;\n   }\n \n+  /**\n+   * This method is called by Offline-To-Dropped transition. Any errors/exceptions will be thrown and converted to\n+   * {@link StateTransitionException}. The error/exception is also recorded in certain metric for alerting purpose.\n+   */\n+  private void resumeDecommission(ReplicaId replica) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2OTgzMQ=="}, "originalCommit": {"oid": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTY5MzkwOnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/server/StoreManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxNDoxMVrOFw0COA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo1MDoxNVrOFw0sOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODUwNA==", "bodyText": "not used.", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386728504", "createdAt": "2020-03-03T00:14:11Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com.github.ambry/server/StoreManager.java", "diffHunk": "@@ -15,7 +15,9 @@\n \n import com.github.ambry.clustermap.PartitionId;\n import com.github.ambry.clustermap.ReplicaId;\n+import com.github.ambry.router.Callback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1767e71431d971729360a9e6f0f417099ee347"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczOTI1Nw==", "bodyText": "good catch, will clean it up", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386739257", "createdAt": "2020-03-03T00:50:15Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com.github.ambry/server/StoreManager.java", "diffHunk": "@@ -15,7 +15,9 @@\n \n import com.github.ambry.clustermap.PartitionId;\n import com.github.ambry.clustermap.ReplicaId;\n+import com.github.ambry.router.Callback;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODUwNA=="}, "originalCommit": {"oid": "8a1767e71431d971729360a9e6f0f417099ee347"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTcwNTU3OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoyMDoxNlrOFw0JZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoyMDoxNlrOFw0JZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDM0Mw==", "bodyText": "not used.", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386730343", "createdAt": "2020-03-03T00:20:16Z", "author": {"login": "zzmao"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java", "diffHunk": "@@ -17,9 +17,11 @@\n import com.github.ambry.clustermap.PartitionId;\n import com.github.ambry.clustermap.ReplicaId;\n import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.router.Callback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1767e71431d971729360a9e6f0f417099ee347"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTcwNzcyOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com.github.ambry.replication/ReplicationManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoyMToxMFrOFw0Kpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoyMToxMFrOFw0Kpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDY2Mw==", "bodyText": "not used.", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386730663", "createdAt": "2020-03-03T00:21:10Z", "author": {"login": "zzmao"}, "path": "ambry-replication/src/main/java/com.github.ambry.replication/ReplicationManager.java", "diffHunk": "@@ -29,6 +29,7 @@\n import com.github.ambry.config.StoreConfig;\n import com.github.ambry.network.ConnectionPool;\n import com.github.ambry.notification.NotificationSystem;\n+import com.github.ambry.router.Callback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1767e71431d971729360a9e6f0f417099ee347"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTg3MjA1OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/clustermap/ClusterParticipant.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMTo0NzozMFrOFw1szQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMTo0NzozMFrOFw1szQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1NTc4OQ==", "bodyText": "please add Override annotation to HelixParticipant's implementation on this method.", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386755789", "createdAt": "2020-03-03T01:47:30Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com.github.ambry/clustermap/ClusterParticipant.java", "diffHunk": "@@ -91,6 +92,11 @@ void registerPartitionStateChangeListener(StateModelListenerType listenerType,\n   default void initializeParticipantMetrics(int localPartitionCount) {\n   }\n \n+  /**\n+   * @return a map of registered state change listeners (if there are any) in this cluster participant.\n+   */\n+  Map<StateModelListenerType, PartitionStateChangeListener> getPartitionStateChangeListeners();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a56c96a86161efe73a2969e2ea867d54074c68"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTkwOTM5OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/StorageManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjowODoxOVrOFw2Cow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjowODoxOVrOFw2Cow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2MTM3OQ==", "bodyText": "can you add comment to this method to explain why we have to perform those actions in this order?", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386761379", "createdAt": "2020-03-03T02:08:19Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/StorageManager.java", "diffHunk": "@@ -536,5 +615,26 @@ public void onPartitionBecomeDroppedFromOffline(String partitionName) {\n       partitionNameToReplicaId.remove(partitionName);\n       logger.info(\"Partition {} is successfully dropped on current node\", partitionName);\n     }\n+\n+    /**\n+     * This method is called by Offline-To-Dropped transition. Any errors/exceptions will be thrown and converted to\n+     * {@link StateTransitionException}. The error/exception is also recorded in certain metric for alerting purpose.\n+     */\n+    private void resumeDecommission(String partitionName) throws Exception {\n+      logger.info(\"Resuming decommission on replica {}\", partitionName);\n+      // 1. perform Standby-To-Inactive transition in StorageManager\n+      onPartitionBecomeInactiveFromStandby(partitionName);\n+      if (replicationManagerListener != null && replicaSyncUpManager != null) {\n+        // 2. perform Standby-To-Inactive transition in ReplicationManager\n+        replicationManagerListener.onPartitionBecomeInactiveFromStandby(partitionName);\n+        replicaSyncUpManager.waitDeactivationCompleted(partitionName);\n+        // 3. perform Inactive-To-Offline transition in ReplicationManager\n+        replicationManagerListener.onPartitionBecomeOfflineFromInactive(partitionName);\n+        replicaSyncUpManager.waitDisconnectionCompleted(partitionName);\n+      }\n+      // 4. perform Inactive-To-Offline transition in StorageManager\n+      onPartitionBecomeOfflineFromInactive(partitionName);\n+      logger.info(\"Decommission on replica {} is almost done, dropping it from current node\", partitionName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a56c96a86161efe73a2969e2ea867d54074c68"}, "originalPosition": 182}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1730, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}