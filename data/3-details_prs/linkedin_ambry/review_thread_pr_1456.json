{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTcwMDcx", "number": 1456, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMToyNDo0N1rODvXPiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoyNTo0NlrODwEbOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTkwNDcyOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMToyNDo0N1rOGBvqjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjowNjo0MFrOGDCrOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MjcwMg==", "bodyText": "If this is only for cloud replicas, should the metric name reflect that?", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r404482702", "createdAt": "2020-04-07T01:24:47Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -671,6 +699,20 @@ public void updateLagMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo,\n     }\n   }\n \n+  /**\n+   * Update catch up point of local replica from the cloud replica.\n+   * @param remoteReplicaInfo {@link RemoteReplicaInfo} of the cloud replica.\n+   * @param catchUpPoint timestamp upto which local replica has caught with the cloud replica.\n+   */\n+  public void updateCatchupPointMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo, long catchUpPoint) {\n+    // update this metric only for cloud peer replica. There will only be one cloud replica peer per partition.\n+    if (remoteReplicaInfo.getReplicaId().getReplicaType() == ReplicaType.CLOUD_BACKED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0d5c9c1a409aca01574f41662fdaa03fcc6777"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0Mjc0Ng==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r405842746", "createdAt": "2020-04-08T22:06:40Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -671,6 +699,20 @@ public void updateLagMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo,\n     }\n   }\n \n+  /**\n+   * Update catch up point of local replica from the cloud replica.\n+   * @param remoteReplicaInfo {@link RemoteReplicaInfo} of the cloud replica.\n+   * @param catchUpPoint timestamp upto which local replica has caught with the cloud replica.\n+   */\n+  public void updateCatchupPointMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo, long catchUpPoint) {\n+    // update this metric only for cloud peer replica. There will only be one cloud replica peer per partition.\n+    if (remoteReplicaInfo.getReplicaId().getReplicaType() == ReplicaType.CLOUD_BACKED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MjcwMg=="}, "originalCommit": {"oid": "7c0d5c9c1a409aca01574f41662fdaa03fcc6777"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzI4OTUzOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoyMTozMVrOGC26Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowOToxOVrOGDjxcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0OTk5MQ==", "bodyText": "Not sure if its possible for there to be a conflict with removeCatchupPointMetricForPartition being called concurrently, but if there is, you could use cloudReplicaCatchUpPoint.computeIfPresent(remoteReplicaInfo.getLocalReplicaId().getPartitionId(), (k, v) -> catchUpPoint) instead.", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r405649991", "createdAt": "2020-04-08T16:21:31Z", "author": {"login": "cgtz"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -671,6 +699,20 @@ public void updateLagMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo,\n     }\n   }\n \n+  /**\n+   * Update catch up point of local replica from the cloud replica.\n+   * @param remoteReplicaInfo {@link RemoteReplicaInfo} of the cloud replica.\n+   * @param catchUpPoint timestamp upto which local replica has caught with the cloud replica.\n+   */\n+  public void updateCatchupPointMetricForCloudReplica(RemoteReplicaInfo remoteReplicaInfo, long catchUpPoint) {\n+    // update this metric only for cloud peer replica. There will only be one cloud replica peer per partition.\n+    if (remoteReplicaInfo.getReplicaId().getReplicaType() == ReplicaType.CLOUD_BACKED\n+        && cloudReplicaCatchUpPoint.containsKey(remoteReplicaInfo.getLocalReplicaId().getPartitionId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7651670598f1aa11044e4dc938ab07ee5c298e07"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NTAwOA==", "bodyText": "As discussed offline, since remove only removes the metric from the registry and not from the map, there shouldn't be any conflict here.", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r406385008", "createdAt": "2020-04-09T18:09:19Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -671,6 +699,20 @@ public void updateLagMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo,\n     }\n   }\n \n+  /**\n+   * Update catch up point of local replica from the cloud replica.\n+   * @param remoteReplicaInfo {@link RemoteReplicaInfo} of the cloud replica.\n+   * @param catchUpPoint timestamp upto which local replica has caught with the cloud replica.\n+   */\n+  public void updateCatchupPointMetricForCloudReplica(RemoteReplicaInfo remoteReplicaInfo, long catchUpPoint) {\n+    // update this metric only for cloud peer replica. There will only be one cloud replica peer per partition.\n+    if (remoteReplicaInfo.getReplicaId().getReplicaType() == ReplicaType.CLOUD_BACKED\n+        && cloudReplicaCatchUpPoint.containsKey(remoteReplicaInfo.getLocalReplicaId().getPartitionId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0OTk5MQ=="}, "originalCommit": {"oid": "7651670598f1aa11044e4dc938ab07ee5c298e07"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzMwNzQ3OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoyNTo0N1rOGC3Fnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjoyMjo0NlrOGDDDgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1Mjg5NQ==", "bodyText": "minor: I know it wasn't done for the other similar metrics, but since this name format is used in two methods you could probably make a helper method to generate the name\nString getCatchupPointFromCloudMetricName(PartitionId partitionId) { \n  return MetricRegistry.name(ReplicaThread.class, \"Partition-\" + partitionId.toPathString() + \"-catchupPointFromCloud\");\n}", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r405652895", "createdAt": "2020-04-08T16:25:47Z", "author": {"login": "cgtz"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -434,6 +437,20 @@ public void addLagMetricForPartition(PartitionId partitionId) {\n     }\n   }\n \n+  /**\n+   * Add catchup point metric(local from cloud) for given partitionId.\n+   * @param partitionId partition to add metric for.\n+   */\n+  public void addCatchUpPointMetricForPartition(PartitionId partitionId) {\n+    if (!cloudReplicaCatchUpPoint.containsKey(partitionId)) {\n+      cloudReplicaCatchUpPoint.put(partitionId, 0L);\n+      // Set up metrics if and only if no mapping for this partition before.\n+      Gauge<Long> catchUpPoint = () -> cloudReplicaCatchUpPoint.get(partitionId);\n+      registry.register(MetricRegistry.name(ReplicaThread.class,\n+          \"Partition-\" + partitionId.toPathString() + \"-catchupPointFromCloud\"), catchUpPoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7651670598f1aa11044e4dc938ab07ee5c298e07"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0ODk2Mg==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r405848962", "createdAt": "2020-04-08T22:22:46Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -434,6 +437,20 @@ public void addLagMetricForPartition(PartitionId partitionId) {\n     }\n   }\n \n+  /**\n+   * Add catchup point metric(local from cloud) for given partitionId.\n+   * @param partitionId partition to add metric for.\n+   */\n+  public void addCatchUpPointMetricForPartition(PartitionId partitionId) {\n+    if (!cloudReplicaCatchUpPoint.containsKey(partitionId)) {\n+      cloudReplicaCatchUpPoint.put(partitionId, 0L);\n+      // Set up metrics if and only if no mapping for this partition before.\n+      Gauge<Long> catchUpPoint = () -> cloudReplicaCatchUpPoint.get(partitionId);\n+      registry.register(MetricRegistry.name(ReplicaThread.class,\n+          \"Partition-\" + partitionId.toPathString() + \"-catchupPointFromCloud\"), catchUpPoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1Mjg5NQ=="}, "originalCommit": {"oid": "7651670598f1aa11044e4dc938ab07ee5c298e07"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1468, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}