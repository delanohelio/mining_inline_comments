{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyOTc1MjY0", "number": 1534, "title": "Support disabling partition in Helix when there is disk failure", "bodyText": "This PR allows server to disable partition when store is shut down due to\ndisk I/O error. Disabling partition will trigger state transition to mark\nthis partition in ERROR state. This is helpful for leader based replication\nto handle runtime disk failure as Helix controller will automatically re-elect\na new leader and unblock cross-dc replication.", "createdAt": "2020-05-26T04:08:35Z", "url": "https://github.com/linkedin/ambry/pull/1534", "merged": true, "mergeCommit": {"oid": "dd9ffa1a135607adbd38361ceff819bf74b9f174"}, "closed": true, "closedAt": "2020-06-18T17:58:30Z", "author": {"login": "jsjtzyy"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcneH7AAFqTQyMjAyNzQ3Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsiR9GAFqTQzMzUxODY3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDI3NDcz", "url": "https://github.com/linkedin/ambry/pull/1534#pullrequestreview-422027473", "createdAt": "2020-06-01T17:12:42Z", "commit": {"oid": "374861135f71d03cd67c2fd67e43165965d30ee5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzoxMjo0MlrOGdS43Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDoxNDo1MlrOGeIBRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3MTM1Nw==", "bodyText": "Why are these public now as opposed to adding methods to ReplicaId/DiskId/etc. interfaces?", "url": "https://github.com/linkedin/ambry/pull/1534#discussion_r433371357", "createdAt": "2020-06-01T17:12:42Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/AmbryReplica.java", "diffHunk": "@@ -25,7 +25,7 @@\n /**\n  * {@link ReplicaId} implementation to use within dynamic cluster managers.\n  */\n-abstract class AmbryReplica implements ReplicaId {\n+public abstract class AmbryReplica implements ReplicaId {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374861135f71d03cd67c2fd67e43165965d30ee5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyNTI2Mg==", "bodyText": "It seems like similar methods like recoverFromDecomission do not have default impls and some impls throw UnsupportedOperationException. Is there a reason for the difference here?", "url": "https://github.com/linkedin/ambry/pull/1534#discussion_r434225262", "createdAt": "2020-06-02T23:16:02Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/store/Store.java", "diffHunk": "@@ -171,6 +171,13 @@\n    */\n   boolean recoverFromDecommission();\n \n+  /**\n+   * @return {@code true} if the store is disabled on error (due to disk I/O issue).\n+   */\n+  default boolean disabledOnError() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374861135f71d03cd67c2fd67e43165965d30ee5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzMjY2NA==", "bodyText": "Could MockHelixParticipant(ClusterMapConfig) call this(clusterMapConfig, new MockHelixManagerFactory())?", "url": "https://github.com/linkedin/ambry/pull/1534#discussion_r434232664", "createdAt": "2020-06-02T23:40:47Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/test/java/com/github/ambry/clustermap/MockHelixParticipant.java", "diffHunk": "@@ -24,20 +24,22 @@\n import java.util.stream.Collectors;\n import org.mockito.Mockito;\n \n-import static org.mockito.Mockito.*;\n import static com.github.ambry.clustermap.ClusterMapUtils.*;\n+import static org.mockito.Mockito.*;\n \n \n public class MockHelixParticipant extends HelixParticipant {\n   public static MetricRegistry metricRegistry = new MetricRegistry();\n   public Boolean updateNodeInfoReturnVal = null;\n   public PartitionStateChangeListener mockStatsManagerListener = null;\n+  public boolean overrideDisableReplicaMethod = true;\n   CountDownLatch listenerLatch = null;\n   ReplicaState replicaState = ReplicaState.OFFLINE;\n   ReplicaId currentReplica = null;\n   ReplicaSyncUpManager replicaSyncUpService = null;\n   private Set<ReplicaId> sealedReplicas = new HashSet<>();\n   private Set<ReplicaId> stoppedReplicas = new HashSet<>();\n+  private Set<ReplicaId> disabledReplicas = new HashSet<>();\n   private PartitionStateChangeListener mockReplicationManagerListener;\n \n   public MockHelixParticipant(ClusterMapConfig clusterMapConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374861135f71d03cd67c2fd67e43165965d30ee5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzMzEwNQ==", "bodyText": "final", "url": "https://github.com/linkedin/ambry/pull/1534#discussion_r434233105", "createdAt": "2020-06-02T23:42:21Z", "author": {"login": "cgtz"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -90,6 +91,7 @@\n   private FileLock fileLock;\n   private volatile ReplicaState currentState;\n   private volatile boolean recoverFromDecommission;\n+  private AtomicBoolean disabledOnError = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374861135f71d03cd67c2fd67e43165965d30ee5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzODIzNQ==", "bodyText": "for testing i would prefer having a setter instead of getter for the AtomicBoolean object.", "url": "https://github.com/linkedin/ambry/pull/1534#discussion_r434238235", "createdAt": "2020-06-03T00:01:15Z", "author": {"login": "cgtz"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -1033,6 +1064,14 @@ AtomicInteger getErrorCount() {\n     return errorCount;\n   }\n \n+  /**\n+   * Exposed for testing.\n+   * @return a boolean value that indicates whether current store is disabled due to I/O error.\n+   */\n+  AtomicBoolean getDisabledOnError() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374861135f71d03cd67c2fd67e43165965d30ee5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzODgxOQ==", "bodyText": "minor: since the added if throws, this code doesn't need to be in an else clause. This can shorten the diff a bit and seems to match the existing style of this method a bit better.", "url": "https://github.com/linkedin/ambry/pull/1534#discussion_r434238819", "createdAt": "2020-06-03T00:03:21Z", "author": {"login": "cgtz"}, "path": "ambry-store/src/main/java/com/github/ambry/store/StorageManager.java", "diffHunk": "@@ -512,35 +512,45 @@ public void onPartitionBecomeInactiveFromStandby(String partitionName) {\n       // if replica is null that means partition is not on current node (this shouldn't happen unless we use server admin\n       // tool to remove the store before initiating decommission on this partition). We throw exception in this case.\n       if (replica != null) {\n-        // 0. as long as local replica exists, we create a decommission file in its dir\n-        File decommissionFile = new File(replica.getReplicaPath(), BlobStore.DECOMMISSION_FILE_NAME);\n-        try {\n-          if (!decommissionFile.exists()) {\n-            // if not present, create one.\n-            decommissionFile.createNewFile();\n-            logger.info(\"Decommission file is created for replica {}\", replica.getReplicaPath());\n-          }\n-        } catch (IOException e) {\n-          logger.error(\"IOException occurs when creating decommission file for replica \" + partitionName, e);\n-          throw new StateTransitionException(\n-              \"Couldn't create decommission file for replica \" + replica.getReplicaPath(), ReplicaOperationFailure);\n+        Store localStore = getStore(replica.getPartitionId(), true);\n+        if (localStore == null) {\n+          throw new StateTransitionException(\"Store \" + partitionName + \" is not found on current node\",\n+              ReplicaNotFound);\n         }\n-        Store localStore = getStore(replica.getPartitionId());\n-        if (localStore != null) {\n-          // 1. set state to INACTIVE\n-          localStore.setCurrentState(ReplicaState.INACTIVE);\n-          logger.info(\"Store {} is set to INACTIVE\", partitionName);\n-          // 2. disable compaction on this store\n-          if (!controlCompactionForBlobStore(replica.getPartitionId(), false)) {\n-            logger.error(\"Failed to disable compaction on store {}\", partitionName);\n-            // we set error code to ReplicaNotFound because that is the only reason why compaction may fail.\n-            throw new StateTransitionException(\"Couldn't disable compaction on replica \" + replica.getReplicaPath(),\n-                ReplicaNotFound);\n-          }\n-          logger.info(\"Compaction is successfully disabled on store {}\", partitionName);\n+        if (localStore.disabledOnError()) {\n+          // if store is disabled due to disk I/O error, we explicitly throw an exception to mark partition as ERROR state\n+          throw new StateTransitionException(\"Store \" + partitionName + \" is disabled due to I/O error\",\n+              ReplicaOperationFailure);\n         } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374861135f71d03cd67c2fd67e43165965d30ee5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTc4MA==", "bodyText": "is there a test for the \"Store \" + partitionName + \" is not found on current node\" case?", "url": "https://github.com/linkedin/ambry/pull/1534#discussion_r434239780", "createdAt": "2020-06-03T00:07:03Z", "author": {"login": "cgtz"}, "path": "ambry-store/src/test/java/com/github/ambry/store/StorageManagerTest.java", "diffHunk": "@@ -357,15 +357,25 @@ public void replicaFromStandbyToInactiveTest() throws Exception {\n       assertEquals(\"Error code doesn't match\", StoreNotStarted, e.getErrorCode());\n     }\n     storageManager.startBlobStore(localReplica.getPartitionId());\n-    // 4. success case (verify both replica's state and decommission file)\n+    // 4. store is disabled due to disk I/O error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374861135f71d03cd67c2fd67e43165965d30ee5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MDIwNA==", "bodyText": "Why can't MockReplicaId be used here?", "url": "https://github.com/linkedin/ambry/pull/1534#discussion_r434240204", "createdAt": "2020-06-03T00:08:42Z", "author": {"login": "cgtz"}, "path": "ambry-store/src/test/java/com/github/ambry/store/StoreTestUtils.java", "diffHunk": "@@ -140,6 +144,54 @@ public void setSealedState(boolean isSealed) {\n     }\n   }\n \n+  public static class MockAmbryReplica extends AmbryReplica {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374861135f71d03cd67c2fd67e43165965d30ee5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MTg2MQ==", "bodyText": "it looks like this method just updates the ZnRecord java object. Do you need to call HelixAdmin.setInstanceConfig like was done in setDisabledReplicas. Also, I was wondering if we need the additional disabledReplicas field or if we could just use HELIX_DISABLED_PARTITION? I may be missing something, but it seems like they hold the same set of information and are updated together at the same time.", "url": "https://github.com/linkedin/ambry/pull/1534#discussion_r434241861", "createdAt": "2020-06-03T00:14:52Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipant.java", "diffHunk": "@@ -254,6 +245,33 @@ public boolean updateDataNodeInfoInCluster(ReplicaId replicaId, boolean shouldEx\n     return Collections.unmodifiableMap(partitionStateChangeListeners);\n   }\n \n+  @Override\n+  public void setReplicaDisabledState(ReplicaId replicaId, boolean disable) {\n+    if (!(replicaId instanceof AmbryReplica)) {\n+      throw new IllegalArgumentException(\n+          \"HelixParticipant only works with the AmbryReplica implementation of ReplicaId\");\n+    }\n+    synchronized (helixAdministrationLock) {\n+      List<String> disabledReplicas = new ArrayList<>(getDisabledReplicas());\n+      String partitionName = replicaId.getPartitionId().toPathString();\n+      if (!disable && disabledReplicas.contains(partitionName)) {\n+        logger.info(\"Removing the partition {} from disabledReplicas list\", partitionName);\n+        disabledReplicas.remove(partitionName);\n+        setDisabledReplicas(disabledReplicas);\n+      } else if (disable && !disabledReplicas.contains(partitionName)) {\n+        logger.info(\"Adding the partition {} to disabledReplicas list\", partitionName);\n+        disabledReplicas.add(partitionName);\n+        setDisabledReplicas(disabledReplicas);\n+      }\n+\n+      // invoke Helix native method to enable/disable partition on local node, this will trigger subsequent state transition\n+      InstanceConfig instanceConfig = getInstanceConfig();\n+      String resourceNameForPartition = getResourceNameOfPartition(helixAdmin, clusterName, partitionName);\n+      instanceConfig.setInstanceEnabledForPartition(resourceNameForPartition, partitionName, !disable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374861135f71d03cd67c2fd67e43165965d30ee5"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb7921ee3fcf8c82a5b18cd92014556fb8166e2e", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/fb7921ee3fcf8c82a5b18cd92014556fb8166e2e", "committedDate": "2020-06-04T04:32:30Z", "message": "Support disabling partition in Helix when there is disk I/O error\n\nThis PR allows server to disable partition when store is shut down due to\ndisk I/O error. Disabling partition will trigger state transition to mark\nthis partition in ERROR state. This is helpful for leader based replication\nto handle runtime disk failure as Helix controller will automatically re-elect\na new leader and unblock cross-dc replication."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b5f34bffea1e126da3921d1147fb537632b7cbf", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/0b5f34bffea1e126da3921d1147fb537632b7cbf", "committedDate": "2020-06-04T04:32:47Z", "message": "fix test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "298648742557a87f9852f776ad13d93719dfd7c5", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/298648742557a87f9852f776ad13d93719dfd7c5", "committedDate": "2020-06-04T04:32:47Z", "message": "fix compilation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9644ffe5c42ce0fbd69d173a1022f04572049e10", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/9644ffe5c42ce0fbd69d173a1022f04572049e10", "committedDate": "2020-06-04T04:32:47Z", "message": "added a config to switch on/off disable partition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cae5ba360cbcbf832ea6fd515ca7a35a58728fd", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/4cae5ba360cbcbf832ea6fd515ca7a35a58728fd", "committedDate": "2020-06-04T04:32:47Z", "message": "fix bug in set disabled replica method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "041eecd978f6f9f92db654ec0c14b7c5199b5379", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/041eecd978f6f9f92db654ec0c14b7c5199b5379", "committedDate": "2020-06-04T16:14:41Z", "message": "comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5487136cc8df58cdc062b8a36dc41f8d0d77ba9b", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/5487136cc8df58cdc062b8a36dc41f8d0d77ba9b", "committedDate": "2020-06-07T17:53:42Z", "message": "rebase and address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "374861135f71d03cd67c2fd67e43165965d30ee5", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/374861135f71d03cd67c2fd67e43165965d30ee5", "committedDate": "2020-05-28T03:53:52Z", "message": "fix bug in set disabled replica method"}, "afterCommit": {"oid": "5487136cc8df58cdc062b8a36dc41f8d0d77ba9b", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/5487136cc8df58cdc062b8a36dc41f8d0d77ba9b", "committedDate": "2020-06-07T17:53:42Z", "message": "rebase and address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be6ea6989c43e2c85492e24de7aa8c6f10c0dd89", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/be6ea6989c43e2c85492e24de7aa8c6f10c0dd89", "committedDate": "2020-06-08T23:44:58Z", "message": "make sure InstanceConfig is set by HelixAdmin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTA4NzYw", "url": "https://github.com/linkedin/ambry/pull/1534#pullrequestreview-428508760", "createdAt": "2020-06-11T00:08:30Z", "commit": {"oid": "be6ea6989c43e2c85492e24de7aa8c6f10c0dd89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDowODozMFrOGiKQ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDowODozMFrOGiKQ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MjkxOA==", "bodyText": "why pass in a new object instead the one in localStore?", "url": "https://github.com/linkedin/ambry/pull/1534#discussion_r438472918", "createdAt": "2020-06-11T00:08:30Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/test/java/com/github/ambry/store/StorageManagerTest.java", "diffHunk": "@@ -357,15 +369,26 @@ public void replicaFromStandbyToInactiveTest() throws Exception {\n       assertEquals(\"Error code doesn't match\", StoreNotStarted, e.getErrorCode());\n     }\n     storageManager.startBlobStore(localReplica.getPartitionId());\n-    // 4. success case (verify both replica's state and decommission file)\n+    // 5. store is disabled due to disk I/O error\n+    BlobStore localStore = (BlobStore) storageManager.getStore(localReplica.getPartitionId());\n+    AtomicBoolean mockDisabledOnError = new AtomicBoolean(true);\n+    localStore.setDisabledOnError(mockDisabledOnError);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be6ea6989c43e2c85492e24de7aa8c6f10c0dd89"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66aab915b76f824f575da544b5252629be2d55df", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/66aab915b76f824f575da544b5252629be2d55df", "committedDate": "2020-06-11T03:47:30Z", "message": "address Ze's comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NjEzMjY2", "url": "https://github.com/linkedin/ambry/pull/1534#pullrequestreview-428613266", "createdAt": "2020-06-11T06:01:03Z", "commit": {"oid": "66aab915b76f824f575da544b5252629be2d55df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5Mzg3NjAy", "url": "https://github.com/linkedin/ambry/pull/1534#pullrequestreview-429387602", "createdAt": "2020-06-12T00:26:52Z", "commit": {"oid": "66aab915b76f824f575da544b5252629be2d55df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTE4Njcx", "url": "https://github.com/linkedin/ambry/pull/1534#pullrequestreview-433518671", "createdAt": "2020-06-18T17:55:08Z", "commit": {"oid": "66aab915b76f824f575da544b5252629be2d55df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1512, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}