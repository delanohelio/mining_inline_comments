{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MzE4MjM2", "number": 1681, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTozMjowNFrOE0qdQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoxNToxOVrOE1apow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjU3MDI2OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AccountUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTozMjowNFrOHsgtpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTozMjowNFrOHsgtpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNTM2NA==", "bodyText": "What about containers?", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516435364", "createdAt": "2020-11-03T05:32:04Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AccountUtils.java", "diffHunk": "@@ -163,7 +160,7 @@ public static boolean compareAccounts(Collection<Account> accountsInPrimary,\n         logger.warn(\"Accounts mismatch in primary and secondary = {}\", accountsInfo.toString());\n       }\n     }\n-    return isSame;\n+    return accountsMissingInSecondary.size() + accountsDifferentInSecondary.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjU3ODM3OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/MySqlDataAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTozNzozOFrOHsgyFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTozNzozOFrOHsgyFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNjUwMg==", "bodyText": "It might suffice to check if e instanceof SQLTransientConnectionException as above.  Are there cases that wouldn't handle?", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516436502", "createdAt": "2020-11-03T05:37:38Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/MySqlDataAccessor.java", "diffHunk": "@@ -143,11 +153,34 @@ public static boolean isCredentialError(SQLException e) {\n   /**\n    * Handle a SQL exception on a database operation.\n    * @param e the {@link SQLException} encountered.\n+   * @param operationType type of mysql operation\n    */\n-  void onException(SQLException e) {\n+  void onException(SQLException e, OperationType operationType) {\n     if (e instanceof SQLTransientConnectionException) {\n       reset();\n     }\n+    if (!(e instanceof SQLIntegrityConstraintViolationException || isCredentialError(e))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjU4MTI0OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/MySqlAccountStoreMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTozOTo0OFrOHsgzuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTozOTo0OFrOHsgzuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNjkyMA==", "bodyText": "javadoc", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516436920", "createdAt": "2020-11-03T05:39:48Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/MySqlAccountStoreMetrics.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.github.ambry.account.mysql;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Histogram;\n+import com.codahale.metrics.MetricRegistry;\n+\n+\n+public class MySqlAccountStoreMetrics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjU4MjA0OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/MySqlAccountStoreMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTo0MDoxN1rOHsg0Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTo0MDoxN1rOHsg0Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzAzMA==", "bodyText": "copyright header", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516437030", "createdAt": "2020-11-03T05:40:17Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/MySqlAccountStoreMetrics.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.github.ambry.account.mysql;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjU4MjkzOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTo0MTowNlrOHsg0tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTo0MTowNlrOHsg0tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzE3NQ==", "bodyText": "Minor: import static MySqlDataAccessor.OperationType", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516437175", "createdAt": "2020-11-03T05:41:06Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "diffHunk": "@@ -61,12 +61,14 @@ public AccountDao(MySqlDataAccessor dataAccessor) {\n    */\n   public void addAccount(Account account) throws SQLException {\n     try {\n+      long startTimeMs = System.currentTimeMillis();\n       PreparedStatement insertStatement = dataAccessor.getPreparedStatement(insertSql);\n       insertStatement.setString(1, AccountCollectionSerde.accountToJsonNoContainers(account).toString());\n       insertStatement.setInt(2, account.getSnapshotVersion());\n       insertStatement.executeUpdate();\n+      dataAccessor.onSuccess(MySqlDataAccessor.OperationType.Write, System.currentTimeMillis() - startTimeMs);\n     } catch (SQLException e) {\n-      dataAccessor.onException(e);\n+      dataAccessor.onException(e, MySqlDataAccessor.OperationType.Write);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjU4MzgxOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AccountServiceMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTo0MTo0MFrOHsg1JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTo0MTo0MFrOHsg1JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzI4NQ==", "bodyText": "Minor: can omit comment", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516437285", "createdAt": "2020-11-03T05:41:40Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AccountServiceMetrics.java", "diffHunk": "@@ -47,10 +49,15 @@\n   public final Counter accountUpdatesToAmbryServerErrorCount;\n   public final Counter accountDeletesToAmbryServerErrorCount;\n   public final Counter accountFetchFromAmbryServerErrorCount;\n-  public final Counter accountDataInconsistencyCount;\n   public final Counter accountUpdatesToStoreErrorCount;\n \n+  //Gauge", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzU3MDYyOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AccountUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNzo0NDoxNFrOHti_lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNzo0NDoxNFrOHti_lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUyMTMwMA==", "bodyText": "You may need to add accountsDifferentInSecondary.size() if the difference is in account properties rather than containers, though that might be a rare case at the moment.", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r517521300", "createdAt": "2020-11-04T17:44:14Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AccountUtils.java", "diffHunk": "@@ -105,6 +106,7 @@ public static int compareAccounts(Collection<Account> accountsInPrimary, Collect\n         }\n         accountsInfo.append(\"]\");\n         logger.warn(\"Accounts found in primary and absent in secondary = {}\", accountsInfo.toString());\n+        mismatchCount += accountsMissingInSecondary.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc462060dcdfa204fb43b0620915b02a07dc8cc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDQ2NjI3OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/CompositeAccountService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoxNToxOVrOHtroTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjozNzowOVrOHtsM-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2Mjc5Nw==", "bodyText": "Minor question: do we really need to keep track of accurate mismatch count?  I see this value increases only and never decreases (It's a Gauge type in the metrics). I think maybe an error counter is sufficient. There are some transient cases where two AS are inconsistent but they may quickly converge.", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r517662797", "createdAt": "2020-11-04T22:15:19Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/CompositeAccountService.java", "diffHunk": "@@ -40,20 +41,20 @@\n   private static final String ACCOUNT_DATA_CONSISTENCY_CHECKER_PREFIX = \"account-data-consistency-checker\";\n   private final AccountService primaryAccountService;\n   private final AccountService secondaryAccountService;\n-  private final AccountServiceMetrics accountServiceMetrics;\n   private final CompositeAccountServiceConfig config;\n   private final ScheduledExecutorService scheduler;\n   private static final Random random = new Random();\n+  private AtomicInteger accountsMismatchCount = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71e1b7fb9cb16c76edff8be98c15cc9104e56f62"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MDQ2MA==", "bodyText": "It should be reset to 0 before each compare is made.  If it isn't that needs to be added.", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r517670460", "createdAt": "2020-11-04T22:33:12Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/CompositeAccountService.java", "diffHunk": "@@ -40,20 +41,20 @@\n   private static final String ACCOUNT_DATA_CONSISTENCY_CHECKER_PREFIX = \"account-data-consistency-checker\";\n   private final AccountService primaryAccountService;\n   private final AccountService secondaryAccountService;\n-  private final AccountServiceMetrics accountServiceMetrics;\n   private final CompositeAccountServiceConfig config;\n   private final ScheduledExecutorService scheduler;\n   private static final Random random = new Random();\n+  private AtomicInteger accountsMismatchCount = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2Mjc5Nw=="}, "originalCommit": {"oid": "71e1b7fb9cb16c76edff8be98c15cc9104e56f62"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MjE4NQ==", "bodyText": "The value is set in this line:\naccountsMismatchCount.set( AccountUtils.compareAccounts(primaryAccountService.getAllAccounts(), secondaryAccountService.getAllAccounts())); \nBut there are other places where it gets incremented that don't make sense for a guage.", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r517672185", "createdAt": "2020-11-04T22:37:09Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/CompositeAccountService.java", "diffHunk": "@@ -40,20 +41,20 @@\n   private static final String ACCOUNT_DATA_CONSISTENCY_CHECKER_PREFIX = \"account-data-consistency-checker\";\n   private final AccountService primaryAccountService;\n   private final AccountService secondaryAccountService;\n-  private final AccountServiceMetrics accountServiceMetrics;\n   private final CompositeAccountServiceConfig config;\n   private final ScheduledExecutorService scheduler;\n   private static final Random random = new Random();\n+  private AtomicInteger accountsMismatchCount = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2Mjc5Nw=="}, "originalCommit": {"oid": "71e1b7fb9cb16c76edff8be98c15cc9104e56f62"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1109, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}