{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MTQ3Njc3", "number": 1703, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDozMjo1N1rOE-8kbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjozNjoxN1rOE--DeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDM5NTMzOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDozMjo1N1rOH8Xzxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDozMjo1N1rOH8Xzxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2NjY5NQ==", "bodyText": "minor: add accounts to database in batches", "url": "https://github.com/linkedin/ambry/pull/1703#discussion_r533066695", "createdAt": "2020-12-01T04:32:57Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "diffHunk": "@@ -77,22 +78,28 @@ public void addAccount(Account account) throws SQLException {\n   }\n \n   /**\n-   * Gets all accounts that have been created or modified since the specified time.\n-   * @param updatedSince the last modified time used to filter.\n-   * @return a list of {@link Account}s.\n+   * Add an account to the database.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20dfb8091c86c38c5ebbc4ef18d276fb48b16e8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDU5OTE2OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoxOTowMVrOH8Zpeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo0NDoyNVrOH9A98g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5NjgyNg==", "bodyText": "I wonder what will happen if first batch execution succeeds but second batch fails?", "url": "https://github.com/linkedin/ambry/pull/1703#discussion_r533096826", "createdAt": "2020-12-01T06:19:01Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "diffHunk": "@@ -77,22 +78,28 @@ public void addAccount(Account account) throws SQLException {\n   }\n \n   /**\n-   * Gets all accounts that have been created or modified since the specified time.\n-   * @param updatedSince the last modified time used to filter.\n-   * @return a list of {@link Account}s.\n+   * Add an account to the database.\n+   * @param accounts the account to insert.\n+   * @param batchSize number of statements to be executed in one batch\n    * @throws SQLException\n    */\n-  public List<Account> getNewAccounts(long updatedSince) throws SQLException {\n-    long startTimeMs = System.currentTimeMillis();\n-    Timestamp sinceTime = new Timestamp(updatedSince);\n-    PreparedStatement getSinceStatement = dataAccessor.getPreparedStatement(getSinceSql, false);\n-    getSinceStatement.setTimestamp(1, sinceTime);\n-    try (ResultSet rs = getSinceStatement.executeQuery()) {\n-      List<Account> accounts = convertResultSet(rs);\n-      dataAccessor.onSuccess(Read, System.currentTimeMillis() - startTimeMs);\n-      return accounts;\n+  public void addAccounts(Collection<Account> accounts, int batchSize) throws SQLException {\n+    try {\n+      long startTimeMs = System.currentTimeMillis();\n+      PreparedStatement insertStatement = dataAccessor.getPreparedStatement(insertSql, true);\n+      int count = 0;\n+      for (Account account : accounts) {\n+        insertStatement.setString(1, AccountCollectionSerde.accountToJsonNoContainers(account).toString());\n+        insertStatement.setInt(2, account.getSnapshotVersion());\n+        insertStatement.addBatch();\n+        if (++count % batchSize == 0) {\n+          insertStatement.executeBatch();\n+        }\n+      }\n+      insertStatement.executeBatch();\n+      dataAccessor.onSuccess(Write, System.currentTimeMillis() - startTimeMs);\n     } catch (SQLException e) {\n-      dataAccessor.onException(e, Read);\n+      dataAccessor.onException(e, Write);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20dfb8091c86c38c5ebbc4ef18d276fb48b16e8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MTA0Mg==", "bodyText": "For large updates, it can be in an incomplete state if not retried.  Up to a batch threshold, we plan to add transactions for atomicity.  But we don't want transactions to get too big.", "url": "https://github.com/linkedin/ambry/pull/1703#discussion_r533741042", "createdAt": "2020-12-01T21:44:25Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "diffHunk": "@@ -77,22 +78,28 @@ public void addAccount(Account account) throws SQLException {\n   }\n \n   /**\n-   * Gets all accounts that have been created or modified since the specified time.\n-   * @param updatedSince the last modified time used to filter.\n-   * @return a list of {@link Account}s.\n+   * Add an account to the database.\n+   * @param accounts the account to insert.\n+   * @param batchSize number of statements to be executed in one batch\n    * @throws SQLException\n    */\n-  public List<Account> getNewAccounts(long updatedSince) throws SQLException {\n-    long startTimeMs = System.currentTimeMillis();\n-    Timestamp sinceTime = new Timestamp(updatedSince);\n-    PreparedStatement getSinceStatement = dataAccessor.getPreparedStatement(getSinceSql, false);\n-    getSinceStatement.setTimestamp(1, sinceTime);\n-    try (ResultSet rs = getSinceStatement.executeQuery()) {\n-      List<Account> accounts = convertResultSet(rs);\n-      dataAccessor.onSuccess(Read, System.currentTimeMillis() - startTimeMs);\n-      return accounts;\n+  public void addAccounts(Collection<Account> accounts, int batchSize) throws SQLException {\n+    try {\n+      long startTimeMs = System.currentTimeMillis();\n+      PreparedStatement insertStatement = dataAccessor.getPreparedStatement(insertSql, true);\n+      int count = 0;\n+      for (Account account : accounts) {\n+        insertStatement.setString(1, AccountCollectionSerde.accountToJsonNoContainers(account).toString());\n+        insertStatement.setInt(2, account.getSnapshotVersion());\n+        insertStatement.addBatch();\n+        if (++count % batchSize == 0) {\n+          insertStatement.executeBatch();\n+        }\n+      }\n+      insertStatement.executeBatch();\n+      dataAccessor.onSuccess(Write, System.currentTimeMillis() - startTimeMs);\n     } catch (SQLException e) {\n-      dataAccessor.onException(e, Read);\n+      dataAccessor.onException(e, Write);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5NjgyNg=="}, "originalCommit": {"oid": "b20dfb8091c86c38c5ebbc4ef18d276fb48b16e8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDYwMjQxOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyMDoxOFrOH8ZrSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyMDoxOFrOH8ZrSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5NzI5MA==", "bodyText": "minor: Updates a collection of accounts in the database.", "url": "https://github.com/linkedin/ambry/pull/1703#discussion_r533097290", "createdAt": "2020-12-01T06:20:18Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "diffHunk": "@@ -117,6 +124,55 @@ public void updateAccount(Account account) throws SQLException {\n     }\n   }\n \n+  /**\n+   * Updates an existing account in the database.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20dfb8091c86c38c5ebbc4ef18d276fb48b16e8"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDYwOTU2OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/ContainerDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyMzo0M1rOH8ZvcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyMzo0M1rOH8ZvcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5ODM1Mg==", "bodyText": "nit:\n\nAdd containers from given account to database in batches\ncontainers'", "url": "https://github.com/linkedin/ambry/pull/1703#discussion_r533098352", "createdAt": "2020-12-01T06:23:43Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/ContainerDao.java", "diffHunk": "@@ -83,6 +84,36 @@ public void addContainer(int accountId, Container container) throws SQLException\n     }\n   }\n \n+  /**\n+   * Add a containers to the database.\n+   * @param accountId the containers's parent account id.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20dfb8091c86c38c5ebbc4ef18d276fb48b16e8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDYxMjczOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/ContainerDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyNTowM1rOH8ZxOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyNTowM1rOH8ZxOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5ODgxMA==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1703#discussion_r533098810", "createdAt": "2020-12-01T06:25:03Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/ContainerDao.java", "diffHunk": "@@ -106,6 +137,37 @@ public void updateContainer(int accountId, Container container) throws SQLExcept\n     }\n   }\n \n+  /**\n+   * Updates a container in the database.\n+   * @param accountId the container's parent account id.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20dfb8091c86c38c5ebbc4ef18d276fb48b16e8"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDYyMTE5OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/MySqlAccountStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyOTowNFrOH8Z2EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyOTowNFrOH8Z2EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMDA0OQ==", "bodyText": "minor: add java doc for localDatacenter and config", "url": "https://github.com/linkedin/ambry/pull/1703#discussion_r533100049", "createdAt": "2020-12-01T06:29:04Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/MySqlAccountStore.java", "diffHunk": "@@ -31,17 +32,20 @@\n   private final AccountDao accountDao;\n   private final ContainerDao containerDao;\n   private final MySqlDataAccessor mySqlDataAccessor;\n+  private final MySqlAccountServiceConfig config;\n \n   /**\n    * Constructor.\n    * @param dbEndpoints MySql DB end points\n    * @param metrics metrics to track mysql operations\n    * @throws SQLException\n    */\n-  public MySqlAccountStore(List<MySqlUtils.DbEndpoint> dbEndpoints, String localDatacenter, MySqlMetrics metrics) throws SQLException {\n+  public MySqlAccountStore(List<MySqlUtils.DbEndpoint> dbEndpoints, String localDatacenter, MySqlMetrics metrics,\n+      MySqlAccountServiceConfig config) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20dfb8091c86c38c5ebbc4ef18d276fb48b16e8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDYzODY1OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjozNjoxOFrOH8Z_1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo0ODowOFrOH9BFbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMjU0OQ==", "bodyText": "if count % batchSize = 0,  will line 99 execute an empty batch ?  I guess this is OK for database?", "url": "https://github.com/linkedin/ambry/pull/1703#discussion_r533102549", "createdAt": "2020-12-01T06:36:18Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "diffHunk": "@@ -77,22 +78,28 @@ public void addAccount(Account account) throws SQLException {\n   }\n \n   /**\n-   * Gets all accounts that have been created or modified since the specified time.\n-   * @param updatedSince the last modified time used to filter.\n-   * @return a list of {@link Account}s.\n+   * Add an account to the database.\n+   * @param accounts the account to insert.\n+   * @param batchSize number of statements to be executed in one batch\n    * @throws SQLException\n    */\n-  public List<Account> getNewAccounts(long updatedSince) throws SQLException {\n-    long startTimeMs = System.currentTimeMillis();\n-    Timestamp sinceTime = new Timestamp(updatedSince);\n-    PreparedStatement getSinceStatement = dataAccessor.getPreparedStatement(getSinceSql, false);\n-    getSinceStatement.setTimestamp(1, sinceTime);\n-    try (ResultSet rs = getSinceStatement.executeQuery()) {\n-      List<Account> accounts = convertResultSet(rs);\n-      dataAccessor.onSuccess(Read, System.currentTimeMillis() - startTimeMs);\n-      return accounts;\n+  public void addAccounts(Collection<Account> accounts, int batchSize) throws SQLException {\n+    try {\n+      long startTimeMs = System.currentTimeMillis();\n+      PreparedStatement insertStatement = dataAccessor.getPreparedStatement(insertSql, true);\n+      int count = 0;\n+      for (Account account : accounts) {\n+        insertStatement.setString(1, AccountCollectionSerde.accountToJsonNoContainers(account).toString());\n+        insertStatement.setInt(2, account.getSnapshotVersion());\n+        insertStatement.addBatch();\n+        if (++count % batchSize == 0) {\n+          insertStatement.executeBatch();\n+        }\n+      }\n+      insertStatement.executeBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20dfb8091c86c38c5ebbc4ef18d276fb48b16e8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0Mjk1OQ==", "bodyText": "It would be better to check for empty batch.", "url": "https://github.com/linkedin/ambry/pull/1703#discussion_r533742959", "createdAt": "2020-12-01T21:48:08Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "diffHunk": "@@ -77,22 +78,28 @@ public void addAccount(Account account) throws SQLException {\n   }\n \n   /**\n-   * Gets all accounts that have been created or modified since the specified time.\n-   * @param updatedSince the last modified time used to filter.\n-   * @return a list of {@link Account}s.\n+   * Add an account to the database.\n+   * @param accounts the account to insert.\n+   * @param batchSize number of statements to be executed in one batch\n    * @throws SQLException\n    */\n-  public List<Account> getNewAccounts(long updatedSince) throws SQLException {\n-    long startTimeMs = System.currentTimeMillis();\n-    Timestamp sinceTime = new Timestamp(updatedSince);\n-    PreparedStatement getSinceStatement = dataAccessor.getPreparedStatement(getSinceSql, false);\n-    getSinceStatement.setTimestamp(1, sinceTime);\n-    try (ResultSet rs = getSinceStatement.executeQuery()) {\n-      List<Account> accounts = convertResultSet(rs);\n-      dataAccessor.onSuccess(Read, System.currentTimeMillis() - startTimeMs);\n-      return accounts;\n+  public void addAccounts(Collection<Account> accounts, int batchSize) throws SQLException {\n+    try {\n+      long startTimeMs = System.currentTimeMillis();\n+      PreparedStatement insertStatement = dataAccessor.getPreparedStatement(insertSql, true);\n+      int count = 0;\n+      for (Account account : accounts) {\n+        insertStatement.setString(1, AccountCollectionSerde.accountToJsonNoContainers(account).toString());\n+        insertStatement.setInt(2, account.getSnapshotVersion());\n+        insertStatement.addBatch();\n+        if (++count % batchSize == 0) {\n+          insertStatement.executeBatch();\n+        }\n+      }\n+      insertStatement.executeBatch();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMjU0OQ=="}, "originalCommit": {"oid": "b20dfb8091c86c38c5ebbc4ef18d276fb48b16e8"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1146, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}