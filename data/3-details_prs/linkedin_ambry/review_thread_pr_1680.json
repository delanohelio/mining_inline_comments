{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNzA2NDE3", "number": 1680, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTozNTo0N1rOE0qfdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxMzowNVrOE08emA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjU3NTg5OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTozNTo0N1rOHsgwrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODoyOTo0N1rOHs7cyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNjE0Mg==", "bodyText": "I would recommend to directly use serEntries initialized below to create a CrcInputStream for data integrity validation. This is good for two reasons: 1. We don't have to read the file twice(although the second read would be just a memory copy) 2. We can deal with FileNotFoundException in the same manner.", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516436142", "createdAt": "2020-11-03T05:35:47Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -823,8 +824,9 @@ IndexValue getIndexValueOfLastPut() throws StoreException {\n    * Maps the segment of index either as a memory map or a in memory buffer depending on config.\n    * @throws StoreException if there are problems with the index\n    */\n-  private void map() throws StoreException {\n+  private void map() throws StoreException, FileNotFoundException {\n     rwLock.writeLock().lock();\n+    checkDataIntegrity(indexFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f35a6065b0c6f477ab794cb23164d90f53207d7"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3MzQxNw==", "bodyText": "Sure,  I use serEntries to check data integrity in latest commit. For non-heap buffer, I don't find a good way to avoid bytes transfer (as you can see I still transfer bytes to a heap bytes array for crc calculation). Let me know if you have better idea, thanks.", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516873417", "createdAt": "2020-11-03T18:29:47Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -823,8 +824,9 @@ IndexValue getIndexValueOfLastPut() throws StoreException {\n    * Maps the segment of index either as a memory map or a in memory buffer depending on config.\n    * @throws StoreException if there are problems with the index\n    */\n-  private void map() throws StoreException {\n+  private void map() throws StoreException, FileNotFoundException {\n     rwLock.writeLock().lock();\n+    checkDataIntegrity(indexFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNjE0Mg=="}, "originalCommit": {"oid": "1f35a6065b0c6f477ab794cb23164d90f53207d7"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTUyMjgwOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxMzowNVrOHs86EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo1NjowMVrOHs-VHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NzI5Ng==", "bodyText": "actually you don't have to copy bytebuffer to an byte array, Crc32 has a method to update CRC with ByteBuffer directly and it doesn't matter if it's heap bytebuffer or direct bytebuffer.", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516897296", "createdAt": "2020-11-03T19:13:05Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -1010,11 +1009,37 @@ private void readFromFile(File fileToRead, Journal journal) throws StoreExceptio\n     }\n   }\n \n+  /**\n+   * Check data integrity of index file (represented by byte buffer). This methods computes crc of byte buffer and\n+   * compares it with crc value at the end of file.\n+   * @throws StoreException\n+   */\n+  private void checkDataIntegrity() throws StoreException {\n+    byte[] byteArray;\n+    if (serEntries.hasArray()) {\n+      // this is for heap buffer only\n+      byteArray = serEntries.array();\n+    } else {\n+      // this is for non-heap (direct) buffer\n+      serEntries.position(0);\n+      byteArray = new byte[serEntries.capacity()];\n+      serEntries.get(byteArray, 0, serEntries.capacity());\n+    }\n+    Crc32 crc = new Crc32();\n+    crc.update(byteArray, 0, byteArray.length - CRC_FIELD_LENGTH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee433e43798bbefc1881e20cc177b70e3fbe06e3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMTE3Ng==", "bodyText": "True, there is a method to update CRC with ByteBuffer. However, we should exclude the last 8 bytes in buffer to calculate CRC, right?  How can we do that with that method?", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516901176", "createdAt": "2020-11-03T19:20:26Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -1010,11 +1009,37 @@ private void readFromFile(File fileToRead, Journal journal) throws StoreExceptio\n     }\n   }\n \n+  /**\n+   * Check data integrity of index file (represented by byte buffer). This methods computes crc of byte buffer and\n+   * compares it with crc value at the end of file.\n+   * @throws StoreException\n+   */\n+  private void checkDataIntegrity() throws StoreException {\n+    byte[] byteArray;\n+    if (serEntries.hasArray()) {\n+      // this is for heap buffer only\n+      byteArray = serEntries.array();\n+    } else {\n+      // this is for non-heap (direct) buffer\n+      serEntries.position(0);\n+      byteArray = new byte[serEntries.capacity()];\n+      serEntries.get(byteArray, 0, serEntries.capacity());\n+    }\n+    Crc32 crc = new Crc32();\n+    crc.update(byteArray, 0, byteArray.length - CRC_FIELD_LENGTH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NzI5Ng=="}, "originalCommit": {"oid": "ee433e43798bbefc1881e20cc177b70e3fbe06e3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNjIzOA==", "bodyText": "You can do this by setting the limit on the ByteBuffer before calling the CRC method.", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516906238", "createdAt": "2020-11-03T19:29:47Z", "author": {"login": "cgtz"}, "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -1010,11 +1009,37 @@ private void readFromFile(File fileToRead, Journal journal) throws StoreExceptio\n     }\n   }\n \n+  /**\n+   * Check data integrity of index file (represented by byte buffer). This methods computes crc of byte buffer and\n+   * compares it with crc value at the end of file.\n+   * @throws StoreException\n+   */\n+  private void checkDataIntegrity() throws StoreException {\n+    byte[] byteArray;\n+    if (serEntries.hasArray()) {\n+      // this is for heap buffer only\n+      byteArray = serEntries.array();\n+    } else {\n+      // this is for non-heap (direct) buffer\n+      serEntries.position(0);\n+      byteArray = new byte[serEntries.capacity()];\n+      serEntries.get(byteArray, 0, serEntries.capacity());\n+    }\n+    Crc32 crc = new Crc32();\n+    crc.update(byteArray, 0, byteArray.length - CRC_FIELD_LENGTH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NzI5Ng=="}, "originalCommit": {"oid": "ee433e43798bbefc1881e20cc177b70e3fbe06e3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkyMDYwNw==", "bodyText": "Thank you @justinlin-linkedin and @cgtz , the code should be more concise now.", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516920607", "createdAt": "2020-11-03T19:56:01Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -1010,11 +1009,37 @@ private void readFromFile(File fileToRead, Journal journal) throws StoreExceptio\n     }\n   }\n \n+  /**\n+   * Check data integrity of index file (represented by byte buffer). This methods computes crc of byte buffer and\n+   * compares it with crc value at the end of file.\n+   * @throws StoreException\n+   */\n+  private void checkDataIntegrity() throws StoreException {\n+    byte[] byteArray;\n+    if (serEntries.hasArray()) {\n+      // this is for heap buffer only\n+      byteArray = serEntries.array();\n+    } else {\n+      // this is for non-heap (direct) buffer\n+      serEntries.position(0);\n+      byteArray = new byte[serEntries.capacity()];\n+      serEntries.get(byteArray, 0, serEntries.capacity());\n+    }\n+    Crc32 crc = new Crc32();\n+    crc.update(byteArray, 0, byteArray.length - CRC_FIELD_LENGTH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NzI5Ng=="}, "originalCommit": {"oid": "ee433e43798bbefc1881e20cc177b70e3fbe06e3"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1107, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}