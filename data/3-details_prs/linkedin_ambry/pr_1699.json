{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNzE2MTg3", "number": 1699, "title": "[Throttle] Host Level Throttling ", "bodyText": "This PR implements a host level throttling mechanism. The throttling rule is based on previous per REST method quota and newly introduced hardware resource usage(CPU/Memory).\nThe main changes are:\nRename QuotaManager to HostLevelThrottler and move it to package commons.\nIntroduce HardwareUsageMeter where CPU/Memory usages are pulled.\nThis PR sill needs to add unit test.", "createdAt": "2020-11-19T06:43:28Z", "url": "https://github.com/linkedin/ambry/pull/1699", "merged": true, "mergeCommit": {"oid": "31649dbab95aba49153e836a4085465bf9e31e5b"}, "closed": true, "closedAt": "2020-12-18T18:19:17Z", "author": {"login": "zzmao"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfcfyagFqTUzNjg2MjczOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdncHaNgFqTU1NTcwMjMzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODYyNzM5", "url": "https://github.com/linkedin/ambry/pull/1699#pullrequestreview-536862739", "createdAt": "2020-11-23T21:34:04Z", "commit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTozNDowNFrOH4gQNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjowMDoyMlrOH4hC4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxMDc0Mw==", "bodyText": "nit: maybe using new JSONObject().put(\"PUT\", -1).put(...).toString() will be cleaner than writing out the raw string.", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r529010743", "createdAt": "2020-11-23T21:34:04Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.config;\n+\n+/**\n+ * Config for Host Level Throttling.\n+ */\n+public class HostThrottleConfig {\n+  private static final String PREFIX = \"host.throttle.\";\n+  public static final String REST_REQUEST_QUOTA_STRING = PREFIX + \"rest.request.quota\";\n+  public static final String HARDWARE_THRESHOLDS = PREFIX + \"hardware.thresholds\";\n+  public static final String CPU_MAX_ALLOWED_DELAY_IN_MS = PREFIX + \"cpu.max.allowed.delay.in.ms\";\n+  public static final String MEMORY_MAX_ALLOWED_DELAY_IN_MS = PREFIX + \"memory.max.allowed.delay.in.ms\";\n+\n+  private static final String DEFAULT_REST_REQUEST_QUOTA_STRING =\n+      \"{\\\"PUT\\\": \\\"-1\\\",\\\"GET\\\": \\\"-1\\\",\\\"POST\\\": \\\"-1\\\",\\\"HEAD\\\": \\\"-1\\\",\\\"OPTIONS\\\": \\\"-1\\\",\\\"UNKNOWN\\\": \\\"-1\\\",\\\"DELETE\\\": \\\"-1\\\"}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxMjI5Ng==", "bodyText": "is there a constant somewhere for this pool name?", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r529012296", "createdAt": "2020-11-23T21:37:10Z", "author": {"login": "cgtz"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuMaxAllowedDelayInMs, int memoryMaxAllowedDelayInMs) {\n+    this.cpuMaxAllowedDelayInMs = cpuMaxAllowedDelayInMs;\n+    this.memoryMaxAllowedDelayInMs = memoryMaxAllowedDelayInMs;\n+\n+    List<BufferPoolMXBean> pools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);\n+    for (BufferPoolMXBean mxBean : pools) {\n+      if (mxBean.getName().equals(\"direct\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyMzcxNQ==", "bodyText": "Maybe memoryRecordTime can be atomic and getAndUpdate can be used in a way such that only one thread will update this value per cycle.\nAlso, without using volatile, memoryPercentage is eventually consistent. Maybe that is okay for this use case though.", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r529023715", "createdAt": "2020-11-23T22:00:22Z", "author": {"login": "cgtz"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuMaxAllowedDelayInMs, int memoryMaxAllowedDelayInMs) {\n+    this.cpuMaxAllowedDelayInMs = cpuMaxAllowedDelayInMs;\n+    this.memoryMaxAllowedDelayInMs = memoryMaxAllowedDelayInMs;\n+\n+    List<BufferPoolMXBean> pools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);\n+    for (BufferPoolMXBean mxBean : pools) {\n+      if (mxBean.getName().equals(\"direct\")) {\n+        directMemoryMxBean = mxBean;\n+        break;\n+      }\n+    }\n+    if (directMemoryMxBean == null) {\n+      logger.error(\"Couldn't get directMemoryMxBean\");\n+    }\n+\n+    osBean = ManagementFactory.getPlatformMXBean(OperatingSystemMXBean.class);\n+  }\n+\n+  int getCpuPercentage() {\n+    // In experiments, osBean.getSystemCpuLoad() takes 15-25 ms\n+    if (System.currentTimeMillis() <= cpuRecordTime + cpuMaxAllowedDelayInMs) {\n+      return cpuPercentage;\n+    }\n+    cpuPercentage = (int) (osBean.getSystemCpuLoad() * 100);\n+    cpuRecordTime = System.currentTimeMillis();\n+    logger.trace(\"CPU percentage: {}\", cpuPercentage);\n+    return cpuPercentage;\n+  }\n+\n+  int getMemoryPercentage() {\n+    // In experiments, Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory() takes 2-6ms\n+    // directMemoryMxBean.getMemoryUsed() takes 2-15ms\n+    if (System.currentTimeMillis() <= memoryRecordTime + memoryMaxAllowedDelayInMs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NTQwMTkx", "url": "https://github.com/linkedin/ambry/pull/1699#pullrequestreview-548540191", "createdAt": "2020-12-09T19:34:27Z", "commit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTozNDoyN1rOICl6AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTo0MzozM1rOICmRkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4OTEyMA==", "bodyText": "I guess it will be null even if you don't assign.", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539589120", "createdAt": "2020-12-09T19:34:27Z", "author": {"login": "ankagrawal"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5MTQzNg==", "bodyText": "do you mean hardwareThresholdMap.get(HardwareResource.CPU)?", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539591436", "createdAt": "2020-12-09T19:37:57Z", "author": {"login": "ankagrawal"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import com.github.ambry.config.HostThrottleConfig;\n+import com.github.ambry.rest.RestMethod;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.utils.RejectThrottler;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to decide if a request should be throttled.\n+ */\n+public class HostLevelThrottler {\n+  private static final Logger logger = LoggerFactory.getLogger(HostLevelThrottler.class);\n+  private final Map<RestMethod, RejectThrottler> quotaMap;\n+  private final Map<HardwareResource, Criteria> hardwareThresholdMap;\n+  private final HardwareUsageMeter hardwareUsageMeter;\n+\n+  public HostLevelThrottler(HostThrottleConfig hostThrottleConfig) {\n+    this.hardwareUsageMeter =\n+        new HardwareUsageMeter(hostThrottleConfig.cpuMaxAllowedDelayInMs, hostThrottleConfig.memoryMaxAllowedDelayInMs);\n+    JSONObject quota = new JSONObject(hostThrottleConfig.restRequestQuota);\n+    JSONObject thresholds = new JSONObject(hostThrottleConfig.hardwareThresholds);\n+    quotaMap = new HashMap<>();\n+    hardwareThresholdMap = new HashMap<>();\n+    for (RestMethod restMethod : RestMethod.values()) {\n+      quotaMap.put(restMethod, new RejectThrottler(quota.optInt(restMethod.name(), -1)));\n+    }\n+    // All criteria should be satisfied.\n+    // Future work: if multiple throttling rules under \"OR\" condition needed, a list of thresholds/hardwareThresholdMap can be used.\n+    for (HardwareResource hardwareResource : HardwareResource.values()) {\n+      if (thresholds.has(hardwareResource.name())) {\n+        JSONObject jsonObject = thresholds.getJSONObject(hardwareResource.name());\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        try {\n+          Criteria criteria = objectMapper.readValue(jsonObject.toString(), Criteria.class);\n+          hardwareThresholdMap.put(hardwareResource, criteria);\n+        } catch (IOException e) {\n+          logger.error(\"Error while parsing {} threshold \", hardwareResource.name(), e);\n+          continue;\n+        }\n+      }\n+    }\n+    logger.info(\"Host throttling config: {} {}\", quotaMap, hardwareThresholdMap);\n+  }\n+\n+  public HostLevelThrottler(Map<RestMethod, RejectThrottler> quotaMap,\n+      Map<HardwareResource, Criteria> hardwareResourcesCriteriaMap, HardwareUsageMeter hardwareUsageMeter) {\n+    this.quotaMap = quotaMap;\n+    this.hardwareThresholdMap = new HashMap<>();\n+    this.hardwareUsageMeter = hardwareUsageMeter;\n+  }\n+\n+  /**\n+   * Return {@code true} if throttling is required. Return {@code false} if no throttler for this rest method or quota\n+   * is not reached.\n+   * @param restRequest provides the information.\n+   */\n+  public boolean shouldThrottle(RestRequest restRequest) {\n+    boolean shouldThrottle;\n+    // Check quotaMap\n+    RejectThrottler throttler = quotaMap.get(restRequest.getRestMethod());\n+    shouldThrottle = (throttler != null && throttler.shouldThrottle(1));\n+    // Check hardwareThresholdMap\n+    if (!shouldThrottle && hardwareThresholdMap.containsKey(HardwareResource.MEMORY)) {\n+      shouldThrottle = !hardwareThresholdMap.get(HardwareResource.MEMORY)\n+          .meetRequirement((long) hardwareUsageMeter.getMemoryPercentage());\n+      if (shouldThrottle) {\n+        logger.warn(\"Throttle because of Memory: {}%\", hardwareUsageMeter.getMemoryPercentage());\n+      }\n+    }\n+\n+    if (!shouldThrottle && hardwareThresholdMap.containsKey(HardwareResource.CPU)) {\n+      shouldThrottle = !hardwareThresholdMap.get(HardwareResource.MEMORY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NTE1NA==", "bodyText": "A cleaner way to implement both the blocks could be iterating for all HardwareResources. This will also help to add new hardware resources without code change here.\nfor(HardwareResource hardwareResource : HardwareResource.values()) {\nif (!shouldThrottle && hardwareThresholdMap.containsKey(hardwareResource)) {\nshouldThrottle = !hardwareThresholdMap.get(HardwareResource.MEMORY)\n.meetRequirement((long) hardwareUsageMeter.getMemoryPercentage());  // TODO (NOTE: get the specific resource requirement from a map)\nif (shouldThrottle) {\nlogger.warn(\"Throttle because of Memory: {}%\", hardwareUsageMeter.getMemoryPercentage());\n}\n}", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539595154", "createdAt": "2020-12-09T19:43:33Z", "author": {"login": "ankagrawal"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import com.github.ambry.config.HostThrottleConfig;\n+import com.github.ambry.rest.RestMethod;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.utils.RejectThrottler;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to decide if a request should be throttled.\n+ */\n+public class HostLevelThrottler {\n+  private static final Logger logger = LoggerFactory.getLogger(HostLevelThrottler.class);\n+  private final Map<RestMethod, RejectThrottler> quotaMap;\n+  private final Map<HardwareResource, Criteria> hardwareThresholdMap;\n+  private final HardwareUsageMeter hardwareUsageMeter;\n+\n+  public HostLevelThrottler(HostThrottleConfig hostThrottleConfig) {\n+    this.hardwareUsageMeter =\n+        new HardwareUsageMeter(hostThrottleConfig.cpuMaxAllowedDelayInMs, hostThrottleConfig.memoryMaxAllowedDelayInMs);\n+    JSONObject quota = new JSONObject(hostThrottleConfig.restRequestQuota);\n+    JSONObject thresholds = new JSONObject(hostThrottleConfig.hardwareThresholds);\n+    quotaMap = new HashMap<>();\n+    hardwareThresholdMap = new HashMap<>();\n+    for (RestMethod restMethod : RestMethod.values()) {\n+      quotaMap.put(restMethod, new RejectThrottler(quota.optInt(restMethod.name(), -1)));\n+    }\n+    // All criteria should be satisfied.\n+    // Future work: if multiple throttling rules under \"OR\" condition needed, a list of thresholds/hardwareThresholdMap can be used.\n+    for (HardwareResource hardwareResource : HardwareResource.values()) {\n+      if (thresholds.has(hardwareResource.name())) {\n+        JSONObject jsonObject = thresholds.getJSONObject(hardwareResource.name());\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        try {\n+          Criteria criteria = objectMapper.readValue(jsonObject.toString(), Criteria.class);\n+          hardwareThresholdMap.put(hardwareResource, criteria);\n+        } catch (IOException e) {\n+          logger.error(\"Error while parsing {} threshold \", hardwareResource.name(), e);\n+          continue;\n+        }\n+      }\n+    }\n+    logger.info(\"Host throttling config: {} {}\", quotaMap, hardwareThresholdMap);\n+  }\n+\n+  public HostLevelThrottler(Map<RestMethod, RejectThrottler> quotaMap,\n+      Map<HardwareResource, Criteria> hardwareResourcesCriteriaMap, HardwareUsageMeter hardwareUsageMeter) {\n+    this.quotaMap = quotaMap;\n+    this.hardwareThresholdMap = new HashMap<>();\n+    this.hardwareUsageMeter = hardwareUsageMeter;\n+  }\n+\n+  /**\n+   * Return {@code true} if throttling is required. Return {@code false} if no throttler for this rest method or quota\n+   * is not reached.\n+   * @param restRequest provides the information.\n+   */\n+  public boolean shouldThrottle(RestRequest restRequest) {\n+    boolean shouldThrottle;\n+    // Check quotaMap\n+    RejectThrottler throttler = quotaMap.get(restRequest.getRestMethod());\n+    shouldThrottle = (throttler != null && throttler.shouldThrottle(1));\n+    // Check hardwareThresholdMap\n+    if (!shouldThrottle && hardwareThresholdMap.containsKey(HardwareResource.MEMORY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzU0Mzg0", "url": "https://github.com/linkedin/ambry/pull/1699#pullrequestreview-548754384", "createdAt": "2020-12-10T01:42:49Z", "commit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTo0Mjo0OVrOICxhEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjowNjowMVrOICyFBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3OTM0NQ==", "bodyText": "Nit: 2020", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539779345", "createdAt": "2020-12-10T01:42:49Z", "author": {"login": "lightningrob"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MzIyMQ==", "bodyText": "directMemoryMxBean = pools.stream().filter(bean -> bean.getName().equals(\"direct\")).findFirst()...\ndirectMemoryMxBean could also be Optional", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539783221", "createdAt": "2020-12-10T01:53:31Z", "author": {"login": "lightningrob"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuMaxAllowedDelayInMs, int memoryMaxAllowedDelayInMs) {\n+    this.cpuMaxAllowedDelayInMs = cpuMaxAllowedDelayInMs;\n+    this.memoryMaxAllowedDelayInMs = memoryMaxAllowedDelayInMs;\n+\n+    List<BufferPoolMXBean> pools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);\n+    for (BufferPoolMXBean mxBean : pools) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4NDY5NQ==", "bodyText": "Might be clearer to call it cpu/memorySamplingPeriodMs", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539784695", "createdAt": "2020-12-10T01:57:14Z", "author": {"login": "lightningrob"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuMaxAllowedDelayInMs, int memoryMaxAllowedDelayInMs) {\n+    this.cpuMaxAllowedDelayInMs = cpuMaxAllowedDelayInMs;\n+    this.memoryMaxAllowedDelayInMs = memoryMaxAllowedDelayInMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4NzY0OQ==", "bodyText": "Following Casey's suggestion, the class can have generic method geConsumptionPercentage(HardwareResource resource) that throttler can call.", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539787649", "createdAt": "2020-12-10T02:03:39Z", "author": {"login": "lightningrob"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuMaxAllowedDelayInMs, int memoryMaxAllowedDelayInMs) {\n+    this.cpuMaxAllowedDelayInMs = cpuMaxAllowedDelayInMs;\n+    this.memoryMaxAllowedDelayInMs = memoryMaxAllowedDelayInMs;\n+\n+    List<BufferPoolMXBean> pools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);\n+    for (BufferPoolMXBean mxBean : pools) {\n+      if (mxBean.getName().equals(\"direct\")) {\n+        directMemoryMxBean = mxBean;\n+        break;\n+      }\n+    }\n+    if (directMemoryMxBean == null) {\n+      logger.error(\"Couldn't get directMemoryMxBean\");\n+    }\n+\n+    osBean = ManagementFactory.getPlatformMXBean(OperatingSystemMXBean.class);\n+  }\n+\n+  int getCpuPercentage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4Nzg1OA==", "bodyText": "+1", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539787858", "createdAt": "2020-12-10T02:04:14Z", "author": {"login": "lightningrob"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import com.github.ambry.config.HostThrottleConfig;\n+import com.github.ambry.rest.RestMethod;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.utils.RejectThrottler;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to decide if a request should be throttled.\n+ */\n+public class HostLevelThrottler {\n+  private static final Logger logger = LoggerFactory.getLogger(HostLevelThrottler.class);\n+  private final Map<RestMethod, RejectThrottler> quotaMap;\n+  private final Map<HardwareResource, Criteria> hardwareThresholdMap;\n+  private final HardwareUsageMeter hardwareUsageMeter;\n+\n+  public HostLevelThrottler(HostThrottleConfig hostThrottleConfig) {\n+    this.hardwareUsageMeter =\n+        new HardwareUsageMeter(hostThrottleConfig.cpuMaxAllowedDelayInMs, hostThrottleConfig.memoryMaxAllowedDelayInMs);\n+    JSONObject quota = new JSONObject(hostThrottleConfig.restRequestQuota);\n+    JSONObject thresholds = new JSONObject(hostThrottleConfig.hardwareThresholds);\n+    quotaMap = new HashMap<>();\n+    hardwareThresholdMap = new HashMap<>();\n+    for (RestMethod restMethod : RestMethod.values()) {\n+      quotaMap.put(restMethod, new RejectThrottler(quota.optInt(restMethod.name(), -1)));\n+    }\n+    // All criteria should be satisfied.\n+    // Future work: if multiple throttling rules under \"OR\" condition needed, a list of thresholds/hardwareThresholdMap can be used.\n+    for (HardwareResource hardwareResource : HardwareResource.values()) {\n+      if (thresholds.has(hardwareResource.name())) {\n+        JSONObject jsonObject = thresholds.getJSONObject(hardwareResource.name());\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        try {\n+          Criteria criteria = objectMapper.readValue(jsonObject.toString(), Criteria.class);\n+          hardwareThresholdMap.put(hardwareResource, criteria);\n+        } catch (IOException e) {\n+          logger.error(\"Error while parsing {} threshold \", hardwareResource.name(), e);\n+          continue;\n+        }\n+      }\n+    }\n+    logger.info(\"Host throttling config: {} {}\", quotaMap, hardwareThresholdMap);\n+  }\n+\n+  public HostLevelThrottler(Map<RestMethod, RejectThrottler> quotaMap,\n+      Map<HardwareResource, Criteria> hardwareResourcesCriteriaMap, HardwareUsageMeter hardwareUsageMeter) {\n+    this.quotaMap = quotaMap;\n+    this.hardwareThresholdMap = new HashMap<>();\n+    this.hardwareUsageMeter = hardwareUsageMeter;\n+  }\n+\n+  /**\n+   * Return {@code true} if throttling is required. Return {@code false} if no throttler for this rest method or quota\n+   * is not reached.\n+   * @param restRequest provides the information.\n+   */\n+  public boolean shouldThrottle(RestRequest restRequest) {\n+    boolean shouldThrottle;\n+    // Check quotaMap\n+    RejectThrottler throttler = quotaMap.get(restRequest.getRestMethod());\n+    shouldThrottle = (throttler != null && throttler.shouldThrottle(1));\n+    // Check hardwareThresholdMap\n+    if (!shouldThrottle && hardwareThresholdMap.containsKey(HardwareResource.MEMORY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NTE1NA=="}, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4ODQzNA==", "bodyText": "Separate lines with javadoc.", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539788434", "createdAt": "2020-12-10T02:05:38Z", "author": {"login": "lightningrob"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+/**\n+ * Hardware Resource that ambry needs to monitor for throttling\n+ */\n+public enum HardwareResource {\n+  CPU, MEMORY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4ODU1MA==", "bodyText": "Nit: capitalize Ambry.", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539788550", "createdAt": "2020-12-10T02:06:01Z", "author": {"login": "lightningrob"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+/**\n+ * Hardware Resource that ambry needs to monitor for throttling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98e04843f49db9ec3d79fd120a5cf06faa3999f1", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/98e04843f49db9ec3d79fd120a5cf06faa3999f1", "committedDate": "2020-12-11T23:07:08Z", "message": "address comments"}, "afterCommit": {"oid": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/0c951d6f7db5707483d523fe8001262c88c4e6d4", "committedDate": "2020-12-12T22:49:52Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/0c951d6f7db5707483d523fe8001262c88c4e6d4", "committedDate": "2020-12-12T22:49:52Z", "message": "address comments"}, "afterCommit": {"oid": "b959516fe1d4b50343a5f1689305c60e61684232", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/b959516fe1d4b50343a5f1689305c60e61684232", "committedDate": "2020-12-14T20:28:26Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6be3eabdc5af652978a30cc4721206f973889d4c", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/6be3eabdc5af652978a30cc4721206f973889d4c", "committedDate": "2020-12-14T21:17:33Z", "message": "Add test"}, "afterCommit": {"oid": "cf39b4c218913efb3d7b8ff91d6eb96778acd79b", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/cf39b4c218913efb3d7b8ff91d6eb96778acd79b", "committedDate": "2020-12-15T17:39:31Z", "message": "Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1090c8ee24df9c7c9670efce53841eb330711202", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/1090c8ee24df9c7c9670efce53841eb330711202", "committedDate": "2020-12-16T00:10:23Z", "message": "Host Level Throttling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf39b4c218913efb3d7b8ff91d6eb96778acd79b", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/cf39b4c218913efb3d7b8ff91d6eb96778acd79b", "committedDate": "2020-12-15T17:39:31Z", "message": "Add test"}, "afterCommit": {"oid": "1090c8ee24df9c7c9670efce53841eb330711202", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/1090c8ee24df9c7c9670efce53841eb330711202", "committedDate": "2020-12-16T00:10:23Z", "message": "Host Level Throttling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MjQ0NjUw", "url": "https://github.com/linkedin/ambry/pull/1699#pullrequestreview-554244650", "createdAt": "2020-12-17T02:57:25Z", "commit": {"oid": "1090c8ee24df9c7c9670efce53841eb330711202"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0Nzk4OTk4", "url": "https://github.com/linkedin/ambry/pull/1699#pullrequestreview-554798998", "createdAt": "2020-12-17T16:57:12Z", "commit": {"oid": "1090c8ee24df9c7c9670efce53841eb330711202"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MjUwMjA3", "url": "https://github.com/linkedin/ambry/pull/1699#pullrequestreview-554250207", "createdAt": "2020-12-17T03:15:25Z", "commit": {"oid": "1090c8ee24df9c7c9670efce53841eb330711202"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMzoxNToyNVrOIHixNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoxMjoxMlrOIICY8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4MDU5OA==", "bodyText": "why is this inner json object converted to a string?\ni.e. {\"MEMORY\": \"{\\\"threshold\\\": 101}\"} instead of {\"MEMORY\": {\"threshold\": 101}}", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r544780598", "createdAt": "2020-12-17T03:15:25Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.config;\n+\n+import org.json.JSONObject;\n+\n+\n+/**\n+ * Config for Host Level Throttling.\n+ */\n+public class HostThrottleConfig {\n+  private static final String PREFIX = \"host.throttle.\";\n+  public static final String REST_REQUEST_QUOTA_STRING = PREFIX + \"rest.request.quota\";\n+  public static final String HARDWARE_THRESHOLDS = PREFIX + \"hardware.thresholds\";\n+  public static final String CPU_SAMPLING_PERIOD_MS = PREFIX + \"cpu.sampling.period.ms\";\n+  public static final String MEMORY_SAMPLING_PERIOD_MS = PREFIX + \"memory.sampling.period.ms\";\n+\n+  private static final String DEFAULT_REST_REQUEST_QUOTA_STRING = new JSONObject().put(\"PUT\", -1)\n+      .put(\"PUT\", -1)\n+      .put(\"GET\", -1)\n+      .put(\"POST\", -1)\n+      .put(\"HEAD\", -1)\n+      .put(\"OPTIONS\", -1)\n+      .put(\"DELETE\", -1)\n+      .put(\"UNKNOWN\", -1)\n+      .toString();\n+  /**\n+   * A better looking sample:\n+   *   {\n+   *   \"MEMORY\": {\n+   *     \"threshold\": 90,\n+   *     \"boundType\": \"UpperBound\"\n+   *   },\n+   *   \"CPU\": {\n+   *     \"threshold\": 95,\n+   *     \"boundType\": \"UpperBound\"\n+   *   }\n+   * }\n+   */\n+  private static final String DEFAULT_HARDWARE_THRESHOLDS_STRING =\n+      new JSONObject().put(\"MEMORY\", new JSONObject().put(\"threshold\", 101).put(\"boundType\", \"UpperBound\").toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1090c8ee24df9c7c9670efce53841eb330711202"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODY3NQ==", "bodyText": "Just a clarifying question: is maxMemory the sum of max heap size and max direct memory size?", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r545298675", "createdAt": "2020-12-17T18:12:12Z", "author": {"login": "cgtz"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private AtomicLong cpuLastSampleTime = new AtomicLong(0);\n+  private final int cpuSamplingPeriodMs;\n+  private int cpuPercentage;\n+  private AtomicLong memoryLastSampleTime = new AtomicLong(0);\n+  private final int memorySamplingPeriodMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuSamplingPeriodMs, int memorySamplingPeriodMs) {\n+    this.cpuSamplingPeriodMs = cpuSamplingPeriodMs;\n+    this.memorySamplingPeriodMs = memorySamplingPeriodMs;\n+\n+    List<BufferPoolMXBean> pools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);\n+    directMemoryMxBean = pools.stream().filter(bean -> bean.getName().equals(\"direct\")).findFirst().orElse(null);\n+    if (directMemoryMxBean == null) {\n+      logger.error(\"Couldn't get directMemoryMxBean\");\n+    }\n+    osBean = ManagementFactory.getPlatformMXBean(OperatingSystemMXBean.class);\n+  }\n+\n+  private int getCpuPercentage() {\n+    // In experiments, osBean.getSystemCpuLoad() takes 15-25 ms\n+    if (System.currentTimeMillis() <= cpuLastSampleTime.get() + cpuSamplingPeriodMs) {\n+      return cpuPercentage;\n+    }\n+    cpuPercentage = (int) (osBean.getSystemCpuLoad() * 100);\n+    cpuLastSampleTime.set(System.currentTimeMillis());\n+    logger.trace(\"CPU percentage: {}\", cpuPercentage);\n+    return cpuPercentage;\n+  }\n+\n+  private int getMemoryPercentage() {\n+    // In experiments, Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory() takes 2-6ms\n+    // directMemoryMxBean.getMemoryUsed() takes 2-15ms\n+    if (System.currentTimeMillis() <= memoryLastSampleTime.get() + memorySamplingPeriodMs) {\n+      return memoryPercentage;\n+    }\n+    long usedHeapMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+    memoryPercentage = (int) ((usedHeapMemory + directMemoryMxBean.getMemoryUsed()) * 100 / maxMemory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1090c8ee24df9c7c9670efce53841eb330711202"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66e7c94c50bd953d9a52c7d2c646294f540662ff", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/66e7c94c50bd953d9a52c7d2c646294f540662ff", "committedDate": "2020-12-17T20:12:01Z", "message": "Cgetz comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9aa2341d6995c6b4f9cc3f98ee9330f009da904", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/a9aa2341d6995c6b4f9cc3f98ee9330f009da904", "committedDate": "2020-12-17T23:04:11Z", "message": "add direct memory detect"}, "afterCommit": {"oid": "f38e1350f89e1a09ac0046282a9ed03f8867bacb", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/f38e1350f89e1a09ac0046282a9ed03f8867bacb", "committedDate": "2020-12-18T05:28:25Z", "message": "add direct memory detect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2a30c6d4988d4e836c5ae352c91fe0374ab9fb5", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/e2a30c6d4988d4e836c5ae352c91fe0374ab9fb5", "committedDate": "2020-12-18T05:59:47Z", "message": "direct memory"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f38e1350f89e1a09ac0046282a9ed03f8867bacb", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/f38e1350f89e1a09ac0046282a9ed03f8867bacb", "committedDate": "2020-12-18T05:28:25Z", "message": "add direct memory detect"}, "afterCommit": {"oid": "e2a30c6d4988d4e836c5ae352c91fe0374ab9fb5", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/e2a30c6d4988d4e836c5ae352c91fe0374ab9fb5", "committedDate": "2020-12-18T05:59:47Z", "message": "direct memory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NzAyMzM1", "url": "https://github.com/linkedin/ambry/pull/1699#pullrequestreview-555702335", "createdAt": "2020-12-18T18:05:43Z", "commit": {"oid": "e2a30c6d4988d4e836c5ae352c91fe0374ab9fb5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1013, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}