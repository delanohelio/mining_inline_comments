{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODkxNzk0", "number": 1505, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOToxODowMFrOD59bkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjowMzo0MlrOD7F6cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTAxOTA2OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOToxODowMFrOGRhyrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoyOTowN1rOGRkM9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzMjYyMQ==", "bodyText": "closure", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421032621", "createdAt": "2020-05-06T19:18:00Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -110,16 +114,37 @@\n   // was successfully sent\n   private ResponseStatus errorResponseStatus = null;\n \n+  /**\n+   * A {@link ChannelFutureListener} that closes the {@link Channel} which is\n+   * associated with the specified {@link ChannelFuture} after certain delay which is configured through {@link NettyConfig}.\n+   */\n+  public final ChannelFutureListener DELAYED_CLOSE = new ChannelFutureListener() {\n+    @Override\n+    public void operationComplete(ChannelFuture future) {\n+      logger.trace(\"scheduling closeure of channel {}\", future.channel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3MjExNg==", "bodyText": "Done.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421072116", "createdAt": "2020-05-06T20:29:07Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -110,16 +114,37 @@\n   // was successfully sent\n   private ResponseStatus errorResponseStatus = null;\n \n+  /**\n+   * A {@link ChannelFutureListener} that closes the {@link Channel} which is\n+   * associated with the specified {@link ChannelFuture} after certain delay which is configured through {@link NettyConfig}.\n+   */\n+  public final ChannelFutureListener DELAYED_CLOSE = new ChannelFutureListener() {\n+    @Override\n+    public void operationComplete(ChannelFuture future) {\n+      logger.trace(\"scheduling closeure of channel {}\", future.channel());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzMjYyMQ=="}, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTAzOTIxOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOToyMzozOFrOGRh_Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDozMDowOFrOGRkPJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzNTg2Mw==", "bodyText": "Need to format this class for line wrapping.  In LI Intellij, do Code/Reformat Code or key shortcut Cmd-Alt-L", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421035863", "createdAt": "2020-05-06T19:23:38Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -681,10 +706,16 @@ private HttpResponseStatus getHttpResponseStatus(ResponseStatus responseStatus)\n    * </p>\n    * May also close the channel if the class internally is forcing a close (i.e. if {@link #close()} is called.\n    * @param closeNetworkChannel network channel is closed if {@code true}.\n+   * @param shouldDelay network channel may be closed after certain delay if {@code true}.\n    */\n-  private void completeRequest(boolean closeNetworkChannel) {\n+  private void completeRequest(boolean closeNetworkChannel, boolean shouldDelay) {\n     if ((closeNetworkChannel || forceClose) && ctx.channel().isOpen()) {\n-      writeFuture.addListener(ChannelFutureListener.CLOSE);\n+      if (!shouldDelay || (request != null && !request.getRestMethod().equals(RestMethod.POST)) || (this.nettyConfig.nettyServerCloseDelayTimeoutMs == 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzNzU4Mw==", "bodyText": "also it's a bit hard to read the line, I suggest reversing this line and changing the OR's to AND's and removing NOT's (meaning we do want to delay the close).", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421037583", "createdAt": "2020-05-06T19:26:37Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -681,10 +706,16 @@ private HttpResponseStatus getHttpResponseStatus(ResponseStatus responseStatus)\n    * </p>\n    * May also close the channel if the class internally is forcing a close (i.e. if {@link #close()} is called.\n    * @param closeNetworkChannel network channel is closed if {@code true}.\n+   * @param shouldDelay network channel may be closed after certain delay if {@code true}.\n    */\n-  private void completeRequest(boolean closeNetworkChannel) {\n+  private void completeRequest(boolean closeNetworkChannel, boolean shouldDelay) {\n     if ((closeNetworkChannel || forceClose) && ctx.channel().isOpen()) {\n-      writeFuture.addListener(ChannelFutureListener.CLOSE);\n+      if (!shouldDelay || (request != null && !request.getRestMethod().equals(RestMethod.POST)) || (this.nettyConfig.nettyServerCloseDelayTimeoutMs == 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzNTg2Mw=="}, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3MjY3OA==", "bodyText": "Done. Thanks much for the formatting help.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421072678", "createdAt": "2020-05-06T20:30:08Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -681,10 +706,16 @@ private HttpResponseStatus getHttpResponseStatus(ResponseStatus responseStatus)\n    * </p>\n    * May also close the channel if the class internally is forcing a close (i.e. if {@link #close()} is called.\n    * @param closeNetworkChannel network channel is closed if {@code true}.\n+   * @param shouldDelay network channel may be closed after certain delay if {@code true}.\n    */\n-  private void completeRequest(boolean closeNetworkChannel) {\n+  private void completeRequest(boolean closeNetworkChannel, boolean shouldDelay) {\n     if ((closeNetworkChannel || forceClose) && ctx.channel().isOpen()) {\n-      writeFuture.addListener(ChannelFutureListener.CLOSE);\n+      if (!shouldDelay || (request != null && !request.getRestMethod().equals(RestMethod.POST)) || (this.nettyConfig.nettyServerCloseDelayTimeoutMs == 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzNTg2Mw=="}, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTA2ODE5OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTozMTo0M1rOGRiRLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDozMDoyMVrOGRkPiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MDQzMQ==", "bodyText": "Minor: please create VerifiableProperties once since it's being used multiple times.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421040431", "createdAt": "2020-05-06T19:31:43Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -658,7 +659,8 @@ public void channelInactiveTest() {\n     EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler);\n     NettyResponseChannel nettyResponseChannel =\n         new NettyResponseChannel(new MockChannelHandlerContext(channel), new NettyMetrics(new MetricRegistry()),\n-            new PerformanceConfig(new VerifiableProperties(new Properties())));\n+            new PerformanceConfig(new VerifiableProperties(new Properties())),\n+            new NettyConfig(new VerifiableProperties(new Properties())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3Mjc3Ng==", "bodyText": "Done.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421072776", "createdAt": "2020-05-06T20:30:21Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -658,7 +659,8 @@ public void channelInactiveTest() {\n     EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler);\n     NettyResponseChannel nettyResponseChannel =\n         new NettyResponseChannel(new MockChannelHandlerContext(channel), new NettyMetrics(new MetricRegistry()),\n-            new PerformanceConfig(new VerifiableProperties(new Properties())));\n+            new PerformanceConfig(new VerifiableProperties(new Properties())),\n+            new NettyConfig(new VerifiableProperties(new Properties())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MDQzMQ=="}, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTA3NjU4OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTozNDoxMVrOGRiWhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTowNzowM1rOGSDH_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MTc5Nw==", "bodyText": "Line formatting", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421041797", "createdAt": "2020-05-06T19:34:11Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1591,7 +1626,7 @@ private void setNullHeaders() throws RestServiceException {\n    */\n   private void setRequestTest() throws RestServiceException {\n     ResponseStatus status = ResponseStatus.Accepted;\n-    restResponseChannel = new NettyResponseChannel(ctx, new NettyMetrics(new MetricRegistry()), PERFORMANCE_CONFIG);\n+    restResponseChannel = new NettyResponseChannel(ctx, new NettyMetrics(new MetricRegistry()), PERFORMANCE_CONFIG, this.nettyConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3Mjg1NA==", "bodyText": "Done.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421072854", "createdAt": "2020-05-06T20:30:30Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1591,7 +1626,7 @@ private void setNullHeaders() throws RestServiceException {\n    */\n   private void setRequestTest() throws RestServiceException {\n     ResponseStatus status = ResponseStatus.Accepted;\n-    restResponseChannel = new NettyResponseChannel(ctx, new NettyMetrics(new MetricRegistry()), PERFORMANCE_CONFIG);\n+    restResponseChannel = new NettyResponseChannel(ctx, new NettyMetrics(new MetricRegistry()), PERFORMANCE_CONFIG, this.nettyConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MTc5Nw=="}, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU3ODc1MA==", "bodyText": "actually this line is within the 120 char limit. no change needed.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421578750", "createdAt": "2020-05-07T15:07:03Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1591,7 +1626,7 @@ private void setNullHeaders() throws RestServiceException {\n    */\n   private void setRequestTest() throws RestServiceException {\n     ResponseStatus status = ResponseStatus.Accepted;\n-    restResponseChannel = new NettyResponseChannel(ctx, new NettyMetrics(new MetricRegistry()), PERFORMANCE_CONFIG);\n+    restResponseChannel = new NettyResponseChannel(ctx, new NettyMetrics(new MetricRegistry()), PERFORMANCE_CONFIG, this.nettyConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MTc5Nw=="}, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTA4MTI5OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTozNToyNVrOGRiZQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNTo1ODoxNVrOGS4ubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MjQ5Nw==", "bodyText": "Can also wait 500ms and verify that it does get closed.  Also check the counters were incremented.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421042497", "createdAt": "2020-05-06T19:35:25Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,33 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, \"500\");\n+    NettyConfig nettyConfig  = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest = RestTestUtils.createFullRequest(HttpMethod.POST,\n+        TestingUri.OnResponseCompleteWithRestException.toString(), httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();\n+    assertEquals(\"Unexpected response status\", getExpectedHttpResponseStatus(REST_ERROR_CODE), response.status());\n+    //channel should not be closed right away.\n+    assertTrue(\"Channel closed on the server\", channel.isActive());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA4MDI0Ng==", "bodyText": "I actually tried waiting but it did not work. There is no dedicated threads running the netty channel handlers here.  Everything is getting executed in a single Junit test runner thread. The netty eventloop.scheduler() task never gets executed because netty does not have any real threads to schedule this task. Even if i add a Thread.sleep() here, after the sleep is over the the test runner thread simply exits. I could not find any other way of verifying this. Let me know if there is any way to test this.\nI added check for the metrics. This is fine.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421080246", "createdAt": "2020-05-06T20:44:28Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,33 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, \"500\");\n+    NettyConfig nettyConfig  = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest = RestTestUtils.createFullRequest(HttpMethod.POST,\n+        TestingUri.OnResponseCompleteWithRestException.toString(), httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();\n+    assertEquals(\"Unexpected response status\", getExpectedHttpResponseStatus(REST_ERROR_CODE), response.status());\n+    //channel should not be closed right away.\n+    assertTrue(\"Channel closed on the server\", channel.isActive());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MjQ5Nw=="}, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1Nzk0Mw==", "bodyText": "I'm kind of surprised by this.  Looking at the code, I see EmbeddedChannel uses EmbeddedEventLoop which extends AbstractScheduledEventExecutor and I would have thought the runScheduledTasks() method would get the scheduled task and run it.  Did you try stepping through with the debugger to see where the task ends up?  I see that Yingyi @jsjtzyy has worked on this test class, he might have suggestions on how to trigger it.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421957943", "createdAt": "2020-05-08T06:08:52Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,33 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, \"500\");\n+    NettyConfig nettyConfig  = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest = RestTestUtils.createFullRequest(HttpMethod.POST,\n+        TestingUri.OnResponseCompleteWithRestException.toString(), httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();\n+    assertEquals(\"Unexpected response status\", getExpectedHttpResponseStatus(REST_ERROR_CODE), response.status());\n+    //channel should not be closed right away.\n+    assertTrue(\"Channel closed on the server\", channel.isActive());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MjQ5Nw=="}, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1Njk0Mg==", "bodyText": "Thanks so much @lightningrob for the pointers. Since EmbeddedChannel does not have its own thread pool the UT thread has to call the runPendingTask() api to fire the scheduled tasks on this channel. This is very different from the NioSocketChannel. I was not aware that the api has to be explicitly triggered. I have enhanced the UT to do all the validations now. Please take a look. Thanks.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r422456942", "createdAt": "2020-05-09T05:58:15Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,33 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, \"500\");\n+    NettyConfig nettyConfig  = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest = RestTestUtils.createFullRequest(HttpMethod.POST,\n+        TestingUri.OnResponseCompleteWithRestException.toString(), httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();\n+    assertEquals(\"Unexpected response status\", getExpectedHttpResponseStatus(REST_ERROR_CODE), response.status());\n+    //channel should not be closed right away.\n+    assertTrue(\"Channel closed on the server\", channel.isActive());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MjQ5Nw=="}, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDcwNDAxOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTo0OToxOVrOGSE_6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMzowMFrOGSI-4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwOTQ0OQ==", "bodyText": "I wonder if we need to only do this on post requests? It is probably less likely to experience this issue on non-POST requests since those don't usually have a body and closeNetworkChannel is rarely true, but I don't see an issue with doing the delayed close on all types of requests where closeNetworkChannel is true", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421609449", "createdAt": "2020-05-07T15:49:19Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -681,10 +706,17 @@ private HttpResponseStatus getHttpResponseStatus(ResponseStatus responseStatus)\n    * </p>\n    * May also close the channel if the class internally is forcing a close (i.e. if {@link #close()} is called.\n    * @param closeNetworkChannel network channel is closed if {@code true}.\n+   * @param shouldDelay network channel may be closed after certain delay if {@code true}.\n    */\n-  private void completeRequest(boolean closeNetworkChannel) {\n+  private void completeRequest(boolean closeNetworkChannel, boolean shouldDelay) {\n     if ((closeNetworkChannel || forceClose) && ctx.channel().isOpen()) {\n-      writeFuture.addListener(ChannelFutureListener.CLOSE);\n+      if (shouldDelay && (request != null && request.getRestMethod().equals(RestMethod.POST))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e732dca1afd644576825f18dd54e49b919d97615"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDA3Ng==", "bodyText": "Thanks @cgtz for the comment. Later I was thinking about doing this for all http method as well but since the ticket specifically talks about to solve it for POST method I made it like so. Please let me know if this fine or should i remove the request method check?", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421654076", "createdAt": "2020-05-07T16:58:17Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -681,10 +706,17 @@ private HttpResponseStatus getHttpResponseStatus(ResponseStatus responseStatus)\n    * </p>\n    * May also close the channel if the class internally is forcing a close (i.e. if {@link #close()} is called.\n    * @param closeNetworkChannel network channel is closed if {@code true}.\n+   * @param shouldDelay network channel may be closed after certain delay if {@code true}.\n    */\n-  private void completeRequest(boolean closeNetworkChannel) {\n+  private void completeRequest(boolean closeNetworkChannel, boolean shouldDelay) {\n     if ((closeNetworkChannel || forceClose) && ctx.channel().isOpen()) {\n-      writeFuture.addListener(ChannelFutureListener.CLOSE);\n+      if (shouldDelay && (request != null && request.getRestMethod().equals(RestMethod.POST))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwOTQ0OQ=="}, "originalCommit": {"oid": "e732dca1afd644576825f18dd54e49b919d97615"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NzUxMQ==", "bodyText": "Thanks @cgtz for the comment. Later I was thinking about doing this for all http method as well but since the ticket specifically talks about to solve it for POST method I made it like so. Please let me know if this fine or should i remove the request method check?", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421657511", "createdAt": "2020-05-07T17:03:47Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -681,10 +706,17 @@ private HttpResponseStatus getHttpResponseStatus(ResponseStatus responseStatus)\n    * </p>\n    * May also close the channel if the class internally is forcing a close (i.e. if {@link #close()} is called.\n    * @param closeNetworkChannel network channel is closed if {@code true}.\n+   * @param shouldDelay network channel may be closed after certain delay if {@code true}.\n    */\n-  private void completeRequest(boolean closeNetworkChannel) {\n+  private void completeRequest(boolean closeNetworkChannel, boolean shouldDelay) {\n     if ((closeNetworkChannel || forceClose) && ctx.channel().isOpen()) {\n-      writeFuture.addListener(ChannelFutureListener.CLOSE);\n+      if (shouldDelay && (request != null && request.getRestMethod().equals(RestMethod.POST))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwOTQ0OQ=="}, "originalCommit": {"oid": "e732dca1afd644576825f18dd54e49b919d97615"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MjEwMg==", "bodyText": "I guess it is fine to keep it as is, since this issue probably happens when there is more request data to send, which is only posts for now. We can revisit this if we support other operations that contain request bodies in the future.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421672102", "createdAt": "2020-05-07T17:28:44Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -681,10 +706,17 @@ private HttpResponseStatus getHttpResponseStatus(ResponseStatus responseStatus)\n    * </p>\n    * May also close the channel if the class internally is forcing a close (i.e. if {@link #close()} is called.\n    * @param closeNetworkChannel network channel is closed if {@code true}.\n+   * @param shouldDelay network channel may be closed after certain delay if {@code true}.\n    */\n-  private void completeRequest(boolean closeNetworkChannel) {\n+  private void completeRequest(boolean closeNetworkChannel, boolean shouldDelay) {\n     if ((closeNetworkChannel || forceClose) && ctx.channel().isOpen()) {\n-      writeFuture.addListener(ChannelFutureListener.CLOSE);\n+      if (shouldDelay && (request != null && request.getRestMethod().equals(RestMethod.POST))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwOTQ0OQ=="}, "originalCommit": {"oid": "e732dca1afd644576825f18dd54e49b919d97615"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NDcyMg==", "bodyText": "Thanks for the confirmation. So will keep it as it is for now.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421674722", "createdAt": "2020-05-07T17:33:00Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -681,10 +706,17 @@ private HttpResponseStatus getHttpResponseStatus(ResponseStatus responseStatus)\n    * </p>\n    * May also close the channel if the class internally is forcing a close (i.e. if {@link #close()} is called.\n    * @param closeNetworkChannel network channel is closed if {@code true}.\n+   * @param shouldDelay network channel may be closed after certain delay if {@code true}.\n    */\n-  private void completeRequest(boolean closeNetworkChannel) {\n+  private void completeRequest(boolean closeNetworkChannel, boolean shouldDelay) {\n     if ((closeNetworkChannel || forceClose) && ctx.channel().isOpen()) {\n-      writeFuture.addListener(ChannelFutureListener.CLOSE);\n+      if (shouldDelay && (request != null && request.getRestMethod().equals(RestMethod.POST))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwOTQ0OQ=="}, "originalCommit": {"oid": "e732dca1afd644576825f18dd54e49b919d97615"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjc4Njg2OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNToxMzoxM1rOGTMuLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxMjowMlrOGTljzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc4NDU1Nw==", "bodyText": "minor: I think this could be removed, we can directly give nettyConfig an initial value at line 1286.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r422784557", "createdAt": "2020-05-11T05:13:13Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1234,6 +1273,7 @@ public static TestingUri getTestingURI(String uri) {\n   static final byte[] CHUNK = TestUtils.getRandomBytes(1024);\n   static final String CHUNK_COUNT_HEADER_NAME = \"chunkCount\";\n   static PerformanceConfig PERFORMANCE_CONFIG = new PerformanceConfig(new VerifiableProperties(new Properties()));\n+  static NettyConfig NETTY_CONFIG = new NettyConfig(new VerifiableProperties(new Properties()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5MTUwMA==", "bodyText": "Done", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r423191500", "createdAt": "2020-05-11T17:12:02Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1234,6 +1273,7 @@ public static TestingUri getTestingURI(String uri) {\n   static final byte[] CHUNK = TestUtils.getRandomBytes(1024);\n   static final String CHUNK_COUNT_HEADER_NAME = \"chunkCount\";\n   static PerformanceConfig PERFORMANCE_CONFIG = new PerformanceConfig(new VerifiableProperties(new Properties()));\n+  static NettyConfig NETTY_CONFIG = new NettyConfig(new VerifiableProperties(new Properties()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc4NDU1Nw=="}, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjc5MzU3OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNToxNjo1OFrOGTMyAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxMjowOFrOGTlkCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc4NTUzOQ==", "bodyText": "Minor: Could you move this test to line 674 (ahead of helper methods)?", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r422785539", "createdAt": "2020-05-11T05:16:58Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,43 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5MTU2Mw==", "bodyText": "Done", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r423191563", "createdAt": "2020-05-11T17:12:08Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,43 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc4NTUzOQ=="}, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjgzMDUxOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTozNDozNlrOGTNGPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxMjoxNVrOGTlkUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5MDcxNw==", "bodyText": "nit: redundant cast, (HttpResponse) can be removed", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r422790717", "createdAt": "2020-05-11T05:34:36Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,43 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    long delayMs = 500;\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, String.valueOf(delayMs));\n+    NettyConfig nettyConfig = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest =\n+        RestTestUtils.createFullRequest(HttpMethod.POST, TestingUri.OnResponseCompleteWithRestException.toString(),\n+            httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5MTYzMg==", "bodyText": "Done", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r423191632", "createdAt": "2020-05-11T17:12:15Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,43 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    long delayMs = 500;\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, String.valueOf(delayMs));\n+    NettyConfig nettyConfig = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest =\n+        RestTestUtils.createFullRequest(HttpMethod.POST, TestingUri.OnResponseCompleteWithRestException.toString(),\n+            httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5MDcxNw=="}, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjg5NDU3OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjowMzo0MlrOGTNqYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxMzozM1rOGTlnSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5OTk3MQ==", "bodyText": "feel like channel.runPendingTasks(); can be called before Thread.sleep", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r422799971", "createdAt": "2020-05-11T06:03:42Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,43 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    long delayMs = 500;\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, String.valueOf(delayMs));\n+    NettyConfig nettyConfig = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest =\n+        RestTestUtils.createFullRequest(HttpMethod.POST, TestingUri.OnResponseCompleteWithRestException.toString(),\n+            httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();\n+    assertEquals(\"Unexpected response status\", getExpectedHttpResponseStatus(REST_ERROR_CODE), response.status());\n+    //channel should not be closed right away.\n+    assertTrue(\"Channel closed on the server\", channel.isActive());\n+    //wait for delayed time * 2 times (to rule out timing out on border) and then check again.\n+    Thread.sleep(delayMs * 2);\n+    channel.runPendingTasks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2MjY3Ng==", "bodyText": "Since the task is delayed, I would feel that it should be called after, otherwise the task wouldn't be ready to run.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r423162676", "createdAt": "2020-05-11T16:25:31Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,43 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    long delayMs = 500;\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, String.valueOf(delayMs));\n+    NettyConfig nettyConfig = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest =\n+        RestTestUtils.createFullRequest(HttpMethod.POST, TestingUri.OnResponseCompleteWithRestException.toString(),\n+            httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();\n+    assertEquals(\"Unexpected response status\", getExpectedHttpResponseStatus(REST_ERROR_CODE), response.status());\n+    //channel should not be closed right away.\n+    assertTrue(\"Channel closed on the server\", channel.isActive());\n+    //wait for delayed time * 2 times (to rule out timing out on border) and then check again.\n+    Thread.sleep(delayMs * 2);\n+    channel.runPendingTasks();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5OTk3MQ=="}, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2Nzc0Mg==", "bodyText": "make sense, feel free to ignore this comment.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r423167742", "createdAt": "2020-05-11T16:33:41Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,43 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    long delayMs = 500;\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, String.valueOf(delayMs));\n+    NettyConfig nettyConfig = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest =\n+        RestTestUtils.createFullRequest(HttpMethod.POST, TestingUri.OnResponseCompleteWithRestException.toString(),\n+            httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();\n+    assertEquals(\"Unexpected response status\", getExpectedHttpResponseStatus(REST_ERROR_CODE), response.status());\n+    //channel should not be closed right away.\n+    assertTrue(\"Channel closed on the server\", channel.isActive());\n+    //wait for delayed time * 2 times (to rule out timing out on border) and then check again.\n+    Thread.sleep(delayMs * 2);\n+    channel.runPendingTasks();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5OTk3MQ=="}, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5MjM5NA==", "bodyText": "No problem, Yeah we have to trigger the runPendingTasks() after sleeping for the delay time. Otherwise the task will not be fired.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r423192394", "createdAt": "2020-05-11T17:13:33Z", "author": {"login": "ssen-li"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,43 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    long delayMs = 500;\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, String.valueOf(delayMs));\n+    NettyConfig nettyConfig = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest =\n+        RestTestUtils.createFullRequest(HttpMethod.POST, TestingUri.OnResponseCompleteWithRestException.toString(),\n+            httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();\n+    assertEquals(\"Unexpected response status\", getExpectedHttpResponseStatus(REST_ERROR_CODE), response.status());\n+    //channel should not be closed right away.\n+    assertTrue(\"Channel closed on the server\", channel.isActive());\n+    //wait for delayed time * 2 times (to rule out timing out on border) and then check again.\n+    Thread.sleep(delayMs * 2);\n+    channel.runPendingTasks();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5OTk3MQ=="}, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1560, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}