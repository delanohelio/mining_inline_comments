{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODMxOTk2", "number": 1390, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo1NDozNVrODhPGzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzozNDoyOFrODhQtQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTc3MTAzOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/GetBlobOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo1NDozNVrOFr5CwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo1ODowOVrOFr5JUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NzY4MQ==", "bodyText": "should this call come before asyncWritableChannel.write in case write calls chunkAsyncWriteCallback before the buff is added to the map?", "url": "https://github.com/linkedin/ambry/pull/1390#discussion_r381567681", "createdAt": "2020-02-19T21:54:35Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/GetBlobOperation.java", "diffHunk": "@@ -442,9 +449,12 @@ private void maybeWriteToChannel() {\n       // if there are chunks available to be written out, do now.\n       if (firstChunk.isComplete() && readCalled) {\n         while (operationException.get() == null && chunkIndexToBuf.containsKey(indexOfNextChunkToWriteOut)) {\n-          ByteBuf byteBuf = chunkIndexToBuf.get(indexOfNextChunkToWriteOut);\n-          asyncWritableChannel.write(byteBuf.nioBuffer(), chunkAsyncWriteCallback);\n-          indexOfNextChunkToWriteOut++;\n+          ByteBuf byteBuf = chunkIndexToBuf.remove(indexOfNextChunkToWriteOut);\n+          if (byteBuf != null) {\n+            asyncWritableChannel.write(byteBuf.nioBuffer(), chunkAsyncWriteCallback);\n+            chunkIndexToBufWaitingForRelease.put(indexOfNextChunkToWriteOut, byteBuf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6358aa54bffc5ed37cd916d12a272869a13c426b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2OTM2MA==", "bodyText": "good catch.", "url": "https://github.com/linkedin/ambry/pull/1390#discussion_r381569360", "createdAt": "2020-02-19T21:58:09Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/main/java/com.github.ambry.router/GetBlobOperation.java", "diffHunk": "@@ -442,9 +449,12 @@ private void maybeWriteToChannel() {\n       // if there are chunks available to be written out, do now.\n       if (firstChunk.isComplete() && readCalled) {\n         while (operationException.get() == null && chunkIndexToBuf.containsKey(indexOfNextChunkToWriteOut)) {\n-          ByteBuf byteBuf = chunkIndexToBuf.get(indexOfNextChunkToWriteOut);\n-          asyncWritableChannel.write(byteBuf.nioBuffer(), chunkAsyncWriteCallback);\n-          indexOfNextChunkToWriteOut++;\n+          ByteBuf byteBuf = chunkIndexToBuf.remove(indexOfNextChunkToWriteOut);\n+          if (byteBuf != null) {\n+            asyncWritableChannel.write(byteBuf.nioBuffer(), chunkAsyncWriteCallback);\n+            chunkIndexToBufWaitingForRelease.put(indexOfNextChunkToWriteOut, byteBuf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NzY4MQ=="}, "originalCommit": {"oid": "6358aa54bffc5ed37cd916d12a272869a13c426b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTk4MDIyOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/CryptoJobHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzoxMDozNlrOFr7EeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzo0NzozNVrOFr70eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwMDg4OQ==", "bodyText": "Could you explain a little why we need wait for 1 sec here?", "url": "https://github.com/linkedin/ambry/pull/1390#discussion_r381600889", "createdAt": "2020-02-19T23:10:36Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/CryptoJobHandler.java", "diffHunk": "@@ -69,6 +70,11 @@ public void close() {\n           logger.error(\"Unknown type of job seen : \" + task.getClass());\n         }\n       }\n+      try {\n+        scheduler.awaitTermination(1000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1947e35d3cb5999b1dda2b258a0e0fcf2b3eb9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMzE3Ng==", "bodyText": "This is trying to fix the earlyCloseReadableChannel test method.\nIn that particular test, we would close the blobDataReadableChannel before we finish fetching data chunk from server and decrypting them. So there is a chance when the test method is finished, the decryption of some data chunks are still ongoing in the decryption thread. Since in the decrypt job, we still have a ByteBuf not released, we will run into ByteBuf leak error.\nSo here we wait for some time for all the decrypt jobs to finish and release all the ByteBufs they hold, and we won't have the leak error.", "url": "https://github.com/linkedin/ambry/pull/1390#discussion_r381613176", "createdAt": "2020-02-19T23:47:35Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/main/java/com.github.ambry.router/CryptoJobHandler.java", "diffHunk": "@@ -69,6 +70,11 @@ public void close() {\n           logger.error(\"Unknown type of job seen : \" + task.getClass());\n         }\n       }\n+      try {\n+        scheduler.awaitTermination(1000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwMDg4OQ=="}, "originalCommit": {"oid": "8b1947e35d3cb5999b1dda2b258a0e0fcf2b3eb9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjAzMzI5OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/test/java/com.github.ambry.router/GetBlobOperationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzozNDoyOFrOFr7kUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDoxMjo0NlrOFr8SCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwOTA0Mg==", "bodyText": "In which case, there might be a chunk left? I feel like chunks have been read in previous loop.", "url": "https://github.com/linkedin/ambry/pull/1390#discussion_r381609042", "createdAt": "2020-02-19T23:34:28Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/test/java/com.github.ambry.router/GetBlobOperationTest.java", "diffHunk": "@@ -1215,6 +1212,9 @@ public void run() {\n                   chunksLeftToRead--;\n                 }\n                 result.getBlobResult.getBlobDataChannel().close();\n+                while (writableChannel.getNextChunk(100) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1947e35d3cb5999b1dda2b258a0e0fcf2b3eb9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMzkxNQ==", "bodyText": "They are not all read in the previous loop since this test case is to test when we close the ReadableChannel before we finishing read all the data from it, as you can see we close the channel before this line. But the AsyncWritableChannel's interface guarantees that whenever you pass a callback to the write method, this callback will be invoked in the same order they are passed to the channel. So this loop is doing exactly that. It loops over all the left  data chunk in the asyncWritableChannel and calls those callbacks.", "url": "https://github.com/linkedin/ambry/pull/1390#discussion_r381613915", "createdAt": "2020-02-19T23:50:05Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/test/java/com.github.ambry.router/GetBlobOperationTest.java", "diffHunk": "@@ -1215,6 +1212,9 @@ public void run() {\n                   chunksLeftToRead--;\n                 }\n                 result.getBlobResult.getBlobDataChannel().close();\n+                while (writableChannel.getNextChunk(100) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwOTA0Mg=="}, "originalCommit": {"oid": "8b1947e35d3cb5999b1dda2b258a0e0fcf2b3eb9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMDc0NQ==", "bodyText": "I see. I thought chunksLeftToRead was the total number of chunks that written into the channel.", "url": "https://github.com/linkedin/ambry/pull/1390#discussion_r381620745", "createdAt": "2020-02-20T00:12:46Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/test/java/com.github.ambry.router/GetBlobOperationTest.java", "diffHunk": "@@ -1215,6 +1212,9 @@ public void run() {\n                   chunksLeftToRead--;\n                 }\n                 result.getBlobResult.getBlobDataChannel().close();\n+                while (writableChannel.getNextChunk(100) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwOTA0Mg=="}, "originalCommit": {"oid": "8b1947e35d3cb5999b1dda2b258a0e0fcf2b3eb9"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1722, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}