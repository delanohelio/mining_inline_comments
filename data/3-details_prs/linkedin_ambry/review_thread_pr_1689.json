{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NjQ2NjIy", "number": 1689, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo0Nzo1NVrOE3V0eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo0MTozNlrOE3Z6kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY0NjM0OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/GCMCryptoService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo0Nzo1NVrOHwoTJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo0Nzo1NVrOHwoTJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1Mzk1Nw==", "bodyText": "I changed this because  String keyAlgo = Utils.readIntString(dataStream) in deserializeKeyRecord() is actually using UTF-8. (line 383)", "url": "https://github.com/linkedin/ambry/pull/1689#discussion_r520753957", "createdAt": "2020-11-10T17:47:55Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com/github/ambry/router/GCMCryptoService.java", "diffHunk": "@@ -366,18 +366,17 @@ private static void serializeKeyRecord(ByteBuffer outputBuffer, byte[] key, Stri\n       outputBuffer.putShort(KEY_RECORD_VERSION_V_1);\n       outputBuffer.putInt(key.length);\n       outputBuffer.put(key);\n-      Utils.serializeString(outputBuffer, keyGenAlgo, StandardCharsets.US_ASCII);\n+      Utils.serializeString(outputBuffer, keyGenAlgo, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe50be9b3bcbeecbc06625c90b3b08362d6fe44"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY2MTg0OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1MTozOVrOHwochQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo0NDo0NlrOHwqZ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1NjM1Nw==", "bodyText": "I thought of one slight deployment issue with changing the charset without making a new user metadata version.\nIf you deploy this change to one frontend, a user could write a non-ascii value into user metadata, and the binary format will now store its real utf-8 value instead of a ? character.\nIf this blob's user metadata is fetched on a frontend without this change, that frontend will attempt to decode as ascii and a deserialization error will occur.\nHowever, this may be a negligible number of users affected and any problems will be resolved by completing the deployment, so maybe continuing with this approach and opting for a fast deployment is the easiest solution. Another option would be to make a user metadata v2 and a config to switch the version; then you could deploy read support for v2 and then switch on serialization in v2.", "url": "https://github.com/linkedin/ambry/pull/1689#discussion_r520756357", "createdAt": "2020-11-10T17:51:39Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java", "diffHunk": "@@ -443,12 +443,12 @@ public static BlobProperties buildBlobProperties(Map<String, Object> args) throw\n           // key size\n           sizeToAllocate += 4;\n           String keyToStore = key.substring(Headers.USER_META_DATA_HEADER_PREFIX.length());\n-          sizeToAllocate += keyToStore.getBytes(StandardCharsets.US_ASCII).length;\n+          sizeToAllocate += keyToStore.getBytes(StandardCharsets.UTF_8).length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe50be9b3bcbeecbc06625c90b3b08362d6fe44"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4ODQ1MQ==", "bodyText": "Yeah, this is indeed a deployment issue as frontends can't be deployed simultaneously. The edge case only affects China team for now. I guess the impact should be very minimum.  (I agree introducing metadata v2 is theoretically the safest way to migrate from ascii to utf-8 smoothly, however we can tolerate the transient error as only one team is really building metadata with non-ascii character, we can coordinate with them when rolling out this change).", "url": "https://github.com/linkedin/ambry/pull/1689#discussion_r520788451", "createdAt": "2020-11-10T18:44:46Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java", "diffHunk": "@@ -443,12 +443,12 @@ public static BlobProperties buildBlobProperties(Map<String, Object> args) throw\n           // key size\n           sizeToAllocate += 4;\n           String keyToStore = key.substring(Headers.USER_META_DATA_HEADER_PREFIX.length());\n-          sizeToAllocate += keyToStore.getBytes(StandardCharsets.US_ASCII).length;\n+          sizeToAllocate += keyToStore.getBytes(StandardCharsets.UTF_8).length;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1NjM1Nw=="}, "originalCommit": {"oid": "9fe50be9b3bcbeecbc06625c90b3b08362d6fe44"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTMxNzI4OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo0MTozNlrOHwu0jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToyNTowM1rOHwwL0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2MDgxMg==", "bodyText": "Can you make the Charset a class level constant?", "url": "https://github.com/linkedin/ambry/pull/1689#discussion_r520860812", "createdAt": "2020-11-10T20:41:36Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java", "diffHunk": "@@ -443,12 +443,12 @@ public static BlobProperties buildBlobProperties(Map<String, Object> args) throw\n           // key size\n           sizeToAllocate += 4;\n           String keyToStore = key.substring(Headers.USER_META_DATA_HEADER_PREFIX.length());\n-          sizeToAllocate += keyToStore.getBytes(StandardCharsets.US_ASCII).length;\n+          sizeToAllocate += keyToStore.getBytes(StandardCharsets.UTF_8).length;\n           String value = getHeader(args, key, true);\n           userMetadataMap.put(keyToStore, value);\n           // value size\n           sizeToAllocate += 4;\n-          sizeToAllocate += value.getBytes(StandardCharsets.US_ASCII).length;\n+          sizeToAllocate += value.getBytes(StandardCharsets.UTF_8).length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe50be9b3bcbeecbc06625c90b3b08362d6fe44"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MzE1Mw==", "bodyText": "Sure, will do.", "url": "https://github.com/linkedin/ambry/pull/1689#discussion_r520883153", "createdAt": "2020-11-10T21:25:03Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java", "diffHunk": "@@ -443,12 +443,12 @@ public static BlobProperties buildBlobProperties(Map<String, Object> args) throw\n           // key size\n           sizeToAllocate += 4;\n           String keyToStore = key.substring(Headers.USER_META_DATA_HEADER_PREFIX.length());\n-          sizeToAllocate += keyToStore.getBytes(StandardCharsets.US_ASCII).length;\n+          sizeToAllocate += keyToStore.getBytes(StandardCharsets.UTF_8).length;\n           String value = getHeader(args, key, true);\n           userMetadataMap.put(keyToStore, value);\n           // value size\n           sizeToAllocate += 4;\n-          sizeToAllocate += value.getBytes(StandardCharsets.US_ASCII).length;\n+          sizeToAllocate += value.getBytes(StandardCharsets.UTF_8).length;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2MDgxMg=="}, "originalCommit": {"oid": "9fe50be9b3bcbeecbc06625c90b3b08362d6fe44"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1121, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}