{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTkxODk3", "number": 1536, "title": "Fix incorrect offline partition count in HelixParticipant", "bodyText": "Offline partition is currently counted based how many times the reset\nmethod is called. However, Helix may call reset method against same\npartition multiple times during zk disconnection or graceful shutdown.\nThis causes incorrect number of offline partitions and triggers false\nalarm. To fix that, this PR keeps track of each local partition and its\nstate, which also supports tracking added/removed replicas on local node.", "createdAt": "2020-05-27T03:58:44Z", "url": "https://github.com/linkedin/ambry/pull/1536", "merged": true, "mergeCommit": {"oid": "708277b5b886754deed753a60e5feee88865fa77"}, "closed": true, "closedAt": "2020-05-28T18:50:40Z", "author": {"login": "jsjtzyy"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclQ4hhAH2gAyNDIzNTkxODk3Ojc1YTM1NDRlNTMwYmM3ODVmZjlkODk2MTEyODIwMDE1MzNlM2I2ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclm7UiAH2gAyNDIzNTkxODk3OmQxN2ViMmIzNWM1MzgwNGQ2ZTJkYWVmMWM5NzZiOTAyODY3Y2VjMDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "75a3544e530bc785ff9d89611282001533e3b681", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/75a3544e530bc785ff9d89611282001533e3b681", "committedDate": "2020-05-27T03:41:30Z", "message": "Fix incorrect offline partition count in HelixParticipant\n\nOffline partition is currently counted based how many times the reset\nmethod is called. However, Helix may call reset method against same\npartition multiple times during zk disconnection or graceful shutdown.\nThis causes incorrect number of offline partitions and triggers false\nalarm. To fix that, this PR keeps track of each local partition and its\nstate, which also supports tracking added/removed replicas on local node."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Njg0Mjk0", "url": "https://github.com/linkedin/ambry/pull/1536#pullrequestreview-419684294", "createdAt": "2020-05-27T23:44:18Z", "commit": {"oid": "75a3544e530bc785ff9d89611282001533e3b681"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzo0NDoxOFrOGbg7Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzo0NDoxOFrOGbg7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwNDIxNA==", "bodyText": "This definitely is cleaner logic wise.\nMy only concern is that the gauge readings will result in 6 full scans of the map every minute (or whatever frequency), which could get expensive if the number of replicas is large.  A possible optimization would be to do a single scan periodically and update local counters for each state, which the gauges could read as before.  But the performance benefit may be too small to justify this.", "url": "https://github.com/linkedin/ambry/pull/1536#discussion_r431504214", "createdAt": "2020-05-27T23:44:18Z", "author": {"login": "lightningrob"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipantMetrics.java", "diffHunk": "@@ -16,55 +16,47 @@\n import com.codahale.metrics.Counter;\n import com.codahale.metrics.Gauge;\n import com.codahale.metrics.MetricRegistry;\n+import java.util.Collections;\n+import java.util.Map;\n import java.util.concurrent.atomic.AtomicInteger;\n \n \n /**\n  * Metrics for {@link HelixParticipant} to monitor partition state transitions.\n  */\n class HelixParticipantMetrics {\n-  final AtomicInteger bootstrapCount = new AtomicInteger();\n-  final AtomicInteger standbyCount = new AtomicInteger();\n-  final AtomicInteger leaderCount = new AtomicInteger();\n-  final AtomicInteger inactiveCount = new AtomicInteger();\n   final AtomicInteger offlineCount = new AtomicInteger();\n-  final AtomicInteger errorStateCount = new AtomicInteger();\n   // no need to record exact number of \"dropped\" partition, a counter to track partition-dropped events would suffice\n   final Counter partitionDroppedCount;\n \n-  HelixParticipantMetrics(MetricRegistry metricRegistry, String zkConnectStr) {\n+  HelixParticipantMetrics(MetricRegistry metricRegistry, String zkConnectStr,\n+      Map<String, ReplicaState> localPartitionAndState) {\n     String zkSuffix = zkConnectStr == null ? \"\" : \"-\" + zkConnectStr;\n-    Gauge<Integer> bootstrapPartitionCount = bootstrapCount::get;\n+    Gauge<Integer> bootstrapPartitionCount =\n+        () -> Collections.frequency(localPartitionAndState.values(), ReplicaState.BOOTSTRAP);\n     metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"bootstrapPartitionCount\" + zkSuffix),\n         bootstrapPartitionCount);\n-    Gauge<Integer> standbyPartitionCount = standbyCount::get;\n+    Gauge<Integer> standbyPartitionCount =\n+        () -> Collections.frequency(localPartitionAndState.values(), ReplicaState.STANDBY);\n     metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"standbyPartitionCount\" + zkSuffix),\n         standbyPartitionCount);\n-    Gauge<Integer> leaderPartitionCount = leaderCount::get;\n+    Gauge<Integer> leaderPartitionCount =\n+        () -> Collections.frequency(localPartitionAndState.values(), ReplicaState.LEADER);\n     metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"leaderPartitionCount\" + zkSuffix),\n         leaderPartitionCount);\n-    Gauge<Integer> inactivePartitionCount = inactiveCount::get;\n+    Gauge<Integer> inactivePartitionCount =\n+        () -> Collections.frequency(localPartitionAndState.values(), ReplicaState.INACTIVE);\n     metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"inactivePartitionCount\" + zkSuffix),\n         inactivePartitionCount);\n-    Gauge<Integer> offlinePartitionCount = offlineCount::get;\n+    Gauge<Integer> offlinePartitionCount =\n+        () -> Collections.frequency(localPartitionAndState.values(), ReplicaState.OFFLINE);\n     metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"offlinePartitionCount\" + zkSuffix),\n         offlinePartitionCount);\n-    Gauge<Integer> errorStatePartitionCount = errorStateCount::get;\n+    Gauge<Integer> errorStatePartitionCount =\n+        () -> Collections.frequency(localPartitionAndState.values(), ReplicaState.ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75a3544e530bc785ff9d89611282001533e3b681"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d17eb2b35c53804d6e2daef1c976b902867cec07", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/d17eb2b35c53804d6e2daef1c976b902867cec07", "committedDate": "2020-05-28T05:22:28Z", "message": "cache result for partition count metrics"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1522, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}