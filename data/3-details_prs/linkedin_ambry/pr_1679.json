{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExOTgzOTU0", "number": 1679, "title": "[AZURE_AD_AUTH] Implementation of Ad based authentication for azure storage.", "bodyText": "This PR adds the functionality of AD based authentication for Blob Storage in ambry-cloud. The current authentication method using connection string is unsafe because connection string is visible to anyone who is able to login the account. With AD based authentication, permissions can be assigned to make sure that the client secret is not visible to everyone.\nTo add this functionality, a class StorageClientFactory provides the base implementation for Azure BlobServiceClient. The client is built in one of ConnectionStringBasedStorageClientFactory or ADAuthBasedStorageClientFactory classes based on config.", "createdAt": "2020-10-29T03:26:21Z", "url": "https://github.com/linkedin/ambry/pull/1679", "merged": true, "mergeCommit": {"oid": "da1a62cfa43dedea5af9dc36f70605911fea2390"}, "closed": true, "closedAt": "2020-11-05T00:01:27Z", "author": {"login": "ankagrawal"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYqsd4AH2gAyNTExOTgzOTU0OjAwYTcyN2NiODNiYzk5NGUzNDdjYWU1YmFlMGEyOWY3MTgyMjIxMDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZTjWagFqTUyMzcwMDEzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "00a727cb83bc994e347cae5bae0a29f718222100", "author": {"user": {"login": "ankagrawal", "name": "Ankur Agrawal"}}, "url": "https://github.com/linkedin/ambry/commit/00a727cb83bc994e347cae5bae0a29f718222100", "committedDate": "2020-11-02T20:36:00Z", "message": "Implementation of Ad based authentication for azure storage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c4b2f1ad8262b9b38458b8af3290bbdfd46c2c", "author": {"user": {"login": "ankagrawal", "name": "Ankur Agrawal"}}, "url": "https://github.com/linkedin/ambry/commit/c0c4b2f1ad8262b9b38458b8af3290bbdfd46c2c", "committedDate": "2020-11-02T20:36:00Z", "message": "Add new fields to azure test properties."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7831adecb3683f04edcb3a0bb098edda2c67879", "author": {"user": {"login": "ankagrawal", "name": "Ankur Agrawal"}}, "url": "https://github.com/linkedin/ambry/commit/a7831adecb3683f04edcb3a0bb098edda2c67879", "committedDate": "2020-11-02T20:36:00Z", "message": "Add newline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "083764c4b5be38c72033b34549bbbee64e4cd780", "author": {"user": {"login": "ankagrawal", "name": "Ankur Agrawal"}}, "url": "https://github.com/linkedin/ambry/commit/083764c4b5be38c72033b34549bbbee64e4cd780", "committedDate": "2020-11-02T19:10:57Z", "message": "Add newline"}, "afterCommit": {"oid": "a7831adecb3683f04edcb3a0bb098edda2c67879", "author": {"user": {"login": "ankagrawal", "name": "Ankur Agrawal"}}, "url": "https://github.com/linkedin/ambry/commit/a7831adecb3683f04edcb3a0bb098edda2c67879", "committedDate": "2020-11-02T20:36:00Z", "message": "Add newline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50", "author": {"user": {"login": "ankagrawal", "name": "Ankur Agrawal"}}, "url": "https://github.com/linkedin/ambry/commit/5b5f17894680cadfa97627f42934c853b9f84c50", "committedDate": "2020-11-02T23:15:02Z", "message": "Refactor, add config validations and add test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTg5OTcw", "url": "https://github.com/linkedin/ambry/pull/1679#pullrequestreview-522189970", "createdAt": "2020-11-03T04:57:37Z", "commit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDo1NzozOFrOHsgSUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToyMzo1NVrOHsgmzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyODM3MQ==", "bodyText": "Shouldn't this be in AzureCloudConfig?", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516428371", "createdAt": "2020-11-03T04:57:38Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyODY2Ng==", "bodyText": "Minor: can combine last two lines if not using future for anything else.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516428666", "createdAt": "2020-11-03T04:59:19Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";\n+\n+  @Override\n+  protected BlobServiceClient buildBlobServiceClient(HttpClient httpClient, Configuration configuration,\n+      RequestRetryOptions retryOptions, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    IAuthenticationResult iAuthenticationResult = getAccessTokenByClientCredentialGrant(azureCloudConfig);\n+    return new BlobServiceClientBuilder().credential(new TokenCredential() {\n+      @Override\n+      public Mono<AccessToken> getToken(TokenRequestContext request) {\n+        return Mono.just(new AccessToken(iAuthenticationResult.accessToken(),\n+            iAuthenticationResult.expiresOnDate().toInstant().atOffset(OffsetDateTime.now().getOffset())));\n+      }\n+    })\n+        .endpoint(azureCloudConfig.azureStorageEndpoint)\n+        .httpClient(httpClient)\n+        .retryOptions(retryOptions)\n+        .configuration(configuration)\n+        .buildClient();\n+  }\n+\n+  @Override\n+  protected void validateABSAuthConfigs(AzureCloudConfig azureCloudConfig) {\n+    if (azureCloudConfig.azureStorageAuthority.isEmpty() || azureCloudConfig.azureStorageClientId.isEmpty()\n+        || azureCloudConfig.azureStorageSecret.isEmpty() || azureCloudConfig.azureStorageEndpoint.isEmpty()) {\n+      throw new IllegalArgumentException(String.format(\"One of the required configs %s, %s, %s, %s is missing\",\n+          AzureCloudConfig.AZURE_STORAGE_AUTHORITY, AzureCloudConfig.AZURE_STORAGE_CLIENTID,\n+          AzureCloudConfig.AZURE_STORAGE_ENDPOINT, AzureCloudConfig.AZURE_STORAGE_SECRET));\n+    }\n+  }\n+\n+  /**\n+   * Create {@link IAuthenticationResult} using the app details.\n+   * @param azureCloudConfig {@link AzureCloudConfig} object.\n+   * @return {@link IAuthenticationResult} containing the access token.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   */\n+  private IAuthenticationResult getAccessTokenByClientCredentialGrant(AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    ConfidentialClientApplication app = ConfidentialClientApplication.builder(azureCloudConfig.azureStorageClientId,\n+        ClientCredentialFactory.createFromSecret(azureCloudConfig.azureStorageSecret))\n+        .authority(azureCloudConfig.azureStorageAuthority)\n+        .build();\n+    ClientCredentialParameters clientCredentialParam =\n+        ClientCredentialParameters.builder(Collections.singleton(AZURE_STORAGE_ACCESS_SCOPE)).build();\n+    CompletableFuture<IAuthenticationResult> future = app.acquireToken(clientCredentialParam);\n+    return future.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyOTM2Mg==", "bodyText": "Minor: it will be easier to read if you split the credential construction into its own line.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516429362", "createdAt": "2020-11-03T05:02:54Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";\n+\n+  @Override\n+  protected BlobServiceClient buildBlobServiceClient(HttpClient httpClient, Configuration configuration,\n+      RequestRetryOptions retryOptions, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    IAuthenticationResult iAuthenticationResult = getAccessTokenByClientCredentialGrant(azureCloudConfig);\n+    return new BlobServiceClientBuilder().credential(new TokenCredential() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDk0MA==", "bodyText": "Duplicate line", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516430940", "createdAt": "2020-11-03T05:10:27Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java", "diffHunk": "@@ -83,31 +78,30 @@\n    * @param azureCloudConfig the {@link AzureCloudConfig} to use.\n    * @param blobLayoutStrategy the {@link AzureBlobLayoutStrategy} to use.\n    * @param azureMetrics the {@link AzureMetrics} to use.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws ReflectiveOperationException\n+   * @throws ReflectiveOperationException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMjcxMA==", "bodyText": "Rather than introducing several new checked exceptions that AzureBlobDataAccessor needs to know about, can we catch and rethrow as IllegalStateException similar to AzureCloudDestinationFactory.getCloudDestination()?", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516432710", "createdAt": "2020-11-03T05:19:15Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/StorageClientFactory.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020  LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.azure.storage.common.policy.RetryPolicyType;\n+import com.github.ambry.config.CloudConfig;\n+import com.microsoft.azure.cosmosdb.RetryOptions;\n+import java.net.InetSocketAddress;\n+import java.net.MalformedURLException;\n+import java.util.concurrent.ExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A factory class to create {@link BlobServiceClient} object.\n+ */\n+public abstract class StorageClientFactory {\n+  Logger logger = LoggerFactory.getLogger(StorageClientFactory.class);\n+\n+  /**\n+   * Create the {@link BlobServiceClient} object.\n+   * @param {@link CloudConfig} object.\n+   * @param {@link AzureCloudConfig} object.\n+   * @return {@link BlobServiceClient} object.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   */\n+  public BlobServiceClient createBlobStorageClient(CloudConfig cloudConfig, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMzYxNQ==", "bodyText": "Was there a reason to move this method?  My understanding is public methods go before package private ones.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516433615", "createdAt": "2020-11-03T05:23:55Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/test/java/com/github/ambry/cloud/azure/AzureBlobDataAccessorTest.java", "diffHunk": "@@ -96,10 +81,26 @@ static BlockBlobClient setupMockBlobClient(BlobServiceClient mockServiceClient)\n     lenient().when(mockBlobProperties.getMetadata()).thenReturn(metadataMap);\n     Response<BlobProperties> mockPropertiesResponse = mock(Response.class);\n     lenient().when(mockPropertiesResponse.getValue()).thenReturn(mockBlobProperties);\n-    lenient().when(mockBlockBlobClient.getPropertiesWithResponse(any(), any(), any())).thenReturn(mockPropertiesResponse);\n+    lenient().when(mockBlockBlobClient.getPropertiesWithResponse(any(), any(), any()))\n+        .thenReturn(mockPropertiesResponse);\n     return mockBlockBlobClient;\n   }\n \n+  @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c370252f45c5bf855c01790eba754ff51e2c1f2", "author": {"user": {"login": "ankagrawal", "name": "Ankur Agrawal"}}, "url": "https://github.com/linkedin/ambry/commit/9c370252f45c5bf855c01790eba754ff51e2c1f2", "committedDate": "2020-11-03T07:10:36Z", "message": "Address review comments.\nParameterize AzureIntegrationTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f406edc9136114465231931dedc7e331bbff463", "author": {"user": {"login": "ankagrawal", "name": "Ankur Agrawal"}}, "url": "https://github.com/linkedin/ambry/commit/1f406edc9136114465231931dedc7e331bbff463", "committedDate": "2020-11-03T06:52:56Z", "message": "Address review comments."}, "afterCommit": {"oid": "9c370252f45c5bf855c01790eba754ff51e2c1f2", "author": {"user": {"login": "ankagrawal", "name": "Ankur Agrawal"}}, "url": "https://github.com/linkedin/ambry/commit/9c370252f45c5bf855c01790eba754ff51e2c1f2", "committedDate": "2020-11-03T07:10:36Z", "message": "Address review comments.\nParameterize AzureIntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a34746063d30b6712b22741f74322576de6567ec", "author": {"user": {"login": "ankagrawal", "name": "Ankur Agrawal"}}, "url": "https://github.com/linkedin/ambry/commit/a34746063d30b6712b22741f74322576de6567ec", "committedDate": "2020-11-03T07:15:36Z", "message": "Add old values in test properties."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjE3MDY2", "url": "https://github.com/linkedin/ambry/pull/1679#pullrequestreview-523617066", "createdAt": "2020-11-04T18:13:12Z", "commit": {"oid": "a34746063d30b6712b22741f74322576de6567ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzAwMTM4", "url": "https://github.com/linkedin/ambry/pull/1679#pullrequestreview-523700138", "createdAt": "2020-11-04T20:12:09Z", "commit": {"oid": "a34746063d30b6712b22741f74322576de6567ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 969, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}