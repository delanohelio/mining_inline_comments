{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDczNDYw", "number": 1417, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTo0OTozN1rODmWq7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0OTo1NVrODnrAEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTQzOTE4OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/CloudReplica.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTo0OTozN1rOFzuXYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTo0OTozN1rOFzuXYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4MTM0Ng==", "bodyText": "that makes sense.", "url": "https://github.com/linkedin/ambry/pull/1417#discussion_r389781346", "createdAt": "2020-03-09T15:49:37Z", "author": {"login": "lightningrob"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/CloudReplica.java", "diffHunk": "@@ -62,11 +62,10 @@ public String getReplicaPath() {\n \n   @Override\n   public List<ReplicaId> getPeerReplicaIds() {\n-    List<ReplicaId> replicasOfPartition = partitionId.getReplicaIds()\n+    return partitionId.getReplicaIds()\n         .stream()\n         .filter(replica -> replica.getDataNodeId().compareTo(dataNodeId) != 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ebb43aa0c224f567ea5a63c2b9b17b0ebbe6b1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjI1OTQ1OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/test/java/com.github.ambry.replication/CloudToStoreReplicationManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToyNjowMVrOFz2Q0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToyNjowMVrOFz2Q0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxMDczNw==", "bodyText": "I don't think we should expose an internal thread pool just for the test to check if an operation succeeded.  Perhaps we can expose a more specific method like hasStoreForDatacenter() in the ReplicationEngine base class?", "url": "https://github.com/linkedin/ambry/pull/1417#discussion_r389910737", "createdAt": "2020-03-09T19:26:01Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/test/java/com.github.ambry.replication/CloudToStoreReplicationManagerTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.replication;\n+\n+import com.github.ambry.clustermap.DataNodeId;\n+import com.github.ambry.clustermap.MockClusterMap;\n+import com.github.ambry.clustermap.MockClusterSpectator;\n+import com.github.ambry.clustermap.MockDataNodeId;\n+import com.github.ambry.clustermap.MockHelixParticipant;\n+import com.github.ambry.clustermap.MockPartitionId;\n+import com.github.ambry.clustermap.PartitionId;\n+import com.github.ambry.clustermap.ReplicaId;\n+import com.github.ambry.config.ClusterMapConfig;\n+import com.github.ambry.config.DiskManagerConfig;\n+import com.github.ambry.config.ReplicationConfig;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.Port;\n+import com.github.ambry.network.PortType;\n+import com.github.ambry.store.MockStoreKeyConverterFactory;\n+import com.github.ambry.store.StorageManager;\n+import com.github.ambry.store.StoreKey;\n+import com.github.ambry.store.StoreKeyFactory;\n+import com.github.ambry.utils.MockTime;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.Utils;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.ScheduledExecutorService;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import static com.github.ambry.clustermap.ClusterMapUtils.*;\n+import static com.github.ambry.clustermap.TestUtils.*;\n+import static org.junit.Assert.*;\n+\n+\n+/**\n+ * Tests for {@link CloudToStoreReplicationManager} when adding/removing cloud replica. The tests also cover the case\n+ * where new replica is added due to \"move replica\".\n+ */\n+public class CloudToStoreReplicationManagerTest {\n+  private static final String NEW_PARTITION_NAME = \"12\";\n+  private static final String CLOUD_DC_NAME = \"CloudDc\";\n+  private static final String VCR_MOUNT_PATH = \"/vcr/1\";\n+  private final VerifiableProperties verifiableProperties;\n+  private final ScheduledExecutorService mockScheduler;\n+  private final StoreKeyFactory storeKeyFactory;\n+  private final ClusterMapConfig clusterMapConfig;\n+  private final ReplicationConfig replicationConfig;\n+  private final ServerConfig serverConfig;\n+  private final StoreConfig storeConfig;\n+  private final MockStoreKeyConverterFactory storeKeyConverterFactory;\n+  private final MockDataNodeId vcrNode;\n+  private final DataNodeId currentNode;\n+  private final MockHelixParticipant mockHelixParticipant;\n+  private final MockClusterSpectator mockClusterSpectator;\n+  private final MockClusterMap clusterMap;\n+\n+  public CloudToStoreReplicationManagerTest() throws Exception {\n+    List<TestUtils.ZkInfo> zkInfoList = new ArrayList<>();\n+    zkInfoList.add(new TestUtils.ZkInfo(null, \"DC1\", (byte) 0, 2299, false));\n+    JSONObject zkJson = constructZkLayoutJSON(zkInfoList);\n+    storeKeyConverterFactory = new MockStoreKeyConverterFactory(null, null);\n+    storeKeyConverterFactory.setConversionMap(new HashMap<>());\n+    mockScheduler = Mockito.mock(ScheduledExecutorService.class);\n+    storeKeyFactory = new StoreKeyFactory() {\n+      @Override\n+      public StoreKey getStoreKey(DataInputStream stream) throws IOException {\n+        return null;\n+      }\n+\n+      @Override\n+      public StoreKey getStoreKey(String input) throws IOException {\n+        return null;\n+      }\n+    };\n+    // create vcr node\n+    List<Port> vcrPortList = Arrays.asList(new Port(12310, PortType.PLAINTEXT), new Port(12410, PortType.SSL));\n+    vcrNode = new MockDataNodeId(\"localhost\", vcrPortList, Collections.singletonList(VCR_MOUNT_PATH), CLOUD_DC_NAME);\n+    clusterMap = new MockClusterMap();\n+    currentNode = clusterMap.getDataNodeIds().get(0);\n+    mockClusterSpectator = new MockClusterSpectator(Collections.singletonList(vcrNode));\n+    long replicaCapacity = clusterMap.getAllPartitionIds(null).get(0).getReplicaIds().get(0).getCapacityInBytes();\n+    Properties properties = new Properties();\n+    properties.setProperty(\"store.segment.size.in.bytes\", Long.toString(replicaCapacity / 2L));\n+    properties.setProperty(\"clustermap.cluster.name\", \"test\");\n+    properties.setProperty(\"clustermap.datacenter.name\", \"DC1\");\n+    properties.setProperty(\"clustermap.vcr.datacenter.name\", \"DC1\");\n+    properties.setProperty(\"clustermap.host.name\", \"localhost\");\n+    properties.setProperty(\"clustermap.dcs.zk.connect.strings\", zkJson.toString(2));\n+    properties.setProperty(\"replication.cloud.token.factory\", \"com.github.ambry.replication.MockFindTokenFactory\");\n+    properties.setProperty(\"disk.manager.enable.segment.pooling\", \"true\");\n+    verifiableProperties = new VerifiableProperties(properties);\n+    storeConfig = new StoreConfig(verifiableProperties);\n+    clusterMapConfig = new ClusterMapConfig(verifiableProperties);\n+    replicationConfig = new ReplicationConfig(verifiableProperties);\n+    serverConfig = new ServerConfig(verifiableProperties);\n+    mockHelixParticipant = new MockHelixParticipant(clusterMapConfig);\n+  }\n+\n+  /**\n+   * Test both success and failure cases when adding cloud replica\n+   * @throws Exception\n+   */\n+  @Test\n+  public void cloudReplicaAdditionTest() throws Exception {\n+    StorageManager storageManager =\n+        new StorageManager(storeConfig, new DiskManagerConfig(verifiableProperties), Utils.newScheduler(1, true),\n+            clusterMap.getMetricRegistry(), null, clusterMap, currentNode, null, mockHelixParticipant, new MockTime(),\n+            null);\n+    CloudToStoreReplicationManager cloudToStoreReplicationManager =\n+        new CloudToStoreReplicationManager(replicationConfig, clusterMapConfig, storeConfig, storageManager,\n+            storeKeyFactory, clusterMap, mockScheduler, currentNode, null, clusterMap.getMetricRegistry(), null,\n+            storeKeyConverterFactory, serverConfig.serverMessageTransformer, mockClusterSpectator,\n+            mockHelixParticipant);\n+    storageManager.start();\n+    cloudToStoreReplicationManager.start();\n+    mockClusterSpectator.spectate();\n+    // 1. test adding cloud replica that is not present locally\n+    mockHelixParticipant.onPartitionBecomeLeaderFromStandby(NEW_PARTITION_NAME);\n+    assertNull(\"Thread pool for DC1 should be null\",\n+        cloudToStoreReplicationManager.getReplicaThreadPoolByDc().get(\"DC1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ebb43aa0c224f567ea5a63c2b9b17b0ebbe6b1"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTI1NDcxOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/test/java/com.github.ambry.replication/CloudToStoreReplicationManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0OTowN1rOF1zgRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDozMDo1M1rOF10HHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MjY5Mw==", "bodyText": "I was wondering where this hardcoded constant was coming from and found this horrible line of code in ReplicationEngine.createThreadPool():\nString threadIdentity =  (startThread ? \"Vcr\" : \"\") + \"ReplicaThread-\" + ...\nI'm adding a TODO for myself to fix that and this constant as well.  It's okay for now.", "url": "https://github.com/linkedin/ambry/pull/1417#discussion_r391962693", "createdAt": "2020-03-12T23:49:07Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/test/java/com.github.ambry.replication/CloudToStoreReplicationManagerTest.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.replication;\n+\n+import com.github.ambry.clustermap.DataNodeId;\n+import com.github.ambry.clustermap.MockClusterMap;\n+import com.github.ambry.clustermap.MockClusterSpectator;\n+import com.github.ambry.clustermap.MockDataNodeId;\n+import com.github.ambry.clustermap.MockHelixParticipant;\n+import com.github.ambry.clustermap.MockPartitionId;\n+import com.github.ambry.clustermap.PartitionId;\n+import com.github.ambry.clustermap.ReplicaId;\n+import com.github.ambry.config.ClusterMapConfig;\n+import com.github.ambry.config.DiskManagerConfig;\n+import com.github.ambry.config.ReplicationConfig;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.Port;\n+import com.github.ambry.network.PortType;\n+import com.github.ambry.store.MockStoreKeyConverterFactory;\n+import com.github.ambry.store.StorageManager;\n+import com.github.ambry.store.StoreKey;\n+import com.github.ambry.store.StoreKeyFactory;\n+import com.github.ambry.utils.MockTime;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.Utils;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.ScheduledExecutorService;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import static com.github.ambry.clustermap.CloudReplica.*;\n+import static com.github.ambry.clustermap.TestUtils.*;\n+import static org.junit.Assert.*;\n+\n+\n+/**\n+ * Tests for {@link CloudToStoreReplicationManager} when adding/removing cloud replica. The tests also cover the case\n+ * where new replica is added due to \"move replica\".\n+ */\n+public class CloudToStoreReplicationManagerTest {\n+  private static final String NEW_PARTITION_NAME = \"12\";\n+  private static final String CLOUD_DC_NAME = \"CloudDc\";\n+  private static final String VCR_MOUNT_PATH = \"/vcr/1\";\n+  private static final String VCR_REPLICA_THREAD_PREFIX = \"VcrReplicaThread-\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20584d25745a3341cc4dc638080d2dbef51ee883"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3MjYzOQ==", "bodyText": "yeah, we probably need to fix it in ReplicationEngine as well.", "url": "https://github.com/linkedin/ambry/pull/1417#discussion_r391972639", "createdAt": "2020-03-13T00:30:53Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/test/java/com.github.ambry.replication/CloudToStoreReplicationManagerTest.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.replication;\n+\n+import com.github.ambry.clustermap.DataNodeId;\n+import com.github.ambry.clustermap.MockClusterMap;\n+import com.github.ambry.clustermap.MockClusterSpectator;\n+import com.github.ambry.clustermap.MockDataNodeId;\n+import com.github.ambry.clustermap.MockHelixParticipant;\n+import com.github.ambry.clustermap.MockPartitionId;\n+import com.github.ambry.clustermap.PartitionId;\n+import com.github.ambry.clustermap.ReplicaId;\n+import com.github.ambry.config.ClusterMapConfig;\n+import com.github.ambry.config.DiskManagerConfig;\n+import com.github.ambry.config.ReplicationConfig;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.Port;\n+import com.github.ambry.network.PortType;\n+import com.github.ambry.store.MockStoreKeyConverterFactory;\n+import com.github.ambry.store.StorageManager;\n+import com.github.ambry.store.StoreKey;\n+import com.github.ambry.store.StoreKeyFactory;\n+import com.github.ambry.utils.MockTime;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.Utils;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.ScheduledExecutorService;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import static com.github.ambry.clustermap.CloudReplica.*;\n+import static com.github.ambry.clustermap.TestUtils.*;\n+import static org.junit.Assert.*;\n+\n+\n+/**\n+ * Tests for {@link CloudToStoreReplicationManager} when adding/removing cloud replica. The tests also cover the case\n+ * where new replica is added due to \"move replica\".\n+ */\n+public class CloudToStoreReplicationManagerTest {\n+  private static final String NEW_PARTITION_NAME = \"12\";\n+  private static final String CLOUD_DC_NAME = \"CloudDc\";\n+  private static final String VCR_MOUNT_PATH = \"/vcr/1\";\n+  private static final String VCR_REPLICA_THREAD_PREFIX = \"VcrReplicaThread-\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MjY5Mw=="}, "originalCommit": {"oid": "20584d25745a3341cc4dc638080d2dbef51ee883"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTI1NTg3OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/test/java/com.github.ambry.replication/CloudToStoreReplicationManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0OTo1NVrOF1zg9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0OTo1NVrOF1zg9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2Mjg3MA==", "bodyText": "Remove these lines?", "url": "https://github.com/linkedin/ambry/pull/1417#discussion_r391962870", "createdAt": "2020-03-12T23:49:55Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/test/java/com.github.ambry.replication/CloudToStoreReplicationManagerTest.java", "diffHunk": "@@ -139,8 +140,9 @@ public void cloudReplicaAdditionTest() throws Exception {\n     mockClusterSpectator.spectate();\n     // 1. test adding cloud replica that is not present locally\n     mockHelixParticipant.onPartitionBecomeLeaderFromStandby(NEW_PARTITION_NAME);\n-    assertNull(\"Thread pool for DC1 should be null\",\n-        cloudToStoreReplicationManager.getReplicaThreadPoolByDc().get(\"DC1\"));\n+    assertNull(\"Cloud replica thread should not be created\", TestUtils.getThreadByThisName(VCR_REPLICA_THREAD_PREFIX));\n+    //assertNull(\"Thread pool for DC1 should be null\",\n+    //cloudToStoreReplicationManager.getReplicaThreadPoolByDc().get(\"DC1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20584d25745a3341cc4dc638080d2dbef51ee883"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1762, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}