{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMTk2MjA1", "number": 1529, "title": "Leverage stats aggregation result to select containers to be marked as INACTIVE", "bodyText": "This PR supports below part of stages for container deletion compaction phase:\n\nFeed in the stats aggregation results into HelixAccountService.\nBased on the results to select containers to be marked as INACTIVE.", "createdAt": "2020-05-21T07:26:28Z", "url": "https://github.com/linkedin/ambry/pull/1529", "merged": true, "mergeCommit": {"oid": "d20272e2723e85232fbccd2d1ce70f827ce36753"}, "closed": true, "closedAt": "2020-07-15T23:12:00Z", "author": {"login": "SophieGuo410"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjhidKABqjMzNjE2OTQxMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1S8HGgFqTQ0OTQwMjU3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a636ad0c25538791b178e7038c2a72a1764eae42", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/a636ad0c25538791b178e7038c2a72a1764eae42", "committedDate": "2020-05-21T07:17:23Z", "message": "ContainerDeletion_aggregation_phase1"}, "afterCommit": {"oid": "5b73b9aef34f5a5e0daf9d57979e157475c5f4ab", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/5b73b9aef34f5a5e0daf9d57979e157475c5f4ab", "committedDate": "2020-05-21T17:57:08Z", "message": "ContainerDeletion_aggregation_phase1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjUzMjI3", "url": "https://github.com/linkedin/ambry/pull/1529#pullrequestreview-416653227", "createdAt": "2020-05-22T05:17:28Z", "commit": {"oid": "5b73b9aef34f5a5e0daf9d57979e157475c5f4ab"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNToxNzoyOFrOGZK8iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTozMToyM1rOGZLJSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0NjkyMQ==", "bodyText": "should we use Deprecated for naming consistency?", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r429046921", "createdAt": "2020-05-22T05:17:28Z", "author": {"login": "zzmao"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -345,6 +351,70 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainers(StatsSnapshot statsSnapshot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b73b9aef34f5a5e0daf9d57979e157475c5f4ab"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0NzExMQ==", "bodyText": "Not used.", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r429047111", "createdAt": "2020-05-22T05:18:19Z", "author": {"login": "zzmao"}, "path": "ambry-account/src/main/java/com/github/ambry/account/InMemoryUnknownAccountService.java", "diffHunk": "@@ -13,10 +13,12 @@\n  */\n package com.github.ambry.account;\n \n+import com.github.ambry.server.StatsSnapshot;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b73b9aef34f5a5e0daf9d57979e157475c5f4ab"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0NzEzNA==", "bodyText": "Not used.", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r429047134", "createdAt": "2020-05-22T05:18:24Z", "author": {"login": "zzmao"}, "path": "ambry-account/src/main/java/com/github/ambry/account/InMemoryUnknownAccountService.java", "diffHunk": "@@ -13,10 +13,12 @@\n  */\n package com.github.ambry.account;\n \n+import com.github.ambry.server.StatsSnapshot;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Objects;\n+import java.util.Set;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b73b9aef34f5a5e0daf9d57979e157475c5f4ab"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0NzIyNw==", "bodyText": "Not used.", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r429047227", "createdAt": "2020-05-22T05:18:53Z", "author": {"login": "zzmao"}, "path": "ambry-account/src/main/java/com/github/ambry/account/JsonAccountService.java", "diffHunk": "@@ -14,6 +14,7 @@\n package com.github.ambry.account;\n \n import com.github.ambry.config.JsonAccountConfig;\n+import com.github.ambry.server.StatsSnapshot;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b73b9aef34f5a5e0daf9d57979e157475c5f4ab"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0ODEwOQ==", "bodyText": "deleteInProgressContianerSet?", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r429048109", "createdAt": "2020-05-22T05:22:53Z", "author": {"login": "zzmao"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -345,6 +351,70 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainers(StatsSnapshot statsSnapshot) {\n+    Map<String, Set<String>> accountToContainerMap = new HashMap<>();\n+    Set<Container> invalidContainerSet = new HashSet<>();\n+    getValidContainers(accountToContainerMap, statsSnapshot, null);\n+    Set<Container> deprecatedContainerSet = getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b73b9aef34f5a5e0daf9d57979e157475c5f4ab"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0ODQwOA==", "bodyText": "I am a little bit confused about the naming here.\nIn last PR, deprecated includes INACTIVE and DELETE_IN_PROGRESS , right?", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r429048408", "createdAt": "2020-05-22T05:24:10Z", "author": {"login": "zzmao"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -345,6 +351,70 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainers(StatsSnapshot statsSnapshot) {\n+    Map<String, Set<String>> accountToContainerMap = new HashMap<>();\n+    Set<Container> invalidContainerSet = new HashSet<>();\n+    getValidContainers(accountToContainerMap, statsSnapshot, null);\n+    Set<Container> deprecatedContainerSet = getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0ODEwOQ=="}, "originalCommit": {"oid": "5b73b9aef34f5a5e0daf9d57979e157475c5f4ab"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MDE4Nw==", "bodyText": "pass in accountService here is a little bit weird. I am think if any other solution..", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r429050187", "createdAt": "2020-05-22T05:31:23Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com/github/ambry/clustermap/ClusterParticipant.java", "diffHunk": "@@ -31,7 +32,7 @@\n    * @param ambryHealthReports {@link List} of {@link AmbryHealthReport} to be registered to the participant.\n    * @throws IOException\n    */\n-  void participate(List<AmbryHealthReport> ambryHealthReports) throws IOException;\n+  void participate(List<AmbryHealthReport> ambryHealthReports, AccountService accountService) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b73b9aef34f5a5e0daf9d57979e157475c5f4ab"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Nzk3NjUw", "url": "https://github.com/linkedin/ambry/pull/1529#pullrequestreview-419797650", "createdAt": "2020-05-28T05:58:37Z", "commit": {"oid": "1ed5b8d9c7f8a428a4e5efdda0c44b7c92fd611f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTo1ODozN1rOGbmq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTo1ODozN1rOGbmq1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5ODI5Mg==", "bodyText": "This still looks like a synchronous way to call some methods from accountService.  Try to initiate another thread to unblock current thread.", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r431598292", "createdAt": "2020-05-28T05:58:37Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixHealthReportAggregatorTask.java", "diffHunk": "@@ -81,16 +86,20 @@ public TaskResult run() {\n           statsWrappersJSON.put(instanceName, record.getRecord().getSimpleField(statsFieldName));\n         }\n       }\n-      Pair<String, String> results = clusterAggregator.doWork(statsWrappersJSON, statsReportType);\n+      ObjectMapper mapper = new ObjectMapper();\n+      Pair<StatsSnapshot, StatsSnapshot> results = clusterAggregator.doWork(statsWrappersJSON, statsReportType);\n       String resultId = String.format(\"Aggregated_%s\", healthReportName);\n       ZNRecord znRecord = new ZNRecord(resultId);\n-      znRecord.setSimpleField(RAW_VALID_SIZE_FIELD_NAME, results.getFirst());\n-      znRecord.setSimpleField(VALID_SIZE_FIELD_NAME, results.getSecond());\n+      znRecord.setSimpleField(RAW_VALID_SIZE_FIELD_NAME, mapper.writeValueAsString(results.getFirst()));\n+      znRecord.setSimpleField(VALID_SIZE_FIELD_NAME, mapper.writeValueAsString(results.getSecond()));\n       znRecord.setSimpleField(TIMESTAMP_FIELD_NAME, String.valueOf(SystemTime.getInstance().milliseconds()));\n       znRecord.setListField(ERROR_OCCURRED_INSTANCES_FIELD_NAME,\n           clusterAggregator.getExceptionOccurredInstances(statsReportType));\n       String path = String.format(\"/%s\", resultId);\n       manager.getHelixPropertyStore().set(path, znRecord, AccessOption.PERSISTENT);\n+      if (statsReportType.equals(StatsReportType.ACCOUNT_REPORT)) {\n+        accountService.selectInvalidContainersAndMarkInZK(results.getFirst());\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed5b8d9c7f8a428a4e5efdda0c44b7c92fd611f"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65becdfee1f601ba590e81eebb874af65cd09901", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/65becdfee1f601ba590e81eebb874af65cd09901", "committedDate": "2020-05-31T23:35:33Z", "message": "use callback to decouple accountService from clusterParticipant"}, "afterCommit": {"oid": "c8a7c9e1438766c22ecef64304a7a18888b57b2c", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/c8a7c9e1438766c22ecef64304a7a18888b57b2c", "committedDate": "2020-06-01T05:17:00Z", "message": "use callback to decouple accountService from clusterParticipant"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8a7c9e1438766c22ecef64304a7a18888b57b2c", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/c8a7c9e1438766c22ecef64304a7a18888b57b2c", "committedDate": "2020-06-01T05:17:00Z", "message": "use callback to decouple accountService from clusterParticipant"}, "afterCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c", "committedDate": "2020-06-01T06:36:16Z", "message": "use callback to decouple accountService from clusterParticipant"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjY2OTY1", "url": "https://github.com/linkedin/ambry/pull/1529#pullrequestreview-425666965", "createdAt": "2020-06-05T22:42:05Z", "commit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjo0MjowNVrOGf_Q6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMToxNzozMFrOGgA_qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NTU2Mw==", "bodyText": "minor: can be removed", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436195563", "createdAt": "2020-06-05T22:42:05Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/JsonAccountService.java", "diffHunk": "@@ -22,6 +22,7 @@\n import java.util.Collection;\n import java.util.Objects;\n import java.util.Random;\n+import java.util.Set;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NjA4NQ==", "bodyText": "We usually don't import external dependency (i.e. Guava), unless there is really needed.", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436196085", "createdAt": "2020-06-05T22:44:25Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -17,11 +17,16 @@\n import com.github.ambry.commons.TopicListener;\n import com.github.ambry.config.HelixAccountServiceConfig;\n import com.github.ambry.router.Router;\n+import com.github.ambry.server.StatsSnapshot;\n+import com.google.common.base.Preconditions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTIxNg==", "bodyText": "Replace this with:\nObjects.requireNonNull(keyName, \"keyName should not be null since every container will have it's corresponding accountId\");", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436201216", "createdAt": "2020-06-05T23:07:41Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -343,6 +347,71 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainerCandidates(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = new HashSet<>();\n+    if (statsSnapshot != null) {\n+      Map<String, Set<String>> accountToContainerMap = new HashMap<>();\n+      getValidContainers(accountToContainerMap, statsSnapshot, null);\n+      Set<Container> deleteInProgressContainerSet = getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS);\n+      for (Container container : deleteInProgressContainerSet) {\n+        String containerIdToString = \"C[\" + container.getId() + \"]\";\n+        String accountIdToString = \"A[\" + container.getParentAccountId() + \"]\";\n+        if (accountToContainerMap.containsKey(accountIdToString) && accountToContainerMap.get(accountIdToString).contains(containerIdToString)) {\n+          logger.info(\"Container {} has not been deleted yet\", container);\n+        } else {\n+          invalidContainerCandidateSet.add(container);\n+        }\n+      }\n+    }\n+    return invalidContainerCandidateSet;\n+  }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE and marked in zookeeper.\n+   */\n+  public void selectInvalidContainersAndMarkInZK(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = selectInvalidContainerCandidates(statsSnapshot);\n+    markContainerZkNodesInactive(invalidContainerCandidateSet);\n+  }\n+\n+  /**\n+   * Mark the given {@link Container}s status to INACTIVE in zookeeper.\n+   * @param invalidContainerSet DELETE_IN_PROGRESS {@link Container} set which has been deleted successfully during compaction.\n+   */\n+  private void markContainerZkNodesInactive(Set<Container> invalidContainerSet) {\n+    // TODO: mark the given containers status to INACTIVE in zookeeper.\n+  }\n+\n+  /**\n+   * Gets valid data size {@link Container}s. The qualified {@link Container}s' raw valid data size should be larger than zero.\n+   * @param accountToContainerMap it holds a mapping of {@link Account}s to {@link Container}s which raw valid data size larger than zero.\n+   * @param statsSnapshot the {@link StatsSnapshot} generated from cluster wide aggregation.\n+   * @param keyName the key of subMap for each level of {@link StatsSnapshot}.\n+   */\n+  private void getValidContainers(Map<String, Set<String>> accountToContainerMap, StatsSnapshot statsSnapshot,\n+      String keyName) {\n+    if (statsSnapshot.getSubMap() == null || statsSnapshot.getSubMap().isEmpty()) {\n+      return;\n+    } else {\n+      for (Map.Entry<String, StatsSnapshot> entry : statsSnapshot.getSubMap().entrySet()) {\n+        if (entry.getKey().startsWith(\"C\") && entry.getValue().getValue() > 0) {\n+          Preconditions.checkNotNull(keyName,\n+              \"keyName should not be null since every container will have it's corresponding accountId\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwOTA3Mw==", "bodyText": "Since you have a return in if branch, you can move this piece of code out of else branch.", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436209073", "createdAt": "2020-06-05T23:48:20Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -343,6 +347,71 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainerCandidates(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = new HashSet<>();\n+    if (statsSnapshot != null) {\n+      Map<String, Set<String>> accountToContainerMap = new HashMap<>();\n+      getValidContainers(accountToContainerMap, statsSnapshot, null);\n+      Set<Container> deleteInProgressContainerSet = getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS);\n+      for (Container container : deleteInProgressContainerSet) {\n+        String containerIdToString = \"C[\" + container.getId() + \"]\";\n+        String accountIdToString = \"A[\" + container.getParentAccountId() + \"]\";\n+        if (accountToContainerMap.containsKey(accountIdToString) && accountToContainerMap.get(accountIdToString).contains(containerIdToString)) {\n+          logger.info(\"Container {} has not been deleted yet\", container);\n+        } else {\n+          invalidContainerCandidateSet.add(container);\n+        }\n+      }\n+    }\n+    return invalidContainerCandidateSet;\n+  }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE and marked in zookeeper.\n+   */\n+  public void selectInvalidContainersAndMarkInZK(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = selectInvalidContainerCandidates(statsSnapshot);\n+    markContainerZkNodesInactive(invalidContainerCandidateSet);\n+  }\n+\n+  /**\n+   * Mark the given {@link Container}s status to INACTIVE in zookeeper.\n+   * @param invalidContainerSet DELETE_IN_PROGRESS {@link Container} set which has been deleted successfully during compaction.\n+   */\n+  private void markContainerZkNodesInactive(Set<Container> invalidContainerSet) {\n+    // TODO: mark the given containers status to INACTIVE in zookeeper.\n+  }\n+\n+  /**\n+   * Gets valid data size {@link Container}s. The qualified {@link Container}s' raw valid data size should be larger than zero.\n+   * @param accountToContainerMap it holds a mapping of {@link Account}s to {@link Container}s which raw valid data size larger than zero.\n+   * @param statsSnapshot the {@link StatsSnapshot} generated from cluster wide aggregation.\n+   * @param keyName the key of subMap for each level of {@link StatsSnapshot}.\n+   */\n+  private void getValidContainers(Map<String, Set<String>> accountToContainerMap, StatsSnapshot statsSnapshot,\n+      String keyName) {\n+    if (statsSnapshot.getSubMap() == null || statsSnapshot.getSubMap().isEmpty()) {\n+      return;\n+    } else {\n+      for (Map.Entry<String, StatsSnapshot> entry : statsSnapshot.getSubMap().entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMDAwNw==", "bodyText": "Suggest renaming this method, as it doesn't return anything. Also, Valid is a bit of ambiguous here. Maybe we call it searchNonEmptyContainers", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436210007", "createdAt": "2020-06-05T23:54:07Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -343,6 +347,71 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainerCandidates(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = new HashSet<>();\n+    if (statsSnapshot != null) {\n+      Map<String, Set<String>> accountToContainerMap = new HashMap<>();\n+      getValidContainers(accountToContainerMap, statsSnapshot, null);\n+      Set<Container> deleteInProgressContainerSet = getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS);\n+      for (Container container : deleteInProgressContainerSet) {\n+        String containerIdToString = \"C[\" + container.getId() + \"]\";\n+        String accountIdToString = \"A[\" + container.getParentAccountId() + \"]\";\n+        if (accountToContainerMap.containsKey(accountIdToString) && accountToContainerMap.get(accountIdToString).contains(containerIdToString)) {\n+          logger.info(\"Container {} has not been deleted yet\", container);\n+        } else {\n+          invalidContainerCandidateSet.add(container);\n+        }\n+      }\n+    }\n+    return invalidContainerCandidateSet;\n+  }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE and marked in zookeeper.\n+   */\n+  public void selectInvalidContainersAndMarkInZK(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = selectInvalidContainerCandidates(statsSnapshot);\n+    markContainerZkNodesInactive(invalidContainerCandidateSet);\n+  }\n+\n+  /**\n+   * Mark the given {@link Container}s status to INACTIVE in zookeeper.\n+   * @param invalidContainerSet DELETE_IN_PROGRESS {@link Container} set which has been deleted successfully during compaction.\n+   */\n+  private void markContainerZkNodesInactive(Set<Container> invalidContainerSet) {\n+    // TODO: mark the given containers status to INACTIVE in zookeeper.\n+  }\n+\n+  /**\n+   * Gets valid data size {@link Container}s. The qualified {@link Container}s' raw valid data size should be larger than zero.\n+   * @param accountToContainerMap it holds a mapping of {@link Account}s to {@link Container}s which raw valid data size larger than zero.\n+   * @param statsSnapshot the {@link StatsSnapshot} generated from cluster wide aggregation.\n+   * @param keyName the key of subMap for each level of {@link StatsSnapshot}.\n+   */\n+  private void getValidContainers(Map<String, Set<String>> accountToContainerMap, StatsSnapshot statsSnapshot,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxNTE5Mw==", "bodyText": "In which case, this else will happen? I think we shouldn't recursively call this method here. Let me know if I am wrong.", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436215193", "createdAt": "2020-06-06T00:28:16Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -343,6 +347,71 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainerCandidates(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = new HashSet<>();\n+    if (statsSnapshot != null) {\n+      Map<String, Set<String>> accountToContainerMap = new HashMap<>();\n+      getValidContainers(accountToContainerMap, statsSnapshot, null);\n+      Set<Container> deleteInProgressContainerSet = getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS);\n+      for (Container container : deleteInProgressContainerSet) {\n+        String containerIdToString = \"C[\" + container.getId() + \"]\";\n+        String accountIdToString = \"A[\" + container.getParentAccountId() + \"]\";\n+        if (accountToContainerMap.containsKey(accountIdToString) && accountToContainerMap.get(accountIdToString).contains(containerIdToString)) {\n+          logger.info(\"Container {} has not been deleted yet\", container);\n+        } else {\n+          invalidContainerCandidateSet.add(container);\n+        }\n+      }\n+    }\n+    return invalidContainerCandidateSet;\n+  }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE and marked in zookeeper.\n+   */\n+  public void selectInvalidContainersAndMarkInZK(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = selectInvalidContainerCandidates(statsSnapshot);\n+    markContainerZkNodesInactive(invalidContainerCandidateSet);\n+  }\n+\n+  /**\n+   * Mark the given {@link Container}s status to INACTIVE in zookeeper.\n+   * @param invalidContainerSet DELETE_IN_PROGRESS {@link Container} set which has been deleted successfully during compaction.\n+   */\n+  private void markContainerZkNodesInactive(Set<Container> invalidContainerSet) {\n+    // TODO: mark the given containers status to INACTIVE in zookeeper.\n+  }\n+\n+  /**\n+   * Gets valid data size {@link Container}s. The qualified {@link Container}s' raw valid data size should be larger than zero.\n+   * @param accountToContainerMap it holds a mapping of {@link Account}s to {@link Container}s which raw valid data size larger than zero.\n+   * @param statsSnapshot the {@link StatsSnapshot} generated from cluster wide aggregation.\n+   * @param keyName the key of subMap for each level of {@link StatsSnapshot}.\n+   */\n+  private void getValidContainers(Map<String, Set<String>> accountToContainerMap, StatsSnapshot statsSnapshot,\n+      String keyName) {\n+    if (statsSnapshot.getSubMap() == null || statsSnapshot.getSubMap().isEmpty()) {\n+      return;\n+    } else {\n+      for (Map.Entry<String, StatsSnapshot> entry : statsSnapshot.getSubMap().entrySet()) {\n+        if (entry.getKey().startsWith(\"C\") && entry.getValue().getValue() > 0) {\n+          Preconditions.checkNotNull(keyName,\n+              \"keyName should not be null since every container will have it's corresponding accountId\");\n+          accountToContainerMap.getOrDefault(keyName, new HashSet<>()).add(entry.getKey());\n+        } else if (entry.getKey().startsWith(\"A\")) {\n+          accountToContainerMap.putIfAbsent(entry.getKey(), new HashSet<>());\n+          getValidContainers(accountToContainerMap, entry.getValue(), entry.getKey());\n+        } else {\n+          getValidContainers(accountToContainerMap, entry.getValue(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxNjE0OQ==", "bodyText": "According to the comment and code logic, I would suggest changing Invalid to Inactive in this method. InactiveContainerCandidates sounds more reasonable", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436216149", "createdAt": "2020-06-06T00:35:57Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -343,6 +347,71 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainerCandidates(StatsSnapshot statsSnapshot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxNjM5NQ==", "bodyText": "rename accountToContainerMap to nonEmptyContainersByAccount", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436216395", "createdAt": "2020-06-06T00:36:56Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -343,6 +347,71 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainerCandidates(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = new HashSet<>();\n+    if (statsSnapshot != null) {\n+      Map<String, Set<String>> accountToContainerMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxNjgzNw==", "bodyText": "add a log here for debugging as well", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436216837", "createdAt": "2020-06-06T00:37:54Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -343,6 +347,71 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainerCandidates(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = new HashSet<>();\n+    if (statsSnapshot != null) {\n+      Map<String, Set<String>> accountToContainerMap = new HashMap<>();\n+      getValidContainers(accountToContainerMap, statsSnapshot, null);\n+      Set<Container> deleteInProgressContainerSet = getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS);\n+      for (Container container : deleteInProgressContainerSet) {\n+        String containerIdToString = \"C[\" + container.getId() + \"]\";\n+        String accountIdToString = \"A[\" + container.getParentAccountId() + \"]\";\n+        if (accountToContainerMap.containsKey(accountIdToString) && accountToContainerMap.get(accountIdToString).contains(containerIdToString)) {\n+          logger.info(\"Container {} has not been deleted yet\", container);\n+        } else {\n+          invalidContainerCandidateSet.add(container);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxNzIxMg==", "bodyText": "same here, Invalid -> Inactive", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436217212", "createdAt": "2020-06-06T00:38:45Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -343,6 +347,71 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainerCandidates(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = new HashSet<>();\n+    if (statsSnapshot != null) {\n+      Map<String, Set<String>> accountToContainerMap = new HashMap<>();\n+      getValidContainers(accountToContainerMap, statsSnapshot, null);\n+      Set<Container> deleteInProgressContainerSet = getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS);\n+      for (Container container : deleteInProgressContainerSet) {\n+        String containerIdToString = \"C[\" + container.getId() + \"]\";\n+        String accountIdToString = \"A[\" + container.getParentAccountId() + \"]\";\n+        if (accountToContainerMap.containsKey(accountIdToString) && accountToContainerMap.get(accountIdToString).contains(containerIdToString)) {\n+          logger.info(\"Container {} has not been deleted yet\", container);\n+        } else {\n+          invalidContainerCandidateSet.add(container);\n+        }\n+      }\n+    }\n+    return invalidContainerCandidateSet;\n+  }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE and marked in zookeeper.\n+   */\n+  public void selectInvalidContainersAndMarkInZK(StatsSnapshot statsSnapshot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxNzk2NA==", "bodyText": "rename markContainerZkNodesInactive to markContainerInactiveOnZk", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436217964", "createdAt": "2020-06-06T00:40:36Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -343,6 +347,71 @@ private void onAccountChangeMessage(String topic, String message) {\n     }\n   }\n \n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */\n+  Set<Container> selectInvalidContainerCandidates(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = new HashSet<>();\n+    if (statsSnapshot != null) {\n+      Map<String, Set<String>> accountToContainerMap = new HashMap<>();\n+      getValidContainers(accountToContainerMap, statsSnapshot, null);\n+      Set<Container> deleteInProgressContainerSet = getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS);\n+      for (Container container : deleteInProgressContainerSet) {\n+        String containerIdToString = \"C[\" + container.getId() + \"]\";\n+        String accountIdToString = \"A[\" + container.getParentAccountId() + \"]\";\n+        if (accountToContainerMap.containsKey(accountIdToString) && accountToContainerMap.get(accountIdToString).contains(containerIdToString)) {\n+          logger.info(\"Container {} has not been deleted yet\", container);\n+        } else {\n+          invalidContainerCandidateSet.add(container);\n+        }\n+      }\n+    }\n+    return invalidContainerCandidateSet;\n+  }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE and marked in zookeeper.\n+   */\n+  public void selectInvalidContainersAndMarkInZK(StatsSnapshot statsSnapshot) {\n+    Set<Container> invalidContainerCandidateSet = selectInvalidContainerCandidates(statsSnapshot);\n+    markContainerZkNodesInactive(invalidContainerCandidateSet);\n+  }\n+\n+  /**\n+   * Mark the given {@link Container}s status to INACTIVE in zookeeper.\n+   * @param invalidContainerSet DELETE_IN_PROGRESS {@link Container} set which has been deleted successfully during compaction.\n+   */\n+  private void markContainerZkNodesInactive(Set<Container> invalidContainerSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTAxMQ==", "bodyText": "Raw use of the Callback, change it to Callback<StatsSnapshot> ?\nAlso update the java doc of this constructor please.", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436221011", "createdAt": "2020-06-06T00:51:38Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixHealthReportAggregatorTask.java", "diffHunk": "@@ -60,16 +64,19 @@\n    * @param statsReportType the type of stats report\n    */\n   HelixHealthReportAggregatorTask(TaskCallbackContext context, long relevantTimePeriodInMs, String healthReportName,\n-      String statsFieldName, StatsReportType statsReportType) {\n+      String statsFieldName, StatsReportType statsReportType, Callback callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTA4NQ==", "bodyText": "minor: complete the comment here.", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436221085", "createdAt": "2020-06-06T00:52:25Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/account/AccountServiceCallback.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.account;\n+\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.server.StatsSnapshot;\n+\n+\n+public class AccountServiceCallback implements Callback<StatsSnapshot> {\n+  private final AccountService accountService;\n+\n+  /**\n+   * Construct a AccountServiceCallback object\n+   * @param accountService the {@link AccountService} associated with this callback.\n+   */\n+  public AccountServiceCallback(AccountService accountService) {\n+    this.accountService = accountService;\n+  }\n+\n+  /**\n+   * When the aggregation report has been generated successfully, this method will be invoked and associated {@link AccountService}\n+   * will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMjE0Mw==", "bodyText": "I know the exception doesn't affect the account service callback but others might don't. We can add logger.info here if exception is not null. We can say \"Aggregator task encountered an exception but result is not null. Processing the result as aggregation is complete.\"   You can also add comment saying \"Exception occurred when updating Helix property store, not in aggregation phase, the result is still solid.\"", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436222143", "createdAt": "2020-06-06T01:01:57Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/account/AccountServiceCallback.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.account;\n+\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.server.StatsSnapshot;\n+\n+\n+public class AccountServiceCallback implements Callback<StatsSnapshot> {\n+  private final AccountService accountService;\n+\n+  /**\n+   * Construct a AccountServiceCallback object\n+   * @param accountService the {@link AccountService} associated with this callback.\n+   */\n+  public AccountServiceCallback(AccountService accountService) {\n+    this.accountService = accountService;\n+  }\n+\n+  /**\n+   * When the aggregation report has been generated successfully, this method will be invoked and associated {@link AccountService}\n+   * will\n+   * @param results the StatsSnapshot whose values represents aggregated stats across all partitions.\n+   * @param exception Exception won't affect the execution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMjQyNw==", "bodyText": "you probably didn't push the latest branch, this is still there", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436222427", "createdAt": "2020-06-06T01:04:58Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/InMemoryUnknownAccountService.java", "diffHunk": "@@ -13,10 +13,12 @@\n  */\n package com.github.ambry.account;\n \n+import com.github.ambry.server.StatsSnapshot;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0NzExMQ=="}, "originalCommit": {"oid": "5b73b9aef34f5a5e0daf9d57979e157475c5f4ab"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMjUwMg==", "bodyText": "minor: can be removed", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436222502", "createdAt": "2020-06-06T01:05:45Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/account/AccountService.java", "diffHunk": "@@ -13,6 +13,8 @@\n  */\n package com.github.ambry.account;\n \n+import com.github.ambry.server.StatsSnapshot;\n+import com.github.ambry.utils.Pair;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMjU2OQ==", "bodyText": "add some description here", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436222569", "createdAt": "2020-06-06T01:06:26Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/clustermap/ClusterParticipant.java", "diffHunk": "@@ -29,9 +30,10 @@\n   /**\n    * Initiate the participation of cluster participant.\n    * @param ambryHealthReports {@link List} of {@link AmbryHealthReport} to be registered to the participant.\n+   * @param callback", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMjc0Mg==", "bodyText": "Looks like you imported a different type of Callback (should be account service callback not router callback).", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436222742", "createdAt": "2020-06-06T01:08:00Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/clustermap/ClusterParticipant.java", "diffHunk": "@@ -14,6 +14,7 @@\n \n package com.github.ambry.clustermap;\n \n+import com.github.ambry.router.Callback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMjg1Ng==", "bodyText": "minor: update java doc of this method", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436222856", "createdAt": "2020-06-06T01:09:02Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixClusterAggregator.java", "diffHunk": "@@ -53,7 +53,7 @@\n    * for each partition.\n    * @throws IOException\n    */\n-  Pair<String, String> doWork(Map<String, String> statsWrappersJSON, StatsReportType type) throws IOException {\n+  Pair<StatsSnapshot, StatsSnapshot> doWork(Map<String, String> statsWrappersJSON, StatsReportType type) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMjg5OQ==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436222899", "createdAt": "2020-06-06T01:09:31Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixHealthReportAggregatorTask.java", "diffHunk": "@@ -14,7 +14,9 @@\n \n package com.github.ambry.clustermap;\n \n+import com.github.ambry.router.Callback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMzA5MA==", "bodyText": "add some description", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436223090", "createdAt": "2020-06-06T01:11:16Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipant.java", "diffHunk": "@@ -100,16 +101,17 @@ public void setInitialLocalPartitions(Collection<String> localPartitions) {\n    * Initiate the participation by registering via the {@link HelixManager} as a participant to the associated\n    * Helix cluster.\n    * @param ambryHealthReports {@link List} of {@link AmbryHealthReport} to be registered to the participant.\n+   * @param callback", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMzEyMA==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436223120", "createdAt": "2020-06-06T01:11:21Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipant.java", "diffHunk": "@@ -15,6 +15,7 @@\n \n import com.codahale.metrics.MetricRegistry;\n import com.github.ambry.config.ClusterMapConfig;\n+import com.github.ambry.router.Callback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMzE2Nw==", "bodyText": "minor: update java doc of this method", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436223167", "createdAt": "2020-06-06T01:11:50Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipant.java", "diffHunk": "@@ -395,7 +397,7 @@ private boolean removeOldReplicaInfo(ReplicaId replicaId, InstanceConfig instanc\n    * @param healthReports the {@link List} of {@link AmbryHealthReport}s that may require the registration of\n    * corresponding {@link HelixHealthReportAggregatorTask}s.\n    */\n-  private void registerHealthReportTasks(StateMachineEngine engine, List<AmbryHealthReport> healthReports) {\n+  private void registerHealthReportTasks(StateMachineEngine engine, List<AmbryHealthReport> healthReports, Callback callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMzYxMw==", "bodyText": "Callback -> Callback<StatsSnapshot>", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436223613", "createdAt": "2020-06-06T01:15:32Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "diffHunk": "@@ -293,8 +295,9 @@ public void startup() throws InstantiationException {\n       if (vcrClusterSpectator != null) {\n         vcrClusterSpectator.spectate();\n       }\n+      Callback accountServiceCallback = new AccountServiceCallback(accountService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMzczNQ==", "bodyText": "remove this and make sure all the Callback related imports are updated in this PR", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436223735", "createdAt": "2020-06-06T01:16:08Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "diffHunk": "@@ -63,6 +64,7 @@\n import com.github.ambry.rest.RestRequestResponseHandlerFactory;\n import com.github.ambry.rest.RestRequestService;\n import com.github.ambry.rest.StorageServerNettyFactory;\n+import com.github.ambry.router.Callback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMzkxNA==", "bodyText": "minor: format this file", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r436223914", "createdAt": "2020-06-06T01:17:30Z", "author": {"login": "jsjtzyy"}, "path": "ambry-test-utils/src/main/java/com/github/ambry/utils/TestUtils.java", "diffHunk": "@@ -420,5 +424,39 @@ public boolean isZkServerStarted() {\n     }\n     return true;\n   }\n+\n+  /**\n+   * Generate certain type of {@link StatsSnapshot} based on the given parameters that would have been produced by a\n+   * {@link com.github.ambry.store.Store}.\n+   * @param accountCount number of account entry in the {@link StatsSnapshot}\n+   * @param containerCount number of container entry in the {@link StatsSnapshot}\n+   * @param random the random generator to be used\n+   * @param type the type of stats report to be generated for the store\n+   * @return the generated store level {@link StatsSnapshot}\n+   */\n+  public static StatsSnapshot generateStoreStats(int accountCount, int containerCount, Random random, StatsReportType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/7f1c4dfa31918169b2dbb67d69bbd4723ef4b19c", "committedDate": "2020-06-01T06:36:16Z", "message": "use callback to decouple accountService from clusterParticipant"}, "afterCommit": {"oid": "9f1ea72e8cd8f6c770da2adc5713403362c99d1b", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/9f1ea72e8cd8f6c770da2adc5713403362c99d1b", "committedDate": "2020-07-14T06:36:46Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f1ea72e8cd8f6c770da2adc5713403362c99d1b", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/9f1ea72e8cd8f6c770da2adc5713403362c99d1b", "committedDate": "2020-07-14T06:36:46Z", "message": "address comments"}, "afterCommit": {"oid": "44e10fd56285f2de086e8c264072eec4de974263", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/44e10fd56285f2de086e8c264072eec4de974263", "committedDate": "2020-07-14T06:39:06Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NjAzMDY3", "url": "https://github.com/linkedin/ambry/pull/1529#pullrequestreview-448603067", "createdAt": "2020-07-15T03:25:12Z", "commit": {"oid": "9091194f43c0bb55c8b0b542cfd48554d1a55efd"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzoyNToxM1rOGxs0AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzozMjozMlrOGxs7Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2NzYxNg==", "bodyText": "can be removed", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r454767616", "createdAt": "2020-07-15T03:25:13Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -56,6 +59,7 @@\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n+import org.mockito.Mockito;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9091194f43c0bb55c8b0b542cfd48554d1a55efd"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2NzY1MQ==", "bodyText": "can be removed", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r454767651", "createdAt": "2020-07-15T03:25:21Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -14,11 +14,14 @@\n package com.github.ambry.account;\n \n import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.clustermap.HelixClusterAggregator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9091194f43c0bb55c8b0b542cfd48554d1a55efd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2ODAzMA==", "bodyText": "Set -> Set<Short>", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r454768030", "createdAt": "2020-07-15T03:26:58Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -200,6 +203,53 @@ public void testCreateAccount() {\n     assertAccountsInAccountService(idToRefAccountMap.values(), NUM_REF_ACCOUNT, accountService);\n   }\n \n+  /**\n+   * Tests select INVALID {@link Container}s from DELETE_IN_PROGRESS {@link Container}s.\n+   */\n+  @Test\n+  public void testSelectInvalidContainer() throws Exception {\n+    //generates store stats\n+    int accountCount = 1;\n+    int containerCount = 3;\n+    StatsSnapshot statsSnapshot =\n+        generateStoreStats(accountCount, containerCount, random, StatsReportType.ACCOUNT_REPORT);\n+\n+    // a set that records the account ids that have already been taken.\n+    Set accountIdSet = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9091194f43c0bb55c8b0b542cfd48554d1a55efd"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2ODI4OA==", "bodyText": "INVALID -> INACTIVE", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r454768288", "createdAt": "2020-07-15T03:27:57Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -200,6 +203,53 @@ public void testCreateAccount() {\n     assertAccountsInAccountService(idToRefAccountMap.values(), NUM_REF_ACCOUNT, accountService);\n   }\n \n+  /**\n+   * Tests select INVALID {@link Container}s from DELETE_IN_PROGRESS {@link Container}s.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9091194f43c0bb55c8b0b542cfd48554d1a55efd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2ODM1Mw==", "bodyText": "testSelectInactiveContainer", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r454768353", "createdAt": "2020-07-15T03:28:13Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -200,6 +203,53 @@ public void testCreateAccount() {\n     assertAccountsInAccountService(idToRefAccountMap.values(), NUM_REF_ACCOUNT, accountService);\n   }\n \n+  /**\n+   * Tests select INVALID {@link Container}s from DELETE_IN_PROGRESS {@link Container}s.\n+   */\n+  @Test\n+  public void testSelectInvalidContainer() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9091194f43c0bb55c8b0b542cfd48554d1a55efd"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2ODU4NA==", "bodyText": "format this file", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r454768584", "createdAt": "2020-07-15T03:29:00Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -200,6 +203,53 @@ public void testCreateAccount() {\n     assertAccountsInAccountService(idToRefAccountMap.values(), NUM_REF_ACCOUNT, accountService);\n   }\n \n+  /**\n+   * Tests select INVALID {@link Container}s from DELETE_IN_PROGRESS {@link Container}s.\n+   */\n+  @Test\n+  public void testSelectInvalidContainer() throws Exception {\n+    //generates store stats\n+    int accountCount = 1;\n+    int containerCount = 3;\n+    StatsSnapshot statsSnapshot =\n+        generateStoreStats(accountCount, containerCount, random, StatsReportType.ACCOUNT_REPORT);\n+\n+    // a set that records the account ids that have already been taken.\n+    Set accountIdSet = new HashSet<>();\n+    // generate a single reference account and container that can be referenced by refAccount and refContainer respectively.\n+    refAccountId = Utils.getRandomShort(random);\n+    accountIdSet.add(refAccountId);\n+    generateRefAccounts(idToRefAccountMap, idToRefContainerMap, accountIdSet, 2, 3);\n+    accountService = mockHelixAccountServiceFactory.getAccountService();\n+    accountService.updateAccounts(idToRefAccountMap.values());\n+    assertAccountsInAccountService(idToRefAccountMap.values(), 2, accountService);\n+\n+    Set<Container> expectContainerSet = new HashSet<>();\n+    List<Account> accountsToUpdate = new ArrayList<>();\n+    int accountId = 0;\n+    for (Account account : accountService.getAllAccounts()) {\n+      AccountBuilder accountBuilder =\n+          new AccountBuilder((short) accountId, \"A[\" + accountId + \"]\", AccountStatus.ACTIVE);\n+      int containerId = 0;\n+      for (Container container : account.getAllContainers()) {\n+        ContainerBuilder containerBuilder =\n+            new ContainerBuilder((short) containerId, \"C[\" + containerId + \"]\", ContainerStatus.DELETE_IN_PROGRESS,\n+                container.getDescription() + \"--extra\", (short) accountId);\n+        accountBuilder.addOrUpdateContainer(containerBuilder.build());\n+\n+        containerId++;\n+      }\n+      accountsToUpdate.add(accountBuilder.build());\n+      if (accountId == 1) {\n+        expectContainerSet.addAll(accountsToUpdate.get(accountId).getAllContainers());\n+      }\n+      accountId++;\n+    }\n+    updateAccountsAndAssertAccountExistence(accountsToUpdate, 4, true);\n+    Set<Container> invalidContainerSet = ((HelixAccountService) accountService).selectInactiveContainerCandidates(statsSnapshot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9091194f43c0bb55c8b0b542cfd48554d1a55efd"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2ODg4NA==", "bodyText": "format this file", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r454768884", "createdAt": "2020-07-15T03:30:03Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixClusterAggregatorTest.java", "diffHunk": "@@ -103,7 +104,7 @@ public void testDoWorkBasic() throws IOException {\n       }\n \n       // Verify cluster wide raw stats aggregation\n-      StatsSnapshot rawSnapshot = mapper.readValue(aggregatedRawAndValidStats.getFirst(), StatsSnapshot.class);\n+      StatsSnapshot rawSnapshot = mapper.readValue(mapper.writeValueAsString(aggregatedRawAndValidStats.getFirst()), StatsSnapshot.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9091194f43c0bb55c8b0b542cfd48554d1a55efd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2OTUwNg==", "bodyText": "Seems never used, can be removed. (Also format this file)", "url": "https://github.com/linkedin/ambry/pull/1529#discussion_r454769506", "createdAt": "2020-07-15T03:32:32Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixParticipantTest.java", "diffHunk": "@@ -77,6 +79,7 @@ public HelixParticipantTest(String stateModelDef) {\n     props.setProperty(\"clustermap.state.model.definition\", stateModelDef);\n     this.stateModelDef = stateModelDef;\n     helixManagerFactory = new MockHelixManagerFactory();\n+    accountService = Mockito.mock(AccountService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9091194f43c0bb55c8b0b542cfd48554d1a55efd"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba98547eed7812ff20cb70690f4cab1e58e19d2d", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/ba98547eed7812ff20cb70690f4cab1e58e19d2d", "committedDate": "2020-07-15T19:14:45Z", "message": "ContainerDeletion_aggregation_phase1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea9a3b894736ec0fd9b92024045bdd39a82c7f51", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/ea9a3b894736ec0fd9b92024045bdd39a82c7f51", "committedDate": "2020-07-15T19:14:45Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30d4e7c8cd23e9fe2ad48bf9decc3cf3172b04f8", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/30d4e7c8cd23e9fe2ad48bf9decc3cf3172b04f8", "committedDate": "2020-07-15T19:14:45Z", "message": "use callback to decouple accountService from clusterParticipant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "464d0603f916805a95365b6b3f1f3e0a2f485b2f", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/464d0603f916805a95365b6b3f1f3e0a2f485b2f", "committedDate": "2020-07-15T19:14:45Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "890c6851db92884b7db0959bce0c09bfd3a9bb18", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/890c6851db92884b7db0959bce0c09bfd3a9bb18", "committedDate": "2020-07-15T19:14:45Z", "message": "move callback interface to common dir and remove redundant code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0637494774839a62fca48fc4faad06c19d4694d7", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/0637494774839a62fca48fc4faad06c19d4694d7", "committedDate": "2020-07-15T19:03:07Z", "message": "format change and add config file"}, "afterCommit": {"oid": "cd8ded3f5f955b141188330e620ac48320be7e1e", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/cd8ded3f5f955b141188330e620ac48320be7e1e", "committedDate": "2020-07-15T19:16:11Z", "message": "format change and add config file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34732febe9fb6ece3d2e8b83eea4273fc32387a8", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/34732febe9fb6ece3d2e8b83eea4273fc32387a8", "committedDate": "2020-07-15T19:23:02Z", "message": "format change and add config file"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd8ded3f5f955b141188330e620ac48320be7e1e", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/cd8ded3f5f955b141188330e620ac48320be7e1e", "committedDate": "2020-07-15T19:16:11Z", "message": "format change and add config file"}, "afterCommit": {"oid": "34732febe9fb6ece3d2e8b83eea4273fc32387a8", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/34732febe9fb6ece3d2e8b83eea4273fc32387a8", "committedDate": "2020-07-15T19:23:02Z", "message": "format change and add config file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MzI1NzMz", "url": "https://github.com/linkedin/ambry/pull/1529#pullrequestreview-449325733", "createdAt": "2020-07-15T20:59:00Z", "commit": {"oid": "34732febe9fb6ece3d2e8b83eea4273fc32387a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDAyNTc3", "url": "https://github.com/linkedin/ambry/pull/1529#pullrequestreview-449402577", "createdAt": "2020-07-15T23:08:01Z", "commit": {"oid": "34732febe9fb6ece3d2e8b83eea4273fc32387a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1503, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}