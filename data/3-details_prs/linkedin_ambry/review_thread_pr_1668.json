{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NDEzNTUx", "number": 1668, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoxMjoyNVrOEw7URw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzo0MDoyN1rOEw-0Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzM4OTUxOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoxMjoyNVrOHmyF2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoxMjoyNVrOHmyF2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyODYzNQ==", "bodyText": "nit, complete the comment", "url": "https://github.com/linkedin/ambry/pull/1668#discussion_r510428635", "createdAt": "2020-10-22T20:12:25Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrServer.java", "diffHunk": "@@ -98,10 +103,12 @@ public VcrServer(VerifiableProperties properties, ClusterAgentsFactory clusterAg\n    * @param clusterAgentsFactory the {@link ClusterAgentsFactory} to use.\n    * @param notificationSystem the {@link NotificationSystem} to use.\n    * @param cloudDestinationFactory the {@link CloudDestinationFactory} to use.\n+   * @param reporterFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "922d2723b05515c25f88a5c197feb771e419486e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzk1NDM4OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzozNjoxOFrOHm3W8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTo1Mzo0MFrOHnTzzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxNDkyOQ==", "bodyText": "I like this Function usage.  It's inconsistent with the other factory interfaces we use, but it seems like a sensible shortcut.", "url": "https://github.com/linkedin/ambry/pull/1668#discussion_r510514929", "createdAt": "2020-10-22T23:36:18Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrServer.java", "diffHunk": "@@ -74,6 +75,7 @@\n   private JmxReporter reporter = null;\n   private ConnectionPool connectionPool = null;\n   private final NotificationSystem notificationSystem;\n+  private final Function<MetricRegistry, JmxReporter> reporterFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4796e902ae1f747b4c255a8463d9b22f90117d97"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MTA3MQ==", "bodyText": "I was going to add a Factory instance but putting it in a place where all 3 entry points (server, frontend, vcr) could share it without adding a dependency on metrics-jmx to a package became a problem (metrics-jmx is where the JmxReporter class is defined)", "url": "https://github.com/linkedin/ambry/pull/1668#discussion_r510981071", "createdAt": "2020-10-23T15:53:40Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrServer.java", "diffHunk": "@@ -74,6 +75,7 @@\n   private JmxReporter reporter = null;\n   private ConnectionPool connectionPool = null;\n   private final NotificationSystem notificationSystem;\n+  private final Function<MetricRegistry, JmxReporter> reporterFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxNDkyOQ=="}, "originalCommit": {"oid": "4796e902ae1f747b4c255a8463d9b22f90117d97"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzk2MjYyOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com/github/ambry/rest/RestServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzo0MDoyN1rOHm3bmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzozODo1OFrOHnXSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxNjEyMg==", "bodyText": "Ideally we should have a test case that passes a non-null reporterFactory.", "url": "https://github.com/linkedin/ambry/pull/1668#discussion_r510516122", "createdAt": "2020-10-22T23:40:27Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/RestServer.java", "diffHunk": "@@ -171,17 +172,20 @@ public RestServer(VerifiableProperties verifiableProperties, ClusterMap clusterM\n    * @param sslFactory the {@link SSLFactory} to be used. This can be {@code null} if no components require SSL support.\n    * @param addedChannelHandlers a list of {@link ChannelHandler} to add to the {@link io.netty.channel.ChannelInitializer} before\n    *                             the final handler.\n+   * @param reporterFactory if non-null, use this function to set up a {@link JmxReporter} with custom settings. If this\n+   *                        option is null the default settings for the reporter will be used.\n    * @throws InstantiationException if there is any error instantiating an instance of RestServer.\n    */\n   public RestServer(VerifiableProperties verifiableProperties, ClusterMap clusterMap,\n-      NotificationSystem notificationSystem, SSLFactory sslFactory, List<ChannelHandler> addedChannelHandlers)\n-      throws Exception {\n+      NotificationSystem notificationSystem, SSLFactory sslFactory, List<ChannelHandler> addedChannelHandlers,\n+      Function<MetricRegistry, JmxReporter> reporterFactory) throws Exception {\n     if (verifiableProperties == null || clusterMap == null || notificationSystem == null) {\n       throw new IllegalArgumentException(\"Null arg(s) received during instantiation of RestServer\");\n     }\n     MetricRegistry metricRegistry = clusterMap.getMetricRegistry();\n     RestServerConfig restServerConfig = new RestServerConfig(verifiableProperties);\n-    reporter = JmxReporter.forRegistry(metricRegistry).build();\n+    reporter = reporterFactory != null ? reporterFactory.apply(metricRegistry)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4796e902ae1f747b4c255a8463d9b22f90117d97"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAzODE0NA==", "bodyText": "added cases for each server class", "url": "https://github.com/linkedin/ambry/pull/1668#discussion_r511038144", "createdAt": "2020-10-23T17:38:58Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/RestServer.java", "diffHunk": "@@ -171,17 +172,20 @@ public RestServer(VerifiableProperties verifiableProperties, ClusterMap clusterM\n    * @param sslFactory the {@link SSLFactory} to be used. This can be {@code null} if no components require SSL support.\n    * @param addedChannelHandlers a list of {@link ChannelHandler} to add to the {@link io.netty.channel.ChannelInitializer} before\n    *                             the final handler.\n+   * @param reporterFactory if non-null, use this function to set up a {@link JmxReporter} with custom settings. If this\n+   *                        option is null the default settings for the reporter will be used.\n    * @throws InstantiationException if there is any error instantiating an instance of RestServer.\n    */\n   public RestServer(VerifiableProperties verifiableProperties, ClusterMap clusterMap,\n-      NotificationSystem notificationSystem, SSLFactory sslFactory, List<ChannelHandler> addedChannelHandlers)\n-      throws Exception {\n+      NotificationSystem notificationSystem, SSLFactory sslFactory, List<ChannelHandler> addedChannelHandlers,\n+      Function<MetricRegistry, JmxReporter> reporterFactory) throws Exception {\n     if (verifiableProperties == null || clusterMap == null || notificationSystem == null) {\n       throw new IllegalArgumentException(\"Null arg(s) received during instantiation of RestServer\");\n     }\n     MetricRegistry metricRegistry = clusterMap.getMetricRegistry();\n     RestServerConfig restServerConfig = new RestServerConfig(verifiableProperties);\n-    reporter = JmxReporter.forRegistry(metricRegistry).build();\n+    reporter = reporterFactory != null ? reporterFactory.apply(metricRegistry)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxNjEyMg=="}, "originalCommit": {"oid": "4796e902ae1f747b4c255a8463d9b22f90117d97"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1093, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}