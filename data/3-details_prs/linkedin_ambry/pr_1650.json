{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NTQyMTA5", "number": 1650, "title": "[StorageQuota] Adding StorageQuotaEnforcer and StorageQuotaService", "bodyText": "Complete the implementation for StorageQuotaService", "createdAt": "2020-10-07T22:04:59Z", "url": "https://github.com/linkedin/ambry/pull/1650", "merged": true, "mergeCommit": {"oid": "fefd082ea4607cb5c2ec9074a43cf6babb96bb82"}, "closed": true, "closedAt": "2020-10-20T23:09:24Z", "author": {"login": "justinlin-linkedin"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR9XaoAFqTUwNjc5NzQ4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUfh7PAH2gAyNDk5NTQyMTA5OjI1YzY0OTZmODA2Yjk0MWI4MGU0MGE3ZmY5ZTUzZWRiY2FjMDdkMjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2Nzk3NDg1", "url": "https://github.com/linkedin/ambry/pull/1650#pullrequestreview-506797485", "createdAt": "2020-10-12T17:25:51Z", "commit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "state": "COMMENTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzoyNTo1MVrOHgHPBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDowMDozMlrOHgRBRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzNTAxNQ==", "bodyText": "Minor: since this is not in specific class, the name is too broad. Can we call it QuotaMode?", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503435015", "createdAt": "2020-10-12T17:25:51Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/Mode.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+/**\n+ * Quota service mode. If mode is tracking, it will not throttle traffics even if the quota is exceeded.\n+ */\n+public enum Mode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzODU1Mw==", "bodyText": "same here, maybe call it QuotaOperation?", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503438553", "createdAt": "2020-10-12T17:33:18Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/Operation.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+/**\n+ * Operations for quota service.\n+ */\n+public enum Operation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzOTA3Ng==", "bodyText": "Why we use Upload instead of Post? I think latter one is consistent with what we use in code base.", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503439076", "createdAt": "2020-10-12T17:34:23Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/Operation.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+/**\n+ * Operations for quota service.\n+ */\n+public enum Operation {\n+  Upload, Delete, TtlUpdate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1ODc1OQ==", "bodyText": "typo: ZooKeeper", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503558759", "createdAt": "2020-10-12T22:08:45Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/config/StorageQuotaConfig.java", "diffHunk": "@@ -18,13 +18,21 @@\n  */\n public class StorageQuotaConfig {\n   public static final String STORAGE_QUOTA_PREFIX = \"storage.quota.\";\n+  public static final String HELIX_PROPERTY_ROOT_PATH = STORAGE_QUOTA_PREFIX + \"helix.property.root.path\";\n   public static final String ZK_CLIENT_CONNECT_ADDRESS = STORAGE_QUOTA_PREFIX + \"zk.client.connect.address\";\n   public static final String REFRESHER_POLLING_INTERVAL_MS = STORAGE_QUOTA_PREFIX + \"refresher.polling.interval.ms\";\n   public static final String CONTAINER_STORAGE_QUOTA_IN_JSON = STORAGE_QUOTA_PREFIX + \"container.storage.quota.in.json\";\n   public static final String SOURCE_POLLING_INTERVAL_MS = STORAGE_QUOTA_PREFIX + \"source.polling.interval.ms\";\n \n   //////////////// Config for HelixStorageUsageRefresher ///////////////\n \n+  /**\n+   * The root path of helix property store in ZooKeepr for HelixStorageUsageRefresher. Must start with {@code /}, and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1OTU4Ng==", "bodyText": "Minor: Use getIntInRange for sourcePollingIntervalMs as well.", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503559586", "createdAt": "2020-10-12T22:11:02Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/config/StorageQuotaConfig.java", "diffHunk": "@@ -73,6 +81,7 @@\n    * @param verifiableProperties The {@link VerifiableProperties} that contains all the properties.\n    */\n   public StorageQuotaConfig(VerifiableProperties verifiableProperties) {\n+    helixPropertyRootPath = verifiableProperties.getString(HELIX_PROPERTY_ROOT_PATH);\n     zkClientConnectAddress = verifiableProperties.getString(ZK_CLIENT_CONNECT_ADDRESS);\n     refresherPollingIntervalMs =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1OTg3OA==", "bodyText": "typo: usage", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503559878", "createdAt": "2020-10-12T22:11:54Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * {@link StorageQuotaEnforcer} enforces the traffic throttling based on the storage quota and the current storage usage.\n+ *\n+ * Each traffic that changes storage usage is targeted at a specific account and container. Enforcer enforces storage\n+ * quota on each container. Before evaluating any traffic, enforcer has to retrieve storage quota of each container from\n+ * {@link StorageQuotaSource} and current storage uasage of each container from {@link StorageUsageRefresher}, by calling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MDg1OQ==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503570859", "createdAt": "2020-10-12T22:46:19Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * {@link StorageQuotaEnforcer} enforces the traffic throttling based on the storage quota and the current storage usage.\n+ *\n+ * Each traffic that changes storage usage is targeted at a specific account and container. Enforcer enforces storage\n+ * quota on each container. Before evaluating any traffic, enforcer has to retrieve storage quota of each container from\n+ * {@link StorageQuotaSource} and current storage uasage of each container from {@link StorageUsageRefresher}, by calling\n+ * {@link #initStorageQuota} and {@link #initStorageUsage} respectively.\n+ *\n+ * Container storage quota can be dynamic, it can be updated to increase or decrease the quota for specific containers.\n+ * To listen on these changes, Enforcer would return a {@link StorageQuotaSource.Listener}.\n+ *\n+ * Container storage usage is changing all the the time because of expired blobs and compacted deleted blobs. That's the\n+ * reason why relying on the incoming traffic won't give you a correct answer about the current storage usage. For instance,\n+ * if 1GB blob is uploaded to containerA and the TTL for this blob is one day. Then one day later, without any traffic\n+ * from client, the storage usage for containerA becomes 0. Since the storage usage from {@link StorageUsageRefresher} is\n+ * the source of the truth, enforcer has to listen on the changes for storage usage and replace the value in memory with\n+ * the value from {@link StorageUsageRefresher}.\n+ */\n+public interface StorageQuotaEnforcer {\n+\n+  /**\n+   * Initialize the storage usage in {@link StorageQuotaEnforcer}.\n+   * @param usage The initial storage usage from {@link StorageUsageRefresher}.\n+   */\n+  void initStorageUsage(Map<String, Map<String, Long>> usage);\n+\n+  /**\n+   * Return a {@link StorageUsageRefresher.Listener} to listen on the change of current storage usage.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.\n+   * @return The {@link StorageUsageRefresher.Listener}.\n+   */\n+  StorageUsageRefresher.Listener getUsageRefresherListener();\n+\n+  /**\n+   * Initialize the storage quota in {@link StorageQuotaSource}.\n+   * @param quota The initial quota from {@link StorageQuotaSource}.\n+   */\n+  void initStorageQuota(Map<String, Map<String, Long>> quota);\n+\n+  /**\n+   * Return a {@link StorageQuotaSource.Listener} to listen on the change of storage quota.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MTMwNQ==", "bodyText": "if {@link StorageQuotaEnforcer} doesn't want to listen on the changes. does this mean there is no listener in StorageQuotaEnforcer?  (If so, can you tweak the comment?)", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503571305", "createdAt": "2020-10-12T22:47:32Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * {@link StorageQuotaEnforcer} enforces the traffic throttling based on the storage quota and the current storage usage.\n+ *\n+ * Each traffic that changes storage usage is targeted at a specific account and container. Enforcer enforces storage\n+ * quota on each container. Before evaluating any traffic, enforcer has to retrieve storage quota of each container from\n+ * {@link StorageQuotaSource} and current storage uasage of each container from {@link StorageUsageRefresher}, by calling\n+ * {@link #initStorageQuota} and {@link #initStorageUsage} respectively.\n+ *\n+ * Container storage quota can be dynamic, it can be updated to increase or decrease the quota for specific containers.\n+ * To listen on these changes, Enforcer would return a {@link StorageQuotaSource.Listener}.\n+ *\n+ * Container storage usage is changing all the the time because of expired blobs and compacted deleted blobs. That's the\n+ * reason why relying on the incoming traffic won't give you a correct answer about the current storage usage. For instance,\n+ * if 1GB blob is uploaded to containerA and the TTL for this blob is one day. Then one day later, without any traffic\n+ * from client, the storage usage for containerA becomes 0. Since the storage usage from {@link StorageUsageRefresher} is\n+ * the source of the truth, enforcer has to listen on the changes for storage usage and replace the value in memory with\n+ * the value from {@link StorageUsageRefresher}.\n+ */\n+public interface StorageQuotaEnforcer {\n+\n+  /**\n+   * Initialize the storage usage in {@link StorageQuotaEnforcer}.\n+   * @param usage The initial storage usage from {@link StorageUsageRefresher}.\n+   */\n+  void initStorageUsage(Map<String, Map<String, Long>> usage);\n+\n+  /**\n+   * Return a {@link StorageUsageRefresher.Listener} to listen on the change of current storage usage.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MTQ5Ng==", "bodyText": "btw, the quota change comes from Nuage, right?", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503571496", "createdAt": "2020-10-12T22:48:14Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * {@link StorageQuotaEnforcer} enforces the traffic throttling based on the storage quota and the current storage usage.\n+ *\n+ * Each traffic that changes storage usage is targeted at a specific account and container. Enforcer enforces storage\n+ * quota on each container. Before evaluating any traffic, enforcer has to retrieve storage quota of each container from\n+ * {@link StorageQuotaSource} and current storage uasage of each container from {@link StorageUsageRefresher}, by calling\n+ * {@link #initStorageQuota} and {@link #initStorageUsage} respectively.\n+ *\n+ * Container storage quota can be dynamic, it can be updated to increase or decrease the quota for specific containers.\n+ * To listen on these changes, Enforcer would return a {@link StorageQuotaSource.Listener}.\n+ *\n+ * Container storage usage is changing all the the time because of expired blobs and compacted deleted blobs. That's the\n+ * reason why relying on the incoming traffic won't give you a correct answer about the current storage usage. For instance,\n+ * if 1GB blob is uploaded to containerA and the TTL for this blob is one day. Then one day later, without any traffic\n+ * from client, the storage usage for containerA becomes 0. Since the storage usage from {@link StorageUsageRefresher} is\n+ * the source of the truth, enforcer has to listen on the changes for storage usage and replace the value in memory with\n+ * the value from {@link StorageUsageRefresher}.\n+ */\n+public interface StorageQuotaEnforcer {\n+\n+  /**\n+   * Initialize the storage usage in {@link StorageQuotaEnforcer}.\n+   * @param usage The initial storage usage from {@link StorageUsageRefresher}.\n+   */\n+  void initStorageUsage(Map<String, Map<String, Long>> usage);\n+\n+  /**\n+   * Return a {@link StorageUsageRefresher.Listener} to listen on the change of current storage usage.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.\n+   * @return The {@link StorageUsageRefresher.Listener}.\n+   */\n+  StorageUsageRefresher.Listener getUsageRefresherListener();\n+\n+  /**\n+   * Initialize the storage quota in {@link StorageQuotaSource}.\n+   * @param quota The initial quota from {@link StorageQuotaSource}.\n+   */\n+  void initStorageQuota(Map<String, Map<String, Long>> quota);\n+\n+  /**\n+   * Return a {@link StorageQuotaSource.Listener} to listen on the change of storage quota.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MDg1OQ=="}, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NTM1NA==", "bodyText": "nit : @code -> @link", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503575354", "createdAt": "2020-10-12T22:59:07Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaServiceFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+/**\n+ * {@code StorageQuotaServiceFactory} is a factory to generate all the supporting cast required to instantiate an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NzA3OQ==", "bodyText": "typo in comment: The container usage map's key is the container id in string format", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503577079", "createdAt": "2020-10-12T23:04:57Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaSource.java", "diffHunk": "@@ -29,4 +29,20 @@\n    * @return The storage quota for each container.\n    */\n   Map<String, Map<String, Long>> getContainerQuota();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MDE1Nw==", "bodyText": "Looks like the intellij complains about casting and unboxing. Try changing it following way:\n    long quota = storageQuota.getOrDefault(String.valueOf(accountId), new HashMap<>())\n        .getOrDefault(String.valueOf(containerId), Long.MAX_VALUE);", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503580157", "createdAt": "2020-10-12T23:15:57Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\n+/**\n+ * A {@link StorageQuotaEnforcer} implementation. It keeps an in-memory map for storage quota and listens on the quota change\n+ * to update this in-memory map. It also keeps another in-memory map for storage usage of each container and listens on usage\n+ * change from {@link StorageUsageRefresher}.\n+ *\n+ * This implementation checks whether to throttle the operation only if the operation is {@link Operation#Upload}. And when the\n+ * targeted account and container doesn't have a quota specified, it doesn't throttle the operation at all. Any legitimate\n+ * uploads would also increase the storage usage in the in-memory map.\n+ */\n+public class AmbryStorageQuotaEnforcer implements StorageQuotaEnforcer {\n+  private volatile Mode mode = Mode.Tracking;\n+  private volatile Map<String, Map<String, Long>> storageQuota;\n+  private volatile Map<String, Map<String, Long>> storageUsage;\n+\n+  @Override\n+  public boolean shouldThrottle(short accountId, short containerId, Operation op, long size) {\n+    if (op != Operation.Upload) {\n+      return false;\n+    }\n+    long quota =\n+        ((Map<String, Long>) storageQuota.getOrDefault(String.valueOf(accountId), Collections.EMPTY_MAP)).getOrDefault(\n+            String.valueOf(containerId), Long.MAX_VALUE).longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MTQ5MA==", "bodyText": "Looks like unboxing is not necessary. So v.longValue() -> v", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503581490", "createdAt": "2020-10-12T23:20:59Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\n+/**\n+ * A {@link StorageQuotaEnforcer} implementation. It keeps an in-memory map for storage quota and listens on the quota change\n+ * to update this in-memory map. It also keeps another in-memory map for storage usage of each container and listens on usage\n+ * change from {@link StorageUsageRefresher}.\n+ *\n+ * This implementation checks whether to throttle the operation only if the operation is {@link Operation#Upload}. And when the\n+ * targeted account and container doesn't have a quota specified, it doesn't throttle the operation at all. Any legitimate\n+ * uploads would also increase the storage usage in the in-memory map.\n+ */\n+public class AmbryStorageQuotaEnforcer implements StorageQuotaEnforcer {\n+  private volatile Mode mode = Mode.Tracking;\n+  private volatile Map<String, Map<String, Long>> storageQuota;\n+  private volatile Map<String, Map<String, Long>> storageUsage;\n+\n+  @Override\n+  public boolean shouldThrottle(short accountId, short containerId, Operation op, long size) {\n+    if (op != Operation.Upload) {\n+      return false;\n+    }\n+    long quota =\n+        ((Map<String, Long>) storageQuota.getOrDefault(String.valueOf(accountId), Collections.EMPTY_MAP)).getOrDefault(\n+            String.valueOf(containerId), Long.MAX_VALUE).longValue();\n+\n+    AtomicBoolean exceedQuota = new AtomicBoolean(false);\n+    storageUsage.computeIfAbsent(String.valueOf(accountId), k -> new ConcurrentHashMap<>())\n+        .compute(String.valueOf(containerId), (k, v) -> {\n+          if (v == null) {\n+            return size;\n+          }\n+          if (v.longValue() + size < quota) {\n+            return v.longValue() + size;\n+          } else {\n+            exceedQuota.set(true);\n+            return v.longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MjQ1NA==", "bodyText": "return mode == Mode.Throttling ? exceedQuota.get() : false;", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503582454", "createdAt": "2020-10-12T23:24:31Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\n+/**\n+ * A {@link StorageQuotaEnforcer} implementation. It keeps an in-memory map for storage quota and listens on the quota change\n+ * to update this in-memory map. It also keeps another in-memory map for storage usage of each container and listens on usage\n+ * change from {@link StorageUsageRefresher}.\n+ *\n+ * This implementation checks whether to throttle the operation only if the operation is {@link Operation#Upload}. And when the\n+ * targeted account and container doesn't have a quota specified, it doesn't throttle the operation at all. Any legitimate\n+ * uploads would also increase the storage usage in the in-memory map.\n+ */\n+public class AmbryStorageQuotaEnforcer implements StorageQuotaEnforcer {\n+  private volatile Mode mode = Mode.Tracking;\n+  private volatile Map<String, Map<String, Long>> storageQuota;\n+  private volatile Map<String, Map<String, Long>> storageUsage;\n+\n+  @Override\n+  public boolean shouldThrottle(short accountId, short containerId, Operation op, long size) {\n+    if (op != Operation.Upload) {\n+      return false;\n+    }\n+    long quota =\n+        ((Map<String, Long>) storageQuota.getOrDefault(String.valueOf(accountId), Collections.EMPTY_MAP)).getOrDefault(\n+            String.valueOf(containerId), Long.MAX_VALUE).longValue();\n+\n+    AtomicBoolean exceedQuota = new AtomicBoolean(false);\n+    storageUsage.computeIfAbsent(String.valueOf(accountId), k -> new ConcurrentHashMap<>())\n+        .compute(String.valueOf(containerId), (k, v) -> {\n+          if (v == null) {\n+            return size;\n+          }\n+          if (v.longValue() + size < quota) {\n+            return v.longValue() + size;\n+          } else {\n+            exceedQuota.set(true);\n+            return v.longValue();\n+          }\n+        });\n+    if (mode == Mode.Throttling) {\n+      return exceedQuota.get();\n+    } else {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4NDQ5MQ==", "bodyText": "Every time we call getUsageRefresherListener(), it instantiates a new StorageUsageRefresher.Listener, is this intended?", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503584491", "createdAt": "2020-10-12T23:32:03Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\n+/**\n+ * A {@link StorageQuotaEnforcer} implementation. It keeps an in-memory map for storage quota and listens on the quota change\n+ * to update this in-memory map. It also keeps another in-memory map for storage usage of each container and listens on usage\n+ * change from {@link StorageUsageRefresher}.\n+ *\n+ * This implementation checks whether to throttle the operation only if the operation is {@link Operation#Upload}. And when the\n+ * targeted account and container doesn't have a quota specified, it doesn't throttle the operation at all. Any legitimate\n+ * uploads would also increase the storage usage in the in-memory map.\n+ */\n+public class AmbryStorageQuotaEnforcer implements StorageQuotaEnforcer {\n+  private volatile Mode mode = Mode.Tracking;\n+  private volatile Map<String, Map<String, Long>> storageQuota;\n+  private volatile Map<String, Map<String, Long>> storageUsage;\n+\n+  @Override\n+  public boolean shouldThrottle(short accountId, short containerId, Operation op, long size) {\n+    if (op != Operation.Upload) {\n+      return false;\n+    }\n+    long quota =\n+        ((Map<String, Long>) storageQuota.getOrDefault(String.valueOf(accountId), Collections.EMPTY_MAP)).getOrDefault(\n+            String.valueOf(containerId), Long.MAX_VALUE).longValue();\n+\n+    AtomicBoolean exceedQuota = new AtomicBoolean(false);\n+    storageUsage.computeIfAbsent(String.valueOf(accountId), k -> new ConcurrentHashMap<>())\n+        .compute(String.valueOf(containerId), (k, v) -> {\n+          if (v == null) {\n+            return size;\n+          }\n+          if (v.longValue() + size < quota) {\n+            return v.longValue() + size;\n+          } else {\n+            exceedQuota.set(true);\n+            return v.longValue();\n+          }\n+        });\n+    if (mode == Mode.Throttling) {\n+      return exceedQuota.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public void setMode(Mode mode) {\n+    this.mode = mode;\n+  }\n+\n+  @Override\n+  public void initStorageUsage(Map<String, Map<String, Long>> usage) {\n+    storageUsage = new ConcurrentHashMap<>();\n+    initMap(usage, storageUsage, true);\n+  }\n+\n+  @Override\n+  public void initStorageQuota(Map<String, Map<String, Long>> quota) {\n+    storageQuota = new HashMap<>();\n+    initMap(quota, storageQuota, false);\n+  }\n+\n+  @Override\n+  public StorageUsageRefresher.Listener getUsageRefresherListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4NDU5Mw==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503584593", "createdAt": "2020-10-12T23:32:27Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\n+/**\n+ * A {@link StorageQuotaEnforcer} implementation. It keeps an in-memory map for storage quota and listens on the quota change\n+ * to update this in-memory map. It also keeps another in-memory map for storage usage of each container and listens on usage\n+ * change from {@link StorageUsageRefresher}.\n+ *\n+ * This implementation checks whether to throttle the operation only if the operation is {@link Operation#Upload}. And when the\n+ * targeted account and container doesn't have a quota specified, it doesn't throttle the operation at all. Any legitimate\n+ * uploads would also increase the storage usage in the in-memory map.\n+ */\n+public class AmbryStorageQuotaEnforcer implements StorageQuotaEnforcer {\n+  private volatile Mode mode = Mode.Tracking;\n+  private volatile Map<String, Map<String, Long>> storageQuota;\n+  private volatile Map<String, Map<String, Long>> storageUsage;\n+\n+  @Override\n+  public boolean shouldThrottle(short accountId, short containerId, Operation op, long size) {\n+    if (op != Operation.Upload) {\n+      return false;\n+    }\n+    long quota =\n+        ((Map<String, Long>) storageQuota.getOrDefault(String.valueOf(accountId), Collections.EMPTY_MAP)).getOrDefault(\n+            String.valueOf(containerId), Long.MAX_VALUE).longValue();\n+\n+    AtomicBoolean exceedQuota = new AtomicBoolean(false);\n+    storageUsage.computeIfAbsent(String.valueOf(accountId), k -> new ConcurrentHashMap<>())\n+        .compute(String.valueOf(containerId), (k, v) -> {\n+          if (v == null) {\n+            return size;\n+          }\n+          if (v.longValue() + size < quota) {\n+            return v.longValue() + size;\n+          } else {\n+            exceedQuota.set(true);\n+            return v.longValue();\n+          }\n+        });\n+    if (mode == Mode.Throttling) {\n+      return exceedQuota.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public void setMode(Mode mode) {\n+    this.mode = mode;\n+  }\n+\n+  @Override\n+  public void initStorageUsage(Map<String, Map<String, Long>> usage) {\n+    storageUsage = new ConcurrentHashMap<>();\n+    initMap(usage, storageUsage, true);\n+  }\n+\n+  @Override\n+  public void initStorageQuota(Map<String, Map<String, Long>> quota) {\n+    storageQuota = new HashMap<>();\n+    initMap(quota, storageQuota, false);\n+  }\n+\n+  @Override\n+  public StorageUsageRefresher.Listener getUsageRefresherListener() {\n+    return new StorageUsageRefresher.Listener() {\n+      @Override\n+      public void onNewContainerStorageUsage(Map<String, Map<String, Long>> containerStorageUsage) {\n+        initMap(containerStorageUsage, storageUsage, true);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public StorageQuotaSource.Listener getQuotaSourceListener() {\n+    return new StorageQuotaSource.Listener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4NTk3NQ==", "bodyText": "Maybe out of scope but we should consider precluding deleted container in both storageUsage and storageQuota maps.", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503585975", "createdAt": "2020-10-12T23:37:35Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\n+/**\n+ * A {@link StorageQuotaEnforcer} implementation. It keeps an in-memory map for storage quota and listens on the quota change\n+ * to update this in-memory map. It also keeps another in-memory map for storage usage of each container and listens on usage\n+ * change from {@link StorageUsageRefresher}.\n+ *\n+ * This implementation checks whether to throttle the operation only if the operation is {@link Operation#Upload}. And when the\n+ * targeted account and container doesn't have a quota specified, it doesn't throttle the operation at all. Any legitimate\n+ * uploads would also increase the storage usage in the in-memory map.\n+ */\n+public class AmbryStorageQuotaEnforcer implements StorageQuotaEnforcer {\n+  private volatile Mode mode = Mode.Tracking;\n+  private volatile Map<String, Map<String, Long>> storageQuota;\n+  private volatile Map<String, Map<String, Long>> storageUsage;\n+\n+  @Override\n+  public boolean shouldThrottle(short accountId, short containerId, Operation op, long size) {\n+    if (op != Operation.Upload) {\n+      return false;\n+    }\n+    long quota =\n+        ((Map<String, Long>) storageQuota.getOrDefault(String.valueOf(accountId), Collections.EMPTY_MAP)).getOrDefault(\n+            String.valueOf(containerId), Long.MAX_VALUE).longValue();\n+\n+    AtomicBoolean exceedQuota = new AtomicBoolean(false);\n+    storageUsage.computeIfAbsent(String.valueOf(accountId), k -> new ConcurrentHashMap<>())\n+        .compute(String.valueOf(containerId), (k, v) -> {\n+          if (v == null) {\n+            return size;\n+          }\n+          if (v.longValue() + size < quota) {\n+            return v.longValue() + size;\n+          } else {\n+            exceedQuota.set(true);\n+            return v.longValue();\n+          }\n+        });\n+    if (mode == Mode.Throttling) {\n+      return exceedQuota.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public void setMode(Mode mode) {\n+    this.mode = mode;\n+  }\n+\n+  @Override\n+  public void initStorageUsage(Map<String, Map<String, Long>> usage) {\n+    storageUsage = new ConcurrentHashMap<>();\n+    initMap(usage, storageUsage, true);\n+  }\n+\n+  @Override\n+  public void initStorageQuota(Map<String, Map<String, Long>> quota) {\n+    storageQuota = new HashMap<>();\n+    initMap(quota, storageQuota, false);\n+  }\n+\n+  @Override\n+  public StorageUsageRefresher.Listener getUsageRefresherListener() {\n+    return new StorageUsageRefresher.Listener() {\n+      @Override\n+      public void onNewContainerStorageUsage(Map<String, Map<String, Long>> containerStorageUsage) {\n+        initMap(containerStorageUsage, storageUsage, true);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public StorageQuotaSource.Listener getQuotaSourceListener() {\n+    return new StorageQuotaSource.Listener() {\n+      @Override\n+      public void onNewContainerStorageQuota(Map<String, Map<String, Long>> containerStorageQuota) {\n+        Map<String, Map<String, Long>> newQuota = new HashMap<>();\n+        initMap(containerStorageQuota, newQuota, false);\n+        storageQuota = newQuota;\n+      }\n+    };\n+  }\n+\n+  private void initMap(Map<String, Map<String, Long>> mapWithValue, Map<String, Map<String, Long>> mapToInit,\n+      boolean concurrentMap) {\n+    for (Map.Entry<String, Map<String, Long>> mapEntry : mapWithValue.entrySet()) {\n+      Map<String, Long> innerMap = mapToInit.computeIfAbsent(mapEntry.getKey(),\n+          k -> concurrentMap ? new ConcurrentHashMap<>() : new HashMap<>());\n+      for (Map.Entry<String, Long> innerMapEntry : mapEntry.getValue().entrySet()) {\n+        // Replace the value in the map anyway.\n+        innerMap.put(innerMapEntry.getKey(), innerMapEntry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4NjU5Mg==", "bodyText": "typo: storageQuotaEnforcer", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503586592", "createdAt": "2020-10-12T23:40:03Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import com.github.ambry.config.StorageQuotaConfig;\n+import com.github.ambry.utils.Utils;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+/**\n+ * An implementation for {@link StorageQuotaService}.\n+ */\n+public class AmbryStorageQuotaService implements StorageQuotaService {\n+\n+  private final StorageUsageRefresher storageUsageRefresher;\n+  private final StorageQuotaSource storageQuotaSource;\n+  private final StorageQuotaEnforcer storageQuotaEnforer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5MjA1Ng==", "bodyText": "The scheduler will be used in future PR?", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503592056", "createdAt": "2020-10-12T23:52:27Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import com.github.ambry.config.StorageQuotaConfig;\n+import com.github.ambry.utils.Utils;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+/**\n+ * An implementation for {@link StorageQuotaService}.\n+ */\n+public class AmbryStorageQuotaService implements StorageQuotaService {\n+\n+  private final StorageUsageRefresher storageUsageRefresher;\n+  private final StorageQuotaSource storageQuotaSource;\n+  private final StorageQuotaEnforcer storageQuotaEnforer;\n+  private final ScheduledExecutorService scheduler;\n+  private final StorageQuotaConfig config;\n+\n+  public AmbryStorageQuotaService(StorageUsageRefresher storageUsageRefresher, StorageQuotaSource storageQuotaSource,\n+      StorageQuotaEnforcer storageQuotaEnforcer, ScheduledExecutorService scheduler, StorageQuotaConfig config) {\n+    this.storageUsageRefresher = Objects.requireNonNull(storageUsageRefresher, \"StorageUsageRefresher empty\");\n+    this.storageQuotaSource = Objects.requireNonNull(storageQuotaSource, \"StorageQuotaSource empty\");\n+    this.storageQuotaEnforer = Objects.requireNonNull(storageQuotaEnforcer, \"StorageQuotaEnforcer empty\");\n+    this.config = Objects.requireNonNull(config, \"StorageQuotaConfig empty\");\n+    this.scheduler = scheduler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5MzE0OA==", "bodyText": "unused import", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503593148", "createdAt": "2020-10-12T23:53:43Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaServiceFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.CommonUtils;\n+import com.github.ambry.config.HelixPropertyStoreConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5Mzk3OQ==", "bodyText": "I guess you wanted to pass metrics into AmbryStorageQuotaService", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503593979", "createdAt": "2020-10-12T23:55:12Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaServiceFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.CommonUtils;\n+import com.github.ambry.config.HelixPropertyStoreConfig;\n+import com.github.ambry.config.StorageQuotaConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.utils.Utils;\n+import java.util.concurrent.ScheduledExecutorService;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+\n+/**\n+ * An factory implementation for {@link StorageQuotaService}. It uses {@link HelixStorageUsageRefresher}, {@link JSONStringStorageQuotaSource}\n+ * and {@link AmbryStorageQuotaEnforcer}.\n+ */\n+public class AmbryStorageQuotaServiceFactory implements StorageQuotaServiceFactory {\n+  private static final String STORAGE_QUOTA_SERVICE_PREFIX = \"storage-quota-service\";\n+  private final StorageQuotaService storageQuotaService;\n+\n+  public AmbryStorageQuotaServiceFactory(VerifiableProperties verifiableProperties, MetricRegistry metricRegistry)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NTIyMQ==", "bodyText": "I think all of this can be instantiated in AmbryStorageQuotaService class. Hence, the constructor of AmbryStorageQuotaService can be simplified to:\npublic AmbryStorageQuotaService(StorageQuotaConfig config, StorageQuotaMetrics metrics)", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503595221", "createdAt": "2020-10-13T00:00:06Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaServiceFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.CommonUtils;\n+import com.github.ambry.config.HelixPropertyStoreConfig;\n+import com.github.ambry.config.StorageQuotaConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.utils.Utils;\n+import java.util.concurrent.ScheduledExecutorService;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+\n+/**\n+ * An factory implementation for {@link StorageQuotaService}. It uses {@link HelixStorageUsageRefresher}, {@link JSONStringStorageQuotaSource}\n+ * and {@link AmbryStorageQuotaEnforcer}.\n+ */\n+public class AmbryStorageQuotaServiceFactory implements StorageQuotaServiceFactory {\n+  private static final String STORAGE_QUOTA_SERVICE_PREFIX = \"storage-quota-service\";\n+  private final StorageQuotaService storageQuotaService;\n+\n+  public AmbryStorageQuotaServiceFactory(VerifiableProperties verifiableProperties, MetricRegistry metricRegistry)\n+      throws Exception {\n+    StorageQuotaConfig storageQuotaConfig = new StorageQuotaConfig(verifiableProperties);\n+\n+    HelixPropertyStore<ZNRecord> helixStore =\n+        CommonUtils.createHelixPropertyStore(storageQuotaConfig.zkClientConnectAddress,\n+            storageQuotaConfig.helixPropertyRootPath, null);\n+    ScheduledExecutorService scheduler = Utils.newScheduler(1, STORAGE_QUOTA_SERVICE_PREFIX, false);\n+    HelixStorageUsageRefresher storageUsageRefresher =\n+        new HelixStorageUsageRefresher(helixStore, scheduler, storageQuotaConfig);\n+    JSONStringStorageQuotaSource storageQuotaSource = new JSONStringStorageQuotaSource(storageQuotaConfig);\n+    AmbryStorageQuotaEnforcer storageQuotaEnforcer = new AmbryStorageQuotaEnforcer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NTMzNA==", "bodyText": "Remove this.", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r503595334", "createdAt": "2020-10-13T00:00:32Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/HelixStorageUsageRefresher.java", "diffHunk": "@@ -140,6 +140,7 @@ public void registerListener(Listener cb) {\n   private void refreshOnUpdate(String path) {\n     try {\n       Map<String, Map<String, Long>> storageUsage = fetchContainerStorageUsageFromPath(path);\n+      System.out.println(\"Getting this from update: \" + storageUsage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/5985526a67adc8b5f68c70f88e4c73c768dfea32", "committedDate": "2020-10-09T23:14:22Z", "message": "Add more tests"}, "afterCommit": {"oid": "84a9064a2f1b62e3a5a6980ade79871ad903442f", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/84a9064a2f1b62e3a5a6980ade79871ad903442f", "committedDate": "2020-10-13T06:20:22Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2522484370ea97389d0e023d1f755a4ceb391ab", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/d2522484370ea97389d0e023d1f755a4ceb391ab", "committedDate": "2020-10-13T17:51:25Z", "message": "More typos"}, "afterCommit": {"oid": "ffeddd7f28a122f0ed53b3602e33aa9c7e424367", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/ffeddd7f28a122f0ed53b3602e33aa9c7e424367", "committedDate": "2020-10-13T17:54:49Z", "message": "More typos"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NTExMDM0", "url": "https://github.com/linkedin/ambry/pull/1650#pullrequestreview-509511034", "createdAt": "2020-10-15T15:33:56Z", "commit": {"oid": "ffeddd7f28a122f0ed53b3602e33aa9c7e424367"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTozMzo1N1rOHiN2rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyMDowOVrOHiP1lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0MDYyMQ==", "bodyText": "The comments here are awesome. Thanks for adding detailed comments.", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r505640621", "createdAt": "2020-10-15T15:33:57Z", "author": {"login": "ankagrawal"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * {@link StorageQuotaEnforcer} enforces the traffic throttling based on the storage quota and the current storage usage.\n+ *\n+ * Each traffic that changes storage usage is targeted at a specific account and container. Enforcer enforces storage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffeddd7f28a122f0ed53b3602e33aa9c7e424367"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NDA0NQ==", "bodyText": "Why would getUsageRefresherListener() be called for an object that doesn't want to listen? When enforcer has to listen to the changes, it would just say StorageUsafeRefresher.addListener() or StorageQuotaRefresher.addListener(). If it doesn't want to listen, then it should not call addListener.", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r505654045", "createdAt": "2020-10-15T15:52:39Z", "author": {"login": "ankagrawal"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * {@link StorageQuotaEnforcer} enforces the traffic throttling based on the storage quota and the current storage usage.\n+ *\n+ * Each traffic that changes storage usage is targeted at a specific account and container. Enforcer enforces storage\n+ * quota on each container. Before evaluating any traffic, enforcer has to retrieve storage quota of each container from\n+ * {@link StorageQuotaSource} and current storage uasage of each container from {@link StorageUsageRefresher}, by calling\n+ * {@link #initStorageQuota} and {@link #initStorageUsage} respectively.\n+ *\n+ * Container storage quota can be dynamic, it can be updated to increase or decrease the quota for specific containers.\n+ * To listen on these changes, Enforcer would return a {@link StorageQuotaSource.Listener}.\n+ *\n+ * Container storage usage is changing all the the time because of expired blobs and compacted deleted blobs. That's the\n+ * reason why relying on the incoming traffic won't give you a correct answer about the current storage usage. For instance,\n+ * if 1GB blob is uploaded to containerA and the TTL for this blob is one day. Then one day later, without any traffic\n+ * from client, the storage usage for containerA becomes 0. Since the storage usage from {@link StorageUsageRefresher} is\n+ * the source of the truth, enforcer has to listen on the changes for storage usage and replace the value in memory with\n+ * the value from {@link StorageUsageRefresher}.\n+ */\n+public interface StorageQuotaEnforcer {\n+\n+  /**\n+   * Initialize the storage usage in {@link StorageQuotaEnforcer}.\n+   * @param usage The initial storage usage from {@link StorageUsageRefresher}.\n+   */\n+  void initStorageUsage(Map<String, Map<String, Long>> usage);\n+\n+  /**\n+   * Return a {@link StorageUsageRefresher.Listener} to listen on the change of current storage usage.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MTMwNQ=="}, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NTMyOA==", "bodyText": "See comments for getUsageRefresherListener", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r505655328", "createdAt": "2020-10-15T15:54:17Z", "author": {"login": "ankagrawal"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * {@link StorageQuotaEnforcer} enforces the traffic throttling based on the storage quota and the current storage usage.\n+ *\n+ * Each traffic that changes storage usage is targeted at a specific account and container. Enforcer enforces storage\n+ * quota on each container. Before evaluating any traffic, enforcer has to retrieve storage quota of each container from\n+ * {@link StorageQuotaSource} and current storage usage of each container from {@link StorageUsageRefresher}, by calling\n+ * {@link #initStorageQuota} and {@link #initStorageUsage} respectively.\n+ *\n+ * Container storage quota can be dynamic, it can be updated to increase or decrease the quota for specific containers.\n+ * To listen on these changes, Enforcer would return a {@link StorageQuotaSource.Listener}.\n+ *\n+ * Container storage usage is changing all the the time because of expired blobs and compacted deleted blobs. That's the\n+ * reason why relying on the incoming traffic won't give you a correct answer about the current storage usage. For instance,\n+ * if 1GB blob is uploaded to containerA and the TTL for this blob is one day. Then one day later, without any traffic\n+ * from client, the storage usage for containerA becomes 0. Since the storage usage from {@link StorageUsageRefresher} is\n+ * the source of the truth, enforcer has to listen on the changes for storage usage and replace the value in memory with\n+ * the value from {@link StorageUsageRefresher}.\n+ */\n+public interface StorageQuotaEnforcer {\n+\n+  /**\n+   * Initialize the storage usage in {@link StorageQuotaEnforcer}.\n+   * @param usage The initial storage usage from {@link StorageUsageRefresher}.\n+   */\n+  void initStorageUsage(Map<String, Map<String, Long>> usage);\n+\n+  /**\n+   * Return a {@link StorageUsageRefresher.Listener} to listen on the change of current storage usage.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.\n+   * @return The {@link StorageUsageRefresher.Listener}.\n+   */\n+  StorageUsageRefresher.Listener getUsageRefresherListener();\n+\n+  /**\n+   * Initialize the storage quota in {@link StorageQuotaSource}.\n+   * @param quota The initial quota from {@link StorageQuotaSource}.\n+   */\n+  void initStorageQuota(Map<String, Map<String, Long>> quota);\n+\n+  /**\n+   * Return a {@link StorageQuotaSource.Listener} to listen on the change of storage quota.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.\n+   * @return The {@link StorageQuotaSource.Listener}.\n+   */\n+  StorageQuotaSource.Listener getQuotaSourceListener();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffeddd7f28a122f0ed53b3602e33aa9c7e424367"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NTY4Mw==", "bodyText": "typo: \"if\" the  given ....", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r505655683", "createdAt": "2020-10-15T15:54:48Z", "author": {"login": "ankagrawal"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * {@link StorageQuotaEnforcer} enforces the traffic throttling based on the storage quota and the current storage usage.\n+ *\n+ * Each traffic that changes storage usage is targeted at a specific account and container. Enforcer enforces storage\n+ * quota on each container. Before evaluating any traffic, enforcer has to retrieve storage quota of each container from\n+ * {@link StorageQuotaSource} and current storage usage of each container from {@link StorageUsageRefresher}, by calling\n+ * {@link #initStorageQuota} and {@link #initStorageUsage} respectively.\n+ *\n+ * Container storage quota can be dynamic, it can be updated to increase or decrease the quota for specific containers.\n+ * To listen on these changes, Enforcer would return a {@link StorageQuotaSource.Listener}.\n+ *\n+ * Container storage usage is changing all the the time because of expired blobs and compacted deleted blobs. That's the\n+ * reason why relying on the incoming traffic won't give you a correct answer about the current storage usage. For instance,\n+ * if 1GB blob is uploaded to containerA and the TTL for this blob is one day. Then one day later, without any traffic\n+ * from client, the storage usage for containerA becomes 0. Since the storage usage from {@link StorageUsageRefresher} is\n+ * the source of the truth, enforcer has to listen on the changes for storage usage and replace the value in memory with\n+ * the value from {@link StorageUsageRefresher}.\n+ */\n+public interface StorageQuotaEnforcer {\n+\n+  /**\n+   * Initialize the storage usage in {@link StorageQuotaEnforcer}.\n+   * @param usage The initial storage usage from {@link StorageUsageRefresher}.\n+   */\n+  void initStorageUsage(Map<String, Map<String, Long>> usage);\n+\n+  /**\n+   * Return a {@link StorageUsageRefresher.Listener} to listen on the change of current storage usage.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.\n+   * @return The {@link StorageUsageRefresher.Listener}.\n+   */\n+  StorageUsageRefresher.Listener getUsageRefresherListener();\n+\n+  /**\n+   * Initialize the storage quota in {@link StorageQuotaSource}.\n+   * @param quota The initial quota from {@link StorageQuotaSource}.\n+   */\n+  void initStorageQuota(Map<String, Map<String, Long>> quota);\n+\n+  /**\n+   * Return a {@link StorageQuotaSource.Listener} to listen on the change of storage quota.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.\n+   * @return The {@link StorageQuotaSource.Listener}.\n+   */\n+  StorageQuotaSource.Listener getQuotaSourceListener();\n+\n+  /**\n+   * Return true if the given {@link QuotaOperation} should be throttled.\n+   * @param accountId The accountId of this operation.\n+   * @param containerId The containerId of this operation.\n+   * @param op The {@link QuotaOperation}.\n+   * @param size The size of this operation. eg, if the op is {@link QuotaOperation#Post}, size if the size of the content.\n+   * @return True is the given {@link QuotaOperation} should be throttled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffeddd7f28a122f0ed53b3602e33aa9c7e424367"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1ODYyOQ==", "bodyText": "Is StorageQuotaEnforcer going to be per container or for all containers. If it is going to be for all the containers, then is there a possibility that different containers might have different QuotaModes? If it is per container, then maybe we should remove containerId and accountId arguments from shouldThrottle.", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r505658629", "createdAt": "2020-10-15T15:58:46Z", "author": {"login": "ankagrawal"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * {@link StorageQuotaEnforcer} enforces the traffic throttling based on the storage quota and the current storage usage.\n+ *\n+ * Each traffic that changes storage usage is targeted at a specific account and container. Enforcer enforces storage\n+ * quota on each container. Before evaluating any traffic, enforcer has to retrieve storage quota of each container from\n+ * {@link StorageQuotaSource} and current storage usage of each container from {@link StorageUsageRefresher}, by calling\n+ * {@link #initStorageQuota} and {@link #initStorageUsage} respectively.\n+ *\n+ * Container storage quota can be dynamic, it can be updated to increase or decrease the quota for specific containers.\n+ * To listen on these changes, Enforcer would return a {@link StorageQuotaSource.Listener}.\n+ *\n+ * Container storage usage is changing all the the time because of expired blobs and compacted deleted blobs. That's the\n+ * reason why relying on the incoming traffic won't give you a correct answer about the current storage usage. For instance,\n+ * if 1GB blob is uploaded to containerA and the TTL for this blob is one day. Then one day later, without any traffic\n+ * from client, the storage usage for containerA becomes 0. Since the storage usage from {@link StorageUsageRefresher} is\n+ * the source of the truth, enforcer has to listen on the changes for storage usage and replace the value in memory with\n+ * the value from {@link StorageUsageRefresher}.\n+ */\n+public interface StorageQuotaEnforcer {\n+\n+  /**\n+   * Initialize the storage usage in {@link StorageQuotaEnforcer}.\n+   * @param usage The initial storage usage from {@link StorageUsageRefresher}.\n+   */\n+  void initStorageUsage(Map<String, Map<String, Long>> usage);\n+\n+  /**\n+   * Return a {@link StorageUsageRefresher.Listener} to listen on the change of current storage usage.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.\n+   * @return The {@link StorageUsageRefresher.Listener}.\n+   */\n+  StorageUsageRefresher.Listener getUsageRefresherListener();\n+\n+  /**\n+   * Initialize the storage quota in {@link StorageQuotaSource}.\n+   * @param quota The initial quota from {@link StorageQuotaSource}.\n+   */\n+  void initStorageQuota(Map<String, Map<String, Long>> quota);\n+\n+  /**\n+   * Return a {@link StorageQuotaSource.Listener} to listen on the change of storage quota.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.\n+   * @return The {@link StorageQuotaSource.Listener}.\n+   */\n+  StorageQuotaSource.Listener getQuotaSourceListener();\n+\n+  /**\n+   * Return true if the given {@link QuotaOperation} should be throttled.\n+   * @param accountId The accountId of this operation.\n+   * @param containerId The containerId of this operation.\n+   * @param op The {@link QuotaOperation}.\n+   * @param size The size of this operation. eg, if the op is {@link QuotaOperation#Post}, size if the size of the content.\n+   * @return True is the given {@link QuotaOperation} should be throttled.\n+   */\n+  boolean shouldThrottle(short accountId, short containerId, QuotaOperation op, long size);\n+\n+  /**\n+   * Change the {@link StorageQuotaEnforcer}'s mode to the given value. If the mode is {@link QuotaMode#Tracking}, then {@link StorageQuotaEnforcer}\n+   * should never return true in {@link #shouldThrottle} method.\n+   * @param mode The new value for {@link QuotaMode}.\n+   */\n+  void setQuotaMode(QuotaMode mode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffeddd7f28a122f0ed53b3602e33aa9c7e424367"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2NDAxNg==", "bodyText": "Its not clear to me whats the difference between StorageQuotaService and StorageQuotaEnforcer. This interface seems to have same methods as StorageQuotaEnforcer.", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r505664016", "createdAt": "2020-10-15T16:06:23Z", "author": {"login": "ankagrawal"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import com.github.ambry.account.Account;\n+import com.github.ambry.account.Container;\n+\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffeddd7f28a122f0ed53b3602e33aa9c7e424367"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3MTgxMQ==", "bodyText": "It should be this class' responsibility to register listener to AmbryStorageQuotaService. Instead of returning Listener objects, this class should create the object and AmbryStorageQuotaService.registerListener(listener). This will make things simple, as the only responsibility of AmbryStorageQuotaService will be to called listener that are registered by consumers. Also the AmbryStorageQuotaEnforcer doesn't need to do anything if it doesn't want to listen.", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r505671811", "createdAt": "2020-10-15T16:18:00Z", "author": {"login": "ankagrawal"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\n+/**\n+ * A {@link StorageQuotaEnforcer} implementation. It keeps an in-memory map for storage quota and listens on the quota change\n+ * to update this in-memory map. It also keeps another in-memory map for storage usage of each container and listens on usage\n+ * change from {@link StorageUsageRefresher}.\n+ *\n+ * This implementation checks whether to throttle the operation only if the operation is {@link QuotaOperation#Post}. And when the\n+ * targeted account and container doesn't have a quota specified, it doesn't throttle the operation at all. Any legitimate\n+ * uploads would also increase the storage usage in the in-memory map.\n+ */\n+public class AmbryStorageQuotaEnforcer implements StorageQuotaEnforcer {\n+  private volatile QuotaMode mode = QuotaMode.Tracking;\n+  private volatile Map<String, Map<String, Long>> storageQuota;\n+  private volatile Map<String, Map<String, Long>> storageUsage;\n+\n+  @Override\n+  public boolean shouldThrottle(short accountId, short containerId, QuotaOperation op, long size) {\n+    if (op != QuotaOperation.Post) {\n+      return false;\n+    }\n+    long quota = storageQuota.getOrDefault(String.valueOf(accountId), new HashMap<>())\n+        .getOrDefault(String.valueOf(containerId), Long.MAX_VALUE);\n+\n+    AtomicBoolean exceedQuota = new AtomicBoolean(false);\n+    storageUsage.computeIfAbsent(String.valueOf(accountId), k -> new ConcurrentHashMap<>())\n+        .compute(String.valueOf(containerId), (k, v) -> {\n+          if (v == null) {\n+            return size;\n+          }\n+          if (v + size < quota) {\n+            return v + size;\n+          } else {\n+            exceedQuota.set(true);\n+            return v;\n+          }\n+        });\n+    return mode == QuotaMode.Throttling ? exceedQuota.get() : false;\n+  }\n+\n+  @Override\n+  public void setQuotaMode(QuotaMode mode) {\n+    this.mode = mode;\n+  }\n+\n+  @Override\n+  public void initStorageUsage(Map<String, Map<String, Long>> usage) {\n+    storageUsage = new ConcurrentHashMap<>();\n+    initMap(usage, storageUsage, true);\n+  }\n+\n+  @Override\n+  public void initStorageQuota(Map<String, Map<String, Long>> quota) {\n+    storageQuota = new HashMap<>();\n+    initMap(quota, storageQuota, false);\n+  }\n+\n+  @Override\n+  public StorageUsageRefresher.Listener getUsageRefresherListener() {\n+    return new StorageUsageRefresher.Listener() {\n+      @Override\n+      public void onNewContainerStorageUsage(Map<String, Map<String, Long>> containerStorageUsage) {\n+        initMap(containerStorageUsage, storageUsage, true);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public StorageQuotaSource.Listener getQuotaSourceListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffeddd7f28a122f0ed53b3602e33aa9c7e424367"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3MzExMQ==", "bodyText": "javadocs?", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r505673111", "createdAt": "2020-10-15T16:20:09Z", "author": {"login": "ankagrawal"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\n+/**\n+ * A {@link StorageQuotaEnforcer} implementation. It keeps an in-memory map for storage quota and listens on the quota change\n+ * to update this in-memory map. It also keeps another in-memory map for storage usage of each container and listens on usage\n+ * change from {@link StorageUsageRefresher}.\n+ *\n+ * This implementation checks whether to throttle the operation only if the operation is {@link QuotaOperation#Post}. And when the\n+ * targeted account and container doesn't have a quota specified, it doesn't throttle the operation at all. Any legitimate\n+ * uploads would also increase the storage usage in the in-memory map.\n+ */\n+public class AmbryStorageQuotaEnforcer implements StorageQuotaEnforcer {\n+  private volatile QuotaMode mode = QuotaMode.Tracking;\n+  private volatile Map<String, Map<String, Long>> storageQuota;\n+  private volatile Map<String, Map<String, Long>> storageUsage;\n+\n+  @Override\n+  public boolean shouldThrottle(short accountId, short containerId, QuotaOperation op, long size) {\n+    if (op != QuotaOperation.Post) {\n+      return false;\n+    }\n+    long quota = storageQuota.getOrDefault(String.valueOf(accountId), new HashMap<>())\n+        .getOrDefault(String.valueOf(containerId), Long.MAX_VALUE);\n+\n+    AtomicBoolean exceedQuota = new AtomicBoolean(false);\n+    storageUsage.computeIfAbsent(String.valueOf(accountId), k -> new ConcurrentHashMap<>())\n+        .compute(String.valueOf(containerId), (k, v) -> {\n+          if (v == null) {\n+            return size;\n+          }\n+          if (v + size < quota) {\n+            return v + size;\n+          } else {\n+            exceedQuota.set(true);\n+            return v;\n+          }\n+        });\n+    return mode == QuotaMode.Throttling ? exceedQuota.get() : false;\n+  }\n+\n+  @Override\n+  public void setQuotaMode(QuotaMode mode) {\n+    this.mode = mode;\n+  }\n+\n+  @Override\n+  public void initStorageUsage(Map<String, Map<String, Long>> usage) {\n+    storageUsage = new ConcurrentHashMap<>();\n+    initMap(usage, storageUsage, true);\n+  }\n+\n+  @Override\n+  public void initStorageQuota(Map<String, Map<String, Long>> quota) {\n+    storageQuota = new HashMap<>();\n+    initMap(quota, storageQuota, false);\n+  }\n+\n+  @Override\n+  public StorageUsageRefresher.Listener getUsageRefresherListener() {\n+    return new StorageUsageRefresher.Listener() {\n+      @Override\n+      public void onNewContainerStorageUsage(Map<String, Map<String, Long>> containerStorageUsage) {\n+        initMap(containerStorageUsage, storageUsage, true);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public StorageQuotaSource.Listener getQuotaSourceListener() {\n+    return new StorageQuotaSource.Listener() {\n+      @Override\n+      public void onNewContainerStorageQuota(Map<String, Map<String, Long>> containerStorageQuota) {\n+        Map<String, Map<String, Long>> newQuota = new HashMap<>();\n+        initMap(containerStorageQuota, newQuota, false);\n+        storageQuota = newQuota;\n+      }\n+    };\n+  }\n+\n+  private void initMap(Map<String, Map<String, Long>> mapWithValue, Map<String, Map<String, Long>> mapToInit,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffeddd7f28a122f0ed53b3602e33aa9c7e424367"}, "originalPosition": 99}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c1e2db29e93c5fe672c24f05cff5bccff4d82ff", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/5c1e2db29e93c5fe672c24f05cff5bccff4d82ff", "committedDate": "2020-10-15T23:33:24Z", "message": "Address comments"}, "afterCommit": {"oid": "d1e212e204f2db17b34154b168c1cf7a99d5a80f", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/d1e212e204f2db17b34154b168c1cf7a99d5a80f", "committedDate": "2020-10-16T00:06:45Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzgwMjU1", "url": "https://github.com/linkedin/ambry/pull/1650#pullrequestreview-510780255", "createdAt": "2020-10-16T20:30:51Z", "commit": {"oid": "d1e212e204f2db17b34154b168c1cf7a99d5a80f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDozMDo1MVrOHjO72g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDozMDo1MVrOHjO72g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwNjkwNg==", "bodyText": "I understand that. I guess I didn't make it clear previously. The comment is together with the comment in AmbryStorageQuotaServiceFactory class where I suggested moving scheduler, quotaSource etc into  AmbryStorageQuotaService ctor.  That comment was resolved but I didn't see the change. Did I miss anything?", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r506706906", "createdAt": "2020-10-16T20:30:51Z", "author": {"login": "jsjtzyy"}, "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import com.github.ambry.config.StorageQuotaConfig;\n+import com.github.ambry.utils.Utils;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+/**\n+ * An implementation for {@link StorageQuotaService}.\n+ */\n+public class AmbryStorageQuotaService implements StorageQuotaService {\n+\n+  private final StorageUsageRefresher storageUsageRefresher;\n+  private final StorageQuotaSource storageQuotaSource;\n+  private final StorageQuotaEnforcer storageQuotaEnforer;\n+  private final ScheduledExecutorService scheduler;\n+  private final StorageQuotaConfig config;\n+\n+  public AmbryStorageQuotaService(StorageUsageRefresher storageUsageRefresher, StorageQuotaSource storageQuotaSource,\n+      StorageQuotaEnforcer storageQuotaEnforcer, ScheduledExecutorService scheduler, StorageQuotaConfig config) {\n+    this.storageUsageRefresher = Objects.requireNonNull(storageUsageRefresher, \"StorageUsageRefresher empty\");\n+    this.storageQuotaSource = Objects.requireNonNull(storageQuotaSource, \"StorageQuotaSource empty\");\n+    this.storageQuotaEnforer = Objects.requireNonNull(storageQuotaEnforcer, \"StorageQuotaEnforcer empty\");\n+    this.config = Objects.requireNonNull(config, \"StorageQuotaConfig empty\");\n+    this.scheduler = scheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5MjA1Ng=="}, "originalCommit": {"oid": "5985526a67adc8b5f68c70f88e4c73c768dfea32"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODgxNDMw", "url": "https://github.com/linkedin/ambry/pull/1650#pullrequestreview-511881430", "createdAt": "2020-10-19T15:21:29Z", "commit": {"oid": "d1e212e204f2db17b34154b168c1cf7a99d5a80f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNToyMToyOVrOHkUGaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNToyMToyOVrOHkUGaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0MDEwNA==", "bodyText": "Nit: maybe name it setGlobalQuotaMode to make it explicit.", "url": "https://github.com/linkedin/ambry/pull/1650#discussion_r507840104", "createdAt": "2020-10-19T15:21:29Z", "author": {"login": "ankagrawal"}, "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * {@link StorageQuotaEnforcer} enforces the traffic throttling based on the storage quota and the current storage usage.\n+ *\n+ * Each traffic that changes storage usage is targeted at a specific account and container. Enforcer enforces storage\n+ * quota on each container. Before evaluating any traffic, enforcer has to retrieve storage quota of each container from\n+ * {@link StorageQuotaSource} and current storage usage of each container from {@link StorageUsageRefresher}, by calling\n+ * {@link #initStorageQuota} and {@link #initStorageUsage} respectively.\n+ *\n+ * Container storage quota can be dynamic, it can be updated to increase or decrease the quota for specific containers.\n+ * To listen on these changes, Enforcer would return a {@link StorageQuotaSource.Listener}.\n+ *\n+ * Container storage usage is changing all the the time because of expired blobs and compacted deleted blobs. That's the\n+ * reason why relying on the incoming traffic won't give you a correct answer about the current storage usage. For instance,\n+ * if 1GB blob is uploaded to containerA and the TTL for this blob is one day. Then one day later, without any traffic\n+ * from client, the storage usage for containerA becomes 0. Since the storage usage from {@link StorageUsageRefresher} is\n+ * the source of the truth, enforcer has to listen on the changes for storage usage and replace the value in memory with\n+ * the value from {@link StorageUsageRefresher}.\n+ */\n+public interface StorageQuotaEnforcer {\n+\n+  /**\n+   * Initialize the storage usage in {@link StorageQuotaEnforcer}.\n+   * @param usage The initial storage usage from {@link StorageUsageRefresher}.\n+   */\n+  void initStorageUsage(Map<String, Map<String, Long>> usage);\n+\n+  /**\n+   * Return a {@link StorageUsageRefresher.Listener} to listen on the change of current storage usage.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.\n+   * @return The {@link StorageUsageRefresher.Listener}.\n+   */\n+  StorageUsageRefresher.Listener getUsageRefresherListener();\n+\n+  /**\n+   * Initialize the storage quota in {@link StorageQuotaSource}.\n+   * @param quota The initial quota from {@link StorageQuotaSource}.\n+   */\n+  void initStorageQuota(Map<String, Map<String, Long>> quota);\n+\n+  /**\n+   * Return a {@link StorageQuotaSource.Listener} to listen on the change of storage quota.\n+   * Return null if {@link StorageQuotaEnforcer} doesn't want to listen on the changes.\n+   * @return The {@link StorageQuotaSource.Listener}.\n+   */\n+  StorageQuotaSource.Listener getQuotaSourceListener();\n+\n+  /**\n+   * Return true if the given {@link QuotaOperation} should be throttled.\n+   * @param accountId The accountId of this operation.\n+   * @param containerId The containerId of this operation.\n+   * @param op The {@link QuotaOperation}.\n+   * @param size The size of this operation. eg, if the op is {@link QuotaOperation#Post}, size if the size of the content.\n+   * @return True is the given {@link QuotaOperation} should be throttled.\n+   */\n+  boolean shouldThrottle(short accountId, short containerId, QuotaOperation op, long size);\n+\n+  /**\n+   * Change the {@link StorageQuotaEnforcer}'s mode to the given value. If the mode is {@link QuotaMode#Tracking}, then {@link StorageQuotaEnforcer}\n+   * should never return true in {@link #shouldThrottle} method.\n+   * @param mode The new value for {@link QuotaMode}.\n+   */\n+  void setQuotaMode(QuotaMode mode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1ODYyOQ=="}, "originalCommit": {"oid": "ffeddd7f28a122f0ed53b3602e33aa9c7e424367"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a4fb4b31058ade6baad5da88e787d9f8ab69651", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/0a4fb4b31058ade6baad5da88e787d9f8ab69651", "committedDate": "2020-10-19T23:05:30Z", "message": "[StorageQuota] Adding StorageQuotaEnforcer and StorageQuotaService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58d694fd1c2a4b20f3e957a1b87c350d11b903c1", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/58d694fd1c2a4b20f3e957a1b87c350d11b903c1", "committedDate": "2020-10-19T23:05:30Z", "message": "Add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e52b30001a2d5d62583ad7f71abdfad5235a11", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/d4e52b30001a2d5d62583ad7f71abdfad5235a11", "committedDate": "2020-10-19T23:05:30Z", "message": "Add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5ab3cc47c033047279c19bfe02347371b3a08d9", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/d5ab3cc47c033047279c19bfe02347371b3a08d9", "committedDate": "2020-10-19T23:05:30Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cb78731cef19d328befa284b4819d1560f9c7a5", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/4cb78731cef19d328befa284b4819d1560f9c7a5", "committedDate": "2020-10-19T23:05:30Z", "message": "Fix typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19ed3281d3b75cd1e54e14732d7386e911ba0e09", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/19ed3281d3b75cd1e54e14732d7386e911ba0e09", "committedDate": "2020-10-19T23:05:30Z", "message": "More typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daa6c658fedb5cbc9eea4c67b493d7d65c4597f1", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/daa6c658fedb5cbc9eea4c67b493d7d65c4597f1", "committedDate": "2020-10-19T23:05:30Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1e212e204f2db17b34154b168c1cf7a99d5a80f", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/d1e212e204f2db17b34154b168c1cf7a99d5a80f", "committedDate": "2020-10-16T00:06:45Z", "message": "Address comments"}, "afterCommit": {"oid": "daa6c658fedb5cbc9eea4c67b493d7d65c4597f1", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/daa6c658fedb5cbc9eea4c67b493d7d65c4597f1", "committedDate": "2020-10-19T23:05:30Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25c6496f806b941b80e40a7ff9e53edbcac07d21", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/25c6496f806b941b80e40a7ff9e53edbcac07d21", "committedDate": "2020-10-20T21:19:50Z", "message": "Address commments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 928, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}