{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwODI4ODU3", "number": 1711, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDo1MToyMlrOE_380A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzoyOTo0MFrOFH96wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDEyNDMyOnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/AmbryServerDataNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDo1MToyMlrOH90ZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDo1MToyMlrOH90ZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU4MzY5Mw==", "bodyText": "It seems like this method getPortToConnectTo only returns the port to replication. If so, can you also update the comment in the interface for future reference?", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r534583693", "createdAt": "2020-12-03T00:51:22Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/AmbryServerDataNode.java", "diffHunk": "@@ -58,13 +59,17 @@\n     this.rackId = rackId;\n     this.xid = xid;\n     this.sslEnabledDataCenters = Utils.splitString(clusterMapConfig.clusterMapSslEnabledDatacenters, \",\");\n+    this.enableHttp2Replication = clusterMapConfig.clusterMapEnableHttp2Replication;\n     this.clusterManagerCallback = clusterManagerCallback;\n     validateHostName(clusterMapConfig.clusterMapResolveHostnames, hostName);\n     validatePorts(plainTextPort, sslPort, http2Port, sslEnabledDataCenters.contains(dataCenterName));\n   }\n \n   @Override\n   public Port getPortToConnectTo() {\n+    if (enableHttp2Replication) {\n+      return http2Port;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8a1fde596b5a4edb84c2d73fbd1aae470b3513"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDIzNDgwOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMTozNTowNVrOH91a3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMTozNTowNVrOH91a3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYwMDQxMg==", "bodyText": "this not going to work, since the underlying input stream for getResponse is a DataInputStream not a NettyByteBufDataInputStream. check out line 1072.\nWe can make ChannelOutput return DataInputStream in getInputStream method, this would fix the problem.", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r534600412", "createdAt": "2020-12-03T01:35:05Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -715,12 +717,16 @@ void fixMissingStoreKeys(ConnectedChannel connectedChannel, List<RemoteReplicaIn\n             + \" should be the same and greater than zero\");\n       }\n       DataNodeId remoteNode = replicasToReplicatePerNode.get(0).getReplicaId().getDataNodeId();\n-      GetResponse getResponse =\n+      getResponse =\n           getMessagesForMissingKeys(connectedChannel, exchangeMetadataResponseList, replicasToReplicatePerNode,\n               remoteNode, remoteColoGetRequestForStandby);\n       writeMessagesToLocalStoreAndAdvanceTokens(exchangeMetadataResponseList, getResponse, replicasToReplicatePerNode,\n           remoteNode, remoteColoGetRequestForStandby);\n     } finally {\n+      if (getResponse != null && getResponse.getInputStream() instanceof NettyByteBufDataInputStream) {\n+        // if the InputStream is NettyByteBufDataInputStream based, it's time to release its buffer.\n+        ((NettyByteBufDataInputStream) (getResponse.getInputStream())).getBuffer().release();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8a1fde596b5a4edb84c2d73fbd1aae470b3513"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDI0NzEzOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouterFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMTo0MDowMVrOH91iJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMTo0MDowMVrOH91iJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYwMjI3OA==", "bodyText": "logger? or maybe remove?", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r534602278", "createdAt": "2020-12-03T01:40:01Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouterFactory.java", "diffHunk": "@@ -98,10 +98,12 @@ public NonBlockingRouterFactory(VerifiableProperties verifiableProperties, Clust\n     time = SystemTime.getInstance();\n     if (new RouterConfig(verifiableProperties).routerEnableHttp2NetworkClient) {\n       networkClientFactory = new Http2NetworkClientFactory(http2ClientMetrics, http2ClientConfig, sslFactory, time);\n+      System.out.println(\"enable routerEnableHttp2NetworkClient\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8a1fde596b5a4edb84c2d73fbd1aae470b3513"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDI0NzU3OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouterFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMTo0MDowOVrOH91iaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMTo0MDowOVrOH91iaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYwMjM0NA==", "bodyText": "same above.", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r534602344", "createdAt": "2020-12-03T01:40:09Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouterFactory.java", "diffHunk": "@@ -98,10 +98,12 @@ public NonBlockingRouterFactory(VerifiableProperties verifiableProperties, Clust\n     time = SystemTime.getInstance();\n     if (new RouterConfig(verifiableProperties).routerEnableHttp2NetworkClient) {\n       networkClientFactory = new Http2NetworkClientFactory(http2ClientMetrics, http2ClientConfig, sslFactory, time);\n+      System.out.println(\"enable routerEnableHttp2NetworkClient\");\n     } else {\n       networkClientFactory = new SocketNetworkClientFactory(networkMetrics, networkConfig, sslFactory,\n           routerConfig.routerScalingUnitMaxConnectionsPerPortPlainText,\n           routerConfig.routerScalingUnitMaxConnectionsPerPortSsl, routerConfig.routerConnectionCheckoutTimeoutMs, time);\n+      System.out.println(\"not enable routerEnableHttp2NetworkClient\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8a1fde596b5a4edb84c2d73fbd1aae470b3513"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDkzNTk4OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjoyMzoyMVrOH-3wVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjoyMzoyMVrOH-3wVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY4NzI1Mw==", "bodyText": "replace 8 with Long.BYTES", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r535687253", "createdAt": "2020-12-03T22:23:21Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannel.java", "diffHunk": "@@ -112,7 +112,9 @@ public ChannelOutput receive() throws IOException {\n       throw new IOException(\"Failed to receive response from \" + getRemoteHost() + \":\" + getRemotePort(), e);\n     }\n     DataInputStream dataInputStream = new NettyByteBufDataInputStream(responseByteBuf);\n-    return new ChannelOutput(dataInputStream, dataInputStream.readLong());\n+    // Because readLong() is called to get entire stream size(long),\n+    // the size of remaining data should be dataInputStream.readLong() - 8\n+    return new ChannelOutput(dataInputStream, dataInputStream.readLong() - 8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8a1fde596b5a4edb84c2d73fbd1aae470b3513"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTAwMjQwOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo0MTozOVrOH-4VwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOToyNzoxN1rOIA22HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5NjgzMg==", "bodyText": "Do you think we will eventually use DataNodeId.getPortToConnectTo in the router too? If so, we may want to change the config name to clusterMapEnableHttp2Client (and deprecate the router config at some point) so that it makes sense for both the router and replication.", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r535696832", "createdAt": "2020-12-03T22:41:39Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "diffHunk": "@@ -228,7 +228,7 @@ public void startup() throws InstantiationException {\n \n       SSLFactory sslFactory = new NettySslHttp2Factory(sslConfig);\n \n-      if (replicationConfig.replicationEnableHttp2) {\n+      if (clusterMapConfig.clusterMapEnableHttp2Replication) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8a1fde596b5a4edb84c2d73fbd1aae470b3513"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc2OTUwMQ==", "bodyText": "Yes.\nI had an old comment:\n  /**\n   * A temporary method to get port before http2 based replication is implemented.\n   * TODO: remove this once http2 based replication is implemented.\n   * @param replicaId The {@link ReplicaId} to connect to.\n   * @param routerEnableHttp2NetworkClient  if http2 network client should be enabled.\n   * @return the port to connect.\n   */\n  static Port getPortToConnectTo(ReplicaId replicaId, boolean routerEnableHttp2NetworkClient) {\n    if (routerEnableHttp2NetworkClient) {\n      return new Port(replicaId.getDataNodeId().getHttp2Port(), PortType.HTTP2);\n    } else {\n      return replicaId.getDataNodeId().getPortToConnectTo();\n    }\n  }\n\nThe plan is:\n\nApply this PR and verify http2 replication works\nDeprecate sslEnabledDataCenters and routerEnableHttp2NetworkClient. Rename clusterMapEnableHttp2Replication to clusterMapEnableHttp2.\n\nAfter deprecating sslEnabledDataCenters, the default connection is SSL based, if clusterMapEnableHttp2 is enabled, it's Http2 based.\nBoth frontend and server will be accessible to  clusterMapEnableHttp2.", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r537769501", "createdAt": "2020-12-07T19:27:17Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "diffHunk": "@@ -228,7 +228,7 @@ public void startup() throws InstantiationException {\n \n       SSLFactory sslFactory = new NettySslHttp2Factory(sslConfig);\n \n-      if (replicationConfig.replicationEnableHttp2) {\n+      if (clusterMapConfig.clusterMapEnableHttp2Replication) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5NjgzMg=="}, "originalCommit": {"oid": "6b8a1fde596b5a4edb84c2d73fbd1aae470b3513"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODMxMjk5OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/network/ChannelOutput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToxMjo1MFrOIJjDFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToyOTozMlrOIJjefg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4MjMyNA==", "bodyText": "remove this?", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r546882324", "createdAt": "2020-12-21T19:12:50Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/network/ChannelOutput.java", "diffHunk": "@@ -22,19 +23,23 @@\n  */\n public class ChannelOutput {\n \n-  private InputStream inputStream;\n+  private DataInputStream inputStream;\n \n   private long streamSize;\n \n-  public ChannelOutput(InputStream inputStream, long streamSize) {\n+  public ChannelOutput(DataInputStream inputStream, long streamSize) {\n     this.inputStream = inputStream;\n     this.streamSize = streamSize;\n   }\n \n-  public InputStream getInputStream() {\n+  public DataInputStream getInputStream() {\n     return inputStream;\n   }\n \n+//  public DataInputStream getDataInputStream() {\n+//\n+//  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f00094f28ef0dae754f03ad3e8c256e19de553c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4OTM0Mg==", "bodyText": "my latest changes were not in. just pushed.", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r546889342", "createdAt": "2020-12-21T19:29:32Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com/github/ambry/network/ChannelOutput.java", "diffHunk": "@@ -22,19 +23,23 @@\n  */\n public class ChannelOutput {\n \n-  private InputStream inputStream;\n+  private DataInputStream inputStream;\n \n   private long streamSize;\n \n-  public ChannelOutput(InputStream inputStream, long streamSize) {\n+  public ChannelOutput(DataInputStream inputStream, long streamSize) {\n     this.inputStream = inputStream;\n     this.streamSize = streamSize;\n   }\n \n-  public InputStream getInputStream() {\n+  public DataInputStream getInputStream() {\n     return inputStream;\n   }\n \n+//  public DataInputStream getDataInputStream() {\n+//\n+//  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4MjMyNA=="}, "originalCommit": {"oid": "3f00094f28ef0dae754f03ad3e8c256e19de553c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODczMTY1OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com/github/ambry/server/CloudAndStoreReplicationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo0NTo0NFrOIJm45w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo0NTo0NFrOIJm45w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk0NTI1NQ==", "bodyText": "nit: remove necessary DataInputStream import.", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r546945255", "createdAt": "2020-12-21T21:45:44Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/CloudAndStoreReplicationTest.java", "diffHunk": "@@ -301,7 +301,7 @@ private void testGetOnServerNode(Map<BlobId, Integer> blobIdToSizeMap, DataNodeI\n \n     channel.send(getRequest);\n     GetResponse getResponse =\n-        GetResponse.readFrom(new DataInputStream(channel.receive().getInputStream()), recoveryCluster.getClusterMap());\n+        GetResponse.readFrom(channel.receive().getInputStream(), recoveryCluster.getClusterMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283538dec736126875386f07233e48a2d301d7b8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODczNTU2OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com/github/ambry/server/DirectSender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo0NzowM1rOIJm7IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo0NzowM1rOIJm7IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk0NTgyNQ==", "bodyText": "same here for InputStream", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r546945825", "createdAt": "2020-12-21T21:47:03Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/DirectSender.java", "diffHunk": "@@ -23,6 +23,7 @@\n import com.github.ambry.network.ConnectedChannel;\n import com.github.ambry.protocol.PutRequest;\n import com.github.ambry.protocol.PutResponse;\n+import com.github.ambry.utils.NettyByteBufDataInputStream;\n import io.netty.buffer.Unpooled;\n import java.io.DataInputStream;\n import java.io.InputStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283538dec736126875386f07233e48a2d301d7b8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODc0Mzk5OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com/github/ambry/server/ServerHardDeleteTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo1MDoxN1rOIJnAFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo1MDoxN1rOIJnAFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk0NzA5NQ==", "bodyText": "Minor: can be simplified to\nPutResponse response0 = PutResponse.readFrom(channel.sendAndReceive(putRequest0).getInputStream());", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r546947095", "createdAt": "2020-12-21T21:50:17Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/ServerHardDeleteTest.java", "diffHunk": "@@ -389,8 +389,8 @@ void putBlob(BlobId blobId, BlobProperties properties, byte[] encryptionKey, byt\n         new PutRequest(1, \"client1\", blobId, properties, ByteBuffer.wrap(usermetadata), Unpooled.wrappedBuffer(data),\n             properties.getBlobSize(), BlobType.DataBlob, encryptionKey == null ? null : ByteBuffer.wrap(encryptionKey));\n     channel.send(putRequest0);\n-    InputStream putResponseStream = channel.receive().getInputStream();\n-    PutResponse response0 = PutResponse.readFrom(new DataInputStream(putResponseStream));\n+    DataInputStream putResponseStream = channel.receive().getInputStream();\n+    PutResponse response0 = PutResponse.readFrom(putResponseStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283538dec736126875386f07233e48a2d301d7b8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODc0NDkwOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com/github/ambry/server/ServerHardDeleteTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo1MDozOVrOIJnAog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo1MDozOVrOIJnAog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk0NzIzNA==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r546947234", "createdAt": "2020-12-21T21:50:39Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/ServerHardDeleteTest.java", "diffHunk": "@@ -403,8 +403,8 @@ void putBlob(BlobId blobId, BlobProperties properties, byte[] encryptionKey, byt\n   void deleteBlob(BlobId blobId, ConnectedChannel channel) throws IOException {\n     DeleteRequest deleteRequest = new DeleteRequest(1, \"client1\", blobId, time.milliseconds());\n     channel.send(deleteRequest);\n-    InputStream deleteResponseStream = channel.receive().getInputStream();\n-    DeleteResponse deleteResponse = DeleteResponse.readFrom(new DataInputStream(deleteResponseStream));\n+    DataInputStream deleteResponseStream = channel.receive().getInputStream();\n+    DeleteResponse deleteResponse = DeleteResponse.readFrom(deleteResponseStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283538dec736126875386f07233e48a2d301d7b8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODc0NTcyOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com/github/ambry/server/ServerHardDeleteTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo1MDo1OVrOIJnBJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo1MDo1OVrOIJnBJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk0NzM2NA==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r546947364", "createdAt": "2020-12-21T21:50:59Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/ServerHardDeleteTest.java", "diffHunk": "@@ -417,8 +417,8 @@ void deleteBlob(BlobId blobId, ConnectedChannel channel) throws IOException {\n   void undeleteBlob(BlobId blobId, ConnectedChannel channel) throws IOException {\n     UndeleteRequest deleteRequest = new UndeleteRequest(1, \"client1\", blobId, time.milliseconds());\n     channel.send(deleteRequest);\n-    InputStream undeleteResponseStream = channel.receive().getInputStream();\n-    UndeleteResponse undeleteResponse = UndeleteResponse.readFrom(new DataInputStream(undeleteResponseStream));\n+    DataInputStream undeleteResponseStream = channel.receive().getInputStream();\n+    UndeleteResponse undeleteResponse = UndeleteResponse.readFrom(undeleteResponseStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283538dec736126875386f07233e48a2d301d7b8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODc0NjYzOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com/github/ambry/server/ServerHardDeleteTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo1MToxNlrOIJnBoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo1MToxNlrOIJnBoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk0NzQ4OQ==", "bodyText": "same here (I noticed other files may be simplified too, it's ok to defer such simplification to future PR)", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r546947489", "createdAt": "2020-12-21T21:51:16Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/ServerHardDeleteTest.java", "diffHunk": "@@ -456,8 +456,8 @@ void getAndVerify(ConnectedChannel channel, int blobsCount) throws Exception {\n     for (MessageFormatFlags flag : flags) {\n       GetRequest getRequest = new GetRequest(1, \"clientid2\", flag, partitionRequestInfoList, GetOption.Include_All);\n       channel.send(getRequest);\n-      InputStream stream = channel.receive().getInputStream();\n-      GetResponse resp = GetResponse.readFrom(new DataInputStream(stream), mockClusterMap);\n+      DataInputStream stream = channel.receive().getInputStream();\n+      GetResponse resp = GetResponse.readFrom(stream, mockClusterMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283538dec736126875386f07233e48a2d301d7b8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODk4ODE4OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com/github/ambry/server/ServerTestUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzoyOTo0MFrOIJpNvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzoyOTo0MFrOIJpNvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk4MzM1Nw==", "bodyText": "nit: copy paste error?", "url": "https://github.com/linkedin/ambry/pull/1711#discussion_r546983357", "createdAt": "2020-12-21T23:29:40Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/ServerTestUtil.java", "diffHunk": "@@ -2866,7 +2866,7 @@ static PutMessageFormatInputStream getPutMessageInputStreamForBlob(BlobId blobId\n     return blobIds;\n   }\n \n-  /**\n+  /*CloudAndStoreReplicationTest.java*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad55181cf7564ebadee6fe87ce816336c0d1d9c4"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1155, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}