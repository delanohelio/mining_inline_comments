{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwODE5Mzk2", "number": 1495, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoxODoyN1rOD4Im2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoxODoyN1rOD4Im2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTg3ODY3OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoxODoyN1rOGOy24Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODozMjowOVrOGO1dPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2NjQ5Nw==", "bodyText": "nit: Can we create a Http2BlokcingChannelConfig to encapsulate those values?", "url": "https://github.com/linkedin/ambry/pull/1495#discussion_r418166497", "createdAt": "2020-04-30T17:18:27Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannel.java", "diffHunk": "@@ -74,16 +75,23 @@\n   private static final Logger logger = LoggerFactory.getLogger(Http2BlockingChannel.class);\n   private final static AttributeKey<Promise<ByteBuf>> RESPONSE_PROMISE = AttributeKey.newInstance(\"ResponsePromise\");\n   private final String hostName;\n+  private final int readBufferSize;\n+  private final int writeBufferSize;\n+  private final int http2InitialWindowSize;\n   private final SSLFactory sslFactory;\n   private final int port;\n   private EventLoopGroup workerGroup;\n   private Channel channel;\n   private Promise<ByteBuf> responsePromise;\n   private Http2StreamChannelBootstrap http2StreamChannelBootstrap;\n \n-  public Http2BlockingChannel(String hostName, int port, SSLConfig sslConfig) {\n+  public Http2BlockingChannel(String hostName, int port, SSLConfig sslConfig, int readBufferSize, int writeBufferSize,\n+      int http2InitialWindowSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6d7d1e8abac70b1f2871513e1fdf24c6697cb2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwOTA4Nw==", "bodyText": "Prefer to do it in this way. BlockingChannel is also doing the similar thing. It would be hard for test code refactor if Http2BlokcingChannelConfig  is introduced.", "url": "https://github.com/linkedin/ambry/pull/1495#discussion_r418209087", "createdAt": "2020-04-30T18:32:09Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannel.java", "diffHunk": "@@ -74,16 +75,23 @@\n   private static final Logger logger = LoggerFactory.getLogger(Http2BlockingChannel.class);\n   private final static AttributeKey<Promise<ByteBuf>> RESPONSE_PROMISE = AttributeKey.newInstance(\"ResponsePromise\");\n   private final String hostName;\n+  private final int readBufferSize;\n+  private final int writeBufferSize;\n+  private final int http2InitialWindowSize;\n   private final SSLFactory sslFactory;\n   private final int port;\n   private EventLoopGroup workerGroup;\n   private Channel channel;\n   private Promise<ByteBuf> responsePromise;\n   private Http2StreamChannelBootstrap http2StreamChannelBootstrap;\n \n-  public Http2BlockingChannel(String hostName, int port, SSLConfig sslConfig) {\n+  public Http2BlockingChannel(String hostName, int port, SSLConfig sslConfig, int readBufferSize, int writeBufferSize,\n+      int http2InitialWindowSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2NjQ5Nw=="}, "originalCommit": {"oid": "eb6d7d1e8abac70b1f2871513e1fdf24c6697cb2"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1536, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}