{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDU5ODUz", "number": 1482, "title": "Introduce helixAccountService to Ambry Server and get Containers by status", "bodyText": "This PR supports below part of stages for container deletion compaction phase.\n\nImplement getContainersByStatus in helixAccountService, so it can query DELETE_IN_PROGRESS containers from ZooKeeper.\nIntroduce helixAccountService to Ambry Server, so BlobStoreCompactor is able to get containers by status through helixAccountService.\nAdd unit test to check getContainersByStatus() in helixAccountServiceTest.\n\nPlease reference the detail below:\nCompaction is the place to delete blobs from DELETE_IN_PROGRESS containers.\nCompaction runs in cycles and it copies valid data to new log segments in each cycle. The valid data is defined as [\u201cnot deleted\u201d && \u201cnot expired\u201d && \u201cstill in the retention time window if deleted or expired\u201d]. We expand the definition of valid data to [\u201cnot deleted\u201d && \u201cnot expired\u201d && \u201cstill in the retention time window if deleted or expired\u201d && \u201cnot from DELETE_IN_PROGRESS container\u201d]. Then all blobs in DELETE_IN_PROGRESS are considered as invalid data and should be compacted.", "createdAt": "2020-04-21T06:08:43Z", "url": "https://github.com/linkedin/ambry/pull/1482", "merged": true, "mergeCommit": {"oid": "c41261b7df3d41f67b974083a47957c80e1feb2a"}, "closed": true, "closedAt": "2020-05-04T22:57:28Z", "author": {"login": "SophieGuo410"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ1dnFAFqTM5NzQ0ODIyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcethWfAFqTQwNjkwNjIyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDQ4MjIy", "url": "https://github.com/linkedin/ambry/pull/1482#pullrequestreview-397448222", "createdAt": "2020-04-21T15:30:20Z", "commit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNTozMDoyM1rOGJMEdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNTozMToyOVrOGJMHeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4ODExOQ==", "bodyText": "To allow for plugable implementations of AccountService, it would be best to use reflection to instantiate the account service. Doing so will allow us to start ambry-server in environments where zookeeper is not running, such as the quickstart on the github readme. See https://github.com/linkedin/ambry/blob/master/ambry-rest/src/main/java/com/github/ambry/rest/RestServer.java#L171 for an example of how to use Utils.getObj to instantiate AccountService.", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r412288119", "createdAt": "2020-04-21T15:30:23Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "diffHunk": "@@ -164,10 +166,13 @@ public void startup() throws InstantiationException {\n             + \"is not present in the clustermap. Failing to start the datanode\");\n       }\n \n+      HelixAccountServiceFactory helixAccountServiceFactory = new HelixAccountServiceFactory(properties, registry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4ODg4OA==", "bodyText": "This method seems like it can be generalized to all implementations of AccountService (just have to switch out accountInfoMapRef.get().getAccounts() for getAllAccounts() and implemented as a default method in the interface.\nI was also wondering if there is a reason for returning Pair<Short, Short> instead of the Container objects themselves? Container has a getParentAccountId method that can be used to get the account ID. I can understand using pair though if the user of this method needs to check for set membership a lot.", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r412288888", "createdAt": "2020-04-21T15:31:29Z", "author": {"login": "cgtz"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -392,5 +393,22 @@ AccountServiceMetrics getAccountServiceMetrics() {\n   BackupFileManager getBackupFileManager() {\n     return backupFileManager;\n   }\n+\n+  /**\n+   * It gets a collection of {@link Account}s' and {@link Container}s' Id pairs selected by\n+   * {@link com.github.ambry.account.Container.ContainerStatus}.\n+   */\n+  @Override\n+  public Set<Pair<Short,Short>> getContainersByStatus(Container.ContainerStatus containerStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDgwOTg5", "url": "https://github.com/linkedin/ambry/pull/1482#pullrequestreview-398480989", "createdAt": "2020-04-22T18:50:50Z", "commit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo1MDo1MFrOGKF0Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo1MjozMVrOGKF5HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNDI1NA==", "bodyText": "+1\nI also recommend to return a set of Container rather than a set of accountId and containerId.", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413234254", "createdAt": "2020-04-22T18:50:50Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -392,5 +393,22 @@ AccountServiceMetrics getAccountServiceMetrics() {\n   BackupFileManager getBackupFileManager() {\n     return backupFileManager;\n   }\n+\n+  /**\n+   * It gets a collection of {@link Account}s' and {@link Container}s' Id pairs selected by\n+   * {@link com.github.ambry.account.Container.ContainerStatus}.\n+   */\n+  @Override\n+  public Set<Pair<Short,Short>> getContainersByStatus(Container.ContainerStatus containerStatus) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4ODg4OA=="}, "originalCommit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTQ4NA==", "bodyText": "nit: we don't have to explicitly mark it public since all methods in an interface is public.", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413235484", "createdAt": "2020-04-22T18:52:31Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/account/AccountService.java", "diffHunk": "@@ -103,4 +105,10 @@\n    *          exist.\n    */\n   public boolean removeAccountUpdateConsumer(Consumer<Collection<Account>> accountUpdateConsumer);\n+\n+  /**\n+   * It gets a collection of {@link Account}s' and {@link Container}s' Id pairs selected by\n+   * {@link com.github.ambry.account.Container.ContainerStatus}.\n+   */\n+  public Set<Pair<Short,Short>> getContainersByStatus(Container.ContainerStatus containerStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDkyNzMx", "url": "https://github.com/linkedin/ambry/pull/1482#pullrequestreview-398492731", "createdAt": "2020-04-22T19:05:49Z", "commit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTowNTo0OVrOGKGf1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTowOTo0NFrOGKGpaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NTM5OQ==", "bodyText": "Looks like the comment is a little off with the code.\n\nTests {@link AccountService#getContainersByStatus(ContainerStatus)} with generated containes", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413245399", "createdAt": "2020-04-22T19:05:49Z", "author": {"login": "zzmao"}, "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -202,6 +203,51 @@ public void testCreateAccount() {\n     assertAccountsInAccountService(idToRefAccountMap.values(), NUM_REF_ACCOUNT, accountService);\n   }\n \n+  /**\n+   * Tests generates a collection of reference {@link Account}s and {@link Container}s that can be referred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NTYyNg==", "bodyText": "aslo assert containers status are expected.", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413245626", "createdAt": "2020-04-22T19:06:08Z", "author": {"login": "zzmao"}, "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -202,6 +203,51 @@ public void testCreateAccount() {\n     assertAccountsInAccountService(idToRefAccountMap.values(), NUM_REF_ACCOUNT, accountService);\n   }\n \n+  /**\n+   * Tests generates a collection of reference {@link Account}s and {@link Container}s that can be referred\n+   * from {@link #idToRefAccountMap} and {@link #idToRefContainerMap}. And it also generate a collection of\n+   * the {@link Container}s through {@link HelixAccountService} with selected {@link ContainerStatus}\n+   */\n+  @Test\n+  public void testGetContainerByStatus() throws Exception {\n+    // a set that records the account ids that have already been taken.\n+    Set accountIdSet = new HashSet<>();\n+    // generate a single reference account and container that can be referenced by refAccount and refContainer respectively.\n+    refAccountId = Utils.getRandomShort(random);\n+    accountIdSet.add(refAccountId);\n+    generateRefAccounts(idToRefAccountMap, idToRefContainerMap, accountIdSet, 5,\n+        2);\n+\n+    accountService = mockHelixAccountServiceFactory.getAccountService();\n+    accountService.updateAccounts(idToRefAccountMap.values());\n+    assertAccountsInAccountService(idToRefAccountMap.values(), 5, accountService);\n+\n+    List<Account> accountsToUpdate = new ArrayList<>();\n+    int cnt = 0;\n+    for (Account account : accountService.getAllAccounts()) {\n+      AccountBuilder accountBuilder = new AccountBuilder(account);\n+      for (Container container : account.getAllContainers()) {\n+        if (cnt%2 == 0) {\n+          ContainerBuilder containerBuilder = new ContainerBuilder(container);\n+          containerBuilder.setId((short) (-1 * (container.getId())));\n+          containerBuilder.setName(container.getName() + \"-extra\");\n+          containerBuilder.setStatus(ContainerStatus.DELETE_IN_PROGRESS);\n+          containerBuilder.setDescription(container.getDescription() + \"--extra\");\n+          containerBuilder.setReplicationPolicy(container.getReplicationPolicy() + \"---extra\");\n+          containerBuilder.setTtlRequired(container.isTtlRequired());\n+          accountBuilder.addOrUpdateContainer(containerBuilder.build());\n+        }\n+        cnt++;\n+      }\n+      accountsToUpdate.add(accountBuilder.build());\n+    }\n+\n+    updateAccountsAndAssertAccountExistence(accountsToUpdate, 5, true);\n+    Set<Pair<Short,Short>> containerList = accountService.getContainersByStatus(ContainerStatus.DELETE_IN_PROGRESS);\n+    assertEquals(\"Wrong number of containers in containerList\", 5,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NjYwOQ==", "bodyText": "Start with verb?", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413246609", "createdAt": "2020-04-22T19:07:45Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com/github/ambry/account/AccountService.java", "diffHunk": "@@ -103,4 +105,10 @@\n    *          exist.\n    */\n   public boolean removeAccountUpdateConsumer(Consumer<Collection<Account>> accountUpdateConsumer);\n+\n+  /**\n+   * It gets a collection of {@link Account}s' and {@link Container}s' Id pairs selected by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0Nzg0OA==", "bodyText": "Use option + command + l to format code.", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413247848", "createdAt": "2020-04-22T19:09:44Z", "author": {"login": "zzmao"}, "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -202,6 +203,51 @@ public void testCreateAccount() {\n     assertAccountsInAccountService(idToRefAccountMap.values(), NUM_REF_ACCOUNT, accountService);\n   }\n \n+  /**\n+   * Tests generates a collection of reference {@link Account}s and {@link Container}s that can be referred\n+   * from {@link #idToRefAccountMap} and {@link #idToRefContainerMap}. And it also generate a collection of\n+   * the {@link Container}s through {@link HelixAccountService} with selected {@link ContainerStatus}\n+   */\n+  @Test\n+  public void testGetContainerByStatus() throws Exception {\n+    // a set that records the account ids that have already been taken.\n+    Set accountIdSet = new HashSet<>();\n+    // generate a single reference account and container that can be referenced by refAccount and refContainer respectively.\n+    refAccountId = Utils.getRandomShort(random);\n+    accountIdSet.add(refAccountId);\n+    generateRefAccounts(idToRefAccountMap, idToRefContainerMap, accountIdSet, 5,\n+        2);\n+\n+    accountService = mockHelixAccountServiceFactory.getAccountService();\n+    accountService.updateAccounts(idToRefAccountMap.values());\n+    assertAccountsInAccountService(idToRefAccountMap.values(), 5, accountService);\n+\n+    List<Account> accountsToUpdate = new ArrayList<>();\n+    int cnt = 0;\n+    for (Account account : accountService.getAllAccounts()) {\n+      AccountBuilder accountBuilder = new AccountBuilder(account);\n+      for (Container container : account.getAllContainers()) {\n+        if (cnt%2 == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8df48a8154677cb0ff2005be491395a8b4473a9", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/a8df48a8154677cb0ff2005be491395a8b4473a9", "committedDate": "2020-04-28T04:14:31Z", "message": "Introduce helixAccountService to AmbryServer and get Containers by status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbc966428397c18b14222cfb85a3ece4509d3f3e", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/dbc966428397c18b14222cfb85a3ece4509d3f3e", "committedDate": "2020-04-28T04:16:31Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f3a27e025174daf20a9143c3643e9a1a5337928", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/5f3a27e025174daf20a9143c3643e9a1a5337928", "committedDate": "2020-04-21T05:53:21Z", "message": "Introduce helixAccountService to AmbryServer and get Containers by status"}, "afterCommit": {"oid": "dbc966428397c18b14222cfb85a3ece4509d3f3e", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/dbc966428397c18b14222cfb85a3ece4509d3f3e", "committedDate": "2020-04-28T04:16:31Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26cf4045ee37a2f2c3638c7dbca9d5553be12980", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/26cf4045ee37a2f2c3638c7dbca9d5553be12980", "committedDate": "2020-04-28T05:39:27Z", "message": "remove redundant import and methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9760a82f16199cacdaa7b9ef1e910c1a8d9436e0", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/9760a82f16199cacdaa7b9ef1e910c1a8d9436e0", "committedDate": "2020-04-28T05:47:38Z", "message": "remove unused import statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "042330550821074c659dfd014f32e7243e107738", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/042330550821074c659dfd014f32e7243e107738", "committedDate": "2020-04-28T21:45:43Z", "message": "change config default"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjYwNjk4", "url": "https://github.com/linkedin/ambry/pull/1482#pullrequestreview-402260698", "createdAt": "2020-04-28T22:36:23Z", "commit": {"oid": "042330550821074c659dfd014f32e7243e107738"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjozNjoyM1rOGNph9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjozNjoyM1rOGNph9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2NTExMA==", "bodyText": "Why not use the same factory as RestServer does?\ncom.github.ambry.account.InMemoryUnknownAccountServiceFactory", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r416965110", "createdAt": "2020-04-28T22:36:23Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/config/ServerConfig.java", "diffHunk": "@@ -92,14 +92,21 @@\n   @Config(\"server.validate.request.based.on.store.state\")\n   @Default(\"false\")\n   public final boolean serverValidateRequestBasedOnStoreState;\n-  \n+\n   /**\n    * True to enable ambry server handling undelete requests.\n    */\n   @Config(\"server.handle.undelete.request.enabled\")\n   @Default(\"false\")\n   public final boolean serverHandleUndeleteRequestEnabled;\n \n+  /**\n+   * Implementation class for HelixAccountServiceFactory\n+   */\n+  @Config(\"server.account.service.factory\")\n+  @Default(\"com.github.ambry.account.InMemAccountServiceFactory\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042330550821074c659dfd014f32e7243e107738"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDQ5NjI3", "url": "https://github.com/linkedin/ambry/pull/1482#pullrequestreview-403049627", "createdAt": "2020-04-29T21:22:39Z", "commit": {"oid": "eb1149b8ebdad3fa19fe3abe0a6ad11195cd4a62"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MzI4NTYy", "url": "https://github.com/linkedin/ambry/pull/1482#pullrequestreview-405328562", "createdAt": "2020-05-04T20:37:55Z", "commit": {"oid": "eb1149b8ebdad3fa19fe3abe0a6ad11195cd4a62"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDozNzo1NVrOGQRQSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDozNzo1NVrOGQRQSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMzA5Nw==", "bodyText": "{@link Container}s in the given status.", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r419713097", "createdAt": "2020-05-04T20:37:55Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com/github/ambry/account/AccountService.java", "diffHunk": "@@ -103,4 +105,20 @@\n    *          exist.\n    */\n   public boolean removeAccountUpdateConsumer(Consumer<Collection<Account>> accountUpdateConsumer);\n+\n+  /**\n+   * Gets a collection of {@link Container}s' selected by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1149b8ebdad3fa19fe3abe0a6ad11195cd4a62"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035895b0d45a79d134b474c5a34e4f719072952e", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/035895b0d45a79d134b474c5a34e4f719072952e", "committedDate": "2020-05-04T22:14:51Z", "message": "change config default and update comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb1149b8ebdad3fa19fe3abe0a6ad11195cd4a62", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/eb1149b8ebdad3fa19fe3abe0a6ad11195cd4a62", "committedDate": "2020-04-28T23:30:02Z", "message": "change config default"}, "afterCommit": {"oid": "035895b0d45a79d134b474c5a34e4f719072952e", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/035895b0d45a79d134b474c5a34e4f719072952e", "committedDate": "2020-05-04T22:14:51Z", "message": "change config default and update comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2OTA2MjIx", "url": "https://github.com/linkedin/ambry/pull/1482#pullrequestreview-406906221", "createdAt": "2020-05-06T19:05:57Z", "commit": {"oid": "035895b0d45a79d134b474c5a34e4f719072952e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowNTo1N1rOGRhXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowNTo1N1rOGRhXqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyNTcwNA==", "bodyText": "nit:  accountServiceFactory -> serverAccountServiceFactory", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r421025704", "createdAt": "2020-05-06T19:05:57Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/config/ServerConfig.java", "diffHunk": "@@ -92,14 +92,21 @@\n   @Config(\"server.validate.request.based.on.store.state\")\n   @Default(\"false\")\n   public final boolean serverValidateRequestBasedOnStoreState;\n-  \n+\n   /**\n    * True to enable ambry server handling undelete requests.\n    */\n   @Config(\"server.handle.undelete.request.enabled\")\n   @Default(\"false\")\n   public final boolean serverHandleUndeleteRequestEnabled;\n \n+  /**\n+   * Implementation class for accountServiceFactory\n+   */\n+  @Config(\"server.account.service.factory\")\n+  @Default(\"com.github.ambry.account.InMemoryUnknownAccountServiceFactory\")\n+  public final String accountServiceFactory;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "035895b0d45a79d134b474c5a34e4f719072952e"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1409, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}