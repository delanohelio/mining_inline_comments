{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTI0MDkz", "number": 1483, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo0MzozMlrOD0c2TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzozOTozNlrOD0fHKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzI1MTk2OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo0MzozMlrOGJZwbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDo1NDoyMlrOGJjT2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMjM2NQ==", "bodyText": "nit: add space in between sentences.", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412512365", "createdAt": "2020-04-21T21:43:32Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java", "diffHunk": "@@ -67,6 +69,23 @@\n   @Default(\"25 * 1024 * 1024\")\n   public final int http2MaxContentLength;\n \n+  /**\n+   * The maximum allowed http2 frame size.This value is used to represent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680912a8070ab8aa6b9f346f99a80a2f3d7ba909"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2ODg4OQ==", "bodyText": "sure.", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412668889", "createdAt": "2020-04-22T04:54:22Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java", "diffHunk": "@@ -67,6 +69,23 @@\n   @Default(\"25 * 1024 * 1024\")\n   public final int http2MaxContentLength;\n \n+  /**\n+   * The maximum allowed http2 frame size.This value is used to represent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMjM2NQ=="}, "originalCommit": {"oid": "680912a8070ab8aa6b9f346f99a80a2f3d7ba909"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzQ3NzUxOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjo1MDoyN1rOGJbuug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjo1NTozNlrOGKAzSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDY5OA==", "bodyText": "Do we want to have both the log messages in Http2FrameLogger and this handler? They can potentially be redundant, but I do see that this class also logs ambry request info, which could be useful.", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412544698", "createdAt": "2020-04-21T22:50:27Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2DataFrame;\n+import io.netty.handler.codec.http2.Http2Frame;\n+import io.netty.handler.codec.http2.Http2HeadersFrame;\n+import io.netty.util.ReferenceCountUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A handler to stats response streams.\n+ */\n+\n+@ChannelHandler.Sharable\n+class Http2ClientStreamStatsHandler extends SimpleChannelInboundHandler<Http2Frame> {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Http2NetworkClient http2NetworkClient;\n+\n+  public Http2ClientStreamStatsHandler(Http2NetworkClient http2NetworkClient) {\n+    this.http2NetworkClient = http2NetworkClient;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws Exception {\n+    ReferenceCountUtil.retain(frame);\n+    RequestInfo requestInfo = ctx.channel().attr(Http2NetworkClient.REQUEST_INFO).get();\n+    requestInfo.responseFramesCount++;\n+    if (frame instanceof Http2HeadersFrame) {\n+      requestInfo.setStreamHeaderFrameReceiveTime(System.currentTimeMillis());\n+      http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n+          System.currentTimeMillis() - requestInfo.getStreamSendTime());\n+      logger.debug(\"Header Frame received. Request: {}\", requestInfo.toString());\n+    } else if (frame instanceof Http2DataFrame) {\n+      logger.debug(\"Data Frame size: {}. Request: {}\", ((Http2DataFrame) frame).content().readableBytes(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2OTIxMQ==", "bodyText": "It's easy to enable this debug level with your script, but I guess it doesn't work to Netty?", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412669211", "createdAt": "2020-04-22T04:55:33Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2DataFrame;\n+import io.netty.handler.codec.http2.Http2Frame;\n+import io.netty.handler.codec.http2.Http2HeadersFrame;\n+import io.netty.util.ReferenceCountUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A handler to stats response streams.\n+ */\n+\n+@ChannelHandler.Sharable\n+class Http2ClientStreamStatsHandler extends SimpleChannelInboundHandler<Http2Frame> {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Http2NetworkClient http2NetworkClient;\n+\n+  public Http2ClientStreamStatsHandler(Http2NetworkClient http2NetworkClient) {\n+    this.http2NetworkClient = http2NetworkClient;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws Exception {\n+    ReferenceCountUtil.retain(frame);\n+    RequestInfo requestInfo = ctx.channel().attr(Http2NetworkClient.REQUEST_INFO).get();\n+    requestInfo.responseFramesCount++;\n+    if (frame instanceof Http2HeadersFrame) {\n+      requestInfo.setStreamHeaderFrameReceiveTime(System.currentTimeMillis());\n+      http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n+          System.currentTimeMillis() - requestInfo.getStreamSendTime());\n+      logger.debug(\"Header Frame received. Request: {}\", requestInfo.toString());\n+    } else if (frame instanceof Http2DataFrame) {\n+      logger.debug(\"Data Frame size: {}. Request: {}\", ((Http2DataFrame) frame).content().readableBytes(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDY5OA=="}, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MjA3Mg==", "bodyText": "It works with netty too. I guess since these are separate classes they can be turned on/off independently and both may help with debugging", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r413152072", "createdAt": "2020-04-22T16:55:36Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2DataFrame;\n+import io.netty.handler.codec.http2.Http2Frame;\n+import io.netty.handler.codec.http2.Http2HeadersFrame;\n+import io.netty.util.ReferenceCountUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A handler to stats response streams.\n+ */\n+\n+@ChannelHandler.Sharable\n+class Http2ClientStreamStatsHandler extends SimpleChannelInboundHandler<Http2Frame> {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Http2NetworkClient http2NetworkClient;\n+\n+  public Http2ClientStreamStatsHandler(Http2NetworkClient http2NetworkClient) {\n+    this.http2NetworkClient = http2NetworkClient;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws Exception {\n+    ReferenceCountUtil.retain(frame);\n+    RequestInfo requestInfo = ctx.channel().attr(Http2NetworkClient.REQUEST_INFO).get();\n+    requestInfo.responseFramesCount++;\n+    if (frame instanceof Http2HeadersFrame) {\n+      requestInfo.setStreamHeaderFrameReceiveTime(System.currentTimeMillis());\n+      http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n+          System.currentTimeMillis() - requestInfo.getStreamSendTime());\n+      logger.debug(\"Header Frame received. Request: {}\", requestInfo.toString());\n+    } else if (frame instanceof Http2DataFrame) {\n+      logger.debug(\"Data Frame size: {}. Request: {}\", ((Http2DataFrame) frame).content().readableBytes(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDY5OA=="}, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzQ4MzA2OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjo1MjoxNFrOGJbxwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDo1NTo0M1rOGJjVOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NTQ3Mw==", "bodyText": "I would suggest just passing requestInfo and not requestInfo.toString() into this logger calls. It will avoid the string concatenation when debug logging is not enabled and makes the method calls a bit less verbose.", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412545473", "createdAt": "2020-04-21T22:52:14Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2DataFrame;\n+import io.netty.handler.codec.http2.Http2Frame;\n+import io.netty.handler.codec.http2.Http2HeadersFrame;\n+import io.netty.util.ReferenceCountUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A handler to stats response streams.\n+ */\n+\n+@ChannelHandler.Sharable\n+class Http2ClientStreamStatsHandler extends SimpleChannelInboundHandler<Http2Frame> {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Http2NetworkClient http2NetworkClient;\n+\n+  public Http2ClientStreamStatsHandler(Http2NetworkClient http2NetworkClient) {\n+    this.http2NetworkClient = http2NetworkClient;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws Exception {\n+    ReferenceCountUtil.retain(frame);\n+    RequestInfo requestInfo = ctx.channel().attr(Http2NetworkClient.REQUEST_INFO).get();\n+    requestInfo.responseFramesCount++;\n+    if (frame instanceof Http2HeadersFrame) {\n+      requestInfo.setStreamHeaderFrameReceiveTime(System.currentTimeMillis());\n+      http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n+          System.currentTimeMillis() - requestInfo.getStreamSendTime());\n+      logger.debug(\"Header Frame received. Request: {}\", requestInfo.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2OTI0Mw==", "bodyText": "sure.", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412669243", "createdAt": "2020-04-22T04:55:43Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2DataFrame;\n+import io.netty.handler.codec.http2.Http2Frame;\n+import io.netty.handler.codec.http2.Http2HeadersFrame;\n+import io.netty.util.ReferenceCountUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A handler to stats response streams.\n+ */\n+\n+@ChannelHandler.Sharable\n+class Http2ClientStreamStatsHandler extends SimpleChannelInboundHandler<Http2Frame> {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Http2NetworkClient http2NetworkClient;\n+\n+  public Http2ClientStreamStatsHandler(Http2NetworkClient http2NetworkClient) {\n+    this.http2NetworkClient = http2NetworkClient;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws Exception {\n+    ReferenceCountUtil.retain(frame);\n+    RequestInfo requestInfo = ctx.channel().attr(Http2NetworkClient.REQUEST_INFO).get();\n+    requestInfo.responseFramesCount++;\n+    if (frame instanceof Http2HeadersFrame) {\n+      requestInfo.setStreamHeaderFrameReceiveTime(System.currentTimeMillis());\n+      http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n+          System.currentTimeMillis() - requestInfo.getStreamSendTime());\n+      logger.debug(\"Header Frame received. Request: {}\", requestInfo.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NTQ3Mw=="}, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzQ4Njk3OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjo1MzozMlrOGJbz3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDo1NTo1MFrOGJjVVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NjAxNA==", "bodyText": "capitalize i in initial", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412546014", "createdAt": "2020-04-21T22:53:32Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java", "diffHunk": "@@ -67,6 +69,23 @@\n   @Default(\"25 * 1024 * 1024\")\n   public final int http2MaxContentLength;\n \n+  /**\n+   * The maximum allowed http2 frame size.This value is used to represent\n+   * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.5.2\">SETTINGS_MAX_FRAME_SIZE</a>.\n+   */\n+  @Config(HTTP2_FRAME_MAX_SIZE)\n+  @Default(\"5 * 1024 * 1024\")\n+  public final int http2FrameMaxSize;\n+\n+\n+  /**\n+   * The initial window size used in http streams. This allows sender send big frame.\n+   */\n+  @Config(HTTP2_INITIAL_WINDOW_SIZE)\n+  @Default(\"5 * 1024 * 1024\")\n+  public final int http2initialWindowSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2OTI3MQ==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412669271", "createdAt": "2020-04-22T04:55:50Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java", "diffHunk": "@@ -67,6 +69,23 @@\n   @Default(\"25 * 1024 * 1024\")\n   public final int http2MaxContentLength;\n \n+  /**\n+   * The maximum allowed http2 frame size.This value is used to represent\n+   * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.5.2\">SETTINGS_MAX_FRAME_SIZE</a>.\n+   */\n+  @Config(HTTP2_FRAME_MAX_SIZE)\n+  @Default(\"5 * 1024 * 1024\")\n+  public final int http2FrameMaxSize;\n+\n+\n+  /**\n+   * The initial window size used in http streams. This allows sender send big frame.\n+   */\n+  @Config(HTTP2_INITIAL_WINDOW_SIZE)\n+  @Default(\"5 * 1024 * 1024\")\n+  public final int http2initialWindowSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NjAxNA=="}, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzYyMjgyOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzozOTozNlrOGJc9kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDo1NTo1OVrOGJjVlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NDg4Mg==", "bodyText": "Just curious: Is there a specific issue this TODO will help with?", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412564882", "createdAt": "2020-04-21T23:39:36Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -91,6 +95,10 @@ public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConf\n               http2ClientMetrics.http2StreamAcquireTime.update(System.currentTimeMillis() - streamInitiateTime);\n               long streamAcquiredTime = System.currentTimeMillis();\n               Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientStreamStatsHandler);\n+              // TODO: implement ourselves' aggregator. Http2Streams to Response Object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2OTMzNA==", "bodyText": "I can create one.", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412669334", "createdAt": "2020-04-22T04:55:59Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -91,6 +95,10 @@ public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConf\n               http2ClientMetrics.http2StreamAcquireTime.update(System.currentTimeMillis() - streamInitiateTime);\n               long streamAcquiredTime = System.currentTimeMillis();\n               Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientStreamStatsHandler);\n+              // TODO: implement ourselves' aggregator. Http2Streams to Response Object", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NDg4Mg=="}, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1515, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}