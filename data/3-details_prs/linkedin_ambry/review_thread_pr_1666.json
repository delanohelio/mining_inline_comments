{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MjEwNzEy", "number": 1666, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToxNTo0NFrOE6PPkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjowODo0OFrOE6aZrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTAyNjExOnYy", "diffSide": "RIGHT", "path": ".travis.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToxNTo0NFrOH1Lwzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDoxMDo1MVrOH1QoDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyOTI5NA==", "bodyText": "I would have preferred AmbryNamedBlobs, but you may have already provisioned it with that name.", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r525529294", "createdAt": "2020-11-17T21:15:44Z", "author": {"login": "lightningrob"}, "path": ".travis.yml", "diffHunk": "@@ -28,6 +28,8 @@ before_install:\n   - mysql --version\n   - mysql -e 'CREATE DATABASE AccountMetadata;'\n   - mysql -e 'USE AccountMetadata; SOURCE ./ambry-account/src/main/resources/AccountSchema.ddl;'\n+  - mysql -e 'CREATE DATABASE AmbryBlobs;'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwODk3NA==", "bodyText": "I can change this. This is really just the name for the integration test DB and does need to match the naming patterns in other places.", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r525608974", "createdAt": "2020-11-18T00:10:51Z", "author": {"login": "cgtz"}, "path": ".travis.yml", "diffHunk": "@@ -28,6 +28,8 @@ before_install:\n   - mysql --version\n   - mysql -e 'CREATE DATABASE AccountMetadata;'\n   - mysql -e 'USE AccountMetadata; SOURCE ./ambry-account/src/main/resources/AccountSchema.ddl;'\n+  - mysql -e 'CREATE DATABASE AmbryBlobs;'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyOTI5NA=="}, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTAzNjk4OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobDb.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToxOTowN1rOH1L3dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToxOTowN1rOH1L3dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMDk5Nw==", "bodyText": "Javadocs", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r525530997", "createdAt": "2020-11-17T21:19:07Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobDb.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.github.ambry.account.Container;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+\n+public interface NamedBlobDb {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA0MTQwOnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobDb.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMDoxNlrOH1L6HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo1NDozN1rOH2oK6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMTY3Ng==", "bodyText": "Are the methods going to throw only unchecked exceptions on errors?", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r525531676", "createdAt": "2020-11-17T21:20:16Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobDb.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.github.ambry.account.Container;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+\n+public interface NamedBlobDb {\n+  CompletableFuture<NamedBlobRecord> get(String accountName, String containerName, String blobName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0MzMwNg==", "bodyText": "Checked exceptions will be communicated asynchronously using the CompletableFuture to simplify the error handling path. So, the synchronous part of this will only throw unchecked exceptions (on coding bugs), or complete the future with a checked exception (on system/user errors).", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r527043306", "createdAt": "2020-11-19T16:54:37Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobDb.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.github.ambry.account.Container;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+\n+public interface NamedBlobDb {\n+  CompletableFuture<NamedBlobRecord> get(String accountName, String containerName, String blobName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMTY3Ng=="}, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA0NDY4OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobDb.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMToxOVrOH1L8LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo1NToyNVrOH2oNVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMjIwNQ==", "bodyText": "Optional: might be useful to return the NamedBlobRecord with blobId filled in.", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r525532205", "createdAt": "2020-11-17T21:21:19Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobDb.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.github.ambry.account.Container;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+\n+public interface NamedBlobDb {\n+  CompletableFuture<NamedBlobRecord> get(String accountName, String containerName, String blobName);\n+\n+  CompletableFuture<Page<NamedBlobRecord>> list(String accountName, String containerName, String blobNamePrefix, String continuationToken);\n+\n+  CompletableFuture<Void> put(NamedBlobRecord record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0MzkyNg==", "bodyText": "The NamedBlobRecord provided already contains the blob ID (since this method is called after Router.putBlob). I do agree that it may be a good practice to have some sort of response object where we can put extra metadata if needed on put/delete requests (may be useful when we support updates).", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r527043926", "createdAt": "2020-11-19T16:55:25Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobDb.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.github.ambry.account.Container;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+\n+public interface NamedBlobDb {\n+  CompletableFuture<NamedBlobRecord> get(String accountName, String containerName, String blobName);\n+\n+  CompletableFuture<Page<NamedBlobRecord>> list(String accountName, String containerName, String blobNamePrefix, String continuationToken);\n+\n+  CompletableFuture<Void> put(NamedBlobRecord record);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMjIwNQ=="}, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA0ODU3OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobDb.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMjoyOVrOH1L-nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzoyODoyM1rOH2psZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMjgyOA==", "bodyText": "Will the caller ever need to know if the deletion happened?  Or will this throw an exception on blob not found?", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r525532828", "createdAt": "2020-11-17T21:22:29Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobDb.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.github.ambry.account.Container;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+\n+public interface NamedBlobDb {\n+  CompletableFuture<NamedBlobRecord> get(String accountName, String containerName, String blobName);\n+\n+  CompletableFuture<Page<NamedBlobRecord>> list(String accountName, String containerName, String blobNamePrefix, String continuationToken);\n+\n+  CompletableFuture<Void> put(NamedBlobRecord record);\n+\n+  CompletableFuture<Void> delete(String accountName, String containerName, String blobName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2ODI2Mw==", "bodyText": "After, my most recent update, If this returns a success, the deletion will have taken place, or we found that the blob does not exist or was already deleted. I used to have it throw an exception on not found, but i don't think that is really needed since the deletion of the ambry blob would already tell us that. If there is a reason to know that info in the future, I can look at ways of changing this query. i.e. saving info to a variable and then selecting the variable afterwards.", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r527068263", "createdAt": "2020-11-19T17:28:23Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobDb.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.github.ambry.account.Container;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+\n+public interface NamedBlobDb {\n+  CompletableFuture<NamedBlobRecord> get(String accountName, String containerName, String blobName);\n+\n+  CompletableFuture<Page<NamedBlobRecord>> list(String accountName, String containerName, String blobNamePrefix, String continuationToken);\n+\n+  CompletableFuture<Void> put(NamedBlobRecord record);\n+\n+  CompletableFuture<Void> delete(String accountName, String containerName, String blobName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMjgyOA=="}, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA1MTY2OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMzoyNFrOH1MAkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMzoyNFrOH1MAkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMzMyOA==", "bodyText": "Minor: javadocs", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r525533328", "createdAt": "2020-11-17T21:23:24Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/named/NamedBlobRecord.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import java.util.Objects;\n+\n+\n+/**\n+ * Represents a metadata record in a {@link NamedBlobDb} implementation.\n+ */\n+public class NamedBlobRecord {\n+  private final String accountName;\n+  private final String containerName;\n+  private final String blobName;\n+  private final String blobId;\n+  private final long expirationTimeMs;\n+\n+  public NamedBlobRecord(String accountName, String containerName, String blobName, String blobId,\n+      long expirationTimeMs) {\n+    this.accountName = accountName;\n+    this.containerName = containerName;\n+    this.blobName = blobName;\n+    this.blobId = blobId;\n+    this.expirationTimeMs = expirationTimeMs;\n+  }\n+\n+  public String getAccountName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA2NDQwOnYy", "diffSide": "RIGHT", "path": "ambry-named-mysql/src/main/java/com/github/ambry/named/MySqlNamedBlobDb.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyNzowMVrOH1MIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyNzowMVrOH1MIhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzNTM2Nw==", "bodyText": "Can you use string constants for table and column names?", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r525535367", "createdAt": "2020-11-17T21:27:01Z", "author": {"login": "lightningrob"}, "path": "ambry-named-mysql/src/main/java/com/github/ambry/named/MySqlNamedBlobDb.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.github.ambry.account.Account;\n+import com.github.ambry.account.AccountService;\n+import com.github.ambry.account.Container;\n+import com.github.ambry.mysql.MySqlUtils;\n+import com.github.ambry.mysql.MySqlUtils.DbEndpoint;\n+import com.github.ambry.config.MySqlNamedBlobDbConfig;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.utils.Utils;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.Statement;\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import javax.sql.DataSource;\n+import org.apache.commons.codec.binary.Base64;\n+\n+\n+/**\n+ * An implementation of {@link NamedBlobDb} that uses an active-active MySQL deployment as the source of truth for\n+ * named blob mappings.\n+ *\n+ * It uses the Hikari library for connection pooling, which is a widely used and performant JDBC connection pool\n+ * implementation.\n+ */\n+public class MySqlNamedBlobDb implements NamedBlobDb {\n+  // query building blocks\n+  private static final String IS_DELETED = \"(deleted_ts IS NOT NULL AND deleted_ts <= CURRENT_TIMESTAMP(6))\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjgxOTI5OnYy", "diffSide": "RIGHT", "path": "ambry-named-mysql/src/main/java/com/github/ambry/named/MySqlNamedBlobDb.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNTo1MTo1NlrOH1eJUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzozMzowNFrOH2p4jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzMDQ4MQ==", "bodyText": "A quick question, if the blob has been deleted or expired, do we need to throw the exception similar like the get method or simply excluding it from the element is good enough? I just feel it might be better if we can tell why some expired blob are not listed.", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r525830481", "createdAt": "2020-11-18T05:51:56Z", "author": {"login": "SophieGuo410"}, "path": "ambry-named-mysql/src/main/java/com/github/ambry/named/MySqlNamedBlobDb.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.github.ambry.account.Account;\n+import com.github.ambry.account.AccountService;\n+import com.github.ambry.account.Container;\n+import com.github.ambry.mysql.MySqlUtils;\n+import com.github.ambry.mysql.MySqlUtils.DbEndpoint;\n+import com.github.ambry.config.MySqlNamedBlobDbConfig;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.utils.Utils;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.Statement;\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import javax.sql.DataSource;\n+import org.apache.commons.codec.binary.Base64;\n+\n+\n+/**\n+ * An implementation of {@link NamedBlobDb} that uses an active-active MySQL deployment as the source of truth for\n+ * named blob mappings.\n+ *\n+ * It uses the Hikari library for connection pooling, which is a widely used and performant JDBC connection pool\n+ * implementation.\n+ */\n+public class MySqlNamedBlobDb implements NamedBlobDb {\n+  // query building blocks\n+  private static final String IS_DELETED = \"(deleted_ts IS NOT NULL AND deleted_ts <= CURRENT_TIMESTAMP(6))\";\n+  private static final String IS_EXPIRED = \"(expires_ts IS NOT NULL AND expires_ts <= CURRENT_TIMESTAMP(6))\";\n+  private static final String IS_DELETED_OR_EXPIRED = IS_DELETED + \" OR \" + IS_EXPIRED;\n+  private static final String WHERE_PK_MATCH = \"WHERE (account_id, container_id, blob_name) = (?, ?, ?)\";\n+\n+  /**\n+   * Select a record that matches a blob name (lookup by primary key).\n+   */\n+  private static final String GET_QUERY = \"SELECT blob_id, expires_ts, deleted_ts FROM named_blobs \" + WHERE_PK_MATCH;\n+\n+  /**\n+   * Select records up to a specific limit where the blob name starts with a string prefix. The fourth parameter can\n+   * be used for pagination.\n+   */\n+  private static final String LIST_QUERY = \"SELECT blob_name, blob_id, expires_ts, deleted_ts FROM named_blobs \"\n+      + \"WHERE (account_id, container_id) = (?, ?) AND blob_name LIKE ? AND blob_name >= ? LIMIT ?\";\n+\n+  /**\n+   * Create a blob name to blob ID mapping if a record for that blob name does not exist.\n+   * If there is an existing record but the existing blob was soft deleted or expired, allow it to be overwritten.\n+   * If there is an existing record and the existing blob is still valid (not expired or soft deleted), do not\n+   * overwrite it.\n+   * <p>\n+   * Eventually the put operation will support updates to the mapping in the third case above, but that requires other\n+   * work around concurrency control.\n+   */\n+  private static final String PUT_QUERY = String.format(\n+      \"INSERT INTO named_blobs (account_id, container_id, blob_name, blob_id, expires_ts)\\n\"\n+          + \"VALUES (?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE\\n\" + \"  blob_id = IF(%1$s, VALUES(blob_id), blob_id),\\n\"\n+          + \"  expires_ts = IF(%1$s, VALUES(expires_ts), expires_ts),\\n\" + \"  deleted_ts = IF(%1$s, null, deleted_ts)\",\n+      IS_DELETED_OR_EXPIRED);\n+\n+  /**\n+   * Soft delete a blob by setting the delete timestamp to the current time if the blob is not already deleted.\n+   */\n+  private static final String DELETE_QUERY =\n+      \"UPDATE named_blobs SET deleted_ts = IF(\" + IS_DELETED + \", deleted_ts, CURRENT_TIMESTAMP(6)) \" + WHERE_PK_MATCH;\n+\n+  private final AccountService accountService;\n+  private final Map<String, DataSource> dcToDataSource;\n+  private final String localDatacenter;\n+  private final ExecutorService executorService;\n+  private final MySqlNamedBlobDbConfig config;\n+\n+  MySqlNamedBlobDb(AccountService accountService, MySqlNamedBlobDbConfig config, DataSourceFactory dataSourceFactory,\n+      String localDatacenter) {\n+    this.accountService = accountService;\n+    this.config = config;\n+    this.localDatacenter = localDatacenter;\n+    this.dcToDataSource = MySqlUtils.getDbEndpointsPerDC(config.dbInfo)\n+        .values()\n+        .stream()\n+        .flatMap(List::stream)\n+        .filter(DbEndpoint::isWriteable)\n+        .collect(Collectors.toMap(DbEndpoint::getDatacenter, dataSourceFactory::getDataSource));\n+    // size this to match the connection pool\n+    executorService = Executors.newFixedThreadPool(config.poolSize);\n+  }\n+\n+  @Override\n+  public CompletableFuture<NamedBlobRecord> get(String accountName, String containerName, String blobName) {\n+    return executeTransactionAsync(accountName, containerName, (accountId, containerId, connection) -> {\n+      try (PreparedStatement statement = connection.prepareStatement(GET_QUERY)) {\n+        statement.setInt(1, accountId);\n+        statement.setInt(2, containerId);\n+        statement.setString(3, blobName);\n+        try (ResultSet resultSet = statement.executeQuery()) {\n+          if (!resultSet.next()) {\n+            throw new RestServiceException(\"Named blob not found\", RestServiceErrorCode.NotFound);\n+          }\n+          String blobId = Base64.encodeBase64URLSafeString(resultSet.getBytes(1));\n+          Timestamp expirationTime = resultSet.getTimestamp(2);\n+          if (expirationTime != null && expirationTime.getTime() < System.currentTimeMillis()) {\n+            throw new RestServiceException(\"Named blob deleted or expired\", RestServiceErrorCode.Deleted);\n+          }\n+          return new NamedBlobRecord(accountName, containerName, blobName, blobId,\n+              expirationTime != null ? expirationTime.getTime() : Utils.Infinite_Time);\n+        }\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public CompletableFuture<Page<NamedBlobRecord>> list(String accountName, String containerName, String blobNamePrefix,\n+      String continuationToken) {\n+    return executeTransactionAsync(accountName, containerName, (accountId, containerId, connection) -> {\n+      try (PreparedStatement statement = connection.prepareStatement(LIST_QUERY)) {\n+        statement.setInt(1, accountId);\n+        statement.setInt(2, containerId);\n+        statement.setString(3, blobNamePrefix + \"%\");\n+        statement.setString(4, continuationToken != null ? continuationToken : blobNamePrefix);\n+        statement.setInt(5, config.listMaxResults + 1);\n+        try (ResultSet resultSet = statement.executeQuery()) {\n+          String nextContinuationToken = null;\n+          List<NamedBlobRecord> elements = new ArrayList<>();\n+          int resultIndex = 0;\n+          while (resultSet.next()) {\n+            if (resultIndex++ == config.listMaxResults) {\n+              nextContinuationToken = resultSet.getString(1);\n+              break;\n+            }\n+            String blobName = resultSet.getString(1);\n+            String blobId = Base64.encodeBase64URLSafeString(resultSet.getBytes(2));\n+            Timestamp expirationTime = resultSet.getTimestamp(3);\n+            Timestamp deletionTime = resultSet.getTimestamp(4);\n+            long currentTime = System.currentTimeMillis();\n+            if (compareTimestamp(expirationTime, currentTime) > 0 && compareTimestamp(deletionTime, currentTime) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA3MTM3NA==", "bodyText": "I think for now, it is good to exclude them (although I added some trace logging for this case). If there is a use case for knowing which records are expired but still have some elements stored (i.e. include_all flag), we can add support for that in the future.", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r527071374", "createdAt": "2020-11-19T17:33:04Z", "author": {"login": "cgtz"}, "path": "ambry-named-mysql/src/main/java/com/github/ambry/named/MySqlNamedBlobDb.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.github.ambry.account.Account;\n+import com.github.ambry.account.AccountService;\n+import com.github.ambry.account.Container;\n+import com.github.ambry.mysql.MySqlUtils;\n+import com.github.ambry.mysql.MySqlUtils.DbEndpoint;\n+import com.github.ambry.config.MySqlNamedBlobDbConfig;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.utils.Utils;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.Statement;\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import javax.sql.DataSource;\n+import org.apache.commons.codec.binary.Base64;\n+\n+\n+/**\n+ * An implementation of {@link NamedBlobDb} that uses an active-active MySQL deployment as the source of truth for\n+ * named blob mappings.\n+ *\n+ * It uses the Hikari library for connection pooling, which is a widely used and performant JDBC connection pool\n+ * implementation.\n+ */\n+public class MySqlNamedBlobDb implements NamedBlobDb {\n+  // query building blocks\n+  private static final String IS_DELETED = \"(deleted_ts IS NOT NULL AND deleted_ts <= CURRENT_TIMESTAMP(6))\";\n+  private static final String IS_EXPIRED = \"(expires_ts IS NOT NULL AND expires_ts <= CURRENT_TIMESTAMP(6))\";\n+  private static final String IS_DELETED_OR_EXPIRED = IS_DELETED + \" OR \" + IS_EXPIRED;\n+  private static final String WHERE_PK_MATCH = \"WHERE (account_id, container_id, blob_name) = (?, ?, ?)\";\n+\n+  /**\n+   * Select a record that matches a blob name (lookup by primary key).\n+   */\n+  private static final String GET_QUERY = \"SELECT blob_id, expires_ts, deleted_ts FROM named_blobs \" + WHERE_PK_MATCH;\n+\n+  /**\n+   * Select records up to a specific limit where the blob name starts with a string prefix. The fourth parameter can\n+   * be used for pagination.\n+   */\n+  private static final String LIST_QUERY = \"SELECT blob_name, blob_id, expires_ts, deleted_ts FROM named_blobs \"\n+      + \"WHERE (account_id, container_id) = (?, ?) AND blob_name LIKE ? AND blob_name >= ? LIMIT ?\";\n+\n+  /**\n+   * Create a blob name to blob ID mapping if a record for that blob name does not exist.\n+   * If there is an existing record but the existing blob was soft deleted or expired, allow it to be overwritten.\n+   * If there is an existing record and the existing blob is still valid (not expired or soft deleted), do not\n+   * overwrite it.\n+   * <p>\n+   * Eventually the put operation will support updates to the mapping in the third case above, but that requires other\n+   * work around concurrency control.\n+   */\n+  private static final String PUT_QUERY = String.format(\n+      \"INSERT INTO named_blobs (account_id, container_id, blob_name, blob_id, expires_ts)\\n\"\n+          + \"VALUES (?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE\\n\" + \"  blob_id = IF(%1$s, VALUES(blob_id), blob_id),\\n\"\n+          + \"  expires_ts = IF(%1$s, VALUES(expires_ts), expires_ts),\\n\" + \"  deleted_ts = IF(%1$s, null, deleted_ts)\",\n+      IS_DELETED_OR_EXPIRED);\n+\n+  /**\n+   * Soft delete a blob by setting the delete timestamp to the current time if the blob is not already deleted.\n+   */\n+  private static final String DELETE_QUERY =\n+      \"UPDATE named_blobs SET deleted_ts = IF(\" + IS_DELETED + \", deleted_ts, CURRENT_TIMESTAMP(6)) \" + WHERE_PK_MATCH;\n+\n+  private final AccountService accountService;\n+  private final Map<String, DataSource> dcToDataSource;\n+  private final String localDatacenter;\n+  private final ExecutorService executorService;\n+  private final MySqlNamedBlobDbConfig config;\n+\n+  MySqlNamedBlobDb(AccountService accountService, MySqlNamedBlobDbConfig config, DataSourceFactory dataSourceFactory,\n+      String localDatacenter) {\n+    this.accountService = accountService;\n+    this.config = config;\n+    this.localDatacenter = localDatacenter;\n+    this.dcToDataSource = MySqlUtils.getDbEndpointsPerDC(config.dbInfo)\n+        .values()\n+        .stream()\n+        .flatMap(List::stream)\n+        .filter(DbEndpoint::isWriteable)\n+        .collect(Collectors.toMap(DbEndpoint::getDatacenter, dataSourceFactory::getDataSource));\n+    // size this to match the connection pool\n+    executorService = Executors.newFixedThreadPool(config.poolSize);\n+  }\n+\n+  @Override\n+  public CompletableFuture<NamedBlobRecord> get(String accountName, String containerName, String blobName) {\n+    return executeTransactionAsync(accountName, containerName, (accountId, containerId, connection) -> {\n+      try (PreparedStatement statement = connection.prepareStatement(GET_QUERY)) {\n+        statement.setInt(1, accountId);\n+        statement.setInt(2, containerId);\n+        statement.setString(3, blobName);\n+        try (ResultSet resultSet = statement.executeQuery()) {\n+          if (!resultSet.next()) {\n+            throw new RestServiceException(\"Named blob not found\", RestServiceErrorCode.NotFound);\n+          }\n+          String blobId = Base64.encodeBase64URLSafeString(resultSet.getBytes(1));\n+          Timestamp expirationTime = resultSet.getTimestamp(2);\n+          if (expirationTime != null && expirationTime.getTime() < System.currentTimeMillis()) {\n+            throw new RestServiceException(\"Named blob deleted or expired\", RestServiceErrorCode.Deleted);\n+          }\n+          return new NamedBlobRecord(accountName, containerName, blobName, blobId,\n+              expirationTime != null ? expirationTime.getTime() : Utils.Infinite_Time);\n+        }\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public CompletableFuture<Page<NamedBlobRecord>> list(String accountName, String containerName, String blobNamePrefix,\n+      String continuationToken) {\n+    return executeTransactionAsync(accountName, containerName, (accountId, containerId, connection) -> {\n+      try (PreparedStatement statement = connection.prepareStatement(LIST_QUERY)) {\n+        statement.setInt(1, accountId);\n+        statement.setInt(2, containerId);\n+        statement.setString(3, blobNamePrefix + \"%\");\n+        statement.setString(4, continuationToken != null ? continuationToken : blobNamePrefix);\n+        statement.setInt(5, config.listMaxResults + 1);\n+        try (ResultSet resultSet = statement.executeQuery()) {\n+          String nextContinuationToken = null;\n+          List<NamedBlobRecord> elements = new ArrayList<>();\n+          int resultIndex = 0;\n+          while (resultSet.next()) {\n+            if (resultIndex++ == config.listMaxResults) {\n+              nextContinuationToken = resultSet.getString(1);\n+              break;\n+            }\n+            String blobName = resultSet.getString(1);\n+            String blobId = Base64.encodeBase64URLSafeString(resultSet.getBytes(2));\n+            Timestamp expirationTime = resultSet.getTimestamp(3);\n+            Timestamp deletionTime = resultSet.getTimestamp(4);\n+            long currentTime = System.currentTimeMillis();\n+            if (compareTimestamp(expirationTime, currentTime) > 0 && compareTimestamp(deletionTime, currentTime) > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzMDQ4MQ=="}, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Njg1NDIwOnYy", "diffSide": "RIGHT", "path": "ambry-named-mysql/src/main/java/com/github/ambry/named/MySqlNamedBlobDbFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjowODo0OFrOH1edmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzozMzo0N1rOH2p6Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzNTY3Mw==", "bodyText": "May I know which module will call this factory to get the db? Are you planning to call it in IdConverter?", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r525835673", "createdAt": "2020-11-18T06:08:48Z", "author": {"login": "SophieGuo410"}, "path": "ambry-named-mysql/src/main/java/com/github/ambry/named/MySqlNamedBlobDbFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.account.AccountService;\n+import com.github.ambry.mysql.MySqlUtils.DbEndpoint;\n+import com.github.ambry.config.ClusterMapConfig;\n+import com.github.ambry.config.MySqlNamedBlobDbConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+\n+\n+public class MySqlNamedBlobDbFactory implements NamedBlobDbFactory {\n+  private final MySqlNamedBlobDbConfig config;\n+  private final String localDatacenter;\n+  private final MetricRegistry metricRegistry;\n+  private final AccountService accountService;\n+\n+  public MySqlNamedBlobDbFactory(VerifiableProperties verifiableProperties, MetricRegistry metricRegistry,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA3MTgzOQ==", "bodyText": "Yep, let me add the code to add this into IdConverterFactory.", "url": "https://github.com/linkedin/ambry/pull/1666#discussion_r527071839", "createdAt": "2020-11-19T17:33:47Z", "author": {"login": "cgtz"}, "path": "ambry-named-mysql/src/main/java/com/github/ambry/named/MySqlNamedBlobDbFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+\n+package com.github.ambry.named;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.account.AccountService;\n+import com.github.ambry.mysql.MySqlUtils.DbEndpoint;\n+import com.github.ambry.config.ClusterMapConfig;\n+import com.github.ambry.config.MySqlNamedBlobDbConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+\n+\n+public class MySqlNamedBlobDbFactory implements NamedBlobDbFactory {\n+  private final MySqlNamedBlobDbConfig config;\n+  private final String localDatacenter;\n+  private final MetricRegistry metricRegistry;\n+  private final AccountService accountService;\n+\n+  public MySqlNamedBlobDbFactory(VerifiableProperties verifiableProperties, MetricRegistry metricRegistry,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzNTY3Mw=="}, "originalCommit": {"oid": "0f2712caca6250a2c756fe33aa7a8374182efa25"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1086, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}