{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NTkyNDQ2", "number": 1651, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowNTowMlrOEr6cCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzoxMDo0MlrOEstrvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDgxNjc1OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountStoreFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowNTowMlrOHe8QtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowNTowMlrOHe8QtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIwNjY0NQ==", "bodyText": "Any reason this class and the store class can't live in account/mysql package?", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r502206645", "createdAt": "2020-10-09T06:05:02Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountStoreFactory.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.account;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4308e556b66e5cbfae4f46277e471c60a73b3ac6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDgxOTM2OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountStoreFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowNjoxNFrOHe8SMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowNjoxNFrOHe8SMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIwNzAyNw==", "bodyText": "Minor: can simply return the new store here.", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r502207027", "createdAt": "2020-10-09T06:06:14Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountStoreFactory.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.account;\n+\n+import com.github.ambry.config.MySqlAccountServiceConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import static com.github.ambry.account.MySqlUtils.*;\n+\n+\n+/**\n+ * Factory class to return an instance of {@link MySqlAccountStore} on {@link #getMySqlAccountStore(boolean)} call\n+ */\n+public class MySqlAccountStoreFactory {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MySqlAccountStoreFactory.class);\n+  protected final MySqlAccountServiceConfig accountServiceConfig;\n+\n+  /**\n+   * Constructor.\n+   * @param  verifiableProperties The properties to get a {@link MySqlAccountStore} instance. Cannot be {@code null}.\n+   */\n+  public MySqlAccountStoreFactory(VerifiableProperties verifiableProperties) {\n+    this.accountServiceConfig = new MySqlAccountServiceConfig(verifiableProperties);\n+  }\n+\n+  /**\n+   * Returns an instance of the {@link MySqlAccountStore} that the factory generates.\n+   * @param writeable needs to be set to true if requesting a store that accepts writes.\n+   * @return an instance of {@link MySqlAccountStore} generated by this factory.\n+   * @throws SQLException\n+   */\n+  public MySqlAccountStore getMySqlAccountStore(boolean writeable) throws SQLException {\n+    Map<String, List<MySqlUtils.DBEndPoint>> dcToMySqlDBEndPoints = getDBEndPointsPerDC(accountServiceConfig.dbInfo);\n+    MySqlAccountStore mySqlAccountStore = null;\n+    for (List<MySqlUtils.DBEndPoint> dbEndPoints : dcToMySqlDBEndPoints.values()) {\n+      // TODO: Can have logic to try mysql end point on local DC first\n+      for (MySqlUtils.DBEndPoint dbEndPoint : dbEndPoints) {\n+        if ((dbEndPoint.isWriteable() && writeable) || (!dbEndPoint.isWriteable() && !writeable)) {\n+          try {\n+            mySqlAccountStore = new MySqlAccountStore(dbEndPoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4308e556b66e5cbfae4f46277e471c60a73b3ac6"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDgyMDAwOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowNjozOVrOHe8SpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowNjozOVrOHe8SpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIwNzE0MA==", "bodyText": "Please move to account/mysql package.", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r502207140", "createdAt": "2020-10-09T06:06:39Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlUtils.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.account;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+\n+/**\n+ * Contains utils methods for MySqlAccountService\n+ */\n+public class MySqlUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4308e556b66e5cbfae4f46277e471c60a73b3ac6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDgyMTE3OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowNzoxN1rOHe8TXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowNzoxN1rOHe8TXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIwNzMyNQ==", "bodyText": "getDbEndpointsPerDc", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r502207325", "createdAt": "2020-10-09T06:07:17Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlUtils.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.account;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+\n+/**\n+ * Contains utils methods for MySqlAccountService\n+ */\n+public class MySqlUtils {\n+\n+  static final String DBINFO_STR = \"dbInfo\";\n+  static final String URL_STR = \"url\";\n+  static final String DATACENTER_STR = \"datacenter\";\n+  static final String ISWRITEABLE_STR = \"isWriteable\";\n+  static final String USERNAME_STR = \"username\";\n+  static final String PASSWORD_STR = \"password\";\n+\n+  /**\n+   * Parses DB information JSON string and returns a map of datacenter name to list of {@link DBEndPoint}s.\n+   * @param dbInfoJsonString the string containing the MySql DB info.\n+   * @return a map of dcName -> list of {@link DBEndPoint}s.\n+   * @throws JSONException if there is an error parsing the JSON.\n+   */\n+  public static Map<String, List<DBEndPoint>> getDBEndPointsPerDC(String dbInfoJsonString) throws JSONException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4308e556b66e5cbfae4f46277e471c60a73b3ac6"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDgyMjU5OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowODowNVrOHe8UNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowODowNVrOHe8UNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIwNzU0MA==", "bodyText": "DbEndPoint.  Or even DbEndpoint since endpoint is one word.", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r502207540", "createdAt": "2020-10-09T06:08:05Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlUtils.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.account;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+\n+/**\n+ * Contains utils methods for MySqlAccountService\n+ */\n+public class MySqlUtils {\n+\n+  static final String DBINFO_STR = \"dbInfo\";\n+  static final String URL_STR = \"url\";\n+  static final String DATACENTER_STR = \"datacenter\";\n+  static final String ISWRITEABLE_STR = \"isWriteable\";\n+  static final String USERNAME_STR = \"username\";\n+  static final String PASSWORD_STR = \"password\";\n+\n+  /**\n+   * Parses DB information JSON string and returns a map of datacenter name to list of {@link DBEndPoint}s.\n+   * @param dbInfoJsonString the string containing the MySql DB info.\n+   * @return a map of dcName -> list of {@link DBEndPoint}s.\n+   * @throws JSONException if there is an error parsing the JSON.\n+   */\n+  public static Map<String, List<DBEndPoint>> getDBEndPointsPerDC(String dbInfoJsonString) throws JSONException {\n+    Map<String, List<DBEndPoint>> dcToDbEndPoints = new HashMap<>();\n+\n+    JSONObject jsonObject = new JSONObject(dbInfoJsonString);\n+    JSONArray dbInfo = jsonObject.getJSONArray(DBINFO_STR);\n+    for (int i = 0; i < dbInfo.length(); i++) {\n+      JSONObject entry = dbInfo.getJSONObject(i);\n+      String url = entry.getString(URL_STR);\n+      String datacenter = entry.getString(DATACENTER_STR);\n+      boolean isWriteable = entry.getBoolean(ISWRITEABLE_STR);\n+      String username = entry.getString(USERNAME_STR);\n+      String password = entry.getString(PASSWORD_STR);\n+      dcToDbEndPoints.computeIfAbsent(datacenter, key -> new ArrayList<>())\n+          .add(new DBEndPoint(url, datacenter, isWriteable, username, password));\n+    }\n+    return dcToDbEndPoints;\n+  }\n+\n+  /**\n+   * Stores information of a mysql db endpoint\n+   */\n+  public static class DBEndPoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4308e556b66e5cbfae4f46277e471c60a73b3ac6"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDgyMzk3OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowODo1MFrOHe8VDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjowODo1MFrOHe8VDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIwNzc1Ng==", "bodyText": "Nit: for getter methods, only need the @return line.", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r502207756", "createdAt": "2020-10-09T06:08:50Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlUtils.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.account;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+\n+/**\n+ * Contains utils methods for MySqlAccountService\n+ */\n+public class MySqlUtils {\n+\n+  static final String DBINFO_STR = \"dbInfo\";\n+  static final String URL_STR = \"url\";\n+  static final String DATACENTER_STR = \"datacenter\";\n+  static final String ISWRITEABLE_STR = \"isWriteable\";\n+  static final String USERNAME_STR = \"username\";\n+  static final String PASSWORD_STR = \"password\";\n+\n+  /**\n+   * Parses DB information JSON string and returns a map of datacenter name to list of {@link DBEndPoint}s.\n+   * @param dbInfoJsonString the string containing the MySql DB info.\n+   * @return a map of dcName -> list of {@link DBEndPoint}s.\n+   * @throws JSONException if there is an error parsing the JSON.\n+   */\n+  public static Map<String, List<DBEndPoint>> getDBEndPointsPerDC(String dbInfoJsonString) throws JSONException {\n+    Map<String, List<DBEndPoint>> dcToDbEndPoints = new HashMap<>();\n+\n+    JSONObject jsonObject = new JSONObject(dbInfoJsonString);\n+    JSONArray dbInfo = jsonObject.getJSONArray(DBINFO_STR);\n+    for (int i = 0; i < dbInfo.length(); i++) {\n+      JSONObject entry = dbInfo.getJSONObject(i);\n+      String url = entry.getString(URL_STR);\n+      String datacenter = entry.getString(DATACENTER_STR);\n+      boolean isWriteable = entry.getBoolean(ISWRITEABLE_STR);\n+      String username = entry.getString(USERNAME_STR);\n+      String password = entry.getString(PASSWORD_STR);\n+      dcToDbEndPoints.computeIfAbsent(datacenter, key -> new ArrayList<>())\n+          .add(new DBEndPoint(url, datacenter, isWriteable, username, password));\n+    }\n+    return dcToDbEndPoints;\n+  }\n+\n+  /**\n+   * Stores information of a mysql db endpoint\n+   */\n+  public static class DBEndPoint {\n+    private final String url;\n+    private final String datacenter;\n+    private final boolean isWriteable;\n+    private final String username;\n+    private final String password;\n+\n+    public DBEndPoint(String url, String datacenter, boolean isWriteable, String username, String password) {\n+      this.url = url;\n+      this.datacenter = datacenter;\n+      this.isWriteable = isWriteable;\n+      this.username = username;\n+      this.password = password;\n+    }\n+\n+    /**\n+     * Gets db url\n+     * @return url of the db", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4308e556b66e5cbfae4f46277e471c60a73b3ac6"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDgzMDk1OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/MySqlAccountServiceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjoxMjoxM1rOHe8ZJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjoxMjoxM1rOHe8ZJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIwODgwNg==", "bodyText": "Minor: wondering if we need the top level field or just use a simple array.  If zkInfo does the same thing we can keep it consistent.", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r502208806", "createdAt": "2020-10-09T06:12:13Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/config/MySqlAccountServiceConfig.java", "diffHunk": "@@ -29,27 +27,39 @@\n   public static final String UPDATE_DISABLED = MYSQL_ACCOUNT_SERVICE_PREFIX + \"update.disabled\";\n   private static final String MAX_BACKUP_FILE_COUNT = MYSQL_ACCOUNT_SERVICE_PREFIX + \"max.backup.file.count\";\n \n-  // TODO: Might need to take an array of URLs which would have one write (master) and multiple read urls (backup)\n   /**\n-   * URL of the mysql database.\n+   * Serialized json containing the information about all mysql end points. This information should be of the following form:\n+   * <pre>\n+   * {\n+   *   \"dbInfo\" : [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4308e556b66e5cbfae4f46277e471c60a73b3ac6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzE0NzI1OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjo1MDozN1rOHgGMUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToyNTowMlrOHgKi9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQxNzkzNw==", "bodyText": "Optional: This probably justifies a metric (and we can set up alert on it).", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r503417937", "createdAt": "2020-10-12T16:50:37Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -51,13 +53,24 @@\n   private final ReadWriteLock infoMapLock = new ReentrantReadWriteLock();\n   private final ScheduledExecutorService scheduler;\n   private final BackupFileManager backupFileManager;\n+  // TODO: we could have two stores (master for writes/reads and replica for reads during failover)\n   private volatile MySqlAccountStore mySqlAccountStore;\n+  private final MySqlAccountStoreFactory mySqlAccountStoreFactory;\n \n   public MySqlAccountService(AccountServiceMetrics accountServiceMetrics, MySqlAccountServiceConfig config,\n-      MySqlAccountStore mySqlAccountStore) throws IOException {\n+      MySqlAccountStoreFactory mySqlAccountStoreFactory) throws IOException {\n     super(config, Objects.requireNonNull(accountServiceMetrics, \"accountServiceMetrics cannot be null\"));\n     this.config = config;\n-    this.mySqlAccountStore = mySqlAccountStore;\n+    this.mySqlAccountStoreFactory = mySqlAccountStoreFactory;\n+    try {\n+      this.mySqlAccountStore = mySqlAccountStoreFactory.getMySqlAccountStore(true);\n+    } catch (SQLException e) {\n+      logger.error(\"MySQL account store creation failed\", e);\n+      //TODO: If it is a non-transient error like credential issue, we should fail creation of MySqlAccountService and\n+      // return error. Else, continue account service creation and initialize cache with metadata from local file copy\n+      // to serve read requests. Connection to MySql DB will be retried during periodic sync. Until then, write\n+      // requests will be blocked.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122f86497f4ad7d0dd1d6946305558ae2c5f7327"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyMDg3Mw==", "bodyText": "Btw, error type triage will be in future PR, correct?  I suppose the logic to fail account service creation due to non-transient error will be added later.", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r503420873", "createdAt": "2020-10-12T16:56:00Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -51,13 +53,24 @@\n   private final ReadWriteLock infoMapLock = new ReentrantReadWriteLock();\n   private final ScheduledExecutorService scheduler;\n   private final BackupFileManager backupFileManager;\n+  // TODO: we could have two stores (master for writes/reads and replica for reads during failover)\n   private volatile MySqlAccountStore mySqlAccountStore;\n+  private final MySqlAccountStoreFactory mySqlAccountStoreFactory;\n \n   public MySqlAccountService(AccountServiceMetrics accountServiceMetrics, MySqlAccountServiceConfig config,\n-      MySqlAccountStore mySqlAccountStore) throws IOException {\n+      MySqlAccountStoreFactory mySqlAccountStoreFactory) throws IOException {\n     super(config, Objects.requireNonNull(accountServiceMetrics, \"accountServiceMetrics cannot be null\"));\n     this.config = config;\n-    this.mySqlAccountStore = mySqlAccountStore;\n+    this.mySqlAccountStoreFactory = mySqlAccountStoreFactory;\n+    try {\n+      this.mySqlAccountStore = mySqlAccountStoreFactory.getMySqlAccountStore(true);\n+    } catch (SQLException e) {\n+      logger.error(\"MySQL account store creation failed\", e);\n+      //TODO: If it is a non-transient error like credential issue, we should fail creation of MySqlAccountService and\n+      // return error. Else, continue account service creation and initialize cache with metadata from local file copy\n+      // to serve read requests. Connection to MySql DB will be retried during periodic sync. Until then, write\n+      // requests will be blocked.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQxNzkzNw=="}, "originalCommit": {"oid": "122f86497f4ad7d0dd1d6946305558ae2c5f7327"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTI3MA==", "bodyText": "Yes.  I am working on that in a separate PR related to error handling.", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r503489270", "createdAt": "2020-10-12T19:25:02Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -51,13 +53,24 @@\n   private final ReadWriteLock infoMapLock = new ReentrantReadWriteLock();\n   private final ScheduledExecutorService scheduler;\n   private final BackupFileManager backupFileManager;\n+  // TODO: we could have two stores (master for writes/reads and replica for reads during failover)\n   private volatile MySqlAccountStore mySqlAccountStore;\n+  private final MySqlAccountStoreFactory mySqlAccountStoreFactory;\n \n   public MySqlAccountService(AccountServiceMetrics accountServiceMetrics, MySqlAccountServiceConfig config,\n-      MySqlAccountStore mySqlAccountStore) throws IOException {\n+      MySqlAccountStoreFactory mySqlAccountStoreFactory) throws IOException {\n     super(config, Objects.requireNonNull(accountServiceMetrics, \"accountServiceMetrics cannot be null\"));\n     this.config = config;\n-    this.mySqlAccountStore = mySqlAccountStore;\n+    this.mySqlAccountStoreFactory = mySqlAccountStoreFactory;\n+    try {\n+      this.mySqlAccountStore = mySqlAccountStoreFactory.getMySqlAccountStore(true);\n+    } catch (SQLException e) {\n+      logger.error(\"MySQL account store creation failed\", e);\n+      //TODO: If it is a non-transient error like credential issue, we should fail creation of MySqlAccountService and\n+      // return error. Else, continue account service creation and initialize cache with metadata from local file copy\n+      // to serve read requests. Connection to MySql DB will be retried during periodic sync. Until then, write\n+      // requests will be blocked.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQxNzkzNw=="}, "originalCommit": {"oid": "122f86497f4ad7d0dd1d6946305558ae2c5f7327"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzIxMjc3OnYy", "diffSide": "RIGHT", "path": "config/mysql.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzoxMDo0MlrOHgGz6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToyNTo0NVrOHgKkOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyODA3NQ==", "bodyText": "minor: missing a new line in the end.", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r503428075", "createdAt": "2020-10-12T17:10:42Z", "author": {"login": "jsjtzyy"}, "path": "config/mysql.properties", "diffHunk": "@@ -9,8 +9,4 @@\n # under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n # CONDITIONS OF ANY KIND, either express or implied.\n #\n-\n-mysql.url=jdbc:mysql://localhost/AccountMetadata?serverTimezone=UTC\n-mysql.user=root\n-mysql.password=password\n-\n+mysql.account.service.dbInfo=[{\"url\":\"jdbc:mysql://localhost/AccountMetadata?serverTimezone=UTC\",\"datacenter\":\"dc1\",\"isWriteable\":\"true\",\"username\":\"travis\",\"password\":\"\"}]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122f86497f4ad7d0dd1d6946305558ae2c5f7327"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTU5Mw==", "bodyText": "I'll fix that in next PR.", "url": "https://github.com/linkedin/ambry/pull/1651#discussion_r503489593", "createdAt": "2020-10-12T19:25:45Z", "author": {"login": "lightningrob"}, "path": "config/mysql.properties", "diffHunk": "@@ -9,8 +9,4 @@\n # under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n # CONDITIONS OF ANY KIND, either express or implied.\n #\n-\n-mysql.url=jdbc:mysql://localhost/AccountMetadata?serverTimezone=UTC\n-mysql.user=root\n-mysql.password=password\n-\n+mysql.account.service.dbInfo=[{\"url\":\"jdbc:mysql://localhost/AccountMetadata?serverTimezone=UTC\",\"datacenter\":\"dc1\",\"isWriteable\":\"true\",\"username\":\"travis\",\"password\":\"\"}]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyODA3NQ=="}, "originalCommit": {"oid": "122f86497f4ad7d0dd1d6946305558ae2c5f7327"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1068, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}