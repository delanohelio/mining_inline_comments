{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTk1MTQ5", "number": 1402, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToxMToxMlrODkbK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo0OTowN1rODkb6WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTIwNDg0OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToxMToxM1rOFwvYEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo0NjozMFrOFxb3jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1MjE3OA==", "bodyText": "java doc for this class please", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r386652178", "createdAt": "2020-03-02T21:11:13Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -653,22 +680,39 @@ private void performHardDeletes(List<MessageInfo> messageInfoList) throws StoreE\n     }\n   }\n \n+  class HardDeletePersistItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MTEzNQ==", "bodyText": "updated", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r387381135", "createdAt": "2020-03-04T00:46:30Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -653,22 +680,39 @@ private void performHardDeletes(List<MessageInfo> messageInfoList) throws StoreE\n     }\n   }\n \n+  class HardDeletePersistItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1MjE3OA=="}, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTIxMDgxOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToxMzowNVrOFwvb1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo0OTo0MFrOFxb7Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1MzE0MA==", "bodyText": "What if recovery range has been pruned but failed to persist cleanup token, will it be a problem?", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r386653140", "createdAt": "2020-03-02T21:13:05Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -352,6 +359,24 @@ void preLogFlush() {\n   void postLogFlush() {\n     /* start token saved before the flush is now safe to be persisted */\n     startTokenSafeToPersist = startTokenBeforeLogFlush;\n+\n+    hardDeleteLock.lock();\n+    try {\n+      // PersistCleanupToken because startTokenSafeToPersist changed.\n+      pruneHardDeleteRecoveryRange();\n+      persistCleanupToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MjExMA==", "bodyText": "It's fine if it's fails to persist, then we will wait for the next one.\nThe assumption is that the file on the disk contains a valid range and all the records between this range. And every time we change the file (prune and then persist), we replace the old range with a new one. If we fail to persist it, then next time when we restart, we are going to recover from a older range, which is totally fine, since the hard delete operation is idempotent.", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r387382110", "createdAt": "2020-03-04T00:49:40Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -352,6 +359,24 @@ void preLogFlush() {\n   void postLogFlush() {\n     /* start token saved before the flush is now safe to be persisted */\n     startTokenSafeToPersist = startTokenBeforeLogFlush;\n+\n+    hardDeleteLock.lock();\n+    try {\n+      // PersistCleanupToken because startTokenSafeToPersist changed.\n+      pruneHardDeleteRecoveryRange();\n+      persistCleanupToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1MzE0MA=="}, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTI0NjM2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToyMzo1OFrOFwvxig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1Mjo0MVrOFxb-4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1ODY5OA==", "bodyText": "any reason to change the ordering here? Throttle the hard delete I/O ?", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r386658698", "createdAt": "2020-03-02T21:23:58Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -625,9 +652,9 @@ private void performHardDeletes(List<MessageInfo> messageInfoList) throws StoreE\n           throw new StoreException(\"Aborting hard deletes as store is shutting down\",\n               StoreErrorCodes.Store_Shutting_Down);\n         }\n+        diskIOScheduler.getSlice(HARD_DELETE_CLEANUP_JOB_NAME, HARD_DELETE_CLEANUP_JOB_NAME, logWriteInfo.size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzAxMQ==", "bodyText": "the reason for changing the order is to use diskIOScheduler.getSlice to throw an exception before  modify the log file. The reason why I want to throw an exception is to mock the situation when we persist the HardDeleteRecoveryRange but fail to actually hard delete the records in the log file. Under such situation, we can test if the recovery actually works or not.", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r387383011", "createdAt": "2020-03-04T00:52:41Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -625,9 +652,9 @@ private void performHardDeletes(List<MessageInfo> messageInfoList) throws StoreE\n           throw new StoreException(\"Aborting hard deletes as store is shutting down\",\n               StoreErrorCodes.Store_Shutting_Down);\n         }\n+        diskIOScheduler.getSlice(HARD_DELETE_CLEANUP_JOB_NAME, HARD_DELETE_CLEANUP_JOB_NAME, logWriteInfo.size);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1ODY5OA=="}, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTI2MDc0OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToyODo0NlrOFwv6hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1Mjo1M1rOFxb_GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2MDk5OA==", "bodyText": "The method looks good, minor suggestion is to align with your comment and do a token type check at the very beginning. (Reject Journal based token)", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r386660998", "createdAt": "2020-03-02T21:28:46Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -705,52 +751,64 @@ int getSize() {\n       DataOutputStream dataOutputStream = new DataOutputStream(outStream);\n \n       /* Write the number of entries */\n-      dataOutputStream.writeInt(blobReadOptionsList.size());\n+      dataOutputStream.writeInt(items.size());\n \n       /* Write all the blobReadOptions */\n-      for (BlobReadOptions blobReadOptions : blobReadOptionsList) {\n-        dataOutputStream.write(blobReadOptions.toBytes());\n+      for (HardDeletePersistItem item : items) {\n+        dataOutputStream.write(item.blobReadOptions.toBytes());\n       }\n \n       /* Write all the messageStoreRecoveryInfos */\n-      for (byte[] recoveryInfo : messageStoreRecoveryInfoList) {\n+      for (HardDeletePersistItem item : items) {\n         /* First write the size of the recoveryInfo */\n-        dataOutputStream.writeInt(recoveryInfo.length);\n+        dataOutputStream.writeInt(item.messagesStoreRecoveryInfo.length);\n \n         /* Now, write the recoveryInfo */\n-        dataOutputStream.write(recoveryInfo);\n+        dataOutputStream.write(item.messagesStoreRecoveryInfo);\n       }\n \n       return outStream.toByteArray();\n     }\n \n     /**\n-     * Prunes entries in the range from the start up to, but excluding, the entry with the passed in key.\n+     * Prunes entries in the range from the start up to, but excluding, the entry with the passed in token.\n+     * Token passed to this method has to be a indexed based one.\n      */\n-    void pruneTill(StoreKey storeKey) {\n-      Iterator<BlobReadOptions> blobReadOptionsListIterator = blobReadOptionsList.iterator();\n-      Iterator<byte[]> messageStoreRecoveryListIterator = messageStoreRecoveryInfoList.iterator();\n-      while (blobReadOptionsListIterator.hasNext()) {\n-      /* Note: In the off chance that there are multiple presence of the same key in this range due to prior software\n-         bugs, note that this method prunes only till the first occurrence of the key. If it so happens that a\n-         later occurrence is the one really associated with this token, it does not affect the safety.\n-         Persisting more than what is required is okay as hard deleting a blob is an idempotent operation. */\n-        messageStoreRecoveryListIterator.next();\n-        if (blobReadOptionsListIterator.next().getMessageInfo().getStoreKey().equals(storeKey)) {\n-          break;\n+    void pruneTill(StoreFindToken token) {\n+      Iterator<HardDeletePersistItem> itemsIterator = items.iterator();\n+      while (itemsIterator.hasNext()) {\n+        HardDeletePersistItem item = itemsIterator.next();\n+        if (item.startTokenForBlobReadOptions.getType() == FindTokenType.Uninitialized) {\n+          itemsIterator.remove();\n         } else {\n-          blobReadOptionsListIterator.remove();\n-          messageStoreRecoveryListIterator.remove();\n+          if (compareTwoTokens(item.startTokenForBlobReadOptions, token) >= 0) {\n+            break;\n+          } else {\n+            itemsIterator.remove();\n+          }\n         }\n       }\n     }\n \n-    private List<BlobReadOptions> getBlobReadOptionsList() {\n-      return blobReadOptionsList;\n+    /**\n+     * Compare two StoreFindTokens and return the result as an integer like compareTo interface.\n+     * These two tokens have to be IndexBased tokens.\n+     * @param token1 The first token to compare.\n+     * @param token2 The second tokent to compare.\n+     * @return 0 means they are equal. negative number means token1 is less than token2. postive number means the opposite.\n+     */\n+    int compareTwoTokens(StoreFindToken token1, StoreFindToken token2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzA2NQ==", "bodyText": "good catch, updated.", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r387383065", "createdAt": "2020-03-04T00:52:53Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -705,52 +751,64 @@ int getSize() {\n       DataOutputStream dataOutputStream = new DataOutputStream(outStream);\n \n       /* Write the number of entries */\n-      dataOutputStream.writeInt(blobReadOptionsList.size());\n+      dataOutputStream.writeInt(items.size());\n \n       /* Write all the blobReadOptions */\n-      for (BlobReadOptions blobReadOptions : blobReadOptionsList) {\n-        dataOutputStream.write(blobReadOptions.toBytes());\n+      for (HardDeletePersistItem item : items) {\n+        dataOutputStream.write(item.blobReadOptions.toBytes());\n       }\n \n       /* Write all the messageStoreRecoveryInfos */\n-      for (byte[] recoveryInfo : messageStoreRecoveryInfoList) {\n+      for (HardDeletePersistItem item : items) {\n         /* First write the size of the recoveryInfo */\n-        dataOutputStream.writeInt(recoveryInfo.length);\n+        dataOutputStream.writeInt(item.messagesStoreRecoveryInfo.length);\n \n         /* Now, write the recoveryInfo */\n-        dataOutputStream.write(recoveryInfo);\n+        dataOutputStream.write(item.messagesStoreRecoveryInfo);\n       }\n \n       return outStream.toByteArray();\n     }\n \n     /**\n-     * Prunes entries in the range from the start up to, but excluding, the entry with the passed in key.\n+     * Prunes entries in the range from the start up to, but excluding, the entry with the passed in token.\n+     * Token passed to this method has to be a indexed based one.\n      */\n-    void pruneTill(StoreKey storeKey) {\n-      Iterator<BlobReadOptions> blobReadOptionsListIterator = blobReadOptionsList.iterator();\n-      Iterator<byte[]> messageStoreRecoveryListIterator = messageStoreRecoveryInfoList.iterator();\n-      while (blobReadOptionsListIterator.hasNext()) {\n-      /* Note: In the off chance that there are multiple presence of the same key in this range due to prior software\n-         bugs, note that this method prunes only till the first occurrence of the key. If it so happens that a\n-         later occurrence is the one really associated with this token, it does not affect the safety.\n-         Persisting more than what is required is okay as hard deleting a blob is an idempotent operation. */\n-        messageStoreRecoveryListIterator.next();\n-        if (blobReadOptionsListIterator.next().getMessageInfo().getStoreKey().equals(storeKey)) {\n-          break;\n+    void pruneTill(StoreFindToken token) {\n+      Iterator<HardDeletePersistItem> itemsIterator = items.iterator();\n+      while (itemsIterator.hasNext()) {\n+        HardDeletePersistItem item = itemsIterator.next();\n+        if (item.startTokenForBlobReadOptions.getType() == FindTokenType.Uninitialized) {\n+          itemsIterator.remove();\n         } else {\n-          blobReadOptionsListIterator.remove();\n-          messageStoreRecoveryListIterator.remove();\n+          if (compareTwoTokens(item.startTokenForBlobReadOptions, token) >= 0) {\n+            break;\n+          } else {\n+            itemsIterator.remove();\n+          }\n         }\n       }\n     }\n \n-    private List<BlobReadOptions> getBlobReadOptionsList() {\n-      return blobReadOptionsList;\n+    /**\n+     * Compare two StoreFindTokens and return the result as an integer like compareTo interface.\n+     * These two tokens have to be IndexBased tokens.\n+     * @param token1 The first token to compare.\n+     * @param token2 The second tokent to compare.\n+     * @return 0 means they are equal. negative number means token1 is less than token2. postive number means the opposite.\n+     */\n+    int compareTwoTokens(StoreFindToken token1, StoreFindToken token2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2MDk5OA=="}, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTMwNTgzOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo0MjoyN1rOFwwVmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1NDoxMVrOFxcAlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NzkzMA==", "bodyText": "Could you explain a little bit about this case?", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r386667930", "createdAt": "2020-03-02T21:42:27Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -705,52 +751,64 @@ int getSize() {\n       DataOutputStream dataOutputStream = new DataOutputStream(outStream);\n \n       /* Write the number of entries */\n-      dataOutputStream.writeInt(blobReadOptionsList.size());\n+      dataOutputStream.writeInt(items.size());\n \n       /* Write all the blobReadOptions */\n-      for (BlobReadOptions blobReadOptions : blobReadOptionsList) {\n-        dataOutputStream.write(blobReadOptions.toBytes());\n+      for (HardDeletePersistItem item : items) {\n+        dataOutputStream.write(item.blobReadOptions.toBytes());\n       }\n \n       /* Write all the messageStoreRecoveryInfos */\n-      for (byte[] recoveryInfo : messageStoreRecoveryInfoList) {\n+      for (HardDeletePersistItem item : items) {\n         /* First write the size of the recoveryInfo */\n-        dataOutputStream.writeInt(recoveryInfo.length);\n+        dataOutputStream.writeInt(item.messagesStoreRecoveryInfo.length);\n \n         /* Now, write the recoveryInfo */\n-        dataOutputStream.write(recoveryInfo);\n+        dataOutputStream.write(item.messagesStoreRecoveryInfo);\n       }\n \n       return outStream.toByteArray();\n     }\n \n     /**\n-     * Prunes entries in the range from the start up to, but excluding, the entry with the passed in key.\n+     * Prunes entries in the range from the start up to, but excluding, the entry with the passed in token.\n+     * Token passed to this method has to be a indexed based one.\n      */\n-    void pruneTill(StoreKey storeKey) {\n-      Iterator<BlobReadOptions> blobReadOptionsListIterator = blobReadOptionsList.iterator();\n-      Iterator<byte[]> messageStoreRecoveryListIterator = messageStoreRecoveryInfoList.iterator();\n-      while (blobReadOptionsListIterator.hasNext()) {\n-      /* Note: In the off chance that there are multiple presence of the same key in this range due to prior software\n-         bugs, note that this method prunes only till the first occurrence of the key. If it so happens that a\n-         later occurrence is the one really associated with this token, it does not affect the safety.\n-         Persisting more than what is required is okay as hard deleting a blob is an idempotent operation. */\n-        messageStoreRecoveryListIterator.next();\n-        if (blobReadOptionsListIterator.next().getMessageInfo().getStoreKey().equals(storeKey)) {\n-          break;\n+    void pruneTill(StoreFindToken token) {\n+      Iterator<HardDeletePersistItem> itemsIterator = items.iterator();\n+      while (itemsIterator.hasNext()) {\n+        HardDeletePersistItem item = itemsIterator.next();\n+        if (item.startTokenForBlobReadOptions.getType() == FindTokenType.Uninitialized) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzQ0NA==", "bodyText": "The very first time when we starting scanning through the log file, we are using a Uninitialized FindToken. And since it's at the very first beginning of a log file, we can assume they are always prior to any IndexBased FindToken.", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r387383444", "createdAt": "2020-03-04T00:54:11Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -705,52 +751,64 @@ int getSize() {\n       DataOutputStream dataOutputStream = new DataOutputStream(outStream);\n \n       /* Write the number of entries */\n-      dataOutputStream.writeInt(blobReadOptionsList.size());\n+      dataOutputStream.writeInt(items.size());\n \n       /* Write all the blobReadOptions */\n-      for (BlobReadOptions blobReadOptions : blobReadOptionsList) {\n-        dataOutputStream.write(blobReadOptions.toBytes());\n+      for (HardDeletePersistItem item : items) {\n+        dataOutputStream.write(item.blobReadOptions.toBytes());\n       }\n \n       /* Write all the messageStoreRecoveryInfos */\n-      for (byte[] recoveryInfo : messageStoreRecoveryInfoList) {\n+      for (HardDeletePersistItem item : items) {\n         /* First write the size of the recoveryInfo */\n-        dataOutputStream.writeInt(recoveryInfo.length);\n+        dataOutputStream.writeInt(item.messagesStoreRecoveryInfo.length);\n \n         /* Now, write the recoveryInfo */\n-        dataOutputStream.write(recoveryInfo);\n+        dataOutputStream.write(item.messagesStoreRecoveryInfo);\n       }\n \n       return outStream.toByteArray();\n     }\n \n     /**\n-     * Prunes entries in the range from the start up to, but excluding, the entry with the passed in key.\n+     * Prunes entries in the range from the start up to, but excluding, the entry with the passed in token.\n+     * Token passed to this method has to be a indexed based one.\n      */\n-    void pruneTill(StoreKey storeKey) {\n-      Iterator<BlobReadOptions> blobReadOptionsListIterator = blobReadOptionsList.iterator();\n-      Iterator<byte[]> messageStoreRecoveryListIterator = messageStoreRecoveryInfoList.iterator();\n-      while (blobReadOptionsListIterator.hasNext()) {\n-      /* Note: In the off chance that there are multiple presence of the same key in this range due to prior software\n-         bugs, note that this method prunes only till the first occurrence of the key. If it so happens that a\n-         later occurrence is the one really associated with this token, it does not affect the safety.\n-         Persisting more than what is required is okay as hard deleting a blob is an idempotent operation. */\n-        messageStoreRecoveryListIterator.next();\n-        if (blobReadOptionsListIterator.next().getMessageInfo().getStoreKey().equals(storeKey)) {\n-          break;\n+    void pruneTill(StoreFindToken token) {\n+      Iterator<HardDeletePersistItem> itemsIterator = items.iterator();\n+      while (itemsIterator.hasNext()) {\n+        HardDeletePersistItem item = itemsIterator.next();\n+        if (item.startTokenForBlobReadOptions.getType() == FindTokenType.Uninitialized) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NzkzMA=="}, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTMyNjMyOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo0OTowN1rOFwwiog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1NDoxN1rOFxcAqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3MTI2Ng==", "bodyText": "For concurrency, let's make sure all variables shared by HardDeleter thread and Index persistor thread to be volatile.", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r386671266", "createdAt": "2020-03-02T21:49:07Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -89,9 +89,9 @@\n    * startTokenBeforeLogFlush: This token is set to the current start token just before log flush and once the log is\n    *                           flushed, this is used to set startTokenSafeToPersist.\n    */\n-  private FindToken startToken;\n   private FindToken startTokenBeforeLogFlush;\n-  private FindToken startTokenSafeToPersist;\n+  private volatile FindToken startTokenSafeToPersist;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzQ2NA==", "bodyText": "sure.", "url": "https://github.com/linkedin/ambry/pull/1402#discussion_r387383464", "createdAt": "2020-03-04T00:54:17Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -89,9 +89,9 @@\n    * startTokenBeforeLogFlush: This token is set to the current start token just before log flush and once the log is\n    *                           flushed, this is used to set startTokenSafeToPersist.\n    */\n-  private FindToken startToken;\n   private FindToken startTokenBeforeLogFlush;\n-  private FindToken startTokenSafeToPersist;\n+  private volatile FindToken startTokenSafeToPersist;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3MTI2Ng=="}, "originalCommit": {"oid": "800ca7861ec747243c4bd0bb3ee6c4f103bb511e"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1740, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}