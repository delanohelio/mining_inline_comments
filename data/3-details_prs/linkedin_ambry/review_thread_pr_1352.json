{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzE1OTc5", "number": 1352, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMToxNDoxMlrODWFpOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTo0NDowOFrODd1zyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDg3NzM4OnYy", "diffSide": "LEFT", "path": "ambry-rest/src/test/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactoryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMToxNDoxMlrOFapavw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODoxNjoxOVrOFgD6AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4NTg4Nw==", "bodyText": "The test is temporarily disabled, will fix it soon in this PR.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r363485887", "createdAt": "2020-01-06T21:14:12Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/test/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactoryTest.java", "diffHunk": "@@ -71,7 +71,6 @@ public void getAsyncRequestResponseHandlerTest() throws InstantiationException,\n   /**\n    * Tests instantiation of {@link AsyncRequestResponseHandlerFactory} with bad input.\n    */\n-  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2Mjc1Mg==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r369162752", "createdAt": "2020-01-21T18:16:19Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/test/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactoryTest.java", "diffHunk": "@@ -71,7 +71,6 @@ public void getAsyncRequestResponseHandlerTest() throws InstantiationException,\n   /**\n    * Tests instantiation of {@link AsyncRequestResponseHandlerFactory} with bad input.\n    */\n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4NTg4Nw=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDg3OTEzOnYy", "diffSide": "LEFT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMToxNDo1MlrOFapbxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODoxNjoyNVrOFgD6NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4NjE1MA==", "bodyText": "Temporarily commented. Will fix it soon in this PR.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r363486150", "createdAt": "2020-01-06T21:14:52Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "diffHunk": "@@ -109,10 +109,10 @@ private static void buildInstance(MetricRegistry metricRegistry) {\n         instance = new AsyncRequestResponseHandler(requestResponseHandlerMetrics);\n       }\n       // check if same instance of MetricRegistry - otherwise it is a problem.\n-      if (AsyncRequestResponseHandlerFactory.requestResponseHandlerMetrics.metricRegistry != metricRegistry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MjgwNA==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r369162804", "createdAt": "2020-01-21T18:16:25Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "diffHunk": "@@ -109,10 +109,10 @@ private static void buildInstance(MetricRegistry metricRegistry) {\n         instance = new AsyncRequestResponseHandler(requestResponseHandlerMetrics);\n       }\n       // check if same instance of MetricRegistry - otherwise it is a problem.\n-      if (AsyncRequestResponseHandlerFactory.requestResponseHandlerMetrics.metricRegistry != metricRegistry) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4NjE1MA=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODQwODQ3OnYy", "diffSide": "RIGHT", "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMjozODozNVrOFbLZWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODozMDo1OFrOFgEXGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0MjU4Ng==", "bodyText": "we should only call callback method once for the entire list since the callback passed to writeTo should be invoked only when the write is completed or failed.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r364042586", "createdAt": "2020-01-08T02:38:35Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "diffHunk": "@@ -48,6 +50,13 @@ public long writeTo(WritableByteChannel channel) throws IOException {\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    for (Send send : compositSendList) {\n+      send.writeTo(channel, callback);\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MzkyMA==", "bodyText": "Yes, perhaps each child send should have its own callback and then when either all of those callbacks succeed or an error has occured, the passed-in callback is notified, like in the default impl of AsyncWritableChannel.write(ByteBuf src, Callback<Long> callback)", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365483920", "createdAt": "2020-01-11T00:52:43Z", "author": {"login": "cgtz"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "diffHunk": "@@ -48,6 +50,13 @@ public long writeTo(WritableByteChannel channel) throws IOException {\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    for (Send send : compositSendList) {\n+      send.writeTo(channel, callback);\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0MjU4Ng=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE3MDIwMw==", "bodyText": "Yes, this should be changed.\nI will make another PR to address this issue. For this PR, I will set callback to null in child send.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r369170203", "createdAt": "2020-01-21T18:30:58Z", "author": {"login": "zzmao"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "diffHunk": "@@ -48,6 +50,13 @@ public long writeTo(WritableByteChannel channel) throws IOException {\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    for (Send send : compositSendList) {\n+      send.writeTo(channel, callback);\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0MjU4Ng=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODQwOTc5OnYy", "diffSide": "RIGHT", "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/GetResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMjozOTo1M1rOFbLaNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODozMToxMVrOFgEXng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0MjgwNA==", "bodyText": "same here, callback should only be invoked once.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r364042804", "createdAt": "2020-01-08T02:39:53Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/GetResponse.java", "diffHunk": "@@ -131,6 +133,26 @@ public long writeTo(WritableByteChannel channel) throws IOException {\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    if (bufferToSend == null) {\n+      bufferToSend = ByteBuffer.allocate(\n+          (int) super.sizeInBytes() + (Partition_Response_Info_List_Size + partitionResponseInfoSize));\n+      writeHeader();\n+      if (partitionResponseInfoList != null) {\n+        bufferToSend.putInt(partitionResponseInfoList.size());\n+        for (PartitionResponseInfo partitionResponseInfo : partitionResponseInfoList) {\n+          partitionResponseInfo.writeTo(bufferToSend);\n+        }\n+      }\n+      bufferToSend.flip();\n+    }\n+    channel.write(bufferToSend, callback);\n+    if (toSend != null) {\n+      toSend.writeTo(channel, callback);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE3MDMzNA==", "bodyText": "Will make another PR to address this issue. For this PR, I will set callback to null in child send.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r369170334", "createdAt": "2020-01-21T18:31:11Z", "author": {"login": "zzmao"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/GetResponse.java", "diffHunk": "@@ -131,6 +133,26 @@ public long writeTo(WritableByteChannel channel) throws IOException {\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    if (bufferToSend == null) {\n+      bufferToSend = ByteBuffer.allocate(\n+          (int) super.sizeInBytes() + (Partition_Response_Info_List_Size + partitionResponseInfoSize));\n+      writeHeader();\n+      if (partitionResponseInfoList != null) {\n+        bufferToSend.putInt(partitionResponseInfoList.size());\n+        for (PartitionResponseInfo partitionResponseInfo : partitionResponseInfoList) {\n+          partitionResponseInfo.writeTo(bufferToSend);\n+        }\n+      }\n+      bufferToSend.flip();\n+    }\n+    channel.write(bufferToSend, callback);\n+    if (toSend != null) {\n+      toSend.writeTo(channel, callback);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0MjgwNA=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzYwODc3OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/store/MessageReadSet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDozNzo0OFrOFcjPVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODo0NDowNFrOFgEwqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MTgxNA==", "bodyText": "Add asynchronously to the docs to indicate that this method returns immediately after the write is initiated?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365481814", "createdAt": "2020-01-11T00:37:48Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/store/MessageReadSet.java", "diffHunk": "@@ -36,7 +38,14 @@\n   long writeTo(int index, WritableByteChannel channel, long relativeOffset, long maxSize) throws IOException;\n \n   /**\n-   * Returns the total number of messages in this set\n+   * Write all messages in this set to the give {@link AsyncWritableChannel}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NjYwOQ==", "bodyText": "Oh nvm, upon reading the other code I see that this is at least calls write() for all data available. Could you explain how this method is intended to behave. For example, is the supplied callback to be called when the entire batch of writes succeeds or fails? Also, are implementations of this method allowed to block waiting for i.o. (e.g. disk access), or are they supposed to have their messages ready and materialized in memory?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365556609", "createdAt": "2020-01-12T04:12:13Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/store/MessageReadSet.java", "diffHunk": "@@ -36,7 +38,14 @@\n   long writeTo(int index, WritableByteChannel channel, long relativeOffset, long maxSize) throws IOException;\n \n   /**\n-   * Returns the total number of messages in this set\n+   * Write all messages in this set to the give {@link AsyncWritableChannel}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MTgxNA=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE3Njc0Ng==", "bodyText": "Added in comment:\n   * This method is intend to write prefetched data from {@link MessageReadSet} to {@link AsyncWritableChannel}. Data\n   * should be ready in memory(no blocking call) before write to {@link AsyncWritableChannel} asynchronously. Callback is\n   * called when the entire batch of writes succeeds or fails.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r369176746", "createdAt": "2020-01-21T18:44:04Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com.github.ambry/store/MessageReadSet.java", "diffHunk": "@@ -36,7 +38,14 @@\n   long writeTo(int index, WritableByteChannel channel, long relativeOffset, long maxSize) throws IOException;\n \n   /**\n-   * Returns the total number of messages in this set\n+   * Write all messages in this set to the give {@link AsyncWritableChannel}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MTgxNA=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzYwOTIyOnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/store/MessageReadSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDozODo0MFrOFcjPrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDozODo0MFrOFcjPrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MTkwMQ==", "bodyText": "Callback<Void>?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365481901", "createdAt": "2020-01-11T00:38:40Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/store/MessageReadSet.java", "diffHunk": "@@ -36,7 +38,14 @@\n   long writeTo(int index, WritableByteChannel channel, long relativeOffset, long maxSize) throws IOException;\n \n   /**\n-   * Returns the total number of messages in this set\n+   * Write all messages in this set to the give {@link AsyncWritableChannel}\n+   * @param channel the channel into which the data needs to be written to\n+   * @param callback The callback when data is fully wrote to the channel.\n+   * @throws IOException\n+   */\n+  void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzYyMDE3OnYy", "diffSide": "RIGHT", "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDo1MDoyNFrOFcjWRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDo1MDoyNFrOFcjWRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MzU4OA==", "bodyText": "composit -> composite", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365483588", "createdAt": "2020-01-11T00:50:24Z", "author": {"login": "cgtz"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "diffHunk": "@@ -48,6 +50,13 @@ public long writeTo(WritableByteChannel channel) throws IOException {\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    for (Send send : compositSendList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzYyMzg3OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/NettyServerRequestResponseChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDo1NDozOFrOFcjYmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDo1NDozOFrOFcjYmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4NDE4NA==", "bodyText": "This is done inside of the selector, reading the size of the payload is implemented in BoundedReceive", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365484184", "createdAt": "2020-01-11T00:54:38Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -32,6 +33,13 @@ public NettyServerRequestResponseChannel(int queueSize) {\n   /** Send a request to be handled, potentially blocking until there is room in the queue for the request */\n   @Override\n   public void sendRequest(NetworkRequest request) throws InterruptedException {\n+    DataInputStream stream = new DataInputStream(request.getInputStream());\n+    try {\n+      // TODO: Where is this done in socket channel?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODA0Njk2OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/test/java/com.github.ambry.clustermap/MockClusterMap.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMDowNzo0NVrOFcmxBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMDowNzo0NVrOFcmxBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTU5MA==", "bodyText": "if the first port is not optional, make it an int instead of a wrapper object.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365539590", "createdAt": "2020-01-11T20:07:45Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/test/java/com.github.ambry.clustermap/MockClusterMap.java", "diffHunk": "@@ -234,16 +238,15 @@ public static MockClusterMap createOneNodeRecoveryClusterMap(MockDataNodeId reco\n     return new MockClusterMap(recoveryNode, vcrNode, dcName);\n   }\n \n-  protected ArrayList<Port> getListOfPorts(int port) {\n-    ArrayList<Port> ports = new ArrayList<>();\n-    ports.add(new Port(port, PortType.PLAINTEXT));\n-    return ports;\n-  }\n-\n-  protected ArrayList<Port> getListOfPorts(int port, int sslPort) {\n+  protected ArrayList<Port> getListOfPorts(Integer port, Integer sslPort, Integer http2Port) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODE4MTU1OnYy", "diffSide": "RIGHT", "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/GetResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNDoxMzoxNVrOFcnznA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMzo0MTo0NlrOFfH5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NjYzNg==", "bodyText": "Can you make this shared code block into a helper function?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365556636", "createdAt": "2020-01-12T04:13:15Z", "author": {"login": "cgtz"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/GetResponse.java", "diffHunk": "@@ -131,6 +133,26 @@ public long writeTo(WritableByteChannel channel) throws IOException {\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    if (bufferToSend == null) {\n+      bufferToSend = ByteBuffer.allocate(\n+          (int) super.sizeInBytes() + (Partition_Response_Info_List_Size + partitionResponseInfoSize));\n+      writeHeader();\n+      if (partitionResponseInfoList != null) {\n+        bufferToSend.putInt(partitionResponseInfoList.size());\n+        for (PartitionResponseInfo partitionResponseInfo : partitionResponseInfoList) {\n+          partitionResponseInfo.writeTo(bufferToSend);\n+        }\n+      }\n+      bufferToSend.flip();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3OTU3Mw==", "bodyText": "yes, I should do this.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r368179573", "createdAt": "2020-01-17T23:41:46Z", "author": {"login": "zzmao"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/GetResponse.java", "diffHunk": "@@ -131,6 +133,26 @@ public long writeTo(WritableByteChannel channel) throws IOException {\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    if (bufferToSend == null) {\n+      bufferToSend = ByteBuffer.allocate(\n+          (int) super.sizeInBytes() + (Partition_Response_Info_List_Size + partitionResponseInfoSize));\n+      writeHeader();\n+      if (partitionResponseInfoList != null) {\n+        bufferToSend.putInt(partitionResponseInfoList.size());\n+        for (PartitionResponseInfo partitionResponseInfo : partitionResponseInfoList) {\n+          partitionResponseInfo.writeTo(bufferToSend);\n+        }\n+      }\n+      bufferToSend.flip();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NjYzNg=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDk2NDIzOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/main/java/com.github.ambry.server/AmbryServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1ODo1NlrOFdBJHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1ODo1NlrOFdBJHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3MTc0MA==", "bodyText": "I thought this was combined into RestRequestResponseHandlerFactory", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365971740", "createdAt": "2020-01-13T18:58:56Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/main/java/com.github.ambry.server/AmbryServer.java", "diffHunk": "@@ -201,6 +215,37 @@ public void startup() throws InstantiationException {\n           networkServer.getRequestResponseChannel(), requests);\n       networkServer.start();\n \n+      // start netty http2 server\n+      if (nodeId.hasHttp2Port()) {\n+        RestServerConfig restServerConfig = new RestServerConfig(properties);\n+        SSLFactory sslFactory = new NettySslHttp2Factory(sslConfig);\n+        RestServerState restServerState = new RestServerState(restServerConfig.restServerHealthCheckUri);\n+        NettyServerRequestResponseChannel requestResponseChannel = new NettyServerRequestResponseChannel(1);\n+        RestRequestService restRequestService = new StorageRestRequestService(requestResponseChannel);\n+\n+        AmbryServerRequests ambryServerRequestsForHttp2 =\n+            new AmbryServerRequests(storageManager, requestResponseChannel, clusterMap, nodeId, registry, serverMetrics,\n+                findTokenHelper, notificationSystem, replicationManager, storeKeyFactory, serverConfig,\n+                storeKeyConverterFactory, statsManager);\n+        RequestHandlerPool requestHandlerPoolForHttp2 =\n+            new RequestHandlerPool(serverConfig.serverRequestHandlerNumOfThreads, requestResponseChannel,\n+                ambryServerRequestsForHttp2);\n+\n+        RestRequestHandlerFactory restRequestHandlerFactory =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDk3MTc1OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTowMTo0NVrOFdBNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTowMTo0NVrOFdBNuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3MjkyMQ==", "bodyText": "It does not look like this factory has the override behavior, so you can modify this javadoc and change the arg name to just sslFactory", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365972921", "createdAt": "2020-01-13T19:01:45Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.socket.SocketChannel;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Netty specific implementation of {@link NioServerFactory}.\n+ * <p/>\n+ * Sets up all the supporting cast required for the operation of {@link NettyServer} and returns a new instance on\n+ * {@link #getNioServer()}.\n+ */\n+public class StorageServerNettyFactory implements NioServerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StorageServerNettyFactory.class);\n+\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  final Map<Integer, ChannelInitializer<SocketChannel>> channelInitializers;\n+\n+  /**\n+   * Creates a new instance of NettyFrontendServerFactory.\n+   * @param http2Port the port for HTTP2 request.\n+   * @param verifiableProperties the in-memory {@link VerifiableProperties} to use.\n+   * @param metricRegistry the {@link MetricRegistry} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to hand off the requests to.\n+   * @param publicAccessLogger the {@link PublicAccessLogger} that can be used for public access logging\n+   * @param restServerState the {@link RestServerState} that can be used to check the health of the system\n+   *                              to respond to health check requests\n+   * @param defaultSslFactory the {@link SSLFactory} used to construct the {@link javax.net.ssl.SSLEngine} used for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDk3MjI3OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTowMTo1NlrOFdBOEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTowMTo1NlrOFdBOEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3MzAxMQ==", "bodyText": "sslfactory is required", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365973011", "createdAt": "2020-01-13T19:01:56Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.socket.SocketChannel;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Netty specific implementation of {@link NioServerFactory}.\n+ * <p/>\n+ * Sets up all the supporting cast required for the operation of {@link NettyServer} and returns a new instance on\n+ * {@link #getNioServer()}.\n+ */\n+public class StorageServerNettyFactory implements NioServerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StorageServerNettyFactory.class);\n+\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  final Map<Integer, ChannelInitializer<SocketChannel>> channelInitializers;\n+\n+  /**\n+   * Creates a new instance of NettyFrontendServerFactory.\n+   * @param http2Port the port for HTTP2 request.\n+   * @param verifiableProperties the in-memory {@link VerifiableProperties} to use.\n+   * @param metricRegistry the {@link MetricRegistry} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to hand off the requests to.\n+   * @param publicAccessLogger the {@link PublicAccessLogger} that can be used for public access logging\n+   * @param restServerState the {@link RestServerState} that can be used to check the health of the system\n+   *                              to respond to health check requests\n+   * @param defaultSslFactory the {@link SSLFactory} used to construct the {@link javax.net.ssl.SSLEngine} used for\n+   *                          handling SSL requests (unless {@link NettyConfig#SSL_FACTORY_KEY} is set, in which case\n+   *                          it will be overridden).\n+   * @throws IllegalArgumentException if any of the arguments are null.\n+   * @throws ReflectiveOperationException if a netty-specific {@link SSLFactory} cannot be instantiated via reflection.\n+   */\n+  public StorageServerNettyFactory(int http2Port, VerifiableProperties verifiableProperties,\n+      MetricRegistry metricRegistry, final RestRequestHandler requestHandler,\n+      final PublicAccessLogger publicAccessLogger, final RestServerState restServerState, SSLFactory defaultSslFactory)\n+      throws ReflectiveOperationException {\n+    if (verifiableProperties == null || metricRegistry == null || requestHandler == null || publicAccessLogger == null\n+        || restServerState == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDk4NjU3OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTowNjo1NVrOFdBW-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMzozMToyMVrOFfHxpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3NTI4OA==", "bodyText": "It may be worth looking into what to do about public access logging on storage servers. They already have public access logging facilities inside of AmbryRequests. We would either want to disable these logs or make sure that they are redirected to the right log files.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365975288", "createdAt": "2020-01-13T19:06:55Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.socket.SocketChannel;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Netty specific implementation of {@link NioServerFactory}.\n+ * <p/>\n+ * Sets up all the supporting cast required for the operation of {@link NettyServer} and returns a new instance on\n+ * {@link #getNioServer()}.\n+ */\n+public class StorageServerNettyFactory implements NioServerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StorageServerNettyFactory.class);\n+\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  final Map<Integer, ChannelInitializer<SocketChannel>> channelInitializers;\n+\n+  /**\n+   * Creates a new instance of NettyFrontendServerFactory.\n+   * @param http2Port the port for HTTP2 request.\n+   * @param verifiableProperties the in-memory {@link VerifiableProperties} to use.\n+   * @param metricRegistry the {@link MetricRegistry} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to hand off the requests to.\n+   * @param publicAccessLogger the {@link PublicAccessLogger} that can be used for public access logging\n+   * @param restServerState the {@link RestServerState} that can be used to check the health of the system\n+   *                              to respond to health check requests\n+   * @param defaultSslFactory the {@link SSLFactory} used to construct the {@link javax.net.ssl.SSLEngine} used for\n+   *                          handling SSL requests (unless {@link NettyConfig#SSL_FACTORY_KEY} is set, in which case\n+   *                          it will be overridden).\n+   * @throws IllegalArgumentException if any of the arguments are null.\n+   * @throws ReflectiveOperationException if a netty-specific {@link SSLFactory} cannot be instantiated via reflection.\n+   */\n+  public StorageServerNettyFactory(int http2Port, VerifiableProperties verifiableProperties,\n+      MetricRegistry metricRegistry, final RestRequestHandler requestHandler,\n+      final PublicAccessLogger publicAccessLogger, final RestServerState restServerState, SSLFactory defaultSslFactory)\n+      throws ReflectiveOperationException {\n+    if (verifiableProperties == null || metricRegistry == null || requestHandler == null || publicAccessLogger == null\n+        || restServerState == null) {\n+      throw new IllegalArgumentException(\"Null arg(s) received during instantiation of StorageServerNettyFactory\");\n+    }\n+    nettyConfig = new NettyConfig(verifiableProperties);\n+    performanceConfig = new PerformanceConfig(verifiableProperties);\n+    nettyMetrics = new NettyMetrics(metricRegistry);\n+    ConnectionStatsHandler connectionStatsHandler = new ConnectionStatsHandler(nettyMetrics);\n+\n+    Map<Integer, ChannelInitializer<SocketChannel>> initializers = new HashMap<>();\n+\n+    initializers.put(http2Port,\n+        new StorageServerNettyChannelInitializer(nettyConfig, performanceConfig, nettyMetrics, connectionStatsHandler,\n+            requestHandler, publicAccessLogger, restServerState, defaultSslFactory, metricRegistry));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3NzU3Mg==", "bodyText": "removed.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r368177572", "createdAt": "2020-01-17T23:31:21Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.socket.SocketChannel;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Netty specific implementation of {@link NioServerFactory}.\n+ * <p/>\n+ * Sets up all the supporting cast required for the operation of {@link NettyServer} and returns a new instance on\n+ * {@link #getNioServer()}.\n+ */\n+public class StorageServerNettyFactory implements NioServerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StorageServerNettyFactory.class);\n+\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  final Map<Integer, ChannelInitializer<SocketChannel>> channelInitializers;\n+\n+  /**\n+   * Creates a new instance of NettyFrontendServerFactory.\n+   * @param http2Port the port for HTTP2 request.\n+   * @param verifiableProperties the in-memory {@link VerifiableProperties} to use.\n+   * @param metricRegistry the {@link MetricRegistry} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to hand off the requests to.\n+   * @param publicAccessLogger the {@link PublicAccessLogger} that can be used for public access logging\n+   * @param restServerState the {@link RestServerState} that can be used to check the health of the system\n+   *                              to respond to health check requests\n+   * @param defaultSslFactory the {@link SSLFactory} used to construct the {@link javax.net.ssl.SSLEngine} used for\n+   *                          handling SSL requests (unless {@link NettyConfig#SSL_FACTORY_KEY} is set, in which case\n+   *                          it will be overridden).\n+   * @throws IllegalArgumentException if any of the arguments are null.\n+   * @throws ReflectiveOperationException if a netty-specific {@link SSLFactory} cannot be instantiated via reflection.\n+   */\n+  public StorageServerNettyFactory(int http2Port, VerifiableProperties verifiableProperties,\n+      MetricRegistry metricRegistry, final RestRequestHandler requestHandler,\n+      final PublicAccessLogger publicAccessLogger, final RestServerState restServerState, SSLFactory defaultSslFactory)\n+      throws ReflectiveOperationException {\n+    if (verifiableProperties == null || metricRegistry == null || requestHandler == null || publicAccessLogger == null\n+        || restServerState == null) {\n+      throw new IllegalArgumentException(\"Null arg(s) received during instantiation of StorageServerNettyFactory\");\n+    }\n+    nettyConfig = new NettyConfig(verifiableProperties);\n+    performanceConfig = new PerformanceConfig(verifiableProperties);\n+    nettyMetrics = new NettyMetrics(metricRegistry);\n+    ConnectionStatsHandler connectionStatsHandler = new ConnectionStatsHandler(nettyMetrics);\n+\n+    Map<Integer, ChannelInitializer<SocketChannel>> initializers = new HashMap<>();\n+\n+    initializers.put(http2Port,\n+        new StorageServerNettyChannelInitializer(nettyConfig, performanceConfig, nettyMetrics, connectionStatsHandler,\n+            requestHandler, publicAccessLogger, restServerState, defaultSslFactory, metricRegistry));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3NTI4OA=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDk4OTIyOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTowNzozOFrOFdBYcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMzo0MToyNVrOFfH5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3NTY2NQ==", "bodyText": "you can just use Collections.singletonMap here.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365975665", "createdAt": "2020-01-13T19:07:38Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.socket.SocketChannel;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Netty specific implementation of {@link NioServerFactory}.\n+ * <p/>\n+ * Sets up all the supporting cast required for the operation of {@link NettyServer} and returns a new instance on\n+ * {@link #getNioServer()}.\n+ */\n+public class StorageServerNettyFactory implements NioServerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StorageServerNettyFactory.class);\n+\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  final Map<Integer, ChannelInitializer<SocketChannel>> channelInitializers;\n+\n+  /**\n+   * Creates a new instance of NettyFrontendServerFactory.\n+   * @param http2Port the port for HTTP2 request.\n+   * @param verifiableProperties the in-memory {@link VerifiableProperties} to use.\n+   * @param metricRegistry the {@link MetricRegistry} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to hand off the requests to.\n+   * @param publicAccessLogger the {@link PublicAccessLogger} that can be used for public access logging\n+   * @param restServerState the {@link RestServerState} that can be used to check the health of the system\n+   *                              to respond to health check requests\n+   * @param defaultSslFactory the {@link SSLFactory} used to construct the {@link javax.net.ssl.SSLEngine} used for\n+   *                          handling SSL requests (unless {@link NettyConfig#SSL_FACTORY_KEY} is set, in which case\n+   *                          it will be overridden).\n+   * @throws IllegalArgumentException if any of the arguments are null.\n+   * @throws ReflectiveOperationException if a netty-specific {@link SSLFactory} cannot be instantiated via reflection.\n+   */\n+  public StorageServerNettyFactory(int http2Port, VerifiableProperties verifiableProperties,\n+      MetricRegistry metricRegistry, final RestRequestHandler requestHandler,\n+      final PublicAccessLogger publicAccessLogger, final RestServerState restServerState, SSLFactory defaultSslFactory)\n+      throws ReflectiveOperationException {\n+    if (verifiableProperties == null || metricRegistry == null || requestHandler == null || publicAccessLogger == null\n+        || restServerState == null) {\n+      throw new IllegalArgumentException(\"Null arg(s) received during instantiation of StorageServerNettyFactory\");\n+    }\n+    nettyConfig = new NettyConfig(verifiableProperties);\n+    performanceConfig = new PerformanceConfig(verifiableProperties);\n+    nettyMetrics = new NettyMetrics(metricRegistry);\n+    ConnectionStatsHandler connectionStatsHandler = new ConnectionStatsHandler(nettyMetrics);\n+\n+    Map<Integer, ChannelInitializer<SocketChannel>> initializers = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3OTUwNQ==", "bodyText": "cool.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r368179505", "createdAt": "2020-01-17T23:41:25Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.socket.SocketChannel;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Netty specific implementation of {@link NioServerFactory}.\n+ * <p/>\n+ * Sets up all the supporting cast required for the operation of {@link NettyServer} and returns a new instance on\n+ * {@link #getNioServer()}.\n+ */\n+public class StorageServerNettyFactory implements NioServerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StorageServerNettyFactory.class);\n+\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  final Map<Integer, ChannelInitializer<SocketChannel>> channelInitializers;\n+\n+  /**\n+   * Creates a new instance of NettyFrontendServerFactory.\n+   * @param http2Port the port for HTTP2 request.\n+   * @param verifiableProperties the in-memory {@link VerifiableProperties} to use.\n+   * @param metricRegistry the {@link MetricRegistry} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to hand off the requests to.\n+   * @param publicAccessLogger the {@link PublicAccessLogger} that can be used for public access logging\n+   * @param restServerState the {@link RestServerState} that can be used to check the health of the system\n+   *                              to respond to health check requests\n+   * @param defaultSslFactory the {@link SSLFactory} used to construct the {@link javax.net.ssl.SSLEngine} used for\n+   *                          handling SSL requests (unless {@link NettyConfig#SSL_FACTORY_KEY} is set, in which case\n+   *                          it will be overridden).\n+   * @throws IllegalArgumentException if any of the arguments are null.\n+   * @throws ReflectiveOperationException if a netty-specific {@link SSLFactory} cannot be instantiated via reflection.\n+   */\n+  public StorageServerNettyFactory(int http2Port, VerifiableProperties verifiableProperties,\n+      MetricRegistry metricRegistry, final RestRequestHandler requestHandler,\n+      final PublicAccessLogger publicAccessLogger, final RestServerState restServerState, SSLFactory defaultSslFactory)\n+      throws ReflectiveOperationException {\n+    if (verifiableProperties == null || metricRegistry == null || requestHandler == null || publicAccessLogger == null\n+        || restServerState == null) {\n+      throw new IllegalArgumentException(\"Null arg(s) received during instantiation of StorageServerNettyFactory\");\n+    }\n+    nettyConfig = new NettyConfig(verifiableProperties);\n+    performanceConfig = new PerformanceConfig(verifiableProperties);\n+    nettyMetrics = new NettyMetrics(metricRegistry);\n+    ConnectionStatsHandler connectionStatsHandler = new ConnectionStatsHandler(nettyMetrics);\n+\n+    Map<Integer, ChannelInitializer<SocketChannel>> initializers = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3NTY2NQ=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDk5MDY4OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTowODoxNFrOFdBZdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMzozNTo1NVrOFfH09Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3NTkyNw==", "bodyText": "commented out ^", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365975927", "createdAt": "2020-01-13T19:08:14Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.ssl.SslHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import java.net.InetSocketAddress;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link StorageServerNettyFactory}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class StorageServerNettyChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  private final ConnectionStatsHandler connectionStatsHandler;\n+  private final RestRequestHandler requestHandler;\n+  private final PublicAccessLogger publicAccessLogger;\n+  private final RestServerState restServerState;\n+  private final SSLFactory sslFactory;\n+\n+  /**\n+   * Construct a {@link StorageServerNettyChannelInitializer}.\n+   * @param nettyConfig the config to use when instantiating certain handlers on this pipeline.\n+   * @param performanceConfig the config to use when evaluating ambry service level objectives that include latency.\n+   * @param nettyMetrics the {@link NettyMetrics} object to use.\n+   * @param connectionStatsHandler the {@link ConnectionStatsHandler} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to handle requests on this pipeline.\n+   * @param publicAccessLogger the {@link PublicAccessLogger} to use.\n+   * @param restServerState the {@link RestServerState} object to use.\n+   * @param sslFactory the {@link SSLFactory} to use for generating {@link javax.net.ssl.SSLEngine} instances,\n+   *                   or {@code null} if SSL is not enabled in this pipeline.\n+   */\n+  public StorageServerNettyChannelInitializer(NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      NettyMetrics nettyMetrics, ConnectionStatsHandler connectionStatsHandler, RestRequestHandler requestHandler,\n+      PublicAccessLogger publicAccessLogger, RestServerState restServerState, SSLFactory sslFactory,\n+      MetricRegistry metricRegistry) {\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.nettyMetrics = nettyMetrics;\n+    this.connectionStatsHandler = connectionStatsHandler;\n+    this.publicAccessLogger = publicAccessLogger;\n+    this.restServerState = restServerState;\n+    this.sslFactory = sslFactory;\n+    RestRequestMetricsTracker.setDefaults(metricRegistry);\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    // If channel handler implementations are not annotated with @Sharable, Netty creates a new instance of every class\n+    // in the pipeline for every connection.\n+    // i.e. if there are a 1000 active connections there will be a 1000 NettyMessageProcessor instances.\n+    ChannelPipeline pipeline = ch.pipeline();\n+    // connection stats handler to track connection related metrics\n+    // if SSL is enabled, add an SslHandler before the HTTP codec\n+    if (sslFactory != null) {\n+      InetSocketAddress peerAddress = ch.remoteAddress();\n+      String peerHost = peerAddress.getHostName();\n+      int peerPort = peerAddress.getPort();\n+      SslHandler sslHandler = new SslHandler(sslFactory.createSSLEngine(peerHost, peerPort, SSLFactory.Mode.SERVER));\n+      pipeline.addLast(\"SslHandler\", sslHandler);\n+    }\n+    // TODO: add PublicAccessLogger and ConnectionStatsHandler\n+    pipeline.addLast(Http2FrameCodecBuilder.forServer().build())\n+        // .addLast(\"healthCheckHandler\", new HealthCheckHandler(restServerState, nettyMetrics))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3ODQyMQ==", "bodyText": "removed.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r368178421", "createdAt": "2020-01-17T23:35:55Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.ssl.SslHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import java.net.InetSocketAddress;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link StorageServerNettyFactory}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class StorageServerNettyChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  private final ConnectionStatsHandler connectionStatsHandler;\n+  private final RestRequestHandler requestHandler;\n+  private final PublicAccessLogger publicAccessLogger;\n+  private final RestServerState restServerState;\n+  private final SSLFactory sslFactory;\n+\n+  /**\n+   * Construct a {@link StorageServerNettyChannelInitializer}.\n+   * @param nettyConfig the config to use when instantiating certain handlers on this pipeline.\n+   * @param performanceConfig the config to use when evaluating ambry service level objectives that include latency.\n+   * @param nettyMetrics the {@link NettyMetrics} object to use.\n+   * @param connectionStatsHandler the {@link ConnectionStatsHandler} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to handle requests on this pipeline.\n+   * @param publicAccessLogger the {@link PublicAccessLogger} to use.\n+   * @param restServerState the {@link RestServerState} object to use.\n+   * @param sslFactory the {@link SSLFactory} to use for generating {@link javax.net.ssl.SSLEngine} instances,\n+   *                   or {@code null} if SSL is not enabled in this pipeline.\n+   */\n+  public StorageServerNettyChannelInitializer(NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      NettyMetrics nettyMetrics, ConnectionStatsHandler connectionStatsHandler, RestRequestHandler requestHandler,\n+      PublicAccessLogger publicAccessLogger, RestServerState restServerState, SSLFactory sslFactory,\n+      MetricRegistry metricRegistry) {\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.nettyMetrics = nettyMetrics;\n+    this.connectionStatsHandler = connectionStatsHandler;\n+    this.publicAccessLogger = publicAccessLogger;\n+    this.restServerState = restServerState;\n+    this.sslFactory = sslFactory;\n+    RestRequestMetricsTracker.setDefaults(metricRegistry);\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    // If channel handler implementations are not annotated with @Sharable, Netty creates a new instance of every class\n+    // in the pipeline for every connection.\n+    // i.e. if there are a 1000 active connections there will be a 1000 NettyMessageProcessor instances.\n+    ChannelPipeline pipeline = ch.pipeline();\n+    // connection stats handler to track connection related metrics\n+    // if SSL is enabled, add an SslHandler before the HTTP codec\n+    if (sslFactory != null) {\n+      InetSocketAddress peerAddress = ch.remoteAddress();\n+      String peerHost = peerAddress.getHostName();\n+      int peerPort = peerAddress.getPort();\n+      SslHandler sslHandler = new SslHandler(sslFactory.createSSLEngine(peerHost, peerPort, SSLFactory.Mode.SERVER));\n+      pipeline.addLast(\"SslHandler\", sslHandler);\n+    }\n+    // TODO: add PublicAccessLogger and ConnectionStatsHandler\n+    pipeline.addLast(Http2FrameCodecBuilder.forServer().build())\n+        // .addLast(\"healthCheckHandler\", new HealthCheckHandler(restServerState, nettyMetrics))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3NTkyNw=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDk5ODY3OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToxMTowNVrOFdBeVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDo0OToyMlrOFiWXHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3NzE3Mg==", "bodyText": "Do the utility handlers like HealthCheckHandler, and PublicAccessLogHandler belong here?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r365977172", "createdAt": "2020-01-13T19:11:05Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.codec.http2.Http2StreamFrameToHttpObjectCodec;\n+import io.netty.handler.stream.ChunkedWriteHandler;\n+\n+\n+/*\n+ * HTTP2 stream handler for each stream.\n+ */\n+@ChannelHandler.Sharable\n+public class Http2StreamHandler extends ChannelInboundHandlerAdapter {\n+\n+  private NettyMetrics nettyMetrics;\n+  private NettyConfig nettyConfig;\n+  private PerformanceConfig performanceConfig;\n+  private RestRequestHandler requestHandler;\n+\n+  public Http2StreamHandler(NettyMetrics nettyMetrics, NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      RestRequestHandler requestHandler) {\n+    this.nettyMetrics = nettyMetrics;\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n+    ctx.pipeline().addLast(new Http2StreamFrameToHttpObjectCodec(true));\n+    // NettyMessageProcessor depends on ChunkedWriteHandler.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3ODkxOA==", "bodyText": "Existing server logging is good. We don't need PublicAccessLogHandler.\nHealthCheckHandler  is needed. Let me if I can add it in this PR.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r368178918", "createdAt": "2020-01-17T23:38:31Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.codec.http2.Http2StreamFrameToHttpObjectCodec;\n+import io.netty.handler.stream.ChunkedWriteHandler;\n+\n+\n+/*\n+ * HTTP2 stream handler for each stream.\n+ */\n+@ChannelHandler.Sharable\n+public class Http2StreamHandler extends ChannelInboundHandlerAdapter {\n+\n+  private NettyMetrics nettyMetrics;\n+  private NettyConfig nettyConfig;\n+  private PerformanceConfig performanceConfig;\n+  private RestRequestHandler requestHandler;\n+\n+  public Http2StreamHandler(NettyMetrics nettyMetrics, NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      RestRequestHandler requestHandler) {\n+    this.nettyMetrics = nettyMetrics;\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n+    ctx.pipeline().addLast(new Http2StreamFrameToHttpObjectCodec(true));\n+    // NettyMessageProcessor depends on ChunkedWriteHandler.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3NzE3Mg=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MjI3MA==", "bodyText": "who is sending this health check request? is the send compatible with http2?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r371562270", "createdAt": "2020-01-28T00:49:22Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.codec.http2.Http2StreamFrameToHttpObjectCodec;\n+import io.netty.handler.stream.ChunkedWriteHandler;\n+\n+\n+/*\n+ * HTTP2 stream handler for each stream.\n+ */\n+@ChannelHandler.Sharable\n+public class Http2StreamHandler extends ChannelInboundHandlerAdapter {\n+\n+  private NettyMetrics nettyMetrics;\n+  private NettyConfig nettyConfig;\n+  private PerformanceConfig performanceConfig;\n+  private RestRequestHandler requestHandler;\n+\n+  public Http2StreamHandler(NettyMetrics nettyMetrics, NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      RestRequestHandler requestHandler) {\n+    this.nettyMetrics = nettyMetrics;\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n+    ctx.pipeline().addLast(new Http2StreamFrameToHttpObjectCodec(true));\n+    // NettyMessageProcessor depends on ChunkedWriteHandler.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3NzE3Mg=="}, "originalCommit": {"oid": "744f1e6576eaf037c51443dccded11a33473271e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzAxNzE2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/StoreMessageReadSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzozODozNVrOFiVMpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToyNTo0OFrOFixk2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0MzIwNQ==", "bodyText": "should increment i after each write.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r371543205", "createdAt": "2020-01-27T23:38:35Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/StoreMessageReadSet.java", "diffHunk": "@@ -208,6 +210,25 @@ public long writeTo(int index, WritableByteChannel channel, long relativeOffset,\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    int lastIndex = readOptions.size() - 1;\n+    int i = 0;\n+    for (BlobReadOptions options : readOptions) {\n+      ByteBuffer buf = options.getPrefetchedData();\n+      if (buf == null) {\n+        throw new IOException(\"Data should be prefetched.\");\n+      }\n+      buf.position(0);\n+      if (i == lastIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwODE1Mg==", "bodyText": "good catch.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r372008152", "createdAt": "2020-01-28T19:25:48Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/main/java/com.github.ambry.store/StoreMessageReadSet.java", "diffHunk": "@@ -208,6 +210,25 @@ public long writeTo(int index, WritableByteChannel channel, long relativeOffset,\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    int lastIndex = readOptions.size() - 1;\n+    int i = 0;\n+    for (BlobReadOptions options : readOptions) {\n+      ByteBuffer buf = options.getPrefetchedData();\n+      if (buf == null) {\n+        throw new IOException(\"Data should be prefetched.\");\n+      }\n+      buf.position(0);\n+      if (i == lastIndex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0MzIwNQ=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzAyODQ5OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/StoreMessageReadSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo0NDo0OFrOFiVTaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToyNjo1N1rOFixnNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NDkzNw==", "bodyText": "We can stop writing to the channel whenever there is an exception here and stop the for loop. This would require changing the callback implementation.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r371544937", "createdAt": "2020-01-27T23:44:48Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/StoreMessageReadSet.java", "diffHunk": "@@ -208,6 +210,25 @@ public long writeTo(int index, WritableByteChannel channel, long relativeOffset,\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    int lastIndex = readOptions.size() - 1;\n+    int i = 0;\n+    for (BlobReadOptions options : readOptions) {\n+      ByteBuffer buf = options.getPrefetchedData();\n+      if (buf == null) {\n+        throw new IOException(\"Data should be prefetched.\");\n+      }\n+      buf.position(0);\n+      if (i == lastIndex) {\n+        // only the last one needs callback.\n+        channel.write(buf, callback);\n+      } else {\n+        channel.write(buf, null);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwODc1OQ==", "bodyText": "Yes. A good callback implementation is needed. Will add todo here and implement in follow up PR.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r372008759", "createdAt": "2020-01-28T19:26:57Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/main/java/com.github.ambry.store/StoreMessageReadSet.java", "diffHunk": "@@ -208,6 +210,25 @@ public long writeTo(int index, WritableByteChannel channel, long relativeOffset,\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    int lastIndex = readOptions.size() - 1;\n+    int i = 0;\n+    for (BlobReadOptions options : readOptions) {\n+      ByteBuffer buf = options.getPrefetchedData();\n+      if (buf == null) {\n+        throw new IOException(\"Data should be prefetched.\");\n+      }\n+      buf.position(0);\n+      if (i == lastIndex) {\n+        // only the last one needs callback.\n+        channel.write(buf, callback);\n+      } else {\n+        channel.write(buf, null);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NDkzNw=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA1MTIxOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1NzowOFrOFiVhOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1NzowOFrOFiVhOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODQ3Mw==", "bodyText": "nit: private volatile", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r371548473", "createdAt": "2020-01-27T23:57:08Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -55,14 +56,14 @@\n  */\n public class Http2BlockingChannel implements ConnectedChannel {\n   private static final Logger logger = LoggerFactory.getLogger(Http2BlockingChannel.class);\n-  private final Http2ResponseHandler http2ResponseHandler;\n   private final String hostName;\n   private final int port;\n   private EventLoopGroup workerGroup;\n   private Channel channel;\n+  private ChannelPromise channelPromise;\n+  private ByteBuf responseByteBuf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA2NjU3OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNToyNVrOFiVqZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTozMzozM1rOFix0gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDgyMQ==", "bodyText": "this is going to run out of sync with the callback in the send method. If the awaitUninterruptedly returns false, dataInputStream would reuse the responseByteBuf set by last send.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r371550821", "createdAt": "2020-01-28T00:05:25Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -103,24 +104,31 @@ public void send(Send request) throws IOException {\n     byteBufferChannel.getBuffer().position(0);\n     ByteBuf byteBuf = Unpooled.wrappedBuffer(byteBufferChannel.getBuffer());\n \n-    Http2ClientStreamInitializer initializer = new Http2ClientStreamInitializer(http2ResponseHandler);\n+    Http2ClientStreamInitializer initializer = new Http2ClientStreamInitializer(new Http2ResponseHandler());\n     Http2StreamChannel childChannel =\n         new Http2StreamChannelBootstrap(channel).handler(initializer).open().syncUninterruptibly().getNow();\n     Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+    http2Headers.set(RestUtils.Headers.HTTP2_FRONTEND_REQUEST, \"true\");\n+    channelPromise = childChannel.newPromise();\n+    childChannel.attr(Http2ResponseHandler.RESPONSE_CALLBACK).set(new Callback<ByteBuf>() {\n+      @Override\n+      public void onCompletion(ByteBuf result, Exception exception) {\n+        responseByteBuf = result;\n+        channelPromise.setSuccess();\n+      }\n+    });\n \n     DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n     DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBuf, true);\n-    ChannelPromise childChannelPromise = childChannel.newPromise();\n     childChannel.write(headersFrame);\n-    ChannelFuture channelFuture = childChannel.write(dataFrame);\n+    childChannel.write(dataFrame);\n     childChannel.flush();\n-    http2ResponseHandler.put(channelFuture, childChannelPromise);\n   }\n \n   @Override\n   public ChannelOutput receive() throws IOException {\n-    Http2ResponseHandler.StreamResult streamResult = http2ResponseHandler.awaitResponses(5, TimeUnit.SECONDS);\n-    DataInputStream dataInputStream = new NettyByteBufDataInputStream(streamResult.getByteBuf());\n+    channelPromise.awaitUninterruptibly(3, TimeUnit.SECONDS);\n+    DataInputStream dataInputStream = new NettyByteBufDataInputStream(responseByteBuf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxMjE2MA==", "bodyText": "Adding a check if return value T or F.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r372012160", "createdAt": "2020-01-28T19:33:33Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -103,24 +104,31 @@ public void send(Send request) throws IOException {\n     byteBufferChannel.getBuffer().position(0);\n     ByteBuf byteBuf = Unpooled.wrappedBuffer(byteBufferChannel.getBuffer());\n \n-    Http2ClientStreamInitializer initializer = new Http2ClientStreamInitializer(http2ResponseHandler);\n+    Http2ClientStreamInitializer initializer = new Http2ClientStreamInitializer(new Http2ResponseHandler());\n     Http2StreamChannel childChannel =\n         new Http2StreamChannelBootstrap(channel).handler(initializer).open().syncUninterruptibly().getNow();\n     Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+    http2Headers.set(RestUtils.Headers.HTTP2_FRONTEND_REQUEST, \"true\");\n+    channelPromise = childChannel.newPromise();\n+    childChannel.attr(Http2ResponseHandler.RESPONSE_CALLBACK).set(new Callback<ByteBuf>() {\n+      @Override\n+      public void onCompletion(ByteBuf result, Exception exception) {\n+        responseByteBuf = result;\n+        channelPromise.setSuccess();\n+      }\n+    });\n \n     DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n     DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBuf, true);\n-    ChannelPromise childChannelPromise = childChannel.newPromise();\n     childChannel.write(headersFrame);\n-    ChannelFuture channelFuture = childChannel.write(dataFrame);\n+    childChannel.write(dataFrame);\n     childChannel.flush();\n-    http2ResponseHandler.put(channelFuture, childChannelPromise);\n   }\n \n   @Override\n   public ChannelOutput receive() throws IOException {\n-    Http2ResponseHandler.StreamResult streamResult = http2ResponseHandler.awaitResponses(5, TimeUnit.SECONDS);\n-    DataInputStream dataInputStream = new NettyByteBufDataInputStream(streamResult.getByteBuf());\n+    channelPromise.awaitUninterruptibly(3, TimeUnit.SECONDS);\n+    DataInputStream dataInputStream = new NettyByteBufDataInputStream(responseByteBuf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDgyMQ=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA4NDM5OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/main/java/com.github.ambry.server/AmbryServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDoxNjoxNVrOFiV1RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTozOToxM1rOFix_zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MzYwNA==", "bodyText": "we should create a variable in the object to reference requestHandlePoolForHttp2 so we can stop it in the shutdown method.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r371553604", "createdAt": "2020-01-28T00:16:15Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/main/java/com.github.ambry.server/AmbryServer.java", "diffHunk": "@@ -201,6 +214,36 @@ public void startup() throws InstantiationException {\n           networkServer.getRequestResponseChannel(), requests);\n       networkServer.start();\n \n+      // Start netty http2 server\n+      if (nodeId.hasHttp2Port()) {\n+        RestServerConfig restServerConfig = new RestServerConfig(properties);\n+        SSLFactory sslFactory = new NettySslHttp2Factory(sslConfig);\n+        RestServerState restServerState = new RestServerState(restServerConfig.restServerHealthCheckUri);\n+        NettyServerRequestResponseChannel requestResponseChannel = new NettyServerRequestResponseChannel(1);\n+        RestRequestService restRequestService = new StorageRestRequestService(requestResponseChannel);\n+\n+        AmbryServerRequests ambryServerRequestsForHttp2 =\n+            new AmbryServerRequests(storageManager, requestResponseChannel, clusterMap, nodeId, registry, serverMetrics,\n+                findTokenHelper, notificationSystem, replicationManager, storeKeyFactory, serverConfig,\n+                storeKeyConverterFactory, statsManager);\n+        RequestHandlerPool requestHandlerPoolForHttp2 =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNTA1Mg==", "bodyText": "fixed. Also renamed some variables name with http2 keyword.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r372015052", "createdAt": "2020-01-28T19:39:13Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/main/java/com.github.ambry.server/AmbryServer.java", "diffHunk": "@@ -201,6 +214,36 @@ public void startup() throws InstantiationException {\n           networkServer.getRequestResponseChannel(), requests);\n       networkServer.start();\n \n+      // Start netty http2 server\n+      if (nodeId.hasHttp2Port()) {\n+        RestServerConfig restServerConfig = new RestServerConfig(properties);\n+        SSLFactory sslFactory = new NettySslHttp2Factory(sslConfig);\n+        RestServerState restServerState = new RestServerState(restServerConfig.restServerHealthCheckUri);\n+        NettyServerRequestResponseChannel requestResponseChannel = new NettyServerRequestResponseChannel(1);\n+        RestRequestService restRequestService = new StorageRestRequestService(requestResponseChannel);\n+\n+        AmbryServerRequests ambryServerRequestsForHttp2 =\n+            new AmbryServerRequests(storageManager, requestResponseChannel, clusterMap, nodeId, registry, serverMetrics,\n+                findTokenHelper, notificationSystem, replicationManager, storeKeyFactory, serverConfig,\n+                storeKeyConverterFactory, statsManager);\n+        RequestHandlerPool requestHandlerPoolForHttp2 =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MzYwNA=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA5OTMzOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/NettyServerRequestResponseChannel.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDoyNToxM1rOFiV-jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNToxOTozOVrOFkmmtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NTk4MA==", "bodyText": "I don't get this one.\nThis method will be called in the StorageRestRequestService, which is a service to handle http2 request. That means the NetworkRequest would only contains the bytes from http2 client, why the BoundedReceive is involved here? I don't see a reason to read 8 bytes from enqueuing this request.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r371555980", "createdAt": "2020-01-28T00:25:13Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com.github.ambry.network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -32,6 +33,14 @@ public NettyServerRequestResponseChannel(int queueSize) {\n   /** Send a request to be handled, potentially blocking until there is room in the queue for the request */\n   @Override\n   public void sendRequest(NetworkRequest request) throws InterruptedException {\n+    DataInputStream stream = new DataInputStream(request.getInputStream());\n+    try {\n+      // The first 8 bytes is size of the request. TCP implementation uses this size to allocate buffer. See {@link BoundedReceive}\n+      // Here we just need to consume it.\n+      stream.readLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMTMxNA==", "bodyText": "Talk offline.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r372031314", "createdAt": "2020-01-28T20:12:40Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -32,6 +33,14 @@ public NettyServerRequestResponseChannel(int queueSize) {\n   /** Send a request to be handled, potentially blocking until there is room in the queue for the request */\n   @Override\n   public void sendRequest(NetworkRequest request) throws InterruptedException {\n+    DataInputStream stream = new DataInputStream(request.getInputStream());\n+    try {\n+      // The first 8 bytes is size of the request. TCP implementation uses this size to allocate buffer. See {@link BoundedReceive}\n+      // Here we just need to consume it.\n+      stream.readLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NTk4MA=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNTU1Ng==", "bodyText": "To make this more symmetrical with SocketServer, which handles the size header before adding the request to the queue, it may be better to read the size header in StorageRestRequestService.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373925556", "createdAt": "2020-02-03T05:19:39Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -32,6 +33,14 @@ public NettyServerRequestResponseChannel(int queueSize) {\n   /** Send a request to be handled, potentially blocking until there is room in the queue for the request */\n   @Override\n   public void sendRequest(NetworkRequest request) throws InterruptedException {\n+    DataInputStream stream = new DataInputStream(request.getInputStream());\n+    try {\n+      // The first 8 bytes is size of the request. TCP implementation uses this size to allocate buffer. See {@link BoundedReceive}\n+      // Here we just need to consume it.\n+      stream.readLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NTk4MA=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzEwMzYzOnYy", "diffSide": "RIGHT", "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/AdminResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDoyNzozOVrOFiWBFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0NzoxNFrOFiyPig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NjYzMA==", "bodyText": "nit: please add javadoc.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r371556630", "createdAt": "2020-01-28T00:27:39Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/AdminResponse.java", "diffHunk": "@@ -59,15 +61,25 @@ public static AdminResponse readFrom(DataInputStream stream) throws IOException\n     return new AdminResponse(correlationId, clientId, error);\n   }\n \n-  @Override\n-  public long writeTo(WritableByteChannel channel) throws IOException {\n+  private void prepareBufferToSend() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTA4Mg==", "bodyText": "added. Also changed in GetResponse.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r372019082", "createdAt": "2020-01-28T19:47:14Z", "author": {"login": "zzmao"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/AdminResponse.java", "diffHunk": "@@ -59,15 +61,25 @@ public static AdminResponse readFrom(DataInputStream stream) throws IOException\n     return new AdminResponse(correlationId, clientId, error);\n   }\n \n-  @Override\n-  public long writeTo(WritableByteChannel channel) throws IOException {\n+  private void prepareBufferToSend() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NjYzMA=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzEzMTcxOnYy", "diffSide": "RIGHT", "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDo0NDozNlrOFiWSMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOToxNzoxMlrOFkVSog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MTAxMQ==", "bodyText": "We can stop the for loop whenever there is a failure in the writeTo method.\nThe benefit of doing so is that every Send is a StoreMessageReadSet here and calling writeTo on StoreMessageReadSet would trigger one disk io operation. Stoping for loop whenever there is a failure would save some disk io.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r371561011", "createdAt": "2020-01-28T00:44:36Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "diffHunk": "@@ -24,33 +26,48 @@\n  */\n public class CompositeSend implements Send {\n \n-  private final List<Send> compositSendList;\n+  private final List<Send> compositeSendList;\n   private long totalSizeToWrite;\n   private int currentIndexInProgress;\n \n-  public CompositeSend(List<Send> compositSendList) {\n-    this.compositSendList = compositSendList;\n+  public CompositeSend(List<Send> compositeSendList) {\n+    this.compositeSendList = compositeSendList;\n     this.currentIndexInProgress = 0;\n-    for (Send messageFormatSend : compositSendList) {\n+    for (Send messageFormatSend : compositeSendList) {\n       totalSizeToWrite += messageFormatSend.sizeInBytes();\n     }\n   }\n \n   @Override\n   public long writeTo(WritableByteChannel channel) throws IOException {\n     long written = 0;\n-    if (currentIndexInProgress < compositSendList.size()) {\n-      written = compositSendList.get(currentIndexInProgress).writeTo(channel);\n-      if (compositSendList.get(currentIndexInProgress).isSendComplete()) {\n+    if (currentIndexInProgress < compositeSendList.size()) {\n+      written = compositeSendList.get(currentIndexInProgress).writeTo(channel);\n+      if (compositeSendList.get(currentIndexInProgress).isSendComplete()) {\n         currentIndexInProgress++;\n       }\n     }\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    int lastIndex = compositeSendList.size() - 1;\n+    int i = 0;\n+    for (Send send : compositeSendList) {\n+      if (i == lastIndex) {\n+        // only the last one pass in callback\n+        send.writeTo(channel, callback);\n+      } else {\n+        send.writeTo(channel, null);\n+      }\n+      i++;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTQ2Mg==", "bodyText": "What's your suggestion on how to stop it?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r372019462", "createdAt": "2020-01-28T19:47:58Z", "author": {"login": "zzmao"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "diffHunk": "@@ -24,33 +26,48 @@\n  */\n public class CompositeSend implements Send {\n \n-  private final List<Send> compositSendList;\n+  private final List<Send> compositeSendList;\n   private long totalSizeToWrite;\n   private int currentIndexInProgress;\n \n-  public CompositeSend(List<Send> compositSendList) {\n-    this.compositSendList = compositSendList;\n+  public CompositeSend(List<Send> compositeSendList) {\n+    this.compositeSendList = compositeSendList;\n     this.currentIndexInProgress = 0;\n-    for (Send messageFormatSend : compositSendList) {\n+    for (Send messageFormatSend : compositeSendList) {\n       totalSizeToWrite += messageFormatSend.sizeInBytes();\n     }\n   }\n \n   @Override\n   public long writeTo(WritableByteChannel channel) throws IOException {\n     long written = 0;\n-    if (currentIndexInProgress < compositSendList.size()) {\n-      written = compositSendList.get(currentIndexInProgress).writeTo(channel);\n-      if (compositSendList.get(currentIndexInProgress).isSendComplete()) {\n+    if (currentIndexInProgress < compositeSendList.size()) {\n+      written = compositeSendList.get(currentIndexInProgress).writeTo(channel);\n+      if (compositeSendList.get(currentIndexInProgress).isSendComplete()) {\n         currentIndexInProgress++;\n       }\n     }\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    int lastIndex = compositeSendList.size() - 1;\n+    int i = 0;\n+    for (Send send : compositeSendList) {\n+      if (i == lastIndex) {\n+        // only the last one pass in callback\n+        send.writeTo(channel, callback);\n+      } else {\n+        send.writeTo(channel, null);\n+      }\n+      i++;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MTAxMQ=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MTg5MA==", "bodyText": "Had offline chat. Looks like there is no immediate way to stop the loop, because exception happens in callback.  But will enhance callback logic in next PR.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373641890", "createdAt": "2020-01-31T19:17:12Z", "author": {"login": "zzmao"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "diffHunk": "@@ -24,33 +26,48 @@\n  */\n public class CompositeSend implements Send {\n \n-  private final List<Send> compositSendList;\n+  private final List<Send> compositeSendList;\n   private long totalSizeToWrite;\n   private int currentIndexInProgress;\n \n-  public CompositeSend(List<Send> compositSendList) {\n-    this.compositSendList = compositSendList;\n+  public CompositeSend(List<Send> compositeSendList) {\n+    this.compositeSendList = compositeSendList;\n     this.currentIndexInProgress = 0;\n-    for (Send messageFormatSend : compositSendList) {\n+    for (Send messageFormatSend : compositeSendList) {\n       totalSizeToWrite += messageFormatSend.sizeInBytes();\n     }\n   }\n \n   @Override\n   public long writeTo(WritableByteChannel channel) throws IOException {\n     long written = 0;\n-    if (currentIndexInProgress < compositSendList.size()) {\n-      written = compositSendList.get(currentIndexInProgress).writeTo(channel);\n-      if (compositSendList.get(currentIndexInProgress).isSendComplete()) {\n+    if (currentIndexInProgress < compositeSendList.size()) {\n+      written = compositeSendList.get(currentIndexInProgress).writeTo(channel);\n+      if (compositeSendList.get(currentIndexInProgress).isSendComplete()) {\n         currentIndexInProgress++;\n       }\n     }\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    int lastIndex = compositeSendList.size() - 1;\n+    int i = 0;\n+    for (Send send : compositeSendList) {\n+      if (i == lastIndex) {\n+        // only the last one pass in callback\n+        send.writeTo(channel, callback);\n+      } else {\n+        send.writeTo(channel, null);\n+      }\n+      i++;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MTAxMQ=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzE2NTY4OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTowNTo1NlrOFiWm1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOToyNDoxN1rOFkVefQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NjI5Mw==", "bodyText": "I think we should probably add another handler between IdleStateHandler and Http2MultiplexHandler to deal with IdleStateEvent.\nHttp2MulitiplexHandler doesn't seem like it will handle IdleStateEvent, so we would probably see all the children channels would be triggered by this event.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r371566293", "createdAt": "2020-01-28T01:05:56Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.ssl.SslHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import java.net.InetSocketAddress;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link StorageServerNettyFactory}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class StorageServerNettyChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  private final ConnectionStatsHandler connectionStatsHandler;\n+  private final RestRequestHandler requestHandler;\n+  private final RestServerState restServerState;\n+  private final SSLFactory sslFactory;\n+\n+  /**\n+   * Construct a {@link StorageServerNettyChannelInitializer}.\n+   * @param nettyConfig the config to use when instantiating certain handlers on this pipeline.\n+   * @param performanceConfig the config to use when evaluating ambry service level objectives that include latency.\n+   * @param nettyMetrics the {@link NettyMetrics} object to use.\n+   * @param connectionStatsHandler the {@link ConnectionStatsHandler} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to handle requests on this pipeline.\n+   * @param restServerState the {@link RestServerState} object to use.\n+   * @param sslFactory the {@link SSLFactory} to use for generating {@link javax.net.ssl.SSLEngine} instances,\n+   *                   or {@code null} if SSL is not enabled in this pipeline.\n+   */\n+  public StorageServerNettyChannelInitializer(NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      NettyMetrics nettyMetrics, ConnectionStatsHandler connectionStatsHandler, RestRequestHandler requestHandler,\n+      RestServerState restServerState, SSLFactory sslFactory, MetricRegistry metricRegistry) {\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.nettyMetrics = nettyMetrics;\n+    this.connectionStatsHandler = connectionStatsHandler;\n+    this.restServerState = restServerState;\n+    this.sslFactory = sslFactory;\n+    RestRequestMetricsTracker.setDefaults(metricRegistry);\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    // If channel handler implementations are not annotated with @Sharable, Netty creates a new instance of every class\n+    // in the pipeline for every connection.\n+    // i.e. if there are a 1000 active connections there will be a 1000 NettyMessageProcessor instances.\n+    ChannelPipeline pipeline = ch.pipeline();\n+    // connection stats handler to track connection related metrics\n+    // if SSL is enabled, add an SslHandler before the HTTP codec\n+    if (sslFactory != null) {\n+      InetSocketAddress peerAddress = ch.remoteAddress();\n+      String peerHost = peerAddress.getHostName();\n+      int peerPort = peerAddress.getPort();\n+      SslHandler sslHandler = new SslHandler(sslFactory.createSSLEngine(peerHost, peerPort, SSLFactory.Mode.SERVER));\n+      pipeline.addLast(\"SslHandler\", sslHandler);\n+    }\n+    pipeline.addLast(Http2FrameCodecBuilder.forServer().build())\n+        .addLast(\"IdleStateHandler\", new IdleStateHandler(0, 0, nettyConfig.nettyServerIdleTimeSeconds))\n+        .addLast(\"Http2MultiplexHandler\", new Http2MultiplexHandler(\n+            new Http2StreamHandler(nettyMetrics, nettyConfig, performanceConfig, requestHandler)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyOTEyMA==", "bodyText": "Got you. Let me think about this.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r372029120", "createdAt": "2020-01-28T20:07:53Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.ssl.SslHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import java.net.InetSocketAddress;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link StorageServerNettyFactory}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class StorageServerNettyChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  private final ConnectionStatsHandler connectionStatsHandler;\n+  private final RestRequestHandler requestHandler;\n+  private final RestServerState restServerState;\n+  private final SSLFactory sslFactory;\n+\n+  /**\n+   * Construct a {@link StorageServerNettyChannelInitializer}.\n+   * @param nettyConfig the config to use when instantiating certain handlers on this pipeline.\n+   * @param performanceConfig the config to use when evaluating ambry service level objectives that include latency.\n+   * @param nettyMetrics the {@link NettyMetrics} object to use.\n+   * @param connectionStatsHandler the {@link ConnectionStatsHandler} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to handle requests on this pipeline.\n+   * @param restServerState the {@link RestServerState} object to use.\n+   * @param sslFactory the {@link SSLFactory} to use for generating {@link javax.net.ssl.SSLEngine} instances,\n+   *                   or {@code null} if SSL is not enabled in this pipeline.\n+   */\n+  public StorageServerNettyChannelInitializer(NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      NettyMetrics nettyMetrics, ConnectionStatsHandler connectionStatsHandler, RestRequestHandler requestHandler,\n+      RestServerState restServerState, SSLFactory sslFactory, MetricRegistry metricRegistry) {\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.nettyMetrics = nettyMetrics;\n+    this.connectionStatsHandler = connectionStatsHandler;\n+    this.restServerState = restServerState;\n+    this.sslFactory = sslFactory;\n+    RestRequestMetricsTracker.setDefaults(metricRegistry);\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    // If channel handler implementations are not annotated with @Sharable, Netty creates a new instance of every class\n+    // in the pipeline for every connection.\n+    // i.e. if there are a 1000 active connections there will be a 1000 NettyMessageProcessor instances.\n+    ChannelPipeline pipeline = ch.pipeline();\n+    // connection stats handler to track connection related metrics\n+    // if SSL is enabled, add an SslHandler before the HTTP codec\n+    if (sslFactory != null) {\n+      InetSocketAddress peerAddress = ch.remoteAddress();\n+      String peerHost = peerAddress.getHostName();\n+      int peerPort = peerAddress.getPort();\n+      SslHandler sslHandler = new SslHandler(sslFactory.createSSLEngine(peerHost, peerPort, SSLFactory.Mode.SERVER));\n+      pipeline.addLast(\"SslHandler\", sslHandler);\n+    }\n+    pipeline.addLast(Http2FrameCodecBuilder.forServer().build())\n+        .addLast(\"IdleStateHandler\", new IdleStateHandler(0, 0, nettyConfig.nettyServerIdleTimeSeconds))\n+        .addLast(\"Http2MultiplexHandler\", new Http2MultiplexHandler(\n+            new Http2StreamHandler(nettyMetrics, nettyConfig, performanceConfig, requestHandler)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NjI5Mw=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0NDkyNQ==", "bodyText": "OK to remove IdleStateHandler as discussed offline.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373644925", "createdAt": "2020-01-31T19:24:17Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.ssl.SslHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import java.net.InetSocketAddress;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link StorageServerNettyFactory}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class StorageServerNettyChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  private final ConnectionStatsHandler connectionStatsHandler;\n+  private final RestRequestHandler requestHandler;\n+  private final RestServerState restServerState;\n+  private final SSLFactory sslFactory;\n+\n+  /**\n+   * Construct a {@link StorageServerNettyChannelInitializer}.\n+   * @param nettyConfig the config to use when instantiating certain handlers on this pipeline.\n+   * @param performanceConfig the config to use when evaluating ambry service level objectives that include latency.\n+   * @param nettyMetrics the {@link NettyMetrics} object to use.\n+   * @param connectionStatsHandler the {@link ConnectionStatsHandler} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to handle requests on this pipeline.\n+   * @param restServerState the {@link RestServerState} object to use.\n+   * @param sslFactory the {@link SSLFactory} to use for generating {@link javax.net.ssl.SSLEngine} instances,\n+   *                   or {@code null} if SSL is not enabled in this pipeline.\n+   */\n+  public StorageServerNettyChannelInitializer(NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      NettyMetrics nettyMetrics, ConnectionStatsHandler connectionStatsHandler, RestRequestHandler requestHandler,\n+      RestServerState restServerState, SSLFactory sslFactory, MetricRegistry metricRegistry) {\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.nettyMetrics = nettyMetrics;\n+    this.connectionStatsHandler = connectionStatsHandler;\n+    this.restServerState = restServerState;\n+    this.sslFactory = sslFactory;\n+    RestRequestMetricsTracker.setDefaults(metricRegistry);\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    // If channel handler implementations are not annotated with @Sharable, Netty creates a new instance of every class\n+    // in the pipeline for every connection.\n+    // i.e. if there are a 1000 active connections there will be a 1000 NettyMessageProcessor instances.\n+    ChannelPipeline pipeline = ch.pipeline();\n+    // connection stats handler to track connection related metrics\n+    // if SSL is enabled, add an SslHandler before the HTTP codec\n+    if (sslFactory != null) {\n+      InetSocketAddress peerAddress = ch.remoteAddress();\n+      String peerHost = peerAddress.getHostName();\n+      int peerPort = peerAddress.getPort();\n+      SslHandler sslHandler = new SslHandler(sslFactory.createSSLEngine(peerHost, peerPort, SSLFactory.Mode.SERVER));\n+      pipeline.addLast(\"SslHandler\", sslHandler);\n+    }\n+    pipeline.addLast(Http2FrameCodecBuilder.forServer().build())\n+        .addLast(\"IdleStateHandler\", new IdleStateHandler(0, 0, nettyConfig.nettyServerIdleTimeSeconds))\n+        .addLast(\"Http2MultiplexHandler\", new Http2MultiplexHandler(\n+            new Http2StreamHandler(nettyMetrics, nettyConfig, performanceConfig, requestHandler)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NjI5Mw=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDA1MzQwOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0OToxN1rOFiyTsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0OToxN1rOFiyTsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMDE0NQ==", "bodyText": "waif -> wait", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r372020145", "createdAt": "2020-01-28T19:49:17Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyMessageProcessor.java", "diffHunk": "@@ -308,14 +308,16 @@ private boolean handleRequest(HttpRequest httpRequest) throws RestServiceExcepti\n           }\n           responseChannel.setRequest(request);\n           logger.trace(\"Channel {} now handling request {}\", ctx.channel(), request.getUri());\n-          // We send POST that is not multipart for handling immediately since we expect valid content with it that will\n-          // be streamed in. In the case of POST that is multipart, all the content has to be received for Netty's\n+          // We send POST that is not multipart or not http2 for handling immediately since we expect valid content with it that will\n+          // be streamed in.\n+          // In the case of POST that is multipart, all the content has to be received for Netty's\n           // decoder and NettyMultipartRequest to work. So it is scheduled for handling when LastHttpContent is received.\n           // With any other method that we support, we do not expect any valid content. LastHttpContent is a Netty thing.\n           // So we wait for LastHttpContent (throw an error if we don't receive it or receive something else) and then\n           // schedule the other methods for handling in handleContent().\n+          // For HTTP2 from frontend, waif for all contents to be received.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDA2ODU0OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/rest/RestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo1NDoxMVrOFiydSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDoxMDo1OVrOFlEUxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMjYwMw==", "bodyText": "Should this header be set for server -> server replication requests made for replication? If so, could we rename it to \"x-ambry-internal-protocol-request\" or similar?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r372022603", "createdAt": "2020-01-28T19:54:11Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/rest/RestUtils.java", "diffHunk": "@@ -216,6 +216,11 @@\n      * Response header indicating the reason a request is non compliant.\n      */\n     public final static String NON_COMPLIANCE_WARNING = \"x-ambry-non-compliance-warning\";\n+    \n+    /**\n+     * Request header indicating a HTTP2 request from frontend to server.\n+     */\n+    public final static String HTTP2_FRONTEND_REQUEST = \"x-ambry-http2-frontend-request\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMjQ4NA==", "bodyText": "how about x-ambry-internal-http2-request?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r374412484", "createdAt": "2020-02-04T00:10:59Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com.github.ambry/rest/RestUtils.java", "diffHunk": "@@ -216,6 +216,11 @@\n      * Response header indicating the reason a request is non compliant.\n      */\n     public final static String NON_COMPLIANCE_WARNING = \"x-ambry-non-compliance-warning\";\n+    \n+    /**\n+     * Request header indicating a HTTP2 request from frontend to server.\n+     */\n+    public final static String HTTP2_FRONTEND_REQUEST = \"x-ambry-http2-frontend-request\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMjYwMw=="}, "originalCommit": {"oid": "dd6d62a2823ece52260f0ca64e8fc77cb108f555"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA5NDE0OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudMessageReadSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMDozODowM1rOFkkZuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMDozODowM1rOFkkZuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4OTQ2NA==", "bodyText": "can you leave a todo here since we will probably have to go back and implement this. Also, this should take Callback<Void>", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373889464", "createdAt": "2020-02-03T00:38:03Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudMessageReadSet.java", "diffHunk": "@@ -66,6 +68,11 @@ public long writeTo(int index, WritableByteChannel channel, long relativeOffset,\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA5NDM3OnYy", "diffSide": "RIGHT", "path": "ambry-messageformat/src/main/java/com.github.ambry.messageformat/MessageFormatSend.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMDozODoxOFrOFkkZ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMDozODoxOFrOFkkZ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4OTQ5NQ==", "bodyText": "Callback<Long>", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373889495", "createdAt": "2020-02-03T00:38:18Z", "author": {"login": "cgtz"}, "path": "ambry-messageformat/src/main/java/com.github.ambry.messageformat/MessageFormatSend.java", "diffHunk": "@@ -266,6 +268,11 @@ public long writeTo(WritableByteChannel channel) throws IOException {\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA5NDYyOnYy", "diffSide": "RIGHT", "path": "ambry-messageformat/src/test/java/com.github.ambry.messageformat/MessageFormatSendTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMDozODo1NVrOFkkZ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMDozODo1NVrOFkkZ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4OTUzMw==", "bodyText": "Callback<Void>", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373889533", "createdAt": "2020-02-03T00:38:55Z", "author": {"login": "cgtz"}, "path": "ambry-messageformat/src/test/java/com.github.ambry.messageformat/MessageFormatSendTest.java", "diffHunk": "@@ -86,6 +88,11 @@ public long writeTo(int index, WritableByteChannel channel, long relativeOffset,\n       return written;\n     }\n \n+    @Override\n+    public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA5NTk2OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/NettyServerRequestResponseChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMDo0MToyNlrOFkkatQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0NTowOVrOFmC9Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4OTcxNw==", "bodyText": "nit: this isn't exactly a result of an interrupt, so I think throwing a RuntimeException like IllegalStateException would be a better fit here.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373889717", "createdAt": "2020-02-03T00:41:26Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -32,6 +33,14 @@ public NettyServerRequestResponseChannel(int queueSize) {\n   /** Send a request to be handled, potentially blocking until there is room in the queue for the request */\n   @Override\n   public void sendRequest(NetworkRequest request) throws InterruptedException {\n+    DataInputStream stream = new DataInputStream(request.getInputStream());\n+    try {\n+      // The first 8 bytes is size of the request. TCP implementation uses this size to allocate buffer. See {@link BoundedReceive}\n+      // Here we just need to consume it.\n+      stream.readLong();\n+    } catch (IOException e) {\n+      throw new InterruptedException(\"stream read error.\" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzODU5NQ==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r375438595", "createdAt": "2020-02-05T18:45:09Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -32,6 +33,14 @@ public NettyServerRequestResponseChannel(int queueSize) {\n   /** Send a request to be handled, potentially blocking until there is room in the queue for the request */\n   @Override\n   public void sendRequest(NetworkRequest request) throws InterruptedException {\n+    DataInputStream stream = new DataInputStream(request.getInputStream());\n+    try {\n+      // The first 8 bytes is size of the request. TCP implementation uses this size to allocate buffer. See {@link BoundedReceive}\n+      // Here we just need to consume it.\n+      stream.readLong();\n+    } catch (IOException e) {\n+      throw new InterruptedException(\"stream read error.\" + e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4OTcxNw=="}, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjEwMTkzOnYy", "diffSide": "RIGHT", "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMDo1MTozNFrOFkkd9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDoxODowN1rOFlEcwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDU0OA==", "bodyText": "Callback<Long> here and in any similar places. Generally try to specify the type parameter in the implementation when the interface explicitly specifies one. This will compile but it limits the compiler's ability to type check, e.g. on line 60.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373890548", "createdAt": "2020-02-03T00:51:34Z", "author": {"login": "cgtz"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "diffHunk": "@@ -24,33 +26,49 @@\n  */\n public class CompositeSend implements Send {\n \n-  private final List<Send> compositSendList;\n+  private final List<Send> compositeSendList;\n   private long totalSizeToWrite;\n   private int currentIndexInProgress;\n \n-  public CompositeSend(List<Send> compositSendList) {\n-    this.compositSendList = compositSendList;\n+  public CompositeSend(List<Send> compositeSendList) {\n+    this.compositeSendList = compositeSendList;\n     this.currentIndexInProgress = 0;\n-    for (Send messageFormatSend : compositSendList) {\n+    for (Send messageFormatSend : compositeSendList) {\n       totalSizeToWrite += messageFormatSend.sizeInBytes();\n     }\n   }\n \n   @Override\n   public long writeTo(WritableByteChannel channel) throws IOException {\n     long written = 0;\n-    if (currentIndexInProgress < compositSendList.size()) {\n-      written = compositSendList.get(currentIndexInProgress).writeTo(channel);\n-      if (compositSendList.get(currentIndexInProgress).isSendComplete()) {\n+    if (currentIndexInProgress < compositeSendList.size()) {\n+      written = compositeSendList.get(currentIndexInProgress).writeTo(channel);\n+      if (compositeSendList.get(currentIndexInProgress).isSendComplete()) {\n         currentIndexInProgress++;\n       }\n     }\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNDUyOA==", "bodyText": "addressing all callback issue.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r374414528", "createdAt": "2020-02-04T00:18:07Z", "author": {"login": "zzmao"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "diffHunk": "@@ -24,33 +26,49 @@\n  */\n public class CompositeSend implements Send {\n \n-  private final List<Send> compositSendList;\n+  private final List<Send> compositeSendList;\n   private long totalSizeToWrite;\n   private int currentIndexInProgress;\n \n-  public CompositeSend(List<Send> compositSendList) {\n-    this.compositSendList = compositSendList;\n+  public CompositeSend(List<Send> compositeSendList) {\n+    this.compositeSendList = compositeSendList;\n     this.currentIndexInProgress = 0;\n-    for (Send messageFormatSend : compositSendList) {\n+    for (Send messageFormatSend : compositeSendList) {\n       totalSizeToWrite += messageFormatSend.sizeInBytes();\n     }\n   }\n \n   @Override\n   public long writeTo(WritableByteChannel channel) throws IOException {\n     long written = 0;\n-    if (currentIndexInProgress < compositSendList.size()) {\n-      written = compositSendList.get(currentIndexInProgress).writeTo(channel);\n-      if (compositSendList.get(currentIndexInProgress).isSendComplete()) {\n+    if (currentIndexInProgress < compositeSendList.size()) {\n+      written = compositeSendList.get(currentIndexInProgress).writeTo(channel);\n+      if (compositeSendList.get(currentIndexInProgress).isSendComplete()) {\n         currentIndexInProgress++;\n       }\n     }\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDU0OA=="}, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM0MzQwOnYy", "diffSide": "RIGHT", "path": "ambry-messageformat/src/test/java/com.github.ambry.messageformat/BlobStoreHardDeleteTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNToyNjoxNFrOFkmrEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNToyNjoxNFrOFkmrEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNjY3Mw==", "bodyText": "Callback<Void>", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373926673", "createdAt": "2020-02-03T05:26:14Z", "author": {"login": "cgtz"}, "path": "ambry-messageformat/src/test/java/com.github.ambry.messageformat/BlobStoreHardDeleteTest.java", "diffHunk": "@@ -286,6 +288,11 @@ public long writeTo(int index, WritableByteChannel channel, long relativeOffset,\n         return channel.write(ByteBuffer.wrap(toReturn));\n       }\n \n+      @Override\n+      public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM0NzM0OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/store/MessageReadSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNToyOTo0N1rOFkmtQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNToyOTo0N1rOFkmtQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNzIzNQ==", "bodyText": "Sorry, I think I suggested Callback<Void> in a previous comment. To align with Send and AsyncWritableChannel it may be better to have a Callback<Long> where the result is the total number of bytes written.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373927235", "createdAt": "2020-02-03T05:29:47Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/store/MessageReadSet.java", "diffHunk": "@@ -36,7 +38,16 @@\n   long writeTo(int index, WritableByteChannel channel, long relativeOffset, long maxSize) throws IOException;\n \n   /**\n-   * Returns the total number of messages in this set\n+   * This method is intend to write prefetched data from {@link MessageReadSet} to {@link AsyncWritableChannel}. Data\n+   * should be ready in memory(no blocking call) before write to {@link AsyncWritableChannel} asynchronously. Callback is\n+   * called when the entire batch of writes succeeds or fails.\n+   * @param channel the channel into which the data needs to be written to\n+   * @param callback The callback when data is fully wrote to the channel.\n+   * @throws IOException If prefetch is not used.\n+   */\n+  void writeTo(AsyncWritableChannel channel, Callback<Void> callback) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM0OTY3OnYy", "diffSide": "RIGHT", "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTozMTo0MVrOFkmuoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Njo1M1rOFmDAnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNzU4NQ==", "bodyText": "This callback technically won't be set to the correct value since it will only reflect the size of the last send, not all sends in the batch. This may not currently be a problem but is something to look out for.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373927585", "createdAt": "2020-02-03T05:31:41Z", "author": {"login": "cgtz"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "diffHunk": "@@ -24,33 +26,49 @@\n  */\n public class CompositeSend implements Send {\n \n-  private final List<Send> compositSendList;\n+  private final List<Send> compositeSendList;\n   private long totalSizeToWrite;\n   private int currentIndexInProgress;\n \n-  public CompositeSend(List<Send> compositSendList) {\n-    this.compositSendList = compositSendList;\n+  public CompositeSend(List<Send> compositeSendList) {\n+    this.compositeSendList = compositeSendList;\n     this.currentIndexInProgress = 0;\n-    for (Send messageFormatSend : compositSendList) {\n+    for (Send messageFormatSend : compositeSendList) {\n       totalSizeToWrite += messageFormatSend.sizeInBytes();\n     }\n   }\n \n   @Override\n   public long writeTo(WritableByteChannel channel) throws IOException {\n     long written = 0;\n-    if (currentIndexInProgress < compositSendList.size()) {\n-      written = compositSendList.get(currentIndexInProgress).writeTo(channel);\n-      if (compositSendList.get(currentIndexInProgress).isSendComplete()) {\n+    if (currentIndexInProgress < compositeSendList.size()) {\n+      written = compositeSendList.get(currentIndexInProgress).writeTo(channel);\n+      if (compositeSendList.get(currentIndexInProgress).isSendComplete()) {\n         currentIndexInProgress++;\n       }\n     }\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    int lastIndex = compositeSendList.size() - 1;\n+    int i = 0;\n+    for (Send send : compositeSendList) {\n+      if (i == lastIndex) {\n+        // only the last one pass in callback\n+        send.writeTo(channel, callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzOTUxNg==", "bodyText": "added a comment", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r375439516", "createdAt": "2020-02-05T18:46:53Z", "author": {"login": "zzmao"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/CompositeSend.java", "diffHunk": "@@ -24,33 +26,49 @@\n  */\n public class CompositeSend implements Send {\n \n-  private final List<Send> compositSendList;\n+  private final List<Send> compositeSendList;\n   private long totalSizeToWrite;\n   private int currentIndexInProgress;\n \n-  public CompositeSend(List<Send> compositSendList) {\n-    this.compositSendList = compositSendList;\n+  public CompositeSend(List<Send> compositeSendList) {\n+    this.compositeSendList = compositeSendList;\n     this.currentIndexInProgress = 0;\n-    for (Send messageFormatSend : compositSendList) {\n+    for (Send messageFormatSend : compositeSendList) {\n       totalSizeToWrite += messageFormatSend.sizeInBytes();\n     }\n   }\n \n   @Override\n   public long writeTo(WritableByteChannel channel) throws IOException {\n     long written = 0;\n-    if (currentIndexInProgress < compositSendList.size()) {\n-      written = compositSendList.get(currentIndexInProgress).writeTo(channel);\n-      if (compositSendList.get(currentIndexInProgress).isSendComplete()) {\n+    if (currentIndexInProgress < compositeSendList.size()) {\n+      written = compositeSendList.get(currentIndexInProgress).writeTo(channel);\n+      if (compositeSendList.get(currentIndexInProgress).isSendComplete()) {\n         currentIndexInProgress++;\n       }\n     }\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback callback) throws IOException {\n+    int lastIndex = compositeSendList.size() - 1;\n+    int i = 0;\n+    for (Send send : compositeSendList) {\n+      if (i == lastIndex) {\n+        // only the last one pass in callback\n+        send.writeTo(channel, callback);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNzU4NQ=="}, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM1NTQ3OnYy", "diffSide": "RIGHT", "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/Response.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTozNjo1OFrOFkmx-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDo1NTowOVrOFlFDzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyODQ0MA==", "bodyText": "I would actually recommend removing the throws IOException from the interface. Any checked exception can just be dealt with by calling callback.onComplete(null, ex). I think that this helps unify the failure handling paths that the caller needs to deal with.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373928440", "createdAt": "2020-02-03T05:36:58Z", "author": {"login": "cgtz"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/Response.java", "diffHunk": "@@ -42,16 +44,26 @@ protected void writeHeader() {\n     bufferToSend.putShort((short) error.ordinal());\n   }\n \n-  @Override\n-  public long writeTo(WritableByteChannel channel) throws IOException {\n+  private void prepareBuffer() {\n     if (bufferToSend == null) {\n       bufferToSend = ByteBuffer.allocate((int) sizeInBytes());\n       writeHeader();\n       bufferToSend.flip();\n     }\n+  }\n+\n+  @Override\n+  public long writeTo(WritableByteChannel channel) throws IOException {\n+    prepareBuffer();\n     return bufferToSend.remaining() > 0 ? channel.write(bufferToSend) : 0;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback<Long> callback) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyNDUyNA==", "bodyText": "This is a good suggestion. IOException is not needed.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r374424524", "createdAt": "2020-02-04T00:55:09Z", "author": {"login": "zzmao"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/Response.java", "diffHunk": "@@ -42,16 +44,26 @@ protected void writeHeader() {\n     bufferToSend.putShort((short) error.ordinal());\n   }\n \n-  @Override\n-  public long writeTo(WritableByteChannel channel) throws IOException {\n+  private void prepareBuffer() {\n     if (bufferToSend == null) {\n       bufferToSend = ByteBuffer.allocate((int) sizeInBytes());\n       writeHeader();\n       bufferToSend.flip();\n     }\n+  }\n+\n+  @Override\n+  public long writeTo(WritableByteChannel channel) throws IOException {\n+    prepareBuffer();\n     return bufferToSend.remaining() > 0 ? channel.write(bufferToSend) : 0;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback<Long> callback) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyODQ0MA=="}, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM1OTc0OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2ResponseHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo0MDo0N1rOFkm0oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo0MDo0N1rOFkm0oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTEyMQ==", "bodyText": "final", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373929121", "createdAt": "2020-02-03T05:40:47Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2ResponseHandler.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.router.Callback;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import io.netty.handler.codec.http2.HttpConversionUtil;\n+import io.netty.util.AttributeKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Process {@link io.netty.handler.codec.http.FullHttpResponse} translated from HTTP/2 frames\n+ */\n+@ChannelHandler.Sharable\n+public class Http2ResponseHandler extends SimpleChannelInboundHandler<FullHttpResponse> {\n+  public static AttributeKey<Callback<ByteBuf>> RESPONSE_CALLBACK = AttributeKey.newInstance(\"responseCallback\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM2MDgxOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2ResponseHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo0MTo1MlrOFkm1RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo0MTo1MlrOFkm1RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTI4NQ==", "bodyText": "why is this protected? couldn't it be static and private?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373929285", "createdAt": "2020-02-03T05:41:52Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2ResponseHandler.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.router.Callback;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import io.netty.handler.codec.http2.HttpConversionUtil;\n+import io.netty.util.AttributeKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Process {@link io.netty.handler.codec.http.FullHttpResponse} translated from HTTP/2 frames\n+ */\n+@ChannelHandler.Sharable\n+public class Http2ResponseHandler extends SimpleChannelInboundHandler<FullHttpResponse> {\n+  public static AttributeKey<Callback<ByteBuf>> RESPONSE_CALLBACK = AttributeKey.newInstance(\"responseCallback\");\n+  protected final Logger logger = LoggerFactory.getLogger(getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM3MDY5OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo1MDozOVrOFkm7KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo1MDozOVrOFkm7KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMDc5Mg==", "bodyText": "why does all content need to be received before calling handleRequest for HTTP2? Are there cases that CopyingAsyncWritableChannel will not handle correctly?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373930792", "createdAt": "2020-02-03T05:50:39Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyMessageProcessor.java", "diffHunk": "@@ -308,14 +308,16 @@ private boolean handleRequest(HttpRequest httpRequest) throws RestServiceExcepti\n           }\n           responseChannel.setRequest(request);\n           logger.trace(\"Channel {} now handling request {}\", ctx.channel(), request.getUri());\n-          // We send POST that is not multipart for handling immediately since we expect valid content with it that will\n-          // be streamed in. In the case of POST that is multipart, all the content has to be received for Netty's\n+          // We send POST that is not multipart or not http2 for handling immediately since we expect valid content with it that will\n+          // be streamed in.\n+          // In the case of POST that is multipart, all the content has to be received for Netty's\n           // decoder and NettyMultipartRequest to work. So it is scheduled for handling when LastHttpContent is received.\n           // With any other method that we support, we do not expect any valid content. LastHttpContent is a Netty thing.\n           // So we wait for LastHttpContent (throw an error if we don't receive it or receive something else) and then\n           // schedule the other methods for handling in handleContent().\n+          // For HTTP2 from frontend, waif for all contents to be received.\n           if ((request.getRestMethod().equals(RestMethod.POST) || request.getRestMethod().equals(RestMethod.PUT))\n-              && !HttpPostRequestDecoder.isMultipart(httpRequest)) {\n+              && !HttpPostRequestDecoder.isMultipart(httpRequest) && !request.isHttp2RequestFromFrontend()) {\n             requestHandler.handleRequest(request, responseChannel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM3MjUxOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettySslHttp2Factory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo1MTo1OFrOFkm8JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMTowMTozNFrOFlFJ6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMTA0NA==", "bodyText": "why remove this comment?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373931044", "createdAt": "2020-02-03T05:51:58Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettySslHttp2Factory.java", "diffHunk": "@@ -39,7 +39,6 @@\n \n /**\n  * An HTTP/2 specific implementation of {@link SSLFactory} that uses Netty's SSL libraries for HTTP2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyNjA4OA==", "bodyText": "added back.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r374426088", "createdAt": "2020-02-04T01:01:34Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettySslHttp2Factory.java", "diffHunk": "@@ -39,7 +39,6 @@\n \n /**\n  * An HTTP/2 specific implementation of {@link SSLFactory} that uses Netty's SSL libraries for HTTP2.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMTA0NA=="}, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM3NTA5OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo1NDoxOFrOFkm9xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMTowNDo0MVrOFlFMww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMTQ2MA==", "bodyText": "For http2 is it even an option to not set up SSL? You could use Objects.requireNonNull in the constructor", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373931460", "createdAt": "2020-02-03T05:54:18Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.codec.http2.Http2Settings;\n+import io.netty.handler.ssl.SslHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import java.net.InetSocketAddress;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link StorageServerNettyFactory}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class StorageServerNettyChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  private final ConnectionStatsHandler connectionStatsHandler;\n+  private final RestRequestHandler requestHandler;\n+  private final RestServerState restServerState;\n+  private final SSLFactory sslFactory;\n+\n+  /**\n+   * Construct a {@link StorageServerNettyChannelInitializer}.\n+   * @param nettyConfig the config to use when instantiating certain handlers on this pipeline.\n+   * @param performanceConfig the config to use when evaluating ambry service level objectives that include latency.\n+   * @param nettyMetrics the {@link NettyMetrics} object to use.\n+   * @param connectionStatsHandler the {@link ConnectionStatsHandler} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to handle requests on this pipeline.\n+   * @param restServerState the {@link RestServerState} object to use.\n+   * @param sslFactory the {@link SSLFactory} to use for generating {@link javax.net.ssl.SSLEngine} instances,\n+   *                   or {@code null} if SSL is not enabled in this pipeline.\n+   */\n+  public StorageServerNettyChannelInitializer(NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      NettyMetrics nettyMetrics, ConnectionStatsHandler connectionStatsHandler, RestRequestHandler requestHandler,\n+      RestServerState restServerState, SSLFactory sslFactory, MetricRegistry metricRegistry) {\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.nettyMetrics = nettyMetrics;\n+    this.connectionStatsHandler = connectionStatsHandler;\n+    this.restServerState = restServerState;\n+    this.sslFactory = sslFactory;\n+    RestRequestMetricsTracker.setDefaults(metricRegistry);\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    // If channel handler implementations are not annotated with @Sharable, Netty creates a new instance of every class\n+    // in the pipeline for every connection.\n+    // i.e. if there are a 1000 active connections there will be a 1000 NettyMessageProcessor instances.\n+    ChannelPipeline pipeline = ch.pipeline();\n+    // connection stats handler to track connection related metrics\n+    // if SSL is enabled, add an SslHandler before the HTTP codec\n+    if (sslFactory != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyNjgxOQ==", "bodyText": "added.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r374426819", "createdAt": "2020-02-04T01:04:41Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.codec.http2.Http2Settings;\n+import io.netty.handler.ssl.SslHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import java.net.InetSocketAddress;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link StorageServerNettyFactory}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class StorageServerNettyChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  private final ConnectionStatsHandler connectionStatsHandler;\n+  private final RestRequestHandler requestHandler;\n+  private final RestServerState restServerState;\n+  private final SSLFactory sslFactory;\n+\n+  /**\n+   * Construct a {@link StorageServerNettyChannelInitializer}.\n+   * @param nettyConfig the config to use when instantiating certain handlers on this pipeline.\n+   * @param performanceConfig the config to use when evaluating ambry service level objectives that include latency.\n+   * @param nettyMetrics the {@link NettyMetrics} object to use.\n+   * @param connectionStatsHandler the {@link ConnectionStatsHandler} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to handle requests on this pipeline.\n+   * @param restServerState the {@link RestServerState} object to use.\n+   * @param sslFactory the {@link SSLFactory} to use for generating {@link javax.net.ssl.SSLEngine} instances,\n+   *                   or {@code null} if SSL is not enabled in this pipeline.\n+   */\n+  public StorageServerNettyChannelInitializer(NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      NettyMetrics nettyMetrics, ConnectionStatsHandler connectionStatsHandler, RestRequestHandler requestHandler,\n+      RestServerState restServerState, SSLFactory sslFactory, MetricRegistry metricRegistry) {\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.nettyMetrics = nettyMetrics;\n+    this.connectionStatsHandler = connectionStatsHandler;\n+    this.restServerState = restServerState;\n+    this.sslFactory = sslFactory;\n+    RestRequestMetricsTracker.setDefaults(metricRegistry);\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    // If channel handler implementations are not annotated with @Sharable, Netty creates a new instance of every class\n+    // in the pipeline for every connection.\n+    // i.e. if there are a 1000 active connections there will be a 1000 NettyMessageProcessor instances.\n+    ChannelPipeline pipeline = ch.pipeline();\n+    // connection stats handler to track connection related metrics\n+    // if SSL is enabled, add an SslHandler before the HTTP codec\n+    if (sslFactory != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMTQ2MA=="}, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM3NzMyOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo1NjoxOFrOFkm_Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMTowNzoyM1rOFlFPSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMTgyNg==", "bodyText": "Was there an issue with adding ConnectionStatsHandler?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373931826", "createdAt": "2020-02-03T05:56:18Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.codec.http2.Http2Settings;\n+import io.netty.handler.ssl.SslHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import java.net.InetSocketAddress;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link StorageServerNettyFactory}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class StorageServerNettyChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  private final ConnectionStatsHandler connectionStatsHandler;\n+  private final RestRequestHandler requestHandler;\n+  private final RestServerState restServerState;\n+  private final SSLFactory sslFactory;\n+\n+  /**\n+   * Construct a {@link StorageServerNettyChannelInitializer}.\n+   * @param nettyConfig the config to use when instantiating certain handlers on this pipeline.\n+   * @param performanceConfig the config to use when evaluating ambry service level objectives that include latency.\n+   * @param nettyMetrics the {@link NettyMetrics} object to use.\n+   * @param connectionStatsHandler the {@link ConnectionStatsHandler} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to handle requests on this pipeline.\n+   * @param restServerState the {@link RestServerState} object to use.\n+   * @param sslFactory the {@link SSLFactory} to use for generating {@link javax.net.ssl.SSLEngine} instances,\n+   *                   or {@code null} if SSL is not enabled in this pipeline.\n+   */\n+  public StorageServerNettyChannelInitializer(NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      NettyMetrics nettyMetrics, ConnectionStatsHandler connectionStatsHandler, RestRequestHandler requestHandler,\n+      RestServerState restServerState, SSLFactory sslFactory, MetricRegistry metricRegistry) {\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.nettyMetrics = nettyMetrics;\n+    this.connectionStatsHandler = connectionStatsHandler;\n+    this.restServerState = restServerState;\n+    this.sslFactory = sslFactory;\n+    RestRequestMetricsTracker.setDefaults(metricRegistry);\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    // If channel handler implementations are not annotated with @Sharable, Netty creates a new instance of every class\n+    // in the pipeline for every connection.\n+    // i.e. if there are a 1000 active connections there will be a 1000 NettyMessageProcessor instances.\n+    ChannelPipeline pipeline = ch.pipeline();\n+    // connection stats handler to track connection related metrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyNzQ2NQ==", "bodyText": "added.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r374427465", "createdAt": "2020-02-04T01:07:23Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.NettyConfig;\n+import com.github.ambry.config.PerformanceConfig;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.codec.http2.Http2Settings;\n+import io.netty.handler.ssl.SslHandler;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import java.net.InetSocketAddress;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link StorageServerNettyFactory}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class StorageServerNettyChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final NettyConfig nettyConfig;\n+  private final PerformanceConfig performanceConfig;\n+  private final NettyMetrics nettyMetrics;\n+  private final ConnectionStatsHandler connectionStatsHandler;\n+  private final RestRequestHandler requestHandler;\n+  private final RestServerState restServerState;\n+  private final SSLFactory sslFactory;\n+\n+  /**\n+   * Construct a {@link StorageServerNettyChannelInitializer}.\n+   * @param nettyConfig the config to use when instantiating certain handlers on this pipeline.\n+   * @param performanceConfig the config to use when evaluating ambry service level objectives that include latency.\n+   * @param nettyMetrics the {@link NettyMetrics} object to use.\n+   * @param connectionStatsHandler the {@link ConnectionStatsHandler} to use.\n+   * @param requestHandler the {@link RestRequestHandler} to handle requests on this pipeline.\n+   * @param restServerState the {@link RestServerState} object to use.\n+   * @param sslFactory the {@link SSLFactory} to use for generating {@link javax.net.ssl.SSLEngine} instances,\n+   *                   or {@code null} if SSL is not enabled in this pipeline.\n+   */\n+  public StorageServerNettyChannelInitializer(NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n+      NettyMetrics nettyMetrics, ConnectionStatsHandler connectionStatsHandler, RestRequestHandler requestHandler,\n+      RestServerState restServerState, SSLFactory sslFactory, MetricRegistry metricRegistry) {\n+    this.nettyConfig = nettyConfig;\n+    this.performanceConfig = performanceConfig;\n+    this.nettyMetrics = nettyMetrics;\n+    this.connectionStatsHandler = connectionStatsHandler;\n+    this.restServerState = restServerState;\n+    this.sslFactory = sslFactory;\n+    RestRequestMetricsTracker.setDefaults(metricRegistry);\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    // If channel handler implementations are not annotated with @Sharable, Netty creates a new instance of every class\n+    // in the pipeline for every connection.\n+    // i.e. if there are a 1000 active connections there will be a 1000 NettyMessageProcessor instances.\n+    ChannelPipeline pipeline = ch.pipeline();\n+    // connection stats handler to track connection related metrics", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMTgyNg=="}, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM4MjcyOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com.github.ambry.server/RouterServerPlaintextTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjowMDozOVrOFknCdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMTowODoxNFrOFlFQIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMjY2Mg==", "bodyText": "call TestSSLUtils.addHttp2Properties here?", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373932662", "createdAt": "2020-02-03T06:00:39Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/integration-test/java/com.github.ambry.server/RouterServerPlaintextTest.java", "diffHunk": "@@ -74,7 +74,13 @@ public RouterServerPlaintextTest(boolean testEncryption) {\n   @BeforeClass\n   public static void initializeTests() throws Exception {\n     Properties properties = getRouterProperties(\"DC1\");\n-    plaintextCluster = new MockCluster(new Properties(), false, SystemTime.getInstance());\n+\n+    Properties serverProperties = new Properties();\n+    serverProperties.setProperty(\"rest.server.rest.request.service.factory\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyNzY4Mw==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r374427683", "createdAt": "2020-02-04T01:08:14Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/integration-test/java/com.github.ambry.server/RouterServerPlaintextTest.java", "diffHunk": "@@ -74,7 +74,13 @@ public RouterServerPlaintextTest(boolean testEncryption) {\n   @BeforeClass\n   public static void initializeTests() throws Exception {\n     Properties properties = getRouterProperties(\"DC1\");\n-    plaintextCluster = new MockCluster(new Properties(), false, SystemTime.getInstance());\n+\n+    Properties serverProperties = new Properties();\n+    serverProperties.setProperty(\"rest.server.rest.request.service.factory\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMjY2Mg=="}, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM4ODEyOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjowNToxMFrOFknFpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjowNToxMFrOFknFpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMzQ3OQ==", "bodyText": "remove println", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373933479", "createdAt": "2020-02-03T06:05:10Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -96,31 +103,39 @@ public void disconnect() throws IOException {\n \n   @Override\n   public void send(Send request) throws IOException {\n+    System.out.println(\"send\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM5NjU1OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjoxMDo0NVrOFknKXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjoxMDo0NVrOFknKXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzNDY4NQ==", "bodyText": "Instead of combining ambry callbacks and netty promises here, how about setting the attribute to a CompletableFuture or ambry's FutureResult? Then you can wait on the future without requiring lines 135-137", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r373934685", "createdAt": "2020-02-03T06:10:45Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -96,31 +103,39 @@ public void disconnect() throws IOException {\n \n   @Override\n   public void send(Send request) throws IOException {\n+    System.out.println(\"send\");\n     ByteBufferChannel byteBufferChannel = new ByteBufferChannel(ByteBuffer.allocate((int) request.sizeInBytes()));\n     while (!request.isSendComplete()) {\n       request.writeTo(byteBufferChannel);\n     }\n     byteBufferChannel.getBuffer().position(0);\n     ByteBuf byteBuf = Unpooled.wrappedBuffer(byteBufferChannel.getBuffer());\n \n-    Http2ClientStreamInitializer initializer = new Http2ClientStreamInitializer(http2ResponseHandler);\n-    Http2StreamChannel childChannel =\n-        new Http2StreamChannelBootstrap(channel).handler(initializer).open().syncUninterruptibly().getNow();\n+    Http2StreamChannel childChannel = http2StreamChannelBootstrap.open().syncUninterruptibly().getNow();\n     Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+    http2Headers.set(RestUtils.Headers.HTTP2_FRONTEND_REQUEST, \"true\");\n+    channelPromise = childChannel.newPromise();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c22b5638f24e54441b5cf53e37974b5d038aca"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjE2OTA3OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudMessageReadSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTo0NDowOFrOFmrQKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTo0NDowOFrOFmrQKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5ODg1OQ==", "bodyText": "nit: UnsupportedOperationException, since NotImplementedException is reflection-specific", "url": "https://github.com/linkedin/ambry/pull/1352#discussion_r376098859", "createdAt": "2020-02-06T21:44:08Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudMessageReadSet.java", "diffHunk": "@@ -66,6 +69,12 @@ public long writeTo(int index, WritableByteChannel channel, long relativeOffset,\n     return written;\n   }\n \n+  @Override\n+  public void writeTo(AsyncWritableChannel channel, Callback<Long> callback) {\n+    // TODO: read from cloud based store and write to AsyncWritableChannel is needed in the future.\n+    throw new NotImplementedException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db91456b30ce68b73eb96880e81b057e5992ff65"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1638, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}