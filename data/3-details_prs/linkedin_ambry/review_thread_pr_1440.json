{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0Mjc5Njc0", "number": 1440, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMjozMDoxMFrODsRftA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowNDo1OVrODs1W5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzUwNTgwOnYy", "diffSide": "RIGHT", "path": "ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockReplicaId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMjozMDoxMFrOF9GJRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzozNToxOVrOF-ADmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwODEzNA==", "bodyText": "Use constant for \"replica\".  Do we want port and partition with no separator?", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r399608134", "createdAt": "2020-03-28T02:30:10Z", "author": {"login": "lightningrob"}, "path": "ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockReplicaId.java", "diffHunk": "@@ -40,18 +41,23 @@ public MockReplicaId(ReplicaType replicaType) {\n   public MockReplicaId(int port, MockPartitionId partitionId, MockDataNodeId dataNodeId, int indexOfMountPathToUse) {\n     this.partitionId = partitionId;\n     this.dataNodeId = dataNodeId;\n-    mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n-    File mountFile = new File(mountPath);\n-    File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);\n-    replicaFile.mkdir();\n-    replicaFile.deleteOnExit();\n-    if (mountPath.startsWith(\"/vcr\")) {\n+    if (dataNodeId.getMountPaths().isEmpty()) {\n+      // a data node with no mount paths is a virtual data node which holds cloud service replicas.\n       replicaType = ReplicaType.CLOUD_BACKED;\n     } else {\n-      replicaType = ReplicaType.DISK_BACKED;\n+      mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n+      File mountFile = new File(mountPath);\n+      File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0b3e291447df64847c21d0b3430a1700d96856a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1Njk1Mw==", "bodyText": "This was from before (previously line 45). I will make the prefix a constant, but I'm not sure if anything depends on there not being a separator.", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400556953", "createdAt": "2020-03-30T23:35:19Z", "author": {"login": "cgtz"}, "path": "ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockReplicaId.java", "diffHunk": "@@ -40,18 +41,23 @@ public MockReplicaId(ReplicaType replicaType) {\n   public MockReplicaId(int port, MockPartitionId partitionId, MockDataNodeId dataNodeId, int indexOfMountPathToUse) {\n     this.partitionId = partitionId;\n     this.dataNodeId = dataNodeId;\n-    mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n-    File mountFile = new File(mountPath);\n-    File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);\n-    replicaFile.mkdir();\n-    replicaFile.deleteOnExit();\n-    if (mountPath.startsWith(\"/vcr\")) {\n+    if (dataNodeId.getMountPaths().isEmpty()) {\n+      // a data node with no mount paths is a virtual data node which holds cloud service replicas.\n       replicaType = ReplicaType.CLOUD_BACKED;\n     } else {\n-      replicaType = ReplicaType.DISK_BACKED;\n+      mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n+      File mountFile = new File(mountPath);\n+      File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwODEzNA=="}, "originalCommit": {"oid": "d0b3e291447df64847c21d0b3430a1700d96856a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzUwNjI0OnYy", "diffSide": "RIGHT", "path": "ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockReplicaId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMjozMDo0NFrOF9GJew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDowMToyMlrOF-AjVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwODE4Nw==", "bodyText": "Would be nice to have const for this too, not sure where it's defined.", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r399608187", "createdAt": "2020-03-28T02:30:44Z", "author": {"login": "lightningrob"}, "path": "ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockReplicaId.java", "diffHunk": "@@ -40,18 +41,23 @@ public MockReplicaId(ReplicaType replicaType) {\n   public MockReplicaId(int port, MockPartitionId partitionId, MockDataNodeId dataNodeId, int indexOfMountPathToUse) {\n     this.partitionId = partitionId;\n     this.dataNodeId = dataNodeId;\n-    mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n-    File mountFile = new File(mountPath);\n-    File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);\n-    replicaFile.mkdir();\n-    replicaFile.deleteOnExit();\n-    if (mountPath.startsWith(\"/vcr\")) {\n+    if (dataNodeId.getMountPaths().isEmpty()) {\n+      // a data node with no mount paths is a virtual data node which holds cloud service replicas.\n       replicaType = ReplicaType.CLOUD_BACKED;\n     } else {\n-      replicaType = ReplicaType.DISK_BACKED;\n+      mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n+      File mountFile = new File(mountPath);\n+      File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);\n+      replicaFile.mkdir();\n+      replicaFile.deleteOnExit();\n+      if (mountPath.startsWith(\"/vcr\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0b3e291447df64847c21d0b3430a1700d96856a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NTA3OA==", "bodyText": "Found that a constant already existed for it, so I used that one.", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400565078", "createdAt": "2020-03-31T00:01:22Z", "author": {"login": "cgtz"}, "path": "ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockReplicaId.java", "diffHunk": "@@ -40,18 +41,23 @@ public MockReplicaId(ReplicaType replicaType) {\n   public MockReplicaId(int port, MockPartitionId partitionId, MockDataNodeId dataNodeId, int indexOfMountPathToUse) {\n     this.partitionId = partitionId;\n     this.dataNodeId = dataNodeId;\n-    mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n-    File mountFile = new File(mountPath);\n-    File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);\n-    replicaFile.mkdir();\n-    replicaFile.deleteOnExit();\n-    if (mountPath.startsWith(\"/vcr\")) {\n+    if (dataNodeId.getMountPaths().isEmpty()) {\n+      // a data node with no mount paths is a virtual data node which holds cloud service replicas.\n       replicaType = ReplicaType.CLOUD_BACKED;\n     } else {\n-      replicaType = ReplicaType.DISK_BACKED;\n+      mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n+      File mountFile = new File(mountPath);\n+      File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);\n+      replicaFile.mkdir();\n+      replicaFile.deleteOnExit();\n+      if (mountPath.startsWith(\"/vcr\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwODE4Nw=="}, "originalCommit": {"oid": "d0b3e291447df64847c21d0b3430a1700d96856a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM2MzU4OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/CloudRouterFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1OTo0MlrOF95_Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1OTo0MlrOF95_Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NzU2Nw==", "bodyText": "Minor: can you add a comment explaining why null is passed for notificationSystem?", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400457567", "createdAt": "2020-03-30T19:59:42Z", "author": {"login": "lightningrob"}, "path": "ambry-router/src/main/java/com.github.ambry.router/CloudRouterFactory.java", "diffHunk": "@@ -168,10 +174,35 @@ static RequestHandlerPool getRequestHandlerPool(VerifiableProperties verifiableP\n     StoreKeyConverterFactory storeKeyConverterFactory =\n         Utils.getObj(serverConfig.serverStoreKeyConverterFactory, verifiableProperties, registry);\n     AmbryRequests requests =\n-        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null,\n-            notificationSystem, null, storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch,\n-            storeKeyConverterFactory);\n+        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null, null, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0b3e291447df64847c21d0b3430a1700d96856a"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM2ODc2OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/CloudRouterFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowMToyMVrOF96Cww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowMToyMVrOF96Cww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1ODQzNQ==", "bodyText": "Javadoc", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400458435", "createdAt": "2020-03-30T20:01:21Z", "author": {"login": "lightningrob"}, "path": "ambry-router/src/main/java/com.github.ambry.router/CloudRouterFactory.java", "diffHunk": "@@ -168,10 +174,35 @@ static RequestHandlerPool getRequestHandlerPool(VerifiableProperties verifiableP\n     StoreKeyConverterFactory storeKeyConverterFactory =\n         Utils.getObj(serverConfig.serverStoreKeyConverterFactory, verifiableProperties, registry);\n     AmbryRequests requests =\n-        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null,\n-            notificationSystem, null, storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch,\n-            storeKeyConverterFactory);\n+        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null, null, null,\n+            storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch, storeKeyConverterFactory);\n     return new RequestHandlerPool(serverConfig.serverRequestHandlerNumOfThreads, channel, requests);\n   }\n+\n+  private CompositeNetworkClientFactory getNetworkClientFactory(RequestHandlerPool requestHandlerPool,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0b3e291447df64847c21d0b3430a1700d96856a"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM4MTQ4OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/CloudRouterFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowNDo1OVrOF96KqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzozMjoyMVrOF9__hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2MDQ1Nw==", "bodyText": "Looks like this logic was copied from NonBlockingRouterFactory.  I'd prefer to see it reused somehow, though that can be done in a follow up.", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400460457", "createdAt": "2020-03-30T20:04:59Z", "author": {"login": "lightningrob"}, "path": "ambry-router/src/main/java/com.github.ambry.router/CloudRouterFactory.java", "diffHunk": "@@ -168,10 +174,35 @@ static RequestHandlerPool getRequestHandlerPool(VerifiableProperties verifiableP\n     StoreKeyConverterFactory storeKeyConverterFactory =\n         Utils.getObj(serverConfig.serverStoreKeyConverterFactory, verifiableProperties, registry);\n     AmbryRequests requests =\n-        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null,\n-            notificationSystem, null, storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch,\n-            storeKeyConverterFactory);\n+        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null, null, null,\n+            storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch, storeKeyConverterFactory);\n     return new RequestHandlerPool(serverConfig.serverRequestHandlerNumOfThreads, channel, requests);\n   }\n+\n+  private CompositeNetworkClientFactory getNetworkClientFactory(RequestHandlerPool requestHandlerPool,\n+      MetricRegistry registry) {\n+    NetworkConfig networkConfig = new NetworkConfig(verifiableProperties);\n+    NetworkMetrics networkMetrics = new NetworkMetrics(registry);\n+    NetworkClientFactory cloudNetworkClientFactory =\n+        new LocalNetworkClientFactory((LocalRequestResponseChannel) requestHandlerPool.getChannel(), networkConfig,\n+            networkMetrics, time);\n+\n+    NetworkClientFactory diskNetworkClientFactory;\n+    if (new ClusterMapConfig(verifiableProperties).clusterMapHttp2NetworkClientEnabled) {\n+      Http2ClientConfig http2ClientConfig = new Http2ClientConfig(verifiableProperties);\n+      Http2ClientMetrics http2ClientMetrics = new Http2ClientMetrics(registry);\n+      diskNetworkClientFactory = new Http2NetworkClientFactory(http2ClientMetrics, http2ClientConfig, sslFactory, time);\n+    } else {\n+      diskNetworkClientFactory = new SocketNetworkClientFactory(networkMetrics, networkConfig, sslFactory,\n+          routerConfig.routerScalingUnitMaxConnectionsPerPortPlainText,\n+          routerConfig.routerScalingUnitMaxConnectionsPerPortSsl, routerConfig.routerConnectionCheckoutTimeoutMs, time);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0b3e291447df64847c21d0b3430a1700d96856a"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NTkwOA==", "bodyText": "Made a static method in NonBlockingRouterFactory for this.", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400555908", "createdAt": "2020-03-30T23:32:21Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/CloudRouterFactory.java", "diffHunk": "@@ -168,10 +174,35 @@ static RequestHandlerPool getRequestHandlerPool(VerifiableProperties verifiableP\n     StoreKeyConverterFactory storeKeyConverterFactory =\n         Utils.getObj(serverConfig.serverStoreKeyConverterFactory, verifiableProperties, registry);\n     AmbryRequests requests =\n-        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null,\n-            notificationSystem, null, storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch,\n-            storeKeyConverterFactory);\n+        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null, null, null,\n+            storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch, storeKeyConverterFactory);\n     return new RequestHandlerPool(serverConfig.serverRequestHandlerNumOfThreads, channel, requests);\n   }\n+\n+  private CompositeNetworkClientFactory getNetworkClientFactory(RequestHandlerPool requestHandlerPool,\n+      MetricRegistry registry) {\n+    NetworkConfig networkConfig = new NetworkConfig(verifiableProperties);\n+    NetworkMetrics networkMetrics = new NetworkMetrics(registry);\n+    NetworkClientFactory cloudNetworkClientFactory =\n+        new LocalNetworkClientFactory((LocalRequestResponseChannel) requestHandlerPool.getChannel(), networkConfig,\n+            networkMetrics, time);\n+\n+    NetworkClientFactory diskNetworkClientFactory;\n+    if (new ClusterMapConfig(verifiableProperties).clusterMapHttp2NetworkClientEnabled) {\n+      Http2ClientConfig http2ClientConfig = new Http2ClientConfig(verifiableProperties);\n+      Http2ClientMetrics http2ClientMetrics = new Http2ClientMetrics(registry);\n+      diskNetworkClientFactory = new Http2NetworkClientFactory(http2ClientMetrics, http2ClientConfig, sslFactory, time);\n+    } else {\n+      diskNetworkClientFactory = new SocketNetworkClientFactory(networkMetrics, networkConfig, sslFactory,\n+          routerConfig.routerScalingUnitMaxConnectionsPerPortPlainText,\n+          routerConfig.routerScalingUnitMaxConnectionsPerPortSsl, routerConfig.routerConnectionCheckoutTimeoutMs, time);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2MDQ1Nw=="}, "originalCommit": {"oid": "d0b3e291447df64847c21d0b3430a1700d96856a"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1443, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}