{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNDc2MTUx", "number": 1472, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTowODoyOVrODxyLbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0Mzo0M1rOD0A4mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTI4OTQxOnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/clustermap/ClusterAgentsFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTowODoyOVrOGFc-vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo0NzozM1rOGGuQMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3MDg3Ng==", "bodyText": "nit: In some special cases, might as well just point it out this is for zk migration.", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r408370876", "createdAt": "2020-04-14T19:08:29Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/clustermap/ClusterAgentsFactory.java", "diffHunk": "@@ -29,9 +30,12 @@\n   ClusterMap getClusterMap() throws IOException;\n \n   /**\n-   * Construct and return the reference or return the reference to the previously constructed\n-   * {@link ClusterParticipant}\n+   * Construct and return the references or return the references to the previously constructed\n+   * {@link ClusterParticipant}(s). We extend this method to support multiple participants on same node. In some special", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwMjQ0OA==", "bodyText": "sure, will add", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409702448", "createdAt": "2020-04-16T16:47:33Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/clustermap/ClusterAgentsFactory.java", "diffHunk": "@@ -29,9 +30,12 @@\n   ClusterMap getClusterMap() throws IOException;\n \n   /**\n-   * Construct and return the reference or return the reference to the previously constructed\n-   * {@link ClusterParticipant}\n+   * Construct and return the references or return the references to the previously constructed\n+   * {@link ClusterParticipant}(s). We extend this method to support multiple participants on same node. In some special", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3MDg3Ng=="}, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTQ1ODIzOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo1NzozNVrOGFeoDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxNTozNVrOGGvTEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5NzgzNg==", "bodyText": "From the zk migration document, there will be no replica movement during the migration, why do those managers has to support multiple participants?", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r408397836", "createdAt": "2020-04-14T19:57:35Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "diffHunk": "@@ -165,9 +164,11 @@ public void startup() throws InstantiationException {\n       }\n \n       StoreKeyFactory storeKeyFactory = Utils.getObj(storeConfig.storeKeyFactory, clusterMap);\n+      // TODO make StorageManager, ReplicationManager, CloudToStoreReplicationManager and StatsManager support multiple participants\n+      // For now, we assume there is only one element in clusterParticipants list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxOTU3MQ==", "bodyText": "Good question. ReplicaitonManager may not need actions against multiple participants but StatsManager and StorageManager are supposed to interact with multiple participants to upload local info to multiple clusters (i.e sealing partition info and stats info)", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409719571", "createdAt": "2020-04-16T17:15:35Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "diffHunk": "@@ -165,9 +164,11 @@ public void startup() throws InstantiationException {\n       }\n \n       StoreKeyFactory storeKeyFactory = Utils.getObj(storeConfig.storeKeyFactory, clusterMap);\n+      // TODO make StorageManager, ReplicationManager, CloudToStoreReplicationManager and StatsManager support multiple participants\n+      // For now, we assume there is only one element in clusterParticipants list.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5NzgzNg=="}, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTU3NjI2OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/DatacenterInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDozMjowNVrOGFfyjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoyMzoyMFrOGGvlvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxNjkwOA==", "bodyText": "This comment is confusing to me. DatacenterInitializer is not part of the ClusterParticipant. It's used by HelixClusterManager to fetch the instance config and fill the clustermap. Why do we need to support multiple of them?", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r408416908", "createdAt": "2020-04-14T20:32:05Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/DatacenterInitializer.java", "diffHunk": "@@ -158,7 +158,10 @@ private void onInitializationFailure(Exception e) {\n    * @throws Exception if something went wrong during startup\n    */\n   private DcInfo initializeHelixDatacenter() throws Exception {\n-    String zkConnectStr = dcZkInfo.getZkConnectStr();\n+    // For now, the first ZK endpoint (if there are more than one endpoints) will be adopted by default for initialization.\n+    // If we really need multiple HelixClusterManagers on same node in the future, we can use separate zk connect str configs\n+    // for HelixClusterManager and HelixParticipant.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyNDM1MA==", "bodyText": "True, we don't need support multiple HelixClusterManager(which is also spectator in the context of Helix). I added the comment to clarify that we have to pick one (and only one) ZK endpoint to connect, as clusterMapDcsZkConnectStrings contains several ZK endpoints in each dc to support multiple participants. I will remove the comment and make it clear.", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409724350", "createdAt": "2020-04-16T17:23:20Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/DatacenterInitializer.java", "diffHunk": "@@ -158,7 +158,10 @@ private void onInitializationFailure(Exception e) {\n    * @throws Exception if something went wrong during startup\n    */\n   private DcInfo initializeHelixDatacenter() throws Exception {\n-    String zkConnectStr = dcZkInfo.getZkConnectStr();\n+    // For now, the first ZK endpoint (if there are more than one endpoints) will be adopted by default for initialization.\n+    // If we really need multiple HelixClusterManagers on same node in the future, we can use separate zk connect str configs\n+    // for HelixClusterManager and HelixParticipant.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxNjkwOA=="}, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzgzOTg0OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/ClusterMapUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxODozMFrOGGvZ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozMTowMFrOGGv5GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMTMxOQ==", "bodyText": "this can result in a NPE, since we use optString for cloud backed replicas.\nInstead, you could do Utils.splitString(entry.optString(ZKCONNECT_STR, \"\"), ZKCONNECTSTR_DELIMITER)", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409721319", "createdAt": "2020-04-16T17:18:30Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/ClusterMapUtils.java", "diffHunk": "@@ -152,9 +155,10 @@ public static String getInstanceName(String host, Integer port) {\n       String name = entry.getString(DATACENTER_STR);\n       byte id = (byte) entry.getInt(DATACENTER_ID_STR);\n       ReplicaType replicaType = entry.optEnum(ReplicaType.class, REPLICA_TYPE_STR, ReplicaType.DISK_BACKED);\n-      String zkConnectStr = (replicaType == ReplicaType.DISK_BACKED) ? entry.getString(ZKCONNECTSTR_STR)\n-          : entry.optString(ZKCONNECTSTR_STR);\n-      DcZkInfo dcZkInfo = new DcZkInfo(name, id, zkConnectStr, replicaType);\n+      String[] zkConnectStrs =\n+          (replicaType == ReplicaType.DISK_BACKED) ? entry.getString(ZKCONNECTSTR_STR).split(ZKCONNECTSTR_DELIMITER)\n+              : entry.optString(ZKCONNECTSTR_STR).split(ZKCONNECTSTR_DELIMITER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyNjI1OA==", "bodyText": "Yeah, Utils.splitString is better. I previously used split with the impression that optString returns empty \"\" if not found, which doesn't cause NPE. Anyway, I will go with Utils.splitString.", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409726258", "createdAt": "2020-04-16T17:26:25Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/ClusterMapUtils.java", "diffHunk": "@@ -152,9 +155,10 @@ public static String getInstanceName(String host, Integer port) {\n       String name = entry.getString(DATACENTER_STR);\n       byte id = (byte) entry.getInt(DATACENTER_ID_STR);\n       ReplicaType replicaType = entry.optEnum(ReplicaType.class, REPLICA_TYPE_STR, ReplicaType.DISK_BACKED);\n-      String zkConnectStr = (replicaType == ReplicaType.DISK_BACKED) ? entry.getString(ZKCONNECTSTR_STR)\n-          : entry.optString(ZKCONNECTSTR_STR);\n-      DcZkInfo dcZkInfo = new DcZkInfo(name, id, zkConnectStr, replicaType);\n+      String[] zkConnectStrs =\n+          (replicaType == ReplicaType.DISK_BACKED) ? entry.getString(ZKCONNECTSTR_STR).split(ZKCONNECTSTR_DELIMITER)\n+              : entry.optString(ZKCONNECTSTR_STR).split(ZKCONNECTSTR_DELIMITER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMTMxOQ=="}, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyOTMwNA==", "bodyText": "Oh interesting, you are right about it returning empty string instead of null:\n    public String optString(String key) {\n        return this.optString(key, \"\");\n    }\n\nYou can ignore the comment about the NPE. Still it will be good to use Utils.splitString since it will filter out the empty string. i.e. return the list [] instead of [\"\"]", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409729304", "createdAt": "2020-04-16T17:31:00Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/ClusterMapUtils.java", "diffHunk": "@@ -152,9 +155,10 @@ public static String getInstanceName(String host, Integer port) {\n       String name = entry.getString(DATACENTER_STR);\n       byte id = (byte) entry.getInt(DATACENTER_ID_STR);\n       ReplicaType replicaType = entry.optEnum(ReplicaType.class, REPLICA_TYPE_STR, ReplicaType.DISK_BACKED);\n-      String zkConnectStr = (replicaType == ReplicaType.DISK_BACKED) ? entry.getString(ZKCONNECTSTR_STR)\n-          : entry.optString(ZKCONNECTSTR_STR);\n-      DcZkInfo dcZkInfo = new DcZkInfo(name, id, zkConnectStr, replicaType);\n+      String[] zkConnectStrs =\n+          (replicaType == ReplicaType.DISK_BACKED) ? entry.getString(ZKCONNECTSTR_STR).split(ZKCONNECTSTR_DELIMITER)\n+              : entry.optString(ZKCONNECTSTR_STR).split(ZKCONNECTSTR_DELIMITER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMTMxOQ=="}, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzg0MDU3OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/ClusterMapUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxODo0MlrOGGvaWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoyNzowNFrOGGvuzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMTQzMw==", "bodyText": "Use Utils.splitString here?", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409721433", "createdAt": "2020-04-16T17:18:42Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/ClusterMapUtils.java", "diffHunk": "@@ -152,9 +155,10 @@ public static String getInstanceName(String host, Integer port) {\n       String name = entry.getString(DATACENTER_STR);\n       byte id = (byte) entry.getInt(DATACENTER_ID_STR);\n       ReplicaType replicaType = entry.optEnum(ReplicaType.class, REPLICA_TYPE_STR, ReplicaType.DISK_BACKED);\n-      String zkConnectStr = (replicaType == ReplicaType.DISK_BACKED) ? entry.getString(ZKCONNECTSTR_STR)\n-          : entry.optString(ZKCONNECTSTR_STR);\n-      DcZkInfo dcZkInfo = new DcZkInfo(name, id, zkConnectStr, replicaType);\n+      String[] zkConnectStrs =\n+          (replicaType == ReplicaType.DISK_BACKED) ? entry.getString(ZKCONNECTSTR_STR).split(ZKCONNECTSTR_DELIMITER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyNjY2OA==", "bodyText": "sure", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409726668", "createdAt": "2020-04-16T17:27:04Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/ClusterMapUtils.java", "diffHunk": "@@ -152,9 +155,10 @@ public static String getInstanceName(String host, Integer port) {\n       String name = entry.getString(DATACENTER_STR);\n       byte id = (byte) entry.getInt(DATACENTER_ID_STR);\n       ReplicaType replicaType = entry.optEnum(ReplicaType.class, REPLICA_TYPE_STR, ReplicaType.DISK_BACKED);\n-      String zkConnectStr = (replicaType == ReplicaType.DISK_BACKED) ? entry.getString(ZKCONNECTSTR_STR)\n-          : entry.optString(ZKCONNECTSTR_STR);\n-      DcZkInfo dcZkInfo = new DcZkInfo(name, id, zkConnectStr, replicaType);\n+      String[] zkConnectStrs =\n+          (replicaType == ReplicaType.DISK_BACKED) ? entry.getString(ZKCONNECTSTR_STR).split(ZKCONNECTSTR_DELIMITER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMTQzMw=="}, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzg0ODMxOnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixClusterManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoyMDozNVrOGGvfGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0ODo0NFrOGGwi_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMjY0OQ==", "bodyText": "this needs to go below line 203 since CLOUD_BACKED replicas do not have a zk connect string", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409722649", "createdAt": "2020-04-16T17:20:35Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixClusterManager.java", "diffHunk": "@@ -197,7 +197,9 @@ public HelixClusterManager(ClusterMapConfig clusterMapConfig, String instanceNam\n   private HelixManager initializeHelixManagerAndPropertyStoreInLocalDC(Map<String, DcZkInfo> dataCenterToZkAddress,\n       String instanceName, HelixFactory helixFactory) throws Exception {\n     DcZkInfo dcZkInfo = dataCenterToZkAddress.get(clusterMapConfig.clusterMapDatacenterName);\n-    String zkConnectStr = dcZkInfo.getZkConnectStr();\n+    // For now, the first ZK endpoint (if there are more than one endpoints) will be adopted by default. We can update\n+    // this if we really need to initialize mulitiple HelixManager in local dc.\n+    String zkConnectStr = dcZkInfo.getZkConnectStrs().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MDAyOQ==", "bodyText": "good point", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409740029", "createdAt": "2020-04-16T17:48:44Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixClusterManager.java", "diffHunk": "@@ -197,7 +197,9 @@ public HelixClusterManager(ClusterMapConfig clusterMapConfig, String instanceNam\n   private HelixManager initializeHelixManagerAndPropertyStoreInLocalDC(Map<String, DcZkInfo> dataCenterToZkAddress,\n       String instanceName, HelixFactory helixFactory) throws Exception {\n     DcZkInfo dcZkInfo = dataCenterToZkAddress.get(clusterMapConfig.clusterMapDatacenterName);\n-    String zkConnectStr = dcZkInfo.getZkConnectStr();\n+    // For now, the first ZK endpoint (if there are more than one endpoints) will be adopted by default. We can update\n+    // this if we really need to initialize mulitiple HelixManager in local dc.\n+    String zkConnectStr = dcZkInfo.getZkConnectStrs().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMjY0OQ=="}, "originalCommit": {"oid": "b758face087dc960fd37f188dfeb4a58a35ffd92"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDk4NzY1OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixClusterManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzoxOTowN1rOGG6gsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDozMTowOVrOGG72GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMzI4Mw==", "bodyText": "I don't think we need to support multiple helix instances here, maybe we should change the comments.", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409903283", "createdAt": "2020-04-16T23:19:07Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixClusterManager.java", "diffHunk": "@@ -197,10 +197,12 @@ public HelixClusterManager(ClusterMapConfig clusterMapConfig, String instanceNam\n   private HelixManager initializeHelixManagerAndPropertyStoreInLocalDC(Map<String, DcZkInfo> dataCenterToZkAddress,\n       String instanceName, HelixFactory helixFactory) throws Exception {\n     DcZkInfo dcZkInfo = dataCenterToZkAddress.get(clusterMapConfig.clusterMapDatacenterName);\n-    String zkConnectStr = dcZkInfo.getZkConnectStr();\n     if (dcZkInfo.getReplicaType() == ReplicaType.CLOUD_BACKED) {\n       return null;\n     }\n+    // For now, the first ZK endpoint (if there are more than one endpoints) will be adopted by default. We can update\n+    // this if we really need to initialize multiple HelixManagers in local dc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "605420e79699fb00c96ed5dcb7c65d23653f655e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyNTE0NA==", "bodyText": "hmm, I don't see any use cases for now, will remove the comment.", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r409925144", "createdAt": "2020-04-17T00:31:09Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixClusterManager.java", "diffHunk": "@@ -197,10 +197,12 @@ public HelixClusterManager(ClusterMapConfig clusterMapConfig, String instanceNam\n   private HelixManager initializeHelixManagerAndPropertyStoreInLocalDC(Map<String, DcZkInfo> dataCenterToZkAddress,\n       String instanceName, HelixFactory helixFactory) throws Exception {\n     DcZkInfo dcZkInfo = dataCenterToZkAddress.get(clusterMapConfig.clusterMapDatacenterName);\n-    String zkConnectStr = dcZkInfo.getZkConnectStr();\n     if (dcZkInfo.getReplicaType() == ReplicaType.CLOUD_BACKED) {\n       return null;\n     }\n+    // For now, the first ZK endpoint (if there are more than one endpoints) will be adopted by default. We can update\n+    // this if we really need to initialize multiple HelixManagers in local dc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMzI4Mw=="}, "originalCommit": {"oid": "605420e79699fb00c96ed5dcb7c65d23653f655e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODY1NDk1OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipantMetrics.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjozNzoyM1rOGIv0Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0OTo0MFrOGIwDrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNTIwNg==", "bodyText": "Minor: my only concern here is that the metric names will look convoluted.  But I don't have a better suggestion either for making them distinct.", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r411825206", "createdAt": "2020-04-21T02:37:23Z", "author": {"login": "lightningrob"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipantMetrics.java", "diffHunk": "@@ -32,26 +32,27 @@\n   // no need to record exact number of \"dropped\" partition, a counter to track partition-dropped events would suffice\n   final Counter partitionDroppedCount;\n \n-  HelixParticipantMetrics(MetricRegistry metricRegistry) {\n+  HelixParticipantMetrics(MetricRegistry metricRegistry, String zkConnectStr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c63664179f7530057728d42ece47247bd9996b7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNTc5NQ==", "bodyText": "Perhaps in the common case where there is only one participant, you can skip adding the zkConnectStr to the metrics (assuming the caller knows this).", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r411825795", "createdAt": "2020-04-21T02:39:07Z", "author": {"login": "lightningrob"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipantMetrics.java", "diffHunk": "@@ -32,26 +32,27 @@\n   // no need to record exact number of \"dropped\" partition, a counter to track partition-dropped events would suffice\n   final Counter partitionDroppedCount;\n \n-  HelixParticipantMetrics(MetricRegistry metricRegistry) {\n+  HelixParticipantMetrics(MetricRegistry metricRegistry, String zkConnectStr) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNTIwNg=="}, "originalCommit": {"oid": "3c63664179f7530057728d42ece47247bd9996b7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTE2NA==", "bodyText": "Good idea, will try to skip zkConnectStr if there is only one participant.", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r411829164", "createdAt": "2020-04-21T02:49:40Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipantMetrics.java", "diffHunk": "@@ -32,26 +32,27 @@\n   // no need to record exact number of \"dropped\" partition, a counter to track partition-dropped events would suffice\n   final Counter partitionDroppedCount;\n \n-  HelixParticipantMetrics(MetricRegistry metricRegistry) {\n+  HelixParticipantMetrics(MetricRegistry metricRegistry, String zkConnectStr) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNTIwNg=="}, "originalCommit": {"oid": "3c63664179f7530057728d42ece47247bd9996b7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODY3MDMzOnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixParticipantTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0Mzo0M1rOGIv8bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0Mzo0M1rOGIv8bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNzMxMQ==", "bodyText": "Minor: It's generally better to let either the test constructor or @before method do this kind of initialization in case an exception happens in test case.", "url": "https://github.com/linkedin/ambry/pull/1472#discussion_r411827311", "createdAt": "2020-04-21T02:43:43Z", "author": {"login": "lightningrob"}, "path": "ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixParticipantTest.java", "diffHunk": "@@ -301,21 +307,45 @@ public void testBadCases() throws IOException {\n     props.setProperty(\"clustermap.dcs.zk.connect.strings\", \"\");\n     clusterMapConfig = new ClusterMapConfig(new VerifiableProperties(props));\n     try {\n-      new HelixParticipant(clusterMapConfig, helixManagerFactory, new MetricRegistry());\n+      new HelixClusterAgentsFactory(clusterMapConfig, new MetricRegistry()).getClusterParticipants();\n       fail(\"Instantiation should have failed\");\n     } catch (IOException e) {\n       // OK\n     }\n   }\n \n+  /**\n+   * Test instantiating multiple {@link HelixParticipant}(s) in {@link HelixClusterAgentsFactory}\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testMultiParticipants() throws Exception {\n+    JSONArray zkInfosJson = new JSONArray();\n+    // create a new zkJson which contains two zk endpoints in the same data center.\n+    JSONObject zkInfoJson = new JSONObject();\n+    zkInfoJson.put(ClusterMapUtils.DATACENTER_STR, \"DC0\");\n+    zkInfoJson.put(ClusterMapUtils.DATACENTER_ID_STR, (byte) 0);\n+    zkInfoJson.put(ClusterMapUtils.ZKCONNECT_STR, \"localhost:2199\" + ZKCONNECT_STR_DELIMITER + \"localhost:2299\");\n+    zkInfosJson.put(zkInfoJson);\n+    JSONObject jsonObject = new JSONObject().put(ClusterMapUtils.ZKINFO_STR, zkInfosJson);\n+    props.setProperty(\"clustermap.dcs.zk.connect.strings\", jsonObject.toString(2));\n+    ClusterMapConfig clusterMapConfig = new ClusterMapConfig(new VerifiableProperties(props));\n+    List<ClusterParticipant> participants =\n+        new HelixClusterAgentsFactory(clusterMapConfig, helixManagerFactory).getClusterParticipants();\n+    assertEquals(\"Number of participants is not expected\", 2, participants.size());\n+    // restore previous setup\n+    props.setProperty(\"clustermap.dcs.zk.connect.strings\", zkJson.toString(2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c63664179f7530057728d42ece47247bd9996b7"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1497, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}