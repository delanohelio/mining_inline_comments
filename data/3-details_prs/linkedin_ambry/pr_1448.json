{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTA2MTQy", "number": 1448, "title": "Fix hard deleter bug when the startToken is journal-based token", "bodyText": "We are seeing lots of hard deleter failure from EI.\nat com.github.ambry.store.HardDeleter$HardDeletePersistInfo.compareTwoTokens(HardDeleter.java:853)\nat com.github.ambry.store.HardDeleter$HardDeletePersistInfo.pruneTill(HardDeleter.java:835)\nat com.github.ambry.store.HardDeleter.pruneHardDeleteRecoveryRange(HardDeleter.java:290)\nat com.github.ambry.store.HardDeleter.postLogFlush(HardDeleter.java:384)\nat com.github.ambry.store.PersistentIndex$IndexPersistor.write(PersistentIndex.java:1949)\nat com.github.ambry.store.PersistentIndex$IndexPersistor.run(PersistentIndex.java:1989)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\nat java.lang.Thread.run(Thread.java:748)```\nThis also cause compaction to fail. \n\nThe root cause of this exception is that startToken for some blobReadOption is journalBased, but we didn't include the logic to deal with it, instead we just throw an exception.", "createdAt": "2020-03-31T18:11:48Z", "url": "https://github.com/linkedin/ambry/pull/1448", "merged": true, "mergeCommit": {"oid": "7da682739af751e070a95cd5dd16befb49100e0d"}, "closed": true, "closedAt": "2020-04-02T00:46:52Z", "author": {"login": "justinlin-linkedin"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTJIdrAFqTM4NTA3OTQxOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTd56ogBqjMxODk2MDI0ODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDc5NDE5", "url": "https://github.com/linkedin/ambry/pull/1448#pullrequestreview-385079419", "createdAt": "2020-03-31T20:28:22Z", "commit": {"oid": "e0e6b0f39931df7f3cb969feb6941f8bc61b6352"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoyODoyM1rOF-m97Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoyODoyM1rOF-m97Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NDQ3Nw==", "bodyText": "This test is good, after verifying HardDelete doesn't move token forward, can we also verify calling pruneHardDeleteRecoveryRange should clear hardDeleteRecoveryRange?", "url": "https://github.com/linkedin/ambry/pull/1448#discussion_r401194477", "createdAt": "2020-03-31T20:28:23Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/test/java/com.github.ambry.store/HardDeleterTest.java", "diffHunk": "@@ -378,29 +378,33 @@ public void testHardDelete() {\n         }\n         assertEquals(\"Recovery range size mismatch\", 0, index.hardDeleter.getHardDeleteRecoveryRange().getSize());\n \n-        // indexes: [1 2] [3 4] [3d 5] [6 7] [2d 6d] [8 9*] [1d 10*] [8d 10d] [1u 3u]\n-        // journal:                                                     [10d 8d 3u 1u]\n+        // indexes: [1 2] [3 4] [3d 5] [6 7] [2d 6d] [8 9*] [1d 10*] [1u 3u] [8d 10d]\n+        // journal:                                                    [3u 1u 10d 8d]\n         tokenMovedForward = index.hardDelete();\n         Assert.assertTrue(tokenMovedForward);\n-        hardDeletedKeys.add(keys.get(9)); // blobId10\n-        hardDeletedKeys.add(keys.get(7)); // blobId08\n         if (!recordContentChecked) {\n           checkRecordHardDeleted(keys, hardDeletedKeys);\n         }\n-        // blobid08 and blobid10\n-        assertEquals(\"Recovery range size mismatch\", 2, index.hardDeleter.getHardDeleteRecoveryRange().getSize());\n \n-        // indexes: [1 2] [3 4] [3d 5] [6 7] [2d 6d] [8 9*] [1d 10] [8d 10d] [1u 3u]\n-        // journal:                                                     [10d 8d* 3u 1u]\n+        // indexes: [1 2] [3 4] [3d 5] [6 7] [2d 6d] [8 9*] [1d 10] [1u 3u] [8d 10d]\n+        // journal:                                                    [3u 1u* 10d 8d]\n         tokenMovedForward = index.hardDelete();\n         Assert.assertTrue(tokenMovedForward);\n+        hardDeletedKeys.add(keys.get(9)); // blobId10\n+        hardDeletedKeys.add(keys.get(7)); // blobId08\n         if (!recordContentChecked) {\n           checkRecordHardDeleted(keys, hardDeletedKeys);\n         }\n+        // blobid08 and blobid10\n+        assertEquals(\"Recovery range size mismatch\", 2, index.hardDeleter.getHardDeleteRecoveryRange().getSize());\n+        // Persist safeToken here since now we have two items in the recovery range and their startToken is journal-based.\n+        token = (StoreFindToken) index.hardDeleter.getStartTokenSafeToPersistTo();\n+        index.hardDeleter.getHardDeleteRecoveryRange().pruneTill(token);\n+        // After prune we still have two\n         assertEquals(\"Recovery range size mismatch\", 2, index.hardDeleter.getHardDeleteRecoveryRange().getSize());\n \n-        // indexes: [1 2] [3 4] [3d 5] [6 7] [2d 6d] [8 9*] [1d 10] [8d 10d] [1u 3u]\n-        // journal:                                                     [10d 8d 3u 1u*]\n+        // indexes: [1 2] [3 4] [3d 5] [6 7] [2d 6d] [8 9*] [1d 10] [1u 3u] [8d 10d]\n+        // journal:                                                    [3u 1u 10d 8d*]\n         // All caught up, hardDelete should not move token forward.\n         tokenMovedForward = index.hardDelete();\n         Assert.assertFalse(tokenMovedForward);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e6b0f39931df7f3cb969feb6941f8bc61b6352"}, "originalPosition": 120}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0e6b0f39931df7f3cb969feb6941f8bc61b6352", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/e0e6b0f39931df7f3cb969feb6941f8bc61b6352", "committedDate": "2020-03-31T18:08:54Z", "message": "Fix hard deleter bug when the startToken is journal-based token"}, "afterCommit": {"oid": "8af3e0be9026c152e0d4cf4b685e15a3a08752bb", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/8af3e0be9026c152e0d4cf4b685e15a3a08752bb", "committedDate": "2020-04-01T18:43:23Z", "message": "Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODY5NDgw", "url": "https://github.com/linkedin/ambry/pull/1448#pullrequestreview-385869480", "createdAt": "2020-04-01T19:05:43Z", "commit": {"oid": "8af3e0be9026c152e0d4cf4b685e15a3a08752bb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8af3e0be9026c152e0d4cf4b685e15a3a08752bb", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/8af3e0be9026c152e0d4cf4b685e15a3a08752bb", "committedDate": "2020-04-01T18:43:23Z", "message": "Comments"}, "afterCommit": {"oid": "53ee2aa6267552302f18e53d71f3971c11b28e22", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/53ee2aa6267552302f18e53d71f3971c11b28e22", "committedDate": "2020-04-01T20:01:46Z", "message": "Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5593aa555a774fcbc8d3638011e360715d77882c", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/5593aa555a774fcbc8d3638011e360715d77882c", "committedDate": "2020-04-01T20:40:52Z", "message": "Fix hard deleter bug when the startToken is journal-based token"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccd9b653633b9c3ad8be42ebce68586c08738e67", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/ccd9b653633b9c3ad8be42ebce68586c08738e67", "committedDate": "2020-04-01T20:40:52Z", "message": "Comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00d30ff76762e6f19d03729344e3bab51b0355e9", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/00d30ff76762e6f19d03729344e3bab51b0355e9", "committedDate": "2020-04-01T20:11:20Z", "message": "Rebase"}, "afterCommit": {"oid": "ccd9b653633b9c3ad8be42ebce68586c08738e67", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/ccd9b653633b9c3ad8be42ebce68586c08738e67", "committedDate": "2020-04-01T20:40:52Z", "message": "Comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1344, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}