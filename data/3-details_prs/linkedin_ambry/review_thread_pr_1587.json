{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDU3NTc5", "number": 1587, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMToyMDoxOFrOEPrb7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjowNTozOVrOEcw7VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODc1NzU4OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/GCMCryptoService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMToyMDoxOFrOGzhgZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMToyMDoxOFrOGzhgZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3OTUyNw==", "bodyText": "No longer valid.", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r456679527", "createdAt": "2020-07-17T21:20:18Z", "author": {"login": "zzmao"}, "path": "ambry-router/src/main/java/com/github/ambry/router/GCMCryptoService.java", "diffHunk": "@@ -123,33 +125,32 @@ public ByteBuf encrypt(ByteBuf toEncrypt, SecretKeySpec key, byte[] iv) throws G\n       int outputSize = encrypter.getOutputSize(toEncrypt.readableBytes());\n \n       // stick with heap memory for now so to compare with the java.nio.ByteBuffer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb4160693b4f525181f31587cba105911e83c61"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDQwMjk4OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0NDo1NlrOG1JFzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzozMDo0M1rOG2e8wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NjY1NQ==", "bodyText": "i'm a little worried about calling processCallbacks from a different thread in a callback. I don't think it was designed to be called from non event loop threads. Will take a deeper look to see if there's any alternative (or if it is already thread safe)", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r458376655", "createdAt": "2020-07-21T20:44:56Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -1353,12 +1356,19 @@ private void handleMetadataBlob(BlobData blobData, byte[] userMetadata, ByteBuff\n                 new DecryptJob(blobId, encryptionKey, null, ByteBuffer.wrap(userMetadata), cryptoService, kms,\n                     decryptJobMetricsTracker, (DecryptJob.DecryptJobResult result, Exception exception) -> {\n                   routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n-                  decryptJobMetricsTracker.onJobCallbackProcessingStart();\n-                  logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n-                      blobId);\n-                  decryptCallbackResultInfo.setResultAndException(result, exception);\n-                  routerCallback.onPollReady();\n-                  decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                  if (isOperationComplete() || operationException.get() != null) {\n+                    if (result != null && result.getDecryptedBlobContent() != null) {\n+                      result.getDecryptedBlobContent().release();\n+                    }\n+                  } else {\n+                    decryptJobMetricsTracker.onJobCallbackProcessingStart();\n+                    logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n+                        blobId);\n+                    decryptCallbackResultInfo.setResultAndException(result, exception);\n+                    routerCallback.onPollReady();\n+                    decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                    processCallbacks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b352affefcace6a553a002fac31ff1e7a4a9d74"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4MzM2MA==", "bodyText": "you are right, the progresstracker and someother object is not thread safe and should probably only be used in event loop thread. I will update it.", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r459783360", "createdAt": "2020-07-23T23:30:43Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -1353,12 +1356,19 @@ private void handleMetadataBlob(BlobData blobData, byte[] userMetadata, ByteBuff\n                 new DecryptJob(blobId, encryptionKey, null, ByteBuffer.wrap(userMetadata), cryptoService, kms,\n                     decryptJobMetricsTracker, (DecryptJob.DecryptJobResult result, Exception exception) -> {\n                   routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n-                  decryptJobMetricsTracker.onJobCallbackProcessingStart();\n-                  logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n-                      blobId);\n-                  decryptCallbackResultInfo.setResultAndException(result, exception);\n-                  routerCallback.onPollReady();\n-                  decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                  if (isOperationComplete() || operationException.get() != null) {\n+                    if (result != null && result.getDecryptedBlobContent() != null) {\n+                      result.getDecryptedBlobContent().release();\n+                    }\n+                  } else {\n+                    decryptJobMetricsTracker.onJobCallbackProcessingStart();\n+                    logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n+                        blobId);\n+                    decryptCallbackResultInfo.setResultAndException(result, exception);\n+                    routerCallback.onPollReady();\n+                    decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                    processCallbacks();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NjY1NQ=="}, "originalCommit": {"oid": "8b352affefcace6a553a002fac31ff1e7a4a9d74"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTk1MjMyOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo1Nzo1NVrOHHfK6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo1Nzo1NVrOHHfK6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMjc3OQ==", "bodyText": "Probably the onPollReady call should come after processCallbacks() since that call also changes state that requires further processing on the event loop.", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r477612779", "createdAt": "2020-08-26T21:57:55Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -1354,12 +1357,19 @@ private void handleMetadataBlob(BlobData blobData, byte[] userMetadata, ByteBuff\n                 new DecryptJob(blobId, encryptionKey, null, ByteBuffer.wrap(userMetadata), cryptoService, kms,\n                     decryptJobMetricsTracker, (DecryptJob.DecryptJobResult result, Exception exception) -> {\n                   routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n-                  decryptJobMetricsTracker.onJobCallbackProcessingStart();\n-                  logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n-                      blobId);\n-                  decryptCallbackResultInfo.setResultAndException(result, exception);\n-                  routerCallback.onPollReady();\n-                  decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                  if (isOperationComplete() || operationException.get() != null) {\n+                    if (result != null && result.getDecryptedBlobContent() != null) {\n+                      result.getDecryptedBlobContent().release();\n+                    }\n+                  } else {\n+                    decryptJobMetricsTracker.onJobCallbackProcessingStart();\n+                    logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n+                        blobId);\n+                    decryptCallbackResultInfo.setResultAndException(result, exception);\n+                    routerCallback.onPollReady();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149f61ecb1282cfc1008e6017c8c21dc4720fa6c"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTk1NjYyOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo1OToyNlrOHHfNhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo1OToyNlrOHHfNhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMzQ0NA==", "bodyText": "same comment about onPollReady", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r477613444", "createdAt": "2020-08-26T21:59:26Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -892,9 +888,16 @@ protected boolean maybeLaunchCryptoJob(ByteBuf dataBuf, byte[] userMetadata, Byt\n               routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n               decryptJobMetricsTracker.onJobCallbackProcessingStart();\n               logger.trace(\"Handling decrypt job call back for blob {} to set decrypt callback results\", targetBlobId);\n+              if (isOperationComplete() || operationException.get() != null) {\n+                if (exception == null && result.getDecryptedBlobContent() != null) {\n+                  result.getDecryptedBlobContent().release();\n+                }\n+                return;\n+              }\n               decryptCallbackResultInfo.setResultAndException(result, exception);\n               routerCallback.onPollReady();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149f61ecb1282cfc1008e6017c8c21dc4720fa6c"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTk2NDA0OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjowMjozNFrOHHfSFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjowMjozNFrOHHfSFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNDYxMg==", "bodyText": "Apologies if you already briefed me on this, but what was the original reason for moving the process callback logic to the callback? Does this prevent a specific leak situation?", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r477614612", "createdAt": "2020-08-26T22:02:34Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -1354,12 +1357,19 @@ private void handleMetadataBlob(BlobData blobData, byte[] userMetadata, ByteBuff\n                 new DecryptJob(blobId, encryptionKey, null, ByteBuffer.wrap(userMetadata), cryptoService, kms,\n                     decryptJobMetricsTracker, (DecryptJob.DecryptJobResult result, Exception exception) -> {\n                   routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n-                  decryptJobMetricsTracker.onJobCallbackProcessingStart();\n-                  logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n-                      blobId);\n-                  decryptCallbackResultInfo.setResultAndException(result, exception);\n-                  routerCallback.onPollReady();\n-                  decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                  if (isOperationComplete() || operationException.get() != null) {\n+                    if (result != null && result.getDecryptedBlobContent() != null) {\n+                      result.getDecryptedBlobContent().release();\n+                    }\n+                  } else {\n+                    decryptJobMetricsTracker.onJobCallbackProcessingStart();\n+                    logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n+                        blobId);\n+                    decryptCallbackResultInfo.setResultAndException(result, exception);\n+                    routerCallback.onPollReady();\n+                    decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                    processCallbacks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149f61ecb1282cfc1008e6017c8c21dc4720fa6c"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTk3MjA0OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjowNTozOVrOHHfW7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjowNTozOVrOHHfW7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNTg1NQ==", "bodyText": "For 100% read-after-write across thread guarantee, the variables set in initializeDataChunks(), blobInfo, etc. should probably be volatile (possible I am misinterpreting the documentation). However, I suspect that we have a few other cases where this was not done which have not caused (discoverable) issues in practice :P\nhttps://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.4.4", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r477615855", "createdAt": "2020-08-26T22:05:39Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -1139,49 +1142,49 @@ MessageFormatFlags getOperationFlag() {\n     }\n \n     @Override\n-    protected void maybeProcessCallbacks() {\n-      if (progressTracker.isCryptoJobRequired() && decryptCallbackResultInfo.decryptJobComplete) {\n-        decryptJobMetricsTracker.onJobResultProcessingStart();\n-        if (decryptCallbackResultInfo.exception != null) {\n-          decryptJobMetricsTracker.incrementOperationError();\n-          logger.trace(\"Decryption job callback invoked with exception for {} blob {} \", blobType, blobId,\n-              decryptCallbackResultInfo.exception);\n-          setOperationException(\n-              new RouterException(\"Exception thrown on decrypting content for \" + blobType + \" blob \" + blobId,\n-                  decryptCallbackResultInfo.exception, RouterErrorCode.UnexpectedInternalError));\n-          progressTracker.setCryptoJobFailed();\n+    protected void processCallbacks() {\n+      decryptJobMetricsTracker.onJobResultProcessingStart();\n+      if (decryptCallbackResultInfo.exception != null) {\n+        decryptJobMetricsTracker.incrementOperationError();\n+        logger.trace(\"Decryption job callback invoked with exception for {} blob {} \", blobType, blobId,\n+            decryptCallbackResultInfo.exception);\n+        setOperationException(\n+            new RouterException(\"Exception thrown on decrypting content for \" + blobType + \" blob \" + blobId,\n+                decryptCallbackResultInfo.exception, RouterErrorCode.UnexpectedInternalError));\n+        progressTracker.setCryptoJobFailed();\n+      } else {\n+        // in case of Metadata blob, only user-metadata needs decryption if the blob is encrypted\n+        if (blobType == BlobType.MetadataBlob) {\n+          logger.trace(\"Processing stored decryption callback result for Metadata blob {}\", blobId);\n+          initializeDataChunks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149f61ecb1282cfc1008e6017c8c21dc4720fa6c"}, "originalPosition": 180}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1315, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}