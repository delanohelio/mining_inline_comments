{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMTYzOTcx", "number": 1631, "title": "[DataNodeConfigSource] use dedicated HPS instance", "bodyText": "The property store provided by the HelixManager.getPropertyStore()\nmethod does not support caching/subscribed paths. As a solution, we can\nmove the ownership/instantiation of the PropertyStore into the\nPropertyStoreToDataNodeConfigAdapter class.\nTo keep views of the property store consistent between HelixParticipant\nand HelixClusterManager, this commit also adds a shared pool of\nDataNodeConfigSources so that the same instance (and ZkClient) can be\nused by both classes.", "createdAt": "2020-09-25T15:53:17Z", "url": "https://github.com/linkedin/ambry/pull/1631", "merged": true, "mergeCommit": {"oid": "02317691404ad1eea41cc362e1ef2bb350b7dc32"}, "closed": true, "closedAt": "2020-09-29T23:55:34Z", "author": {"login": "cgtz"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMXryLAH2gAyNDkzMTYzOTcxOmUxM2Y4OTI2Yjg5NzFjMDg3YzU2YWMwNTFmMGFhYzczOTllYjM0NGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNxIFpAFqTQ5OTAwMTAzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e13f8926b8971c087c56ac051f0aac7399eb344e", "author": {"user": {"login": "cgtz", "name": "Casey Getz"}}, "url": "https://github.com/linkedin/ambry/commit/e13f8926b8971c087c56ac051f0aac7399eb344e", "committedDate": "2020-09-25T15:39:58Z", "message": "[DataNodeConfigSource] use dedicated HPS instance\n\nThe property store provided by the HelixManager.getPropertyStore()\nmethod does not support caching/subscribed paths. As a solution, we can\nmove the ownership/instantiation of the PropertyStore into the\nPropertyStoreToDataNodeConfigAdapter class.\n\nTo keep views of the property store consistent between HelixParticipant\nand HelixClusterManager, this commit also adds a shared pool of\nDataNodeConfigSources so that the same instance (and ZkClient) can be\nused by both classes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MTIwNjM1", "url": "https://github.com/linkedin/ambry/pull/1631#pullrequestreview-497120635", "createdAt": "2020-09-27T23:04:42Z", "commit": {"oid": "e13f8926b8971c087c56ac051f0aac7399eb344e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QyMzowNDo0MlrOHYqxaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QyMzo1Njo0OFrOHYrK5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYyODY0OA==", "bodyText": "nit: in the equals method, suggest comparing zkAddr and instanceName first.", "url": "https://github.com/linkedin/ambry/pull/1631#discussion_r495628648", "createdAt": "2020-09-27T23:04:42Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixFactory.java", "diffHunk": "@@ -69,10 +73,65 @@ public HelixManager getZkHelixManagerAndConnect(String clusterName, String insta\n     return manager;\n   }\n \n+  /**\n+   * @param clusterMapConfig the {@link ClusterMapConfig} to use.\n+   * @param zkAddr the ZooKeeper address to connect to. If a {@link HelixManager} is required and one is already in the\n+   *               pool with this address, it will be reused.\n+   * @param metrics the {@link DataNodeConfigSourceMetrics} to use.\n+   * @return either a new instance of {@link DataNodeConfigSource} with the supplied configuration, or one from the pool\n+   *         if there is already one created for this address.\n+   */\n+  public DataNodeConfigSource getDataNodeConfigSource(ClusterMapConfig clusterMapConfig, String zkAddr,\n+      DataNodeConfigSourceMetrics metrics) {\n+    return dataNodeConfigSources.computeIfAbsent(zkAddr, k -> buildSource(clusterMapConfig, zkAddr, metrics));\n+  }\n+\n+  /**\n+   * @param clusterMapConfig the {@link ClusterMapConfig} to use.\n+   * @param zkAddr the ZooKeeper address to connect to. If a {@link HelixManager} is required and one is already in the\n+   *               pool with this address, it will be reused.\n+   * @param metrics the {@link DataNodeConfigSourceMetrics} to use.\n+   * @return a new instance of {@link DataNodeConfigSource} with the supplied configuration.\n+   */\n+  private DataNodeConfigSource buildSource(ClusterMapConfig clusterMapConfig, String zkAddr,\n+      DataNodeConfigSourceMetrics metrics) {\n+    try {\n+      InstanceConfigToDataNodeConfigAdapter instanceConfigSource = null;\n+      if (clusterMapConfig.clusterMapDataNodeConfigSourceType.isInstanceConfigAware()) {\n+        instanceConfigSource = new InstanceConfigToDataNodeConfigAdapter(\n+            getZkHelixManagerAndConnect(clusterMapConfig.clusterMapClusterName,\n+                ClusterMapUtils.getInstanceName(clusterMapConfig.clusterMapHostName, clusterMapConfig.clusterMapPort),\n+                InstanceType.SPECTATOR, zkAddr), clusterMapConfig);\n+      }\n+      PropertyStoreToDataNodeConfigAdapter propertyStoreSource = null;\n+      if (clusterMapConfig.clusterMapDataNodeConfigSourceType.isPropertyStoreAware()) {\n+        propertyStoreSource = new PropertyStoreToDataNodeConfigAdapter(zkAddr, clusterMapConfig);\n+      }\n+\n+      switch (clusterMapConfig.clusterMapDataNodeConfigSourceType) {\n+        case INSTANCE_CONFIG:\n+          return instanceConfigSource;\n+        case PROPERTY_STORE:\n+          return propertyStoreSource;\n+        case COMPOSITE_INSTANCE_CONFIG_PRIMARY:\n+          return new CompositeDataNodeConfigSource(instanceConfigSource, propertyStoreSource, SystemTime.getInstance(),\n+              metrics);\n+        case COMPOSITE_PROPERTY_STORE_PRIMARY:\n+          return new CompositeDataNodeConfigSource(propertyStoreSource, instanceConfigSource, SystemTime.getInstance(),\n+              metrics);\n+        default:\n+          throw new IllegalArgumentException(\"Unknown type: \" + clusterMapConfig.clusterMapDataNodeConfigSourceType);\n+      }\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Exception while instantiating DataNodeConfigSource\", e);\n+    }\n+  }\n+\n   /**\n    * Hashable key used to cache instances of {@link HelixManager} that match desired parameters.\n+   * Exposed for use in testing.\n    */\n-  private static class ManagerKey {\n+  static class ManagerKey {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e13f8926b8971c087c56ac051f0aac7399eb344e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzNTE3Mg==", "bodyText": "I see this map is only used by HelixClusterManagerTest.java. If so, can we move this map to MockHelixManagerFactory in that file?", "url": "https://github.com/linkedin/ambry/pull/1631#discussion_r495635172", "createdAt": "2020-09-27T23:56:48Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixFactory.java", "diffHunk": "@@ -28,7 +30,9 @@\n  */\n public class HelixFactory {\n   private static final Logger LOGGER = LoggerFactory.getLogger(HelixFactory.class);\n-  Map<ManagerKey, HelixManager> helixManagers = new ConcurrentHashMap<>();\n+  // exposed for use in testing\n+  final Map<ManagerKey, HelixManager> helixManagers = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e13f8926b8971c087c56ac051f0aac7399eb344e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "609cb2e82bf67b9e58ca9d367fedc7920294e0e1", "author": {"user": {"login": "cgtz", "name": "Casey Getz"}}, "url": "https://github.com/linkedin/ambry/commit/609cb2e82bf67b9e58ca9d367fedc7920294e0e1", "committedDate": "2020-09-28T21:33:19Z", "message": "fix ambiguous method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ed195d5fdd72eafc19c0e3710f7771bbf2f1cbf", "author": {"user": {"login": "cgtz", "name": "Casey Getz"}}, "url": "https://github.com/linkedin/ambry/commit/2ed195d5fdd72eafc19c0e3710f7771bbf2f1cbf", "committedDate": "2020-09-28T23:03:58Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94b7a599b5bdf00b1e8c973f7162d11b006011f0", "author": {"user": {"login": "cgtz", "name": "Casey Getz"}}, "url": "https://github.com/linkedin/ambry/commit/94b7a599b5bdf00b1e8c973f7162d11b006011f0", "committedDate": "2020-09-29T00:46:05Z", "message": "fix test case that depends on HelixFactory for getting DNCS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MDQ4Mzg4", "url": "https://github.com/linkedin/ambry/pull/1631#pullrequestreview-498048388", "createdAt": "2020-09-29T03:51:08Z", "commit": {"oid": "94b7a599b5bdf00b1e8c973f7162d11b006011f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4OTc3NDI4", "url": "https://github.com/linkedin/ambry/pull/1631#pullrequestreview-498977428", "createdAt": "2020-09-29T22:45:35Z", "commit": {"oid": "94b7a599b5bdf00b1e8c973f7162d11b006011f0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMjo0NTozNVrOHaE84g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzowMDo0NlrOHaFpug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwNjE0Ng==", "bodyText": "Can you please help to explain a little bit in which case we will chose COMPOSITE_INSTANCE_CONFIG_PRIMARY and COMPOSITE_PROPERTY_STORE_PRIMARY? I understand the composite config is for safe migration, but just curious how to define which one is primary.", "url": "https://github.com/linkedin/ambry/pull/1631#discussion_r497106146", "createdAt": "2020-09-29T22:45:35Z", "author": {"login": "SophieGuo410"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixFactory.java", "diffHunk": "@@ -69,10 +73,78 @@ public HelixManager getZkHelixManagerAndConnect(String clusterName, String insta\n     return manager;\n   }\n \n+  /**\n+   * @param clusterMapConfig the {@link ClusterMapConfig} to use.\n+   * @param zkAddr the ZooKeeper address to connect to. If a {@link HelixManager} is required and one is already in the\n+   *               pool with this address, it will be reused.\n+   * @param metrics the {@link DataNodeConfigSourceMetrics} to use.\n+   * @return either a new instance of {@link DataNodeConfigSource} with the supplied configuration, or one from the pool\n+   *         if there is already one created for this address.\n+   */\n+  public DataNodeConfigSource getDataNodeConfigSource(ClusterMapConfig clusterMapConfig, String zkAddr,\n+      DataNodeConfigSourceMetrics metrics) {\n+    return dataNodeConfigSources.computeIfAbsent(zkAddr,\n+        k -> buildDataNodeConfigSource(clusterMapConfig, zkAddr, metrics));\n+  }\n+\n+  /**\n+   * Construct a new instance of {@link HelixManager}. Exposed so that tests can override if needed.\n+   * @param clusterName the name of the cluster for the manager.\n+   * @param instanceName the name of the instance for the manager.\n+   * @param instanceType the {@link InstanceType} of the requester.\n+   * @param zkAddr the address identifying the zk service to which this request is to be made.\n+   * @return a new instance of {@link HelixManager}.\n+   */\n+  HelixManager buildZKHelixManager(String clusterName, String instanceName, InstanceType instanceType, String zkAddr) {\n+    return HelixManagerFactory.getZKHelixManager(clusterName, instanceName, instanceType, zkAddr);\n+  }\n+\n+  /**\n+   * @param clusterMapConfig the {@link ClusterMapConfig} to use.\n+   * @param zkAddr the ZooKeeper address to connect to. If a {@link HelixManager} is required and one is already in the\n+   *               pool with this address, it will be reused.\n+   * @param metrics the {@link DataNodeConfigSourceMetrics} to use.\n+   * @return a new instance of {@link DataNodeConfigSource} with the supplied configuration.\n+   */\n+  private DataNodeConfigSource buildDataNodeConfigSource(ClusterMapConfig clusterMapConfig, String zkAddr,\n+      DataNodeConfigSourceMetrics metrics) {\n+    try {\n+      InstanceConfigToDataNodeConfigAdapter instanceConfigSource = null;\n+      if (clusterMapConfig.clusterMapDataNodeConfigSourceType.isInstanceConfigAware()) {\n+        instanceConfigSource = new InstanceConfigToDataNodeConfigAdapter(\n+            getZkHelixManagerAndConnect(clusterMapConfig.clusterMapClusterName,\n+                ClusterMapUtils.getInstanceName(clusterMapConfig.clusterMapHostName, clusterMapConfig.clusterMapPort),\n+                InstanceType.SPECTATOR, zkAddr), clusterMapConfig);\n+      }\n+      PropertyStoreToDataNodeConfigAdapter propertyStoreSource = null;\n+      if (clusterMapConfig.clusterMapDataNodeConfigSourceType.isPropertyStoreAware()) {\n+        propertyStoreSource = new PropertyStoreToDataNodeConfigAdapter(zkAddr, clusterMapConfig);\n+      }\n+\n+      switch (clusterMapConfig.clusterMapDataNodeConfigSourceType) {\n+        case INSTANCE_CONFIG:\n+          return instanceConfigSource;\n+        case PROPERTY_STORE:\n+          return propertyStoreSource;\n+        case COMPOSITE_INSTANCE_CONFIG_PRIMARY:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b7a599b5bdf00b1e8c973f7162d11b006011f0"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzExNzYyNg==", "bodyText": "what's this close method for? Does the helixManager needs to be disconnected here?", "url": "https://github.com/linkedin/ambry/pull/1631#discussion_r497117626", "createdAt": "2020-09-29T23:00:46Z", "author": {"login": "SophieGuo410"}, "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/InstanceConfigToDataNodeConfigAdapter.java", "diffHunk": "@@ -75,6 +75,10 @@ public DataNodeConfig get(String instanceName) {\n     return instanceConfig != null ? converter.convert(instanceConfig) : null;\n   }\n \n+  @Override\n+  public void close() {\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b7a599b5bdf00b1e8c973f7162d11b006011f0"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDAxMDMz", "url": "https://github.com/linkedin/ambry/pull/1631#pullrequestreview-499001033", "createdAt": "2020-09-29T23:52:26Z", "commit": {"oid": "94b7a599b5bdf00b1e8c973f7162d11b006011f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1269, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}