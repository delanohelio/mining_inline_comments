{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MDI2OTc1", "number": 1586, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNDozMTo1MFrOENrdgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDozMjo0OFrOEOeuLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzc5MDA5OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/store/Store.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNDozMTo1MFrOGwbHPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTowMzo0MlrOGw13uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyOTA1Mw==", "bodyText": "If this method and approach is acceptable, we no longer need findKey() to be a public method, and hence it can be removed from the interface.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r453429053", "createdAt": "2020-07-13T04:31:50Z", "author": {"login": "ankagrawal"}, "path": "ambry-api/src/main/java/com/github/ambry/store/Store.java", "diffHunk": "@@ -102,6 +103,16 @@\n    */\n   MessageInfo findKey(StoreKey key) throws StoreException;\n \n+  /**\n+   * Return a {@link Map} of {@code storeKeys} to {@link MessageInfo} of the keys.\n+   * This method will only be used in replication thread, and the map returned will contain message infos for only those\n+   * keys that are found in the local store.\n+   * @param storeKeys The list of keys for which to return {@link MessageInfo}s.\n+   * @return The {@link Map} of key to {@link MessageInfo}.\n+   * @throws StoreException\n+   */\n+  Map<StoreKey, MessageInfo> findKeys(List<? extends StoreKey> storeKeys) throws StoreException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15229e1412ca8598adf0b0b0faba3faa9dc2ad2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNTQ5Mw==", "bodyText": "Yes, I would remove it.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r453835493", "createdAt": "2020-07-13T18:08:33Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/store/Store.java", "diffHunk": "@@ -102,6 +103,16 @@\n    */\n   MessageInfo findKey(StoreKey key) throws StoreException;\n \n+  /**\n+   * Return a {@link Map} of {@code storeKeys} to {@link MessageInfo} of the keys.\n+   * This method will only be used in replication thread, and the map returned will contain message infos for only those\n+   * keys that are found in the local store.\n+   * @param storeKeys The list of keys for which to return {@link MessageInfo}s.\n+   * @return The {@link Map} of key to {@link MessageInfo}.\n+   * @throws StoreException\n+   */\n+  Map<StoreKey, MessageInfo> findKeys(List<? extends StoreKey> storeKeys) throws StoreException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyOTA1Mw=="}, "originalCommit": {"oid": "b15229e1412ca8598adf0b0b0faba3faa9dc2ad2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2NzQ0OA==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r453867448", "createdAt": "2020-07-13T19:03:42Z", "author": {"login": "ankagrawal"}, "path": "ambry-api/src/main/java/com/github/ambry/store/Store.java", "diffHunk": "@@ -102,6 +103,16 @@\n    */\n   MessageInfo findKey(StoreKey key) throws StoreException;\n \n+  /**\n+   * Return a {@link Map} of {@code storeKeys} to {@link MessageInfo} of the keys.\n+   * This method will only be used in replication thread, and the map returned will contain message infos for only those\n+   * keys that are found in the local store.\n+   * @param storeKeys The list of keys for which to return {@link MessageInfo}s.\n+   * @return The {@link Map} of key to {@link MessageInfo}.\n+   * @throws StoreException\n+   */\n+  Map<StoreKey, MessageInfo> findKeys(List<? extends StoreKey> storeKeys) throws StoreException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyOTA1Mw=="}, "originalCommit": {"oid": "b15229e1412ca8598adf0b0b0faba3faa9dc2ad2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzgwMTgzOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNDo0MDowM1rOGwbN7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNDo0MDowM1rOGwbN7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQzMDc2Nw==", "bodyText": "TODO: Need to look into the possibility if its more efficient to not call findKey() multiple times in a loop, and instead search the index once for all the blobs in the list. Will do so in a separate ticket. For now,  calling findKey() multiple times in a loop is no worse than what was happening before for the case of BlobStore.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r453430767", "createdAt": "2020-07-13T04:40:03Z", "author": {"login": "ankagrawal"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -934,6 +934,19 @@ public MessageInfo findKey(StoreKey key) throws StoreException {\n     }\n   }\n \n+  @Override\n+  public Map<StoreKey, MessageInfo> findKeys(List<? extends StoreKey> storeKeys) {\n+    Map<StoreKey, MessageInfo> messageInfoMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15229e1412ca8598adf0b0b0faba3faa9dc2ad2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDM5NjI2OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzo1ODo0MFrOGwzkwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoyNDoyN1rOGw0d-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyOTgyNQ==", "bodyText": "Formatting: space after if.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r453829825", "createdAt": "2020-07-13T17:58:40Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -880,10 +881,20 @@ void processReplicaMetadataResponse(Set<MessageInfo> missingRemoteStoreMessages,\n         // it is deleted in the remote store and not deleted yet locally.\n \n         // if the blob is from deprecated container, then nothing needs to be done.\n-        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(messageInfo)) {\n+        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(\n+            messageInfo)) {\n           continue;\n         }\n-        applyUpdatesToBlobInLocalStore(messageInfo, remoteReplicaInfo, localKey);\n+        if(localMessageInfoMap == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15229e1412ca8598adf0b0b0faba3faa9dc2ad2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNDY0MA==", "bodyText": "Also, is there a reason to call this inside the for loop rather than up front?", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r453834640", "createdAt": "2020-07-13T18:07:01Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -880,10 +881,20 @@ void processReplicaMetadataResponse(Set<MessageInfo> missingRemoteStoreMessages,\n         // it is deleted in the remote store and not deleted yet locally.\n \n         // if the blob is from deprecated container, then nothing needs to be done.\n-        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(messageInfo)) {\n+        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(\n+            messageInfo)) {\n           continue;\n         }\n-        applyUpdatesToBlobInLocalStore(messageInfo, remoteReplicaInfo, localKey);\n+        if(localMessageInfoMap == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyOTgyNQ=="}, "originalCommit": {"oid": "b15229e1412ca8598adf0b0b0faba3faa9dc2ad2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0NDQ3NA==", "bodyText": "Yes.. as mentioned in the comments, for those replication loops, where all the remote messages are missing from local store, we don't really need the overhead to try to find all the keys. Hence I am doing this only when we run into a case that necessitates a findKey call.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r453844474", "createdAt": "2020-07-13T18:24:27Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -880,10 +881,20 @@ void processReplicaMetadataResponse(Set<MessageInfo> missingRemoteStoreMessages,\n         // it is deleted in the remote store and not deleted yet locally.\n \n         // if the blob is from deprecated container, then nothing needs to be done.\n-        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(messageInfo)) {\n+        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(\n+            messageInfo)) {\n           continue;\n         }\n-        applyUpdatesToBlobInLocalStore(messageInfo, remoteReplicaInfo, localKey);\n+        if(localMessageInfoMap == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyOTgyNQ=="}, "originalCommit": {"oid": "b15229e1412ca8598adf0b0b0faba3faa9dc2ad2"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQwNTg1OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowMToyNlrOGwzq0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMzoxOFrOGw0zvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMTM3Ng==", "bodyText": "Formatting looks off.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r453831376", "createdAt": "2020-07-13T18:01:26Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -880,10 +881,20 @@ void processReplicaMetadataResponse(Set<MessageInfo> missingRemoteStoreMessages,\n         // it is deleted in the remote store and not deleted yet locally.\n \n         // if the blob is from deprecated container, then nothing needs to be done.\n-        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(messageInfo)) {\n+        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(\n+            messageInfo)) {\n           continue;\n         }\n-        applyUpdatesToBlobInLocalStore(messageInfo, remoteReplicaInfo, localKey);\n+        if(localMessageInfoMap == null) {\n+          // This makes sure that the potentially expensive findKeys() method isn't called for a replication loop, if\n+          // all the keys being processed are missing in local store.\n+          localMessageInfoMap = remoteReplicaInfo.getLocalStore()\n+              .findKeys(messageInfoList.stream()\n+                  .map(msgInfo -> (BlobId) remoteKeyToLocalKeyMap.get(msgInfo.getStoreKey()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15229e1412ca8598adf0b0b0faba3faa9dc2ad2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MDA0NQ==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r453850045", "createdAt": "2020-07-13T18:33:18Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -880,10 +881,20 @@ void processReplicaMetadataResponse(Set<MessageInfo> missingRemoteStoreMessages,\n         // it is deleted in the remote store and not deleted yet locally.\n \n         // if the blob is from deprecated container, then nothing needs to be done.\n-        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(messageInfo)) {\n+        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(\n+            messageInfo)) {\n           continue;\n         }\n-        applyUpdatesToBlobInLocalStore(messageInfo, remoteReplicaInfo, localKey);\n+        if(localMessageInfoMap == null) {\n+          // This makes sure that the potentially expensive findKeys() method isn't called for a replication loop, if\n+          // all the keys being processed are missing in local store.\n+          localMessageInfoMap = remoteReplicaInfo.getLocalStore()\n+              .findKeys(messageInfoList.stream()\n+                  .map(msgInfo -> (BlobId) remoteKeyToLocalKeyMap.get(msgInfo.getStoreKey()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMTM3Ng=="}, "originalCommit": {"oid": "b15229e1412ca8598adf0b0b0faba3faa9dc2ad2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQxMjQ3OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowMzowNFrOGwzuxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoyNzo0OVrOGw0l-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMjM4OA==", "bodyText": "I would move this check to the calling method, and just do Objects.assertNonNull() here.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r453832388", "createdAt": "2020-07-13T18:03:04Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -900,11 +911,14 @@ void processReplicaMetadataResponse(Set<MessageInfo> missingRemoteStoreMessages,\n    * @param messageInfo message information of the blob from remote replica\n    * @param remoteReplicaInfo remote replica information\n    * @param localKey local blob information\n+   * @param localMessageInfo message information of the blob from the local replica\n    * @throws StoreException\n    */\n   public void applyUpdatesToBlobInLocalStore(MessageInfo messageInfo, RemoteReplicaInfo remoteReplicaInfo,\n-      BlobId localKey) throws StoreException {\n-    MessageInfo localMessageInfo = remoteReplicaInfo.getLocalStore().findKey(localKey);\n+      BlobId localKey, MessageInfo localMessageInfo) throws StoreException {\n+    if (localMessageInfo == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15229e1412ca8598adf0b0b0faba3faa9dc2ad2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0NjUyMQ==", "bodyText": "I moved it inside the method so that I don't have to do this check at multiple places where this method is called. Let me know if you think its ok to have this check in each caller.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r453846521", "createdAt": "2020-07-13T18:27:49Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -900,11 +911,14 @@ void processReplicaMetadataResponse(Set<MessageInfo> missingRemoteStoreMessages,\n    * @param messageInfo message information of the blob from remote replica\n    * @param remoteReplicaInfo remote replica information\n    * @param localKey local blob information\n+   * @param localMessageInfo message information of the blob from the local replica\n    * @throws StoreException\n    */\n   public void applyUpdatesToBlobInLocalStore(MessageInfo messageInfo, RemoteReplicaInfo remoteReplicaInfo,\n-      BlobId localKey) throws StoreException {\n-    MessageInfo localMessageInfo = remoteReplicaInfo.getLocalStore().findKey(localKey);\n+      BlobId localKey, MessageInfo localMessageInfo) throws StoreException {\n+    if (localMessageInfo == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMjM4OA=="}, "originalCommit": {"oid": "b15229e1412ca8598adf0b0b0faba3faa9dc2ad2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYzMDUyOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo0OTozN1rOGw-ywQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozMDoxNVrOGxmEIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMzYzMw==", "bodyText": "not all exception means not_found from findKey, please print out the exception as well.\nAlso, we should use error here.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r454013633", "createdAt": "2020-07-13T23:49:37Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -934,6 +939,21 @@ public MessageInfo findKey(StoreKey key) throws StoreException {\n     }\n   }\n \n+  @Override\n+  public Map<StoreKey, MessageInfo> findKeys(List<? extends StoreKey> storeKeys) {\n+    Map<StoreKey, MessageInfo> messageInfoMap = new HashMap<>();\n+    for (StoreKey storeKey : storeKeys) {\n+      try {\n+        // TODO: Need to look into the possibility if its more efficient to not call findKey() multiple times in a loop,\n+        // and instead search the index once for all the blobs in the list.\n+        messageInfoMap.put(storeKey, findKey(storeKey));\n+      } catch (StoreException stEx) {\n+        logger.info(\"Key %s not found in findKey\", storeKey.getID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a53f2eeae5fc602fb1d12bed4a7c742b6f89bc67"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzA1OQ==", "bodyText": "True. I have changed the code to throw the errors from findKey() as is, after logging.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r454657059", "createdAt": "2020-07-14T21:30:15Z", "author": {"login": "ankagrawal"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -934,6 +939,21 @@ public MessageInfo findKey(StoreKey key) throws StoreException {\n     }\n   }\n \n+  @Override\n+  public Map<StoreKey, MessageInfo> findKeys(List<? extends StoreKey> storeKeys) {\n+    Map<StoreKey, MessageInfo> messageInfoMap = new HashMap<>();\n+    for (StoreKey storeKey : storeKeys) {\n+      try {\n+        // TODO: Need to look into the possibility if its more efficient to not call findKey() multiple times in a loop,\n+        // and instead search the index once for all the blobs in the list.\n+        messageInfoMap.put(storeKey, findKey(storeKey));\n+      } catch (StoreException stEx) {\n+        logger.info(\"Key %s not found in findKey\", storeKey.getID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMzYzMw=="}, "originalCommit": {"oid": "a53f2eeae5fc602fb1d12bed4a7c742b6f89bc67"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYzOTM0OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo1NDoxNlrOGw-38Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMToyODo1MFrOGxmBbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDk2MQ==", "bodyText": "we can filter out those keys we already know that are now now in local store.\nmessageInfoList.stream().filter(messageInfo -> !missingRemoteStoreMessage.contains(messageInfo)).", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r454014961", "createdAt": "2020-07-13T23:54:16Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -880,10 +881,20 @@ void processReplicaMetadataResponse(Set<MessageInfo> missingRemoteStoreMessages,\n         // it is deleted in the remote store and not deleted yet locally.\n \n         // if the blob is from deprecated container, then nothing needs to be done.\n-        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(messageInfo)) {\n+        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(\n+            messageInfo)) {\n           continue;\n         }\n-        applyUpdatesToBlobInLocalStore(messageInfo, remoteReplicaInfo, localKey);\n+        if (localMessageInfoMap == null) {\n+          // This makes sure that the potentially expensive findKeys() method isn't called for a replication loop, if\n+          // all the keys being processed are missing in local store.\n+          localMessageInfoMap = remoteReplicaInfo.getLocalStore()\n+              .findKeys(messageInfoList.stream()\n+                  .map(msgInfo -> (BlobId) remoteKeyToLocalKeyMap.get(msgInfo.getStoreKey()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a53f2eeae5fc602fb1d12bed4a7c742b6f89bc67"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NjM2Ng==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r454656366", "createdAt": "2020-07-14T21:28:50Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -880,10 +881,20 @@ void processReplicaMetadataResponse(Set<MessageInfo> missingRemoteStoreMessages,\n         // it is deleted in the remote store and not deleted yet locally.\n \n         // if the blob is from deprecated container, then nothing needs to be done.\n-        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(messageInfo)) {\n+        if (replicationConfig.replicationContainerDeletionEnabled && skipPredicate != null && skipPredicate.test(\n+            messageInfo)) {\n           continue;\n         }\n-        applyUpdatesToBlobInLocalStore(messageInfo, remoteReplicaInfo, localKey);\n+        if (localMessageInfoMap == null) {\n+          // This makes sure that the potentially expensive findKeys() method isn't called for a replication loop, if\n+          // all the keys being processed are missing in local store.\n+          localMessageInfoMap = remoteReplicaInfo.getLocalStore()\n+              .findKeys(messageInfoList.stream()\n+                  .map(msgInfo -> (BlobId) remoteKeyToLocalKeyMap.get(msgInfo.getStoreKey()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDk2MQ=="}, "originalCommit": {"oid": "a53f2eeae5fc602fb1d12bed4a7c742b6f89bc67"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTgyNDkxOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo1MTozNVrOGxmqnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzo1OToxOFrOGxtV0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2NjkxMQ==", "bodyText": "This method doesn't throw out StoreException.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r454666911", "createdAt": "2020-07-14T21:51:35Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -940,15 +940,15 @@ public MessageInfo findKey(StoreKey key) throws StoreException {\n   }\n \n   @Override\n-  public Map<StoreKey, MessageInfo> findKeys(List<? extends StoreKey> storeKeys) {\n+  public Map<StoreKey, MessageInfo> findKeys(List<? extends StoreKey> storeKeys) throws StoreException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9e55e1b47ac0af058f0b0f416d766e060ad5ac"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3NjI3NA==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r454776274", "createdAt": "2020-07-15T03:59:18Z", "author": {"login": "ankagrawal"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -940,15 +940,15 @@ public MessageInfo findKey(StoreKey key) throws StoreException {\n   }\n \n   @Override\n-  public Map<StoreKey, MessageInfo> findKeys(List<? extends StoreKey> storeKeys) {\n+  public Map<StoreKey, MessageInfo> findKeys(List<? extends StoreKey> storeKeys) throws StoreException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2NjkxMQ=="}, "originalCommit": {"oid": "2b9e55e1b47ac0af058f0b0f416d766e060ad5ac"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjE4ODYyOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDozMjo0OFrOGxp_Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzowMjowMlrOGyHGZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyMTM1NA==", "bodyText": "if we are throwing exception here, then we don't need the try-catch statement.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r454721354", "createdAt": "2020-07-15T00:32:48Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -949,6 +949,7 @@ public MessageInfo findKey(StoreKey key) throws StoreException {\n         messageInfoMap.put(storeKey, findKey(storeKey));\n       } catch (StoreException e) {\n         logger.error(\"findKey failed for key {} with reason {}\", storeKey.getID(), e.getErrorCode().toString());\n+        throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9cc6e0a07af504f6f923941166f87711a6e5e77"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3Njk5Mw==", "bodyText": "The reason for try-catch here is because I want to log a meaningful message with the key that resulted in exception. The exception shouldn't be thrown often here, hence I thought it might be a good idea to log it here to help with quick debugging, and it will not result in any performance issues.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r454776993", "createdAt": "2020-07-15T04:01:59Z", "author": {"login": "ankagrawal"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -949,6 +949,7 @@ public MessageInfo findKey(StoreKey key) throws StoreException {\n         messageInfoMap.put(storeKey, findKey(storeKey));\n       } catch (StoreException e) {\n         logger.error(\"findKey failed for key {} with reason {}\", storeKey.getID(), e.getErrorCode().toString());\n+        throw e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyMTM1NA=="}, "originalCommit": {"oid": "a9cc6e0a07af504f6f923941166f87711a6e5e77"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE5ODMxMQ==", "bodyText": "I am good with that.", "url": "https://github.com/linkedin/ambry/pull/1586#discussion_r455198311", "createdAt": "2020-07-15T17:02:02Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -949,6 +949,7 @@ public MessageInfo findKey(StoreKey key) throws StoreException {\n         messageInfoMap.put(storeKey, findKey(storeKey));\n       } catch (StoreException e) {\n         logger.error(\"findKey failed for key {} with reason {}\", storeKey.getID(), e.getErrorCode().toString());\n+        throw e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyMTM1NA=="}, "originalCommit": {"oid": "a9cc6e0a07af504f6f923941166f87711a6e5e77"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1312, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}