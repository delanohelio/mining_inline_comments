{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExOTgzOTU0", "number": 1679, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDo1NzozOFrOE0qJrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToyMzo1NVrOE0qYWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjUyMDE0OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDo1NzozOFrOHsgSUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjoyODo0MVrOHshfyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyODM3MQ==", "bodyText": "Shouldn't this be in AzureCloudConfig?", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516428371", "createdAt": "2020-11-03T04:57:38Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0ODIwMA==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516448200", "createdAt": "2020-11-03T06:28:41Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyODM3MQ=="}, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjUyMjE1OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDo1OToxOVrOHsgTeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjozMDo0OFrOHshh5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyODY2Ng==", "bodyText": "Minor: can combine last two lines if not using future for anything else.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516428666", "createdAt": "2020-11-03T04:59:19Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";\n+\n+  @Override\n+  protected BlobServiceClient buildBlobServiceClient(HttpClient httpClient, Configuration configuration,\n+      RequestRetryOptions retryOptions, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    IAuthenticationResult iAuthenticationResult = getAccessTokenByClientCredentialGrant(azureCloudConfig);\n+    return new BlobServiceClientBuilder().credential(new TokenCredential() {\n+      @Override\n+      public Mono<AccessToken> getToken(TokenRequestContext request) {\n+        return Mono.just(new AccessToken(iAuthenticationResult.accessToken(),\n+            iAuthenticationResult.expiresOnDate().toInstant().atOffset(OffsetDateTime.now().getOffset())));\n+      }\n+    })\n+        .endpoint(azureCloudConfig.azureStorageEndpoint)\n+        .httpClient(httpClient)\n+        .retryOptions(retryOptions)\n+        .configuration(configuration)\n+        .buildClient();\n+  }\n+\n+  @Override\n+  protected void validateABSAuthConfigs(AzureCloudConfig azureCloudConfig) {\n+    if (azureCloudConfig.azureStorageAuthority.isEmpty() || azureCloudConfig.azureStorageClientId.isEmpty()\n+        || azureCloudConfig.azureStorageSecret.isEmpty() || azureCloudConfig.azureStorageEndpoint.isEmpty()) {\n+      throw new IllegalArgumentException(String.format(\"One of the required configs %s, %s, %s, %s is missing\",\n+          AzureCloudConfig.AZURE_STORAGE_AUTHORITY, AzureCloudConfig.AZURE_STORAGE_CLIENTID,\n+          AzureCloudConfig.AZURE_STORAGE_ENDPOINT, AzureCloudConfig.AZURE_STORAGE_SECRET));\n+    }\n+  }\n+\n+  /**\n+   * Create {@link IAuthenticationResult} using the app details.\n+   * @param azureCloudConfig {@link AzureCloudConfig} object.\n+   * @return {@link IAuthenticationResult} containing the access token.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   */\n+  private IAuthenticationResult getAccessTokenByClientCredentialGrant(AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    ConfidentialClientApplication app = ConfidentialClientApplication.builder(azureCloudConfig.azureStorageClientId,\n+        ClientCredentialFactory.createFromSecret(azureCloudConfig.azureStorageSecret))\n+        .authority(azureCloudConfig.azureStorageAuthority)\n+        .build();\n+    ClientCredentialParameters clientCredentialParam =\n+        ClientCredentialParameters.builder(Collections.singleton(AZURE_STORAGE_ACCESS_SCOPE)).build();\n+    CompletableFuture<IAuthenticationResult> future = app.acquireToken(clientCredentialParam);\n+    return future.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0ODc0Mw==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516448743", "createdAt": "2020-11-03T06:30:48Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";\n+\n+  @Override\n+  protected BlobServiceClient buildBlobServiceClient(HttpClient httpClient, Configuration configuration,\n+      RequestRetryOptions retryOptions, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    IAuthenticationResult iAuthenticationResult = getAccessTokenByClientCredentialGrant(azureCloudConfig);\n+    return new BlobServiceClientBuilder().credential(new TokenCredential() {\n+      @Override\n+      public Mono<AccessToken> getToken(TokenRequestContext request) {\n+        return Mono.just(new AccessToken(iAuthenticationResult.accessToken(),\n+            iAuthenticationResult.expiresOnDate().toInstant().atOffset(OffsetDateTime.now().getOffset())));\n+      }\n+    })\n+        .endpoint(azureCloudConfig.azureStorageEndpoint)\n+        .httpClient(httpClient)\n+        .retryOptions(retryOptions)\n+        .configuration(configuration)\n+        .buildClient();\n+  }\n+\n+  @Override\n+  protected void validateABSAuthConfigs(AzureCloudConfig azureCloudConfig) {\n+    if (azureCloudConfig.azureStorageAuthority.isEmpty() || azureCloudConfig.azureStorageClientId.isEmpty()\n+        || azureCloudConfig.azureStorageSecret.isEmpty() || azureCloudConfig.azureStorageEndpoint.isEmpty()) {\n+      throw new IllegalArgumentException(String.format(\"One of the required configs %s, %s, %s, %s is missing\",\n+          AzureCloudConfig.AZURE_STORAGE_AUTHORITY, AzureCloudConfig.AZURE_STORAGE_CLIENTID,\n+          AzureCloudConfig.AZURE_STORAGE_ENDPOINT, AzureCloudConfig.AZURE_STORAGE_SECRET));\n+    }\n+  }\n+\n+  /**\n+   * Create {@link IAuthenticationResult} using the app details.\n+   * @param azureCloudConfig {@link AzureCloudConfig} object.\n+   * @return {@link IAuthenticationResult} containing the access token.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   */\n+  private IAuthenticationResult getAccessTokenByClientCredentialGrant(AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    ConfidentialClientApplication app = ConfidentialClientApplication.builder(azureCloudConfig.azureStorageClientId,\n+        ClientCredentialFactory.createFromSecret(azureCloudConfig.azureStorageSecret))\n+        .authority(azureCloudConfig.azureStorageAuthority)\n+        .build();\n+    ClientCredentialParameters clientCredentialParam =\n+        ClientCredentialParameters.builder(Collections.singleton(AZURE_STORAGE_ACCESS_SCOPE)).build();\n+    CompletableFuture<IAuthenticationResult> future = app.acquireToken(clientCredentialParam);\n+    return future.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyODY2Ng=="}, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjUyNzE3OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTowMjo1NFrOHsgWMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjozMDowNFrOHshhLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyOTM2Mg==", "bodyText": "Minor: it will be easier to read if you split the credential construction into its own line.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516429362", "createdAt": "2020-11-03T05:02:54Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";\n+\n+  @Override\n+  protected BlobServiceClient buildBlobServiceClient(HttpClient httpClient, Configuration configuration,\n+      RequestRetryOptions retryOptions, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    IAuthenticationResult iAuthenticationResult = getAccessTokenByClientCredentialGrant(azureCloudConfig);\n+    return new BlobServiceClientBuilder().credential(new TokenCredential() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0ODU1Ng==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516448556", "createdAt": "2020-11-03T06:30:04Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";\n+\n+  @Override\n+  protected BlobServiceClient buildBlobServiceClient(HttpClient httpClient, Configuration configuration,\n+      RequestRetryOptions retryOptions, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    IAuthenticationResult iAuthenticationResult = getAccessTokenByClientCredentialGrant(azureCloudConfig);\n+    return new BlobServiceClientBuilder().credential(new TokenCredential() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyOTM2Mg=="}, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjUzODQ4OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToxMDoyN1rOHsgcXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjozMTozMVrOHshiyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDk0MA==", "bodyText": "Duplicate line", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516430940", "createdAt": "2020-11-03T05:10:27Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java", "diffHunk": "@@ -83,31 +78,30 @@\n    * @param azureCloudConfig the {@link AzureCloudConfig} to use.\n    * @param blobLayoutStrategy the {@link AzureBlobLayoutStrategy} to use.\n    * @param azureMetrics the {@link AzureMetrics} to use.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws ReflectiveOperationException\n+   * @throws ReflectiveOperationException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0ODk2OA==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516448968", "createdAt": "2020-11-03T06:31:31Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java", "diffHunk": "@@ -83,31 +78,30 @@\n    * @param azureCloudConfig the {@link AzureCloudConfig} to use.\n    * @param blobLayoutStrategy the {@link AzureBlobLayoutStrategy} to use.\n    * @param azureMetrics the {@link AzureMetrics} to use.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws ReflectiveOperationException\n+   * @throws ReflectiveOperationException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDk0MA=="}, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjU1MTE1OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/StorageClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToxOToxNVrOHsgjRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo0NjoyMlrOHshygw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMjcxMA==", "bodyText": "Rather than introducing several new checked exceptions that AzureBlobDataAccessor needs to know about, can we catch and rethrow as IllegalStateException similar to AzureCloudDestinationFactory.getCloudDestination()?", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516432710", "createdAt": "2020-11-03T05:19:15Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/StorageClientFactory.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020  LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.azure.storage.common.policy.RetryPolicyType;\n+import com.github.ambry.config.CloudConfig;\n+import com.microsoft.azure.cosmosdb.RetryOptions;\n+import java.net.InetSocketAddress;\n+import java.net.MalformedURLException;\n+import java.util.concurrent.ExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A factory class to create {@link BlobServiceClient} object.\n+ */\n+public abstract class StorageClientFactory {\n+  Logger logger = LoggerFactory.getLogger(StorageClientFactory.class);\n+\n+  /**\n+   * Create the {@link BlobServiceClient} object.\n+   * @param {@link CloudConfig} object.\n+   * @param {@link AzureCloudConfig} object.\n+   * @return {@link BlobServiceClient} object.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   */\n+  public BlobServiceClient createBlobStorageClient(CloudConfig cloudConfig, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1Mjk5NQ==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516452995", "createdAt": "2020-11-03T06:46:22Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/StorageClientFactory.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020  LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.azure.storage.common.policy.RetryPolicyType;\n+import com.github.ambry.config.CloudConfig;\n+import com.microsoft.azure.cosmosdb.RetryOptions;\n+import java.net.InetSocketAddress;\n+import java.net.MalformedURLException;\n+import java.util.concurrent.ExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A factory class to create {@link BlobServiceClient} object.\n+ */\n+public abstract class StorageClientFactory {\n+  Logger logger = LoggerFactory.getLogger(StorageClientFactory.class);\n+\n+  /**\n+   * Create the {@link BlobServiceClient} object.\n+   * @param {@link CloudConfig} object.\n+   * @param {@link AzureCloudConfig} object.\n+   * @return {@link BlobServiceClient} object.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   */\n+  public BlobServiceClient createBlobStorageClient(CloudConfig cloudConfig, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMjcxMA=="}, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjU1NzcwOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/test/java/com/github/ambry/cloud/azure/AzureBlobDataAccessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToyMzo1NVrOHsgmzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo0ODoyNFrOHsh0nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMzYxNQ==", "bodyText": "Was there a reason to move this method?  My understanding is public methods go before package private ones.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516433615", "createdAt": "2020-11-03T05:23:55Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/test/java/com/github/ambry/cloud/azure/AzureBlobDataAccessorTest.java", "diffHunk": "@@ -96,10 +81,26 @@ static BlockBlobClient setupMockBlobClient(BlobServiceClient mockServiceClient)\n     lenient().when(mockBlobProperties.getMetadata()).thenReturn(metadataMap);\n     Response<BlobProperties> mockPropertiesResponse = mock(Response.class);\n     lenient().when(mockPropertiesResponse.getValue()).thenReturn(mockBlobProperties);\n-    lenient().when(mockBlockBlobClient.getPropertiesWithResponse(any(), any(), any())).thenReturn(mockPropertiesResponse);\n+    lenient().when(mockBlockBlobClient.getPropertiesWithResponse(any(), any(), any()))\n+        .thenReturn(mockPropertiesResponse);\n     return mockBlockBlobClient;\n   }\n \n+  @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MzUzMg==", "bodyText": "fixed it. This was the job of Intellij's code reformatter.", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516453532", "createdAt": "2020-11-03T06:48:24Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/test/java/com/github/ambry/cloud/azure/AzureBlobDataAccessorTest.java", "diffHunk": "@@ -96,10 +81,26 @@ static BlockBlobClient setupMockBlobClient(BlobServiceClient mockServiceClient)\n     lenient().when(mockBlobProperties.getMetadata()).thenReturn(metadataMap);\n     Response<BlobProperties> mockPropertiesResponse = mock(Response.class);\n     lenient().when(mockPropertiesResponse.getValue()).thenReturn(mockBlobProperties);\n-    lenient().when(mockBlockBlobClient.getPropertiesWithResponse(any(), any(), any())).thenReturn(mockPropertiesResponse);\n+    lenient().when(mockBlockBlobClient.getPropertiesWithResponse(any(), any(), any()))\n+        .thenReturn(mockPropertiesResponse);\n     return mockBlockBlobClient;\n   }\n \n+  @Before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMzYxNQ=="}, "originalCommit": {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1104, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}