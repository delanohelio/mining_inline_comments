{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDI4MDE2", "number": 1475, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTowNDo1MVrODyowKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyNTo1OFrODypMCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDIzMDgwOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTowNDo1MVrOGGzQ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoyOTowMVrOGG1-jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NDUzOQ==", "bodyText": "I don't have much context of cloud but I am trying to understand the config cloudIsVcr, so there are two types of nodes related to Cloud. One is VCR, in my impression, it is supposed to replicate blobs from regular ambry server to Azure (correct me if I am wrong). What is the other type of cloud node?", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409784539", "createdAt": "2020-04-16T19:04:51Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "diffHunk": "@@ -79,6 +77,12 @@ public VcrReplicationManager(VerifiableProperties properties, CloudConfig cloudC\n     this.cloudStorageCompactor =\n         cloudConfig.cloudBlobCompactionEnabled ? new CloudStorageCompactor(cloudDestination, cloudConfig,\n             partitionToPartitionInfo.keySet(), vcrMetrics) : null;\n+    // We need a datacenter to replicate from. For DR, we currently deploy VCR nodes on same datacenter as ambry-server.\n+    // For serving data from cloud, we must specify the ambry-server datacenter(s) from which to replicate.\n+    if (!cloudConfig.cloudIsVcr && cloudConfig.vcrCrossColoReplicationPeerDatacenters.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4OTQ5MA==", "bodyText": "cloudIsVcr is used to tell the CloudBlobStore if it is being used by the VCR (true) or by the frontend (live serving).  VcrReplicationManager should never be created when isVcr = false", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409789490", "createdAt": "2020-04-16T19:13:57Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "diffHunk": "@@ -79,6 +77,12 @@ public VcrReplicationManager(VerifiableProperties properties, CloudConfig cloudC\n     this.cloudStorageCompactor =\n         cloudConfig.cloudBlobCompactionEnabled ? new CloudStorageCompactor(cloudDestination, cloudConfig,\n             partitionToPartitionInfo.keySet(), vcrMetrics) : null;\n+    // We need a datacenter to replicate from. For DR, we currently deploy VCR nodes on same datacenter as ambry-server.\n+    // For serving data from cloud, we must specify the ambry-server datacenter(s) from which to replicate.\n+    if (!cloudConfig.cloudIsVcr && cloudConfig.vcrCrossColoReplicationPeerDatacenters.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NDUzOQ=="}, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MjM4Ng==", "bodyText": "I see. Then, I have some difficulties understanding the cloudIsVcr being checked in VcrReplicationManager. I suppose it should be VCR already before instantiating the VcrReplicationManager.", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409792386", "createdAt": "2020-04-16T19:19:13Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "diffHunk": "@@ -79,6 +77,12 @@ public VcrReplicationManager(VerifiableProperties properties, CloudConfig cloudC\n     this.cloudStorageCompactor =\n         cloudConfig.cloudBlobCompactionEnabled ? new CloudStorageCompactor(cloudDestination, cloudConfig,\n             partitionToPartitionInfo.keySet(), vcrMetrics) : null;\n+    // We need a datacenter to replicate from. For DR, we currently deploy VCR nodes on same datacenter as ambry-server.\n+    // For serving data from cloud, we must specify the ambry-server datacenter(s) from which to replicate.\n+    if (!cloudConfig.cloudIsVcr && cloudConfig.vcrCrossColoReplicationPeerDatacenters.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NDUzOQ=="}, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyOTAwNg==", "bodyText": "I was under the wrong impression that cloudIsVcr would be true for all cases related to DR, and false otherwise (even though I now realize that comments in CloudBlobStore say so).\nSince thats not the case, I guess the suggestion to always use vcrSourceDatacenters (vcrCrossColoReplicationPeerDatacenters) to get the list of DCs to replicate from makes sense.\nI will make the required changes.", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409829006", "createdAt": "2020-04-16T20:29:01Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "diffHunk": "@@ -79,6 +77,12 @@ public VcrReplicationManager(VerifiableProperties properties, CloudConfig cloudC\n     this.cloudStorageCompactor =\n         cloudConfig.cloudBlobCompactionEnabled ? new CloudStorageCompactor(cloudDestination, cloudConfig,\n             partitionToPartitionInfo.keySet(), vcrMetrics) : null;\n+    // We need a datacenter to replicate from. For DR, we currently deploy VCR nodes on same datacenter as ambry-server.\n+    // For serving data from cloud, we must specify the ambry-server datacenter(s) from which to replicate.\n+    if (!cloudConfig.cloudIsVcr && cloudConfig.vcrCrossColoReplicationPeerDatacenters.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NDUzOQ=="}, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDI2ODcxOnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/CloudConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxNjoyNFrOGGzpQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoyOToxOFrOGG1_LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MDc4NA==", "bodyText": "This is very long.  How about VCR_SOURCE_DATACENTERS and a comment explaining it?", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409790784", "createdAt": "2020-04-16T19:16:24Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/config/CloudConfig.java", "diffHunk": "@@ -45,6 +50,7 @@\n   public static final String VCR_PROXY_HOST = \"vcr.proxy.host\";\n   public static final String VCR_PROXY_PORT = \"vcr.proxy.port\";\n   public static final String VCR_CLUSTER_SPECTATOR_FACTORY_CLASS = \"vcr.cluster.spectator.factory.class\";\n+  public static final String VCR_CROSS_COLO_REPLICATION_PEER_DATACENTERS = \"vcr.cross.colo.replication.peer.datacenter\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyOTE2NQ==", "bodyText": "sure.", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409829165", "createdAt": "2020-04-16T20:29:18Z", "author": {"login": "ankagrawal"}, "path": "ambry-api/src/main/java/com/github/ambry/config/CloudConfig.java", "diffHunk": "@@ -45,6 +50,7 @@\n   public static final String VCR_PROXY_HOST = \"vcr.proxy.host\";\n   public static final String VCR_PROXY_PORT = \"vcr.proxy.port\";\n   public static final String VCR_CLUSTER_SPECTATOR_FACTORY_CLASS = \"vcr.cluster.spectator.factory.class\";\n+  public static final String VCR_CROSS_COLO_REPLICATION_PEER_DATACENTERS = \"vcr.cross.colo.replication.peer.datacenter\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MDc4NA=="}, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDI3NTE4OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/CloudConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxODoxNFrOGGztPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoyOToyM1rOGG1_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MTgwNA==", "bodyText": "vcrSourceDataCenters", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409791804", "createdAt": "2020-04-16T19:18:14Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/config/CloudConfig.java", "diffHunk": "@@ -262,6 +268,13 @@\n   @Default(DEFAULT_VCR_CLUSTER_SPECTATOR_FACTORY_CLASS)\n   public final String vcrClusterSpectatorFactoryClass;\n \n+  /**\n+   * Comma separated set of datacenters which can act as peer for cross colo replication.\n+   */\n+  @Config(VCR_CROSS_COLO_REPLICATION_PEER_DATACENTERS)\n+  @Default(\"\")\n+  public final Set<String> vcrCrossColoReplicationPeerDatacenters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyOTIwMw==", "bodyText": "ok", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409829203", "createdAt": "2020-04-16T20:29:23Z", "author": {"login": "ankagrawal"}, "path": "ambry-api/src/main/java/com/github/ambry/config/CloudConfig.java", "diffHunk": "@@ -262,6 +268,13 @@\n   @Default(DEFAULT_VCR_CLUSTER_SPECTATOR_FACTORY_CLASS)\n   public final String vcrClusterSpectatorFactoryClass;\n \n+  /**\n+   * Comma separated set of datacenters which can act as peer for cross colo replication.\n+   */\n+  @Config(VCR_CROSS_COLO_REPLICATION_PEER_DATACENTERS)\n+  @Default(\"\")\n+  public final Set<String> vcrCrossColoReplicationPeerDatacenters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MTgwNA=="}, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDI4MjA3OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyMDowNFrOGGzxaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoyOTozNlrOGG1_qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5Mjg3NQ==", "bodyText": "If cloudIsVcr is false here, that alone would be an illegal state.", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409792875", "createdAt": "2020-04-16T19:20:04Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "diffHunk": "@@ -79,6 +77,12 @@ public VcrReplicationManager(VerifiableProperties properties, CloudConfig cloudC\n     this.cloudStorageCompactor =\n         cloudConfig.cloudBlobCompactionEnabled ? new CloudStorageCompactor(cloudDestination, cloudConfig,\n             partitionToPartitionInfo.keySet(), vcrMetrics) : null;\n+    // We need a datacenter to replicate from. For DR, we currently deploy VCR nodes on same datacenter as ambry-server.\n+    // For serving data from cloud, we must specify the ambry-server datacenter(s) from which to replicate.\n+    if (!cloudConfig.cloudIsVcr && cloudConfig.vcrCrossColoReplicationPeerDatacenters.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyOTI5MA==", "bodyText": "true", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409829290", "createdAt": "2020-04-16T20:29:36Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "diffHunk": "@@ -79,6 +77,12 @@ public VcrReplicationManager(VerifiableProperties properties, CloudConfig cloudC\n     this.cloudStorageCompactor =\n         cloudConfig.cloudBlobCompactionEnabled ? new CloudStorageCompactor(cloudDestination, cloudConfig,\n             partitionToPartitionInfo.keySet(), vcrMetrics) : null;\n+    // We need a datacenter to replicate from. For DR, we currently deploy VCR nodes on same datacenter as ambry-server.\n+    // For serving data from cloud, we must specify the ambry-server datacenter(s) from which to replicate.\n+    if (!cloudConfig.cloudIsVcr && cloudConfig.vcrCrossColoReplicationPeerDatacenters.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5Mjg3NQ=="}, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDI4ODA2OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyMTo1MlrOGGz1Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoyOTo0MlrOGG1_6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5Mzg2Mg==", "bodyText": "Simplify to \"One or more VCR cross colo replication peer datacenter should be specified\"", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409793862", "createdAt": "2020-04-16T19:21:52Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "diffHunk": "@@ -79,6 +77,12 @@ public VcrReplicationManager(VerifiableProperties properties, CloudConfig cloudC\n     this.cloudStorageCompactor =\n         cloudConfig.cloudBlobCompactionEnabled ? new CloudStorageCompactor(cloudDestination, cloudConfig,\n             partitionToPartitionInfo.keySet(), vcrMetrics) : null;\n+    // We need a datacenter to replicate from. For DR, we currently deploy VCR nodes on same datacenter as ambry-server.\n+    // For serving data from cloud, we must specify the ambry-server datacenter(s) from which to replicate.\n+    if (!cloudConfig.cloudIsVcr && cloudConfig.vcrCrossColoReplicationPeerDatacenters.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"Either this should be a vcr replicator OR one or more vcr cross colo replication peer datacenter should be specified\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyOTM1NA==", "bodyText": "ok", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409829354", "createdAt": "2020-04-16T20:29:42Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "diffHunk": "@@ -79,6 +77,12 @@ public VcrReplicationManager(VerifiableProperties properties, CloudConfig cloudC\n     this.cloudStorageCompactor =\n         cloudConfig.cloudBlobCompactionEnabled ? new CloudStorageCompactor(cloudDestination, cloudConfig,\n             partitionToPartitionInfo.keySet(), vcrMetrics) : null;\n+    // We need a datacenter to replicate from. For DR, we currently deploy VCR nodes on same datacenter as ambry-server.\n+    // For serving data from cloud, we must specify the ambry-server datacenter(s) from which to replicate.\n+    if (!cloudConfig.cloudIsVcr && cloudConfig.vcrCrossColoReplicationPeerDatacenters.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"Either this should be a vcr replicator OR one or more vcr cross colo replication peer datacenter should be specified\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5Mzg2Mg=="}, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDMwMjE3OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyNTo1OFrOGGz-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDozMTo1MVrOGG2EcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NjEwNA==", "bodyText": "cloudIsVcr will be true in both cases.  Perhaps it's time to add another config property like isBackup?\nBut I think we can use the new logic for both scenarios, and update the DR config to tell it which DC to use.", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409796104", "createdAt": "2020-04-16T19:25:58Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "diffHunk": "@@ -236,4 +240,18 @@ public long getRemoteReplicaLagFromLocalInBytes(PartitionId partitionId, String\n     // TODO get replica lag from cosmos?\n     return -1;\n   }\n+\n+  /**\n+   * Check if replication is allowed from given datacenter.\n+   * @param datacenterName datacenter name to check.\n+   * @return true if replication is allowed. false otherwise.\n+   */\n+  private boolean shouldReplicateFromDc(String datacenterName) {\n+    if (cloudConfig.cloudIsVcr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzMDUxMg==", "bodyText": "sure.. as of now I don't see any other explicit need for a separate config for backup, so I will use the same config for all cases. We can revisit if we need a separate config for backup if an explicit need arises.", "url": "https://github.com/linkedin/ambry/pull/1475#discussion_r409830512", "createdAt": "2020-04-16T20:31:51Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "diffHunk": "@@ -236,4 +240,18 @@ public long getRemoteReplicaLagFromLocalInBytes(PartitionId partitionId, String\n     // TODO get replica lag from cosmos?\n     return -1;\n   }\n+\n+  /**\n+   * Check if replication is allowed from given datacenter.\n+   * @param datacenterName datacenter name to check.\n+   * @return true if replication is allowed. false otherwise.\n+   */\n+  private boolean shouldReplicateFromDc(String datacenterName) {\n+    if (cloudConfig.cloudIsVcr) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NjEwNA=="}, "originalCommit": {"oid": "b0274726e91b61ac65bdcbc2e806f73e37d1ad83"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1500, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}