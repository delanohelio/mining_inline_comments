{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODI5NTAx", "number": 1389, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo1MjoyMFrODhsP_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMToxNTo0NVrODjqpcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU0NTg5OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo1MjoyMFrOFskaOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo1MjoyMFrOFskaOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3ODIwMQ==", "bodyText": "Maybe a typo here for j added before @param.", "url": "https://github.com/linkedin/ambry/pull/1389#discussion_r382278201", "createdAt": "2020-02-20T21:52:20Z", "author": {"login": "xuhao417347761"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -443,7 +443,7 @@ private boolean maybeWriteResponseMetadata(HttpResponse responseMetadata,\n \n   /**\n    * Builds and sends an error response to the client based on {@code cause}.\n-   * @param exception the cause of the request handling failure.\n+   *j@param exception the cause of the request handling failure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "351ae76b4206d798aa8363743a4148c0d5587c3e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk5MTEyOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMDo1Mzo1OFrOFtNo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMDo1Mzo1OFrOFtNo6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1MzcwNw==", "bodyText": "private static final", "url": "https://github.com/linkedin/ambry/pull/1389#discussion_r382953707", "createdAt": "2020-02-23T00:53:58Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -86,7 +86,7 @@\n   private final ChunkedWriteHandler chunkedWriteHandler;\n   private final PerformanceConfig perfConfig;\n \n-  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final static Logger logger = LoggerFactory.getLogger(NettyResponseChannel.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13777002348b108944d899ab0d7c441b90a97e77"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk5MjMxOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMDo1NzoxMVrOFtNpdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo1MDoyN1rOFt0A-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1Mzg0Ng==", "bodyText": "this seems like it should be exception != null or result == null", "url": "https://github.com/linkedin/ambry/pull/1389#discussion_r382953846", "createdAt": "2020-02-23T00:57:11Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -127,6 +127,23 @@\n \n   @Override\n   public Future<Long> write(ByteBuffer src, Callback<Long> callback) {\n+    return write(Unpooled.wrappedBuffer(src), new Callback<Long>() {\n+      @Override\n+      public void onCompletion(Long result, Exception exception) {\n+        if (exception == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13777002348b108944d899ab0d7c441b90a97e77"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MjQ1OQ==", "bodyText": "I suppose when result == null then the exception would be not null.", "url": "https://github.com/linkedin/ambry/pull/1389#discussion_r383582459", "createdAt": "2020-02-24T23:50:27Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -127,6 +127,23 @@\n \n   @Override\n   public Future<Long> write(ByteBuffer src, Callback<Long> callback) {\n+    return write(Unpooled.wrappedBuffer(src), new Callback<Long>() {\n+      @Override\n+      public void onCompletion(Long result, Exception exception) {\n+        if (exception == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1Mzg0Ng=="}, "originalCommit": {"oid": "13777002348b108944d899ab0d7c441b90a97e77"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk5Nzc2OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMToxMTowN1rOFtNr2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMToxMTowN1rOFtNr2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NDQ1Nw==", "bodyText": "i would recommend doing the thing that was done with in the default impl in AsyncWritableChannel where a second future is created and completed from the callback. This will ensure that the future returned is completed after the buffer position is changed.", "url": "https://github.com/linkedin/ambry/pull/1389#discussion_r382954457", "createdAt": "2020-02-23T01:11:07Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -127,6 +127,23 @@\n \n   @Override\n   public Future<Long> write(ByteBuffer src, Callback<Long> callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13777002348b108944d899ab0d7c441b90a97e77"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTAwMzcwOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMToyODo0M1rOFtNuyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMTo1OTozMFrOFtN0QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTIwOQ==", "bodyText": "should these buffers be retained before sending as content? If the chunk callback called by operationProgressed releases the buffer and the content object is also released by downstream channel handlers (not sure if this part happens or not), it may get an IllegalReferenceCountException", "url": "https://github.com/linkedin/ambry/pull/1389#discussion_r382955209", "createdAt": "2020-02-23T01:28:43Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -877,14 +893,13 @@ public HttpContent readChunk(ByteBufAllocator allocator) throws Exception {\n       Chunk chunk = chunksToWrite.poll();\n       if (chunk != null) {\n         chunk.onDequeue();\n-        ByteBuf buf = Unpooled.wrappedBuffer(chunk.buffer);\n-        progress.addAndGet(chunk.buffer.remaining());\n+        progress.addAndGet(chunk.buffer.readableBytes());\n         chunksAwaitingCallback.add(chunk);\n         if (chunk.isLast) {\n-          content = new DefaultLastHttpContent(buf);\n+          content = new DefaultLastHttpContent(chunk.buffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13777002348b108944d899ab0d7c441b90a97e77"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NjYwOQ==", "bodyText": "Confirmed that the outgoing ByteBuf will be released once it reaches the end of the pipeline: https://netty.io/wiki/reference-counted-objects.html#outbound-messages", "url": "https://github.com/linkedin/ambry/pull/1389#discussion_r382956609", "createdAt": "2020-02-23T01:59:30Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -877,14 +893,13 @@ public HttpContent readChunk(ByteBufAllocator allocator) throws Exception {\n       Chunk chunk = chunksToWrite.poll();\n       if (chunk != null) {\n         chunk.onDequeue();\n-        ByteBuf buf = Unpooled.wrappedBuffer(chunk.buffer);\n-        progress.addAndGet(chunk.buffer.remaining());\n+        progress.addAndGet(chunk.buffer.readableBytes());\n         chunksAwaitingCallback.add(chunk);\n         if (chunk.isLast) {\n-          content = new DefaultLastHttpContent(buf);\n+          content = new DefaultLastHttpContent(chunk.buffer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTIwOQ=="}, "originalCommit": {"oid": "13777002348b108944d899ab0d7c441b90a97e77"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQxMzA4OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToxNjoxNVrOFu4oKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToxNjoxNVrOFu4oKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwNjYwMA==", "bodyText": "Why 0 instead of previous src.position()?", "url": "https://github.com/linkedin/ambry/pull/1389#discussion_r384706600", "createdAt": "2020-02-26T19:16:15Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -127,6 +127,23 @@\n \n   @Override\n   public Future<Long> write(ByteBuffer src, Callback<Long> callback) {\n+    FutureResult<Long> futureResult = new FutureResult<>();\n+    write(Unpooled.wrappedBuffer(src), new Callback<Long>() {\n+      @Override\n+      public void onCompletion(Long result, Exception exception) {\n+        long r = result == null ? (long) 0 : result.longValue();\n+        src.position((int) r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005d7b91e62d7231fb06332551f738542564a74b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQ3NDYwOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozMzo1MFrOFu5Nmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozMzo1MFrOFu5Nmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxNjE4Nw==", "bodyText": "not used.", "url": "https://github.com/linkedin/ambry/pull/1389#discussion_r384716187", "createdAt": "2020-02-26T19:33:50Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java", "diffHunk": "@@ -17,10 +17,12 @@\n import com.github.ambry.config.PerformanceConfig;\n import com.github.ambry.config.VerifiableProperties;\n import com.github.ambry.router.Callback;\n+import com.github.ambry.utils.NettyByteBufLeakHelper;\n import com.github.ambry.utils.TestUtils;\n import com.github.ambry.utils.Utils;\n import com.github.ambry.utils.UtilsTest;\n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n import io.netty.buffer.Unpooled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005d7b91e62d7231fb06332551f738542564a74b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzI1NDg5OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/test/java/com.github.ambry.router/InMemoryRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMToxNTo0NVrOFvmpwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMToxNTo0NVrOFvmpwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MDY3Mw==", "bodyText": "I have seen a really weird bug, where a range request would somehow pollute the blob data here. I change the way we are dealing with range request data to copying it out. And it fixes the problem. This is weird, but I won't get into too much detail.", "url": "https://github.com/linkedin/ambry/pull/1389#discussion_r385460673", "createdAt": "2020-02-28T01:15:45Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/test/java/com.github.ambry.router/InMemoryRouter.java", "diffHunk": "@@ -157,7 +157,11 @@ public ByteBuffer getBlob(ByteRange range) throws RouterException {\n         } catch (IllegalArgumentException e) {\n           throw new RouterException(\"Invalid range for blob\", e, RouterErrorCode.RangeNotSatisfiable);\n         }\n-        buf = ByteBuffer.wrap(blob.array(), (int) resolvedRange.getStartOffset(), (int) resolvedRange.getRangeSize());\n+        byte[] bytes = new byte[(int) resolvedRange.getRangeSize()];\n+        ByteBuffer duplicate = blob.duplicate();\n+        duplicate.position((int) resolvedRange.getStartOffset());\n+        duplicate.get(bytes);\n+        buf = ByteBuffer.wrap(bytes);\n       }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5249cc714fd81db29610fda5a765dd579d825854"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1719, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}