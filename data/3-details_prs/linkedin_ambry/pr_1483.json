{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTI0MDkz", "number": 1483, "title": "Epoll patch and HTTP2 frame size tune.", "bodyText": "Include epoll in gradle build.\nAdd config for http2FrameMaxSize, http2initialWindowSize and WriteBufferWaterMark to support larger frame size.\nBackground:\nIn a recent performance test, we noticed 1MB http2 response time is high: round trip time is good but time from first frame to last frame is terrible. The reason is Netty chunks 1MB data to multiple 64KB frames and this caused multiple round trips and delayed Netty processing. The change is to support large frame size by configuring http2FrameMaxSize, http2initialWindowSize and WriteBufferWaterMark.", "createdAt": "2020-04-21T21:41:48Z", "url": "https://github.com/linkedin/ambry/pull/1483", "merged": true, "mergeCommit": {"oid": "3ffcdee808f67a1681f4cc837da5bfce3963f265"}, "closed": true, "closedAt": "2020-04-22T16:55:48Z", "author": {"login": "zzmao"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ7VmjgH2gAyNDA2OTI0MDkzOmZlMDVhMGQxZmU2OWExOWQ3YWUyMWE5Yzc5YjZjNjA2ODkyZmIwMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaA-ZYAH2gAyNDA2OTI0MDkzOjRmMWFkMzhmZDMyNTJmMTg1OTc4ODMzYWU3NGQ5NDhiODUwNGY2NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "committedDate": "2020-04-21T22:22:11Z", "message": "Epoll patch and HTTP2 frame size tune\n\nInlcuded epoll in gradle build.\nAdd config for http2FrameMaxSize, http2initialWindowSize and WriteBufferWaterMark to support larger frame size."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "680912a8070ab8aa6b9f346f99a80a2f3d7ba909", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/680912a8070ab8aa6b9f346f99a80a2f3d7ba909", "committedDate": "2020-04-21T21:11:31Z", "message": "Epoll patch and HTTP2 frame size tune.\n\nInlcuded epoll in gradle build.\nAdd config for http2FrameMaxSize, http2initialWindowSize and WriteBufferWaterMark to support larger frame size."}, "afterCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "committedDate": "2020-04-21T22:22:11Z", "message": "Epoll patch and HTTP2 frame size tune\n\nInlcuded epoll in gradle build.\nAdd config for http2FrameMaxSize, http2initialWindowSize and WriteBufferWaterMark to support larger frame size."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NzI4MjYz", "url": "https://github.com/linkedin/ambry/pull/1483#pullrequestreview-397728263", "createdAt": "2020-04-21T22:46:43Z", "commit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3Njk3ODQ5", "url": "https://github.com/linkedin/ambry/pull/1483#pullrequestreview-397697849", "createdAt": "2020-04-21T21:43:31Z", "commit": {"oid": "680912a8070ab8aa6b9f346f99a80a2f3d7ba909"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo0MzozMlrOGJZwbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzozOTozNlrOGJc9kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMjM2NQ==", "bodyText": "nit: add space in between sentences.", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412512365", "createdAt": "2020-04-21T21:43:32Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java", "diffHunk": "@@ -67,6 +69,23 @@\n   @Default(\"25 * 1024 * 1024\")\n   public final int http2MaxContentLength;\n \n+  /**\n+   * The maximum allowed http2 frame size.This value is used to represent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680912a8070ab8aa6b9f346f99a80a2f3d7ba909"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDY5OA==", "bodyText": "Do we want to have both the log messages in Http2FrameLogger and this handler? They can potentially be redundant, but I do see that this class also logs ambry request info, which could be useful.", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412544698", "createdAt": "2020-04-21T22:50:27Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2DataFrame;\n+import io.netty.handler.codec.http2.Http2Frame;\n+import io.netty.handler.codec.http2.Http2HeadersFrame;\n+import io.netty.util.ReferenceCountUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A handler to stats response streams.\n+ */\n+\n+@ChannelHandler.Sharable\n+class Http2ClientStreamStatsHandler extends SimpleChannelInboundHandler<Http2Frame> {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Http2NetworkClient http2NetworkClient;\n+\n+  public Http2ClientStreamStatsHandler(Http2NetworkClient http2NetworkClient) {\n+    this.http2NetworkClient = http2NetworkClient;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws Exception {\n+    ReferenceCountUtil.retain(frame);\n+    RequestInfo requestInfo = ctx.channel().attr(Http2NetworkClient.REQUEST_INFO).get();\n+    requestInfo.responseFramesCount++;\n+    if (frame instanceof Http2HeadersFrame) {\n+      requestInfo.setStreamHeaderFrameReceiveTime(System.currentTimeMillis());\n+      http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n+          System.currentTimeMillis() - requestInfo.getStreamSendTime());\n+      logger.debug(\"Header Frame received. Request: {}\", requestInfo.toString());\n+    } else if (frame instanceof Http2DataFrame) {\n+      logger.debug(\"Data Frame size: {}. Request: {}\", ((Http2DataFrame) frame).content().readableBytes(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NTQ3Mw==", "bodyText": "I would suggest just passing requestInfo and not requestInfo.toString() into this logger calls. It will avoid the string concatenation when debug logging is not enabled and makes the method calls a bit less verbose.", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412545473", "createdAt": "2020-04-21T22:52:14Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2DataFrame;\n+import io.netty.handler.codec.http2.Http2Frame;\n+import io.netty.handler.codec.http2.Http2HeadersFrame;\n+import io.netty.util.ReferenceCountUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A handler to stats response streams.\n+ */\n+\n+@ChannelHandler.Sharable\n+class Http2ClientStreamStatsHandler extends SimpleChannelInboundHandler<Http2Frame> {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Http2NetworkClient http2NetworkClient;\n+\n+  public Http2ClientStreamStatsHandler(Http2NetworkClient http2NetworkClient) {\n+    this.http2NetworkClient = http2NetworkClient;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws Exception {\n+    ReferenceCountUtil.retain(frame);\n+    RequestInfo requestInfo = ctx.channel().attr(Http2NetworkClient.REQUEST_INFO).get();\n+    requestInfo.responseFramesCount++;\n+    if (frame instanceof Http2HeadersFrame) {\n+      requestInfo.setStreamHeaderFrameReceiveTime(System.currentTimeMillis());\n+      http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n+          System.currentTimeMillis() - requestInfo.getStreamSendTime());\n+      logger.debug(\"Header Frame received. Request: {}\", requestInfo.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NjAxNA==", "bodyText": "capitalize i in initial", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412546014", "createdAt": "2020-04-21T22:53:32Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java", "diffHunk": "@@ -67,6 +69,23 @@\n   @Default(\"25 * 1024 * 1024\")\n   public final int http2MaxContentLength;\n \n+  /**\n+   * The maximum allowed http2 frame size.This value is used to represent\n+   * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.5.2\">SETTINGS_MAX_FRAME_SIZE</a>.\n+   */\n+  @Config(HTTP2_FRAME_MAX_SIZE)\n+  @Default(\"5 * 1024 * 1024\")\n+  public final int http2FrameMaxSize;\n+\n+\n+  /**\n+   * The initial window size used in http streams. This allows sender send big frame.\n+   */\n+  @Config(HTTP2_INITIAL_WINDOW_SIZE)\n+  @Default(\"5 * 1024 * 1024\")\n+  public final int http2initialWindowSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NDg4Mg==", "bodyText": "Just curious: Is there a specific issue this TODO will help with?", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412564882", "createdAt": "2020-04-21T23:39:36Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -91,6 +95,10 @@ public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConf\n               http2ClientMetrics.http2StreamAcquireTime.update(System.currentTimeMillis() - streamInitiateTime);\n               long streamAcquiredTime = System.currentTimeMillis();\n               Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientStreamStatsHandler);\n+              // TODO: implement ourselves' aggregator. Http2Streams to Response Object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f2b7865414ecd1fa2339bc443429fa729fdb621", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/5f2b7865414ecd1fa2339bc443429fa729fdb621", "committedDate": "2020-04-22T04:49:56Z", "message": "use sane watermark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f1ad38fd3252f185978833ae74d948b8504f653", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/4f1ad38fd3252f185978833ae74d948b8504f653", "committedDate": "2020-04-22T04:56:16Z", "message": "address cgetz comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1412, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}