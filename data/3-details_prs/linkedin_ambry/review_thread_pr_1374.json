{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNTUyMTg1", "number": 1374, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo0MDowOFrODfAyjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzozODoxOVrODfEsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ1MzkxOnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo0MDowOFrOFoeP-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNjowMVrOFo76Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Mjk3MQ==", "bodyText": "javadoc", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r377982971", "createdAt": "2020-02-12T00:40:08Z", "author": {"login": "lightningrob"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.clustermap;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+import com.codahale.metrics.MetricRegistry;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+class HelixParticipantMetrics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODg4Mw==", "bodyText": "added", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378468883", "createdAt": "2020-02-12T19:36:01Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.clustermap;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+import com.codahale.metrics.MetricRegistry;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+class HelixParticipantMetrics {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Mjk3MQ=="}, "originalCommit": {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ1ODk3OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo0MzowN1rOFoeTJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNTo1N1rOFo759g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Mzc4Mg==", "bodyText": "Should this throw IllegalStateException?  Seems like bug case.", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r377983782", "createdAt": "2020-02-12T00:43:07Z", "author": {"login": "lightningrob"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.clustermap;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+import com.codahale.metrics.MetricRegistry;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+class HelixParticipantMetrics {\n+  final AtomicInteger bootstrapCount = new AtomicInteger();\n+  final AtomicInteger standbyCount = new AtomicInteger();\n+  final AtomicInteger leaderCount = new AtomicInteger();\n+  final AtomicInteger inactiveCount = new AtomicInteger();\n+  final AtomicInteger offlineCount = new AtomicInteger();\n+  // no need to record exact number of \"dropped\" partition, a counter to track partition-dropped events would suffice\n+  final Counter partitionDroppedCount;\n+  private static final Logger logger = LoggerFactory.getLogger(HelixParticipantMetrics.class);\n+\n+  HelixParticipantMetrics(MetricRegistry metricRegistry) {\n+    Gauge<Integer> bootstrapPartitionCount = bootstrapCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"bootstrapPartitionCount\"),\n+        bootstrapPartitionCount);\n+    Gauge<Integer> standbyPartitionCount = standbyCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"standbyPartitionCount\"),\n+        standbyPartitionCount);\n+    Gauge<Integer> leaderPartitionCount = leaderCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"leaderPartitionCount\"), leaderPartitionCount);\n+    Gauge<Integer> inactivePartitionCount = inactiveCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"inactivePartitionCount\"),\n+        inactivePartitionCount);\n+    Gauge<Integer> offlinePartitionCount = offlineCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"offlinePartitionCount\"),\n+        offlinePartitionCount);\n+    partitionDroppedCount =\n+        metricRegistry.counter(MetricRegistry.name(HelixParticipant.class, \"partitionDroppedCount\"));\n+  }\n+\n+  /**\n+   * Set number of partitions on current node. This is invoked during startup.\n+   * @param partitionCount number of partitions on current node\n+   */\n+  void setLocalPartitionCount(int partitionCount) {\n+    // this method should be invoked before participation, so the initial value is expected to be 0.\n+    if (!offlineCount.compareAndSet(0, partitionCount)) {\n+      logger.warn(\"Number of OFFLINE partitions has changed before initializing participant metrics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODg1NA==", "bodyText": "fixed", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378468854", "createdAt": "2020-02-12T19:35:57Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.clustermap;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+import com.codahale.metrics.MetricRegistry;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+class HelixParticipantMetrics {\n+  final AtomicInteger bootstrapCount = new AtomicInteger();\n+  final AtomicInteger standbyCount = new AtomicInteger();\n+  final AtomicInteger leaderCount = new AtomicInteger();\n+  final AtomicInteger inactiveCount = new AtomicInteger();\n+  final AtomicInteger offlineCount = new AtomicInteger();\n+  // no need to record exact number of \"dropped\" partition, a counter to track partition-dropped events would suffice\n+  final Counter partitionDroppedCount;\n+  private static final Logger logger = LoggerFactory.getLogger(HelixParticipantMetrics.class);\n+\n+  HelixParticipantMetrics(MetricRegistry metricRegistry) {\n+    Gauge<Integer> bootstrapPartitionCount = bootstrapCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"bootstrapPartitionCount\"),\n+        bootstrapPartitionCount);\n+    Gauge<Integer> standbyPartitionCount = standbyCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"standbyPartitionCount\"),\n+        standbyPartitionCount);\n+    Gauge<Integer> leaderPartitionCount = leaderCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"leaderPartitionCount\"), leaderPartitionCount);\n+    Gauge<Integer> inactivePartitionCount = inactiveCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"inactivePartitionCount\"),\n+        inactivePartitionCount);\n+    Gauge<Integer> offlinePartitionCount = offlineCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"offlinePartitionCount\"),\n+        offlinePartitionCount);\n+    partitionDroppedCount =\n+        metricRegistry.counter(MetricRegistry.name(HelixParticipant.class, \"partitionDroppedCount\"));\n+  }\n+\n+  /**\n+   * Set number of partitions on current node. This is invoked during startup.\n+   * @param partitionCount number of partitions on current node\n+   */\n+  void setLocalPartitionCount(int partitionCount) {\n+    // this method should be invoked before participation, so the initial value is expected to be 0.\n+    if (!offlineCount.compareAndSet(0, partitionCount)) {\n+      logger.warn(\"Number of OFFLINE partitions has changed before initializing participant metrics\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Mzc4Mg=="}, "originalCommit": {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ2NDU4OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/clustermap/ClusterParticipant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo0NTo0M1rOFoeWZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNTo0OVrOFo75ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NDYxMg==", "bodyText": "Can make this a default no op method so need not be overridden.", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r377984612", "createdAt": "2020-02-12T00:45:43Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com.github.ambry/clustermap/ClusterParticipant.java", "diffHunk": "@@ -84,6 +84,12 @@ void registerPartitionStateChangeListener(StateModelListenerType listenerType,\n    */\n   boolean updateDataNodeInfoInCluster(ReplicaId replicaId, boolean shouldExist);\n \n+  /**\n+   * Initialize participant related metrics if needed.\n+   * @param localPartitionCount total number of partitions on local node.\n+   */\n+  void initializeParticipantMetrics(int localPartitionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODc5NA==", "bodyText": "good point. I have changed it as you suggest.", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378468794", "createdAt": "2020-02-12T19:35:49Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com.github.ambry/clustermap/ClusterParticipant.java", "diffHunk": "@@ -84,6 +84,12 @@ void registerPartitionStateChangeListener(StateModelListenerType listenerType,\n    */\n   boolean updateDataNodeInfoInCluster(ReplicaId replicaId, boolean shouldExist);\n \n+  /**\n+   * Initialize participant related metrics if needed.\n+   * @param localPartitionCount total number of partitions on local node.\n+   */\n+  void initializeParticipantMetrics(int localPartitionCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NDYxMg=="}, "originalCommit": {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ4MDg3OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1NDo1OFrOFoegGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNToyNFrOFo747g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzA5Ng==", "bodyText": "Could the partition count be passed to constructor instead, and avoid the extra call?", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r377987096", "createdAt": "2020-02-12T00:54:58Z", "author": {"login": "lightningrob"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipant.java", "diffHunk": "@@ -88,6 +93,11 @@ public HelixParticipant(ClusterMapConfig clusterMapConfig, HelixFactory helixFac\n     partitionStateChangeListeners = new HashMap<>();\n   }\n \n+  @Override\n+  public void initializeParticipantMetrics(int localPartitionCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODU5MA==", "bodyText": "Unfortunately, when the Participant is created, the number of local partition is not known yet. That's why we let StorageManager update local partition count.", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378468590", "createdAt": "2020-02-12T19:35:24Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipant.java", "diffHunk": "@@ -88,6 +93,11 @@ public HelixParticipant(ClusterMapConfig clusterMapConfig, HelixFactory helixFac\n     partitionStateChangeListeners = new HashMap<>();\n   }\n \n+  @Override\n+  public void initializeParticipantMetrics(int localPartitionCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzA5Ng=="}, "originalCommit": {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTA5MzE3OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/test/java/com.github.ambry.clustermap/AmbryStateModelFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzozODoxOVrOFokPDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozMzoyMFrOFo70zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MTAzNg==", "bodyText": "you can just say ZkInfo since you are already importing TestUtils.*", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378081036", "createdAt": "2020-02-12T07:38:19Z", "author": {"login": "lightningrob"}, "path": "ambry-clustermap/src/test/java/com.github.ambry.clustermap/AmbryStateModelFactoryTest.java", "diffHunk": "@@ -13,39 +13,54 @@\n  */\n package com.github.ambry.clustermap;\n \n+import com.codahale.metrics.MetricRegistry;\n import com.github.ambry.config.ClusterMapConfig;\n import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.utils.TestUtils;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Properties;\n+import org.apache.helix.model.Message;\n import org.apache.helix.participant.statemachine.StateModel;\n+import org.json.JSONObject;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n+import org.mockito.Mockito;\n \n+import static com.github.ambry.clustermap.TestUtils.*;\n import static org.junit.Assert.*;\n+import static org.junit.Assume.*;\n+import static org.mockito.Mockito.*;\n \n \n /**\n- * Test for {@link AmbryStateModelFactory}\n+ * Test for {@link AmbryStateModelFactory} and {@link AmbryPartitionStateModel}\n  */\n @RunWith(Parameterized.class)\n public class AmbryStateModelFactoryTest {\n   private final ClusterMapConfig config;\n+  private final String stateModelDef;\n \n   @Parameterized.Parameters\n   public static List<Object[]> data() {\n     return Arrays.asList(\n         new Object[][]{{ClusterMapConfig.OLD_STATE_MODEL_DEF}, {ClusterMapConfig.AMBRY_STATE_MODEL_DEF}});\n   }\n \n-  public AmbryStateModelFactoryTest(String stateModelDef) {\n+  public AmbryStateModelFactoryTest(String stateModelDef) throws Exception {\n+    List<com.github.ambry.utils.TestUtils.ZkInfo> zkInfoList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NzUzNQ==", "bodyText": "fixed", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378467535", "createdAt": "2020-02-12T19:33:20Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/test/java/com.github.ambry.clustermap/AmbryStateModelFactoryTest.java", "diffHunk": "@@ -13,39 +13,54 @@\n  */\n package com.github.ambry.clustermap;\n \n+import com.codahale.metrics.MetricRegistry;\n import com.github.ambry.config.ClusterMapConfig;\n import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.utils.TestUtils;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Properties;\n+import org.apache.helix.model.Message;\n import org.apache.helix.participant.statemachine.StateModel;\n+import org.json.JSONObject;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n+import org.mockito.Mockito;\n \n+import static com.github.ambry.clustermap.TestUtils.*;\n import static org.junit.Assert.*;\n+import static org.junit.Assume.*;\n+import static org.mockito.Mockito.*;\n \n \n /**\n- * Test for {@link AmbryStateModelFactory}\n+ * Test for {@link AmbryStateModelFactory} and {@link AmbryPartitionStateModel}\n  */\n @RunWith(Parameterized.class)\n public class AmbryStateModelFactoryTest {\n   private final ClusterMapConfig config;\n+  private final String stateModelDef;\n \n   @Parameterized.Parameters\n   public static List<Object[]> data() {\n     return Arrays.asList(\n         new Object[][]{{ClusterMapConfig.OLD_STATE_MODEL_DEF}, {ClusterMapConfig.AMBRY_STATE_MODEL_DEF}});\n   }\n \n-  public AmbryStateModelFactoryTest(String stateModelDef) {\n+  public AmbryStateModelFactoryTest(String stateModelDef) throws Exception {\n+    List<com.github.ambry.utils.TestUtils.ZkInfo> zkInfoList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MTAzNg=="}, "originalCommit": {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1688, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}