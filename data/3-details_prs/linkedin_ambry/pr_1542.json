{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODkyNTE5", "number": 1542, "title": "ambry server authorization changes.", "bodyText": "This PR contains following changes.\n\n\ninterface definition for ServerSecurityService in ambry-server. It contains 2 APIs. validateConnection API will be used to enforce security check when new HTTP2 connection terminates at server, SSL handshake is done and before any streams are processed by server.\nvalidateRequest API will NOT be used now. It may be used later if we decide to secure individual request seperately from the connection.\n\n\nA default implementation of the above interface(AmbryServerSecurityService) which does not do any certificate based validations. it's allow all.\n\n\nmodification of the Http2 netty pipeline(ServerSecurityChecker) to enforce the security check when a new HTTP2 connections comes in to the server.\n\n\nUT for new codes.\n\n\na configuration to choose the implementation class for ServerSecurityService and new metrics for tracking the feature.\n\n\nTested through UT and also by running ambry-frontend talking to ambry-server over HTTP2 SSL connection.", "createdAt": "2020-05-29T05:23:50Z", "url": "https://github.com/linkedin/ambry/pull/1542", "merged": true, "mergeCommit": {"oid": "3fc8871f21fbb543c7845fbfea072b2e9baff8dc"}, "closed": true, "closedAt": "2020-06-09T03:22:42Z", "author": {"login": "ssen-li"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl64iuAH2gAyNDI0ODkyNTE5OmRlZjFlMDJiNDQ5OGJkZjgzMzNmOTllZmU3NGU5ZDhmYzAwMjgwYWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpcY3qgFqTQyNjc2MjI3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "def1e02b4498bdf8333f99efe74e9d8fc00280ab", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/def1e02b4498bdf8333f99efe74e9d8fc00280ab", "committedDate": "2020-05-29T04:37:32Z", "message": "introducing the security service interface for ambry server. providing\na default implementation which basically allows everything and also\nhooking up with the netty http2 pipeline to enforce the security checks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0384e0cfb27b2b72d8bae0b4d02fe52723048ce6", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/0384e0cfb27b2b72d8bae0b4d02fe52723048ce6", "committedDate": "2020-05-29T05:00:07Z", "message": "fix the class for new metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08965ad9d5cc706248a1aac16f45e5dbc111806b", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/08965ad9d5cc706248a1aac16f45e5dbc111806b", "committedDate": "2020-06-01T23:16:55Z", "message": "adding UT for the securityservice classes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ec55e2cdf5c31bfc71f9e51ddfa8c3a23d24d05", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/1ec55e2cdf5c31bfc71f9e51ddfa8c3a23d24d05", "committedDate": "2020-06-01T23:48:48Z", "message": "some refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98916e870f18d89e2dff73855f586a00630d2f41", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/98916e870f18d89e2dff73855f586a00630d2f41", "committedDate": "2020-06-01T23:58:35Z", "message": "reformatting to follow coding guidelines."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "927a0fc13952881478bd9c40a4f97e182c88d8e1", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/927a0fc13952881478bd9c40a4f97e182c88d8e1", "committedDate": "2020-06-02T04:07:22Z", "message": "more cleanup and adding comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e96e071bb7be8d10decadc9914530d6b0200c21", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/0e96e071bb7be8d10decadc9914530d6b0200c21", "committedDate": "2020-06-02T05:01:03Z", "message": "more counters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/5b7e789e813673565c6e8e824758139a6fc88d9a", "committedDate": "2020-06-02T15:43:47Z", "message": "merge from master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyOTkxMzky", "url": "https://github.com/linkedin/ambry/pull/1542#pullrequestreview-422991392", "createdAt": "2020-06-02T19:26:01Z", "commit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToyNjowMVrOGeA3dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0NDowMFrOGeBbqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNDY2MQ==", "bodyText": "this is not needed here. Align with other.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434124661", "createdAt": "2020-06-02T19:26:01Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -93,6 +96,7 @@ protected void initChannel(SocketChannel ch) throws Exception {\n     int peerPort = peerAddress.getPort();\n     SslHandler sslHandler = new SslHandler(sslFactory.createSSLEngine(peerHost, peerPort, SSLFactory.Mode.SERVER));\n     pipeline.addLast(\"SslHandler\", sslHandler);\n+    pipeline.addLast(\"securityChecker\", this.serverSecurityChecker);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNjQ5Nw==", "bodyText": "How do you think of moving this class to com.github.ambry.rest ? so that frontend can also leverage it if needed.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434126497", "createdAt": "2020-06-02T19:29:26Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.router.Callback;\n+import io.netty.channel.ChannelHandlerContext;\n+\n+/**\n+ * Default implementation of {@link ServerSecurityService} for Ambry that doesn't do any validations.\n+ */\n+public class AmbryServerSecurityService implements ServerSecurityService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzc1NA==", "bodyText": "Move to com.github.ambry.rest?\nThis can also help ambry-api get rid of netty dependency.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434127754", "createdAt": "2020-06-02T19:31:51Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com/github/ambry/server/ServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.router.FutureResult;\n+import java.io.Closeable;\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.concurrent.Future;\n+\n+\n+/**\n+ * Responsible for performing any security validations on the HTTP2 connection terminating on server. Validations\n+ * could involve authentication, authorization, security checks and so on which the implementation can decide.\n+ * This could also involve setting headers while responding, based on the request.\n+ * Exceptions are returned via {@link Callback}s on any validation failure.\n+ */\n+public interface ServerSecurityService extends Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTc5OQ==", "bodyText": "You can return Future in validateRequest()\nThere are some prior code did so:\nGetBlobOperation\npublic Future<Long> readInto(AsyncWritableChannel asyncWritableChannel, Callback<Long> callback) {\n\nI prefer fewer interface. More interfaces means more maintenance.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434131799", "createdAt": "2020-06-02T19:39:36Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com/github/ambry/server/ServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.router.FutureResult;\n+import java.io.Closeable;\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.concurrent.Future;\n+\n+\n+/**\n+ * Responsible for performing any security validations on the HTTP2 connection terminating on server. Validations\n+ * could involve authentication, authorization, security checks and so on which the implementation can decide.\n+ * This could also involve setting headers while responding, based on the request.\n+ * Exceptions are returned via {@link Callback}s on any validation failure.\n+ */\n+public interface ServerSecurityService extends Closeable {\n+\n+  /**\n+   * Performs security validations (if any) before allowing the HTTP2 connection setup to be complete and invokes the\n+   * {@code callback} once done.\n+   * @param ctx the {@link ChannelHandlerContext} to process.\n+   * @param callback the callback to invoke once processing is finished.\n+   */\n+  void validateConnection(ChannelHandlerContext ctx, Callback<Void> callback);\n+\n+  /**\n+   * Performs security validations (if any) on the individual stream {@link RestRequest} asynchronously and invokes the\n+   * {@link Callback} when the validation completes.\n+   * @param restRequest {@link RestRequest} upon which validations has to be performed\n+   * @param callback The {@link Callback} which will be invoked on the completion of the request. Cannot be null.\n+   */\n+  void validateRequest(RestRequest restRequest, Callback<Void> callback);\n+\n+  /**\n+   * Similar to {@link #validateConnection(ChannelHandlerContext, Callback)} but returns a {@link Future}\n+   * instead of requiring a callback.\n+   * @param ctx {@link ChannelHandlerContext} upon which validations has to be performed\n+   * @return a {@link Future} that is completed when the processing is done.\n+   */\n+  default Future<Void> validateConnection(ChannelHandlerContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjM4OQ==", "bodyText": "serverSecurityChecker -> serverSecurityHanlder ? To make it netty style.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434132389", "createdAt": "2020-06-02T19:40:49Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjg4MQ==", "bodyText": "debug or trace level, otherwise too many logs.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434132881", "createdAt": "2020-06-02T19:41:55Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final ServerSecurityService serverSecurityService;\n+  private final ServerMetrics serverMetrics;\n+\n+  public ServerSecurityChecker(ServerSecurityService serverSecurityService, ServerMetrics serverMetrics) {\n+    this.serverSecurityService =\n+        Objects.requireNonNull(serverSecurityService, \"server security service can not be null\");\n+    this.serverMetrics = Objects.requireNonNull(serverMetrics, \"serverMetrics can not be null\");\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Active \" + ctx.channel().remoteAddress());\n+    validateSslConnection(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Inactive \" + ctx.channel().remoteAddress());\n+    super.channelInactive(ctx);\n+  }\n+\n+  /**\n+   * Listen to the handshake future for the SSL termination, then apply the security policies, potentialy closing the\n+   * connection in case security check fails.\n+   * @param ctx the {@link ChannelHandlerContext}.\n+   */\n+  private void validateSslConnection(ChannelHandlerContext ctx) throws Exception {\n+    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n+    if (sslHandler != null) {\n+      sslHandler.handshakeFuture().addListener(future -> {\n+        if (!future.isSuccess()) {\n+          logger.debug(\"SSL handshake failed for channel: {}\", ctx.channel(), future.cause());\n+        } else {\n+          logger.debug(\"SSL handshake succedded for channel: {}\", ctx.channel(), future.cause());\n+          try {\n+            serverSecurityService.validateConnection(ctx, (r, e) -> {\n+              if (e != null) {\n+                logger.error(\"security validation failed for channel: {}\", ctx.channel(), e);\n+                serverMetrics.serverValidateConnectionFailure.inc();\n+                ctx.channel().close();\n+              } else {\n+                logger.info(\"security validation succeeded for channel: {}\", ctx.channel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMzkzMA==", "bodyText": "what If there is stream channel has been establish?", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434133930", "createdAt": "2020-06-02T19:44:00Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final ServerSecurityService serverSecurityService;\n+  private final ServerMetrics serverMetrics;\n+\n+  public ServerSecurityChecker(ServerSecurityService serverSecurityService, ServerMetrics serverMetrics) {\n+    this.serverSecurityService =\n+        Objects.requireNonNull(serverSecurityService, \"server security service can not be null\");\n+    this.serverMetrics = Objects.requireNonNull(serverMetrics, \"serverMetrics can not be null\");\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Active \" + ctx.channel().remoteAddress());\n+    validateSslConnection(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Inactive \" + ctx.channel().remoteAddress());\n+    super.channelInactive(ctx);\n+  }\n+\n+  /**\n+   * Listen to the handshake future for the SSL termination, then apply the security policies, potentialy closing the\n+   * connection in case security check fails.\n+   * @param ctx the {@link ChannelHandlerContext}.\n+   */\n+  private void validateSslConnection(ChannelHandlerContext ctx) throws Exception {\n+    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n+    if (sslHandler != null) {\n+      sslHandler.handshakeFuture().addListener(future -> {\n+        if (!future.isSuccess()) {\n+          logger.debug(\"SSL handshake failed for channel: {}\", ctx.channel(), future.cause());\n+        } else {\n+          logger.debug(\"SSL handshake succedded for channel: {}\", ctx.channel(), future.cause());\n+          try {\n+            serverSecurityService.validateConnection(ctx, (r, e) -> {\n+              if (e != null) {\n+                logger.error(\"security validation failed for channel: {}\", ctx.channel(), e);\n+                serverMetrics.serverValidateConnectionFailure.inc();\n+                ctx.channel().close();\n+              } else {\n+                logger.info(\"security validation succeeded for channel: {}\", ctx.channel());\n+                serverMetrics.serverValidateConnectionSuccess.inc();\n+              }\n+            });\n+          } catch (Exception e) {\n+            logger.error(\"security validation failed for channel: {}\", ctx.channel(), e);\n+            serverMetrics.serverValidateConnectionFailure.inc();\n+            ctx.channel().close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbb6853416ef1278b48324380106a10c85001495", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/bbb6853416ef1278b48324380106a10c85001495", "committedDate": "2020-06-02T21:28:52Z", "message": "addresing review comments. renamed the\nServerSecurityChecker->ServerSecurityHandler. added a new UT to increase\ntest coverage."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDc5MzUy", "url": "https://github.com/linkedin/ambry/pull/1542#pullrequestreview-423079352", "createdAt": "2020-06-02T21:44:25Z", "commit": {"oid": "bbb6853416ef1278b48324380106a10c85001495"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0NDoyNVrOGeFCCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1Mzo1NVrOGeFRIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjkwNw==", "bodyText": "This interface looks a little netty focused and requires a new dependency for ambry-api. Could this method just take in the SSLSession object itself?\nAdditionally, I wanted to learn a bit more about the motivation for this method as opposed to doing all security validation at request time. Is this an optimization so that SSL related checks only have to be checked once since the peer certificate is the same for all requests on a single connection?", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434192907", "createdAt": "2020-06-02T21:44:25Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/server/ServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.router.FutureResult;\n+import java.io.Closeable;\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.concurrent.Future;\n+\n+\n+/**\n+ * Responsible for performing any security validations on the HTTP2 connection terminating on server. Validations\n+ * could involve authentication, authorization, security checks and so on which the implementation can decide.\n+ * This could also involve setting headers while responding, based on the request.\n+ * Exceptions are returned via {@link Callback}s on any validation failure.\n+ */\n+public interface ServerSecurityService extends Closeable {\n+\n+  /**\n+   * Performs security validations (if any) before allowing the HTTP2 connection setup to be complete and invokes the\n+   * {@code callback} once done.\n+   * @param ctx the {@link ChannelHandlerContext} to process.\n+   * @param callback the callback to invoke once processing is finished.\n+   */\n+  void validateConnection(ChannelHandlerContext ctx, Callback<Void> callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb6853416ef1278b48324380106a10c85001495"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NDgzMg==", "bodyText": "This may be a good place to use mockito since you only need to mock a very small selection of the many methods.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434194832", "createdAt": "2020-06-02T21:48:57Z", "author": {"login": "cgtz"}, "path": "ambry-test-utils/src/main/java/com/github/ambry/rest/MockChannelHandlerContext.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.ChannelProgressivePromise;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.DefaultChannelProgressivePromise;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.util.Attribute;\n+import io.netty.util.AttributeKey;\n+import io.netty.util.concurrent.EventExecutor;\n+import java.net.SocketAddress;\n+\n+/**\n+ * Mock class for ChannelHandlerContext\n+ */\n+\n+public class MockChannelHandlerContext implements ChannelHandlerContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb6853416ef1278b48324380106a10c85001495"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NTM2OQ==", "bodyText": "let's try to see if we can avoid adding the netty-all dependency to ambry-api. If we cannot avoid it, we can remove the dependencies on netty-buffer, since netty-all includes it already.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434195369", "createdAt": "2020-06-02T21:50:17Z", "author": {"login": "cgtz"}, "path": "build.gradle", "diffHunk": "@@ -189,6 +189,7 @@ project(':ambry-api') {\n         compile \"org.codehaus.jackson:jackson-core-asl:$jacksonVersion\"\n         compile \"org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion\"\n         compile \"io.netty:netty-buffer:$nettyVersion\"\n+        compile \"io.netty:netty-all:$nettyVersion\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb6853416ef1278b48324380106a10c85001495"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Njc3MQ==", "bodyText": "I know some ambry test cases may have had this assert.fail pattern, but I think it is generally better to let the exception be thrown in test cases instead of catching it and wrapping it in an assert. Throwing the exception gives us the full stack trace (and still fails the test) which can be helpful in tracing down the issue if the test happens to fail.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434196771", "createdAt": "2020-06-02T21:53:55Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/test/java/com/github/ambry/server/AmbryServerSecurityServiceTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.protocol.AmbryRequests;\n+import com.github.ambry.rest.MockChannelHandlerContext;\n+import com.github.ambry.rest.MockRestRequest;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.ThrowingConsumer;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class AmbryServerSecurityServiceTest {\n+  private final ServerSecurityService serverSecurityService =\n+      new AmbryServerSecurityService(new ServerConfig(new VerifiableProperties(new Properties())),\n+          new ServerMetrics(new MetricRegistry(), AmbryRequests.class, AmbryServer.class));\n+\n+  @Test\n+  public void validateConnectionTest() throws Exception {\n+    //ctx is null\n+    TestUtils.assertException(IllegalArgumentException.class,\n+        () -> serverSecurityService.validateConnection(null).get(), null);\n+\n+    //success case\n+    EmbeddedChannel channel = new EmbeddedChannel();\n+    ChannelHandlerContext ctx = new MockChannelHandlerContext(channel);\n+    try {\n+      serverSecurityService.validateConnection(ctx, (r, e) -> {\n+        Assert.assertNull(\"result not null\", r);\n+        Assert.assertNull(\"exception not null\", e);\n+      });\n+    } catch (Exception e) {\n+      Assert.fail(\"unexpected exception happened\" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb6853416ef1278b48324380106a10c85001495"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDM0OTE4", "url": "https://github.com/linkedin/ambry/pull/1542#pullrequestreview-423034918", "createdAt": "2020-06-02T20:31:14Z", "commit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozMToxNFrOGeC5QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjoxNzowNFrOGeF0GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1Nzg4OA==", "bodyText": "Minor: terminating at the server.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434157888", "createdAt": "2020-06-02T20:31:14Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/server/ServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.router.FutureResult;\n+import java.io.Closeable;\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.concurrent.Future;\n+\n+\n+/**\n+ * Responsible for performing any security validations on the HTTP2 connection terminating on server. Validations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1ODk3Mg==", "bodyText": "Minor: has to -> have to", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434158972", "createdAt": "2020-06-02T20:33:20Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/server/ServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.router.FutureResult;\n+import java.io.Closeable;\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.concurrent.Future;\n+\n+\n+/**\n+ * Responsible for performing any security validations on the HTTP2 connection terminating on server. Validations\n+ * could involve authentication, authorization, security checks and so on which the implementation can decide.\n+ * This could also involve setting headers while responding, based on the request.\n+ * Exceptions are returned via {@link Callback}s on any validation failure.\n+ */\n+public interface ServerSecurityService extends Closeable {\n+\n+  /**\n+   * Performs security validations (if any) before allowing the HTTP2 connection setup to be complete and invokes the\n+   * {@code callback} once done.\n+   * @param ctx the {@link ChannelHandlerContext} to process.\n+   * @param callback the callback to invoke once processing is finished.\n+   */\n+  void validateConnection(ChannelHandlerContext ctx, Callback<Void> callback);\n+\n+  /**\n+   * Performs security validations (if any) on the individual stream {@link RestRequest} asynchronously and invokes the\n+   * {@link Callback} when the validation completes.\n+   * @param restRequest {@link RestRequest} upon which validations has to be performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDE4MA==", "bodyText": "+1", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434160180", "createdAt": "2020-06-02T20:35:52Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/server/ServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.router.Callback;\n+import com.github.ambry.router.FutureResult;\n+import java.io.Closeable;\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.concurrent.Future;\n+\n+\n+/**\n+ * Responsible for performing any security validations on the HTTP2 connection terminating on server. Validations\n+ * could involve authentication, authorization, security checks and so on which the implementation can decide.\n+ * This could also involve setting headers while responding, based on the request.\n+ * Exceptions are returned via {@link Callback}s on any validation failure.\n+ */\n+public interface ServerSecurityService extends Closeable {\n+\n+  /**\n+   * Performs security validations (if any) before allowing the HTTP2 connection setup to be complete and invokes the\n+   * {@code callback} once done.\n+   * @param ctx the {@link ChannelHandlerContext} to process.\n+   * @param callback the callback to invoke once processing is finished.\n+   */\n+  void validateConnection(ChannelHandlerContext ctx, Callback<Void> callback);\n+\n+  /**\n+   * Performs security validations (if any) on the individual stream {@link RestRequest} asynchronously and invokes the\n+   * {@link Callback} when the validation completes.\n+   * @param restRequest {@link RestRequest} upon which validations has to be performed\n+   * @param callback The {@link Callback} which will be invoked on the completion of the request. Cannot be null.\n+   */\n+  void validateRequest(RestRequest restRequest, Callback<Void> callback);\n+\n+  /**\n+   * Similar to {@link #validateConnection(ChannelHandlerContext, Callback)} but returns a {@link Future}\n+   * instead of requiring a callback.\n+   * @param ctx {@link ChannelHandlerContext} upon which validations has to be performed\n+   * @return a {@link Future} that is completed when the processing is done.\n+   */\n+  default Future<Void> validateConnection(ChannelHandlerContext ctx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTc5OQ=="}, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MzM0MQ==", "bodyText": "Should this be error?  How often does it happen?", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434163341", "createdAt": "2020-06-02T20:42:00Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final ServerSecurityService serverSecurityService;\n+  private final ServerMetrics serverMetrics;\n+\n+  public ServerSecurityChecker(ServerSecurityService serverSecurityService, ServerMetrics serverMetrics) {\n+    this.serverSecurityService =\n+        Objects.requireNonNull(serverSecurityService, \"server security service can not be null\");\n+    this.serverMetrics = Objects.requireNonNull(serverMetrics, \"serverMetrics can not be null\");\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Active \" + ctx.channel().remoteAddress());\n+    validateSslConnection(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Inactive \" + ctx.channel().remoteAddress());\n+    super.channelInactive(ctx);\n+  }\n+\n+  /**\n+   * Listen to the handshake future for the SSL termination, then apply the security policies, potentialy closing the\n+   * connection in case security check fails.\n+   * @param ctx the {@link ChannelHandlerContext}.\n+   */\n+  private void validateSslConnection(ChannelHandlerContext ctx) throws Exception {\n+    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n+    if (sslHandler != null) {\n+      sslHandler.handshakeFuture().addListener(future -> {\n+        if (!future.isSuccess()) {\n+          logger.debug(\"SSL handshake failed for channel: {}\", ctx.channel(), future.cause());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NTI3MQ==", "bodyText": "If you eat the exception, you shouldn't call super.channelActive() afterward.  Maybe better to rethrow?", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434165271", "createdAt": "2020-06-02T20:45:48Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final ServerSecurityService serverSecurityService;\n+  private final ServerMetrics serverMetrics;\n+\n+  public ServerSecurityChecker(ServerSecurityService serverSecurityService, ServerMetrics serverMetrics) {\n+    this.serverSecurityService =\n+        Objects.requireNonNull(serverSecurityService, \"server security service can not be null\");\n+    this.serverMetrics = Objects.requireNonNull(serverMetrics, \"serverMetrics can not be null\");\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Active \" + ctx.channel().remoteAddress());\n+    validateSslConnection(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Inactive \" + ctx.channel().remoteAddress());\n+    super.channelInactive(ctx);\n+  }\n+\n+  /**\n+   * Listen to the handshake future for the SSL termination, then apply the security policies, potentialy closing the\n+   * connection in case security check fails.\n+   * @param ctx the {@link ChannelHandlerContext}.\n+   */\n+  private void validateSslConnection(ChannelHandlerContext ctx) throws Exception {\n+    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n+    if (sslHandler != null) {\n+      sslHandler.handshakeFuture().addListener(future -> {\n+        if (!future.isSuccess()) {\n+          logger.debug(\"SSL handshake failed for channel: {}\", ctx.channel(), future.cause());\n+        } else {\n+          logger.debug(\"SSL handshake succedded for channel: {}\", ctx.channel(), future.cause());\n+          try {\n+            serverSecurityService.validateConnection(ctx, (r, e) -> {\n+              if (e != null) {\n+                logger.error(\"security validation failed for channel: {}\", ctx.channel(), e);\n+                serverMetrics.serverValidateConnectionFailure.inc();\n+                ctx.channel().close();\n+              } else {\n+                logger.info(\"security validation succeeded for channel: {}\", ctx.channel());\n+                serverMetrics.serverValidateConnectionSuccess.inc();\n+              }\n+            });\n+          } catch (Exception e) {\n+            logger.error(\"security validation failed for channel: {}\", ctx.channel(), e);\n+            serverMetrics.serverValidateConnectionFailure.inc();\n+            ctx.channel().close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NTgzNA==", "bodyText": "don't need this. here", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434165834", "createdAt": "2020-06-02T20:47:02Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/StorageServerNettyFactory.java", "diffHunk": "@@ -61,10 +65,11 @@ public StorageServerNettyFactory(int http2Port, VerifiableProperties verifiableP\n     nettyMetrics = new NettyMetrics(metricRegistry);\n     Http2ClientConfig http2ClientConfig = new Http2ClientConfig(verifiableProperties);\n     ConnectionStatsHandler connectionStatsHandler = new ConnectionStatsHandler(nettyMetrics);\n+    this.serverSecurityChecker = new ServerSecurityChecker(serverSecurityService, serverMetrics);\n \n     Map<Integer, ChannelInitializer<SocketChannel>> initializers = Collections.singletonMap(http2Port,\n-        new StorageServerNettyChannelInitializer(nettyConfig, http2ClientConfig, performanceConfig, nettyMetrics, connectionStatsHandler,\n-            requestHandler, sslFactory, metricRegistry));\n+        new StorageServerNettyChannelInitializer(nettyConfig, http2ClientConfig, performanceConfig, nettyMetrics,\n+            connectionStatsHandler, requestHandler, sslFactory, metricRegistry, this.serverSecurityChecker));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4Nzg1Ng==", "bodyText": "Can omit this.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434187856", "createdAt": "2020-06-02T21:32:41Z", "author": {"login": "lightningrob"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "diffHunk": "@@ -232,6 +233,10 @@ public void startup() throws InstantiationException {\n         statsManager.start();\n       }\n \n+      ServerSecurityServiceFactory serverSecurityServiceFactory =\n+          Utils.getObj(serverConfig.serverSecurityServiceFactory, properties, this.metrics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNDM1Ng==", "bodyText": "securityServiceValidateConnectionTimeInMs should be measured around this call.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434204356", "createdAt": "2020-06-02T22:13:20Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/ServerSecurityChecker.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.server.ServerSecurityService;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Handler that performs any security validation on the new HTTP2 connection.\n+ */\n+@ChannelHandler.Sharable\n+public class ServerSecurityChecker extends ChannelInboundHandlerAdapter {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final ServerSecurityService serverSecurityService;\n+  private final ServerMetrics serverMetrics;\n+\n+  public ServerSecurityChecker(ServerSecurityService serverSecurityService, ServerMetrics serverMetrics) {\n+    this.serverSecurityService =\n+        Objects.requireNonNull(serverSecurityService, \"server security service can not be null\");\n+    this.serverMetrics = Objects.requireNonNull(serverMetrics, \"serverMetrics can not be null\");\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Active \" + ctx.channel().remoteAddress());\n+    validateSslConnection(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    logger.trace(\"Channel Inactive \" + ctx.channel().remoteAddress());\n+    super.channelInactive(ctx);\n+  }\n+\n+  /**\n+   * Listen to the handshake future for the SSL termination, then apply the security policies, potentialy closing the\n+   * connection in case security check fails.\n+   * @param ctx the {@link ChannelHandlerContext}.\n+   */\n+  private void validateSslConnection(ChannelHandlerContext ctx) throws Exception {\n+    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n+    if (sslHandler != null) {\n+      sslHandler.handshakeFuture().addListener(future -> {\n+        if (!future.isSuccess()) {\n+          logger.debug(\"SSL handshake failed for channel: {}\", ctx.channel(), future.cause());\n+        } else {\n+          logger.debug(\"SSL handshake succedded for channel: {}\", ctx.channel(), future.cause());\n+          try {\n+            serverSecurityService.validateConnection(ctx, (r, e) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNDcxNw==", "bodyText": "The timers should be moved to the calling method.  This is a no-op impl that doesn't need to be timed.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434204717", "createdAt": "2020-06-02T22:14:23Z", "author": {"login": "lightningrob"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.router.Callback;\n+import io.netty.channel.ChannelHandlerContext;\n+\n+/**\n+ * Default implementation of {@link ServerSecurityService} for Ambry that doesn't do any validations.\n+ */\n+public class AmbryServerSecurityService implements ServerSecurityService {\n+  private boolean isOpen;\n+  private final ServerConfig serverConfig;\n+  private final ServerMetrics serverMetrics;\n+\n+  public AmbryServerSecurityService(ServerConfig serverConfig, ServerMetrics serverMetrics) {\n+    this.serverConfig = serverConfig;\n+    this.serverMetrics = serverMetrics;\n+    this.isOpen = true;\n+  }\n+\n+  @Override\n+  public void validateConnection(ChannelHandlerContext ctx, Callback<Void> callback) {\n+    Exception exception = null;\n+    serverMetrics.securityServiceValidateConnectionRate.mark();\n+    long startTimeMs = System.currentTimeMillis();\n+    if (!isOpen) {\n+      exception = new RestServiceException(\"ServerSecurityService is closed\", RestServiceErrorCode.ServiceUnavailable);\n+    } else if (ctx == null) {\n+      throw new IllegalArgumentException(\"ctx is null\");\n+    }\n+    serverMetrics.securityServiceValidateConnectionTimeInMs.update(System.currentTimeMillis() - startTimeMs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNDg4Mw==", "bodyText": "Remove timer.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434204883", "createdAt": "2020-06-02T22:14:54Z", "author": {"login": "lightningrob"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServerSecurityService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.router.Callback;\n+import io.netty.channel.ChannelHandlerContext;\n+\n+/**\n+ * Default implementation of {@link ServerSecurityService} for Ambry that doesn't do any validations.\n+ */\n+public class AmbryServerSecurityService implements ServerSecurityService {\n+  private boolean isOpen;\n+  private final ServerConfig serverConfig;\n+  private final ServerMetrics serverMetrics;\n+\n+  public AmbryServerSecurityService(ServerConfig serverConfig, ServerMetrics serverMetrics) {\n+    this.serverConfig = serverConfig;\n+    this.serverMetrics = serverMetrics;\n+    this.isOpen = true;\n+  }\n+\n+  @Override\n+  public void validateConnection(ChannelHandlerContext ctx, Callback<Void> callback) {\n+    Exception exception = null;\n+    serverMetrics.securityServiceValidateConnectionRate.mark();\n+    long startTimeMs = System.currentTimeMillis();\n+    if (!isOpen) {\n+      exception = new RestServiceException(\"ServerSecurityService is closed\", RestServiceErrorCode.ServiceUnavailable);\n+    } else if (ctx == null) {\n+      throw new IllegalArgumentException(\"ctx is null\");\n+    }\n+    serverMetrics.securityServiceValidateConnectionTimeInMs.update(System.currentTimeMillis() - startTimeMs);\n+    callback.onCompletion(null, exception);\n+  }\n+\n+  @Override\n+  public void validateRequest(RestRequest restRequest, Callback<Void> callback) {\n+    Exception exception = null;\n+    serverMetrics.securityServiceValidateRequestRate.mark();\n+    long startTimeMs = System.currentTimeMillis();\n+    if (!isOpen) {\n+      exception = new RestServiceException(\"ServerSecurityService is closed\", RestServiceErrorCode.ServiceUnavailable);\n+    } else if (restRequest == null) {\n+      throw new IllegalArgumentException(\"restRequest is null\");\n+    }\n+    serverMetrics.securityServiceValidateRequestTimeInMs.update(System.currentTimeMillis() - startTimeMs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNTE5OQ==", "bodyText": "Javadocs on class and methods.", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434205199", "createdAt": "2020-06-02T22:15:42Z", "author": {"login": "lightningrob"}, "path": "ambry-server/src/test/java/com/github/ambry/server/AmbryServerSecurityServiceTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.protocol.AmbryRequests;\n+import com.github.ambry.rest.MockChannelHandlerContext;\n+import com.github.ambry.rest.MockRestRequest;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestServiceErrorCode;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.ThrowingConsumer;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class AmbryServerSecurityServiceTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNTM3MQ==", "bodyText": "2020", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434205371", "createdAt": "2020-06-02T22:16:06Z", "author": {"login": "lightningrob"}, "path": "ambry-test-utils/src/main/java/com/github/ambry/rest/MockChannelHandlerContext.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNTcyMQ==", "bodyText": "Agree with Ze it would be best to avoid.  Also, doesn't netty-all include netty-buffer?", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r434205721", "createdAt": "2020-06-02T22:17:04Z", "author": {"login": "lightningrob"}, "path": "build.gradle", "diffHunk": "@@ -189,6 +189,7 @@ project(':ambry-api') {\n         compile \"org.codehaus.jackson:jackson-core-asl:$jacksonVersion\"\n         compile \"org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion\"\n         compile \"io.netty:netty-buffer:$nettyVersion\"\n+        compile \"io.netty:netty-all:$nettyVersion\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7e789e813673565c6e8e824758139a6fc88d9a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcaf581f0cd3ada5942fdd1697b6689c8f0def6f", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/bcaf581f0cd3ada5942fdd1697b6689c8f0def6f", "committedDate": "2020-06-03T00:19:01Z", "message": "addressing more review comments.\nchanging the validateConnection() api to accept a SSLSession instead\nof netty ChannelHandlerContext. It removes the netty dependency from\nambry-api as well, also removed the MockChannelHandlerContext class as\nthis is not needed anymore. also moved the timer update to calling\nmethod."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "178ad821861f9fbdd8957c06e39b743b292202ba", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/178ad821861f9fbdd8957c06e39b743b292202ba", "committedDate": "2020-06-03T22:07:06Z", "message": "a minor change to pass clusterMap object to the security service factory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTI0NDQ3", "url": "https://github.com/linkedin/ambry/pull/1542#pullrequestreview-425524447", "createdAt": "2020-06-05T18:16:24Z", "commit": {"oid": "178ad821861f9fbdd8957c06e39b743b292202ba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjcyMTY4", "url": "https://github.com/linkedin/ambry/pull/1542#pullrequestreview-425672168", "createdAt": "2020-06-05T23:01:21Z", "commit": {"oid": "178ad821861f9fbdd8957c06e39b743b292202ba"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzowMToyMVrOGf_iMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzowNzoxN1rOGf_mqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5OTk4Ng==", "bodyText": "s->S", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436199986", "createdAt": "2020-06-05T23:01:21Z", "author": {"login": "zzmao"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/ServerMetrics.java", "diffHunk": "@@ -422,6 +433,11 @@ public ServerMetrics(MetricRegistry registry, Class<?> requestClass, Class<?> se\n       serverShutdownTimeInMs = null;\n     }\n \n+    securityServiceValidateConnectionTimeInMs =\n+        registry.histogram(MetricRegistry.name(requestClass, \"securityServiceValidateConnectionTimeInMs\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178ad821861f9fbdd8957c06e39b743b292202ba"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDAxMQ==", "bodyText": "s->S", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436200011", "createdAt": "2020-06-05T23:01:27Z", "author": {"login": "zzmao"}, "path": "ambry-commons/src/main/java/com/github/ambry/commons/ServerMetrics.java", "diffHunk": "@@ -422,6 +433,11 @@ public ServerMetrics(MetricRegistry registry, Class<?> requestClass, Class<?> se\n       serverShutdownTimeInMs = null;\n     }\n \n+    securityServiceValidateConnectionTimeInMs =\n+        registry.histogram(MetricRegistry.name(requestClass, \"securityServiceValidateConnectionTimeInMs\"));\n+    securityServiceValidateRequestTimeInMs =\n+        registry.histogram(MetricRegistry.name(requestClass, \"securityServiceValidateRequestTimeInMs\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178ad821861f9fbdd8957c06e39b743b292202ba"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDI2Nw==", "bodyText": "Is ClusterMap needed?", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436200267", "createdAt": "2020-06-05T23:02:46Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServerSecurityServiceFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.clustermap.ClusterMap;\n+import com.github.ambry.commons.ServerMetrics;\n+import com.github.ambry.config.ServerConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+\n+/**\n+ * Default implementation of {@link ServerSecurityServiceFactory} for Ambry\n+ * <p/>\n+ * Returns a new instance of {@link AmbryServerSecurityService} on {@link #getServerSecurityService()} call.\n+ */\n+public class AmbryServerSecurityServiceFactory implements ServerSecurityServiceFactory {\n+\n+  private final ServerConfig serverConfig;\n+  private final ServerMetrics serverMetrics;\n+\n+  public AmbryServerSecurityServiceFactory(VerifiableProperties verifiableProperties, ServerMetrics serverMetrics,\n+      ClusterMap clusterMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178ad821861f9fbdd8957c06e39b743b292202ba"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTEzMA==", "bodyText": "Why pass in serverSecurityService here?\nBTW, this StorageRestRequestService will be deprecated in #1554", "url": "https://github.com/linkedin/ambry/pull/1542#discussion_r436201130", "createdAt": "2020-06-05T23:07:17Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/main/java/com/github/ambry/server/StorageRestRequestService.java", "diffHunk": "@@ -31,9 +31,12 @@\n public class StorageRestRequestService implements RestRequestService {\n   private static final Logger logger = LoggerFactory.getLogger(StorageRestRequestService.class);\n   NettyServerRequestResponseChannel requestResponseChannel;\n+  ServerSecurityService serverSecurityService;\n \n-  public StorageRestRequestService(NettyServerRequestResponseChannel requestResponseChannel) {\n+  public StorageRestRequestService(NettyServerRequestResponseChannel requestResponseChannel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178ad821861f9fbdd8957c06e39b743b292202ba"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a42af346e7bb12fa343a5aeeab4e64b3a8d31e1d", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/a42af346e7bb12fa343a5aeeab4e64b3a8d31e1d", "committedDate": "2020-06-05T23:40:19Z", "message": "addressing review comments.\nnaming correction, reverting the changes in StorageRestRequestService as\nthis is not uesd right now.\nA change in ambry server startup sequence. this change is needed for\nambry server for proper initialization of other downstream security\nservices."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe6d262645702bb1a43d34032e6aa58e9bb7e33d", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/fe6d262645702bb1a43d34032e6aa58e9bb7e33d", "committedDate": "2020-06-08T23:58:16Z", "message": "addressing more review comments.\n1. passing metricregistry directly instead of clustermap to security\n   service factory class.\n2. moving the clustermap initialzation to constructor caused many\n   intTest failures because of the assumptions made that server are\nrestartable with shutdown/startup call. This is no longer true as some\ninitializations are happening in constructor itself.Made\ncorresponding fixes in MockCluster object to reinit the server objects\nwhen a shutdown/restart was called previously. allTests are passing\nnow."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzI2Njk5", "url": "https://github.com/linkedin/ambry/pull/1542#pullrequestreview-426726699", "createdAt": "2020-06-09T01:24:12Z", "commit": {"oid": "fe6d262645702bb1a43d34032e6aa58e9bb7e33d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzYyMjc1", "url": "https://github.com/linkedin/ambry/pull/1542#pullrequestreview-426762275", "createdAt": "2020-06-09T03:21:29Z", "commit": {"oid": "fe6d262645702bb1a43d34032e6aa58e9bb7e33d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1082, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}