{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODk2ODY3", "number": 1657, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo0OTo0NlrOEuG1Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMzowNTozMFrOEvlGgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzgxODcxOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo0OTo0N1rOHiTQfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo0OTo0N1rOHiTQfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyOTE0OQ==", "bodyText": "nit: typo for word cache", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r505729149", "createdAt": "2020-10-15T17:49:47Z", "author": {"login": "Arun-LinkedIn"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -152,6 +156,8 @@ void fetchAndUpdateCache() {\n         } finally {\n           infoMapLock.writeLock().unlock();\n         }\n+        // At this point we can safely say cash is refreshed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f0ec1df12d06475ea55b3805d72db36ba2bd66f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTU0NDY5OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzowODo1OFrOHkYrjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMzo0MToxMlrOHklZ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTE0OA==", "bodyText": "It seems this method uses both return false and AccountServiceException to handle failure cases. Can we throw AccountServiceException everywhere to make it consistent? Also we can consider removing boolean return value, if the method goes through without exception, then it should be a success.", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r507915148", "createdAt": "2020-10-19T17:08:58Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -263,7 +263,7 @@ public boolean updateAccounts(Collection<Account> accounts) {\n    * @return True when the update operation succeeds.\n    */\n   boolean updateAccountsWithAccountMetadataStore(Collection<Account> accounts,\n-      AccountMetadataStore accountMetadataStore) {\n+      AccountMetadataStore accountMetadataStore) throws AccountServiceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f0ec1df12d06475ea55b3805d72db36ba2bd66f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTYwMA==", "bodyText": "Feel free to add new type of error code to AccountServiceErrorCode", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r507915600", "createdAt": "2020-10-19T17:09:40Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -263,7 +263,7 @@ public boolean updateAccounts(Collection<Account> accounts) {\n    * @return True when the update operation succeeds.\n    */\n   boolean updateAccountsWithAccountMetadataStore(Collection<Account> accounts,\n-      AccountMetadataStore accountMetadataStore) {\n+      AccountMetadataStore accountMetadataStore) throws AccountServiceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTE0OA=="}, "originalCommit": {"oid": "2f0ec1df12d06475ea55b3805d72db36ba2bd66f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExMzIyNw==", "bodyText": "I didn't know what to do about the case where config.updateDisabled = true.  What exception should that be?  Kind of seems like IllegalState.  Do we ever actually turn off account updates?", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r508113227", "createdAt": "2020-10-19T23:07:38Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -263,7 +263,7 @@ public boolean updateAccounts(Collection<Account> accounts) {\n    * @return True when the update operation succeeds.\n    */\n   boolean updateAccountsWithAccountMetadataStore(Collection<Account> accounts,\n-      AccountMetadataStore accountMetadataStore) {\n+      AccountMetadataStore accountMetadataStore) throws AccountServiceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTE0OA=="}, "originalCommit": {"oid": "2f0ec1df12d06475ea55b3805d72db36ba2bd66f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyMzYxMg==", "bodyText": "Maybe this case justifies TemporaryDisabled and from customer point's of view, it's 503 (Unavailable) error.\nThis config was introduced to migrate ZK based metadata store to router based metadata store. It gives us an option to temporarily turn off any account update during the migration (to avoid potential race condition).\nWe can remove this or if you think it's useful for account service migration, then we can keep it.", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r508123612", "createdAt": "2020-10-19T23:41:12Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -263,7 +263,7 @@ public boolean updateAccounts(Collection<Account> accounts) {\n    * @return True when the update operation succeeds.\n    */\n   boolean updateAccountsWithAccountMetadataStore(Collection<Account> accounts,\n-      AccountMetadataStore accountMetadataStore) {\n+      AccountMetadataStore accountMetadataStore) throws AccountServiceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTE0OA=="}, "originalCommit": {"oid": "2f0ec1df12d06475ea55b3805d72db36ba2bd66f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTU4MzIwOnYy", "diffSide": "RIGHT", "path": "ambry-test-utils/src/main/java/com/github/ambry/account/InMemAccountService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoxODo1NVrOHkZC7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMzoxMDo0NFrOHkk1Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMTEzNA==", "bodyText": "Is this because  throwing AccountServiceException will bring lots of changes in too many places?", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r507921134", "createdAt": "2020-10-19T17:18:55Z", "author": {"login": "jsjtzyy"}, "path": "ambry-test-utils/src/main/java/com/github/ambry/account/InMemAccountService.java", "diffHunk": "@@ -167,7 +167,11 @@ public synchronized void clear() {\n    */\n   public synchronized Account createAndAddRandomAccount() {\n     Account account = generateRandomAccount();\n-    updateAccounts(Collections.singletonList(account));\n+    try {\n+      updateAccounts(Collections.singletonList(account));\n+    } catch (AccountServiceException ase) {\n+      throw new IllegalStateException(ase);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f0ec1df12d06475ea55b3805d72db36ba2bd66f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNDE5MQ==", "bodyText": "Pretty much.", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r508114191", "createdAt": "2020-10-19T23:10:44Z", "author": {"login": "lightningrob"}, "path": "ambry-test-utils/src/main/java/com/github/ambry/account/InMemAccountService.java", "diffHunk": "@@ -167,7 +167,11 @@ public synchronized void clear() {\n    */\n   public synchronized Account createAndAddRandomAccount() {\n     Account account = generateRandomAccount();\n-    updateAccounts(Collections.singletonList(account));\n+    try {\n+      updateAccounts(Collections.singletonList(account));\n+    } catch (AccountServiceException ase) {\n+      throw new IllegalStateException(ase);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMTEzNA=="}, "originalCommit": {"oid": "2f0ec1df12d06475ea55b3805d72db36ba2bd66f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzI2NDAzOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMzowNTozMFrOHko5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNDoyODowMFrOHkqLjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4MDg0OQ==", "bodyText": "nit:  This can be BadRequest AccountServiceErrorCode. (We can do this in future PR)", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r508180849", "createdAt": "2020-10-20T03:05:30Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -199,20 +199,17 @@ public Account getAccountByName(String accountName) {\n   }\n \n   @Override\n-  public boolean updateAccounts(Collection<Account> accounts) throws AccountServiceException {\n+  public void updateAccounts(Collection<Account> accounts) throws AccountServiceException {\n     Objects.requireNonNull(accounts, \"accounts cannot be null\");\n     if (accounts.isEmpty()) {\n-      logger.debug(\"Empty account collection to update.\");\n-      return false;\n+      throw new IllegalArgumentException(\"Empty account collection to update.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e14f107e27851f8c4ee1fe778a5ed447c98d5584"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIwMTg3MA==", "bodyText": "ok", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r508201870", "createdAt": "2020-10-20T04:28:00Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -199,20 +199,17 @@ public Account getAccountByName(String accountName) {\n   }\n \n   @Override\n-  public boolean updateAccounts(Collection<Account> accounts) throws AccountServiceException {\n+  public void updateAccounts(Collection<Account> accounts) throws AccountServiceException {\n     Objects.requireNonNull(accounts, \"accounts cannot be null\");\n     if (accounts.isEmpty()) {\n-      logger.debug(\"Empty account collection to update.\");\n-      return false;\n+      throw new IllegalArgumentException(\"Empty account collection to update.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4MDg0OQ=="}, "originalCommit": {"oid": "e14f107e27851f8c4ee1fe778a5ed447c98d5584"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1078, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}