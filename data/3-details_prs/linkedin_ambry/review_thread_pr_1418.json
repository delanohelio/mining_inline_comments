{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NjQwMzk4", "number": 1418, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDo0NDoxM1rODmKPHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMzowMDowNFrODnUYVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzQwMTg4OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDo0NDoxM1rOFza0vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxNTozMFrOFz3z5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MTE4Mg==", "bodyText": "Minor: To be consistent with java doc of doWithRetries method, I think last parameter should be cloudBlobMetadata.getPartitionId().toPathString().", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389461182", "createdAt": "2020-03-09T04:44:13Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -184,14 +185,14 @@ void downloadBlob(CloudBlobMetadata cloudBlobMetadata, BlobId blobId, OutputStre\n         requestAgent.doWithRetries(() -> {\n           cloudDestination.downloadBlob(blobId, new ByteBufferOutputStream(encryptedBlob));\n           return null;\n-        }, \"Download\");\n+        }, \"Download\", cloudBlobMetadata.getPartitionId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNjEwMg==", "bodyText": "This is CloudBlobMetadata not BlobId, and  getPartitionId() already returns the partition id string.", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389936102", "createdAt": "2020-03-09T20:15:30Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -184,14 +185,14 @@ void downloadBlob(CloudBlobMetadata cloudBlobMetadata, BlobId blobId, OutputStre\n         requestAgent.doWithRetries(() -> {\n           cloudDestination.downloadBlob(blobId, new ByteBufferOutputStream(encryptedBlob));\n           return null;\n-        }, \"Download\");\n+        }, \"Download\", cloudBlobMetadata.getPartitionId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MTE4Mg=="}, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzQwMjA2OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDo0NDoyNFrOFza03A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDo0NDoyNFrOFza03A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MTIxMg==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389461212", "createdAt": "2020-03-09T04:44:24Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -184,14 +185,14 @@ void downloadBlob(CloudBlobMetadata cloudBlobMetadata, BlobId blobId, OutputStre\n         requestAgent.doWithRetries(() -> {\n           cloudDestination.downloadBlob(blobId, new ByteBufferOutputStream(encryptedBlob));\n           return null;\n-        }, \"Download\");\n+        }, \"Download\", cloudBlobMetadata.getPartitionId());\n         ByteBuffer decryptedBlob = cryptoAgent.decrypt(encryptedBlob);\n         outputStream.write(decryptedBlob.array());\n       } else {\n         requestAgent.doWithRetries(() -> {\n           cloudDestination.downloadBlob(blobId, outputStream);\n           return null;\n-        }, \"Download\");\n+        }, \"Download\", cloudBlobMetadata.getPartitionId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzQxMTUwOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDo1MTo1OFrOFza6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDo1MTo1OFrOFza6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MjU0Ng==", "bodyText": "typo: occurred", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389462546", "createdAt": "2020-03-09T04:51:58Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -184,14 +185,14 @@ void downloadBlob(CloudBlobMetadata cloudBlobMetadata, BlobId blobId, OutputStre\n         requestAgent.doWithRetries(() -> {\n           cloudDestination.downloadBlob(blobId, new ByteBufferOutputStream(encryptedBlob));\n           return null;\n-        }, \"Download\");\n+        }, \"Download\", cloudBlobMetadata.getPartitionId());\n         ByteBuffer decryptedBlob = cryptoAgent.decrypt(encryptedBlob);\n         outputStream.write(decryptedBlob.array());\n       } else {\n         requestAgent.doWithRetries(() -> {\n           cloudDestination.downloadBlob(blobId, outputStream);\n           return null;\n-        }, \"Download\");\n+        }, \"Download\", cloudBlobMetadata.getPartitionId());\n       }\n     } catch (CloudStorageException | GeneralSecurityException | IOException e) {\n       throw new StoreException(\"Error occured in downloading blob for blobid :\" + blobId, StoreErrorCodes.IOError);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzQxMzAzOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDo1MzoyM1rOFza69Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDo0NjowMVrOFz4vxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2Mjc3Mw==", "bodyText": "add java doc for this method please (I am trying to understand what does Internal mean in the name of this method)", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389462773", "createdAt": "2020-03-09T04:53:23Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -316,7 +317,7 @@ private void putBlob(MessageInfo messageInfo, ByteBuffer messageBuf, long size)\n   private void uploadBlobInternal(BlobId blobId, long bufferlen, CloudBlobMetadata blobMetadata,\n       InputStream inputStream) throws CloudStorageException {\n     requestAgent.doWithRetries(() -> cloudDestination.uploadBlob(blobId, bufferlen, blobMetadata, inputStream),\n-        \"Upload\");\n+        \"Upload\", partitionId.toPathString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1MTQyOQ==", "bodyText": "That method didn't really add anything, so I removed it.", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389951429", "createdAt": "2020-03-09T20:46:01Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -316,7 +317,7 @@ private void putBlob(MessageInfo messageInfo, ByteBuffer messageBuf, long size)\n   private void uploadBlobInternal(BlobId blobId, long bufferlen, CloudBlobMetadata blobMetadata,\n       InputStream inputStream) throws CloudStorageException {\n     requestAgent.doWithRetries(() -> cloudDestination.uploadBlob(blobId, bufferlen, blobMetadata, inputStream),\n-        \"Upload\");\n+        \"Upload\", partitionId.toPathString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2Mjc3Mw=="}, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzQxMzk1OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDo1NDowMFrOFza7dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDo1NDowMFrOFza7dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MjkwMQ==", "bodyText": "nit: bufferlen -> bufferLen", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389462901", "createdAt": "2020-03-09T04:54:00Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -316,7 +317,7 @@ private void putBlob(MessageInfo messageInfo, ByteBuffer messageBuf, long size)\n   private void uploadBlobInternal(BlobId blobId, long bufferlen, CloudBlobMetadata blobMetadata,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzQ0ODUzOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudDestination.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNToyMzoxNVrOFzbPLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNToyMzoxNVrOFzbPLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2Nzk0OQ==", "bodyText": "nit: referencing the deleted blobs", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389467949", "createdAt": "2020-03-09T05:23:15Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudDestination.java", "diffHunk": "@@ -74,26 +74,28 @@ boolean uploadBlob(BlobId blobId, long inputLength, CloudBlobMetadata cloudBlobM\n   Map<String, CloudBlobMetadata> getBlobMetadata(List<BlobId> blobIds) throws CloudStorageException;\n \n   /**\n-   * Get the list of blobs in the specified partition that have been deleted or expired for at least the\n+   * Get the list of blobs in the specified partition that have been deleted for at least the\n    * configured retention period.\n    * @param partitionPath the partition to query.\n    * @param cutoffTime the cutoff time for the query time range.\n    * @param maxEntries the max number of metadata records to return.\n    * @return a List of {@link CloudBlobMetadata} referencing the dead blobs found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzQ0ODg5OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudDestination.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNToyMzozNVrOFzbPaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNToyMzozNVrOFzbPaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2ODAwOQ==", "bodyText": "nit: referencing the expired blobs.", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389468009", "createdAt": "2020-03-09T05:23:35Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudDestination.java", "diffHunk": "@@ -74,26 +74,28 @@ boolean uploadBlob(BlobId blobId, long inputLength, CloudBlobMetadata cloudBlobM\n   Map<String, CloudBlobMetadata> getBlobMetadata(List<BlobId> blobIds) throws CloudStorageException;\n \n   /**\n-   * Get the list of blobs in the specified partition that have been deleted or expired for at least the\n+   * Get the list of blobs in the specified partition that have been deleted for at least the\n    * configured retention period.\n    * @param partitionPath the partition to query.\n    * @param cutoffTime the cutoff time for the query time range.\n    * @param maxEntries the max number of metadata records to return.\n    * @return a List of {@link CloudBlobMetadata} referencing the dead blobs found.\n    * @throws CloudStorageException\n    */\n-  List<CloudBlobMetadata> getDeadBlobs(String partitionPath, long cutoffTime, int maxEntries)\n+  List<CloudBlobMetadata> getDeletedBlobs(String partitionPath, long cutoffTime, int maxEntries)\n       throws CloudStorageException;\n \n   /**\n-   * Get the number of blobs in the specified partition that have been deleted or expired for at least the\n+   * Get the list of blobs in the specified partition that have been expired for at least the\n    * configured retention period.\n    * @param partitionPath the partition to query.\n    * @param cutoffTime the cutoff time for the query time range.\n-   * @return the number of dead blobs found.\n+   * @param maxEntries the max number of metadata records to return.\n+   * @return a List of {@link CloudBlobMetadata} referencing the dead blobs found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjAwMzAwOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageCompactor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODowODo1M1rOFzzxFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODowODo1M1rOFzzxFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2OTg0NQ==", "bodyText": "please add java docs to these methods", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389869845", "createdAt": "2020-03-09T18:08:53Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageCompactor.java", "diffHunk": "@@ -96,28 +99,53 @@ public int compactPartitions() {\n     return totalBlobsPurged;\n   }\n \n+  public CloudBlobMetadata getOldestExpiredBlob(String partitionPath) throws CloudStorageException {\n+    List<CloudBlobMetadata> deadBlobs = requestAgent.doWithRetries(\n+        () -> cloudDestination.getExpiredBlobs(partitionPath, System.currentTimeMillis(), queryLimit), \"GetDeadBlobs\",\n+        partitionPath);\n+    return deadBlobs.isEmpty() ? null : deadBlobs.get(0);\n+  }\n+\n+  public CloudBlobMetadata getOldestDeletedBlob(String partitionPath) throws CloudStorageException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjE2MDEyOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODo1NDo0NFrOFz1SpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDo0NToxOFrOFz4uTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NDgyMQ==", "bodyText": "Looks like DEFAULT_COSMOS_MAX_RETRIES is never used for now. Will it be adopted in future PR?", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389894821", "createdAt": "2020-03-09T18:54:44Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudConfig.java", "diffHunk": "@@ -29,12 +28,20 @@\n   public static final String COSMOS_COLLECTION_LINK = \"cosmos.collection.link\";\n   public static final String COSMOS_KEY = \"cosmos.key\";\n   public static final String COSMOS_DIRECT_HTTPS = \"cosmos.direct.https\";\n+  public static final String COSMOS_QUERY_BATCH_SIZE = \"cosmos.query.batch.size\";\n+  public static final String COSMOS_REQUEST_CHARGE_THRESHOLD = \"cosmos.request.charge.threshold\";\n+  public static final String COSMOS_CONTINUATION_TOKEN_LIMIT = \"cosmos.continuation.token.limit\";\n   public static final String AZURE_PURGE_BATCH_SIZE = \"azure.purge.batch.size\";\n   public static final String AZURE_NAME_SCHEME_VERSION = \"azure.name.scheme.version\";\n   public static final String AZURE_BLOB_CONTAINER_STRATEGY = \"azure.blob.container.strategy\";\n   // Per docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   public static final int MAX_PURGE_BATCH_SIZE = 256;\n   public static final int DEFAULT_PURGE_BATCH_SIZE = 100;\n+  public static final int DEFAULT_QUERY_BATCH_SIZE = 100;\n+  public static final int DEFAULT_COSMOS_MAX_RETRIES = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1MTA1NQ==", "bodyText": "Removed", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389951055", "createdAt": "2020-03-09T20:45:18Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudConfig.java", "diffHunk": "@@ -29,12 +28,20 @@\n   public static final String COSMOS_COLLECTION_LINK = \"cosmos.collection.link\";\n   public static final String COSMOS_KEY = \"cosmos.key\";\n   public static final String COSMOS_DIRECT_HTTPS = \"cosmos.direct.https\";\n+  public static final String COSMOS_QUERY_BATCH_SIZE = \"cosmos.query.batch.size\";\n+  public static final String COSMOS_REQUEST_CHARGE_THRESHOLD = \"cosmos.request.charge.threshold\";\n+  public static final String COSMOS_CONTINUATION_TOKEN_LIMIT = \"cosmos.continuation.token.limit\";\n   public static final String AZURE_PURGE_BATCH_SIZE = \"azure.purge.batch.size\";\n   public static final String AZURE_NAME_SCHEME_VERSION = \"azure.name.scheme.version\";\n   public static final String AZURE_BLOB_CONTAINER_STRATEGY = \"azure.blob.container.strategy\";\n   // Per docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   public static final int MAX_PURGE_BATCH_SIZE = 256;\n   public static final int DEFAULT_PURGE_BATCH_SIZE = 100;\n+  public static final int DEFAULT_QUERY_BATCH_SIZE = 100;\n+  public static final int DEFAULT_COSMOS_MAX_RETRIES = 5;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NDgyMQ=="}, "originalCommit": {"oid": "c77f920c8b5da78550d535c34aa5ed7b4dcd88b4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjUyMDg2OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageCompactor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDo0NzozMlrOFz4zEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoxMjo0MVrOF1NccA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1MjI3Mw==", "bodyText": "should the query limit be 1 here and in the method below since you are only interested in a single blob?", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r389952273", "createdAt": "2020-03-09T20:47:32Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageCompactor.java", "diffHunk": "@@ -96,28 +99,65 @@ public int compactPartitions() {\n     return totalBlobsPurged;\n   }\n \n+  /**\n+   * Returns the expired blob in the specified partition with the earliest expiration time.\n+   * @param partitionPath the partition to check.\n+   * @return the {@link CloudBlobMetadata} for the expired blob, or NULL if none was found.\n+   * @throws CloudStorageException\n+   */\n+  public CloudBlobMetadata getOldestExpiredBlob(String partitionPath) throws CloudStorageException {\n+    List<CloudBlobMetadata> deadBlobs = requestAgent.doWithRetries(\n+        () -> cloudDestination.getExpiredBlobs(partitionPath, System.currentTimeMillis(), queryLimit), \"GetDeadBlobs\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31756543eab6548113ef62088e0f57ea1c00c955"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzOTEyMA==", "bodyText": "Yes, changed.", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r391339120", "createdAt": "2020-03-12T00:12:41Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageCompactor.java", "diffHunk": "@@ -96,28 +99,65 @@ public int compactPartitions() {\n     return totalBlobsPurged;\n   }\n \n+  /**\n+   * Returns the expired blob in the specified partition with the earliest expiration time.\n+   * @param partitionPath the partition to check.\n+   * @return the {@link CloudBlobMetadata} for the expired blob, or NULL if none was found.\n+   * @throws CloudStorageException\n+   */\n+  public CloudBlobMetadata getOldestExpiredBlob(String partitionPath) throws CloudStorageException {\n+    List<CloudBlobMetadata> deadBlobs = requestAgent.doWithRetries(\n+        () -> cloudDestination.getExpiredBlobs(partitionPath, System.currentTimeMillis(), queryLimit), \"GetDeadBlobs\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1MjI3Mw=="}, "originalCommit": {"oid": "31756543eab6548113ef62088e0f57ea1c00c955"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzY5MDUxOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjowMzoxOVrOF09zWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjowMzoxOVrOF09zWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4Mjg0Mw==", "bodyText": "Could you put the unit in the config name: cosmosContinuationTokenLimitKB", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r391082843", "createdAt": "2020-03-11T16:03:19Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudConfig.java", "diffHunk": "@@ -74,6 +80,24 @@\n   @Default(\"Partition\")\n   public final String azureBlobContainerStrategy;\n \n+  /**\n+   * Max number of metadata records to fetch in a single Cosmos query.\n+   */\n+  @Config(COSMOS_QUERY_BATCH_SIZE)\n+  public final int cosmosQueryBatchSize;\n+\n+  /**\n+   * The size limit in KB on Cosmos continuation token.\n+   */\n+  @Config(COSMOS_CONTINUATION_TOKEN_LIMIT)\n+  public final int cosmosContinuationTokenLimit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31756543eab6548113ef62088e0f57ea1c00c955"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzY5NTI5OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/CosmosDataAccessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjowNDoyNlrOF092TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoxNDo0OVrOF1Nekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MzU5Nw==", "bodyText": "What happens when the continuation token gets bigger than this limit? Does the query iterator stop returning new values until another query is made?", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r391083597", "createdAt": "2020-03-11T16:04:26Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/CosmosDataAccessor.java", "diffHunk": "@@ -169,54 +208,118 @@ void testConnectivity() {\n   }\n \n   /**\n-   * Get the list of blobs in the specified partition matching the specified DocumentDB query.\n+   * Get the list of blobs in the specified partition that have been deleted or expired for at least the\n+   * configured retention period.\n    * @param partitionPath the partition to query.\n-   * @param querySpec the DocumentDB query to execute.\n-   * @param timer the {@link Timer} to use to record query time (excluding waiting).\n-   * @return a List of {@link CloudBlobMetadata} referencing the matching blobs.\n+   * @param fieldName the field name to query on. Allowed values are {@link CloudBlobMetadata#FIELD_DELETION_TIME} and\n+   *                  {@link CloudBlobMetadata#FIELD_EXPIRATION_TIME}.\n+   * @param retentionThreshold the latest time where blobs are considered dead if they were expired\n+   *                           or deleted before that point.\n+   * @param maxEntries the max number of metadata records to return.\n+   * @return a List of {@link CloudBlobMetadata} referencing the dead blobs found.\n+   * @throws CloudStorageException\n    */\n-  List<CloudBlobMetadata> queryMetadata(String partitionPath, SqlQuerySpec querySpec, Timer timer)\n+  List<CloudBlobMetadata> getDeadBlobs(String partitionPath, String fieldName, long retentionThreshold, int maxEntries)\n       throws DocumentClientException {\n-    azureMetrics.documentQueryCount.inc();\n+\n+    String deadBlobsQuery;\n+    if (fieldName.equals(CloudBlobMetadata.FIELD_DELETION_TIME)) {\n+      deadBlobsQuery = DELETED_BLOBS_QUERY;\n+    } else if (fieldName.equals(CloudBlobMetadata.FIELD_EXPIRATION_TIME)) {\n+      deadBlobsQuery = EXPIRED_BLOBS_QUERY;\n+    } else {\n+      throw new IllegalArgumentException(\"Invalid field: \" + fieldName);\n+    }\n+    SqlQuerySpec querySpec = new SqlQuerySpec(deadBlobsQuery,\n+        new SqlParameterCollection(new SqlParameter(LIMIT_PARAM, maxEntries),\n+            new SqlParameter(THRESHOLD_PARAM, retentionThreshold)));\n+\n     FeedOptions feedOptions = new FeedOptions();\n+    feedOptions.setMaxItemCount(maxEntries);\n+    feedOptions.setResponseContinuationTokenLimitInKb(continuationTokenLimit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31756543eab6548113ef62088e0f57ea1c00c955"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzOTY2Nw==", "bodyText": "No, acc to MS it just makes subsequent queries (during paging) less efficient if it can't stuff as much state in the token.  Doubt it will affect us much.", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r391339667", "createdAt": "2020-03-12T00:14:49Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/CosmosDataAccessor.java", "diffHunk": "@@ -169,54 +208,118 @@ void testConnectivity() {\n   }\n \n   /**\n-   * Get the list of blobs in the specified partition matching the specified DocumentDB query.\n+   * Get the list of blobs in the specified partition that have been deleted or expired for at least the\n+   * configured retention period.\n    * @param partitionPath the partition to query.\n-   * @param querySpec the DocumentDB query to execute.\n-   * @param timer the {@link Timer} to use to record query time (excluding waiting).\n-   * @return a List of {@link CloudBlobMetadata} referencing the matching blobs.\n+   * @param fieldName the field name to query on. Allowed values are {@link CloudBlobMetadata#FIELD_DELETION_TIME} and\n+   *                  {@link CloudBlobMetadata#FIELD_EXPIRATION_TIME}.\n+   * @param retentionThreshold the latest time where blobs are considered dead if they were expired\n+   *                           or deleted before that point.\n+   * @param maxEntries the max number of metadata records to return.\n+   * @return a List of {@link CloudBlobMetadata} referencing the dead blobs found.\n+   * @throws CloudStorageException\n    */\n-  List<CloudBlobMetadata> queryMetadata(String partitionPath, SqlQuerySpec querySpec, Timer timer)\n+  List<CloudBlobMetadata> getDeadBlobs(String partitionPath, String fieldName, long retentionThreshold, int maxEntries)\n       throws DocumentClientException {\n-    azureMetrics.documentQueryCount.inc();\n+\n+    String deadBlobsQuery;\n+    if (fieldName.equals(CloudBlobMetadata.FIELD_DELETION_TIME)) {\n+      deadBlobsQuery = DELETED_BLOBS_QUERY;\n+    } else if (fieldName.equals(CloudBlobMetadata.FIELD_EXPIRATION_TIME)) {\n+      deadBlobsQuery = EXPIRED_BLOBS_QUERY;\n+    } else {\n+      throw new IllegalArgumentException(\"Invalid field: \" + fieldName);\n+    }\n+    SqlQuerySpec querySpec = new SqlQuerySpec(deadBlobsQuery,\n+        new SqlParameterCollection(new SqlParameter(LIMIT_PARAM, maxEntries),\n+            new SqlParameter(THRESHOLD_PARAM, retentionThreshold)));\n+\n     FeedOptions feedOptions = new FeedOptions();\n+    feedOptions.setMaxItemCount(maxEntries);\n+    feedOptions.setResponseContinuationTokenLimitInKb(continuationTokenLimit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MzU5Nw=="}, "originalCommit": {"oid": "31756543eab6548113ef62088e0f57ea1c00c955"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTU0OTY1OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/test/java/com.github.ambry.cloud/azure/AzureIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMzowMDowNFrOF1Px-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMzowMDowNFrOF1Px-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM3NzQwMA==", "bodyText": "Can we remove this?", "url": "https://github.com/linkedin/ambry/pull/1418#discussion_r391377400", "createdAt": "2020-03-12T03:00:04Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/test/java/com.github.ambry.cloud/azure/AzureIntegrationTest.java", "diffHunk": "@@ -308,7 +312,7 @@ public void testFindEntriesSinceByUpdateTime() throws Exception {\n   /**\n    * Test findEntriesSince with CosmosChangeFeedFindTokenFactory.\n    */\n-  @Ignore // Fails with wrong number of queries.\n+  //@Ignore // Fails with wrong number of queries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c581e60c92ecba3e9fffc66920be9bfe6cf13e"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1765, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}