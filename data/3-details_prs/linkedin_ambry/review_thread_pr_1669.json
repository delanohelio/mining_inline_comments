{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NTkzODk2", "number": 1669, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDo1Nzo1N1rOEyJHWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjozOToxOVrOEylMfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDEzNTk0OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDo1Nzo1N1rOHonoGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzo1Nzo1MFrOHoqkBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NDMyOQ==", "bodyText": "You need to include updatedAccountsInDB, no?", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r512354329", "createdAt": "2020-10-27T00:57:57Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -159,7 +158,13 @@ synchronized void fetchAndUpdateCache() {\n         // At this point we can safely say cache is refreshed\n         needRefresh = false;\n \n-        // Persist account metadata in cache to back up file on disk.\n+        // Notify updated accounts to consumers\n+        Collection<Account> updatedAccounts = updatedContainersInDB.stream()\n+            .map(container -> accountInfoMapRef.get().getAccountById(container.getParentAccountId()))\n+            .collect(Collectors.toSet());\n+        notifyAccountUpdateConsumers(updatedAccounts, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6c759bb0ab58dfd8b9e2db08003e5a287fb1d6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwMjQzOA==", "bodyText": "+1, although request from Nuage doesn't purely update the account (for now only account owner and description can be modified), it's still better to include the account if we update account's attributes without touching any container in the future.", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r512402438", "createdAt": "2020-10-27T03:57:50Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -159,7 +158,13 @@ synchronized void fetchAndUpdateCache() {\n         // At this point we can safely say cache is refreshed\n         needRefresh = false;\n \n-        // Persist account metadata in cache to back up file on disk.\n+        // Notify updated accounts to consumers\n+        Collection<Account> updatedAccounts = updatedContainersInDB.stream()\n+            .map(container -> accountInfoMapRef.get().getAccountById(container.getParentAccountId()))\n+            .collect(Collectors.toSet());\n+        notifyAccountUpdateConsumers(updatedAccounts, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NDMyOQ=="}, "originalCommit": {"oid": "3b6c759bb0ab58dfd8b9e2db08003e5a287fb1d6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDE2MzQxOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMToxMzo0NVrOHon4Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMToxMzo0NVrOHon4Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1ODQzMQ==", "bodyText": "This seems like the wrong metric (or maybe needs name change).", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r512358431", "createdAt": "2020-10-27T01:13:45Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "diffHunk": "@@ -220,5 +218,57 @@ protected void notifyAccountUpdateConsumers(AccountInfoMap newAccountInfoMap, Ac\n       logger.debug(\"HelixAccountService is updated with 0 updated account\");\n     }\n   }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE and marked in underlying account store.\n+   */\n+  public void selectInactiveContainersAndMarkInStore(StatsSnapshot statsSnapshot) {\n+    Set<Container> inactiveContainerCandidateSet = AccountUtils.selectInactiveContainerCandidates(statsSnapshot,\n+        getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS));\n+    try {\n+      markContainersInactive(inactiveContainerCandidateSet);\n+    } catch (InterruptedException e) {\n+      logger.error(\"Mark inactive container in zookeeper is interrupted\", e);\n+    }\n+  }\n+\n+  /**\n+   * Mark the given {@link Container}s status to INACTIVE in account store.\n+   * @param inactiveContainerCandidateSet DELETE_IN_PROGRESS {@link Container} set which has been deleted successfully during compaction.\n+   */\n+  void markContainersInactive(Set<Container> inactiveContainerCandidateSet) throws InterruptedException {\n+    if (inactiveContainerCandidateSet != null) {\n+      boolean success = false;\n+      Exception updateException = null;\n+      int retry = 0;\n+      while (!success && retry < config.maxRetryCountOnUpdateFailure) {\n+        Map<Short, Account> accountToUpdateMap = new HashMap<>();\n+        inactiveContainerCandidateSet.forEach(container -> {\n+          // start by getting account, and then get container from account to make sure that we are editing the most\n+          // recent snapshot\n+          short accountId = container.getParentAccountId();\n+          Account accountToEdit = accountToUpdateMap.computeIfAbsent(accountId, this::getAccountById);\n+          Container containerToEdit = accountToEdit.getContainerById(container.getId());\n+          Container editedContainer =\n+              new ContainerBuilder(containerToEdit).setStatus(Container.ContainerStatus.INACTIVE).build();\n+          accountToUpdateMap.put(accountId,\n+              new AccountBuilder(accountToEdit).addOrUpdateContainer(editedContainer).build());\n+        });\n+        try {\n+          updateAccounts(accountToUpdateMap.values());\n+          success = true;\n+        } catch (AccountServiceException ase) {\n+          updateException = ase;\n+          retry++;\n+          Thread.sleep(config.retryDelayMs);\n+        }\n+      }\n+      if (updateException != null) {\n+        logger.error(\"Failed to mark containers INACTIVE in set : {}  after {} retries\", inactiveContainerCandidateSet,\n+            config.maxRetryCountOnUpdateFailure, updateException);\n+        accountServiceMetrics.accountUpdatesToZkErrorCount.inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6c759bb0ab58dfd8b9e2db08003e5a287fb1d6"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDE2Nzk5OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AccountUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMToxNTo1N1rOHon6uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMToxNTo1N1rOHon6uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1OTA5Ng==", "bodyText": "Minor: add @return line.", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r512359096", "createdAt": "2020-10-27T01:15:57Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AccountUtils.java", "diffHunk": "@@ -70,4 +74,51 @@ static boolean hasDuplicateAccountIdOrName(Collection<Account> accounts) {\n     deprecatedContainers.addAll(accountService.getContainersByStatus(Container.ContainerStatus.INACTIVE));\n     return deprecatedContainers;\n   }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE. Check the valid data size of each DELETE_IN_PROGRESS container\n+   * from {@link StatsSnapshot} and select the ones with zero data size to be marked as INACTIVE.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6c759bb0ab58dfd8b9e2db08003e5a287fb1d6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM5Mzg0OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxOTowOVrOHop-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzoxOTowOVrOHop-nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5Mjg2Mw==", "bodyText": "Does this updatedAccounts hold whole account info? If yes, we may end up printing thousands of containers here. We can either print account id (as previous code did) or change this to DEBUG level.", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r512392863", "createdAt": "2020-10-27T03:19:09Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "diffHunk": "@@ -184,30 +191,21 @@ public boolean removeAccountUpdateConsumer(Consumer<Collection<Account>> account\n \n   /**\n    * Logs and notifies account update {@link Consumer}s about any new account changes/creations.\n-   * @param newAccountInfoMap the new {@link AccountInfoMap} that has been set.\n-   * @param oldAccountInfoMap the {@link AccountInfoMap} that was cached before this change.\n+   * @param updatedAccounts collection of updated accounts\n    * @param isCalledFromListener {@code true} if the caller is the account update listener, {@code false} otherwise.\n    */\n-  protected void notifyAccountUpdateConsumers(AccountInfoMap newAccountInfoMap, AccountInfoMap oldAccountInfoMap,\n-      boolean isCalledFromListener) {\n-    Map<Short, Account> idToUpdatedAccounts = new HashMap<>();\n-    for (Account newAccount : newAccountInfoMap.getAccounts()) {\n-      if (!newAccount.equals(oldAccountInfoMap.getAccountById(newAccount.getId()))) {\n-        idToUpdatedAccounts.put(newAccount.getId(), newAccount);\n-      }\n-    }\n-    if (idToUpdatedAccounts.size() > 0) {\n-      logger.info(\"Received updates for {} accounts. Received from listener={}. Account IDs={}\",\n-          idToUpdatedAccounts.size(), isCalledFromListener, idToUpdatedAccounts.keySet());\n+  protected void notifyAccountUpdateConsumers(Collection<Account> updatedAccounts, boolean isCalledFromListener) {\n+    if (updatedAccounts.size() > 0) {\n+      logger.info(\"Received updates for {} accounts. Received from listener={}. Accounts={}\", updatedAccounts.size(),\n+          isCalledFromListener, updatedAccounts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754bf6bedbc514ee05f811fea429377a1dba4ece"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDQ3NDM4OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AccountInfoMap.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDowNzowOVrOHoqtFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDowNzowOVrOHoqtFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwNDc1Ng==", "bodyText": "Is there a unit test for this?", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r512404756", "createdAt": "2020-10-27T04:07:09Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AccountInfoMap.java", "diffHunk": "@@ -200,16 +199,21 @@ boolean hasConflictingAccount(Collection<Account> accountsToSet) {\n    */\n   boolean hasConflictingContainer(Collection<Container> containersToSet, short parentAccountId) {\n     for (Container container : containersToSet) {\n-\n-      // TODO: Once we have versioning, check that version for existing container (being updated) matches.\n+      // if the container already exists, check that the snapshot version matches the expected value.\n+      Container containerInMap = getContainerByNameForAccount(container.getParentAccountId(), container.getName());\n+      if (containerInMap != null && container.getSnapshotVersion() != containerInMap.getSnapshotVersion()) {\n+        logger.error(\n+            \"Container to update in AccountId {} (containerId={} containerName={}) has an unexpected snapshot version in store (expected={}, encountered={})\",\n+            parentAccountId, container.getId(), container.getName(), container.getSnapshotVersion(),\n+            containerInMap.getSnapshotVersion());\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754bf6bedbc514ee05f811fea429377a1dba4ece"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDQ3NjIzOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDowODoyOVrOHoquJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDowODoyOVrOHoquJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwNTAyOA==", "bodyText": "Same here, do we have unit test to verify the updated version?", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r512405028", "createdAt": "2020-10-27T04:08:29Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -401,11 +392,14 @@ private void updateContainersWithMySqlStore(short accountId, Collection<Containe\n       Container containerInCache =\n           accountInfoMap.getContainerByIdForAccount(containerToUpdate.getParentAccountId(), containerToUpdate.getId());\n       if (containerInCache == null) {\n-        // new container added (insert into container table)\n+        // new container added. Insert record into container table.\n         mySqlAccountStore.addContainer(containerToUpdate);\n       } else {\n         if (!containerInCache.equals(containerToUpdate)) {\n-          // existing container modified (update container table)\n+          // Existing container modified. Increase the version of container and update container record\n+          containerToUpdate =\n+              new ContainerBuilder(containerToUpdate).setSnapshotVersion(containerToUpdate.getSnapshotVersion() + 1)\n+                  .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754bf6bedbc514ee05f811fea429377a1dba4ece"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDU5NjA3OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/account/Container.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo0ODo0OVrOHpSSIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo0ODo0OVrOHpSSIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1MzIxNw==", "bodyText": "At some point we should use jackson library for json serialization.", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r513053217", "createdAt": "2020-10-27T21:48:49Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/account/Container.java", "diffHunk": "@@ -75,6 +75,7 @@\n   static final String CONTENT_TYPE_WHITELIST_FOR_FILENAMES_ON_DOWNLOAD = \"contentTypeWhitelistForFilenamesOnDownload\";\n   static final String PARENT_ACCOUNT_ID_KEY = \"parentAccountId\";\n   static final String LAST_MODIFIED_TIME_KEY = \"lastModifiedTime\";\n+  static final String SNAPSHOT_VERSION_KEY = \"snapshotVersion\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75725313a720bd3d1ae7e0aaeae6604dae1627f8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDU5OTAwOnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/account/Container.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo0OTozOFrOHpSTzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo0OTozOFrOHpSTzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1MzY0NQ==", "bodyText": "nitpicking: can you move this method before toString method so the getter methods can stay together.", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r513053645", "createdAt": "2020-10-27T21:49:38Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/account/Container.java", "diffHunk": "@@ -764,6 +773,16 @@ private void checkPreconditions(String name, ContainerStatus status, boolean enc\n     }\n   }\n \n+  /**\n+   * The snapshot version is generally the number of modifications to the container that were expected to have occurred\n+   * before the current time. This is used to validate that there were no unexpected container modifications that could be\n+   * inadvertently overwritten by an container update.\n+   * @return the expected version for the container record.\n+   */\n+  public int getSnapshotVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75725313a720bd3d1ae7e0aaeae6604dae1627f8"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDYxOTY0OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/account/Container.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo1NjoxMlrOHpSgAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1Mjo1NlrOHpz_5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1Njc2OQ==", "bodyText": "Don't forget to update equals method in this class. And BTW, what is the difference between isSameContainer and equals methods?", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r513056769", "createdAt": "2020-10-27T21:56:12Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/account/Container.java", "diffHunk": "@@ -459,7 +464,8 @@ private Container(JSONObject metadata, short parentAccountId) throws JSONExcepti\n   Container(short id, String name, ContainerStatus status, String description, boolean encrypted,\n       boolean previouslyEncrypted, boolean cacheable, boolean mediaScanDisabled, String replicationPolicy,\n       boolean ttlRequired, boolean securePathRequired, Set<String> contentTypeWhitelistForFilenamesOnDownload,\n-      boolean backupEnabled, short parentAccountId, long deleteTriggerTime, long lastModifiedTime) {\n+      boolean backupEnabled, short parentAccountId, long deleteTriggerTime, long lastModifiedTime,\n+      int snapshotVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75725313a720bd3d1ae7e0aaeae6604dae1627f8"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyMTUzNw==", "bodyText": "I think Yingyi added isSameContainer() recently to only compare user editable fields in Container. @jsjtzyy", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r513121537", "createdAt": "2020-10-28T01:11:53Z", "author": {"login": "Arun-LinkedIn"}, "path": "ambry-api/src/main/java/com/github/ambry/account/Container.java", "diffHunk": "@@ -459,7 +464,8 @@ private Container(JSONObject metadata, short parentAccountId) throws JSONExcepti\n   Container(short id, String name, ContainerStatus status, String description, boolean encrypted,\n       boolean previouslyEncrypted, boolean cacheable, boolean mediaScanDisabled, String replicationPolicy,\n       boolean ttlRequired, boolean securePathRequired, Set<String> contentTypeWhitelistForFilenamesOnDownload,\n-      boolean backupEnabled, short parentAccountId, long deleteTriggerTime, long lastModifiedTime) {\n+      boolean backupEnabled, short parentAccountId, long deleteTriggerTime, long lastModifiedTime,\n+      int snapshotVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1Njc2OQ=="}, "originalCommit": {"oid": "75725313a720bd3d1ae7e0aaeae6604dae1627f8"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwNTYwNA==", "bodyText": "Please add snapshotVersion in equals method.", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r513605604", "createdAt": "2020-10-28T16:52:56Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/account/Container.java", "diffHunk": "@@ -459,7 +464,8 @@ private Container(JSONObject metadata, short parentAccountId) throws JSONExcepti\n   Container(short id, String name, ContainerStatus status, String description, boolean encrypted,\n       boolean previouslyEncrypted, boolean cacheable, boolean mediaScanDisabled, String replicationPolicy,\n       boolean ttlRequired, boolean securePathRequired, Set<String> contentTypeWhitelistForFilenamesOnDownload,\n-      boolean backupEnabled, short parentAccountId, long deleteTriggerTime, long lastModifiedTime) {\n+      boolean backupEnabled, short parentAccountId, long deleteTriggerTime, long lastModifiedTime,\n+      int snapshotVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1Njc2OQ=="}, "originalCommit": {"oid": "75725313a720bd3d1ae7e0aaeae6604dae1627f8"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDcyNzczOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjozNToxOVrOHpTgzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1NzozMVrOHp0OKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MzM1Nw==", "bodyText": "Just wondering if we already solve the issue when a container has data in more than one cluster? @SophieGuo410", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r513073357", "createdAt": "2020-10-27T22:35:19Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "diffHunk": "@@ -220,5 +219,57 @@ protected void notifyAccountUpdateConsumers(AccountInfoMap newAccountInfoMap, Ac\n       logger.debug(\"HelixAccountService is updated with 0 updated account\");\n     }\n   }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE and marked in underlying account store.\n+   */\n+  public void selectInactiveContainersAndMarkInStore(StatsSnapshot statsSnapshot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75725313a720bd3d1ae7e0aaeae6604dae1627f8"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwOTI1Nw==", "bodyText": "@justinlin-linkedin , I'm still working on the orca job implementation(it's in a different MP ambry-ecl-tools). Currently it's working on my local. But still need to tested on EI and Prod. I'll remove the legacy code once I've done with the orca job implementation.", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r513609257", "createdAt": "2020-10-28T16:57:31Z", "author": {"login": "SophieGuo410"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "diffHunk": "@@ -220,5 +219,57 @@ protected void notifyAccountUpdateConsumers(AccountInfoMap newAccountInfoMap, Ac\n       logger.debug(\"HelixAccountService is updated with 0 updated account\");\n     }\n   }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE and marked in underlying account store.\n+   */\n+  public void selectInactiveContainersAndMarkInStore(StatsSnapshot statsSnapshot) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MzM1Nw=="}, "originalCommit": {"oid": "75725313a720bd3d1ae7e0aaeae6604dae1627f8"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDczMzk5OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjozODowOVrOHpTkzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjozODowOVrOHpTkzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3NDM4MA==", "bodyText": "nit: we can move this block outside of while loop.", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r513074380", "createdAt": "2020-10-27T22:38:09Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "diffHunk": "@@ -220,5 +219,57 @@ protected void notifyAccountUpdateConsumers(AccountInfoMap newAccountInfoMap, Ac\n       logger.debug(\"HelixAccountService is updated with 0 updated account\");\n     }\n   }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE and marked in underlying account store.\n+   */\n+  public void selectInactiveContainersAndMarkInStore(StatsSnapshot statsSnapshot) {\n+    Set<Container> inactiveContainerCandidateSet = AccountUtils.selectInactiveContainerCandidates(statsSnapshot,\n+        getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS));\n+    try {\n+      markContainersInactive(inactiveContainerCandidateSet);\n+    } catch (InterruptedException e) {\n+      logger.error(\"Mark inactive container in zookeeper is interrupted\", e);\n+    }\n+  }\n+\n+  /**\n+   * Mark the given {@link Container}s status to INACTIVE in account store.\n+   * @param inactiveContainerCandidateSet DELETE_IN_PROGRESS {@link Container} set which has been deleted successfully during compaction.\n+   */\n+  void markContainersInactive(Set<Container> inactiveContainerCandidateSet) throws InterruptedException {\n+    if (inactiveContainerCandidateSet != null) {\n+      boolean success = false;\n+      Exception updateException = null;\n+      int retry = 0;\n+      while (!success && retry < config.maxRetryCountOnUpdateFailure) {\n+        Map<Short, Account> accountToUpdateMap = new HashMap<>();\n+        inactiveContainerCandidateSet.forEach(container -> {\n+          // start by getting account, and then get container from account to make sure that we are editing the most\n+          // recent snapshot\n+          short accountId = container.getParentAccountId();\n+          Account accountToEdit = accountToUpdateMap.computeIfAbsent(accountId, this::getAccountById);\n+          Container containerToEdit = accountToEdit.getContainerById(container.getId());\n+          Container editedContainer =\n+              new ContainerBuilder(containerToEdit).setStatus(Container.ContainerStatus.INACTIVE).build();\n+          accountToUpdateMap.put(accountId,\n+              new AccountBuilder(accountToEdit).addOrUpdateContainer(editedContainer).build());\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75725313a720bd3d1ae7e0aaeae6604dae1627f8"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDczNjYyOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjozOToxOVrOHpTmbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjozOToxOVrOHpTmbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3NDc5Ng==", "bodyText": "should nullify updateException for a fresh start.", "url": "https://github.com/linkedin/ambry/pull/1669#discussion_r513074796", "createdAt": "2020-10-27T22:39:19Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "diffHunk": "@@ -220,5 +219,57 @@ protected void notifyAccountUpdateConsumers(AccountInfoMap newAccountInfoMap, Ac\n       logger.debug(\"HelixAccountService is updated with 0 updated account\");\n     }\n   }\n+\n+  /**\n+   * Selects {@link Container}s to be marked as INACTIVE and marked in underlying account store.\n+   */\n+  public void selectInactiveContainersAndMarkInStore(StatsSnapshot statsSnapshot) {\n+    Set<Container> inactiveContainerCandidateSet = AccountUtils.selectInactiveContainerCandidates(statsSnapshot,\n+        getContainersByStatus(Container.ContainerStatus.DELETE_IN_PROGRESS));\n+    try {\n+      markContainersInactive(inactiveContainerCandidateSet);\n+    } catch (InterruptedException e) {\n+      logger.error(\"Mark inactive container in zookeeper is interrupted\", e);\n+    }\n+  }\n+\n+  /**\n+   * Mark the given {@link Container}s status to INACTIVE in account store.\n+   * @param inactiveContainerCandidateSet DELETE_IN_PROGRESS {@link Container} set which has been deleted successfully during compaction.\n+   */\n+  void markContainersInactive(Set<Container> inactiveContainerCandidateSet) throws InterruptedException {\n+    if (inactiveContainerCandidateSet != null) {\n+      boolean success = false;\n+      Exception updateException = null;\n+      int retry = 0;\n+      while (!success && retry < config.maxRetryCountOnUpdateFailure) {\n+        Map<Short, Account> accountToUpdateMap = new HashMap<>();\n+        inactiveContainerCandidateSet.forEach(container -> {\n+          // start by getting account, and then get container from account to make sure that we are editing the most\n+          // recent snapshot\n+          short accountId = container.getParentAccountId();\n+          Account accountToEdit = accountToUpdateMap.computeIfAbsent(accountId, this::getAccountById);\n+          Container containerToEdit = accountToEdit.getContainerById(container.getId());\n+          Container editedContainer =\n+              new ContainerBuilder(containerToEdit).setStatus(Container.ContainerStatus.INACTIVE).build();\n+          accountToUpdateMap.put(accountId,\n+              new AccountBuilder(accountToEdit).addOrUpdateContainer(editedContainer).build());\n+        });\n+        try {\n+          updateAccounts(accountToUpdateMap.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75725313a720bd3d1ae7e0aaeae6604dae1627f8"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1097, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}