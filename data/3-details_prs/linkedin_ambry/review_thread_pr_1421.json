{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzY3ODg4", "number": 1421, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyMToxMlrODnS9uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo1MjowOFrODsyWEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTMxNzY4OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyMToxMlrOF1Nk3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDoyNTozOFrOF10CoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MTI3OA==", "bodyText": "Don't think we need to add flush here, this should just be a write method.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391341278", "createdAt": "2020-03-12T00:21:12Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);\n+    }\n+    Send send = (Send) msg;\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+    DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+    ctx.write(headersFrame);\n+    // TODO: Make ByteBufChannel a RetainingByteBufChannel.\n+    ByteBufChannel byteBufChannel = new ByteBufChannel();\n+    try {\n+      send.writeTo(byteBufChannel);\n+    } catch (IOException e) {\n+      promise.setFailure(e);\n+    }\n+    DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBufChannel.getBuf(), true);\n+    ctx.write(dataFrame);\n+    ctx.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3MTQ4OA==", "bodyText": "tried to remove this flush. Everything stuck.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391971488", "createdAt": "2020-03-13T00:25:38Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);\n+    }\n+    Send send = (Send) msg;\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+    DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+    ctx.write(headersFrame);\n+    // TODO: Make ByteBufChannel a RetainingByteBufChannel.\n+    ByteBufChannel byteBufChannel = new ByteBufChannel();\n+    try {\n+      send.writeTo(byteBufChannel);\n+    } catch (IOException e) {\n+      promise.setFailure(e);\n+    }\n+    DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBufChannel.getBuf(), true);\n+    ctx.write(dataFrame);\n+    ctx.flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MTI3OA=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTMxODI4OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyMTozNlrOF1NlOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDozMTo1MVrOF1Q7kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MTM3MA==", "bodyText": "return here.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391341370", "createdAt": "2020-03-12T00:21:36Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5NjI0MA==", "bodyText": "good catch", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391396240", "createdAt": "2020-03-12T04:31:51Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MTM3MA=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTMyMDY1OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyMjo1NVrOF1Nmkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODozOTowOFrOF8VLlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MTcxNQ==", "bodyText": "We should probably pass those parameter in the constructor of this adaptor, just in case later we would change those parameters to something else. Like if we ever wants to have a version 2 of ambry http2 server, than we can set the path to \"/v2\".", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391341715", "createdAt": "2020-03-12T00:22:55Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);\n+    }\n+    Send send = (Send) msg;\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5NjM3Ng==", "bodyText": "pass path in constructor?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391396376", "createdAt": "2020-03-12T04:32:36Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);\n+    }\n+    Send send = (Send) msg;\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MTcxNQ=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNTkxMQ==", "bodyText": "got you. Will postpone this to follow up PRs.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r398805911", "createdAt": "2020-03-26T18:39:08Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);\n+    }\n+    Send send = (Send) msg;\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MTcxNQ=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTMyNDM4OnYy", "diffSide": "RIGHT", "path": "ambry-utils/src/main/java/com.github.ambry.utils/ByteBufChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyNToyMVrOF1No2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyNToyMVrOF1No2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MjI5OA==", "bodyText": "the year should be 2020", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391342298", "createdAt": "2020-03-12T00:25:21Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-utils/src/main/java/com.github.ambry.utils/ByteBufChannel.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTMyNzU0OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyNzoyNlrOF1Nqwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDozNToyMFrOF1Q-BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0Mjc4Ng==", "bodyText": "how much do we have to do in order to switch to retaining bytebufchannel? If we change all the requests to implement ByteBufHolder, would that be enough?\nI am planning on changing the PutRequest, but just not sure what the interface would look like to suit your needs here.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391342786", "createdAt": "2020-03-12T00:27:26Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);\n+    }\n+    Send send = (Send) msg;\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+    DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+    ctx.write(headersFrame);\n+    // TODO: Make ByteBufChannel a RetainingByteBufChannel.\n+    ByteBufChannel byteBufChannel = new ByteBufChannel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5Njg2OA==", "bodyText": "Make it a retaining bytebufchannel is also something I want to sync with you.\nIf we can support Send.getByteBut() eventually, then we don't need retaining bytebufchannel.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391396868", "createdAt": "2020-03-12T04:35:20Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);\n+    }\n+    Send send = (Send) msg;\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+    DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+    ctx.write(headersFrame);\n+    // TODO: Make ByteBufChannel a RetainingByteBufChannel.\n+    ByteBufChannel byteBufChannel = new ByteBufChannel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0Mjc4Ng=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTMyODQxOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyNzo1OVrOF1NrQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDozNTozN1rOF1Q-Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MjkxNA==", "bodyText": "return here.\nand should probably do this before sending out the header.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391342914", "createdAt": "2020-03-12T00:27:59Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);\n+    }\n+    Send send = (Send) msg;\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+    DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+    ctx.write(headersFrame);\n+    // TODO: Make ByteBufChannel a RetainingByteBufChannel.\n+    ByteBufChannel byteBufChannel = new ByteBufChannel();\n+    try {\n+      send.writeTo(byteBufChannel);\n+    } catch (IOException e) {\n+      promise.setFailure(e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5NjkyMw==", "bodyText": "sure.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391396923", "createdAt": "2020-03-12T04:35:37Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);\n+    }\n+    Send send = (Send) msg;\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+    DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+    ctx.write(headersFrame);\n+    // TODO: Make ByteBufChannel a RetainingByteBufChannel.\n+    ByteBufChannel byteBufChannel = new ByteBufChannel();\n+    try {\n+      send.writeTo(byteBufChannel);\n+    } catch (IOException e) {\n+      promise.setFailure(e);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MjkxNA=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTMzMDEzOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientResponseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyODo1NlrOF1NsSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDozNzoxMlrOF1Q_nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MzE3OQ==", "bodyText": "I don't understand the header here? is this copied from the netty project?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391343179", "createdAt": "2020-03-12T00:28:56Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientResponseHandler.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5NzI3Ng==", "bodyText": "No. just typo. Fixed.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391397276", "createdAt": "2020-03-12T04:37:12Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientResponseHandler.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 The Netty Project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MzE3OQ=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTQwNTQ1OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientResponseHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMToxNzo0MFrOF1OZeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTozNzoxMlrOF4KxoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NDc0NQ==", "bodyText": "what are the purpose of having two queues here?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391354745", "createdAt": "2020-03-12T01:17:40Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientResponseHandler.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Process {@link io.netty.handler.codec.http.FullHttpResponse} translated from HTTP/2 frames\n+ */\n+@ChannelHandler.Sharable\n+public class Http2ClientResponseHandler extends SimpleChannelInboundHandler<FullHttpResponse> {\n+  protected final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Queue<ResponseInfo> responseInfoQueue0 = new ConcurrentLinkedQueue<>();\n+  private Queue<ResponseInfo> responseInfoQueue1 = new ConcurrentLinkedQueue<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5Nzc3OQ==", "bodyText": "to reduce lock contention in this produce consumer problem. While channelRead0 produces to one queue, sendAndPoll consumes the other one.\nsendAndPoll() needs a stop while processing response. switching between two queue achieves this naturally.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391397779", "createdAt": "2020-03-12T04:40:08Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientResponseHandler.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Process {@link io.netty.handler.codec.http.FullHttpResponse} translated from HTTP/2 frames\n+ */\n+@ChannelHandler.Sharable\n+public class Http2ClientResponseHandler extends SimpleChannelInboundHandler<FullHttpResponse> {\n+  protected final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Queue<ResponseInfo> responseInfoQueue0 = new ConcurrentLinkedQueue<>();\n+  private Queue<ResponseInfo> responseInfoQueue1 = new ConcurrentLinkedQueue<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NDc0NQ=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0MTEyMA==", "bodyText": "Could a single ConcurrentLinkedQueue satisfy these requirements? It is a lock free queue where the producer (Http2ClientResponseHandler) will be CAS-ing on one end and then sendAndPoll will be CAS-ing on the other end, so contention between the two should be quite low, I feel.\nFor the end condition, couldn't that just be when queue.poll() returns null?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394441120", "createdAt": "2020-03-18T15:37:12Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientResponseHandler.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Process {@link io.netty.handler.codec.http.FullHttpResponse} translated from HTTP/2 frames\n+ */\n+@ChannelHandler.Sharable\n+public class Http2ClientResponseHandler extends SimpleChannelInboundHandler<FullHttpResponse> {\n+  protected final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Queue<ResponseInfo> responseInfoQueue0 = new ConcurrentLinkedQueue<>();\n+  private Queue<ResponseInfo> responseInfoQueue1 = new ConcurrentLinkedQueue<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NDc0NQ=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTQwOTAzOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMToyMDoxM1rOF1Obrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODozNzoxMVrOF8VGzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NTMxMA==", "bodyText": "can we add pollTimeout at acquire method?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391355310", "createdAt": "2020-03-12T01:20:13Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,83 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n+import java.util.Queue;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private Http2ClientResponseHandler http2ClientResponseHandler;\n+  public static AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n     this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler();\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = SystemTime.getInstance().milliseconds();\n+    List<ResponseInfo> readyResponseInfo = new ArrayList<>();\n+    // Send request\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      requestInfo.streamAcquireTime = SystemTime.getInstance().milliseconds();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNDY4NA==", "bodyText": "The pollTimeout is used for response waiting and timeout.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r398804684", "createdAt": "2020-03-26T18:37:11Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,83 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n+import java.util.Queue;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private Http2ClientResponseHandler http2ClientResponseHandler;\n+  public static AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n     this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler();\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = SystemTime.getInstance().milliseconds();\n+    List<ResponseInfo> readyResponseInfo = new ArrayList<>();\n+    // Send request\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      requestInfo.streamAcquireTime = SystemTime.getInstance().milliseconds();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NTMxMA=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTQxNDQwOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMToyMzoxOVrOF1Oepg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODowMTozM1rOF91vbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NjA3MA==", "bodyText": "what do you want to remove it in the TODO? Keep HttpObjectAggregator seems fine to me.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391356070", "createdAt": "2020-03-12T01:23:19Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "diffHunk": "@@ -31,21 +33,25 @@\n   private NettyMetrics nettyMetrics;\n   private NettyConfig nettyConfig;\n   private PerformanceConfig performanceConfig;\n+  private Http2ClientConfig http2ClientConfig;\n   private RestRequestHandler requestHandler;\n \n   public Http2StreamHandler(NettyMetrics nettyMetrics, NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n-      RestRequestHandler requestHandler) {\n+      Http2ClientConfig http2ClientConfig, RestRequestHandler requestHandler) {\n     this.nettyMetrics = nettyMetrics;\n     this.nettyConfig = nettyConfig;\n     this.performanceConfig = performanceConfig;\n+    this.http2ClientConfig = http2ClientConfig;\n     this.requestHandler = requestHandler;\n   }\n \n   @Override\n   public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n     ctx.pipeline().addLast(new Http2StreamFrameToHttpObjectCodec(true));\n+    // TODO: Remove HttpObjectAggregator. Currently, without HttpObjectAggregator, last httpContent can't be recognized as LastHttpContent.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3MjMwNg==", "bodyText": "HttpObjectAggregator caused an extra copy and extra cpu resource.\nI am actually thinking to remove NettyMessageProcessor.\nHttpObjectAggregator is reliable and simple.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391972306", "createdAt": "2020-03-13T00:28:59Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "diffHunk": "@@ -31,21 +33,25 @@\n   private NettyMetrics nettyMetrics;\n   private NettyConfig nettyConfig;\n   private PerformanceConfig performanceConfig;\n+  private Http2ClientConfig http2ClientConfig;\n   private RestRequestHandler requestHandler;\n \n   public Http2StreamHandler(NettyMetrics nettyMetrics, NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n-      RestRequestHandler requestHandler) {\n+      Http2ClientConfig http2ClientConfig, RestRequestHandler requestHandler) {\n     this.nettyMetrics = nettyMetrics;\n     this.nettyConfig = nettyConfig;\n     this.performanceConfig = performanceConfig;\n+    this.http2ClientConfig = http2ClientConfig;\n     this.requestHandler = requestHandler;\n   }\n \n   @Override\n   public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n     ctx.pipeline().addLast(new Http2StreamFrameToHttpObjectCodec(true));\n+    // TODO: Remove HttpObjectAggregator. Currently, without HttpObjectAggregator, last httpContent can't be recognized as LastHttpContent.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NjA3MA=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NDAyOA==", "bodyText": "What would be the pathway to removing HttpObjectAggregator? is it a bug in the Netty http2 handlers or a bug in NettyMessageProcessor?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394544028", "createdAt": "2020-03-18T18:07:36Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "diffHunk": "@@ -31,21 +33,25 @@\n   private NettyMetrics nettyMetrics;\n   private NettyConfig nettyConfig;\n   private PerformanceConfig performanceConfig;\n+  private Http2ClientConfig http2ClientConfig;\n   private RestRequestHandler requestHandler;\n \n   public Http2StreamHandler(NettyMetrics nettyMetrics, NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n-      RestRequestHandler requestHandler) {\n+      Http2ClientConfig http2ClientConfig, RestRequestHandler requestHandler) {\n     this.nettyMetrics = nettyMetrics;\n     this.nettyConfig = nettyConfig;\n     this.performanceConfig = performanceConfig;\n+    this.http2ClientConfig = http2ClientConfig;\n     this.requestHandler = requestHandler;\n   }\n \n   @Override\n   public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n     ctx.pipeline().addLast(new Http2StreamFrameToHttpObjectCodec(true));\n+    // TODO: Remove HttpObjectAggregator. Currently, without HttpObjectAggregator, last httpContent can't be recognized as LastHttpContent.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NjA3MA=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNzQxNQ==", "bodyText": "It looks like a compatible issue between http2 impl and NettyMessageProcessor.\nI need to re-consider what to do next step. Two choices:\n\nfix the bug\ndo not use NettyMessageProcessor\n\nWill fix this is follow up PRs.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r398807415", "createdAt": "2020-03-26T18:41:36Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "diffHunk": "@@ -31,21 +33,25 @@\n   private NettyMetrics nettyMetrics;\n   private NettyConfig nettyConfig;\n   private PerformanceConfig performanceConfig;\n+  private Http2ClientConfig http2ClientConfig;\n   private RestRequestHandler requestHandler;\n \n   public Http2StreamHandler(NettyMetrics nettyMetrics, NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n-      RestRequestHandler requestHandler) {\n+      Http2ClientConfig http2ClientConfig, RestRequestHandler requestHandler) {\n     this.nettyMetrics = nettyMetrics;\n     this.nettyConfig = nettyConfig;\n     this.performanceConfig = performanceConfig;\n+    this.http2ClientConfig = http2ClientConfig;\n     this.requestHandler = requestHandler;\n   }\n \n   @Override\n   public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n     ctx.pipeline().addLast(new Http2StreamFrameToHttpObjectCodec(true));\n+    // TODO: Remove HttpObjectAggregator. Currently, without HttpObjectAggregator, last httpContent can't be recognized as LastHttpContent.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NjA3MA=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk4NDQwNg==", "bodyText": "Yeah, the NettyMessageProcessor doesn't expect a FullHttpRequest, it expects different http components. If we can get rid of NettyMessageProcessor here, I would totaly vote for it. NettyMessageProcessor does look like over complicated processor that was designed for frontend.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r398984406", "createdAt": "2020-03-27T01:25:02Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "diffHunk": "@@ -31,21 +33,25 @@\n   private NettyMetrics nettyMetrics;\n   private NettyConfig nettyConfig;\n   private PerformanceConfig performanceConfig;\n+  private Http2ClientConfig http2ClientConfig;\n   private RestRequestHandler requestHandler;\n \n   public Http2StreamHandler(NettyMetrics nettyMetrics, NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n-      RestRequestHandler requestHandler) {\n+      Http2ClientConfig http2ClientConfig, RestRequestHandler requestHandler) {\n     this.nettyMetrics = nettyMetrics;\n     this.nettyConfig = nettyConfig;\n     this.performanceConfig = performanceConfig;\n+    this.http2ClientConfig = http2ClientConfig;\n     this.requestHandler = requestHandler;\n   }\n \n   @Override\n   public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n     ctx.pipeline().addLast(new Http2StreamFrameToHttpObjectCodec(true));\n+    // TODO: Remove HttpObjectAggregator. Currently, without HttpObjectAggregator, last httpContent can't be recognized as LastHttpContent.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NjA3MA=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk4NDY2NA==", "bodyText": "in the ambry server, we don't have multiple chunks, we don't have requests or response larger than 4MB. Lots of logic in the frontend just don't make too much sense in the ambry server.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r398984664", "createdAt": "2020-03-27T01:26:10Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "diffHunk": "@@ -31,21 +33,25 @@\n   private NettyMetrics nettyMetrics;\n   private NettyConfig nettyConfig;\n   private PerformanceConfig performanceConfig;\n+  private Http2ClientConfig http2ClientConfig;\n   private RestRequestHandler requestHandler;\n \n   public Http2StreamHandler(NettyMetrics nettyMetrics, NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n-      RestRequestHandler requestHandler) {\n+      Http2ClientConfig http2ClientConfig, RestRequestHandler requestHandler) {\n     this.nettyMetrics = nettyMetrics;\n     this.nettyConfig = nettyConfig;\n     this.performanceConfig = performanceConfig;\n+    this.http2ClientConfig = http2ClientConfig;\n     this.requestHandler = requestHandler;\n   }\n \n   @Override\n   public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n     ctx.pipeline().addLast(new Http2StreamFrameToHttpObjectCodec(true));\n+    // TODO: Remove HttpObjectAggregator. Currently, without HttpObjectAggregator, last httpContent can't be recognized as LastHttpContent.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NjA3MA=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4Nzk1MA==", "bodyText": "We do have requests and responses larger than 4 MB for replication batch-gets (and that period of time last year when we ran with 8 MB chunks), so there can be value from streaming. However, a lot of things, such as the way we prefetch blobs in the server, to get tangible benefit (other than abstract goals like sharing code btwn frontend/server) out of NettyMessageProcessor or similar pieces.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r400387950", "createdAt": "2020-03-30T18:01:33Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/Http2StreamHandler.java", "diffHunk": "@@ -31,21 +33,25 @@\n   private NettyMetrics nettyMetrics;\n   private NettyConfig nettyConfig;\n   private PerformanceConfig performanceConfig;\n+  private Http2ClientConfig http2ClientConfig;\n   private RestRequestHandler requestHandler;\n \n   public Http2StreamHandler(NettyMetrics nettyMetrics, NettyConfig nettyConfig, PerformanceConfig performanceConfig,\n-      RestRequestHandler requestHandler) {\n+      Http2ClientConfig http2ClientConfig, RestRequestHandler requestHandler) {\n     this.nettyMetrics = nettyMetrics;\n     this.nettyConfig = nettyConfig;\n     this.performanceConfig = performanceConfig;\n+    this.http2ClientConfig = http2ClientConfig;\n     this.requestHandler = requestHandler;\n   }\n \n   @Override\n   public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n     ctx.pipeline().addLast(new Http2StreamFrameToHttpObjectCodec(true));\n+    // TODO: Remove HttpObjectAggregator. Currently, without HttpObjectAggregator, last httpContent can't be recognized as LastHttpContent.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NjA3MA=="}, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTQxNTA2OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com.github.ambry.server/Http2NetworkClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMToyMzo0MFrOF1OfBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMToyMzo0MFrOF1OfBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NjE2Ng==", "bodyText": "the year should be 2020", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r391356166", "createdAt": "2020-03-12T01:23:40Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/integration-test/java/com.github.ambry.server/Http2NetworkClientTest.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465a3d2cc87d5533584c7cb23550fceb4c5dd82e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjU0NTc0OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/config/Http2ClientConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToxNToxNVrOF3zQHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToxNToxNVrOF3zQHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NTcxMA==", "bodyText": "I think some time in the past, ambry supported only simple blobs, but up to 20 MB in size. I'm not sure how many blobs would be left for LinkedIn, but it might be good to set the default limit to something like 25 MB would probably be good.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394055710", "createdAt": "2020-03-18T01:15:15Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/config/Http2ClientConfig.java", "diffHunk": "@@ -52,12 +53,23 @@\n   @Default(\"0\")\n   public final int http2NettyEventLoopGroupThreads;\n \n+  /**\n+   * Maximum content length for a full HTTP/2 content. Used in HttpObjectAggregator.\n+   * In HttpObjectAggregator, maxContentLength is not used to preallocate buffer,\n+   * but it throws exception if content length great than maxContentLength\n+   * TODO: Link this with blob chunk size.\n+   */\n+  @Config(HTTP2_MAX_CONTENT_LENGTH)\n+  @Default(\"10 * 1024 * 1024\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjU2NDU1OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/network/RequestInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyODoxNFrOF3zb5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyODoxNFrOF3zb5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1ODcyNw==", "bodyText": "Could these be package private variables, or private with some setter methods?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394058727", "createdAt": "2020-03-18T01:28:14Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/network/RequestInfo.java", "diffHunk": "@@ -25,6 +25,8 @@\n   private final Port port;\n   private final SendWithCorrelationId request;\n   private final ReplicaId replicaId;\n+  public long streamAcquireTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjU5NjU4OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTo1MDowM1rOF3zwIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTo1MDowM1rOF3zwIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MzkwNw==", "bodyText": "Should this promise be completed from within a listener on the flush? Does the promise represent when the message is written out to network, or is it when the OutboundHandler's business logic is done?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394063907", "createdAt": "2020-03-18T01:50:03Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.Send;\n+import com.github.ambry.utils.ByteBufChannel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n+ */\n+public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+\n+  public AmbrySendToHttp2Adaptor() {\n+\n+  }\n+\n+  /**\n+   * Handles conversion of {@link Send} to HTTP/2 frames.\n+   */\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+    if (!(msg instanceof Send)) {\n+      ctx.write(msg, promise);\n+      return;\n+    }\n+    Send send = (Send) msg;\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+    DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+    ctx.write(headersFrame);\n+    // TODO: Make ByteBufChannel a RetainingByteBufChannel.\n+    ByteBufChannel byteBufChannel = new ByteBufChannel();\n+    try {\n+      send.writeTo(byteBufChannel);\n+    } catch (IOException e) {\n+      promise.setFailure(e);\n+      return;\n+    }\n+    DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBufChannel.getBuf(), true);\n+    ctx.write(dataFrame);\n+    ctx.flush();\n+    promise.setSuccess();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mjc0MzEzOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientResponseHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMzoyNzo0OVrOF31Meg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMzoyNzo0OVrOF31Meg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA4NzU0Ng==", "bodyText": "does this class and its methods need to be public?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394087546", "createdAt": "2020-03-18T03:27:49Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientResponseHandler.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Process {@link io.netty.handler.codec.http.FullHttpResponse} translated from HTTP/2 frames\n+ */\n+@ChannelHandler.Sharable\n+public class Http2ClientResponseHandler extends SimpleChannelInboundHandler<FullHttpResponse> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDkzMjY2OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo0MjozM1rOF4LBpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTo1MTozM1rOF5hTQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0NTIyMw==", "bodyText": "This logic currently seems like it could lead to some busy-waiting when the system has a low request rate. In SocketNetworkClient, a timed wait is done with the select call and the wakeup call can be used by the router to unblock if some non-NetworkClient work needs to be done, whereas this implementation will return immediately if no requests are present.\nIn the comment above, I talked about how in the current implementation, the swapping of the queue may not be that useful. However, it could be useful if combined with a condvar monitor to signal when some new responses are ready.\nI also though that LinkedBlockingQueue may no be too bad for this use case since it has separate locks for put/take operations so contention shouldn't be too bad, but this queue does not natively support wakeup without interrupting the thread. One way to wakeup in this case would be to put an empty request object in the queue (like how the server does when shutting down a RequestResponseChannel", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394445223", "createdAt": "2020-03-18T15:42:33Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,83 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n+import java.util.Queue;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private Http2ClientResponseHandler http2ClientResponseHandler;\n+  public static AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n     this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler();\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = SystemTime.getInstance().milliseconds();\n+    List<ResponseInfo> readyResponseInfo = new ArrayList<>();\n+    // Send request\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      requestInfo.streamAcquireTime = SystemTime.getInstance().milliseconds();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              logger.trace(\n+                  \"Stream acquired: \" + (SystemTime.getInstance().milliseconds() - requestInfo.streamAcquireTime));\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());\n+              requestInfo.streamSendTime = SystemTime.getInstance().milliseconds();\n+            } else {\n+              logger.error(\"Couldn't acquire stream channel: \" + future.cause());\n+              readyResponseInfo.add(new ResponseInfo(requestInfo, NetworkClientErrorCode.NetworkError, null));\n+            }\n+          });\n+    }\n+    logger.trace(\"HTTP2 send request time: \" + (SystemTime.getInstance().milliseconds() - startTime));\n+    // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n+\n+    // Add the good responses to readyResponseInfo\n+    Queue<ResponseInfo> queue = http2ClientResponseHandler.getQueueToConsume();\n+    ResponseInfo responseInfo = queue.poll();\n+    while (responseInfo != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4MTU3Nw==", "bodyText": "To use one queue, I also prefer LinkedBlockingQueue  because it has a method drainTo, which takes all current available elements. This fits our use case.\n(To make sure we are in the same page): The busy loop happens when there is no/low request.\nRouter.run { \n     while() {\n         ....\n         client.sendAndPool()\n         ....\n     }\n}\n\nSo either one queue or two queues, we need a condition wait in sendAndPool() and be waken up when responses come.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394581577", "createdAt": "2020-03-18T19:14:23Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,83 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n+import java.util.Queue;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private Http2ClientResponseHandler http2ClientResponseHandler;\n+  public static AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n     this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler();\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = SystemTime.getInstance().milliseconds();\n+    List<ResponseInfo> readyResponseInfo = new ArrayList<>();\n+    // Send request\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      requestInfo.streamAcquireTime = SystemTime.getInstance().milliseconds();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              logger.trace(\n+                  \"Stream acquired: \" + (SystemTime.getInstance().milliseconds() - requestInfo.streamAcquireTime));\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());\n+              requestInfo.streamSendTime = SystemTime.getInstance().milliseconds();\n+            } else {\n+              logger.error(\"Couldn't acquire stream channel: \" + future.cause());\n+              readyResponseInfo.add(new ResponseInfo(requestInfo, NetworkClientErrorCode.NetworkError, null));\n+            }\n+          });\n+    }\n+    logger.trace(\"HTTP2 send request time: \" + (SystemTime.getInstance().milliseconds() - startTime));\n+    // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n+\n+    // Add the good responses to readyResponseInfo\n+    Queue<ResponseInfo> queue = http2ClientResponseHandler.getQueueToConsume();\n+    ResponseInfo responseInfo = queue.poll();\n+    while (responseInfo != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0NTIyMw=="}, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYyMjIxOA==", "bodyText": "Yep, I think we are on the same page. For a blocking queue example, you can look at LocalRequestResponseChannel. The only missing part is the implementation of wakeup, but I think that is doable with a method that puts a dummy element in the queue.\nWith the 2 queue system, you would need a condition variable to signal when the list is not empty.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394622218", "createdAt": "2020-03-18T20:32:46Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,83 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n+import java.util.Queue;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private Http2ClientResponseHandler http2ClientResponseHandler;\n+  public static AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n     this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler();\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = SystemTime.getInstance().milliseconds();\n+    List<ResponseInfo> readyResponseInfo = new ArrayList<>();\n+    // Send request\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      requestInfo.streamAcquireTime = SystemTime.getInstance().milliseconds();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              logger.trace(\n+                  \"Stream acquired: \" + (SystemTime.getInstance().milliseconds() - requestInfo.streamAcquireTime));\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());\n+              requestInfo.streamSendTime = SystemTime.getInstance().milliseconds();\n+            } else {\n+              logger.error(\"Couldn't acquire stream channel: \" + future.cause());\n+              readyResponseInfo.add(new ResponseInfo(requestInfo, NetworkClientErrorCode.NetworkError, null));\n+            }\n+          });\n+    }\n+    logger.trace(\"HTTP2 send request time: \" + (SystemTime.getInstance().milliseconds() - startTime));\n+    // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n+\n+    // Add the good responses to readyResponseInfo\n+    Queue<ResponseInfo> queue = http2ClientResponseHandler.getQueueToConsume();\n+    ResponseInfo responseInfo = queue.poll();\n+    while (responseInfo != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0NTIyMw=="}, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0MzU4Mw==", "bodyText": "@cgtz , I am changing to use one blocking queue. But still, I think a cv wait needed when there is no response in h2 client and a signal should be sent when a h2 response arrive, right?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r395843583", "createdAt": "2020-03-20T19:17:50Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,83 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n+import java.util.Queue;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private Http2ClientResponseHandler http2ClientResponseHandler;\n+  public static AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n     this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler();\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = SystemTime.getInstance().milliseconds();\n+    List<ResponseInfo> readyResponseInfo = new ArrayList<>();\n+    // Send request\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      requestInfo.streamAcquireTime = SystemTime.getInstance().milliseconds();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              logger.trace(\n+                  \"Stream acquired: \" + (SystemTime.getInstance().milliseconds() - requestInfo.streamAcquireTime));\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());\n+              requestInfo.streamSendTime = SystemTime.getInstance().milliseconds();\n+            } else {\n+              logger.error(\"Couldn't acquire stream channel: \" + future.cause());\n+              readyResponseInfo.add(new ResponseInfo(requestInfo, NetworkClientErrorCode.NetworkError, null));\n+            }\n+          });\n+    }\n+    logger.trace(\"HTTP2 send request time: \" + (SystemTime.getInstance().milliseconds() - startTime));\n+    // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n+\n+    // Add the good responses to readyResponseInfo\n+    Queue<ResponseInfo> queue = http2ClientResponseHandler.getQueueToConsume();\n+    ResponseInfo responseInfo = queue.poll();\n+    while (responseInfo != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0NTIyMw=="}, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1NTAwNA==", "bodyText": "I think there may be a way around having an additional condition variable, since LinkedBlockingQueue already has one inside. It already supports doing a timed wait and getting notified when a new element is present. The only case that would have to be handled differently would be the wakeup call. Here is an idea I had for how to make it work. Tell me if it makes sense (adapting some code from LocalRequestResponseChannel):\nFor the NetworkClient (consumer) side:\n  private static final ResponseInfo WAKEUP_MARKER = new ResponseInfo(null, null, null);\n  BlockingQueue<ResponseInfo> responseQueue = new LinkedBlockingQueue<>();\n  \n  List<ResponseInfo> sendAndPoll() {\n    // handle requests\n    \n    ResponseInfo firstResponse = null;\n    try {\n      firstResponse = responseQueue.poll(pollTimeoutMs, TimeUnit.MILLISECONDS);\n    } catch (InterruptedException ie) {\n      logger.debug(\"Interrupted polling responses\");\n    }\n    if (firstResponse == null) {\n      return Collections.emptyList();\n    }\n    // using a linked list to make removal easier (maybe there's a better way to handle this)\n    List<ResponseInfo> responseList = new LinkedList<>();\n    responseList.add(firstResponse);\n    responseQueue.drainTo(responseList);\n    // remove any wakeup markers, since they are just there to signal this thread to unblock itself\n    responseList.removeIf(responseInfo -> responseInfo == WAKEUP_MARKER);\n    return responseList;\n  }\n\n  void wakeup() {\n    // if sendAndPoll is currently executing a timed poll on the blocking queue, we need to put something there\n    // to wake it up before a response comes\n    try {\n      responseQueue.put(WAKEUP_MARKER);\n    } catch (InterruptedException e) {\n      logger.debug(\"Interrupted while waking up\");\n    }\n  }\nFor the ResponseHandler (producer) side:\n  void produce(ResponseInfo responseInfo) throws InterruptedException {\n    responseQueue.put(responseInfo);\n  }", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r395855004", "createdAt": "2020-03-20T19:43:09Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,83 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n+import java.util.Queue;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private Http2ClientResponseHandler http2ClientResponseHandler;\n+  public static AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n     this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler();\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = SystemTime.getInstance().milliseconds();\n+    List<ResponseInfo> readyResponseInfo = new ArrayList<>();\n+    // Send request\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      requestInfo.streamAcquireTime = SystemTime.getInstance().milliseconds();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              logger.trace(\n+                  \"Stream acquired: \" + (SystemTime.getInstance().milliseconds() - requestInfo.streamAcquireTime));\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());\n+              requestInfo.streamSendTime = SystemTime.getInstance().milliseconds();\n+            } else {\n+              logger.error(\"Couldn't acquire stream channel: \" + future.cause());\n+              readyResponseInfo.add(new ResponseInfo(requestInfo, NetworkClientErrorCode.NetworkError, null));\n+            }\n+          });\n+    }\n+    logger.trace(\"HTTP2 send request time: \" + (SystemTime.getInstance().milliseconds() - startTime));\n+    // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n+\n+    // Add the good responses to readyResponseInfo\n+    Queue<ResponseInfo> queue = http2ClientResponseHandler.getQueueToConsume();\n+    ResponseInfo responseInfo = queue.poll();\n+    while (responseInfo != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0NTIyMw=="}, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1ODc1Mg==", "bodyText": "Cool idea. Will use it.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r395858752", "createdAt": "2020-03-20T19:51:33Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,83 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n+import java.util.Queue;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private Http2ClientResponseHandler http2ClientResponseHandler;\n+  public static AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n     this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler();\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = SystemTime.getInstance().milliseconds();\n+    List<ResponseInfo> readyResponseInfo = new ArrayList<>();\n+    // Send request\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      requestInfo.streamAcquireTime = SystemTime.getInstance().milliseconds();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              logger.trace(\n+                  \"Stream acquired: \" + (SystemTime.getInstance().milliseconds() - requestInfo.streamAcquireTime));\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());\n+              requestInfo.streamSendTime = SystemTime.getInstance().milliseconds();\n+            } else {\n+              logger.error(\"Couldn't acquire stream channel: \" + future.cause());\n+              readyResponseInfo.add(new ResponseInfo(requestInfo, NetworkClientErrorCode.NetworkError, null));\n+            }\n+          });\n+    }\n+    logger.trace(\"HTTP2 send request time: \" + (SystemTime.getInstance().milliseconds() - startTime));\n+    // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n+\n+    // Add the good responses to readyResponseInfo\n+    Queue<ResponseInfo> queue = http2ClientResponseHandler.getQueueToConsume();\n+    ResponseInfo responseInfo = queue.poll();\n+    while (responseInfo != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0NTIyMw=="}, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTEyNDE5OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoyNDowNVrOF4M81g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoyNDowNVrOF4M81g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3Njc1OA==", "bodyText": "should this be changed back to trace before merging?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394476758", "createdAt": "2020-03-18T16:24:05Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java", "diffHunk": "@@ -579,7 +579,7 @@ protected void submitResponse(RestRequest restRequest, RestResponseChannel restR\n         } else {\n           response.readInto(restResponseChannel, responseWriteCallback);\n           inFlightResponsesCount.incrementAndGet();\n-          logger.trace(\"Response of size {} for request {} is scheduled to be sent\", response.getSize(),\n+          logger.info(\"Response of size {} for request {} is scheduled to be sent\", response.getSize(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTEzNjcwOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/RestServerMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoyNjo1OVrOF4NE7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoyNjo1OVrOF4NE7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3ODgzMA==", "bodyText": "We should change this to instantiate the SslFactory within NetworkClientFactory, since there can be some incompatibilities between the HTTP2 factory and the one used for RestServer.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394478830", "createdAt": "2020-03-18T16:26:59Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/RestServerMain.java", "diffHunk": "@@ -80,10 +81,10 @@ public static void main(String[] args) {\n    * @throws IOException\n    */\n   private static SSLFactory getSSLFactoryIfRequired(VerifiableProperties verifiableProperties) throws Exception {\n-    ClusterMapConfig clusterMapConfig = new ClusterMapConfig(verifiableProperties);\n-    if (clusterMapConfig.clusterMapHttp2NetworkClientEnabled) {\n+    if (new RouterConfig(verifiableProperties).routerEnableHttp2NetworkClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTE0MjkxOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/DeleteOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoyODoyM1rOF4NI4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoyODoyM1rOF4NI4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3OTg0MQ==", "bodyText": "Could you make a static method in RouterUtils to do the port selection?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394479841", "createdAt": "2020-03-18T16:28:23Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/DeleteOperation.java", "diffHunk": "@@ -123,7 +124,12 @@ private void fetchRequests(RequestRegistrationCallback<DeleteOperation> requestR\n     while (replicaIterator.hasNext()) {\n       ReplicaId replica = replicaIterator.next();\n       String hostname = replica.getDataNodeId().getHostname();\n-      Port port = replica.getDataNodeId().getPortToConnectTo();\n+      Port port;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTM4NDQ4OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyODozN1rOF4Pl_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyODozN1rOF4Pl_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMDA2MA==", "bodyText": "final", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394520060", "createdAt": "2020-03-18T17:28:37Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,83 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n+import java.util.Queue;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private Http2ClientResponseHandler http2ClientResponseHandler;\n+  public static AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTM4NTAzOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyODo0NFrOF4PmUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyODo0NFrOF4PmUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMDE0NA==", "bodyText": "final", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394520144", "createdAt": "2020-03-18T17:28:44Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,83 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import com.github.ambry.utils.SystemTime;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n+import java.util.Queue;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private Http2ClientResponseHandler http2ClientResponseHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTUzODA4OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com.github.ambry.server/RouterServerHttp2Test.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoxMDo1M1rOF4RLKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoxMDo1M1rOF4RLKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NTk2Mg==", "bodyText": "commented code here", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394545962", "createdAt": "2020-03-18T18:10:53Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/integration-test/java/com.github.ambry.server/RouterServerHttp2Test.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.codahale.metrics.Meter;\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.clustermap.MockClusterMap;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.commons.TestSSLUtils;\n+import com.github.ambry.config.RouterConfig;\n+import com.github.ambry.server.RouterServerTestFramework.*;\n+import com.github.ambry.utils.SystemTime;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Queue;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static com.github.ambry.server.RouterServerTestFramework.*;\n+\n+\n+@RunWith(Parameterized.class)\n+public class RouterServerHttp2Test {\n+  private static MockCluster http2Cluster;\n+  private static RouterServerTestFramework testFramework;\n+  private static MetricRegistry routerMetricRegistry;\n+  private static long transmissionSendBytesCountBeforeTest;\n+  private static long transmissionReceiveBytesCountBeforeTest;\n+\n+  /**\n+   * Running for both regular and encrypted blobs\n+   * @return an array with both {@code false} and {@code true}.\n+   */\n+  @Parameterized.Parameters\n+  public static List<Object[]> data() {\n+    return Arrays.asList(new Object[][]{{false}, {true}});\n+  }\n+\n+  /**\n+   * Instantiates {@link RouterServerHttp2Test}\n+   * @param testEncryption {@code true} if blobs need to be tested w/ encryption. {@code false} otherwise\n+   */\n+  public RouterServerHttp2Test(boolean testEncryption) {\n+    testFramework.setTestEncryption(testEncryption);\n+  }\n+\n+  @BeforeClass\n+  public static void initializeTests() throws Exception {\n+    File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n+\n+    // Set up router properties\n+    Properties routerProps = getRouterProperties(\"DC1\");\n+    TestSSLUtils.addSSLProperties(routerProps, \"DC1,DC2,DC3\", SSLFactory.Mode.CLIENT, trustStoreFile, \"http2-router\");\n+    TestSSLUtils.addHttp2Properties(routerProps, SSLFactory.Mode.CLIENT, false);\n+    routerProps.setProperty(RouterConfig.ROUTER_ENABLE_HTTP2_NETWORK_CLIENT, \"true\");\n+\n+    // Set up server properties\n+    Properties serverSSLProps = new Properties();\n+    TestSSLUtils.addSSLProperties(serverSSLProps, \"DC1,DC2,DC3\", SSLFactory.Mode.SERVER, trustStoreFile,\n+        \"http2-server\");\n+    TestSSLUtils.addHttp2Properties(serverSSLProps, SSLFactory.Mode.SERVER, false);\n+    serverSSLProps.setProperty(\"server.enable.store.data.prefetch\", \"true\");\n+\n+    http2Cluster = new MockCluster(serverSSLProps, false, SystemTime.getInstance());\n+    MockNotificationSystem notificationSystem = new MockNotificationSystem(http2Cluster.getClusterMap());\n+    http2Cluster.initializeServers(notificationSystem);\n+    http2Cluster.startServers();\n+    MockClusterMap routerClusterMap = http2Cluster.getClusterMap();\n+    // MockClusterMap returns a new registry by default. This is to ensure that each node (server, router and so on,\n+    // get a different registry. But at this point all server nodes have been initialized, and we want the router and\n+    // its components, which are going to be created, to use the same registry.\n+    routerClusterMap.createAndSetPermanentMetricRegistry();\n+\n+    testFramework = new RouterServerTestFramework(routerProps, routerClusterMap, notificationSystem);\n+    routerMetricRegistry = routerClusterMap.getMetricRegistry();\n+  }\n+\n+  @AfterClass\n+  public static void cleanup() throws IOException {\n+    testFramework.cleanup();\n+    long start = System.currentTimeMillis();\n+    System.out.println(\"RouterServerSSLTest::About to invoke cluster.cleanup()\");\n+    if (http2Cluster != null) {\n+      http2Cluster.cleanup();\n+    }\n+    System.out.println(\"RouterServerSSLTest::cluster.cleanup() took \" + (System.currentTimeMillis() - start) + \" ms.\");\n+  }\n+\n+  @Before\n+  public void before() {\n+    Map<String, Meter> meters = routerMetricRegistry.getMeters();\n+    transmissionSendBytesCountBeforeTest = meters.get(transmissionSendBytesMetricName).getCount();\n+    transmissionReceiveBytesCountBeforeTest = meters.get(transmissionReceiveBytesMetricName).getCount();\n+  }\n+\n+  @After\n+  public void after() {\n+//    TODO: assert metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTU5Mzc1OnYy", "diffSide": "RIGHT", "path": "ambry-utils/src/main/java/com.github.ambry.utils/ByteBufChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoyNjo0OVrOF4RvIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyNjo1MVrOF8W_HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1NTE3MA==", "bodyText": "Generally for implementations of WritableByteChannel, I think you are supposed to copy the bytes instead of just wrapping them since ByteBuffers have no ref count system and may be reused by the writer afterwards. (This is what many of the code snippets for copying from ReadableByteChannel to WritableByteChannel do).\nI think for the router, it may be okay to keep this optimization present but I did find some cases that I was a little unsure about. The suspicious case I found was PutOperation where the buffer is cleared in prepareForBuilding. I think this method is only called after a chunk is cleared. This happens when a chunk operation is completed, so for requests that we care about, it hopefully won't cause issues, but a chunk operation being completed does not necessarily mean all requests have been successfully sent out (some could be stuck in the queue).", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r394555170", "createdAt": "2020-03-18T18:26:49Z", "author": {"login": "cgtz"}, "path": "ambry-utils/src/main/java/com.github.ambry.utils/ByteBufChannel.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.utils;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.buffer.Unpooled;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\n+/**\n+ * A {@link WritableByteChannel} that stores the bytes written into it in a {@link ByteBuf}.\n+ */\n+public class ByteBufChannel implements WritableByteChannel {\n+  private final AtomicBoolean channelOpen = new AtomicBoolean(true);\n+  private CompositeByteBuf compositeBuffer = ByteBufAllocator.DEFAULT.compositeBuffer();\n+\n+  /**\n+   * Gets the {@link CompositeByteBuf} that is being used to receive writes.\n+   * @return the {@link ByteBuf} that is receives writes to this channel.\n+   */\n+  public ByteBuf getBuf() {\n+    return compositeBuffer;\n+  }\n+\n+  /**\n+   * The default constructor.\n+   */\n+  public ByteBufChannel() {\n+\n+  }\n+\n+  /**\n+   * Copies bytes from {@code src} into the composite buf.\n+   * @param src the source {@link ByteBuf} to copy bytes from.\n+   * @return the number of bytes copied.\n+   * @throws ClosedChannelException if the channel is closed when this function was called.\n+   */\n+  @Override\n+  public int write(ByteBuffer src) throws ClosedChannelException {\n+    int size = src.remaining();\n+    compositeBuffer.addComponent(true, Unpooled.wrappedBuffer(src));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNTQ4NA==", "bodyText": "I noticed some PUT issue in EI test. Not sure yet.\nTo make everything safe, the latest change use copy in ByteBufChannel. Next step is to use Use  RetainingAsyncWritableChannel after PUT/GET request's writeTo(AsyncWritableChannel channel, Callback<Long> callback) is fully implemented.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r398835484", "createdAt": "2020-03-26T19:26:51Z", "author": {"login": "zzmao"}, "path": "ambry-utils/src/main/java/com.github.ambry.utils/ByteBufChannel.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.utils;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.buffer.Unpooled;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\n+/**\n+ * A {@link WritableByteChannel} that stores the bytes written into it in a {@link ByteBuf}.\n+ */\n+public class ByteBufChannel implements WritableByteChannel {\n+  private final AtomicBoolean channelOpen = new AtomicBoolean(true);\n+  private CompositeByteBuf compositeBuffer = ByteBufAllocator.DEFAULT.compositeBuffer();\n+\n+  /**\n+   * Gets the {@link CompositeByteBuf} that is being used to receive writes.\n+   * @return the {@link ByteBuf} that is receives writes to this channel.\n+   */\n+  public ByteBuf getBuf() {\n+    return compositeBuffer;\n+  }\n+\n+  /**\n+   * The default constructor.\n+   */\n+  public ByteBufChannel() {\n+\n+  }\n+\n+  /**\n+   * Copies bytes from {@code src} into the composite buf.\n+   * @param src the source {@link ByteBuf} to copy bytes from.\n+   * @return the number of bytes copied.\n+   * @throws ClosedChannelException if the channel is closed when this function was called.\n+   */\n+  @Override\n+  public int write(ByteBuffer src) throws ClosedChannelException {\n+    int size = src.remaining();\n+    compositeBuffer.addComponent(true, Unpooled.wrappedBuffer(src));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1NTE3MA=="}, "originalCommit": {"oid": "1096bf912eb1ad3a90ff273ca0dc8c077c252d30"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzUwMDYzOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMToyMjo0M1rOF8gCoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzoxMDoxMFrOF-vUNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk4Mzg0MQ==", "bodyText": "I think If you do writeAndFlush here, you can remove ctx.flush in AmbrySendToHttp2Adaptor.write method.\nThere is one more thing to consider, is that when the write method fails, it's not going to be captured by anything. We need to deal with that.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r398983841", "createdAt": "2020-03-27T01:22:43Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,94 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n+import java.util.Collections;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private final Http2ClientResponseHandler http2ClientResponseHandler;\n+  private final Http2ClientMetrics http2ClientMetrics;\n+  public static final ResponseInfo WAKEUP_MARKER = new ResponseInfo(null, null, null);\n+  static final AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n+    logger.info(\"Http2NetworkClient started\");\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n-    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig, http2ClientMetrics);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler(this);\n+    this.http2ClientMetrics = http2ClientMetrics;\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = System.currentTimeMillis();\n+    List<ResponseInfo> readyResponseInfos = new ArrayList<>();\n+    // Send request\n+    http2ClientMetrics.http2ClientSendRate.mark(requestsToSend.size());\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      long streamInitiateTime = System.currentTimeMillis();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              http2ClientMetrics.http2StreamAcquireTime.update(System.currentTimeMillis() - streamInitiateTime);\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzMTYyNg==", "bodyText": "It works.\nLet me see how to handle write failure.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r400431626", "createdAt": "2020-03-30T19:15:02Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,94 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n+import java.util.Collections;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private final Http2ClientResponseHandler http2ClientResponseHandler;\n+  private final Http2ClientMetrics http2ClientMetrics;\n+  public static final ResponseInfo WAKEUP_MARKER = new ResponseInfo(null, null, null);\n+  static final AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n+    logger.info(\"Http2NetworkClient started\");\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n-    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig, http2ClientMetrics);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler(this);\n+    this.http2ClientMetrics = http2ClientMetrics;\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = System.currentTimeMillis();\n+    List<ResponseInfo> readyResponseInfos = new ArrayList<>();\n+    // Send request\n+    http2ClientMetrics.http2ClientSendRate.mark(requestsToSend.size());\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      long streamInitiateTime = System.currentTimeMillis();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              http2ClientMetrics.http2StreamAcquireTime.update(System.currentTimeMillis() - streamInitiateTime);\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk4Mzg0MQ=="}, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzMTI1NA==", "bodyText": "failure handling added.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r401331254", "createdAt": "2020-04-01T03:10:10Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,94 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n+import java.util.Collections;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private final Http2ClientResponseHandler http2ClientResponseHandler;\n+  private final Http2ClientMetrics http2ClientMetrics;\n+  public static final ResponseInfo WAKEUP_MARKER = new ResponseInfo(null, null, null);\n+  static final AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n+    logger.info(\"Http2NetworkClient started\");\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n-    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig, http2ClientMetrics);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler(this);\n+    this.http2ClientMetrics = http2ClientMetrics;\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = System.currentTimeMillis();\n+    List<ResponseInfo> readyResponseInfos = new ArrayList<>();\n+    // Send request\n+    http2ClientMetrics.http2ClientSendRate.mark(requestsToSend.size());\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      long streamInitiateTime = System.currentTimeMillis();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              http2ClientMetrics.http2StreamAcquireTime.update(System.currentTimeMillis() - streamInitiateTime);\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk4Mzg0MQ=="}, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjMxNzIyOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyMzozM1rOF867SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyMzozM1rOF867SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNDMyOQ==", "bodyText": "minor: add Count to the end of this metric name for consistency", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r399424329", "createdAt": "2020-03-27T17:23:33Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientMetrics.java", "diffHunk": "@@ -14,15 +14,62 @@\n \n package com.github.ambry.network.http2;\n \n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Histogram;\n+import com.codahale.metrics.Meter;\n import com.codahale.metrics.MetricRegistry;\n \n \n /**\n- * The metrics for HTTP/2 Client\n+ * Metrics for HTTP/2 Client\n  */\n public class Http2ClientMetrics {\n \n+  public final Histogram http2ConnectionAcquireTime;\n+  public final Histogram http2StreamAcquireTime;\n+  public final Histogram http2FirstStreamAcquireTime;\n+  public final Histogram http2RegularStreamAcquireTime;\n+  public final Histogram http2StreamRoundTripTime;\n+  public final Histogram http2ClientSendTime;\n+  public final Histogram http2ClientSendAndPollTime;\n+\n+  public final Counter http2NewPoolCount;\n+  public final Counter http2NewConnectionCount;\n+  public final Counter http2NewConnectionFailureCount;\n+  public final Counter http2NewStreamCount;\n+  public final Counter http2StreamAcquireFailureCount;\n+  public final Counter http2StreamSlipAcquire;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjMzMDI3OnYy", "diffSide": "RIGHT", "path": "ambry-utils/src/main/java/com.github.ambry.utils/ByteBufChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyNzowNVrOF87DmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyNzowNVrOF87DmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNjQ1Nw==", "bodyText": "Add check for closed channel to this method?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r399426457", "createdAt": "2020-03-27T17:27:05Z", "author": {"login": "cgtz"}, "path": "ambry-utils/src/main/java/com.github.ambry.utils/ByteBufChannel.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.utils;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\n+/**\n+ * A {@link WritableByteChannel} that stores the bytes written into it in a {@link ByteBuf}.\n+ */\n+public class ByteBufChannel implements WritableByteChannel {\n+  private final AtomicBoolean channelOpen = new AtomicBoolean(true);\n+  private CompositeByteBuf compositeBuffer = ByteBufAllocator.DEFAULT.compositeBuffer();\n+\n+  /**\n+   * Gets the {@link CompositeByteBuf} that is being used to receive writes.\n+   * @return the {@link ByteBuf} that is receives writes to this channel.\n+   */\n+  public ByteBuf getBuf() {\n+    return compositeBuffer;\n+  }\n+\n+  /**\n+   * The default constructor.\n+   */\n+  public ByteBufChannel() {\n+\n+  }\n+\n+  /**\n+   * Copies bytes from {@code src} into the composite buf.\n+   * @param src the source {@link ByteBuf} to copy bytes from.\n+   * @return the number of bytes copied.\n+   * @throws ClosedChannelException if the channel is closed when this function was called.\n+   */\n+  @Override\n+  public int write(ByteBuffer src) throws ClosedChannelException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjcyNzE4OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientResponseHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxMjowMVrOF9zz2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxMjowMVrOF9zz2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NjMxNQ==", "bodyText": "extra empty line here", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r400356315", "createdAt": "2020-03-30T17:12:01Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2ClientResponseHandler.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import com.github.ambry.network.ResponseInfo;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Process {@link io.netty.handler.codec.http.FullHttpResponse} translated from HTTP/2 frames\n+ */\n+@ChannelHandler.Sharable\n+class Http2ClientResponseHandler extends SimpleChannelInboundHandler<FullHttpResponse> {\n+  private LinkedBlockingQueue<ResponseInfo> responseInfoQueue = new LinkedBlockingQueue<>();\n+  private Http2NetworkClient http2NetworkClient;\n+\n+  public Http2ClientResponseHandler(Http2NetworkClient http2NetworkClient) {\n+    this.http2NetworkClient = http2NetworkClient;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, FullHttpResponse msg) throws Exception {\n+\n+    ByteBuf dup = msg.content().retainedDuplicate();\n+    // Consume length\n+    dup.readLong();\n+    RequestInfo requestInfo = ctx.channel().attr(Http2NetworkClient.REQUEST_INFO).get();\n+    http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n+        System.currentTimeMillis() - requestInfo.getStreamSendTime());\n+    requestInfo.setStreamReceiveTime(System.currentTimeMillis());\n+    ResponseInfo responseInfo = new ResponseInfo(requestInfo, null, dup);\n+    responseInfoQueue.offer(responseInfo);\n+    // TODO: is this a good place to release stream channel?\n+    ctx.channel()\n+        .parent()\n+        .attr(Http2MultiplexedChannelPool.HTTP2_MULTIPLEXED_CHANNEL_POOL)\n+        .get()\n+        .release(ctx.channel());\n+  }\n+\n+  /**\n+   * Get the queue that are not being used by {@link Http2ClientResponseHandler#channelRead0}.\n+   * {@link Http2NetworkClient} consumes {@link ResponseInfo} from this queue.\n+   * from this queue.\n+   */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjc5ODEzOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2MultiplexedChannelPool.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoyOTo0NFrOF90gpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoyOTo0NFrOF90gpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2Nzc4MQ==", "bodyText": "Would this log every time a connection is closed? It may be worth setting this to debug and also include the remote hostname if possible.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r400367781", "createdAt": "2020-03-30T17:29:44Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2MultiplexedChannelPool.java", "diffHunk": "@@ -269,6 +299,7 @@ private boolean acquireStreamOnInitializedConnection(MultiplexedChannelRecord ch\n     multiplexedChannel.closeAndReleaseChild(childChannel);\n \n     if (multiplexedChannel.canBeClosedAndReleased()) {\n+      log.info(\"Parent channel closed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjgwNjQ3OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozMTo1MVrOF90l0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozMTo1MVrOF90l0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2OTEwNA==", "bodyText": "this isn't a linked list any more.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r400369104", "createdAt": "2020-03-30T17:31:51Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,94 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n+import java.util.Collections;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private final Http2ClientResponseHandler http2ClientResponseHandler;\n+  private final Http2ClientMetrics http2ClientMetrics;\n+  public static final ResponseInfo WAKEUP_MARKER = new ResponseInfo(null, null, null);\n+  static final AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n+    logger.info(\"Http2NetworkClient started\");\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n-    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig, http2ClientMetrics);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler(this);\n+    this.http2ClientMetrics = http2ClientMetrics;\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = System.currentTimeMillis();\n+    List<ResponseInfo> readyResponseInfos = new ArrayList<>();\n+    // Send request\n+    http2ClientMetrics.http2ClientSendRate.mark(requestsToSend.size());\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      long streamInitiateTime = System.currentTimeMillis();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              http2ClientMetrics.http2StreamAcquireTime.update(System.currentTimeMillis() - streamInitiateTime);\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());\n+              requestInfo.setStreamSendTime(System.currentTimeMillis());\n+            } else {\n+              logger.error(\"Couldn't acquire stream channel: \" + future.cause());\n+              readyResponseInfos.add(new ResponseInfo(requestInfo, NetworkClientErrorCode.NetworkError, null));\n+            }\n+          });\n+    }\n+    http2ClientMetrics.http2ClientSendTime.update(System.currentTimeMillis() - startTime);\n+    // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n+\n+    ResponseInfo firstResponse = null;\n+    try {\n+      firstResponse = http2ClientResponseHandler.getResponseInfoQueue().poll(pollTimeoutMs, TimeUnit.MILLISECONDS);\n+    } catch (InterruptedException ie) {\n+      logger.debug(\"Interrupted polling responses\");\n+    }\n+    if (firstResponse == null) {\n+      return Collections.emptyList();\n+    }\n+    // using a linked list to make removal easier (maybe there's a better way to handle this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjg3ODA1OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo0OToyNlrOF91SEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzoxMDoyMlrOF-vUYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MDQzNQ==", "bodyText": "Are you sure we want to expose wakeup markers to the router layer? It seems like an internal detail of the NetworkClient.\nIf we just want to save on the iteration cost, one idea I had was to filter them out when inserting into the list. Unfortunately, since drainTo only accepts Collections, you may have to do something silly like this:\n    FilteredInserter<ResponseInfo> filteredInserter =\n        new FilteredInserter<>(readyResponseInfos, r -> r != WAKEUP_MARKER);\n    filteredInserter.add(firstResponse);\n    http2ClientResponseHandler.getResponseInfoQueue().drainTo(filteredInserter);\n    http2ClientMetrics.http2ClientSendRate.mark(readyResponseInfos.size());\n\n    http2ClientMetrics.http2ClientSendAndPollTime.update(System.currentTimeMillis() - startTime);\n    return readyResponseInfos;\n  }\n\n  private static class FilteredInserter<T> extends AbstractCollection<T> {\n    private final Collection<T> data;\n    private final Predicate<T> shouldAdd;\n\n    FilteredInserter(Collection<T> data, Predicate<T> shouldAdd) {\n      this.data = data;\n      this.shouldAdd = shouldAdd;\n    }\n\n    @Override\n    public boolean add(T t) {\n      if (shouldAdd.test(t)) {\n        return data.add(t);\n      }\n      return false;\n    }\n\n    @Override\n    public Iterator<T> iterator() {\n      return data.iterator();\n    }\n\n    @Override\n    public int size() {\n      return data.size();\n    }\n  }", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r400380435", "createdAt": "2020-03-30T17:49:26Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,94 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n+import java.util.Collections;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private final Http2ClientResponseHandler http2ClientResponseHandler;\n+  private final Http2ClientMetrics http2ClientMetrics;\n+  public static final ResponseInfo WAKEUP_MARKER = new ResponseInfo(null, null, null);\n+  static final AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n+    logger.info(\"Http2NetworkClient started\");\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n-    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig, http2ClientMetrics);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler(this);\n+    this.http2ClientMetrics = http2ClientMetrics;\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = System.currentTimeMillis();\n+    List<ResponseInfo> readyResponseInfos = new ArrayList<>();\n+    // Send request\n+    http2ClientMetrics.http2ClientSendRate.mark(requestsToSend.size());\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      long streamInitiateTime = System.currentTimeMillis();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              http2ClientMetrics.http2StreamAcquireTime.update(System.currentTimeMillis() - streamInitiateTime);\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());\n+              requestInfo.setStreamSendTime(System.currentTimeMillis());\n+            } else {\n+              logger.error(\"Couldn't acquire stream channel: \" + future.cause());\n+              readyResponseInfos.add(new ResponseInfo(requestInfo, NetworkClientErrorCode.NetworkError, null));\n+            }\n+          });\n+    }\n+    http2ClientMetrics.http2ClientSendTime.update(System.currentTimeMillis() - startTime);\n+    // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n+\n+    ResponseInfo firstResponse = null;\n+    try {\n+      firstResponse = http2ClientResponseHandler.getResponseInfoQueue().poll(pollTimeoutMs, TimeUnit.MILLISECONDS);\n+    } catch (InterruptedException ie) {\n+      logger.debug(\"Interrupted polling responses\");\n+    }\n+    if (firstResponse == null) {\n+      return Collections.emptyList();\n+    }\n+    // using a linked list to make removal easier (maybe there's a better way to handle this)\n+    readyResponseInfos.add(firstResponse);\n+    http2ClientResponseHandler.getResponseInfoQueue().drainTo(readyResponseInfos);\n+    // wakeup markers will be detected in NonBlockingRouter#onResponse()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzMTI5Nw==", "bodyText": "thanks! FilteredInserter used.", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r401331297", "createdAt": "2020-04-01T03:10:22Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/Http2NetworkClient.java", "diffHunk": "@@ -17,38 +17,94 @@\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.Http2ClientConfig;\n import com.github.ambry.network.NetworkClient;\n+import com.github.ambry.network.NetworkClientErrorCode;\n import com.github.ambry.network.RequestInfo;\n import com.github.ambry.network.ResponseInfo;\n+import io.netty.channel.Channel;\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.pool.ChannelPool;\n import io.netty.channel.pool.ChannelPoolMap;\n+import io.netty.util.AttributeKey;\n import java.net.InetSocketAddress;\n+import java.util.Collections;\n import java.util.List;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import java.util.ArrayList;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n  * A HTTP/2 implementation of {@link NetworkClient}.\n- * TODO: More implementation details will be added in next PR.\n  */\n public class Http2NetworkClient implements NetworkClient {\n   private static final Logger logger = LoggerFactory.getLogger(Http2NetworkClient.class);\n   private final EventLoopGroup eventLoopGroup;\n   private final ChannelPoolMap<InetSocketAddress, ChannelPool> pools;\n+  private final Http2ClientResponseHandler http2ClientResponseHandler;\n+  private final Http2ClientMetrics http2ClientMetrics;\n+  public static final ResponseInfo WAKEUP_MARKER = new ResponseInfo(null, null, null);\n+  static final AttributeKey<RequestInfo> REQUEST_INFO = AttributeKey.newInstance(\"RequestInfo\");\n \n   public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConfig http2ClientConfig,\n       SSLFactory sslFactory) {\n+    logger.info(\"Http2NetworkClient started\");\n     this.eventLoopGroup = new NioEventLoopGroup(http2ClientConfig.http2NettyEventLoopGroupThreads);\n-    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig);\n+    this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig, http2ClientMetrics);\n+    this.http2ClientResponseHandler = new Http2ClientResponseHandler(this);\n+    this.http2ClientMetrics = http2ClientMetrics;\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    return null;\n+    long startTime = System.currentTimeMillis();\n+    List<ResponseInfo> readyResponseInfos = new ArrayList<>();\n+    // Send request\n+    http2ClientMetrics.http2ClientSendRate.mark(requestsToSend.size());\n+    for (RequestInfo requestInfo : requestsToSend) {\n+      long streamInitiateTime = System.currentTimeMillis();\n+      this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n+          .acquire()\n+          .addListener((GenericFutureListener<Future<Channel>>) future -> {\n+            if (future.isSuccess()) {\n+              http2ClientMetrics.http2StreamAcquireTime.update(System.currentTimeMillis() - streamInitiateTime);\n+              Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientResponseHandler);\n+              streamChannel.pipeline().addLast(new AmbrySendToHttp2Adaptor());\n+              streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              streamChannel.write(requestInfo.getRequest());\n+              requestInfo.setStreamSendTime(System.currentTimeMillis());\n+            } else {\n+              logger.error(\"Couldn't acquire stream channel: \" + future.cause());\n+              readyResponseInfos.add(new ResponseInfo(requestInfo, NetworkClientErrorCode.NetworkError, null));\n+            }\n+          });\n+    }\n+    http2ClientMetrics.http2ClientSendTime.update(System.currentTimeMillis() - startTime);\n+    // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n+\n+    ResponseInfo firstResponse = null;\n+    try {\n+      firstResponse = http2ClientResponseHandler.getResponseInfoQueue().poll(pollTimeoutMs, TimeUnit.MILLISECONDS);\n+    } catch (InterruptedException ie) {\n+      logger.debug(\"Interrupted polling responses\");\n+    }\n+    if (firstResponse == null) {\n+      return Collections.emptyList();\n+    }\n+    // using a linked list to make removal easier (maybe there's a better way to handle this)\n+    readyResponseInfos.add(firstResponse);\n+    http2ClientResponseHandler.getResponseInfoQueue().drainTo(readyResponseInfos);\n+    // wakeup markers will be detected in NonBlockingRouter#onResponse()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MDQzNQ=="}, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjg4Nzg3OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com.github.ambry.network/http2/MultiplexedChannelRecord.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo1MjowOFrOF91YbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozMjo0MVrOF-BHFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MjA2MQ==", "bodyText": "minor: change this to say 800 ms", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r400382061", "createdAt": "2020-03-30T17:52:08Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -131,10 +135,11 @@ protected void initChannel(Channel ch) throws Exception {\n   }\n \n   private void enableCloseIfIdleTask() {\n+    log.info(\"enableCloseIfIdleTask is enabled.\");\n     NettyUtils.warnIfNotInEventLoop(parentChannel.eventLoop());\n \n     // Don't poll more frequently than 1 second. Being overly-conservative is okay. Blowing up our CPU is not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzNzIxOQ==", "bodyText": "The reason I changed it to 800ms is I saw some stream acquire latency is 100X ms. The change is to rule out it caused by this line. (and after the change I still see 100x ms, but anyway will keep this 800ms)", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r400437219", "createdAt": "2020-03-30T19:22:38Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -131,10 +135,11 @@ protected void initChannel(Channel ch) throws Exception {\n   }\n \n   private void enableCloseIfIdleTask() {\n+    log.info(\"enableCloseIfIdleTask is enabled.\");\n     NettyUtils.warnIfNotInEventLoop(parentChannel.eventLoop());\n \n     // Don't poll more frequently than 1 second. Being overly-conservative is okay. Blowing up our CPU is not.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MjA2MQ=="}, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDIyOA==", "bodyText": "Does the stream acquire time potentially include SSL handshakes on new connections leading to the high latency?", "url": "https://github.com/linkedin/ambry/pull/1421#discussion_r400574228", "createdAt": "2020-03-31T00:32:41Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com.github.ambry.network/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -131,10 +135,11 @@ protected void initChannel(Channel ch) throws Exception {\n   }\n \n   private void enableCloseIfIdleTask() {\n+    log.info(\"enableCloseIfIdleTask is enabled.\");\n     NettyUtils.warnIfNotInEventLoop(parentChannel.eventLoop());\n \n     // Don't poll more frequently than 1 second. Being overly-conservative is okay. Blowing up our CPU is not.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MjA2MQ=="}, "originalCommit": {"oid": "bb27ea052af89bc9983d08834e16962c7a5472c3"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1413, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}