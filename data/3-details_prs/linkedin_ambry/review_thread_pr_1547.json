{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NDA5Mjkz", "number": 1547, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToyMDowNlrOEB43bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToyMTowNVrOEDobqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDE1NzI1OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToyMDowNlrOGeAqlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzowMjoxN1rOGelPvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMTM2NQ==", "bodyText": "is isGivenStatus  needed?\nContainer.ContainerStatus status = accountService.getAccountById(messageInfo.getAccountId())\n        .getContainerById(messageInfo.getContainerId())\n        .getStatus()\nreturn (status == DELETE_IN_PROGRESS || status == INACTIVE)", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434121365", "createdAt": "2020-06-02T19:20:06Z", "author": {"login": "zzmao"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -639,14 +644,41 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n   }\n \n   /**\n-   * Gets the missing store messages by comparing the messages from the remote node\n+   * Determines if {@link MessageInfo} container in the given status.\n+   * @param messageInfo A message info class that contains basic info about a blob.\n+   * @param containerStatus Status of the container.\n+   * @return {@code true} if the blob belongs to the given status container, {@code false} otherwise.\n+   */\n+  private boolean isGivenStatus(MessageInfo messageInfo, Container.ContainerStatus containerStatus) {\n+    return accountService.getAccountById(messageInfo.getAccountId())\n+        .getContainerById(messageInfo.getContainerId())\n+        .getStatus() == containerStatus;\n+  }\n+\n+  /**\n+   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n+   * @param messageInfo A message info class that contains basic info about a blob\n+   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n+   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n+   */\n+  private boolean isDeprecatedContainer(MessageInfo messageInfo) {\n+    if (accountService != null) {\n+      return isGivenStatus(messageInfo, Container.ContainerStatus.DELETE_IN_PROGRESS) || isGivenStatus(messageInfo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40254fd62b7321aafc82a9f3d73bfad6b8d7ca6d"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMDcwMA==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434720700", "createdAt": "2020-06-03T17:02:17Z", "author": {"login": "SophieGuo410"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -639,14 +644,41 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n   }\n \n   /**\n-   * Gets the missing store messages by comparing the messages from the remote node\n+   * Determines if {@link MessageInfo} container in the given status.\n+   * @param messageInfo A message info class that contains basic info about a blob.\n+   * @param containerStatus Status of the container.\n+   * @return {@code true} if the blob belongs to the given status container, {@code false} otherwise.\n+   */\n+  private boolean isGivenStatus(MessageInfo messageInfo, Container.ContainerStatus containerStatus) {\n+    return accountService.getAccountById(messageInfo.getAccountId())\n+        .getContainerById(messageInfo.getContainerId())\n+        .getStatus() == containerStatus;\n+  }\n+\n+  /**\n+   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n+   * @param messageInfo A message info class that contains basic info about a blob\n+   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n+   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n+   */\n+  private boolean isDeprecatedContainer(MessageInfo messageInfo) {\n+    if (accountService != null) {\n+      return isGivenStatus(messageInfo, Container.ContainerStatus.DELETE_IN_PROGRESS) || isGivenStatus(messageInfo,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMTM2NQ=="}, "originalCommit": {"oid": "40254fd62b7321aafc82a9f3d73bfad6b8d7ca6d"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDcxNDY3OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjozMzoyNVrOGeGKtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzowNTowMlrOGelV_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMTUwOA==", "bodyText": "While the logic is correct, it seems a bit heavy handed to pass AccountService to ReplicaThread and see all this logic here (which probably also is similar in other places).  I would suggest adding a generic interface that lets the replica thread know if the messageInfo should be included or skipped.  The interface would have one method like:\nboolean skipFromReplication(MessageInfo messageInfo);\nThen pass this interface to ReplicaThread instead of AccountService.  In the future, we may want to extend the logic of what messages to skip and have that be transparent to replication.", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434211508", "createdAt": "2020-06-02T22:33:25Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -639,14 +644,31 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n   }\n \n   /**\n-   * Gets the missing store messages by comparing the messages from the remote node\n+   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n+   * @param messageInfo A message info class that contains basic info about a blob\n+   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n+   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n+   */\n+  private boolean isDeprecatedContainer(MessageInfo messageInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2014257d5e8583cda2ce3187b1ecb3f702a809"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMjMwMQ==", "bodyText": "Thanks for the suggestion. I use Predicate interface and implement a ReplicationSkipPredicate to check what message need to be skipped.", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434722301", "createdAt": "2020-06-03T17:05:02Z", "author": {"login": "SophieGuo410"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -639,14 +644,31 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n   }\n \n   /**\n-   * Gets the missing store messages by comparing the messages from the remote node\n+   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n+   * @param messageInfo A message info class that contains basic info about a blob\n+   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n+   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n+   */\n+  private boolean isDeprecatedContainer(MessageInfo messageInfo) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMTUwOA=="}, "originalCommit": {"oid": "ac2014257d5e8583cda2ce3187b1ecb3f702a809"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDc0OTg5OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjo1MDowMlrOGeGgbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMTo1NDo1MVrOGeu8nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNzA2OA==", "bodyText": "Should replication be subject to the same retention time after marked as DELETE_IN_PROGRESS that the compactor is?", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434217068", "createdAt": "2020-06-02T22:50:02Z", "author": {"login": "cgtz"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -639,14 +644,31 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n   }\n \n   /**\n-   * Gets the missing store messages by comparing the messages from the remote node\n+   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n+   * @param messageInfo A message info class that contains basic info about a blob\n+   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n+   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n+   */\n+  private boolean isDeprecatedContainer(MessageInfo messageInfo) {\n+    if (accountService != null) {\n+      Container.ContainerStatus status = accountService.getAccountById(messageInfo.getAccountId())\n+          .getContainerById(messageInfo.getContainerId())\n+          .getStatus();\n+      return status == Container.ContainerStatus.DELETE_IN_PROGRESS || status == Container.ContainerStatus.INACTIVE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2014257d5e8583cda2ce3187b1ecb3f702a809"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NzQ0MQ==", "bodyText": "Once the container marked as DELETE_IN_PROGRESS, the ACLs will be removed and user can't access this container. In the mean time, should we skip the associate blobs in replication directly? Unless for the future we want to undo the container deletion within the retention time, in that situation we will need to involve retention time for replication. What do you think?", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434247441", "createdAt": "2020-06-03T00:36:30Z", "author": {"login": "SophieGuo410"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -639,14 +644,31 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n   }\n \n   /**\n-   * Gets the missing store messages by comparing the messages from the remote node\n+   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n+   * @param messageInfo A message info class that contains basic info about a blob\n+   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n+   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n+   */\n+  private boolean isDeprecatedContainer(MessageInfo messageInfo) {\n+    if (accountService != null) {\n+      Container.ContainerStatus status = accountService.getAccountById(messageInfo.getAccountId())\n+          .getContainerById(messageInfo.getContainerId())\n+          .getStatus();\n+      return status == Container.ContainerStatus.DELETE_IN_PROGRESS || status == Container.ContainerStatus.INACTIVE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNzA2OA=="}, "originalCommit": {"oid": "ac2014257d5e8583cda2ce3187b1ecb3f702a809"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1ODU4NA==", "bodyText": "I guess I was thinking that not replicating the blobs is about the same as compacting them away in that it would be very hard to revert this decision. Without erasing the replica tokens, replication can't go back in time to get the missing blobs unless a new event for the blob appears on a peer like a TTLUPDATE or UNDELETE.\nWhat was the motivation for the retention time within compaction? My understanding was that it was so that the container deletion could be reverted if it was done by mistake. Sorry if that was a bad assumption on my part.", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434658584", "createdAt": "2020-06-03T15:32:43Z", "author": {"login": "cgtz"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -639,14 +644,31 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n   }\n \n   /**\n-   * Gets the missing store messages by comparing the messages from the remote node\n+   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n+   * @param messageInfo A message info class that contains basic info about a blob\n+   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n+   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n+   */\n+  private boolean isDeprecatedContainer(MessageInfo messageInfo) {\n+    if (accountService != null) {\n+      Container.ContainerStatus status = accountService.getAccountById(messageInfo.getAccountId())\n+          .getContainerById(messageInfo.getContainerId())\n+          .getStatus();\n+      return status == Container.ContainerStatus.DELETE_IN_PROGRESS || status == Container.ContainerStatus.INACTIVE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNzA2OA=="}, "originalCommit": {"oid": "ac2014257d5e8583cda2ce3187b1ecb3f702a809"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3OTY0NA==", "bodyText": "The retention time what I add previously is due to after ACLs has been removed we need some retention time before we start compaction. But you are right, I need to consider about revert the container deletion as well. So I add the retention time same as what we are doing in compaction, so that after within the retention time, the DELETE_IN_PROGRESS container won't be skipped through replication. And it's easier for revert as you mentioned.", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434879644", "createdAt": "2020-06-03T21:54:51Z", "author": {"login": "SophieGuo410"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -639,14 +644,31 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n   }\n \n   /**\n-   * Gets the missing store messages by comparing the messages from the remote node\n+   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n+   * @param messageInfo A message info class that contains basic info about a blob\n+   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n+   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n+   */\n+  private boolean isDeprecatedContainer(MessageInfo messageInfo) {\n+    if (accountService != null) {\n+      Container.ContainerStatus status = accountService.getAccountById(messageInfo.getAccountId())\n+          .getContainerById(messageInfo.getContainerId())\n+          .getStatus();\n+      return status == Container.ContainerStatus.DELETE_IN_PROGRESS || status == Container.ContainerStatus.INACTIVE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNzA2OA=="}, "originalCommit": {"oid": "ac2014257d5e8583cda2ce3187b1ecb3f702a809"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjM4MjAxOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODoxOTo1NVrOGf41Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToxNjo0MFrOGgs2Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5MDIwMw==", "bodyText": "Could we declare it as Predicate and rename it skipPredicate to make it clear we're using it to filter out?", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r436090203", "createdAt": "2020-06-05T18:19:55Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -113,7 +112,7 @@\n   private final Condition pauseCondition = lock.newCondition();\n   private final ReplicaSyncUpManager replicaSyncUpManager;\n   private final int maxReplicaCountPerRequest;\n-  private final AccountService accountService;\n+  private final Predicate predicate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4e2a8cb446bf73ebd8b71d9bf78447626ed5085"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0MjM0Mw==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r436942343", "createdAt": "2020-06-08T19:16:40Z", "author": {"login": "SophieGuo410"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -113,7 +112,7 @@\n   private final Condition pauseCondition = lock.newCondition();\n   private final ReplicaSyncUpManager replicaSyncUpManager;\n   private final int maxReplicaCountPerRequest;\n-  private final AccountService accountService;\n+  private final Predicate predicate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5MDIwMw=="}, "originalCommit": {"oid": "b4e2a8cb446bf73ebd8b71d9bf78447626ed5085"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjQzNjI1OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToyMTowNVrOGgw4Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToyMjowNFrOGgw6Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwODQ0Mw==", "bodyText": "The ReplicationSkipPredicate class has low code coverage because the test only runs the positive case where container is skipped.  Please add negative test cases.", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r437008443", "createdAt": "2020-06-08T21:21:05Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java", "diffHunk": "@@ -1328,6 +1335,94 @@ public void replicaThreadTestConverter() throws Exception {\n         idsToBeIgnoredByPartition, storeKeyConverter, expectedIndex, expectedIndex, 5);\n   }\n \n+  /**\n+   * Tests if deprecated containers have been blocked during replication.\n+   */\n+  @Test\n+  public void blockDeprecatedContainerReplicationTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b6d44e29920848fb0f29f5b9349a961bceb209d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwODkwNw==", "bodyText": "See https://codecov.io/gh/linkedin/ambry/pull/1547/diff?src=pr&el=tree#diff-YW1icnktYXBpL3NyYy9tYWluL2phdmEvY29tL2dpdGh1Yi9hbWJyeS9yZXBsaWNhdGlvbi9SZXBsaWNhdGlvblNraXBQcmVkaWNhdGUuamF2YQ==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r437008907", "createdAt": "2020-06-08T21:22:04Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java", "diffHunk": "@@ -1328,6 +1335,94 @@ public void replicaThreadTestConverter() throws Exception {\n         idsToBeIgnoredByPartition, storeKeyConverter, expectedIndex, expectedIndex, 5);\n   }\n \n+  /**\n+   * Tests if deprecated containers have been blocked during replication.\n+   */\n+  @Test\n+  public void blockDeprecatedContainerReplicationTest() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwODQ0Mw=="}, "originalCommit": {"oid": "0b6d44e29920848fb0f29f5b9349a961bceb209d"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1224, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}