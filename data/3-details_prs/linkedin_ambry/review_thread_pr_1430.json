{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTM4NDg0", "number": 1430, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoxNzoyM1rODoiv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMTowOVrODo6Gcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODM4OTQ5OnYy", "diffSide": "LEFT", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoxNzoyM1rOF3J-qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToyMDo1MlrOF3ufig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTQ5OQ==", "bodyText": "we don't need to persistCleanupToken in pause method, since there are only two cases we have to persist cleanup token to disk. One is when the startTokenSafeToPersist is changed, which is dealt with postLogFlush method. The other one is when the hardDeleteRecoveryRange is changed, which is dealt with performHardDelete.", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393379499", "createdAt": "2020-03-17T00:17:23Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -172,8 +174,6 @@ void pause() throws StoreException, IOException {\n       if (paused.compareAndSet(false, true)) {\n         logger.info(\"HardDelete thread has been paused \");\n         index.persistIndex();\n-        pruneHardDeleteRecoveryRange();\n-        persistCleanupToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33abdb8f741358b8a38548a6e9fb67e87ec7d63f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4NjM2OA==", "bodyText": "Does this mean when pause method gets the undelete lock, the performHardDelete should be complete and token should have been persisted already?", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393886368", "createdAt": "2020-03-17T18:29:14Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -172,8 +174,6 @@ void pause() throws StoreException, IOException {\n       if (paused.compareAndSet(false, true)) {\n         logger.info(\"HardDelete thread has been paused \");\n         index.persistIndex();\n-        pruneHardDeleteRecoveryRange();\n-        persistCleanupToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTQ5OQ=="}, "originalCommit": {"oid": "33abdb8f741358b8a38548a6e9fb67e87ec7d63f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4OTQ5Nw==", "bodyText": "If so, IOException in method signature can be removed", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393889497", "createdAt": "2020-03-17T18:34:14Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -172,8 +174,6 @@ void pause() throws StoreException, IOException {\n       if (paused.compareAndSet(false, true)) {\n         logger.info(\"HardDelete thread has been paused \");\n         index.persistIndex();\n-        pruneHardDeleteRecoveryRange();\n-        persistCleanupToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTQ5OQ=="}, "originalCommit": {"oid": "33abdb8f741358b8a38548a6e9fb67e87ec7d63f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3NzczOA==", "bodyText": "that's right. Persisting recovery information to disk is not a periodical action, it's triggered on demand. When 'startTokenSafeToPersist' changes, we should write it to file. And this is taking place in postLogFlush method. When the hardDeleteRecoveryRange or endToken changes, we should write it to file. And this is taking place in performHardDelete method. So there is no need to persist it here or in shutdown.", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393977738", "createdAt": "2020-03-17T21:20:52Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -172,8 +174,6 @@ void pause() throws StoreException, IOException {\n       if (paused.compareAndSet(false, true)) {\n         logger.info(\"HardDelete thread has been paused \");\n         index.persistIndex();\n-        pruneHardDeleteRecoveryRange();\n-        persistCleanupToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTQ5OQ=="}, "originalCommit": {"oid": "33abdb8f741358b8a38548a6e9fb67e87ec7d63f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODM4OTcwOnYy", "diffSide": "LEFT", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoxNzozM1rOF3J-1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToyMTowNlrOF3uf-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTU0MA==", "bodyText": "same above", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393379540", "createdAt": "2020-03-17T00:17:33Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -464,8 +464,6 @@ void shutdown() throws InterruptedException, StoreException, IOException {\n         }\n         shutdownLatch.await();\n         logger.info(\"Hard delete shutdown complete for store {} \", dataDir);\n-        pruneHardDeleteRecoveryRange();\n-        persistCleanupToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33abdb8f741358b8a38548a6e9fb67e87ec7d63f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MDk5Mg==", "bodyText": "same here, you can remove StoreException, IOException in method signature", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393890992", "createdAt": "2020-03-17T18:36:46Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -464,8 +464,6 @@ void shutdown() throws InterruptedException, StoreException, IOException {\n         }\n         shutdownLatch.await();\n         logger.info(\"Hard delete shutdown complete for store {} \", dataDir);\n-        pruneHardDeleteRecoveryRange();\n-        persistCleanupToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTU0MA=="}, "originalCommit": {"oid": "33abdb8f741358b8a38548a6e9fb67e87ec7d63f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3Nzg1MQ==", "bodyText": "explained.", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393977851", "createdAt": "2020-03-17T21:21:06Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -464,8 +464,6 @@ void shutdown() throws InterruptedException, StoreException, IOException {\n         }\n         shutdownLatch.await();\n         logger.info(\"Hard delete shutdown complete for store {} \", dataDir);\n-        pruneHardDeleteRecoveryRange();\n-        persistCleanupToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTU0MA=="}, "originalCommit": {"oid": "33abdb8f741358b8a38548a6e9fb67e87ec7d63f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTMxNjk3OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzozOTo0MlrOF3nEXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToyMToxN1rOF3ugTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA5Mw==", "bodyText": "nit: move '// + 14' to separate line and better to add a TODO ahead of it.", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393856093", "createdAt": "2020-03-17T17:39:42Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java", "diffHunk": "@@ -311,9 +311,9 @@ public void endToEndTestHardDeletes() throws Exception {\n     // For each future change to this offset, add to this variable and write an explanation of why the number changed.\n     // old value: 198728. Increased by 4 to 198732 because the format for delete record went from 2 to 3 which adds\n     // 4 bytes (two shorts) extra. The last record is a delete record so its extra 4 bytes are not (yet) added\n-    // Add 14 here, since the message header version went from 2 to 3 and adds a short to every record, which include 6\n+    // Add 14 here for version 3, since the message header version went from 2 to 3 and adds a short to every record, which include 6\n     // puts and 1 delete. (last delete is not included).\n-    int expectedTokenValueT1 = 198732 + 14;\n+    int expectedTokenValueT1 = 198732;// + 14", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6033d4f9665846efb430570edffd370cf4dad"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3NzkzMw==", "bodyText": "updated.", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393977933", "createdAt": "2020-03-17T21:21:17Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java", "diffHunk": "@@ -311,9 +311,9 @@ public void endToEndTestHardDeletes() throws Exception {\n     // For each future change to this offset, add to this variable and write an explanation of why the number changed.\n     // old value: 198728. Increased by 4 to 198732 because the format for delete record went from 2 to 3 which adds\n     // 4 bytes (two shorts) extra. The last record is a delete record so its extra 4 bytes are not (yet) added\n-    // Add 14 here, since the message header version went from 2 to 3 and adds a short to every record, which include 6\n+    // Add 14 here for version 3, since the message header version went from 2 to 3 and adds a short to every record, which include 6\n     // puts and 1 delete. (last delete is not included).\n-    int expectedTokenValueT1 = 198732 + 14;\n+    int expectedTokenValueT1 = 198732;// + 14", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA5Mw=="}, "originalCommit": {"oid": "a7d6033d4f9665846efb430570edffd370cf4dad"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTMxODA4OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzo0MDowMFrOF3nFJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzo0MDowMFrOF3nFJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjI5NA==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393856294", "createdAt": "2020-03-17T17:40:00Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java", "diffHunk": "@@ -350,7 +350,7 @@ public void endToEndTestHardDeletes() throws Exception {\n \n     time.sleep(TimeUnit.DAYS.toMillis(1));\n     // For each future change to this offset, add to this variable and write an explanation of why the number changed.\n-    int expectedTokenValueT2 = 298416 + 98 + 14 * 2;\n+    int expectedTokenValueT2 = 298416 + 98;// + 14 * 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6033d4f9665846efb430570edffd370cf4dad"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTMyMjg4OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/AmbryServerRequestsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzo0MToxN1rOF3nIWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzo0MToxN1rOF3nIWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NzExNA==", "bodyText": "nit: format this file", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393857114", "createdAt": "2020-03-17T17:41:17Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/test/java/com.github.ambry.server/AmbryServerRequestsTest.java", "diffHunk": "@@ -819,6 +822,7 @@ public void undeleteEnableDisableTest() throws Exception {\n    */\n   @Test\n   public void undeleteTest() throws Exception {\n+    Assume.assumeTrue(MessageFormatRecord.getCurrentMessageHeaderVersion() >= MessageFormatRecord.Message_Header_Version_V3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6033d4f9665846efb430570edffd370cf4dad"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTUyMDM4OnYy", "diffSide": "LEFT", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozNTowMlrOF3pIeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToyNDo0N1rOF3umjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4OTkxMw==", "bodyText": "any reason to remove this check?", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393889913", "createdAt": "2020-03-17T18:35:02Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -648,35 +646,36 @@ private void performHardDeletes(List<MessageInfo> messageInfoList) throws StoreE\n       Iterator<HardDeleteInfo> hardDeleteIterator = hardDelete.getHardDeleteMessages(readSet, factory, null);\n       Iterator<BlobReadOptions> readOptionsIterator = readOptionsList.iterator();\n \n-      /* Next, get the information to persist hard delete recovery info. Get all the information and save it, as only\n-       * after the whole range is persisted can we start with the actual log write */\n-      while (hardDeleteIterator.hasNext()) {\n-        if (!enabled.get()) {\n-          throw new StoreException(\"Aborting hard deletes as store is shutting down\",\n-              StoreErrorCodes.Store_Shutting_Down);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6033d4f9665846efb430570edffd370cf4dad"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3OTUzNA==", "bodyText": "I actually don't have to, I will add it back", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393979534", "createdAt": "2020-03-17T21:24:47Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -648,35 +646,36 @@ private void performHardDeletes(List<MessageInfo> messageInfoList) throws StoreE\n       Iterator<HardDeleteInfo> hardDeleteIterator = hardDelete.getHardDeleteMessages(readSet, factory, null);\n       Iterator<BlobReadOptions> readOptionsIterator = readOptionsList.iterator();\n \n-      /* Next, get the information to persist hard delete recovery info. Get all the information and save it, as only\n-       * after the whole range is persisted can we start with the actual log write */\n-      while (hardDeleteIterator.hasNext()) {\n-        if (!enabled.get()) {\n-          throw new StoreException(\"Aborting hard deletes as store is shutting down\",\n-              StoreErrorCodes.Store_Shutting_Down);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4OTkxMw=="}, "originalCommit": {"oid": "a7d6033d4f9665846efb430570edffd370cf4dad"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU0NTM0OnYy", "diffSide": "LEFT", "path": "ambry-messageformat/src/main/java/com.github.ambry.messageformat/MessageFormatRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MjoxOFrOF3pZIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MjoxOFrOF3pZIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDE3Ng==", "bodyText": "Add some notes here to remind people how to increase this version? just like you description.", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393894176", "createdAt": "2020-03-17T18:42:18Z", "author": {"login": "zzmao"}, "path": "ambry-messageformat/src/main/java/com.github.ambry.messageformat/MessageFormatRecord.java", "diffHunk": "@@ -59,7 +59,7 @@\n   public static final short Metadata_Content_Version_V3 = 3;\n   public static final int Message_Header_Invalid_Relative_Offset = -1;\n \n-  static short headerVersionToUse = Message_Header_Version_V3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6033d4f9665846efb430570edffd370cf4dad"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjIxNTU1OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMTowOVrOF3wFhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMTowOVrOF3wFhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzg0Nw==", "bodyText": "good catch", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r394003847", "createdAt": "2020-03-17T22:21:09Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -368,16 +368,18 @@ void preLogFlush() {\n    */\n   void postLogFlush() {\n     /* start token saved before the flush is now safe to be persisted */\n+    persistFileLock.lock();\n     startTokenSafeToPersist = startTokenBeforeLogFlush;\n-    hardDeleteLock.lock();\n     try {\n-      // PersistCleanupToken because startTokenSafeToPersist changed.\n-      pruneHardDeleteRecoveryRange();\n-      persistCleanupToken();\n+      if (!isPaused()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11f3ced606b85570a3f0db3c1504bb4ae27bc812"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1427, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}