{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDE5Njc3", "number": 1444, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo0MDowNFrODtMbtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOToxNzowMFrODuidSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzE2MjEyOnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/store/MessageInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo0MDowNFrOF-emGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo0MDowNFrOF-emGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1NzMwNw==", "bodyText": "nit: is triggered", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r401057307", "createdAt": "2020-03-31T16:40:04Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com.github.ambry/store/MessageInfo.java", "diffHunk": "@@ -22,6 +22,8 @@\n  */\n public class MessageInfo {\n \n+  // The life version when the operation is trigger by the requests from frontend.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f279b259571be0c1fd1d7590388d67b2ecdb1ee"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzY5MDM3OnYy", "diffSide": "RIGHT", "path": "ambry-messageformat/src/main/java/com/github/ambry/messageformat/ValidatingTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMzo1MDoyNlrOGAENeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjozNjo0MVrOGAGzUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyMjE2OA==", "bodyText": "This can be INFO level. (I finally understand this after reading your comment in BlobIdTransformer)", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402722168", "createdAt": "2020-04-03T03:50:26Z", "author": {"login": "jsjtzyy"}, "path": "ambry-messageformat/src/main/java/com/github/ambry/messageformat/ValidatingTransformer.java", "diffHunk": "@@ -65,24 +68,29 @@ public TransformationOutput transform(Message message) {\n       MessageHeader_Format header = getMessageHeader(version, headerBuffer);\n       StoreKey keyInStream = storeKeyFactory.getStoreKey(new DataInputStream(msgStream));\n       if (header.isPutRecord()) {\n+        if (header.hasLifeVersion() && header.getLifeVersion() != msgInfo.getLifeVersion()) {\n+          logger.warn(\"LifeVersion in stream: \" + header.getLifeVersion() + \" failed to match lifeVersion from Index: \"\n+              + msgInfo.getLifeVersion() + \" for key \" + keyInStream);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NDYyNg==", "bodyText": "I will change this to trace. This doesn't seem like an important message to have. I set this to warn when testing.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402764626", "createdAt": "2020-04-03T06:36:41Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-messageformat/src/main/java/com/github/ambry/messageformat/ValidatingTransformer.java", "diffHunk": "@@ -65,24 +68,29 @@ public TransformationOutput transform(Message message) {\n       MessageHeader_Format header = getMessageHeader(version, headerBuffer);\n       StoreKey keyInStream = storeKeyFactory.getStoreKey(new DataInputStream(msgStream));\n       if (header.isPutRecord()) {\n+        if (header.hasLifeVersion() && header.getLifeVersion() != msgInfo.getLifeVersion()) {\n+          logger.warn(\"LifeVersion in stream: \" + header.getLifeVersion() + \" failed to match lifeVersion from Index: \"\n+              + msgInfo.getLifeVersion() + \" for key \" + keyInStream);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyMjE2OA=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzY5NTI0OnYy", "diffSide": "RIGHT", "path": "ambry-messageformat/src/main/java/com/github/ambry/messageformat/ValidatingTransformer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMzo1NDowMVrOGAEQZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjozNzo0OVrOGAG0zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyMjkxNw==", "bodyText": "Any concern to use msgInfo.isUndeleted() instead of false here ? The reason I am asking is in the future we probably forget to update this hard coded value.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402722917", "createdAt": "2020-04-03T03:54:01Z", "author": {"login": "jsjtzyy"}, "path": "ambry-messageformat/src/main/java/com/github/ambry/messageformat/ValidatingTransformer.java", "diffHunk": "@@ -65,24 +68,29 @@ public TransformationOutput transform(Message message) {\n       MessageHeader_Format header = getMessageHeader(version, headerBuffer);\n       StoreKey keyInStream = storeKeyFactory.getStoreKey(new DataInputStream(msgStream));\n       if (header.isPutRecord()) {\n+        if (header.hasLifeVersion() && header.getLifeVersion() != msgInfo.getLifeVersion()) {\n+          logger.warn(\"LifeVersion in stream: \" + header.getLifeVersion() + \" failed to match lifeVersion from Index: \"\n+              + msgInfo.getLifeVersion() + \" for key \" + keyInStream);\n+        }\n         encryptionKey = header.hasEncryptionKeyRecord() ? deserializeBlobEncryptionKey(msgStream) : null;\n         props = deserializeBlobProperties(msgStream);\n         metadata = deserializeUserMetadata(msgStream);\n         blobData = deserializeBlob(msgStream);\n       } else {\n-        throw new IllegalStateException(\"Message cannot be a deleted record \");\n+        throw new IllegalStateException(\"Message cannot be anything rather than put record \");\n       }\n       if (msgInfo.getStoreKey().equals(keyInStream)) {\n         // BlobIDTransformer only exists on ambry-server and replication between servers is relying on blocking channel\n         // which is still using java ByteBuffer. So, no need to consider releasing stuff.\n         // @todo, when netty Bytebuf is adopted for blocking channel on ambry-server, remember to release this ByteBuf.\n         PutMessageFormatInputStream transformedStream =\n             new PutMessageFormatInputStream(keyInStream, encryptionKey, props, metadata,\n-                new ByteBufInputStream(blobData.content(), true), blobData.getSize(), blobData.getBlobType());\n+                new ByteBufInputStream(blobData.content(), true), blobData.getSize(), blobData.getBlobType(),\n+                msgInfo.getLifeVersion());\n         MessageInfo transformedMsgInfo =\n             new MessageInfo(keyInStream, transformedStream.getSize(), msgInfo.isDeleted(), msgInfo.isTtlUpdated(),\n-                msgInfo.getExpirationTimeInMs(), msgInfo.getCrc(), msgInfo.getAccountId(), msgInfo.getContainerId(),\n-                msgInfo.getOperationTimeMs());\n+                false, msgInfo.getExpirationTimeInMs(), msgInfo.getCrc(), msgInfo.getAccountId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNTYxMA==", "bodyText": "Actually, after second thought, shouldn't this be false for all three boolean variables (deleted, ttlUpdated, undeleted)? Since this is PUT record only, hmm, probably isTtlUpdated() is still required. (Correct me if I am wrong)", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402725610", "createdAt": "2020-04-03T04:06:43Z", "author": {"login": "jsjtzyy"}, "path": "ambry-messageformat/src/main/java/com/github/ambry/messageformat/ValidatingTransformer.java", "diffHunk": "@@ -65,24 +68,29 @@ public TransformationOutput transform(Message message) {\n       MessageHeader_Format header = getMessageHeader(version, headerBuffer);\n       StoreKey keyInStream = storeKeyFactory.getStoreKey(new DataInputStream(msgStream));\n       if (header.isPutRecord()) {\n+        if (header.hasLifeVersion() && header.getLifeVersion() != msgInfo.getLifeVersion()) {\n+          logger.warn(\"LifeVersion in stream: \" + header.getLifeVersion() + \" failed to match lifeVersion from Index: \"\n+              + msgInfo.getLifeVersion() + \" for key \" + keyInStream);\n+        }\n         encryptionKey = header.hasEncryptionKeyRecord() ? deserializeBlobEncryptionKey(msgStream) : null;\n         props = deserializeBlobProperties(msgStream);\n         metadata = deserializeUserMetadata(msgStream);\n         blobData = deserializeBlob(msgStream);\n       } else {\n-        throw new IllegalStateException(\"Message cannot be a deleted record \");\n+        throw new IllegalStateException(\"Message cannot be anything rather than put record \");\n       }\n       if (msgInfo.getStoreKey().equals(keyInStream)) {\n         // BlobIDTransformer only exists on ambry-server and replication between servers is relying on blocking channel\n         // which is still using java ByteBuffer. So, no need to consider releasing stuff.\n         // @todo, when netty Bytebuf is adopted for blocking channel on ambry-server, remember to release this ByteBuf.\n         PutMessageFormatInputStream transformedStream =\n             new PutMessageFormatInputStream(keyInStream, encryptionKey, props, metadata,\n-                new ByteBufInputStream(blobData.content(), true), blobData.getSize(), blobData.getBlobType());\n+                new ByteBufInputStream(blobData.content(), true), blobData.getSize(), blobData.getBlobType(),\n+                msgInfo.getLifeVersion());\n         MessageInfo transformedMsgInfo =\n             new MessageInfo(keyInStream, transformedStream.getSize(), msgInfo.isDeleted(), msgInfo.isTtlUpdated(),\n-                msgInfo.getExpirationTimeInMs(), msgInfo.getCrc(), msgInfo.getAccountId(), msgInfo.getContainerId(),\n-                msgInfo.getOperationTimeMs());\n+                false, msgInfo.getExpirationTimeInMs(), msgInfo.getCrc(), msgInfo.getAccountId(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyMjkxNw=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTAwNw==", "bodyText": "you are right, this is a put, all the flags would e nullified anyway in the PersistentIndex anyway. But we still have to keep ttl update flag to be the same value as in the messageinfo since we will latter use it to apply a ttl update record.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402765007", "createdAt": "2020-04-03T06:37:49Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-messageformat/src/main/java/com/github/ambry/messageformat/ValidatingTransformer.java", "diffHunk": "@@ -65,24 +68,29 @@ public TransformationOutput transform(Message message) {\n       MessageHeader_Format header = getMessageHeader(version, headerBuffer);\n       StoreKey keyInStream = storeKeyFactory.getStoreKey(new DataInputStream(msgStream));\n       if (header.isPutRecord()) {\n+        if (header.hasLifeVersion() && header.getLifeVersion() != msgInfo.getLifeVersion()) {\n+          logger.warn(\"LifeVersion in stream: \" + header.getLifeVersion() + \" failed to match lifeVersion from Index: \"\n+              + msgInfo.getLifeVersion() + \" for key \" + keyInStream);\n+        }\n         encryptionKey = header.hasEncryptionKeyRecord() ? deserializeBlobEncryptionKey(msgStream) : null;\n         props = deserializeBlobProperties(msgStream);\n         metadata = deserializeUserMetadata(msgStream);\n         blobData = deserializeBlob(msgStream);\n       } else {\n-        throw new IllegalStateException(\"Message cannot be a deleted record \");\n+        throw new IllegalStateException(\"Message cannot be anything rather than put record \");\n       }\n       if (msgInfo.getStoreKey().equals(keyInStream)) {\n         // BlobIDTransformer only exists on ambry-server and replication between servers is relying on blocking channel\n         // which is still using java ByteBuffer. So, no need to consider releasing stuff.\n         // @todo, when netty Bytebuf is adopted for blocking channel on ambry-server, remember to release this ByteBuf.\n         PutMessageFormatInputStream transformedStream =\n             new PutMessageFormatInputStream(keyInStream, encryptionKey, props, metadata,\n-                new ByteBufInputStream(blobData.content(), true), blobData.getSize(), blobData.getBlobType());\n+                new ByteBufInputStream(blobData.content(), true), blobData.getSize(), blobData.getBlobType(),\n+                msgInfo.getLifeVersion());\n         MessageInfo transformedMsgInfo =\n             new MessageInfo(keyInStream, transformedStream.getSize(), msgInfo.isDeleted(), msgInfo.isTtlUpdated(),\n-                msgInfo.getExpirationTimeInMs(), msgInfo.getCrc(), msgInfo.getAccountId(), msgInfo.getContainerId(),\n-                msgInfo.getOperationTimeMs());\n+                false, msgInfo.getExpirationTimeInMs(), msgInfo.getCrc(), msgInfo.getAccountId(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyMjkxNw=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzczMjE1OnYy", "diffSide": "RIGHT", "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/AmbryRequests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDoxOTowNlrOGAElfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjozOToxNFrOGAG29g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyODMxOQ==", "bodyText": "Why do we need this log? Can it be debug level?", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402728319", "createdAt": "2020-04-03T04:19:06Z", "author": {"login": "jsjtzyy"}, "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/AmbryRequests.java", "diffHunk": "@@ -182,6 +182,7 @@ public void handlePutRequest(NetworkRequest request) throws IOException, Interru\n         metrics.blobSizeInBytes.update(receivedRequest.getBlobSize());\n         metrics.blobUserMetadataSizeInBytes.update(receivedRequest.getUsermetadata().limit());\n         if (notification != null) {\n+          logger.info(\"AmbryRequests: write key \" + receivedRequest.getBlobId() + \" at port \" + currentNode.getPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTU1OA==", "bodyText": "sorry this is for testing, will remove it", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402765558", "createdAt": "2020-04-03T06:39:14Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/AmbryRequests.java", "diffHunk": "@@ -182,6 +182,7 @@ public void handlePutRequest(NetworkRequest request) throws IOException, Interru\n         metrics.blobSizeInBytes.update(receivedRequest.getBlobSize());\n         metrics.blobUserMetadataSizeInBytes.update(receivedRequest.getUsermetadata().limit());\n         if (notification != null) {\n+          logger.info(\"AmbryRequests: write key \" + receivedRequest.getBlobId() + \" at port \" + currentNode.getPort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyODMxOQ=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzc0MTU2OnYy", "diffSide": "RIGHT", "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/AmbryRequests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDoyNjowNFrOGAErOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzoxMDo0NFrOGAewrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyOTc4NQ==", "bodyText": "Sorry, I forgot why we use this ctor of MessageInfo when handling undelete request, in which undeleted is false. Could you explain again?", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402729785", "createdAt": "2020-04-03T04:26:04Z", "author": {"login": "jsjtzyy"}, "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/AmbryRequests.java", "diffHunk": "@@ -651,7 +654,7 @@ public void handleUndeleteRequest(NetworkRequest request) throws IOException, In\n         BlobId convertedBlobId = (BlobId) convertedStoreKey;\n         MessageInfo info =\n             new MessageInfo(convertedBlobId, -1, convertedBlobId.getAccountId(), convertedBlobId.getContainerId(),\n-                undeleteRequest.getOperationTimeMs());\n+                undeleteRequest.getOperationTimeMs(), MessageInfo.LIFE_VERSION_FROM_FRONTEND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NjkwMA==", "bodyText": "The message info serves different purposes in different components. When transmitting it between server and server or between server and frontend, it carries the current state of the blob, so it has to has undelete/delete/ttl update flags. When passing it to blobstore method, it only carries the key, operation timestamp and the the lifeVersion. For example, then passing message info to blobstore.undelete, we know we have to undelete this blob so the undelete flag will be ignored.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402766900", "createdAt": "2020-04-03T06:43:03Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/AmbryRequests.java", "diffHunk": "@@ -651,7 +654,7 @@ public void handleUndeleteRequest(NetworkRequest request) throws IOException, In\n         BlobId convertedBlobId = (BlobId) convertedStoreKey;\n         MessageInfo info =\n             new MessageInfo(convertedBlobId, -1, convertedBlobId.getAccountId(), convertedBlobId.getContainerId(),\n-                undeleteRequest.getOperationTimeMs());\n+                undeleteRequest.getOperationTimeMs(), MessageInfo.LIFE_VERSION_FROM_FRONTEND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyOTc4NQ=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyODI2Nw==", "bodyText": "This makes sense, but it doesn't have any side effect if we explicitly specify undelete is true in the ctor, does it?", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403128267", "createdAt": "2020-04-03T16:28:18Z", "author": {"login": "jsjtzyy"}, "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/AmbryRequests.java", "diffHunk": "@@ -651,7 +654,7 @@ public void handleUndeleteRequest(NetworkRequest request) throws IOException, In\n         BlobId convertedBlobId = (BlobId) convertedStoreKey;\n         MessageInfo info =\n             new MessageInfo(convertedBlobId, -1, convertedBlobId.getAccountId(), convertedBlobId.getContainerId(),\n-                undeleteRequest.getOperationTimeMs());\n+                undeleteRequest.getOperationTimeMs(), MessageInfo.LIFE_VERSION_FROM_FRONTEND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyOTc4NQ=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1NzE2Nw==", "bodyText": "it doesn't matter. I will update and add more comments.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403157167", "createdAt": "2020-04-03T17:10:44Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/AmbryRequests.java", "diffHunk": "@@ -651,7 +654,7 @@ public void handleUndeleteRequest(NetworkRequest request) throws IOException, In\n         BlobId convertedBlobId = (BlobId) convertedStoreKey;\n         MessageInfo info =\n             new MessageInfo(convertedBlobId, -1, convertedBlobId.getAccountId(), convertedBlobId.getContainerId(),\n-                undeleteRequest.getOperationTimeMs());\n+                undeleteRequest.getOperationTimeMs(), MessageInfo.LIFE_VERSION_FROM_FRONTEND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyOTc4NQ=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzc0NzkzOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/BlobIdTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDozMDoxOFrOGAEu8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjo0NDoyMFrOGAG9_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMDczNw==", "bodyText": "can be INFO level", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402730737", "createdAt": "2020-04-03T04:30:18Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/BlobIdTransformer.java", "diffHunk": "@@ -157,6 +160,12 @@ private Message newMessage(InputStream inputStream, StoreKey newKey, MessageInfo\n     BlobId newBlobId = (BlobId) newKey;\n \n     if (headerFormat.isPutRecord()) {\n+      if (headerFormat.hasLifeVersion() && headerFormat.getLifeVersion() != oldMessageInfo.getLifeVersion()) {\n+        // The original Put buffer might have lifeVersion as 0, but the message info might have a higher lifeVersion.\n+        logger.trace(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NzM1OA==", "bodyText": "I will keep it as trace, this is not really important.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402767358", "createdAt": "2020-04-03T06:44:20Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/BlobIdTransformer.java", "diffHunk": "@@ -157,6 +160,12 @@ private Message newMessage(InputStream inputStream, StoreKey newKey, MessageInfo\n     BlobId newBlobId = (BlobId) newKey;\n \n     if (headerFormat.isPutRecord()) {\n+      if (headerFormat.hasLifeVersion() && headerFormat.getLifeVersion() != oldMessageInfo.getLifeVersion()) {\n+        // The original Put buffer might have lifeVersion as 0, but the message info might have a higher lifeVersion.\n+        logger.trace(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMDczNw=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzc2MDEzOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/test/java/com/github/ambry/replication/MockConnectionPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDozODowMFrOGAE14w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjo0ODowMFrOGAHDFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMjUxNQ==", "bodyText": "Try to understand why we don't insert infoFound.getLifeVersion() into constructed new message info.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402732515", "createdAt": "2020-04-03T04:38:00Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/test/java/com/github/ambry/replication/MockConnectionPool.java", "diffHunk": "@@ -204,6 +204,11 @@ public void send(Send request) {\n                 infoFound = new MessageInfo(putMsgInfo.getStoreKey(), putMsgInfo.getSize(), true, false,\n                     putMsgInfo.getExpirationTimeInMs(), putMsgInfo.getAccountId(), putMsgInfo.getContainerId(),\n                     putMsgInfo.getOperationTimeMs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2ODY2MA==", "bodyText": "oh, we should, will update.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402768660", "createdAt": "2020-04-03T06:48:00Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-replication/src/test/java/com/github/ambry/replication/MockConnectionPool.java", "diffHunk": "@@ -204,6 +204,11 @@ public void send(Send request) {\n                 infoFound = new MessageInfo(putMsgInfo.getStoreKey(), putMsgInfo.getSize(), true, false,\n                     putMsgInfo.getExpirationTimeInMs(), putMsgInfo.getAccountId(), putMsgInfo.getContainerId(),\n                     putMsgInfo.getOperationTimeMs());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMjUxNQ=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzc2MzU1OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com/github/ambry/server/MockCluster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDo0MDoxM1rOGAE3vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjo0OTo1NVrOGAHF8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMjk5MQ==", "bodyText": "I am curious how much difference it has with this minor change.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402732991", "createdAt": "2020-04-03T04:40:13Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/MockCluster.java", "diffHunk": "@@ -488,7 +488,7 @@ void trackUpdate(String host, int port, UpdateType updateType) {\n    * @throws InterruptedException\n    */\n   boolean awaitBlobCreations() throws InterruptedException {\n-    return creationHelper.await(10, TimeUnit.SECONDS);\n+    return creationHelper.await(11, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2OTM5Mw==", "bodyText": "typo", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402769393", "createdAt": "2020-04-03T06:49:55Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/MockCluster.java", "diffHunk": "@@ -488,7 +488,7 @@ void trackUpdate(String host, int port, UpdateType updateType) {\n    * @throws InterruptedException\n    */\n   boolean awaitBlobCreations() throws InterruptedException {\n-    return creationHelper.await(10, TimeUnit.SECONDS);\n+    return creationHelper.await(11, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMjk5MQ=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzc2NjQ4OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com/github/ambry/server/Verifier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDo0MjoxNVrOGAE5cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjo1MzoxNVrOGAHKig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMzQyNg==", "bodyText": "if this is no longer valid, can we remove it?", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402733426", "createdAt": "2020-04-03T04:42:15Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/Verifier.java", "diffHunk": "@@ -141,10 +141,11 @@ public void run() {\n                     System.out.println(exceptionMsg);\n                     throw new IllegalStateException(exceptionMsg);\n                   }\n-                  checkExpiryTimeMatch(payload, ServerTestUtil.getExpiryTimeMs(propertyOutput));\n+                  // blob property doesn't have the correct expiration time after ttl update.\n+                  //checkExpiryTimeMatch(payload, ServerTestUtil.getExpiryTimeMs(propertyOutput), \"blobproperty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MDU3MA==", "bodyText": "yeap", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402770570", "createdAt": "2020-04-03T06:53:15Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/Verifier.java", "diffHunk": "@@ -141,10 +141,11 @@ public void run() {\n                     System.out.println(exceptionMsg);\n                     throw new IllegalStateException(exceptionMsg);\n                   }\n-                  checkExpiryTimeMatch(payload, ServerTestUtil.getExpiryTimeMs(propertyOutput));\n+                  // blob property doesn't have the correct expiration time after ttl update.\n+                  //checkExpiryTimeMatch(payload, ServerTestUtil.getExpiryTimeMs(propertyOutput), \"blobproperty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMzQyNg=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzc2Njk2OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/integration-test/java/com/github/ambry/server/Verifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDo0MjozMFrOGAE5sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDo0MjozMFrOGAE5sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMzQ4OA==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402733488", "createdAt": "2020-04-03T04:42:30Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/Verifier.java", "diffHunk": "@@ -240,22 +241,27 @@ public void run() {\n                   if (ByteBuffer.wrap(blobout).compareTo(ByteBuffer.wrap(payload.blob)) != 0) {\n                     throw new IllegalStateException();\n                   }\n-                  checkExpiryTimeMatch(payload,\n-                      ServerTestUtil.getExpiryTimeMs(blobAll.getBlobInfo().getBlobProperties()));\n+                  //checkExpiryTimeMatch(payload,\n+                  //    ServerTestUtil.getExpiryTimeMs(blobAll.getBlobInfo().getBlobProperties()),\n+                  //    \"blobproperty in bloball\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzgxMDM1OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNToxMDo0NVrOGAFTZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjo1MzozMlrOGAHLEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0MDA2OQ==", "bodyText": "Is this for debug purpose? If it's really worth logging, how about using logger.trace ?", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402740069", "createdAt": "2020-04-03T05:10:45Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -410,15 +409,21 @@ public void put(MessageWriteSet messageSetToWrite) throws StoreException {\n             ArrayList<IndexEntry> indexEntries = new ArrayList<>(messageInfo.size());\n             for (MessageInfo info : messageInfo) {\n               FileSpan fileSpan = log.getFileSpanForMessage(endOffsetOfLastMessage, info.getSize());\n-              IndexValue value = new IndexValue(info.getSize(), fileSpan.getStartOffset(), info.getExpirationTimeInMs(),\n-                  info.getOperationTimeMs(), info.getAccountId(), info.getContainerId());\n+              // Put from frontend should always use 0 as lifeVersion. (0 is the starting life version number for any data).\n+              // Put from replication or recovery should use liferVersion as it's.\n+              short lifeVersion = IndexValue.hasLifeVersion(info.getLifeVersion()) ? info.getLifeVersion() : (short) 0;\n+              IndexValue value =\n+                  new IndexValue(info.getSize(), fileSpan.getStartOffset(), IndexValue.FLAGS_DEFAULT_VALUE,\n+                      info.getExpirationTimeInMs(), info.getOperationTimeMs(), info.getAccountId(),\n+                      info.getContainerId(), lifeVersion);\n               IndexEntry entry = new IndexEntry(info.getStoreKey(), value, info.getCrc());\n               indexEntries.add(entry);\n               endOffsetOfLastMessage = fileSpan.getEndOffset();\n             }\n             FileSpan fileSpan = new FileSpan(indexEntries.get(0).getValue().getOffset(), endOffsetOfLastMessage);\n             index.addToIndex(indexEntries, fileSpan);\n             for (IndexEntry newEntry : indexEntries) {\n+              System.out.println(\"Handle new put Entry for key \" + newEntry.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MDcwNA==", "bodyText": "will remove, for debug purpose.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r402770704", "createdAt": "2020-04-03T06:53:32Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -410,15 +409,21 @@ public void put(MessageWriteSet messageSetToWrite) throws StoreException {\n             ArrayList<IndexEntry> indexEntries = new ArrayList<>(messageInfo.size());\n             for (MessageInfo info : messageInfo) {\n               FileSpan fileSpan = log.getFileSpanForMessage(endOffsetOfLastMessage, info.getSize());\n-              IndexValue value = new IndexValue(info.getSize(), fileSpan.getStartOffset(), info.getExpirationTimeInMs(),\n-                  info.getOperationTimeMs(), info.getAccountId(), info.getContainerId());\n+              // Put from frontend should always use 0 as lifeVersion. (0 is the starting life version number for any data).\n+              // Put from replication or recovery should use liferVersion as it's.\n+              short lifeVersion = IndexValue.hasLifeVersion(info.getLifeVersion()) ? info.getLifeVersion() : (short) 0;\n+              IndexValue value =\n+                  new IndexValue(info.getSize(), fileSpan.getStartOffset(), IndexValue.FLAGS_DEFAULT_VALUE,\n+                      info.getExpirationTimeInMs(), info.getOperationTimeMs(), info.getAccountId(),\n+                      info.getContainerId(), lifeVersion);\n               IndexEntry entry = new IndexEntry(info.getStoreKey(), value, info.getCrc());\n               indexEntries.add(entry);\n               endOffsetOfLastMessage = fileSpan.getEndOffset();\n             }\n             FileSpan fileSpan = new FileSpan(indexEntries.get(0).getValue().getOffset(), endOffsetOfLastMessage);\n             index.addToIndex(indexEntries, fileSpan);\n             for (IndexEntry newEntry : indexEntries) {\n+              System.out.println(\"Handle new put Entry for key \" + newEntry.getKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0MDA2OQ=="}, "originalCommit": {"oid": "bbd8268be5c03b39c2242a1162b2cb07632d5fdb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDgzNzc2OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/store/Store.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzo1ODowNlrOGAhSug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzo1ODowNlrOGAhSug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE5ODY1MA==", "bodyText": "nit: (1) StoreKey (2) extra space between LifeVersion and should", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403198650", "createdAt": "2020-04-03T17:58:06Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/store/Store.java", "diffHunk": "@@ -41,29 +41,37 @@\n   StoreInfo get(List<? extends StoreKey> ids, EnumSet<StoreGetOptions> storeGetOptions) throws StoreException;\n \n   /**\n-   * Puts a set of messages into the store\n+   * Puts a set of messages into the store. When the lifeVersion is {@link MessageInfo#LIFE_VERSION_FROM_FRONTEND}, this\n+   * method is invoked by the responding to the frontend request. Otherwise, it's invoked in the replication thread.\n    * @param messageSetToWrite The message set to write to the store\n+   *                          Only the Storekey, OperationTime, ExpirationTime, LifeVersion  should be used in this method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTAzMDk3OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoyOToxNFrOGAi60w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTo0NTo1N1rOGAmFbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyNTI5OQ==", "bodyText": "When revisiting this piece of code, I find line 518 directly throws exception if it's deleted without checking the version. I feel like it may have edge case there. Could you double check if it needs to be updated?", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403225299", "createdAt": "2020-04-03T18:29:14Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -470,23 +474,38 @@ public void delete(List<MessageInfo> infosToDelete) throws StoreException {\n         if (value == null) {\n           throw new StoreException(\"Cannot delete id \" + info.getStoreKey() + \" since it is not present in the index.\",\n               StoreErrorCodes.ID_Not_Found);\n-        } else if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n-          if (config.storeValidateAuthorization) {\n-            throw new StoreException(\"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n-                + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n-                StoreErrorCodes.Authorization_Failure);\n-          } else {\n-            logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n-                info.getStoreKey(), value.getAccountId(), value.getContainerId());\n-            metrics.deleteAuthorizationFailureCount.inc();\n+        }\n+        if (info.getLifeVersion() == MessageInfo.LIFE_VERSION_FROM_FRONTEND) {\n+          // This is a delete request from frontend\n+          if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n+            if (config.storeValidateAuthorization) {\n+              throw new StoreException(\n+                  \"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n+                      + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n+                  StoreErrorCodes.Authorization_Failure);\n+            } else {\n+              logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n+                  info.getStoreKey(), value.getAccountId(), value.getContainerId());\n+              metrics.deleteAuthorizationFailureCount.inc();\n+            }\n+          } else if (value.isDelete()) {\n+            throw new StoreException(\n+                \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n+                StoreErrorCodes.ID_Deleted);\n           }\n-        } else if (value.isDelete()) {\n-          throw new StoreException(\n-              \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n-              StoreErrorCodes.ID_Deleted);\n+          indexValuesToDelete.add(value);\n+          lifeVersions.add(value.getLifeVersion());\n+        } else {\n+          // This is a delete request from replication\n+          if ((value.isDelete() && value.getLifeVersion() >= info.getLifeVersion()) || (value.getLifeVersion()\n+              > info.getLifeVersion())) {\n+            throw new StoreException(\n+                \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n+                StoreErrorCodes.Life_Version_Conflict);\n+          }\n+          indexValuesToDelete.add(value);\n+          lifeVersions.add(info.getLifeVersion());\n         }\n-        indexValuesToDelete.add(value);\n-        lifeVersions.add(value.getLifeVersion());\n       }\n       synchronized (storeWriteLock) {\n         Offset currentIndexEndOffset = index.getCurrentEndOffset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NzE2Ng==", "bodyText": "It could potentially be a edge case here, when the frontend deletes a blob and replication for this delete arrive at the same time. I will check the lifeVersion before throwing an exception.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403277166", "createdAt": "2020-04-03T19:45:57Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -470,23 +474,38 @@ public void delete(List<MessageInfo> infosToDelete) throws StoreException {\n         if (value == null) {\n           throw new StoreException(\"Cannot delete id \" + info.getStoreKey() + \" since it is not present in the index.\",\n               StoreErrorCodes.ID_Not_Found);\n-        } else if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n-          if (config.storeValidateAuthorization) {\n-            throw new StoreException(\"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n-                + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n-                StoreErrorCodes.Authorization_Failure);\n-          } else {\n-            logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n-                info.getStoreKey(), value.getAccountId(), value.getContainerId());\n-            metrics.deleteAuthorizationFailureCount.inc();\n+        }\n+        if (info.getLifeVersion() == MessageInfo.LIFE_VERSION_FROM_FRONTEND) {\n+          // This is a delete request from frontend\n+          if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n+            if (config.storeValidateAuthorization) {\n+              throw new StoreException(\n+                  \"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n+                      + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n+                  StoreErrorCodes.Authorization_Failure);\n+            } else {\n+              logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n+                  info.getStoreKey(), value.getAccountId(), value.getContainerId());\n+              metrics.deleteAuthorizationFailureCount.inc();\n+            }\n+          } else if (value.isDelete()) {\n+            throw new StoreException(\n+                \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n+                StoreErrorCodes.ID_Deleted);\n           }\n-        } else if (value.isDelete()) {\n-          throw new StoreException(\n-              \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n-              StoreErrorCodes.ID_Deleted);\n+          indexValuesToDelete.add(value);\n+          lifeVersions.add(value.getLifeVersion());\n+        } else {\n+          // This is a delete request from replication\n+          if ((value.isDelete() && value.getLifeVersion() >= info.getLifeVersion()) || (value.getLifeVersion()\n+              > info.getLifeVersion())) {\n+            throw new StoreException(\n+                \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n+                StoreErrorCodes.Life_Version_Conflict);\n+          }\n+          indexValuesToDelete.add(value);\n+          lifeVersions.add(info.getLifeVersion());\n         }\n-        indexValuesToDelete.add(value);\n-        lifeVersions.add(value.getLifeVersion());\n       }\n       synchronized (storeWriteLock) {\n         Offset currentIndexEndOffset = index.getCurrentEndOffset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyNTI5OQ=="}, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTA4NDA1OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODozODowNlrOGAjXiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTozNzozM1rOGAlq9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzMjY0OQ==", "bodyText": "I raised the same question in the other PR:\nwhy not check storeValidateAuthorization here? assume replication always correct?", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403232649", "createdAt": "2020-04-03T18:38:06Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -470,23 +474,38 @@ public void delete(List<MessageInfo> infosToDelete) throws StoreException {\n         if (value == null) {\n           throw new StoreException(\"Cannot delete id \" + info.getStoreKey() + \" since it is not present in the index.\",\n               StoreErrorCodes.ID_Not_Found);\n-        } else if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n-          if (config.storeValidateAuthorization) {\n-            throw new StoreException(\"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n-                + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n-                StoreErrorCodes.Authorization_Failure);\n-          } else {\n-            logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n-                info.getStoreKey(), value.getAccountId(), value.getContainerId());\n-            metrics.deleteAuthorizationFailureCount.inc();\n+        }\n+        if (info.getLifeVersion() == MessageInfo.LIFE_VERSION_FROM_FRONTEND) {\n+          // This is a delete request from frontend\n+          if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n+            if (config.storeValidateAuthorization) {\n+              throw new StoreException(\n+                  \"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n+                      + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n+                  StoreErrorCodes.Authorization_Failure);\n+            } else {\n+              logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n+                  info.getStoreKey(), value.getAccountId(), value.getContainerId());\n+              metrics.deleteAuthorizationFailureCount.inc();\n+            }\n+          } else if (value.isDelete()) {\n+            throw new StoreException(\n+                \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n+                StoreErrorCodes.ID_Deleted);\n           }\n-        } else if (value.isDelete()) {\n-          throw new StoreException(\n-              \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n-              StoreErrorCodes.ID_Deleted);\n+          indexValuesToDelete.add(value);\n+          lifeVersions.add(value.getLifeVersion());\n+        } else {\n+          // This is a delete request from replication\n+          if ((value.isDelete() && value.getLifeVersion() >= info.getLifeVersion()) || (value.getLifeVersion()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2OTA2MQ==", "bodyText": "I suppose so. Replication thread would replicating same blob record from different nodes, which means this record is already verified in different nodes.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403269061", "createdAt": "2020-04-03T19:35:47Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -470,23 +474,38 @@ public void delete(List<MessageInfo> infosToDelete) throws StoreException {\n         if (value == null) {\n           throw new StoreException(\"Cannot delete id \" + info.getStoreKey() + \" since it is not present in the index.\",\n               StoreErrorCodes.ID_Not_Found);\n-        } else if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n-          if (config.storeValidateAuthorization) {\n-            throw new StoreException(\"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n-                + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n-                StoreErrorCodes.Authorization_Failure);\n-          } else {\n-            logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n-                info.getStoreKey(), value.getAccountId(), value.getContainerId());\n-            metrics.deleteAuthorizationFailureCount.inc();\n+        }\n+        if (info.getLifeVersion() == MessageInfo.LIFE_VERSION_FROM_FRONTEND) {\n+          // This is a delete request from frontend\n+          if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n+            if (config.storeValidateAuthorization) {\n+              throw new StoreException(\n+                  \"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n+                      + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n+                  StoreErrorCodes.Authorization_Failure);\n+            } else {\n+              logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n+                  info.getStoreKey(), value.getAccountId(), value.getContainerId());\n+              metrics.deleteAuthorizationFailureCount.inc();\n+            }\n+          } else if (value.isDelete()) {\n+            throw new StoreException(\n+                \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n+                StoreErrorCodes.ID_Deleted);\n           }\n-        } else if (value.isDelete()) {\n-          throw new StoreException(\n-              \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n-              StoreErrorCodes.ID_Deleted);\n+          indexValuesToDelete.add(value);\n+          lifeVersions.add(value.getLifeVersion());\n+        } else {\n+          // This is a delete request from replication\n+          if ((value.isDelete() && value.getLifeVersion() >= info.getLifeVersion()) || (value.getLifeVersion()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzMjY0OQ=="}, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3MDM5MQ==", "bodyText": "I suppose I can verify it here again, there is no harm of doing it again.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403270391", "createdAt": "2020-04-03T19:37:33Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -470,23 +474,38 @@ public void delete(List<MessageInfo> infosToDelete) throws StoreException {\n         if (value == null) {\n           throw new StoreException(\"Cannot delete id \" + info.getStoreKey() + \" since it is not present in the index.\",\n               StoreErrorCodes.ID_Not_Found);\n-        } else if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n-          if (config.storeValidateAuthorization) {\n-            throw new StoreException(\"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n-                + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n-                StoreErrorCodes.Authorization_Failure);\n-          } else {\n-            logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n-                info.getStoreKey(), value.getAccountId(), value.getContainerId());\n-            metrics.deleteAuthorizationFailureCount.inc();\n+        }\n+        if (info.getLifeVersion() == MessageInfo.LIFE_VERSION_FROM_FRONTEND) {\n+          // This is a delete request from frontend\n+          if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n+            if (config.storeValidateAuthorization) {\n+              throw new StoreException(\n+                  \"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n+                      + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n+                  StoreErrorCodes.Authorization_Failure);\n+            } else {\n+              logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n+                  info.getStoreKey(), value.getAccountId(), value.getContainerId());\n+              metrics.deleteAuthorizationFailureCount.inc();\n+            }\n+          } else if (value.isDelete()) {\n+            throw new StoreException(\n+                \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n+                StoreErrorCodes.ID_Deleted);\n           }\n-        } else if (value.isDelete()) {\n-          throw new StoreException(\n-              \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n-              StoreErrorCodes.ID_Deleted);\n+          indexValuesToDelete.add(value);\n+          lifeVersions.add(value.getLifeVersion());\n+        } else {\n+          // This is a delete request from replication\n+          if ((value.isDelete() && value.getLifeVersion() >= info.getLifeVersion()) || (value.getLifeVersion()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzMjY0OQ=="}, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTA4OTQ5OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODozODo1M1rOGAjaMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTozNTo1NVrOGAlmKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzMzMyOA==", "bodyText": "minor: use isTtlUpdate() to make it consistent with other Ttl", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403233328", "createdAt": "2020-04-03T18:38:53Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -542,9 +542,11 @@ void addEntry(IndexEntry entry, Offset fileEndOffset) throws StoreException {\n       }\n       if (resetKey == null) {\n         PersistentIndex.IndexEntryType type = PersistentIndex.IndexEntryType.PUT;\n-        if (entry.getValue().isFlagSet(IndexValue.Flags.Delete_Index)) {\n+        if (entry.getValue().isDelete()) {\n           type = PersistentIndex.IndexEntryType.DELETE;\n-        } else if (entry.getValue().isFlagSet(IndexValue.Flags.Ttl_Update_Index)) {\n+        } else if (entry.getValue().isUndelete()) {\n+          type = PersistentIndex.IndexEntryType.UNDELETE;\n+        } else if (entry.getValue().isTTLUpdate()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2OTE2MQ==", "bodyText": "I will update.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403269161", "createdAt": "2020-04-03T19:35:55Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -542,9 +542,11 @@ void addEntry(IndexEntry entry, Offset fileEndOffset) throws StoreException {\n       }\n       if (resetKey == null) {\n         PersistentIndex.IndexEntryType type = PersistentIndex.IndexEntryType.PUT;\n-        if (entry.getValue().isFlagSet(IndexValue.Flags.Delete_Index)) {\n+        if (entry.getValue().isDelete()) {\n           type = PersistentIndex.IndexEntryType.DELETE;\n-        } else if (entry.getValue().isFlagSet(IndexValue.Flags.Ttl_Update_Index)) {\n+        } else if (entry.getValue().isUndelete()) {\n+          type = PersistentIndex.IndexEntryType.UNDELETE;\n+        } else if (entry.getValue().isTTLUpdate()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzMzMyOA=="}, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTE1NjQ1OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1MjoxNVrOGAj-8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTo0NzozNFrOGAmKIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MjczOQ==", "bodyText": "minor: line 847 in PersistentIndex, the java doc for lifeVersion should be delete record rather than undelete record", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403242739", "createdAt": "2020-04-03T18:52:15Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -525,7 +545,8 @@ public void delete(List<MessageInfo> infosToDelete) throws StoreException {\n         int correspondingPutIndex = 0;\n         for (MessageInfo info : updatedInfos) {\n           FileSpan fileSpan = log.getFileSpanForMessage(endOffsetOfLastMessage, info.getSize());\n-          IndexValue deleteIndexValue = index.markAsDeleted(info.getStoreKey(), fileSpan, info.getOperationTimeMs());\n+          IndexValue deleteIndexValue =\n+              index.markAsDeleted(info.getStoreKey(), fileSpan, null, info.getOperationTimeMs(), info.getLifeVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3ODM3MQ==", "bodyText": "will update.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403278371", "createdAt": "2020-04-03T19:47:34Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -525,7 +545,8 @@ public void delete(List<MessageInfo> infosToDelete) throws StoreException {\n         int correspondingPutIndex = 0;\n         for (MessageInfo info : updatedInfos) {\n           FileSpan fileSpan = log.getFileSpanForMessage(endOffsetOfLastMessage, info.getSize());\n-          IndexValue deleteIndexValue = index.markAsDeleted(info.getStoreKey(), fileSpan, info.getOperationTimeMs());\n+          IndexValue deleteIndexValue =\n+              index.markAsDeleted(info.getStoreKey(), fileSpan, null, info.getOperationTimeMs(), info.getLifeVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MjczOQ=="}, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTIwNDE1OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/PersistentIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMTo1NVrOGAkaEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTo0OToyNlrOGAmP3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTY4Mg==", "bodyText": "In which case the value could be null ?", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403249682", "createdAt": "2020-04-03T19:01:55Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com/github/ambry/store/PersistentIndex.java", "diffHunk": "@@ -922,18 +921,18 @@ IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, long operationTimeMs)\n    * @return the {@link IndexValue} of the ttl update record\n    * @throws StoreException if there is any problem writing the index record\n    */\n-  private IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, MessageInfo info, long operationTimeMs,\n-      short lifeVersion) throws StoreException {\n+  IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, MessageInfo info, long operationTimeMs, short lifeVersion)\n+      throws StoreException {\n     validateFileSpan(fileSpan, true);\n     boolean hasLifeVersion = IndexValue.hasLifeVersion(lifeVersion);\n     IndexValue value = findKey(id);\n     if (value == null && info == null) {\n       throw new StoreException(\"Id \" + id + \" not present in index \" + dataDir, StoreErrorCodes.ID_Not_Found);\n     }\n     short retrievedLifeVersion = value == null ? info.getLifeVersion() : value.getLifeVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3OTgzOQ==", "bodyText": "Honestly i don't know it was here for a while then.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403279839", "createdAt": "2020-04-03T19:49:26Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/PersistentIndex.java", "diffHunk": "@@ -922,18 +921,18 @@ IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, long operationTimeMs)\n    * @return the {@link IndexValue} of the ttl update record\n    * @throws StoreException if there is any problem writing the index record\n    */\n-  private IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, MessageInfo info, long operationTimeMs,\n-      short lifeVersion) throws StoreException {\n+  IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, MessageInfo info, long operationTimeMs, short lifeVersion)\n+      throws StoreException {\n     validateFileSpan(fileSpan, true);\n     boolean hasLifeVersion = IndexValue.hasLifeVersion(lifeVersion);\n     IndexValue value = findKey(id);\n     if (value == null && info == null) {\n       throw new StoreException(\"Id \" + id + \" not present in index \" + dataDir, StoreErrorCodes.ID_Not_Found);\n     }\n     short retrievedLifeVersion = value == null ? info.getLifeVersion() : value.getLifeVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTY4Mg=="}, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTIxOTA2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/PersistentIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNDo0MFrOGAkh7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTo1MDowNVrOGAmRwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MTY5Mg==", "bodyText": "In this PR, hasLifeVersion is always false, right? (because BlobStore.handleTtlUpate passes LIFE_VERSION_FROM_FRONTEND into this method)", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403251692", "createdAt": "2020-04-03T19:04:40Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com/github/ambry/store/PersistentIndex.java", "diffHunk": "@@ -922,18 +921,18 @@ IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, long operationTimeMs)\n    * @return the {@link IndexValue} of the ttl update record\n    * @throws StoreException if there is any problem writing the index record\n    */\n-  private IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, MessageInfo info, long operationTimeMs,\n-      short lifeVersion) throws StoreException {\n+  IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, MessageInfo info, long operationTimeMs, short lifeVersion)\n+      throws StoreException {\n     validateFileSpan(fileSpan, true);\n     boolean hasLifeVersion = IndexValue.hasLifeVersion(lifeVersion);\n     IndexValue value = findKey(id);\n     if (value == null && info == null) {\n       throw new StoreException(\"Id \" + id + \" not present in index \" + dataDir, StoreErrorCodes.ID_Not_Found);\n     }\n     short retrievedLifeVersion = value == null ? info.getLifeVersion() : value.getLifeVersion();\n-    if (value != null && value.isFlagSet(IndexValue.Flags.Delete_Index)) {\n+    if (value != null && value.isDelete()) {\n       throw new StoreException(\"Id \" + id + \" deleted in index \" + dataDir, StoreErrorCodes.ID_Deleted);\n-    } else if (value != null && value.isFlagSet(IndexValue.Flags.Ttl_Update_Index)) {\n+    } else if (value != null && value.isTTLUpdate()) {\n       throw new StoreException(\"TTL of \" + id + \" already updated in index\" + dataDir, StoreErrorCodes.Already_Updated);\n     } else if (hasLifeVersion && retrievedLifeVersion > lifeVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4MDMyMg==", "bodyText": "that's right, TTL_UPDATE record will always follow a PUT or an UNDELETE.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403280322", "createdAt": "2020-04-03T19:50:05Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/PersistentIndex.java", "diffHunk": "@@ -922,18 +921,18 @@ IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, long operationTimeMs)\n    * @return the {@link IndexValue} of the ttl update record\n    * @throws StoreException if there is any problem writing the index record\n    */\n-  private IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, MessageInfo info, long operationTimeMs,\n-      short lifeVersion) throws StoreException {\n+  IndexValue markAsPermanent(StoreKey id, FileSpan fileSpan, MessageInfo info, long operationTimeMs, short lifeVersion)\n+      throws StoreException {\n     validateFileSpan(fileSpan, true);\n     boolean hasLifeVersion = IndexValue.hasLifeVersion(lifeVersion);\n     IndexValue value = findKey(id);\n     if (value == null && info == null) {\n       throw new StoreException(\"Id \" + id + \" not present in index \" + dataDir, StoreErrorCodes.ID_Not_Found);\n     }\n     short retrievedLifeVersion = value == null ? info.getLifeVersion() : value.getLifeVersion();\n-    if (value != null && value.isFlagSet(IndexValue.Flags.Delete_Index)) {\n+    if (value != null && value.isDelete()) {\n       throw new StoreException(\"Id \" + id + \" deleted in index \" + dataDir, StoreErrorCodes.ID_Deleted);\n-    } else if (value != null && value.isFlagSet(IndexValue.Flags.Ttl_Update_Index)) {\n+    } else if (value != null && value.isTTLUpdate()) {\n       throw new StoreException(\"TTL of \" + id + \" already updated in index\" + dataDir, StoreErrorCodes.Already_Updated);\n     } else if (hasLifeVersion && retrievedLifeVersion > lifeVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MTY5Mg=="}, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTI1NjQyOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOToxNzowMVrOGAk4_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzoxMTo1NFrOGAsRHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1NzU5Nw==", "bodyText": "Could you explain why we pass info.getLifeVersion() rather than resolved lifeVersion to message info?", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403257597", "createdAt": "2020-04-03T19:17:01Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -660,15 +686,16 @@ public short undelete(MessageInfo info) throws StoreException {\n       StoreKey id = info.getStoreKey();\n       Offset indexEndOffsetBeforeCheck = index.getCurrentEndOffset();\n       List<IndexValue> values = index.findAllIndexValuesForKey(id, null);\n-      index.validateSanityForUndelete(id, values, IndexValue.LIFE_VERSION_FROM_FRONTEND);\n+      index.validateSanityForUndelete(id, values, info.getLifeVersion());\n       IndexValue latestValue = values.get(0);\n       short lifeVersion = (short) (latestValue.getLifeVersion() + 1);\n       MessageFormatInputStream stream =\n           new UndeleteMessageFormatInputStream(id, info.getAccountId(), info.getContainerId(),\n               info.getOperationTimeMs(), lifeVersion);\n       // Update info to add stream size;\n       info =\n-          new MessageInfo(id, stream.getSize(), info.getAccountId(), info.getContainerId(), info.getOperationTimeMs());\n+          new MessageInfo(id, stream.getSize(), info.getAccountId(), info.getContainerId(), info.getOperationTimeMs(),\n+              info.getLifeVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4Mzc3Mg==", "bodyText": "LifeVersion is used in two different places in undelete method. One is to construct an UndeleteMessageFormatInputStream, and we have to use a resolved lifeVersion, it can't be -1.\nThe other one is to verify the validity of a Undelete IndexEntry in PersistentIndex. when verifying undelete entry in persistent index (in method markAsUndelete), we need to pass lifeVersion as -1 if it's -1 in the message info so the persistentIndex knows it's from frontend.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403283772", "createdAt": "2020-04-03T19:54:28Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -660,15 +686,16 @@ public short undelete(MessageInfo info) throws StoreException {\n       StoreKey id = info.getStoreKey();\n       Offset indexEndOffsetBeforeCheck = index.getCurrentEndOffset();\n       List<IndexValue> values = index.findAllIndexValuesForKey(id, null);\n-      index.validateSanityForUndelete(id, values, IndexValue.LIFE_VERSION_FROM_FRONTEND);\n+      index.validateSanityForUndelete(id, values, info.getLifeVersion());\n       IndexValue latestValue = values.get(0);\n       short lifeVersion = (short) (latestValue.getLifeVersion() + 1);\n       MessageFormatInputStream stream =\n           new UndeleteMessageFormatInputStream(id, info.getAccountId(), info.getContainerId(),\n               info.getOperationTimeMs(), lifeVersion);\n       // Update info to add stream size;\n       info =\n-          new MessageInfo(id, stream.getSize(), info.getAccountId(), info.getContainerId(), info.getOperationTimeMs());\n+          new MessageInfo(id, stream.getSize(), info.getAccountId(), info.getContainerId(), info.getOperationTimeMs(),\n+              info.getLifeVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1NzU5Nw=="}, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3ODQ2Mw==", "bodyText": "That's true.  I took a look at writeTo(log) method and found life version is not actually used when persisting to log. Then, it should be fine.", "url": "https://github.com/linkedin/ambry/pull/1444#discussion_r403378463", "createdAt": "2020-04-03T23:11:54Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -660,15 +686,16 @@ public short undelete(MessageInfo info) throws StoreException {\n       StoreKey id = info.getStoreKey();\n       Offset indexEndOffsetBeforeCheck = index.getCurrentEndOffset();\n       List<IndexValue> values = index.findAllIndexValuesForKey(id, null);\n-      index.validateSanityForUndelete(id, values, IndexValue.LIFE_VERSION_FROM_FRONTEND);\n+      index.validateSanityForUndelete(id, values, info.getLifeVersion());\n       IndexValue latestValue = values.get(0);\n       short lifeVersion = (short) (latestValue.getLifeVersion() + 1);\n       MessageFormatInputStream stream =\n           new UndeleteMessageFormatInputStream(id, info.getAccountId(), info.getContainerId(),\n               info.getOperationTimeMs(), lifeVersion);\n       // Update info to add stream size;\n       info =\n-          new MessageInfo(id, stream.getSize(), info.getAccountId(), info.getContainerId(), info.getOperationTimeMs());\n+          new MessageInfo(id, stream.getSize(), info.getAccountId(), info.getContainerId(), info.getOperationTimeMs(),\n+              info.getLifeVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1NzU5Nw=="}, "originalCommit": {"oid": "664afc203b9c63ab3b5a6950e7c0b2db90a7708f"}, "originalPosition": 140}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1448, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}