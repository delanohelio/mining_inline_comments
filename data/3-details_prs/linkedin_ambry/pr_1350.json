{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NjU4OTU2", "number": 1350, "title": "Cloudblobstore retries", "bodyText": "This PR adds a runtime mode property - isVcr - to CloudBlobStore.  When running in live serving mode (isVcr = false), CloudBlobStore performs retries and omits caching.", "createdAt": "2020-01-06T18:33:11Z", "url": "https://github.com/linkedin/ambry/pull/1350", "merged": true, "mergeCommit": {"oid": "090a9668bb588f2fe012c5bfbb8303ce2bd3d7d5"}, "closed": true, "closedAt": "2020-01-15T19:40:00Z", "author": {"login": "lightningrob"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbyYxYUAH2gAyMzU5NjU4OTU2OmJkY2JkZmM0NzEwZWViMTY5MWVkNDBkZjk2MzU1N2EzNDU3MGU0MmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6qdvXAFqTM0MzQ1NDQ3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bdcbdfc4710eeb1691ed40df963557a34570e42c", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/bdcbdfc4710eeb1691ed40df963557a34570e42c", "committedDate": "2019-12-21T02:02:48Z", "message": "First cut at retries on cloud operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f79317af1d7794e44b23bb567a924e03452b522", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/2f79317af1d7794e44b23bb567a924e03452b522", "committedDate": "2020-01-04T03:01:03Z", "message": "Added tests and retry metrics.\nCloudBlobStore now has isVcr property."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c228ccc86cdf806c9f4a4912b68346e7b75491da", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/c228ccc86cdf806c9f4a4912b68346e7b75491da", "committedDate": "2020-01-06T18:28:12Z", "message": "Test fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/ed6d9f6f8c1268a53049e70e7bd184daae95d9b6", "committedDate": "2020-01-06T18:50:41Z", "message": "Added config properties cloudMaxAttempts, cloudDefaultRetryDelay"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMzUzNTE5", "url": "https://github.com/linkedin/ambry/pull/1350#pullrequestreview-341353519", "createdAt": "2020-01-10T18:48:19Z", "commit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo0ODoxOVrOFcc4VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxOTowMTowOFrOFcdPPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3NzYyMA==", "bodyText": "Should we try using Callable instead of using ThrowingRunnable.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365377620", "createdAt": "2020-01-10T18:48:19Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3OTU0Mg==", "bodyText": "It might be a good idea to create a RetryUtil in ambry.commons, with the three methods we define here for retying. That way it becomes a common util which can be use somewhere else too if needed. Maybe for a future PR.\nNote: we might need to lambda or someother way to do metrics etc.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365379542", "createdAt": "2020-01-10T18:52:24Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        action.run();\n+        return;\n+      } catch (Throwable e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private Map<String, CloudBlobMetadata> doWithRetries(Callable<Map<String, CloudBlobMetadata>> action,\n+      String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Utility to either throw the input exception or sleep for a specified retry delay.\n+   * @param e the input exception to check.\n+   * @param attempts the number of attempts made so far.\n+   * @throws CloudStorageException\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MDg3OA==", "bodyText": "javadocs for return is missing.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365380878", "createdAt": "2020-01-10T18:55:24Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        action.run();\n+        return;\n+      } catch (Throwable e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MTkxOQ==", "bodyText": "javadocs missing for actionName.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365381919", "createdAt": "2020-01-10T18:57:33Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MjE0MA==", "bodyText": "javadocs missing for actionName", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365382140", "createdAt": "2020-01-10T18:58:00Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        action.run();\n+        return;\n+      } catch (Throwable e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MjIzMg==", "bodyText": "javadocs missing for actionName", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365382232", "createdAt": "2020-01-10T18:58:09Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +526,72 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private void doWithRetries(ThrowingRunnable action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        action.run();\n+        return;\n+      } catch (Throwable e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the action to execute.\n+   * @throws CloudStorageException\n+   */\n+  private Map<String, CloudBlobMetadata> doWithRetries(Callable<Map<String, CloudBlobMetadata>> action,\n+      String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Utility to either throw the input exception or sleep for a specified retry delay.\n+   * @param e the input exception to check.\n+   * @param attempts the number of attempts made so far.\n+   * @throws CloudStorageException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MzQ4NQ==", "bodyText": "we can define isRetryable here instead of above.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r365383485", "createdAt": "2020-01-10T19:01:08Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -457,6 +458,28 @@ AzureBlobDataAccessor getAzureBlobDataAccessor() {\n     return azureBlobDataAccessor;\n   }\n \n+  /**\n+   * Construct a {@link CloudStorageException} from a root cause exception.\n+   * @param message the exception message.\n+   * @param e the root cause exception.\n+   * @return the {@link CloudStorageException}.\n+   */\n+  private static final CloudStorageException toCloudStorageException(String message, Exception e) {\n+    boolean isRetryable = false;\n+    Long retryDelayMs = null;\n+    int statusCode = -1;\n+    if (e instanceof BlobStorageException) {\n+      statusCode = ((BlobStorageException) e).getStatusCode();\n+    }\n+    else if (e instanceof DocumentClientException) {\n+      statusCode = ((DocumentClientException) e).getStatusCode();\n+      retryDelayMs = ((DocumentClientException) e).getRetryAfterInMilliseconds();\n+    }\n+    // Everything is retryable except NOT_FOUND\n+    isRetryable = (statusCode != HttpConstants.StatusCodes.NOTFOUND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6d9f6f8c1268a53049e70e7bd184daae95d9b6"}, "originalPosition": 111}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf038fd48e258b9cedf39cb26dbce6a729c935e8", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/bf038fd48e258b9cedf39cb26dbce6a729c935e8", "committedDate": "2020-01-14T18:53:48Z", "message": "Address Ankur's review comments."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37d8e3044423f1ca282bce5d41f9a325e5852041", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/37d8e3044423f1ca282bce5d41f9a325e5852041", "committedDate": "2020-01-14T20:11:15Z", "message": "Removed doWithRetries version using ThrowingRunnable"}, "afterCommit": {"oid": "bf038fd48e258b9cedf39cb26dbce6a729c935e8", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/bf038fd48e258b9cedf39cb26dbce6a729c935e8", "committedDate": "2020-01-14T18:53:48Z", "message": "Address Ankur's review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb78130156ec55bbdaf68e0bc29db8102f6cc722", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/bb78130156ec55bbdaf68e0bc29db8102f6cc722", "committedDate": "2020-01-14T22:54:38Z", "message": "Revert test properties changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a39c28ca51aafcc51a7d9846fcaa5de05defdd59", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/a39c28ca51aafcc51a7d9846fcaa5de05defdd59", "committedDate": "2020-01-14T23:17:34Z", "message": "Revert unintentional changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1344557e92c50fcfa3fa7e22e329416bb6b2b3e", "author": {"user": {"login": "lightningrob", "name": "Rob Block"}}, "url": "https://github.com/linkedin/ambry/commit/b1344557e92c50fcfa3fa7e22e329416bb6b2b3e", "committedDate": "2020-01-14T22:59:28Z", "message": "Revert change to AzureBlobDataAccessor"}, "afterCommit": {"oid": "a39c28ca51aafcc51a7d9846fcaa5de05defdd59", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/a39c28ca51aafcc51a7d9846fcaa5de05defdd59", "committedDate": "2020-01-14T23:17:34Z", "message": "Revert unintentional changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff07d562d960e99682dc28977fe38335af18a355", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/ff07d562d960e99682dc28977fe38335af18a355", "committedDate": "2020-01-14T23:23:42Z", "message": "More reversions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/35334a292fe64b20303b8eb6fb019ef67bc04346", "committedDate": "2020-01-14T23:32:25Z", "message": "Redo changes to retry utility"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTEyODQ4", "url": "https://github.com/linkedin/ambry/pull/1350#pullrequestreview-342912848", "createdAt": "2020-01-14T23:46:40Z", "commit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzo0Njo0MFrOFdpcDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDozNzo0MVrOFdqQeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzMTk1MA==", "bodyText": "Can you save the last exception encountered and make it the cause of this exception?\n      } catch (Exception e) {\n        attempts++;\n        throwOrDelay(e, actionName, attempts);\n        lastException = e;\n      }\n    }\n    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\", lastException);", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366631950", "createdAt": "2020-01-14T23:46:40Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +530,55 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the {@link Callable} to call.\n+   * @param actionName the name of the action.\n+   * @return the return value of the action.\n+   * @throws CloudStorageException\n+   */\n+  private <T> T doWithRetries(Callable<T> action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MDczMg==", "bodyText": "why not use the built in logger formatting?\nlogger.error(\"{} failed attempt {}, retrying after {} ms.\", actionName, attempts, delay);", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366640732", "createdAt": "2020-01-15T00:19:46Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +530,55 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the {@link Callable} to call.\n+   * @param actionName the name of the action.\n+   * @return the return value of the action.\n+   * @throws CloudStorageException\n+   */\n+  private <T> T doWithRetries(Callable<T> action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");\n+  }\n+\n+  /**\n+   * Utility to either throw the input exception or sleep for a specified retry delay.\n+   * @param e the input exception to check.\n+   * @param actionName the name of the action that threw the exception.\n+   * @param attempts the number of attempts made so far.\n+   * @throws CloudStorageException\n+   */\n+  private void throwOrDelay(Throwable e, String actionName, int attempts) throws CloudStorageException {\n+    if (e instanceof CloudStorageException) {\n+      CloudStorageException cse = (CloudStorageException) e;\n+      if (cse.isRetryable() && attempts < maxAttempts) {\n+        long delay = (cse.getRetryDelayMs() > 0) ? cse.getRetryDelayMs() : defaultRetryDelay;\n+        logger.error(String.format(\"%s failed attempt %d, retrying after %d ms.\", actionName, attempts, delay));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MjI5Mw==", "bodyText": "Actually, I guess this code may not be possible to reach with the implementation of throwOrDelay, since the method throws when attempts is exhausted.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366642293", "createdAt": "2020-01-15T00:25:35Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -503,6 +530,55 @@ private void checkStarted() throws StoreException {\n     }\n   }\n \n+  /**\n+   * Execute an action up to the configured number of attempts.\n+   * @param action the {@link Callable} to call.\n+   * @param actionName the name of the action.\n+   * @return the return value of the action.\n+   * @throws CloudStorageException\n+   */\n+  private <T> T doWithRetries(Callable<T> action, String actionName) throws CloudStorageException {\n+    int attempts = 0;\n+    while (attempts < maxAttempts) {\n+      try {\n+        return action.call();\n+      } catch (Exception e) {\n+        attempts++;\n+        throwOrDelay(e, actionName, attempts);\n+      }\n+    }\n+    throw new CloudStorageException(actionName + \" failed \" + attempts + \" attempts\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzMTk1MA=="}, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzIyNA==", "bodyText": "can you reformat this file?", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366643224", "createdAt": "2020-01-15T00:29:14Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -457,6 +458,28 @@ AzureBlobDataAccessor getAzureBlobDataAccessor() {\n     return azureBlobDataAccessor;\n   }\n \n+  /**\n+   * Construct a {@link CloudStorageException} from a root cause exception.\n+   * @param message the exception message.\n+   * @param e the root cause exception.\n+   * @return the {@link CloudStorageException}.\n+   */\n+  private static final CloudStorageException toCloudStorageException(String message, Exception e) {\n+    boolean isRetryable = false;\n+    Long retryDelayMs = null;\n+    int statusCode = -1;\n+    if (e instanceof BlobStorageException) {\n+      statusCode = ((BlobStorageException) e).getStatusCode();\n+    }\n+    else if (e instanceof DocumentClientException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NTM2OQ==", "bodyText": "A Timer is actually a combination of a Meter (for rate tracking) and a Histogram of durations. Did you want to monitor specific percentiles of retry wait times, or are you more interested in the total time spent waiting? If it is the latter, you may want to consider either a Counter for this metric if you want a count/second, or a Gauge if you want to record the cumulative time spent waiting for one run of an ambry process.", "url": "https://github.com/linkedin/ambry/pull/1350#discussion_r366645369", "createdAt": "2020-01-15T00:37:41Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/VcrMetrics.java", "diffHunk": "@@ -37,6 +37,11 @@\n   public final Counter addPartitionErrorCount;\n   public final Counter removePartitionErrorCount;\n   public final Counter tokenReloadWarnCount;\n+  // Retry metrics\n+  /** Number of times operation was retried */\n+  public final Counter retryCount;\n+  /** Cumulative time spent waiting before retries */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35334a292fe64b20303b8eb6fb019ef67bc04346"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c707bacfa7815574c71622b2cda308f7333570d", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/8c707bacfa7815574c71622b2cda308f7333570d", "committedDate": "2020-01-15T19:01:09Z", "message": "Address Casey's review comments, change retryWaitTime metric to counter."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNDUwODc5", "url": "https://github.com/linkedin/ambry/pull/1350#pullrequestreview-343450879", "createdAt": "2020-01-15T19:04:56Z", "commit": {"oid": "8c707bacfa7815574c71622b2cda308f7333570d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNDU0NDc1", "url": "https://github.com/linkedin/ambry/pull/1350#pullrequestreview-343454475", "createdAt": "2020-01-15T19:11:02Z", "commit": {"oid": "8c707bacfa7815574c71622b2cda308f7333570d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1531, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}