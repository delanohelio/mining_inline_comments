{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODkxNzk0", "number": 1505, "title": "Improving POST request failure handling", "bodyText": "Introducing a delay in closing the netty channel when a POST request fails due to any reason.\nAdding a config to enable this behaviour. By default this is disabled.\nAlso adding a metric to keep a count of such delayed close event.\nFix for some existing UT and and new UT to test the new code flow.", "createdAt": "2020-05-06T05:52:45Z", "url": "https://github.com/linkedin/ambry/pull/1505", "merged": true, "mergeCommit": {"oid": "cbe5c4837140cf3dd88041eb98d1a1b549582702"}, "closed": true, "closedAt": "2020-05-11T18:02:51Z", "author": {"login": "ssen-li"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceZxb3AH2gAyNDEzODkxNzk0OjI3NmFhNjcxMzNhMzNmOGI2YmVlMmIyNmY2OGVhY2IxYzMxY2QxYTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgS3yUgH2gAyNDEzODkxNzk0OmEwOGZkYTVkMGI3N2Q2MWQxYWFmODI5MjdlYzliY2Q4ZmEwZWIxMTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "276aa67133a33f8b6bee2b26f68eacb1c31cd1a9", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/276aa67133a33f8b6bee2b26f68eacb1c31cd1a9", "committedDate": "2020-05-05T20:05:26Z", "message": "Introducing a delay in closing the netty channel when a POST request fails due to any reason.\nAdding a config to enable this behaviour. By default this is disabled.\nAlso adding a metric to keep a count of such delayed close event.\nFix for some existing UT and and new UT to test the new code flow."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a54e259a79c65a0ec53bf4b55dce9e043d5c4af", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/5a54e259a79c65a0ec53bf4b55dce9e043d5c4af", "committedDate": "2020-05-05T20:39:35Z", "message": "Merge branch 'master' into ambry6804"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c875af4d0596d18c05bbc138cd066ba5629a957c", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/c875af4d0596d18c05bbc138cd066ba5629a957c", "committedDate": "2020-05-06T05:43:18Z", "message": "rename the variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "327a6a95372c56d28332cab88809db267ae5feb2", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/327a6a95372c56d28332cab88809db267ae5feb2", "committedDate": "2020-05-06T05:50:42Z", "message": "removing the sleep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/00dc8e661333eba2c64213f1c79d176ecbf9d135", "committedDate": "2020-05-06T15:33:25Z", "message": "adding another metrics to keep track of delayed close execution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d98df91792d8d343b7f3fe58964f4c8e66c0b09f", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/d98df91792d8d343b7f3fe58964f4c8e66c0b09f", "committedDate": "2020-05-06T18:55:14Z", "message": "Merge branch 'master' of github.com:linkedin/ambry into ambry6804"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2OTE0NjAx", "url": "https://github.com/linkedin/ambry/pull/1505#pullrequestreview-406914601", "createdAt": "2020-05-06T19:18:00Z", "commit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOToxODowMFrOGRhyrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTozNToyNVrOGRiZQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzMjYyMQ==", "bodyText": "closure", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421032621", "createdAt": "2020-05-06T19:18:00Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -110,16 +114,37 @@\n   // was successfully sent\n   private ResponseStatus errorResponseStatus = null;\n \n+  /**\n+   * A {@link ChannelFutureListener} that closes the {@link Channel} which is\n+   * associated with the specified {@link ChannelFuture} after certain delay which is configured through {@link NettyConfig}.\n+   */\n+  public final ChannelFutureListener DELAYED_CLOSE = new ChannelFutureListener() {\n+    @Override\n+    public void operationComplete(ChannelFuture future) {\n+      logger.trace(\"scheduling closeure of channel {}\", future.channel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzNTg2Mw==", "bodyText": "Need to format this class for line wrapping.  In LI Intellij, do Code/Reformat Code or key shortcut Cmd-Alt-L", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421035863", "createdAt": "2020-05-06T19:23:38Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -681,10 +706,16 @@ private HttpResponseStatus getHttpResponseStatus(ResponseStatus responseStatus)\n    * </p>\n    * May also close the channel if the class internally is forcing a close (i.e. if {@link #close()} is called.\n    * @param closeNetworkChannel network channel is closed if {@code true}.\n+   * @param shouldDelay network channel may be closed after certain delay if {@code true}.\n    */\n-  private void completeRequest(boolean closeNetworkChannel) {\n+  private void completeRequest(boolean closeNetworkChannel, boolean shouldDelay) {\n     if ((closeNetworkChannel || forceClose) && ctx.channel().isOpen()) {\n-      writeFuture.addListener(ChannelFutureListener.CLOSE);\n+      if (!shouldDelay || (request != null && !request.getRestMethod().equals(RestMethod.POST)) || (this.nettyConfig.nettyServerCloseDelayTimeoutMs == 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzNzU4Mw==", "bodyText": "also it's a bit hard to read the line, I suggest reversing this line and changing the OR's to AND's and removing NOT's (meaning we do want to delay the close).", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421037583", "createdAt": "2020-05-06T19:26:37Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -681,10 +706,16 @@ private HttpResponseStatus getHttpResponseStatus(ResponseStatus responseStatus)\n    * </p>\n    * May also close the channel if the class internally is forcing a close (i.e. if {@link #close()} is called.\n    * @param closeNetworkChannel network channel is closed if {@code true}.\n+   * @param shouldDelay network channel may be closed after certain delay if {@code true}.\n    */\n-  private void completeRequest(boolean closeNetworkChannel) {\n+  private void completeRequest(boolean closeNetworkChannel, boolean shouldDelay) {\n     if ((closeNetworkChannel || forceClose) && ctx.channel().isOpen()) {\n-      writeFuture.addListener(ChannelFutureListener.CLOSE);\n+      if (!shouldDelay || (request != null && !request.getRestMethod().equals(RestMethod.POST)) || (this.nettyConfig.nettyServerCloseDelayTimeoutMs == 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzNTg2Mw=="}, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MDQzMQ==", "bodyText": "Minor: please create VerifiableProperties once since it's being used multiple times.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421040431", "createdAt": "2020-05-06T19:31:43Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -658,7 +659,8 @@ public void channelInactiveTest() {\n     EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler);\n     NettyResponseChannel nettyResponseChannel =\n         new NettyResponseChannel(new MockChannelHandlerContext(channel), new NettyMetrics(new MetricRegistry()),\n-            new PerformanceConfig(new VerifiableProperties(new Properties())));\n+            new PerformanceConfig(new VerifiableProperties(new Properties())),\n+            new NettyConfig(new VerifiableProperties(new Properties())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MTc5Nw==", "bodyText": "Line formatting", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421041797", "createdAt": "2020-05-06T19:34:11Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1591,7 +1626,7 @@ private void setNullHeaders() throws RestServiceException {\n    */\n   private void setRequestTest() throws RestServiceException {\n     ResponseStatus status = ResponseStatus.Accepted;\n-    restResponseChannel = new NettyResponseChannel(ctx, new NettyMetrics(new MetricRegistry()), PERFORMANCE_CONFIG);\n+    restResponseChannel = new NettyResponseChannel(ctx, new NettyMetrics(new MetricRegistry()), PERFORMANCE_CONFIG, this.nettyConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MjQ5Nw==", "bodyText": "Can also wait 500ms and verify that it does get closed.  Also check the counters were incremented.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421042497", "createdAt": "2020-05-06T19:35:25Z", "author": {"login": "lightningrob"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,33 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, \"500\");\n+    NettyConfig nettyConfig  = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest = RestTestUtils.createFullRequest(HttpMethod.POST,\n+        TestingUri.OnResponseCompleteWithRestException.toString(), httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();\n+    assertEquals(\"Unexpected response status\", getExpectedHttpResponseStatus(REST_ERROR_CODE), response.status());\n+    //channel should not be closed right away.\n+    assertTrue(\"Channel closed on the server\", channel.isActive());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00dc8e661333eba2c64213f1c79d176ecbf9d135"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e732dca1afd644576825f18dd54e49b919d97615", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/e732dca1afd644576825f18dd54e49b919d97615", "committedDate": "2020-05-06T20:27:26Z", "message": "addressing the review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjA2NDc2", "url": "https://github.com/linkedin/ambry/pull/1505#pullrequestreview-407606476", "createdAt": "2020-05-07T15:49:19Z", "commit": {"oid": "e732dca1afd644576825f18dd54e49b919d97615"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTo0OToxOVrOGSE_6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTo0OToxOVrOGSE_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwOTQ0OQ==", "bodyText": "I wonder if we need to only do this on post requests? It is probably less likely to experience this issue on non-POST requests since those don't usually have a body and closeNetworkChannel is rarely true, but I don't see an issue with doing the delayed close on all types of requests where closeNetworkChannel is true", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r421609449", "createdAt": "2020-05-07T15:49:19Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com/github/ambry/rest/NettyResponseChannel.java", "diffHunk": "@@ -681,10 +706,17 @@ private HttpResponseStatus getHttpResponseStatus(ResponseStatus responseStatus)\n    * </p>\n    * May also close the channel if the class internally is forcing a close (i.e. if {@link #close()} is called.\n    * @param closeNetworkChannel network channel is closed if {@code true}.\n+   * @param shouldDelay network channel may be closed after certain delay if {@code true}.\n    */\n-  private void completeRequest(boolean closeNetworkChannel) {\n+  private void completeRequest(boolean closeNetworkChannel, boolean shouldDelay) {\n     if ((closeNetworkChannel || forceClose) && ctx.channel().isOpen()) {\n-      writeFuture.addListener(ChannelFutureListener.CLOSE);\n+      if (shouldDelay && (request != null && request.getRestMethod().equals(RestMethod.POST))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e732dca1afd644576825f18dd54e49b919d97615"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c", "committedDate": "2020-05-09T05:44:26Z", "message": "enhancing the UT to test the channel close after the delay.:wq"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Nzc5NjU0", "url": "https://github.com/linkedin/ambry/pull/1505#pullrequestreview-408779654", "createdAt": "2020-05-10T20:38:30Z", "commit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODYzNDc4", "url": "https://github.com/linkedin/ambry/pull/1505#pullrequestreview-408863478", "createdAt": "2020-05-11T05:13:13Z", "commit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNToxMzoxM1rOGTMuLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjowMzo0MlrOGTNqYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc4NDU1Nw==", "bodyText": "minor: I think this could be removed, we can directly give nettyConfig an initial value at line 1286.", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r422784557", "createdAt": "2020-05-11T05:13:13Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1234,6 +1273,7 @@ public static TestingUri getTestingURI(String uri) {\n   static final byte[] CHUNK = TestUtils.getRandomBytes(1024);\n   static final String CHUNK_COUNT_HEADER_NAME = \"chunkCount\";\n   static PerformanceConfig PERFORMANCE_CONFIG = new PerformanceConfig(new VerifiableProperties(new Properties()));\n+  static NettyConfig NETTY_CONFIG = new NettyConfig(new VerifiableProperties(new Properties()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc4NTUzOQ==", "bodyText": "Minor: Could you move this test to line 674 (ahead of helper methods)?", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r422785539", "createdAt": "2020-05-11T05:16:58Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,43 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5MDcxNw==", "bodyText": "nit: redundant cast, (HttpResponse) can be removed", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r422790717", "createdAt": "2020-05-11T05:34:36Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,43 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    long delayMs = 500;\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, String.valueOf(delayMs));\n+    NettyConfig nettyConfig = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest =\n+        RestTestUtils.createFullRequest(HttpMethod.POST, TestingUri.OnResponseCompleteWithRestException.toString(),\n+            httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5OTk3MQ==", "bodyText": "feel like channel.runPendingTasks(); can be called before Thread.sleep", "url": "https://github.com/linkedin/ambry/pull/1505#discussion_r422799971", "createdAt": "2020-05-11T06:03:42Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/test/java/com/github/ambry/rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1082,6 +1084,43 @@ private void sendRequestAndEvaluateResponsePerformance(HttpRequest httpRequest,\n       assertFalse(httpRequest.method() + \" request should be unsatisfied\", MockNettyRequest.mockTracker.isSatisfied());\n     }\n   }\n+\n+  /**\n+   * Tests the invocation of DELAYED_CLOSE when post failures happen in {@link NettyResponseChannel}.\n+   */\n+  @Test\n+  public void completeRequestWithDelayedCloseTest() throws Exception {\n+    Properties properties = new Properties();\n+    long delayMs = 500;\n+    properties.setProperty(NettyConfig.NETTY_SERVER_CLOSE_DELAY_TIMEOUT_MS, String.valueOf(delayMs));\n+    NettyConfig nettyConfig = new NettyConfig(new VerifiableProperties(properties));\n+    MockNettyMessageProcessor processor = new MockNettyMessageProcessor();\n+    processor.setNettyConfig(nettyConfig);\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler, processor);\n+\n+    RestServiceErrorCode REST_ERROR_CODE = RestServiceErrorCode.BadRequest;\n+    String content = \"@@randomContent@@@\";\n+    HttpHeaders httpHeaders = new DefaultHttpHeaders();\n+    httpHeaders.set(MockNettyMessageProcessor.REST_SERVICE_ERROR_CODE_HEADER_NAME, REST_ERROR_CODE);\n+    httpHeaders.set(MockNettyMessageProcessor.INCLUDE_EXCEPTION_MESSAGE_IN_RESPONSE_HEADER_NAME, \"true\");\n+    HttpRequest httpRequest =\n+        RestTestUtils.createFullRequest(HttpMethod.POST, TestingUri.OnResponseCompleteWithRestException.toString(),\n+            httpHeaders, content.getBytes());\n+    channel.writeInbound(httpRequest);\n+    HttpResponse response = (HttpResponse) channel.readOutbound();\n+    assertEquals(\"Unexpected response status\", getExpectedHttpResponseStatus(REST_ERROR_CODE), response.status());\n+    //channel should not be closed right away.\n+    assertTrue(\"Channel closed on the server\", channel.isActive());\n+    //wait for delayed time * 2 times (to rule out timing out on border) and then check again.\n+    Thread.sleep(delayMs * 2);\n+    channel.runPendingTasks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzMzMTcw", "url": "https://github.com/linkedin/ambry/pull/1505#pullrequestreview-409333170", "createdAt": "2020-05-11T16:27:46Z", "commit": {"oid": "d83cf4dfca4c72af7b1b5a072cf5b7f87df6250c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a08fda5d0b77d61d1aaf82927ec9bcd8fa0eb119", "author": {"user": {"login": "ssen-li", "name": "Subhadeep Sen"}}, "url": "https://github.com/linkedin/ambry/commit/a08fda5d0b77d61d1aaf82927ec9bcd8fa0eb119", "committedDate": "2020-05-11T17:10:53Z", "message": "addressing more review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1459, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}