{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDg2MzEz", "number": 1493, "title": "Prevent inactive child clients from slowing down sendAndPoll", "bodyText": "Previously, CompositeNetworkClient.sendAndPoll iterates over each child\nNetworkClient and calls sendAndPoll on each of them. This is alright if\nboth child clients are active and with many requests/responses to handle.\nHowever, if one of the clients is less active, it may wait for up to the\nconfigured poll timeout. Since this iteration is done from a single loop,\nwaiting for the inactive client prevents responses produced by the other\nchild client from being handled.\nTo fix this, this change introduces background threads so that each\nsendAndPoll can run in parallel (similar to parallelism in Selector).\nWhichever child client finishes its sendAndPoll first will call wakeup\non the other child clients to indicate that they should return from\nsendAndPoll immediately.\nFixes #1492", "createdAt": "2020-04-29T04:46:27Z", "url": "https://github.com/linkedin/ambry/pull/1493", "merged": true, "mergeCommit": {"oid": "3e0017437fb044296e3bc7a99de638d3e6327be1"}, "closed": true, "closedAt": "2020-04-30T04:50:49Z", "author": {"login": "cgtz"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccRCy2AH2gAyNDEwNDg2MzEzOjk5MmM2ZWEzNWRjYzM5Y2RjMmUxNTVmOTk5OGJlZTNhMTMzMzk0YTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcclr0vgFqTQwMzE5Nzg3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "992c6ea35dcc39cdc2e155f9998bee3a133394a9", "author": {"user": {"login": "cgtz", "name": "Casey Getz"}}, "url": "https://github.com/linkedin/ambry/commit/992c6ea35dcc39cdc2e155f9998bee3a133394a9", "committedDate": "2020-04-29T04:47:24Z", "message": "CompositeNetworkClient: Prevent inactive child clients from slowing down sendAndPoll\n\nPreviously, CompositeNetworkClient.sendAndPoll iterates over each child\nNetworkClient and calls sendAndPoll on each of them. This is alright if\nboth child clients are active and with many requests/responses to handle.\nHowever, if one of the clients is less active, it may wait for up to the\nconfigured poll timeout. Since this iteration is done from a single loop,\nwaiting for the inactive client prevents responses produced by the other\nchild client from being handled.\n\nTo fix this, this change introduces background threads so that each\nsendAndPoll can run in parallel (similar to parallelism in Selector).\nWhichever child client finishes its sendAndPoll first will call wakeup\non the other child clients to indicate that they should return from\nsendAndPoll immediately.\n\nFixes #1492"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebdb1a7aef29b8f7d23bc6a3ad228affbd2ade48", "author": {"user": {"login": "cgtz", "name": "Casey Getz"}}, "url": "https://github.com/linkedin/ambry/commit/ebdb1a7aef29b8f7d23bc6a3ad228affbd2ade48", "committedDate": "2020-04-29T04:44:41Z", "message": "CompositeNetworkClient: Prevent inactive child clients from slowing down sendAndPoll\n\nPreviously, CompositeNetworkClient.sendAndPoll iterates over each child\nNetworkClient and calls sendAndPoll on each of them. This is alright if\nboth child clients are active and with many requests/responses to handle.\nHowever, if one of the clients is less active, it may wait for up to the\nconfigured poll timeout. Since this iteration is done from a single loop,\nwaiting for the inactive client prevents responses produced by the other\nchild client from being handled.\n\nTo fix this, this change introduces background threads so that each\nsendAndPoll can run in parallel (similar to parallelism in Selector).\nWhichever child client finishes its sendAndPoll first will call wakeup\non the other child clients to indicate that they should return from\nsendAndPoll immediately.\n\nFixes #1492"}, "afterCommit": {"oid": "992c6ea35dcc39cdc2e155f9998bee3a133394a9", "author": {"user": {"login": "cgtz", "name": "Casey Getz"}}, "url": "https://github.com/linkedin/ambry/commit/992c6ea35dcc39cdc2e155f9998bee3a133394a9", "committedDate": "2020-04-29T04:47:24Z", "message": "CompositeNetworkClient: Prevent inactive child clients from slowing down sendAndPoll\n\nPreviously, CompositeNetworkClient.sendAndPoll iterates over each child\nNetworkClient and calls sendAndPoll on each of them. This is alright if\nboth child clients are active and with many requests/responses to handle.\nHowever, if one of the clients is less active, it may wait for up to the\nconfigured poll timeout. Since this iteration is done from a single loop,\nwaiting for the inactive client prevents responses produced by the other\nchild client from being handled.\n\nTo fix this, this change introduces background threads so that each\nsendAndPoll can run in parallel (similar to parallelism in Selector).\nWhichever child client finishes its sendAndPoll first will call wakeup\non the other child clients to indicate that they should return from\nsendAndPoll immediately.\n\nFixes #1492"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTM0NDE5", "url": "https://github.com/linkedin/ambry/pull/1493#pullrequestreview-403134419", "createdAt": "2020-04-30T00:44:48Z", "commit": {"oid": "992c6ea35dcc39cdc2e155f9998bee3a133394a9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDo0NDo0OFrOGOV_2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDo0NDo0OFrOGOV_2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MzY1Ng==", "bodyText": "If we eat this exception, what will happen to the response consumers, will they just time out?", "url": "https://github.com/linkedin/ambry/pull/1493#discussion_r417693656", "createdAt": "2020-04-30T00:44:48Z", "author": {"login": "lightningrob"}, "path": "ambry-network/src/main/java/com/github/ambry/network/CompositeNetworkClient.java", "diffHunk": "@@ -71,23 +81,46 @@\n         requestsToDropByType.get(replicaType).add(correlationId);\n       }\n     }\n-    List<ResponseInfo> responses = new ArrayList<>();\n+\n+    // send requests using child clients from background threads so that inactive clients do not block the other client\n+    // from making progress.\n+    AtomicBoolean wakeupCalled = new AtomicBoolean(false);\n+    ArrayList<Future<List<ResponseInfo>>> sendAndPollFutures = new ArrayList<>(childNetworkClients.size());\n     childNetworkClients.forEach((replicaType, client) -> {\n       List<RequestInfo> requestsToSend = requestsToSendByType.get(replicaType);\n       Set<Integer> requestsToDrop = requestsToDropByType.get(replicaType);\n       if (!requestsToSend.isEmpty() || !requestsToDrop.isEmpty()) {\n         logger.trace(\"replicaType={}, requestsToSend={}, requestsToDrop={}\", replicaType, requestsToSend,\n             requestsToDrop);\n       }\n-      List<ResponseInfo> childClientResponses = client.sendAndPoll(requestsToSend, requestsToDrop, pollTimeoutMs);\n-      childClientResponses.forEach(responseInfo -> {\n-        // clean up correlation ids for completed requests\n-        if (responseInfo.getRequestInfo() != null) {\n-          correlationIdToReplicaType.remove(responseInfo.getRequestInfo().getRequest().getCorrelationId());\n+      sendAndPollFutures.add(executor.submit(() -> {\n+        List<ResponseInfo> childClientResponses = client.sendAndPoll(requestsToSend, requestsToDrop, pollTimeoutMs);\n+        if (wakeupCalled.compareAndSet(false, true)) {\n+          // the client that gets a response first can wake up the other clients so that they do not waste time waiting\n+          // for the poll timeout to expire. This helps when one child client is very active and the others have very\n+          // little activity.\n+          childNetworkClients.values().stream().filter(c -> c != client).forEach(NetworkClient::wakeup);\n         }\n-        responses.add(responseInfo);\n-      });\n+        return childClientResponses;\n+      }));\n     });\n+\n+    // process responses returned by each child client\n+    List<ResponseInfo> responses = new ArrayList<>();\n+    for (Future<List<ResponseInfo>> future : sendAndPollFutures) {\n+      try {\n+        List<ResponseInfo> responseInfoList = future.get();\n+        for (ResponseInfo responseInfo : responseInfoList) {\n+          // clean up correlation ids for completed requests\n+          if (responseInfo.getRequestInfo() != null) {\n+            correlationIdToReplicaType.remove(responseInfo.getRequestInfo().getRequest().getCorrelationId());\n+          }\n+          responses.add(responseInfo);\n+        }\n+      } catch (InterruptedException | ExecutionException e) {\n+        logger.error(\"Hit unexpected exception on parallel sendAndPoll.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "992c6ea35dcc39cdc2e155f9998bee3a133394a9"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTk3ODc2", "url": "https://github.com/linkedin/ambry/pull/1493#pullrequestreview-403197876", "createdAt": "2020-04-30T04:50:19Z", "commit": {"oid": "992c6ea35dcc39cdc2e155f9998bee3a133394a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1434, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}