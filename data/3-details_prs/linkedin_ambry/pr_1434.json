{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzA5ODY4", "number": 1434, "title": "Support undelete in replication", "bodyText": "Start supporting undelete in replication.", "createdAt": "2020-03-24T00:34:06Z", "url": "https://github.com/linkedin/ambry/pull/1434", "merged": true, "mergeCommit": {"oid": "5a59f5f2d8c1b26219a17ded52315b402f13f09b"}, "closed": true, "closedAt": "2020-04-13T17:11:17Z", "author": {"login": "justinlin-linkedin"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ3SwQABqjMxNjEwNjAxMDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXSEjIAFqTM5MjI4NTAzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e0c66a2e8e6a70216f356e6bc5008c0c38df30d", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/6e0c66a2e8e6a70216f356e6bc5008c0c38df30d", "committedDate": "2020-03-24T18:32:59Z", "message": "Add more tests"}, "afterCommit": {"oid": "e8b97899edae04cfea62840e7a4da424f1af26dc", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/e8b97899edae04cfea62840e7a4da424f1af26dc", "committedDate": "2020-03-24T18:33:59Z", "message": "Add more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cce12428d1edaf1870052d3b282e3d66312c10fe", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/cce12428d1edaf1870052d3b282e3d66312c10fe", "committedDate": "2020-03-24T22:48:01Z", "message": "Fix cloud blob store"}, "afterCommit": {"oid": "ccea32482046fbfa45c69b322c87e4a5e3372d53", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/ccea32482046fbfa45c69b322c87e4a5e3372d53", "committedDate": "2020-03-25T01:33:26Z", "message": "Fixing test failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccea32482046fbfa45c69b322c87e4a5e3372d53", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/ccea32482046fbfa45c69b322c87e4a5e3372d53", "committedDate": "2020-03-25T01:33:26Z", "message": "Fixing test failures"}, "afterCommit": {"oid": "4869ae7036ed67254b2954ea876a14650eb59b94", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/4869ae7036ed67254b2954ea876a14650eb59b94", "committedDate": "2020-03-25T23:54:20Z", "message": "Fix the test error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDk2NzE5", "url": "https://github.com/linkedin/ambry/pull/1434#pullrequestreview-384096719", "createdAt": "2020-03-30T17:56:09Z", "commit": {"oid": "506b6ef94cec4a11a6c24b6a32fc54357aae8c7e"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo1NjowOVrOF91iMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo1MToyOVrOF93kiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NDU2MA==", "bodyText": "Java Doc.", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r400384560", "createdAt": "2020-03-30T17:56:09Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com.github.ambry/store/Store.java", "diffHunk": "@@ -86,6 +86,8 @@\n    */\n   Set<StoreKey> findMissingKeys(List<StoreKey> keys) throws StoreException;\n \n+  MessageInfo findKey(StoreKey key) throws StoreException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506b6ef94cec4a11a6c24b6a32fc54357aae8c7e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NTc1MA==", "bodyText": "workaround", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r400385750", "createdAt": "2020-03-30T17:57:58Z", "author": {"login": "zzmao"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -482,6 +482,18 @@ private MessageInfo getMessageInfoFromMetadata(CloudBlobMetadata metadata) throw\n     }\n   }\n \n+  @Override\n+  public MessageInfo findKey(StoreKey key) throws StoreException {\n+    // This is a walkaround. This is only used in replication where replicaThread need to figure out if the blob", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506b6ef94cec4a11a6c24b6a32fc54357aae8c7e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5NDY5NA==", "bodyText": "Not warn?", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r400394694", "createdAt": "2020-03-30T18:12:29Z", "author": {"login": "zzmao"}, "path": "ambry-replication/src/main/java/com.github.ambry.replication/BlobIdTransformer.java", "diffHunk": "@@ -156,6 +160,12 @@ private Message newMessage(InputStream inputStream, StoreKey newKey, MessageInfo\n     storeKeyFactory.getStoreKey(new DataInputStream(inputStream));\n     BlobId newBlobId = (BlobId) newKey;\n \n+    if (headerFormat.hasLifeVersion() && headerFormat.getLifeVersion() != oldMessageInfo.getLifeVersion()) {\n+      // The original Put buffer might have lifeVersion as 0, but the message info might have a higher lifeVersion.\n+      logger.trace(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506b6ef94cec4a11a6c24b6a32fc54357aae8c7e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwMjUyMQ==", "bodyText": "What if U exists in local store?", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r400402521", "createdAt": "2020-03-30T18:25:36Z", "author": {"login": "zzmao"}, "path": "ambry-replication/src/main/java/com.github.ambry.replication/ReplicaThread.java", "diffHunk": "@@ -709,6 +673,69 @@ private void processReplicaMetadataResponse(Set<StoreKey> missingRemoteStoreKeys\n           logger.trace(\"Remote node: {} Thread name: {} Remote replica: {} Key in expired state remotely {}\",\n               remoteNode, threadName, remoteReplicaInfo.getReplicaId(), localKey);\n         }\n+      } else {\n+        // the key is present in the local store. Mark it for deletion if it is deleted in the remote store and not\n+        // deleted yet locally\n+        MessageInfo localMessageInfo = remoteReplicaInfo.getLocalStore().findKey(localKey);\n+        boolean deletedLocally = localMessageInfo.isDeleted();\n+        boolean ttlUpdatedLocally = localMessageInfo.isTtlUpdated();\n+        short localLifeVersion = localMessageInfo.getLifeVersion();\n+        short remoteLifeVersion = messageInfo.getLifeVersion();\n+        if (localLifeVersion > remoteLifeVersion) {\n+          // if the lifeVersion in local store is greater than the remote lifeVersion, then nothing needs to be done.\n+          continue;\n+        } else if (localLifeVersion == remoteLifeVersion) {\n+          // we are operating in the same version, in this case, delete would be the final state.\n+          if (!deletedLocally) {\n+            // Only adds record when it's not deleted yet. Since delete is the final state for this lifeVersion, if there\n+            // is a delete record for the current lifeVersion, then nothing needs to be done.\n+            MessageInfo info = new MessageInfo(localKey, 0, localKey.getAccountId(), localKey.getContainerId(),\n+                messageInfo.getOperationTimeMs());\n+            if (messageInfo.isTtlUpdated() && !ttlUpdatedLocally) {\n+              applyTtlUpdate(info, remoteReplicaInfo);\n+            }\n+            if (messageInfo.isDeleted()) {\n+              applyDelete(info, remoteReplicaInfo);\n+            }\n+          }\n+        } else {\n+          // if we are here, then the remote lifeVersion is greater than the local lifeVersion.\n+          // we need to reconcile the local state with the remote state.\n+          //\n+          // There are three states we have to reconcile: lifeVersion, ttl_update, is_deleted.\n+          // To reconcile lifeVersion and is_deleted, we have to add a Delete or Undelete record, based on what the final state is.\n+          // to reconcile ttl_update, if the final state is delete, then, we have to add ttl_update before delete, other, we can add ttl_update after undelete.\n+          MessageInfo info = new MessageInfo(localKey, 0, localKey.getAccountId(), localKey.getContainerId(),\n+              messageInfo.getOperationTimeMs(), remoteLifeVersion);\n+          boolean shouldInsertTtlUpdate = false;\n+          if (messageInfo.isTtlUpdated() && !ttlUpdatedLocally) {\n+            // make a patch for ttl update\n+            // if the remote state is delete, then we can't insert TTL_UPDATE after delete, we have to insert a ttl_update here\n+            if (messageInfo.isDeleted()) {\n+              // since ttl update can only follow Put or Undelete, make sure it's not locally deleted.\n+              // we can reuse the lifeVersion for undelete and ttl update, since the delete would be the final state of\n+              // this lifeVersion.\n+              if (deletedLocally) {\n+                applyUndelete(info, remoteReplicaInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506b6ef94cec4a11a6c24b6a32fc54357aae8c7e"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwOTg2MA==", "bodyText": "Minor:  is shouldInsertTtlUpdate needed?  use messageInfo.isTtlUpdated() && !ttlUpdatedLocally && !messageInfo.isDeleted()?", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r400409860", "createdAt": "2020-03-30T18:37:43Z", "author": {"login": "zzmao"}, "path": "ambry-replication/src/main/java/com.github.ambry.replication/ReplicaThread.java", "diffHunk": "@@ -709,6 +673,69 @@ private void processReplicaMetadataResponse(Set<StoreKey> missingRemoteStoreKeys\n           logger.trace(\"Remote node: {} Thread name: {} Remote replica: {} Key in expired state remotely {}\",\n               remoteNode, threadName, remoteReplicaInfo.getReplicaId(), localKey);\n         }\n+      } else {\n+        // the key is present in the local store. Mark it for deletion if it is deleted in the remote store and not\n+        // deleted yet locally\n+        MessageInfo localMessageInfo = remoteReplicaInfo.getLocalStore().findKey(localKey);\n+        boolean deletedLocally = localMessageInfo.isDeleted();\n+        boolean ttlUpdatedLocally = localMessageInfo.isTtlUpdated();\n+        short localLifeVersion = localMessageInfo.getLifeVersion();\n+        short remoteLifeVersion = messageInfo.getLifeVersion();\n+        if (localLifeVersion > remoteLifeVersion) {\n+          // if the lifeVersion in local store is greater than the remote lifeVersion, then nothing needs to be done.\n+          continue;\n+        } else if (localLifeVersion == remoteLifeVersion) {\n+          // we are operating in the same version, in this case, delete would be the final state.\n+          if (!deletedLocally) {\n+            // Only adds record when it's not deleted yet. Since delete is the final state for this lifeVersion, if there\n+            // is a delete record for the current lifeVersion, then nothing needs to be done.\n+            MessageInfo info = new MessageInfo(localKey, 0, localKey.getAccountId(), localKey.getContainerId(),\n+                messageInfo.getOperationTimeMs());\n+            if (messageInfo.isTtlUpdated() && !ttlUpdatedLocally) {\n+              applyTtlUpdate(info, remoteReplicaInfo);\n+            }\n+            if (messageInfo.isDeleted()) {\n+              applyDelete(info, remoteReplicaInfo);\n+            }\n+          }\n+        } else {\n+          // if we are here, then the remote lifeVersion is greater than the local lifeVersion.\n+          // we need to reconcile the local state with the remote state.\n+          //\n+          // There are three states we have to reconcile: lifeVersion, ttl_update, is_deleted.\n+          // To reconcile lifeVersion and is_deleted, we have to add a Delete or Undelete record, based on what the final state is.\n+          // to reconcile ttl_update, if the final state is delete, then, we have to add ttl_update before delete, other, we can add ttl_update after undelete.\n+          MessageInfo info = new MessageInfo(localKey, 0, localKey.getAccountId(), localKey.getContainerId(),\n+              messageInfo.getOperationTimeMs(), remoteLifeVersion);\n+          boolean shouldInsertTtlUpdate = false;\n+          if (messageInfo.isTtlUpdated() && !ttlUpdatedLocally) {\n+            // make a patch for ttl update\n+            // if the remote state is delete, then we can't insert TTL_UPDATE after delete, we have to insert a ttl_update here\n+            if (messageInfo.isDeleted()) {\n+              // since ttl update can only follow Put or Undelete, make sure it's not locally deleted.\n+              // we can reuse the lifeVersion for undelete and ttl update, since the delete would be the final state of\n+              // this lifeVersion.\n+              if (deletedLocally) {\n+                applyUndelete(info, remoteReplicaInfo);\n+              }\n+              applyTtlUpdate(info, remoteReplicaInfo);\n+            } else {\n+              // if final state is not delete, then to bump lifeVerion in local store to remote lifeVersion, we have to\n+              // add a undelete, and then add a ttl update.\n+              shouldInsertTtlUpdate = true;\n+            }\n+          }\n+\n+          // if we are here, then the ttl update is matched\n+          if (messageInfo.isDeleted()) {\n+            applyDelete(info, remoteReplicaInfo);\n+          } else {\n+            applyUndelete(info, remoteReplicaInfo);\n+            if (shouldInsertTtlUpdate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506b6ef94cec4a11a6c24b6a32fc54357aae8c7e"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNTg2Mg==", "bodyText": "Is there any version test?\nFor example:\nLocal: x x x x D2\nRemote: U2\nU2 should be denied.", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r400415862", "createdAt": "2020-03-30T18:48:05Z", "author": {"login": "zzmao"}, "path": "ambry-replication/src/test/java/com.github.ambry.replication/ReplicationTest.java", "diffHunk": "@@ -1994,8 +2014,614 @@ public void replicaTokenTest() throws InterruptedException {\n     remoteReplicaInfo.onTokenPersisted();\n   }\n \n+  /**\n+   * Tests when the local records has higher lifeVersion than remote records.\n+   */\n+  @Test\n+  public void replicaThreadLifeVersionLocalGreaterThanRemote() throws Exception {\n+    lifeVersionLocalGreaterThanRemote_Delete(false, false);\n+    lifeVersionLocalGreaterThanRemote_Delete(false, true);\n+    lifeVersionLocalGreaterThanRemote_Delete(true, false);\n+    lifeVersionLocalGreaterThanRemote_Delete(true, true);\n+  }\n+\n+  /**\n+   * Tests when the local store missing put records with lifeVersion greater than 0\n+   */\n+  @Test\n+  public void replicaThreadLifeVersionLocalLessThanRemote_MissingPuts() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506b6ef94cec4a11a6c24b6a32fc54357aae8c7e"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNzkzMQ==", "bodyText": "Why not check Authorization_Failure in this case?", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r400417931", "createdAt": "2020-03-30T18:51:29Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/main/java/com.github.ambry.store/BlobStore.java", "diffHunk": "@@ -470,23 +473,38 @@ public void delete(List<MessageInfo> infosToDelete) throws StoreException {\n         if (value == null) {\n           throw new StoreException(\"Cannot delete id \" + info.getStoreKey() + \" since it is not present in the index.\",\n               StoreErrorCodes.ID_Not_Found);\n-        } else if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n-          if (config.storeValidateAuthorization) {\n-            throw new StoreException(\"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n-                + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n-                StoreErrorCodes.Authorization_Failure);\n-          } else {\n-            logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n-                info.getStoreKey(), value.getAccountId(), value.getContainerId());\n-            metrics.deleteAuthorizationFailureCount.inc();\n+        }\n+        if (info.getLifeVersion() == MessageInfo.LIFE_VERSION_FROM_FRONTEND) {\n+          // This is a delete request from frontend\n+          if (!info.getStoreKey().isAccountContainerMatch(value.getAccountId(), value.getContainerId())) {\n+            if (config.storeValidateAuthorization) {\n+              throw new StoreException(\n+                  \"DELETE authorization failure. Key: \" + info.getStoreKey() + \"Actually accountId: \"\n+                      + value.getAccountId() + \"Actually containerId: \" + value.getContainerId(),\n+                  StoreErrorCodes.Authorization_Failure);\n+            } else {\n+              logger.warn(\"DELETE authorization failure. Key: {} Actually accountId: {} Actually containerId: {}\",\n+                  info.getStoreKey(), value.getAccountId(), value.getContainerId());\n+              metrics.deleteAuthorizationFailureCount.inc();\n+            }\n+          } else if (value.isDelete()) {\n+            throw new StoreException(\n+                \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n+                StoreErrorCodes.ID_Deleted);\n           }\n-        } else if (value.isDelete()) {\n-          throw new StoreException(\n-              \"Cannot delete id \" + info.getStoreKey() + \" since it is already deleted in the index.\",\n-              StoreErrorCodes.ID_Deleted);\n+          indexValuesToDelete.add(value);\n+          lifeVersions.add(value.getLifeVersion());\n+        } else {\n+          // This is a delete request from replication\n+          if ((value.isDelete() && value.getLifeVersion() >= info.getLifeVersion()) || (value.getLifeVersion()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506b6ef94cec4a11a6c24b6a32fc54357aae8c7e"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "506b6ef94cec4a11a6c24b6a32fc54357aae8c7e", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/506b6ef94cec4a11a6c24b6a32fc54357aae8c7e", "committedDate": "2020-03-26T18:24:49Z", "message": "Add more tests"}, "afterCommit": {"oid": "5bade049df52542e5e3cb7e2f2171e9ce365dc31", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/5bade049df52542e5e3cb7e2f2171e9ce365dc31", "committedDate": "2020-04-01T20:43:32Z", "message": "Add more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5bade049df52542e5e3cb7e2f2171e9ce365dc31", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/5bade049df52542e5e3cb7e2f2171e9ce365dc31", "committedDate": "2020-04-01T20:43:32Z", "message": "Add more tests"}, "afterCommit": {"oid": "ce6ee834800dad052721cac14ef7e2bf2dac06e3", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/ce6ee834800dad052721cac14ef7e2bf2dac06e3", "committedDate": "2020-04-03T23:36:43Z", "message": "Rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzYwNjA4", "url": "https://github.com/linkedin/ambry/pull/1434#pullrequestreview-390360608", "createdAt": "2020-04-08T21:57:07Z", "commit": {"oid": "a581b0dcdfc206d24e3637abd950aeb1f07893aa"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo1NzowN1rOGDCbzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjoxODowMlrOGDC8fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzODc5Nw==", "bodyText": "isKeyDeleted() is not currently reliable for this purpose.  If we need to get the accurate state, we would have to fetch the metadata from Azure.  For undelete operations which are rare, this should be okay, though for everyday checks it will be expensive.  Please add a TODO to fix it later.", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r405838797", "createdAt": "2020-04-08T21:57:07Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudBlobStore.java", "diffHunk": "@@ -516,6 +516,18 @@ private MessageInfo getMessageInfoFromMetadata(CloudBlobMetadata metadata) throw\n     }\n   }\n \n+  @Override\n+  public MessageInfo findKey(StoreKey key) throws StoreException {\n+    // This is a workaround. This is only used in replication where replicaThread need to figure out if the blob\n+    // is deleted and if the blob is ttlupdated, and also returns the lifeVersion.\n+    // Since we are not supporting lifeVersion in CloudBlobStore yet, for lifVersion, we will return 0 as default value.\n+    // For deleted, use return value from isKeyDeleted.\n+    // For ttl update, return false to trigger ttl update operation in replication. For an already ttl udpated blob\n+    // second ttl update would end up with an error, which replication will be able to silence.\n+    return new MessageInfo(key, 0, isKeyDeleted(key), false, false, Utils.Infinite_Time, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a581b0dcdfc206d24e3637abd950aeb1f07893aa"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzOTM2NQ==", "bodyText": "Duration is not a param so shouldn't be mentioned in javadoc.", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r405839365", "createdAt": "2020-04-08T21:58:25Z", "author": {"login": "lightningrob"}, "path": "ambry-server/src/integration-test/java/com/github/ambry/server/MockCluster.java", "diffHunk": "@@ -500,6 +500,16 @@ boolean awaitBlobDeletions() throws InterruptedException {\n     return deletionHelper.await(10, TimeUnit.SECONDS);\n   }\n \n+\n+  /**\n+   * Waits for blob undeletes on all replicas\n+   * @return {@code true} if undeletes were received in all replicas within the {@code duration} specified.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a581b0dcdfc206d24e3637abd950aeb1f07893aa"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NjU3Mw==", "bodyText": "into an undelete", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r405846573", "createdAt": "2020-04-08T22:16:23Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -968,6 +995,73 @@ private void applyTtlUpdate(MessageInfo messageInfo, RemoteReplicaInfo remoteRep\n     }\n   }\n \n+  /**\n+   * Applies an undelete to the blob described by {@code messageInfo}.\n+   * @param messageInfo the {@link MessageInfo} that will be transformed into a TTL update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a581b0dcdfc206d24e3637abd950aeb1f07893aa"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NjY3Ng==", "bodyText": "into a delete", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r405846676", "createdAt": "2020-04-08T22:16:38Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -968,6 +995,73 @@ private void applyTtlUpdate(MessageInfo messageInfo, RemoteReplicaInfo remoteRep\n     }\n   }\n \n+  /**\n+   * Applies an undelete to the blob described by {@code messageInfo}.\n+   * @param messageInfo the {@link MessageInfo} that will be transformed into a TTL update\n+   * @param remoteReplicaInfo The remote replica that is being replicated from\n+   * @throws StoreException\n+   */\n+  private void applyUndelete(MessageInfo messageInfo, RemoteReplicaInfo remoteReplicaInfo) throws StoreException {\n+    DataNodeId remoteNode = remoteReplicaInfo.getReplicaId().getDataNodeId();\n+    try {\n+      messageInfo = new MessageInfo(messageInfo.getStoreKey(), messageInfo.getSize(), messageInfo.isDeleted(),\n+          messageInfo.isTtlUpdated(), true, messageInfo.getExpirationTimeInMs(), messageInfo.getCrc(),\n+          messageInfo.getAccountId(), messageInfo.getContainerId(), messageInfo.getOperationTimeMs(),\n+          messageInfo.getLifeVersion());\n+      remoteReplicaInfo.getLocalStore().undelete(messageInfo);\n+      logger.trace(\"Remote node: {} Thread name: {} Remote replica: {} Key undelete id: {}\", remoteNode, threadName,\n+          remoteReplicaInfo.getReplicaId(), messageInfo.getStoreKey());\n+    } catch (StoreException e) {\n+      // The blob may be undeleted, which is alright\n+      if (e.getErrorCode() == StoreErrorCodes.Life_Version_Conflict\n+          || e.getErrorCode() == StoreErrorCodes.ID_Undeleted) {\n+        logger.trace(\"Remote node: {} Thread name: {} Remote replica: {} Key already undeleted: {}\", remoteNode,\n+            threadName, remoteReplicaInfo.getReplicaId(), messageInfo.getStoreKey());\n+      } else {\n+        throw e;\n+      }\n+    }\n+    // A Repair event for an undelete signifies that an undelete message was received from the remote and it is fired\n+    // as long as the undelete is guaranteed to have taken effect locally.\n+    if (notification != null) {\n+      notification.onBlobReplicaUndeleted(dataNodeId.getHostname(), dataNodeId.getPort(),\n+          messageInfo.getStoreKey().getID(), BlobReplicaSourceType.REPAIRED);\n+    }\n+  }\n+\n+  /**\n+   * Applies a delete to the blob described by {@code messageInfo}.\n+   * @param messageInfo the {@link MessageInfo} that will be transformed into a TTL update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a581b0dcdfc206d24e3637abd950aeb1f07893aa"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NzE2Ng==", "bodyText": "Should the deleted flag be set to true here?", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r405847166", "createdAt": "2020-04-08T22:18:02Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -968,6 +995,73 @@ private void applyTtlUpdate(MessageInfo messageInfo, RemoteReplicaInfo remoteRep\n     }\n   }\n \n+  /**\n+   * Applies an undelete to the blob described by {@code messageInfo}.\n+   * @param messageInfo the {@link MessageInfo} that will be transformed into a TTL update\n+   * @param remoteReplicaInfo The remote replica that is being replicated from\n+   * @throws StoreException\n+   */\n+  private void applyUndelete(MessageInfo messageInfo, RemoteReplicaInfo remoteReplicaInfo) throws StoreException {\n+    DataNodeId remoteNode = remoteReplicaInfo.getReplicaId().getDataNodeId();\n+    try {\n+      messageInfo = new MessageInfo(messageInfo.getStoreKey(), messageInfo.getSize(), messageInfo.isDeleted(),\n+          messageInfo.isTtlUpdated(), true, messageInfo.getExpirationTimeInMs(), messageInfo.getCrc(),\n+          messageInfo.getAccountId(), messageInfo.getContainerId(), messageInfo.getOperationTimeMs(),\n+          messageInfo.getLifeVersion());\n+      remoteReplicaInfo.getLocalStore().undelete(messageInfo);\n+      logger.trace(\"Remote node: {} Thread name: {} Remote replica: {} Key undelete id: {}\", remoteNode, threadName,\n+          remoteReplicaInfo.getReplicaId(), messageInfo.getStoreKey());\n+    } catch (StoreException e) {\n+      // The blob may be undeleted, which is alright\n+      if (e.getErrorCode() == StoreErrorCodes.Life_Version_Conflict\n+          || e.getErrorCode() == StoreErrorCodes.ID_Undeleted) {\n+        logger.trace(\"Remote node: {} Thread name: {} Remote replica: {} Key already undeleted: {}\", remoteNode,\n+            threadName, remoteReplicaInfo.getReplicaId(), messageInfo.getStoreKey());\n+      } else {\n+        throw e;\n+      }\n+    }\n+    // A Repair event for an undelete signifies that an undelete message was received from the remote and it is fired\n+    // as long as the undelete is guaranteed to have taken effect locally.\n+    if (notification != null) {\n+      notification.onBlobReplicaUndeleted(dataNodeId.getHostname(), dataNodeId.getPort(),\n+          messageInfo.getStoreKey().getID(), BlobReplicaSourceType.REPAIRED);\n+    }\n+  }\n+\n+  /**\n+   * Applies a delete to the blob described by {@code messageInfo}.\n+   * @param messageInfo the {@link MessageInfo} that will be transformed into a TTL update\n+   * @param remoteReplicaInfo The remote replica that is being replicated from\n+   * @throws StoreException\n+   */\n+  private void applyDelete(MessageInfo messageInfo, RemoteReplicaInfo remoteReplicaInfo) throws StoreException {\n+    DataNodeId remoteNode = remoteReplicaInfo.getReplicaId().getDataNodeId();\n+    try {\n+      messageInfo =\n+          new MessageInfo(messageInfo.getStoreKey(), messageInfo.getSize(), false, messageInfo.isTtlUpdated(), false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a581b0dcdfc206d24e3637abd950aeb1f07893aa"}, "originalPosition": 220}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjg3NTQ5", "url": "https://github.com/linkedin/ambry/pull/1434#pullrequestreview-391287549", "createdAt": "2020-04-10T06:30:19Z", "commit": {"oid": "a581b0dcdfc206d24e3637abd950aeb1f07893aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozMDoxOVrOGDySNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozMDoxOVrOGDySNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjc3NQ==", "bodyText": "Strongly recommend to use getMissingRemoteStoreKeys() or original getMissingStoreKeys().\ngetRemoteMissingStoreKeys() sounds like get the keys that were missing on remote.", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r406622775", "createdAt": "2020-04-10T06:30:19Z", "author": {"login": "zzmao"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -587,7 +587,7 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n    * @return List of store keys that are missing from the local store\n    * @throws StoreException if store error (usually IOError) occurs when getting missing keys.\n    */\n-  private Set<StoreKey> getMissingStoreKeys(ReplicaMetadataResponseInfo replicaMetadataResponseInfo,\n+  private Set<StoreKey> getRemoteMissingStoreKeys(ReplicaMetadataResponseInfo replicaMetadataResponseInfo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a581b0dcdfc206d24e3637abd950aeb1f07893aa"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTM5NTUx", "url": "https://github.com/linkedin/ambry/pull/1434#pullrequestreview-391139551", "createdAt": "2020-04-09T21:19:01Z", "commit": {"oid": "a581b0dcdfc206d24e3637abd950aeb1f07893aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToyNjo1NlrOGDqAbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToyNjo1NlrOGDqAbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NzE0OQ==", "bodyText": "+1", "url": "https://github.com/linkedin/ambry/pull/1434#discussion_r406487149", "createdAt": "2020-04-09T21:26:56Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -968,6 +995,73 @@ private void applyTtlUpdate(MessageInfo messageInfo, RemoteReplicaInfo remoteRep\n     }\n   }\n \n+  /**\n+   * Applies an undelete to the blob described by {@code messageInfo}.\n+   * @param messageInfo the {@link MessageInfo} that will be transformed into a TTL update\n+   * @param remoteReplicaInfo The remote replica that is being replicated from\n+   * @throws StoreException\n+   */\n+  private void applyUndelete(MessageInfo messageInfo, RemoteReplicaInfo remoteReplicaInfo) throws StoreException {\n+    DataNodeId remoteNode = remoteReplicaInfo.getReplicaId().getDataNodeId();\n+    try {\n+      messageInfo = new MessageInfo(messageInfo.getStoreKey(), messageInfo.getSize(), messageInfo.isDeleted(),\n+          messageInfo.isTtlUpdated(), true, messageInfo.getExpirationTimeInMs(), messageInfo.getCrc(),\n+          messageInfo.getAccountId(), messageInfo.getContainerId(), messageInfo.getOperationTimeMs(),\n+          messageInfo.getLifeVersion());\n+      remoteReplicaInfo.getLocalStore().undelete(messageInfo);\n+      logger.trace(\"Remote node: {} Thread name: {} Remote replica: {} Key undelete id: {}\", remoteNode, threadName,\n+          remoteReplicaInfo.getReplicaId(), messageInfo.getStoreKey());\n+    } catch (StoreException e) {\n+      // The blob may be undeleted, which is alright\n+      if (e.getErrorCode() == StoreErrorCodes.Life_Version_Conflict\n+          || e.getErrorCode() == StoreErrorCodes.ID_Undeleted) {\n+        logger.trace(\"Remote node: {} Thread name: {} Remote replica: {} Key already undeleted: {}\", remoteNode,\n+            threadName, remoteReplicaInfo.getReplicaId(), messageInfo.getStoreKey());\n+      } else {\n+        throw e;\n+      }\n+    }\n+    // A Repair event for an undelete signifies that an undelete message was received from the remote and it is fired\n+    // as long as the undelete is guaranteed to have taken effect locally.\n+    if (notification != null) {\n+      notification.onBlobReplicaUndeleted(dataNodeId.getHostname(), dataNodeId.getPort(),\n+          messageInfo.getStoreKey().getID(), BlobReplicaSourceType.REPAIRED);\n+    }\n+  }\n+\n+  /**\n+   * Applies a delete to the blob described by {@code messageInfo}.\n+   * @param messageInfo the {@link MessageInfo} that will be transformed into a TTL update\n+   * @param remoteReplicaInfo The remote replica that is being replicated from\n+   * @throws StoreException\n+   */\n+  private void applyDelete(MessageInfo messageInfo, RemoteReplicaInfo remoteReplicaInfo) throws StoreException {\n+    DataNodeId remoteNode = remoteReplicaInfo.getReplicaId().getDataNodeId();\n+    try {\n+      messageInfo =\n+          new MessageInfo(messageInfo.getStoreKey(), messageInfo.getSize(), false, messageInfo.isTtlUpdated(), false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NzE2Ng=="}, "originalCommit": {"oid": "a581b0dcdfc206d24e3637abd950aeb1f07893aa"}, "originalPosition": 220}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f14e387f3ec2b93ffd98e4d016bc3ce5a7013928", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/f14e387f3ec2b93ffd98e4d016bc3ce5a7013928", "committedDate": "2020-04-10T20:00:58Z", "message": "Support undelete in replication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42ae9495260bd0ce110529fc604e9cac2a64699c", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/42ae9495260bd0ce110529fc604e9cac2a64699c", "committedDate": "2020-04-10T20:00:58Z", "message": "Rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47333340477f0250959cdb290390ab04cdcc2fe8", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/47333340477f0250959cdb290390ab04cdcc2fe8", "committedDate": "2020-04-10T20:01:31Z", "message": "Rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3364697919578d8a145873aee562c2e9e0a50ac3", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/3364697919578d8a145873aee562c2e9e0a50ac3", "committedDate": "2020-04-10T20:01:31Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eb1a4a4403b931336edce9d478404ca9e582855", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/8eb1a4a4403b931336edce9d478404ca9e582855", "committedDate": "2020-04-10T20:01:31Z", "message": "Fix test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e0696ad74b78946e850557c1604858a426ef19d", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/5e0696ad74b78946e850557c1604858a426ef19d", "committedDate": "2020-04-10T20:08:50Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a581b0dcdfc206d24e3637abd950aeb1f07893aa", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/a581b0dcdfc206d24e3637abd950aeb1f07893aa", "committedDate": "2020-04-05T01:57:56Z", "message": "Fix test failure"}, "afterCommit": {"oid": "5e0696ad74b78946e850557c1604858a426ef19d", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/5e0696ad74b78946e850557c1604858a426ef19d", "committedDate": "2020-04-10T20:08:50Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjg2NDgy", "url": "https://github.com/linkedin/ambry/pull/1434#pullrequestreview-391686482", "createdAt": "2020-04-10T22:10:39Z", "commit": {"oid": "5e0696ad74b78946e850557c1604858a426ef19d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjgwNDcx", "url": "https://github.com/linkedin/ambry/pull/1434#pullrequestreview-392280471", "createdAt": "2020-04-13T17:02:24Z", "commit": {"oid": "5e0696ad74b78946e850557c1604858a426ef19d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjg1MDM1", "url": "https://github.com/linkedin/ambry/pull/1434#pullrequestreview-392285035", "createdAt": "2020-04-13T17:09:36Z", "commit": {"oid": "5e0696ad74b78946e850557c1604858a426ef19d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1317, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}