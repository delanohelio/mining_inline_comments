{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMTA2NjU3", "number": 1404, "title": "Fix for ResponseMetadata race condition.", "bodyText": "Before this change, responseMetadata is accessed without confirming if it is ready or not.\nThis fix introduces a latch to avoid such race condition.", "createdAt": "2020-02-27T22:31:38Z", "url": "https://github.com/linkedin/ambry/pull/1404", "merged": true, "mergeCommit": {"oid": "cbc0f4ab149967f989cdb114159f2bcdbfd2a4e8"}, "closed": true, "closedAt": "2020-03-24T22:44:32Z", "author": {"login": "zzmao"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNDysXgH2gAyMzgxMTA2NjU3Ojg3ZjdjZTc1NmIzNzQ2Yjk0M2JhYzk2ZTJjYzRlYjE2OWE2MTQyOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRMiX4AH2gAyMzgxMTA2NjU3OjgyNTMwMWIxNGMwMzcwNWI5M2U3NzdiYmMzNGU3ZTlmNTUyNGMyNzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "87f7ce756b3746b943bac96e2cc4eb169a614292", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/87f7ce756b3746b943bac96e2cc4eb169a614292", "committedDate": "2020-03-12T22:52:11Z", "message": "Fix for ResponseMetadata race condition.\n\nBefore this change, responseMetadata is accessed without confirming if it is ready or not.\nThis fix introduced a latch to avoid such race condition."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/754de3db73e00af5099edc66da8c4c9741257f13", "committedDate": "2020-03-12T23:22:40Z", "message": "fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ffbed43a1b8320ae63aca1145fb8520b164b480", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/0ffbed43a1b8320ae63aca1145fb8520b164b480", "committedDate": "2020-02-27T22:29:09Z", "message": "Fix for ResponseMetadata race condition.\n\nBefore this change, responseMetadata is accessed without confirming if it is ready or not.\nThis fix introduced a latch to avoid such race condition."}, "afterCommit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/754de3db73e00af5099edc66da8c4c9741257f13", "committedDate": "2020-03-12T23:22:40Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjM0OTM4", "url": "https://github.com/linkedin/ambry/pull/1404#pullrequestreview-374634938", "createdAt": "2020-03-13T21:41:16Z", "commit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTo0MToxNlrOF2UJNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTo0MTo0NlrOF2UKMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NzQ2Mg==", "bodyText": "this looks good, but can you add a test case for this logic?", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r392497462", "createdAt": "2020-03-13T21:41:16Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NzcxMg==", "bodyText": "the exception should be ClosedChannelException, not null.", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r392497712", "createdAt": "2020-03-13T21:41:46Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {\n+      // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n+      if (ctx.channel().isActive()) {\n+        logger.warn(\"Channel should be inactive status. {}\", ctx.channel());\n+      } else {\n+        logger.debug(\"Scheduling a chunk cleanup on channel {} because response channel is closed.\", ctx.channel());\n+        writeFuture.addListener(new CleanupCallback(new ClosedChannelException()));\n+      }\n+      FutureResult<Long> future = new FutureResult<Long>();\n+      future.done(-1L, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODg1MjQ4", "url": "https://github.com/linkedin/ambry/pull/1404#pullrequestreview-377885248", "createdAt": "2020-03-19T16:24:51Z", "commit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoyNDo1MVrOF42Vng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoyNjozN1rOF42aVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NDg0Ng==", "bodyText": "Also call the callback here?", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r395154846", "createdAt": "2020-03-19T16:24:51Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {\n+      // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n+      if (ctx.channel().isActive()) {\n+        logger.warn(\"Channel should be inactive status. {}\", ctx.channel());\n+      } else {\n+        logger.debug(\"Scheduling a chunk cleanup on channel {} because response channel is closed.\", ctx.channel());\n+        writeFuture.addListener(new CleanupCallback(new ClosedChannelException()));\n+      }\n+      FutureResult<Long> future = new FutureResult<Long>();\n+      future.done(-1L, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NTgxNQ==", "bodyText": "+1, I guess we can at least test the case where the channel becomes inactive", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r395155815", "createdAt": "2020-03-19T16:26:15Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NzQ2Mg=="}, "originalCommit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NjA1NA==", "bodyText": "Could you add a metric for this? We can set up an alert if this case ever occurs.", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r395156054", "createdAt": "2020-03-19T16:26:37Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {\n+      // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n+      if (ctx.channel().isActive()) {\n+        logger.warn(\"Channel should be inactive status. {}\", ctx.channel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjUyMTA0", "url": "https://github.com/linkedin/ambry/pull/1404#pullrequestreview-380652104", "createdAt": "2020-03-24T19:59:39Z", "commit": {"oid": "dfa39c5f48dd2d8f2148065458d387465a620746"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1OTo0MFrOF7A4bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1OTo0MFrOF7A4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNDc0OA==", "bodyText": "add \"in channelInactiveTest()\"", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r397424748", "createdAt": "2020-03-24T19:59:40Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1713,3 +1746,221 @@ void compareWithFuture() throws InterruptedException, TimeoutException {\n     }\n   }\n }\n+\n+/**\n+ * Mock class for ChannelHandlerContext used in .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa39c5f48dd2d8f2148065458d387465a620746"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjY1MDAy", "url": "https://github.com/linkedin/ambry/pull/1404#pullrequestreview-380665002", "createdAt": "2020-03-24T20:19:27Z", "commit": {"oid": "dfa39c5f48dd2d8f2148065458d387465a620746"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxOToyOFrOF7BgPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxOToyOFrOF7BgPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDk0MQ==", "bodyText": "please add a fail(\"\") after future.get();", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r397434941", "createdAt": "2020-03-24T20:19:28Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java", "diffHunk": "@@ -636,6 +647,28 @@ public void closeTest() {\n     assertFalse(\"Channel should be closed\", channel.isOpen());\n   }\n \n+  /**\n+   * ClosedChannelException is expected when write to a NettyResponseChannel and channel is inactive.\n+   */\n+  @Test\n+  public void channelInactiveTest() {\n+    // request is keep-alive by default.\n+    HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString());\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler);\n+    NettyResponseChannel nettyResponseChannel =\n+        new NettyResponseChannel(new MockChannelHandlerContext(channel), new NettyMetrics(new MetricRegistry()),\n+            new PerformanceConfig(new VerifiableProperties(new Properties())));\n+    channel.disconnect().awaitUninterruptibly();\n+    assertFalse(\"Channel should be closed\", channel.isOpen());\n+    Future<Long> future = nettyResponseChannel.write(Unpooled.buffer(1), null);\n+    try {\n+      future.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa39c5f48dd2d8f2148065458d387465a620746"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjY1MzM0", "url": "https://github.com/linkedin/ambry/pull/1404#pullrequestreview-380665334", "createdAt": "2020-03-24T20:19:57Z", "commit": {"oid": "dfa39c5f48dd2d8f2148065458d387465a620746"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxOTo1OFrOF7BhQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxOTo1OFrOF7BhQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNTIwMw==", "bodyText": "It seems like this may fit better as a counter, looking at other similar metrics (see line 107-113). However, they both should work about the same in practice, so if you prefer Meter keep it as is.", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r397435203", "createdAt": "2020-03-24T20:19:58Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyMetrics.java", "diffHunk": "@@ -170,6 +171,8 @@ public NettyMetrics(MetricRegistry metricRegistry) {\n     publicAccessLogRequestRate =\n         metricRegistry.meter(MetricRegistry.name(PublicAccessLogHandler.class, \"RequestArrivalRate\"));\n     healthCheckRequestRate = metricRegistry.meter(MetricRegistry.name(HealthCheckHandler.class, \"RequestArrivalRate\"));\n+    channelStatusInconsistent =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa39c5f48dd2d8f2148065458d387465a620746"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45e13ed06bf912a03532f2283686128ab3768324", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/45e13ed06bf912a03532f2283686128ab3768324", "committedDate": "2020-03-24T21:06:01Z", "message": "Fix for EXC-209313"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d1505ea9748441ba917b3add83cd6776cce7bc7", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/1d1505ea9748441ba917b3add83cd6776cce7bc7", "committedDate": "2020-03-24T21:21:36Z", "message": "add more log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdcd865c7287b379c9c99e3d96f788d1b52b6c67", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/fdcd865c7287b379c9c99e3d96f788d1b52b6c67", "committedDate": "2020-03-25T18:26:35Z", "message": "address comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfa39c5f48dd2d8f2148065458d387465a620746", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/dfa39c5f48dd2d8f2148065458d387465a620746", "committedDate": "2020-03-25T19:19:12Z", "message": "add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "825301b14c03705b93e777bbc34e7e9f5524c276", "author": {"user": {"login": "zzmao", "name": "Ze Mao"}}, "url": "https://github.com/linkedin/ambry/commit/825301b14c03705b93e777bbc34e7e9f5524c276", "committedDate": "2020-03-24T20:56:02Z", "message": "final comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1650, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}