{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyOTcwNzI1", "number": 1378, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODozNzoyMlrODfp70g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1NjoxMlrODftkfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTE5NTA2OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/test/java/com.github.ambry.router/GetBlobOperationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODozNzoyMlrOFpfFLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMTo0NToyNlrOFppYcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NTE2Ng==", "bodyText": "what if 2 Disk_Unavailable and 1 Deleted?", "url": "https://github.com/linkedin/ambry/pull/1378#discussion_r379045166", "createdAt": "2020-02-13T18:37:22Z", "author": {"login": "zzmao"}, "path": "ambry-router/src/test/java/com.github.ambry.router/GetBlobOperationTest.java", "diffHunk": "@@ -715,6 +716,34 @@ public void testErrorPrecedenceWithSpecialCase() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test the case where originating dc returns 2 Disk_Unavailable and 1 Not_Found and rest replicas return Not_Found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87949d10b95094e6470559b95b99ddd155ff4062"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxMzkzOA==", "bodyText": "As long as (# of Disk_Unavailable + # of Not_Found) > (total replica count - success target), we consider it Not_Found", "url": "https://github.com/linkedin/ambry/pull/1378#discussion_r379213938", "createdAt": "2020-02-14T01:45:26Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/test/java/com.github.ambry.router/GetBlobOperationTest.java", "diffHunk": "@@ -715,6 +716,34 @@ public void testErrorPrecedenceWithSpecialCase() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test the case where originating dc returns 2 Disk_Unavailable and 1 Not_Found and rest replicas return Not_Found.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NTE2Ng=="}, "originalCommit": {"oid": "87949d10b95094e6470559b95b99ddd155ff4062"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTc3ODc0OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/DeleteOperation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1MjowMFrOFpk09g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMjoyMzoyMlrOFpp44Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzOTMxOA==", "bodyText": "I don't think we need this statement here. in processServerError method, it already returns AmbryUnavailable for Disk_Unavailable. All we need is to change TrackedRequestFinalState.fromRouterErrorCodeToFinalState method.", "url": "https://github.com/linkedin/ambry/pull/1378#discussion_r379139318", "createdAt": "2020-02-13T21:52:00Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/main/java/com.github.ambry.router/DeleteOperation.java", "diffHunk": "@@ -195,25 +195,33 @@ void handleResponse(ResponseInfo responseInfo, DeleteResponse deleteResponse) {\n               new RouterException(\"Received wrong response that is not for the corresponding request.\",\n                   RouterErrorCode.UnexpectedInternalError));\n         } else {\n-          ServerErrorCode getError = deleteResponse.getError();\n-          if (getError == ServerErrorCode.No_Error || getError == ServerErrorCode.Blob_Deleted) {\n+          ServerErrorCode serverError = deleteResponse.getError();\n+          if (serverError == ServerErrorCode.No_Error || serverError == ServerErrorCode.Blob_Deleted) {\n             operationTracker.onResponse(replica, TrackedRequestFinalState.SUCCESS);\n             if (RouterUtils.isRemoteReplica(routerConfig, replica)) {\n               logger.trace(\"Cross colo request successful for remote replica {} in {} \", replica.getDataNodeId(),\n                   replica.getDataNodeId().getDatacenterName());\n               routerMetrics.crossColoSuccessCount.inc();\n             }\n+          } else if (serverError == ServerErrorCode.Disk_Unavailable) {\n+            logger.trace(\"Replica {} returned Disk_Unavailable for a delete request with correlationId : {} \", replica,\n+                deleteRequest.getCorrelationId());\n+            operationTracker.onResponse(replica, TrackedRequestFinalState.DISK_DOWN);\n+            setOperationException(\n+                new RouterException(\"Server returned: \" + serverError, RouterErrorCode.AmbryUnavailable));\n+            routerMetrics.routerRequestErrorCount.inc();\n+            routerMetrics.getDataNodeBasedMetrics(replica.getDataNodeId()).deleteRequestErrorCount.inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87949d10b95094e6470559b95b99ddd155ff4062"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMDQxOQ==", "bodyText": "processServerError indeed returns AmbryUnavailable. The reason I put these statements in else-if block is I need to skip onErrorResponse in which it sets TrackedRequestFinalState. Also, I cannot change fromRouterErrorCodeToFinalState directly because it cannot tell AmbryUnavailable is Disk_Unavailable or Replica_Unavailable. For latter one, the replica could be temporarily stopped and restarting it will bring intact data (blob still exists in that replica). Hence, I copied statements to this else-if block without changing logic in fromRouterErrorCodeToFinalState.", "url": "https://github.com/linkedin/ambry/pull/1378#discussion_r379220419", "createdAt": "2020-02-14T02:14:52Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/DeleteOperation.java", "diffHunk": "@@ -195,25 +195,33 @@ void handleResponse(ResponseInfo responseInfo, DeleteResponse deleteResponse) {\n               new RouterException(\"Received wrong response that is not for the corresponding request.\",\n                   RouterErrorCode.UnexpectedInternalError));\n         } else {\n-          ServerErrorCode getError = deleteResponse.getError();\n-          if (getError == ServerErrorCode.No_Error || getError == ServerErrorCode.Blob_Deleted) {\n+          ServerErrorCode serverError = deleteResponse.getError();\n+          if (serverError == ServerErrorCode.No_Error || serverError == ServerErrorCode.Blob_Deleted) {\n             operationTracker.onResponse(replica, TrackedRequestFinalState.SUCCESS);\n             if (RouterUtils.isRemoteReplica(routerConfig, replica)) {\n               logger.trace(\"Cross colo request successful for remote replica {} in {} \", replica.getDataNodeId(),\n                   replica.getDataNodeId().getDatacenterName());\n               routerMetrics.crossColoSuccessCount.inc();\n             }\n+          } else if (serverError == ServerErrorCode.Disk_Unavailable) {\n+            logger.trace(\"Replica {} returned Disk_Unavailable for a delete request with correlationId : {} \", replica,\n+                deleteRequest.getCorrelationId());\n+            operationTracker.onResponse(replica, TrackedRequestFinalState.DISK_DOWN);\n+            setOperationException(\n+                new RouterException(\"Server returned: \" + serverError, RouterErrorCode.AmbryUnavailable));\n+            routerMetrics.routerRequestErrorCount.inc();\n+            routerMetrics.getDataNodeBasedMetrics(replica.getDataNodeId()).deleteRequestErrorCount.inc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzOTMxOA=="}, "originalCommit": {"oid": "87949d10b95094e6470559b95b99ddd155ff4062"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMjI0MQ==", "bodyText": "we are not restarting the replica in frontend. Since processServerError returns the same RouterErrorCode from ReplicaUnavailable and DiskUnavailable, then we treat them as the same error in the router code. I didn't see in any operation code that we treat these two errors differently.", "url": "https://github.com/linkedin/ambry/pull/1378#discussion_r379222241", "createdAt": "2020-02-14T02:23:22Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/main/java/com.github.ambry.router/DeleteOperation.java", "diffHunk": "@@ -195,25 +195,33 @@ void handleResponse(ResponseInfo responseInfo, DeleteResponse deleteResponse) {\n               new RouterException(\"Received wrong response that is not for the corresponding request.\",\n                   RouterErrorCode.UnexpectedInternalError));\n         } else {\n-          ServerErrorCode getError = deleteResponse.getError();\n-          if (getError == ServerErrorCode.No_Error || getError == ServerErrorCode.Blob_Deleted) {\n+          ServerErrorCode serverError = deleteResponse.getError();\n+          if (serverError == ServerErrorCode.No_Error || serverError == ServerErrorCode.Blob_Deleted) {\n             operationTracker.onResponse(replica, TrackedRequestFinalState.SUCCESS);\n             if (RouterUtils.isRemoteReplica(routerConfig, replica)) {\n               logger.trace(\"Cross colo request successful for remote replica {} in {} \", replica.getDataNodeId(),\n                   replica.getDataNodeId().getDatacenterName());\n               routerMetrics.crossColoSuccessCount.inc();\n             }\n+          } else if (serverError == ServerErrorCode.Disk_Unavailable) {\n+            logger.trace(\"Replica {} returned Disk_Unavailable for a delete request with correlationId : {} \", replica,\n+                deleteRequest.getCorrelationId());\n+            operationTracker.onResponse(replica, TrackedRequestFinalState.DISK_DOWN);\n+            setOperationException(\n+                new RouterException(\"Server returned: \" + serverError, RouterErrorCode.AmbryUnavailable));\n+            routerMetrics.routerRequestErrorCount.inc();\n+            routerMetrics.getDataNodeBasedMetrics(replica.getDataNodeId()).deleteRequestErrorCount.inc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzOTMxOA=="}, "originalCommit": {"oid": "87949d10b95094e6470559b95b99ddd155ff4062"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTc4MzM0OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/GetBlobInfoOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1MzozNVrOFpk38A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1MzozNVrOFpk38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MDA4MA==", "bodyText": "same as above.", "url": "https://github.com/linkedin/ambry/pull/1378#discussion_r379140080", "createdAt": "2020-02-13T21:53:35Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/main/java/com.github.ambry.router/GetBlobInfoOperation.java", "diffHunk": "@@ -296,16 +296,24 @@ private void processGetBlobInfoResponse(GetRequestInfo getRequestInfo, GetRespon\n           logger.trace(\"Replica  {} returned error {} with response correlationId {} \",\n               getRequestInfo.replicaId.getDataNodeId(), getError, getResponse.getCorrelationId());\n           RouterErrorCode routerErrorCode = processServerError(getError);\n-          if (getError == ServerErrorCode.Blob_Deleted || getError == ServerErrorCode.Blob_Expired\n-              || getError == ServerErrorCode.Blob_Authorization_Failure) {\n-            // this is a successful response and one that completes the operation regardless of whether the\n-            // success target has been reached or not.\n-            operationCompleted = true;\n+          if (getError == ServerErrorCode.Disk_Unavailable) {\n+            operationTracker.onResponse(getRequestInfo.replicaId, TrackedRequestFinalState.DISK_DOWN);\n+            setOperationException(new RouterException(\"Server returned: \" + getError, routerErrorCode));\n+            routerMetrics.routerRequestErrorCount.inc();\n+            routerMetrics.getDataNodeBasedMetrics(getRequestInfo.replicaId.getDataNodeId()).getBlobInfoRequestErrorCount\n+                .inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87949d10b95094e6470559b95b99ddd155ff4062"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTc4NjA4OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/GetBlobOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1NDozNFrOFpk5uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1NDozNFrOFpk5uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MDUzOQ==", "bodyText": "same as above", "url": "https://github.com/linkedin/ambry/pull/1378#discussion_r379140539", "createdAt": "2020-02-13T21:54:34Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/main/java/com.github.ambry.router/GetBlobOperation.java", "diffHunk": "@@ -939,17 +938,25 @@ private void processGetBlobResponse(GetRequestInfo getRequestInfo, GetResponse g\n           } else {\n             // process and set the most relevant exception.\n             RouterErrorCode routerErrorCode = processServerError(getError);\n-            if (getError == ServerErrorCode.Blob_Deleted || getError == ServerErrorCode.Blob_Expired\n-                || getError == ServerErrorCode.Blob_Authorization_Failure) {\n-              // this is a successful response and one that completes the operation regardless of whether the\n-              // success target has been reached or not.\n-              chunkCompleted = true;\n-              chunkException = buildChunkException(\"Server returned: \" + getError, routerErrorCode);\n+            if (getError == ServerErrorCode.Disk_Unavailable) {\n+              chunkOperationTracker.onResponse(getRequestInfo.replicaId, TrackedRequestFinalState.DISK_DOWN);\n+              setChunkException(buildChunkException(\"Server returned: \" + getError, routerErrorCode));\n+              routerMetrics.routerRequestErrorCount.inc();\n+              routerMetrics.getDataNodeBasedMetrics(\n+                  getRequestInfo.replicaId.getDataNodeId()).getRequestErrorCount.inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87949d10b95094e6470559b95b99ddd155ff4062"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTc5MDcxOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/TtlUpdateOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1NjoxMlrOFpk8og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1NjoxMlrOFpk8og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MTI4Mg==", "bodyText": "same as above", "url": "https://github.com/linkedin/ambry/pull/1378#discussion_r379141282", "createdAt": "2020-02-13T21:56:12Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-router/src/main/java/com.github.ambry.router/TtlUpdateOperation.java", "diffHunk": "@@ -188,26 +188,34 @@ void handleResponse(ResponseInfo responseInfo, TtlUpdateResponse ttlUpdateRespon\n               new RouterException(\"Received wrong response that is not for the corresponding request.\",\n                   RouterErrorCode.UnexpectedInternalError));\n         } else {\n-          ServerErrorCode getError = ttlUpdateResponse.getError();\n-          if (getError == ServerErrorCode.No_Error || getError == ServerErrorCode.Blob_Already_Updated) {\n+          ServerErrorCode serverError = ttlUpdateResponse.getError();\n+          if (serverError == ServerErrorCode.No_Error || serverError == ServerErrorCode.Blob_Already_Updated) {\n             operationTracker.onResponse(replica, TrackedRequestFinalState.SUCCESS);\n             if (RouterUtils.isRemoteReplica(routerConfig, replica)) {\n               LOGGER.trace(\"Cross colo request successful for remote replica {} in {} \", replica.getDataNodeId(),\n                   replica.getDataNodeId().getDatacenterName());\n               routerMetrics.crossColoSuccessCount.inc();\n             }\n+          } else if (serverError == ServerErrorCode.Disk_Unavailable) {\n+            LOGGER.debug(\n+                \"Replica {} returned Disk_Unavailable for a Ttl update request with response correlationId : {} \",\n+                replica.getDataNodeId(), ttlUpdateResponse.getCorrelationId());\n+            operationTracker.onResponse(replica, TrackedRequestFinalState.DISK_DOWN);\n+            setOperationException(\n+                new RouterException(\"Server returned: \" + serverError, RouterErrorCode.AmbryUnavailable));\n+            routerMetrics.getDataNodeBasedMetrics(replica.getDataNodeId()).ttlUpdateRequestErrorCount.inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87949d10b95094e6470559b95b99ddd155ff4062"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1696, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}