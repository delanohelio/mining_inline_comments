{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NzE5NzMw", "number": 1672, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowNjowNFrOE1A2lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowNjowNFrOE1A2lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDIzOTU2OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServerRequests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowNjowNFrOHtDofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzozMToyOFrOHtEJfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwNzQ4NQ==", "bodyText": "nit: can change this code slightly to not require the intermediate set:\nboolean isLocalStoreInErrorState =\n    partitionId.getReplicaIdsByState(ReplicaState.ERROR, currentNode.getDatacenterName())\n        .stream()\n        .anyMatch(r -> r.getDataNodeId().getHostname().equals(currentNode.getHostname()));", "url": "https://github.com/linkedin/ambry/pull/1672#discussion_r517007485", "createdAt": "2020-11-03T23:06:04Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServerRequests.java", "diffHunk": "@@ -434,10 +434,14 @@ private ServerErrorCode handleStartStoreRequest(PartitionId partitionId) {\n       logger.error(\"Could not enable replication on {}\", partitionIds);\n       return ServerErrorCode.Unknown_Error;\n     }\n-    // startBlobStore should guarantee that store is started, so return value shouldn't be null\n-    Store store = storeManager.getStore(partitionId);\n-    // 4. reset partition state if it's offline (will trigger state transition)\n-    if (store.getCurrentState() == ReplicaState.OFFLINE && clusterParticipant != null) {\n+    // 4. reset partition state if it's in error state (will trigger state transition)\n+    boolean isLocalStoreInErrorState =\n+        partitionId.getReplicaIdsByState(ReplicaState.ERROR, currentNode.getDatacenterName())\n+            .stream()\n+            .map(r -> r.getDataNodeId().getHostname())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7020968e45ae2cdd954112ed84fcc9b4ba07073"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNTkzNQ==", "bodyText": "Yeah, this seems better. Let me make the change.", "url": "https://github.com/linkedin/ambry/pull/1672#discussion_r517015935", "createdAt": "2020-11-03T23:31:28Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServerRequests.java", "diffHunk": "@@ -434,10 +434,14 @@ private ServerErrorCode handleStartStoreRequest(PartitionId partitionId) {\n       logger.error(\"Could not enable replication on {}\", partitionIds);\n       return ServerErrorCode.Unknown_Error;\n     }\n-    // startBlobStore should guarantee that store is started, so return value shouldn't be null\n-    Store store = storeManager.getStore(partitionId);\n-    // 4. reset partition state if it's offline (will trigger state transition)\n-    if (store.getCurrentState() == ReplicaState.OFFLINE && clusterParticipant != null) {\n+    // 4. reset partition state if it's in error state (will trigger state transition)\n+    boolean isLocalStoreInErrorState =\n+        partitionId.getReplicaIdsByState(ReplicaState.ERROR, currentNode.getDatacenterName())\n+            .stream()\n+            .map(r -> r.getDataNodeId().getHostname())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwNzQ4NQ=="}, "originalCommit": {"oid": "c7020968e45ae2cdd954112ed84fcc9b4ba07073"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1098, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}