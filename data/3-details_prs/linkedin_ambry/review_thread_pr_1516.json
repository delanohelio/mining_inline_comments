{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MTk1MzQw", "number": 1516, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo0ODoyMFrOD9nixw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzowMzoyNFrOD9nrzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM3NjA3OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo0ODoyMFrOGXN-GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo0ODoyMFrOGXN-GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTMyMA==", "bodyText": "Please add a comment explaining this section of code.", "url": "https://github.com/linkedin/ambry/pull/1516#discussion_r426999320", "createdAt": "2020-05-19T02:48:20Z", "author": {"login": "lightningrob"}, "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "diffHunk": "@@ -158,7 +160,16 @@ public void startup() throws InstantiationException {\n       properties.verify();\n \n       scheduler = Utils.newScheduler(serverConfig.serverSchedulerNumOfthreads, false);\n-      logger.info(\"check if node exist in clustermap host {} port {}\", networkConfig.hostName, networkConfig.port);\n+      if (clusterParticipants != null && clusterParticipants.size() > 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e30c452361bebd7590be22896855db32f3464aa"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM4NjUyOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com/github/ambry/server/ParticipantsConsistencyCheckerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo1NDo1NVrOGXOEhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozMDo1NFrOGXPdFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMDk2Nw==", "bodyText": "Nit: the test class name is misleading since you don't directly create any instances of ParticipantsConsistencyChecker and run their methods.", "url": "https://github.com/linkedin/ambry/pull/1516#discussion_r427000967", "createdAt": "2020-05-19T02:54:55Z", "author": {"login": "lightningrob"}, "path": "ambry-server/src/test/java/com/github/ambry/server/ParticipantsConsistencyCheckerTest.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.clustermap.ClusterParticipant;\n+import com.github.ambry.clustermap.MockClusterAgentsFactory;\n+import com.github.ambry.clustermap.MockClusterMap;\n+import com.github.ambry.clustermap.PartitionStateChangeListener;\n+import com.github.ambry.clustermap.ReplicaId;\n+import com.github.ambry.clustermap.ReplicaSyncUpManager;\n+import com.github.ambry.clustermap.StateModelListenerType;\n+import com.github.ambry.commons.LoggingNotificationSystem;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.notification.NotificationSystem;\n+import com.github.ambry.utils.SystemTime;\n+import com.github.ambry.utils.Time;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+\n+/**\n+ * Test class to verify participant consistency checker.\n+ */\n+public class ParticipantsConsistencyCheckerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e30c452361bebd7590be22896855db32f3464aa"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMzYzOA==", "bodyText": "Fair point. I will probably just call it ParticipantsConsistencyTest and rename several test method as well.", "url": "https://github.com/linkedin/ambry/pull/1516#discussion_r427023638", "createdAt": "2020-05-19T04:30:54Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/test/java/com/github/ambry/server/ParticipantsConsistencyCheckerTest.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.clustermap.ClusterParticipant;\n+import com.github.ambry.clustermap.MockClusterAgentsFactory;\n+import com.github.ambry.clustermap.MockClusterMap;\n+import com.github.ambry.clustermap.PartitionStateChangeListener;\n+import com.github.ambry.clustermap.ReplicaId;\n+import com.github.ambry.clustermap.ReplicaSyncUpManager;\n+import com.github.ambry.clustermap.StateModelListenerType;\n+import com.github.ambry.commons.LoggingNotificationSystem;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.notification.NotificationSystem;\n+import com.github.ambry.utils.SystemTime;\n+import com.github.ambry.utils.Time;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+\n+/**\n+ * Test class to verify participant consistency checker.\n+ */\n+public class ParticipantsConsistencyCheckerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMDk2Nw=="}, "originalCommit": {"oid": "0e30c452361bebd7590be22896855db32f3464aa"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM5NDM1OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/main/java/com/github/ambry/server/ParticipantsConsistencyChecker.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzowMDoxMFrOGXOJcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMTowMFrOGYYm-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMjIyNQ==", "bodyText": "If this task is going to run every X seconds, do we want to increment the counter each time?  Once we have a mismatch, the metric count will increase proportionally to how often the schedule is run, which doesn't seem very meaningful.  Wondering if it should be a Guage instead.\nBtw, what action can be taken if an alert on this metric is seen?", "url": "https://github.com/linkedin/ambry/pull/1516#discussion_r427002225", "createdAt": "2020-05-19T03:00:10Z", "author": {"login": "lightningrob"}, "path": "ambry-server/src/main/java/com/github/ambry/server/ParticipantsConsistencyChecker.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.clustermap.ClusterParticipant;\n+import com.github.ambry.commons.ServerMetrics;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A thread that helps periodically check consistency of participants. Specifically, it checks if there is a mismatch\n+ * in sealed and stopped replicas from each participant.\n+ */\n+public class ParticipantsConsistencyChecker implements Runnable {\n+  private final List<ClusterParticipant> participants;\n+  private final ServerMetrics metrics;\n+  private static final Logger logger = LoggerFactory.getLogger(ParticipantsConsistencyChecker.class);\n+\n+  public ParticipantsConsistencyChecker(List<ClusterParticipant> participants, ServerMetrics metrics) {\n+    this.participants = participants;\n+    this.metrics = metrics;\n+    metrics.registerParticipantsMismatchMetrics();\n+  }\n+\n+  @Override\n+  public void run() {\n+    // when code reaches here, it means there are at least two participants.\n+    ClusterParticipant clusterParticipant = participants.get(0);\n+    Set<String> sealedReplicas1 = new HashSet<>(clusterParticipant.getSealedReplicas());\n+    Set<String> stoppedReplicas1 = new HashSet<>(clusterParticipant.getStoppedReplicas());\n+    for (int i = 1; i < participants.size(); ++i) {\n+      Set<String> sealedReplicas2 = new HashSet<>(participants.get(i).getSealedReplicas());\n+      if (!sealedReplicas1.equals(sealedReplicas2)) {\n+        logger.warn(\"Mismatch in sealed replicas. Set {} is different from set {}\", sealedReplicas1, sealedReplicas2);\n+        metrics.sealedReplicasMismatchCount.inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e30c452361bebd7590be22896855db32f3464aa"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMTA5OQ==", "bodyText": "Using counter seems inappropriate but is actually ok because Ingraph converts it to per second rate when it is read. (Reference: https://iwww.corp.linkedin.com/wiki/cf/display/SOP/inGraphs+FAQ#inGraphsFAQ). An example is instanceConfigChangeTriggerCount, if we look at the dashboard, it actually records number of events per second.", "url": "https://github.com/linkedin/ambry/pull/1516#discussion_r427021099", "createdAt": "2020-05-19T04:19:46Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/main/java/com/github/ambry/server/ParticipantsConsistencyChecker.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.clustermap.ClusterParticipant;\n+import com.github.ambry.commons.ServerMetrics;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A thread that helps periodically check consistency of participants. Specifically, it checks if there is a mismatch\n+ * in sealed and stopped replicas from each participant.\n+ */\n+public class ParticipantsConsistencyChecker implements Runnable {\n+  private final List<ClusterParticipant> participants;\n+  private final ServerMetrics metrics;\n+  private static final Logger logger = LoggerFactory.getLogger(ParticipantsConsistencyChecker.class);\n+\n+  public ParticipantsConsistencyChecker(List<ClusterParticipant> participants, ServerMetrics metrics) {\n+    this.participants = participants;\n+    this.metrics = metrics;\n+    metrics.registerParticipantsMismatchMetrics();\n+  }\n+\n+  @Override\n+  public void run() {\n+    // when code reaches here, it means there are at least two participants.\n+    ClusterParticipant clusterParticipant = participants.get(0);\n+    Set<String> sealedReplicas1 = new HashSet<>(clusterParticipant.getSealedReplicas());\n+    Set<String> stoppedReplicas1 = new HashSet<>(clusterParticipant.getStoppedReplicas());\n+    for (int i = 1; i < participants.size(); ++i) {\n+      Set<String> sealedReplicas2 = new HashSet<>(participants.get(i).getSealedReplicas());\n+      if (!sealedReplicas1.equals(sealedReplicas2)) {\n+        logger.warn(\"Mismatch in sealed replicas. Set {} is different from set {}\", sealedReplicas1, sealedReplicas2);\n+        metrics.sealedReplicasMismatchCount.inc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMjIyNQ=="}, "originalCommit": {"oid": "0e30c452361bebd7590be22896855db32f3464aa"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMTc2MA==", "bodyText": "If alert is fired, we can try to restart the server and attempt to correct the number. Sometimes the inconsistency comes from intermittent failure due to connection issue.\nIf it doesn't work, we can use \"partition override\" feature to override certain partition to the correct state.", "url": "https://github.com/linkedin/ambry/pull/1516#discussion_r427021760", "createdAt": "2020-05-19T04:22:33Z", "author": {"login": "jsjtzyy"}, "path": "ambry-server/src/main/java/com/github/ambry/server/ParticipantsConsistencyChecker.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.clustermap.ClusterParticipant;\n+import com.github.ambry.commons.ServerMetrics;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A thread that helps periodically check consistency of participants. Specifically, it checks if there is a mismatch\n+ * in sealed and stopped replicas from each participant.\n+ */\n+public class ParticipantsConsistencyChecker implements Runnable {\n+  private final List<ClusterParticipant> participants;\n+  private final ServerMetrics metrics;\n+  private static final Logger logger = LoggerFactory.getLogger(ParticipantsConsistencyChecker.class);\n+\n+  public ParticipantsConsistencyChecker(List<ClusterParticipant> participants, ServerMetrics metrics) {\n+    this.participants = participants;\n+    this.metrics = metrics;\n+    metrics.registerParticipantsMismatchMetrics();\n+  }\n+\n+  @Override\n+  public void run() {\n+    // when code reaches here, it means there are at least two participants.\n+    ClusterParticipant clusterParticipant = participants.get(0);\n+    Set<String> sealedReplicas1 = new HashSet<>(clusterParticipant.getSealedReplicas());\n+    Set<String> stoppedReplicas1 = new HashSet<>(clusterParticipant.getStoppedReplicas());\n+    for (int i = 1; i < participants.size(); ++i) {\n+      Set<String> sealedReplicas2 = new HashSet<>(participants.get(i).getSealedReplicas());\n+      if (!sealedReplicas1.equals(sealedReplicas2)) {\n+        logger.warn(\"Mismatch in sealed replicas. Set {} is different from set {}\", sealedReplicas1, sealedReplicas2);\n+        metrics.sealedReplicasMismatchCount.inc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMjIyNQ=="}, "originalCommit": {"oid": "0e30c452361bebd7590be22896855db32f3464aa"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMjIwMA==", "bodyText": "I understand that counter is converted to rate.  My point was that the reported rate would be governed by how often the checker task kicks off, rather than how frequently an error happened or how many discrepancies there are, which might be confusing.  It's not a deal breaker, just wanted to point that out.", "url": "https://github.com/linkedin/ambry/pull/1516#discussion_r428222200", "createdAt": "2020-05-20T18:31:00Z", "author": {"login": "lightningrob"}, "path": "ambry-server/src/main/java/com/github/ambry/server/ParticipantsConsistencyChecker.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.clustermap.ClusterParticipant;\n+import com.github.ambry.commons.ServerMetrics;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A thread that helps periodically check consistency of participants. Specifically, it checks if there is a mismatch\n+ * in sealed and stopped replicas from each participant.\n+ */\n+public class ParticipantsConsistencyChecker implements Runnable {\n+  private final List<ClusterParticipant> participants;\n+  private final ServerMetrics metrics;\n+  private static final Logger logger = LoggerFactory.getLogger(ParticipantsConsistencyChecker.class);\n+\n+  public ParticipantsConsistencyChecker(List<ClusterParticipant> participants, ServerMetrics metrics) {\n+    this.participants = participants;\n+    this.metrics = metrics;\n+    metrics.registerParticipantsMismatchMetrics();\n+  }\n+\n+  @Override\n+  public void run() {\n+    // when code reaches here, it means there are at least two participants.\n+    ClusterParticipant clusterParticipant = participants.get(0);\n+    Set<String> sealedReplicas1 = new HashSet<>(clusterParticipant.getSealedReplicas());\n+    Set<String> stoppedReplicas1 = new HashSet<>(clusterParticipant.getStoppedReplicas());\n+    for (int i = 1; i < participants.size(); ++i) {\n+      Set<String> sealedReplicas2 = new HashSet<>(participants.get(i).getSealedReplicas());\n+      if (!sealedReplicas1.equals(sealedReplicas2)) {\n+        logger.warn(\"Mismatch in sealed replicas. Set {} is different from set {}\", sealedReplicas1, sealedReplicas2);\n+        metrics.sealedReplicasMismatchCount.inc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMjIyNQ=="}, "originalCommit": {"oid": "0e30c452361bebd7590be22896855db32f3464aa"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM5OTE5OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/RouterConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzowMzoyNFrOGXOMYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzowMzoyNFrOGXOMYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMjk3Nw==", "bodyText": "Minor: in seconds.", "url": "https://github.com/linkedin/ambry/pull/1516#discussion_r427002977", "createdAt": "2020-05-19T03:03:24Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/config/RouterConfig.java", "diffHunk": "@@ -422,7 +422,7 @@\n   public final boolean routerOperationTrackerHistogramDumpEnabled;\n \n   /**\n-   * The period of dumping resource-level histogram (if enabled).\n+   * The period of dumping resource-level histogram in second(if enabled).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e30c452361bebd7590be22896855db32f3464aa"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1581, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}