{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MzI1MDM5", "number": 1391, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxMzozNlrODibS8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxODo1MVrODibZFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDI1MzkzOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/PersistentIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxMzozNlrOFtqqxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxMzozNlrOFtqqxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyOTMxNw==", "bodyText": "isFlagSet -> isTTLUpdate", "url": "https://github.com/linkedin/ambry/pull/1391#discussion_r383429317", "createdAt": "2020-02-24T18:13:36Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/PersistentIndex.java", "diffHunk": "@@ -1055,57 +1055,20 @@ BlobReadOptions getBlobReadInfo(StoreKey id, EnumSet<StoreGetOptions> getOptions\n   private BlobReadOptions getDeletedBlobReadOptions(IndexValue value, StoreKey key,\n       ConcurrentSkipListMap<Offset, IndexSegment> indexSegments) throws StoreException {\n     BlobReadOptions readOptions;\n-    try {\n-      IndexValue putValue =\n-          findKey(key, new FileSpan(getStartOffset(indexSegments), value.getOffset()), EnumSet.of(IndexEntryType.PUT),\n-              indexSegments);\n-      if (value.getOriginalMessageOffset() != IndexValue.UNKNOWN_ORIGINAL_MESSAGE_OFFSET\n-          && value.getOriginalMessageOffset() != value.getOffset().getOffset()) {\n-        // PUT record in the same log segment.\n-        String logSegmentName = value.getOffset().getName();\n-        // The delete entry in the index might not contain the information about the size of the original blob. So we\n-        // use the Message format to read and provide the information. The range in log that we provide starts at the\n-        // original message offset and ends at the delete message's start offset (the original message surely cannot go\n-        // beyond the start offset of the delete message).\n-        MessageInfo deletedBlobInfo =\n-            hardDelete.getMessageInfo(log.getSegment(logSegmentName), value.getOriginalMessageOffset(), factory);\n-        if (putValue != null && putValue.getOffset().getName().equals(value.getOffset().getName())) {\n-          if (putValue.getOffset().getOffset() != value.getOriginalMessageOffset()) {\n-            logger.error(\n-                \"Offset in PUT index entry {} is different from original message offset in delete entry {} for key {}\",\n-                putValue.getOffset().getOffset(), value.getOriginalMessageOffset(), key);\n-            metrics.putEntryDeletedInfoMismatchCount.inc();\n-          }\n-          if (putValue.getSize() != deletedBlobInfo.getSize()) {\n-            logger.error(\"Size in PUT index entry {} is different from that in the PUT record {} for ID {}\",\n-                putValue.getSize(), deletedBlobInfo.getSize(), key);\n-            metrics.putEntryDeletedInfoMismatchCount.inc();\n-          }\n-        }\n-        Offset offset = new Offset(logSegmentName, value.getOriginalMessageOffset());\n-        // use the expiration time from the original value because it may have been updated\n-        readOptions = new BlobReadOptions(log, offset,\n-            new MessageInfo(deletedBlobInfo.getStoreKey(), deletedBlobInfo.getSize(), true,\n-                value.isFlagSet(IndexValue.Flags.Ttl_Update_Index), value.getExpiresAtMs(),\n-                deletedBlobInfo.getAccountId(), deletedBlobInfo.getContainerId(),\n-                deletedBlobInfo.getOperationTimeMs()));\n-      } else if (putValue != null) {\n-        // PUT record in a different log segment.\n-        // use the expiration time from the original value because it may have been updated\n-        readOptions = new BlobReadOptions(log, putValue.getOffset(),\n-            new MessageInfo(key, putValue.getSize(), true, value.isFlagSet(IndexValue.Flags.Ttl_Update_Index),\n-                value.getExpiresAtMs(), putValue.getAccountId(), putValue.getContainerId(),\n-                putValue.getOperationTimeInMs()));\n-      } else {\n-        // PUT record no longer available.\n-        throw new StoreException(\"Did not find PUT index entry for key [\" + key\n-            + \"] and the the original offset in value of the DELETE entry was [\" + value.getOriginalMessageOffset()\n-            + \"]\", StoreErrorCodes.ID_Deleted);\n-      }\n-    } catch (IOException e) {\n-      StoreErrorCodes errorCode = StoreException.resolveErrorCode(e);\n-      throw new StoreException(errorCode.toString() + \" when reading delete blob info from the log \" + dataDir, e,\n-          errorCode);\n+    IndexValue putValue =\n+        findKey(key, new FileSpan(getStartOffset(indexSegments), value.getOffset()), EnumSet.of(IndexEntryType.PUT),\n+            indexSegments);\n+    if (putValue != null) {\n+      // use the expiration time from the original value because it may have been updated\n+      readOptions = new BlobReadOptions(log, putValue.getOffset(),\n+          new MessageInfo(key, putValue.getSize(), true, value.isFlagSet(IndexValue.Flags.Ttl_Update_Index),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfffc3b67916d597093580b47026c278f9bce760"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDI2NTEzOnYy", "diffSide": "LEFT", "path": "ambry-store/src/main/java/com.github.ambry.store/PersistentIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxNzoxOVrOFtqxpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxNzoxOVrOFtqxpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMTA3Ng==", "bodyText": "also, this metric can be deleted from StoreMetrics", "url": "https://github.com/linkedin/ambry/pull/1391#discussion_r383431076", "createdAt": "2020-02-24T18:17:19Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/PersistentIndex.java", "diffHunk": "@@ -1055,57 +1055,20 @@ BlobReadOptions getBlobReadInfo(StoreKey id, EnumSet<StoreGetOptions> getOptions\n   private BlobReadOptions getDeletedBlobReadOptions(IndexValue value, StoreKey key,\n       ConcurrentSkipListMap<Offset, IndexSegment> indexSegments) throws StoreException {\n     BlobReadOptions readOptions;\n-    try {\n-      IndexValue putValue =\n-          findKey(key, new FileSpan(getStartOffset(indexSegments), value.getOffset()), EnumSet.of(IndexEntryType.PUT),\n-              indexSegments);\n-      if (value.getOriginalMessageOffset() != IndexValue.UNKNOWN_ORIGINAL_MESSAGE_OFFSET\n-          && value.getOriginalMessageOffset() != value.getOffset().getOffset()) {\n-        // PUT record in the same log segment.\n-        String logSegmentName = value.getOffset().getName();\n-        // The delete entry in the index might not contain the information about the size of the original blob. So we\n-        // use the Message format to read and provide the information. The range in log that we provide starts at the\n-        // original message offset and ends at the delete message's start offset (the original message surely cannot go\n-        // beyond the start offset of the delete message).\n-        MessageInfo deletedBlobInfo =\n-            hardDelete.getMessageInfo(log.getSegment(logSegmentName), value.getOriginalMessageOffset(), factory);\n-        if (putValue != null && putValue.getOffset().getName().equals(value.getOffset().getName())) {\n-          if (putValue.getOffset().getOffset() != value.getOriginalMessageOffset()) {\n-            logger.error(\n-                \"Offset in PUT index entry {} is different from original message offset in delete entry {} for key {}\",\n-                putValue.getOffset().getOffset(), value.getOriginalMessageOffset(), key);\n-            metrics.putEntryDeletedInfoMismatchCount.inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfffc3b67916d597093580b47026c278f9bce760"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDI2OTY1OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com.github.ambry.store/PersistentIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxODo1MVrOFtq0ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo1MzowNlrOFtxPTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMTc4MQ==", "bodyText": "I wonder why the error code is ID_Deleted rather than ID_Not_Found?", "url": "https://github.com/linkedin/ambry/pull/1391#discussion_r383431781", "createdAt": "2020-02-24T18:18:51Z", "author": {"login": "jsjtzyy"}, "path": "ambry-store/src/main/java/com.github.ambry.store/PersistentIndex.java", "diffHunk": "@@ -1055,57 +1055,20 @@ BlobReadOptions getBlobReadInfo(StoreKey id, EnumSet<StoreGetOptions> getOptions\n   private BlobReadOptions getDeletedBlobReadOptions(IndexValue value, StoreKey key,\n       ConcurrentSkipListMap<Offset, IndexSegment> indexSegments) throws StoreException {\n     BlobReadOptions readOptions;\n-    try {\n-      IndexValue putValue =\n-          findKey(key, new FileSpan(getStartOffset(indexSegments), value.getOffset()), EnumSet.of(IndexEntryType.PUT),\n-              indexSegments);\n-      if (value.getOriginalMessageOffset() != IndexValue.UNKNOWN_ORIGINAL_MESSAGE_OFFSET\n-          && value.getOriginalMessageOffset() != value.getOffset().getOffset()) {\n-        // PUT record in the same log segment.\n-        String logSegmentName = value.getOffset().getName();\n-        // The delete entry in the index might not contain the information about the size of the original blob. So we\n-        // use the Message format to read and provide the information. The range in log that we provide starts at the\n-        // original message offset and ends at the delete message's start offset (the original message surely cannot go\n-        // beyond the start offset of the delete message).\n-        MessageInfo deletedBlobInfo =\n-            hardDelete.getMessageInfo(log.getSegment(logSegmentName), value.getOriginalMessageOffset(), factory);\n-        if (putValue != null && putValue.getOffset().getName().equals(value.getOffset().getName())) {\n-          if (putValue.getOffset().getOffset() != value.getOriginalMessageOffset()) {\n-            logger.error(\n-                \"Offset in PUT index entry {} is different from original message offset in delete entry {} for key {}\",\n-                putValue.getOffset().getOffset(), value.getOriginalMessageOffset(), key);\n-            metrics.putEntryDeletedInfoMismatchCount.inc();\n-          }\n-          if (putValue.getSize() != deletedBlobInfo.getSize()) {\n-            logger.error(\"Size in PUT index entry {} is different from that in the PUT record {} for ID {}\",\n-                putValue.getSize(), deletedBlobInfo.getSize(), key);\n-            metrics.putEntryDeletedInfoMismatchCount.inc();\n-          }\n-        }\n-        Offset offset = new Offset(logSegmentName, value.getOriginalMessageOffset());\n-        // use the expiration time from the original value because it may have been updated\n-        readOptions = new BlobReadOptions(log, offset,\n-            new MessageInfo(deletedBlobInfo.getStoreKey(), deletedBlobInfo.getSize(), true,\n-                value.isFlagSet(IndexValue.Flags.Ttl_Update_Index), value.getExpiresAtMs(),\n-                deletedBlobInfo.getAccountId(), deletedBlobInfo.getContainerId(),\n-                deletedBlobInfo.getOperationTimeMs()));\n-      } else if (putValue != null) {\n-        // PUT record in a different log segment.\n-        // use the expiration time from the original value because it may have been updated\n-        readOptions = new BlobReadOptions(log, putValue.getOffset(),\n-            new MessageInfo(key, putValue.getSize(), true, value.isFlagSet(IndexValue.Flags.Ttl_Update_Index),\n-                value.getExpiresAtMs(), putValue.getAccountId(), putValue.getContainerId(),\n-                putValue.getOperationTimeInMs()));\n-      } else {\n-        // PUT record no longer available.\n-        throw new StoreException(\"Did not find PUT index entry for key [\" + key\n-            + \"] and the the original offset in value of the DELETE entry was [\" + value.getOriginalMessageOffset()\n-            + \"]\", StoreErrorCodes.ID_Deleted);\n-      }\n-    } catch (IOException e) {\n-      StoreErrorCodes errorCode = StoreException.resolveErrorCode(e);\n-      throw new StoreException(errorCode.toString() + \" when reading delete blob info from the log \" + dataDir, e,\n-          errorCode);\n+    IndexValue putValue =\n+        findKey(key, new FileSpan(getStartOffset(indexSegments), value.getOffset()), EnumSet.of(IndexEntryType.PUT),\n+            indexSegments);\n+    if (putValue != null) {\n+      // use the expiration time from the original value because it may have been updated\n+      readOptions = new BlobReadOptions(log, putValue.getOffset(),\n+          new MessageInfo(key, putValue.getSize(), true, value.isFlagSet(IndexValue.Flags.Ttl_Update_Index),\n+              value.getExpiresAtMs(), putValue.getAccountId(), putValue.getContainerId(),\n+              putValue.getOperationTimeInMs()));\n+    } else {\n+      // PUT record no longer available.\n+      throw new StoreException(\"Did not find PUT index entry for key [\" + key\n+          + \"] and the the original offset in value of the DELETE entry was [\" + value.getOriginalMessageOffset() + \"]\",\n+          StoreErrorCodes.ID_Deleted);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfffc3b67916d597093580b47026c278f9bce760"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzNjk3NA==", "bodyText": "I think it can be further detailed. It means the original Put Record is already compacted, or this node only replicates the Delete record from it's peer, which are different error code and ambry frontend would react differently. But this is what we have before so I will just keep as it's.", "url": "https://github.com/linkedin/ambry/pull/1391#discussion_r383536974", "createdAt": "2020-02-24T21:53:06Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com.github.ambry.store/PersistentIndex.java", "diffHunk": "@@ -1055,57 +1055,20 @@ BlobReadOptions getBlobReadInfo(StoreKey id, EnumSet<StoreGetOptions> getOptions\n   private BlobReadOptions getDeletedBlobReadOptions(IndexValue value, StoreKey key,\n       ConcurrentSkipListMap<Offset, IndexSegment> indexSegments) throws StoreException {\n     BlobReadOptions readOptions;\n-    try {\n-      IndexValue putValue =\n-          findKey(key, new FileSpan(getStartOffset(indexSegments), value.getOffset()), EnumSet.of(IndexEntryType.PUT),\n-              indexSegments);\n-      if (value.getOriginalMessageOffset() != IndexValue.UNKNOWN_ORIGINAL_MESSAGE_OFFSET\n-          && value.getOriginalMessageOffset() != value.getOffset().getOffset()) {\n-        // PUT record in the same log segment.\n-        String logSegmentName = value.getOffset().getName();\n-        // The delete entry in the index might not contain the information about the size of the original blob. So we\n-        // use the Message format to read and provide the information. The range in log that we provide starts at the\n-        // original message offset and ends at the delete message's start offset (the original message surely cannot go\n-        // beyond the start offset of the delete message).\n-        MessageInfo deletedBlobInfo =\n-            hardDelete.getMessageInfo(log.getSegment(logSegmentName), value.getOriginalMessageOffset(), factory);\n-        if (putValue != null && putValue.getOffset().getName().equals(value.getOffset().getName())) {\n-          if (putValue.getOffset().getOffset() != value.getOriginalMessageOffset()) {\n-            logger.error(\n-                \"Offset in PUT index entry {} is different from original message offset in delete entry {} for key {}\",\n-                putValue.getOffset().getOffset(), value.getOriginalMessageOffset(), key);\n-            metrics.putEntryDeletedInfoMismatchCount.inc();\n-          }\n-          if (putValue.getSize() != deletedBlobInfo.getSize()) {\n-            logger.error(\"Size in PUT index entry {} is different from that in the PUT record {} for ID {}\",\n-                putValue.getSize(), deletedBlobInfo.getSize(), key);\n-            metrics.putEntryDeletedInfoMismatchCount.inc();\n-          }\n-        }\n-        Offset offset = new Offset(logSegmentName, value.getOriginalMessageOffset());\n-        // use the expiration time from the original value because it may have been updated\n-        readOptions = new BlobReadOptions(log, offset,\n-            new MessageInfo(deletedBlobInfo.getStoreKey(), deletedBlobInfo.getSize(), true,\n-                value.isFlagSet(IndexValue.Flags.Ttl_Update_Index), value.getExpiresAtMs(),\n-                deletedBlobInfo.getAccountId(), deletedBlobInfo.getContainerId(),\n-                deletedBlobInfo.getOperationTimeMs()));\n-      } else if (putValue != null) {\n-        // PUT record in a different log segment.\n-        // use the expiration time from the original value because it may have been updated\n-        readOptions = new BlobReadOptions(log, putValue.getOffset(),\n-            new MessageInfo(key, putValue.getSize(), true, value.isFlagSet(IndexValue.Flags.Ttl_Update_Index),\n-                value.getExpiresAtMs(), putValue.getAccountId(), putValue.getContainerId(),\n-                putValue.getOperationTimeInMs()));\n-      } else {\n-        // PUT record no longer available.\n-        throw new StoreException(\"Did not find PUT index entry for key [\" + key\n-            + \"] and the the original offset in value of the DELETE entry was [\" + value.getOriginalMessageOffset()\n-            + \"]\", StoreErrorCodes.ID_Deleted);\n-      }\n-    } catch (IOException e) {\n-      StoreErrorCodes errorCode = StoreException.resolveErrorCode(e);\n-      throw new StoreException(errorCode.toString() + \" when reading delete blob info from the log \" + dataDir, e,\n-          errorCode);\n+    IndexValue putValue =\n+        findKey(key, new FileSpan(getStartOffset(indexSegments), value.getOffset()), EnumSet.of(IndexEntryType.PUT),\n+            indexSegments);\n+    if (putValue != null) {\n+      // use the expiration time from the original value because it may have been updated\n+      readOptions = new BlobReadOptions(log, putValue.getOffset(),\n+          new MessageInfo(key, putValue.getSize(), true, value.isFlagSet(IndexValue.Flags.Ttl_Update_Index),\n+              value.getExpiresAtMs(), putValue.getAccountId(), putValue.getContainerId(),\n+              putValue.getOperationTimeInMs()));\n+    } else {\n+      // PUT record no longer available.\n+      throw new StoreException(\"Did not find PUT index entry for key [\" + key\n+          + \"] and the the original offset in value of the DELETE entry was [\" + value.getOriginalMessageOffset() + \"]\",\n+          StoreErrorCodes.ID_Deleted);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMTc4MQ=="}, "originalCommit": {"oid": "bfffc3b67916d597093580b47026c278f9bce760"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1724, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}