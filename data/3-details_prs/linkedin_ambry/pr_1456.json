{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTcwMDcx", "number": 1456, "title": "Add metrics to track progress of replication from cloud.", "bodyText": "Since a metric like replication lag in bytes is not possible from cloud, a metric that can be used to track replication progress from cloud can be the point of time up to which the local replica has caught up from the cloud replica. Below are considerations for implementing such a metric.\nThere are two options to emit metrics for recovery/vcr-replication progress\n\nProgress is reported by the VCR that is the recovery source.\nProgress is reported by the storage node itself that is recovering.\n\nProgress Reported By Vcr\nWhen a VCR gets a replica metadata request, then it can look at the token to see the lastUpdateTime (which needs to be added to the CloudFindToken) in the incoming token, and can add it to a metric called partition_<partitionid_datanodeid>_catchup_point. This metric is the time up to which the remote is caught up from the VCR.\nA major assumption here is that one storage node recovers/replicates from only one VCR node. If there is a possibility of one storage node replicating from multiple VCR nodes (which basically doesn't make sense, since the source of data is same for all VCRs), then it will not be possible to determine which VCR node has most up to date progress. Since such a possibility is not expected, this assumption is expected to hold true.\nA major issue with approach is that there will be no way to know when to drop the metrics from a VCR node. Since this happens in the request path, a VCR node will never be able to drop the metrics. Due to this issue, the next approach is a better approach to report progress.\nProgress Reported by the Storage Node\nJust like a storage node emits metrics for replicationLagInBytes, it can also emit metrics for replicationCatchupTime (time up to which a replica has caught up). The response of replica metadata exchange consists of an ordered list of MessageInfo, representing the metadata of a blob. The operation time of the last MessageInfo, can be used as the point in time up to which the local replica has caught up from cloud replica. While this information can be obtained for both replication from cloud as well as from store, it makes more sense to track this only for replication from cloud, because there will be three peer store replicas for a local replica, and it is difficult to determine how to merge the three catch up timestamps to get accurate information about catch up point (there can be a remote store peer replica, which is new, and is still catching up with the existing replicas. It will be far behind the other replicas). With the assumption that there will be only one cloud replica per local replica in a store, this approach can be used to track progress of replication from cloud, and hence progress of disaster recovery.\nDue to the reasons above, approach 2 (progress reported by the storage node), is used to get the recovery progress metric.", "createdAt": "2020-04-07T00:17:50Z", "url": "https://github.com/linkedin/ambry/pull/1456", "merged": true, "mergeCommit": {"oid": "57e0926fc2553bc4e6708314c0732d640bd3b39c"}, "closed": true, "closedAt": "2020-05-26T20:41:54Z", "author": {"login": "ankagrawal"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVI-BygFqTM4ODcyNTMwMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABclKS4KgH2gAyMzk5OTcwMDcxOmQyMzY3Y2FjYjYzMmRlM2E2N2I0ZjgwMWMwNWFiMTI1ZWRlYWY1ZDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzI1MzAz", "url": "https://github.com/linkedin/ambry/pull/1456#pullrequestreview-388725303", "createdAt": "2020-04-07T01:24:47Z", "commit": {"oid": "7c0d5c9c1a409aca01574f41662fdaa03fcc6777"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMToyNDo0N1rOGBvqjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMToyNDo0N1rOGBvqjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MjcwMg==", "bodyText": "If this is only for cloud replicas, should the metric name reflect that?", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r404482702", "createdAt": "2020-04-07T01:24:47Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -671,6 +699,20 @@ public void updateLagMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo,\n     }\n   }\n \n+  /**\n+   * Update catch up point of local replica from the cloud replica.\n+   * @param remoteReplicaInfo {@link RemoteReplicaInfo} of the cloud replica.\n+   * @param catchUpPoint timestamp upto which local replica has caught with the cloud replica.\n+   */\n+  public void updateCatchupPointMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo, long catchUpPoint) {\n+    // update this metric only for cloud peer replica. There will only be one cloud replica peer per partition.\n+    if (remoteReplicaInfo.getReplicaId().getReplicaType() == ReplicaType.CLOUD_BACKED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0d5c9c1a409aca01574f41662fdaa03fcc6777"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTMxOTU0", "url": "https://github.com/linkedin/ambry/pull/1456#pullrequestreview-390131954", "createdAt": "2020-04-08T16:21:31Z", "commit": {"oid": "7651670598f1aa11044e4dc938ab07ee5c298e07"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoyMTozMVrOGC26Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoyNTo0N1rOGC3Fnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0OTk5MQ==", "bodyText": "Not sure if its possible for there to be a conflict with removeCatchupPointMetricForPartition being called concurrently, but if there is, you could use cloudReplicaCatchUpPoint.computeIfPresent(remoteReplicaInfo.getLocalReplicaId().getPartitionId(), (k, v) -> catchUpPoint) instead.", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r405649991", "createdAt": "2020-04-08T16:21:31Z", "author": {"login": "cgtz"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -671,6 +699,20 @@ public void updateLagMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo,\n     }\n   }\n \n+  /**\n+   * Update catch up point of local replica from the cloud replica.\n+   * @param remoteReplicaInfo {@link RemoteReplicaInfo} of the cloud replica.\n+   * @param catchUpPoint timestamp upto which local replica has caught with the cloud replica.\n+   */\n+  public void updateCatchupPointMetricForCloudReplica(RemoteReplicaInfo remoteReplicaInfo, long catchUpPoint) {\n+    // update this metric only for cloud peer replica. There will only be one cloud replica peer per partition.\n+    if (remoteReplicaInfo.getReplicaId().getReplicaType() == ReplicaType.CLOUD_BACKED\n+        && cloudReplicaCatchUpPoint.containsKey(remoteReplicaInfo.getLocalReplicaId().getPartitionId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7651670598f1aa11044e4dc938ab07ee5c298e07"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1Mjg5NQ==", "bodyText": "minor: I know it wasn't done for the other similar metrics, but since this name format is used in two methods you could probably make a helper method to generate the name\nString getCatchupPointFromCloudMetricName(PartitionId partitionId) { \n  return MetricRegistry.name(ReplicaThread.class, \"Partition-\" + partitionId.toPathString() + \"-catchupPointFromCloud\");\n}", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r405652895", "createdAt": "2020-04-08T16:25:47Z", "author": {"login": "cgtz"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -434,6 +437,20 @@ public void addLagMetricForPartition(PartitionId partitionId) {\n     }\n   }\n \n+  /**\n+   * Add catchup point metric(local from cloud) for given partitionId.\n+   * @param partitionId partition to add metric for.\n+   */\n+  public void addCatchUpPointMetricForPartition(PartitionId partitionId) {\n+    if (!cloudReplicaCatchUpPoint.containsKey(partitionId)) {\n+      cloudReplicaCatchUpPoint.put(partitionId, 0L);\n+      // Set up metrics if and only if no mapping for this partition before.\n+      Gauge<Long> catchUpPoint = () -> cloudReplicaCatchUpPoint.get(partitionId);\n+      registry.register(MetricRegistry.name(ReplicaThread.class,\n+          \"Partition-\" + partitionId.toPathString() + \"-catchupPointFromCloud\"), catchUpPoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7651670598f1aa11044e4dc938ab07ee5c298e07"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzc3OTU1", "url": "https://github.com/linkedin/ambry/pull/1456#pullrequestreview-390377955", "createdAt": "2020-04-08T22:35:26Z", "commit": {"oid": "7651670598f1aa11044e4dc938ab07ee5c298e07"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fce0ec23c5cf12bdeaa631afbf256a15f7f46e9", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/1fce0ec23c5cf12bdeaa631afbf256a15f7f46e9", "committedDate": "2020-04-08T22:35:01Z", "message": "Address review comments."}, "afterCommit": {"oid": "fc0a9bcd92e2b5ac79322e9ebcef87fdbf2355e3", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/fc0a9bcd92e2b5ac79322e9ebcef87fdbf2355e3", "committedDate": "2020-04-08T22:59:42Z", "message": "Address review comments."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eba5be9d7771eb80a709f3fe4e8d58c2660670ff", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/eba5be9d7771eb80a709f3fe4e8d58c2660670ff", "committedDate": "2020-04-09T20:03:55Z", "message": "fix a code comment."}, "afterCommit": {"oid": "fc38f3e50d9736be7af113a345886a49206bf423", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/fc38f3e50d9736be7af113a345886a49206bf423", "committedDate": "2020-05-11T20:20:19Z", "message": "fix a code comment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54a9e3af1cf7952aac2637db43f6205fadbae70a", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/54a9e3af1cf7952aac2637db43f6205fadbae70a", "committedDate": "2020-05-26T18:24:58Z", "message": "Add metrics to track progress of replcation from cloud."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7185054f8cb05ee948ef415581a198899410939", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/f7185054f8cb05ee948ef415581a198899410939", "committedDate": "2020-05-26T18:24:58Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "094a9575270abfb3cc1cc0911daa4d3ee51d3ed6", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/094a9575270abfb3cc1cc0911daa4d3ee51d3ed6", "committedDate": "2020-05-26T18:24:58Z", "message": "Address review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d811331f80b7fb04f1ecd66ad96b5e99260f373", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/8d811331f80b7fb04f1ecd66ad96b5e99260f373", "committedDate": "2020-05-26T18:24:58Z", "message": "fix a code comment."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc38f3e50d9736be7af113a345886a49206bf423", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/fc38f3e50d9736be7af113a345886a49206bf423", "committedDate": "2020-05-11T20:20:19Z", "message": "fix a code comment."}, "afterCommit": {"oid": "8d811331f80b7fb04f1ecd66ad96b5e99260f373", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/8d811331f80b7fb04f1ecd66ad96b5e99260f373", "committedDate": "2020-05-26T18:24:58Z", "message": "fix a code comment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2367cacb632de3a67b4f801c05ab125edeaf5d8", "author": {"user": null}, "url": "https://github.com/linkedin/ambry/commit/d2367cacb632de3a67b4f801c05ab125edeaf5d8", "committedDate": "2020-05-26T20:00:57Z", "message": "Check the response size before getting data to update metric."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1356, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}