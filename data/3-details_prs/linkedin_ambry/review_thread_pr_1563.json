{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNDQ2NzQ2", "number": 1563, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMzo0ODozN1rOEE7Dyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNDoxOTo0M1rOEE7U0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTk3Mzg3OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2MultiplexedChannelPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMzo0ODozN1rOGi2JQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo1OTozNVrOGjLQQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE5MTg3NA==", "bodyText": "nit: we can just Collections.shuffle(multiplexedChannelRecords, random, then go through the for loop.", "url": "https://github.com/linkedin/ambry/pull/1563#discussion_r439191874", "createdAt": "2020-06-12T03:48:37Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2MultiplexedChannelPool.java", "diffHunk": "@@ -186,15 +188,17 @@ Http2ClientConfig getHttp2ClientConfig() {\n       return promise.setFailure(new IOException(\"Channel pool is closed!\"));\n     }\n \n-    if (parentConnections.size() >= http2ClientConfig.http2MinConnectionPerPort) {\n-      // TODO: if warmup is not 100%, new connections are still required.\n-      // This is a passive load balance depends on compareAndSet in claimStream().\n-      for (MultiplexedChannelRecord multiplexedChannel : parentConnections) {\n-        if (acquireStreamOnInitializedConnection(multiplexedChannel, promise)) {\n-          return promise;\n-        }\n-        http2ClientMetrics.http2StreamSlipAcquireCount.inc();\n+    List<MultiplexedChannelRecord> multiplexedChannelRecords = new ArrayList<>(parentConnections);\n+\n+    // Attempt at most multiplexedChannelRecords.size(). No slip acquire expected.\n+    for (int i = 0; i < multiplexedChannelRecords.size(); i++) {\n+      int randomIndex = random.nextInt(multiplexedChannelRecords.size());\n+      MultiplexedChannelRecord multiplexedChannelRecord = multiplexedChannelRecords.get(randomIndex);\n+      if (acquireStreamOnInitializedConnection(multiplexedChannelRecord, promise)) {\n+        return promise;\n       }\n+      log.warn(\"Stream slip acquire on {}\", inetSocketAddress);\n+      http2ClientMetrics.http2StreamSlipAcquireCount.inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41de580a1ffa4ad0ee439c95cf280ec59e48db64"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNzczMQ==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1563#discussion_r439537731", "createdAt": "2020-06-12T16:59:35Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2MultiplexedChannelPool.java", "diffHunk": "@@ -186,15 +188,17 @@ Http2ClientConfig getHttp2ClientConfig() {\n       return promise.setFailure(new IOException(\"Channel pool is closed!\"));\n     }\n \n-    if (parentConnections.size() >= http2ClientConfig.http2MinConnectionPerPort) {\n-      // TODO: if warmup is not 100%, new connections are still required.\n-      // This is a passive load balance depends on compareAndSet in claimStream().\n-      for (MultiplexedChannelRecord multiplexedChannel : parentConnections) {\n-        if (acquireStreamOnInitializedConnection(multiplexedChannel, promise)) {\n-          return promise;\n-        }\n-        http2ClientMetrics.http2StreamSlipAcquireCount.inc();\n+    List<MultiplexedChannelRecord> multiplexedChannelRecords = new ArrayList<>(parentConnections);\n+\n+    // Attempt at most multiplexedChannelRecords.size(). No slip acquire expected.\n+    for (int i = 0; i < multiplexedChannelRecords.size(); i++) {\n+      int randomIndex = random.nextInt(multiplexedChannelRecords.size());\n+      MultiplexedChannelRecord multiplexedChannelRecord = multiplexedChannelRecords.get(randomIndex);\n+      if (acquireStreamOnInitializedConnection(multiplexedChannelRecord, promise)) {\n+        return promise;\n       }\n+      log.warn(\"Stream slip acquire on {}\", inetSocketAddress);\n+      http2ClientMetrics.http2StreamSlipAcquireCount.inc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE5MTg3NA=="}, "originalCommit": {"oid": "41de580a1ffa4ad0ee439c95cf280ec59e48db64"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjAxNzQ1OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2MultiplexedChannelPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNDoxOTo0M1rOGi2jfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo1OTo1N1rOGjLRBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE5ODU5MQ==", "bodyText": "nit: these two and VerifiableProperties can be removed. (format this file)", "url": "https://github.com/linkedin/ambry/pull/1563#discussion_r439198591", "createdAt": "2020-06-12T04:19:43Z", "author": {"login": "jsjtzyy"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2MultiplexedChannelPool.java", "diffHunk": "@@ -43,8 +43,10 @@\n import java.net.InetSocketAddress;\n import java.nio.channels.ClosedChannelException;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Properties;\n+import java.util.Random;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bab2cb23f593258ccd75c6fb54541ddb94b28b2e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNzkyNQ==", "bodyText": "fixed. (for some reason, my cmd+L can't fix unused package anymore)", "url": "https://github.com/linkedin/ambry/pull/1563#discussion_r439537925", "createdAt": "2020-06-12T16:59:57Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2MultiplexedChannelPool.java", "diffHunk": "@@ -43,8 +43,10 @@\n import java.net.InetSocketAddress;\n import java.nio.channels.ClosedChannelException;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Properties;\n+import java.util.Random;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE5ODU5MQ=="}, "originalCommit": {"oid": "bab2cb23f593258ccd75c6fb54541ddb94b28b2e"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1270, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}