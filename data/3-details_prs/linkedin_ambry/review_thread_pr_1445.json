{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTQzNTky", "number": 1445, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzozNjowOVrODs5FrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToxNjo0MFrODuH0-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mzk5Mjc3OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzozNjowOVrOF-AEjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxMzo1MVrOF_Kjgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NzE5Nw==", "bodyText": "Do we need to keep different inflightCount for diskReplica and cloudReplica separately? If inflightCount already contains request cloudReplica and we compare this number to parallelism of diskReplica might be wrong. Let's say diskReplica's parallelism is 3 and now there are 2 inflight diskReplica and 1 inflight cloudReplica, then hasNext may return false. However, the actual number of inflight diskReplica is less than parallelism of disk replica.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r400557197", "createdAt": "2020-03-30T23:36:09Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -323,12 +352,13 @@ public void onResponse(ReplicaId replicaId, TrackedRequestFinalState trackedRequ\n   private class OpTrackerIterator implements Iterator<ReplicaId> {\n     @Override\n     public boolean hasNext() {\n-      return inflightCount < parallelism && replicaIterator.hasNext();\n+      return inflightCount < getCurrentParallelism() && replicaIterator.hasNext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a695a482cbfe2d653b3050f28d450d280d3a2aad"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczMjYyOA==", "bodyText": "This is an interesting case. There is a question here about whether the cloud and disk parallelism can be summed or not. In your case the effective parallelism could be 4 since you are allowing both disk and cloud requests to reach full parallelism.\nHowever, I feel that although this increases the chance of success for the disk replicas, it is not completely necessary as a single acknowledgement from a cloud replica could satisfy the operation. The reason I decided to shrink the parallelism instead of summing it was to not waste a single cloud request by also sending requests to disk replicas at the same time. I notice that I also made an assumption that the requests are ordered by datacenter, which sometimes isn't true for the backup and down nodes.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401732628", "createdAt": "2020-04-01T16:06:26Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -323,12 +352,13 @@ public void onResponse(ReplicaId replicaId, TrackedRequestFinalState trackedRequ\n   private class OpTrackerIterator implements Iterator<ReplicaId> {\n     @Override\n     public boolean hasNext() {\n-      return inflightCount < parallelism && replicaIterator.hasNext();\n+      return inflightCount < getCurrentParallelism() && replicaIterator.hasNext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NzE5Nw=="}, "originalCommit": {"oid": "a695a482cbfe2d653b3050f28d450d280d3a2aad"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3NzUzOA==", "bodyText": "I feel ok with current logic. Perhaps we can add debug log to help determine if the request being sent is cloudReplica request or disk one.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401777538", "createdAt": "2020-04-01T17:13:51Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -323,12 +352,13 @@ public void onResponse(ReplicaId replicaId, TrackedRequestFinalState trackedRequ\n   private class OpTrackerIterator implements Iterator<ReplicaId> {\n     @Override\n     public boolean hasNext() {\n-      return inflightCount < parallelism && replicaIterator.hasNext();\n+      return inflightCount < getCurrentParallelism() && replicaIterator.hasNext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NzE5Nw=="}, "originalCommit": {"oid": "a695a482cbfe2d653b3050f28d450d280d3a2aad"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDAyNTcwOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo1MjoxOFrOF-AYPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjowOTo0N1rOF_H9Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MjIzNw==", "bodyText": "Sorry, I am not sure if I wrote the comments, but this can be applied to GET as well", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r400562237", "createdAt": "2020-03-30T23:52:18Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -66,27 +69,32 @@\n class SimpleOperationTracker implements OperationTracker {\n   protected final String datacenterName;\n   protected final String originatingDcName;\n-  protected final int successTarget;\n-  protected final int parallelism;\n+  protected final int diskSuccessTarget;\n+  protected final int diskParallelism;\n+  protected final int cloudSuccessTarget;\n+  protected final int cloudParallelism;\n+  protected final boolean cloudReplicasPresent;\n+  // How many NotFound responses from originating dc will terminate the operation.\n+  // It's decided by the success target of each mutation operations, including put, delete, update ttl etc.\n+  protected final int originatingDcNotFoundFailureThreshold;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a695a482cbfe2d653b3050f28d450d280d3a2aad"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczNDk3NA==", "bodyText": "Changed the comment. The success target no longer has a part in this calculation after the dynamic target changes", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401734974", "createdAt": "2020-04-01T16:09:47Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -66,27 +69,32 @@\n class SimpleOperationTracker implements OperationTracker {\n   protected final String datacenterName;\n   protected final String originatingDcName;\n-  protected final int successTarget;\n-  protected final int parallelism;\n+  protected final int diskSuccessTarget;\n+  protected final int diskParallelism;\n+  protected final int cloudSuccessTarget;\n+  protected final int cloudParallelism;\n+  protected final boolean cloudReplicasPresent;\n+  // How many NotFound responses from originating dc will terminate the operation.\n+  // It's decided by the success target of each mutation operations, including put, delete, update ttl etc.\n+  protected final int originatingDcNotFoundFailureThreshold;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MjIzNw=="}, "originalCommit": {"oid": "a695a482cbfe2d653b3050f28d450d280d3a2aad"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDM5NjYwOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/AdaptiveOperationTracker.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMzoxODo0MlrOF-D2Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo0MjowMFrOF_e-AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYxOTA1NA==", "bodyText": "Curious why this is max and not sum.  Is it not possible to have inflight disk and cloud requests at the same time?\nIf the logic is correct, then suggest breaking this into two checks so the error message can specify which one is out of bounds.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r400619054", "createdAt": "2020-03-31T03:18:42Z", "author": {"login": "lightningrob"}, "path": "ambry-router/src/main/java/com.github.ambry.router/AdaptiveOperationTracker.java", "diffHunk": "@@ -83,7 +81,7 @@\n       localDcResourceToHistogram = getResourceToLatencyMap(routerOperation, true);\n       crossDcResourceToHistogram = getResourceToLatencyMap(routerOperation, false);\n     }\n-    if (parallelism > routerConfig.routerOperationTrackerMaxInflightRequests) {\n+    if (Math.max(diskParallelism, cloudParallelism) > routerConfig.routerOperationTrackerMaxInflightRequests) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2MTExOA==", "bodyText": "I guess the reason we introduced routerOperationTrackerMaxInflightRequests is to throttle total # of request in regular data centers. So, although current number of disk requests equals MaxInflightRequests, router is still able to route request to cloud which is not restricted by MaxInflightRequests of regular dc(s).\nI agree with one point that we'd better break it into different checks and probably use separate MaxInflightRequests for cloud dc and regular dc.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401961118", "createdAt": "2020-04-01T23:06:36Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/AdaptiveOperationTracker.java", "diffHunk": "@@ -83,7 +81,7 @@\n       localDcResourceToHistogram = getResourceToLatencyMap(routerOperation, true);\n       crossDcResourceToHistogram = getResourceToLatencyMap(routerOperation, false);\n     }\n-    if (parallelism > routerConfig.routerOperationTrackerMaxInflightRequests) {\n+    if (Math.max(diskParallelism, cloudParallelism) > routerConfig.routerOperationTrackerMaxInflightRequests) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYxOTA1NA=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MTc0NA==", "bodyText": "Yep, to expand on this, the adaptive operation tracker has the ability to go beyond the parallelism setting if requests are past due. This limit makes sure that it does not snowball and keep sending out parallel requests.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401971744", "createdAt": "2020-04-01T23:39:29Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/AdaptiveOperationTracker.java", "diffHunk": "@@ -83,7 +81,7 @@\n       localDcResourceToHistogram = getResourceToLatencyMap(routerOperation, true);\n       crossDcResourceToHistogram = getResourceToLatencyMap(routerOperation, false);\n     }\n-    if (parallelism > routerConfig.routerOperationTrackerMaxInflightRequests) {\n+    if (Math.max(diskParallelism, cloudParallelism) > routerConfig.routerOperationTrackerMaxInflightRequests) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYxOTA1NA=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExMjAwMA==", "bodyText": "I added a second if for the constructor validations but kept the logic as is. Since max in flight requests is used when the number of requests made needs to go beyond the initial parallelism for performance reasons but isn't related to the quorum, I kept the config as is so that all in flight requests count towards the same limit.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r402112000", "createdAt": "2020-04-02T07:42:00Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/AdaptiveOperationTracker.java", "diffHunk": "@@ -83,7 +81,7 @@\n       localDcResourceToHistogram = getResourceToLatencyMap(routerOperation, true);\n       crossDcResourceToHistogram = getResourceToLatencyMap(routerOperation, false);\n     }\n-    if (parallelism > routerConfig.routerOperationTrackerMaxInflightRequests) {\n+    if (Math.max(diskParallelism, cloudParallelism) > routerConfig.routerOperationTrackerMaxInflightRequests) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYxOTA1NA=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDQzOTYwOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMzo0NDoyOFrOF-EPfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMzo0NDoyOFrOF-EPfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyNTUzMw==", "bodyText": "Minor: can collapse to single line.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r400625533", "createdAt": "2020-03-31T03:44:28Z", "author": {"login": "lightningrob"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -357,20 +388,40 @@ public ReplicaId next() {\n \n   private boolean hasFailed() {\n     boolean hasFailed;\n-    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget) {\n+    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget\n+        && inFlightReplicaType == ReplicaType.DISK_BACKED) {\n       hasFailed = totalReplicaCount - failedCount < Math.max(totalReplicaCount - 1,\n           routerConfig.routerPutSuccessTarget + disabledCount);\n     } else {\n-      hasFailed = (totalReplicaCount - failedCount) < successTarget || hasFailedOnNotFound();\n+      // if one type of replica has a lower success target, we can only call it a complete failure when there are fewer\n+      // than that target left to check. This could be optimized by saving the replica type of the remaining replicas\n+      // to try and choosing the success target based on their type.\n+      int minSuccessTarget = cloudReplicasPresent ? Math.min(diskSuccessTarget, cloudSuccessTarget) : diskSuccessTarget;\n+      hasFailed = (totalReplicaCount - failedCount) < minSuccessTarget || hasFailedOnNotFound();\n     }\n     return hasFailed;\n   }\n \n   /**\n-   * @return the success target number of this operation tracker.\n+   * @param replicaType the {@link ReplicaType}\n+   * @return the success target number of this operation tracker for the provided replica type.\n+   */\n+  int getSuccessTarget(ReplicaType replicaType) {\n+    if (replicaType == ReplicaType.CLOUD_BACKED) {\n+      return cloudSuccessTarget;\n+    } else {\n+      return diskSuccessTarget;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 282}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDQ4MjMyOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNDoxMDo0NFrOF-Eo0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzozODo1MlrOF_e34g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzMjAxNg==", "bodyText": "I'm having trouble following this logic.  Assuming there is a cloud replica present, totalReplicaCount = 13, minSuccessTarget will be 1, in which case failedCount has to equal totalReplicaCount to declare failure.  But if the cloud replica has failed, we will still require diskSuccessTarget successes among disk replicas - assume that is 2.  Then the most failures we can tolerate is 11 (10 disk + 1 cloud).  With failedCount = 12, hasFailed = (13-12 < 1) will be false but should be true, no?", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r400632016", "createdAt": "2020-03-31T04:10:44Z", "author": {"login": "lightningrob"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -357,20 +388,40 @@ public ReplicaId next() {\n \n   private boolean hasFailed() {\n     boolean hasFailed;\n-    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget) {\n+    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget\n+        && inFlightReplicaType == ReplicaType.DISK_BACKED) {\n       hasFailed = totalReplicaCount - failedCount < Math.max(totalReplicaCount - 1,\n           routerConfig.routerPutSuccessTarget + disabledCount);\n     } else {\n-      hasFailed = (totalReplicaCount - failedCount) < successTarget || hasFailedOnNotFound();\n+      // if one type of replica has a lower success target, we can only call it a complete failure when there are fewer\n+      // than that target left to check. This could be optimized by saving the replica type of the remaining replicas\n+      // to try and choosing the success target based on their type.\n+      int minSuccessTarget = cloudReplicasPresent ? Math.min(diskSuccessTarget, cloudSuccessTarget) : diskSuccessTarget;\n+      hasFailed = (totalReplicaCount - failedCount) < minSuccessTarget || hasFailedOnNotFound();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NzM4OQ==", "bodyText": "I guess this is a little rough to use the min. The reason I did that was to account for the case where the 13th replica was a cloud replica that could still satisfy the request with a success target of 1. However, this has the downside of wasting a request if that last replica was a disk replica.\nTo address this, I could do what the comment suggests and figure out the replica types of the remaining replicas. To avoid iterating through the entire list every time hasFailed is called, I could record the index of the last cloud replica and the last disk replica in the pool. If we are past the last replica of a certain type, switch to the other success target. Or, in this method, compare against the max success target and then if that returns true, make a second comparison by inspecting the remaining replicas in the pool (this should be a relatively smaller # of items to iterate through assuming success targets are small).\nDo either of these approaches sound better?", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401747389", "createdAt": "2020-04-01T16:28:08Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -357,20 +388,40 @@ public ReplicaId next() {\n \n   private boolean hasFailed() {\n     boolean hasFailed;\n-    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget) {\n+    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget\n+        && inFlightReplicaType == ReplicaType.DISK_BACKED) {\n       hasFailed = totalReplicaCount - failedCount < Math.max(totalReplicaCount - 1,\n           routerConfig.routerPutSuccessTarget + disabledCount);\n     } else {\n-      hasFailed = (totalReplicaCount - failedCount) < successTarget || hasFailedOnNotFound();\n+      // if one type of replica has a lower success target, we can only call it a complete failure when there are fewer\n+      // than that target left to check. This could be optimized by saving the replica type of the remaining replicas\n+      // to try and choosing the success target based on their type.\n+      int minSuccessTarget = cloudReplicasPresent ? Math.min(diskSuccessTarget, cloudSuccessTarget) : diskSuccessTarget;\n+      hasFailed = (totalReplicaCount - failedCount) < minSuccessTarget || hasFailedOnNotFound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzMjAxNg=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5MjQyNg==", "bodyText": "Sounds like 1st approach is more efficient.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401792426", "createdAt": "2020-04-01T17:37:59Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -357,20 +388,40 @@ public ReplicaId next() {\n \n   private boolean hasFailed() {\n     boolean hasFailed;\n-    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget) {\n+    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget\n+        && inFlightReplicaType == ReplicaType.DISK_BACKED) {\n       hasFailed = totalReplicaCount - failedCount < Math.max(totalReplicaCount - 1,\n           routerConfig.routerPutSuccessTarget + disabledCount);\n     } else {\n-      hasFailed = (totalReplicaCount - failedCount) < successTarget || hasFailedOnNotFound();\n+      // if one type of replica has a lower success target, we can only call it a complete failure when there are fewer\n+      // than that target left to check. This could be optimized by saving the replica type of the remaining replicas\n+      // to try and choosing the success target based on their type.\n+      int minSuccessTarget = cloudReplicasPresent ? Math.min(diskSuccessTarget, cloudSuccessTarget) : diskSuccessTarget;\n+      hasFailed = (totalReplicaCount - failedCount) < minSuccessTarget || hasFailedOnNotFound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzMjAxNg=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NjkwNw==", "bodyText": "In addition, let's also account for PUT operation when this is an Azure frontend. I feel like we need an extra else if for this case because the first if only applies to DiskReplica in regular dc(s).", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401796907", "createdAt": "2020-04-01T17:45:41Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -357,20 +388,40 @@ public ReplicaId next() {\n \n   private boolean hasFailed() {\n     boolean hasFailed;\n-    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget) {\n+    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget\n+        && inFlightReplicaType == ReplicaType.DISK_BACKED) {\n       hasFailed = totalReplicaCount - failedCount < Math.max(totalReplicaCount - 1,\n           routerConfig.routerPutSuccessTarget + disabledCount);\n     } else {\n-      hasFailed = (totalReplicaCount - failedCount) < successTarget || hasFailedOnNotFound();\n+      // if one type of replica has a lower success target, we can only call it a complete failure when there are fewer\n+      // than that target left to check. This could be optimized by saving the replica type of the remaining replicas\n+      // to try and choosing the success target based on their type.\n+      int minSuccessTarget = cloudReplicasPresent ? Math.min(diskSuccessTarget, cloudSuccessTarget) : diskSuccessTarget;\n+      hasFailed = (totalReplicaCount - failedCount) < minSuccessTarget || hasFailedOnNotFound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzMjAxNg=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NTcxMw==", "bodyText": "Hi @jsjtzyy, for the put operation in azure, what condition were you thinking of where the logic will be different from the fallback policy? I feel like there is no concept of disabled for cloud replicas.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401975713", "createdAt": "2020-04-01T23:52:38Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -357,20 +388,40 @@ public ReplicaId next() {\n \n   private boolean hasFailed() {\n     boolean hasFailed;\n-    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget) {\n+    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget\n+        && inFlightReplicaType == ReplicaType.DISK_BACKED) {\n       hasFailed = totalReplicaCount - failedCount < Math.max(totalReplicaCount - 1,\n           routerConfig.routerPutSuccessTarget + disabledCount);\n     } else {\n-      hasFailed = (totalReplicaCount - failedCount) < successTarget || hasFailedOnNotFound();\n+      // if one type of replica has a lower success target, we can only call it a complete failure when there are fewer\n+      // than that target left to check. This could be optimized by saving the replica type of the remaining replicas\n+      // to try and choosing the success target based on their type.\n+      int minSuccessTarget = cloudReplicasPresent ? Math.min(diskSuccessTarget, cloudSuccessTarget) : diskSuccessTarget;\n+      hasFailed = (totalReplicaCount - failedCount) < minSuccessTarget || hasFailedOnNotFound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzMjAxNg=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExMDQzNA==", "bodyText": "For this condition I added a check in hasFailedOnNotFound to always return false on put operations. The condition would have returned false anyways given how we instantiate the operationtracker in PutOperation, but this makes it clearer.\nFor the failure threshold I changed the logic around a bit by counting how many replicas of each type are left. Using the success count for each type and this number, we can tell if a success is still possible or not for each type without requiring the hacky min logic", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r402110434", "createdAt": "2020-04-02T07:38:52Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -357,20 +388,40 @@ public ReplicaId next() {\n \n   private boolean hasFailed() {\n     boolean hasFailed;\n-    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget) {\n+    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget\n+        && inFlightReplicaType == ReplicaType.DISK_BACKED) {\n       hasFailed = totalReplicaCount - failedCount < Math.max(totalReplicaCount - 1,\n           routerConfig.routerPutSuccessTarget + disabledCount);\n     } else {\n-      hasFailed = (totalReplicaCount - failedCount) < successTarget || hasFailedOnNotFound();\n+      // if one type of replica has a lower success target, we can only call it a complete failure when there are fewer\n+      // than that target left to check. This could be optimized by saving the replica type of the remaining replicas\n+      // to try and choosing the success target based on their type.\n+      int minSuccessTarget = cloudReplicasPresent ? Math.min(diskSuccessTarget, cloudSuccessTarget) : diskSuccessTarget;\n+      hasFailed = (totalReplicaCount - failedCount) < minSuccessTarget || hasFailedOnNotFound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzMjAxNg=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDQ4ODYzOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNDoxNDo0MlrOF-EsYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNDoxNDo0MlrOF-EsYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzMjkzMQ==", "bodyText": "This logic looks correct.  I'm not convinced about the hasFailed logic, seems like that needs to use a similar OR condition.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r400632931", "createdAt": "2020-03-31T04:14:42Z", "author": {"login": "lightningrob"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -261,11 +284,13 @@\n   @Override\n   public boolean hasSucceeded() {\n     boolean hasSucceeded;\n-    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget) {\n-      hasSucceeded =\n-          succeededCount >= Math.max(totalReplicaCount - disabledCount - 1, routerConfig.routerPutSuccessTarget);\n+    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget\n+        && inFlightReplicaType == ReplicaType.DISK_BACKED) {\n+      // this logic only applies to disk replicas where the quorum can change during replica movement\n+      int dynamicSuccessTarget = Math.max(totalReplicaCount - disabledCount - 1, routerConfig.routerPutSuccessTarget);\n+      hasSucceeded = diskSucceededCount >= dynamicSuccessTarget;\n     } else {\n-      hasSucceeded = succeededCount >= successTarget;\n+      hasSucceeded = diskSucceededCount >= diskSuccessTarget || cloudSucceededCount >= cloudSuccessTarget;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDUwMTg0OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/test/java/com.github.ambry.router/OperationTrackerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNDoyMjo1OVrOF-Ez2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyODo1MVrOF_Ivuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzNDg0Mw==", "bodyText": "Since both of these test cases succeed, shouldn't we also have one that fails?", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r400634843", "createdAt": "2020-03-31T04:22:59Z", "author": {"login": "lightningrob"}, "path": "ambry-router/src/test/java/com.github.ambry.router/OperationTrackerTest.java", "diffHunk": "@@ -923,11 +925,59 @@ public void operationClassTest() {\n       // ensure the success target matches the number specified for each type of operaiton\n       if (operationTracker != null) {\n         assertEquals(\"The suggest target doesn't match\", (long) entry.getValue(),\n-            (operationTracker).getSuccessTarget());\n+            operationTracker.getSuccessTarget(ReplicaType.DISK_BACKED));\n       }\n     }\n   }\n \n+  /**\n+   * Test cases with cloud replicas in the local datacenter.\n+   */\n+  @Test\n+  public void cloudReplicaInLocalDcTest() {\n+    // test success in cloud dc\n+    initializeWithCloudDcs(true);\n+    originatingDcName = getDatacenters(ReplicaType.DISK_BACKED).iterator().next();\n+    OperationTracker ot =\n+        getOperationTracker(true, 2, 3, false, Integer.MAX_VALUE, RouterOperation.GetBlobOperation, false);\n+    assertFalse(\"Operation should not have been done.\", ot.isDone());\n+    // parallelism of 1 for cloud replicas, so only one request should be sent\n+    sendRequests(ot, 1, false);\n+    assertFalse(\"Operation should not have been done.\", ot.isDone());\n+    ot.onResponse(inflightReplicas.poll(), TrackedRequestFinalState.SUCCESS);\n+    // success target of 1 with cloud replicas.\n+    assertTrue(\"Operation should have succeeded\", ot.hasSucceeded());\n+    assertTrue(\"Operation should be done\", ot.isDone());\n+  }\n+\n+  /**\n+   * Test cases with cloud replicas in the remote datacenter.\n+   */\n+  @Test\n+  public void cloudReplicaInRemoteDcTest() {\n+    // test failure in disk dc with fallback to cloud DC\n+    initializeWithCloudDcs(false);\n+    originatingDcName = getDatacenters(ReplicaType.CLOUD_BACKED).iterator().next();\n+    OperationTracker ot =\n+        getOperationTracker(true, 2, 3, false, Integer.MAX_VALUE, RouterOperation.GetBlobOperation, false);\n+    assertFalse(\"Operation should not have been done.\", ot.isDone());\n+    // parallelism of 3 for disk replicas (local dc).\n+    sendRequests(ot, 3, false);\n+    assertFalse(\"Operation should not have been done.\", ot.isDone());\n+    ot.onResponse(inflightReplicas.poll(), TrackedRequestFinalState.FAILURE);\n+    // one response frees up a spot to send a cloud request\n+    sendRequests(ot, 1, false);\n+    for (int i = 0; i < 2; i++) {\n+      ot.onResponse(inflightReplicas.poll(), TrackedRequestFinalState.FAILURE);\n+      // parallelism should have changed to 1 after cloud request was sent\n+      sendRequests(ot, 0, false);\n+    }\n+    assertFalse(\"Operation should not have been done.\", ot.isDone());\n+    ot.onResponse(inflightReplicas.poll(), TrackedRequestFinalState.SUCCESS);\n+    assertTrue(\"Operation should have succeeded\", ot.hasSucceeded());\n+    assertTrue(\"Operation should be done\", ot.isDone());\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0Nzg5OQ==", "bodyText": "Added some more test cases", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401747899", "createdAt": "2020-04-01T16:28:51Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/test/java/com.github.ambry.router/OperationTrackerTest.java", "diffHunk": "@@ -923,11 +925,59 @@ public void operationClassTest() {\n       // ensure the success target matches the number specified for each type of operaiton\n       if (operationTracker != null) {\n         assertEquals(\"The suggest target doesn't match\", (long) entry.getValue(),\n-            (operationTracker).getSuccessTarget());\n+            operationTracker.getSuccessTarget(ReplicaType.DISK_BACKED));\n       }\n     }\n   }\n \n+  /**\n+   * Test cases with cloud replicas in the local datacenter.\n+   */\n+  @Test\n+  public void cloudReplicaInLocalDcTest() {\n+    // test success in cloud dc\n+    initializeWithCloudDcs(true);\n+    originatingDcName = getDatacenters(ReplicaType.DISK_BACKED).iterator().next();\n+    OperationTracker ot =\n+        getOperationTracker(true, 2, 3, false, Integer.MAX_VALUE, RouterOperation.GetBlobOperation, false);\n+    assertFalse(\"Operation should not have been done.\", ot.isDone());\n+    // parallelism of 1 for cloud replicas, so only one request should be sent\n+    sendRequests(ot, 1, false);\n+    assertFalse(\"Operation should not have been done.\", ot.isDone());\n+    ot.onResponse(inflightReplicas.poll(), TrackedRequestFinalState.SUCCESS);\n+    // success target of 1 with cloud replicas.\n+    assertTrue(\"Operation should have succeeded\", ot.hasSucceeded());\n+    assertTrue(\"Operation should be done\", ot.isDone());\n+  }\n+\n+  /**\n+   * Test cases with cloud replicas in the remote datacenter.\n+   */\n+  @Test\n+  public void cloudReplicaInRemoteDcTest() {\n+    // test failure in disk dc with fallback to cloud DC\n+    initializeWithCloudDcs(false);\n+    originatingDcName = getDatacenters(ReplicaType.CLOUD_BACKED).iterator().next();\n+    OperationTracker ot =\n+        getOperationTracker(true, 2, 3, false, Integer.MAX_VALUE, RouterOperation.GetBlobOperation, false);\n+    assertFalse(\"Operation should not have been done.\", ot.isDone());\n+    // parallelism of 3 for disk replicas (local dc).\n+    sendRequests(ot, 3, false);\n+    assertFalse(\"Operation should not have been done.\", ot.isDone());\n+    ot.onResponse(inflightReplicas.poll(), TrackedRequestFinalState.FAILURE);\n+    // one response frees up a spot to send a cloud request\n+    sendRequests(ot, 1, false);\n+    for (int i = 0; i < 2; i++) {\n+      ot.onResponse(inflightReplicas.poll(), TrackedRequestFinalState.FAILURE);\n+      // parallelism should have changed to 1 after cloud request was sent\n+      sendRequests(ot, 0, false);\n+    }\n+    assertFalse(\"Operation should not have been done.\", ot.isDone());\n+    ot.onResponse(inflightReplicas.poll(), TrackedRequestFinalState.SUCCESS);\n+    assertTrue(\"Operation should have succeeded\", ot.hasSucceeded());\n+    assertTrue(\"Operation should be done\", ot.isDone());\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzNDg0Mw=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDUwODIwOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/test/java/com.github.ambry.router/OperationTrackerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNDoyNjo1NlrOF-E3fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjo1Njo1N1rOF-rI3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzNTc3Mg==", "bodyText": "Should compare to replicaType, no?", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r400635772", "createdAt": "2020-03-31T04:26:56Z", "author": {"login": "lightningrob"}, "path": "ambry-router/src/test/java/com.github.ambry.router/OperationTrackerTest.java", "diffHunk": "@@ -944,19 +994,64 @@ private void initialize() {\n     mockClusterMap = new MockClusterMap(false, datanodes, 1, Collections.singletonList(mockPartition), localDcName);\n   }\n \n+  /**\n+   * Initialize 4 DCs, 2 disk datacenters, 2 cloud datacenters. Each disk datacenter has 3 replicas, and each cloud\n+   * datacenter has 1 replica.\n+   * @param makeCloudDcLocal {@code true} to make the local datacenter one of the cloud datacenters.\n+   */\n+  private void initializeWithCloudDcs(boolean makeCloudDcLocal) {\n+    List<Port> portList = Collections.singletonList(new Port(PORT, PortType.PLAINTEXT));\n+    List<String> mountPaths = Collections.singletonList(\"mockMountPath\");\n+    mockPartition = new MockPartitionId();\n+    List<MockDataNodeId> diskNodes = Arrays.asList(new MockDataNodeId(portList, mountPaths, \"dc-0\"),\n+        new MockDataNodeId(portList, mountPaths, \"dc-1\"));\n+    populateReplicaList(3 * diskNodes.size(), ReplicaState.STANDBY, diskNodes);\n+    List<MockDataNodeId> cloudNodes = Arrays.asList(new MockDataNodeId(portList, Collections.emptyList(), \"cloud-dc-0\"),\n+        new MockDataNodeId(portList, Collections.emptyList(), \"cloud-dc-1\"));\n+    // only one cloud replica per cloud dc.\n+    populateReplicaList(cloudNodes.size(), ReplicaState.STANDBY, cloudNodes);\n+    datanodes = new ArrayList<>();\n+    datanodes.addAll(diskNodes);\n+    datanodes.addAll(cloudNodes);\n+    localDcName = (makeCloudDcLocal ? cloudNodes : diskNodes).get(0).getDatacenterName();\n+    mockClusterMap = new MockClusterMap(false, datanodes, 1, Collections.singletonList(mockPartition), localDcName);\n+  }\n+\n   /**\n    * Populate replicas for a partition.\n    * @param replicaCount The number of replicas to populate.\n    * @param replicaState The {@link ReplicaState} associated with these replicas.\n    */\n   private void populateReplicaList(int replicaCount, ReplicaState replicaState) {\n+    populateReplicaList(replicaCount, replicaState, datanodes);\n+  }\n+\n+  /**\n+   * Populate replicas for a partition.\n+   * @param replicaCount The number of replicas to populate.\n+   * @param replicaState The {@link ReplicaState} associated with these replicas.\n+   * @param datanodes the datanodes to populate with replicas\n+   */\n+  private void populateReplicaList(int replicaCount, ReplicaState replicaState, List<MockDataNodeId> datanodes) {\n     for (int i = 0; i < replicaCount; i++) {\n       ReplicaId replicaId = new MockReplicaId(PORT, mockPartition, datanodes.get(i % datanodes.size()), 0);\n       mockPartition.replicaIds.add(replicaId);\n       mockPartition.replicaAndState.put(replicaId, replicaState);\n     }\n   }\n \n+  /**\n+   * @param replicaType the type of replica to filter by.\n+   * @return the datacenter names with replicas of type {@code replicaType}.\n+   */\n+  private Set<String> getDatacenters(ReplicaType replicaType) {\n+    return mockPartition.getReplicaIds()\n+        .stream()\n+        .filter(r -> r.getReplicaType() == ReplicaType.CLOUD_BACKED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MjgxNQ==", "bodyText": "Yes, will fix this in my commit to add more tests and address comments.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401262815", "createdAt": "2020-03-31T22:56:57Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/test/java/com.github.ambry.router/OperationTrackerTest.java", "diffHunk": "@@ -944,19 +994,64 @@ private void initialize() {\n     mockClusterMap = new MockClusterMap(false, datanodes, 1, Collections.singletonList(mockPartition), localDcName);\n   }\n \n+  /**\n+   * Initialize 4 DCs, 2 disk datacenters, 2 cloud datacenters. Each disk datacenter has 3 replicas, and each cloud\n+   * datacenter has 1 replica.\n+   * @param makeCloudDcLocal {@code true} to make the local datacenter one of the cloud datacenters.\n+   */\n+  private void initializeWithCloudDcs(boolean makeCloudDcLocal) {\n+    List<Port> portList = Collections.singletonList(new Port(PORT, PortType.PLAINTEXT));\n+    List<String> mountPaths = Collections.singletonList(\"mockMountPath\");\n+    mockPartition = new MockPartitionId();\n+    List<MockDataNodeId> diskNodes = Arrays.asList(new MockDataNodeId(portList, mountPaths, \"dc-0\"),\n+        new MockDataNodeId(portList, mountPaths, \"dc-1\"));\n+    populateReplicaList(3 * diskNodes.size(), ReplicaState.STANDBY, diskNodes);\n+    List<MockDataNodeId> cloudNodes = Arrays.asList(new MockDataNodeId(portList, Collections.emptyList(), \"cloud-dc-0\"),\n+        new MockDataNodeId(portList, Collections.emptyList(), \"cloud-dc-1\"));\n+    // only one cloud replica per cloud dc.\n+    populateReplicaList(cloudNodes.size(), ReplicaState.STANDBY, cloudNodes);\n+    datanodes = new ArrayList<>();\n+    datanodes.addAll(diskNodes);\n+    datanodes.addAll(cloudNodes);\n+    localDcName = (makeCloudDcLocal ? cloudNodes : diskNodes).get(0).getDatacenterName();\n+    mockClusterMap = new MockClusterMap(false, datanodes, 1, Collections.singletonList(mockPartition), localDcName);\n+  }\n+\n   /**\n    * Populate replicas for a partition.\n    * @param replicaCount The number of replicas to populate.\n    * @param replicaState The {@link ReplicaState} associated with these replicas.\n    */\n   private void populateReplicaList(int replicaCount, ReplicaState replicaState) {\n+    populateReplicaList(replicaCount, replicaState, datanodes);\n+  }\n+\n+  /**\n+   * Populate replicas for a partition.\n+   * @param replicaCount The number of replicas to populate.\n+   * @param replicaState The {@link ReplicaState} associated with these replicas.\n+   * @param datanodes the datanodes to populate with replicas\n+   */\n+  private void populateReplicaList(int replicaCount, ReplicaState replicaState, List<MockDataNodeId> datanodes) {\n     for (int i = 0; i < replicaCount; i++) {\n       ReplicaId replicaId = new MockReplicaId(PORT, mockPartition, datanodes.get(i % datanodes.size()), 0);\n       mockPartition.replicaIds.add(replicaId);\n       mockPartition.replicaAndState.put(replicaId, replicaState);\n     }\n   }\n \n+  /**\n+   * @param replicaType the type of replica to filter by.\n+   * @return the datacenter names with replicas of type {@code replicaType}.\n+   */\n+  private Set<String> getDatacenters(ReplicaType replicaType) {\n+    return mockPartition.getReplicaIds()\n+        .stream()\n+        .filter(r -> r.getReplicaType() == ReplicaType.CLOUD_BACKED)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzNTc3Mg=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA3NDY5OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixClusterManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo0MzoxNlrOF-nevw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowODozOVrOF_OueA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwMjg3OQ==", "bodyText": "To make it compatible, let's add similar check in StaticClusterManager.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401202879", "createdAt": "2020-03-31T20:43:16Z", "author": {"login": "jsjtzyy"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixClusterManager.java", "diffHunk": "@@ -316,10 +316,14 @@ public void onReplicaEvent(ReplicaId replicaId, ReplicaEventType event) {\n         replica.getDataNodeId().onNodeTimeout();\n         break;\n       case Disk_Error:\n-        replica.getDiskId().onDiskError();\n+        if (replica.getReplicaType() == ReplicaType.DISK_BACKED) {\n+          replica.getDiskId().onDiskError();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0NTg4MA==", "bodyText": "Right now, I only implemented CloudServiceReplicas for HelixClusterManager, but I will add this in in case we have to add this later on.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401845880", "createdAt": "2020-04-01T19:08:39Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixClusterManager.java", "diffHunk": "@@ -316,10 +316,14 @@ public void onReplicaEvent(ReplicaId replicaId, ReplicaEventType event) {\n         replica.getDataNodeId().onNodeTimeout();\n         break;\n       case Disk_Error:\n-        replica.getDiskId().onDiskError();\n+        if (replica.getReplicaType() == ReplicaType.DISK_BACKED) {\n+          replica.getDiskId().onDiskError();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwMjg3OQ=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA5NTc0OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/test/java/com.github.ambry.replication/CloudToStoreReplicationManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo0OToyN1rOF-nrvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo0OToyN1rOF-nrvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwNjIwNA==", "bodyText": "nit: can import ClusterMapSnapshotConstants in a static way.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401206204", "createdAt": "2020-03-31T20:49:27Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/test/java/com.github.ambry.replication/CloudToStoreReplicationManagerTest.java", "diffHunk": "@@ -62,7 +63,7 @@\n public class CloudToStoreReplicationManagerTest {\n   private static final String NEW_PARTITION_NAME = \"12\";\n   private static final String CLOUD_DC_NAME = \"CloudDc\";\n-  private static final String VCR_MOUNT_PATH = \"/vcr/1\";\n+  private static final String VCR_MOUNT_PATH = ClusterMapSnapshotConstants.CLOUD_REPLICA_MOUNT + \"/1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODExMzI1OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo1NDozMlrOF-n24g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo1NDozMlrOF-n24g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwOTA1OA==", "bodyText": "nit: rename these two variables to isLocalDcReplica, isOriginatingDcReplica", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401209058", "createdAt": "2020-03-31T20:54:32Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -191,19 +202,21 @@\n     for (ReplicaId replicaId : replicas) {\n       examinedReplicas.add(replicaId);\n       String replicaDcName = replicaId.getDataNodeId().getDatacenterName();\n-      if (replicaDcName.equals(originatingDcName)) {\n+      boolean localDcReplica = replicaDcName.equals(datacenterName);\n+      boolean originatingDcReplica = replicaDcName.equals(originatingDcName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODEzMTI3OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTowMDowMFrOF-oCpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTowMDowMFrOF-oCpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxMjA2OQ==", "bodyText": "I think this check also applies to cloudParallelism.\nAlso, could you add additional info in the exception message to record operation type? (so far, only PUT operation has dynamic parallelism but it's still good to add type into error message)", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401212069", "createdAt": "2020-03-31T21:00:00Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -143,32 +154,32 @@\n       case PutOperation:\n         eligibleReplicas =\n             getEligibleReplicas(partitionId, datacenterName, EnumSet.of(ReplicaState.STANDBY, ReplicaState.LEADER));\n-        successTarget = routerConfig.routerGetEligibleReplicasByStateEnabled ? Math.max(eligibleReplicas.size() - 1,\n+        diskSuccessTarget = routerConfig.routerGetEligibleReplicasByStateEnabled ? Math.max(eligibleReplicas.size() - 1,\n             routerConfig.routerPutSuccessTarget) : routerConfig.routerPutSuccessTarget;\n-        parallelism = routerConfig.routerGetEligibleReplicasByStateEnabled ? eligibleReplicas.size()\n+        diskParallelism = routerConfig.routerGetEligibleReplicasByStateEnabled ? eligibleReplicas.size()\n             : routerConfig.routerPutRequestParallelism;\n+        crossColoEnabled = false;\n         break;\n       case DeleteOperation:\n-        successTarget = routerConfig.routerDeleteSuccessTarget;\n-        parallelism = routerConfig.routerDeleteRequestParallelism;\n+        diskSuccessTarget = routerConfig.routerDeleteSuccessTarget;\n+        diskParallelism = routerConfig.routerDeleteRequestParallelism;\n         crossColoEnabled = true;\n         eligibleReplicas = getEligibleReplicas(partitionId, null,\n             EnumSet.of(ReplicaState.BOOTSTRAP, ReplicaState.STANDBY, ReplicaState.LEADER));\n         break;\n       case TtlUpdateOperation:\n-        successTarget = routerConfig.routerTtlUpdateSuccessTarget;\n-        parallelism = routerConfig.routerTtlUpdateRequestParallelism;\n+        diskSuccessTarget = routerConfig.routerTtlUpdateSuccessTarget;\n+        diskParallelism = routerConfig.routerTtlUpdateRequestParallelism;\n         crossColoEnabled = true;\n         eligibleReplicas = getEligibleReplicas(partitionId, null,\n             EnumSet.of(ReplicaState.BOOTSTRAP, ReplicaState.STANDBY, ReplicaState.LEADER));\n         break;\n       default:\n         throw new IllegalArgumentException(\"Unsupported operation: \" + routerOperation);\n     }\n-    if (parallelism < 1) {\n-      throw new IllegalArgumentException(\"Parallelism has to be > 0. Configured to be \" + parallelism);\n+    if (diskParallelism < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODE4NjY0OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToxODowMlrOF-omDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1NDo1NlrOF_JyeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMTEzMw==", "bodyText": "If I remember correctly, we are supposed to try replicas in local dc first, then replica in linkedin dcs, and then cloud replica. So this logic has changed?", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401221133", "createdAt": "2020-03-31T21:18:02Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -227,22 +240,32 @@\n         replicaPool.add(downReplicas.pollFirst());\n       }\n     }\n+    cloudReplicasPresent =\n+        replicaPool.stream().map(ReplicaId::getReplicaType).anyMatch(Predicate.isEqual(ReplicaType.CLOUD_BACKED));\n     totalReplicaCount = replicaPool.size();\n-    if (totalReplicaCount < successTarget) {\n-      // {@link MockPartitionId#getReplicaIds} is returning a shared reference which may cause race condition.\n-      // Please report the test failure if you run into this exception.\n-      throw new IllegalArgumentException(\n-          generateErrorMessage(partitionId, examinedReplicas, replicaPool, backupReplicasToCheck, downReplicasToCheck));\n+\n+    // MockPartitionId.getReplicaIds() is returning a shared reference which may cause race condition.\n+    // Please report the test failure if you run into this exception.\n+    Supplier<IllegalArgumentException> notEnoughReplicasException = () -> new IllegalArgumentException(\n+        generateErrorMessage(partitionId, examinedReplicas, replicaPool, backupReplicasToCheck, downReplicasToCheck));\n+    // initialize this to the replica type of the first request to send so that parallelism is set correctly for the\n+    // first request\n+    inFlightReplicaType =\n+        replicaPool.stream().findFirst().map(ReplicaId::getReplicaType).orElseThrow(notEnoughReplicasException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1NzgwNw==", "bodyText": "This logic has not changed. The order of the items in replica pool is still the same. This line just gets the replica type of the first item in the linked list, which should be a replica in the local dc.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401257807", "createdAt": "2020-03-31T22:42:36Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -227,22 +240,32 @@\n         replicaPool.add(downReplicas.pollFirst());\n       }\n     }\n+    cloudReplicasPresent =\n+        replicaPool.stream().map(ReplicaId::getReplicaType).anyMatch(Predicate.isEqual(ReplicaType.CLOUD_BACKED));\n     totalReplicaCount = replicaPool.size();\n-    if (totalReplicaCount < successTarget) {\n-      // {@link MockPartitionId#getReplicaIds} is returning a shared reference which may cause race condition.\n-      // Please report the test failure if you run into this exception.\n-      throw new IllegalArgumentException(\n-          generateErrorMessage(partitionId, examinedReplicas, replicaPool, backupReplicasToCheck, downReplicasToCheck));\n+\n+    // MockPartitionId.getReplicaIds() is returning a shared reference which may cause race condition.\n+    // Please report the test failure if you run into this exception.\n+    Supplier<IllegalArgumentException> notEnoughReplicasException = () -> new IllegalArgumentException(\n+        generateErrorMessage(partitionId, examinedReplicas, replicaPool, backupReplicasToCheck, downReplicasToCheck));\n+    // initialize this to the replica type of the first request to send so that parallelism is set correctly for the\n+    // first request\n+    inFlightReplicaType =\n+        replicaPool.stream().findFirst().map(ReplicaId::getReplicaType).orElseThrow(notEnoughReplicasException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMTEzMw=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1OTY1OQ==", "bodyText": "ah, I get your point. The frontend that uses operation tracker might be Azure frontend. In that case, first replica type is cloud replica, right? Did we ensure cloud replica will be picked in first place when populating the replica pool?", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401259659", "createdAt": "2020-03-31T22:47:53Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -227,22 +240,32 @@\n         replicaPool.add(downReplicas.pollFirst());\n       }\n     }\n+    cloudReplicasPresent =\n+        replicaPool.stream().map(ReplicaId::getReplicaType).anyMatch(Predicate.isEqual(ReplicaType.CLOUD_BACKED));\n     totalReplicaCount = replicaPool.size();\n-    if (totalReplicaCount < successTarget) {\n-      // {@link MockPartitionId#getReplicaIds} is returning a shared reference which may cause race condition.\n-      // Please report the test failure if you run into this exception.\n-      throw new IllegalArgumentException(\n-          generateErrorMessage(partitionId, examinedReplicas, replicaPool, backupReplicasToCheck, downReplicasToCheck));\n+\n+    // MockPartitionId.getReplicaIds() is returning a shared reference which may cause race condition.\n+    // Please report the test failure if you run into this exception.\n+    Supplier<IllegalArgumentException> notEnoughReplicasException = () -> new IllegalArgumentException(\n+        generateErrorMessage(partitionId, examinedReplicas, replicaPool, backupReplicasToCheck, downReplicasToCheck));\n+    // initialize this to the replica type of the first request to send so that parallelism is set correctly for the\n+    // first request\n+    inFlightReplicaType =\n+        replicaPool.stream().findFirst().map(ReplicaId::getReplicaType).orElseThrow(notEnoughReplicasException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMTEzMw=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MzQ3OA==", "bodyText": "The cloud replica will be returned in the list of replica IDs if it exists. Since each cloud replica has a virtual \"datanode\" it will follow the same datacenter ordering logic that other replicas do. For azure fabrics, it will come first.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401763478", "createdAt": "2020-04-01T16:52:51Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -227,22 +240,32 @@\n         replicaPool.add(downReplicas.pollFirst());\n       }\n     }\n+    cloudReplicasPresent =\n+        replicaPool.stream().map(ReplicaId::getReplicaType).anyMatch(Predicate.isEqual(ReplicaType.CLOUD_BACKED));\n     totalReplicaCount = replicaPool.size();\n-    if (totalReplicaCount < successTarget) {\n-      // {@link MockPartitionId#getReplicaIds} is returning a shared reference which may cause race condition.\n-      // Please report the test failure if you run into this exception.\n-      throw new IllegalArgumentException(\n-          generateErrorMessage(partitionId, examinedReplicas, replicaPool, backupReplicasToCheck, downReplicasToCheck));\n+\n+    // MockPartitionId.getReplicaIds() is returning a shared reference which may cause race condition.\n+    // Please report the test failure if you run into this exception.\n+    Supplier<IllegalArgumentException> notEnoughReplicasException = () -> new IllegalArgumentException(\n+        generateErrorMessage(partitionId, examinedReplicas, replicaPool, backupReplicasToCheck, downReplicasToCheck));\n+    // initialize this to the replica type of the first request to send so that parallelism is set correctly for the\n+    // first request\n+    inFlightReplicaType =\n+        replicaPool.stream().findFirst().map(ReplicaId::getReplicaType).orElseThrow(notEnoughReplicasException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMTEzMw=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2NDk4NQ==", "bodyText": "Make sense. Thanks for the explanation.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401764985", "createdAt": "2020-04-01T16:54:56Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -227,22 +240,32 @@\n         replicaPool.add(downReplicas.pollFirst());\n       }\n     }\n+    cloudReplicasPresent =\n+        replicaPool.stream().map(ReplicaId::getReplicaType).anyMatch(Predicate.isEqual(ReplicaType.CLOUD_BACKED));\n     totalReplicaCount = replicaPool.size();\n-    if (totalReplicaCount < successTarget) {\n-      // {@link MockPartitionId#getReplicaIds} is returning a shared reference which may cause race condition.\n-      // Please report the test failure if you run into this exception.\n-      throw new IllegalArgumentException(\n-          generateErrorMessage(partitionId, examinedReplicas, replicaPool, backupReplicasToCheck, downReplicasToCheck));\n+\n+    // MockPartitionId.getReplicaIds() is returning a shared reference which may cause race condition.\n+    // Please report the test failure if you run into this exception.\n+    Supplier<IllegalArgumentException> notEnoughReplicasException = () -> new IllegalArgumentException(\n+        generateErrorMessage(partitionId, examinedReplicas, replicaPool, backupReplicasToCheck, downReplicasToCheck));\n+    // initialize this to the replica type of the first request to send so that parallelism is set correctly for the\n+    // first request\n+    inFlightReplicaType =\n+        replicaPool.stream().findFirst().map(ReplicaId::getReplicaType).orElseThrow(notEnoughReplicasException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMTEzMw=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODE5NzE4OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToyMToyNlrOF-osng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzowMjozMVrOF_KHiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMjgxNA==", "bodyText": "If routerGetEligibleReplicasByStateEnabled is true, the replicaPool won't include cloudReplica. Do we need to explicitly add it into pool?", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401222814", "createdAt": "2020-03-31T21:21:26Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -227,22 +240,32 @@\n         replicaPool.add(downReplicas.pollFirst());\n       }\n     }\n+    cloudReplicasPresent =\n+        replicaPool.stream().map(ReplicaId::getReplicaType).anyMatch(Predicate.isEqual(ReplicaType.CLOUD_BACKED));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1ODk2Mw==", "bodyText": "I was under the impression that it would be returned since CloudServiceClusterChangeHandler has the following implementation (return the replica unconditionally if it exists):\n  @Override\n  public Stream<AmbryReplica> getReplicaIdsByState(AmbryPartition partition, ReplicaState state) {\n    AmbryReplica replica = partitionToReplica.get(partition.toPathString());\n    return replica == null ? Stream.empty() : Stream.of(replica);\n  }", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401258963", "createdAt": "2020-03-31T22:45:54Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -227,22 +240,32 @@\n         replicaPool.add(downReplicas.pollFirst());\n       }\n     }\n+    cloudReplicasPresent =\n+        replicaPool.stream().map(ReplicaId::getReplicaType).anyMatch(Predicate.isEqual(ReplicaType.CLOUD_BACKED));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMjgxNA=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3MDM3Ng==", "bodyText": "Right, I forgot cloud dc is added to dcToDcInfo", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401770376", "createdAt": "2020-04-01T17:02:31Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -227,22 +240,32 @@\n         replicaPool.add(downReplicas.pollFirst());\n       }\n     }\n+    cloudReplicasPresent =\n+        replicaPool.stream().map(ReplicaId::getReplicaType).anyMatch(Predicate.isEqual(ReplicaType.CLOUD_BACKED));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMjgxNA=="}, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODIwOTYyOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToyNTozMFrOF-o0Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToyNTozMFrOF-o0Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNDc3NA==", "bodyText": "I would suggest renaming these variables to something like  diskReplicaSuccessCount to distinguish it from diskDownCount more easily.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r401224774", "createdAt": "2020-03-31T21:25:30Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com.github.ambry.router/SimpleOperationTracker.java", "diffHunk": "@@ -66,27 +69,32 @@\n class SimpleOperationTracker implements OperationTracker {\n   protected final String datacenterName;\n   protected final String originatingDcName;\n-  protected final int successTarget;\n-  protected final int parallelism;\n+  protected final int diskSuccessTarget;\n+  protected final int diskParallelism;\n+  protected final int cloudSuccessTarget;\n+  protected final int cloudParallelism;\n+  protected final boolean cloudReplicasPresent;\n+  // How many NotFound responses from originating dc will terminate the operation.\n+  // It's decided by the success target of each mutation operations, including put, delete, update ttl etc.\n+  protected final int originatingDcNotFoundFailureThreshold;\n+  protected final int totalReplicaCount;\n   protected final LinkedList<ReplicaId> replicaPool = new LinkedList<>();\n \n-  protected int totalReplicaCount = 0;\n   protected int inflightCount = 0;\n-  protected int succeededCount = 0;\n+  protected int diskSucceededCount = 0;\n+  protected int cloudSucceededCount = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161788d6547b3f3965ea99cce073786bffee2fc0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjE2MDUwOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/SimpleOperationTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyMjozOVrOF_1h4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyNzoyOVrOF_1uZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MTYzMw==", "bodyText": "minor: numReplicasInLocalDc is updated but never accessed. Consider removing it?", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r402481633", "createdAt": "2020-04-02T17:22:39Z", "author": {"login": "jsjtzyy"}, "path": "ambry-router/src/main/java/com/github/ambry/router/SimpleOperationTracker.java", "diffHunk": "@@ -191,19 +207,24 @@\n     for (ReplicaId replicaId : replicas) {\n       examinedReplicas.add(replicaId);\n       String replicaDcName = replicaId.getDataNodeId().getDatacenterName();\n-      if (replicaDcName.equals(originatingDcName)) {\n+      boolean isLocalDcReplica = replicaDcName.equals(datacenterName);\n+      boolean isOriginatingDcReplica = replicaDcName.equals(originatingDcName);\n+      if (isLocalDcReplica) {\n+        numReplicasInLocalDc++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c03a10039455e8d4b8b030c5dcf6bff60eac50f"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4NDgzNw==", "bodyText": "Sorry left that in there since I was thinking about adding in some changes to the logic for adding backup replicas when includeOriginating is false to just use the total number of replicas in the local and remote dcs instead of hardcoding it to 6. I ultimately decided not to couple these changes though since it affects our current production cluster the most.", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r402484837", "createdAt": "2020-04-02T17:27:29Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com/github/ambry/router/SimpleOperationTracker.java", "diffHunk": "@@ -191,19 +207,24 @@\n     for (ReplicaId replicaId : replicas) {\n       examinedReplicas.add(replicaId);\n       String replicaDcName = replicaId.getDataNodeId().getDatacenterName();\n-      if (replicaDcName.equals(originatingDcName)) {\n+      boolean isLocalDcReplica = replicaDcName.equals(datacenterName);\n+      boolean isOriginatingDcReplica = replicaDcName.equals(originatingDcName);\n+      if (isLocalDcReplica) {\n+        numReplicasInLocalDc++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MTYzMw=="}, "originalCommit": {"oid": "7c03a10039455e8d4b8b030c5dcf6bff60eac50f"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Njg5MzM5OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/SimpleOperationTracker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToxNjo0MFrOF_8z_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMTozMDoyN1rOF_9N-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMDk1OA==", "bodyText": "Is there still a TODO here?", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r402600958", "createdAt": "2020-04-02T21:16:40Z", "author": {"login": "lightningrob"}, "path": "ambry-router/src/main/java/com/github/ambry/router/SimpleOperationTracker.java", "diffHunk": "@@ -261,21 +288,32 @@\n   @Override\n   public boolean hasSucceeded() {\n     boolean hasSucceeded;\n-    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget) {\n-      hasSucceeded =\n-          succeededCount >= Math.max(totalReplicaCount - disabledCount - 1, routerConfig.routerPutSuccessTarget);\n+    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget\n+        && inFlightReplicaType == ReplicaType.DISK_BACKED) {\n+      // this logic only applies to disk replicas where the quorum can change during replica movement\n+      int dynamicSuccessTarget = Math.max(totalReplicaCount - disabledCount - 1, routerConfig.routerPutSuccessTarget);\n+      hasSucceeded = diskReplicaSuccessCount >= dynamicSuccessTarget;\n     } else {\n-      hasSucceeded = succeededCount >= successTarget;\n+      hasSucceeded = diskReplicaSuccessCount >= diskSuccessTarget || cloudReplicaSuccessCount >= cloudSuccessTarget;\n     }\n     return hasSucceeded;\n   }\n \n   @Override\n   public boolean hasFailedOnNotFound() {\n-    return (originatingDcNotFoundFailureThreshold > 0\n-        && originatingDcNotFoundCount >= originatingDcNotFoundFailureThreshold) || (crossColoEnabled\n-        && diskDownCount + totalNotFoundCount > totalReplicaCount - successTarget);\n+    if (routerOperation == RouterOperation.PutOperation) {\n+      return false;\n+    }\n+    if (originatingDcNotFoundFailureThreshold > 0\n+        && originatingDcNotFoundCount >= originatingDcNotFoundFailureThreshold) {\n+      return true;\n+    }\n     // To account for GET operation, the threshold should be  >= totalReplicaCount - (success target - 1)\n+    // Right now, this only applies for disk replica only partitions and may not be completely accurate if there are\n+    // failures responses other than not found.\n+    // TODO support cloud replicas in this condition, also account for failures other than not found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ecfbbe57b93bdcedc3be05ee65cc495425b9a4e"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzYxMQ==", "bodyText": "Yes that is still a todo. I will make github issues for the todos that I added to this file", "url": "https://github.com/linkedin/ambry/pull/1445#discussion_r402607611", "createdAt": "2020-04-02T21:30:27Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com/github/ambry/router/SimpleOperationTracker.java", "diffHunk": "@@ -261,21 +288,32 @@\n   @Override\n   public boolean hasSucceeded() {\n     boolean hasSucceeded;\n-    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget) {\n-      hasSucceeded =\n-          succeededCount >= Math.max(totalReplicaCount - disabledCount - 1, routerConfig.routerPutSuccessTarget);\n+    if (routerOperation == RouterOperation.PutOperation && routerConfig.routerPutUseDynamicSuccessTarget\n+        && inFlightReplicaType == ReplicaType.DISK_BACKED) {\n+      // this logic only applies to disk replicas where the quorum can change during replica movement\n+      int dynamicSuccessTarget = Math.max(totalReplicaCount - disabledCount - 1, routerConfig.routerPutSuccessTarget);\n+      hasSucceeded = diskReplicaSuccessCount >= dynamicSuccessTarget;\n     } else {\n-      hasSucceeded = succeededCount >= successTarget;\n+      hasSucceeded = diskReplicaSuccessCount >= diskSuccessTarget || cloudReplicaSuccessCount >= cloudSuccessTarget;\n     }\n     return hasSucceeded;\n   }\n \n   @Override\n   public boolean hasFailedOnNotFound() {\n-    return (originatingDcNotFoundFailureThreshold > 0\n-        && originatingDcNotFoundCount >= originatingDcNotFoundFailureThreshold) || (crossColoEnabled\n-        && diskDownCount + totalNotFoundCount > totalReplicaCount - successTarget);\n+    if (routerOperation == RouterOperation.PutOperation) {\n+      return false;\n+    }\n+    if (originatingDcNotFoundFailureThreshold > 0\n+        && originatingDcNotFoundCount >= originatingDcNotFoundFailureThreshold) {\n+      return true;\n+    }\n     // To account for GET operation, the threshold should be  >= totalReplicaCount - (success target - 1)\n+    // Right now, this only applies for disk replica only partitions and may not be completely accurate if there are\n+    // failures responses other than not found.\n+    // TODO support cloud replicas in this condition, also account for failures other than not found", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMDk1OA=="}, "originalCommit": {"oid": "2ecfbbe57b93bdcedc3be05ee65cc495425b9a4e"}, "originalPosition": 256}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1453, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}