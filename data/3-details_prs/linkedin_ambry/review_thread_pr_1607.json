{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NzIzMDYw", "number": 1607, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTo1MToyM1rOEZrCzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjo1NjoyMFrOEZsBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzU1MDg0OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/RouterConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTo1MToyM1rOHCn9Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyNTozM1rOHDR-aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMzg5MA==", "bodyText": "Prefer to use -1. To reduce some <= confusion in below.", "url": "https://github.com/linkedin/ambry/pull/1607#discussion_r472513890", "createdAt": "2020-08-18T21:51:23Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com/github/ambry/config/RouterConfig.java", "diffHunk": "@@ -500,6 +502,13 @@\n   @Default(\"false\")\n   public final boolean routerCrossColoRequestToDcWithMostReplicas;\n \n+  /**\n+   * The maximum number of outgoing delete operations in background deleter. 0 means no limit.\n+   */\n+  @Config(ROUTER_BACKGROUND_DELETER_MAX_CONCURRENT_OPERATIONS)\n+  @Default(\"0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c529962db14c8c45b3f6bef280976ca1bc584d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MjgzMw==", "bodyText": "I prefer 0, because of the getIntegerInRange method. If I set the range from -1 to MAX_INT, then 0 would be another special value besides -1. Setting range from 0 to MAX_INT solve this issue.", "url": "https://github.com/linkedin/ambry/pull/1607#discussion_r472592833", "createdAt": "2020-08-19T02:06:39Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/config/RouterConfig.java", "diffHunk": "@@ -500,6 +502,13 @@\n   @Default(\"false\")\n   public final boolean routerCrossColoRequestToDcWithMostReplicas;\n \n+  /**\n+   * The maximum number of outgoing delete operations in background deleter. 0 means no limit.\n+   */\n+  @Config(ROUTER_BACKGROUND_DELETER_MAX_CONCURRENT_OPERATIONS)\n+  @Default(\"0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMzg5MA=="}, "originalCommit": {"oid": "e3c529962db14c8c45b3f6bef280976ca1bc584d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjI4MQ==", "bodyText": "got you. Sounds good.", "url": "https://github.com/linkedin/ambry/pull/1607#discussion_r473202281", "createdAt": "2020-08-19T17:25:33Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com/github/ambry/config/RouterConfig.java", "diffHunk": "@@ -500,6 +502,13 @@\n   @Default(\"false\")\n   public final boolean routerCrossColoRequestToDcWithMostReplicas;\n \n+  /**\n+   * The maximum number of outgoing delete operations in background deleter. 0 means no limit.\n+   */\n+  @Config(ROUTER_BACKGROUND_DELETER_MAX_CONCURRENT_OPERATIONS)\n+  @Default(\"0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMzg5MA=="}, "originalCommit": {"oid": "e3c529962db14c8c45b3f6bef280976ca1bc584d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzU1MzY4OnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTo1MjoyMlrOHCn-_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTo1MjoyMlrOHCn-_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNDMwMQ==", "bodyText": "Update Java Doc.", "url": "https://github.com/linkedin/ambry/pull/1607#discussion_r472514301", "createdAt": "2020-08-18T21:52:22Z", "author": {"login": "zzmao"}, "path": "ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java", "diffHunk": "@@ -1085,12 +1104,49 @@ protected void updateBlobTtl(String blobIdStr, final String serviceId, long expi\n       completeUpdateBlobTtlOperation(routerException, futureResult, callback);\n     }\n \n+    /**\n+     * Requests for a blob to be deleted asynchronously and invokes the {@link Callback} when the request completes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c529962db14c8c45b3f6bef280976ca1bc584d"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzcxMDYxOnYy", "diffSide": "RIGHT", "path": "ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjo1NjoyMFrOHCpcLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjo1NjoyMFrOHCpcLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUzODE1OA==", "bodyText": "In practice, probably almost no difference, but it may be slightly better to use ConcurrentLinkedQueue instead of deque if we don't need the extra deque features right now.\nThe deque impl mentions this:\n     * Empirically, microbenchmarks suggest that this class adds about\n     * 40% overhead relative to ConcurrentLinkedQueue, which feels as\n     * good as we can hope for.", "url": "https://github.com/linkedin/ambry/pull/1607#discussion_r472538158", "createdAt": "2020-08-18T22:56:20Z", "author": {"login": "cgtz"}, "path": "ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java", "diffHunk": "@@ -1034,8 +1044,10 @@ public void run() {\n    * 2. (TBD) Deleting successfully put chunks of a failed composite blob put operation. Today, this is done by the\n    * same {@link OperationController} doing the put.\n    */\n-  private class BackgroundDeleter extends OperationController {\n+  class BackgroundDeleter extends OperationController {\n+    private final AtomicInteger concurrentBackgroudDeleteOperationCount = new AtomicInteger();\n     private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final ConcurrentLinkedDeque<Supplier<Void>> deleteOperationQueue = new ConcurrentLinkedDeque<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c529962db14c8c45b3f6bef280976ca1bc584d"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1344, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}