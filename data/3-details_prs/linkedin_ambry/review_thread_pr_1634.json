{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MTAxMDA3", "number": 1634, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjo1NDo1N1rOEo2cKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzowNDoxNlrOEpp3xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjcwNDQyOnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjo1NDo1N1rOHaLjRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjo1NDo1N1rOHaLjRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIxNDI3Ng==", "bodyText": "minor: format this file to clean up the unused imports.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497214276", "createdAt": "2020-09-30T02:54:57Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "diffHunk": "@@ -13,19 +13,28 @@\n  */\n package com.github.ambry.account;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import java.util.*;\n+import com.github.ambry.config.AccountServiceConfig;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjczMDI2OnYy", "diffSide": "LEFT", "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMzoxMToxN1rOHaLyVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMzoxMToxN1rOHaLyVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIxODEzMg==", "bodyText": "minor: we can remove unused imports from this file.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497218132", "createdAt": "2020-09-30T03:11:17Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -259,73 +259,6 @@ public boolean updateAccounts(Collection<Account> accounts) {\n     return updateAccountsWithAccountMetadataStore(accounts, accountMetadataStore);\n   }\n \n-  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjc0NDY0OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMzoyMDoxOVrOHaL6tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoxMToyMlrOHapnQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMDI3OA==", "bodyText": "I know this else branch is for updating container but do we also need to check if this container exists? Looks like we assume it is present without checking existingContainersInAccount.containsKey(container.getName()).", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497220278", "createdAt": "2020-09-30T03:20:19Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "diffHunk": "@@ -68,6 +79,71 @@ public Account getAccountById(short id) {\n     return accountInfoMapRef.get().getAccounts();\n   }\n \n+  @Override\n+  public Collection<Container> updateContainers(String accountName, Collection<Container> containers)\n+      throws AccountServiceException {\n+    checkOpen();\n+    // input validation\n+    if (accountName == null || accountName.isEmpty() || containers == null || containers.isEmpty()) {\n+      throw new AccountServiceException(\"Account or container is null or empty\", AccountServiceErrorCode.BadRequest);\n+    }\n+    Account account = getAccountByName(accountName);\n+    if (account == null) {\n+      logger.error(\"Account {} is not found\", accountName);\n+      throw new AccountServiceException(\"Account \" + accountName + \" is not found\", AccountServiceErrorCode.NotFound);\n+    }\n+\n+    List<Container> resolvedContainers = new ArrayList<>();\n+    // create a hashmap to map the name to existing containers in account\n+    Map<String, Container> existingContainersInAccount = new HashMap<>();\n+    account.getAllContainers().forEach(c -> existingContainersInAccount.put(c.getName(), c));\n+\n+    // Generate container ids for new containers\n+    short nextContainerId = account.getAllContainers()\n+        .stream()\n+        .map(Container::getId)\n+        .max(Short::compareTo)\n+        .map(maxId -> (short) (maxId + 1))\n+        .orElse(config.containerIdStartNumber);\n+\n+    for (Container container : containers) {\n+      if (container.getId() == Container.UNKNOWN_CONTAINER_ID) {\n+        // new container\n+        // make sure there is no conflicting container (conflicting means a container with same name but different attributes already exists).\n+        Container existingContainer = existingContainersInAccount.get(container.getName());\n+        if (existingContainer != null) {\n+          if (existingContainer.isSameContainer(container)) {\n+            // If an exactly same container already exists, ignore it. Adding same container multiple times is no-op.\n+          } else {\n+            throw new AccountServiceException(\"There is a conflicting container in account \" + accountName,\n+                AccountServiceErrorCode.ResourceConflict);\n+          }\n+        } else {\n+          resolvedContainers.add(\n+              new ContainerBuilder(container).setId(nextContainerId).setParentAccountId(account.getId()).build());\n+          ++nextContainerId;\n+        }\n+      } else {\n+        // existing container\n+        resolvedContainers.add(container);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcwNjgxOA==", "bodyText": "Oh good point.  I was assuming that the ensuing call to updateAccounts() would check that, but it's better to do it here.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497706818", "createdAt": "2020-09-30T18:11:22Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "diffHunk": "@@ -68,6 +79,71 @@ public Account getAccountById(short id) {\n     return accountInfoMapRef.get().getAccounts();\n   }\n \n+  @Override\n+  public Collection<Container> updateContainers(String accountName, Collection<Container> containers)\n+      throws AccountServiceException {\n+    checkOpen();\n+    // input validation\n+    if (accountName == null || accountName.isEmpty() || containers == null || containers.isEmpty()) {\n+      throw new AccountServiceException(\"Account or container is null or empty\", AccountServiceErrorCode.BadRequest);\n+    }\n+    Account account = getAccountByName(accountName);\n+    if (account == null) {\n+      logger.error(\"Account {} is not found\", accountName);\n+      throw new AccountServiceException(\"Account \" + accountName + \" is not found\", AccountServiceErrorCode.NotFound);\n+    }\n+\n+    List<Container> resolvedContainers = new ArrayList<>();\n+    // create a hashmap to map the name to existing containers in account\n+    Map<String, Container> existingContainersInAccount = new HashMap<>();\n+    account.getAllContainers().forEach(c -> existingContainersInAccount.put(c.getName(), c));\n+\n+    // Generate container ids for new containers\n+    short nextContainerId = account.getAllContainers()\n+        .stream()\n+        .map(Container::getId)\n+        .max(Short::compareTo)\n+        .map(maxId -> (short) (maxId + 1))\n+        .orElse(config.containerIdStartNumber);\n+\n+    for (Container container : containers) {\n+      if (container.getId() == Container.UNKNOWN_CONTAINER_ID) {\n+        // new container\n+        // make sure there is no conflicting container (conflicting means a container with same name but different attributes already exists).\n+        Container existingContainer = existingContainersInAccount.get(container.getName());\n+        if (existingContainer != null) {\n+          if (existingContainer.isSameContainer(container)) {\n+            // If an exactly same container already exists, ignore it. Adding same container multiple times is no-op.\n+          } else {\n+            throw new AccountServiceException(\"There is a conflicting container in account \" + accountName,\n+                AccountServiceErrorCode.ResourceConflict);\n+          }\n+        } else {\n+          resolvedContainers.add(\n+              new ContainerBuilder(container).setId(nextContainerId).setParentAccountId(account.getId()).build());\n+          ++nextContainerId;\n+        }\n+      } else {\n+        // existing container\n+        resolvedContainers.add(container);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMDI3OA=="}, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjc1MTQ2OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMzoyNDozOVrOHaL-mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNDo0MzozN1rOHa6T7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMTI3Mw==", "bodyText": "Why this is protected?", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497221273", "createdAt": "2020-09-30T03:24:39Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -40,22 +41,21 @@\n /**\n  * An implementation of {@link AccountService} that employs MySql database as its underlying storage.\n  */\n-public class MySqlAccountService implements AccountService {\n+public class MySqlAccountService extends AbstractAccountService {\n \n   private static final Logger logger = LoggerFactory.getLogger(MySqlAccountService.class);\n   static final String MYSQL_ACCOUNT_UPDATER_PREFIX = \"mysql-account-updater\";\n-  private final AccountServiceMetrics accountServiceMetrics;\n+  protected final AtomicBoolean open = new AtomicBoolean(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcwNzU2OA==", "bodyText": "Good question.  I copied the line from HelixAccountService.  I'll change it to private in both places.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497707568", "createdAt": "2020-09-30T18:12:49Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -40,22 +41,21 @@\n /**\n  * An implementation of {@link AccountService} that employs MySql database as its underlying storage.\n  */\n-public class MySqlAccountService implements AccountService {\n+public class MySqlAccountService extends AbstractAccountService {\n \n   private static final Logger logger = LoggerFactory.getLogger(MySqlAccountService.class);\n   static final String MYSQL_ACCOUNT_UPDATER_PREFIX = \"mysql-account-updater\";\n-  private final AccountServiceMetrics accountServiceMetrics;\n+  protected final AtomicBoolean open = new AtomicBoolean(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMTI3Mw=="}, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcwOTAxNw==", "bodyText": "Or maybe move it to Abstract class and keep it protected?", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497709017", "createdAt": "2020-09-30T18:15:33Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -40,22 +41,21 @@\n /**\n  * An implementation of {@link AccountService} that employs MySql database as its underlying storage.\n  */\n-public class MySqlAccountService implements AccountService {\n+public class MySqlAccountService extends AbstractAccountService {\n \n   private static final Logger logger = LoggerFactory.getLogger(MySqlAccountService.class);\n   static final String MYSQL_ACCOUNT_UPDATER_PREFIX = \"mysql-account-updater\";\n-  private final AccountServiceMetrics accountServiceMetrics;\n+  protected final AtomicBoolean open = new AtomicBoolean(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMTI3Mw=="}, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MjE2MQ==", "bodyText": "Yes, it seems more reasonable.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497772161", "createdAt": "2020-09-30T20:12:04Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -40,22 +41,21 @@\n /**\n  * An implementation of {@link AccountService} that employs MySql database as its underlying storage.\n  */\n-public class MySqlAccountService implements AccountService {\n+public class MySqlAccountService extends AbstractAccountService {\n \n   private static final Logger logger = LoggerFactory.getLogger(MySqlAccountService.class);\n   static final String MYSQL_ACCOUNT_UPDATER_PREFIX = \"mysql-account-updater\";\n-  private final AccountServiceMetrics accountServiceMetrics;\n+  protected final AtomicBoolean open = new AtomicBoolean(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMTI3Mw=="}, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4MDM5OQ==", "bodyText": "Kept it private in both classes.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497980399", "createdAt": "2020-10-01T04:43:37Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -40,22 +41,21 @@\n /**\n  * An implementation of {@link AccountService} that employs MySql database as its underlying storage.\n  */\n-public class MySqlAccountService implements AccountService {\n+public class MySqlAccountService extends AbstractAccountService {\n \n   private static final Logger logger = LoggerFactory.getLogger(MySqlAccountService.class);\n   static final String MYSQL_ACCOUNT_UPDATER_PREFIX = \"mysql-account-updater\";\n-  private final AccountServiceMetrics accountServiceMetrics;\n+  protected final AtomicBoolean open = new AtomicBoolean(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMTI3Mw=="}, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjc2OTkwOnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/account/AccountCollectionSerde.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMzozNTo0MlrOHaMJOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDoxMTozNVrOHatlkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMzk5Mw==", "bodyText": "Looks like these two methods are not really needed. Any specific reason to keep them?", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497223993", "createdAt": "2020-09-30T03:35:42Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/account/AccountCollectionSerde.java", "diffHunk": "@@ -57,4 +57,44 @@ public static JSONObject toJson(Collection<Account> accounts) {\n       return accounts;\n     }\n   }\n+\n+  public static Account accountFromJson(JSONObject json) {\n+    return Account.fromJson(json);\n+  }\n+\n+  public static JSONObject accountToJson(Account account, boolean excludeContainers) {\n+    JSONObject jsonObject = account.toJson(false);\n+    if (excludeContainers) {\n+      jsonObject.remove(Account.CONTAINERS_KEY);\n+    }\n+    return jsonObject;\n+  }\n+\n+  public static JSONObject containersToJson(Collection<Container> containers) {\n+    JSONArray containerArray = new JSONArray();\n+    containers.stream().map(container -> container.toJson()).forEach(containerArray::put);\n+    return new JSONObject().put(Account.CONTAINERS_KEY, containerArray);\n+  }\n+\n+  public static Collection<Container> containersFromJson(JSONObject json, short accountId) {\n+    JSONArray containerArray = json.optJSONArray(Account.CONTAINERS_KEY);\n+    if (containerArray == null) {\n+      return Collections.emptyList();\n+    } else {\n+      Collection<Container> containers = new ArrayList<>();\n+      for (int i = 0; i < containerArray.length(); i++) {\n+        JSONObject containerJson = containerArray.getJSONObject(i);\n+        containers.add(Container.fromJson(containerJson, accountId));\n+      }\n+      return containers;\n+    }\n+  }\n+\n+  public static Container containerFromJson(JSONObject json, short accountId) {\n+    return Container.fromJson(json, accountId);\n+  }\n+\n+  public static JSONObject containerToJson(Container container) {\n+    return container.toJson();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxMzcwMg==", "bodyText": "They are used by ContainerDao which is in a different package that can't access the package private methods toJson()/fromJson() in Container class.  We could make those methods public if no one objects.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497713702", "createdAt": "2020-09-30T18:24:15Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/account/AccountCollectionSerde.java", "diffHunk": "@@ -57,4 +57,44 @@ public static JSONObject toJson(Collection<Account> accounts) {\n       return accounts;\n     }\n   }\n+\n+  public static Account accountFromJson(JSONObject json) {\n+    return Account.fromJson(json);\n+  }\n+\n+  public static JSONObject accountToJson(Account account, boolean excludeContainers) {\n+    JSONObject jsonObject = account.toJson(false);\n+    if (excludeContainers) {\n+      jsonObject.remove(Account.CONTAINERS_KEY);\n+    }\n+    return jsonObject;\n+  }\n+\n+  public static JSONObject containersToJson(Collection<Container> containers) {\n+    JSONArray containerArray = new JSONArray();\n+    containers.stream().map(container -> container.toJson()).forEach(containerArray::put);\n+    return new JSONObject().put(Account.CONTAINERS_KEY, containerArray);\n+  }\n+\n+  public static Collection<Container> containersFromJson(JSONObject json, short accountId) {\n+    JSONArray containerArray = json.optJSONArray(Account.CONTAINERS_KEY);\n+    if (containerArray == null) {\n+      return Collections.emptyList();\n+    } else {\n+      Collection<Container> containers = new ArrayList<>();\n+      for (int i = 0; i < containerArray.length(); i++) {\n+        JSONObject containerJson = containerArray.getJSONObject(i);\n+        containers.add(Container.fromJson(containerJson, accountId));\n+      }\n+      return containers;\n+    }\n+  }\n+\n+  public static Container containerFromJson(JSONObject json, short accountId) {\n+    return Container.fromJson(json, accountId);\n+  }\n+\n+  public static JSONObject containerToJson(Container container) {\n+    return container.toJson();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMzk5Mw=="}, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MTkyMg==", "bodyText": "Sure, making those methods in Container sounds good to me.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497771922", "createdAt": "2020-09-30T20:11:35Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/account/AccountCollectionSerde.java", "diffHunk": "@@ -57,4 +57,44 @@ public static JSONObject toJson(Collection<Account> accounts) {\n       return accounts;\n     }\n   }\n+\n+  public static Account accountFromJson(JSONObject json) {\n+    return Account.fromJson(json);\n+  }\n+\n+  public static JSONObject accountToJson(Account account, boolean excludeContainers) {\n+    JSONObject jsonObject = account.toJson(false);\n+    if (excludeContainers) {\n+      jsonObject.remove(Account.CONTAINERS_KEY);\n+    }\n+    return jsonObject;\n+  }\n+\n+  public static JSONObject containersToJson(Collection<Container> containers) {\n+    JSONArray containerArray = new JSONArray();\n+    containers.stream().map(container -> container.toJson()).forEach(containerArray::put);\n+    return new JSONObject().put(Account.CONTAINERS_KEY, containerArray);\n+  }\n+\n+  public static Collection<Container> containersFromJson(JSONObject json, short accountId) {\n+    JSONArray containerArray = json.optJSONArray(Account.CONTAINERS_KEY);\n+    if (containerArray == null) {\n+      return Collections.emptyList();\n+    } else {\n+      Collection<Container> containers = new ArrayList<>();\n+      for (int i = 0; i < containerArray.length(); i++) {\n+        JSONObject containerJson = containerArray.getJSONObject(i);\n+        containers.add(Container.fromJson(containerJson, accountId));\n+      }\n+      return containers;\n+    }\n+  }\n+\n+  public static Container containerFromJson(JSONObject json, short accountId) {\n+    return Container.fromJson(json, accountId);\n+  }\n+\n+  public static JSONObject containerToJson(Container container) {\n+    return container.toJson();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMzk5Mw=="}, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjc4MDkyOnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/AccountServiceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMzo0Mjo0NlrOHaMPrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMzo0Mjo0NlrOHaMPrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyNTY0NQ==", "bodyText": "sorry, I didn't add java doc for this config in previous PR, could you please add one?", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497225645", "createdAt": "2020-09-30T03:42:46Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/config/AccountServiceConfig.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.config;\n+\n+/**\n+ * Common config for {@link AccountServiceConfig}\n+ */\n+public class AccountServiceConfig {\n+  public static final String ACCOUNT_SERVICE_PREFIX = \"account.service.\";\n+  public static final String CONTAINER_ID_START_NUMBER = ACCOUNT_SERVICE_PREFIX + \"container.id.start.number\";\n+\n+  @Config(CONTAINER_ID_START_NUMBER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjgxMDQ1OnYy", "diffSide": "RIGHT", "path": "ambry-frontend/src/main/java/com/github/ambry/frontend/PostAccountsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMzo1OTo1OVrOHaMgBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoyNzozNlrOHaqJwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyOTgzMA==", "bodyText": "Can we use NotFound error code?", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497229830", "createdAt": "2020-09-30T03:59:59Z", "author": {"login": "jsjtzyy"}, "path": "ambry-frontend/src/main/java/com/github/ambry/frontend/PostAccountsHandler.java", "diffHunk": "@@ -135,11 +141,58 @@ private void start() {\n      */\n     private Callback<Long> fetchAccountUpdateBodyCallback(RetainingAsyncWritableChannel channel) {\n       return buildCallback(frontendMetrics.postAccountsReadRequestMetrics, bytesRead -> {\n-        updateAccounts(readJsonFromChannel(channel));\n+        JSONObject jsonPayload = readJsonFromChannel(channel);\n+        ReadableStreamChannel outputChannel;\n+        if (restRequest.getPath().startsWith(Operations.UPDATE_ACCOUNT_CONTAINERS)) {\n+          logger.debug(\"Got request for {} with payload {}\", Operations.UPDATE_ACCOUNT_CONTAINERS, jsonPayload);\n+          JSONObject outputPayload = updateContainers(jsonPayload);\n+          outputChannel = serializeJsonToChannel(outputPayload);\n+        } else {\n+          updateAccounts(jsonPayload);\n+          outputChannel = new ByteBufferReadableStreamChannel(ByteBuffer.allocate(0));\n+        }\n         restResponseChannel.setHeader(RestUtils.Headers.DATE, new GregorianCalendar().getTime());\n-        restResponseChannel.setHeader(RestUtils.Headers.CONTENT_LENGTH, 0);\n-        finalCallback.onCompletion(null, null);\n-      }, uri, LOGGER, finalCallback);\n+        restResponseChannel.setHeader(RestUtils.Headers.CONTENT_TYPE, RestUtils.JSON_CONTENT_TYPE);\n+        restResponseChannel.setHeader(RestUtils.Headers.CONTENT_LENGTH, outputChannel.getSize());\n+        finalCallback.onCompletion(outputChannel, null);\n+      }, uri, logger, finalCallback);\n+    }\n+\n+    /**\n+     * Process the request json and call {@link AccountService#updateContainers} to add or update containers.\n+     * @param containersPayload the request json containing the containers to update.\n+     * @throws RestServiceException\n+     */\n+    private JSONObject updateContainers(JSONObject containersPayload) throws RestServiceException {\n+      Short accountId = RestUtils.getNumericalHeader(restRequest.getArgs(), RestUtils.Headers.TARGET_ACCOUNT_ID, false,\n+          Short::parseShort);\n+      String accountName = RestUtils.getHeader(restRequest.getArgs(), RestUtils.Headers.TARGET_ACCOUNT_NAME, false);\n+      if (accountId == null && accountName == null) {\n+        throw new RestServiceException(\"Missing required header: \" + RestUtils.Headers.TARGET_ACCOUNT_NAME,\n+            RestServiceErrorCode.BadRequest);\n+      }\n+      Account account =\n+          accountName != null ? accountService.getAccountByName(accountName) : accountService.getAccountById(accountId);\n+      if (account == null) {\n+        throw new RestServiceException(\"Account not found: \" + accountName, RestServiceErrorCode.BadRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxNTY0OQ==", "bodyText": "Yes.  Good catch.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497715649", "createdAt": "2020-09-30T18:27:36Z", "author": {"login": "lightningrob"}, "path": "ambry-frontend/src/main/java/com/github/ambry/frontend/PostAccountsHandler.java", "diffHunk": "@@ -135,11 +141,58 @@ private void start() {\n      */\n     private Callback<Long> fetchAccountUpdateBodyCallback(RetainingAsyncWritableChannel channel) {\n       return buildCallback(frontendMetrics.postAccountsReadRequestMetrics, bytesRead -> {\n-        updateAccounts(readJsonFromChannel(channel));\n+        JSONObject jsonPayload = readJsonFromChannel(channel);\n+        ReadableStreamChannel outputChannel;\n+        if (restRequest.getPath().startsWith(Operations.UPDATE_ACCOUNT_CONTAINERS)) {\n+          logger.debug(\"Got request for {} with payload {}\", Operations.UPDATE_ACCOUNT_CONTAINERS, jsonPayload);\n+          JSONObject outputPayload = updateContainers(jsonPayload);\n+          outputChannel = serializeJsonToChannel(outputPayload);\n+        } else {\n+          updateAccounts(jsonPayload);\n+          outputChannel = new ByteBufferReadableStreamChannel(ByteBuffer.allocate(0));\n+        }\n         restResponseChannel.setHeader(RestUtils.Headers.DATE, new GregorianCalendar().getTime());\n-        restResponseChannel.setHeader(RestUtils.Headers.CONTENT_LENGTH, 0);\n-        finalCallback.onCompletion(null, null);\n-      }, uri, LOGGER, finalCallback);\n+        restResponseChannel.setHeader(RestUtils.Headers.CONTENT_TYPE, RestUtils.JSON_CONTENT_TYPE);\n+        restResponseChannel.setHeader(RestUtils.Headers.CONTENT_LENGTH, outputChannel.getSize());\n+        finalCallback.onCompletion(outputChannel, null);\n+      }, uri, logger, finalCallback);\n+    }\n+\n+    /**\n+     * Process the request json and call {@link AccountService#updateContainers} to add or update containers.\n+     * @param containersPayload the request json containing the containers to update.\n+     * @throws RestServiceException\n+     */\n+    private JSONObject updateContainers(JSONObject containersPayload) throws RestServiceException {\n+      Short accountId = RestUtils.getNumericalHeader(restRequest.getArgs(), RestUtils.Headers.TARGET_ACCOUNT_ID, false,\n+          Short::parseShort);\n+      String accountName = RestUtils.getHeader(restRequest.getArgs(), RestUtils.Headers.TARGET_ACCOUNT_NAME, false);\n+      if (accountId == null && accountName == null) {\n+        throw new RestServiceException(\"Missing required header: \" + RestUtils.Headers.TARGET_ACCOUNT_NAME,\n+            RestServiceErrorCode.BadRequest);\n+      }\n+      Account account =\n+          accountName != null ? accountService.getAccountByName(accountName) : accountService.getAccountById(accountId);\n+      if (account == null) {\n+        throw new RestServiceException(\"Account not found: \" + accountName, RestServiceErrorCode.BadRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyOTgzMA=="}, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTY4OTY1OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/AccountServiceConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozNToxMFrOHaoWjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoyOToxM1rOHaqNgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NjE1Nw==", "bodyText": "Would default and start value be 1 here (matching with at-default above)? Probably this is coming from previous PR.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497686157", "createdAt": "2020-09-30T17:35:10Z", "author": {"login": "Arun-LinkedIn"}, "path": "ambry-api/src/main/java/com/github/ambry/config/AccountServiceConfig.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.config;\n+\n+/**\n+ * Common config for {@link AccountServiceConfig}\n+ */\n+public class AccountServiceConfig {\n+  public static final String ACCOUNT_SERVICE_PREFIX = \"account.service.\";\n+  public static final String CONTAINER_ID_START_NUMBER = ACCOUNT_SERVICE_PREFIX + \"container.id.start.number\";\n+\n+  @Config(CONTAINER_ID_START_NUMBER)\n+  @Default(\"1\")\n+  public final short containerIdStartNumber;\n+\n+  public AccountServiceConfig(VerifiableProperties verifiableProperties) {\n+    containerIdStartNumber =\n+        verifiableProperties.getShortInRange(CONTAINER_ID_START_NUMBER, (short) 0, (short) 0, Short.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxNjYwOA==", "bodyText": "I agree they should match, but should it actually be 1 and not 0?", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r497716608", "createdAt": "2020-09-30T18:29:13Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/config/AccountServiceConfig.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.config;\n+\n+/**\n+ * Common config for {@link AccountServiceConfig}\n+ */\n+public class AccountServiceConfig {\n+  public static final String ACCOUNT_SERVICE_PREFIX = \"account.service.\";\n+  public static final String CONTAINER_ID_START_NUMBER = ACCOUNT_SERVICE_PREFIX + \"container.id.start.number\";\n+\n+  @Config(CONTAINER_ID_START_NUMBER)\n+  @Default(\"1\")\n+  public final short containerIdStartNumber;\n+\n+  public AccountServiceConfig(VerifiableProperties verifiableProperties) {\n+    containerIdStartNumber =\n+        verifiableProperties.getShortInRange(CONTAINER_ID_START_NUMBER, (short) 0, (short) 0, Short.MAX_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NjE1Nw=="}, "originalCommit": {"oid": "6ab5ade12a55b9ee08ae701b467e583722fdca48"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDg1MTE5OnYy", "diffSide": "RIGHT", "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1NDoyOFrOHbafjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo0NDowN1rOHbbwtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNzY2MQ==", "bodyText": "In current logic, if an exactly same container exists, the passed in container won't be added to final result. I wonder if we can still return the existing container in final result because its id is useful for closed source container creation logic.\nFor example: container creation involves two steps:  1. create container in ambry account service.  2. set up ACLs for this container.\nIf previous request succeeded on step 1 but failed on step 2 (i.e. ACL service is unavailable), the whole operation is not successful. We should allow user to retry, to be more accurate, retry the step 2 (which requires container id). So I suggest returning the existing container in result even for same container case. Thus, the caller can get container id and retry on setting up ACLs.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r498507661", "createdAt": "2020-10-01T20:54:28Z", "author": {"login": "jsjtzyy"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "diffHunk": "@@ -68,6 +77,84 @@ public Account getAccountById(short id) {\n     return accountInfoMapRef.get().getAccounts();\n   }\n \n+  @Override\n+  public Collection<Container> updateContainers(String accountName, Collection<Container> containers)\n+      throws AccountServiceException {\n+    checkOpen();\n+    // input validation\n+    if (accountName == null || accountName.isEmpty() || containers == null || containers.isEmpty()) {\n+      throw new AccountServiceException(\"Account or container is null or empty\", AccountServiceErrorCode.BadRequest);\n+    }\n+    Account account = getAccountByName(accountName);\n+    if (account == null) {\n+      logger.error(\"Account {} is not found\", accountName);\n+      throw new AccountServiceException(\"Account \" + accountName + \" is not found\", AccountServiceErrorCode.NotFound);\n+    }\n+\n+    List<Container> resolvedContainers = new ArrayList<>();\n+    // create a hashmap to map the name to existing containers in account\n+    Map<String, Container> existingContainersInAccount = new HashMap<>();\n+    account.getAllContainers().forEach(c -> existingContainersInAccount.put(c.getName(), c));\n+\n+    // Generate container ids for new containers\n+    short nextContainerId = account.getAllContainers()\n+        .stream()\n+        .map(Container::getId)\n+        .max(Short::compareTo)\n+        .map(maxId -> (short) (maxId + 1))\n+        .orElse(config.containerIdStartNumber);\n+\n+    for (Container container : containers) {\n+      if (container.getId() == Container.UNKNOWN_CONTAINER_ID) {\n+        // new container\n+        // make sure there is no conflicting container (conflicting means a container with same name but different attributes already exists).\n+        Container existingContainer = existingContainersInAccount.get(container.getName());\n+        if (existingContainer != null) {\n+          if (existingContainer.isSameContainer(container)) {\n+            // If an exactly same container already exists, ignore it. Adding same container multiple times is no-op.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "815343d978a16a3f51c8d0db06d5da00da67fb0f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyODQzNg==", "bodyText": "This makes sense.  Existing containers are not included in the return list.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r498528436", "createdAt": "2020-10-01T21:44:07Z", "author": {"login": "lightningrob"}, "path": "ambry-account/src/main/java/com/github/ambry/account/AbstractAccountService.java", "diffHunk": "@@ -68,6 +77,84 @@ public Account getAccountById(short id) {\n     return accountInfoMapRef.get().getAccounts();\n   }\n \n+  @Override\n+  public Collection<Container> updateContainers(String accountName, Collection<Container> containers)\n+      throws AccountServiceException {\n+    checkOpen();\n+    // input validation\n+    if (accountName == null || accountName.isEmpty() || containers == null || containers.isEmpty()) {\n+      throw new AccountServiceException(\"Account or container is null or empty\", AccountServiceErrorCode.BadRequest);\n+    }\n+    Account account = getAccountByName(accountName);\n+    if (account == null) {\n+      logger.error(\"Account {} is not found\", accountName);\n+      throw new AccountServiceException(\"Account \" + accountName + \" is not found\", AccountServiceErrorCode.NotFound);\n+    }\n+\n+    List<Container> resolvedContainers = new ArrayList<>();\n+    // create a hashmap to map the name to existing containers in account\n+    Map<String, Container> existingContainersInAccount = new HashMap<>();\n+    account.getAllContainers().forEach(c -> existingContainersInAccount.put(c.getName(), c));\n+\n+    // Generate container ids for new containers\n+    short nextContainerId = account.getAllContainers()\n+        .stream()\n+        .map(Container::getId)\n+        .max(Short::compareTo)\n+        .map(maxId -> (short) (maxId + 1))\n+        .orElse(config.containerIdStartNumber);\n+\n+    for (Container container : containers) {\n+      if (container.getId() == Container.UNKNOWN_CONTAINER_ID) {\n+        // new container\n+        // make sure there is no conflicting container (conflicting means a container with same name but different attributes already exists).\n+        Container existingContainer = existingContainersInAccount.get(container.getName());\n+        if (existingContainer != null) {\n+          if (existingContainer.isSameContainer(container)) {\n+            // If an exactly same container already exists, ignore it. Adding same container multiple times is no-op.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNzY2MQ=="}, "originalCommit": {"oid": "815343d978a16a3f51c8d0db06d5da00da67fb0f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTA4Mjg3OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/account/AccountCollectionSerde.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjozNjo0MlrOHbczoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzoxMjoxM1rOHbdZ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NTU2OA==", "bodyText": "Not necessary to do in this PR, but I was wondering why this wasn't just added as a method in the Account class, like Account.toJson(boolean includeContainers).", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r498545568", "createdAt": "2020-10-01T22:36:42Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com/github/ambry/account/AccountCollectionSerde.java", "diffHunk": "@@ -57,4 +57,46 @@ public static JSONObject toJson(Collection<Account> accounts) {\n       return accounts;\n     }\n   }\n+\n+  /**\n+   * Serialize an account to a json object, stripping out its containers.\n+   * @param account the {@link Account}s to serialize.\n+   * @return the {@link JSONObject}\n+   */\n+  public static JSONObject accountToJsonNoContainers(Account account) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66297761df4f5c6b5b2c72202aa3444f9379d649"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1NTM0Nw==", "bodyText": "We could.  It seemed like a bit too much of a special case to include it there, maybe it's okay.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r498555347", "createdAt": "2020-10-01T23:12:13Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/account/AccountCollectionSerde.java", "diffHunk": "@@ -57,4 +57,46 @@ public static JSONObject toJson(Collection<Account> accounts) {\n       return accounts;\n     }\n   }\n+\n+  /**\n+   * Serialize an account to a json object, stripping out its containers.\n+   * @param account the {@link Account}s to serialize.\n+   * @return the {@link JSONObject}\n+   */\n+  public static JSONObject accountToJsonNoContainers(Account account) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NTU2OA=="}, "originalCommit": {"oid": "66297761df4f5c6b5b2c72202aa3444f9379d649"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTEyMDExOnYy", "diffSide": "RIGHT", "path": "ambry-frontend/src/main/java/com/github/ambry/frontend/PostAccountsHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjo1NzozOVrOHbdK4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjo1NzozOVrOHbdK4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1MTUyMg==", "bodyText": "It may be better to use RestUtils.getRequestPath(restRequest).matchesOperation(UPDATE_ACCOUNT_CONTAINERS) here.\nThis will ensure that prefixes such as the cluster name or the CDN path prefixes are stripped of correctly (not that this specific API will necessarily encounter them since it is an internal, non-blob ID based API) and handles edge cases relating to leading/trailing slashes. Still, I think it's good to keep things consistent with how operations are dealt with in other places.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r498551522", "createdAt": "2020-10-01T22:57:39Z", "author": {"login": "cgtz"}, "path": "ambry-frontend/src/main/java/com/github/ambry/frontend/PostAccountsHandler.java", "diffHunk": "@@ -135,11 +141,57 @@ private void start() {\n      */\n     private Callback<Long> fetchAccountUpdateBodyCallback(RetainingAsyncWritableChannel channel) {\n       return buildCallback(frontendMetrics.postAccountsReadRequestMetrics, bytesRead -> {\n-        updateAccounts(readJsonFromChannel(channel));\n+        JSONObject jsonPayload = readJsonFromChannel(channel);\n+        ReadableStreamChannel outputChannel;\n+        if (restRequest.getPath().startsWith(Operations.UPDATE_ACCOUNT_CONTAINERS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66297761df4f5c6b5b2c72202aa3444f9379d649"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTEzMDkzOnYy", "diffSide": "RIGHT", "path": "ambry-frontend/src/main/java/com/github/ambry/frontend/PostAccountsHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzowNDoxNlrOHbdRcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzowNDoxNlrOHbdRcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1MzIwMg==", "bodyText": "hmm, I really should have put this blocking work in a thread pool instead of running it directly in the preceding callback. I guess we can do that at in the future.", "url": "https://github.com/linkedin/ambry/pull/1634#discussion_r498553202", "createdAt": "2020-10-01T23:04:16Z", "author": {"login": "cgtz"}, "path": "ambry-frontend/src/main/java/com/github/ambry/frontend/PostAccountsHandler.java", "diffHunk": "@@ -135,11 +141,57 @@ private void start() {\n      */\n     private Callback<Long> fetchAccountUpdateBodyCallback(RetainingAsyncWritableChannel channel) {\n       return buildCallback(frontendMetrics.postAccountsReadRequestMetrics, bytesRead -> {\n-        updateAccounts(readJsonFromChannel(channel));\n+        JSONObject jsonPayload = readJsonFromChannel(channel);\n+        ReadableStreamChannel outputChannel;\n+        if (restRequest.getPath().startsWith(Operations.UPDATE_ACCOUNT_CONTAINERS)) {\n+          logger.debug(\"Got request for {} with payload {}\", Operations.UPDATE_ACCOUNT_CONTAINERS, jsonPayload);\n+          JSONObject outputPayload = updateContainers(jsonPayload);\n+          outputChannel = serializeJsonToChannel(outputPayload);\n+        } else {\n+          updateAccounts(jsonPayload);\n+          outputChannel = new ByteBufferReadableStreamChannel(ByteBuffer.allocate(0));\n+        }\n         restResponseChannel.setHeader(RestUtils.Headers.DATE, new GregorianCalendar().getTime());\n-        restResponseChannel.setHeader(RestUtils.Headers.CONTENT_LENGTH, 0);\n-        finalCallback.onCompletion(null, null);\n-      }, uri, LOGGER, finalCallback);\n+        restResponseChannel.setHeader(RestUtils.Headers.CONTENT_TYPE, RestUtils.JSON_CONTENT_TYPE);\n+        restResponseChannel.setHeader(RestUtils.Headers.CONTENT_LENGTH, outputChannel.getSize());\n+        finalCallback.onCompletion(outputChannel, null);\n+      }, uri, logger, finalCallback);\n+    }\n+\n+    /**\n+     * Process the request json and call {@link AccountService#updateContainers} to add or update containers.\n+     * @param containersPayload the request json containing the containers to update.\n+     * @throws RestServiceException\n+     */\n+    private JSONObject updateContainers(JSONObject containersPayload) throws RestServiceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66297761df4f5c6b5b2c72202aa3444f9379d649"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1401, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}