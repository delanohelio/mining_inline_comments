{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MTg4MDU1", "number": 1370, "title": "Add undelete request and response", "bodyText": "Adding undelete request and response and prepare RequestAPI to handle undelete request.", "createdAt": "2020-01-28T19:30:06Z", "url": "https://github.com/linkedin/ambry/pull/1370", "merged": true, "mergeCommit": {"oid": "c19f16e1d7f646bd1974ae7a815f65fceb37c264"}, "closed": true, "closedAt": "2020-02-05T02:32:56Z", "author": {"login": "justinlin-linkedin"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-4ujdAFqTM0OTczNzEzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBMxEmAFqTM1MzQzMTExMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NzM3MTMw", "url": "https://github.com/linkedin/ambry/pull/1370#pullrequestreview-349737130", "createdAt": "2020-01-28T22:03:45Z", "commit": {"oid": "bdff6c9b14f5a407530e58c7767e29b3d98923e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjowMzo0NVrOFi2OZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjowMzo0NVrOFi2OZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NDMyNg==", "bodyText": "Why this method removed?", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r372084326", "createdAt": "2020-01-28T22:03:45Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/main/java/com.github.ambry.server/AmbryServerRequests.java", "diffHunk": "@@ -100,39 +100,6 @@\n     localPartitionToReplicaMap = createLocalPartitionToReplicaMap();\n   }\n \n-  @Override\n-  public void handleRequests(NetworkRequest request) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdff6c9b14f5a407530e58c7767e29b3d98923e6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzUzODA3", "url": "https://github.com/linkedin/ambry/pull/1370#pullrequestreview-353353807", "createdAt": "2020-02-04T22:39:30Z", "commit": {"oid": "bdff6c9b14f5a407530e58c7767e29b3d98923e6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjozOTozMVrOFlmATA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDowNjoxM1rOFln1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2NDMwMA==", "bodyText": "typo contains the partition", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r374964300", "createdAt": "2020-02-04T22:39:31Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java", "diffHunk": "@@ -80,4 +80,14 @@\n   default void handleAdminRequest(NetworkRequest request) throws InterruptedException, IOException {\n     throw new UnsupportedOperationException(\"Admin request not supported on this node\");\n   }\n+\n+  /**\n+   * Undelete the blob from the store.\n+   * @param request the request that contains the partitioni and the id of the blob that needs to be undeleted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdff6c9b14f5a407530e58c7767e29b3d98923e6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2NTc3Nw==", "bodyText": "I don't think we need to explicitly use default here.", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r374965777", "createdAt": "2020-02-04T22:43:07Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java", "diffHunk": "@@ -80,4 +80,14 @@\n   default void handleAdminRequest(NetworkRequest request) throws InterruptedException, IOException {\n     throw new UnsupportedOperationException(\"Admin request not supported on this node\");\n   }\n+\n+  /**\n+   * Undelete the blob from the store.\n+   * @param request the request that contains the partitioni and the id of the blob that needs to be undeleted.\n+   * @throws IOException if there are I/O errors carrying our the required operation.\n+   * @throws InterruptedException if request processing is interrupted.\n+   */\n+  default void handleUndeleteRequest(NetworkRequest request) throws InterruptedException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdff6c9b14f5a407530e58c7767e29b3d98923e6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3NTQzOA==", "bodyText": "can you also append operationTimeMs ?", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r374975438", "createdAt": "2020-02-04T23:08:11Z", "author": {"login": "jsjtzyy"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/UndeleteRequest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.protocol;\n+\n+import com.github.ambry.clustermap.ClusterMap;\n+import com.github.ambry.commons.BlobId;\n+import com.github.ambry.utils.Utils;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.WritableByteChannel;\n+\n+\n+/**\n+ * Undelete request to undelete a deleted blob.\n+ */\n+public class UndeleteRequest extends RequestOrResponse {\n+  static final short UNDELETE_REQUEST_VERSION_1 = 1;\n+  private final static short CURRENT_VERSION = UNDELETE_REQUEST_VERSION_1;\n+\n+  private int sizeSent = 0;\n+  private final BlobId blobId;\n+  private final long operationTimeMs;\n+\n+  /**\n+   * Constructs {@link UndeleteRequest} in {@link #UNDELETE_REQUEST_VERSION_1}.\n+   * @param correlationId correlationId of the undelete request\n+   * @param clientId clientId of the undelete request\n+   * @param blobId blobId of the undelete request\n+   * @param operationTimeMs the time when this operation is created (in ms).\n+   */\n+  public UndeleteRequest(int correlationId, String clientId, BlobId blobId, long operationTimeMs) {\n+    this(correlationId, clientId, blobId, operationTimeMs, CURRENT_VERSION);\n+  }\n+\n+  /**\n+   * Constructs {@link UndeleteRequest} in given version.\n+   * @param correlationId correlationId of the undelete request\n+   * @param clientId clientId of the undelete request\n+   * @param blobId blobId of the undelete request\n+   * @param operationTimeMs the time when this operation is created (in ms).\n+   * @param version version of the {@link UndeleteRequest}.\n+   */\n+  public UndeleteRequest(int correlationId, String clientId, BlobId blobId, long operationTimeMs, short version) {\n+    super(RequestOrResponseType.UndeleteRequest, version, correlationId, clientId);\n+    this.blobId = blobId;\n+    this.operationTimeMs = operationTimeMs;\n+    sizeSent = 0;\n+  }\n+\n+  public static UndeleteRequest readFrom(DataInputStream stream, ClusterMap map) throws IOException {\n+    Short version = stream.readShort();\n+    if (version != UNDELETE_REQUEST_VERSION_1) {\n+      throw new IllegalStateException(\"Unknown undelete request version \" + version);\n+    }\n+    int correlationId = stream.readInt();\n+    String clientId = Utils.readIntString(stream);\n+    BlobId id = new BlobId(stream, map);\n+    long operationTimeMs = stream.readLong();\n+    return new UndeleteRequest(correlationId, clientId, id, operationTimeMs);\n+  }\n+\n+  @Override\n+  public long writeTo(WritableByteChannel channel) throws IOException {\n+    long written = 0;\n+    if (bufferToSend == null) {\n+      bufferToSend = ByteBuffer.allocate((int) sizeInBytes());\n+      writeHeader();\n+      bufferToSend.put(blobId.toBytes());\n+      bufferToSend.putLong(operationTimeMs);\n+      bufferToSend.flip();\n+    }\n+    if (bufferToSend.remaining() > 0) {\n+      written = channel.write(bufferToSend);\n+      sizeSent += written;\n+    }\n+    return written;\n+  }\n+\n+  @Override\n+  public boolean isSendComplete() {\n+    return sizeSent == sizeInBytes();\n+  }\n+\n+  @Override\n+  public long sizeInBytes() {\n+    // header + blobId\n+    return super.sizeInBytes() + blobId.sizeInBytes() + Long.BYTES;\n+  }\n+\n+  /**\n+   * Return blob id.\n+   * @return The {@link BlobId}.\n+   */\n+  public BlobId getBlobId() {\n+    return blobId;\n+  }\n+\n+  /**\n+   * Return the account id for the blob to be undeleted.\n+   * @return the account ID.\n+   */\n+  public short getAccountId() {\n+    return blobId.getAccountId();\n+  }\n+\n+  /**\n+   * Return the container id for the blob to be undeleted.\n+   * @return the container id.\n+   */\n+  public short getContainerId() {\n+    return blobId.getContainerId();\n+  }\n+\n+  /**\n+   * Return the operationTimeMs.\n+   * @return the operationTimeMs.\n+   */\n+  public long getOperationTimeMs() {\n+    return operationTimeMs;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"UndeleteRequest[\");\n+    sb.append(\"BlobID=\").append(blobId);\n+    sb.append(\", \").append(\"PartitionId=\").append(blobId.getPartition());\n+    sb.append(\", \").append(\"ClientId=\").append(clientId);\n+    sb.append(\", \").append(\"CorrelationId=\").append(correlationId);\n+    sb.append(\", \").append(\"AccountId=\").append(blobId.getAccountId());\n+    sb.append(\", \").append(\"ContainerId=\").append(blobId.getContainerId());\n+    sb.append(\"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdff6c9b14f5a407530e58c7767e29b3d98923e6"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NDIyOQ==", "bodyText": "Can you explain a little more about this exception?", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r374994229", "createdAt": "2020-02-05T00:06:13Z", "author": {"login": "jsjtzyy"}, "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/UndeleteResponse.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.protocol;\n+\n+import com.github.ambry.server.ServerErrorCode;\n+import com.github.ambry.utils.Utils;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.WritableByteChannel;\n+\n+\n+/**\n+ * Response of undelete rqeuest.\n+ */\n+public class UndeleteResponse extends Response {\n+  private static final short UNDELETE_RESPONSE_VERSION_1 = 1;\n+  public static final short INVALID_LIFE_VERSION = -1;\n+\n+  private short lifeVersion;\n+  private static final int Life_Version_InBytes = Short.BYTES;\n+\n+  /**\n+   * Constructs a {@link UndeleteResponse} with an {@link ServerErrorCode}.\n+   * @param correlationId correlationId of the undelete response.\n+   * @param clientId clientId of the undelete response.\n+   * @param error error code returned in this undelete response.\n+   */\n+  public UndeleteResponse(int correlationId, String clientId, ServerErrorCode error) {\n+    super(RequestOrResponseType.UndeleteResponse, UNDELETE_RESPONSE_VERSION_1, correlationId, clientId, error);\n+    if (error == ServerErrorCode.No_Error) {\n+      throw new IllegalArgumentException(\"NoError is not a valid error code\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdff6c9b14f5a407530e58c7767e29b3d98923e6"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "783d829dee695e3195a4fc698c544510ef6c3453", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/783d829dee695e3195a4fc698c544510ef6c3453", "committedDate": "2020-02-05T00:43:59Z", "message": "Add undelete request and response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ffed96fa824e56f12b93d233e7770228afdc64c", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/6ffed96fa824e56f12b93d233e7770228afdc64c", "committedDate": "2020-02-05T00:43:59Z", "message": "Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31e50c65f2ae504621771ca213a53f08c32f677d", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/31e50c65f2ae504621771ca213a53f08c32f677d", "committedDate": "2020-02-05T00:43:59Z", "message": "Add operationTimeMs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65cac6803772676547b8deffa19aa6bc57ea9a51", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/65cac6803772676547b8deffa19aa6bc57ea9a51", "committedDate": "2020-02-05T00:48:49Z", "message": "Comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bdff6c9b14f5a407530e58c7767e29b3d98923e6", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/bdff6c9b14f5a407530e58c7767e29b3d98923e6", "committedDate": "2020-01-28T21:59:59Z", "message": "Add operationTimeMs"}, "afterCommit": {"oid": "65cac6803772676547b8deffa19aa6bc57ea9a51", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/65cac6803772676547b8deffa19aa6bc57ea9a51", "committedDate": "2020-02-05T00:48:49Z", "message": "Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDE0Njk3", "url": "https://github.com/linkedin/ambry/pull/1370#pullrequestreview-353414697", "createdAt": "2020-02-05T01:23:11Z", "commit": {"oid": "65cac6803772676547b8deffa19aa6bc57ea9a51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDMxMTEx", "url": "https://github.com/linkedin/ambry/pull/1370#pullrequestreview-353431111", "createdAt": "2020-02-05T02:22:32Z", "commit": {"oid": "65cac6803772676547b8deffa19aa6bc57ea9a51"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoyMjozMlrOFlp9XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoyMjozMlrOFlp9XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyOTA4NA==", "bodyText": "I see.", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r375029084", "createdAt": "2020-02-05T02:22:32Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java", "diffHunk": "@@ -80,4 +80,14 @@\n   default void handleAdminRequest(NetworkRequest request) throws InterruptedException, IOException {\n     throw new UnsupportedOperationException(\"Admin request not supported on this node\");\n   }\n+\n+  /**\n+   * Undelete the blob from the store.\n+   * @param request the request that contains the partitioni and the id of the blob that needs to be undeleted.\n+   * @throws IOException if there are I/O errors carrying our the required operation.\n+   * @throws InterruptedException if request processing is interrupted.\n+   */\n+  default void handleUndeleteRequest(NetworkRequest request) throws InterruptedException, IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2NTc3Nw=="}, "originalCommit": {"oid": "bdff6c9b14f5a407530e58c7767e29b3d98923e6"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1582, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}