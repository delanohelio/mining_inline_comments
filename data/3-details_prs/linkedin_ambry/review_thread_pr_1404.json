{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMTA2NjU3", "number": 1404, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTo0MToxNlrODn_jkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxOTo1OFrODq9HlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjYyMzUyOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTo0MToxNlrOF2UJNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoyNjoxNVrOF42ZZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NzQ2Mg==", "bodyText": "this looks good, but can you add a test case for this logic?", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r392497462", "createdAt": "2020-03-13T21:41:16Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NTgxNQ==", "bodyText": "+1, I guess we can at least test the case where the channel becomes inactive", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r395155815", "createdAt": "2020-03-19T16:26:15Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NzQ2Mg=="}, "originalCommit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjYyNTM3OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTo0MTo0NlrOF2UKMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTo0MTo0NlrOF2UKMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NzcxMg==", "bodyText": "the exception should be ClosedChannelException, not null.", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r392497712", "createdAt": "2020-03-13T21:41:46Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {\n+      // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n+      if (ctx.channel().isActive()) {\n+        logger.warn(\"Channel should be inactive status. {}\", ctx.channel());\n+      } else {\n+        logger.debug(\"Scheduling a chunk cleanup on channel {} because response channel is closed.\", ctx.channel());\n+        writeFuture.addListener(new CleanupCallback(new ClosedChannelException()));\n+      }\n+      FutureResult<Long> future = new FutureResult<Long>();\n+      future.done(-1L, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTI4NTE4OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoyNDo1MVrOF42Vng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoyNDo1MVrOF42Vng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NDg0Ng==", "bodyText": "Also call the callback here?", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r395154846", "createdAt": "2020-03-19T16:24:51Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {\n+      // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n+      if (ctx.channel().isActive()) {\n+        logger.warn(\"Channel should be inactive status. {}\", ctx.channel());\n+      } else {\n+        logger.debug(\"Scheduling a chunk cleanup on channel {} because response channel is closed.\", ctx.channel());\n+        writeFuture.addListener(new CleanupCallback(new ClosedChannelException()));\n+      }\n+      FutureResult<Long> future = new FutureResult<Long>();\n+      future.done(-1L, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTI5MjA0OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoyNjozN1rOF42aVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoyNjozN1rOF42aVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NjA1NA==", "bodyText": "Could you add a metric for this? We can set up an alert if this case ever occurs.", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r395156054", "createdAt": "2020-03-19T16:26:37Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {\n+      // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n+      if (ctx.channel().isActive()) {\n+        logger.warn(\"Channel should be inactive status. {}\", ctx.channel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754de3db73e00af5099edc66da8c4c9741257f13"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzYxNzQ3OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1OTo0MFrOF7A4bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1OTo0MFrOF7A4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNDc0OA==", "bodyText": "add \"in channelInactiveTest()\"", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r397424748", "createdAt": "2020-03-24T19:59:40Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1713,3 +1746,221 @@ void compareWithFuture() throws InterruptedException, TimeoutException {\n     }\n   }\n }\n+\n+/**\n+ * Mock class for ChannelHandlerContext used in .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa39c5f48dd2d8f2148065458d387465a620746"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzY3OTk0OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxOToyOFrOF7BgPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxOToyOFrOF7BgPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDk0MQ==", "bodyText": "please add a fail(\"\") after future.get();", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r397434941", "createdAt": "2020-03-24T20:19:28Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java", "diffHunk": "@@ -636,6 +647,28 @@ public void closeTest() {\n     assertFalse(\"Channel should be closed\", channel.isOpen());\n   }\n \n+  /**\n+   * ClosedChannelException is expected when write to a NettyResponseChannel and channel is inactive.\n+   */\n+  @Test\n+  public void channelInactiveTest() {\n+    // request is keep-alive by default.\n+    HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString());\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler);\n+    NettyResponseChannel nettyResponseChannel =\n+        new NettyResponseChannel(new MockChannelHandlerContext(channel), new NettyMetrics(new MetricRegistry()),\n+            new PerformanceConfig(new VerifiableProperties(new Properties())));\n+    channel.disconnect().awaitUninterruptibly();\n+    assertFalse(\"Channel should be closed\", channel.isOpen());\n+    Future<Long> future = nettyResponseChannel.write(Unpooled.buffer(1), null);\n+    try {\n+      future.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa39c5f48dd2d8f2148065458d387465a620746"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzY4MTQ4OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxOTo1OFrOF7BhQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxOTo1OFrOF7BhQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNTIwMw==", "bodyText": "It seems like this may fit better as a counter, looking at other similar metrics (see line 107-113). However, they both should work about the same in practice, so if you prefer Meter keep it as is.", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r397435203", "createdAt": "2020-03-24T20:19:58Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyMetrics.java", "diffHunk": "@@ -170,6 +171,8 @@ public NettyMetrics(MetricRegistry metricRegistry) {\n     publicAccessLogRequestRate =\n         metricRegistry.meter(MetricRegistry.name(PublicAccessLogHandler.class, \"RequestArrivalRate\"));\n     healthCheckRequestRate = metricRegistry.meter(MetricRegistry.name(HealthCheckHandler.class, \"RequestArrivalRate\"));\n+    channelStatusInconsistent =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa39c5f48dd2d8f2148065458d387465a620746"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1743, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}