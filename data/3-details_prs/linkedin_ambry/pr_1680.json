{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNzA2NDE3", "number": 1680, "title": "Check data integrity before loading sealed index segment to memory", "bodyText": "Previously, sealed index segment is mapped to memory map/buffer without a full read. This may ignore potential corrupted data. Recently, we saw corrupted index file being loaded to memory on production host and kept throwing exception on invalid data. This PR adds an explicit full read ahead of mapping process to ensure each index entry and CRC value are correct.", "createdAt": "2020-11-01T22:45:55Z", "url": "https://github.com/linkedin/ambry/pull/1680", "merged": true, "mergeCommit": {"oid": "1607b1751f455d39dbebbf8d5bff18081503c53f"}, "closed": true, "closedAt": "2020-11-03T23:27:30Z", "author": {"login": "jsjtzyy"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYt-aZgFqTUyMjEyNDEwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZBviLAFqTUyMjk0NjgyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTI0MTAx", "url": "https://github.com/linkedin/ambry/pull/1680#pullrequestreview-522124101", "createdAt": "2020-11-03T00:25:19Z", "commit": {"oid": "64bf66acf9697b311539c2333cc4d98b3dd39a7b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8de5a6d429f6c9c993f49a38e04ef20ad2527192", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/8de5a6d429f6c9c993f49a38e04ef20ad2527192", "committedDate": "2020-11-03T04:50:51Z", "message": "Check data integrity before loading sealed index segment to memory\n\nPreviously, sealed index segment is mapped to memory map/buffer without a full read.\nThis may ignore potential corrupted data. Recently, we saw corrupted index file being\nloaded to memory on production host and kept throwing exception on invalid data.\nThis PR adds an explicit full read ahead of mapping process to ensure file content and\nCRC value are correct."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64bf66acf9697b311539c2333cc4d98b3dd39a7b", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/64bf66acf9697b311539c2333cc4d98b3dd39a7b", "committedDate": "2020-11-01T22:43:13Z", "message": "Check data integrity when loading sealed index segment to memory\n\nPreviously, seal index segment is mapped to memory map/buffer without a full read. This\nmay ignore potential corrupted data. Recently, we saw corrupted index file being loaded\nto memory on production host and kept throwing exception on invalid data. This PR adds\nan explicit full read ahead of mapping to ensure each index entry and crc value are correct."}, "afterCommit": {"oid": "8de5a6d429f6c9c993f49a38e04ef20ad2527192", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/8de5a6d429f6c9c993f49a38e04ef20ad2527192", "committedDate": "2020-11-03T04:50:51Z", "message": "Check data integrity before loading sealed index segment to memory\n\nPreviously, sealed index segment is mapped to memory map/buffer without a full read.\nThis may ignore potential corrupted data. Recently, we saw corrupted index file being\nloaded to memory on production host and kept throwing exception on invalid data.\nThis PR adds an explicit full read ahead of mapping process to ensure file content and\nCRC value are correct."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f35a6065b0c6f477ab794cb23164d90f53207d7", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/1f35a6065b0c6f477ab794cb23164d90f53207d7", "committedDate": "2020-11-03T04:57:17Z", "message": "minor change in unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTk4Nzg3", "url": "https://github.com/linkedin/ambry/pull/1680#pullrequestreview-522198787", "createdAt": "2020-11-03T05:35:47Z", "commit": {"oid": "1f35a6065b0c6f477ab794cb23164d90f53207d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTozNTo0N1rOHsgwrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTozNTo0N1rOHsgwrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNjE0Mg==", "bodyText": "I would recommend to directly use serEntries initialized below to create a CrcInputStream for data integrity validation. This is good for two reasons: 1. We don't have to read the file twice(although the second read would be just a memory copy) 2. We can deal with FileNotFoundException in the same manner.", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516436142", "createdAt": "2020-11-03T05:35:47Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -823,8 +824,9 @@ IndexValue getIndexValueOfLastPut() throws StoreException {\n    * Maps the segment of index either as a memory map or a in memory buffer depending on config.\n    * @throws StoreException if there are problems with the index\n    */\n-  private void map() throws StoreException {\n+  private void map() throws StoreException, FileNotFoundException {\n     rwLock.writeLock().lock();\n+    checkDataIntegrity(indexFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f35a6065b0c6f477ab794cb23164d90f53207d7"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee433e43798bbefc1881e20cc177b70e3fbe06e3", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/ee433e43798bbefc1881e20cc177b70e3fbe06e3", "committedDate": "2020-11-03T18:26:49Z", "message": "address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODAxNzAz", "url": "https://github.com/linkedin/ambry/pull/1680#pullrequestreview-522801703", "createdAt": "2020-11-03T19:13:04Z", "commit": {"oid": "ee433e43798bbefc1881e20cc177b70e3fbe06e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxMzowNVrOHs86EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxMzowNVrOHs86EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NzI5Ng==", "bodyText": "actually you don't have to copy bytebuffer to an byte array, Crc32 has a method to update CRC with ByteBuffer directly and it doesn't matter if it's heap bytebuffer or direct bytebuffer.", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516897296", "createdAt": "2020-11-03T19:13:05Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -1010,11 +1009,37 @@ private void readFromFile(File fileToRead, Journal journal) throws StoreExceptio\n     }\n   }\n \n+  /**\n+   * Check data integrity of index file (represented by byte buffer). This methods computes crc of byte buffer and\n+   * compares it with crc value at the end of file.\n+   * @throws StoreException\n+   */\n+  private void checkDataIntegrity() throws StoreException {\n+    byte[] byteArray;\n+    if (serEntries.hasArray()) {\n+      // this is for heap buffer only\n+      byteArray = serEntries.array();\n+    } else {\n+      // this is for non-heap (direct) buffer\n+      serEntries.position(0);\n+      byteArray = new byte[serEntries.capacity()];\n+      serEntries.get(byteArray, 0, serEntries.capacity());\n+    }\n+    Crc32 crc = new Crc32();\n+    crc.update(byteArray, 0, byteArray.length - CRC_FIELD_LENGTH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee433e43798bbefc1881e20cc177b70e3fbe06e3"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6513db3add950d2496cc48b1dac647d9dfefbf2", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/e6513db3add950d2496cc48b1dac647d9dfefbf2", "committedDate": "2020-11-03T19:51:51Z", "message": "use slice() method to get buffer to compute crc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODY1MjE1", "url": "https://github.com/linkedin/ambry/pull/1680#pullrequestreview-522865215", "createdAt": "2020-11-03T20:52:21Z", "commit": {"oid": "e6513db3add950d2496cc48b1dac647d9dfefbf2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTQ2ODIx", "url": "https://github.com/linkedin/ambry/pull/1680#pullrequestreview-522946821", "createdAt": "2020-11-03T23:27:10Z", "commit": {"oid": "e6513db3add950d2496cc48b1dac647d9dfefbf2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 972, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}