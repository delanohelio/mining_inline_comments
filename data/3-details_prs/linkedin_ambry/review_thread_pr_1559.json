{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMzI0NzMy", "number": 1559, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDoxMjo0OFrOEE493w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0Njo1MFrOEKO1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTYzMTAzOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDoxMjo0OFrOGiy3tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo0NjoyMVrOGkw2Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzODIzMA==", "bodyText": "we can make this static.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r439138230", "createdAt": "2020-06-12T00:12:48Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy{\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private final Logger logger = LoggerFactory.getLogger(getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMjE5OQ==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r441202199", "createdAt": "2020-06-16T23:46:21Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy{\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private final Logger logger = LoggerFactory.getLogger(getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzODIzMA=="}, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTYzMzk2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDoxMzozNlrOGiy5bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo1MjowNlrOGkw8jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzODY3MA==", "bodyText": "nit: need to format this file.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r439138670", "createdAt": "2020-06-12T00:13:36Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMzg1Mw==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r441203853", "createdAt": "2020-06-16T23:52:06Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzODY3MA=="}, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTY0MTI4OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDoxNTozOVrOGiy97g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo1Mjo1NlrOGkw9lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzOTgyMg==", "bodyText": "info logs seem to verbose. Can you change it to trace?", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r439139822", "createdAt": "2020-06-12T00:15:39Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy{\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final SafeCounterWithoutLock counter;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    counter = new SafeCounterWithoutLock();\n+  }\n+\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats)\n+      throws StoreException {\n+    return selectCompactionPolicy().getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity,\n+        segmentHeaderSize, logSegmentsNotInJournal, blobStoreStats);\n+  }\n+\n+  /**\n+   * Selects which compaction policy needs to be used for current compaction cycle.\n+   * @return CompactAllPolicy if the round number of compaction reach to storeConfig.storeCompactionPolicySwitchPeriod.\n+   * Othewise @return StatsBasedCompactionPolicy.\n+   */\n+  CompactionPolicy selectCompactionPolicy(){\n+    if (counter.incrementAndGet() == 0) {\n+      logger.info(\"Return CompactAllPolicy this round\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNDExNg==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r441204116", "createdAt": "2020-06-16T23:52:56Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy{\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final SafeCounterWithoutLock counter;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    counter = new SafeCounterWithoutLock();\n+  }\n+\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats)\n+      throws StoreException {\n+    return selectCompactionPolicy().getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity,\n+        segmentHeaderSize, logSegmentsNotInJournal, blobStoreStats);\n+  }\n+\n+  /**\n+   * Selects which compaction policy needs to be used for current compaction cycle.\n+   * @return CompactAllPolicy if the round number of compaction reach to storeConfig.storeCompactionPolicySwitchPeriod.\n+   * Othewise @return StatsBasedCompactionPolicy.\n+   */\n+  CompactionPolicy selectCompactionPolicy(){\n+    if (counter.incrementAndGet() == 0) {\n+      logger.info(\"Return CompactAllPolicy this round\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzOTgyMg=="}, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTY0MzczOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDoxNjoyMlrOGiy_ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo1MzozNVrOGkw-NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE0MDIxOQ==", "bodyText": "nit: Select which compaction policy to use ...", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r439140219", "createdAt": "2020-06-12T00:16:22Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy{\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final SafeCounterWithoutLock counter;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    counter = new SafeCounterWithoutLock();\n+  }\n+\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats)\n+      throws StoreException {\n+    return selectCompactionPolicy().getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity,\n+        segmentHeaderSize, logSegmentsNotInJournal, blobStoreStats);\n+  }\n+\n+  /**\n+   * Selects which compaction policy needs to be used for current compaction cycle.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNDI3Nw==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r441204277", "createdAt": "2020-06-16T23:53:35Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy{\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private final SafeCounterWithoutLock counter;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    counter = new SafeCounterWithoutLock();\n+  }\n+\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats)\n+      throws StoreException {\n+    return selectCompactionPolicy().getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity,\n+        segmentHeaderSize, logSegmentsNotInJournal, blobStoreStats);\n+  }\n+\n+  /**\n+   * Selects which compaction policy needs to be used for current compaction cycle.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE0MDIxOQ=="}, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTY2NjE2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDoyMzozOFrOGizNmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzozNzoxMVrOGla0ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE0MzgzMw==", "bodyText": "I don't feel good about the way we count the compaction round. All blobStore(partition) uses the same CompactionPolicy instance, they would interface each other and in some cases causes unexpected result.\nAssume we have 7 partitions in one host, and compaction manager trigger compaction on each one of them in the same order alway, p1, p2, p3...p7, p1, p2, p3... p7. In this case, P7 would always use CompactionAllPolicy and the other partitions would always use statsbased compaction policy.\nI think what we need is a per partition HybridCompactionPolicy. It can't be shared by partitions, because it's no longer a stateless object.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r439143833", "createdAt": "2020-06-12T00:23:38Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4OTg5OA==", "bodyText": "Thanks for the advise. Implemented with first approach that maintains a map which key is replicaId and value is the counter.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r441889898", "createdAt": "2020-06-17T23:37:11Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE0MzgzMw=="}, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODExNTU1OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStoreCompactor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo1Mzo0MlrOGjLEqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxMDoyMlrOGrIoWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNDc2MQ==", "bodyText": "Is this still a TODO?", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r439534761", "createdAt": "2020-06-12T16:53:42Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStoreCompactor.java", "diffHunk": "@@ -209,6 +209,7 @@ private void getDeprecatedContainers() {\n           deprecatedContainers.add(new Pair<>(container.getParentAccountId(), container.getId()));\n         }\n       });\n+      //TODO: Filter out the INACTIVE containers from deprecatedContainers set if it's already been compacted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MzM1NA==", "bodyText": "Yes. That's an optimize that I plan to implement in a separate pr.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447883354", "createdAt": "2020-06-30T18:10:22Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStoreCompactor.java", "diffHunk": "@@ -209,6 +209,7 @@ private void getDeprecatedContainers() {\n           deprecatedContainers.add(new Pair<>(container.getParentAccountId(), container.getId()));\n         }\n       });\n+      //TODO: Filter out the INACTIVE containers from deprecatedContainers set if it's already been compacted.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNDc2MQ=="}, "originalCommit": {"oid": "2d93b812d7ed78f8c47c4f87fe346177cf0d6360"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDYyMTQ5OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwNDowMzo1NlrOGmkngQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNTozNjoyM1rOGnZ8Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5OTAwOQ==", "bodyText": "we actually don't have to differentiate the compaction policy factory when creating and incrementing the couter. We can just increment it for every policy.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r443099009", "createdAt": "2020-06-20T04:03:56Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionManager.java", "diffHunk": "@@ -173,15 +178,30 @@ boolean removeBlobStore(BlobStore store) {\n     return true;\n   }\n \n+  /**\n+   * Get the current replicaToCounterMap policy.\n+   * @return {@link this.replicaToCounterMap}\n+   */\n+  Map<ReplicaId, CompactionPolicyCounter> getReplicaToCounterMap(){\n+    return this.replicaToCounterMap;\n+  }\n+\n   /**\n    * Get compaction details for a given {@link BlobStore} if any\n    * @param blobStore the {@link BlobStore} for which compaction details are requested\n    * @return the {@link CompactionDetails} containing the details about log segments that needs to be compacted.\n    * {@code null} if compaction is not required\n    * @throws StoreException when {@link BlobStore} is not started\n    */\n-  private CompactionDetails getCompactionDetails(BlobStore blobStore) throws StoreException {\n-    return blobStore.getCompactionDetails(compactionPolicy);\n+  CompactionDetails getCompactionDetails(BlobStore blobStore) throws StoreException {\n+    ReplicaId replicaId = blobStore.getReplicaId();\n+    if (compactionPolicyFactory != null && compactionPolicyFactory instanceof HybridCompactionPolicyFactory) {\n+      CompactionPolicyCounter compactionPolicyCounter =\n+          replicaToCounterMap.getOrDefault(replicaId, new CompactionPolicyCounter(storeConfig));\n+      compactionPolicyCounter.increment();\n+      replicaToCounterMap.put(replicaId, compactionPolicyCounter);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebd942e2fcfdc1f780c8f39ddca7677bcfad106"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MjYyMw==", "bodyText": "Move map inside Hybrid compaction policy.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r443972623", "createdAt": "2020-06-23T05:36:23Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionManager.java", "diffHunk": "@@ -173,15 +178,30 @@ boolean removeBlobStore(BlobStore store) {\n     return true;\n   }\n \n+  /**\n+   * Get the current replicaToCounterMap policy.\n+   * @return {@link this.replicaToCounterMap}\n+   */\n+  Map<ReplicaId, CompactionPolicyCounter> getReplicaToCounterMap(){\n+    return this.replicaToCounterMap;\n+  }\n+\n   /**\n    * Get compaction details for a given {@link BlobStore} if any\n    * @param blobStore the {@link BlobStore} for which compaction details are requested\n    * @return the {@link CompactionDetails} containing the details about log segments that needs to be compacted.\n    * {@code null} if compaction is not required\n    * @throws StoreException when {@link BlobStore} is not started\n    */\n-  private CompactionDetails getCompactionDetails(BlobStore blobStore) throws StoreException {\n-    return blobStore.getCompactionDetails(compactionPolicy);\n+  CompactionDetails getCompactionDetails(BlobStore blobStore) throws StoreException {\n+    ReplicaId replicaId = blobStore.getReplicaId();\n+    if (compactionPolicyFactory != null && compactionPolicyFactory instanceof HybridCompactionPolicyFactory) {\n+      CompactionPolicyCounter compactionPolicyCounter =\n+          replicaToCounterMap.getOrDefault(replicaId, new CompactionPolicyCounter(storeConfig));\n+      compactionPolicyCounter.increment();\n+      replicaToCounterMap.put(replicaId, compactionPolicyCounter);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5OTAwOQ=="}, "originalCommit": {"oid": "2ebd942e2fcfdc1f780c8f39ddca7677bcfad106"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDYyMjU1OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/StoreConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwNDowNjowMlrOGmkoCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNTozNjozNlrOGnZ8Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5OTE0Ng==", "bodyText": "let's set a limit here by using getInt(name, default, min, max). This would make sure that period would be 0 or negative number.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r443099146", "createdAt": "2020-06-20T04:06:02Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/config/StoreConfig.java", "diffHunk": "@@ -339,6 +346,7 @@ public StoreConfig(VerifiableProperties verifiableProperties) {\n     storeMaxNumberOfEntriesToReturnFromJournal =\n         verifiableProperties.getIntInRange(\"store.max.number.of.entries.to.return.from.journal\", 5000, 1, 10000);\n     storeDeletedMessageRetentionDays = verifiableProperties.getInt(\"store.deleted.message.retention.days\", 7);\n+    storeCompactionPolicySwitchPeriod = verifiableProperties.getInt(\"store.compaction.policy.switch.period\", 7);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebd942e2fcfdc1f780c8f39ddca7677bcfad106"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MjY2Nw==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r443972667", "createdAt": "2020-06-23T05:36:36Z", "author": {"login": "SophieGuo410"}, "path": "ambry-api/src/main/java/com/github/ambry/config/StoreConfig.java", "diffHunk": "@@ -339,6 +346,7 @@ public StoreConfig(VerifiableProperties verifiableProperties) {\n     storeMaxNumberOfEntriesToReturnFromJournal =\n         verifiableProperties.getIntInRange(\"store.max.number.of.entries.to.return.from.journal\", 5000, 1, 10000);\n     storeDeletedMessageRetentionDays = verifiableProperties.getInt(\"store.deleted.message.retention.days\", 7);\n+    storeCompactionPolicySwitchPeriod = verifiableProperties.getInt(\"store.compaction.policy.switch.period\", 7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5OTE0Ng=="}, "originalCommit": {"oid": "2ebd942e2fcfdc1f780c8f39ddca7677bcfad106"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDYyMzQ4OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicyCounter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwNDowODozNlrOGmkogw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNTozNjo0M1rOGnZ8WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5OTI2Nw==", "bodyText": "not used.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r443099267", "createdAt": "2020-06-20T04:08:36Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicyCounter.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import java.util.concurrent.atomic.AtomicInteger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebd942e2fcfdc1f780c8f39ddca7677bcfad106"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MjY5Nw==", "bodyText": "Removed.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r443972697", "createdAt": "2020-06-23T05:36:43Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicyCounter.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import java.util.concurrent.atomic.AtomicInteger;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5OTI2Nw=="}, "originalCommit": {"oid": "2ebd942e2fcfdc1f780c8f39ddca7677bcfad106"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDYyNzE2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwNDoxODowNFrOGmkqTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNTozNzo0MlrOGnZ9cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5OTcyNg==", "bodyText": "I was wonder if you would consider this way. Using BlobStoreStats to pass store id, which is essentially the same as replica id number, to CompactionPolicy. And in CompactionPolicy, we keep a map from store id to a counter? In this way, we don't have to change interface here.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r443099726", "createdAt": "2020-06-20T04:18:04Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicy.java", "diffHunk": "@@ -37,6 +37,6 @@\n    * @throws StoreException\n    */\n   CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n-      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats)\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, CompactionPolicyCounter compactionPolicyCounter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebd942e2fcfdc1f780c8f39ddca7677bcfad106"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3Mjk3OA==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r443972978", "createdAt": "2020-06-23T05:37:42Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicy.java", "diffHunk": "@@ -37,6 +37,6 @@\n    * @throws StoreException\n    */\n   CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n-      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats)\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, CompactionPolicyCounter compactionPolicyCounter)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5OTcyNg=="}, "originalCommit": {"oid": "2ebd942e2fcfdc1f780c8f39ddca7677bcfad106"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDYyNzMxOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicyCounter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwNDoxODozNlrOGmkqZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNTozNzoyNVrOGnZ9Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5OTc0OA==", "bodyText": "nit: drop public and make this class package-private.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r443099748", "createdAt": "2020-06-20T04:18:36Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicyCounter.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+\n+/**\n+ * A counter used to switch {@link CompactAllPolicy}.\n+ */\n+public class CompactionPolicyCounter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebd942e2fcfdc1f780c8f39ddca7677bcfad106"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MjkwMw==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r443972903", "createdAt": "2020-06-23T05:37:25Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicyCounter.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+\n+/**\n+ * A counter used to switch {@link CompactAllPolicy}.\n+ */\n+public class CompactionPolicyCounter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5OTc0OA=="}, "originalCommit": {"oid": "2ebd942e2fcfdc1f780c8f39ddca7677bcfad106"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTE2NDE1OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo1MDo0NlrOGprTGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo0NjowMlrOGqbkAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NDIwMw==", "bodyText": "why not just use jackson's objectmapper for de-serilization http://tutorials.jenkov.com/java-json/jackson-objectmapper.html#jackson-objectmapper-example. It would be just oneliner.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r446354203", "createdAt": "2020-06-26T18:50:46Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import static com.github.ambry.utils.Utils.*;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACTION_POLICY_COUNTER = \"compactionPolicyCounter\";\n+  private static final String VALUE = \"value\";\n+  private static final String LAST_COMPACT_ALL_TIME = \"lastCompactAllTime\";\n+  private static final String COMPACT_POLICY_INFO_PATH = \"/compactionPolicyInfo.\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   * @throws StoreException\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = blobToCompactionPolicySwitchInfoMap.getOrDefault(storeId,\n+        new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig), INIT_COMPACT_ALL_TIME));\n+    blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, null);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactionTime\" : 1593128052284\n+   * }\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private void recoverCompactionPolicySwitchInfo(CompactionPolicySwitchInfo compactionPolicySwitchInfo, File file) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769d92403ae7200c7fe1f3ea2ab5a116a6a7cac7"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0NDk2Mg==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447144962", "createdAt": "2020-06-29T17:46:02Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import static com.github.ambry.utils.Utils.*;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACTION_POLICY_COUNTER = \"compactionPolicyCounter\";\n+  private static final String VALUE = \"value\";\n+  private static final String LAST_COMPACT_ALL_TIME = \"lastCompactAllTime\";\n+  private static final String COMPACT_POLICY_INFO_PATH = \"/compactionPolicyInfo.\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   * @throws StoreException\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = blobToCompactionPolicySwitchInfoMap.getOrDefault(storeId,\n+        new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig), INIT_COMPACT_ALL_TIME));\n+    blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, null);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactionTime\" : 1593128052284\n+   * }\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private void recoverCompactionPolicySwitchInfo(CompactionPolicySwitchInfo compactionPolicySwitchInfo, File file) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NDIwMw=="}, "originalCommit": {"oid": "769d92403ae7200c7fe1f3ea2ab5a116a6a7cac7"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIxNzM0OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxMDo0NVrOGpr1Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo0NjoxMFrOGqbkTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MjkxOA==", "bodyText": "logger.error", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r446362918", "createdAt": "2020-06-26T19:10:45Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import static com.github.ambry.utils.Utils.*;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACTION_POLICY_COUNTER = \"compactionPolicyCounter\";\n+  private static final String VALUE = \"value\";\n+  private static final String LAST_COMPACT_ALL_TIME = \"lastCompactAllTime\";\n+  private static final String COMPACT_POLICY_INFO_PATH = \"/compactionPolicyInfo.\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   * @throws StoreException\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = blobToCompactionPolicySwitchInfoMap.getOrDefault(storeId,\n+        new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig), INIT_COMPACT_ALL_TIME));\n+    blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, null);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactionTime\" : 1593128052284\n+   * }\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private void recoverCompactionPolicySwitchInfo(CompactionPolicySwitchInfo compactionPolicySwitchInfo, File file) {\n+    try {\n+      JSONObject jsonObject = new JSONObject(readStringFromFile(file.toString()));\n+      JSONObject compactionPolicyCounter =\n+          jsonObject.has(COMPACTION_POLICY_COUNTER) ? jsonObject.getJSONObject(COMPACTION_POLICY_COUNTER) : null;\n+      int compactionPolicyCounterValue = INIT_COUNTER_VALUE;\n+      if (compactionPolicyCounter != null) {\n+        compactionPolicyCounterValue =\n+            compactionPolicyCounter.has(VALUE) ? compactionPolicyCounter.getInt(VALUE) : INIT_COUNTER_VALUE;\n+      } else {\n+        logger.trace(\"CompactionPolicyCounter is null\");\n+      }\n+      long lastCompactAllTime =\n+          jsonObject.has(LAST_COMPACT_ALL_TIME) ? jsonObject.getLong(LAST_COMPACT_ALL_TIME) : INIT_COMPACT_ALL_TIME;\n+      compactionPolicySwitchInfo.setLastCompactAllTime(lastCompactAllTime);\n+      compactionPolicySwitchInfo.getCompactionPolicyCounter().setValue(compactionPolicyCounterValue);\n+    } catch (IOException e) {\n+      logger.trace(\"tempFile : {} is not exist\", file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769d92403ae7200c7fe1f3ea2ab5a116a6a7cac7"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0NTAzOQ==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447145039", "createdAt": "2020-06-29T17:46:10Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import static com.github.ambry.utils.Utils.*;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACTION_POLICY_COUNTER = \"compactionPolicyCounter\";\n+  private static final String VALUE = \"value\";\n+  private static final String LAST_COMPACT_ALL_TIME = \"lastCompactAllTime\";\n+  private static final String COMPACT_POLICY_INFO_PATH = \"/compactionPolicyInfo.\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   * @throws StoreException\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = blobToCompactionPolicySwitchInfoMap.getOrDefault(storeId,\n+        new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig), INIT_COMPACT_ALL_TIME));\n+    blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, null);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactionTime\" : 1593128052284\n+   * }\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private void recoverCompactionPolicySwitchInfo(CompactionPolicySwitchInfo compactionPolicySwitchInfo, File file) {\n+    try {\n+      JSONObject jsonObject = new JSONObject(readStringFromFile(file.toString()));\n+      JSONObject compactionPolicyCounter =\n+          jsonObject.has(COMPACTION_POLICY_COUNTER) ? jsonObject.getJSONObject(COMPACTION_POLICY_COUNTER) : null;\n+      int compactionPolicyCounterValue = INIT_COUNTER_VALUE;\n+      if (compactionPolicyCounter != null) {\n+        compactionPolicyCounterValue =\n+            compactionPolicyCounter.has(VALUE) ? compactionPolicyCounter.getInt(VALUE) : INIT_COUNTER_VALUE;\n+      } else {\n+        logger.trace(\"CompactionPolicyCounter is null\");\n+      }\n+      long lastCompactAllTime =\n+          jsonObject.has(LAST_COMPACT_ALL_TIME) ? jsonObject.getLong(LAST_COMPACT_ALL_TIME) : INIT_COMPACT_ALL_TIME;\n+      compactionPolicySwitchInfo.setLastCompactAllTime(lastCompactAllTime);\n+      compactionPolicySwitchInfo.getCompactionPolicyCounter().setValue(compactionPolicyCounterValue);\n+    } catch (IOException e) {\n+      logger.trace(\"tempFile : {} is not exist\", file);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MjkxOA=="}, "originalCommit": {"oid": "769d92403ae7200c7fe1f3ea2ab5a116a6a7cac7"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTU1MDQ4OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyMjoxNFrOGpvDyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo0NjoxNlrOGqbkmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNTgxOA==", "bodyText": "we can make logic a bit better without checking file every time selecting a policy. Something like\nif (!blobToCompactionPolicySwitchInfos.contain(storeId)) {\n    File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH))\n    if (file.exists()) {\n        ObjectMapper objectMapper = new ObjectMapper();\n        CompactionPolicySwitchInfo switchInfo = objectMapper.readValue(file, CompactionPolicySwithInfo.class);\n        blobToCompactionPolicySwtichInfos.put(storeId, switchInfo);\n    } else {\n        blobToCompactionPolicySwtichInfos.put(storeId, new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig), INIT_COMPACT_ALL_TIME));\n    }\n}", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r446415818", "createdAt": "2020-06-26T21:22:14Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import static com.github.ambry.utils.Utils.*;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACTION_POLICY_COUNTER = \"compactionPolicyCounter\";\n+  private static final String VALUE = \"value\";\n+  private static final String LAST_COMPACT_ALL_TIME = \"lastCompactAllTime\";\n+  private static final String COMPACT_POLICY_INFO_PATH = \"/compactionPolicyInfo.\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   * @throws StoreException\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = blobToCompactionPolicySwitchInfoMap.getOrDefault(storeId,\n+        new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig), INIT_COMPACT_ALL_TIME));\n+    blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(dataDir, storeId, compactionPolicySwitchInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769d92403ae7200c7fe1f3ea2ab5a116a6a7cac7"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0NTExNQ==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447145115", "createdAt": "2020-06-29T17:46:16Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import static com.github.ambry.utils.Utils.*;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACTION_POLICY_COUNTER = \"compactionPolicyCounter\";\n+  private static final String VALUE = \"value\";\n+  private static final String LAST_COMPACT_ALL_TIME = \"lastCompactAllTime\";\n+  private static final String COMPACT_POLICY_INFO_PATH = \"/compactionPolicyInfo.\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   * @throws StoreException\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = blobToCompactionPolicySwitchInfoMap.getOrDefault(storeId,\n+        new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig), INIT_COMPACT_ALL_TIME));\n+    blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(dataDir, storeId, compactionPolicySwitchInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNTgxOA=="}, "originalCommit": {"oid": "769d92403ae7200c7fe1f3ea2ab5a116a6a7cac7"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTU1OTI3OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyNjoyMFrOGpvJUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo0NjoyM1rOGqbk3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzIzMw==", "bodyText": "you can omit leading slash for two reasons\n\nIt's less cross-platform compatible, we can always use File.separator. Not that it matters here, just a nice pattern.\nUse Paths.get is probably a better way to concatenate different parts of the file path.\n\nAlso, dataDir already has the partition id/replica id/store id as the last part of the filepath, we don't need to suffix storeId in the filename here. But we can add .json as extension, just to indicate this is a json formatted file.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r446417233", "createdAt": "2020-06-26T21:26:20Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import static com.github.ambry.utils.Utils.*;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACTION_POLICY_COUNTER = \"compactionPolicyCounter\";\n+  private static final String VALUE = \"value\";\n+  private static final String LAST_COMPACT_ALL_TIME = \"lastCompactAllTime\";\n+  private static final String COMPACT_POLICY_INFO_PATH = \"/compactionPolicyInfo.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769d92403ae7200c7fe1f3ea2ab5a116a6a7cac7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0NTE4Mg==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447145182", "createdAt": "2020-06-29T17:46:23Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import static com.github.ambry.utils.Utils.*;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACTION_POLICY_COUNTER = \"compactionPolicyCounter\";\n+  private static final String VALUE = \"value\";\n+  private static final String LAST_COMPACT_ALL_TIME = \"lastCompactAllTime\";\n+  private static final String COMPACT_POLICY_INFO_PATH = \"/compactionPolicyInfo.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzIzMw=="}, "originalCommit": {"oid": "769d92403ae7200c7fe1f3ea2ab5a116a6a7cac7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTU2MTgxOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyNzoyM1rOGpvK3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo0NjozMFrOGqblLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzYyOQ==", "bodyText": "please pass dataDir here.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r446417629", "createdAt": "2020-06-26T21:27:23Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import static com.github.ambry.utils.Utils.*;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACTION_POLICY_COUNTER = \"compactionPolicyCounter\";\n+  private static final String VALUE = \"value\";\n+  private static final String LAST_COMPACT_ALL_TIME = \"lastCompactAllTime\";\n+  private static final String COMPACT_POLICY_INFO_PATH = \"/compactionPolicyInfo.\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   * @throws StoreException\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = blobToCompactionPolicySwitchInfoMap.getOrDefault(storeId,\n+        new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig), INIT_COMPACT_ALL_TIME));\n+    blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769d92403ae7200c7fe1f3ea2ab5a116a6a7cac7"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0NTI2MQ==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447145261", "createdAt": "2020-06-29T17:46:30Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import static com.github.ambry.utils.Utils.*;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACTION_POLICY_COUNTER = \"compactionPolicyCounter\";\n+  private static final String VALUE = \"value\";\n+  private static final String LAST_COMPACT_ALL_TIME = \"lastCompactAllTime\";\n+  private static final String COMPACT_POLICY_INFO_PATH = \"/compactionPolicyInfo.\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   * @throws StoreException\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = blobToCompactionPolicySwitchInfoMap.getOrDefault(storeId,\n+        new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig), INIT_COMPACT_ALL_TIME));\n+    blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzYyOQ=="}, "originalCommit": {"oid": "769d92403ae7200c7fe1f3ea2ab5a116a6a7cac7"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzI3OTk3OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/StoreConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoxOToyMVrOGqgstg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowOToyMFrOGqj-EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyOTExMA==", "bodyText": "typo: swith-> switch", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447229110", "createdAt": "2020-06-29T20:19:21Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/main/java/com/github/ambry/config/StoreConfig.java", "diffHunk": "@@ -81,6 +81,13 @@\n   @Default(\"7\")\n   public final int storeDeletedMessageRetentionDays;\n \n+  /**\n+   * How often the HybridCompactionPolicy swith from StatsBasedCompactionPolicy to CompactAllPolicy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjcwNQ==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447282705", "createdAt": "2020-06-29T22:09:20Z", "author": {"login": "SophieGuo410"}, "path": "ambry-api/src/main/java/com/github/ambry/config/StoreConfig.java", "diffHunk": "@@ -81,6 +81,13 @@\n   @Default(\"7\")\n   public final int storeDeletedMessageRetentionDays;\n \n+  /**\n+   * How often the HybridCompactionPolicy swith from StatsBasedCompactionPolicy to CompactAllPolicy.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyOTExMA=="}, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzI4MzMyOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoyMDoyM1rOGqguxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowOTowNlrOGqj9tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyOTYzOQ==", "bodyText": "Looks like this method is not used.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447229639", "createdAt": "2020-06-29T20:20:23Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -1081,6 +1081,13 @@ public long getEndPositionOfLastPut() throws StoreException {\n     return replicaStatusDelegates;\n   }\n \n+  /**\n+   * @return a {@link ReplicaId} associated with this store\n+   */\n+  public ReplicaId getReplicaId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjYxMw==", "bodyText": "Removed.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447282613", "createdAt": "2020-06-29T22:09:06Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -1081,6 +1081,13 @@ public long getEndPositionOfLastPut() throws StoreException {\n     return replicaStatusDelegates;\n   }\n \n+  /**\n+   * @return a {@link ReplicaId} associated with this store\n+   */\n+  public ReplicaId getReplicaId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyOTYzOQ=="}, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzMwMTkyOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoyNTo1OFrOGqg6jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoyNTo1OFrOGqg6jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMjY1Mw==", "bodyText": "not used.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447232653", "createdAt": "2020-06-29T20:25:58Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionManager.java", "diffHunk": "@@ -13,12 +13,15 @@\n  */\n package com.github.ambry.store;\n \n+import com.github.ambry.clustermap.ReplicaId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzMwMjE2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoyNjowNFrOGqg6tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowOTozNFrOGqj-cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMjY5NA==", "bodyText": "not used.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447232694", "createdAt": "2020-06-29T20:26:04Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionManager.java", "diffHunk": "@@ -13,12 +13,15 @@\n  */\n package com.github.ambry.store;\n \n+import com.github.ambry.clustermap.ReplicaId;\n import com.github.ambry.config.StoreConfig;\n import com.github.ambry.utils.Time;\n import com.github.ambry.utils.Utils;\n import java.util.Collection;\n import java.util.EnumSet;\n+import java.util.HashMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjgwMQ==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447282801", "createdAt": "2020-06-29T22:09:34Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionManager.java", "diffHunk": "@@ -13,12 +13,15 @@\n  */\n package com.github.ambry.store;\n \n+import com.github.ambry.clustermap.ReplicaId;\n import com.github.ambry.config.StoreConfig;\n import com.github.ambry.utils.Time;\n import com.github.ambry.utils.Utils;\n import java.util.Collection;\n import java.util.EnumSet;\n+import java.util.HashMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMjY5NA=="}, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzMwMjU0OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoyNjoxMFrOGqg67A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowODo0MVrOGqj9Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMjc0OA==", "bodyText": "not used.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447232748", "createdAt": "2020-06-29T20:26:10Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionManager.java", "diffHunk": "@@ -13,12 +13,15 @@\n  */\n package com.github.ambry.store;\n \n+import com.github.ambry.clustermap.ReplicaId;\n import com.github.ambry.config.StoreConfig;\n import com.github.ambry.utils.Time;\n import com.github.ambry.utils.Utils;\n import java.util.Collection;\n import java.util.EnumSet;\n+import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.Map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjQ2Nw==", "bodyText": "Removed.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447282467", "createdAt": "2020-06-29T22:08:41Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionManager.java", "diffHunk": "@@ -13,12 +13,15 @@\n  */\n package com.github.ambry.store;\n \n+import com.github.ambry.clustermap.ReplicaId;\n import com.github.ambry.config.StoreConfig;\n import com.github.ambry.utils.Time;\n import com.github.ambry.utils.Utils;\n import java.util.Collection;\n import java.util.EnumSet;\n+import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.Map;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMjc0OA=="}, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzMwMzg4OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoyNjozNFrOGqg7sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowODoyM1rOGqj8rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMjk0Ng==", "bodyText": "java doc", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447232946", "createdAt": "2020-06-29T20:26:34Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicy.java", "diffHunk": "@@ -33,10 +33,11 @@\n    *                                {@link Journal}\n    * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n    * {@link CompactionDetails} are requested\n+   * @param dataDir", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjM0OA==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447282348", "createdAt": "2020-06-29T22:08:23Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicy.java", "diffHunk": "@@ -33,10 +33,11 @@\n    *                                {@link Journal}\n    * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n    * {@link CompactionDetails} are requested\n+   * @param dataDir", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMjk0Ng=="}, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzMyNTY2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozMjo1MFrOGqhJEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowODoxM1rOGqj8Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjM3MQ==", "bodyText": "add a field called \"lastCompactionAllTime\"?", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447236371", "createdAt": "2020-06-29T20:32:50Z", "author": {"login": "zzmao"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactionTime\" : 1593128052284", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjI2Nw==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447282267", "createdAt": "2020-06-29T22:08:13Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactionTime\" : 1593128052284", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjM3MQ=="}, "originalCommit": {"oid": "876ad65183dc1dc22fd1f9a5a13bccbeb8714715"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Nzk0NzQ5OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/StoreConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDoxNDozNVrOGqm65g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToxOToyMlrOGqsFLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzMTA0Ng==", "bodyText": "Please add Days to end to be consistent (and clearer).", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447331046", "createdAt": "2020-06-30T00:14:35Z", "author": {"login": "lightningrob"}, "path": "ambry-api/src/main/java/com/github/ambry/config/StoreConfig.java", "diffHunk": "@@ -81,6 +81,13 @@\n   @Default(\"7\")\n   public final int storeDeletedMessageRetentionDays;\n \n+  /**\n+   * How often the HybridCompactionPolicy switch from StatsBasedCompactionPolicy to CompactAllPolicy.\n+   */\n+  @Config(\"store.compaction.policy.switch.period\")\n+  @Default(\"7\")\n+  public final int storeCompactionPolicySwitchPeriod;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNTU5OA==", "bodyText": "Updated. And I separated the storeCompactionPolicySwitchTimestampDays and storeCompactionPolicySwitchCounterDays to make the tuning more flexible.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447415598", "createdAt": "2020-06-30T05:19:22Z", "author": {"login": "SophieGuo410"}, "path": "ambry-api/src/main/java/com/github/ambry/config/StoreConfig.java", "diffHunk": "@@ -81,6 +81,13 @@\n   @Default(\"7\")\n   public final int storeDeletedMessageRetentionDays;\n \n+  /**\n+   * How often the HybridCompactionPolicy switch from StatsBasedCompactionPolicy to CompactAllPolicy.\n+   */\n+  @Config(\"store.compaction.policy.switch.period\")\n+  @Default(\"7\")\n+  public final int storeCompactionPolicySwitchPeriod;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzMTA0Ng=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Nzk1MjcwOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStoreStats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDoxNzowMVrOGqm93A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToxOTo1OFrOGqsF8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzMTgwNA==", "bodyText": "for this blob store.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447331804", "createdAt": "2020-06-30T00:17:01Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStoreStats.java", "diffHunk": "@@ -1117,6 +1117,13 @@ void cancel() {\n     }\n   }\n \n+  /**\n+   * @return the storeId for this blob.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNTc5Mg==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447415792", "createdAt": "2020-06-30T05:19:58Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStoreStats.java", "diffHunk": "@@ -1117,6 +1117,13 @@ void cancel() {\n     }\n   }\n \n+  /**\n+   * @return the storeId for this blob.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzMTgwNA=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Nzk3NzMwOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDoyNTo0N1rOGqnKpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMDo0NVrOGqsG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzNTA3Ng==", "bodyText": "Does this refer to CompactionPolicySwitchInfo or something else?", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447335076", "createdAt": "2020-06-30T00:25:47Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicy.java", "diffHunk": "@@ -33,10 +33,11 @@\n    *                                {@link Journal}\n    * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n    * {@link CompactionDetails} are requested\n+   * @param dataDir The directory to use to store compactionPolicyInfo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNjA1MA==", "bodyText": "Updated with CompactionPolicySwitchInfo. Sorry for the confusion.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447416050", "createdAt": "2020-06-30T05:20:45Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicy.java", "diffHunk": "@@ -33,10 +33,11 @@\n    *                                {@link Journal}\n    * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n    * {@link CompactionDetails} are requested\n+   * @param dataDir The directory to use to store compactionPolicyInfo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzNTA3Ng=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Nzk4NTUzOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicyCounter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDoyODozOFrOGqnO7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMToyNVrOGqsHsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzNjE3Mw==", "bodyText": "Reason for these methods to use Value instead of Counter?  Some convention required?", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447336173", "createdAt": "2020-06-30T00:28:38Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicyCounter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import org.codehaus.jackson.annotate.JsonAutoDetect;\n+import org.codehaus.jackson.annotate.JsonPropertyOrder;\n+\n+\n+/**\n+ * A counter used to switch {@link CompactAllPolicy}.\n+ */\n+@JsonPropertyOrder({\"storeCompactionPolicySwitchPeriod\", \"counter\"})\n+@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)\n+class CompactionPolicyCounter {\n+  private int storeCompactionPolicySwitchPeriod;\n+  private int counter;\n+\n+  CompactionPolicyCounter(int storeCompactionPolicySwitchPeriod) {\n+    this.storeCompactionPolicySwitchPeriod = storeCompactionPolicySwitchPeriod;\n+  }\n+\n+  //make sure objectMapper can work correctly\n+  CompactionPolicyCounter() {\n+  }\n+\n+  public int getValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzNzUxOQ==", "bodyText": "Also add method javadocs.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447337519", "createdAt": "2020-06-30T00:32:48Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicyCounter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import org.codehaus.jackson.annotate.JsonAutoDetect;\n+import org.codehaus.jackson.annotate.JsonPropertyOrder;\n+\n+\n+/**\n+ * A counter used to switch {@link CompactAllPolicy}.\n+ */\n+@JsonPropertyOrder({\"storeCompactionPolicySwitchPeriod\", \"counter\"})\n+@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)\n+class CompactionPolicyCounter {\n+  private int storeCompactionPolicySwitchPeriod;\n+  private int counter;\n+\n+  CompactionPolicyCounter(int storeCompactionPolicySwitchPeriod) {\n+    this.storeCompactionPolicySwitchPeriod = storeCompactionPolicySwitchPeriod;\n+  }\n+\n+  //make sure objectMapper can work correctly\n+  CompactionPolicyCounter() {\n+  }\n+\n+  public int getValue() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzNjE3Mw=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNjI0MA==", "bodyText": "Change to counter to be more clear and added the javadocs.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447416240", "createdAt": "2020-06-30T05:21:25Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicyCounter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import org.codehaus.jackson.annotate.JsonAutoDetect;\n+import org.codehaus.jackson.annotate.JsonPropertyOrder;\n+\n+\n+/**\n+ * A counter used to switch {@link CompactAllPolicy}.\n+ */\n+@JsonPropertyOrder({\"storeCompactionPolicySwitchPeriod\", \"counter\"})\n+@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)\n+class CompactionPolicyCounter {\n+  private int storeCompactionPolicySwitchPeriod;\n+  private int counter;\n+\n+  CompactionPolicyCounter(int storeCompactionPolicySwitchPeriod) {\n+    this.storeCompactionPolicySwitchPeriod = storeCompactionPolicySwitchPeriod;\n+  }\n+\n+  //make sure objectMapper can work correctly\n+  CompactionPolicyCounter() {\n+  }\n+\n+  public int getValue() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzNjE3Mw=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Nzk5ODQ3OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicySwitchInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDozNDo0M1rOGqnWKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMTo1N1rOGqsIPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzODAyNg==", "bodyText": "Javadocs", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447338026", "createdAt": "2020-06-30T00:34:43Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicySwitchInfo.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import org.codehaus.jackson.annotate.JsonAutoDetect;\n+import org.codehaus.jackson.annotate.JsonPropertyOrder;\n+\n+\n+/**\n+ * The {@link CompactionPolicy} info to determine when to use which {@link CompactionPolicy}.\n+ */\n+@JsonPropertyOrder({\"compactionPolicyCounter\", \"lastCompactionTime\"})\n+@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)\n+public class CompactionPolicySwitchInfo {\n+  private CompactionPolicyCounter compactionPolicyCounter;\n+  private long lastCompactAllTime;\n+\n+  CompactionPolicySwitchInfo(CompactionPolicyCounter compactionPolicyCounter, long lastCompactAllTime) {\n+    this.compactionPolicyCounter = compactionPolicyCounter;\n+    this.lastCompactAllTime = lastCompactAllTime;\n+  }\n+\n+  //make sure objectMapper can work correctly\n+  CompactionPolicySwitchInfo() {\n+  }\n+\n+  CompactionPolicyCounter getCompactionPolicyCounter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNjM4MQ==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447416381", "createdAt": "2020-06-30T05:21:57Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/CompactionPolicySwitchInfo.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import org.codehaus.jackson.annotate.JsonAutoDetect;\n+import org.codehaus.jackson.annotate.JsonPropertyOrder;\n+\n+\n+/**\n+ * The {@link CompactionPolicy} info to determine when to use which {@link CompactionPolicy}.\n+ */\n+@JsonPropertyOrder({\"compactionPolicyCounter\", \"lastCompactionTime\"})\n+@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)\n+public class CompactionPolicySwitchInfo {\n+  private CompactionPolicyCounter compactionPolicyCounter;\n+  private long lastCompactAllTime;\n+\n+  CompactionPolicySwitchInfo(CompactionPolicyCounter compactionPolicyCounter, long lastCompactAllTime) {\n+    this.compactionPolicyCounter = compactionPolicyCounter;\n+    this.lastCompactAllTime = lastCompactAllTime;\n+  }\n+\n+  //make sure objectMapper can work correctly\n+  CompactionPolicySwitchInfo() {\n+  }\n+\n+  CompactionPolicyCounter getCompactionPolicyCounter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzODAyNg=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODAxNTUzOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo0MzowNVrOGqnfww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMzowNFrOGqsJaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MDQ4Mw==", "bodyText": "Minor: more like getOrRecover.  Or just get, since reading from file is an impl detail.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447340483", "createdAt": "2020-06-30T00:43:05Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNjY4MQ==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447416681", "createdAt": "2020-06-30T05:23:04Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MDQ4Mw=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODAxOTgyOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo0NToxMVrOGqniDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMzoyNlrOGqsJ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MTA2OA==", "bodyText": "Do you actually have both counter and value?", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447341068", "createdAt": "2020-06-30T00:45:11Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNjc5NQ==", "bodyText": "Updated to have counter only.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447416795", "createdAt": "2020-06-30T05:23:26Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MTA2OA=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODAyMTg2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo0NjowNlrOGqnjKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMzo1MVrOGqsKQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MTM1NQ==", "bodyText": "Use static ObjectMapper.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447341355", "createdAt": "2020-06-30T00:46:06Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNjg5Nw==", "bodyText": "Done.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447416897", "createdAt": "2020-06-30T05:23:51Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MTM1NQ=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODAyNDg2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo0NzoyN1rOGqnk1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyNDoxMVrOGqsKpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MTc4Mg==", "bodyText": "If we're eating the exception and using default, should add an error metric since it likely indicates a bug.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447341782", "createdAt": "2020-06-30T00:47:27Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNjk5OA==", "bodyText": "Add the metrics.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447416998", "createdAt": "2020-06-30T05:24:11Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MTc4Mg=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODAzNzM0OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo1Mzo1N1rOGqnr5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNTozNDoxOVrOGqsWqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MzU4OA==", "bodyText": "What happens if we reset the info and host crashes before CompactAll compaction makes much progress?  After restart, will it go back to StatsBased?", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447343588", "createdAt": "2020-06-30T00:53:57Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+    if (readyToTriggerCompactionAllPolicy(compactionPolicySwitchInfo)) {\n+      logger.trace(\"Return CompactAllPolicy this round\");\n+      updateCompactionInfo(compactionPolicySwitchInfo);\n+      return new CompactAllPolicy(storeConfig, time);\n+    } else {\n+      if (compactionPolicySwitchInfo.getCompactionPolicyCounter() == null) {\n+        logger.trace(\"Counter is null\");\n+      } else {\n+        logger.trace(\"Return StatsBasedCompactionPolicy this round\");\n+      }\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+  }\n+\n+  /**\n+   * Determine which compactionPolicy to use for current compaction cycle.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @return {@code true} if the counter value equals to 0 or it's storeCompactionPolicySwitchPeriod days past the start time of CompactAllPolicy.\n+   */\n+  private boolean readyToTriggerCompactionAllPolicy(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    return compactionPolicySwitchInfo.getCompactionPolicyCounter() != null\n+        && compactionPolicySwitchInfo.getCompactionPolicyCounter().getValue() == 0 ||\n+        compactionPolicySwitchInfo.getLastCompactAllTime() + TimeUnit.DAYS.toMillis(\n+            storeConfig.storeCompactionPolicySwitchPeriod) <= System.currentTimeMillis();\n+  }\n+\n+  /**\n+   * Update the {@link CompactionPolicySwitchInfo} before the start of {@link CompactAllPolicy}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyMDA3NQ==", "bodyText": "In this situation, after restart it will resume the compaction which handled in compaction design and after it finished, it will go to StatsBased.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447420075", "createdAt": "2020-06-30T05:34:19Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+    if (readyToTriggerCompactionAllPolicy(compactionPolicySwitchInfo)) {\n+      logger.trace(\"Return CompactAllPolicy this round\");\n+      updateCompactionInfo(compactionPolicySwitchInfo);\n+      return new CompactAllPolicy(storeConfig, time);\n+    } else {\n+      if (compactionPolicySwitchInfo.getCompactionPolicyCounter() == null) {\n+        logger.trace(\"Counter is null\");\n+      } else {\n+        logger.trace(\"Return StatsBasedCompactionPolicy this round\");\n+      }\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+  }\n+\n+  /**\n+   * Determine which compactionPolicy to use for current compaction cycle.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @return {@code true} if the counter value equals to 0 or it's storeCompactionPolicySwitchPeriod days past the start time of CompactAllPolicy.\n+   */\n+  private boolean readyToTriggerCompactionAllPolicy(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    return compactionPolicySwitchInfo.getCompactionPolicyCounter() != null\n+        && compactionPolicySwitchInfo.getCompactionPolicyCounter().getValue() == 0 ||\n+        compactionPolicySwitchInfo.getLastCompactAllTime() + TimeUnit.DAYS.toMillis(\n+            storeConfig.storeCompactionPolicySwitchPeriod) <= System.currentTimeMillis();\n+  }\n+\n+  /**\n+   * Update the {@link CompactionPolicySwitchInfo} before the start of {@link CompactAllPolicy}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MzU4OA=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODAzNzgxOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo1NDoxOVrOGqnsPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNTozNTo1OVrOGqsY4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MzY3OA==", "bodyText": "Extra lines at end.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447343678", "createdAt": "2020-06-30T00:54:19Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+    if (readyToTriggerCompactionAllPolicy(compactionPolicySwitchInfo)) {\n+      logger.trace(\"Return CompactAllPolicy this round\");\n+      updateCompactionInfo(compactionPolicySwitchInfo);\n+      return new CompactAllPolicy(storeConfig, time);\n+    } else {\n+      if (compactionPolicySwitchInfo.getCompactionPolicyCounter() == null) {\n+        logger.trace(\"Counter is null\");\n+      } else {\n+        logger.trace(\"Return StatsBasedCompactionPolicy this round\");\n+      }\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+  }\n+\n+  /**\n+   * Determine which compactionPolicy to use for current compaction cycle.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @return {@code true} if the counter value equals to 0 or it's storeCompactionPolicySwitchPeriod days past the start time of CompactAllPolicy.\n+   */\n+  private boolean readyToTriggerCompactionAllPolicy(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    return compactionPolicySwitchInfo.getCompactionPolicyCounter() != null\n+        && compactionPolicySwitchInfo.getCompactionPolicyCounter().getValue() == 0 ||\n+        compactionPolicySwitchInfo.getLastCompactAllTime() + TimeUnit.DAYS.toMillis(\n+            storeConfig.storeCompactionPolicySwitchPeriod) <= System.currentTimeMillis();\n+  }\n+\n+  /**\n+   * Update the {@link CompactionPolicySwitchInfo} before the start of {@link CompactAllPolicy}\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   */\n+  private void updateCompactionInfo(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    compactionPolicySwitchInfo.setLastCompactAllTime(System.currentTimeMillis());\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().setValue(INIT_COUNTER_VALUE);\n+  }\n+\n+  /**\n+   * @return blobToCompactionPolicySwitchInfoMap which key is storeId and value is {@link CompactionPolicySwitchInfo}\n+   */\n+  Map<String, CompactionPolicySwitchInfo> getBlobToCompactionPolicySwitchInfoMap() {\n+    return this.blobToCompactionPolicySwitchInfoMap;\n+  }\n+\n+  /**\n+   * Back up {@link CompactionPolicySwitchInfo} in Json format for each {@link BlobStore}\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   */\n+  private void backUpCompactionPolicyInfo(String dataDir, String storeId,\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (dataDir != null && !dataDir.isEmpty()) {\n+      File tempFile = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      try {\n+        tempFile.createNewFile();\n+        mapper.defaultPrettyPrintingWriter().writeValue(tempFile, compactionPolicySwitchInfo);\n+      } catch (IOException e) {\n+        logger.error(\"Exception while store compaction policy info for local report. Output file path - {}\",\n+            tempFile.getAbsolutePath(), e);\n+      }\n+    }\n+  }\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyMDY0Mg==", "bodyText": "Removed.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447420642", "createdAt": "2020-06-30T05:35:59Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+    if (readyToTriggerCompactionAllPolicy(compactionPolicySwitchInfo)) {\n+      logger.trace(\"Return CompactAllPolicy this round\");\n+      updateCompactionInfo(compactionPolicySwitchInfo);\n+      return new CompactAllPolicy(storeConfig, time);\n+    } else {\n+      if (compactionPolicySwitchInfo.getCompactionPolicyCounter() == null) {\n+        logger.trace(\"Counter is null\");\n+      } else {\n+        logger.trace(\"Return StatsBasedCompactionPolicy this round\");\n+      }\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+  }\n+\n+  /**\n+   * Determine which compactionPolicy to use for current compaction cycle.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @return {@code true} if the counter value equals to 0 or it's storeCompactionPolicySwitchPeriod days past the start time of CompactAllPolicy.\n+   */\n+  private boolean readyToTriggerCompactionAllPolicy(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    return compactionPolicySwitchInfo.getCompactionPolicyCounter() != null\n+        && compactionPolicySwitchInfo.getCompactionPolicyCounter().getValue() == 0 ||\n+        compactionPolicySwitchInfo.getLastCompactAllTime() + TimeUnit.DAYS.toMillis(\n+            storeConfig.storeCompactionPolicySwitchPeriod) <= System.currentTimeMillis();\n+  }\n+\n+  /**\n+   * Update the {@link CompactionPolicySwitchInfo} before the start of {@link CompactAllPolicy}\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   */\n+  private void updateCompactionInfo(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    compactionPolicySwitchInfo.setLastCompactAllTime(System.currentTimeMillis());\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().setValue(INIT_COUNTER_VALUE);\n+  }\n+\n+  /**\n+   * @return blobToCompactionPolicySwitchInfoMap which key is storeId and value is {@link CompactionPolicySwitchInfo}\n+   */\n+  Map<String, CompactionPolicySwitchInfo> getBlobToCompactionPolicySwitchInfoMap() {\n+    return this.blobToCompactionPolicySwitchInfoMap;\n+  }\n+\n+  /**\n+   * Back up {@link CompactionPolicySwitchInfo} in Json format for each {@link BlobStore}\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   */\n+  private void backUpCompactionPolicyInfo(String dataDir, String storeId,\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (dataDir != null && !dataDir.isEmpty()) {\n+      File tempFile = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      try {\n+        tempFile.createNewFile();\n+        mapper.defaultPrettyPrintingWriter().writeValue(tempFile, compactionPolicySwitchInfo);\n+      } catch (IOException e) {\n+        logger.error(\"Exception while store compaction policy info for local report. Output file path - {}\",\n+            tempFile.getAbsolutePath(), e);\n+      }\n+    }\n+  }\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MzY3OA=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODA0NDI2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo1NzoxNFrOGqnv6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNDowNzozM1rOGrWEFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NDYxOQ==", "bodyText": "Minor: saying \"for each store\" implies the method does something for every store, but it's only acting on one.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447344619", "createdAt": "2020-06-30T00:57:14Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+    if (readyToTriggerCompactionAllPolicy(compactionPolicySwitchInfo)) {\n+      logger.trace(\"Return CompactAllPolicy this round\");\n+      updateCompactionInfo(compactionPolicySwitchInfo);\n+      return new CompactAllPolicy(storeConfig, time);\n+    } else {\n+      if (compactionPolicySwitchInfo.getCompactionPolicyCounter() == null) {\n+        logger.trace(\"Counter is null\");\n+      } else {\n+        logger.trace(\"Return StatsBasedCompactionPolicy this round\");\n+      }\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+  }\n+\n+  /**\n+   * Determine which compactionPolicy to use for current compaction cycle.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @return {@code true} if the counter value equals to 0 or it's storeCompactionPolicySwitchPeriod days past the start time of CompactAllPolicy.\n+   */\n+  private boolean readyToTriggerCompactionAllPolicy(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    return compactionPolicySwitchInfo.getCompactionPolicyCounter() != null\n+        && compactionPolicySwitchInfo.getCompactionPolicyCounter().getValue() == 0 ||\n+        compactionPolicySwitchInfo.getLastCompactAllTime() + TimeUnit.DAYS.toMillis(\n+            storeConfig.storeCompactionPolicySwitchPeriod) <= System.currentTimeMillis();\n+  }\n+\n+  /**\n+   * Update the {@link CompactionPolicySwitchInfo} before the start of {@link CompactAllPolicy}\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   */\n+  private void updateCompactionInfo(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    compactionPolicySwitchInfo.setLastCompactAllTime(System.currentTimeMillis());\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().setValue(INIT_COUNTER_VALUE);\n+  }\n+\n+  /**\n+   * @return blobToCompactionPolicySwitchInfoMap which key is storeId and value is {@link CompactionPolicySwitchInfo}\n+   */\n+  Map<String, CompactionPolicySwitchInfo> getBlobToCompactionPolicySwitchInfoMap() {\n+    return this.blobToCompactionPolicySwitchInfoMap;\n+  }\n+\n+  /**\n+   * Back up {@link CompactionPolicySwitchInfo} in Json format for each {@link BlobStore}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwMzQ0NA==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r448103444", "createdAt": "2020-07-01T04:07:33Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+    if (readyToTriggerCompactionAllPolicy(compactionPolicySwitchInfo)) {\n+      logger.trace(\"Return CompactAllPolicy this round\");\n+      updateCompactionInfo(compactionPolicySwitchInfo);\n+      return new CompactAllPolicy(storeConfig, time);\n+    } else {\n+      if (compactionPolicySwitchInfo.getCompactionPolicyCounter() == null) {\n+        logger.trace(\"Counter is null\");\n+      } else {\n+        logger.trace(\"Return StatsBasedCompactionPolicy this round\");\n+      }\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+  }\n+\n+  /**\n+   * Determine which compactionPolicy to use for current compaction cycle.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @return {@code true} if the counter value equals to 0 or it's storeCompactionPolicySwitchPeriod days past the start time of CompactAllPolicy.\n+   */\n+  private boolean readyToTriggerCompactionAllPolicy(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    return compactionPolicySwitchInfo.getCompactionPolicyCounter() != null\n+        && compactionPolicySwitchInfo.getCompactionPolicyCounter().getValue() == 0 ||\n+        compactionPolicySwitchInfo.getLastCompactAllTime() + TimeUnit.DAYS.toMillis(\n+            storeConfig.storeCompactionPolicySwitchPeriod) <= System.currentTimeMillis();\n+  }\n+\n+  /**\n+   * Update the {@link CompactionPolicySwitchInfo} before the start of {@link CompactAllPolicy}\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   */\n+  private void updateCompactionInfo(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    compactionPolicySwitchInfo.setLastCompactAllTime(System.currentTimeMillis());\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().setValue(INIT_COUNTER_VALUE);\n+  }\n+\n+  /**\n+   * @return blobToCompactionPolicySwitchInfoMap which key is storeId and value is {@link CompactionPolicySwitchInfo}\n+   */\n+  Map<String, CompactionPolicySwitchInfo> getBlobToCompactionPolicySwitchInfoMap() {\n+    return this.blobToCompactionPolicySwitchInfoMap;\n+  }\n+\n+  /**\n+   * Back up {@link CompactionPolicySwitchInfo} in Json format for each {@link BlobStore}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NDYxOQ=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODA2MzgzOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTowNjoxOFrOGqn6qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNTozOTo0MlrOGqsdDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NzM2OQ==", "bodyText": "Don't you want to do the update either way?", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447347369", "createdAt": "2020-06-30T01:06:18Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+    if (readyToTriggerCompactionAllPolicy(compactionPolicySwitchInfo)) {\n+      logger.trace(\"Return CompactAllPolicy this round\");\n+      updateCompactionInfo(compactionPolicySwitchInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyMTcwOA==", "bodyText": "I updated the method name to updateCompactionInfoWhenCompactAll to avoid confusion. This method is used to keep record of the last time when we run CompactAllPolicy, so if we passed \"storeCompactionPolicySwitchTimestampDays\" days since we run compactAllPolicy, we will re-run it again.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447421708", "createdAt": "2020-06-30T05:39:42Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+    if (readyToTriggerCompactionAllPolicy(compactionPolicySwitchInfo)) {\n+      logger.trace(\"Return CompactAllPolicy this round\");\n+      updateCompactionInfo(compactionPolicySwitchInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NzM2OQ=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODA2NzA2OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTowNzo0OVrOGqn8ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzowMDoyOFrOGqubkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NzgxOA==", "bodyText": "This method name is a mouthful.  Is there a downside to the caller first calling updateCompactionInfo() and then this method which could just be selectCompactionPolicy()?", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447347818", "createdAt": "2020-06-30T01:07:49Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1NDA5OQ==", "bodyText": "I will only update the compactionPolicySwitchInfo when we trigger the compactAllPolicy. Already re-named the method name to updateCompactionInfoWhenCompactAll() instead of updateCompactionInfo().", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447454099", "createdAt": "2020-06-30T07:00:28Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getAndRecoverCompactionPolicySwitchInfo(storeId, dataDir);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, storeId, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get and Recover the CompactionPolicySwitchInfo from file.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getAndRecoverCompactionPolicySwitchInfo(String storeId, String dataDir) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchPeriod\" : 3,\n+   *     \"counter\" : 1,\n+   *     \"value\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593463435900\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file) {\n+    try {\n+      ObjectMapper objectMapper = new ObjectMapper();\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchPeriod),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NzgxOA=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODA2OTQyOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/test/java/com/github/ambry/store/CompactionPolicyTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTowOTowNVrOGqn9yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzowMDo1N1rOGqucig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0ODE3MQ==", "bodyText": "Minor: please move private utility methods to bottom.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447348171", "createdAt": "2020-06-30T01:09:05Z", "author": {"login": "lightningrob"}, "path": "ambry-store/src/test/java/com/github/ambry/store/CompactionPolicyTest.java", "diffHunk": "@@ -82,6 +94,135 @@ public CompactionPolicyTest(String compactionPolicyFactoryStr) throws Exception\n     mockBlobStoreStats = blobStore.getBlobStoreStats();\n     CompactionPolicyFactory compactionPolicyFactory = Utils.getObj(compactionPolicyFactoryStr, config, time);\n     compactionPolicy = compactionPolicyFactory.getCompactionPolicy();\n+    dataDirPath = Paths.get(MOUNT_PATH).toAbsolutePath();\n+  }\n+\n+  private void cleanupBackupFiles() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1NDM0Ng==", "bodyText": "Updated.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447454346", "createdAt": "2020-06-30T07:00:57Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/test/java/com/github/ambry/store/CompactionPolicyTest.java", "diffHunk": "@@ -82,6 +94,135 @@ public CompactionPolicyTest(String compactionPolicyFactoryStr) throws Exception\n     mockBlobStoreStats = blobStore.getBlobStoreStats();\n     CompactionPolicyFactory compactionPolicyFactory = Utils.getObj(compactionPolicyFactoryStr, config, time);\n     compactionPolicy = compactionPolicyFactory.getCompactionPolicy();\n+    dataDirPath = Paths.get(MOUNT_PATH).toAbsolutePath();\n+  }\n+\n+  private void cleanupBackupFiles() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0ODE3MQ=="}, "originalCommit": {"oid": "fb0055eeaaa4b6fe9a7b43fa92bb682084648645"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTYwNDYzOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozNjoyNFrOGrJjZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1Mzo1NFrOGrKLhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODQ2OA==", "bodyText": "shouldn't we increment the counter before select which policy to use?", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447898468", "createdAt": "2020-06-30T18:36:24Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getCompactionPolicySwitchInfo(storeId, dataDir, blobStoreStats);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9046a816f853978ca1e09cf85f9e17f41aab6c1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwODc0Mw==", "bodyText": "That's the tricky part. I'm planning to increment after the backup with two reasons:\n\nwhen counter equals to 0, it will run compactAllPolicy. which means if we don't have any back up files yet, we will run compact all policy.\nif we are running compactAll for a long time and host restart, the file backs up the current status and re-run compactAll instead of statsBased.\nLet me know if you have any other concern.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447908743", "createdAt": "2020-06-30T18:53:54Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getCompactionPolicySwitchInfo(storeId, dataDir, blobStoreStats);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODQ2OA=="}, "originalCommit": {"oid": "b9046a816f853978ca1e09cf85f9e17f41aab6c1"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTYwNjYwOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozNzowMFrOGrJkoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1MzozMFrOGrMJdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODc4NA==", "bodyText": "please add datadir and store id in the info log.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447898784", "createdAt": "2020-06-30T18:37:00Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getCompactionPolicySwitchInfo(storeId, dataDir, blobStoreStats);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9046a816f853978ca1e09cf85f9e17f41aab6c1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MDk4MA==", "bodyText": "Done.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447940980", "createdAt": "2020-06-30T19:53:30Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getCompactionPolicySwitchInfo(storeId, dataDir, blobStoreStats);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODc4NA=="}, "originalCommit": {"oid": "b9046a816f853978ca1e09cf85f9e17f41aab6c1"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTYwOTUyOnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozNzo0OFrOGrJmcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1MzozOVrOGrMJxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5OTI0OA==", "bodyText": "nit: please add datadir or store id in the log.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447899248", "createdAt": "2020-06-30T18:37:48Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getCompactionPolicySwitchInfo(storeId, dataDir, blobStoreStats);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get the CompactionPolicySwitchInfo from file or blobToCompactionPolicySwitchInfoMap.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getCompactionPolicySwitchInfo(String storeId, String dataDir, BlobStoreStats blobStoreStats) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file, blobStoreStats);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchCounterDays),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchCounterDays\" : 3,\n+   *     \"counter\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593492962651\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file, BlobStoreStats blobStoreStats) {\n+    try {\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      blobStoreStats.getMetrics().blobStoreRecoverCompactionPolicySwitchInfoErrorCount.inc();\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchCounterDays),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9046a816f853978ca1e09cf85f9e17f41aab6c1"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MTA2Mw==", "bodyText": "Done.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447941063", "createdAt": "2020-06-30T19:53:39Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getCompactionPolicySwitchInfo(storeId, dataDir, blobStoreStats);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get the CompactionPolicySwitchInfo from file or blobToCompactionPolicySwitchInfoMap.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getCompactionPolicySwitchInfo(String storeId, String dataDir, BlobStoreStats blobStoreStats) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file, blobStoreStats);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchCounterDays),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchCounterDays\" : 3,\n+   *     \"counter\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593492962651\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file, BlobStoreStats blobStoreStats) {\n+    try {\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      blobStoreStats.getMetrics().blobStoreRecoverCompactionPolicySwitchInfoErrorCount.inc();\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchCounterDays),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5OTI0OA=="}, "originalCommit": {"oid": "b9046a816f853978ca1e09cf85f9e17f41aab6c1"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY0MjA4OnYy", "diffSide": "RIGHT", "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0Njo1MFrOGrJ6xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1NTowNFrOGrMMzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDQ1NQ==", "bodyText": "nit: I encourage to create and write data to a temporary file and then rename the temporary file to COMPACT_POLICY_INFO_PATH file\nSomething like\nFile tempFile = new File(dataDir, COMPACT_POLICY_INFO_PATH + \".temp\");\nif (!tempFile.exists()) {\n    tempFile.createNewFile();\n}\nobjectMapper.defaultPrettyPrintingWriter().writeValue(tempFile, compactionPolicySwitchInfo);\ntempFile.renameTo(new File(dataDir, COMPACT_POLICY_INFO_PATH);\n\nThe reason to use a temporary file and rename it after is that POSIX guarantees file rename is an atomic operation, but not the file write. The json file is pretty small so that file writing should be atomic, but it's just a good pattern to follow.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447904455", "createdAt": "2020-06-30T18:46:50Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getCompactionPolicySwitchInfo(storeId, dataDir, blobStoreStats);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get the CompactionPolicySwitchInfo from file or blobToCompactionPolicySwitchInfoMap.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getCompactionPolicySwitchInfo(String storeId, String dataDir, BlobStoreStats blobStoreStats) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file, blobStoreStats);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchCounterDays),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchCounterDays\" : 3,\n+   *     \"counter\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593492962651\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file, BlobStoreStats blobStoreStats) {\n+    try {\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      blobStoreStats.getMetrics().blobStoreRecoverCompactionPolicySwitchInfoErrorCount.inc();\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchCounterDays),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+    if (readyToTriggerCompactionAllPolicy(compactionPolicySwitchInfo)) {\n+      logger.trace(\"Return CompactAllPolicy this round\");\n+      updateCompactionInfoWhenCompactAll(compactionPolicySwitchInfo);\n+      return new CompactAllPolicy(storeConfig, time);\n+    } else {\n+      if (compactionPolicySwitchInfo.getCompactionPolicyCounter() == null) {\n+        logger.trace(\"Counter is null\");\n+      } else {\n+        logger.trace(\"Return StatsBasedCompactionPolicy this round\");\n+      }\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+  }\n+\n+  /**\n+   * Determine which compactionPolicy to use for current compaction cycle.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @return {@code true} if the counter value equals to 0 or it's storeCompactionPolicySwitchPeriod days past the start time of CompactAllPolicy.\n+   */\n+  private boolean readyToTriggerCompactionAllPolicy(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    return compactionPolicySwitchInfo.getCompactionPolicyCounter() != null\n+        && compactionPolicySwitchInfo.getCompactionPolicyCounter().getCounter() == 0 ||\n+        compactionPolicySwitchInfo.getLastCompactAllTime() + TimeUnit.DAYS.toMillis(\n+            storeConfig.storeCompactionPolicySwitchTimestampDays) <= System.currentTimeMillis();\n+  }\n+\n+  /**\n+   * Update the {@link CompactionPolicySwitchInfo} before the start of {@link CompactAllPolicy}\n+   * Once the compactAllPolicy has been triggered, no matter it's been triggered by timestamp or counter value\n+   * the lastCompactAllTime will be set to current time and the counter value will reset to 0.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   */\n+  private void updateCompactionInfoWhenCompactAll(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    compactionPolicySwitchInfo.setLastCompactAllTime(System.currentTimeMillis());\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().setCounter(INIT_COUNTER_VALUE);\n+  }\n+\n+  /**\n+   * @return blobToCompactionPolicySwitchInfoMap which key is storeId and value is {@link CompactionPolicySwitchInfo}\n+   */\n+  Map<String, CompactionPolicySwitchInfo> getBlobToCompactionPolicySwitchInfoMap() {\n+    return this.blobToCompactionPolicySwitchInfoMap;\n+  }\n+\n+  /**\n+   * Back up {@link CompactionPolicySwitchInfo} in Json format for certain {@link BlobStore}\n+   * @param dataDir The directory to store the file.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   */\n+  private void backUpCompactionPolicyInfo(String dataDir, CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (dataDir != null && !dataDir.isEmpty()) {\n+      File tempFile = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9046a816f853978ca1e09cf85f9e17f41aab6c1"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MTgzOA==", "bodyText": "Updated to use temp file and rename after write. I didn't add the file exist check since createNewFile() is able to handle it.", "url": "https://github.com/linkedin/ambry/pull/1559#discussion_r447941838", "createdAt": "2020-06-30T19:55:04Z", "author": {"login": "SophieGuo410"}, "path": "ambry-store/src/main/java/com/github/ambry/store/HybridCompactionPolicy.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.store;\n+\n+import com.github.ambry.config.StoreConfig;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * HybridCompactionPolicy will run compaction with StatsBasedCompactionPolicy more frequently and with CompactAllPolicy\n+ * one time out of storeCompactionPolicySwitchPeriod.\n+ */\n+public class HybridCompactionPolicy implements CompactionPolicy {\n+  private final Time time;\n+  private final StoreConfig storeConfig;\n+  private static final Logger logger = LoggerFactory.getLogger(HybridCompactionPolicy.class);\n+  private final Map<String, CompactionPolicySwitchInfo> blobToCompactionPolicySwitchInfoMap;\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+  private static final String COMPACT_POLICY_INFO_PATH = File.separator + \"compactionPolicyInfo.json\";\n+  private static final int INIT_COMPACT_ALL_TIME = 0;\n+  private static final int INIT_COUNTER_VALUE = 0;\n+\n+  HybridCompactionPolicy(StoreConfig storeConfig, Time time) {\n+    this.storeConfig = storeConfig;\n+    this.time = time;\n+    this.blobToCompactionPolicySwitchInfoMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * @param totalCapacity Total capacity of the {@link BlobStore}\n+   * @param usedCapacity Used capacity of the {@link BlobStore}\n+   * @param segmentCapacity Segment capacity of a {@link LogSegment}\n+   * @param segmentHeaderSize Segment header size of a {@link LogSegment}\n+   * @param logSegmentsNotInJournal {@link List<String> } of log segment names which has non overlapping entries with\n+   *                                {@link Journal}\n+   * @param blobStoreStats {@link BlobStoreStats} pertaining to the {@link BlobStore} for which\n+   * {@link CompactionDetails} are requested\n+   * @param dataDir the dir to store {@link CompactionPolicySwitchInfo}\n+   * @return {@link CompactAllPolicy} or {@link StatsBasedCompactionPolicy}'s {@link CompactionDetails} depends on the switching rules.\n+   */\n+  @Override\n+  public CompactionDetails getCompactionDetails(long totalCapacity, long usedCapacity, long segmentCapacity,\n+      long segmentHeaderSize, List<String> logSegmentsNotInJournal, BlobStoreStats blobStoreStats, String dataDir)\n+      throws StoreException {\n+    String storeId = blobStoreStats.getStoreId();\n+    CompactionPolicySwitchInfo compactionPolicySwitchInfo = getCompactionPolicySwitchInfo(storeId, dataDir, blobStoreStats);\n+    CompactionPolicy selectCompactionPolicy =\n+        selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(compactionPolicySwitchInfo);\n+    logger.info(\"Current compaction policy  is : {}\", selectCompactionPolicy);\n+    backUpCompactionPolicyInfo(dataDir, compactionPolicySwitchInfo);\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().increment();\n+    return selectCompactionPolicy.getCompactionDetails(totalCapacity, usedCapacity, segmentCapacity, segmentHeaderSize,\n+        logSegmentsNotInJournal, blobStoreStats, dataDir);\n+  }\n+\n+  /**\n+   * Get the CompactionPolicySwitchInfo from file or blobToCompactionPolicySwitchInfoMap.\n+   * @param dataDir The directory to store the file.\n+   * @param storeId id of the BlobStore\n+   * @return {@link CompactionPolicySwitchInfo} gets from map or recover from file if needed.\n+   */\n+  private CompactionPolicySwitchInfo getCompactionPolicySwitchInfo(String storeId, String dataDir, BlobStoreStats blobStoreStats) {\n+    if (!blobToCompactionPolicySwitchInfoMap.containsKey(storeId)) {\n+      File file = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());\n+      if (file.exists()) {\n+        CompactionPolicySwitchInfo compactionPolicySwitchInfo = recoverCompactionPolicySwitchInfo(file, blobStoreStats);\n+        blobToCompactionPolicySwitchInfoMap.put(storeId, compactionPolicySwitchInfo);\n+      } else {\n+        blobToCompactionPolicySwitchInfoMap.put(storeId,\n+            new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchCounterDays),\n+                INIT_COMPACT_ALL_TIME));\n+      }\n+    }\n+    return blobToCompactionPolicySwitchInfoMap.get(storeId);\n+  }\n+\n+  /**\n+   * Recover the {@link CompactionPolicySwitchInfo} from backup file.\n+   * {\n+   *   \"compactionPolicyCounter\" : {\n+   *     \"storeCompactionPolicySwitchCounterDays\" : 3,\n+   *     \"counter\" : 1\n+   *   },\n+   *   \"lastCompactAllTime\" : 1593492962651\n+   * }\n+   * @param file the backup file stores {@link CompactionPolicySwitchInfo}\n+   */\n+  private CompactionPolicySwitchInfo recoverCompactionPolicySwitchInfo(File file, BlobStoreStats blobStoreStats) {\n+    try {\n+      return objectMapper.readValue(file, CompactionPolicySwitchInfo.class);\n+    } catch (IOException e) {\n+      logger.error(\"Could not deserialize file : {} into {} Object\", file, CompactionPolicySwitchInfo.class.getName());\n+      blobStoreStats.getMetrics().blobStoreRecoverCompactionPolicySwitchInfoErrorCount.inc();\n+      return new CompactionPolicySwitchInfo(new CompactionPolicyCounter(storeConfig.storeCompactionPolicySwitchCounterDays),\n+          INIT_COMPACT_ALL_TIME);\n+    }\n+  }\n+\n+  /**\n+   * Selects which compaction policy to use for current compaction cycle.\n+   * @return {@link CompactionPolicy} to use for current compaction cycle(Selects between {@link StatsBasedCompactionPolicy} and {@link CompactAllPolicy}).\n+   */\n+  CompactionPolicy selectCompactionPolicyAndUpdateCompactionPolicySwitchInfo(\n+      CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (compactionPolicySwitchInfo == null) {\n+      logger.trace(\"CompactionPolicySwitchInfo is null\");\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+    if (readyToTriggerCompactionAllPolicy(compactionPolicySwitchInfo)) {\n+      logger.trace(\"Return CompactAllPolicy this round\");\n+      updateCompactionInfoWhenCompactAll(compactionPolicySwitchInfo);\n+      return new CompactAllPolicy(storeConfig, time);\n+    } else {\n+      if (compactionPolicySwitchInfo.getCompactionPolicyCounter() == null) {\n+        logger.trace(\"Counter is null\");\n+      } else {\n+        logger.trace(\"Return StatsBasedCompactionPolicy this round\");\n+      }\n+      return new StatsBasedCompactionPolicy(storeConfig, time);\n+    }\n+  }\n+\n+  /**\n+   * Determine which compactionPolicy to use for current compaction cycle.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   * @return {@code true} if the counter value equals to 0 or it's storeCompactionPolicySwitchPeriod days past the start time of CompactAllPolicy.\n+   */\n+  private boolean readyToTriggerCompactionAllPolicy(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    return compactionPolicySwitchInfo.getCompactionPolicyCounter() != null\n+        && compactionPolicySwitchInfo.getCompactionPolicyCounter().getCounter() == 0 ||\n+        compactionPolicySwitchInfo.getLastCompactAllTime() + TimeUnit.DAYS.toMillis(\n+            storeConfig.storeCompactionPolicySwitchTimestampDays) <= System.currentTimeMillis();\n+  }\n+\n+  /**\n+   * Update the {@link CompactionPolicySwitchInfo} before the start of {@link CompactAllPolicy}\n+   * Once the compactAllPolicy has been triggered, no matter it's been triggered by timestamp or counter value\n+   * the lastCompactAllTime will be set to current time and the counter value will reset to 0.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   */\n+  private void updateCompactionInfoWhenCompactAll(CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    compactionPolicySwitchInfo.setLastCompactAllTime(System.currentTimeMillis());\n+    compactionPolicySwitchInfo.getCompactionPolicyCounter().setCounter(INIT_COUNTER_VALUE);\n+  }\n+\n+  /**\n+   * @return blobToCompactionPolicySwitchInfoMap which key is storeId and value is {@link CompactionPolicySwitchInfo}\n+   */\n+  Map<String, CompactionPolicySwitchInfo> getBlobToCompactionPolicySwitchInfoMap() {\n+    return this.blobToCompactionPolicySwitchInfoMap;\n+  }\n+\n+  /**\n+   * Back up {@link CompactionPolicySwitchInfo} in Json format for certain {@link BlobStore}\n+   * @param dataDir The directory to store the file.\n+   * @param compactionPolicySwitchInfo the info to determine which {@link CompactionPolicy} to use this round.\n+   */\n+  private void backUpCompactionPolicyInfo(String dataDir, CompactionPolicySwitchInfo compactionPolicySwitchInfo) {\n+    if (dataDir != null && !dataDir.isEmpty()) {\n+      File tempFile = new File(Paths.get(dataDir, COMPACT_POLICY_INFO_PATH).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDQ1NQ=="}, "originalCommit": {"oid": "b9046a816f853978ca1e09cf85f9e17f41aab6c1"}, "originalPosition": 181}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1260, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}