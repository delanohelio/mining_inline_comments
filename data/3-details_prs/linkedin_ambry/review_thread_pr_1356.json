{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjU4MTUy", "number": 1356, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDowNDoyNlrODXTI6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDo0Mjo1NVrODXpmjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzU3NDE3OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/config/RestServerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDowNDoyNlrOFci61g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDowNDoyNlrOFci61g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NjU2Ng==", "bodyText": "change variable name to restServerRequestResponseHandlerFactory", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365476566", "createdAt": "2020-01-11T00:04:26Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/config/RestServerConfig.java", "diffHunk": "@@ -40,10 +40,10 @@\n   public final int restServerRequestHandlerScalingUnitCount;\n \n   /**\n-   * The RestRequestHandlerFactory that needs to be used by the RestServer\n-   * for bootstrapping the RestRequestHandler\n+   * The RequestResponseHandlerFactory that needs to be used by the RestServer or AmbryServer HTTP2\n+   * for bootstrapping the RestRequestHandler and RestResponseHandler\n    */\n-  @Config(\"rest.server.request.handler.factory\")\n+  @Config(\"rest.server.request.response.handler.factory\")\n   @Default(\"com.github.ambry.rest.AsyncRequestResponseHandlerFactory\")\n   public final String restServerRequestHandlerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ec518ef0b3cc3dbb6e97db51123da431a56a3ae"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzU4NDMxOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDoxNDoxNFrOFcjA9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMToyMjoyOVrOFcjkTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3ODEzMw==", "bodyText": "Could this condition ever occur since this is logic is now in the constructor and isRunning is a non-static member?", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365478133", "createdAt": "2020-01-11T00:14:14Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java", "diffHunk": "@@ -61,10 +61,25 @@\n   /**\n    * Builds a AsyncRequestResponseHandler.\n    * @param metrics the {@link RequestResponseHandlerMetrics} instance to use to track metrics.\n+   * @param workerCount the required number of request handling units.\n+   * @param restRequestService the {@link RestRequestService} instance to be used to process requests.\n+   * @throws IllegalArgumentException if {@code workerCount} < 0 or if {@code workerCount} > 0 but\n+   * {@code restRequestService} is null.\n    */\n-  protected AsyncRequestResponseHandler(RequestResponseHandlerMetrics metrics) {\n+  protected AsyncRequestResponseHandler(RequestResponseHandlerMetrics metrics, int workerCount,\n+      RestRequestService restRequestService) {\n     this.metrics = metrics;\n     metrics.trackAsyncRequestResponseHandler(this);\n+    if (isRunning()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ec518ef0b3cc3dbb6e97db51123da431a56a3ae"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4NzE4Mw==", "bodyText": "It won't happen. Removing.", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365487183", "createdAt": "2020-01-11T01:22:29Z", "author": {"login": "zzmao"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java", "diffHunk": "@@ -61,10 +61,25 @@\n   /**\n    * Builds a AsyncRequestResponseHandler.\n    * @param metrics the {@link RequestResponseHandlerMetrics} instance to use to track metrics.\n+   * @param workerCount the required number of request handling units.\n+   * @param restRequestService the {@link RestRequestService} instance to be used to process requests.\n+   * @throws IllegalArgumentException if {@code workerCount} < 0 or if {@code workerCount} > 0 but\n+   * {@code restRequestService} is null.\n    */\n-  protected AsyncRequestResponseHandler(RequestResponseHandlerMetrics metrics) {\n+  protected AsyncRequestResponseHandler(RequestResponseHandlerMetrics metrics, int workerCount,\n+      RestRequestService restRequestService) {\n     this.metrics = metrics;\n     metrics.trackAsyncRequestResponseHandler(this);\n+    if (isRunning()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3ODEzMw=="}, "originalCommit": {"oid": "8ec518ef0b3cc3dbb6e97db51123da431a56a3ae"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzU4ODgyOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDoxODo1N1rOFcjDwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDoxODo1N1rOFcjDwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3ODg1MA==", "bodyText": "could be final, I believe", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365478850", "createdAt": "2020-01-11T00:18:57Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "diffHunk": "@@ -19,47 +19,25 @@\n import com.codahale.metrics.Meter;\n import com.codahale.metrics.MetricRegistry;\n import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.locks.ReentrantLock;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n- * {@link AsyncRequestResponseHandler} specific implementation of {@link RestRequestHandlerFactory} and\n- * {@link RestResponseHandlerFactory}.\n+ * {@link AsyncRequestResponseHandler} specific implementation of {@link RestRequestResponseHandlerFactory}.\n  * <p/>\n- * Sets up all the supporting cast required for {@link AsyncRequestResponseHandler}. Maintains a single instance of\n- * {@link AsyncRequestResponseHandler} and returns the same instance on any call to {@link #getRestRequestHandler()} or\n+ * Sets up all the supporting cast required for {@link AsyncRequestResponseHandler}. Maintains a single handler of\n+ * {@link AsyncRequestResponseHandler} and returns the same handler on any call to {@link #getRestRequestHandler()} or\n  * {@link #getRestResponseHandler()}.\n  */\n-public class AsyncRequestResponseHandlerFactory implements RestRequestHandlerFactory, RestResponseHandlerFactory {\n-\n-  private static final ReentrantLock lock = new ReentrantLock();\n-  private static AsyncRequestResponseHandler instance;\n-  private static RequestResponseHandlerMetrics requestResponseHandlerMetrics;\n+public class AsyncRequestResponseHandlerFactory implements RestRequestResponseHandlerFactory {\n \n+  private AsyncRequestResponseHandler handler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ec518ef0b3cc3dbb6e97db51123da431a56a3ae"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzU5NzQ3OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/rest/RestRequestService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDoyNzozMVrOFcjI5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDoyNzozMVrOFcjI5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MDE2Nw==", "bodyText": "Add that this method must be called before the service is started", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365480167", "createdAt": "2020-01-11T00:27:31Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/rest/RestRequestService.java", "diffHunk": "@@ -24,6 +24,11 @@\n  */\n public interface RestRequestService {\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ec518ef0b3cc3dbb6e97db51123da431a56a3ae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDkxODg4OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/RestServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo0MzowMlrOFdAsXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo0MzowMlrOFdAsXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NDM4MA==", "bodyText": "Had an offline discussion with Ze. restResponseHandler and restRequestHandler are actually same instance within restHandlerFactory. Hence, calling start() once should suffice. Let's leave a comment here to explain we removed restRequestHandler.start();. In the future, we probably could unify them.", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365964380", "createdAt": "2020-01-13T18:43:02Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/RestServer.java", "diffHunk": "@@ -233,7 +235,7 @@ public void start() throws InstantiationException {\n       restResponseHandler.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f67c308ae2ad94b0d035d08173379c11436e28"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDk2ODgzOnYy", "diffSide": "RIGHT", "path": "ambry-frontend/src/main/java/com.github.ambry.frontend/FrontendRestRequestService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTowMDozOFrOFdBL8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTowMDozOFrOFdBL8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3MjQ2NQ==", "bodyText": "Feel like this could be an IllegalStateException", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365972465", "createdAt": "2020-01-13T19:00:38Z", "author": {"login": "jsjtzyy"}, "path": "ambry-frontend/src/main/java/com.github.ambry.frontend/FrontendRestRequestService.java", "diffHunk": "@@ -137,8 +135,19 @@\n     logger.trace(\"Instantiated FrontendRestRequestService\");\n   }\n \n+  /**\n+   * @param responseHandler the {@link RestResponseHandler} that can be used to submit responses that need to be sent out.\n+   */\n+  @Override\n+  public void setupResponseHandler(RestResponseHandler responseHandler) {\n+    this.responseHandler = responseHandler;\n+  }\n+\n   @Override\n   public void start() throws InstantiationException {\n+    if (responseHandler == null) {\n+      throw new InstantiationException(\"ResponseHandler is not set.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f67c308ae2ad94b0d035d08173379c11436e28"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTAzOTM2OnYy", "diffSide": "LEFT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToyNDo0MFrOFdB3YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToyNDo0MFrOFdB3YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MzU4NQ==", "bodyText": "minor: line 268, could you removing the leading underscore of _restRequestService ?", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365983585", "createdAt": "2020-01-13T19:24:40Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java", "diffHunk": "@@ -179,33 +193,11 @@ public void handleResponse(RestRequest restRequest, RestResponseChannel restResp\n     } else {\n       metrics.requestResponseHandlerUnavailableError.inc();\n       throw new RestServiceException(\n-          \"Requests cannot be handled because the AsyncRequestResponseHandler is not available\",\n+          \"Requests cannot be handled because the AsyncRequestResponseHandler is not running\",\n           RestServiceErrorCode.ServiceUnavailable);\n     }\n   }\n \n-  /**\n-   * Sets the number of request handling units and the {@link RestRequestService} that will be used in\n-   * {@link AsyncRequestWorker} instances..\n-   * @param workerCount the required number of request handling units.\n-   * @param restRequestService the {@link RestRequestService} instance to be used to process requests.\n-   * @throws IllegalArgumentException if {@code workerCount} < 0 or if {@code workerCount} > 0 but\n-   *                                  {@code restRequestService} is null.\n-   * @throws IllegalStateException if {@link #start()} has already been called before a call to this function.\n-   */\n-  protected void setupRequestHandling(int workerCount, RestRequestService restRequestService) {\n-    if (isRunning()) {\n-      throw new IllegalStateException(\"Cannot modify scaling unit count after the service has started\");\n-    } else if (workerCount < 0) {\n-      throw new IllegalArgumentException(\"Request worker workerCount has to be >= 0\");\n-    } else if (workerCount > 0 && restRequestService == null) {\n-      throw new IllegalArgumentException(\"RestRequestService cannot be null\");\n-    }\n-    requestWorkersCount = workerCount;\n-    this.restRequestService = restRequestService;\n-    logger.trace(\"Request handling units count set to {}\", requestWorkersCount);\n-  }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f67c308ae2ad94b0d035d08173379c11436e28"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTA1OTk0OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTozMDo1MVrOFdCD7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTozMDo1MVrOFdCD7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4Njc5OA==", "bodyText": "minor typo: return a handler or return an instance", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365986798", "createdAt": "2020-01-13T19:30:51Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "diffHunk": "@@ -71,51 +49,26 @@ public AsyncRequestResponseHandlerFactory(Integer handlerCount, MetricRegistry m\n     } else if (handlerCount <= 0) {\n       throw new IllegalArgumentException(\"Request handler scaling unit count has to be > 0. Is \" + handlerCount);\n     } else {\n-      buildInstance(metricRegistry);\n-      instance.setupRequestHandling(handlerCount, restRequestService);\n+      handler = new AsyncRequestResponseHandler(new RequestResponseHandlerMetrics(metricRegistry), handlerCount,\n+          restRequestService);\n     }\n     logger.trace(\"Instantiated AsyncRequestResponseHandlerFactory as RestRequestHandler\");\n   }\n \n   /**\n-   * Returns an instance of {@link AsyncRequestResponseHandler}.\n-   * @return an instance of {@link AsyncRequestResponseHandler}.\n+   * @return an handler of {@link AsyncRequestResponseHandler}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f67c308ae2ad94b0d035d08173379c11436e28"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTA2MDQzOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTozMDo1OFrOFdCELg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTozMDo1OFrOFdCELg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4Njg2Mg==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365986862", "createdAt": "2020-01-13T19:30:58Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "diffHunk": "@@ -71,51 +49,26 @@ public AsyncRequestResponseHandlerFactory(Integer handlerCount, MetricRegistry m\n     } else if (handlerCount <= 0) {\n       throw new IllegalArgumentException(\"Request handler scaling unit count has to be > 0. Is \" + handlerCount);\n     } else {\n-      buildInstance(metricRegistry);\n-      instance.setupRequestHandling(handlerCount, restRequestService);\n+      handler = new AsyncRequestResponseHandler(new RequestResponseHandlerMetrics(metricRegistry), handlerCount,\n+          restRequestService);\n     }\n     logger.trace(\"Instantiated AsyncRequestResponseHandlerFactory as RestRequestHandler\");\n   }\n \n   /**\n-   * Returns an instance of {@link AsyncRequestResponseHandler}.\n-   * @return an instance of {@link AsyncRequestResponseHandler}.\n+   * @return an handler of {@link AsyncRequestResponseHandler}.\n    */\n   @Override\n   public RestRequestHandler getRestRequestHandler() {\n-    return instance;\n+    return handler;\n   }\n \n   /**\n-   * Returns an instance of {@link AsyncRequestResponseHandler}.\n-   * @return an instance of {@link AsyncRequestResponseHandler}.\n+   * @return an handler of {@link AsyncRequestResponseHandler}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f67c308ae2ad94b0d035d08173379c11436e28"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTA3MTE1OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTozNDoyM1rOFdCKxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTozNDoyM1rOFdCKxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4ODU1MA==", "bodyText": "minor: no need to change previous comment.", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365988550", "createdAt": "2020-01-13T19:34:23Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "diffHunk": "@@ -171,7 +124,7 @@ private static void buildInstance(MetricRegistry metricRegistry) {\n   public final Counter residualResponseSetSize;\n \n   /**\n-   * Creates an instance of RequestResponseHandlerMetrics using the given {@code metricRegistry}.\n+   * Creates an handler of RequestResponseHandlerMetrics using the given {@code metricRegistry}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f67c308ae2ad94b0d035d08173379c11436e28"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTA4MDI0OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/test/java/com.github.ambry/rest/MockRestRequestResponseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTozNzowMFrOFdCQDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDoyNTo1MlrOFdI6yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4OTkwMQ==", "bodyText": "do we need to check if restRequestService is null?", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365989901", "createdAt": "2020-01-13T19:37:00Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/test/java/com.github.ambry/rest/MockRestRequestResponseHandler.java", "diffHunk": "@@ -40,7 +40,12 @@\n   private boolean isRunning = false;\n   private VerifiableProperties failureProperties = null;\n \n-  private RestRequestService restRequestService = null;\n+  private final RestRequestService restRequestService;\n+\n+  public MockRestRequestResponseHandler(RestRequestService restRequestService) {\n+    this.restRequestService = restRequestService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f67c308ae2ad94b0d035d08173379c11436e28"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5OTE0NA==", "bodyText": "Since it's mock, I think it's ok to throw null exception.", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r366099144", "createdAt": "2020-01-14T00:25:52Z", "author": {"login": "zzmao"}, "path": "ambry-api/src/test/java/com.github.ambry/rest/MockRestRequestResponseHandler.java", "diffHunk": "@@ -40,7 +40,12 @@\n   private boolean isRunning = false;\n   private VerifiableProperties failureProperties = null;\n \n-  private RestRequestService restRequestService = null;\n+  private final RestRequestService restRequestService;\n+\n+  public MockRestRequestResponseHandler(RestRequestService restRequestService) {\n+    this.restRequestService = restRequestService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4OTkwMQ=="}, "originalCommit": {"oid": "37f67c308ae2ad94b0d035d08173379c11436e28"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTI1NDUyOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/test/java/com.github.ambry.rest/AsyncRequestResponseHandlerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDo0Mjo1NVrOFdD8WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDo0Mjo1NVrOFdD8WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxNzYyNQ==", "bodyText": "what's the difference between line 165 and line 173 test cases ?", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r366017625", "createdAt": "2020-01-13T20:42:55Z", "author": {"login": "jsjtzyy"}, "path": "ambry-rest/src/test/java/com.github.ambry.rest/AsyncRequestResponseHandlerTest.java", "diffHunk": "@@ -149,52 +152,37 @@ public void useServiceWithoutStartTest() throws IOException, JSONException, URIS\n   }\n \n   /**\n-   * Tests the behavior of {@link AsyncRequestResponseHandler} when request worker count is not set or is zero.\n+   * Tests the behavior of {@link AsyncRequestResponseHandler} when request worker count or restRequestService is invalid.\n    * @throws Exception\n    */\n   @Test\n-  public void edgeCaseWorkerCountsTest() throws Exception {\n-    RequestResponseHandlerMetrics metrics = new RequestResponseHandlerMetrics(new MetricRegistry());\n-    AsyncRequestResponseHandler requestResponseHandler = new AsyncRequestResponseHandler(metrics);\n-    noRequestHandlersTest(requestResponseHandler);\n-\n-    requestResponseHandler = getAsyncRequestResponseHandler(0);\n-    noRequestHandlersTest(requestResponseHandler);\n-  }\n-\n-  @Test\n-  public void setFunctionsBadArgumentsTest() {\n-    RequestResponseHandlerMetrics metrics = new RequestResponseHandlerMetrics(new MetricRegistry());\n-    AsyncRequestResponseHandler requestResponseHandler = new AsyncRequestResponseHandler(metrics);\n+  public void edgeCaseTest() throws Exception {\n+    AsyncRequestResponseHandler requestResponseHandler;\n+    RequestResponseHandlerMetrics metrics;\n \n     // set request workers < 0\n     try {\n-      requestResponseHandler.setupRequestHandling(-1, restRequestService);\n+      requestResponseHandler = getAsyncRequestResponseHandler(-1);\n       fail(\"Setting request workers < 0 should have thrown exception\");\n     } catch (IllegalArgumentException e) {\n       // expected. nothing to do.\n     }\n \n-    // set null RestRequestService\n+    // set request workers < 0\n     try {\n-      requestResponseHandler.setupRequestHandling(1, null);\n-      fail(\"Setting RestRequestService to null should have thrown exception\");\n+      requestResponseHandler = getAsyncRequestResponseHandler(-1);\n+      fail(\"Setting request workers < 0 should have thrown exception\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f67c308ae2ad94b0d035d08173379c11436e28"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1647, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}