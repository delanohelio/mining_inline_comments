{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4ODI5Mjgx", "number": 1554, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzo0Mjo0MFrOEE4k-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTo0NjozM1rOEG7GEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTU2NzMwOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequestResponseChannel.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzo0Mjo0MFrOGiyRWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo0MjoxNFrOGl7uGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyODQwOA==", "bodyText": "ctx.writeAndFlush would do the work. By the way, maybe we can do ctx.isOpen check before we write, it, the connection might be closed before server got a chance to write.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r439128408", "createdAt": "2020-06-11T23:42:40Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -49,11 +52,10 @@ public void sendResponse(Send payloadToSend, NetworkRequest originalRequest, Ser\n       throw new IllegalArgumentException(\"NetworkRequest should be NettyRequest\");\n     }\n \n-    RestResponseChannel restResponseChannel = ((NettyServerRequest) originalRequest).getRestResponseChannel();\n-    restResponseChannel.setHeader(RestUtils.Headers.CONTENT_LENGTH, payloadToSend.sizeInBytes());\n-    // TODO: add metrics\n-    payloadToSend.writeTo(restResponseChannel, (result, exception) -> {\n-    });// an extra copy\n+    ChannelHandlerContext ctx = ((NettyServerRequest) originalRequest).getCtx();\n+    http2ServerMetrics.requestTotalProcessingTime.update(\n+        System.currentTimeMillis() - originalRequest.getStartTimeInMs());\n+    ctx.pipeline().writeAndFlush(payloadToSend);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957159ba89de77828001d9b35c56ebc1bf167b4f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyODE3Ng==", "bodyText": "add a channel.isOpen() check in AmbrySendToHttp2Adaptor.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442428176", "createdAt": "2020-06-18T18:40:50Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -49,11 +52,10 @@ public void sendResponse(Send payloadToSend, NetworkRequest originalRequest, Ser\n       throw new IllegalArgumentException(\"NetworkRequest should be NettyRequest\");\n     }\n \n-    RestResponseChannel restResponseChannel = ((NettyServerRequest) originalRequest).getRestResponseChannel();\n-    restResponseChannel.setHeader(RestUtils.Headers.CONTENT_LENGTH, payloadToSend.sizeInBytes());\n-    // TODO: add metrics\n-    payloadToSend.writeTo(restResponseChannel, (result, exception) -> {\n-    });// an extra copy\n+    ChannelHandlerContext ctx = ((NettyServerRequest) originalRequest).getCtx();\n+    http2ServerMetrics.requestTotalProcessingTime.update(\n+        System.currentTimeMillis() - originalRequest.getStartTimeInMs());\n+    ctx.pipeline().writeAndFlush(payloadToSend);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyODQwOA=="}, "originalCommit": {"oid": "957159ba89de77828001d9b35c56ebc1bf167b4f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyODk1Mg==", "bodyText": "ctx.writeAndFlush() doesn't work. It writes data to the outboundhandlers before it. ctx.channel().writeAndFlush() is used, which will write data from the tail of the pipeline.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442428952", "createdAt": "2020-06-18T18:42:14Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -49,11 +52,10 @@ public void sendResponse(Send payloadToSend, NetworkRequest originalRequest, Ser\n       throw new IllegalArgumentException(\"NetworkRequest should be NettyRequest\");\n     }\n \n-    RestResponseChannel restResponseChannel = ((NettyServerRequest) originalRequest).getRestResponseChannel();\n-    restResponseChannel.setHeader(RestUtils.Headers.CONTENT_LENGTH, payloadToSend.sizeInBytes());\n-    // TODO: add metrics\n-    payloadToSend.writeTo(restResponseChannel, (result, exception) -> {\n-    });// an extra copy\n+    ChannelHandlerContext ctx = ((NettyServerRequest) originalRequest).getCtx();\n+    http2ServerMetrics.requestTotalProcessingTime.update(\n+        System.currentTimeMillis() - originalRequest.getStartTimeInMs());\n+    ctx.pipeline().writeAndFlush(payloadToSend);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyODQwOA=="}, "originalCommit": {"oid": "957159ba89de77828001d9b35c56ebc1bf167b4f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTU4OTEyOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/main/java/com/github/ambry/server/StorageServerNettyChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzo1NToyM1rOGiyegQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo0MTowMFrOGl7rYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMTc3Nw==", "bodyText": "what happened to connetionstats handler, why we drop it here.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r439131777", "createdAt": "2020-06-11T23:55:23Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/main/java/com/github/ambry/server/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -102,9 +98,27 @@ protected void initChannel(SocketChannel ch) throws Exception {\n             .maxFrameSize(http2ClientConfig.http2FrameMaxSize)\n             .initialWindowSize(http2ClientConfig.http2InitialWindowSize))\n         .frameLogger(new Http2FrameLogger(LogLevel.DEBUG, \"server\"))\n-        .build())\n-        .addLast(\"Http2MultiplexHandler\", new Http2MultiplexHandler(\n-            new Http2StreamHandler(nettyMetrics, nettyConfig, performanceConfig, http2ClientConfig, requestHandler)));\n+        .build()).addLast(\"Http2MultiplexHandler\", new Http2MultiplexHandler(http2ServerStreamHandler));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957159ba89de77828001d9b35c56ebc1bf167b4f"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyODI1OQ==", "bodyText": "added it back.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442428259", "createdAt": "2020-06-18T18:41:00Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/main/java/com/github/ambry/server/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -102,9 +98,27 @@ protected void initChannel(SocketChannel ch) throws Exception {\n             .maxFrameSize(http2ClientConfig.http2FrameMaxSize)\n             .initialWindowSize(http2ClientConfig.http2InitialWindowSize))\n         .frameLogger(new Http2FrameLogger(LogLevel.DEBUG, \"server\"))\n-        .build())\n-        .addLast(\"Http2MultiplexHandler\", new Http2MultiplexHandler(\n-            new Http2StreamHandler(nettyMetrics, nettyConfig, performanceConfig, http2ClientConfig, requestHandler)));\n+        .build()).addLast(\"Http2MultiplexHandler\", new Http2MultiplexHandler(http2ServerStreamHandler));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMTc3Nw=="}, "originalCommit": {"oid": "957159ba89de77828001d9b35c56ebc1bf167b4f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTYxOTI1OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDowOTozM1rOGiywiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoyNjowOVrOGmcR6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNjM5Mw==", "bodyText": "I would go against using writeAndFlush here, this is a write method, it should just call ctx.write and let the caller do writeAndFlush.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r439136393", "createdAt": "2020-06-12T00:09:33Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -60,6 +72,6 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)\n       return;\n     }\n     DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBufChannel.getBuf(), true);\n-    ctx.write(dataFrame, promise);\n+    ctx.writeAndFlush(dataFrame, promise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957159ba89de77828001d9b35c56ebc1bf167b4f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMDAxNQ==", "bodyText": "I am a little worry about using write() only.\nDid some reading, but still not sure if the caller's writeAndFlush can trigger writeAndFlush through all the pipeline.\nAny drawback to use writeAndFlush() here?", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442430015", "createdAt": "2020-06-18T18:44:18Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -60,6 +72,6 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)\n       return;\n     }\n     DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBufChannel.getBuf(), true);\n-    ctx.write(dataFrame, promise);\n+    ctx.writeAndFlush(dataFrame, promise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNjM5Mw=="}, "originalCommit": {"oid": "957159ba89de77828001d9b35c56ebc1bf167b4f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NDk2OA==", "bodyText": "A caller calling writeAndFlush here will likely result in a call to AbstractChannelHandlerContext.writeAndFlush which calls invokeWriteAndFlush. This appears to call flush, but feeds the promise only to the write call (invokeWrite0). I'm pretty sure the promise is only completed once the message is actually flushed though.\nSo, I feel that the difference between just calling write here vs calling writeAndFlush would be that flush would be called twice in a row if the caller already calls writeAndFlush.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442494968", "createdAt": "2020-06-18T20:50:43Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -60,6 +72,6 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)\n       return;\n     }\n     DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBufChannel.getBuf(), true);\n-    ctx.write(dataFrame, promise);\n+    ctx.writeAndFlush(dataFrame, promise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNjM5Mw=="}, "originalCommit": {"oid": "957159ba89de77828001d9b35c56ebc1bf167b4f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyMzU0NQ==", "bodyText": "as per my understanding the functional difference between write and writeAndFlush is that writeAndFlush writes the data immediately to the socket buffer whereas with write() the flushing to socket buffer does not happen untill a certain number of buffer is accumulated at netty layer which is controlled through setWriteBufferHighWaterMark in ChannelConfig i think. Usually writeAndFlush() is needed for latency sensitive protocols, it may a bit costly if lots of small messages are being sent out using writeAndFlush.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442523545", "createdAt": "2020-06-18T21:54:40Z", "author": {"login": "ssen-li"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -60,6 +72,6 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)\n       return;\n     }\n     DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBufChannel.getBuf(), true);\n-    ctx.write(dataFrame, promise);\n+    ctx.writeAndFlush(dataFrame, promise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNjM5Mw=="}, "originalCommit": {"oid": "957159ba89de77828001d9b35c56ebc1bf167b4f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2MjQwOQ==", "bodyText": "Looks at the code, if the caller call writeAndFlush, it will internally\n    private void invokeWriteAndFlush(Object msg, ChannelPromise promise) {\n        if (invokeHandler()) {\n            invokeWrite0(msg, promise);\n            invokeFlush0();\n        } else {\n            writeAndFlush(msg, promise);\n        }\n    }\n\nso, we are safe if only write() used in AmbrySendToHttp2Adaptor.java", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442962409", "createdAt": "2020-06-19T17:26:09Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -60,6 +72,6 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)\n       return;\n     }\n     DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBufChannel.getBuf(), true);\n-    ctx.write(dataFrame, promise);\n+    ctx.writeAndFlush(dataFrame, promise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNjM5Mw=="}, "originalCommit": {"oid": "957159ba89de77828001d9b35c56ebc1bf167b4f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjY2NzkwOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDowNjo1M1rOGl-eQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDowNjo1M1rOGl-eQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3NDA0OQ==", "bodyText": "package-private?", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442474049", "createdAt": "2020-06-18T20:06:53Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequest.java", "diffHunk": "@@ -13,32 +13,33 @@\n  */\n package com.github.ambry.network;\n \n-import com.github.ambry.rest.RestRequest;\n-import com.github.ambry.rest.RestResponseChannel;\n import com.github.ambry.utils.AbstractByteBufHolder;\n import com.github.ambry.utils.NettyByteBufDataInputStream;\n import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n import java.io.InputStream;\n \n \n /**\n  * A wrapper class at the network layer for NettyRequest based RestRequest.\n  */\n public class NettyServerRequest extends AbstractByteBufHolder<NettyServerRequest> implements NetworkRequest {\n+  private final ChannelHandlerContext ctx;\n   private final InputStream inputStream;\n-  private final RestResponseChannel restResponseChannel;\n-  private final RestRequest restRequest;\n   private final long startTimeInMs;\n   private final ByteBuf content;\n \n-  public NettyServerRequest(RestRequest restRequest, RestResponseChannel restResponseChannel, ByteBuf content) {\n-    this.restRequest = restRequest;\n-    this.restResponseChannel = restResponseChannel;\n+  public NettyServerRequest(ChannelHandlerContext ctx, ByteBuf content) {\n+    this.ctx = ctx;\n     this.content = content;\n     this.inputStream = new NettyByteBufDataInputStream(content);\n     this.startTimeInMs = System.currentTimeMillis();\n   }\n \n+  public ChannelHandlerContext getCtx() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fe784fb0bd148f9c8a74ce6c0cd1873deae999e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjY4NzA3OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequestResponseChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoxMzo0MlrOGl-q-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzozMzowNlrOGmcdEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3NzMwNA==", "bodyText": "This metric seems to just record the time it takes to call requestQueue.put, which should be short unless the queue is full. Is that intended? Is there another metric to record the time the request spends in the queue?", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442477304", "createdAt": "2020-06-18T20:13:42Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -29,18 +29,21 @@\n public class NettyServerRequestResponseChannel implements RequestResponseChannel {\n   private static final Logger logger = LoggerFactory.getLogger(NettyServerRequestResponseChannel.class);\n   private final ArrayBlockingQueue<NetworkRequest> requestQueue;\n+  private final Http2ServerMetrics http2ServerMetrics;\n \n-  public NettyServerRequestResponseChannel(int queueSize) {\n+  public NettyServerRequestResponseChannel(int queueSize, Http2ServerMetrics http2ServerMetrics) {\n     requestQueue = new ArrayBlockingQueue<>(queueSize);\n+    this.http2ServerMetrics = http2ServerMetrics;\n   }\n \n   /** Send a request to be handled, potentially blocking until there is room in the queue for the request */\n   @Override\n   public void sendRequest(NetworkRequest request) throws InterruptedException {\n     requestQueue.put(request);\n+    http2ServerMetrics.requestEnqueueTime.update(System.currentTimeMillis() - request.getStartTimeInMs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fe784fb0bd148f9c8a74ce6c0cd1873deae999e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2NTI2Ng==", "bodyText": "yes, i have an impression that we hit  queue blocking issue before. Use this metric to reminder use.\nQueuing metric is also import, added a new one.\nGood catch!", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442965266", "createdAt": "2020-06-19T17:33:06Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -29,18 +29,21 @@\n public class NettyServerRequestResponseChannel implements RequestResponseChannel {\n   private static final Logger logger = LoggerFactory.getLogger(NettyServerRequestResponseChannel.class);\n   private final ArrayBlockingQueue<NetworkRequest> requestQueue;\n+  private final Http2ServerMetrics http2ServerMetrics;\n \n-  public NettyServerRequestResponseChannel(int queueSize) {\n+  public NettyServerRequestResponseChannel(int queueSize, Http2ServerMetrics http2ServerMetrics) {\n     requestQueue = new ArrayBlockingQueue<>(queueSize);\n+    this.http2ServerMetrics = http2ServerMetrics;\n   }\n \n   /** Send a request to be handled, potentially blocking until there is room in the queue for the request */\n   @Override\n   public void sendRequest(NetworkRequest request) throws InterruptedException {\n     requestQueue.put(request);\n+    http2ServerMetrics.requestEnqueueTime.update(System.currentTimeMillis() - request.getStartTimeInMs());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3NzMwNA=="}, "originalCommit": {"oid": "3fe784fb0bd148f9c8a74ce6c0cd1873deae999e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjczOTc2OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbryNetworkRequestHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDozMTo1OVrOGl_McQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDozMTo1OVrOGl_McQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4NTg3Mw==", "bodyText": "release dup if an exception occurs?", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442485873", "createdAt": "2020-06-18T20:31:59Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbryNetworkRequestHandler.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.NettyServerRequest;\n+import com.github.ambry.network.RequestResponseChannel;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Retain content of {@link FullHttpRequest} and send to {@link RequestResponseChannel}.\n+ */\n+@ChannelHandler.Sharable\n+public class AmbryNetworkRequestHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbryNetworkRequestHandler.class);\n+  private final RequestResponseChannel requestResponseChannel;\n+  private final Http2ServerMetrics http2ServerMetrics;\n+\n+  public AmbryNetworkRequestHandler(RequestResponseChannel requestResponseChannel,\n+      Http2ServerMetrics http2ServerMetrics) {\n+    this.requestResponseChannel = requestResponseChannel;\n+    this.http2ServerMetrics = http2ServerMetrics;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) {\n+\n+    ByteBuf dup = msg.content().retainedDuplicate();\n+    try {\n+      requestResponseChannel.sendRequest(new NettyServerRequest(ctx, dup));\n+    } catch (InterruptedException e) {\n+      http2ServerMetrics.requestResponseChannelErrorCount.inc();\n+      logger.warn(\"Can't send NettyServerRequest to requestResponseChannel. Cause: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fe784fb0bd148f9c8a74ce6c0cd1873deae999e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njc0NDA5OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDozMzozNlrOGl_PSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDozMzozNlrOGl_PSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4NjYwMA==", "bodyText": "add javadoc for what forServer changes.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442486600", "createdAt": "2020-06-18T20:33:36Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -34,21 +36,36 @@\n  */\n @ChannelHandler.Sharable\n public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n-  public AmbrySendToHttp2Adaptor() {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);\n+  private final boolean forServer;\n \n+  public AmbrySendToHttp2Adaptor(boolean forServer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fe784fb0bd148f9c8a74ce6c0cd1873deae999e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjgwNTc4OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbryNetworkRequestHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo1NDoyNFrOGl_23g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoxNjowNlrOGmcAGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NjczNA==", "bodyText": "Does closing this channel end just this stream or trigger a connection close? I would also like to learn more about when GOAWAY frames are sent.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442496734", "createdAt": "2020-06-18T20:54:24Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbryNetworkRequestHandler.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.NettyServerRequest;\n+import com.github.ambry.network.RequestResponseChannel;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Retain content of {@link FullHttpRequest} and send to {@link RequestResponseChannel}.\n+ */\n+@ChannelHandler.Sharable\n+public class AmbryNetworkRequestHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbryNetworkRequestHandler.class);\n+  private final RequestResponseChannel requestResponseChannel;\n+  private final Http2ServerMetrics http2ServerMetrics;\n+\n+  public AmbryNetworkRequestHandler(RequestResponseChannel requestResponseChannel,\n+      Http2ServerMetrics http2ServerMetrics) {\n+    this.requestResponseChannel = requestResponseChannel;\n+    this.http2ServerMetrics = http2ServerMetrics;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) {\n+\n+    ByteBuf dup = msg.content().retainedDuplicate();\n+    try {\n+      requestResponseChannel.sendRequest(new NettyServerRequest(ctx, dup));\n+    } catch (InterruptedException e) {\n+      http2ServerMetrics.requestResponseChannelErrorCount.inc();\n+      logger.warn(\"Can't send NettyServerRequest to requestResponseChannel. Cause: \", e);\n+    }\n+  }\n+\n+  @Override\n+  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n+    http2ServerMetrics.http2StreamExceptionCount.inc();\n+    logger.warn(\"Exception caught in AmbryNetworkRequestHandler, cause: \", cause);\n+    ctx.channel().close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fe784fb0bd148f9c8a74ce6c0cd1873deae999e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1Nzg0OA==", "bodyText": "yes. It only closes stream channel.\nIf parents channel needs close, it would be ctx.channel().parent().close();\nGOAWAY is not used in our server or client. I am still thinking how to apply it.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442957848", "createdAt": "2020-06-19T17:16:06Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbryNetworkRequestHandler.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.NettyServerRequest;\n+import com.github.ambry.network.RequestResponseChannel;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Retain content of {@link FullHttpRequest} and send to {@link RequestResponseChannel}.\n+ */\n+@ChannelHandler.Sharable\n+public class AmbryNetworkRequestHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n+  private static final Logger logger = LoggerFactory.getLogger(AmbryNetworkRequestHandler.class);\n+  private final RequestResponseChannel requestResponseChannel;\n+  private final Http2ServerMetrics http2ServerMetrics;\n+\n+  public AmbryNetworkRequestHandler(RequestResponseChannel requestResponseChannel,\n+      Http2ServerMetrics http2ServerMetrics) {\n+    this.requestResponseChannel = requestResponseChannel;\n+    this.http2ServerMetrics = http2ServerMetrics;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) {\n+\n+    ByteBuf dup = msg.content().retainedDuplicate();\n+    try {\n+      requestResponseChannel.sendRequest(new NettyServerRequest(ctx, dup));\n+    } catch (InterruptedException e) {\n+      http2ServerMetrics.requestResponseChannelErrorCount.inc();\n+      logger.warn(\"Can't send NettyServerRequest to requestResponseChannel. Cause: \", e);\n+    }\n+  }\n+\n+  @Override\n+  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n+    http2ServerMetrics.http2StreamExceptionCount.inc();\n+    logger.warn(\"Exception caught in AmbryNetworkRequestHandler, cause: \", cause);\n+    ctx.channel().close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NjczNA=="}, "originalCommit": {"oid": "3fe784fb0bd148f9c8a74ce6c0cd1873deae999e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjgzNDY2OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/main/java/com/github/ambry/server/StorageServerNettyChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTowNDoyMlrOGmAJ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTowNDoyMlrOGmAJ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMTU5OQ==", "bodyText": "nit: I find it more readable if each handler is added on a new line:\n        .build());\n    pipeline.addLast(\"Http2MultiplexHandler\", new Http2MultiplexHandler(http2ServerStreamHandler));", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442501599", "createdAt": "2020-06-18T21:04:22Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/main/java/com/github/ambry/server/StorageServerNettyChannelInitializer.java", "diffHunk": "@@ -90,21 +91,39 @@ protected void initChannel(SocketChannel ch) throws Exception {\n     // i.e. if there are a 1000 active connections there will be a 1000 NettyMessageProcessor instances.\n     ChannelPipeline pipeline = ch.pipeline();\n     // connection stats handler to track connection related metrics\n-    pipeline.addLast(\"connectionStatsHandler\", connectionStatsHandler);\n+    pipeline.addLast(\"ConnectionStatsHandler\", connectionStatsHandler);\n     InetSocketAddress peerAddress = ch.remoteAddress();\n     String peerHost = peerAddress.getHostName();\n     int peerPort = peerAddress.getPort();\n     SslHandler sslHandler = new SslHandler(sslFactory.createSSLEngine(peerHost, peerPort, SSLFactory.Mode.SERVER));\n     pipeline.addLast(\"SslHandler\", sslHandler);\n-    pipeline.addLast(\"securityChecker\", serverSecurityHandler);\n+    pipeline.addLast(\"SecurityChecker\", serverSecurityHandler);\n     pipeline.addLast(Http2FrameCodecBuilder.forServer()\n         .initialSettings(Http2Settings.defaultSettings()\n             .maxFrameSize(http2ClientConfig.http2FrameMaxSize)\n             .initialWindowSize(http2ClientConfig.http2InitialWindowSize))\n         .frameLogger(new Http2FrameLogger(LogLevel.DEBUG, \"server\"))\n-        .build())\n-        .addLast(\"Http2MultiplexHandler\", new Http2MultiplexHandler(\n-            new Http2StreamHandler(nettyMetrics, nettyConfig, performanceConfig, http2ClientConfig, requestHandler)));\n+        .build()).addLast(\"Http2MultiplexHandler\", new Http2MultiplexHandler(http2ServerStreamHandler));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fe784fb0bd148f9c8a74ce6c0cd1873deae999e"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njk1MTIxOnYy", "diffSide": "LEFT", "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequestResponseChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTo0NjozM1rOGmBTHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzozNTowN1rOGmcgLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyMDM0OA==", "bodyText": "Where is the CONTENT_LENGTH header set now since it's being removed from here?", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442520348", "createdAt": "2020-06-18T21:46:33Z", "author": {"login": "ssen-li"}, "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -49,11 +52,10 @@ public void sendResponse(Send payloadToSend, NetworkRequest originalRequest, Ser\n       throw new IllegalArgumentException(\"NetworkRequest should be NettyRequest\");\n     }\n \n-    RestResponseChannel restResponseChannel = ((NettyServerRequest) originalRequest).getRestResponseChannel();\n-    restResponseChannel.setHeader(RestUtils.Headers.CONTENT_LENGTH, payloadToSend.sizeInBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fe784fb0bd148f9c8a74ce6c0cd1873deae999e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2NjA2Mw==", "bodyText": "It was used because we reused frontend NettyMessageProcessor which has a dependency on CONTENT_LENGTH. Since we totally dropped NettyMessageProcessor, CONTENT_LENGTH is no longer needed.", "url": "https://github.com/linkedin/ambry/pull/1554#discussion_r442966063", "createdAt": "2020-06-19T17:35:07Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/NettyServerRequestResponseChannel.java", "diffHunk": "@@ -49,11 +52,10 @@ public void sendResponse(Send payloadToSend, NetworkRequest originalRequest, Ser\n       throw new IllegalArgumentException(\"NetworkRequest should be NettyRequest\");\n     }\n \n-    RestResponseChannel restResponseChannel = ((NettyServerRequest) originalRequest).getRestResponseChannel();\n-    restResponseChannel.setHeader(RestUtils.Headers.CONTENT_LENGTH, payloadToSend.sizeInBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyMDM0OA=="}, "originalCommit": {"oid": "3fe784fb0bd148f9c8a74ce6c0cd1873deae999e"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1241, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}