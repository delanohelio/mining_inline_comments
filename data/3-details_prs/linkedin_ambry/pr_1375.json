{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTY3MzM0", "number": 1375, "title": "Default to use netty bytebuf in network layer and remove getAndRelease method", "bodyText": "This pr includes two changes:\n\nDefault to use netty bytebuf in network layer, which will remove lots of code dealing with java bytebuffer\nRemove getAndRelease and replace it with content method and implements ByteBufHolder interface.", "createdAt": "2020-02-06T23:46:15Z", "url": "https://github.com/linkedin/ambry/pull/1375", "merged": true, "mergeCommit": {"oid": "75388d989bd8c9c361e2c7b38f3667bf8b7aa67d"}, "closed": true, "closedAt": "2020-02-14T22:32:58Z", "author": {"login": "justinlin-linkedin"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDgKUIgFqTM1NzIwMDYwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEXUjrgFqTM1OTI1NjQzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MjAwNjA0", "url": "https://github.com/linkedin/ambry/pull/1375#pullrequestreview-357200604", "createdAt": "2020-02-12T05:43:25Z", "commit": {"oid": "1029456f79fe963617cbb1e4bb553d4efacf26b9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNTo0MzoyNVrOFoiVlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNTo1Nzo0OFrOFoiicA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0OTk0MA==", "bodyText": "document return value", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378049940", "createdAt": "2020-02-12T05:43:25Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/network/NetworkRequest.java", "diffHunk": "@@ -35,5 +35,7 @@\n   /**\n    * Release any resource this request is holding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1029456f79fe963617cbb1e4bb553d4efacf26b9"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1MzIzMg==", "bodyText": "A DefaultByteBufHolder interface may help to reduce some of the duplicated code for the different impls of of ByteBufHolder. Something like:\ninterface DefaultByteBufHolder<T extends ByteBufHolder> extends ByteBufHolder {\n\n  @Override\n  T replace(ByteBuf content);\n\n  @Override\n  default T copy() {\n    return replace(content().copy());\n  }\n\n  // ...\n  \n  @Override\n  default int refCnt() {\n    return content().refCnt();\n  }\n  \n  // ...\n}", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378053232", "createdAt": "2020-02-12T05:57:48Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java", "diffHunk": "@@ -100,31 +106,87 @@ public long readFrom(ReadableByteChannel channel) throws IOException {\n   }\n \n   /**\n-   * Returns the payload as {@link ByteBuf}, at the same time release the current reference to this payload.\n-   * It's not safe to call this function multiple times.\n+   * The total size in bytes that needs to receive from the channel\n+   * It will be initialized only after header is read.\n+   * @return the size of the data in bytes to receive after reading header, otherwise return 0\n+   */\n+  public long sizeRead() {\n+    return sizeRead;\n+  }\n+\n+  /**\n+   * Returns the byte buffer received.\n    * @return\n    */\n+  public ByteBuf content() {\n+    return buffer;\n+  }\n+\n   @Override\n-  public ByteBuf getAndRelease() {\n-    if (buffer == null) {\n-      return null;\n+  public BoundedNettyByteBufReceive copy() {\n+    return replace(content().copy());\n+  }\n+\n+  @Override\n+  public BoundedNettyByteBufReceive duplicate() {\n+    return replace(content().duplicate());\n+  }\n+\n+  @Override\n+  public BoundedNettyByteBufReceive retainedDuplicate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1029456f79fe963617cbb1e4bb553d4efacf26b9"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16a6664650fbe05439deeb25d710173093f074e9", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/16a6664650fbe05439deeb25d710173093f074e9", "committedDate": "2020-02-12T17:55:22Z", "message": "Default to use netty bytebuf in network layer and remove getAndRelease method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "548815aa66fc8945581741a16a396c8718c4ad7d", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/548815aa66fc8945581741a16a396c8718c4ad7d", "committedDate": "2020-02-12T17:55:22Z", "message": "Remove BoundedReceive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21a3c4fa12c46a44a253fe38399d03de01ae0b8b", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/21a3c4fa12c46a44a253fe38399d03de01ae0b8b", "committedDate": "2020-02-12T17:55:22Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8764756eae58484dd1ea77026b1958d3277ec11", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/a8764756eae58484dd1ea77026b1958d3277ec11", "committedDate": "2020-02-12T17:55:22Z", "message": "Another test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "765be429f8ed63c4aad52647acbc73e293b05b48", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/765be429f8ed63c4aad52647acbc73e293b05b48", "committedDate": "2020-02-12T18:41:23Z", "message": "Comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1029456f79fe963617cbb1e4bb553d4efacf26b9", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/1029456f79fe963617cbb1e4bb553d4efacf26b9", "committedDate": "2020-02-07T20:58:31Z", "message": "Another test"}, "afterCommit": {"oid": "765be429f8ed63c4aad52647acbc73e293b05b48", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/765be429f8ed63c4aad52647acbc73e293b05b48", "committedDate": "2020-02-12T18:41:23Z", "message": "Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "committedDate": "2020-02-12T19:28:51Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODU5MTY0", "url": "https://github.com/linkedin/ambry/pull/1375#pullrequestreview-357859164", "createdAt": "2020-02-12T23:19:42Z", "commit": {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxOTo0MlrOFpCC5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMjoyMDoxMFrOFpFEIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2OTQ0NQ==", "bodyText": "variable receive is redundant.", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378569445", "createdAt": "2020-02-12T23:19:42Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java", "diffHunk": "@@ -99,32 +105,26 @@ public long readFrom(ReadableByteChannel channel) throws IOException {\n     return bytesRead;\n   }\n \n-  /**\n-   * Returns the payload as {@link ByteBuf}, at the same time release the current reference to this payload.\n-   * It's not safe to call this function multiple times.\n-   * @return\n-   */\n-  @Override\n-  public ByteBuf getAndRelease() {\n-    if (buffer == null) {\n-      return null;\n-    } else {\n-      try {\n-        return buffer.retainedDuplicate();\n-      } finally {\n-        buffer.release();\n-        buffer = null;\n-      }\n-    }\n-  }\n-\n   /**\n    * The total size in bytes that needs to receive from the channel\n    * It will be initialized only after header is read.\n    * @return the size of the data in bytes to receive after reading header, otherwise return 0\n    */\n-  @Override\n   public long sizeRead() {\n     return sizeRead;\n   }\n+\n+  /**\n+   * Returns the byte buffer received.\n+   * @return\n+   */\n+  public ByteBuf content() {\n+    return buffer;\n+  }\n+\n+  @Override\n+  public BoundedNettyByteBufReceive replace(ByteBuf content) {\n+    BoundedNettyByteBufReceive receive = new BoundedNettyByteBufReceive(content, sizeToRead);\n+    return receive;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3MzU5MQ==", "bodyText": "nit: complete the java doc", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378573591", "createdAt": "2020-02-12T23:32:48Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java", "diffHunk": "@@ -99,32 +105,26 @@ public long readFrom(ReadableByteChannel channel) throws IOException {\n     return bytesRead;\n   }\n \n-  /**\n-   * Returns the payload as {@link ByteBuf}, at the same time release the current reference to this payload.\n-   * It's not safe to call this function multiple times.\n-   * @return\n-   */\n-  @Override\n-  public ByteBuf getAndRelease() {\n-    if (buffer == null) {\n-      return null;\n-    } else {\n-      try {\n-        return buffer.retainedDuplicate();\n-      } finally {\n-        buffer.release();\n-        buffer = null;\n-      }\n-    }\n-  }\n-\n   /**\n    * The total size in bytes that needs to receive from the channel\n    * It will be initialized only after header is read.\n    * @return the size of the data in bytes to receive after reading header, otherwise return 0\n    */\n-  @Override\n   public long sizeRead() {\n     return sizeRead;\n   }\n+\n+  /**\n+   * Returns the byte buffer received.\n+   * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5MDE5Ng==", "bodyText": "info is redundant", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378590196", "createdAt": "2020-02-13T00:30:21Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java", "diffHunk": "@@ -99,7 +77,18 @@ public DataNodeId getDataNode() {\n \n   @Override\n   public String toString() {\n-    return \"ResponseInfo{\" + \"requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + response\n-        + \", dataNode=\" + dataNode + '}';\n+    return \"ResponseInfo{\" + \"requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + content + \", dataNode=\"\n+        + dataNode + '}';\n+  }\n+\n+  @Override\n+  public ByteBuf content() {\n+    return content;\n+  }\n+\n+  @Override\n+  public ResponseInfo replace(ByteBuf content) {\n+    ResponseInfo info = new ResponseInfo(requestInfo, error, content, dataNode);\n+    return info;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5MDYyNQ==", "bodyText": "minor: combine \"ResponseInfo{\" + \"requestInfo=\" to a single string", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378590625", "createdAt": "2020-02-13T00:31:41Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java", "diffHunk": "@@ -99,7 +77,18 @@ public DataNodeId getDataNode() {\n \n   @Override\n   public String toString() {\n-    return \"ResponseInfo{\" + \"requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + response\n-        + \", dataNode=\" + dataNode + '}';\n+    return \"ResponseInfo{\" + \"requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + content + \", dataNode=\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5ODAzNQ==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378598035", "createdAt": "2020-02-13T00:55:39Z", "author": {"login": "jsjtzyy"}, "path": "ambry-messageformat/src/main/java/com.github.ambry.messageformat/BlobData.java", "diffHunk": "@@ -68,40 +51,14 @@ public long getSize() {\n     return size;\n   }\n \n-  /**\n-   * @return the {@link ByteBufferInputStream} containing the blob content.\n-   */\n-  @Deprecated\n-  public ByteBufferInputStream getStream() {\n-    if (stream != null) {\n-      return stream;\n-    }\n-    // The blob content is passed as a ByteBuf since the stream is nulle\n-    if (byteBuf == null) {\n-      return null;\n-    }\n-    ByteBuffer temp = ByteBuffer.allocate(byteBuf.readableBytes());\n-    byteBuf.readBytes(temp);\n-    byteBuf.release();\n-    byteBuf = null;\n-    temp.flip();\n-    stream = new ByteBufferInputStream(temp);\n-    return stream;\n+  @Override\n+  public ByteBuf content() {\n+    return content;\n   }\n \n-  /**\n-   * Return the netty {@link ByteBuf} and then transfer the ownership to the caller. It's not safe\n-   * to call this method more than once.\n-   */\n-  public ByteBuf getAndRelease() {\n-    if (byteBuf == null) {\n-      return null;\n-    }\n-    try {\n-      return byteBuf.retainedDuplicate();\n-    } finally {\n-      byteBuf.release();\n-      byteBuf = null;\n-    }\n+  @Override\n+  public BlobData replace(ByteBuf content) {\n+    BlobData data = new BlobData(blobType, size, content);\n+    return data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxNzI1OA==", "bodyText": "minor: update java doc", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378617258", "createdAt": "2020-02-13T02:13:02Z", "author": {"login": "jsjtzyy"}, "path": "ambry-network/src/main/java/com.github.ambry.network/LocalRequestResponseChannel.java", "diffHunk": "@@ -121,14 +122,13 @@ public void shutdown() {\n    * Utility to extract a byte buffer from a {@link Send} object, skipping the size header.\n    * @param payload the payload whose bytes we want.\n    */\n-  static ByteBuffer byteBufferFromPayload(Send payload) throws IOException {\n+  static ByteBuf byteBufFromPayload(Send payload) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxNzYzNA==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378617634", "createdAt": "2020-02-13T02:14:32Z", "author": {"login": "jsjtzyy"}, "path": "ambry-network/src/main/java/com.github.ambry.network/SocketRequestResponseChannel.java", "diffHunk": "@@ -53,21 +54,24 @@ public long getStartTimeInMs() {\n     return startTimeInMs;\n   }\n \n-  @Override\n-  public void release() {\n-    if (buffer != null) {\n-      ReferenceCountUtil.release(buffer);\n-      buffer = null;\n-    }\n-  }\n-\n   public int getProcessor() {\n     return processor;\n   }\n \n   public String getConnectionId() {\n     return connectionId;\n   }\n+\n+  @Override\n+  public ByteBuf content() {\n+    return content;\n+  }\n+\n+  @Override\n+  public SocketServerRequest replace(ByteBuf content) {\n+    SocketServerRequest request = new SocketServerRequest(getProcessor(), getConnectionId(), content);\n+    return request;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxODM4OQ==", "bodyText": "who is supposed to release the buffer?", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378618389", "createdAt": "2020-02-13T02:17:57Z", "author": {"login": "jsjtzyy"}, "path": "ambry-network/src/main/java/com.github.ambry.network/SocketServer.java", "diffHunk": "@@ -419,9 +420,8 @@ public void run() {\n         List<NetworkReceive> completedReceives = selector.completedReceives();\n         for (NetworkReceive networkReceive : completedReceives) {\n           String connectionId = networkReceive.getConnectionId();\n-          Object buffer = networkReceive.getReceivedBytes().getAndRelease();\n-          SocketServerRequest req = new SocketServerRequest(id, connectionId, buffer,\n-              Utils.createDataInputStreamFromBuffer(buffer, networkConfig.networkPutRequestShareMemory));\n+          ByteBuf buffer = networkReceive.getReceivedBytes().content();\n+          SocketServerRequest req = new SocketServerRequest(id, connectionId, buffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxODkxMw==", "bodyText": "did we release the payload?", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378618913", "createdAt": "2020-02-13T02:20:10Z", "author": {"login": "jsjtzyy"}, "path": "ambry-network/src/test/java/com.github.ambry.network/SSLSelectorTest.java", "diffHunk": "@@ -212,11 +212,10 @@ public void testNormalOperation() throws Exception {\n \n       // handle any responses we may have gotten\n       for (NetworkReceive receive : selector.completedReceives()) {\n-        ByteBuffer payload = (ByteBuffer) (receive.getReceivedBytes().getAndRelease());\n+        ByteBuf payload = receive.getReceivedBytes().content();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25be8c825f7c5f004472f8fa9340e05aedc1f101", "author": {"user": {"login": "justinlin-linkedin", "name": "Justin Lin"}}, "url": "https://github.com/linkedin/ambry/commit/25be8c825f7c5f004472f8fa9340e05aedc1f101", "committedDate": "2020-02-13T16:21:13Z", "message": "Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTg4NDIw", "url": "https://github.com/linkedin/ambry/pull/1375#pullrequestreview-359188420", "createdAt": "2020-02-14T20:03:41Z", "commit": {"oid": "25be8c825f7c5f004472f8fa9340e05aedc1f101"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjU2NDM3", "url": "https://github.com/linkedin/ambry/pull/1375#pullrequestreview-359256437", "createdAt": "2020-02-14T22:32:04Z", "commit": {"oid": "25be8c825f7c5f004472f8fa9340e05aedc1f101"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1595, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}