{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0OTQ5ODY0", "number": 1512, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTo0NjozNVrOD6hUwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDo0Mjo0OFrOD8SL3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjg5OTg0OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/ReplicationConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTo0NjozNVrOGSZ24g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTo0NjozNVrOGSZ24g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MTIwMg==", "bodyText": "Can we call this either \"replication.model.across.datacenters\"? (Also, please double check if this config is needed on source node. I feel it is not required by source node)", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r421951202", "createdAt": "2020-05-08T05:46:35Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/config/ReplicationConfig.java", "diffHunk": "@@ -181,6 +181,17 @@\n   @Default(\"\")\n   public final Set<String> replicationVcrRecoveryPartitions;\n \n+  /**\n+   * To specify the type of replication to be used for inter colo replication.\n+   * It has two values - \"all-to-all\" or \"leader-based\". Default value is \"all-to-all\".\n+   * If set to \"leader-based\", inter colo replication between will be limited to the leaders(as elected by Helix) of the partition of each datacenter.\n+   * If set to \"all-to-all\", inter colo replication will be in an all-to-all fashion, i.e. each replica talks to all other replicas irrespective of their state.\n+   * Intra colo replication will continue as all-to-all fashion in both the models.\n+   */\n+  @Config(\"replication.inter.colo.datacenter.model\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f370291c40937d3d586ebb7820cf0a4e252b304b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjkwNDk2OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/ReplicationConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTo0OTowNVrOGSZ5sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTo0OTowNVrOGSZ5sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MTkyMg==", "bodyText": "Usually this variable name should be exact same with the config string.", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r421951922", "createdAt": "2020-05-08T05:49:05Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/config/ReplicationConfig.java", "diffHunk": "@@ -181,6 +181,17 @@\n   @Default(\"\")\n   public final Set<String> replicationVcrRecoveryPartitions;\n \n+  /**\n+   * To specify the type of replication to be used for inter colo replication.\n+   * It has two values - \"all-to-all\" or \"leader-based\". Default value is \"all-to-all\".\n+   * If set to \"leader-based\", inter colo replication between will be limited to the leaders(as elected by Helix) of the partition of each datacenter.\n+   * If set to \"all-to-all\", inter colo replication will be in an all-to-all fashion, i.e. each replica talks to all other replicas irrespective of their state.\n+   * Intra colo replication will continue as all-to-all fashion in both the models.\n+   */\n+  @Config(\"replication.inter.colo.datacenter.model\")\n+  @Default(\"all-to-all\")\n+  public final String replicationModelForInterColoDatacenters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f370291c40937d3d586ebb7820cf0a4e252b304b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjkzMjYyOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjowMjoyNVrOGSaJdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjowMjoyNVrOGSaJdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NTk1Nw==", "bodyText": "minor: let's use equalsIgnoreCase here", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r421955957", "createdAt": "2020-05-08T06:02:25Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationEngine.java", "diffHunk": "@@ -121,6 +122,8 @@ public ReplicationEngine(ReplicationConfig replicationConfig, ClusterMapConfig c\n     this.storeManager = storeManager;\n     replicaSyncUpManager = clusterParticipant == null ? null : clusterParticipant.getReplicaSyncUpManager();\n     peerLeaderReplicasByPartition = new ConcurrentHashMap<>();\n+    replicationModelType = replicationConfig.replicationModelForInterColoDatacenters.equals(\"leader-based\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f370291c40937d3d586ebb7820cf0a4e252b304b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODc4MTg0OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/replication/ReplicationModelType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjoyOTo0OVrOGSrjIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjoyOTo0OVrOGSrjIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0MTA1Ng==", "bodyText": "nit: The model used for cross-colo replication", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r422241056", "createdAt": "2020-05-08T16:29:49Z", "author": {"login": "jsjtzyy"}, "path": "ambry-api/src/main/java/com/github/ambry/replication/ReplicationModelType.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright 2019 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.replication;\n+\n+/**\n+ * The type of replication used for inter-data centers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f370291c40937d3d586ebb7820cf0a4e252b304b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODc4OTA2OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjozMjoxMVrOGSrniA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjozMjoxMVrOGSrniA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0MjE4NA==", "bodyText": "nit: format this file", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r422242184", "createdAt": "2020-05-08T16:32:11Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java", "diffHunk": "@@ -254,6 +254,14 @@ private void updatePartitionInfoMaps(List<RemoteReplicaInfo> remoteReplicaInfos,\n     return Collections.unmodifiableMap(peerLeaderReplicasByPartition);\n   }\n \n+  /**\n+   * Get a replication model type being used for inter colo replication\n+   * @return replication model type {@link ReplicationEngine#replicationModelType}\n+   */\n+  ReplicationModelType  getReplicationModelType(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f370291c40937d3d586ebb7820cf0a4e252b304b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODgwMzAyOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjozNjozMVrOGSrwKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjozNjozMVrOGSrwKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0NDM5Mw==", "bodyText": "minor: to make the naming consistent, how about renaming this test to replicationTypeFromConfigTest?", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r422244393", "createdAt": "2020-05-08T16:36:31Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java", "diffHunk": "@@ -171,6 +171,38 @@ public ReplicationTest(short requestVersion, short responseVersion) throws Excep\n     replicationConfig = new ReplicationConfig(verifiableProperties);\n   }\n \n+  /**\n+   * Tests replication model is correct obtained from properties\n+   * @throws Exception\n+   */\n+  @Test\n+  public void verifyReplicationTypeFromConfig() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f370291c40937d3d586ebb7820cf0a4e252b304b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODgyNDcwOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjo0MzoyMVrOGSr9uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjo0MzoyMVrOGSr9uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0Nzg2Nw==", "bodyText": "nit:  is correctly obtained", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r422247867", "createdAt": "2020-05-08T16:43:21Z", "author": {"login": "jsjtzyy"}, "path": "ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java", "diffHunk": "@@ -171,6 +171,38 @@ public ReplicationTest(short requestVersion, short responseVersion) throws Excep\n     replicationConfig = new ReplicationConfig(verifiableProperties);\n   }\n \n+  /**\n+   * Tests replication model is correct obtained from properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f370291c40937d3d586ebb7820cf0a4e252b304b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjQ5NzIwOnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/ReplicationConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzoxNzozM1rOGTwosQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTozNzo1NVrOGUZ3jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3Mjk3Nw==", "bodyText": "nit: I suggest create a static string variable for this one\npublic static final String DEFAULT_REPLICATION_MODEL_ACROSS_DATACENTRS = ReplicationModelType.ALL_TO_ALL.toString().toLowerCase();\n\n@Config(\"replication.model.across.datacenters\")\n@Default(DEFAULT_REPLICATION_MODEL_ACROSS_DATACENTERS)\npublic final String replicationModelAcrossDatacenters;", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r423372977", "createdAt": "2020-05-11T23:17:33Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/config/ReplicationConfig.java", "diffHunk": "@@ -181,6 +181,17 @@\n   @Default(\"\")\n   public final Set<String> replicationVcrRecoveryPartitions;\n \n+  /**\n+   * To specify the type of replication to be used for inter colo replication.\n+   * It has two values - \"all-to-all\" or \"leader-based\". Default value is \"all-to-all\".\n+   * If set to \"leader-based\", inter colo replication between will be limited to the leaders(as elected by Helix) of the partition of each datacenter.\n+   * If set to \"all-to-all\", inter colo replication will be in an all-to-all fashion, i.e. each replica talks to all other replicas irrespective of their state.\n+   * Intra colo replication will continue as all-to-all fashion in both the models.\n+   */\n+  @Config(\"replication.model.across.datacenters\")\n+  @Default(\"all-to-all\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a9d148f849f444eb8505828607374d64add82c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2MjI0NA==", "bodyText": "Sure, added a static string constant variable. I directly defined the variable name as - public static final String DEFAULT_REPLICATION_MODEL_ACROSS_DATACENTRS = \"all-to-all\". It wasn't accepting enum name as a constant variable in the @default annotation.", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r423462244", "createdAt": "2020-05-12T04:58:12Z", "author": {"login": "Arun-LinkedIn"}, "path": "ambry-api/src/main/java/com/github/ambry/config/ReplicationConfig.java", "diffHunk": "@@ -181,6 +181,17 @@\n   @Default(\"\")\n   public final Set<String> replicationVcrRecoveryPartitions;\n \n+  /**\n+   * To specify the type of replication to be used for inter colo replication.\n+   * It has two values - \"all-to-all\" or \"leader-based\". Default value is \"all-to-all\".\n+   * If set to \"leader-based\", inter colo replication between will be limited to the leaders(as elected by Helix) of the partition of each datacenter.\n+   * If set to \"all-to-all\", inter colo replication will be in an all-to-all fashion, i.e. each replica talks to all other replicas irrespective of their state.\n+   * Intra colo replication will continue as all-to-all fashion in both the models.\n+   */\n+  @Config(\"replication.model.across.datacenters\")\n+  @Default(\"all-to-all\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3Mjk3Nw=="}, "originalCommit": {"oid": "d2a9d148f849f444eb8505828607374d64add82c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0ODUyNw==", "bodyText": "You don't have to pass enum name to the @default annotation. My idea is to make sure we have consistent string representation here. If we assign DEFAULT_REPLICATION_MODEL_ACROSS_DATACENTERS with the enum's lowercase string, then in ReplicationEngine you can just do\nreplicationModelType = ReplicationModelType.valueof(replicationConfig.replicationModelAcrossDatacenters.toUpperCase());", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r424048527", "createdAt": "2020-05-12T21:37:55Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/config/ReplicationConfig.java", "diffHunk": "@@ -181,6 +181,17 @@\n   @Default(\"\")\n   public final Set<String> replicationVcrRecoveryPartitions;\n \n+  /**\n+   * To specify the type of replication to be used for inter colo replication.\n+   * It has two values - \"all-to-all\" or \"leader-based\". Default value is \"all-to-all\".\n+   * If set to \"leader-based\", inter colo replication between will be limited to the leaders(as elected by Helix) of the partition of each datacenter.\n+   * If set to \"all-to-all\", inter colo replication will be in an all-to-all fashion, i.e. each replica talks to all other replicas irrespective of their state.\n+   * Intra colo replication will continue as all-to-all fashion in both the models.\n+   */\n+  @Config(\"replication.model.across.datacenters\")\n+  @Default(\"all-to-all\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3Mjk3Nw=="}, "originalCommit": {"oid": "d2a9d148f849f444eb8505828607374d64add82c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjQ5ODM0OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/replication/ReplicationModelType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzoxODowMVrOGTwpaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzoxODowMVrOGTwpaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3MzE2MQ==", "bodyText": "the year should be 2020.", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r423373161", "createdAt": "2020-05-11T23:18:01Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/replication/ReplicationModelType.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright 2019 LinkedIn Corp. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a9d148f849f444eb8505828607374d64add82c"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTM5MTAzOnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com/github/ambry/config/ReplicationConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDo0Mjo0OFrOGVIRnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDo0Mjo0OFrOGVIRnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgwODg2Mw==", "bodyText": "nit: please update comment to reflect latest change. It should be \"ALL_TO_ALL\" and \"LEADER_BASED\".", "url": "https://github.com/linkedin/ambry/pull/1512#discussion_r424808863", "createdAt": "2020-05-14T00:42:48Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-api/src/main/java/com/github/ambry/config/ReplicationConfig.java", "diffHunk": "@@ -181,6 +182,17 @@\n   @Default(\"\")\n   public final Set<String> replicationVcrRecoveryPartitions;\n \n+  /**\n+   * To specify the type of replication to be used for inter colo replication.\n+   * It has two values - \"all-to-all\" or \"leader-based\". Default value is \"all-to-all\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e0611800354feae8dc2b5f1e34459a945eeae5"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1572, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}