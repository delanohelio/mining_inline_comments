{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzIyNTQy", "number": 1604, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0MDowM1rOEXX7Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDoxNDoxNFrOEaOyBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQ0Njk0OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/test/java/com/github/ambry/cloud/VcrTestUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0MDowM1rOG_IbMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODozMDoyMVrOHB1doQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1MTUwNQ==", "bodyText": "nit: change it to  REBALANCE_DELAY_MS", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r468851505", "createdAt": "2020-08-11T20:40:03Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/test/java/com/github/ambry/cloud/VcrTestUtil.java", "diffHunk": "@@ -46,7 +47,9 @@\n  */\n public class VcrTestUtil {\n \n-  public static String helixResource = \"resource1\";\n+  private static final int MIN_ACTIVE_REPLICAS = 0;\n+  private static final long REBALANCE_DELAY = TimeUnit.SECONDS.toMillis(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa3bc5e5d5fdfe5b2d2de63ed1cfd10d363f5d5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY4NjU2MQ==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r471686561", "createdAt": "2020-08-17T18:30:21Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/test/java/com/github/ambry/cloud/VcrTestUtil.java", "diffHunk": "@@ -46,7 +47,9 @@\n  */\n public class VcrTestUtil {\n \n-  public static String helixResource = \"resource1\";\n+  private static final int MIN_ACTIVE_REPLICAS = 0;\n+  private static final long REBALANCE_DELAY = TimeUnit.SECONDS.toMillis(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1MTUwNQ=="}, "originalCommit": {"oid": "cfa3bc5e5d5fdfe5b2d2de63ed1cfd10d363f5d5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTYwMzI0OnYy", "diffSide": "RIGHT", "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTozMDo0NFrOG_J8KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODozMDozMlrOHB1epg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NjMyOQ==", "bodyText": "same here", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r468876329", "createdAt": "2020-08-11T21:30:44Z", "author": {"login": "jsjtzyy"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -48,11 +49,13 @@\n \n   private static final String SEPARATOR = \"/\";\n   static List<String> ignoreResourceKeyWords = Arrays.asList(\"aggregation\", \"trigger\", \"stats\");\n-  private static final int REPLICA_NUMBER = 3;\n+  private static final int REPLICA_NUMBER = 1;\n   private static final ZNRecordSerializer ZN_RECORD_SERIALIZER = new ZNRecordSerializer();\n   // TODO: get from properties file\n   private static final int MAX_OFFLINE_INSTANCES_ALLOWED = 4;\n   private static final int NUM_OFFLINE_INSTANCES_FOR_AUTO_EXIT = 2;\n+  private static final int MIN_ACTIVE_REPLICAS = 0;\n+  private static final long REBALANCE_DELAY = TimeUnit.MINUTES.toMillis(20);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa3bc5e5d5fdfe5b2d2de63ed1cfd10d363f5d5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY4NjgyMg==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r471686822", "createdAt": "2020-08-17T18:30:32Z", "author": {"login": "ankagrawal"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -48,11 +49,13 @@\n \n   private static final String SEPARATOR = \"/\";\n   static List<String> ignoreResourceKeyWords = Arrays.asList(\"aggregation\", \"trigger\", \"stats\");\n-  private static final int REPLICA_NUMBER = 3;\n+  private static final int REPLICA_NUMBER = 1;\n   private static final ZNRecordSerializer ZN_RECORD_SERIALIZER = new ZNRecordSerializer();\n   // TODO: get from properties file\n   private static final int MAX_OFFLINE_INSTANCES_ALLOWED = 4;\n   private static final int NUM_OFFLINE_INSTANCES_FOR_AUTO_EXIT = 2;\n+  private static final int MIN_ACTIVE_REPLICAS = 0;\n+  private static final long REBALANCE_DELAY = TimeUnit.MINUTES.toMillis(20);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NjMyOQ=="}, "originalCommit": {"oid": "cfa3bc5e5d5fdfe5b2d2de63ed1cfd10d363f5d5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTc3NDY3OnYy", "diffSide": "LEFT", "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjozNTowOFrOG_LiPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODozMjowNFrOHB1muA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMjQ2MA==", "bodyText": "I suggest keeping this unless we have another of piece of code setting this for new resource, which I didn't see here.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r468902460", "createdAt": "2020-08-11T22:35:08Z", "author": {"login": "jsjtzyy"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -214,11 +217,13 @@ static void updateResourceIdealState(String destZkString, String destClusterName\n    */\n   static IdealState buildIdealState(String resource, Set<String> partitionSet) {\n     FullAutoModeISBuilder builder = new FullAutoModeISBuilder(resource);\n-    builder.setStateModel(LeaderStandbySMD.name);\n+    builder.setStateModel(OnlineOfflineSMD.name);\n     for (String partition : partitionSet) {\n       builder.add(partition);\n     }\n-    builder.setRebalanceStrategy(CrushEdRebalanceStrategy.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa3bc5e5d5fdfe5b2d2de63ed1cfd10d363f5d5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY4ODg4OA==", "bodyText": "fixed. Interestingly the default rebalance strategy (which is Waged strategy i guess), isnt able to finalize a partition assignment in some cases. This was the reason the tests were failing too.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r471688888", "createdAt": "2020-08-17T18:32:04Z", "author": {"login": "ankagrawal"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -214,11 +217,13 @@ static void updateResourceIdealState(String destZkString, String destClusterName\n    */\n   static IdealState buildIdealState(String resource, Set<String> partitionSet) {\n     FullAutoModeISBuilder builder = new FullAutoModeISBuilder(resource);\n-    builder.setStateModel(LeaderStandbySMD.name);\n+    builder.setStateModel(OnlineOfflineSMD.name);\n     for (String partition : partitionSet) {\n       builder.add(partition);\n     }\n-    builder.setRebalanceStrategy(CrushEdRebalanceStrategy.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMjQ2MA=="}, "originalCommit": {"oid": "cfa3bc5e5d5fdfe5b2d2de63ed1cfd10d363f5d5"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzcyNzM0OnYy", "diffSide": "RIGHT", "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDoyMTo1N1rOG_xDvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzozNzo1MVrOHDSZ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxNzI0NQ==", "bodyText": "Would it possible to store the ideal state as a json doc in config property and have the populate tool take it as an argument? It seems clunky to have to modify the code every time we want to tweak our Helix config.\nI realize the HelixVcrStateModel does need to know the state names.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r469517245", "createdAt": "2020-08-12T20:21:57Z", "author": {"login": "lightningrob"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -214,11 +217,13 @@ static void updateResourceIdealState(String destZkString, String destClusterName\n    */\n   static IdealState buildIdealState(String resource, Set<String> partitionSet) {\n     FullAutoModeISBuilder builder = new FullAutoModeISBuilder(resource);\n-    builder.setStateModel(LeaderStandbySMD.name);\n+    builder.setStateModel(OnlineOfflineSMD.name);\n     for (String partition : partitionSet) {\n       builder.add(partition);\n     }\n-    builder.setRebalanceStrategy(CrushEdRebalanceStrategy.class.getName());\n+    builder.setMinActiveReplica(MIN_ACTIVE_REPLICAS);\n+    builder.setRebalanceDelay((int) REBALANCE_DELAY);\n+    builder.setRebalancerClass(DelayedAutoRebalancer.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa3bc5e5d5fdfe5b2d2de63ed1cfd10d363f5d5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwOTMxNQ==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r473209315", "createdAt": "2020-08-19T17:37:51Z", "author": {"login": "ankagrawal"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -214,11 +217,13 @@ static void updateResourceIdealState(String destZkString, String destClusterName\n    */\n   static IdealState buildIdealState(String resource, Set<String> partitionSet) {\n     FullAutoModeISBuilder builder = new FullAutoModeISBuilder(resource);\n-    builder.setStateModel(LeaderStandbySMD.name);\n+    builder.setStateModel(OnlineOfflineSMD.name);\n     for (String partition : partitionSet) {\n       builder.add(partition);\n     }\n-    builder.setRebalanceStrategy(CrushEdRebalanceStrategy.class.getName());\n+    builder.setMinActiveReplica(MIN_ACTIVE_REPLICAS);\n+    builder.setRebalanceDelay((int) REBALANCE_DELAY);\n+    builder.setRebalancerClass(DelayedAutoRebalancer.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxNzI0NQ=="}, "originalCommit": {"oid": "cfa3bc5e5d5fdfe5b2d2de63ed1cfd10d363f5d5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDA2NDAwOnYy", "diffSide": "RIGHT", "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMTo1OTo0MVrOHCsqVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo0MDo1NFrOHDSgpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MDkzNQ==", "bodyText": "How does this work without a constructor or setters?", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r472590935", "createdAt": "2020-08-19T01:59:41Z", "author": {"login": "lightningrob"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -335,5 +344,120 @@ static void errorAndExit(String error) {\n     System.err.println(error);\n     System.exit(1);\n   }\n+\n+  /**\n+   * Is the rebalancer class {@link org.apache.helix.controller.rebalancer.DelayedAutoRebalancer}\n+   * @param rebalancerClassName name of the rebalancer class.\n+   * @return true if rebalancer is {@link org.apache.helix.controller.rebalancer.DelayedAutoRebalancer}, false otherwise.\n+   */\n+  private static boolean isDelayedRebalanceEnabled(String rebalancerClassName) {\n+    return (rebalancerClassName != null) && rebalancerClassName.endsWith(DELAYED_REBALANCER_CLASS_NAME);\n+  }\n+\n+  /**\n+   * Class for ideal state configs.\n+   */\n+  static class IdealStateConfigFields {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxMTA0NA==", "bodyText": "If you mean how does the deserialization happen? I guess, the jackson library matches the json keys with the getters and assigns values to the fields using reflection.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r473211044", "createdAt": "2020-08-19T17:40:54Z", "author": {"login": "ankagrawal"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -335,5 +344,120 @@ static void errorAndExit(String error) {\n     System.err.println(error);\n     System.exit(1);\n   }\n+\n+  /**\n+   * Is the rebalancer class {@link org.apache.helix.controller.rebalancer.DelayedAutoRebalancer}\n+   * @param rebalancerClassName name of the rebalancer class.\n+   * @return true if rebalancer is {@link org.apache.helix.controller.rebalancer.DelayedAutoRebalancer}, false otherwise.\n+   */\n+  private static boolean isDelayedRebalanceEnabled(String rebalancerClassName) {\n+    return (rebalancerClassName != null) && rebalancerClassName.endsWith(DELAYED_REBALANCER_CLASS_NAME);\n+  }\n+\n+  /**\n+   * Class for ideal state configs.\n+   */\n+  static class IdealStateConfigFields {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MDkzNQ=="}, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDA2ODU0OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/HelixVcrCluster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjowMjowNVrOHCstDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjowMjowNVrOHCstDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTYyOA==", "bodyText": "It's cool that you found a way to parametrize the state model.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r472591628", "createdAt": "2020-08-19T02:02:05Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/HelixVcrCluster.java", "diffHunk": "@@ -167,4 +169,25 @@ public void close() {\n     manager.disconnect();\n     helixAdmin.close();\n   }\n+\n+  /**\n+   * Register the state model factory corresponding to {@code vcrHelixStateModelName}.\n+   * @param vcrHelixStateModelName\n+   */\n+  private void registerStateModelFactory(String vcrHelixStateModelName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDI5MDUyOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/HelixVcrCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzowODo1NlrOHCu9aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToyMzo0N1rOHDV4pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyODU4NA==", "bodyText": "I suggest adding state model validation into CloudConfig, thus it throws exception at the very beginning (when generating the config) rather than keep initializing other components until participation.\nYou can refer to clustermapStateModelDefinition in ClusterMapConfig.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r472628584", "createdAt": "2020-08-19T03:08:56Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/HelixVcrCluster.java", "diffHunk": "@@ -167,4 +169,25 @@ public void close() {\n     manager.disconnect();\n     helixAdmin.close();\n   }\n+\n+  /**\n+   * Register the state model factory corresponding to {@code vcrHelixStateModelName}.\n+   * @param vcrHelixStateModelName\n+   */\n+  private void registerStateModelFactory(String vcrHelixStateModelName) {\n+    switch (vcrHelixStateModelName) {\n+      case OnlineOfflineSMD.name:\n+        manager.getStateMachineEngine()\n+            .registerStateModelFactory(vcrHelixStateModelName, new OnlineOfflineHelixVcrStateModelFactory(this));\n+        break;\n+      case LeaderStandbySMD.name:\n+        manager.getStateMachineEngine()\n+            .registerStateModelFactory(vcrHelixStateModelName, new LeaderStandbyHelixVcrStateModelFactory(this));\n+        break;\n+      default:\n+        throw new IllegalArgumentException(String.format(\n+            \"Illegal vcr helix state model name: \" + vcrHelixStateModelName + \". Should be one of\"\n+                + OnlineOfflineSMD.name + \", \" + LeaderStandbySMD.name));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2NjM0MA==", "bodyText": "I have changed to code to pass factory class instead. Let me know what do you think.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r473266340", "createdAt": "2020-08-19T19:23:47Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/HelixVcrCluster.java", "diffHunk": "@@ -167,4 +169,25 @@ public void close() {\n     manager.disconnect();\n     helixAdmin.close();\n   }\n+\n+  /**\n+   * Register the state model factory corresponding to {@code vcrHelixStateModelName}.\n+   * @param vcrHelixStateModelName\n+   */\n+  private void registerStateModelFactory(String vcrHelixStateModelName) {\n+    switch (vcrHelixStateModelName) {\n+      case OnlineOfflineSMD.name:\n+        manager.getStateMachineEngine()\n+            .registerStateModelFactory(vcrHelixStateModelName, new OnlineOfflineHelixVcrStateModelFactory(this));\n+        break;\n+      case LeaderStandbySMD.name:\n+        manager.getStateMachineEngine()\n+            .registerStateModelFactory(vcrHelixStateModelName, new LeaderStandbyHelixVcrStateModelFactory(this));\n+        break;\n+      default:\n+        throw new IllegalArgumentException(String.format(\n+            \"Illegal vcr helix state model name: \" + vcrHelixStateModelName + \". Should be one of\"\n+                + OnlineOfflineSMD.name + \", \" + LeaderStandbySMD.name));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyODU4NA=="}, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDMwODYyOnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/OnlineOfflineHelixVcrStateModelFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoxMzo1MlrOHCvJaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToyMzoyN1rOHDV34A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzMTY1Nw==", "bodyText": "May I ask why we need two state model factories?  The code logic looks same with LeaderStandbyHelixVcrStateModelFactory. I think one factory should suffice.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r472631657", "createdAt": "2020-08-19T03:13:52Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/OnlineOfflineHelixVcrStateModelFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud;\n+\n+import org.apache.helix.participant.statemachine.StateModel;\n+import org.apache.helix.participant.statemachine.StateModelFactory;\n+\n+\n+/**\n+ * A factory for creating {@link OnlineOfflineHelixVcrStateModel}\n+ */\n+public class OnlineOfflineHelixVcrStateModelFactory extends StateModelFactory<StateModel> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2NjE0NA==", "bodyText": "Thanks for pointing this out. I have changed the logic to make factory as the argument.\nWhile the code is similar, there are still a few reasons to maintain separate factories:\n\nWe need two state model factory classes because the createStateModel method that is used by helix to instantiate the state model takes only resourceName and partitionName as arguments. We need the createStateModel method to create the state model class based on the config.\nWhen we call HelixStateMachineEngine.registerStateModelFactory, the code expects to have a separate factory for each statemodel. Check org.apache.helix.participant.HelixStateMachineEngine::registerStateModelFactory. We can of course create and register just one factory and still make it work. But creating separate factory seems cleaner based on the helix implementation.\nUsually maintaining different factories keeps the test code cleaner too. In this case we are able to get away because helix provides us with a way to do integration testing, but in case any test requires us to pass a custom or mock state model, it can just pass it via config without any test related abstraction leaking into the production code.\nThe helix code examples use the same model too. Check org.apache.helix.examples.BrokerResourceOnlineOfflineStateModelFactory.java and org.apache.helix.examples.BootstrapHandler.java", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r473266144", "createdAt": "2020-08-19T19:23:27Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/OnlineOfflineHelixVcrStateModelFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud;\n+\n+import org.apache.helix.participant.statemachine.StateModel;\n+import org.apache.helix.participant.statemachine.StateModelFactory;\n+\n+\n+/**\n+ * A factory for creating {@link OnlineOfflineHelixVcrStateModel}\n+ */\n+public class OnlineOfflineHelixVcrStateModelFactory extends StateModelFactory<StateModel> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzMTY1Nw=="}, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDM2MzA2OnYy", "diffSide": "RIGHT", "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyODo0OFrOHCvtbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo0MzoxOFrOHDSl3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0MDg3OQ==", "bodyText": "nit: add java doc for new argument", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r472640879", "createdAt": "2020-08-19T03:28:48Z", "author": {"login": "jsjtzyy"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -212,13 +222,19 @@ static void updateResourceIdealState(String destZkString, String destClusterName\n    * @param partitionSet the set of partitions managed by the resource.\n    * @return the {@link IdealState}.\n    */\n-  static IdealState buildIdealState(String resource, Set<String> partitionSet) {\n+  static IdealState buildIdealState(String resource, Set<String> partitionSet,\n+      IdealStateConfigFields idealStateConfigFields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxMjM4Mw==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r473212383", "createdAt": "2020-08-19T17:43:18Z", "author": {"login": "ankagrawal"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -212,13 +222,19 @@ static void updateResourceIdealState(String destZkString, String destClusterName\n    * @param partitionSet the set of partitions managed by the resource.\n    * @return the {@link IdealState}.\n    */\n-  static IdealState buildIdealState(String resource, Set<String> partitionSet) {\n+  static IdealState buildIdealState(String resource, Set<String> partitionSet,\n+      IdealStateConfigFields idealStateConfigFields) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0MDg3OQ=="}, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDQwNjA1OnYy", "diffSide": "RIGHT", "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzo0MDo1NVrOHCwJig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo0NTowNVrOHDSpxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0ODA3NA==", "bodyText": "nit: can a single string without concatenation.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r472648074", "createdAt": "2020-08-19T03:40:55Z", "author": {"login": "jsjtzyy"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -13,64 +13,65 @@\n  */\n package com.github.ambry.clustermap;\n \n+import com.github.ambry.utils.Utils;\n+import java.io.IOException;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n import joptsimple.ArgumentAcceptingOptionSpec;\n import joptsimple.OptionParser;\n import joptsimple.OptionSet;\n import joptsimple.OptionSpec;\n import org.apache.helix.ConfigAccessor;\n import org.apache.helix.HelixAdmin;\n-import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n import org.apache.helix.manager.zk.ZKHelixAdmin;\n import org.apache.helix.manager.zk.ZKHelixManager;\n import org.apache.helix.manager.zk.ZKUtil;\n import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n import org.apache.helix.model.ClusterConfig;\n import org.apache.helix.model.HelixConfigScope;\n import org.apache.helix.model.IdealState;\n-import org.apache.helix.model.LeaderStandbySMD;\n import org.apache.helix.model.builder.FullAutoModeISBuilder;\n import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n import org.apache.helix.tools.ClusterSetup;\n import org.apache.helix.zookeeper.api.client.HelixZkClient;\n import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.codehaus.jackson.map.ObjectMapper;\n \n \n /**\n  * This tool provides function to create vcr cluster and update vcr cluster by referencing src cluster.\n  */\n public class HelixVcrPopulateTool {\n \n+  static final List<String> ignoreResourceKeyWords = Arrays.asList(\"aggregation\", \"trigger\", \"stats\");\n   private static final String SEPARATOR = \"/\";\n-  static List<String> ignoreResourceKeyWords = Arrays.asList(\"aggregation\", \"trigger\", \"stats\");\n-  private static final int REPLICA_NUMBER = 3;\n   private static final ZNRecordSerializer ZN_RECORD_SERIALIZER = new ZNRecordSerializer();\n-  // TODO: get from properties file\n-  private static final int MAX_OFFLINE_INSTANCES_ALLOWED = 4;\n-  private static final int NUM_OFFLINE_INSTANCES_FOR_AUTO_EXIT = 2;\n+  private static final String DELAYED_REBALANCER_CLASS_NAME = \"DelayedRebalancer\";\n \n-  public static void main(String[] args) {\n+  public static void main(String[] args) throws IOException {\n     OptionParser parser = new OptionParser();\n     OptionSpec createClusterOpt = parser.accepts(\"createCluster\",\n-        \"Create cluster in dest zk(no resource creation). --createCluster --dest destZkEndpoint/destClusterName\");\n+        \"Create cluster in dest zk(no resource creation). --createCluster --dest destZkEndpoint/destClusterName\"\n+            + \" --config configFilePath\");\n \n     OptionSpec updateClusterOpt = parser.accepts(\"updateCluster\",\n         \"Update resources in dest by copying from src to dest. --updateCluster\"\n-            + \" [--src srcZkEndpoint/srcClusterName] --dest destZkEndpoint/destClusterName\");\n+            + \" [--src srcZkEndpoint/srcClusterName] --dest destZkEndpoint/destClusterName --config configFilePath\");\n     OptionSpec dryRunOpt = parser.accepts(\"dryRun\", \"Do dry run.\");\n \n     OptionSpec controlResourceOpt = parser.accepts(\"controlResource\",\n-        \"Enable/Disable a resource. --controlResource --dest destZkEndpoint/destClusterName --resource resource --enable true\");\n+        \"Enable/Disable a resource. --controlResource --dest destZkEndpoint/destClusterName\"\n+            + \" --resource resource --enable true\");\n     ArgumentAcceptingOptionSpec<String> resourceOpt =\n         parser.accepts(\"resource\").withRequiredArg().describedAs(\"resource name\").ofType(String.class);\n \n     ArgumentAcceptingOptionSpec<Boolean> maintenanceOpt = parser.accepts(\"maintainCluster\",\n-        \"Enter/Exit helix maintenance mode. --maintainCluster --dest destZkEndpoint/destClusterName --enable true\")\n+        \"Enter/Exit helix maintenance mode. --maintainCluster --dest destZkEndpoint/destClusterName\" + \" --enable true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxMzM4MA==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r473213380", "createdAt": "2020-08-19T17:45:05Z", "author": {"login": "ankagrawal"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -13,64 +13,65 @@\n  */\n package com.github.ambry.clustermap;\n \n+import com.github.ambry.utils.Utils;\n+import java.io.IOException;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n import joptsimple.ArgumentAcceptingOptionSpec;\n import joptsimple.OptionParser;\n import joptsimple.OptionSet;\n import joptsimple.OptionSpec;\n import org.apache.helix.ConfigAccessor;\n import org.apache.helix.HelixAdmin;\n-import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n import org.apache.helix.manager.zk.ZKHelixAdmin;\n import org.apache.helix.manager.zk.ZKHelixManager;\n import org.apache.helix.manager.zk.ZKUtil;\n import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n import org.apache.helix.model.ClusterConfig;\n import org.apache.helix.model.HelixConfigScope;\n import org.apache.helix.model.IdealState;\n-import org.apache.helix.model.LeaderStandbySMD;\n import org.apache.helix.model.builder.FullAutoModeISBuilder;\n import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n import org.apache.helix.tools.ClusterSetup;\n import org.apache.helix.zookeeper.api.client.HelixZkClient;\n import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.codehaus.jackson.map.ObjectMapper;\n \n \n /**\n  * This tool provides function to create vcr cluster and update vcr cluster by referencing src cluster.\n  */\n public class HelixVcrPopulateTool {\n \n+  static final List<String> ignoreResourceKeyWords = Arrays.asList(\"aggregation\", \"trigger\", \"stats\");\n   private static final String SEPARATOR = \"/\";\n-  static List<String> ignoreResourceKeyWords = Arrays.asList(\"aggregation\", \"trigger\", \"stats\");\n-  private static final int REPLICA_NUMBER = 3;\n   private static final ZNRecordSerializer ZN_RECORD_SERIALIZER = new ZNRecordSerializer();\n-  // TODO: get from properties file\n-  private static final int MAX_OFFLINE_INSTANCES_ALLOWED = 4;\n-  private static final int NUM_OFFLINE_INSTANCES_FOR_AUTO_EXIT = 2;\n+  private static final String DELAYED_REBALANCER_CLASS_NAME = \"DelayedRebalancer\";\n \n-  public static void main(String[] args) {\n+  public static void main(String[] args) throws IOException {\n     OptionParser parser = new OptionParser();\n     OptionSpec createClusterOpt = parser.accepts(\"createCluster\",\n-        \"Create cluster in dest zk(no resource creation). --createCluster --dest destZkEndpoint/destClusterName\");\n+        \"Create cluster in dest zk(no resource creation). --createCluster --dest destZkEndpoint/destClusterName\"\n+            + \" --config configFilePath\");\n \n     OptionSpec updateClusterOpt = parser.accepts(\"updateCluster\",\n         \"Update resources in dest by copying from src to dest. --updateCluster\"\n-            + \" [--src srcZkEndpoint/srcClusterName] --dest destZkEndpoint/destClusterName\");\n+            + \" [--src srcZkEndpoint/srcClusterName] --dest destZkEndpoint/destClusterName --config configFilePath\");\n     OptionSpec dryRunOpt = parser.accepts(\"dryRun\", \"Do dry run.\");\n \n     OptionSpec controlResourceOpt = parser.accepts(\"controlResource\",\n-        \"Enable/Disable a resource. --controlResource --dest destZkEndpoint/destClusterName --resource resource --enable true\");\n+        \"Enable/Disable a resource. --controlResource --dest destZkEndpoint/destClusterName\"\n+            + \" --resource resource --enable true\");\n     ArgumentAcceptingOptionSpec<String> resourceOpt =\n         parser.accepts(\"resource\").withRequiredArg().describedAs(\"resource name\").ofType(String.class);\n \n     ArgumentAcceptingOptionSpec<Boolean> maintenanceOpt = parser.accepts(\"maintainCluster\",\n-        \"Enter/Exit helix maintenance mode. --maintainCluster --dest destZkEndpoint/destClusterName --enable true\")\n+        \"Enter/Exit helix maintenance mode. --maintainCluster --dest destZkEndpoint/destClusterName\" + \" --enable true\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0ODA3NA=="}, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDQzMjU1OnYy", "diffSide": "RIGHT", "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzo0Nzo1NlrOHCwauA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo1MDoyNFrOHDS1GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY1MjQ3Mg==", "bodyText": "I suppose there is ordering requirement (i.e. idealStateConfigFields comes first) when preparing the json file. In that case, it's a bit of error-prone for user to use this tool.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r472652472", "createdAt": "2020-08-19T03:47:56Z", "author": {"login": "jsjtzyy"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -328,5 +344,120 @@ static void errorAndExit(String error) {\n     System.err.println(error);\n     System.exit(1);\n   }\n+\n+  /**\n+   * Is the rebalancer class {@link org.apache.helix.controller.rebalancer.DelayedAutoRebalancer}\n+   * @param rebalancerClassName name of the rebalancer class.\n+   * @return true if rebalancer is {@link org.apache.helix.controller.rebalancer.DelayedAutoRebalancer}, false otherwise.\n+   */\n+  private static boolean isDelayedRebalanceEnabled(String rebalancerClassName) {\n+    return (rebalancerClassName != null) && rebalancerClassName.endsWith(DELAYED_REBALANCER_CLASS_NAME);\n+  }\n+\n+  /**\n+   * Class for ideal state configs.\n+   */\n+  static class IdealStateConfigFields {\n+    private int numReplicas;\n+    private String stateModelDefRef;\n+    private String rebalanceStrategy;\n+    private int minActiveReplicas;\n+    private String rebalancerClassName;\n+    private long rebalanceDelayInMins;\n+\n+    /**\n+     * @return {@code numReplicas}\n+     */\n+    public int getNumReplicas() {\n+      return numReplicas;\n+    }\n+\n+    /**\n+     * @return {@code stateModelDefRef}\n+     */\n+    public String getStateModelDefRef() {\n+      return stateModelDefRef;\n+    }\n+\n+    /**\n+     * @return {@code rebalanceStrategy}\n+     */\n+    public String getRebalanceStrategy() {\n+      return rebalanceStrategy;\n+    }\n+\n+    /**\n+     * @return {@code minActiveReplicas}\n+     */\n+    public int getMinActiveReplicas() {\n+      return minActiveReplicas;\n+    }\n+\n+    /**\n+     * @return {@code rebalancerClassName}\n+     */\n+    public String getRebalancerClassName() {\n+      return rebalancerClassName;\n+    }\n+\n+    /**\n+     * @return {@code rebalanceDelayInMins}\n+     */\n+    public long getRebalanceDelayInMins() {\n+      return rebalanceDelayInMins;\n+    }\n+  }\n+\n+  /**\n+   * Class for cluster config fields.\n+   */\n+  static class ClusterConfigFields {\n+    private int maxOfflineInstancesAllowed;\n+    private int numOfflineInstancesForAutoExit;\n+    private boolean allowAutoJoin;\n+\n+    /**\n+     * @return {@code maxOfflineInstancesAllowed}\n+     */\n+    public int getMaxOfflineInstancesAllowed() {\n+      return maxOfflineInstancesAllowed;\n+    }\n+\n+    /**\n+     * @return {@code numOfflineInstancesForAutoExit}\n+     */\n+    public int getNumOfflineInstancesForAutoExit() {\n+      return numOfflineInstancesForAutoExit;\n+    }\n+\n+    /**\n+     * @return {@code allowAutoJoin}\n+     */\n+    public boolean isAllowAutoJoin() {\n+      return allowAutoJoin;\n+    }\n+  }\n+\n+  /**\n+   * Class for configs passed to the {@link HelixVcrPopulateTool}\n+   */\n+  static class Config {\n+    private IdealStateConfigFields idealStateConfigFields;\n+    private ClusterConfigFields clusterConfigFields;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 338}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxNjI4MQ==", "bodyText": "There is no ordering requirement. The ordering of the keys in the json file doesn't matter, as long as the general structure is correct.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r473216281", "createdAt": "2020-08-19T17:50:24Z", "author": {"login": "ankagrawal"}, "path": "ambry-tools/src/main/java/com/github/ambry/clustermap/HelixVcrPopulateTool.java", "diffHunk": "@@ -328,5 +344,120 @@ static void errorAndExit(String error) {\n     System.err.println(error);\n     System.exit(1);\n   }\n+\n+  /**\n+   * Is the rebalancer class {@link org.apache.helix.controller.rebalancer.DelayedAutoRebalancer}\n+   * @param rebalancerClassName name of the rebalancer class.\n+   * @return true if rebalancer is {@link org.apache.helix.controller.rebalancer.DelayedAutoRebalancer}, false otherwise.\n+   */\n+  private static boolean isDelayedRebalanceEnabled(String rebalancerClassName) {\n+    return (rebalancerClassName != null) && rebalancerClassName.endsWith(DELAYED_REBALANCER_CLASS_NAME);\n+  }\n+\n+  /**\n+   * Class for ideal state configs.\n+   */\n+  static class IdealStateConfigFields {\n+    private int numReplicas;\n+    private String stateModelDefRef;\n+    private String rebalanceStrategy;\n+    private int minActiveReplicas;\n+    private String rebalancerClassName;\n+    private long rebalanceDelayInMins;\n+\n+    /**\n+     * @return {@code numReplicas}\n+     */\n+    public int getNumReplicas() {\n+      return numReplicas;\n+    }\n+\n+    /**\n+     * @return {@code stateModelDefRef}\n+     */\n+    public String getStateModelDefRef() {\n+      return stateModelDefRef;\n+    }\n+\n+    /**\n+     * @return {@code rebalanceStrategy}\n+     */\n+    public String getRebalanceStrategy() {\n+      return rebalanceStrategy;\n+    }\n+\n+    /**\n+     * @return {@code minActiveReplicas}\n+     */\n+    public int getMinActiveReplicas() {\n+      return minActiveReplicas;\n+    }\n+\n+    /**\n+     * @return {@code rebalancerClassName}\n+     */\n+    public String getRebalancerClassName() {\n+      return rebalancerClassName;\n+    }\n+\n+    /**\n+     * @return {@code rebalanceDelayInMins}\n+     */\n+    public long getRebalanceDelayInMins() {\n+      return rebalanceDelayInMins;\n+    }\n+  }\n+\n+  /**\n+   * Class for cluster config fields.\n+   */\n+  static class ClusterConfigFields {\n+    private int maxOfflineInstancesAllowed;\n+    private int numOfflineInstancesForAutoExit;\n+    private boolean allowAutoJoin;\n+\n+    /**\n+     * @return {@code maxOfflineInstancesAllowed}\n+     */\n+    public int getMaxOfflineInstancesAllowed() {\n+      return maxOfflineInstancesAllowed;\n+    }\n+\n+    /**\n+     * @return {@code numOfflineInstancesForAutoExit}\n+     */\n+    public int getNumOfflineInstancesForAutoExit() {\n+      return numOfflineInstancesForAutoExit;\n+    }\n+\n+    /**\n+     * @return {@code allowAutoJoin}\n+     */\n+    public boolean isAllowAutoJoin() {\n+      return allowAutoJoin;\n+    }\n+  }\n+\n+  /**\n+   * Class for configs passed to the {@link HelixVcrPopulateTool}\n+   */\n+  static class Config {\n+    private IdealStateConfigFields idealStateConfigFields;\n+    private ClusterConfigFields clusterConfigFields;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY1MjQ3Mg=="}, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 338}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDQ0ODMyOnYy", "diffSide": "RIGHT", "path": "ambry-tools/src/integration-test/resources/mocktio-extensions/DelayedAutoRebalancerHelixConfig.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzo1MjozMVrOHCwlMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTowMTowNVrOHDVKcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY1NTE1Mw==", "bodyText": "You can move this to config directory. For testing, you can just instantiate a Config object (as you defined HelixVcrPopulateTool) and write it into string via jackson's writeValueAsString method.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r472655153", "createdAt": "2020-08-19T03:52:31Z", "author": {"login": "jsjtzyy"}, "path": "ambry-tools/src/integration-test/resources/mocktio-extensions/DelayedAutoRebalancerHelixConfig.json", "diffHunk": "@@ -0,0 +1,15 @@\n+{\n+  \"idealStateConfigFields\": {\n+    \"numReplicas\": 2,\n+    \"stateModelDefRef\": \"OnlineOffline\",\n+    \"rebalanceStrategy\": \"org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy\",\n+    \"minActiveReplicas\": 0,\n+    \"rebalancerClassName\": \"org.apache.helix.controller.rebalancer.DelayedAutoRebalancer\",\n+    \"rebalanceDelayInMins\": 20\n+  },\n+  \"clusterConfigFields\": {\n+    \"maxOfflineInstancesAllowed\": 4,\n+    \"numOfflineInstancesForAutoExit\": 2,\n+    \"allowAutoJoin\": true\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDUxNA==", "bodyText": "done", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r473254514", "createdAt": "2020-08-19T19:01:05Z", "author": {"login": "ankagrawal"}, "path": "ambry-tools/src/integration-test/resources/mocktio-extensions/DelayedAutoRebalancerHelixConfig.json", "diffHunk": "@@ -0,0 +1,15 @@\n+{\n+  \"idealStateConfigFields\": {\n+    \"numReplicas\": 2,\n+    \"stateModelDefRef\": \"OnlineOffline\",\n+    \"rebalanceStrategy\": \"org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy\",\n+    \"minActiveReplicas\": 0,\n+    \"rebalancerClassName\": \"org.apache.helix.controller.rebalancer.DelayedAutoRebalancer\",\n+    \"rebalanceDelayInMins\": 20\n+  },\n+  \"clusterConfigFields\": {\n+    \"maxOfflineInstancesAllowed\": 4,\n+    \"numOfflineInstancesForAutoExit\": 2,\n+    \"allowAutoJoin\": true\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY1NTE1Mw=="}, "originalCommit": {"oid": "4543c076ed5e223ce23752ea308e04540ced102c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTQwNjE1OnYy", "diffSide": "RIGHT", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/HelixVcrCluster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDoxNDoxNFrOHDh5Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDoxNDoxNFrOHDh5Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2MzA3MQ==", "bodyText": "[An alternative but totally optional]\nSince we decide to use two factories, we can make a abstract factory VcrStateModelFactory which extends StateModelFactory and make two state model factories extend it. Then this method can be replaced by adding state model name to each StateModelFactory. Thus, line149~151 can be changed to:\nVcrStateModelFactory stateModelFactory = Utils.getObj(cloudConfig.vcrHelixStateModelFactoryClass, this);\nmanager.getStateMachineEngine()\n        .registerStateModelFactory(stateModelFactory.getModelName(), stateModelFactory);\n\nAnd this method can be removed.", "url": "https://github.com/linkedin/ambry/pull/1604#discussion_r473463071", "createdAt": "2020-08-20T00:14:14Z", "author": {"login": "jsjtzyy"}, "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/HelixVcrCluster.java", "diffHunk": "@@ -167,4 +171,22 @@ public void close() {\n     manager.disconnect();\n     helixAdmin.close();\n   }\n+\n+  /**\n+   * Get the name of the state model for the factory class.\n+   * @param stateModelFactoryClass name of the {@link org.apache.helix.participant.statemachine.StateModelFactory} class.\n+   * @return state model name corresponding to the factor class.\n+   */\n+  private String getStateModelNameFromFactory(String stateModelFactoryClass) {\n+    if (stateModelFactoryClass.equals(OnlineOfflineHelixVcrStateModelFactory.class.getName())) {\n+      return OnlineOfflineSMD.name;\n+    }\n+    if (stateModelFactoryClass.equals(LeaderStandbyHelixVcrStateModelFactory.class.getName())) {\n+      return LeaderStandbySMD.name;\n+    }\n+    throw new IllegalArgumentException(String.format(\n+        \"Illegal vcr helix state model factory class: \" + stateModelFactoryClass + \". Should be one of\"\n+            + OnlineOfflineHelixVcrStateModelFactory.class.getName() + \", \"\n+            + LeaderStandbyHelixVcrStateModelFactory.class.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f663d56d956561b9278bfdae060fe66e9b5042"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1342, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}