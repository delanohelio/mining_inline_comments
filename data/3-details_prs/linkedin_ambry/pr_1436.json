{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMzg5MTIw", "number": 1436, "title": "Getting single blob should avoid Cosmos", "bodyText": "Add cache hit counter for CloudBlobStore\nFrontend uploads blob regardless of TTL\nHandle IllegalStateException on ABS timeouts\nAmbryPartition overrides equals and hashcode", "createdAt": "2020-03-25T05:16:53Z", "url": "https://github.com/linkedin/ambry/pull/1436", "merged": true, "mergeCommit": {"oid": "4e4e8071fd3a189420a235b4d5987ba67721186c"}, "closed": true, "closedAt": "2020-04-02T03:21:29Z", "author": {"login": "lightningrob"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRAhMVgFqTM4MDg2NDA0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTi-k9AFqTM4NjA3MjE4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODY0MDQ0", "url": "https://github.com/linkedin/ambry/pull/1436#pullrequestreview-380864044", "createdAt": "2020-03-25T05:19:03Z", "commit": {"oid": "23f8bbcbfa1749c8942d259a0a8c3f33f04c1f97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNToxOTowM1rOF7Md2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNToxOTowM1rOF7Md2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYxNDU1NQ==", "bodyText": "Will update test case for this.", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r397614555", "createdAt": "2020-03-25T05:19:03Z", "author": {"login": "lightningrob"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -341,12 +342,20 @@ private boolean shouldUpload(MessageInfo messageInfo) {\n       return false;\n     }\n     if (recentBlobCache.containsKey(messageInfo.getStoreKey().getID())) {\n+      vcrMetrics.blobCacheHitCount.inc();\n       return false;\n     }\n-    // expiration time above threshold. Expired blobs are blocked by ReplicaThread.\n-    // FIXME: for !isVcr, ignore expiration time\n-    return (messageInfo.getExpirationTimeInMs() == Utils.Infinite_Time\n-        || messageInfo.getExpirationTimeInMs() - messageInfo.getOperationTimeMs() >= minTtlMillis);\n+    if (isVcr) {\n+      // VCR only backs up blobs with expiration time above threshold.\n+      // Expired blobs are blocked by ReplicaThread.\n+      // TODO: VCR for non-backup also needs to replicate everything\n+      // We can change default cloudConfig.vcrMinTtlDays to 0 and override in config\n+      return (messageInfo.getExpirationTimeInMs() == Utils.Infinite_Time\n+          || messageInfo.getExpirationTimeInMs() - messageInfo.getOperationTimeMs() >= minTtlMillis);\n+    } else {\n+      // Upload all live blobs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f8bbcbfa1749c8942d259a0a8c3f33f04c1f97"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDUzMjQ1", "url": "https://github.com/linkedin/ambry/pull/1436#pullrequestreview-383453245", "createdAt": "2020-03-29T20:40:51Z", "commit": {"oid": "1e0147117c0e70f6706a696760c16614a684db22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMDo0MDo1MVrOF9U9nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMDo0MDo1MVrOF9U9nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MDkxMQ==", "bodyText": "Why do we want to avoid cosmos here? Because of consistency concern between ABS and cosmos (but that should apply to all cases) OR coz cosmos is more costly?", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r399850911", "createdAt": "2020-03-29T20:40:51Z", "author": {"login": "ankagrawal"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -161,7 +161,12 @@ public boolean updateBlobExpiration(BlobId blobId, long expirationTime) throws C\n       return Collections.emptyMap();\n     }\n \n-    // TODO: For single blob GET request, get metadata from ABS\n+    // For single blob GET request, get metadata from ABS instead of Cosmos\n+    if (blobIds.size() == 1) {\n+      CloudBlobMetadata metadata = azureBlobDataAccessor.getBlobMetadata(blobIds.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e0147117c0e70f6706a696760c16614a684db22"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTc2NDU1", "url": "https://github.com/linkedin/ambry/pull/1436#pullrequestreview-384976455", "createdAt": "2020-03-31T18:01:11Z", "commit": {"oid": "720417e68f719d763b0a0fae76a2e728ee62bcaf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODowMToxMVrOF-hu2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODowMToxMVrOF-hu2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwODY5Ng==", "bodyText": "Use Exception to catch RunTimeException?", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401108696", "createdAt": "2020-03-31T18:01:11Z", "author": {"login": "zzmao"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -127,7 +127,7 @@ public boolean uploadBlob(BlobId blobId, long inputLength, CloudBlobMetadata clo\n         azureMetrics.backupSuccessByteRate.mark(inputLength);\n       }\n       return uploaded;\n-    } catch (BlobStorageException | DocumentClientException | IOException e) {\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "720417e68f719d763b0a0fae76a2e728ee62bcaf"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDE0Njkx", "url": "https://github.com/linkedin/ambry/pull/1436#pullrequestreview-385014691", "createdAt": "2020-03-31T18:53:43Z", "commit": {"oid": "720417e68f719d763b0a0fae76a2e728ee62bcaf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODM0Mzg1", "url": "https://github.com/linkedin/ambry/pull/1436#pullrequestreview-385834385", "createdAt": "2020-04-01T18:16:53Z", "commit": {"oid": "720417e68f719d763b0a0fae76a2e728ee62bcaf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoxNjo1M1rOF_M3SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowNTozMFrOF_OnQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNTM2OQ==", "bodyText": "nit: extra parentheses around the method call", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401815369", "createdAt": "2020-04-01T18:16:53Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -491,7 +525,7 @@ public StoreStats getStoreStats() {\n   public boolean isKeyDeleted(StoreKey key) throws StoreException {\n     checkStarted();\n     // Not definitive, but okay for some deletes to be replayed.\n-    return (BlobState.DELETED == recentBlobCache.get(key.getID()));\n+    return (checkCacheState(key.getID(),BlobState.DELETED));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "720417e68f719d763b0a0fae76a2e728ee62bcaf"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzMzA5NQ==", "bodyText": "When would this case happen vs. the method throwing a not found BlobStorageException?", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401833095", "createdAt": "2020-04-01T18:46:47Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureBlobDataAccessor.java", "diffHunk": "@@ -262,13 +262,41 @@ public void downloadBlob(BlobId blobId, OutputStream outputStream) throws BlobSt\n     }\n   }\n \n+  /**\n+   * Retrieve the metadata for the specified blob.\n+   * @param blobId The {@link BlobId} to retrieve.\n+   * @return The {@link CloudBlobMetadata} if the blob was found, or null otherwise.\n+   * @throws BlobStorageException\n+   */\n+  public CloudBlobMetadata getBlobMetadata(BlobId blobId) throws BlobStorageException {\n+    BlockBlobClient blobClient = getBlockBlobClient(blobId, false);\n+    BlobProperties blobProperties = null;\n+    try {\n+      blobProperties =\n+          blobClient.getPropertiesWithResponse(defaultRequestConditions, requestTimeout, Context.NONE).getValue();\n+      if (blobProperties == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "720417e68f719d763b0a0fae76a2e728ee62bcaf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzODU4OA==", "bodyText": "is info level too high for this log message, since the CloudStorageException can be caught and logged at a higher level?", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401838588", "createdAt": "2020-04-01T18:56:07Z", "author": {"login": "cgtz"}, "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -379,9 +384,13 @@ private static CloudStorageException toCloudStorageException(String message, Exc\n     } else if (e instanceof DocumentClientException) {\n       statusCode = ((DocumentClientException) e).getStatusCode();\n       retryDelayMs = ((DocumentClientException) e).getRetryAfterInMilliseconds();\n+    } else {\n+      // Note: catch-all since ABS can throw things like IOException, IllegalStateException\n+      statusCode = StatusCodes.INTERNAL_SERVER_ERROR;\n     }\n+    logger.info(\"{} status {}, {}\", message, statusCode, e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "720417e68f719d763b0a0fae76a2e728ee62bcaf"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MjcxNA==", "bodyText": "not directly related to this patch, but can you change Long id into long id. No need to use a boxed long if it is non-nullable.", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401842714", "createdAt": "2020-04-01T19:03:09Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryPartition.java", "diffHunk": "@@ -84,6 +84,24 @@ public boolean isEqual(String other) {\n     return id.toString().equals(other);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    AmbryPartition partition = (AmbryPartition) o;\n+    return id.equals(partition.id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "720417e68f719d763b0a0fae76a2e728ee62bcaf"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0NDAzNQ==", "bodyText": "Did we find a case where a clustermap was returning a non-singleton AmbryPartition instance to require a hashcode? Not necessarily against having it since this can be a big gotcha when writing cluster aware code or test cases. However, if there are cases where PartitionId is found to have multiple instances for the same partition number, we should track them down since this class holds some state regarding sealed/stopped replicas.", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401844035", "createdAt": "2020-04-01T19:05:30Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryPartition.java", "diffHunk": "@@ -84,6 +84,24 @@ public boolean isEqual(String other) {\n     return id.toString().equals(other);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    AmbryPartition partition = (AmbryPartition) o;\n+    return id.equals(partition.id);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return id.hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "720417e68f719d763b0a0fae76a2e728ee62bcaf"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e90a6cacd1e4c02f3cf513f1755a76936fa5401", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/6e90a6cacd1e4c02f3cf513f1755a76936fa5401", "committedDate": "2020-04-01T22:30:20Z", "message": "Getting single blob should avoid Cosmos\nAdd cache hit counter for CloudBlobStore\nFrontend uploads blob regardless of TTL\nHandle IllegalStateException on ABS timeouts\nAmbryPartition overrides equals and hashcode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a01101909b7199985441dfb3a222f05e2d4663", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/64a01101909b7199985441dfb3a222f05e2d4663", "committedDate": "2020-04-01T22:30:20Z", "message": "Add blobCacheLookup counter and fix test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffd43433d4dba9ba7309f6ff49e76609684a5e9c", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/ffd43433d4dba9ba7309f6ff49e76609684a5e9c", "committedDate": "2020-04-01T22:30:20Z", "message": "Handle case where ABS operation throws PrematureCloseException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fab74ddb17e63d4d160e9f3ee46736c5e4069111", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/fab74ddb17e63d4d160e9f3ee46736c5e4069111", "committedDate": "2020-04-01T22:30:20Z", "message": "Address Casey's review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5f592836fc2acc65d0bca932ae9c7dd6d8682ef", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/b5f592836fc2acc65d0bca932ae9c7dd6d8682ef", "committedDate": "2020-04-01T22:26:27Z", "message": "Address Casey's review comments"}, "afterCommit": {"oid": "fab74ddb17e63d4d160e9f3ee46736c5e4069111", "author": {"user": {"login": "shipkit-org", "name": "shipkit.org automated bot"}}, "url": "https://github.com/linkedin/ambry/commit/fab74ddb17e63d4d160e9f3ee46736c5e4069111", "committedDate": "2020-04-01T22:30:20Z", "message": "Address Casey's review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDcyMTg4", "url": "https://github.com/linkedin/ambry/pull/1436#pullrequestreview-386072188", "createdAt": "2020-04-02T02:35:46Z", "commit": {"oid": "fab74ddb17e63d4d160e9f3ee46736c5e4069111"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1324, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}