{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzA5NDUz", "number": 1351, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMDo1MDo1MlrODWql9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMDozNDozMFrODYWuHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDkzMTEwOnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/CloudDataNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMDo1MDo1MlrOFbjeMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMDo1MDo1MlrOFbjeMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQzNzA0MA==", "bodyText": "Perhaps a CloudDataNode should have the same support for http2 that AmbryDataNode does, since it corresponds to a VCR which will eventually support http2 transport.", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364437040", "createdAt": "2020-01-08T20:50:52Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/CloudDataNode.java", "diffHunk": "@@ -94,6 +94,16 @@ public boolean hasSSLPort() {\n     return sslPort != null;\n   }\n \n+  @Override\n+  public int getHttp2Port() {\n+    return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDkzNDY1OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/DataNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMDo1MjoxMFrOFbjgQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMDo1MjoxMFrOFbjgQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQzNzU3MA==", "bodyText": "same comment for DataNode since this is the static clustermap analog to AmbryDataNode. This would require adding an \"http2port\" field to the json schema", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364437570", "createdAt": "2020-01-08T20:52:10Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/DataNode.java", "diffHunk": "@@ -111,6 +111,16 @@ public boolean hasSSLPort() {\n     return ports.containsKey(PortType.SSL);\n   }\n \n+  @Override\n+  public int getHttp2Port() {\n+    return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTUzODIyOnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettySslHttp2Factory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjoyMDoxOVrOFbpV8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjoyMDoxOVrOFbpV8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzMzIzMg==", "bodyText": "Could you explain the difference between this factory and NettySslFactory in the docs (i.e. alpn)?", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364533232", "createdAt": "2020-01-09T02:20:19Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettySslHttp2Factory.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.JdkSslFactory;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.handler.codec.http2.Http2SecurityUtil;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.ApplicationProtocolNames;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.ssl.SupportedCipherSuiteFilter;\n+import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n+import io.netty.handler.ssl.util.SelfSignedCertificate;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLParameters;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.github.ambry.rest.NettySslFactory.*;\n+\n+\n+/**\n+ * An HTTP/2 specific implementation of {@link SSLFactory} that uses Netty's SSL libraries for HTTP2.\n+ * This has the benefit of using OpenSSL instead of JDK's SSL implementation when the netty-tcnative library is loaded.\n+ * OpenSSL shows significant performance enhancements over the JDK implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTU0MDg2OnYy", "diffSide": "RIGHT", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettySslHttp2Factory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjoyMjowM1rOFbpXZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjoyMjowM1rOFbpXZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzMzYwNA==", "bodyText": "I think there may not be a valid case for supporting the getSSLContext() method for HTTP2, since it was mostly present so that BlockingChannelConnectionPool could use blocking SSLSockets instead of SSLEngines, but there won't be that need with HTTP2. Instead, getSSLContext() could just throw UnsupportedOperationException.", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364533604", "createdAt": "2020-01-09T02:22:03Z", "author": {"login": "cgtz"}, "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettySslHttp2Factory.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.rest;\n+\n+import com.github.ambry.commons.JdkSslFactory;\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.handler.codec.http2.Http2SecurityUtil;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.ApplicationProtocolNames;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.ssl.SupportedCipherSuiteFilter;\n+import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n+import io.netty.handler.ssl.util.SelfSignedCertificate;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLParameters;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.github.ambry.rest.NettySslFactory.*;\n+\n+\n+/**\n+ * An HTTP/2 specific implementation of {@link SSLFactory} that uses Netty's SSL libraries for HTTP2.\n+ * This has the benefit of using OpenSSL instead of JDK's SSL implementation when the netty-tcnative library is loaded.\n+ * OpenSSL shows significant performance enhancements over the JDK implementation.\n+ */\n+public class NettySslHttp2Factory implements SSLFactory {\n+  private static final Logger logger = LoggerFactory.getLogger(NettySslFactory.class);\n+  private final SslContext nettyServerSslContext;\n+  private final SslContext nettyClientSslContext;\n+  private final SSLContext jdkSslContext;\n+  private final String endpointIdentification;\n+\n+  /**\n+   * Instantiate a {@link NettySslFactory} from a config.\n+   * @param sslConfig the {@link SSLConfig} to use.\n+   * @throws GeneralSecurityException\n+   * @throws IOException\n+   */\n+  public NettySslHttp2Factory(SSLConfig sslConfig) throws GeneralSecurityException, IOException {\n+    nettyServerSslContext = getServerSslContext(sslConfig);\n+    nettyClientSslContext = getClientSslContext(sslConfig);\n+    // Netty's OpenSsl based implementation does not use the JDK SSLContext so we have to fall back to the JDK based\n+    // factory to support this method.\n+\n+    jdkSslContext = sslConfig.sslHttp2SelfSign ? null : new JdkSslFactory(sslConfig).getSSLContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTU1MTg0OnYy", "diffSide": "RIGHT", "path": "ambry-api/src/main/java/com.github.ambry/config/SSLConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjozMToyNVrOFbpeGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjozMToyNVrOFbpeGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNTMyMw==", "bodyText": "Could you add a disclaimer to the javadoc to mention that production systems should not use this option as it is relatively insecure.", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364535323", "createdAt": "2020-01-09T02:31:25Z", "author": {"login": "cgtz"}, "path": "ambry-api/src/main/java/com.github.ambry/config/SSLConfig.java", "diffHunk": "@@ -145,6 +145,20 @@\n   @Default(\"com.github.ambry.commons.JdkSslFactory\")\n   public final String sslFactory;\n \n+  /**\n+   * The implementation of {@link com.github.ambry.commons.SSLFactory} to use.\n+   */\n+  @Config(\"ssl.http2.factory\")\n+  @Default(\"com.github.ambry.rest.NettySslHttp2Factory\")\n+  public final String sslHttp2Factory;\n+\n+  /**\n+   * Use self signed HTTP2 SSL certification if true.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTU1ODk5OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjozNzozOFrOFbpiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjozNzozOFrOFbpiiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNjQ1OQ==", "bodyText": "does this need to be implemented? For example, shutting down the EventLoopGroup?", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364536459", "createdAt": "2020-01-09T02:37:38Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.ChannelOutput;\n+import com.github.ambry.network.ConnectedChannel;\n+import com.github.ambry.network.Send;\n+import com.github.ambry.rest.NettySslHttp2Factory;\n+import com.github.ambry.utils.ByteBufferChannel;\n+import com.github.ambry.utils.NettyByteBufDataInputStream;\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import io.netty.handler.codec.http2.Http2StreamChannel;\n+import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.GeneralSecurityException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A HTTP2 implementation of {@link ConnectedChannel}\n+ */\n+public class Http2BlockingChannel implements ConnectedChannel {\n+  protected final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Channel channel;\n+  private Http2ResponseHandler http2ResponseHandler;\n+  private String hostName;\n+  private int port;\n+\n+  public Http2BlockingChannel(String hostName, int port) {\n+    http2ResponseHandler = new Http2ResponseHandler();\n+    this.hostName = hostName;\n+    this.port = port;\n+  }\n+\n+  @Override\n+  public void connect() throws IOException {\n+    Bootstrap b = new Bootstrap();\n+    b.group(new NioEventLoopGroup());\n+    b.channel(NioSocketChannel.class);\n+    b.option(ChannelOption.SO_KEEPALIVE, true);\n+    b.remoteAddress(hostName, port);\n+    SSLFactory sslFactory;\n+    try {\n+      sslFactory = new NettySslHttp2Factory(new SSLConfig(new VerifiableProperties(new Properties())));\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(e);\n+    }\n+    b.handler(new Http2ClientChannelInitializer(sslFactory, hostName, port));\n+\n+    // Start the client.\n+    channel = b.connect().syncUninterruptibly().channel();\n+    logger.info(\"Connected to remote host\");\n+  }\n+\n+  @Override\n+  public void disconnect() throws IOException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTU2MjI3OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo0MDo1NVrOFbpkoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo0MDo1NVrOFbpkoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNjk5Mg==", "bodyText": "This or something similar may actually have to become production code in the future to support replication.", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364536992", "createdAt": "2020-01-09T02:40:55Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.ChannelOutput;\n+import com.github.ambry.network.ConnectedChannel;\n+import com.github.ambry.network.Send;\n+import com.github.ambry.rest.NettySslHttp2Factory;\n+import com.github.ambry.utils.ByteBufferChannel;\n+import com.github.ambry.utils.NettyByteBufDataInputStream;\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import io.netty.handler.codec.http2.Http2StreamChannel;\n+import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.GeneralSecurityException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A HTTP2 implementation of {@link ConnectedChannel}\n+ */\n+public class Http2BlockingChannel implements ConnectedChannel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTU2OTY2OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo0Njo0MlrOFbppCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo0Njo0MlrOFbppCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzODEyMg==", "bodyText": "implement these 2 methods?", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364538122", "createdAt": "2020-01-09T02:46:42Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.ChannelOutput;\n+import com.github.ambry.network.ConnectedChannel;\n+import com.github.ambry.network.Send;\n+import com.github.ambry.rest.NettySslHttp2Factory;\n+import com.github.ambry.utils.ByteBufferChannel;\n+import com.github.ambry.utils.NettyByteBufDataInputStream;\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import io.netty.handler.codec.http2.Http2StreamChannel;\n+import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.GeneralSecurityException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A HTTP2 implementation of {@link ConnectedChannel}\n+ */\n+public class Http2BlockingChannel implements ConnectedChannel {\n+  protected final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Channel channel;\n+  private Http2ResponseHandler http2ResponseHandler;\n+  private String hostName;\n+  private int port;\n+\n+  public Http2BlockingChannel(String hostName, int port) {\n+    http2ResponseHandler = new Http2ResponseHandler();\n+    this.hostName = hostName;\n+    this.port = port;\n+  }\n+\n+  @Override\n+  public void connect() throws IOException {\n+    Bootstrap b = new Bootstrap();\n+    b.group(new NioEventLoopGroup());\n+    b.channel(NioSocketChannel.class);\n+    b.option(ChannelOption.SO_KEEPALIVE, true);\n+    b.remoteAddress(hostName, port);\n+    SSLFactory sslFactory;\n+    try {\n+      sslFactory = new NettySslHttp2Factory(new SSLConfig(new VerifiableProperties(new Properties())));\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(e);\n+    }\n+    b.handler(new Http2ClientChannelInitializer(sslFactory, hostName, port));\n+\n+    // Start the client.\n+    channel = b.connect().syncUninterruptibly().channel();\n+    logger.info(\"Connected to remote host\");\n+  }\n+\n+  @Override\n+  public void disconnect() throws IOException {\n+\n+  }\n+\n+  @Override\n+  public void send(Send request) throws IOException {\n+    ByteBufferChannel byteBufferChannel = new ByteBufferChannel(ByteBuffer.allocate((int) request.sizeInBytes()));\n+    while (!request.isSendComplete()) {\n+      request.writeTo(byteBufferChannel);\n+    }\n+    byteBufferChannel.getBuffer().position(0);\n+    ByteBuf byteBuf = Unpooled.wrappedBuffer(byteBufferChannel.getBuffer());\n+\n+    Http2ClientStreamInitializer initializer = new Http2ClientStreamInitializer(http2ResponseHandler);\n+    Http2StreamChannel childChannel =\n+        new Http2StreamChannelBootstrap(channel).handler(initializer).open().syncUninterruptibly().getNow();\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+\n+    DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+    DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBuf, true);\n+    ChannelPromise childChannelPromise = childChannel.newPromise();\n+    childChannel.write(headersFrame);\n+    ChannelFuture channelFuture = childChannel.write(dataFrame);\n+    childChannel.flush();\n+    http2ResponseHandler.put(channelFuture, childChannelPromise);\n+  }\n+\n+  @Override\n+  public ChannelOutput receive() throws IOException {\n+    Http2ResponseHandler.StreamResult streamResult = http2ResponseHandler.awaitResponses(5, TimeUnit.SECONDS);\n+    DataInputStream dataInputStream = new NettyByteBufDataInputStream(streamResult.getByteBuf());\n+    return new ChannelOutput(dataInputStream, dataInputStream.readLong());\n+  }\n+\n+  @Override\n+  public String getRemoteHost() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTU3MjcyOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2ClientChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo0OToyNFrOFbpq3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo0OToyNFrOFbpq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzODU4OA==", "bodyText": "Does this need to be public?", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364538588", "createdAt": "2020-01-09T02:49:24Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2ClientChannelInitializer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.ssl.SslHandler;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link Http2BlockingChannel}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class Http2ClientChannelInitializer extends ChannelInitializer<SocketChannel> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTU3MzA5OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo0OTo0N1rOFbprEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo0OTo0N1rOFbprEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzODY0Mg==", "bodyText": "final when possible", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364538642", "createdAt": "2020-01-09T02:49:47Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.ChannelOutput;\n+import com.github.ambry.network.ConnectedChannel;\n+import com.github.ambry.network.Send;\n+import com.github.ambry.rest.NettySslHttp2Factory;\n+import com.github.ambry.utils.ByteBufferChannel;\n+import com.github.ambry.utils.NettyByteBufDataInputStream;\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import io.netty.handler.codec.http2.Http2StreamChannel;\n+import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.GeneralSecurityException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A HTTP2 implementation of {@link ConnectedChannel}\n+ */\n+public class Http2BlockingChannel implements ConnectedChannel {\n+  protected final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Channel channel;\n+  private Http2ResponseHandler http2ResponseHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTU3NDgzOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2ClientChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo1MToxOVrOFbpsJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo1MToxOVrOFbpsJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzODkxNg==", "bodyText": "private?", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364538916", "createdAt": "2020-01-09T02:51:19Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2ClientChannelInitializer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.ssl.SslHandler;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link Http2BlockingChannel}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class Http2ClientChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final SSLFactory sslFactory;\n+  String host;\n+  int port;\n+\n+  /**\n+   * Construct a {@link Http2ClientChannelInitializer}.\n+   * @param sslFactory the {@link SSLFactory} to use for generating {@link javax.net.ssl.SSLEngine} instances,\n+   *                   or {@code null} if SSL is not enabled in this pipeline.\n+   */\n+  public Http2ClientChannelInitializer(SSLFactory sslFactory, String host, int port) {\n+    this.host = host;\n+    this.port = port;\n+    this.sslFactory = sslFactory;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    ChannelPipeline pipeline = ch.pipeline();\n+    if (sslFactory == null) {\n+      throw new IllegalArgumentException(\"ssl factory shouldn't be null\");\n+    }\n+    SslHandler sslHandler = new SslHandler(sslFactory.createSSLEngine(host, port, SSLFactory.Mode.CLIENT));\n+    pipeline.addLast(sslHandler);\n+    pipeline.addLast(Http2FrameCodecBuilder.forClient().build());\n+    pipeline.addLast(new Http2MultiplexHandler(new DummyChildHandler()));\n+  }\n+\n+  public class DummyChildHandler extends ChannelInboundHandlerAdapter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTU3NDk5OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2ClientChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo1MToyNlrOFbpsOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjo1MToyNlrOFbpsOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzODkzNw==", "bodyText": "private/final?", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r364538937", "createdAt": "2020-01-09T02:51:26Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2ClientChannelInitializer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.ssl.SslHandler;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link Http2BlockingChannel}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+public class Http2ClientChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final SSLFactory sslFactory;\n+  String host;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzU2MTcxOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2ResponseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo1NDoyM1rOFcizfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDoyMDo1MlrOFcjE4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NDY4Ng==", "bodyText": "does this currently support a single stream per connection at a time? I guess for the integration tests, this should suffice for now.", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r365474686", "createdAt": "2020-01-10T23:54:23Z", "author": {"login": "cgtz"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2ResponseHandler.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.github.ambry.server;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import io.netty.handler.codec.http2.HttpConversionUtil;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Process {@link io.netty.handler.codec.http.FullHttpResponse} translated from HTTP/2 frames\n+ */\n+@ChannelHandler.Sharable\n+public class Http2ResponseHandler extends SimpleChannelInboundHandler<FullHttpResponse> {\n+\n+  protected final Logger logger = LoggerFactory.getLogger(getClass());\n+  private StreamResult streamResult;\n+\n+  public Http2ResponseHandler() {\n+\n+  }\n+\n+  /**\n+   * Track the {@link ChannelFuture} and {@link ChannelPromise}\n+   *\n+   * @param writeFuture A future that represent the request write operation\n+   * @param promise The promise object that will be used to wait/notify events\n+   * @return The previous object associated with {@code streamId}\n+   * @see Http2ResponseHandler#awaitResponses(long, TimeUnit)\n+   */\n+  public void put(ChannelFuture writeFuture, ChannelPromise promise) {\n+    streamResult = new StreamResult(writeFuture, promise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3OTEzOA==", "bodyText": "Yes, one stream per connection at a time. For test only now. Will improve it once we get enough client knowledge/experience.", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r365479138", "createdAt": "2020-01-11T00:20:52Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2ResponseHandler.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.github.ambry.server;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import io.netty.handler.codec.http2.HttpConversionUtil;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Process {@link io.netty.handler.codec.http.FullHttpResponse} translated from HTTP/2 frames\n+ */\n+@ChannelHandler.Sharable\n+public class Http2ResponseHandler extends SimpleChannelInboundHandler<FullHttpResponse> {\n+\n+  protected final Logger logger = LoggerFactory.getLogger(getClass());\n+  private StreamResult streamResult;\n+\n+  public Http2ResponseHandler() {\n+\n+  }\n+\n+  /**\n+   * Track the {@link ChannelFuture} and {@link ChannelPromise}\n+   *\n+   * @param writeFuture A future that represent the request write operation\n+   * @param promise The promise object that will be used to wait/notify events\n+   * @return The previous object associated with {@code streamId}\n+   * @see Http2ResponseHandler#awaitResponses(long, TimeUnit)\n+   */\n+  public void put(ChannelFuture writeFuture, ChannelPromise promise) {\n+    streamResult = new StreamResult(writeFuture, promise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NDY4Ng=="}, "originalCommit": {"oid": "6fe7cc0de5df34239f7fe37df164f10263f09161"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTUwNTEyOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMzozNDoxNlrOFdsiOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODoxNjoyNlrOFeBw9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4MjY4MQ==", "bodyText": "This is designed to be a blocking channel where only one http request can be sent and received at a time. This is not really how we will use http2. So this is a just a test class that will never be used in production?", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r366682681", "createdAt": "2020-01-15T03:34:16Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.ChannelOutput;\n+import com.github.ambry.network.ConnectedChannel;\n+import com.github.ambry.network.Send;\n+import com.github.ambry.rest.NettySslHttp2Factory;\n+import com.github.ambry.utils.ByteBufferChannel;\n+import com.github.ambry.utils.NettyByteBufDataInputStream;\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import io.netty.handler.codec.http2.Http2StreamChannel;\n+import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.GeneralSecurityException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A HTTP2 implementation of {@link ConnectedChannel}. This implementation is for test now. It will be imporved to\n+ * to support replication in the future.\n+ */\n+public class Http2BlockingChannel implements ConnectedChannel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c7106b8df2c3ae9690a2c0d0a3e3b216b9546f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzMDUxOQ==", "bodyText": "Replication also uses Blocking Channel, so we will use it in the future. But not this version, it will be improved.", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r367030519", "createdAt": "2020-01-15T18:16:26Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.ChannelOutput;\n+import com.github.ambry.network.ConnectedChannel;\n+import com.github.ambry.network.Send;\n+import com.github.ambry.rest.NettySslHttp2Factory;\n+import com.github.ambry.utils.ByteBufferChannel;\n+import com.github.ambry.utils.NettyByteBufDataInputStream;\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import io.netty.handler.codec.http2.Http2StreamChannel;\n+import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.GeneralSecurityException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A HTTP2 implementation of {@link ConnectedChannel}. This implementation is for test now. It will be imporved to\n+ * to support replication in the future.\n+ */\n+public class Http2BlockingChannel implements ConnectedChannel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4MjY4MQ=="}, "originalCommit": {"oid": "57c7106b8df2c3ae9690a2c0d0a3e3b216b9546f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTUxMTMzOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMzozOTozNlrOFdslyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODoxNzowN1rOFeByQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4MzU5NA==", "bodyText": "this is weird given that we have initialized the handler in the connect method. It seems like all we need from connect method is just a functional channel so we can build a http2 stream handler on top of that channel?", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r366683594", "createdAt": "2020-01-15T03:39:36Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.ChannelOutput;\n+import com.github.ambry.network.ConnectedChannel;\n+import com.github.ambry.network.Send;\n+import com.github.ambry.rest.NettySslHttp2Factory;\n+import com.github.ambry.utils.ByteBufferChannel;\n+import com.github.ambry.utils.NettyByteBufDataInputStream;\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import io.netty.handler.codec.http2.Http2StreamChannel;\n+import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.GeneralSecurityException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A HTTP2 implementation of {@link ConnectedChannel}. This implementation is for test now. It will be imporved to\n+ * to support replication in the future.\n+ */\n+public class Http2BlockingChannel implements ConnectedChannel {\n+  private static final Logger logger = LoggerFactory.getLogger(Http2BlockingChannel.class);\n+  private final Http2ResponseHandler http2ResponseHandler;\n+  private final String hostName;\n+  private final int port;\n+  private EventLoopGroup workerGroup;\n+  private Channel channel;\n+\n+  public Http2BlockingChannel(String hostName, int port) {\n+    http2ResponseHandler = new Http2ResponseHandler();\n+    this.hostName = hostName;\n+    this.port = port;\n+  }\n+\n+  @Override\n+  public void connect() throws IOException {\n+    workerGroup = new NioEventLoopGroup();\n+    Bootstrap b = new Bootstrap();\n+    b.group(workerGroup);\n+    b.channel(NioSocketChannel.class);\n+    b.option(ChannelOption.SO_KEEPALIVE, true);\n+    b.remoteAddress(hostName, port);\n+    SSLFactory sslFactory;\n+    try {\n+      sslFactory = new NettySslHttp2Factory(new SSLConfig(new VerifiableProperties(new Properties())));\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(e);\n+    }\n+    b.handler(new Http2ClientChannelInitializer(sslFactory, hostName, port));\n+\n+    // Start the client.\n+    channel = b.connect().syncUninterruptibly().channel();\n+    logger.info(\"Connected to remote host\");\n+  }\n+\n+  @Override\n+  public void disconnect() throws IOException {\n+    channel.disconnect().syncUninterruptibly();\n+    workerGroup.shutdownGracefully();\n+  }\n+\n+  @Override\n+  public void send(Send request) throws IOException {\n+    ByteBufferChannel byteBufferChannel = new ByteBufferChannel(ByteBuffer.allocate((int) request.sizeInBytes()));\n+    while (!request.isSendComplete()) {\n+      request.writeTo(byteBufferChannel);\n+    }\n+    byteBufferChannel.getBuffer().position(0);\n+    ByteBuf byteBuf = Unpooled.wrappedBuffer(byteBufferChannel.getBuffer());\n+\n+    Http2ClientStreamInitializer initializer = new Http2ClientStreamInitializer(http2ResponseHandler);\n+    Http2StreamChannel childChannel =\n+        new Http2StreamChannelBootstrap(channel).handler(initializer).open().syncUninterruptibly().getNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c7106b8df2c3ae9690a2c0d0a3e3b216b9546f"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzMDg0OQ==", "bodyText": "yes, http2 stream channel is a child channel of http2 connection channel.", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r367030849", "createdAt": "2020-01-15T18:17:07Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.ChannelOutput;\n+import com.github.ambry.network.ConnectedChannel;\n+import com.github.ambry.network.Send;\n+import com.github.ambry.rest.NettySslHttp2Factory;\n+import com.github.ambry.utils.ByteBufferChannel;\n+import com.github.ambry.utils.NettyByteBufDataInputStream;\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import io.netty.handler.codec.http2.Http2StreamChannel;\n+import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.GeneralSecurityException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A HTTP2 implementation of {@link ConnectedChannel}. This implementation is for test now. It will be imporved to\n+ * to support replication in the future.\n+ */\n+public class Http2BlockingChannel implements ConnectedChannel {\n+  private static final Logger logger = LoggerFactory.getLogger(Http2BlockingChannel.class);\n+  private final Http2ResponseHandler http2ResponseHandler;\n+  private final String hostName;\n+  private final int port;\n+  private EventLoopGroup workerGroup;\n+  private Channel channel;\n+\n+  public Http2BlockingChannel(String hostName, int port) {\n+    http2ResponseHandler = new Http2ResponseHandler();\n+    this.hostName = hostName;\n+    this.port = port;\n+  }\n+\n+  @Override\n+  public void connect() throws IOException {\n+    workerGroup = new NioEventLoopGroup();\n+    Bootstrap b = new Bootstrap();\n+    b.group(workerGroup);\n+    b.channel(NioSocketChannel.class);\n+    b.option(ChannelOption.SO_KEEPALIVE, true);\n+    b.remoteAddress(hostName, port);\n+    SSLFactory sslFactory;\n+    try {\n+      sslFactory = new NettySslHttp2Factory(new SSLConfig(new VerifiableProperties(new Properties())));\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(e);\n+    }\n+    b.handler(new Http2ClientChannelInitializer(sslFactory, hostName, port));\n+\n+    // Start the client.\n+    channel = b.connect().syncUninterruptibly().channel();\n+    logger.info(\"Connected to remote host\");\n+  }\n+\n+  @Override\n+  public void disconnect() throws IOException {\n+    channel.disconnect().syncUninterruptibly();\n+    workerGroup.shutdownGracefully();\n+  }\n+\n+  @Override\n+  public void send(Send request) throws IOException {\n+    ByteBufferChannel byteBufferChannel = new ByteBufferChannel(ByteBuffer.allocate((int) request.sizeInBytes()));\n+    while (!request.isSendComplete()) {\n+      request.writeTo(byteBufferChannel);\n+    }\n+    byteBufferChannel.getBuffer().position(0);\n+    ByteBuf byteBuf = Unpooled.wrappedBuffer(byteBufferChannel.getBuffer());\n+\n+    Http2ClientStreamInitializer initializer = new Http2ClientStreamInitializer(http2ResponseHandler);\n+    Http2StreamChannel childChannel =\n+        new Http2StreamChannelBootstrap(channel).handler(initializer).open().syncUninterruptibly().getNow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4MzU5NA=="}, "originalCommit": {"oid": "57c7106b8df2c3ae9690a2c0d0a3e3b216b9546f"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTUxNjkxOnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMzo0NDoyMVrOFdspDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODoyMzo1MFrOFeB_Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4NDQzMA==", "bodyText": "why do we need a promise here? childChannel should write headerFrame and dataFrame in order. We can avoid one of them by just checking the second write's future.", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r366684430", "createdAt": "2020-01-15T03:44:21Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.ChannelOutput;\n+import com.github.ambry.network.ConnectedChannel;\n+import com.github.ambry.network.Send;\n+import com.github.ambry.rest.NettySslHttp2Factory;\n+import com.github.ambry.utils.ByteBufferChannel;\n+import com.github.ambry.utils.NettyByteBufDataInputStream;\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import io.netty.handler.codec.http2.Http2StreamChannel;\n+import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.GeneralSecurityException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A HTTP2 implementation of {@link ConnectedChannel}. This implementation is for test now. It will be imporved to\n+ * to support replication in the future.\n+ */\n+public class Http2BlockingChannel implements ConnectedChannel {\n+  private static final Logger logger = LoggerFactory.getLogger(Http2BlockingChannel.class);\n+  private final Http2ResponseHandler http2ResponseHandler;\n+  private final String hostName;\n+  private final int port;\n+  private EventLoopGroup workerGroup;\n+  private Channel channel;\n+\n+  public Http2BlockingChannel(String hostName, int port) {\n+    http2ResponseHandler = new Http2ResponseHandler();\n+    this.hostName = hostName;\n+    this.port = port;\n+  }\n+\n+  @Override\n+  public void connect() throws IOException {\n+    workerGroup = new NioEventLoopGroup();\n+    Bootstrap b = new Bootstrap();\n+    b.group(workerGroup);\n+    b.channel(NioSocketChannel.class);\n+    b.option(ChannelOption.SO_KEEPALIVE, true);\n+    b.remoteAddress(hostName, port);\n+    SSLFactory sslFactory;\n+    try {\n+      sslFactory = new NettySslHttp2Factory(new SSLConfig(new VerifiableProperties(new Properties())));\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(e);\n+    }\n+    b.handler(new Http2ClientChannelInitializer(sslFactory, hostName, port));\n+\n+    // Start the client.\n+    channel = b.connect().syncUninterruptibly().channel();\n+    logger.info(\"Connected to remote host\");\n+  }\n+\n+  @Override\n+  public void disconnect() throws IOException {\n+    channel.disconnect().syncUninterruptibly();\n+    workerGroup.shutdownGracefully();\n+  }\n+\n+  @Override\n+  public void send(Send request) throws IOException {\n+    ByteBufferChannel byteBufferChannel = new ByteBufferChannel(ByteBuffer.allocate((int) request.sizeInBytes()));\n+    while (!request.isSendComplete()) {\n+      request.writeTo(byteBufferChannel);\n+    }\n+    byteBufferChannel.getBuffer().position(0);\n+    ByteBuf byteBuf = Unpooled.wrappedBuffer(byteBufferChannel.getBuffer());\n+\n+    Http2ClientStreamInitializer initializer = new Http2ClientStreamInitializer(http2ResponseHandler);\n+    Http2StreamChannel childChannel =\n+        new Http2StreamChannelBootstrap(channel).handler(initializer).open().syncUninterruptibly().getNow();\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+\n+    DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+    DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBuf, true);\n+    ChannelPromise childChannelPromise = childChannel.newPromise();\n+    childChannel.write(headersFrame);\n+    ChannelFuture channelFuture = childChannel.write(dataFrame);\n+    childChannel.flush();\n+    http2ResponseHandler.put(channelFuture, childChannelPromise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c7106b8df2c3ae9690a2c0d0a3e3b216b9546f"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzNDE0Mg==", "bodyText": "channelFuture = childChannel.write(dataFrame)\nThis future is ready when write done(send out), but we need a response comes back. childChannelPromise is set to be ready when response comes back.", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r367034142", "createdAt": "2020-01-15T18:23:50Z", "author": {"login": "zzmao"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2BlockingChannel.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright 2016 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import com.github.ambry.config.SSLConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.network.ChannelOutput;\n+import com.github.ambry.network.ConnectedChannel;\n+import com.github.ambry.network.Send;\n+import com.github.ambry.rest.NettySslHttp2Factory;\n+import com.github.ambry.utils.ByteBufferChannel;\n+import com.github.ambry.utils.NettyByteBufDataInputStream;\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http2.DefaultHttp2DataFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import io.netty.handler.codec.http2.Http2StreamChannel;\n+import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.GeneralSecurityException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A HTTP2 implementation of {@link ConnectedChannel}. This implementation is for test now. It will be imporved to\n+ * to support replication in the future.\n+ */\n+public class Http2BlockingChannel implements ConnectedChannel {\n+  private static final Logger logger = LoggerFactory.getLogger(Http2BlockingChannel.class);\n+  private final Http2ResponseHandler http2ResponseHandler;\n+  private final String hostName;\n+  private final int port;\n+  private EventLoopGroup workerGroup;\n+  private Channel channel;\n+\n+  public Http2BlockingChannel(String hostName, int port) {\n+    http2ResponseHandler = new Http2ResponseHandler();\n+    this.hostName = hostName;\n+    this.port = port;\n+  }\n+\n+  @Override\n+  public void connect() throws IOException {\n+    workerGroup = new NioEventLoopGroup();\n+    Bootstrap b = new Bootstrap();\n+    b.group(workerGroup);\n+    b.channel(NioSocketChannel.class);\n+    b.option(ChannelOption.SO_KEEPALIVE, true);\n+    b.remoteAddress(hostName, port);\n+    SSLFactory sslFactory;\n+    try {\n+      sslFactory = new NettySslHttp2Factory(new SSLConfig(new VerifiableProperties(new Properties())));\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(e);\n+    }\n+    b.handler(new Http2ClientChannelInitializer(sslFactory, hostName, port));\n+\n+    // Start the client.\n+    channel = b.connect().syncUninterruptibly().channel();\n+    logger.info(\"Connected to remote host\");\n+  }\n+\n+  @Override\n+  public void disconnect() throws IOException {\n+    channel.disconnect().syncUninterruptibly();\n+    workerGroup.shutdownGracefully();\n+  }\n+\n+  @Override\n+  public void send(Send request) throws IOException {\n+    ByteBufferChannel byteBufferChannel = new ByteBufferChannel(ByteBuffer.allocate((int) request.sizeInBytes()));\n+    while (!request.isSendComplete()) {\n+      request.writeTo(byteBufferChannel);\n+    }\n+    byteBufferChannel.getBuffer().position(0);\n+    ByteBuf byteBuf = Unpooled.wrappedBuffer(byteBufferChannel.getBuffer());\n+\n+    Http2ClientStreamInitializer initializer = new Http2ClientStreamInitializer(http2ResponseHandler);\n+    Http2StreamChannel childChannel =\n+        new Http2StreamChannelBootstrap(channel).handler(initializer).open().syncUninterruptibly().getNow();\n+    Http2Headers http2Headers = new DefaultHttp2Headers().method(HttpMethod.POST.asciiName()).scheme(\"https\").path(\"/\");\n+\n+    DefaultHttp2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+    DefaultHttp2DataFrame dataFrame = new DefaultHttp2DataFrame(byteBuf, true);\n+    ChannelPromise childChannelPromise = childChannel.newPromise();\n+    childChannel.write(headersFrame);\n+    ChannelFuture channelFuture = childChannel.write(dataFrame);\n+    childChannel.flush();\n+    http2ResponseHandler.put(channelFuture, childChannelPromise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4NDQzMA=="}, "originalCommit": {"oid": "57c7106b8df2c3ae9690a2c0d0a3e3b216b9546f"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODUzNzk2OnYy", "diffSide": "RIGHT", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/CloudDataNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzoyOTo0MlrOFeJv3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzoyOTo0MlrOFeJv3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2MTMxMA==", "bodyText": "Up to you, but do you want to add this cleaner error handling to AmbryDataNode?", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r367161310", "createdAt": "2020-01-15T23:29:42Z", "author": {"login": "cgtz"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/CloudDataNode.java", "diffHunk": "@@ -84,14 +87,32 @@ public int getPort() {\n     return plainTextPort.getPort();\n   }\n \n+  @Override\n+  public boolean hasSSLPort() {\n+    return sslPort != null;\n+  }\n+\n   @Override\n   public int getSSLPort() {\n-    return sslPort.getPort();\n+    if (hasSSLPort()) {\n+      return sslPort.getPort();\n+    } else {\n+      throw new IllegalStateException(\"No SSL port exists for the Data Node \" + hostName + \":\" + plainTextPort);\n+    }\n   }\n \n   @Override\n-  public boolean hasSSLPort() {\n-    return sslPort != null;\n+  public boolean hasHttp2Port() {\n+    return http2Port != null;\n+  }\n+\n+  @Override\n+  public int getHttp2Port() {\n+    if (hasHttp2Port()) {\n+      return http2Port.getPort();\n+    } else {\n+      throw new IllegalStateException(\"No HTTP2 port exists for the Data Node \" + hostName + \":\" + plainTextPort);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c7106b8df2c3ae9690a2c0d0a3e3b216b9546f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODY0NjY4OnYy", "diffSide": "RIGHT", "path": "ambry-server/src/test/java/com.github.ambry.server/Http2ClientChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMDozNDozMFrOFeKyPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMDozNDozMFrOFeKyPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE3ODMwMA==", "bodyText": "just new Http2MultiplexHandler(new ChannelInboundHandlerAdapter()) would do.", "url": "https://github.com/linkedin/ambry/pull/1351#discussion_r367178300", "createdAt": "2020-01-16T00:34:30Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-server/src/test/java/com.github.ambry.server/Http2ClientChannelInitializer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+\n+package com.github.ambry.server;\n+\n+import com.github.ambry.commons.SSLFactory;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.ssl.SslHandler;\n+\n+\n+/**\n+ * A {@link ChannelInitializer} to be used with {@link Http2BlockingChannel}. Calling {@link #initChannel(SocketChannel)}\n+ * adds the necessary handlers to a channel's pipeline so that it may handle requests.\n+ */\n+class Http2ClientChannelInitializer extends ChannelInitializer<SocketChannel> {\n+  private final SSLFactory sslFactory;\n+  private final String host;\n+  private final int port;\n+\n+  /**\n+   * Construct a {@link Http2ClientChannelInitializer}.\n+   * @param sslFactory the {@link SSLFactory} to use for generating {@link javax.net.ssl.SSLEngine} instances,\n+   *                   or {@code null} if SSL is not enabled in this pipeline.\n+   */\n+  public Http2ClientChannelInitializer(SSLFactory sslFactory, String host, int port) {\n+    this.host = host;\n+    this.port = port;\n+    this.sslFactory = sslFactory;\n+  }\n+\n+  @Override\n+  protected void initChannel(SocketChannel ch) throws Exception {\n+    ChannelPipeline pipeline = ch.pipeline();\n+    if (sslFactory == null) {\n+      throw new IllegalArgumentException(\"ssl factory shouldn't be null\");\n+    }\n+    SslHandler sslHandler = new SslHandler(sslFactory.createSSLEngine(host, port, SSLFactory.Mode.CLIENT));\n+    pipeline.addLast(sslHandler);\n+    pipeline.addLast(Http2FrameCodecBuilder.forClient().build());\n+    pipeline.addLast(new Http2MultiplexHandler(new DummyChildHandler()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c7106b8df2c3ae9690a2c0d0a3e3b216b9546f"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1633, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}