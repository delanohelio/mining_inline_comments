{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NzA4MjAz", "number": 1551, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzowOTo0OVrOEDHs6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToxNDowMlrOEEBQDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzA3MzcxOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannelStreamChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzowOTo0OVrOGf_onA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoxNjowN1rOGgoMKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTYyOA==", "bodyText": "Maybe make this handler a static class in Http2BlockingChannel (or its own file like the other handlers) since most of the logic is about how the netty pipeline interacts with that class", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436201628", "createdAt": "2020-06-05T23:09:49Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannelStreamChannelInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+package com.github.ambry.network.http2;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import io.netty.handler.codec.http.HttpObjectAggregator;\n+import io.netty.handler.codec.http2.Http2StreamFrameToHttpObjectCodec;\n+import io.netty.util.concurrent.Promise;\n+\n+\n+/**\n+ * A ChannelInitializer used to setup stream channel pipeline once stream is created in {@link MultiplexedChannelRecord}.\n+ */\n+public class Http2BlockingChannelStreamChannelInitializer extends ChannelInitializer {\n+\n+  private final int http2MaxContentLength;\n+\n+  Http2BlockingChannelStreamChannelInitializer(int http2MaxContentLength) {\n+    this.http2MaxContentLength = http2MaxContentLength;\n+  }\n+\n+  @Override\n+  protected void initChannel(Channel ch) throws Exception {\n+    ChannelPipeline p = ch.pipeline();\n+    p.addLast(new Http2StreamFrameToHttpObjectCodec(false));\n+    p.addLast(new HttpObjectAggregator(http2MaxContentLength));\n+    p.addLast(new SimpleChannelInboundHandler<FullHttpResponse>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2262bc591c5eef8a215849a77c1c768088fda5d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NjA5MQ==", "bodyText": "Created its own file.", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436866091", "createdAt": "2020-06-08T17:16:07Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannelStreamChannelInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+package com.github.ambry.network.http2;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import io.netty.handler.codec.http.HttpObjectAggregator;\n+import io.netty.handler.codec.http2.Http2StreamFrameToHttpObjectCodec;\n+import io.netty.util.concurrent.Promise;\n+\n+\n+/**\n+ * A ChannelInitializer used to setup stream channel pipeline once stream is created in {@link MultiplexedChannelRecord}.\n+ */\n+public class Http2BlockingChannelStreamChannelInitializer extends ChannelInitializer {\n+\n+  private final int http2MaxContentLength;\n+\n+  Http2BlockingChannelStreamChannelInitializer(int http2MaxContentLength) {\n+    this.http2MaxContentLength = http2MaxContentLength;\n+  }\n+\n+  @Override\n+  protected void initChannel(Channel ch) throws Exception {\n+    ChannelPipeline p = ch.pipeline();\n+    p.addLast(new Http2StreamFrameToHttpObjectCodec(false));\n+    p.addLast(new HttpObjectAggregator(http2MaxContentLength));\n+    p.addLast(new SimpleChannelInboundHandler<FullHttpResponse>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTYyOA=="}, "originalCommit": {"oid": "a2262bc591c5eef8a215849a77c1c768088fda5d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTYzMzc2OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannelResponseHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzozNTo0M1rOGgo9xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzozNTo0M1rOGgo9xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3ODc5MQ==", "bodyText": "Could this be shareable?", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436878791", "createdAt": "2020-06-08T17:35:43Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannelResponseHandler.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+package com.github.ambry.network.http2;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import io.netty.util.concurrent.Promise;\n+\n+\n+/**\n+ * Netty handler for {@link Http2BlockingChannel} to handle {@link FullHttpResponse}.\n+ */\n+public class Http2BlockingChannelResponseHandler extends SimpleChannelInboundHandler<FullHttpResponse> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTYzNjcxOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannelStreamChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzozNjozMlrOGgo_pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzozNjozMlrOGgo_pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3OTI3MQ==", "bodyText": "Looks like AmbrySendToHttp2Adaptor is marked shareable, but a new instance is being created for each channel", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436879271", "createdAt": "2020-06-08T17:36:32Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannelStreamChannelInitializer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+package com.github.ambry.network.http2;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.http.HttpObjectAggregator;\n+import io.netty.handler.codec.http2.Http2StreamFrameToHttpObjectCodec;\n+\n+\n+/**\n+ * A ChannelInitializer used to setup stream channel pipeline once stream is created in {@link MultiplexedChannelRecord}.\n+ */\n+public class Http2BlockingChannelStreamChannelInitializer extends ChannelInitializer {\n+\n+  private final int http2MaxContentLength;\n+\n+  Http2BlockingChannelStreamChannelInitializer(int http2MaxContentLength) {\n+    this.http2MaxContentLength = http2MaxContentLength;\n+  }\n+\n+  @Override\n+  protected void initChannel(Channel ch) throws Exception {\n+    ChannelPipeline p = ch.pipeline();\n+    p.addLast(new Http2StreamFrameToHttpObjectCodec(false));\n+    p.addLast(new HttpObjectAggregator(http2MaxContentLength));\n+    p.addLast(new Http2BlockingChannelResponseHandler());\n+    p.addLast(new AmbrySendToHttp2Adaptor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTY0NTk2OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientResponseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzozOToyN1rOGgpFvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODo0NTowMlrOGgrVtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MDgyOA==", "bodyText": "why include the hashcode in this log message?", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436880828", "createdAt": "2020-06-08T17:39:27Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientResponseHandler.java", "diffHunk": "@@ -66,16 +67,8 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpResponse msg) {\n   @Override\n   public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n     http2ClientMetrics.http2StreamExceptionCount.inc();\n-    logger.info(\"Exception Caught from inbound.\", cause.getMessage());\n-    releaseAndCloseStreamChannel(ctx);\n-  }\n-\n-  private void releaseAndCloseStreamChannel(ChannelHandlerContext ctx) {\n-    logger.debug(\"Stream channel is being closed. Stream: {}, Parent: {}\", ctx.channel(), ctx.channel().parent());\n-    ctx.channel()\n-        .parent()\n-        .attr(Http2MultiplexedChannelPool.HTTP2_MULTIPLEXED_CHANNEL_POOL)\n-        .get()\n-        .release(ctx.channel());\n+    logger.info(\"Exception caught from in Http2ClientResponseHandler {} {}. Closing stream channel. Cause: \",\n+        ctx.channel().hashCode(), ctx.channel(), cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxNzY4Ng==", "bodyText": "All stream channels use the same parent channel + H2 stream id as the output string, however, sometimes, H2 stream id is -1. If we want to track this kind of stream, we need a unique id, so I used hashCode().", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436917686", "createdAt": "2020-06-08T18:45:02Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientResponseHandler.java", "diffHunk": "@@ -66,16 +67,8 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpResponse msg) {\n   @Override\n   public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n     http2ClientMetrics.http2StreamExceptionCount.inc();\n-    logger.info(\"Exception Caught from inbound.\", cause.getMessage());\n-    releaseAndCloseStreamChannel(ctx);\n-  }\n-\n-  private void releaseAndCloseStreamChannel(ChannelHandlerContext ctx) {\n-    logger.debug(\"Stream channel is being closed. Stream: {}, Parent: {}\", ctx.channel(), ctx.channel().parent());\n-    ctx.channel()\n-        .parent()\n-        .attr(Http2MultiplexedChannelPool.HTTP2_MULTIPLEXED_CHANNEL_POOL)\n-        .get()\n-        .release(ctx.channel());\n+    logger.info(\"Exception caught from in Http2ClientResponseHandler {} {}. Closing stream channel. Cause: \",\n+        ctx.channel().hashCode(), ctx.channel(), cause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MDgyOA=="}, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTY1ODIzOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2MultiplexedChannelPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo0MzoxMlrOGgpNxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODo0NTozN1rOGgrXDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4Mjg4Ng==", "bodyText": "why is the http2ClientConfig passed in from the constructor not used here?", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436882886", "createdAt": "2020-06-08T17:43:12Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2MultiplexedChannelPool.java", "diffHunk": "@@ -92,13 +94,16 @@\n    * @param eventLoopGroup The event loop group.\n    * @param http2ClientConfig http2 client configs.\n    * @param http2ClientMetrics http2 client metrics.\n+   * @param streamChannelInitializer {@link ChannelInitializer} to initilize a stream channel pipeline\n    */\n   public Http2MultiplexedChannelPool(InetSocketAddress inetSocketAddress, SSLFactory sslFactory,\n-      EventLoopGroup eventLoopGroup, Http2ClientConfig http2ClientConfig, Http2ClientMetrics http2ClientMetrics) {\n+      EventLoopGroup eventLoopGroup, Http2ClientConfig http2ClientConfig, Http2ClientMetrics http2ClientMetrics,\n+      ChannelInitializer streamChannelInitializer) {\n     this(new SimpleChannelPool(createBootStrap(eventLoopGroup, http2ClientConfig, inetSocketAddress),\n             new Http2ChannelPoolHandler(sslFactory, inetSocketAddress.getHostName(), inetSocketAddress.getPort(),\n                 http2ClientConfig)), eventLoopGroup, ConcurrentHashMap.newKeySet(), inetSocketAddress,\n-        new Http2ClientConfig(new VerifiableProperties(new Properties())), http2ClientMetrics);\n+        new Http2ClientConfig(new VerifiableProperties(new Properties())), http2ClientMetrics,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxODAyOQ==", "bodyText": "good catch. http2ClientConfig should be used. I guess it was because refactor.", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436918029", "createdAt": "2020-06-08T18:45:37Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2MultiplexedChannelPool.java", "diffHunk": "@@ -92,13 +94,16 @@\n    * @param eventLoopGroup The event loop group.\n    * @param http2ClientConfig http2 client configs.\n    * @param http2ClientMetrics http2 client metrics.\n+   * @param streamChannelInitializer {@link ChannelInitializer} to initilize a stream channel pipeline\n    */\n   public Http2MultiplexedChannelPool(InetSocketAddress inetSocketAddress, SSLFactory sslFactory,\n-      EventLoopGroup eventLoopGroup, Http2ClientConfig http2ClientConfig, Http2ClientMetrics http2ClientMetrics) {\n+      EventLoopGroup eventLoopGroup, Http2ClientConfig http2ClientConfig, Http2ClientMetrics http2ClientMetrics,\n+      ChannelInitializer streamChannelInitializer) {\n     this(new SimpleChannelPool(createBootStrap(eventLoopGroup, http2ClientConfig, inetSocketAddress),\n             new Http2ChannelPoolHandler(sslFactory, inetSocketAddress.getHostName(), inetSocketAddress.getPort(),\n                 http2ClientConfig)), eventLoopGroup, ConcurrentHashMap.newKeySet(), inetSocketAddress,\n-        new Http2ClientConfig(new VerifiableProperties(new Properties())), http2ClientMetrics);\n+        new Http2ClientConfig(new VerifiableProperties(new Properties())), http2ClientMetrics,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4Mjg4Ng=="}, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTY4NTkzOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1MTowNFrOGgpfdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1MTowNFrOGgpfdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NzQxNA==", "bodyText": "nit: you might be able to use releaseAndCloseStreamChannel in warmUpConnections too.", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436887414", "createdAt": "2020-06-08T17:51:04Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -124,6 +133,10 @@ public void operationComplete(ChannelFuture future) throws Exception {\n     }\n     http2ClientMetrics.http2ClientSendTime.update(System.currentTimeMillis() - startTime);\n     // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n+    if (requestsToDrop.size() != 0) {\n+      logger.warn(\"Number of requestsToDrop: {}\", requestsToDrop.size());\n+      http2ClientMetrics.http2RequestsToDropCount.inc(requestsToDrop.size());\n+    }\n \n     http2ClientResponseHandler.getResponseInfoQueue().poll(readyResponseInfos, pollTimeoutMs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTY5NTYzOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1Mzo0OFrOGgplyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDoyMDo1N1rOGgu7-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4OTAzMw==", "bodyText": "Not used.", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436889033", "createdAt": "2020-06-08T17:53:48Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -18,6 +18,7 @@\n import com.github.ambry.router.AsyncWritableChannel;\n import com.github.ambry.router.Callback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3NjYzMg==", "bodyText": "removed", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436976632", "createdAt": "2020-06-08T20:20:57Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -18,6 +18,7 @@\n import com.github.ambry.router.AsyncWritableChannel;\n import com.github.ambry.router.Callback;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4OTAzMw=="}, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTY5ODY1OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1NDoyNVrOGgpneQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDoyMTowM1rOGgu8Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4OTQ2NQ==", "bodyText": "logger is not used anywhere.", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436889465", "createdAt": "2020-06-08T17:54:25Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -34,6 +35,7 @@\n /**\n  * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n  */\n+@ChannelHandler.Sharable\n public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n   private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3NjY5NA==", "bodyText": "removed", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436976694", "createdAt": "2020-06-08T20:21:03Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/AmbrySendToHttp2Adaptor.java", "diffHunk": "@@ -34,6 +35,7 @@\n /**\n  * Translates Ambry {@link Send} to the HTTP/2 frame objects.\n  */\n+@ChannelHandler.Sharable\n public class AmbrySendToHttp2Adaptor extends ChannelOutboundHandlerAdapter {\n   private static final Logger logger = LoggerFactory.getLogger(AmbrySendToHttp2Adaptor.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4OTQ2NQ=="}, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTcwMzg5OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1NTo0N1rOGgpqqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDoyMTowN1rOGgu8Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MDI4MQ==", "bodyText": "not used anywhere.", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436890281", "createdAt": "2020-06-08T17:55:47Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannel.java", "diffHunk": "@@ -50,11 +44,11 @@\n  */\n public class Http2BlockingChannel implements ConnectedChannel {\n   private static final Logger logger = LoggerFactory.getLogger(Http2BlockingChannel.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3NjcyNw==", "bodyText": "removed", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436976727", "createdAt": "2020-06-08T20:21:07Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannel.java", "diffHunk": "@@ -50,11 +44,11 @@\n  */\n public class Http2BlockingChannel implements ConnectedChannel {\n   private static final Logger logger = LoggerFactory.getLogger(Http2BlockingChannel.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MDI4MQ=="}, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTcwODYyOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1NzowMlrOGgptlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDoxODowNVrOGgu12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MTAzMQ==", "bodyText": "nit: since the http2ClientMetrics is not used in this class, we don't need to have a reference of this object in this class.", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436891031", "createdAt": "2020-06-08T17:57:02Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannel.java", "diffHunk": "@@ -78,7 +72,8 @@ public Http2BlockingChannel(String hostName, int port, SSLConfig sslConfig, Http\n     this.http2MultiplexedChannelPool =\n         new Http2MultiplexedChannelPool(new InetSocketAddress(hostName, port), nettySslHttp2Factory,\n             Epoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup(), http2ClientConfig,\n-            http2ClientMetrics);\n+            http2ClientMetrics,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3NTA2NA==", "bodyText": "good point.", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436975064", "createdAt": "2020-06-08T20:18:05Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannel.java", "diffHunk": "@@ -78,7 +72,8 @@ public Http2BlockingChannel(String hostName, int port, SSLConfig sslConfig, Http\n     this.http2MultiplexedChannelPool =\n         new Http2MultiplexedChannelPool(new InetSocketAddress(hostName, port), nettySslHttp2Factory,\n             Epoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup(), http2ClientConfig,\n-            http2ClientMetrics);\n+            http2ClientMetrics,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MTAzMQ=="}, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTg1MzgwOnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozOToyNlrOGgrJfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDoxNzo1MFrOGgu1PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxNDU1Ng==", "bodyText": "hmm, Do we have to add a responseInfo to the queue when writeAndFlush failed?", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436914556", "createdAt": "2020-06-08T18:39:26Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -106,14 +109,20 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                     requestInfo.setStreamSendTime(System.currentTimeMillis());\n                   } else {\n                     http2ClientMetrics.http2StreamWriteAndFlushErrorCount.inc();\n-                    logger.warn(\"Stream writeAndFlush fail: {}\", future.cause());\n+                    logger.warn(\"Stream {} {} writeAndFlush fail. Cause: \", streamChannel.hashCode(), streamChannel,\n+                        future.cause());\n+                    // Set attribute null and close stream. It's possible that exception was fired on parent channel close\n+                    // and triggered releaseAndCloseStreamChannel before, but it's tolerable to call releaseAndCloseStreamChannel\n+                    // again as streamChannel close happen in event loop. No impact to main flow.\n+                    // For netty 4.1.42.Final, streamChannel can be close twice without any exception.\n+                    releaseAndCloseStreamChannel(streamChannel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3NDkwOQ==", "bodyText": "yes, we needed....", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436974909", "createdAt": "2020-06-08T20:17:50Z", "author": {"login": "zzmao"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -106,14 +109,20 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                     requestInfo.setStreamSendTime(System.currentTimeMillis());\n                   } else {\n                     http2ClientMetrics.http2StreamWriteAndFlushErrorCount.inc();\n-                    logger.warn(\"Stream writeAndFlush fail: {}\", future.cause());\n+                    logger.warn(\"Stream {} {} writeAndFlush fail. Cause: \", streamChannel.hashCode(), streamChannel,\n+                        future.cause());\n+                    // Set attribute null and close stream. It's possible that exception was fired on parent channel close\n+                    // and triggered releaseAndCloseStreamChannel before, but it's tolerable to call releaseAndCloseStreamChannel\n+                    // again as streamChannel close happen in event loop. No impact to main flow.\n+                    // For netty 4.1.42.Final, streamChannel can be close twice without any exception.\n+                    releaseAndCloseStreamChannel(streamChannel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxNDU1Ng=="}, "originalCommit": {"oid": "35c68aa0205bfc84741e64a5595013a33ef6dc31"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTkxNjQ5OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannelResponseHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODo1ODoyMlrOGgrxrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODo1ODoyMlrOGgrxrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyNDg0NA==", "bodyText": "we should use getAndSet(null) here to release the reference as well.", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r436924844", "createdAt": "2020-06-08T18:58:22Z", "author": {"login": "justinlin-linkedin"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannelResponseHandler.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+package com.github.ambry.network.http2;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import io.netty.util.concurrent.Promise;\n+\n+\n+/**\n+ * Netty handler for {@link Http2BlockingChannel} to handle {@link FullHttpResponse}.\n+ */\n+@ChannelHandler.Sharable\n+public class Http2BlockingChannelResponseHandler extends SimpleChannelInboundHandler<FullHttpResponse> {\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, FullHttpResponse msg) throws Exception {\n+    Promise<ByteBuf> promise = ctx.channel().attr(Http2BlockingChannel.RESPONSE_PROMISE).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f129615a23a33387b2868478c91e69b578245012"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjUwMjU0OnYy", "diffSide": "RIGHT", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannelStreamChannelInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToxNDowMlrOGhYm_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToxNDowMlrOGhYm_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1OTM4OQ==", "bodyText": "nit: final for these 3.", "url": "https://github.com/linkedin/ambry/pull/1551#discussion_r437659389", "createdAt": "2020-06-09T19:14:02Z", "author": {"login": "cgtz"}, "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2BlockingChannelStreamChannelInitializer.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *\n+ */\n+package com.github.ambry.network.http2;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.http.HttpObjectAggregator;\n+import io.netty.handler.codec.http2.Http2StreamFrameToHttpObjectCodec;\n+\n+\n+/**\n+ * A ChannelInitializer used to setup stream channel pipeline once stream is created in {@link MultiplexedChannelRecord}.\n+ */\n+public class Http2BlockingChannelStreamChannelInitializer extends ChannelInitializer {\n+  private final int http2MaxContentLength;\n+  private static Http2StreamFrameToHttpObjectCodec http2StreamFrameToHttpObjectCodec =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1819af5afd75846ae8dacf6facc6719232a261"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1233, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}