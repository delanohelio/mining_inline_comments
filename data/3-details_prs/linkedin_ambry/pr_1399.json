{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5ODYzNzg4", "number": 1399, "title": "Improve Helix bootstrap tool for moving replica", "bodyText": "Assigned dedicated thread for each dc to speed up upgrading clustermap in Helix. It allows tool to bootstrap/upgrade multiple dcs concurrently.\nIntroduced an option that only update resource (IdealState) in Helix without changing InstanceConfig. This is used when initiating replica movement (We change IdealState in Helix to trigger moving replica and Helix is responsible for notifying nodes that are involved). The InstanceConfig will be updated eventually by ambry nodes themselves.", "createdAt": "2020-02-25T23:09:45Z", "url": "https://github.com/linkedin/ambry/pull/1399", "merged": true, "mergeCommit": {"oid": "f1f9194c82e480f849693a3e6c10e5d5ae122973"}, "closed": true, "closedAt": "2020-03-05T18:41:21Z", "author": {"login": "jsjtzyy"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcH6ZA1AH2gAyMzc5ODYzNzg4OmJmZWM1YTRhM2FiYzhiN2IxYzc0YTZlYzI3MzQyZjg0MDA5OTYyZTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKv_tXgFqTM2OTgxODM5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bfec5a4a3abc8b7b1c74a6ec27342f84009962e1", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/bfec5a4a3abc8b7b1c74a6ec27342f84009962e1", "committedDate": "2020-02-25T23:05:22Z", "message": "Improve Helix bootstrap tool for moving replica\n\n1. assigned dedicated thread for each dc when upgrading Helix clustermap.\nThis allows tool to bootstrap/upgrade multiple dcs concurrently.\n2. introduced an option that only update resource (IdealState) in Helix\nwithout changing InstanceConfig. This is used when triggering replica\nmovement. The InstanceConfig will be updated eventually by ambry node\nitself"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e57f68075c8597be4b656e6445dba8b157fdb282", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/e57f68075c8597be4b656e6445dba8b157fdb282", "committedDate": "2020-02-26T02:37:44Z", "message": "add unit test to verify resouceChangeOnly option"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0744bcc0680ddd00703d22663958382f06c510e6", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/0744bcc0680ddd00703d22663958382f06c510e6", "committedDate": "2020-02-26T05:42:29Z", "message": "java doc and add one more test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDE3MjM3", "url": "https://github.com/linkedin/ambry/pull/1399#pullrequestreview-367417237", "createdAt": "2020-03-02T18:15:40Z", "commit": {"oid": "0744bcc0680ddd00703d22663958382f06c510e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8354612cd60a37d59441c0809aeae811b475f612", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/8354612cd60a37d59441c0809aeae811b475f612", "committedDate": "2020-03-02T23:30:24Z", "message": "clean up stuff"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MjU4MTYw", "url": "https://github.com/linkedin/ambry/pull/1399#pullrequestreview-369258160", "createdAt": "2020-03-05T02:26:41Z", "commit": {"oid": "8354612cd60a37d59441c0809aeae811b475f612"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMjoyNjo0MlrOFyEfug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMjoyNjo0MlrOFyEfug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA0Njc3OA==", "bodyText": "Since instancesAdded is changed during execution, so does it need to be final?", "url": "https://github.com/linkedin/ambry/pull/1399#discussion_r388046778", "createdAt": "2020-03-05T02:26:42Z", "author": {"login": "xuhao417347761"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixBootstrapUpgradeUtil.java", "diffHunk": "@@ -94,22 +98,28 @@\n   private final String zkLayoutPath;\n   private final String stateModelDef;\n   private final Map<String, HelixAdmin> adminForDc = new HashMap<>();\n-  private final Map<String, Map<DiskId, SortedSet<Replica>>> instanceToDiskReplicasMap = new HashMap<>();\n-  private final Map<String, Map<String, DataNodeId>> dcToInstanceNameToDataNodeId = new HashMap<>();\n+  // These two maps should be concurrent map because they are accessed in multi-threaded context (see addUpdateInstances\n+  // method).\n+  // For now, the inner map doesn't need to be concurrent map because it is within a certain dc which means there should\n+  // be only one thread that updates it.\n+  private final ConcurrentHashMap<String, Map<DiskId, SortedSet<Replica>>> instanceToDiskReplicasMap =\n+      new ConcurrentHashMap<>();\n+  private final ConcurrentHashMap<String, Map<String, DataNodeId>> dcToInstanceNameToDataNodeId =\n+      new ConcurrentHashMap<>();\n   private final int maxPartitionsInOneResource;\n   private final boolean dryRun;\n   private final boolean forceRemove;\n-  private int maxResource = -1;\n+  private final boolean resourceChangeOnly;\n   private final String clusterName;\n   private boolean expectMoreInHelixDuringValidate = false;\n-  private Map<String, Set<String>> instancesNotForceRemovedByDc = new HashMap<>();\n-  private Map<String, Set<String>> partitionsNotForceRemovedByDc = new HashMap<>();\n-  private int instancesAdded = 0;\n-  private int instancesUpdated = 0;\n-  private int instancesDropped = 0;\n-  private int resourcesAdded = 0;\n-  private int resourcesUpdated = 0;\n-  private int resourcesDropped = 0;\n+  private ConcurrentHashMap<String, Set<String>> instancesNotForceRemovedByDc = new ConcurrentHashMap<>();\n+  private ConcurrentHashMap<String, Set<String>> partitionsNotForceRemovedByDc = new ConcurrentHashMap<>();\n+  private final AtomicInteger instancesAdded = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8354612cd60a37d59441c0809aeae811b475f612"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MjYwNjQx", "url": "https://github.com/linkedin/ambry/pull/1399#pullrequestreview-369260641", "createdAt": "2020-03-05T02:35:20Z", "commit": {"oid": "8354612cd60a37d59441c0809aeae811b475f612"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMjozNToyMFrOFyEnyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMjozNToyMFrOFyEnyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA0ODg0Mg==", "bodyText": "Too long, better to split it.", "url": "https://github.com/linkedin/ambry/pull/1399#discussion_r388048842", "createdAt": "2020-03-05T02:35:20Z", "author": {"login": "xuhao417347761"}, "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixBootstrapUpgradeUtil.java", "diffHunk": "@@ -645,35 +674,41 @@ private void addUpdateInstances(String dcName, Map<String, Set<String>> partitio\n   private void addUpdateResources(String dcName, Map<String, Set<String>> partitionsToInstancesInDc) {\n     HelixAdmin dcAdmin = adminForDc.get(dcName);\n     List<String> resourcesInCluster = dcAdmin.getResourcesInCluster(clusterName);\n+    // maxResource may vary from one dc to another (special partition class allows partitions to exist in one dc only)\n+    int maxResource = -1;\n     for (String resourceName : resourcesInCluster) {\n       boolean resourceModified = false;\n       if (!resourceName.matches(\"\\\\d+\")) {\n         // there may be other resources created under the cluster (say, for stats) that are not part of the\n         // cluster map. These will be ignored.\n         continue;\n       }\n-      maxResource = Math.max(maxResource, Integer.valueOf(resourceName));\n+      maxResource = Math.max(maxResource, Integer.parseInt(resourceName));\n       IdealState resourceIs = dcAdmin.getResourceIdealState(clusterName, resourceName);\n       for (String partitionName : new HashSet<>(resourceIs.getPartitionSet())) {\n         Set<String> instanceSetInHelix = resourceIs.getInstanceSet(partitionName);\n         Set<String> instanceSetInStatic = partitionsToInstancesInDc.remove(partitionName);\n         if (instanceSetInStatic == null || instanceSetInStatic.isEmpty()) {\n           if (forceRemove) {\n-            info(\"*** Partition {} no longer present in the static clustermap, removing from Resource *** \",\n-                partitionName);\n+            info(\"[{}] *** Partition {} no longer present in the static clustermap, removing from Resource *** \",\n+                dcName.toUpperCase(), partitionName);\n             // this is a hacky way of removing a partition from the resource, as there isn't another way today.\n             // Helix team is planning to provide an API for this.\n             resourceIs.getRecord().getListFields().remove(partitionName);\n             resourceModified = true;\n           } else {\n             info(\n-                \"*** forceRemove option not provided, resources will not be removed (use --forceRemove to forcefully remove)\");\n+                \"[{}] *** forceRemove option not provided, resources will not be removed (use --forceRemove to forcefully remove)\",\n+                dcName.toUpperCase());\n             expectMoreInHelixDuringValidate = true;\n-            partitionsNotForceRemovedByDc.computeIfAbsent(dcName, k -> new HashSet<>()).add(partitionName);\n+            partitionsNotForceRemovedByDc.computeIfAbsent(dcName, k -> ConcurrentHashMap.newKeySet())\n+                .add(partitionName);\n           }\n         } else if (!instanceSetInStatic.equals(instanceSetInHelix)) {\n-          info(\"Different instance sets for partition {} under resource {}. Updating Helix using static.\",\n-              partitionName, resourceName);\n+          info(\n+              \"[{}] Different instance sets for partition {} under resource {}. Updating Helix using static. Previous instance set: [{}], new instance set: [{}]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8354612cd60a37d59441c0809aeae811b475f612"}, "originalPosition": 336}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "248d0dd10e6874c8dd8b781fbfda7e53ec473e2d", "author": {"user": {"login": "jsjtzyy", "name": "Yingyi Zhang"}}, "url": "https://github.com/linkedin/ambry/commit/248d0dd10e6874c8dd8b781fbfda7e53ec473e2d", "committedDate": "2020-03-05T06:20:21Z", "message": "address Hao's comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODE4Mzk4", "url": "https://github.com/linkedin/ambry/pull/1399#pullrequestreview-369818398", "createdAt": "2020-03-05T18:40:27Z", "commit": {"oid": "248d0dd10e6874c8dd8b781fbfda7e53ec473e2d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1641, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}