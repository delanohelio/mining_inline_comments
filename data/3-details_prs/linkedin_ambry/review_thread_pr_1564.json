{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NzI0NDI5", "number": 1564, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo1MjozNFrOEFuQlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMToxNToxMlrOEGkOoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDM2MjQ2OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo1MjozNFrOGkFXzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowMTo1NVrOGkyGJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4OTkzNQ==", "bodyText": "isEmpty() is simpler.", "url": "https://github.com/linkedin/ambry/pull/1564#discussion_r440489935", "createdAt": "2020-06-15T22:52:34Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "diffHunk": "@@ -240,8 +240,13 @@ private void removeCloudReplica(String partitionName) {\n   /**\n    * Randomly select a {@link DataNodeId} from list of {@code vcrNodes}.\n    * @return randomly selected {@link DataNodeId} object.\n+   * @throws ReplicationException if there are no vcr nodes.\n    */\n-  private DataNodeId getCloudDataNode() {\n+  private DataNodeId getCloudDataNode() throws ReplicationException {\n+    if (vcrNodes.get().size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbde88b8c1f4b442107277c0f717022743d3adbc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMjY5Mw==", "bodyText": "done.", "url": "https://github.com/linkedin/ambry/pull/1564#discussion_r441222693", "createdAt": "2020-06-17T01:01:55Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "diffHunk": "@@ -240,8 +240,13 @@ private void removeCloudReplica(String partitionName) {\n   /**\n    * Randomly select a {@link DataNodeId} from list of {@code vcrNodes}.\n    * @return randomly selected {@link DataNodeId} object.\n+   * @throws ReplicationException if there are no vcr nodes.\n    */\n-  private DataNodeId getCloudDataNode() {\n+  private DataNodeId getCloudDataNode() throws ReplicationException {\n+    if (vcrNodes.get().size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4OTkzNQ=="}, "originalCommit": {"oid": "bbde88b8c1f4b442107277c0f717022743d3adbc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDM2MjU2OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo1MjozN1rOGkFX3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowMjoxOFrOGkyGhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4OTk0OQ==", "bodyText": "No need to log if the same message is passed to exception.  Also say VCR.", "url": "https://github.com/linkedin/ambry/pull/1564#discussion_r440489949", "createdAt": "2020-06-15T22:52:37Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "diffHunk": "@@ -240,8 +240,13 @@ private void removeCloudReplica(String partitionName) {\n   /**\n    * Randomly select a {@link DataNodeId} from list of {@code vcrNodes}.\n    * @return randomly selected {@link DataNodeId} object.\n+   * @throws ReplicationException if there are no vcr nodes.\n    */\n-  private DataNodeId getCloudDataNode() {\n+  private DataNodeId getCloudDataNode() throws ReplicationException {\n+    if (vcrNodes.get().size() == 0) {\n+      logger.error(\"No vcr node found to replicate partition from cloud.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbde88b8c1f4b442107277c0f717022743d3adbc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMjc5MA==", "bodyText": "fixed.", "url": "https://github.com/linkedin/ambry/pull/1564#discussion_r441222790", "createdAt": "2020-06-17T01:02:18Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "diffHunk": "@@ -240,8 +240,13 @@ private void removeCloudReplica(String partitionName) {\n   /**\n    * Randomly select a {@link DataNodeId} from list of {@code vcrNodes}.\n    * @return randomly selected {@link DataNodeId} object.\n+   * @throws ReplicationException if there are no vcr nodes.\n    */\n-  private DataNodeId getCloudDataNode() {\n+  private DataNodeId getCloudDataNode() throws ReplicationException {\n+    if (vcrNodes.get().size() == 0) {\n+      logger.error(\"No vcr node found to replicate partition from cloud.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4OTk0OQ=="}, "originalCommit": {"oid": "bbde88b8c1f4b442107277c0f717022743d3adbc"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDM4NzE0OnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzowNDoyOFrOGkFmjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMToyNjoyNlrOGkyd1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzcxMA==", "bodyText": "I realize this isn't new code, but it seems inefficient for a getter method to have to copy a collection to an array every time it needs to get an element from it.  It makes me wonder if the concurrent set is really the optimal data structure for this.", "url": "https://github.com/linkedin/ambry/pull/1564#discussion_r440493710", "createdAt": "2020-06-15T23:04:28Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "diffHunk": "@@ -240,8 +240,13 @@ private void removeCloudReplica(String partitionName) {\n   /**\n    * Randomly select a {@link DataNodeId} from list of {@code vcrNodes}.\n    * @return randomly selected {@link DataNodeId} object.\n+   * @throws ReplicationException if there are no vcr nodes.\n    */\n-  private DataNodeId getCloudDataNode() {\n+  private DataNodeId getCloudDataNode() throws ReplicationException {\n+    if (vcrNodes.get().size() == 0) {\n+      logger.error(\"No vcr node found to replicate partition from cloud.\");\n+      throw new ReplicationException(\"No vcr node found to replicate partition from cloud.\");\n+    }\n     return vcrNodes.get().toArray(new CloudDataNode[0])[Utils.getRandomShort(new Random()) % vcrNodes.get().size()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbde88b8c1f4b442107277c0f717022743d3adbc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NDAzMg==", "bodyText": "It's fine to address last comment in a future PR.", "url": "https://github.com/linkedin/ambry/pull/1564#discussion_r440494032", "createdAt": "2020-06-15T23:05:27Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "diffHunk": "@@ -240,8 +240,13 @@ private void removeCloudReplica(String partitionName) {\n   /**\n    * Randomly select a {@link DataNodeId} from list of {@code vcrNodes}.\n    * @return randomly selected {@link DataNodeId} object.\n+   * @throws ReplicationException if there are no vcr nodes.\n    */\n-  private DataNodeId getCloudDataNode() {\n+  private DataNodeId getCloudDataNode() throws ReplicationException {\n+    if (vcrNodes.get().size() == 0) {\n+      logger.error(\"No vcr node found to replicate partition from cloud.\");\n+      throw new ReplicationException(\"No vcr node found to replicate partition from cloud.\");\n+    }\n     return vcrNodes.get().toArray(new CloudDataNode[0])[Utils.getRandomShort(new Random()) % vcrNodes.get().size()];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzcxMA=="}, "originalCommit": {"oid": "bbde88b8c1f4b442107277c0f717022743d3adbc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyODc1Nw==", "bodyText": "You are right. It makes sense to make it a list. We modify it only in the CloudToStoreReplicationManager::handleChangeInVcrNodes() method and access it only in the CloudToStoreReplicationManager::getCloudDataNode(). And it makes sense to modify the atomic reference directly.  Have made the change.", "url": "https://github.com/linkedin/ambry/pull/1564#discussion_r441228757", "createdAt": "2020-06-17T01:26:26Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "diffHunk": "@@ -240,8 +240,13 @@ private void removeCloudReplica(String partitionName) {\n   /**\n    * Randomly select a {@link DataNodeId} from list of {@code vcrNodes}.\n    * @return randomly selected {@link DataNodeId} object.\n+   * @throws ReplicationException if there are no vcr nodes.\n    */\n-  private DataNodeId getCloudDataNode() {\n+  private DataNodeId getCloudDataNode() throws ReplicationException {\n+    if (vcrNodes.get().size() == 0) {\n+      logger.error(\"No vcr node found to replicate partition from cloud.\");\n+      throw new ReplicationException(\"No vcr node found to replicate partition from cloud.\");\n+    }\n     return vcrNodes.get().toArray(new CloudDataNode[0])[Utils.getRandomShort(new Random()) % vcrNodes.get().size()];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzcxMA=="}, "originalCommit": {"oid": "bbde88b8c1f4b442107277c0f717022743d3adbc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzIwNDgxOnYy", "diffSide": "RIGHT", "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMToxNToxMlrOGlcWHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo0OTowMFrOGl78JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNDkwOA==", "bodyText": "I didn't notice it before, but I think initializing a new Random() each time will result in the same value each time.  At least that's how it used to behave, not sure if it's still the case.  Either way, I would initialize the Random statically and reuse.  I recommend adding a test case that calls this method consecutive times and verifies different results are returned.  And one to test the no-nodes exception case.", "url": "https://github.com/linkedin/ambry/pull/1564#discussion_r441914908", "createdAt": "2020-06-18T01:15:12Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "diffHunk": "@@ -240,9 +240,14 @@ private void removeCloudReplica(String partitionName) {\n   /**\n    * Randomly select a {@link DataNodeId} from list of {@code vcrNodes}.\n    * @return randomly selected {@link DataNodeId} object.\n+   * @throws ReplicationException if there are no vcr nodes.\n    */\n-  private DataNodeId getCloudDataNode() {\n-    return vcrNodes.get().toArray(new CloudDataNode[0])[Utils.getRandomShort(new Random()) % vcrNodes.get().size()];\n+  private DataNodeId getCloudDataNode() throws ReplicationException {\n+    List<CloudDataNode> nodes = vcrNodes.get();\n+    if (nodes.isEmpty()) {\n+      throw new ReplicationException(\"No VCR node found to replicate partition from cloud.\");\n+    }\n+    return nodes.get(Utils.getRandomShort(new Random()) % nodes.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600ce3d0d4acc1494b1da6c537f5628e17aa25ab"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3NzkxNg==", "bodyText": "Sure, I will change the Random to static, and add the tests.\nNote that ideally, in a perfect random setting, I assume it could be possible for a few calls to getNextInt() to return same value (Maybe this will happen rarely, but this is a possibility). So in my test I am just checking that multiple calls return more than one value.\nAs for the behavior of Random, from the constructor of Random it seems like every instantiation gets a unique seed. Below code snippet is from java.util.Random class.\n    /**\n     * Creates a new random number generator. This constructor sets\n     * the seed of the random number generator to a value very likely\n     * to be distinct from any other invocation of this constructor.\n     */\n    public Random() {\n        this(seedUniquifier() ^ System.nanoTime());\n    }\n\nAlso I wrote an independent test that sort of proves this.\npublic class RandomTest {\n\tpublic static void main(String[] args) {\n\t\tfor(int i = 0; i < 10; i++) {\n\t\t\tSystem.out.println(new Random().nextInt()%17);\n\t\t}\n\t}\n}", "url": "https://github.com/linkedin/ambry/pull/1564#discussion_r441977916", "createdAt": "2020-06-18T05:34:28Z", "author": {"login": "ankagrawal"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "diffHunk": "@@ -240,9 +240,14 @@ private void removeCloudReplica(String partitionName) {\n   /**\n    * Randomly select a {@link DataNodeId} from list of {@code vcrNodes}.\n    * @return randomly selected {@link DataNodeId} object.\n+   * @throws ReplicationException if there are no vcr nodes.\n    */\n-  private DataNodeId getCloudDataNode() {\n-    return vcrNodes.get().toArray(new CloudDataNode[0])[Utils.getRandomShort(new Random()) % vcrNodes.get().size()];\n+  private DataNodeId getCloudDataNode() throws ReplicationException {\n+    List<CloudDataNode> nodes = vcrNodes.get();\n+    if (nodes.isEmpty()) {\n+      throw new ReplicationException(\"No VCR node found to replicate partition from cloud.\");\n+    }\n+    return nodes.get(Utils.getRandomShort(new Random()) % nodes.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNDkwOA=="}, "originalCommit": {"oid": "600ce3d0d4acc1494b1da6c537f5628e17aa25ab"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMjU0OQ==", "bodyText": "My information was from at least 10 years ago, so they likely changed it since then.", "url": "https://github.com/linkedin/ambry/pull/1564#discussion_r442432549", "createdAt": "2020-06-18T18:49:00Z", "author": {"login": "lightningrob"}, "path": "ambry-replication/src/main/java/com/github/ambry/replication/CloudToStoreReplicationManager.java", "diffHunk": "@@ -240,9 +240,14 @@ private void removeCloudReplica(String partitionName) {\n   /**\n    * Randomly select a {@link DataNodeId} from list of {@code vcrNodes}.\n    * @return randomly selected {@link DataNodeId} object.\n+   * @throws ReplicationException if there are no vcr nodes.\n    */\n-  private DataNodeId getCloudDataNode() {\n-    return vcrNodes.get().toArray(new CloudDataNode[0])[Utils.getRandomShort(new Random()) % vcrNodes.get().size()];\n+  private DataNodeId getCloudDataNode() throws ReplicationException {\n+    List<CloudDataNode> nodes = vcrNodes.get();\n+    if (nodes.isEmpty()) {\n+      throw new ReplicationException(\"No VCR node found to replicate partition from cloud.\");\n+    }\n+    return nodes.get(Utils.getRandomShort(new Random()) % nodes.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNDkwOA=="}, "originalCommit": {"oid": "600ce3d0d4acc1494b1da6c537f5628e17aa25ab"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1274, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}