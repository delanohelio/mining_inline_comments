{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMjIwNzY1", "number": 1440, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjoyMTo0NVrOEtdOTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjoyNTozMlrOEtdT-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTAwMTczOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjoyMTo0NVrOHhQQRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo0MTo1NlrOHh33aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzMTM2NQ==", "bodyText": "The damage might already be done at this point. Not even starting the tracer and instrumentation seems to be safer.\nTo deal with the situation where calling ManagementFactory.getRuntimeMXBean() might cause a deadlock if a JUL logger gets initialized, we could add a flag to disable the bootstrap checks.\nBut I don't see an indication that any loggers are used when ManagementFactory.getRuntimeMXBean() is called. I would be very surprised if it was the case.\nPersonally, I would trade this unlikely potential issue that can be mitigated with a flag with the risk that's imposed by first instrumenting and then un-instrumenting JVMs with unsupported flags.", "url": "https://github.com/elastic/apm-agent-java/pull/1440#discussion_r504631365", "createdAt": "2020-10-14T12:21:45Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -539,6 +546,11 @@ private synchronized void startSync() {\n             logger.warn(\"Trying to start an already initialized agent\");\n             return;\n         }\n+        if (!JvmRuntimeInfo.isJvmConfigurationSupported()) {\n+            logger.error(\"JVM configuration is not supported. The agent will not be started and classes are un-instrumented.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MjYyMg==", "bodyText": "Forgot to submit this yesterday^ \ud83d\ude44", "url": "https://github.com/elastic/apm-agent-java/pull/1440#discussion_r505242622", "createdAt": "2020-10-15T07:09:38Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -539,6 +546,11 @@ private synchronized void startSync() {\n             logger.warn(\"Trying to start an already initialized agent\");\n             return;\n         }\n+        if (!JvmRuntimeInfo.isJvmConfigurationSupported()) {\n+            logger.error(\"JVM configuration is not supported. The agent will not be started and classes are un-instrumented.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzMTM2NQ=="}, "originalCommit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI4MDM2MA==", "bodyText": "Yes, testing the changes now.\nThe reason I assume the damage is not already done is the fact that reports we got described a crash that happens some time after agent is loaded, maybe only happen on JITed code \ud83e\udd37\u200d\u2642\ufe0f .", "url": "https://github.com/elastic/apm-agent-java/pull/1440#discussion_r505280360", "createdAt": "2020-10-15T07:41:56Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -539,6 +546,11 @@ private synchronized void startSync() {\n             logger.warn(\"Trying to start an already initialized agent\");\n             return;\n         }\n+        if (!JvmRuntimeInfo.isJvmConfigurationSupported()) {\n+            logger.error(\"JVM configuration is not supported. The agent will not be started and classes are un-instrumented.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzMTM2NQ=="}, "originalCommit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTAxNjI0OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/JvmRuntimeInfo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjoyNTozMlrOHhQZGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoxMTowNFrOHh1qVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzMzYyNw==", "bodyText": "Could we check for tracer state and throw an exception if triggered before tracer has been started ?", "url": "https://github.com/elastic/apm-agent-java/pull/1440#discussion_r504633627", "createdAt": "2020-10-14T12:25:32Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/JvmRuntimeInfo.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+\n+import javax.annotation.Nullable;\n+import java.lang.management.ManagementFactory;\n+import java.util.List;\n+\n+public class JvmRuntimeInfo {\n+\n+    @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+    private static String javaVersion;\n+    @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+    private static String javaVmName;\n+    @Nullable private static String javaVmVersion;\n+    private static int majorVersion;\n+    private static int updateVersion;\n+    private static boolean isHotSpot;\n+    private static boolean isIbmJ9;\n+\n+    static {\n+        parseVmInfo(System.getProperty(\"java.version\"), System.getProperty(\"java.vm.name\"), System.getProperty(\"java.vm.version\"));\n+    }\n+\n+    /**\n+     * Parses Java major version, update version and JVM vendor\n+     *\n+     * @param version   jvm version, from {@code System.getProperty(\"java.version\")}\n+     * @param vmName    jvm name, from {@code System.getProperty(\"java.vm.name\")}\n+     * @param vmVersion jvm version, from {@code System.getProperty(\"java.vm.version\")}\n+     */\n+    // package-protected for testing\n+    static void parseVmInfo(String version, String vmName, @Nullable String vmVersion) {\n+        javaVersion = version;\n+        javaVmName = vmName;\n+        javaVmVersion = vmVersion;\n+\n+        // new scheme introduced in java 9, thus we can use it as a shortcut\n+        if (version.startsWith(\"1.\")) {\n+            majorVersion = Character.digit(version.charAt(2), 10);\n+        } else {\n+            String majorAsString = version.split(\"\\\\.\")[0];\n+            int indexOfDash = majorAsString.indexOf('-');\n+            if (indexOfDash > 0) {\n+                majorAsString = majorAsString.substring(0, indexOfDash);\n+            }\n+            majorVersion = Integer.parseInt(majorAsString);\n+        }\n+\n+        int updateIndex = version.lastIndexOf(\"_\");\n+        if (updateIndex <= 0) {\n+            // GA release like '1.8.0'\n+            updateVersion = 0;\n+        } else {\n+            String updateVersionString;\n+            int versionSuffixIndex = version.indexOf('-', updateIndex + 1);\n+            if (versionSuffixIndex <= 0) {\n+                updateVersionString = version.substring(updateIndex + 1);\n+            } else {\n+                updateVersionString = version.substring(updateIndex + 1, versionSuffixIndex);\n+            }\n+            try {\n+                updateVersion = Integer.parseInt(updateVersionString);\n+            } catch (NumberFormatException e) {\n+                // in case of unknown format, we just support by default\n+                System.err.println(\"Unsupported format of the java.version system property - \" + version);\n+                updateVersion = -1;\n+            }\n+        }\n+\n+        isHotSpot = vmName.contains(\"HotSpot(TM)\") || vmName.contains(\"OpenJDK\");\n+        isIbmJ9 = vmName.contains(\"IBM J9\");\n+    }\n+\n+    public static String getJavaVersion() {\n+        return javaVersion;\n+    }\n+\n+    public static String getJavaVmName() {\n+        return javaVmName;\n+    }\n+\n+    @Nullable\n+    public static String getJavaVmVersion() {\n+        return javaVmVersion;\n+    }\n+\n+    public static int getMajorVersion() {\n+        return majorVersion;\n+    }\n+\n+    /**\n+     * Checks if a given version of the JVM is likely supported by this agent.\n+     * <br>\n+     * Supports values provided before and after https://openjdk.java.net/jeps/223, in case parsing fails due to an\n+     * unknown version format, we assume it's supported, thus this method might return false positives, but never false\n+     * negatives.\n+     *\n+     * @return true if the version is supported, false otherwise\n+     */\n+    public static boolean isJavaVersionSupported() {\n+        if (majorVersion < 7) {\n+            // given code is compiled with java 7, this one is unlikely in practice\n+            return false;\n+        }\n+        if (isHotSpot) {\n+            return isHotSpotVersionSupported();\n+        } else if (isIbmJ9) {\n+            return isIbmJ9VersionSupported();\n+        }\n+        // innocent until proven guilty\n+        return true;\n+    }\n+\n+    private static boolean isHotSpotVersionSupported() {\n+        if (updateVersion < 0) {\n+            return true;\n+        }\n+\n+        switch (majorVersion) {\n+            case 7:\n+                // versions prior to that have unreliable invoke dynamic support according to https://groovy-lang.org/indy.html\n+                return updateVersion >= 60;\n+            case 8:\n+                return updateVersion >= 40;\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    private static boolean isIbmJ9VersionSupported() {\n+        switch (majorVersion) {\n+            case 7:\n+                return false;\n+            case 8:\n+                // early versions crash during invokedynamic bootstrap\n+                // the exact version that fixes that error is currently not known\n+                // presumably, service refresh 5 (build 2.8) fixes the issue\n+                return !\"2.8\".equals(javaVmVersion);\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    /**\n+     * NOTE: THIS METHOD REQUIRES JMX OPERATION, THEREFORE IS SHOULD ONLY BE USED WITHIN OR AFTER THE TRACER HAVE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIwMzE3Nw==", "bodyText": "I didn't want to do any JMX query at initialization time because of my JULI deadlock trauma (this kicks all kind of initializations).\nHowever, @felixbarny feels it is safe enough to do this simple JMX query very early on, as long as we don't try to getPlatformMBeanSerever. It certainly simplifies things a lot (no need to uninstrument classes just after they are done being instrumented). So we'll go with that. I will test and merge the change soon", "url": "https://github.com/elastic/apm-agent-java/pull/1440#discussion_r505203177", "createdAt": "2020-10-15T06:32:56Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/JvmRuntimeInfo.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+\n+import javax.annotation.Nullable;\n+import java.lang.management.ManagementFactory;\n+import java.util.List;\n+\n+public class JvmRuntimeInfo {\n+\n+    @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+    private static String javaVersion;\n+    @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+    private static String javaVmName;\n+    @Nullable private static String javaVmVersion;\n+    private static int majorVersion;\n+    private static int updateVersion;\n+    private static boolean isHotSpot;\n+    private static boolean isIbmJ9;\n+\n+    static {\n+        parseVmInfo(System.getProperty(\"java.version\"), System.getProperty(\"java.vm.name\"), System.getProperty(\"java.vm.version\"));\n+    }\n+\n+    /**\n+     * Parses Java major version, update version and JVM vendor\n+     *\n+     * @param version   jvm version, from {@code System.getProperty(\"java.version\")}\n+     * @param vmName    jvm name, from {@code System.getProperty(\"java.vm.name\")}\n+     * @param vmVersion jvm version, from {@code System.getProperty(\"java.vm.version\")}\n+     */\n+    // package-protected for testing\n+    static void parseVmInfo(String version, String vmName, @Nullable String vmVersion) {\n+        javaVersion = version;\n+        javaVmName = vmName;\n+        javaVmVersion = vmVersion;\n+\n+        // new scheme introduced in java 9, thus we can use it as a shortcut\n+        if (version.startsWith(\"1.\")) {\n+            majorVersion = Character.digit(version.charAt(2), 10);\n+        } else {\n+            String majorAsString = version.split(\"\\\\.\")[0];\n+            int indexOfDash = majorAsString.indexOf('-');\n+            if (indexOfDash > 0) {\n+                majorAsString = majorAsString.substring(0, indexOfDash);\n+            }\n+            majorVersion = Integer.parseInt(majorAsString);\n+        }\n+\n+        int updateIndex = version.lastIndexOf(\"_\");\n+        if (updateIndex <= 0) {\n+            // GA release like '1.8.0'\n+            updateVersion = 0;\n+        } else {\n+            String updateVersionString;\n+            int versionSuffixIndex = version.indexOf('-', updateIndex + 1);\n+            if (versionSuffixIndex <= 0) {\n+                updateVersionString = version.substring(updateIndex + 1);\n+            } else {\n+                updateVersionString = version.substring(updateIndex + 1, versionSuffixIndex);\n+            }\n+            try {\n+                updateVersion = Integer.parseInt(updateVersionString);\n+            } catch (NumberFormatException e) {\n+                // in case of unknown format, we just support by default\n+                System.err.println(\"Unsupported format of the java.version system property - \" + version);\n+                updateVersion = -1;\n+            }\n+        }\n+\n+        isHotSpot = vmName.contains(\"HotSpot(TM)\") || vmName.contains(\"OpenJDK\");\n+        isIbmJ9 = vmName.contains(\"IBM J9\");\n+    }\n+\n+    public static String getJavaVersion() {\n+        return javaVersion;\n+    }\n+\n+    public static String getJavaVmName() {\n+        return javaVmName;\n+    }\n+\n+    @Nullable\n+    public static String getJavaVmVersion() {\n+        return javaVmVersion;\n+    }\n+\n+    public static int getMajorVersion() {\n+        return majorVersion;\n+    }\n+\n+    /**\n+     * Checks if a given version of the JVM is likely supported by this agent.\n+     * <br>\n+     * Supports values provided before and after https://openjdk.java.net/jeps/223, in case parsing fails due to an\n+     * unknown version format, we assume it's supported, thus this method might return false positives, but never false\n+     * negatives.\n+     *\n+     * @return true if the version is supported, false otherwise\n+     */\n+    public static boolean isJavaVersionSupported() {\n+        if (majorVersion < 7) {\n+            // given code is compiled with java 7, this one is unlikely in practice\n+            return false;\n+        }\n+        if (isHotSpot) {\n+            return isHotSpotVersionSupported();\n+        } else if (isIbmJ9) {\n+            return isIbmJ9VersionSupported();\n+        }\n+        // innocent until proven guilty\n+        return true;\n+    }\n+\n+    private static boolean isHotSpotVersionSupported() {\n+        if (updateVersion < 0) {\n+            return true;\n+        }\n+\n+        switch (majorVersion) {\n+            case 7:\n+                // versions prior to that have unreliable invoke dynamic support according to https://groovy-lang.org/indy.html\n+                return updateVersion >= 60;\n+            case 8:\n+                return updateVersion >= 40;\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    private static boolean isIbmJ9VersionSupported() {\n+        switch (majorVersion) {\n+            case 7:\n+                return false;\n+            case 8:\n+                // early versions crash during invokedynamic bootstrap\n+                // the exact version that fixes that error is currently not known\n+                // presumably, service refresh 5 (build 2.8) fixes the issue\n+                return !\"2.8\".equals(javaVmVersion);\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    /**\n+     * NOTE: THIS METHOD REQUIRES JMX OPERATION, THEREFORE IS SHOULD ONLY BE USED WITHIN OR AFTER THE TRACER HAVE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzMzYyNw=="}, "originalCommit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0NDI0NA==", "bodyText": "I'd also recommend adding a way to disable the bootstrap checks, for example with a system property, in case it does cause problems. It can't be a config option as these get initialized later.", "url": "https://github.com/elastic/apm-agent-java/pull/1440#discussion_r505244244", "createdAt": "2020-10-15T07:11:04Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/JvmRuntimeInfo.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+\n+import javax.annotation.Nullable;\n+import java.lang.management.ManagementFactory;\n+import java.util.List;\n+\n+public class JvmRuntimeInfo {\n+\n+    @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+    private static String javaVersion;\n+    @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+    private static String javaVmName;\n+    @Nullable private static String javaVmVersion;\n+    private static int majorVersion;\n+    private static int updateVersion;\n+    private static boolean isHotSpot;\n+    private static boolean isIbmJ9;\n+\n+    static {\n+        parseVmInfo(System.getProperty(\"java.version\"), System.getProperty(\"java.vm.name\"), System.getProperty(\"java.vm.version\"));\n+    }\n+\n+    /**\n+     * Parses Java major version, update version and JVM vendor\n+     *\n+     * @param version   jvm version, from {@code System.getProperty(\"java.version\")}\n+     * @param vmName    jvm name, from {@code System.getProperty(\"java.vm.name\")}\n+     * @param vmVersion jvm version, from {@code System.getProperty(\"java.vm.version\")}\n+     */\n+    // package-protected for testing\n+    static void parseVmInfo(String version, String vmName, @Nullable String vmVersion) {\n+        javaVersion = version;\n+        javaVmName = vmName;\n+        javaVmVersion = vmVersion;\n+\n+        // new scheme introduced in java 9, thus we can use it as a shortcut\n+        if (version.startsWith(\"1.\")) {\n+            majorVersion = Character.digit(version.charAt(2), 10);\n+        } else {\n+            String majorAsString = version.split(\"\\\\.\")[0];\n+            int indexOfDash = majorAsString.indexOf('-');\n+            if (indexOfDash > 0) {\n+                majorAsString = majorAsString.substring(0, indexOfDash);\n+            }\n+            majorVersion = Integer.parseInt(majorAsString);\n+        }\n+\n+        int updateIndex = version.lastIndexOf(\"_\");\n+        if (updateIndex <= 0) {\n+            // GA release like '1.8.0'\n+            updateVersion = 0;\n+        } else {\n+            String updateVersionString;\n+            int versionSuffixIndex = version.indexOf('-', updateIndex + 1);\n+            if (versionSuffixIndex <= 0) {\n+                updateVersionString = version.substring(updateIndex + 1);\n+            } else {\n+                updateVersionString = version.substring(updateIndex + 1, versionSuffixIndex);\n+            }\n+            try {\n+                updateVersion = Integer.parseInt(updateVersionString);\n+            } catch (NumberFormatException e) {\n+                // in case of unknown format, we just support by default\n+                System.err.println(\"Unsupported format of the java.version system property - \" + version);\n+                updateVersion = -1;\n+            }\n+        }\n+\n+        isHotSpot = vmName.contains(\"HotSpot(TM)\") || vmName.contains(\"OpenJDK\");\n+        isIbmJ9 = vmName.contains(\"IBM J9\");\n+    }\n+\n+    public static String getJavaVersion() {\n+        return javaVersion;\n+    }\n+\n+    public static String getJavaVmName() {\n+        return javaVmName;\n+    }\n+\n+    @Nullable\n+    public static String getJavaVmVersion() {\n+        return javaVmVersion;\n+    }\n+\n+    public static int getMajorVersion() {\n+        return majorVersion;\n+    }\n+\n+    /**\n+     * Checks if a given version of the JVM is likely supported by this agent.\n+     * <br>\n+     * Supports values provided before and after https://openjdk.java.net/jeps/223, in case parsing fails due to an\n+     * unknown version format, we assume it's supported, thus this method might return false positives, but never false\n+     * negatives.\n+     *\n+     * @return true if the version is supported, false otherwise\n+     */\n+    public static boolean isJavaVersionSupported() {\n+        if (majorVersion < 7) {\n+            // given code is compiled with java 7, this one is unlikely in practice\n+            return false;\n+        }\n+        if (isHotSpot) {\n+            return isHotSpotVersionSupported();\n+        } else if (isIbmJ9) {\n+            return isIbmJ9VersionSupported();\n+        }\n+        // innocent until proven guilty\n+        return true;\n+    }\n+\n+    private static boolean isHotSpotVersionSupported() {\n+        if (updateVersion < 0) {\n+            return true;\n+        }\n+\n+        switch (majorVersion) {\n+            case 7:\n+                // versions prior to that have unreliable invoke dynamic support according to https://groovy-lang.org/indy.html\n+                return updateVersion >= 60;\n+            case 8:\n+                return updateVersion >= 40;\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    private static boolean isIbmJ9VersionSupported() {\n+        switch (majorVersion) {\n+            case 7:\n+                return false;\n+            case 8:\n+                // early versions crash during invokedynamic bootstrap\n+                // the exact version that fixes that error is currently not known\n+                // presumably, service refresh 5 (build 2.8) fixes the issue\n+                return !\"2.8\".equals(javaVmVersion);\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    /**\n+     * NOTE: THIS METHOD REQUIRES JMX OPERATION, THEREFORE IS SHOULD ONLY BE USED WITHIN OR AFTER THE TRACER HAVE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzMzYyNw=="}, "originalCommit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "originalPosition": 170}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 50, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}